
ACIS_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022b8  0800de60  0800de60  0001de60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010118  08010118  00032a10  2**0
                  CONTENTS
  4 .ARM          00000008  08010118  08010118  00020118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010120  08010120  00032a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010120  08010120  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010124  08010124  00020124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a10  20000000  08010128  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a48  20002a10  08012b38  00032a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008458  08012b38  00038458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a72  00000000  00000000  00032a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000058c7  00000000  00000000  0005c4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  00061d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cc0  00000000  00000000  000635a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027425  00000000  00000000  00065268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018019  00000000  00000000  0008c68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecb4f  00000000  00000000  000a46a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001911f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005890  00000000  00000000  00191270  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ebc2  00000000  00000000  00196b00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a10 	.word	0x20002a10
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800de48 	.word	0x0800de48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a14 	.word	0x20002a14
 800021c:	0800de48 	.word	0x0800de48

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <PK_Copy>:
PACKET_C(PK_GeneralStatusRequest);
PACKET_C(PK_GeneralStatusResponse);


int8_t PK_Copy(void * dest, void * source)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  if(dest == 0 || source == 0) return -1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <PK_Copy+0x16>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <PK_Copy+0x1c>
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e032      	b.n	800105a <PK_Copy+0x82>
  uint8_t * dest_data = (uint8_t*)dest;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	617b      	str	r3, [r7, #20]
  uint8_t * source_data = (uint8_t*)source;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
  int8_t length = dest_data[1];
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	73bb      	strb	r3, [r7, #14]
  if(dest_data[1] != source_data[1] || dest_data[0] != source_data[0] || length == 0 || length > 384) return -2;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d109      	bne.n	8001028 <PK_Copy+0x50>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d103      	bne.n	8001028 <PK_Copy+0x50>
 8001020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <PK_Copy+0x56>
 8001028:	f06f 0301 	mvn.w	r3, #1
 800102c:	e015      	b.n	800105a <PK_Copy+0x82>
  for(uint8_t i=2;i<length+2;i++)
 800102e:	2302      	movs	r3, #2
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e00a      	b.n	800104a <PK_Copy+0x72>
    *dest_data++ = *source_data++;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	1c53      	adds	r3, r2, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	1c59      	adds	r1, r3, #1
 800103e:	6179      	str	r1, [r7, #20]
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=2;i<length+2;i++)
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	3301      	adds	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001050:	3302      	adds	r3, #2
 8001052:	429a      	cmp	r2, r3
 8001054:	dbee      	blt.n	8001034 <PK_Copy+0x5c>
  return length;
 8001056:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800105a:	4618      	mov	r0, r3
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <acis_gui_task>:
volatile uint8_t StatusTimeout = 0;

static int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

static void acis_gui_task(void * argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
  eMenuItem_t eMenuItem = MenuMain;
 8001070:	2301      	movs	r3, #1
 8001072:	75fb      	strb	r3, [r7, #23]
  eMenuItem_t eOldMenu = MenuUndefined;
 8001074:	2300      	movs	r3, #0
 8001076:	75bb      	strb	r3, [r7, #22]
  uint32_t display_timeout = Delay_Tick;
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <acis_gui_task+0xf0>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t now;


  while(1)
  {
    now = Delay_Tick;
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <acis_gui_task+0xf0>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	60fb      	str	r3, [r7, #12]
    if(eMenuItem != eOldMenu)
 8001084:	7dfa      	ldrb	r2, [r7, #23]
 8001086:	7dbb      	ldrb	r3, [r7, #22]
 8001088:	429a      	cmp	r2, r3
 800108a:	d102      	bne.n	8001092 <acis_gui_task+0x2a>
    {
    }
    else
    {
      osDelay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f005 fe6d 	bl	8006d6c <osDelay>
    }

    switch (eMenuItem)
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d157      	bne.n	8001148 <acis_gui_task+0xe0>
    {
      case MenuMain :
      {

        if(DelayDiff(now, display_timeout) > 150000)
 8001098:	6939      	ldr	r1, [r7, #16]
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 fcf8 	bl	8001a90 <DelayDiff>
 80010a0:	4602      	mov	r2, r0
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <acis_gui_task+0xf4>)
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d952      	bls.n	800114e <acis_gui_task+0xe6>
        {
          display_timeout = now;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	613b      	str	r3, [r7, #16]
          lcd_clear();
 80010ac:	f000 fe1e 	bl	8001cec <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80010b0:	2301      	movs	r3, #1
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2340      	movs	r3, #64	; 0x40
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	2100      	movs	r1, #0
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 ff01 	bl	8001ec2 <lcd_rect>
          font_setFont(&rre_12x16);
 80010c0:	4827      	ldr	r0, [pc, #156]	; (8001160 <acis_gui_task+0xf8>)
 80010c2:	f007 fe53 	bl	8008d6c <font_setFont>
          font_printf(4,4,"RPM:   %5d",(int)StatusRPM);
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <acis_gui_task+0xfc>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d0:	ee17 3a90 	vmov	r3, s15
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <acis_gui_task+0x100>)
 80010d6:	2104      	movs	r1, #4
 80010d8:	2004      	movs	r0, #4
 80010da:	f009 f869 	bl	800a1b0 <font_printf>
          font_printf(4,4+font_getHeight(),"Ign:       %3dd", (int)StatusIgnition);
 80010de:	f007 fdeb 	bl	8008cb8 <font_getHeight>
 80010e2:	4603      	mov	r3, r0
 80010e4:	1d19      	adds	r1, r3, #4
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <acis_gui_task+0x104>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f0:	ee17 3a90 	vmov	r3, s15
 80010f4:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <acis_gui_task+0x108>)
 80010f6:	2004      	movs	r0, #4
 80010f8:	f009 f85a 	bl	800a1b0 <font_printf>
          font_printf(4,4+font_getHeight()*2,"Load:    %3d%%", (int)StatusLoad);
 80010fc:	f007 fddc 	bl	8008cb8 <font_getHeight>
 8001100:	4603      	mov	r3, r0
 8001102:	3302      	adds	r3, #2
 8001104:	0059      	lsls	r1, r3, #1
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <acis_gui_task+0x10c>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001110:	ee17 3a90 	vmov	r3, s15
 8001114:	4a18      	ldr	r2, [pc, #96]	; (8001178 <acis_gui_task+0x110>)
 8001116:	2004      	movs	r0, #4
 8001118:	f009 f84a 	bl	800a1b0 <font_printf>
          font_setFont(&rre_5x8);
 800111c:	4817      	ldr	r0, [pc, #92]	; (800117c <acis_gui_task+0x114>)
 800111e:	f007 fe25 	bl	8008d6c <font_setFont>
          font_printf(4,53,"Fuel type: %s", "fuel 1");
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <acis_gui_task+0x118>)
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <acis_gui_task+0x11c>)
 8001126:	2135      	movs	r1, #53	; 0x35
 8001128:	2004      	movs	r0, #4
 800112a:	f009 f841 	bl	800a1b0 <font_printf>
          if(StatusTimeout)
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <acis_gui_task+0x120>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <acis_gui_task+0xda>
            font_printf(84,53,"Timeout!");
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <acis_gui_task+0x124>)
 800113a:	2135      	movs	r1, #53	; 0x35
 800113c:	2054      	movs	r0, #84	; 0x54
 800113e:	f009 f837 	bl	800a1b0 <font_printf>
          lcd_update();
 8001142:	f000 fd47 	bl	8001bd4 <lcd_update>
        }

        break;
 8001146:	e002      	b.n	800114e <acis_gui_task+0xe6>
      }
      default :
        eMenuItem = MenuMain;
 8001148:	2301      	movs	r3, #1
 800114a:	75fb      	strb	r3, [r7, #23]
        break;
 800114c:	e000      	b.n	8001150 <acis_gui_task+0xe8>
        break;
 800114e:	bf00      	nop
    }

    eOldMenu = eMenuItem;
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	75bb      	strb	r3, [r7, #22]
    now = Delay_Tick;
 8001154:	e793      	b.n	800107e <acis_gui_task+0x16>
 8001156:	bf00      	nop
 8001158:	40000c00 	.word	0x40000c00
 800115c:	000249f0 	.word	0x000249f0
 8001160:	20002800 	.word	0x20002800
 8001164:	20002a2c 	.word	0x20002a2c
 8001168:	0800de6c 	.word	0x0800de6c
 800116c:	20002a38 	.word	0x20002a38
 8001170:	0800de78 	.word	0x0800de78
 8001174:	20002a30 	.word	0x20002a30
 8001178:	0800de88 	.word	0x0800de88
 800117c:	20002810 	.word	0x20002810
 8001180:	0800de98 	.word	0x0800de98
 8001184:	0800dea0 	.word	0x0800dea0
 8001188:	20002a3c 	.word	0x20002a3c
 800118c:	0800deb0 	.word	0x0800deb0

08001190 <acis_main_task>:
  }
}

void acis_main_task(void * argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  tGuiHandler = osThreadNew(acis_gui_task, NULL, &cTaskAttributes);
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <acis_main_task+0x38>)
 800119a:	2100      	movs	r1, #0
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <acis_main_task+0x3c>)
 800119e:	f005 fd8d 	bl	8006cbc <osThreadNew>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <acis_main_task+0x40>)
 80011a6:	601a      	str	r2, [r3, #0]
  while(1)
  {
    while(acis_send_command(etrACIS, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest)) <= 0)
 80011a8:	e002      	b.n	80011b0 <acis_main_task+0x20>
      osDelay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f005 fdde 	bl	8006d6c <osDelay>
    while(acis_send_command(etrACIS, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest)) <= 0)
 80011b0:	2204      	movs	r2, #4
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <acis_main_task+0x44>)
 80011b4:	2002      	movs	r0, #2
 80011b6:	f000 f83f 	bl	8001238 <acis_send_command>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	ddf4      	ble.n	80011aa <acis_main_task+0x1a>

    osDelay(50);
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f005 fdd3 	bl	8006d6c <osDelay>
    while(acis_send_command(etrACIS, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest)) <= 0)
 80011c6:	e7f3      	b.n	80011b0 <acis_main_task+0x20>
 80011c8:	0800df14 	.word	0x0800df14
 80011cc:	08001069 	.word	0x08001069
 80011d0:	20007c58 	.word	0x20007c58
 80011d4:	20000000 	.word	0x20000000

080011d8 <acis_parse_command>:
  }

}

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
  switch(msgBuf[0])
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d000      	beq.n	80011f0 <acis_parse_command+0x18>
      StatusLoad = PK_GeneralStatusResponse.Load;
      StatusRPM = PK_GeneralStatusResponse.RPM;
      StatusPressure = PK_GeneralStatusResponse.Pressure;
      break;
    default:
      break;
 80011ee:	e014      	b.n	800121a <acis_parse_command+0x42>
      PK_Copy(&PK_GeneralStatusResponse, msgBuf);
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <acis_parse_command+0x4c>)
 80011f4:	f7ff fef0 	bl	8000fd8 <PK_Copy>
      StatusIgnition = PK_GeneralStatusResponse.IgnitionAngle;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <acis_parse_command+0x4c>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <acis_parse_command+0x50>)
 80011fe:	6013      	str	r3, [r2, #0]
      StatusLoad = PK_GeneralStatusResponse.Load;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <acis_parse_command+0x4c>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4a09      	ldr	r2, [pc, #36]	; (800122c <acis_parse_command+0x54>)
 8001206:	6013      	str	r3, [r2, #0]
      StatusRPM = PK_GeneralStatusResponse.RPM;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <acis_parse_command+0x4c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <acis_parse_command+0x58>)
 800120e:	6013      	str	r3, [r2, #0]
      StatusPressure = PK_GeneralStatusResponse.Pressure;
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <acis_parse_command+0x4c>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <acis_parse_command+0x5c>)
 8001216:	6013      	str	r3, [r2, #0]
      break;
 8001218:	bf00      	nop
  }
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000004 	.word	0x20000004
 8001228:	20002a38 	.word	0x20002a38
 800122c:	20002a30 	.word	0x20002a30
 8001230:	20002a2c 	.word	0x20002a2c
 8001234:	20002a34 	.word	0x20002a34

08001238 <acis_send_command>:

inline int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	73fb      	strb	r3, [r7, #15]
  int8_t status = xSender(xChaDst, (uint8_t*)msgBuf, length);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	4618      	mov	r0, r3
 800124e:	f002 f97d 	bl	800354c <xSender>
 8001252:	4603      	mov	r3, r0
 8001254:	75fb      	strb	r3, [r7, #23]
  if(status == -1)
 8001256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125e:	d103      	bne.n	8001268 <acis_send_command+0x30>
    StatusTimeout = 1;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <acis_send_command+0x4c>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e006      	b.n	8001276 <acis_send_command+0x3e>
  else if(status == 1) StatusTimeout = 0;
 8001268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d102      	bne.n	8001276 <acis_send_command+0x3e>
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <acis_send_command+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
  return status;
 8001276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20002a3c 	.word	0x20002a3c

08001288 <controls_irq>:
static uint32_t sw_display_ftime = 0;
static uint8_t sw_display_delay = 0;


void controls_irq(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  //Fuel1
  if(ISSWITCH(SW_CTRL(FUEL1)))
 800128c:	4b87      	ldr	r3, [pc, #540]	; (80014ac <controls_irq+0x224>)
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11d      	bne.n	80012d4 <controls_irq+0x4c>
  {
    if(sw_fuel1_delay > SW_PRESS_DELAY)
 8001298:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <controls_irq+0x228>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b32      	cmp	r3, #50	; 0x32
 800129e:	d912      	bls.n	80012c6 <controls_irq+0x3e>
    {
      if(sw_fuel1_ftime == 0) sw_fuel1_ftime = TIM_CNT;
 80012a0:	4b84      	ldr	r3, [pc, #528]	; (80014b4 <controls_irq+0x22c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d103      	bne.n	80012b0 <controls_irq+0x28>
 80012a8:	4b83      	ldr	r3, [pc, #524]	; (80014b8 <controls_irq+0x230>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a81      	ldr	r2, [pc, #516]	; (80014b4 <controls_irq+0x22c>)
 80012ae:	6013      	str	r3, [r2, #0]
      SW_FUEL1_TIME = TIM_CNT-sw_fuel1_ftime;
 80012b0:	4b81      	ldr	r3, [pc, #516]	; (80014b8 <controls_irq+0x230>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <controls_irq+0x22c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	4a80      	ldr	r2, [pc, #512]	; (80014bc <controls_irq+0x234>)
 80012bc:	6013      	str	r3, [r2, #0]
      SW_FUEL1 = 1;
 80012be:	4b80      	ldr	r3, [pc, #512]	; (80014c0 <controls_irq+0x238>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e010      	b.n	80012e8 <controls_irq+0x60>
    } else sw_fuel1_delay+=TIM_STEP;
 80012c6:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <controls_irq+0x228>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b78      	ldr	r3, [pc, #480]	; (80014b0 <controls_irq+0x228>)
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	e009      	b.n	80012e8 <controls_irq+0x60>
  } else SW_FUEL1 = sw_fuel1_delay = sw_fuel1_ftime = 0;
 80012d4:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <controls_irq+0x22c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	4b75      	ldr	r3, [pc, #468]	; (80014b0 <controls_irq+0x228>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	4b73      	ldr	r3, [pc, #460]	; (80014b0 <controls_irq+0x228>)
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <controls_irq+0x238>)
 80012e6:	701a      	strb	r2, [r3, #0]

  //Fuel2
  if(ISSWITCH(SW_CTRL(FUEL2)))
 80012e8:	4b70      	ldr	r3, [pc, #448]	; (80014ac <controls_irq+0x224>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d11d      	bne.n	8001330 <controls_irq+0xa8>
  {
    if(sw_fuel2_delay > SW_PRESS_DELAY)
 80012f4:	4b73      	ldr	r3, [pc, #460]	; (80014c4 <controls_irq+0x23c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b32      	cmp	r3, #50	; 0x32
 80012fa:	d912      	bls.n	8001322 <controls_irq+0x9a>
    {
      if(sw_fuel2_ftime == 0) sw_fuel2_ftime = TIM_CNT;
 80012fc:	4b72      	ldr	r3, [pc, #456]	; (80014c8 <controls_irq+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <controls_irq+0x84>
 8001304:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <controls_irq+0x230>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <controls_irq+0x240>)
 800130a:	6013      	str	r3, [r2, #0]
      SW_FUEL2_TIME = TIM_CNT-sw_fuel2_ftime;
 800130c:	4b6a      	ldr	r3, [pc, #424]	; (80014b8 <controls_irq+0x230>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <controls_irq+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4a6d      	ldr	r2, [pc, #436]	; (80014cc <controls_irq+0x244>)
 8001318:	6013      	str	r3, [r2, #0]
      SW_FUEL2 = 1;
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <controls_irq+0x248>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e010      	b.n	8001344 <controls_irq+0xbc>
    } else sw_fuel2_delay+=TIM_STEP;
 8001322:	4b68      	ldr	r3, [pc, #416]	; (80014c4 <controls_irq+0x23c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <controls_irq+0x23c>)
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e009      	b.n	8001344 <controls_irq+0xbc>
  } else SW_FUEL2 = sw_fuel2_delay = sw_fuel2_ftime = 0;
 8001330:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <controls_irq+0x240>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <controls_irq+0x23c>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	4b61      	ldr	r3, [pc, #388]	; (80014c4 <controls_irq+0x23c>)
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <controls_irq+0x248>)
 8001342:	701a      	strb	r2, [r3, #0]

  //Display
  if(ISSWITCH(SW_CTRL(DISPLAY)))
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <controls_irq+0x224>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11d      	bne.n	800138c <controls_irq+0x104>
  {
    if(sw_display_delay > SW_PRESS_DELAY)
 8001350:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <controls_irq+0x24c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b32      	cmp	r3, #50	; 0x32
 8001356:	d912      	bls.n	800137e <controls_irq+0xf6>
    {
      if(sw_display_ftime == 0) sw_display_ftime = TIM_CNT;
 8001358:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <controls_irq+0x250>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <controls_irq+0xe0>
 8001360:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <controls_irq+0x230>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a5c      	ldr	r2, [pc, #368]	; (80014d8 <controls_irq+0x250>)
 8001366:	6013      	str	r3, [r2, #0]
      SW_DISPLAY_TIME = TIM_CNT-sw_display_ftime;
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <controls_irq+0x230>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <controls_irq+0x250>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <controls_irq+0x254>)
 8001374:	6013      	str	r3, [r2, #0]
      SW_DISPLAY = 1;
 8001376:	4b5a      	ldr	r3, [pc, #360]	; (80014e0 <controls_irq+0x258>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e010      	b.n	80013a0 <controls_irq+0x118>
    } else sw_display_delay+=TIM_STEP;
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <controls_irq+0x24c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <controls_irq+0x24c>)
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e009      	b.n	80013a0 <controls_irq+0x118>
  } else SW_DISPLAY = sw_display_delay = sw_display_ftime = 0;
 800138c:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <controls_irq+0x250>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <controls_irq+0x24c>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <controls_irq+0x24c>)
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	4b50      	ldr	r3, [pc, #320]	; (80014e0 <controls_irq+0x258>)
 800139e:	701a      	strb	r2, [r3, #0]

  if(SW_DISPLAY)
 80013a0:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <controls_irq+0x258>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 81ea 	beq.w	8001780 <controls_irq+0x4f8>
  {
    //UP
    if(ISPRESS(BUT_CTRL(UP)))
 80013ac:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <controls_irq+0x25c>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d034      	beq.n	8001422 <controls_irq+0x19a>
    {
      if(but_up_delay > BUT_PRESS_DELAY)
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <controls_irq+0x260>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b14      	cmp	r3, #20
 80013be:	d929      	bls.n	8001414 <controls_irq+0x18c>
      {
        if(but_up_ftime == 0) but_up_ftime = TIM_CNT;
 80013c0:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <controls_irq+0x264>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d103      	bne.n	80013d0 <controls_irq+0x148>
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <controls_irq+0x230>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a47      	ldr	r2, [pc, #284]	; (80014ec <controls_irq+0x264>)
 80013ce:	6013      	str	r3, [r2, #0]
        BUT_UP_TIME = TIM_CNT-but_up_ftime;
 80013d0:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <controls_irq+0x230>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <controls_irq+0x264>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <controls_irq+0x268>)
 80013dc:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80013de:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <controls_irq+0x26c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d111      	bne.n	800140c <controls_irq+0x184>
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <controls_irq+0x270>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <controls_irq+0x184>
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <controls_irq+0x274>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <controls_irq+0x184>
 80013fc:	4b40      	ldr	r3, [pc, #256]	; (8001500 <controls_irq+0x278>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <controls_irq+0x184>
          BUT_UP = 1;
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <controls_irq+0x27c>)
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
        BUT_UP_PRESS = 1;
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <controls_irq+0x274>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	e010      	b.n	8001436 <controls_irq+0x1ae>
      } else but_up_delay+=TIM_STEP;
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <controls_irq+0x260>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <controls_irq+0x260>)
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e009      	b.n	8001436 <controls_irq+0x1ae>
    } else BUT_UP_PRESS = but_up_delay = but_up_ftime = 0;
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <controls_irq+0x264>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <controls_irq+0x260>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <controls_irq+0x260>)
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <controls_irq+0x274>)
 8001434:	701a      	strb	r2, [r3, #0]

    //DOWN
    if(ISPRESS(BUT_CTRL(DOWN)))
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <controls_irq+0x25c>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143e:	2b00      	cmp	r3, #0
 8001440:	d06a      	beq.n	8001518 <controls_irq+0x290>
    {
      if(but_down_delay > BUT_PRESS_DELAY)
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <controls_irq+0x280>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b14      	cmp	r3, #20
 8001448:	d929      	bls.n	800149e <controls_irq+0x216>
      {
        if(but_down_ftime == 0) but_down_ftime = TIM_CNT;
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <controls_irq+0x284>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <controls_irq+0x1d2>
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <controls_irq+0x230>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a2d      	ldr	r2, [pc, #180]	; (800150c <controls_irq+0x284>)
 8001458:	6013      	str	r3, [r2, #0]
        BUT_DOWN_TIME = TIM_CNT-but_down_ftime;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <controls_irq+0x230>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b2b      	ldr	r3, [pc, #172]	; (800150c <controls_irq+0x284>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <controls_irq+0x288>)
 8001466:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <controls_irq+0x26c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d111      	bne.n	8001496 <controls_irq+0x20e>
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <controls_irq+0x270>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10c      	bne.n	8001496 <controls_irq+0x20e>
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <controls_irq+0x274>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <controls_irq+0x20e>
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <controls_irq+0x278>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <controls_irq+0x20e>
          BUT_DOWN = 1;
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <controls_irq+0x28c>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
        BUT_DOWN_PRESS = 1;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <controls_irq+0x278>)
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e046      	b.n	800152c <controls_irq+0x2a4>
      } else but_down_delay+=TIM_STEP;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <controls_irq+0x280>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <controls_irq+0x280>)
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e03f      	b.n	800152c <controls_irq+0x2a4>
 80014ac:	40020800 	.word	0x40020800
 80014b0:	20002a94 	.word	0x20002a94
 80014b4:	20002a90 	.word	0x20002a90
 80014b8:	20002a40 	.word	0x20002a40
 80014bc:	20002a8c 	.word	0x20002a8c
 80014c0:	20002a88 	.word	0x20002a88
 80014c4:	20002aa0 	.word	0x20002aa0
 80014c8:	20002a9c 	.word	0x20002a9c
 80014cc:	20002a98 	.word	0x20002a98
 80014d0:	20002a95 	.word	0x20002a95
 80014d4:	20002aac 	.word	0x20002aac
 80014d8:	20002aa8 	.word	0x20002aa8
 80014dc:	20002aa4 	.word	0x20002aa4
 80014e0:	20002aa1 	.word	0x20002aa1
 80014e4:	40020400 	.word	0x40020400
 80014e8:	20002a6c 	.word	0x20002a6c
 80014ec:	20002a78 	.word	0x20002a78
 80014f0:	20002a54 	.word	0x20002a54
 80014f4:	20002a44 	.word	0x20002a44
 80014f8:	20002a45 	.word	0x20002a45
 80014fc:	20002a46 	.word	0x20002a46
 8001500:	20002a47 	.word	0x20002a47
 8001504:	20002a66 	.word	0x20002a66
 8001508:	20002a6d 	.word	0x20002a6d
 800150c:	20002a7c 	.word	0x20002a7c
 8001510:	20002a58 	.word	0x20002a58
 8001514:	20002a67 	.word	0x20002a67
    } else BUT_DOWN_PRESS = but_down_delay = but_down_ftime = 0;
 8001518:	4b7d      	ldr	r3, [pc, #500]	; (8001710 <controls_irq+0x488>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <controls_irq+0x48c>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	4b7b      	ldr	r3, [pc, #492]	; (8001714 <controls_irq+0x48c>)
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <controls_irq+0x490>)
 800152a:	701a      	strb	r2, [r3, #0]

    //LEFT
    if(ISPRESS(BUT_CTRL(LEFT)))
 800152c:	4b7b      	ldr	r3, [pc, #492]	; (800171c <controls_irq+0x494>)
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	d034      	beq.n	80015a2 <controls_irq+0x31a>
    {
      if(but_left_delay > BUT_PRESS_DELAY)
 8001538:	4b79      	ldr	r3, [pc, #484]	; (8001720 <controls_irq+0x498>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b14      	cmp	r3, #20
 800153e:	d929      	bls.n	8001594 <controls_irq+0x30c>
      {
        if(but_left_ftime == 0) but_left_ftime = TIM_CNT;
 8001540:	4b78      	ldr	r3, [pc, #480]	; (8001724 <controls_irq+0x49c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <controls_irq+0x2c8>
 8001548:	4b77      	ldr	r3, [pc, #476]	; (8001728 <controls_irq+0x4a0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a75      	ldr	r2, [pc, #468]	; (8001724 <controls_irq+0x49c>)
 800154e:	6013      	str	r3, [r2, #0]
        BUT_LEFT_TIME = TIM_CNT-but_left_ftime;
 8001550:	4b75      	ldr	r3, [pc, #468]	; (8001728 <controls_irq+0x4a0>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b73      	ldr	r3, [pc, #460]	; (8001724 <controls_irq+0x49c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	4a74      	ldr	r2, [pc, #464]	; (800172c <controls_irq+0x4a4>)
 800155c:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 800155e:	4b74      	ldr	r3, [pc, #464]	; (8001730 <controls_irq+0x4a8>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d111      	bne.n	800158c <controls_irq+0x304>
 8001568:	4b72      	ldr	r3, [pc, #456]	; (8001734 <controls_irq+0x4ac>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10c      	bne.n	800158c <controls_irq+0x304>
 8001572:	4b71      	ldr	r3, [pc, #452]	; (8001738 <controls_irq+0x4b0>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <controls_irq+0x304>
 800157c:	4b66      	ldr	r3, [pc, #408]	; (8001718 <controls_irq+0x490>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <controls_irq+0x304>
          BUT_LEFT = 1;
 8001586:	4b6d      	ldr	r3, [pc, #436]	; (800173c <controls_irq+0x4b4>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
        BUT_LEFT_PRESS = 1;
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <controls_irq+0x4a8>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	e010      	b.n	80015b6 <controls_irq+0x32e>
      } else but_left_delay+=TIM_STEP;
 8001594:	4b62      	ldr	r3, [pc, #392]	; (8001720 <controls_irq+0x498>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b60      	ldr	r3, [pc, #384]	; (8001720 <controls_irq+0x498>)
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e009      	b.n	80015b6 <controls_irq+0x32e>
    } else BUT_LEFT_PRESS = but_left_delay = but_left_ftime = 0;
 80015a2:	4b60      	ldr	r3, [pc, #384]	; (8001724 <controls_irq+0x49c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	4b5d      	ldr	r3, [pc, #372]	; (8001720 <controls_irq+0x498>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <controls_irq+0x498>)
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <controls_irq+0x4a8>)
 80015b4:	701a      	strb	r2, [r3, #0]

    //RIGHT
    if(ISPRESS(BUT_CTRL(RIGHT)))
 80015b6:	4b59      	ldr	r3, [pc, #356]	; (800171c <controls_irq+0x494>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d034      	beq.n	800162c <controls_irq+0x3a4>
    {
      if(but_right_delay > BUT_PRESS_DELAY)
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <controls_irq+0x4b8>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b14      	cmp	r3, #20
 80015c8:	d929      	bls.n	800161e <controls_irq+0x396>
      {
        if(but_right_ftime == 0) but_right_ftime = TIM_CNT;
 80015ca:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <controls_irq+0x4bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <controls_irq+0x352>
 80015d2:	4b55      	ldr	r3, [pc, #340]	; (8001728 <controls_irq+0x4a0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <controls_irq+0x4bc>)
 80015d8:	6013      	str	r3, [r2, #0]
        BUT_RIGHT_TIME = TIM_CNT-but_right_ftime;
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <controls_irq+0x4a0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b59      	ldr	r3, [pc, #356]	; (8001744 <controls_irq+0x4bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <controls_irq+0x4c0>)
 80015e6:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80015e8:	4b51      	ldr	r3, [pc, #324]	; (8001730 <controls_irq+0x4a8>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d111      	bne.n	8001616 <controls_irq+0x38e>
 80015f2:	4b50      	ldr	r3, [pc, #320]	; (8001734 <controls_irq+0x4ac>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10c      	bne.n	8001616 <controls_irq+0x38e>
 80015fc:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <controls_irq+0x4b0>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <controls_irq+0x38e>
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <controls_irq+0x490>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <controls_irq+0x38e>
          BUT_RIGHT = 1;
 8001610:	4b4e      	ldr	r3, [pc, #312]	; (800174c <controls_irq+0x4c4>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
        BUT_RIGHT_PRESS = 1;
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <controls_irq+0x4ac>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e010      	b.n	8001640 <controls_irq+0x3b8>
      } else but_right_delay+=TIM_STEP;
 800161e:	4b48      	ldr	r3, [pc, #288]	; (8001740 <controls_irq+0x4b8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b46      	ldr	r3, [pc, #280]	; (8001740 <controls_irq+0x4b8>)
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e009      	b.n	8001640 <controls_irq+0x3b8>
    } else BUT_RIGHT_PRESS = but_right_delay = but_right_ftime = 0;
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <controls_irq+0x4bc>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <controls_irq+0x4b8>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <controls_irq+0x4b8>)
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <controls_irq+0x4ac>)
 800163e:	701a      	strb	r2, [r3, #0]

    //CANCEL
    if(ISPRESS(BUT_CTRL(CANCEL)))
 8001640:	4b43      	ldr	r3, [pc, #268]	; (8001750 <controls_irq+0x4c8>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <controls_irq+0x406>
    {
      if(but_cancel_delay > BUT_PRESS_DELAY)
 800164c:	4b41      	ldr	r3, [pc, #260]	; (8001754 <controls_irq+0x4cc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b14      	cmp	r3, #20
 8001652:	d915      	bls.n	8001680 <controls_irq+0x3f8>
      {
        if(but_cancel_ftime == 0) but_cancel_ftime = TIM_CNT;
 8001654:	4b40      	ldr	r3, [pc, #256]	; (8001758 <controls_irq+0x4d0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <controls_irq+0x3dc>
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <controls_irq+0x4a0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3d      	ldr	r2, [pc, #244]	; (8001758 <controls_irq+0x4d0>)
 8001662:	6013      	str	r3, [r2, #0]
        BUT_CANCEL_TIME = TIM_CNT-but_cancel_ftime;
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <controls_irq+0x4a0>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <controls_irq+0x4d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	4a3b      	ldr	r2, [pc, #236]	; (800175c <controls_irq+0x4d4>)
 8001670:	6013      	str	r3, [r2, #0]
        BUT_CANCEL = 1;
 8001672:	4b3b      	ldr	r3, [pc, #236]	; (8001760 <controls_irq+0x4d8>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
        BUT_CANCEL_PRESS = 1;
 8001678:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <controls_irq+0x4dc>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e010      	b.n	80016a2 <controls_irq+0x41a>
      } else but_cancel_delay+=TIM_STEP;
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <controls_irq+0x4cc>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <controls_irq+0x4cc>)
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e009      	b.n	80016a2 <controls_irq+0x41a>
    } else BUT_CANCEL_PRESS = but_cancel_delay = but_cancel_ftime = 0;
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <controls_irq+0x4d0>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <controls_irq+0x4cc>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <controls_irq+0x4cc>)
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	4b31      	ldr	r3, [pc, #196]	; (8001764 <controls_irq+0x4dc>)
 80016a0:	701a      	strb	r2, [r3, #0]

    //ENTER
    if(ISPRESS(BUT_CTRL(ENTER)))
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <controls_irq+0x4e0>)
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d020      	beq.n	80016f0 <controls_irq+0x468>
    {
      if(but_enter_delay > BUT_PRESS_DELAY)
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <controls_irq+0x4e4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b14      	cmp	r3, #20
 80016b4:	d915      	bls.n	80016e2 <controls_irq+0x45a>
      {
        if(but_enter_ftime == 0) but_enter_ftime = TIM_CNT;
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <controls_irq+0x4e8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d103      	bne.n	80016c6 <controls_irq+0x43e>
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <controls_irq+0x4a0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <controls_irq+0x4e8>)
 80016c4:	6013      	str	r3, [r2, #0]
        BUT_ENTER_TIME = TIM_CNT-but_enter_ftime;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <controls_irq+0x4a0>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <controls_irq+0x4e8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4a28      	ldr	r2, [pc, #160]	; (8001774 <controls_irq+0x4ec>)
 80016d2:	6013      	str	r3, [r2, #0]
        BUT_ENTER = 1;
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <controls_irq+0x4f0>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
        BUT_ENTER_PRESS = 1;
 80016da:	4b28      	ldr	r3, [pc, #160]	; (800177c <controls_irq+0x4f4>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e010      	b.n	8001704 <controls_irq+0x47c>
      } else but_enter_delay+=TIM_STEP;
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <controls_irq+0x4e4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <controls_irq+0x4e4>)
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e009      	b.n	8001704 <controls_irq+0x47c>
    } else BUT_ENTER_PRESS = but_enter_delay = but_enter_ftime = 0;
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <controls_irq+0x4e8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <controls_irq+0x4e4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <controls_irq+0x4e4>)
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <controls_irq+0x4f4>)
 8001702:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 255;
 8001704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c
 800170c:	e060      	b.n	80017d0 <controls_irq+0x548>
 800170e:	bf00      	nop
 8001710:	20002a7c 	.word	0x20002a7c
 8001714:	20002a6d 	.word	0x20002a6d
 8001718:	20002a47 	.word	0x20002a47
 800171c:	40020400 	.word	0x40020400
 8001720:	20002a6a 	.word	0x20002a6a
 8001724:	20002a70 	.word	0x20002a70
 8001728:	20002a40 	.word	0x20002a40
 800172c:	20002a4c 	.word	0x20002a4c
 8001730:	20002a44 	.word	0x20002a44
 8001734:	20002a45 	.word	0x20002a45
 8001738:	20002a46 	.word	0x20002a46
 800173c:	20002a64 	.word	0x20002a64
 8001740:	20002a6b 	.word	0x20002a6b
 8001744:	20002a74 	.word	0x20002a74
 8001748:	20002a50 	.word	0x20002a50
 800174c:	20002a65 	.word	0x20002a65
 8001750:	40020800 	.word	0x40020800
 8001754:	20002a6f 	.word	0x20002a6f
 8001758:	20002a84 	.word	0x20002a84
 800175c:	20002a60 	.word	0x20002a60
 8001760:	20002a69 	.word	0x20002a69
 8001764:	20002a49 	.word	0x20002a49
 8001768:	40020c00 	.word	0x40020c00
 800176c:	20002a6e 	.word	0x20002a6e
 8001770:	20002a80 	.word	0x20002a80
 8001774:	20002a5c 	.word	0x20002a5c
 8001778:	20002a68 	.word	0x20002a68
 800177c:	20002a48 	.word	0x20002a48
  }
  else
  {
    BUT_CANCEL = 0;
 8001780:	4b30      	ldr	r3, [pc, #192]	; (8001844 <controls_irq+0x5bc>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
    BUT_ENTER = 0;
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <controls_irq+0x5c0>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
    BUT_LEFT = 0;
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <controls_irq+0x5c4>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT = 0;
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <controls_irq+0x5c8>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
    BUT_UP = 0;
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <controls_irq+0x5cc>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
    BUT_DOWN = 0;
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <controls_irq+0x5d0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
    BUT_CANCEL_PRESS = 0;
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <controls_irq+0x5d4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
    BUT_ENTER_PRESS = 0;
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <controls_irq+0x5d8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
    BUT_LEFT_PRESS = 0;
 80017b0:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <controls_irq+0x5dc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT_PRESS = 0;
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <controls_irq+0x5e0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
    BUT_UP_PRESS = 0;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <controls_irq+0x5e4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
    BUT_DOWN_PRESS = 0;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <controls_irq+0x5e8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 0;
 80017c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, !BUT_LEFT_PRESS);
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <controls_irq+0x5dc>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e6:	4823      	ldr	r0, [pc, #140]	; (8001874 <controls_irq+0x5ec>)
 80017e8:	f003 fcd2 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, !BUT_RIGHT_PRESS);
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <controls_irq+0x5e0>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <controls_irq+0x5ec>)
 8001804:	f003 fcc4 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, !BUT_UP_PRESS);
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <controls_irq+0x5e4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181e:	4815      	ldr	r0, [pc, #84]	; (8001874 <controls_irq+0x5ec>)
 8001820:	f003 fcb6 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, !BUT_DOWN_PRESS);
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <controls_irq+0x5e8>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <controls_irq+0x5ec>)
 800183c:	f003 fca8 	bl	8005190 <HAL_GPIO_WritePin>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20002a69 	.word	0x20002a69
 8001848:	20002a68 	.word	0x20002a68
 800184c:	20002a64 	.word	0x20002a64
 8001850:	20002a65 	.word	0x20002a65
 8001854:	20002a66 	.word	0x20002a66
 8001858:	20002a67 	.word	0x20002a67
 800185c:	20002a49 	.word	0x20002a49
 8001860:	20002a48 	.word	0x20002a48
 8001864:	20002a44 	.word	0x20002a44
 8001868:	20002a45 	.word	0x20002a45
 800186c:	20002a46 	.word	0x20002a46
 8001870:	20002a47 	.word	0x20002a47
 8001874:	40020400 	.word	0x40020400

08001878 <CRC16_RegisterHardware>:
  .cb_size = 0
};


void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(mutexCrc == NULL)
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <CRC16_RegisterHardware+0x2c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <CRC16_RegisterHardware+0x1c>
    mutexCrc = osMutexNew(&mutexAttrs);
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <CRC16_RegisterHardware+0x30>)
 800188a:	f005 fa89 	bl	8006da0 <osMutexNew>
 800188e:	4602      	mov	r2, r0
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <CRC16_RegisterHardware+0x2c>)
 8001892:	601a      	str	r2, [r3, #0]
  handle_crc = hcrc;
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <CRC16_RegisterHardware+0x34>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20002ab4 	.word	0x20002ab4
 80018a8:	0800df38 	.word	0x0800df38
 80018ac:	20002ab0 	.word	0x20002ab0

080018b0 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <CRC16_Generate+0x64>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d105      	bne.n	80018d2 <CRC16_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <CRC16_Generate+0x68>)
 80018c8:	f005 fa6a 	bl	8006da0 <osMutexNew>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <CRC16_Generate+0x64>)
 80018d0:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <CRC16_Generate+0x6c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d017      	beq.n	800190a <CRC16_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <CRC16_Generate+0x64>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f005 fa9f 	bl	8006e24 <osMutexAcquire>
 80018e6:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <CRC16_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <CRC16_Generate+0x6c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 f986 	bl	8004c08 <HAL_CRC_Calculate>
 80018fc:	4603      	mov	r3, r0
 80018fe:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <CRC16_Generate+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f005 fabd 	bl	8006e84 <osMutexRelease>
    }
  }
  return result;
 800190a:	89fb      	ldrh	r3, [r7, #14]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20002ab4 	.word	0x20002ab4
 8001918:	0800df38 	.word	0x0800df38
 800191c:	20002ab0 	.word	0x20002ab0

08001920 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <CRC8_Generate+0x74>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <CRC8_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 8001936:	4818      	ldr	r0, [pc, #96]	; (8001998 <CRC8_Generate+0x78>)
 8001938:	f005 fa32 	bl	8006da0 <osMutexNew>
 800193c:	4602      	mov	r2, r0
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <CRC8_Generate+0x74>)
 8001940:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <CRC8_Generate+0x7c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d017      	beq.n	800197a <CRC8_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <CRC8_Generate+0x74>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f005 fa67 	bl	8006e24 <osMutexAcquire>
 8001956:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10d      	bne.n	800197a <CRC8_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <CRC8_Generate+0x7c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 f94e 	bl	8004c08 <HAL_CRC_Calculate>
 800196c:	4603      	mov	r3, r0
 800196e:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <CRC8_Generate+0x74>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fa85 	bl	8006e84 <osMutexRelease>
    }
  }
  return (result & 0xFF) ^ (result >> 8);
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	b25a      	sxtb	r2, r3
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b29b      	uxth	r3, r3
 8001984:	b25b      	sxtb	r3, r3
 8001986:	4053      	eors	r3, r2
 8001988:	b25b      	sxtb	r3, r3
 800198a:	b2db      	uxtb	r3, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20002ab4 	.word	0x20002ab4
 8001998:	0800df38 	.word	0x0800df38
 800199c:	20002ab0 	.word	0x20002ab0

080019a0 <DelayInit>:

volatile uint32_t DelStart[COUNTERS];
static volatile uint32_t prescaller = 0;

void DelayInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <DelayInit+0x8c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <DelayInit+0x8c>)
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <DelayInit+0x8c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <DelayInit+0x90>)
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <DelayInit+0x94>)
 80019c2:	601a      	str	r2, [r3, #0]
    prescaller = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000);
 80019c4:	f003 feaa 	bl	800571c <HAL_RCC_GetPCLK1Freq>
 80019c8:	4603      	mov	r3, r0
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <DelayInit+0x98>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <DelayInit+0x9c>)
 80019d6:	6013      	str	r3, [r2, #0]
    htim_delay.Init.Prescaler = 0;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <DelayInit+0x90>)
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <DelayInit+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <DelayInit+0x90>)
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ea:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <DelayInit+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 80019f2:	480f      	ldr	r0, [pc, #60]	; (8001a30 <DelayInit+0x90>)
 80019f4:	f004 fb0e 	bl	8006014 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4619      	mov	r1, r3
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <DelayInit+0x90>)
 8001a06:	f004 fc25 	bl	8006254 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	; (8001a30 <DelayInit+0x90>)
 8001a18:	f004 fce4 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <DelayInit+0x90>)
 8001a1e:	f004 f9af 	bl	8005d80 <HAL_TIM_Base_Start>

}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	20002ab8 	.word	0x20002ab8
 8001a34:	40000c00 	.word	0x40000c00
 8001a38:	431bde83 	.word	0x431bde83
 8001a3c:	20002af8 	.word	0x20002af8

08001a40 <DelayUs>:
  uint32_t tickstart = Delay_Tick * 1000;
  while(DelayDiff(Delay_Tick * 1000, tickstart) < val) {}
}

inline void DelayUs(uint32_t val)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = Delay_Tick;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <DelayUs+0x2c>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	60fb      	str	r3, [r7, #12]
  while(DelayDiff(Delay_Tick, tickstart) < val) {}
 8001a4e:	bf00      	nop
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <DelayUs+0x2c>)
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	68f9      	ldr	r1, [r7, #12]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f81a 	bl	8001a90 <DelayDiff>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d8f5      	bhi.n	8001a50 <DelayUs+0x10>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40000c00 	.word	0x40000c00

08001a70 <DelayMs>:
 
inline void DelayMs(uint32_t val)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  DelayUs(val * 1000);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ffdc 	bl	8001a40 <DelayUs>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <DelayDiff>:

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	if(a >= b)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d307      	bcc.n	8001ab2 <DelayDiff+0x22>
		return (a - b) / prescaller;
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	1ad2      	subs	r2, r2, r3
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <DelayDiff+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	e007      	b.n	8001ac2 <DelayDiff+0x32>
	return ((0xFFFFFFFF - b) + a) / prescaller;
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <DelayDiff+0x40>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20002af8 	.word	0x20002af8

08001ad4 <lcd_data>:
#include "cmsis_os.h"

uint8_t lcd_buffer[8][128];

static inline void lcd_data(uint8_t value)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8001ade:	79fa      	ldrb	r2, [r7, #7]
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2102      	movs	r1, #2
 8001af0:	4815      	ldr	r0, [pc, #84]	; (8001b48 <lcd_data+0x74>)
 8001af2:	f003 fb4d 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2104      	movs	r1, #4
 8001afa:	4814      	ldr	r0, [pc, #80]	; (8001b4c <lcd_data+0x78>)
 8001afc:	f003 fb48 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	2102      	movs	r1, #2
 8001b04:	4811      	ldr	r0, [pc, #68]	; (8001b4c <lcd_data+0x78>)
 8001b06:	f003 fb43 	bl	8005190 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8001b0a:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <lcd_data+0x7c>)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7ff ff95 	bl	8001a40 <DelayUs>
  taskENTER_CRITICAL();
 8001b16:	f006 fe95 	bl	8008844 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	480a      	ldr	r0, [pc, #40]	; (8001b48 <lcd_data+0x74>)
 8001b20:	f003 fb36 	bl	8005190 <HAL_GPIO_WritePin>
  DelayUs(2);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7ff ff8b 	bl	8001a40 <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <lcd_data+0x74>)
 8001b30:	f003 fb2e 	bl	8005190 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8001b34:	f006 feac 	bl	8008890 <vPortExitCritical>
  DelayUs(1);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff ff81 	bl	8001a40 <DelayUs>
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020000 	.word	0x40020000

08001b54 <lcd_command>:

static inline void lcd_command(uint8_t value)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	041b      	lsls	r3, r3, #16
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4815      	ldr	r0, [pc, #84]	; (8001bc8 <lcd_command+0x74>)
 8001b72:	f003 fb0d 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2104      	movs	r1, #4
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <lcd_command+0x78>)
 8001b7c:	f003 fb08 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2102      	movs	r1, #2
 8001b84:	4811      	ldr	r0, [pc, #68]	; (8001bcc <lcd_command+0x78>)
 8001b86:	f003 fb03 	bl	8005190 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8001b8a:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <lcd_command+0x7c>)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff ff55 	bl	8001a40 <DelayUs>
  taskENTER_CRITICAL();
 8001b96:	f006 fe55 	bl	8008844 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <lcd_command+0x74>)
 8001ba0:	f003 faf6 	bl	8005190 <HAL_GPIO_WritePin>
  DelayUs(2);
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7ff ff4b 	bl	8001a40 <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2102      	movs	r1, #2
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <lcd_command+0x74>)
 8001bb0:	f003 faee 	bl	8005190 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8001bb4:	f006 fe6c 	bl	8008890 <vPortExitCritical>
  DelayUs(1);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff ff41 	bl	8001a40 <DelayUs>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <lcd_update>:

inline void lcd_update(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0

  for(int j = 0; j < 8; j++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e050      	b.n	8001c82 <lcd_update+0xae>
  {
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2110      	movs	r1, #16
 8001be4:	482a      	ldr	r0, [pc, #168]	; (8001c90 <lcd_update+0xbc>)
 8001be6:	f003 fad3 	bl	8005190 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2101      	movs	r1, #1
 8001bee:	4829      	ldr	r0, [pc, #164]	; (8001c94 <lcd_update+0xc0>)
 8001bf0:	f003 face 	bl	8005190 <HAL_GPIO_WritePin>

    lcd_command(0x40);
 8001bf4:	2040      	movs	r0, #64	; 0x40
 8001bf6:	f7ff ffad 	bl	8001b54 <lcd_command>
    lcd_command(0xB8 + j);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	3b48      	subs	r3, #72	; 0x48
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ffa6 	bl	8001b54 <lcd_command>

    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	4820      	ldr	r0, [pc, #128]	; (8001c90 <lcd_update+0xbc>)
 8001c0e:	f003 fabf 	bl	8005190 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2101      	movs	r1, #1
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <lcd_update+0xc0>)
 8001c18:	f003 faba 	bl	8005190 <HAL_GPIO_WritePin>
    for(int i = 0; i < 64; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	e00c      	b.n	8001c3c <lcd_update+0x68>
    {
      lcd_data(lcd_buffer[j][i]);
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <lcd_update+0xc4>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	01db      	lsls	r3, r3, #7
 8001c28:	441a      	add	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff4f 	bl	8001ad4 <lcd_data>
    for(int i = 0; i < 64; i++)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c40:	ddef      	ble.n	8001c22 <lcd_update+0x4e>
    }
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2110      	movs	r1, #16
 8001c46:	4812      	ldr	r0, [pc, #72]	; (8001c90 <lcd_update+0xbc>)
 8001c48:	f003 faa2 	bl	8005190 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4810      	ldr	r0, [pc, #64]	; (8001c94 <lcd_update+0xc0>)
 8001c52:	f003 fa9d 	bl	8005190 <HAL_GPIO_WritePin>
    for(int i = 64; i < 128; i++)
 8001c56:	2340      	movs	r3, #64	; 0x40
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e00c      	b.n	8001c76 <lcd_update+0xa2>
    {
      lcd_data(lcd_buffer[j][i]);
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <lcd_update+0xc4>)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	441a      	add	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff32 	bl	8001ad4 <lcd_data>
    for(int i = 64; i < 128; i++)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3301      	adds	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b7f      	cmp	r3, #127	; 0x7f
 8001c7a:	ddef      	ble.n	8001c5c <lcd_update+0x88>
  for(int j = 0; j < 8; j++)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	ddab      	ble.n	8001be0 <lcd_update+0xc>
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020400 	.word	0x40020400
 8001c98:	20007c5c 	.word	0x20007c5c

08001c9c <lcd_reset>:

inline void lcd_reset(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <lcd_reset+0x48>)
 8001ca6:	f003 fa73 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <lcd_reset+0x4c>)
 8001cb0:	f003 fa6e 	bl	8005190 <HAL_GPIO_WritePin>
  lcd_command(0x3F); //Display ON
 8001cb4:	203f      	movs	r0, #63	; 0x3f
 8001cb6:	f7ff ff4d 	bl	8001b54 <lcd_command>
  lcd_command(0x40); //Set Y address = 0
 8001cba:	2040      	movs	r0, #64	; 0x40
 8001cbc:	f7ff ff4a 	bl	8001b54 <lcd_command>
  lcd_command(0xB8); //Set X page = 0
 8001cc0:	20b8      	movs	r0, #184	; 0xb8
 8001cc2:	f7ff ff47 	bl	8001b54 <lcd_command>
  lcd_command(0xC0); //Set Z scrolling = 0
 8001cc6:	20c0      	movs	r0, #192	; 0xc0
 8001cc8:	f7ff ff44 	bl	8001b54 <lcd_command>
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2110      	movs	r1, #16
 8001cd0:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <lcd_reset+0x48>)
 8001cd2:	f003 fa5d 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <lcd_reset+0x4c>)
 8001cdc:	f003 fa58 	bl	8005190 <HAL_GPIO_WritePin>
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40020400 	.word	0x40020400

08001cec <lcd_clear>:

inline void lcd_clear(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  for(int i = 0; i < 8; i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e013      	b.n	8001d20 <lcd_clear+0x34>
    for(int j = 0; j < 128; j++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	e00a      	b.n	8001d14 <lcd_clear+0x28>
      lcd_buffer[i][j] = 0;
 8001cfe:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <lcd_clear+0x48>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	441a      	add	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 128; j++)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b7f      	cmp	r3, #127	; 0x7f
 8001d18:	ddf1      	ble.n	8001cfe <lcd_clear+0x12>
  for(int i = 0; i < 8; i++)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	dde8      	ble.n	8001cf8 <lcd_clear+0xc>
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20007c5c 	.word	0x20007c5c

08001d38 <lcd_drawpoint>:

inline void lcd_drawpoint(uint8_t x, uint8_t y)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db1f      	blt.n	8001d90 <lcd_drawpoint+0x58>
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	2b3f      	cmp	r3, #63	; 0x3f
 8001d54:	d81c      	bhi.n	8001d90 <lcd_drawpoint+0x58>
    lcd_buffer[y / 8][x] |= 1 << (y % 8);
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	b2d8      	uxtb	r0, r3
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <lcd_drawpoint+0x64>)
 8001d62:	01d2      	lsls	r2, r2, #7
 8001d64:	440a      	add	r2, r1
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b25a      	sxtb	r2, r3
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b259      	sxtb	r1, r3
 8001d7e:	4602      	mov	r2, r0
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	b2c8      	uxtb	r0, r1
 8001d84:	4905      	ldr	r1, [pc, #20]	; (8001d9c <lcd_drawpoint+0x64>)
 8001d86:	01d2      	lsls	r2, r2, #7
 8001d88:	440a      	add	r2, r1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	701a      	strb	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20007c5c 	.word	0x20007c5c

08001da0 <lcd_clearpoint>:

inline void lcd_clearpoint(uint8_t x, uint8_t y)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	4613      	mov	r3, r2
 8001dae:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db21      	blt.n	8001dfc <lcd_clearpoint+0x5c>
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	2b3f      	cmp	r3, #63	; 0x3f
 8001dbc:	d81e      	bhi.n	8001dfc <lcd_clearpoint+0x5c>
    lcd_buffer[y / 8][x] &= ~(1 << (y % 8));
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	b2d8      	uxtb	r0, r3
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	490f      	ldr	r1, [pc, #60]	; (8001e08 <lcd_clearpoint+0x68>)
 8001dca:	01d2      	lsls	r2, r2, #7
 8001dcc:	440a      	add	r2, r1
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b25a      	sxtb	r2, r3
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	4013      	ands	r3, r2
 8001de8:	b259      	sxtb	r1, r3
 8001dea:	4602      	mov	r2, r0
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	b2c8      	uxtb	r0, r1
 8001df0:	4905      	ldr	r1, [pc, #20]	; (8001e08 <lcd_clearpoint+0x68>)
 8001df2:	01d2      	lsls	r2, r2, #7
 8001df4:	440a      	add	r2, r1
 8001df6:	4413      	add	r3, r2
 8001df8:	4602      	mov	r2, r0
 8001dfa:	701a      	strb	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	20007c5c 	.word	0x20007c5c

08001e0c <lcd_rect_solid>:


void lcd_rect_solid(int x, int y, int w, int h, int c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  if(c)
 8001e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d026      	beq.n	8001e6e <lcd_rect_solid+0x62>
  {
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e28:	e01c      	b.n	8001e64 <lcd_rect_solid+0x58>
    {
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
 8001e32:	e00d      	b.n	8001e50 <lcd_rect_solid+0x44>
      {
          lcd_drawpoint(j,i);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff7a 	bl	8001d38 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	3301      	adds	r3, #1
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e50:	6a3a      	ldr	r2, [r7, #32]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbed      	blt.n	8001e34 <lcd_rect_solid+0x28>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e60:	3301      	adds	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbde      	blt.n	8001e2a <lcd_rect_solid+0x1e>
      {
          lcd_clearpoint(j,i);
      }
    }
  }
}
 8001e6c:	e025      	b.n	8001eba <lcd_rect_solid+0xae>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	e01c      	b.n	8001eb2 <lcd_rect_solid+0xa6>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00d      	b.n	8001e9e <lcd_rect_solid+0x92>
          lcd_clearpoint(j,i);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff87 	bl	8001da0 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	3301      	adds	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbed      	blt.n	8001e82 <lcd_rect_solid+0x76>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbde      	blt.n	8001e78 <lcd_rect_solid+0x6c>
}
 8001eba:	bf00      	nop
 8001ebc:	3730      	adds	r7, #48	; 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <lcd_rect>:


void lcd_rect(int x, int y, int w, int h, int c)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08c      	sub	sp, #48	; 0x30
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	603b      	str	r3, [r7, #0]
  if(w > 0 && h > 0)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f340 809a 	ble.w	800200c <lcd_rect+0x14a>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f340 8096 	ble.w	800200c <lcd_rect+0x14a>
  {
    if(c)
 8001ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d049      	beq.n	8001f7a <lcd_rect+0xb8>
    {
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eea:	2300      	movs	r3, #0
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eee:	e01b      	b.n	8001f28 <lcd_rect+0x66>
      {
        lcd_drawpoint(x,i);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff1c 	bl	8001d38 <lcd_drawpoint>
        lcd_drawpoint(x+w-1,i);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff0e 	bl	8001d38 <lcd_drawpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	3301      	adds	r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	3301      	adds	r3, #1
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbdf      	blt.n	8001ef0 <lcd_rect+0x2e>
      }
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	e01a      	b.n	8001f70 <lcd_rect+0xae>
      {
        lcd_drawpoint(j,y);
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fef7 	bl	8001d38 <lcd_drawpoint>
        lcd_drawpoint(j,y+h-1);
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	b2d8      	uxtb	r0, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f7ff feea 	bl	8001d38 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	3301      	adds	r3, #1
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbe0      	blt.n	8001f3a <lcd_rect+0x78>
        lcd_clearpoint(j,y);
        lcd_clearpoint(j,y+h-1);
      }
    }
  }
}
 8001f78:	e048      	b.n	800200c <lcd_rect+0x14a>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	e01b      	b.n	8001fbc <lcd_rect+0xfa>
        lcd_clearpoint(x,i);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff06 	bl	8001da0 <lcd_clearpoint>
        lcd_clearpoint(x+w-1,i);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fef8 	bl	8001da0 <lcd_clearpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbdf      	blt.n	8001f84 <lcd_rect+0xc2>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e01a      	b.n	8002004 <lcd_rect+0x142>
        lcd_clearpoint(j,y);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fee1 	bl	8001da0 <lcd_clearpoint>
        lcd_clearpoint(j,y+h-1);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	b2d8      	uxtb	r0, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7ff fed4 	bl	8001da0 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbe0      	blt.n	8001fce <lcd_rect+0x10c>
}
 800200c:	bf00      	nop
 800200e:	3730      	adds	r7, #48	; 0x30
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <lcd_init>:
  DelayMs(3000);
  TIM2->CCR3 = 0;
}

void lcd_init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2104      	movs	r1, #4
 800201c:	480f      	ldr	r0, [pc, #60]	; (800205c <lcd_init+0x48>)
 800201e:	f003 f8b7 	bl	8005190 <HAL_GPIO_WritePin>
  DelayUs(500);
 8002022:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002026:	f7ff fd0b 	bl	8001a40 <DelayUs>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	2104      	movs	r1, #4
 800202e:	480b      	ldr	r0, [pc, #44]	; (800205c <lcd_init+0x48>)
 8002030:	f003 f8ae 	bl	8005190 <HAL_GPIO_WritePin>
  DelayMs(2);
 8002034:	2002      	movs	r0, #2
 8002036:	f7ff fd1b 	bl	8001a70 <DelayMs>

  lcd_reset();
 800203a:	f7ff fe2f 	bl	8001c9c <lcd_reset>
  lcd_clear();
 800203e:	f7ff fe55 	bl	8001cec <lcd_clear>
  lcd_update();
 8002042:	f7ff fdc7 	bl	8001bd4 <lcd_update>

  font_init(lcd_rect_solid, 128, 64);
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <lcd_init+0x4c>)
 800204c:	f006 fe46 	bl	8008cdc <font_init>
  font_setCR(0);
 8002050:	2000      	movs	r0, #0
 8002052:	f006 fe21 	bl	8008c98 <font_setCR>


  //font_setFont(&rre_ubuntu_32); showFont("[rre_ubuntu_32]");

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020400 	.word	0x40020400
 8002060:	08001e0d 	.word	0x08001e0d

08002064 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800206c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <SCB_EnableICache+0x3c>)
 8002072:	2200      	movs	r2, #0
 8002074:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002078:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800207c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <SCB_EnableICache+0x3c>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <SCB_EnableICache+0x3c>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800208c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002090:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <SCB_EnableDCache+0x7c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80020b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <SCB_EnableDCache+0x7c>)
 80020b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020bc:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0b5b      	lsrs	r3, r3, #13
 80020c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020c6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	08db      	lsrs	r3, r3, #3
 80020cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80020da:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020e0:	490f      	ldr	r1, [pc, #60]	; (8002120 <SCB_EnableDCache+0x7c>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1e5a      	subs	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ef      	bne.n	80020d2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	60fa      	str	r2, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e5      	bne.n	80020c8 <SCB_EnableDCache+0x24>
 80020fc:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <SCB_EnableDCache+0x7c>)
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <SCB_EnableDCache+0x7c>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	6153      	str	r3, [r2, #20]
 800210c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002110:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM7_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    controls_irq();
 8002134:	f7ff f8a8 	bl	8001288 <controls_irq>
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200083d0 	.word	0x200083d0

08002144 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f001 fd8b 	bl	8003c68 <xDmaTxIrqHandler>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f001 fde6 	bl	8003d34 <xDmaErIrqHandler>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <showlogo>:

static void showlogo(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  font_setFont(&rre_ubuntu_32);
 8002174:	480e      	ldr	r0, [pc, #56]	; (80021b0 <showlogo+0x40>)
 8002176:	f006 fdf9 	bl	8008d6c <font_setFont>
  font_printStr(30,4,"ACIS");
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <showlogo+0x44>)
 800217c:	2104      	movs	r1, #4
 800217e:	201e      	movs	r0, #30
 8002180:	f008 f836 	bl	800a1f0 <font_printStr>
  font_setFont(&rre_arialb_16);
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <showlogo+0x48>)
 8002186:	f006 fdf1 	bl	8008d6c <font_setFont>
  font_printStr(0,32,"Advanced Car");
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <showlogo+0x4c>)
 800218c:	2120      	movs	r1, #32
 800218e:	2000      	movs	r0, #0
 8002190:	f008 f82e 	bl	800a1f0 <font_printStr>
  font_printStr(13,46,"Ignition System");
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <showlogo+0x50>)
 8002196:	212e      	movs	r1, #46	; 0x2e
 8002198:	200d      	movs	r0, #13
 800219a:	f008 f829 	bl	800a1f0 <font_printStr>
  lcd_update();
 800219e:	f7ff fd19 	bl	8001bd4 <lcd_update>
  DelayMs(1000);
 80021a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021a6:	f7ff fc63 	bl	8001a70 <DelayMs>
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20002830 	.word	0x20002830
 80021b4:	0800deec 	.word	0x0800deec
 80021b8:	20002820 	.word	0x20002820
 80021bc:	0800def4 	.word	0x0800def4
 80021c0:	0800df04 	.word	0x0800df04

080021c4 <main>:

int main(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 80021c8:	f7ff ff4c 	bl	8002064 <SCB_EnableICache>
  SCB_EnableDCache();
 80021cc:	f7ff ff6a 	bl	80020a4 <SCB_EnableDCache>

  HAL_Init();
 80021d0:	f002 fa0e 	bl	80045f0 <HAL_Init>

  SystemClock_Config();
 80021d4:	f000 f854 	bl	8002280 <SystemClock_Config>

  MX_GPIO_Init();
 80021d8:	f000 fb04 	bl	80027e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80021dc:	f000 fac0 	bl	8002760 <MX_DMA_Init>
  MX_TIM2_Init();
 80021e0:	f000 f976 	bl	80024d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80021e4:	f000 f920 	bl	8002428 <MX_ADC1_Init>
  MX_TIM10_Init();
 80021e8:	f000 fa02 	bl	80025f0 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80021ec:	f000 fa58 	bl	80026a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80021f0:	f000 fa86 	bl	8002700 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80021f4:	f000 f8da 	bl	80023ac <MX_CRC_Init>
  MX_TIM7_Init();
 80021f8:	f000 f9c4 	bl	8002584 <MX_TIM7_Init>
  xFifosInit();
 80021fc:	f001 fdd4 	bl	8003da8 <xFifosInit>

  CRC16_RegisterHardware(&hcrc);
 8002200:	4815      	ldr	r0, [pc, #84]	; (8002258 <main+0x94>)
 8002202:	f7ff fb39 	bl	8001878 <CRC16_RegisterHardware>

  HAL_GPIO_WritePin(USB_RST_GPIO_Port, USB_RST_Pin, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800220c:	4813      	ldr	r0, [pc, #76]	; (800225c <main+0x98>)
 800220e:	f002 ffbf 	bl	8005190 <HAL_GPIO_WritePin>

  DelayInit();
 8002212:	f7ff fbc5 	bl	80019a0 <DelayInit>

  HAL_TIM_Base_Start_IT(&htim7);
 8002216:	4812      	ldr	r0, [pc, #72]	; (8002260 <main+0x9c>)
 8002218:	f003 fdca 	bl	8005db0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800221c:	2108      	movs	r1, #8
 800221e:	4811      	ldr	r0, [pc, #68]	; (8002264 <main+0xa0>)
 8002220:	f004 f8de 	bl	80063e0 <HAL_TIM_PWM_Start>
  lcd_init();
 8002224:	f7ff fef6 	bl	8002014 <lcd_init>

  showlogo();
 8002228:	f7ff ffa2 	bl	8002170 <showlogo>

  osKernelInitialize();
 800222c:	f004 fd0c 	bl	8006c48 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(acis_main_task, NULL, &defaultTask_attributes);
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <main+0xa4>)
 8002232:	2100      	movs	r1, #0
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <main+0xa8>)
 8002236:	f004 fd41 	bl	8006cbc <osThreadNew>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <main+0xac>)
 800223e:	601a      	str	r2, [r3, #0]
  getterTaskHandle = osThreadNew(xGetterTask, NULL, &getterTask_attributes);
 8002240:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <main+0xb0>)
 8002242:	2100      	movs	r1, #0
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <main+0xb4>)
 8002246:	f004 fd39 	bl	8006cbc <osThreadNew>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <main+0xb8>)
 800224e:	601a      	str	r2, [r3, #0]
  osKernelStart();
 8002250:	f004 fd14 	bl	8006c7c <osKernelStart>

  while (1)
 8002254:	e7fe      	b.n	8002254 <main+0x90>
 8002256:	bf00      	nop
 8002258:	20008180 	.word	0x20008180
 800225c:	40020000 	.word	0x40020000
 8002260:	200083d0 	.word	0x200083d0
 8002264:	20008390 	.word	0x20008390
 8002268:	0800df48 	.word	0x0800df48
 800226c:	08001191 	.word	0x08001191
 8002270:	2000805c 	.word	0x2000805c
 8002274:	0800df6c 	.word	0x0800df6c
 8002278:	08004121 	.word	0x08004121
 800227c:	2000838c 	.word	0x2000838c

08002280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0b4      	sub	sp, #208	; 0xd0
 8002284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800228a:	2230      	movs	r2, #48	; 0x30
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f008 f86d 	bl	800a36e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002294:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f008 f85e 	bl	800a36e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <SystemClock_Config+0x124>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <SystemClock_Config+0x124>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <SystemClock_Config+0x124>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <SystemClock_Config+0x128>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a36      	ldr	r2, [pc, #216]	; (80023a8 <SystemClock_Config+0x128>)
 80022d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <SystemClock_Config+0x128>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ee:	2310      	movs	r3, #16
 80022f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002300:	2308      	movs	r3, #8
 8002302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002306:	23d8      	movs	r3, #216	; 0xd8
 8002308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800230c:	2302      	movs	r3, #2
 800230e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002318:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800231c:	4618      	mov	r0, r3
 800231e:	f002 ff75 	bl	800520c <HAL_RCC_OscConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002328:	f000 fb68 	bl	80029fc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800232c:	f002 ff36 	bl	800519c <HAL_PWREx_EnableOverDrive>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002336:	f000 fb61 	bl	80029fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800233a:	230f      	movs	r3, #15
 800233c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800234c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800235c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002360:	2107      	movs	r1, #7
 8002362:	4618      	mov	r0, r3
 8002364:	f003 f93c 	bl	80055e0 <HAL_RCC_ClockConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800236e:	f000 fb45 	bl	80029fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8002372:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002376:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002378:	2300      	movs	r3, #0
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800237c:	2300      	movs	r3, #0
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4618      	mov	r0, r3
 8002386:	f003 f9e9 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002390:	f000 fb34 	bl	80029fc <Error_Handler>
  }

  HAL_SetTickFreq(HAL_TICK_FREQ_10KHZ);
 8002394:	2001      	movs	r0, #1
 8002396:	f002 f94f 	bl	8004638 <HAL_SetTickFreq>
}
 800239a:	bf00      	nop
 800239c:	37d0      	adds	r7, #208	; 0xd0
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000

080023ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  __HAL_RCC_CRC_CLK_ENABLE();
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_CRC_Init+0x70>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a19      	ldr	r2, [pc, #100]	; (800241c <MX_CRC_Init+0x70>)
 80023b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_CRC_Init+0x70>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <MX_CRC_Init+0x74>)
 80023cc:	4a15      	ldr	r2, [pc, #84]	; (8002424 <MX_CRC_Init+0x78>)
 80023ce:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <MX_CRC_Init+0x74>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <MX_CRC_Init+0x74>)
 80023d8:	2201      	movs	r2, #1
 80023da:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <MX_CRC_Init+0x74>)
 80023de:	f24a 0201 	movw	r2, #40961	; 0xa001
 80023e2:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <MX_CRC_Init+0x74>)
 80023e6:	2208      	movs	r2, #8
 80023e8:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <MX_CRC_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <MX_CRC_Init+0x74>)
 80023f2:	2220      	movs	r2, #32
 80023f4:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <MX_CRC_Init+0x74>)
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <MX_CRC_Init+0x74>)
 80023fe:	2201      	movs	r2, #1
 8002400:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <MX_CRC_Init+0x74>)
 8002404:	f002 fbc6 	bl	8004b94 <HAL_CRC_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_CRC_Init+0x66>
  {
    Error_Handler();
 800240e:	f000 faf5 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	20008180 	.word	0x20008180
 8002424:	40023000 	.word	0x40023000

08002428 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800242e:	463b      	mov	r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <MX_ADC1_Init+0x98>)
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <MX_ADC1_Init+0x9c>)
 800243e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <MX_ADC1_Init+0x98>)
 8002442:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002446:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <MX_ADC1_Init+0x98>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <MX_ADC1_Init+0x98>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MX_ADC1_Init+0x98>)
 8002456:	2200      	movs	r2, #0
 8002458:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <MX_ADC1_Init+0x98>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <MX_ADC1_Init+0x98>)
 8002464:	2200      	movs	r2, #0
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <MX_ADC1_Init+0x98>)
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <MX_ADC1_Init+0xa0>)
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_ADC1_Init+0x98>)
 8002470:	2200      	movs	r2, #0
 8002472:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <MX_ADC1_Init+0x98>)
 8002476:	2201      	movs	r2, #1
 8002478:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_ADC1_Init+0x98>)
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_ADC1_Init+0x98>)
 8002484:	2201      	movs	r2, #1
 8002486:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002488:	480d      	ldr	r0, [pc, #52]	; (80024c0 <MX_ADC1_Init+0x98>)
 800248a:	f002 f8e9 	bl	8004660 <HAL_ADC_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002494:	f000 fab2 	bl	80029fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_ADC1_Init+0xa4>)
 800249a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800249c:	2301      	movs	r3, #1
 800249e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a4:	463b      	mov	r3, r7
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_ADC1_Init+0x98>)
 80024aa:	f002 fa17 	bl	80048dc <HAL_ADC_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80024b4:	f000 faa2 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20008264 	.word	0x20008264
 80024c4:	40012000 	.word	0x40012000
 80024c8:	0f000001 	.word	0x0f000001
 80024cc:	10000012 	.word	0x10000012

080024d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d6:	f107 031c 	add.w	r3, r7, #28
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e2:	463b      	mov	r3, r7
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	615a      	str	r2, [r3, #20]
 80024f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <MX_TIM2_Init+0xb0>)
 80024f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 422;
 80024fc:	4b20      	ldr	r3, [pc, #128]	; (8002580 <MX_TIM2_Init+0xb0>)
 80024fe:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8002502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_TIM2_Init+0xb0>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <MX_TIM2_Init+0xb0>)
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <MX_TIM2_Init+0xb0>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_TIM2_Init+0xb0>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800251c:	4818      	ldr	r0, [pc, #96]	; (8002580 <MX_TIM2_Init+0xb0>)
 800251e:	f003 fd93 	bl	8006048 <HAL_TIM_PWM_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002528:	f000 fa68 	bl	80029fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	4619      	mov	r1, r3
 800253a:	4811      	ldr	r0, [pc, #68]	; (8002580 <MX_TIM2_Init+0xb0>)
 800253c:	f003 ff52 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002546:	f000 fa59 	bl	80029fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800254a:	2360      	movs	r3, #96	; 0x60
 800254c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800255a:	463b      	mov	r3, r7
 800255c:	2208      	movs	r2, #8
 800255e:	4619      	mov	r1, r3
 8002560:	4807      	ldr	r0, [pc, #28]	; (8002580 <MX_TIM2_Init+0xb0>)
 8002562:	f003 fde7 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800256c:	f000 fa46 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002570:	4803      	ldr	r0, [pc, #12]	; (8002580 <MX_TIM2_Init+0xb0>)
 8002572:	f000 faed 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 8002576:	bf00      	nop
 8002578:	3728      	adds	r7, #40	; 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20008390 	.word	0x20008390

08002584 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <MX_TIM7_Init+0x64>)
 8002596:	4a15      	ldr	r2, [pc, #84]	; (80025ec <MX_TIM7_Init+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <MX_TIM7_Init+0x64>)
 800259c:	226b      	movs	r2, #107	; 0x6b
 800259e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025b6:	f003 fd2d 	bl	8006014 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80025c0:	f000 fa1c 	bl	80029fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_TIM7_Init+0x64>)
 80025d2:	f003 ff07 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80025dc:	f000 fa0e 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200083d0 	.word	0x200083d0
 80025ec:	40001400 	.word	0x40001400

080025f0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002608:	4b23      	ldr	r3, [pc, #140]	; (8002698 <MX_TIM10_Init+0xa8>)
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <MX_TIM10_Init+0xac>)
 800260c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10799;
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <MX_TIM10_Init+0xa8>)
 8002610:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002614:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <MX_TIM10_Init+0xa8>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <MX_TIM10_Init+0xa8>)
 800261e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002622:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <MX_TIM10_Init+0xa8>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <MX_TIM10_Init+0xa8>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002630:	4819      	ldr	r0, [pc, #100]	; (8002698 <MX_TIM10_Init+0xa8>)
 8002632:	f003 fcef 	bl	8006014 <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 800263c:	f000 f9de 	bl	80029fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002640:	4815      	ldr	r0, [pc, #84]	; (8002698 <MX_TIM10_Init+0xa8>)
 8002642:	f003 fd01 	bl	8006048 <HAL_TIM_PWM_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 800264c:	f000 f9d6 	bl	80029fc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8002650:	2108      	movs	r1, #8
 8002652:	4811      	ldr	r0, [pc, #68]	; (8002698 <MX_TIM10_Init+0xa8>)
 8002654:	f003 fd12 	bl	800607c <HAL_TIM_OnePulse_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM10_Init+0x72>
  {
    Error_Handler();
 800265e:	f000 f9cd 	bl	80029fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002662:	2360      	movs	r3, #96	; 0x60
 8002664:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000;
 8002666:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800266a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	4807      	ldr	r0, [pc, #28]	; (8002698 <MX_TIM10_Init+0xa8>)
 800267c:	f003 fd5a 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM10_Init+0x9a>
  {
    Error_Handler();
 8002686:	f000 f9b9 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800268a:	4803      	ldr	r0, [pc, #12]	; (8002698 <MX_TIM10_Init+0xa8>)
 800268c:	f000 fa60 	bl	8002b50 <HAL_TIM_MspPostInit>

}
 8002690:	bf00      	nop
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20008140 	.word	0x20008140
 800269c:	40014400 	.word	0x40014400

080026a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026ac:	4a13      	ldr	r2, [pc, #76]	; (80026fc <MX_USART1_UART_Init+0x5c>)
 80026ae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026c4:	220c      	movs	r2, #12
 80026c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <MX_USART1_UART_Init+0x54>)
 80026e2:	f004 fa82 	bl	8006bea <HAL_UART_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80026ec:	f000 f986 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	2000830c 	.word	0x2000830c
 80026f8:	40011000 	.word	0x40011000
 80026fc:	00337f98 	.word	0x00337f98

08002700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <MX_USART3_UART_Init+0x54>)
 8002706:	4a14      	ldr	r2, [pc, #80]	; (8002758 <MX_USART3_UART_Init+0x58>)
 8002708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 960000;
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <MX_USART3_UART_Init+0x54>)
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <MX_USART3_UART_Init+0x5c>)
 800270e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART3_UART_Init+0x54>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_USART3_UART_Init+0x54>)
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <MX_USART3_UART_Init+0x54>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART3_UART_Init+0x54>)
 8002724:	220c      	movs	r2, #12
 8002726:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <MX_USART3_UART_Init+0x54>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART3_UART_Init+0x54>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <MX_USART3_UART_Init+0x54>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART3_UART_Init+0x54>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002740:	4804      	ldr	r0, [pc, #16]	; (8002754 <MX_USART3_UART_Init+0x54>)
 8002742:	f004 fa52 	bl	8006bea <HAL_UART_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 800274c:	f000 f956 	bl	80029fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200080c0 	.word	0x200080c0
 8002758:	40004800 	.word	0x40004800
 800275c:	000ea600 	.word	0x000ea600

08002760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <MX_DMA_Init+0x80>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <MX_DMA_Init+0x80>)
 800276c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <MX_DMA_Init+0x80>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_DMA_Init+0x80>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <MX_DMA_Init+0x80>)
 8002784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MX_DMA_Init+0x80>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 9, 0); //PC
 8002796:	2200      	movs	r2, #0
 8002798:	2109      	movs	r1, #9
 800279a:	200c      	movs	r0, #12
 800279c:	f002 f956 	bl	8004a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027a0:	200c      	movs	r0, #12
 80027a2:	f002 f985 	bl	8004ab0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 9, 0); //PC
 80027a6:	2200      	movs	r2, #0
 80027a8:	2109      	movs	r1, #9
 80027aa:	200e      	movs	r0, #14
 80027ac:	f002 f94e 	bl	8004a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80027b0:	200e      	movs	r0, #14
 80027b2:	f002 f97d 	bl	8004ab0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //ACIS
 80027b6:	2200      	movs	r2, #0
 80027b8:	2108      	movs	r1, #8
 80027ba:	203a      	movs	r0, #58	; 0x3a
 80027bc:	f002 f946 	bl	8004a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80027c0:	203a      	movs	r0, #58	; 0x3a
 80027c2:	f002 f975 	bl	8004ab0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //ACIS
 80027c6:	2200      	movs	r2, #0
 80027c8:	2108      	movs	r1, #8
 80027ca:	2046      	movs	r0, #70	; 0x46
 80027cc:	f002 f93e 	bl	8004a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80027d0:	2046      	movs	r0, #70	; 0x46
 80027d2:	f002 f96d 	bl	8004ab0 <HAL_NVIC_EnableIRQ>

}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800

080027e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b7b      	ldr	r3, [pc, #492]	; (80029e8 <MX_GPIO_Init+0x204>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a7a      	ldr	r2, [pc, #488]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b78      	ldr	r3, [pc, #480]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a74      	ldr	r2, [pc, #464]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800282a:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <MX_GPIO_Init+0x204>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002842:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a68      	ldr	r2, [pc, #416]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b66      	ldr	r3, [pc, #408]	; (80029e8 <MX_GPIO_Init+0x204>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin|LCD_CS1_Pin, GPIO_PIN_RESET);
 800285a:	2200      	movs	r2, #0
 800285c:	2116      	movs	r1, #22
 800285e:	4863      	ldr	r0, [pc, #396]	; (80029ec <MX_GPIO_Init+0x208>)
 8002860:	f002 fc96 	bl	8005190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 8002864:	2200      	movs	r2, #0
 8002866:	f248 01ff 	movw	r1, #33023	; 0x80ff
 800286a:	4861      	ldr	r0, [pc, #388]	; (80029f0 <MX_GPIO_Init+0x20c>)
 800286c:	f002 fc90 	bl	8005190 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
                          |USB_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002876:	485f      	ldr	r0, [pc, #380]	; (80029f4 <MX_GPIO_Init+0x210>)
 8002878:	f002 fc8a 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002882:	485c      	ldr	r0, [pc, #368]	; (80029f4 <MX_GPIO_Init+0x210>)
 8002884:	f002 fc84 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288e:	4859      	ldr	r0, [pc, #356]	; (80029f4 <MX_GPIO_Init+0x210>)
 8002890:	f002 fc7e 	bl	8005190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800289a:	4856      	ldr	r0, [pc, #344]	; (80029f4 <MX_GPIO_Init+0x210>)
 800289c:	f002 fc78 	bl	8005190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin|LCD_EN_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2107      	movs	r1, #7
 80028a4:	4853      	ldr	r0, [pc, #332]	; (80029f4 <MX_GPIO_Init+0x210>)
 80028a6:	f002 fc73 	bl	8005190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 80028aa:	2306      	movs	r3, #6
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	484a      	ldr	r0, [pc, #296]	; (80029ec <MX_GPIO_Init+0x208>)
 80028c2:	f002 fb89 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80028c6:	2302      	movs	r3, #2
 80028c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4619      	mov	r1, r3
 80028dc:	4845      	ldr	r0, [pc, #276]	; (80029f4 <MX_GPIO_Init+0x210>)
 80028de:	f002 fb7b 	bl	8004fd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1G_Pin|LED2G_Pin|LED2R_Pin|LED1R_Pin;
 80028e2:	f44f 4331 	mov.w	r3, #45312	; 0xb100
 80028e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028e8:	2311      	movs	r3, #17
 80028ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4619      	mov	r1, r3
 80028fa:	483e      	ldr	r0, [pc, #248]	; (80029f4 <MX_GPIO_Init+0x210>)
 80028fc:	f002 fb6c 	bl	8004fd8 <HAL_GPIO_Init>


  /*Configure GPIO pins : LCD_DB0_LED1R_Pin LCD_DB1_LED1G_Pin LCD_DB2_LED2R_Pin LCD_DB3_LED2G_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 8002900:	23ff      	movs	r3, #255	; 0xff
 8002902:	617b      	str	r3, [r7, #20]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002904:	2301      	movs	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4836      	ldr	r0, [pc, #216]	; (80029f0 <MX_GPIO_Init+0x20c>)
 8002918:	f002 fb5e 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS1_Pin */
  GPIO_InitStruct.Pin = LCD_CS1_Pin;
 800291c:	2310      	movs	r3, #16
 800291e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002920:	2301      	movs	r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS1_GPIO_Port, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	482e      	ldr	r0, [pc, #184]	; (80029ec <MX_GPIO_Init+0x208>)
 8002934:	f002 fb50 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS2_Pin|LCD_RST_Pin;
 8002938:	2305      	movs	r3, #5
 800293a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	4829      	ldr	r0, [pc, #164]	; (80029f4 <MX_GPIO_Init+0x210>)
 8002950:	f002 fb42 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_DISPLAY_Pin SW_FUEL2_Pin SW_FUEL1_Pin BUT_CANCEL_Pin */
  GPIO_InitStruct.Pin = SW_DISPLAY_Pin|SW_FUEL2_Pin|SW_FUEL1_Pin|BUT_CANCEL_Pin;
 8002954:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
 8002958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800295e:	2301      	movs	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	4820      	ldr	r0, [pc, #128]	; (80029ec <MX_GPIO_Init+0x208>)
 800296a:	f002 fb35 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800296e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002980:	230a      	movs	r3, #10
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4819      	ldr	r0, [pc, #100]	; (80029f0 <MX_GPIO_Init+0x20c>)
 800298c:	f002 fb24 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_RST_Pin */
  GPIO_InitStruct.Pin = USB_RST_Pin;
 8002990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RST_GPIO_Port, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4811      	ldr	r0, [pc, #68]	; (80029f0 <MX_GPIO_Init+0x20c>)
 80029aa:	f002 fb15 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_ENTER_Pin */
  GPIO_InitStruct.Pin = BUT_ENTER_Pin;
 80029ae:	2304      	movs	r3, #4
 80029b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_ENTER_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <MX_GPIO_Init+0x214>)
 80029c2:	f002 fb09 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_UP_Pin BUT_DOWN_Pin */
  GPIO_InitStruct.Pin = BUT_LEFT_Pin|BUT_RIGHT_Pin|BUT_UP_Pin|BUT_DOWN_Pin;
 80029c6:	23f0      	movs	r3, #240	; 0xf0
 80029c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	4806      	ldr	r0, [pc, #24]	; (80029f4 <MX_GPIO_Init+0x210>)
 80029da:	f002 fafd 	bl	8004fd8 <HAL_GPIO_Init>

}
 80029de:	bf00      	nop
 80029e0:	3728      	adds	r7, #40	; 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40020c00 	.word	0x40020c00

080029fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <Error_Handler+0x6>

08002a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_MspInit+0x4c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	210f      	movs	r1, #15
 8002a3e:	f06f 0001 	mvn.w	r0, #1
 8002a42:	f002 f803 	bl	8004a4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_ADC_MspInit+0x44>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_ADC_MspInit+0x48>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_ADC_MspInit+0x48>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_ADC_MspInit+0x48>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2105      	movs	r1, #5
 8002a82:	2012      	movs	r0, #18
 8002a84:	f001 ffe2 	bl	8004a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a88:	2012      	movs	r0, #18
 8002a8a:	f002 f811 	bl	8004ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40012000 	.word	0x40012000
 8002a9c:	40023800 	.word	0x40023800

08002aa0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d10b      	bne.n	8002aca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x38>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x38>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x38>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <HAL_TIM_Base_MspInit+0x68>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d114      	bne.n	8002b18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_TIM_Base_MspInit+0x6c>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_TIM_Base_MspInit+0x6c>)
 8002af4:	f043 0320 	orr.w	r3, r3, #32
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_TIM_Base_MspInit+0x6c>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2102      	movs	r1, #2
 8002b0a:	2037      	movs	r0, #55	; 0x37
 8002b0c:	f001 ff9e 	bl	8004a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b10:	2037      	movs	r0, #55	; 0x37
 8002b12:	f001 ffcd 	bl	8004ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002b16:	e010      	b.n	8002b3a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <HAL_TIM_Base_MspInit+0x70>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10b      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_TIM_Base_MspInit+0x6c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <HAL_TIM_Base_MspInit+0x6c>)
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_TIM_Base_MspInit+0x6c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40001400 	.word	0x40001400
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40014400 	.word	0x40014400

08002b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d11d      	bne.n	8002bae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_TIM_MspPostInit+0x88>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_TIM_MspPostInit+0x88>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_TIM_MspPostInit+0x88>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LCD_LED_TIM2_CH3_Pin;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LED_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <HAL_TIM_MspPostInit+0x8c>)
 8002ba8:	f002 fa16 	bl	8004fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002bac:	e010      	b.n	8002bd0 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM10)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <HAL_TIM_MspPostInit+0x90>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_TIM_MspPostInit+0x88>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a06      	ldr	r2, [pc, #24]	; (8002bd8 <HAL_TIM_MspPostInit+0x88>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HAL_TIM_MspPostInit+0x88>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	40014400 	.word	0x40014400

08002be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a96      	ldr	r2, [pc, #600]	; (8002e5c <HAL_UART_MspInit+0x278>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	f040 8091 	bne.w	8002d2a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c08:	4b95      	ldr	r3, [pc, #596]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	4a94      	ldr	r2, [pc, #592]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002c0e:	f043 0310 	orr.w	r3, r3, #16
 8002c12:	6453      	str	r3, [r2, #68]	; 0x44
 8002c14:	4b92      	ldr	r3, [pc, #584]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c20:	4b8f      	ldr	r3, [pc, #572]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4a8e      	ldr	r2, [pc, #568]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2c:	4b8c      	ldr	r3, [pc, #560]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	4883      	ldr	r0, [pc, #524]	; (8002e64 <HAL_UART_MspInit+0x280>)
 8002c56:	f002 f9bf 	bl	8004fd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c5a:	4b83      	ldr	r3, [pc, #524]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c5c:	4a83      	ldr	r2, [pc, #524]	; (8002e6c <HAL_UART_MspInit+0x288>)
 8002c5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c60:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c66:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c68:	4b7f      	ldr	r3, [pc, #508]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6e:	4b7e      	ldr	r3, [pc, #504]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c74:	4b7c      	ldr	r3, [pc, #496]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c7c:	4b7a      	ldr	r3, [pc, #488]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c82:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002c88:	4b77      	ldr	r3, [pc, #476]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c90:	4b75      	ldr	r3, [pc, #468]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c96:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c98:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c9e:	4872      	ldr	r0, [pc, #456]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002ca0:	f002 f80e 	bl	8004cc0 <HAL_DMA_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002caa:	f7ff fea7 	bl	80029fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a6d      	ldr	r2, [pc, #436]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002cb2:	66da      	str	r2, [r3, #108]	; 0x6c
 8002cb4:	4a6c      	ldr	r2, [pc, #432]	; (8002e68 <HAL_UART_MspInit+0x284>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002cba:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cbc:	4a6d      	ldr	r2, [pc, #436]	; (8002e74 <HAL_UART_MspInit+0x290>)
 8002cbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002cc0:	4b6b      	ldr	r3, [pc, #428]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cc8:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cce:	4b68      	ldr	r3, [pc, #416]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd4:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cda:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cdc:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ce8:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cf6:	4b5e      	ldr	r3, [pc, #376]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cfc:	485c      	ldr	r0, [pc, #368]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002cfe:	f001 ffdf 	bl	8004cc0 <HAL_DMA_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002d08:	f7ff fe78 	bl	80029fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002d10:	669a      	str	r2, [r3, #104]	; 0x68
 8002d12:	4a57      	ldr	r2, [pc, #348]	; (8002e70 <HAL_UART_MspInit+0x28c>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2105      	movs	r1, #5
 8002d1c:	2025      	movs	r0, #37	; 0x25
 8002d1e:	f001 fe95 	bl	8004a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d22:	2025      	movs	r0, #37	; 0x25
 8002d24:	f001 fec4 	bl	8004ab0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d28:	e093      	b.n	8002e52 <HAL_UART_MspInit+0x26e>
  else if(huart->Instance==USART3)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_UART_MspInit+0x294>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	f040 808e 	bne.w	8002e52 <HAL_UART_MspInit+0x26e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a49      	ldr	r2, [pc, #292]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a43      	ldr	r2, [pc, #268]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_UART_MspInit+0x27c>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d78:	2307      	movs	r3, #7
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7c:	f107 031c 	add.w	r3, r7, #28
 8002d80:	4619      	mov	r1, r3
 8002d82:	483e      	ldr	r0, [pc, #248]	; (8002e7c <HAL_UART_MspInit+0x298>)
 8002d84:	f002 f928 	bl	8004fd8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002d88:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002d8a:	4a3e      	ldr	r2, [pc, #248]	; (8002e84 <HAL_UART_MspInit+0x2a0>)
 8002d8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002d8e:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002d90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d94:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d96:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9c:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002da8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002daa:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db0:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002db6:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dbc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dbe:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dc4:	4b2e      	ldr	r3, [pc, #184]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002dca:	482d      	ldr	r0, [pc, #180]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002dcc:	f001 ff78 	bl	8004cc0 <HAL_DMA_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8002dd6:	f7ff fe11 	bl	80029fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a28      	ldr	r2, [pc, #160]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002dde:	66da      	str	r2, [r3, #108]	; 0x6c
 8002de0:	4a27      	ldr	r2, [pc, #156]	; (8002e80 <HAL_UART_MspInit+0x29c>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002de6:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002de8:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <HAL_UART_MspInit+0x2a8>)
 8002dea:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002df2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002df6:	2240      	movs	r2, #64	; 0x40
 8002df8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e06:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e14:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e26:	4818      	ldr	r0, [pc, #96]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e28:	f001 ff4a 	bl	8004cc0 <HAL_DMA_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_UART_MspInit+0x252>
      Error_Handler();
 8002e32:	f7ff fde3 	bl	80029fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a13      	ldr	r2, [pc, #76]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e3a:	669a      	str	r2, [r3, #104]	; 0x68
 8002e3c:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <HAL_UART_MspInit+0x2a4>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2105      	movs	r1, #5
 8002e46:	2027      	movs	r0, #39	; 0x27
 8002e48:	f001 fe00 	bl	8004a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e4c:	2027      	movs	r0, #39	; 0x27
 8002e4e:	f001 fe2f 	bl	8004ab0 <HAL_NVIC_EnableIRQ>
}
 8002e52:	bf00      	nop
 8002e54:	3730      	adds	r7, #48	; 0x30
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40011000 	.word	0x40011000
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	200082ac 	.word	0x200082ac
 8002e6c:	40026440 	.word	0x40026440
 8002e70:	20008204 	.word	0x20008204
 8002e74:	400264b8 	.word	0x400264b8
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	20008060 	.word	0x20008060
 8002e84:	40026028 	.word	0x40026028
 8002e88:	200081a4 	.word	0x200081a4
 8002e8c:	40026058 	.word	0x40026058

08002e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <NMI_Handler+0x4>

08002e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <HardFault_Handler+0x4>

08002e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <MemManage_Handler+0x4>

08002ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <BusFault_Handler+0x4>

08002ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <UsageFault_Handler+0x4>

08002eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec0:	f001 fba8 	bl	8004614 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002ec4:	f005 f952 	bl	800816c <xTaskGetSchedulerState>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ece:	f005 fd29 	bl	8008924 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <DMA1_Stream1_IRQHandler+0x10>)
 8002ede:	f001 ffbd 	bl	8004e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20008060 	.word	0x20008060

08002eec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <DMA1_Stream3_IRQHandler+0x10>)
 8002ef2:	f001 ffb3 	bl	8004e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200081a4 	.word	0x200081a4

08002f00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <ADC_IRQHandler+0x10>)
 8002f06:	f001 fc54 	bl	80047b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20008264 	.word	0x20008264

08002f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <USART1_IRQHandler+0x10>)
 8002f1a:	f003 fbb7 	bl	800668c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000830c 	.word	0x2000830c

08002f28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <USART3_IRQHandler+0x10>)
 8002f2e:	f003 fbad 	bl	800668c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200080c0 	.word	0x200080c0

08002f3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <TIM7_IRQHandler+0x10>)
 8002f42:	f002 ff50 	bl	8005de6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200083d0 	.word	0x200083d0

08002f50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f54:	4802      	ldr	r0, [pc, #8]	; (8002f60 <DMA2_Stream2_IRQHandler+0x10>)
 8002f56:	f001 ff81 	bl	8004e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200082ac 	.word	0x200082ac

08002f64 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <DMA2_Stream7_IRQHandler+0x10>)
 8002f6a:	f001 ff77 	bl	8004e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20008204 	.word	0x20008204

08002f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <_sbrk+0x5c>)
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <_sbrk+0x60>)
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <_sbrk+0x64>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <_sbrk+0x68>)
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d207      	bcs.n	8002fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa8:	f007 f9ac 	bl	800a304 <__errno>
 8002fac:	4602      	mov	r2, r0
 8002fae:	230c      	movs	r3, #12
 8002fb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb6:	e009      	b.n	8002fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <_sbrk+0x64>)
 8002fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20040000 	.word	0x20040000
 8002fd8:	00000400 	.word	0x00000400
 8002fdc:	20002afc 	.word	0x20002afc
 8002fe0:	20008458 	.word	0x20008458

08002fe4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <SystemInit+0x28>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	4a07      	ldr	r2, [pc, #28]	; (800300c <SystemInit+0x28>)
 8002ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <SystemInit+0x28>)
 8002ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ffe:	609a      	str	r2, [r3, #8]
#endif
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003022:	2320      	movs	r3, #32
 8003024:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003026:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800302a:	e00b      	b.n	8003044 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800302c:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <SCB_InvalidateDCache_by_Addr+0x50>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	dcf0      	bgt.n	800302c <SCB_InvalidateDCache_by_Addr+0x1c>
 800304a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800304e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003076:	2320      	movs	r3, #32
 8003078:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800307a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800307e:	e00b      	b.n	8003098 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8003080:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <SCB_CleanDCache_by_Addr+0x50>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	dcf0      	bgt.n	8003080 <SCB_CleanDCache_by_Addr+0x1c>
 800309e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030a2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <Msg_GetSrc>:
static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, etrACIS },
    {{0},{0},{0},{0},{0},{0}, &huart3, etrPC },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff7d 	bl	8003010 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8003116:	e009      	b.n	800312c <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f7ff ff72 	bl	8003010 <SCB_InvalidateDCache_by_Addr>
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff87 	bl	8003064 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8003156:	e009      	b.n	800316c <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	4618      	mov	r0, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	4619      	mov	r1, r3
 8003168:	f7ff ff7c 	bl	8003064 <SCB_CleanDCache_by_Addr>
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <calculatePacketId+0x6c>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <calculatePacketId+0x6c>)
 8003184:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <calculatePacketId+0x6c>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 800318c:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <calculatePacketId+0x70>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	b29b      	uxth	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	703b      	strb	r3, [r7, #0]
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	707b      	strb	r3, [r7, #1]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	70bb      	strb	r3, [r7, #2]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	70fb      	strb	r3, [r7, #3]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	713b      	strb	r3, [r7, #4]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 80031c0:	463b      	mov	r3, r7
 80031c2:	2106      	movs	r1, #6
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fb73 	bl	80018b0 <CRC16_Generate>
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0d2      	beq.n	800317a <calculatePacketId+0x6>
  return returnvalue;
 80031d4:	88fb      	ldrh	r3, [r7, #6]

}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20002b14 	.word	0x20002b14
 80031e4:	40000c00 	.word	0x40000c00

080031e8 <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	460b      	mov	r3, r1
 80031f8:	80fb      	strh	r3, [r7, #6]
 80031fa:	4613      	mov	r3, r2
 80031fc:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8106 	beq.w	8003412 <packager+0x22a>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800320c:	f080 8101 	bcs.w	8003412 <packager+0x22a>
    {
        uint16_t aCrc15 = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <packager+0x3a>
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	330a      	adds	r3, #10
 800321e:	b29b      	uxth	r3, r3
 8003220:	e000      	b.n	8003224 <packager+0x3c>
 8003222:	2308      	movs	r3, #8
 8003224:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = ( etrCTRL | ( xChaDest << 3 ) ) & HEADER_MASK_BITS;
 8003226:	797b      	ldrb	r3, [r7, #5]
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	b25b      	sxtb	r3, r3
 800322c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003230:	b25b      	sxtb	r3, r3
 8003232:	f043 0303 	orr.w	r3, r3, #3
 8003236:	b25b      	sxtb	r3, r3
 8003238:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8003240:	2255      	movs	r2, #85	; 0x55
 8003242:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	f241 0381 	movw	r3, #4225	; 0x1081
 800324a:	4413      	add	r3, r2
 800324c:	2255      	movs	r2, #85	; 0x55
 800324e:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	f241 0382 	movw	r3, #4226	; 0x1082
 8003256:	4413      	add	r3, r2
 8003258:	7cfa      	ldrb	r2, [r7, #19]
 800325a:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 800325c:	8abb      	ldrh	r3, [r7, #20]
 800325e:	b2d9      	uxtb	r1, r3
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	f241 0383 	movw	r3, #4227	; 0x1083
 8003266:	4413      	add	r3, r2
 8003268:	460a      	mov	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	b29b      	uxth	r3, r3
 8003272:	b2d9      	uxtb	r1, r3
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	f241 0384 	movw	r3, #4228	; 0x1084
 800327a:	4413      	add	r3, r2
 800327c:	460a      	mov	r2, r1
 800327e:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 8003280:	8c3b      	ldrh	r3, [r7, #32]
 8003282:	b2d9      	uxtb	r1, r3
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	f241 0385 	movw	r3, #4229	; 0x1085
 800328a:	4413      	add	r3, r2
 800328c:	460a      	mov	r2, r1
 800328e:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 8003290:	8c3b      	ldrh	r3, [r7, #32]
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	b29b      	uxth	r3, r3
 8003296:	b2d9      	uxtb	r1, r3
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	f241 0386 	movw	r3, #4230	; 0x1086
 800329e:	4413      	add	r3, r2
 80032a0:	460a      	mov	r2, r1
 80032a2:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80032aa:	2107      	movs	r1, #7
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe fb37 	bl	8001920 <CRC8_Generate>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4619      	mov	r1, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	f241 0387 	movw	r3, #4231	; 0x1087
 80032bc:	4413      	add	r3, r2
 80032be:	460a      	mov	r2, r1
 80032c0:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <packager+0x108>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	f241 0388 	movw	r3, #4232	; 0x1088
 80032ce:	4413      	add	r3, r2
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f007 f83f 	bl	800a358 <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	3308      	adds	r3, #8
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f7fe fae2 	bl	80018b0 <CRC16_Generate>
 80032ec:	4603      	mov	r3, r0
 80032ee:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80032fa:	4413      	add	r3, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 f916 	bl	800452e <protIsSome>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d149      	bne.n	800339c <packager+0x1b4>
        {
          taskENTER_CRITICAL();
 8003308:	f005 fa9c 	bl	8008844 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003312:	4413      	add	r3, r2
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d13d      	bne.n	8003398 <packager+0x1b0>
          {
            xHandle->TxBusy = 1;
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003322:	4413      	add	r3, r2
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
            handled = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800332c:	f005 fab0 	bl	8008890 <vPortExitCritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800333c:	2208      	movs	r2, #8
 800333e:	4619      	mov	r1, r3
 8003340:	f007 f80a 	bl	800a358 <memcpy>
            if (xMsgLen) {
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d012      	beq.n	8003370 <packager+0x188>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	f241 0388 	movw	r3, #4232	; 0x1088
 8003356:	4413      	add	r3, r2
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	4619      	mov	r1, r3
 800335c:	f006 fffc 	bl	800a358 <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	3308      	adds	r3, #8
 8003364:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	8a3a      	ldrh	r2, [r7, #16]
 800336e:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003376:	8aba      	ldrh	r2, [r7, #20]
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff feda 	bl	8003134 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800338e:	8aba      	ldrh	r2, [r7, #20]
 8003390:	4619      	mov	r1, r3
 8003392:	f003 f887 	bl	80064a4 <HAL_UART_Transmit_DMA>
 8003396:	e001      	b.n	800339c <packager+0x1b4>
          }
          else taskEXIT_CRITICAL();
 8003398:	f005 fa7a 	bl	8008890 <vPortExitCritical>
        }

        if(!handled)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d137      	bne.n	8003412 <packager+0x22a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f241 339c 	movw	r3, #5020	; 0x139c
 80033a8:	4413      	add	r3, r2
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f04f 31ff 	mov.w	r1, #4294967295
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 f94b 	bl	800764c <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80033bc:	4413      	add	r3, r2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 80033c4:	2208      	movs	r2, #8
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 f83d 	bl	8004446 <protPushSequence>
          if (xMsgLen) {
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d015      	beq.n	80033fe <packager+0x216>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80033d8:	4413      	add	r3, r2
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	f241 0188 	movw	r1, #4232	; 0x1088
 80033e0:	4411      	add	r1, r2
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 f82e 	bl	8004446 <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80033f0:	4413      	add	r3, r2
 80033f2:	f107 0110 	add.w	r1, r7, #16
 80033f6:	2202      	movs	r2, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 f824 	bl	8004446 <protPushSequence>
          }
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f241 339c 	movw	r3, #5020	; 0x139c
 8003404:	4413      	add	r3, r2
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	2300      	movs	r3, #0
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	f003 ff0d 	bl	800722c <xQueueGenericSend>
        }
    }
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	807b      	strh	r3, [r7, #2]
 8003426:	4613      	mov	r3, r2
 8003428:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8089 	beq.w	8003544 <acker+0x12a>
    {
        uint16_t aTotLen = 8;
 8003432:	2308      	movs	r3, #8
 8003434:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrCTRL | ( xChaDest << 3 ) ) | HEADER_ACK_BIT) & HEADER_MASK_BITS;
 8003436:	787b      	ldrb	r3, [r7, #1]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	b25b      	sxtb	r3, r3
 800343c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003440:	b25b      	sxtb	r3, r3
 8003442:	f043 0303 	orr.w	r3, r3, #3
 8003446:	b25b      	sxtb	r3, r3
 8003448:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 800344a:	2355      	movs	r3, #85	; 0x55
 800344c:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 800344e:	2355      	movs	r3, #85	; 0x55
 8003450:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 8003456:	8abb      	ldrh	r3, [r7, #20]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 800345c:	8abb      	ldrh	r3, [r7, #20]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	b29b      	uxth	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	b29b      	uxth	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 8003476:	f107 0308 	add.w	r3, r7, #8
 800347a:	2107      	movs	r1, #7
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fa4f 	bl	8001920 <CRC8_Generate>
 8003482:	4603      	mov	r3, r0
 8003484:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003490:	4413      	add	r3, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f84b 	bl	800452e <protIsSome>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d131      	bne.n	8003502 <acker+0xe8>
        {
          taskENTER_CRITICAL();
 800349e:	f005 f9d1 	bl	8008844 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	f241 33d0 	movw	r3, #5072	; 0x13d0
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d125      	bne.n	80034fe <acker+0xe4>
          {
            xHandle->TxBusy = 1;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	f241 33d0 	movw	r3, #5072	; 0x13d0
 80034b8:	4413      	add	r3, r2
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
            handled = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 80034c2:	f005 f9e5 	bl	8008890 <vPortExitCritical>
            memcpy(xHandle->BufTx,header,8);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80034cc:	461a      	mov	r2, r3
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	cb03      	ldmia	r3!, {r0, r1}
 80034d4:	6010      	str	r0, [r2, #0]
 80034d6:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80034de:	2108      	movs	r1, #8
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fe27 	bl	8003134 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80034f4:	2208      	movs	r2, #8
 80034f6:	4619      	mov	r1, r3
 80034f8:	f002 ffd4 	bl	80064a4 <HAL_UART_Transmit_DMA>
 80034fc:	e001      	b.n	8003502 <acker+0xe8>
          }
          else taskEXIT_CRITICAL();
 80034fe:	f005 f9c7 	bl	8008890 <vPortExitCritical>
        }

        if(!handled)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11d      	bne.n	8003544 <acker+0x12a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	f241 339c 	movw	r3, #5020	; 0x139c
 800350e:	4413      	add	r3, r2
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f04f 31ff 	mov.w	r1, #4294967295
 8003516:	4618      	mov	r0, r3
 8003518:	f004 f898 	bl	800764c <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,header,8);
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003522:	4413      	add	r3, r2
 8003524:	f107 0108 	add.w	r1, r7, #8
 8003528:	2208      	movs	r2, #8
 800352a:	4618      	mov	r0, r3
 800352c:	f000 ff8b 	bl	8004446 <protPushSequence>
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	f241 339c 	movw	r3, #5020	; 0x139c
 8003536:	4413      	add	r3, r2
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	2300      	movs	r3, #0
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	f003 fe74 	bl	800722c <xQueueGenericSend>
        }
    }
}
 8003544:	bf00      	nop
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af02      	add	r7, sp, #8
 8003552:	4603      	mov	r3, r0
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <xSender+0x14c>)
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	e019      	b.n	800359e <xSender+0x52>
  {
    if(xHandles[i].xChannel == xChaDest)
 800356a:	4a4c      	ldr	r2, [pc, #304]	; (800369c <xSender+0x150>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f241 31d4 	movw	r1, #5076	; 0x13d4
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	441a      	add	r2, r3
 8003578:	f241 3384 	movw	r3, #4996	; 0x1384
 800357c:	4413      	add	r3, r2
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	429a      	cmp	r2, r3
 8003584:	d108      	bne.n	8003598 <xSender+0x4c>
    {
      handle = &xHandles[i];
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	4a42      	ldr	r2, [pc, #264]	; (800369c <xSender+0x150>)
 8003592:	4413      	add	r3, r2
 8003594:	61fb      	str	r3, [r7, #28]
      break;
 8003596:	e005      	b.n	80035a4 <xSender+0x58>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	3301      	adds	r3, #1
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d9e2      	bls.n	800356a <xSender+0x1e>
    }
  }

  if(handle)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d070      	beq.n	800368c <xSender+0x140>
  {
    taskENTER_CRITICAL();
 80035aa:	f005 f94b 	bl	8008844 <vPortEnterCritical>
    if(NeedAckPacket)
 80035ae:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <xSender+0x154>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d045      	beq.n	8003644 <xSender+0xf8>
    {
      if(ReceivedAckPacket)
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <xSender+0x158>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <xSender+0x8a>
      {
        NeedAckPacket = 0;
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <xSender+0x154>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <xSender+0x15c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 80035ce:	f005 f95f 	bl	8008890 <vPortExitCritical>
        return 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e05b      	b.n	800368e <xSender+0x142>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 80035d6:	4b35      	ldr	r3, [pc, #212]	; (80036ac <xSender+0x160>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4619      	mov	r1, r3
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f7fe fa57 	bl	8001a90 <DelayDiff>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d928      	bls.n	800363e <xSender+0xf2>
        {
          if(RetriesPacket > RETRIES_MAX)
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <xSender+0x164>)
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b14      	cmp	r3, #20
 80035f4:	d90a      	bls.n	800360c <xSender+0xc0>
          {
            NeedAckPacket = 0;
 80035f6:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <xSender+0x154>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <xSender+0x15c>)
 80035fe:	2200      	movs	r2, #0
 8003600:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 8003602:	f005 f945 	bl	8008890 <vPortExitCritical>
            return -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e040      	b.n	800368e <xSender+0x142>
          }
          LastNotAckedTime = now;
 800360c:	4a27      	ldr	r2, [pc, #156]	; (80036ac <xSender+0x160>)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 8003612:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <xSender+0x164>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <xSender+0x164>)
 800361e:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 8003620:	f005 f936 	bl	8008890 <vPortExitCritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	b29a      	uxth	r2, r3
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <xSender+0x15c>)
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	7bf9      	ldrb	r1, [r7, #15]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	460b      	mov	r3, r1
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	69f8      	ldr	r0, [r7, #28]
 8003638:	f7ff fdd6 	bl	80031e8 <packager>
 800363c:	e026      	b.n	800368c <xSender+0x140>
        }
        else taskEXIT_CRITICAL();
 800363e:	f005 f927 	bl	8008890 <vPortExitCritical>
 8003642:	e023      	b.n	800368c <xSender+0x140>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <xSender+0x158>)
 8003646:	2200      	movs	r2, #0
 8003648:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <xSender+0x154>)
 800364c:	2201      	movs	r2, #1
 800364e:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <xSender+0x160>)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 8003656:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <xSender+0x164>)
 8003658:	2200      	movs	r2, #0
 800365a:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800365c:	f005 f918 	bl	8008890 <vPortExitCritical>
      NeededAckPacketId = calculatePacketId();
 8003660:	f7ff fd88 	bl	8003174 <calculatePacketId>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <xSender+0x15c>)
 800366a:	801a      	strh	r2, [r3, #0]
      time1 = Delay_Tick;
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <xSender+0x14c>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <xSender+0x168>)
 8003672:	6013      	str	r3, [r2, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <xSender+0x15c>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	7bf9      	ldrb	r1, [r7, #15]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	460b      	mov	r3, r1
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	69f8      	ldr	r0, [r7, #28]
 8003688:	f7ff fdae 	bl	80031e8 <packager>
    }
  }
  return 0;
 800368c:	2300      	movs	r3, #0

}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40000c00 	.word	0x40000c00
 800369c:	20000020 	.word	0x20000020
 80036a0:	20002b02 	.word	0x20002b02
 80036a4:	2000001c 	.word	0x2000001c
 80036a8:	20002b04 	.word	0x20002b04
 80036ac:	20002b08 	.word	0x20002b08
 80036b0:	20002b00 	.word	0x20002b00
 80036b4:	20002b0c 	.word	0x20002b0c

080036b8 <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	; 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	70fb      	strb	r3, [r7, #3]

	uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
	sGetterHandle * hDest = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	e019      	b.n	8003704 <parser+0x4c>
  {
    if(xHandles[i].xChannel == xChaSrc)
 80036d0:	4aae      	ldr	r2, [pc, #696]	; (800398c <parser+0x2d4>)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	f241 31d4 	movw	r1, #5076	; 0x13d4
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	441a      	add	r2, r3
 80036de:	f241 3384 	movw	r3, #4996	; 0x1384
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d108      	bne.n	80036fe <parser+0x46>
    {
      hDest = &xHandles[i];
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	f241 32d4 	movw	r2, #5076	; 0x13d4
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	4aa5      	ldr	r2, [pc, #660]	; (800398c <parser+0x2d4>)
 80036f8:	4413      	add	r3, r2
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036fc:	e005      	b.n	800370a <parser+0x52>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	3301      	adds	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	2b01      	cmp	r3, #1
 8003708:	d9e2      	bls.n	80036d0 <parser+0x18>
    }
  }


    switch (xChaDest) {
 800370a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800370e:	2b01      	cmp	r3, #1
 8003710:	f2c0 811d 	blt.w	800394e <parser+0x296>
 8003714:	2b02      	cmp	r3, #2
 8003716:	f340 8099 	ble.w	800384c <parser+0x194>
 800371a:	2b03      	cmp	r3, #3
 800371c:	f040 8117 	bne.w	800394e <parser+0x296>

        case etrCTRL:
        {
            if (xDataLen)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04f      	beq.n	80037c6 <parser+0x10e>
            {
                for(int i = 0; i < 8; i++)
 8003726:	2300      	movs	r3, #0
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	e00a      	b.n	8003742 <parser+0x8a>
                  protPull(xFifo, &header[i]);
 800372c:	f107 0210 	add.w	r2, r7, #16
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	4413      	add	r3, r2
 8003734:	4619      	mov	r1, r3
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fec1 	bl	80044be <protPull>
                for(int i = 0; i < 8; i++)
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	3301      	adds	r3, #1
 8003740:	623b      	str	r3, [r7, #32]
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	2b07      	cmp	r3, #7
 8003746:	ddf1      	ble.n	800372c <parser+0x74>

                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374c:	e010      	b.n	8003770 <parser+0xb8>
                {
                  protPull(xFifo, &data);
 800374e:	f107 0319 	add.w	r3, r7, #25
 8003752:	4619      	mov	r1, r3
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 feb2 	bl	80044be <protPull>
                  hDest->BufParser[aCount]=data;
 800375a:	7e79      	ldrb	r1, [r7, #25]
 800375c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	4413      	add	r3, r2
 8003762:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003766:	460a      	mov	r2, r1
 8003768:	701a      	strb	r2, [r3, #0]
                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	3301      	adds	r3, #1
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b0a      	subs	r3, #10
 8003774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003776:	429a      	cmp	r2, r3
 8003778:	d3e9      	bcc.n	800374e <parser+0x96>
                }
                protPull(xFifo, &data);
 800377a:	f107 0319 	add.w	r3, r7, #25
 800377e:	4619      	mov	r1, r3
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fe9c 	bl	80044be <protPull>
                protPull(xFifo, &data);
 8003786:	f107 0319 	add.w	r3, r7, #25
 800378a:	4619      	mov	r1, r3
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fe96 	bl	80044be <protPull>

                hDest->BufParser[aCount]=0;
 8003792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	4413      	add	r3, r2
 8003798:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]

                if(hDest) acker(hDest,xPacketId,xChaSrc);
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <parser+0xfc>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	4619      	mov	r1, r3
 80037ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b0:	f7ff fe33 	bl	800341a <acker>

                acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fd0a 	bl	80011d8 <acis_parse_command>
                }
                taskEXIT_CRITICAL();

            }

            break;
 80037c4:	e0dd      	b.n	8003982 <parser+0x2ca>
                for (aCount = 0; aCount < 8; aCount++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ca:	e013      	b.n	80037f4 <parser+0x13c>
                  for(int i = 0; i < 8; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e00a      	b.n	80037e8 <parser+0x130>
                    protPull(xFifo, &header[i]);
 80037d2:	f107 0210 	add.w	r2, r7, #16
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fe6e 	bl	80044be <protPull>
                  for(int i = 0; i < 8; i++)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b07      	cmp	r3, #7
 80037ec:	ddf1      	ble.n	80037d2 <parser+0x11a>
                for (aCount = 0; aCount < 8; aCount++)
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	3301      	adds	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	d9e8      	bls.n	80037cc <parser+0x114>
                taskENTER_CRITICAL();
 80037fa:	f005 f823 	bl	8008844 <vPortEnterCritical>
                if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 80037fe:	4b64      	ldr	r3, [pc, #400]	; (8003990 <parser+0x2d8>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01e      	beq.n	8003846 <parser+0x18e>
 8003808:	4b62      	ldr	r3, [pc, #392]	; (8003994 <parser+0x2dc>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d019      	beq.n	8003846 <parser+0x18e>
 8003812:	4b60      	ldr	r3, [pc, #384]	; (8003994 <parser+0x2dc>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4293      	cmp	r3, r2
 800381e:	d112      	bne.n	8003846 <parser+0x18e>
 8003820:	4b5d      	ldr	r3, [pc, #372]	; (8003998 <parser+0x2e0>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <parser+0x18e>
                  time2 = DelayDiff(Delay_Tick, time1);
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <parser+0x2e4>)
 800382c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <parser+0x2e8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f7fe f92b 	bl	8001a90 <DelayDiff>
 800383a:	4602      	mov	r2, r0
 800383c:	4b59      	ldr	r3, [pc, #356]	; (80039a4 <parser+0x2ec>)
 800383e:	601a      	str	r2, [r3, #0]
                  ReceivedAckPacket = 1;
 8003840:	4b55      	ldr	r3, [pc, #340]	; (8003998 <parser+0x2e0>)
 8003842:	2201      	movs	r2, #1
 8003844:	801a      	strh	r2, [r3, #0]
                taskEXIT_CRITICAL();
 8003846:	f005 f823 	bl	8008890 <vPortExitCritical>
            break;
 800384a:	e09a      	b.n	8003982 <parser+0x2ca>
        }

        case etrACIS:
        case etrPC:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b0a      	cmp	r3, #10
 8003850:	d902      	bls.n	8003858 <parser+0x1a0>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e000      	b.n	800385a <parser+0x1a2>
 8003858:	2308      	movs	r3, #8
 800385a:	76bb      	strb	r3, [r7, #26]

          if(hDest)
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d075      	beq.n	800394e <parser+0x296>
          {

            uint8_t handled = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	76fb      	strb	r3, [r7, #27]
            if(!protIsSome(&hDest->xTxFifo))
 8003866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003868:	f241 3388 	movw	r3, #5000	; 0x1388
 800386c:	4413      	add	r3, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fe5d 	bl	800452e <protIsSome>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d13d      	bne.n	80038f6 <parser+0x23e>
            {
              taskENTER_CRITICAL();
 800387a:	f004 ffe3 	bl	8008844 <vPortEnterCritical>
              if(!hDest->TxBusy)
 800387e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003880:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003884:	4413      	add	r3, r2
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d131      	bne.n	80038f2 <parser+0x23a>
              {
                hDest->TxBusy = 1;
 800388e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003890:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003894:	4413      	add	r3, r2
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
                handled = 1;
 800389a:	2301      	movs	r3, #1
 800389c:	76fb      	strb	r3, [r7, #27]
                taskEXIT_CRITICAL();
 800389e:	f004 fff7 	bl	8008890 <vPortExitCritical>

                for (aCount = 0; aCount < sCount; aCount++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a6:	e00b      	b.n	80038c0 <parser+0x208>
                {
                  protPull(xFifo, &hDest->BufTx[aCount]);
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80038ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b0:	4413      	add	r3, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fe02 	bl	80044be <protPull>
                for (aCount = 0; aCount < sCount; aCount++)
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	3301      	adds	r3, #1
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c0:	7ebb      	ldrb	r3, [r7, #26]
 80038c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d3ef      	bcc.n	80038a8 <parser+0x1f0>
                }

                CacheClean(hDest->BufTx, sCount);
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80038ce:	7eba      	ldrb	r2, [r7, #26]
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fc2e 	bl	8003134 <CacheClean>
                HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80038e6:	7eba      	ldrb	r2, [r7, #26]
 80038e8:	b292      	uxth	r2, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	f002 fdda 	bl	80064a4 <HAL_UART_Transmit_DMA>
 80038f0:	e001      	b.n	80038f6 <parser+0x23e>
              }
              else taskEXIT_CRITICAL();
 80038f2:	f004 ffcd 	bl	8008890 <vPortExitCritical>
            }

            if(!handled)
 80038f6:	7efb      	ldrb	r3, [r7, #27]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d141      	bne.n	8003980 <parser+0x2c8>
            {
              xSemaphoreTake(xFifo->info.globallock, portMAX_DELAY);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f04f 31ff 	mov.w	r1, #4294967295
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fea1 	bl	800764c <xQueueSemaphoreTake>
              for (aCount = 0; aCount < sCount; aCount++)
 800390a:	2300      	movs	r3, #0
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390e:	e012      	b.n	8003936 <parser+0x27e>
              {
                protPull(xFifo, &data);
 8003910:	f107 0319 	add.w	r3, r7, #25
 8003914:	4619      	mov	r1, r3
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fdd1 	bl	80044be <protPull>
                protPush(&hDest->xTxFifo, &data);
 800391c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800391e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003922:	4413      	add	r3, r2
 8003924:	f107 0219 	add.w	r2, r7, #25
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fdaa 	bl	8004484 <protPush>
              for (aCount = 0; aCount < sCount; aCount++)
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	3301      	adds	r3, #1
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003936:	7ebb      	ldrb	r3, [r7, #26]
 8003938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800393a:	429a      	cmp	r2, r3
 800393c:	d3e8      	bcc.n	8003910 <parser+0x258>
              }
              xSemaphoreGive(xFifo->info.globallock);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6958      	ldr	r0, [r3, #20]
 8003942:	2300      	movs	r3, #0
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	f003 fc70 	bl	800722c <xQueueGenericSend>
            }

            break;
 800394c:	e018      	b.n	8003980 <parser+0x2c8>
        }
        /* no break */

        default:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b0a      	cmp	r3, #10
 8003952:	d902      	bls.n	800395a <parser+0x2a2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e000      	b.n	800395c <parser+0x2a4>
 800395a:	2308      	movs	r3, #8
 800395c:	76bb      	strb	r3, [r7, #26]
          for (aCount = 0; aCount < sCount; aCount++)
 800395e:	2300      	movs	r3, #0
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003962:	e008      	b.n	8003976 <parser+0x2be>
          {
            protPull(xFifo, &data);
 8003964:	f107 0319 	add.w	r3, r7, #25
 8003968:	4619      	mov	r1, r3
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fda7 	bl	80044be <protPull>
          for (aCount = 0; aCount < sCount; aCount++)
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	3301      	adds	r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003976:	7ebb      	ldrb	r3, [r7, #26]
 8003978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800397a:	429a      	cmp	r2, r3
 800397c:	d3f2      	bcc.n	8003964 <parser+0x2ac>
          }
          break;
 800397e:	e000      	b.n	8003982 <parser+0x2ca>
            break;
 8003980:	bf00      	nop
        }
    }
}
 8003982:	bf00      	nop
 8003984:	3730      	adds	r7, #48	; 0x30
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000020 	.word	0x20000020
 8003990:	20002b02 	.word	0x20002b02
 8003994:	20002b04 	.word	0x20002b04
 8003998:	2000001c 	.word	0x2000001c
 800399c:	40000c00 	.word	0x40000c00
 80039a0:	20002b0c 	.word	0x20002b0c
 80039a4:	20002b10 	.word	0x20002b10

080039a8 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	f107 030f 	add.w	r3, r7, #15
 80039b6:	461a      	mov	r2, r3
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fd8e 	bl	80044dc <protLook>
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e013      	b.n	8003a04 <countCRC8+0x3a>
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f241 33a4 	movw	r3, #5028	; 0x13a4
 80039e2:	4413      	add	r3, r2
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ffde 	bl	80039a8 <lookByte>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4619      	mov	r1, r3
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80039fa:	460a      	mov	r2, r1
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d9e8      	bls.n	80039dc <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003a10:	2107      	movs	r1, #7
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd ff84 	bl	8001920 <CRC8_Generate>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 8003a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e013      	b.n	8003a62 <countCRC16+0x3c>
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8003a40:	4413      	add	r3, r2
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ffaf 	bl	80039a8 <lookByte>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003a58:	460a      	mov	r2, r1
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3b02      	subs	r3, #2
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3e6      	bcc.n	8003a3a <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	3b02      	subs	r3, #2
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f7fd ff19 	bl	80018b0 <CRC16_Generate>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 8003a82:	68bb      	ldr	r3, [r7, #8]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <Getter>:

static void Getter(sGetterHandle * handle)
{
 8003a8c:	b5b0      	push	{r4, r5, r7, lr}
 8003a8e:	b08c      	sub	sp, #48	; 0x30
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8003a9e:	4413      	add	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	f241 33c4 	movw	r3, #5060	; 0x13c4
 8003ab0:	4413      	add	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8003aba:	4413      	add	r3, r2
 8003abc:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d043      	beq.n	8003b5e <Getter+0xd2>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f000 fbb4 	bl	8004244 <protGetSize>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f200 80ad 	bhi.w	8003c40 <Getter+0x1b4>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 8003ae6:	69f9      	ldr	r1, [r7, #28]
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff9c 	bl	8003a26 <countCRC16>
 8003aee:	4604      	mov	r4, r0
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3b02      	subs	r3, #2
 8003af4:	4619      	mov	r1, r3
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7ff ff56 	bl	80039a8 <lookByte>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461d      	mov	r5, r3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	4619      	mov	r1, r3
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff4e 	bl	80039a8 <lookByte>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	442b      	add	r3, r5
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d11c      	bne.n	8003b50 <Getter+0xc4>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003b16:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003b18:	2102      	movs	r1, #2
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff44 	bl	80039a8 <lookByte>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fac8 	bl	80030b8 <Msg_GetSrc>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	b2dd      	uxtb	r5, r3
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff3a 	bl	80039a8 <lookByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff facc 	bl	80030d4 <Msg_GetDest>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	462b      	mov	r3, r5
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	4621      	mov	r1, r4
 8003b48:	6978      	ldr	r0, [r7, #20]
 8003b4a:	f7ff fdb5 	bl	80036b8 <parser>
 8003b4e:	e001      	b.n	8003b54 <Getter+0xc8>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 8003b50:	2301      	movs	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	e070      	b.n	8003c40 <Getter+0x1b4>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	f000 fb70 	bl	8004244 <protGetSize>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b07      	cmp	r3, #7
 8003b68:	d96a      	bls.n	8003c40 <Getter+0x1b4>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f7ff ff1b 	bl	80039a8 <lookByte>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b55      	cmp	r3, #85	; 0x55
 8003b76:	d161      	bne.n	8003c3c <Getter+0x1b0>
 8003b78:	2101      	movs	r1, #1
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7ff ff14 	bl	80039a8 <lookByte>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b55      	cmp	r3, #85	; 0x55
 8003b84:	d15a      	bne.n	8003c3c <Getter+0x1b0>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ff1f 	bl	80039ca <countCRC8>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461c      	mov	r4, r3
 8003b90:	2107      	movs	r1, #7
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f7ff ff08 	bl	80039a8 <lookByte>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	429c      	cmp	r4, r3
 8003b9c:	d14a      	bne.n	8003c34 <Getter+0x1a8>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	6978      	ldr	r0, [r7, #20]
 8003ba2:	f7ff ff01 	bl	80039a8 <lookByte>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461c      	mov	r4, r3
 8003baa:	2104      	movs	r1, #4
 8003bac:	6978      	ldr	r0, [r7, #20]
 8003bae:	f7ff fefb 	bl	80039a8 <lookByte>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	4423      	add	r3, r4
 8003bb8:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 8003bba:	2105      	movs	r1, #5
 8003bbc:	6978      	ldr	r0, [r7, #20]
 8003bbe:	f7ff fef3 	bl	80039a8 <lookByte>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	b29c      	uxth	r4, r3
 8003bc6:	2106      	movs	r1, #6
 8003bc8:	6978      	ldr	r0, [r7, #20]
 8003bca:	f7ff feed 	bl	80039a8 <lookByte>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4423      	add	r3, r4
 8003bd8:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 8003bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d026      	beq.n	8003c2e <Getter+0x1a2>
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003be6:	d222      	bcs.n	8003c2e <Getter+0x1a2>
          {
              if (dataLen>10)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2b0a      	cmp	r3, #10
 8003bec:	d902      	bls.n	8003bf4 <Getter+0x168>
              {
                dataReceiving = 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 8003bf2:	e022      	b.n	8003c3a <Getter+0x1ae>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003bf4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	6978      	ldr	r0, [r7, #20]
 8003bfa:	f7ff fed5 	bl	80039a8 <lookByte>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fa59 	bl	80030b8 <Msg_GetSrc>
 8003c06:	4603      	mov	r3, r0
 8003c08:	b2dd      	uxtb	r5, r3
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	6978      	ldr	r0, [r7, #20]
 8003c0e:	f7ff fecb 	bl	80039a8 <lookByte>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fa5d 	bl	80030d4 <Msg_GetDest>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	462b      	mov	r3, r5
 8003c22:	2200      	movs	r2, #0
 8003c24:	4621      	mov	r1, r4
 8003c26:	6978      	ldr	r0, [r7, #20]
 8003c28:	f7ff fd46 	bl	80036b8 <parser>
              if (dataLen>10)
 8003c2c:	e005      	b.n	8003c3a <Getter+0x1ae>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 8003c2e:	2301      	movs	r3, #1
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003c32:	e005      	b.n	8003c40 <Getter+0x1b4>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 8003c34:	2301      	movs	r3, #1
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003c38:	e002      	b.n	8003c40 <Getter+0x1b4>
 8003c3a:	e001      	b.n	8003c40 <Getter+0x1b4>
      }
      else { dataSkip=1; } // Wrong sync bytes
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <Getter+0x1c2>
  {
    protMoveRead(xFifo,dataSkip);
 8003c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f000 fc5f 	bl	800450c <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003c5e:	801a      	strh	r2, [r3, #0]
}
 8003c60:	bf00      	nop
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bdb0      	pop	{r4, r5, r7, pc}

08003c68 <xDmaTxIrqHandler>:



void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  uint32_t length = 0;;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	e053      	b.n	8003d22 <xDmaTxIrqHandler+0xba>
  {
    handle = &xHandles[i];
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <xDmaTxIrqHandler+0xc8>)
 8003c86:	4413      	add	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
    if(huart == handle->xUart)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d141      	bne.n	8003d1c <xDmaTxIrqHandler+0xb4>
    {
      if(protIsSome(&handle->xTxFifo))
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fc44 	bl	800452e <protIsSome>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d030      	beq.n	8003d0e <xDmaTxIrqHandler+0xa6>
      {
        handle->TxBusy = 1;
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003cb2:	4413      	add	r3, r2
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8003cb8:	bf00      	nop
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cc0:	4413      	add	r3, r2
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	1c51      	adds	r1, r2, #1
 8003cc6:	6179      	str	r1, [r7, #20]
 8003cc8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	440a      	add	r2, r1
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fbf3 	bl	80044be <protPull>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <xDmaTxIrqHandler+0x7e>
            && length < MAX_PACK_LEN);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003ce4:	d3e9      	bcc.n	8003cba <xDmaTxIrqHandler+0x52>
        CacheClean(handle->BufTx, length);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fa20 	bl	8003134 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	b292      	uxth	r2, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	f002 fbcc 	bl	80064a4 <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 8003d0c:	e00c      	b.n	8003d28 <xDmaTxIrqHandler+0xc0>
      else handle->TxBusy = 0;
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003d14:	4413      	add	r3, r2
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
      break;
 8003d1a:	e005      	b.n	8003d28 <xDmaTxIrqHandler+0xc0>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d9a8      	bls.n	8003c7a <xDmaTxIrqHandler+0x12>
    }
  }
}
 8003d28:	bf00      	nop
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000020 	.word	0x20000020

08003d34 <xDmaErIrqHandler>:

void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e028      	b.n	8003d94 <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	4a15      	ldr	r2, [pc, #84]	; (8003da4 <xDmaErIrqHandler+0x70>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d116      	bne.n	8003d8e <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f002 fbde 	bl	8006530 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d80:	4619      	mov	r1, r3
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003d88:	4413      	add	r3, r2
 8003d8a:	6019      	str	r1, [r3, #0]
      break;
 8003d8c:	e005      	b.n	8003d9a <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d9d3      	bls.n	8003d42 <xDmaErIrqHandler+0xe>
    }
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000020 	.word	0x20000020

08003da8 <xFifosInit>:


void xFifosInit(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	e03f      	b.n	8003e34 <xFifosInit+0x8c>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003dba:	fb02 f203 	mul.w	r2, r2, r3
 8003dbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <xFifosInit+0x9c>)
 8003dc6:	1898      	adds	r0, r3, r2
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003dce:	fb02 f303 	mul.w	r3, r2, r3
 8003dd2:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <xFifosInit+0x9c>)
 8003dd8:	1899      	adds	r1, r3, r2
 8003dda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003dde:	2201      	movs	r2, #1
 8003de0:	f000 fa4e 	bl	8004280 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <xFifosInit+0x9c>)
 8003df4:	4413      	add	r3, r2
 8003df6:	1d18      	adds	r0, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003e06:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <xFifosInit+0x9c>)
 8003e08:	1899      	adds	r1, r3, r2
 8003e0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f000 fa36 	bl	8004280 <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 8003e14:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <xFifosInit+0x9c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f241 31d4 	movw	r1, #5076	; 0x13d4
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	441a      	add	r2, r3
 8003e22:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003e26:	4413      	add	r3, r2
 8003e28:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2c:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3301      	adds	r3, #1
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d9bc      	bls.n	8003db4 <xFifosInit+0xc>
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000020 	.word	0x20000020

08003e48 <xGetterInit>:

void xGetterInit(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	e026      	b.n	8003ea2 <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <xGetterInit+0x68>)
 8003e60:	4413      	add	r3, r2
 8003e62:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f962 	bl	8003134 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6839      	ldr	r1, [r7, #0]
 8003e7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f002 fb56 	bl	8006530 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e90:	4619      	mov	r1, r3
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003e98:	4413      	add	r3, r2
 8003e9a:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d9d5      	bls.n	8003e54 <xGetterInit+0xc>
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000020 	.word	0x20000020

08003eb4 <xGetterLoop>:

void xGetterLoop(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b0e6      	sub	sp, #408	; 0x198
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003ec0:	e121      	b.n	8004106 <xGetterLoop+0x252>
  {
    handle = &xHandles[i];
 8003ec2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ec6:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	4a93      	ldr	r2, [pc, #588]	; (800411c <xGetterLoop+0x268>)
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 8003ed6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003eda:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 8003eea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003eee:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ef8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 8003efc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f00:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f04:	4413      	add	r3, r2
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d107      	bne.n	8003f1e <xGetterLoop+0x6a>
 8003f0e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f12:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f16:	4413      	add	r3, r2
 8003f18:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8003f1c:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 8003f1e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f22:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f26:	4413      	add	r3, r2
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d90e      	bls.n	8003f50 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 8003f32:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003f36:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8003f40:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f44:	440b      	add	r3, r1
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003f4e:	e00a      	b.n	8003f66 <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 8003f50:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f54:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f58:	4413      	add	r3, r2
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 8003f66:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f6a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003f6e:	d903      	bls.n	8003f78 <xGetterLoop+0xc4>
 8003f70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f74:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 8003f78:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d050      	beq.n	8004022 <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 8003f80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003f84:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff f8b3 	bl	80030f4 <CacheInvalidate>
        for(i=0;i<length;i++)
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003f94:	e034      	b.n	8004000 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 8003f96:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f9a:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003fac:	5cd1      	ldrb	r1, [r2, r3]
 8003fae:	1d3a      	adds	r2, r7, #4
 8003fb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fb4:	4413      	add	r3, r2
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 8003fba:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003fbe:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003fc2:	4413      	add	r3, r2
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d108      	bne.n	8003fdc <xGetterLoop+0x128>
 8003fca:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003fce:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e00c      	b.n	8003ff6 <xGetterLoop+0x142>
          else handle->RxPointer--;
 8003fdc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003fe0:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003fe4:	4413      	add	r3, r2
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8003fee:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003ff2:	440b      	add	r3, r1
 8003ff4:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 8003ff6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004000:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004004:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004008:	429a      	cmp	r2, r3
 800400a:	d8c4      	bhi.n	8003f96 <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 800400c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004010:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8004014:	4413      	add	r3, r2
 8004016:	1d39      	adds	r1, r7, #4
 8004018:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fa12 	bl	8004446 <protPushSequence>
      }
    } while(length > 0);
 8004022:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004026:	2b00      	cmp	r3, #0
 8004028:	f47f af55 	bne.w	8003ed6 <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 800402c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004030:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8004034:	4413      	add	r3, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fa79 	bl	800452e <protIsSome>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <xGetterLoop+0x196>
    {
      Getter(handle);
 8004042:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004046:	f7ff fd21 	bl	8003a8c <Getter>
    }

    taskENTER_CRITICAL();
 800404a:	f004 fbfb 	bl	8008844 <vPortEnterCritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 800404e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004052:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8004056:	4413      	add	r3, r2
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d14b      	bne.n	80040f8 <xGetterLoop+0x244>
 8004060:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004064:	f241 3388 	movw	r3, #5000	; 0x1388
 8004068:	4413      	add	r3, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fa5f 	bl	800452e <protIsSome>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d040      	beq.n	80040f8 <xGetterLoop+0x244>
    {
      length = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 800407c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004080:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8004084:	4413      	add	r3, r2
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800408a:	f004 fc01 	bl	8008890 <vPortExitCritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800408e:	bf00      	nop
 8004090:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004094:	f241 3388 	movw	r3, #5000	; 0x1388
 8004098:	4413      	add	r3, r2
 800409a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800409e:	1c51      	adds	r1, r2, #1
 80040a0:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 80040a4:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80040a8:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80040ac:	440a      	add	r2, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fa04 	bl	80044be <protPull>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <xGetterLoop+0x212>
          && length < MAX_PACK_LEN);
 80040bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80040c0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80040c4:	d3e4      	bcc.n	8004090 <xGetterLoop+0x1dc>
      CacheClean(handle->BufTx, length);
 80040c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80040ce:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f82e 	bl	8003134 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 80040d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040dc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80040ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80040ee:	b292      	uxth	r2, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	f002 f9d7 	bl	80064a4 <HAL_UART_Transmit_DMA>
 80040f6:	e001      	b.n	80040fc <xGetterLoop+0x248>
    }
    else taskEXIT_CRITICAL();
 80040f8:	f004 fbca 	bl	8008890 <vPortExitCritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80040fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004100:	3301      	adds	r3, #1
 8004102:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004106:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800410a:	2b01      	cmp	r3, #1
 800410c:	f67f aed9 	bls.w	8003ec2 <xGetterLoop+0xe>
  }
}
 8004110:	bf00      	nop
 8004112:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000020 	.word	0x20000020

08004120 <xGetterTask>:

void xGetterTask(void * arg)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  xGetterInit();
 8004128:	f7ff fe8e 	bl	8003e48 <xGetterInit>
  for (;;)
  {
    xGetterLoop();
 800412c:	f7ff fec2 	bl	8003eb4 <xGetterLoop>
    TASK_SLEEP;
 8004130:	2001      	movs	r0, #1
 8004132:	f002 fe1b 	bl	8006d6c <osDelay>
    xGetterLoop();
 8004136:	e7f9      	b.n	800412c <xGetterTask+0xc>

08004138 <infoGetSize>:
#include "cmsis_os.h"
#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d305      	bcc.n	8004158 <infoGetSize+0x20>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	e007      	b.n	8004168 <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4413      	add	r3, r2
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681c      	ldr	r4, [r3, #0]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ffd9 	bl	8004138 <infoGetSize>
 8004186:	4603      	mov	r3, r0
 8004188:	1ae3      	subs	r3, r4, r3
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}

08004192 <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80041ae:	fb02 f201 	mul.w	r2, r2, r1
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff ffde 	bl	8004192 <infoCorrect>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(info->lock, portMAX_DELAY);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f04f 31ff 	mov.w	r1, #4294967295
 800421e:	4618      	mov	r0, r3
 8004220:	f003 fa14 	bl	800764c <xQueueSemaphoreTake>
        infoMovePar(info,param,move);
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff ffc9 	bl	80041c0 <infoMovePar>
    xSemaphoreGive(info->lock);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68d8      	ldr	r0, [r3, #12]
 8004232:	2300      	movs	r3, #0
 8004234:	2200      	movs	r2, #0
 8004236:	2100      	movs	r1, #0
 8004238:	f002 fff8 	bl	800722c <xQueueGenericSend>
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
    uint32_t value;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f04f 31ff 	mov.w	r1, #4294967295
 8004254:	4618      	mov	r0, r3
 8004256:	f003 f9f9 	bl	800764c <xQueueSemaphoreTake>
        value = infoGetSize(&fifo->info);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ff6a 	bl	8004138 <infoGetSize>
 8004264:	4603      	mov	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6918      	ldr	r0, [r3, #16]
 800426c:	2300      	movs	r3, #0
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	f002 ffdb 	bl	800722c <xQueueGenericSend>
    return value;
 8004276:	68fb      	ldr	r3, [r7, #12]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <protInit>:
        value = infoGetAvail(&fifo->info);
    xSemaphoreGive(fifo->info.lock);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]
    fifo->info.lock = xSemaphoreCreateMutex();
 800429c:	2001      	movs	r0, #1
 800429e:	f003 f8b4 	bl	800740a <xQueueCreateMutex>
 80042a2:	4602      	mov	r2, r0
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	611a      	str	r2, [r3, #16]
    fifo->info.globallock = xSemaphoreCreateMutex();
 80042a8:	2001      	movs	r0, #1
 80042aa:	f003 f8ae 	bl	800740a <xQueueCreateMutex>
 80042ae:	4602      	mov	r2, r0
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	615a      	str	r2, [r3, #20]
    fifo->info.read = 0;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	765a      	strb	r2, [r3, #25]
    fifo->info.elemsize = xElemSize;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	79fa      	ldrb	r2, [r7, #7]
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <interPut>:
        fifo->info.write = 0;
        fifo->info.overflow = 0;
    xSemaphoreGive(fifo->info.lock);
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4619      	mov	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	7e12      	ldrb	r2, [r2, #24]
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	440b      	add	r3, r1
 80042f2:	4618      	mov	r0, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	7e1b      	ldrb	r3, [r3, #24]
 80042f8:	461a      	mov	r2, r3
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	f006 f82c 	bl	800a358 <memcpy>
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	7e12      	ldrb	r2, [r2, #24]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	440b      	add	r3, r1
 8004326:	4619      	mov	r1, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	7e1b      	ldrb	r3, [r3, #24]
 800432c:	461a      	mov	r2, r3
 800432e:	6838      	ldr	r0, [r7, #0]
 8004330:	f006 f812 	bl	800a358 <memcpy>
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	7e1b      	ldrb	r3, [r3, #24]
 8004352:	4619      	mov	r1, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	fb03 f301 	mul.w	r3, r3, r1
 800435a:	4413      	add	r3, r2
 800435c:	4619      	mov	r1, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	7e1b      	ldrb	r3, [r3, #24]
 8004362:	461a      	mov	r2, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f005 fff7 	bl	800a358 <memcpy>
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fef7 	bl	8004174 <infoGetAvail>
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00c      	beq.n	80043a8 <interPush+0x36>
        interPut(fifo,xData);
 800438e:	6839      	ldr	r1, [r7, #0]
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff9f 	bl	80042d4 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	1d18      	adds	r0, r3, #4
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	330c      	adds	r3, #12
 800439e:	2201      	movs	r2, #1
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7ff ff0d 	bl	80041c0 <infoMovePar>
 80043a6:	e002      	b.n	80043ae <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	765a      	strb	r2, [r3, #25]
    return retval;
 80043ae:	68fb      	ldr	r3, [r7, #12]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff ff0c 	bl	80041e4 <infoIsSome>
 80043cc:	4603      	mov	r3, r0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <interPull+0x36>
        interGet(fifo,xDest);
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff95 	bl	8004308 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	1d18      	adds	r0, r3, #4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3308      	adds	r3, #8
 80043e6:	2201      	movs	r2, #1
 80043e8:	4619      	mov	r1, r3
 80043ea:	f7ff fee9 	bl	80041c0 <infoMovePar>
    }
    return retval;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
    uint32_t retval; uint32_t i;
    for (i=0; i<xCount; i++) {
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e012      	b.n	8004430 <interPushSequence+0x38>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	7e1b      	ldrb	r3, [r3, #24]
 800440e:	461a      	mov	r2, r3
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	fb03 f202 	mul.w	r2, r3, r2
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4413      	add	r3, r2
 800441a:	4619      	mov	r1, r3
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7ff ffa8 	bl	8004372 <interPush>
 8004422:	6178      	str	r0, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d007      	beq.n	800443a <interPushSequence+0x42>
    for (i=0; i<xCount; i++) {
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3301      	adds	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d3e8      	bcc.n	800440a <interPushSequence+0x12>
 8004438:	e000      	b.n	800443c <interPushSequence+0x44>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800443a:	bf00      	nop
    }
    return retval;
 800443c:	697b      	ldr	r3, [r7, #20]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f04f 31ff 	mov.w	r1, #4294967295
 800445a:	4618      	mov	r0, r3
 800445c:	f003 f8f6 	bl	800764c <xQueueSemaphoreTake>
        retval=interPushSequence(fifo,xData,xCount);
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff ffc7 	bl	80043f8 <interPushSequence>
 800446a:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(fifo->info.lock);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6918      	ldr	r0, [r3, #16]
 8004470:	2300      	movs	r3, #0
 8004472:	2200      	movs	r2, #0
 8004474:	2100      	movs	r1, #0
 8004476:	f002 fed9 	bl	800722c <xQueueGenericSend>
    return retval;
 800447a:	697b      	ldr	r3, [r7, #20]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f04f 31ff 	mov.w	r1, #4294967295
 8004496:	4618      	mov	r0, r3
 8004498:	f003 f8d8 	bl	800764c <xQueueSemaphoreTake>
        retval=interPush(fifo,xData);
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff ff67 	bl	8004372 <interPush>
 80044a4:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6918      	ldr	r0, [r3, #16]
 80044aa:	2300      	movs	r3, #0
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	f002 febc 	bl	800722c <xQueueGenericSend>
    return retval;
 80044b4:	68fb      	ldr	r3, [r7, #12]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff74 	bl	80043b8 <interPull>
 80044d0:	60f8      	str	r0, [r7, #12]
    return retval;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1d18      	adds	r0, r3, #4
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3308      	adds	r3, #8
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	4619      	mov	r1, r3
 80044f4:	f7ff fe4d 	bl	8004192 <infoCorrect>
 80044f8:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6979      	ldr	r1, [r7, #20]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff ff1c 	bl	800433c <interLook>
}
 8004504:	bf00      	nop
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	1d18      	adds	r0, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3308      	adds	r3, #8
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	4619      	mov	r1, r3
 8004522:	f7ff fe72 	bl	800420a <protMovePar>
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	429a      	cmp	r2, r3
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800458c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004558:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800455a:	e003      	b.n	8004564 <LoopCopyDataInit>

0800455c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800455e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004560:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004562:	3104      	adds	r1, #4

08004564 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004564:	480b      	ldr	r0, [pc, #44]	; (8004594 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004568:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800456a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800456c:	d3f6      	bcc.n	800455c <CopyDataInit>
  ldr  r2, =_sbss
 800456e:	4a0b      	ldr	r2, [pc, #44]	; (800459c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004570:	e002      	b.n	8004578 <LoopFillZerobss>

08004572 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004572:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004574:	f842 3b04 	str.w	r3, [r2], #4

08004578 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800457a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800457c:	d3f9      	bcc.n	8004572 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800457e:	f7fe fd31 	bl	8002fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004582:	f005 fec5 	bl	800a310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004586:	f7fd fe1d 	bl	80021c4 <main>
  bx  lr    
 800458a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800458c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8004590:	08010128 	.word	0x08010128
  ldr  r0, =_sdata
 8004594:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004598:	20002a10 	.word	0x20002a10
  ldr  r2, =_sbss
 800459c:	20002a10 	.word	0x20002a10
  ldr  r3, = _ebss
 80045a0:	20008458 	.word	0x20008458

080045a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a4:	e7fe      	b.n	80045a4 <CAN1_RX0_IRQHandler>
	...

080045a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 0.1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <HAL_InitTick+0x3c>)
{
 80045ac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 80045ae:	4a0e      	ldr	r2, [pc, #56]	; (80045e8 <HAL_InitTick+0x40>)
 80045b0:	8818      	ldrh	r0, [r3, #0]
 80045b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80045b6:	fbb3 f3f0 	udiv	r3, r3, r0
 80045ba:	6810      	ldr	r0, [r2, #0]
 80045bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80045c0:	f000 fa84 	bl	8004acc <HAL_SYSTICK_Config>
 80045c4:	4604      	mov	r4, r0
 80045c6:	b958      	cbnz	r0, 80045e0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045c8:	2d0f      	cmp	r5, #15
 80045ca:	d809      	bhi.n	80045e0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045cc:	4602      	mov	r2, r0
 80045ce:	4629      	mov	r1, r5
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f000 fa3a 	bl	8004a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045d8:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_InitTick+0x44>)
 80045da:	4620      	mov	r0, r4
 80045dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80045de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80045e0:	2001      	movs	r0, #1
 80045e2:	e7fc      	b.n	80045de <HAL_InitTick+0x36>
 80045e4:	200027e0 	.word	0x200027e0
 80045e8:	20000018 	.word	0x20000018
 80045ec:	200027e4 	.word	0x200027e4

080045f0 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 80045f0:	4a07      	ldr	r2, [pc, #28]	; (8004610 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045f2:	2003      	movs	r0, #3
{
 80045f4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045fc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045fe:	f000 fa13 	bl	8004a28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004602:	200f      	movs	r0, #15
 8004604:	f7ff ffd0 	bl	80045a8 <HAL_InitTick>
  HAL_MspInit();
 8004608:	f7fe f9fc 	bl	8002a04 <HAL_MspInit>
}
 800460c:	2000      	movs	r0, #0
 800460e:	bd08      	pop	{r3, pc}
 8004610:	40023c00 	.word	0x40023c00

08004614 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004614:	4a03      	ldr	r2, [pc, #12]	; (8004624 <HAL_IncTick+0x10>)
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <HAL_IncTick+0x14>)
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	440b      	add	r3, r1
 800461e:	6013      	str	r3, [r2, #0]
}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20008410 	.word	0x20008410
 8004628:	200027e0 	.word	0x200027e0

0800462c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800462c:	4b01      	ldr	r3, [pc, #4]	; (8004634 <HAL_GetTick+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20008410 	.word	0x20008410

08004638 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8004638:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800463a:	4c07      	ldr	r4, [pc, #28]	; (8004658 <HAL_SetTickFreq+0x20>)
 800463c:	8825      	ldrh	r5, [r4, #0]
 800463e:	4285      	cmp	r5, r0
 8004640:	d007      	beq.n	8004652 <HAL_SetTickFreq+0x1a>

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_SetTickFreq+0x24>)
    uwTickFreq = Freq;
 8004644:	8020      	strh	r0, [r4, #0]
    status = HAL_InitTick(uwTickPrio);
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	f7ff ffae 	bl	80045a8 <HAL_InitTick>

    if (status != HAL_OK)
 800464c:	b100      	cbz	r0, 8004650 <HAL_SetTickFreq+0x18>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 800464e:	8025      	strh	r5, [r4, #0]
    }
  }

  return status;
}
 8004650:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 8004652:	2000      	movs	r0, #0
 8004654:	e7fc      	b.n	8004650 <HAL_SetTickFreq+0x18>
 8004656:	bf00      	nop
 8004658:	200027e0 	.word	0x200027e0
 800465c:	200027e4 	.word	0x200027e4

08004660 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004660:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004662:	4604      	mov	r4, r0
 8004664:	2800      	cmp	r0, #0
 8004666:	f000 809b 	beq.w	80047a0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800466a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800466c:	b925      	cbnz	r5, 8004678 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800466e:	f7fe f9f1 	bl	8002a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004672:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004674:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800467a:	06db      	lsls	r3, r3, #27
 800467c:	f100 808e 	bmi.w	800479c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004686:	f023 0302 	bic.w	r3, r3, #2
 800468a:	f043 0302 	orr.w	r3, r3, #2
 800468e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004690:	4b44      	ldr	r3, [pc, #272]	; (80047a4 <HAL_ADC_Init+0x144>)
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004698:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	6861      	ldr	r1, [r4, #4]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046a2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80046a4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046b4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80046b6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80046be:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046c4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80046c6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046d4:	4934      	ldr	r1, [pc, #208]	; (80047a8 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046d6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80046da:	428a      	cmp	r2, r1
 80046dc:	d052      	beq.n	8004784 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046de:	6899      	ldr	r1, [r3, #8]
 80046e0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80046e4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046e6:	6899      	ldr	r1, [r3, #8]
 80046e8:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046fa:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046fc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046fe:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004700:	f022 0202 	bic.w	r2, r2, #2
 8004704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800470c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800470e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004712:	2a00      	cmp	r2, #0
 8004714:	d03e      	beq.n	8004794 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004716:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004718:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800471a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800471e:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004720:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004728:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004730:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8004732:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004736:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004738:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800473c:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004746:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800475a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800475c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800476c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800476e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004772:	f023 0303 	bic.w	r3, r3, #3
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800477c:	2300      	movs	r3, #0
 800477e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004782:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800478a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004792:	e7b2      	b.n	80046fa <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479a:	e7c9      	b.n	8004730 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800479c:	2001      	movs	r0, #1
 800479e:	e7ed      	b.n	800477c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80047a0:	2001      	movs	r0, #1
 80047a2:	e7ee      	b.n	8004782 <HAL_ADC_Init+0x122>
 80047a4:	40012300 	.word	0x40012300
 80047a8:	0f000001 	.word	0x0f000001

080047ac <HAL_ADC_ConvCpltCallback>:
 80047ac:	4770      	bx	lr

080047ae <HAL_ADC_LevelOutOfWindowCallback>:
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADC_ErrorCallback>:
 80047b0:	4770      	bx	lr

080047b2 <HAL_ADC_IRQHandler>:
{
 80047b2:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80047b4:	6803      	ldr	r3, [r0, #0]
{
 80047b6:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80047b8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80047ba:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80047bc:	078d      	lsls	r5, r1, #30
 80047be:	d52b      	bpl.n	8004818 <HAL_ADC_IRQHandler+0x66>
 80047c0:	0690      	lsls	r0, r2, #26
 80047c2:	d529      	bpl.n	8004818 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047c6:	06d1      	lsls	r1, r2, #27
 80047c8:	d403      	bmi.n	80047d2 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80047ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80047d8:	d117      	bne.n	800480a <HAL_ADC_IRQHandler+0x58>
 80047da:	69a2      	ldr	r2, [r4, #24]
 80047dc:	b9aa      	cbnz	r2, 800480a <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047e0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80047e4:	d002      	beq.n	80047ec <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80047e6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047e8:	0552      	lsls	r2, r2, #21
 80047ea:	d40e      	bmi.n	800480a <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	f022 0220 	bic.w	r2, r2, #32
 80047f2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047fa:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047fe:	04db      	lsls	r3, r3, #19
 8004800:	d403      	bmi.n	800480a <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800480a:	4620      	mov	r0, r4
 800480c:	f7ff ffce 	bl	80047ac <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f06f 0212 	mvn.w	r2, #18
 8004816:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800481c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800481e:	074d      	lsls	r5, r1, #29
 8004820:	d532      	bpl.n	8004888 <HAL_ADC_IRQHandler+0xd6>
 8004822:	0610      	lsls	r0, r2, #24
 8004824:	d530      	bpl.n	8004888 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004826:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004828:	06d1      	lsls	r1, r2, #27
 800482a:	d403      	bmi.n	8004834 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800482c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800482e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004832:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800483a:	d11e      	bne.n	800487a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800483c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800483e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004842:	d002      	beq.n	800484a <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004844:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004846:	0552      	lsls	r2, r2, #21
 8004848:	d417      	bmi.n	800487a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800484a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800484c:	0555      	lsls	r5, r2, #21
 800484e:	d414      	bmi.n	800487a <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004850:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004852:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004856:	d110      	bne.n	800487a <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004858:	69a2      	ldr	r2, [r4, #24]
 800485a:	b972      	cbnz	r2, 800487a <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004862:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800486a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800486c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800486e:	05d8      	lsls	r0, r3, #23
 8004870:	d403      	bmi.n	800487a <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800487a:	4620      	mov	r0, r4
 800487c:	f000 f8d2 	bl	8004a24 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	f06f 020c 	mvn.w	r2, #12
 8004886:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800488c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800488e:	07c9      	lsls	r1, r1, #31
 8004890:	d50f      	bpl.n	80048b2 <HAL_ADC_IRQHandler+0x100>
 8004892:	0655      	lsls	r5, r2, #25
 8004894:	d50d      	bpl.n	80048b2 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	07d8      	lsls	r0, r3, #31
 800489a:	d50a      	bpl.n	80048b2 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800489c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800489e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80048a6:	f7ff ff82 	bl	80047ae <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	f06f 0201 	mvn.w	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80048b6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80048b8:	0689      	lsls	r1, r1, #26
 80048ba:	d50d      	bpl.n	80048d8 <HAL_ADC_IRQHandler+0x126>
 80048bc:	0152      	lsls	r2, r2, #5
 80048be:	d50b      	bpl.n	80048d8 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80048c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80048c2:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 80048c6:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80048c8:	f042 0202 	orr.w	r2, r2, #2
 80048cc:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80048ce:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80048d0:	f7ff ff6e 	bl	80047b0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	601d      	str	r5, [r3, #0]
}
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080048dc <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80048dc:	2300      	movs	r3, #0
{
 80048de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80048e0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80048e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d074      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0xf8>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80048ea:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80048ec:	2301      	movs	r3, #1
 80048ee:	688a      	ldr	r2, [r1, #8]
 80048f0:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80048f2:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80048f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80048f8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 80048fc:	6803      	ldr	r3, [r0, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80048fe:	d931      	bls.n	8004964 <HAL_ADC_ConfigChannel+0x88>
 8004900:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8004904:	d02e      	beq.n	8004964 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004906:	3c1e      	subs	r4, #30
 8004908:	f04f 0c07 	mov.w	ip, #7
 800490c:	68df      	ldr	r7, [r3, #12]
 800490e:	fa0c fc04 	lsl.w	ip, ip, r4
 8004912:	ea27 070c 	bic.w	r7, r7, ip
 8004916:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004918:	4f3d      	ldr	r7, [pc, #244]	; (8004a10 <HAL_ADC_ConfigChannel+0x134>)
 800491a:	42bd      	cmp	r5, r7
 800491c:	d11d      	bne.n	800495a <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800491e:	68dc      	ldr	r4, [r3, #12]
 8004920:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004924:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8004926:	6849      	ldr	r1, [r1, #4]
 8004928:	2906      	cmp	r1, #6
 800492a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800492e:	d827      	bhi.n	8004980 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004930:	3a05      	subs	r2, #5
 8004932:	241f      	movs	r4, #31
 8004934:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004936:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004938:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800493c:	ea21 0104 	bic.w	r1, r1, r4
 8004940:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004942:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004944:	430a      	orrs	r2, r1
 8004946:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004948:	4a32      	ldr	r2, [pc, #200]	; (8004a14 <HAL_ADC_ConfigChannel+0x138>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d034      	beq.n	80049b8 <HAL_ADC_ConfigChannel+0xdc>
  __HAL_UNLOCK(hadc);
 800494e:	2300      	movs	r3, #0
 8004950:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004954:	4618      	mov	r0, r3
}
 8004956:	b003      	add	sp, #12
 8004958:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800495a:	68df      	ldr	r7, [r3, #12]
 800495c:	fa02 f404 	lsl.w	r4, r2, r4
 8004960:	433c      	orrs	r4, r7
 8004962:	e7df      	b.n	8004924 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004964:	f04f 0c07 	mov.w	ip, #7
 8004968:	691f      	ldr	r7, [r3, #16]
 800496a:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800496e:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004972:	ea27 070c 	bic.w	r7, r7, ip
 8004976:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004978:	691f      	ldr	r7, [r3, #16]
 800497a:	433c      	orrs	r4, r7
 800497c:	611c      	str	r4, [r3, #16]
 800497e:	e7d2      	b.n	8004926 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8004980:	290c      	cmp	r1, #12
 8004982:	f04f 011f 	mov.w	r1, #31
 8004986:	d80b      	bhi.n	80049a0 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004988:	3a23      	subs	r2, #35	; 0x23
 800498a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800498c:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800498e:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004992:	ea24 0101 	bic.w	r1, r4, r1
 8004996:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004998:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800499a:	430a      	orrs	r2, r1
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
 800499e:	e7d3      	b.n	8004948 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049a0:	3a41      	subs	r2, #65	; 0x41
 80049a2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80049a4:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049a6:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049aa:	ea24 0101 	bic.w	r1, r4, r1
 80049ae:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049b2:	430a      	orrs	r2, r1
 80049b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80049b6:	e7c7      	b.n	8004948 <HAL_ADC_ConfigChannel+0x6c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80049b8:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80049bc:	d10c      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0xfc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80049be:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <HAL_ADC_ConfigChannel+0x13c>)
 80049c0:	6853      	ldr	r3, [r2, #4]
 80049c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    ADC->CCR |= ADC_CCR_VBATE;
 80049c6:	6053      	str	r3, [r2, #4]
 80049c8:	e7c1      	b.n	800494e <HAL_ADC_ConfigChannel+0x72>
 80049ca:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_ADC_ConfigChannel+0x13c>)
 80049cc:	6853      	ldr	r3, [r2, #4]
 80049ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049d2:	e7f8      	b.n	80049c6 <HAL_ADC_ConfigChannel+0xea>
  __HAL_LOCK(hadc);
 80049d4:	2002      	movs	r0, #2
 80049d6:	e7be      	b.n	8004956 <HAL_ADC_ConfigChannel+0x7a>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049d8:	2d12      	cmp	r5, #18
 80049da:	d0f6      	beq.n	80049ca <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <HAL_ADC_ConfigChannel+0x134>)
 80049de:	429d      	cmp	r5, r3
 80049e0:	d001      	beq.n	80049e6 <HAL_ADC_ConfigChannel+0x10a>
 80049e2:	2d11      	cmp	r5, #17
 80049e4:	d1b3      	bne.n	800494e <HAL_ADC_ConfigChannel+0x72>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80049e6:	490c      	ldr	r1, [pc, #48]	; (8004a18 <HAL_ADC_ConfigChannel+0x13c>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049e8:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 80049ea:	684a      	ldr	r2, [r1, #4]
 80049ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80049f0:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049f2:	d1ac      	bne.n	800494e <HAL_ADC_ConfigChannel+0x72>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_ADC_ConfigChannel+0x140>)
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <HAL_ADC_ConfigChannel+0x144>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80049fe:	230a      	movs	r3, #10
 8004a00:	4353      	muls	r3, r2
        counter--;
 8004a02:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8004a04:	9b01      	ldr	r3, [sp, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0a1      	beq.n	800494e <HAL_ADC_ConfigChannel+0x72>
        counter--;
 8004a0a:	9b01      	ldr	r3, [sp, #4]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	e7f8      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x126>
 8004a10:	10000012 	.word	0x10000012
 8004a14:	40012000 	.word	0x40012000
 8004a18:	40012300 	.word	0x40012300
 8004a1c:	20000018 	.word	0x20000018
 8004a20:	000f4240 	.word	0x000f4240

08004a24 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a28:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a2a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a2c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004a42:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004a44:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a4c:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a4e:	b570      	push	{r4, r5, r6, lr}
 8004a50:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a52:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a56:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a5a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a5e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a60:	2d04      	cmp	r5, #4
 8004a62:	bf28      	it	cs
 8004a64:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a66:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a68:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6c:	bf8c      	ite	hi
 8004a6e:	3c03      	subhi	r4, #3
 8004a70:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8004a72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	ea21 0303 	bic.w	r3, r1, r3
 8004a78:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a7c:	fa06 f404 	lsl.w	r4, r6, r4
 8004a80:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	ea43 0304 	orr.w	r3, r3, r4
 8004a88:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a8c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004a8e:	db06      	blt.n	8004a9e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a90:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004a94:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004a98:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004a9c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9e:	f000 000f 	and.w	r0, r0, #15
 8004aa2:	4a02      	ldr	r2, [pc, #8]	; (8004aac <HAL_NVIC_SetPriority+0x60>)
 8004aa4:	5413      	strb	r3, [r2, r0]
 8004aa6:	e7f9      	b.n	8004a9c <HAL_NVIC_SetPriority+0x50>
 8004aa8:	e000ed00 	.word	0xe000ed00
 8004aac:	e000ed14 	.word	0xe000ed14

08004ab0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	db08      	blt.n	8004ac6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ab4:	0942      	lsrs	r2, r0, #5
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f000 001f 	and.w	r0, r0, #31
 8004abc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <HAL_NVIC_EnableIRQ+0x18>)
 8004ac2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004ac6:	4770      	bx	lr
 8004ac8:	e000e100 	.word	0xe000e100

08004acc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004acc:	3801      	subs	r0, #1
 8004ace:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004ad2:	d20a      	bcs.n	8004aea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad6:	21f0      	movs	r1, #240	; 0xf0
 8004ad8:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ada:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004adc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ade:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004aea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e000e010 	.word	0xe000e010
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004af8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004afa:	0896      	lsrs	r6, r2, #2
 8004afc:	460b      	mov	r3, r1
 8004afe:	6805      	ldr	r5, [r0, #0]
 8004b00:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8004b04:	42bb      	cmp	r3, r7
 8004b06:	d108      	bne.n	8004b1a <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004b08:	f012 0203 	ands.w	r2, r2, #3
 8004b0c:	d01e      	beq.n	8004b4c <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 8004b0e:	2a01      	cmp	r2, #1
 8004b10:	d114      	bne.n	8004b3c <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004b12:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004b16:	702b      	strb	r3, [r5, #0]
 8004b18:	e018      	b.n	8004b4c <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004b1a:	785c      	ldrb	r4, [r3, #1]
 8004b1c:	3304      	adds	r3, #4
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004b1e:	f813 cc04 	ldrb.w	ip, [r3, #-4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004b22:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004b24:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004b28:	f813 cc01 	ldrb.w	ip, [r3, #-1]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004b2c:	ea44 040c 	orr.w	r4, r4, ip
 8004b30:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 8004b34:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004b38:	602c      	str	r4, [r5, #0]
 8004b3a:	e7e3      	b.n	8004b04 <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 8004b3c:	2a02      	cmp	r2, #2
 8004b3e:	d108      	bne.n	8004b52 <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004b40:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 8004b4a:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004b4c:	6803      	ldr	r3, [r0, #0]
 8004b4e:	6818      	ldr	r0, [r3, #0]
}
 8004b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004b52:	785a      	ldrb	r2, [r3, #1]
 8004b54:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 8004b58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 8004b5c:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004b5e:	789b      	ldrb	r3, [r3, #2]
 8004b60:	e7d9      	b.n	8004b16 <CRC_Handle_8+0x1e>

08004b62 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004b62:	b570      	push	{r4, r5, r6, lr}
 8004b64:	6800      	ldr	r0, [r0, #0]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004b66:	0855      	lsrs	r5, r2, #1
 8004b68:	2300      	movs	r3, #0
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	d106      	bne.n	8004b7c <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 8004b6e:	07d3      	lsls	r3, r2, #31
 8004b70:	d502      	bpl.n	8004b78 <CRC_Handle_16+0x16>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8004b72:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 8004b76:	8003      	strh	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004b78:	6800      	ldr	r0, [r0, #0]
}
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004b7c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8004b80:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004b84:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004b86:	8864      	ldrh	r4, [r4, #2]
 8004b88:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004b8c:	6004      	str	r4, [r0, #0]
 8004b8e:	e7ec      	b.n	8004b6a <CRC_Handle_16+0x8>

08004b90 <HAL_CRC_MspInit>:
}
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_CRC_Init>:
{
 8004b94:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8004b96:	4604      	mov	r4, r0
 8004b98:	b908      	cbnz	r0, 8004b9e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8004b9a:	2001      	movs	r0, #1
}
 8004b9c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004b9e:	7f43      	ldrb	r3, [r0, #29]
 8004ba0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ba4:	b913      	cbnz	r3, 8004bac <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004ba6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004ba8:	f7ff fff2 	bl	8004b90 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004bac:	2302      	movs	r3, #2
 8004bae:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004bb0:	7923      	ldrb	r3, [r4, #4]
 8004bb2:	b9e3      	cbnz	r3, 8004bee <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <HAL_CRC_Init+0x70>)
 8004bb8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	f022 0218 	bic.w	r2, r2, #24
 8004bc0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004bc2:	7962      	ldrb	r2, [r4, #5]
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	b9d2      	cbnz	r2, 8004bfe <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004bc8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004bcc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004bce:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	6961      	ldr	r1, [r4, #20]
 8004bd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bd8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bda:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004bdc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be4:	430a      	orrs	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004be8:	2301      	movs	r3, #1
 8004bea:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004bec:	e7d6      	b.n	8004b9c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bee:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 f82c 	bl	8004c50 <HAL_CRCEx_Polynomial_Set>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d0e2      	beq.n	8004bc2 <HAL_CRC_Init+0x2e>
 8004bfc:	e7cd      	b.n	8004b9a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004bfe:	6922      	ldr	r2, [r4, #16]
 8004c00:	e7e4      	b.n	8004bcc <HAL_CRC_Init+0x38>
 8004c02:	bf00      	nop
 8004c04:	04c11db7 	.word	0x04c11db7

08004c08 <HAL_CRC_Calculate>:
{
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c0a:	2502      	movs	r5, #2
{
 8004c0c:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c0e:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8004c10:	6805      	ldr	r5, [r0, #0]
 8004c12:	68af      	ldr	r7, [r5, #8]
 8004c14:	f047 0701 	orr.w	r7, r7, #1
 8004c18:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 8004c1a:	6a07      	ldr	r7, [r0, #32]
 8004c1c:	2f02      	cmp	r7, #2
 8004c1e:	d012      	beq.n	8004c46 <HAL_CRC_Calculate+0x3e>
 8004c20:	2f03      	cmp	r7, #3
 8004c22:	d004      	beq.n	8004c2e <HAL_CRC_Calculate+0x26>
 8004c24:	2f01      	cmp	r7, #1
 8004c26:	d111      	bne.n	8004c4c <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004c28:	f7ff ff66 	bl	8004af8 <CRC_Handle_8>
      break;
 8004c2c:	e004      	b.n	8004c38 <HAL_CRC_Calculate+0x30>
 8004c2e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8004c32:	42b1      	cmp	r1, r6
 8004c34:	d103      	bne.n	8004c3e <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 8004c36:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	7763      	strb	r3, [r4, #29]
}
 8004c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 8004c3e:	f851 3b04 	ldr.w	r3, [r1], #4
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	e7f5      	b.n	8004c32 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004c46:	f7ff ff8c 	bl	8004b62 <CRC_Handle_16>
      break;
 8004c4a:	e7f5      	b.n	8004c38 <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e7f3      	b.n	8004c38 <HAL_CRC_Calculate+0x30>

08004c50 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c50:	231f      	movs	r3, #31
{
 8004c52:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c54:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004c58:	d306      	bcc.n	8004c68 <HAL_CRCEx_Polynomial_Set+0x18>
 8004c5a:	fa21 f403 	lsr.w	r4, r1, r3
 8004c5e:	07e4      	lsls	r4, r4, #31
 8004c60:	d5f8      	bpl.n	8004c54 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004c62:	2a08      	cmp	r2, #8
 8004c64:	d014      	beq.n	8004c90 <HAL_CRCEx_Polynomial_Set+0x40>
 8004c66:	d802      	bhi.n	8004c6e <HAL_CRCEx_Polynomial_Set+0x1e>
 8004c68:	b13a      	cbz	r2, 8004c7a <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c6a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004c6c:	e00d      	b.n	8004c8a <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 8004c6e:	2a10      	cmp	r2, #16
 8004c70:	d00c      	beq.n	8004c8c <HAL_CRCEx_Polynomial_Set+0x3c>
 8004c72:	2a18      	cmp	r2, #24
 8004c74:	d1f9      	bne.n	8004c6a <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c76:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c78:	d8f7      	bhi.n	8004c6a <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c7e:	6883      	ldr	r3, [r0, #8]
 8004c80:	f023 0318 	bic.w	r3, r3, #24
 8004c84:	431a      	orrs	r2, r3
 8004c86:	6082      	str	r2, [r0, #8]
 8004c88:	2000      	movs	r0, #0
}
 8004c8a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c8c:	2b07      	cmp	r3, #7
 8004c8e:	e7f3      	b.n	8004c78 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c90:	2b0f      	cmp	r3, #15
 8004c92:	e7f1      	b.n	8004c78 <HAL_CRCEx_Polynomial_Set+0x28>

08004c94 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c94:	6803      	ldr	r3, [r0, #0]
 8004c96:	2118      	movs	r1, #24
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c9e:	3a10      	subs	r2, #16
 8004ca0:	f023 0303 	bic.w	r3, r3, #3
 8004ca4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ca8:	4904      	ldr	r1, [pc, #16]	; (8004cbc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8004caa:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cac:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cae:	bf88      	it	hi
 8004cb0:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cb2:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cb4:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8004cb6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	0800dfa8 	.word	0x0800dfa8

08004cc0 <HAL_DMA_Init>:
{
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004cc4:	f7ff fcb2 	bl	800462c <HAL_GetTick>
 8004cc8:	4605      	mov	r5, r0
  if(hdma == NULL)
 8004cca:	2c00      	cmp	r4, #0
 8004ccc:	d071      	beq.n	8004db2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8004cce:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8004cd0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004cd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ce4:	6821      	ldr	r1, [r4, #0]
 8004ce6:	680b      	ldr	r3, [r1, #0]
 8004ce8:	07d8      	lsls	r0, r3, #31
 8004cea:	d43c      	bmi.n	8004d66 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8004cec:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cee:	4d32      	ldr	r5, [pc, #200]	; (8004db8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cf2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cf4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	68e2      	ldr	r2, [r4, #12]
 8004cfc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cfe:	6922      	ldr	r2, [r4, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	6962      	ldr	r2, [r4, #20]
 8004d04:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d06:	69e2      	ldr	r2, [r4, #28]
 8004d08:	4303      	orrs	r3, r0
 8004d0a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d0c:	6a22      	ldr	r2, [r4, #32]
 8004d0e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d12:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d14:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d18:	bf02      	ittt	eq
 8004d1a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8004d1e:	4335      	orreq	r5, r6
 8004d20:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d22:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8004d24:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8004d26:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d28:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004d2c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d30:	d10b      	bne.n	8004d4a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8004d32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d34:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8004d36:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d38:	b13d      	cbz	r5, 8004d4a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d3a:	b9f8      	cbnz	r0, 8004d7c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8004d3c:	2a01      	cmp	r2, #1
 8004d3e:	d02d      	beq.n	8004d9c <HAL_DMA_Init+0xdc>
 8004d40:	d301      	bcc.n	8004d46 <HAL_DMA_Init+0x86>
 8004d42:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d44:	d101      	bne.n	8004d4a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d46:	01ea      	lsls	r2, r5, #7
 8004d48:	d42b      	bmi.n	8004da2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8004d4a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff ffa1 	bl	8004c94 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d52:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004d54:	233f      	movs	r3, #63	; 0x3f
 8004d56:	4093      	lsls	r3, r2
 8004d58:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d5a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d5e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004d60:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004d64:	e009      	b.n	8004d7a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d66:	f7ff fc61 	bl	800462c <HAL_GetTick>
 8004d6a:	1b40      	subs	r0, r0, r5
 8004d6c:	2805      	cmp	r0, #5
 8004d6e:	d9b9      	bls.n	8004ce4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d70:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d72:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d74:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004d76:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d7c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004d80:	d113      	bne.n	8004daa <HAL_DMA_Init+0xea>
    switch (tmp)
 8004d82:	2a03      	cmp	r2, #3
 8004d84:	d8e1      	bhi.n	8004d4a <HAL_DMA_Init+0x8a>
 8004d86:	a001      	add	r0, pc, #4	; (adr r0, 8004d8c <HAL_DMA_Init+0xcc>)
 8004d88:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004d8c:	08004da3 	.word	0x08004da3
 8004d90:	08004d47 	.word	0x08004d47
 8004d94:	08004da3 	.word	0x08004da3
 8004d98:	08004d9d 	.word	0x08004d9d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004da0:	d1d3      	bne.n	8004d4a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004da2:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8004da4:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004da6:	6563      	str	r3, [r4, #84]	; 0x54
 8004da8:	e7e5      	b.n	8004d76 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8004daa:	2a02      	cmp	r2, #2
 8004dac:	d9f9      	bls.n	8004da2 <HAL_DMA_Init+0xe2>
 8004dae:	2a03      	cmp	r2, #3
 8004db0:	e7c8      	b.n	8004d44 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8004db2:	2001      	movs	r0, #1
 8004db4:	e7e1      	b.n	8004d7a <HAL_DMA_Init+0xba>
 8004db6:	bf00      	nop
 8004db8:	e010803f 	.word	0xe010803f

08004dbc <HAL_DMA_Start_IT>:
{
 8004dbc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8004dbe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004dc2:	2c01      	cmp	r4, #1
 8004dc4:	d035      	beq.n	8004e32 <HAL_DMA_Start_IT+0x76>
 8004dc6:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dc8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8004dca:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8004dcc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dd0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004dd4:	2c01      	cmp	r4, #1
 8004dd6:	f04f 0402 	mov.w	r4, #2
 8004dda:	d128      	bne.n	8004e2e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ddc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004de0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de2:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004de4:	6825      	ldr	r5, [r4, #0]
 8004de6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8004dea:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8004dec:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dee:	6883      	ldr	r3, [r0, #8]
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d119      	bne.n	8004e28 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8004df4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004df6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004dfa:	233f      	movs	r3, #63	; 0x3f
 8004dfc:	4093      	lsls	r3, r2
 8004dfe:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f043 0316 	orr.w	r3, r3, #22
 8004e06:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e08:	6963      	ldr	r3, [r4, #20]
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8004e10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e12:	b11b      	cbz	r3, 8004e1c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f043 0308 	orr.w	r3, r3, #8
 8004e1a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004e1c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6023      	str	r3, [r4, #0]
}
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8004e28:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e2a:	60e2      	str	r2, [r4, #12]
 8004e2c:	e7e4      	b.n	8004df8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8004e2e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8004e32:	2002      	movs	r0, #2
 8004e34:	e7f7      	b.n	8004e26 <HAL_DMA_Start_IT+0x6a>

08004e36 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e36:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d003      	beq.n	8004e46 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004e42:	2001      	movs	r0, #1
 8004e44:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004e46:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e48:	2305      	movs	r3, #5
 8004e4a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8004e4e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	4770      	bx	lr
	...

08004e5c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8004e5c:	2300      	movs	r3, #0
{
 8004e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8004e60:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e62:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8004e64:	4b5b      	ldr	r3, [pc, #364]	; (8004fd4 <HAL_DMA_IRQHandler+0x178>)
{
 8004e66:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e68:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8004e6a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e6c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004e6e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e70:	409a      	lsls	r2, r3
 8004e72:	4232      	tst	r2, r6
 8004e74:	d00c      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e76:	6801      	ldr	r1, [r0, #0]
 8004e78:	6808      	ldr	r0, [r1, #0]
 8004e7a:	0740      	lsls	r0, r0, #29
 8004e7c:	d508      	bpl.n	8004e90 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e7e:	6808      	ldr	r0, [r1, #0]
 8004e80:	f020 0004 	bic.w	r0, r0, #4
 8004e84:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e86:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e88:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e90:	2201      	movs	r2, #1
 8004e92:	409a      	lsls	r2, r3
 8004e94:	4232      	tst	r2, r6
 8004e96:	d008      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e98:	6821      	ldr	r1, [r4, #0]
 8004e9a:	6949      	ldr	r1, [r1, #20]
 8004e9c:	0609      	lsls	r1, r1, #24
 8004e9e:	d504      	bpl.n	8004eaa <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ea0:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ea2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004ea4:	f042 0202 	orr.w	r2, r2, #2
 8004ea8:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eaa:	2204      	movs	r2, #4
 8004eac:	409a      	lsls	r2, r3
 8004eae:	4232      	tst	r2, r6
 8004eb0:	d008      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004eb2:	6821      	ldr	r1, [r4, #0]
 8004eb4:	6809      	ldr	r1, [r1, #0]
 8004eb6:	0788      	lsls	r0, r1, #30
 8004eb8:	d504      	bpl.n	8004ec4 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004eba:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ebc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004ebe:	f042 0204 	orr.w	r2, r2, #4
 8004ec2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	4232      	tst	r2, r6
 8004eca:	d010      	beq.n	8004eee <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	0709      	lsls	r1, r1, #28
 8004ed2:	d50c      	bpl.n	8004eee <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ed4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	0350      	lsls	r0, r2, #13
 8004eda:	d537      	bpl.n	8004f4c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	0319      	lsls	r1, r3, #12
 8004ee0:	d401      	bmi.n	8004ee6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8004ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ee4:	e000      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004ee8:	b10b      	cbz	r3, 8004eee <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8004eea:	4620      	mov	r0, r4
 8004eec:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	408a      	lsls	r2, r1
 8004ef4:	4232      	tst	r2, r6
 8004ef6:	d03a      	beq.n	8004f6e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	06c6      	lsls	r6, r0, #27
 8004efe:	d536      	bpl.n	8004f6e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f00:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f02:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004f06:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f08:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f0a:	d127      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f0c:	f022 0216 	bic.w	r2, r2, #22
 8004f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f18:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f1c:	b90a      	cbnz	r2, 8004f22 <HAL_DMA_IRQHandler+0xc6>
 8004f1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004f20:	b11a      	cbz	r2, 8004f2a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	f022 0208 	bic.w	r2, r2, #8
 8004f28:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f2a:	233f      	movs	r3, #63	; 0x3f
 8004f2c:	408b      	lsls	r3, r1
 8004f2e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8004f30:	2300      	movs	r3, #0
 8004f32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004f3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d045      	beq.n	8004fce <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8004f42:	4620      	mov	r0, r4
}
 8004f44:	b003      	add	sp, #12
 8004f46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8004f4a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	05d2      	lsls	r2, r2, #23
 8004f50:	d4c7      	bmi.n	8004ee2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f022 0208 	bic.w	r2, r2, #8
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e7c2      	b.n	8004ee2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f5c:	0350      	lsls	r0, r2, #13
 8004f5e:	d527      	bpl.n	8004fb0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0319      	lsls	r1, r3, #12
 8004f64:	d431      	bmi.n	8004fca <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8004f66:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004f68:	b10b      	cbz	r3, 8004f6e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f70:	b36b      	cbz	r3, 8004fce <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f72:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f74:	07da      	lsls	r2, r3, #31
 8004f76:	d519      	bpl.n	8004fac <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f78:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8004f7a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004f80:	6813      	ldr	r3, [r2, #0]
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8004f88:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004f8c:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8004f90:	9b01      	ldr	r3, [sp, #4]
 8004f92:	3301      	adds	r3, #1
 8004f94:	42bb      	cmp	r3, r7
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	d802      	bhi.n	8004fa0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	07db      	lsls	r3, r3, #31
 8004f9e:	d4f7      	bmi.n	8004f90 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004fac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004fae:	e7c6      	b.n	8004f3e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004fb6:	d108      	bne.n	8004fca <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fb8:	6819      	ldr	r1, [r3, #0]
 8004fba:	f021 0110 	bic.w	r1, r1, #16
 8004fbe:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004fc2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004fc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004fca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fcc:	e7cc      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
}
 8004fce:	b003      	add	sp, #12
 8004fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000018 	.word	0x20000018

08004fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fdc:	680b      	ldr	r3, [r1, #0]
{
 8004fde:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005188 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fe4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fe6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe8:	4a65      	ldr	r2, [pc, #404]	; (8005180 <HAL_GPIO_Init+0x1a8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004fea:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800518c <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 8004fee:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ff0:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8004ff2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ff4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8004ff6:	42ac      	cmp	r4, r5
 8004ff8:	f040 80ac 	bne.w	8005154 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ffc:	684c      	ldr	r4, [r1, #4]
 8004ffe:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005002:	2603      	movs	r6, #3
 8005004:	f024 0c10 	bic.w	ip, r4, #16
 8005008:	fa06 f60e 	lsl.w	r6, r6, lr
 800500c:	f10c 37ff 	add.w	r7, ip, #4294967295
 8005010:	43f6      	mvns	r6, r6
 8005012:	2f01      	cmp	r7, #1
 8005014:	d811      	bhi.n	800503a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8005016:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005018:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800501c:	68cf      	ldr	r7, [r1, #12]
 800501e:	fa07 f70e 	lsl.w	r7, r7, lr
 8005022:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8005026:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005028:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800502a:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800502e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8005032:	409f      	lsls	r7, r3
 8005034:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8005038:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800503a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800503c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005040:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005044:	688f      	ldr	r7, [r1, #8]
 8005046:	fa07 f70e 	lsl.w	r7, r7, lr
 800504a:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 800504e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005050:	d116      	bne.n	8005080 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8005052:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005056:	f003 0b07 	and.w	fp, r3, #7
 800505a:	f04f 0c0f 	mov.w	ip, #15
 800505e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8005062:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8005066:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800506a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800506e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005072:	690f      	ldr	r7, [r1, #16]
 8005074:	fa07 f70b 	lsl.w	r7, r7, fp
 8005078:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 800507c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8005080:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005082:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005084:	f004 0703 	and.w	r7, r4, #3
 8005088:	fa07 fe0e 	lsl.w	lr, r7, lr
 800508c:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8005090:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005092:	00e6      	lsls	r6, r4, #3
 8005094:	d55e      	bpl.n	8005154 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005096:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800509a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800509e:	f003 0c03 	and.w	ip, r3, #3
 80050a2:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a6:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80050aa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b2:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 80050b6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80050ba:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80050be:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80050c2:	9603      	str	r6, [sp, #12]
 80050c4:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050c6:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80050ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050ce:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050d2:	4e2c      	ldr	r6, [pc, #176]	; (8005184 <HAL_GPIO_Init+0x1ac>)
 80050d4:	42b0      	cmp	r0, r6
 80050d6:	d044      	beq.n	8005162 <HAL_GPIO_Init+0x18a>
 80050d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050dc:	42b0      	cmp	r0, r6
 80050de:	d042      	beq.n	8005166 <HAL_GPIO_Init+0x18e>
 80050e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050e4:	42b0      	cmp	r0, r6
 80050e6:	d040      	beq.n	800516a <HAL_GPIO_Init+0x192>
 80050e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050ec:	42b0      	cmp	r0, r6
 80050ee:	d03e      	beq.n	800516e <HAL_GPIO_Init+0x196>
 80050f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050f4:	42b0      	cmp	r0, r6
 80050f6:	d03c      	beq.n	8005172 <HAL_GPIO_Init+0x19a>
 80050f8:	4548      	cmp	r0, r9
 80050fa:	d03c      	beq.n	8005176 <HAL_GPIO_Init+0x19e>
 80050fc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005100:	42b0      	cmp	r0, r6
 8005102:	d03a      	beq.n	800517a <HAL_GPIO_Init+0x1a2>
 8005104:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005108:	42b0      	cmp	r0, r6
 800510a:	bf14      	ite	ne
 800510c:	2608      	movne	r6, #8
 800510e:	2607      	moveq	r6, #7
 8005110:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005114:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005118:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800511c:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800511e:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8005122:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005124:	bf0c      	ite	eq
 8005126:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005128:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800512a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800512e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8005130:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8005132:	bf0c      	ite	eq
 8005134:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005136:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005138:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800513c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800513e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8005140:	bf0c      	ite	eq
 8005142:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005144:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005146:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8005148:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800514a:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800514c:	bf54      	ite	pl
 800514e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8005150:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8005152:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005154:	3301      	adds	r3, #1
 8005156:	2b10      	cmp	r3, #16
 8005158:	f47f af49 	bne.w	8004fee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800515c:	b005      	add	sp, #20
 800515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005162:	2600      	movs	r6, #0
 8005164:	e7d4      	b.n	8005110 <HAL_GPIO_Init+0x138>
 8005166:	2601      	movs	r6, #1
 8005168:	e7d2      	b.n	8005110 <HAL_GPIO_Init+0x138>
 800516a:	2602      	movs	r6, #2
 800516c:	e7d0      	b.n	8005110 <HAL_GPIO_Init+0x138>
 800516e:	2603      	movs	r6, #3
 8005170:	e7ce      	b.n	8005110 <HAL_GPIO_Init+0x138>
 8005172:	2604      	movs	r6, #4
 8005174:	e7cc      	b.n	8005110 <HAL_GPIO_Init+0x138>
 8005176:	2605      	movs	r6, #5
 8005178:	e7ca      	b.n	8005110 <HAL_GPIO_Init+0x138>
 800517a:	2606      	movs	r6, #6
 800517c:	e7c8      	b.n	8005110 <HAL_GPIO_Init+0x138>
 800517e:	bf00      	nop
 8005180:	40013c00 	.word	0x40013c00
 8005184:	40020000 	.word	0x40020000
 8005188:	40023800 	.word	0x40023800
 800518c:	40021400 	.word	0x40021400

08005190 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005190:	b10a      	cbz	r2, 8005196 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005192:	6181      	str	r1, [r0, #24]
  }
}
 8005194:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005196:	0409      	lsls	r1, r1, #16
 8005198:	e7fb      	b.n	8005192 <HAL_GPIO_WritePin+0x2>
	...

0800519c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800519e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80051a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051a2:	4c19      	ldr	r4, [pc, #100]	; (8005208 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80051a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ba:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051bc:	f7ff fa36 	bl	800462c <HAL_GetTick>
 80051c0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	03da      	lsls	r2, r3, #15
 80051c6:	d50c      	bpl.n	80051e2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ce:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051d0:	f7ff fa2c 	bl	800462c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051d4:	4c0c      	ldr	r4, [pc, #48]	; (8005208 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80051d6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	039b      	lsls	r3, r3, #14
 80051dc:	d50a      	bpl.n	80051f4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80051de:	2000      	movs	r0, #0
 80051e0:	e006      	b.n	80051f0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051e2:	f7ff fa23 	bl	800462c <HAL_GetTick>
 80051e6:	1b40      	subs	r0, r0, r5
 80051e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80051ec:	d9e9      	bls.n	80051c2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80051ee:	2003      	movs	r0, #3
}
 80051f0:	b003      	add	sp, #12
 80051f2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051f4:	f7ff fa1a 	bl	800462c <HAL_GetTick>
 80051f8:	1b40      	subs	r0, r0, r5
 80051fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80051fe:	d9eb      	bls.n	80051d8 <HAL_PWREx_EnableOverDrive+0x3c>
 8005200:	e7f5      	b.n	80051ee <HAL_PWREx_EnableOverDrive+0x52>
 8005202:	bf00      	nop
 8005204:	40023800 	.word	0x40023800
 8005208:	40007000 	.word	0x40007000

0800520c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800520c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005210:	4604      	mov	r4, r0
 8005212:	b908      	cbnz	r0, 8005218 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005214:	2001      	movs	r0, #1
 8005216:	e03f      	b.n	8005298 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005218:	6803      	ldr	r3, [r0, #0]
 800521a:	07d8      	lsls	r0, r3, #31
 800521c:	d410      	bmi.n	8005240 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	0799      	lsls	r1, r3, #30
 8005222:	d460      	bmi.n	80052e6 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	0719      	lsls	r1, r3, #28
 8005228:	f100 80a5 	bmi.w	8005376 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	075a      	lsls	r2, r3, #29
 8005230:	f100 80c6 	bmi.w	80053c0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005234:	69a0      	ldr	r0, [r4, #24]
 8005236:	2800      	cmp	r0, #0
 8005238:	f040 8130 	bne.w	800549c <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 800523c:	2000      	movs	r0, #0
 800523e:	e02b      	b.n	8005298 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005240:	4b94      	ldr	r3, [pc, #592]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	f002 020c 	and.w	r2, r2, #12
 8005248:	2a04      	cmp	r2, #4
 800524a:	d007      	beq.n	800525c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	f002 020c 	and.w	r2, r2, #12
 8005252:	2a08      	cmp	r2, #8
 8005254:	d10a      	bne.n	800526c <HAL_RCC_OscConfig+0x60>
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	025a      	lsls	r2, r3, #9
 800525a:	d507      	bpl.n	800526c <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b8d      	ldr	r3, [pc, #564]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	039b      	lsls	r3, r3, #14
 8005262:	d5dc      	bpl.n	800521e <HAL_RCC_OscConfig+0x12>
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1d9      	bne.n	800521e <HAL_RCC_OscConfig+0x12>
 800526a:	e7d3      	b.n	8005214 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526c:	6863      	ldr	r3, [r4, #4]
 800526e:	4d89      	ldr	r5, [pc, #548]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d113      	bne.n	800529e <HAL_RCC_OscConfig+0x92>
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800527e:	f7ff f9d5 	bl	800462c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	4d84      	ldr	r5, [pc, #528]	; (8005494 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8005284:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	682b      	ldr	r3, [r5, #0]
 8005288:	039f      	lsls	r7, r3, #14
 800528a:	d4c8      	bmi.n	800521e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528c:	f7ff f9ce 	bl	800462c <HAL_GetTick>
 8005290:	1b80      	subs	r0, r0, r6
 8005292:	2864      	cmp	r0, #100	; 0x64
 8005294:	d9f7      	bls.n	8005286 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8005296:	2003      	movs	r0, #3
}
 8005298:	b002      	add	sp, #8
 800529a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529e:	b99b      	cbnz	r3, 80052c8 <HAL_RCC_OscConfig+0xbc>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80052b0:	f7ff f9bc 	bl	800462c <HAL_GetTick>
 80052b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	0398      	lsls	r0, r3, #14
 80052ba:	d5b0      	bpl.n	800521e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052bc:	f7ff f9b6 	bl	800462c <HAL_GetTick>
 80052c0:	1b80      	subs	r0, r0, r6
 80052c2:	2864      	cmp	r0, #100	; 0x64
 80052c4:	d9f7      	bls.n	80052b6 <HAL_RCC_OscConfig+0xaa>
 80052c6:	e7e6      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	d103      	bne.n	80052d8 <HAL_RCC_OscConfig+0xcc>
 80052d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d4:	602b      	str	r3, [r5, #0]
 80052d6:	e7ce      	b.n	8005276 <HAL_RCC_OscConfig+0x6a>
 80052d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052dc:	602b      	str	r3, [r5, #0]
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e4:	e7ca      	b.n	800527c <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e6:	4b6b      	ldr	r3, [pc, #428]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	f012 0f0c 	tst.w	r2, #12
 80052ee:	d007      	beq.n	8005300 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	f002 020c 	and.w	r2, r2, #12
 80052f6:	2a08      	cmp	r2, #8
 80052f8:	d111      	bne.n	800531e <HAL_RCC_OscConfig+0x112>
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	0259      	lsls	r1, r3, #9
 80052fe:	d40e      	bmi.n	800531e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005300:	4b64      	ldr	r3, [pc, #400]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	0792      	lsls	r2, r2, #30
 8005306:	d502      	bpl.n	800530e <HAL_RCC_OscConfig+0x102>
 8005308:	68e2      	ldr	r2, [r4, #12]
 800530a:	2a01      	cmp	r2, #1
 800530c:	d182      	bne.n	8005214 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	6921      	ldr	r1, [r4, #16]
 8005312:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005316:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800531a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531c:	e782      	b.n	8005224 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800531e:	68e3      	ldr	r3, [r4, #12]
 8005320:	4d5c      	ldr	r5, [pc, #368]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 8005322:	b1bb      	cbz	r3, 8005354 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800532c:	f7ff f97e 	bl	800462c <HAL_GetTick>
 8005330:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005332:	682b      	ldr	r3, [r5, #0]
 8005334:	079f      	lsls	r7, r3, #30
 8005336:	d507      	bpl.n	8005348 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	6922      	ldr	r2, [r4, #16]
 800533c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005340:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005344:	602b      	str	r3, [r5, #0]
 8005346:	e76d      	b.n	8005224 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005348:	f7ff f970 	bl	800462c <HAL_GetTick>
 800534c:	1b80      	subs	r0, r0, r6
 800534e:	2802      	cmp	r0, #2
 8005350:	d9ef      	bls.n	8005332 <HAL_RCC_OscConfig+0x126>
 8005352:	e7a0      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800535c:	f7ff f966 	bl	800462c <HAL_GetTick>
 8005360:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	0798      	lsls	r0, r3, #30
 8005366:	f57f af5d 	bpl.w	8005224 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536a:	f7ff f95f 	bl	800462c <HAL_GetTick>
 800536e:	1b80      	subs	r0, r0, r6
 8005370:	2802      	cmp	r0, #2
 8005372:	d9f6      	bls.n	8005362 <HAL_RCC_OscConfig+0x156>
 8005374:	e78f      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005376:	6963      	ldr	r3, [r4, #20]
 8005378:	4d46      	ldr	r5, [pc, #280]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 800537a:	b183      	cbz	r3, 800539e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800537c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005384:	f7ff f952 	bl	800462c <HAL_GetTick>
 8005388:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800538a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800538c:	079b      	lsls	r3, r3, #30
 800538e:	f53f af4d 	bmi.w	800522c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005392:	f7ff f94b 	bl	800462c <HAL_GetTick>
 8005396:	1b80      	subs	r0, r0, r6
 8005398:	2802      	cmp	r0, #2
 800539a:	d9f6      	bls.n	800538a <HAL_RCC_OscConfig+0x17e>
 800539c:	e77b      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800539e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80053a6:	f7ff f941 	bl	800462c <HAL_GetTick>
 80053aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80053ae:	079f      	lsls	r7, r3, #30
 80053b0:	f57f af3c 	bpl.w	800522c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b4:	f7ff f93a 	bl	800462c <HAL_GetTick>
 80053b8:	1b80      	subs	r0, r0, r6
 80053ba:	2802      	cmp	r0, #2
 80053bc:	d9f6      	bls.n	80053ac <HAL_RCC_OscConfig+0x1a0>
 80053be:	e76a      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c0:	4b34      	ldr	r3, [pc, #208]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 80053c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c4:	00d0      	lsls	r0, r2, #3
 80053c6:	d427      	bmi.n	8005418 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80053ca:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80053cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053dc:	4d2e      	ldr	r5, [pc, #184]	; (8005498 <HAL_RCC_OscConfig+0x28c>)
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	05d9      	lsls	r1, r3, #23
 80053e2:	d51b      	bpl.n	800541c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	4d2b      	ldr	r5, [pc, #172]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d127      	bne.n	800543c <HAL_RCC_OscConfig+0x230>
 80053ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80053f8:	f7ff f918 	bl	800462c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fc:	4f25      	ldr	r7, [pc, #148]	; (8005494 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80053fe:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005402:	079b      	lsls	r3, r3, #30
 8005404:	d53f      	bpl.n	8005486 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8005406:	2e00      	cmp	r6, #0
 8005408:	f43f af14 	beq.w	8005234 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800540c:	4a21      	ldr	r2, [pc, #132]	; (8005494 <HAL_RCC_OscConfig+0x288>)
 800540e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005414:	6413      	str	r3, [r2, #64]	; 0x40
 8005416:	e70d      	b.n	8005234 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8005418:	2600      	movs	r6, #0
 800541a:	e7df      	b.n	80053dc <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005422:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005424:	f7ff f902 	bl	800462c <HAL_GetTick>
 8005428:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	05da      	lsls	r2, r3, #23
 800542e:	d4d9      	bmi.n	80053e4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005430:	f7ff f8fc 	bl	800462c <HAL_GetTick>
 8005434:	1bc0      	subs	r0, r0, r7
 8005436:	2864      	cmp	r0, #100	; 0x64
 8005438:	d9f7      	bls.n	800542a <HAL_RCC_OscConfig+0x21e>
 800543a:	e72c      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800543c:	b9ab      	cbnz	r3, 800546a <HAL_RCC_OscConfig+0x25e>
 800543e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005440:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	672b      	str	r3, [r5, #112]	; 0x70
 800544a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800544c:	f023 0304 	bic.w	r3, r3, #4
 8005450:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005452:	f7ff f8eb 	bl	800462c <HAL_GetTick>
 8005456:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005458:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800545a:	0798      	lsls	r0, r3, #30
 800545c:	d5d3      	bpl.n	8005406 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545e:	f7ff f8e5 	bl	800462c <HAL_GetTick>
 8005462:	1bc0      	subs	r0, r0, r7
 8005464:	4540      	cmp	r0, r8
 8005466:	d9f7      	bls.n	8005458 <HAL_RCC_OscConfig+0x24c>
 8005468:	e715      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800546a:	2b05      	cmp	r3, #5
 800546c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800546e:	d103      	bne.n	8005478 <HAL_RCC_OscConfig+0x26c>
 8005470:	f043 0304 	orr.w	r3, r3, #4
 8005474:	672b      	str	r3, [r5, #112]	; 0x70
 8005476:	e7b9      	b.n	80053ec <HAL_RCC_OscConfig+0x1e0>
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	672b      	str	r3, [r5, #112]	; 0x70
 800547e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005480:	f023 0304 	bic.w	r3, r3, #4
 8005484:	e7b5      	b.n	80053f2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7ff f8d1 	bl	800462c <HAL_GetTick>
 800548a:	eba0 0008 	sub.w	r0, r0, r8
 800548e:	42a8      	cmp	r0, r5
 8005490:	d9b6      	bls.n	8005400 <HAL_RCC_OscConfig+0x1f4>
 8005492:	e700      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
 8005494:	40023800 	.word	0x40023800
 8005498:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800549c:	4d38      	ldr	r5, [pc, #224]	; (8005580 <HAL_RCC_OscConfig+0x374>)
 800549e:	68ab      	ldr	r3, [r5, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d041      	beq.n	800552c <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 80054a8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054aa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80054ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054b2:	d12e      	bne.n	8005512 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 80054b4:	f7ff f8ba 	bl	800462c <HAL_GetTick>
 80054b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ba:	682b      	ldr	r3, [r5, #0]
 80054bc:	0199      	lsls	r1, r3, #6
 80054be:	d422      	bmi.n	8005506 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054cc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80054d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80054d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d8:	4c29      	ldr	r4, [pc, #164]	; (8005580 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054da:	0852      	lsrs	r2, r2, #1
 80054dc:	3a01      	subs	r2, #1
 80054de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054e2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80054ec:	f7ff f89e 	bl	800462c <HAL_GetTick>
 80054f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	019a      	lsls	r2, r3, #6
 80054f6:	f53f aea1 	bmi.w	800523c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fa:	f7ff f897 	bl	800462c <HAL_GetTick>
 80054fe:	1b40      	subs	r0, r0, r5
 8005500:	2802      	cmp	r0, #2
 8005502:	d9f6      	bls.n	80054f2 <HAL_RCC_OscConfig+0x2e6>
 8005504:	e6c7      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005506:	f7ff f891 	bl	800462c <HAL_GetTick>
 800550a:	1b80      	subs	r0, r0, r6
 800550c:	2802      	cmp	r0, #2
 800550e:	d9d4      	bls.n	80054ba <HAL_RCC_OscConfig+0x2ae>
 8005510:	e6c1      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8005512:	f7ff f88b 	bl	800462c <HAL_GetTick>
 8005516:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	019b      	lsls	r3, r3, #6
 800551c:	f57f ae8e 	bpl.w	800523c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005520:	f7ff f884 	bl	800462c <HAL_GetTick>
 8005524:	1b00      	subs	r0, r0, r4
 8005526:	2802      	cmp	r0, #2
 8005528:	d9f6      	bls.n	8005518 <HAL_RCC_OscConfig+0x30c>
 800552a:	e6b4      	b.n	8005296 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800552c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800552e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005530:	f43f aeb2 	beq.w	8005298 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005538:	69e1      	ldr	r1, [r4, #28]
 800553a:	428a      	cmp	r2, r1
 800553c:	f47f ae6a 	bne.w	8005214 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005540:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005544:	6a21      	ldr	r1, [r4, #32]
 8005546:	428a      	cmp	r2, r1
 8005548:	f47f ae64 	bne.w	8005214 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800554c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005550:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005552:	401a      	ands	r2, r3
 8005554:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005558:	f47f ae5c 	bne.w	8005214 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800555c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800555e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005562:	0852      	lsrs	r2, r2, #1
 8005564:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005566:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800556a:	f47f ae53 	bne.w	8005214 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800556e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005570:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005574:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8005578:	bf14      	ite	ne
 800557a:	2001      	movne	r0, #1
 800557c:	2000      	moveq	r0, #0
 800557e:	e68b      	b.n	8005298 <HAL_RCC_OscConfig+0x8c>
 8005580:	40023800 	.word	0x40023800

08005584 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005584:	4913      	ldr	r1, [pc, #76]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005586:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005588:	688b      	ldr	r3, [r1, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b04      	cmp	r3, #4
 8005590:	d003      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0x16>
 8005592:	2b08      	cmp	r3, #8
 8005594:	d003      	beq.n	800559e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005596:	4810      	ldr	r0, [pc, #64]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8005598:	e000      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800559a:	4810      	ldr	r0, [pc, #64]	; (80055dc <HAL_RCC_GetSysClockFreq+0x58>)
}
 800559c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800559e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055a0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055a8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80055b0:	bf1a      	itte	ne
 80055b2:	480a      	ldrne	r0, [pc, #40]	; (80055dc <HAL_RCC_GetSysClockFreq+0x58>)
 80055b4:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b6:	4808      	ldreq	r0, [pc, #32]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80055b8:	fba1 0100 	umull	r0, r1, r1, r0
 80055bc:	f7fb fb8c 	bl	8000cd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x50>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80055c8:	3301      	adds	r3, #1
 80055ca:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80055cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80055d0:	e7e4      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x18>
 80055d2:	bf00      	nop
 80055d4:	40023800 	.word	0x40023800
 80055d8:	00f42400 	.word	0x00f42400
 80055dc:	017d7840 	.word	0x017d7840

080055e0 <HAL_RCC_ClockConfig>:
{
 80055e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80055e6:	4604      	mov	r4, r0
 80055e8:	b910      	cbnz	r0, 80055f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80055ea:	2001      	movs	r0, #1
}
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055f0:	4a45      	ldr	r2, [pc, #276]	; (8005708 <HAL_RCC_ClockConfig+0x128>)
 80055f2:	6813      	ldr	r3, [r2, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	428b      	cmp	r3, r1
 80055fa:	d328      	bcc.n	800564e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fc:	6821      	ldr	r1, [r4, #0]
 80055fe:	078f      	lsls	r7, r1, #30
 8005600:	d430      	bmi.n	8005664 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005602:	07c8      	lsls	r0, r1, #31
 8005604:	d443      	bmi.n	800568e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005606:	4a40      	ldr	r2, [pc, #256]	; (8005708 <HAL_RCC_ClockConfig+0x128>)
 8005608:	6813      	ldr	r3, [r2, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	42ab      	cmp	r3, r5
 8005610:	d866      	bhi.n	80056e0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	0751      	lsls	r1, r2, #29
 8005616:	d46f      	bmi.n	80056f8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005618:	0713      	lsls	r3, r2, #28
 800561a:	d507      	bpl.n	800562c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800561c:	4a3b      	ldr	r2, [pc, #236]	; (800570c <HAL_RCC_ClockConfig+0x12c>)
 800561e:	6921      	ldr	r1, [r4, #16]
 8005620:	6893      	ldr	r3, [r2, #8]
 8005622:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005626:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800562a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800562c:	f7ff ffaa 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 8005630:	4b36      	ldr	r3, [pc, #216]	; (800570c <HAL_RCC_ClockConfig+0x12c>)
 8005632:	4a37      	ldr	r2, [pc, #220]	; (8005710 <HAL_RCC_ClockConfig+0x130>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	40d8      	lsrs	r0, r3
 800563e:	4b35      	ldr	r3, [pc, #212]	; (8005714 <HAL_RCC_ClockConfig+0x134>)
 8005640:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <HAL_RCC_ClockConfig+0x138>)
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	f7fe ffaf 	bl	80045a8 <HAL_InitTick>
  return HAL_OK;
 800564a:	2000      	movs	r0, #0
 800564c:	e7ce      	b.n	80055ec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	f023 030f 	bic.w	r3, r3, #15
 8005654:	430b      	orrs	r3, r1
 8005656:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005658:	6813      	ldr	r3, [r2, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	428b      	cmp	r3, r1
 8005660:	d1c3      	bne.n	80055ea <HAL_RCC_ClockConfig+0xa>
 8005662:	e7cb      	b.n	80055fc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	f011 0f04 	tst.w	r1, #4
 8005668:	4b28      	ldr	r3, [pc, #160]	; (800570c <HAL_RCC_ClockConfig+0x12c>)
 800566a:	d003      	beq.n	8005674 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005672:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005674:	070e      	lsls	r6, r1, #28
 8005676:	d503      	bpl.n	8005680 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800567e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	68a0      	ldr	r0, [r4, #8]
 8005684:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005688:	4302      	orrs	r2, r0
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	e7b9      	b.n	8005602 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800568e:	6861      	ldr	r1, [r4, #4]
 8005690:	4b1e      	ldr	r3, [pc, #120]	; (800570c <HAL_RCC_ClockConfig+0x12c>)
 8005692:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005694:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005696:	d11b      	bne.n	80056d0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005698:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569c:	d0a5      	beq.n	80055ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a0:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a4:	4e19      	ldr	r6, [pc, #100]	; (800570c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a6:	f022 0203 	bic.w	r2, r2, #3
 80056aa:	430a      	orrs	r2, r1
 80056ac:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80056ae:	f7fe ffbd 	bl	800462c <HAL_GetTick>
 80056b2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b4:	68b3      	ldr	r3, [r6, #8]
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	f003 030c 	and.w	r3, r3, #12
 80056bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80056c0:	d0a1      	beq.n	8005606 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c2:	f7fe ffb3 	bl	800462c <HAL_GetTick>
 80056c6:	1bc0      	subs	r0, r0, r7
 80056c8:	4540      	cmp	r0, r8
 80056ca:	d9f3      	bls.n	80056b4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80056cc:	2003      	movs	r0, #3
 80056ce:	e78d      	b.n	80055ec <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d0:	2902      	cmp	r1, #2
 80056d2:	d102      	bne.n	80056da <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80056d8:	e7e0      	b.n	800569c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056da:	f012 0f02 	tst.w	r2, #2
 80056de:	e7dd      	b.n	800569c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e0:	6813      	ldr	r3, [r2, #0]
 80056e2:	f023 030f 	bic.w	r3, r3, #15
 80056e6:	432b      	orrs	r3, r5
 80056e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	6813      	ldr	r3, [r2, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	f47f af7a 	bne.w	80055ea <HAL_RCC_ClockConfig+0xa>
 80056f6:	e78c      	b.n	8005612 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f8:	4904      	ldr	r1, [pc, #16]	; (800570c <HAL_RCC_ClockConfig+0x12c>)
 80056fa:	68e0      	ldr	r0, [r4, #12]
 80056fc:	688b      	ldr	r3, [r1, #8]
 80056fe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005702:	4303      	orrs	r3, r0
 8005704:	608b      	str	r3, [r1, #8]
 8005706:	e787      	b.n	8005618 <HAL_RCC_ClockConfig+0x38>
 8005708:	40023c00 	.word	0x40023c00
 800570c:	40023800 	.word	0x40023800
 8005710:	0800df90 	.word	0x0800df90
 8005714:	20000018 	.word	0x20000018
 8005718:	200027e4 	.word	0x200027e4

0800571c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x14>)
 800571e:	4a05      	ldr	r2, [pc, #20]	; (8005734 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005726:	5cd3      	ldrb	r3, [r2, r3]
 8005728:	4a03      	ldr	r2, [pc, #12]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800572a:	6810      	ldr	r0, [r2, #0]
}
 800572c:	40d8      	lsrs	r0, r3
 800572e:	4770      	bx	lr
 8005730:	40023800 	.word	0x40023800
 8005734:	0800dfa0 	.word	0x0800dfa0
 8005738:	20000018 	.word	0x20000018

0800573c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <HAL_RCC_GetPCLK2Freq+0x14>)
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005746:	5cd3      	ldrb	r3, [r2, r3]
 8005748:	4a03      	ldr	r2, [pc, #12]	; (8005758 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800574a:	6810      	ldr	r0, [r2, #0]
}
 800574c:	40d8      	lsrs	r0, r3
 800574e:	4770      	bx	lr
 8005750:	40023800 	.word	0x40023800
 8005754:	0800dfa0 	.word	0x0800dfa0
 8005758:	20000018 	.word	0x20000018

0800575c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800575c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005760:	6802      	ldr	r2, [r0, #0]
{
 8005762:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005764:	f012 0601 	ands.w	r6, r2, #1
 8005768:	d00b      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800576a:	4bb9      	ldr	r3, [pc, #740]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005772:	6099      	str	r1, [r3, #8]
 8005774:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8005776:	6899      	ldr	r1, [r3, #8]
 8005778:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800577a:	fab6 f686 	clz	r6, r6
 800577e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005780:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005782:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8005786:	d012      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005788:	49b1      	ldr	r1, [pc, #708]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800578a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800578c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005790:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005794:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8005798:	bf08      	it	eq
 800579a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800579c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057a0:	bf16      	itet	ne
 80057a2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80057a6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057a8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057ae:	02d7      	lsls	r7, r2, #11
 80057b0:	d510      	bpl.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057b2:	48a7      	ldr	r0, [pc, #668]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057b6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057ba:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80057c2:	ea43 0301 	orr.w	r3, r3, r1
 80057c6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057ca:	f000 814b 	beq.w	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x308>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80057ce:	2900      	cmp	r1, #0
 80057d0:	bf08      	it	eq
 80057d2:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057d4:	0690      	lsls	r0, r2, #26
 80057d6:	d531      	bpl.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d8:	4b9d      	ldr	r3, [pc, #628]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057da:	4f9e      	ldr	r7, [pc, #632]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80057dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f6:	f7fe ff19 	bl	800462c <HAL_GetTick>
 80057fa:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	05d9      	lsls	r1, r3, #23
 8005800:	f140 8132 	bpl.w	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005804:	4f92      	ldr	r7, [pc, #584]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005806:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005808:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800580c:	f040 8137 	bne.w	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x322>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005810:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005812:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005816:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800581a:	4a8d      	ldr	r2, [pc, #564]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800581c:	f040 8155 	bne.w	8005aca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005820:	6891      	ldr	r1, [r2, #8]
 8005822:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8005826:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800582a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800582e:	4301      	orrs	r1, r0
 8005830:	6091      	str	r1, [r2, #8]
 8005832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005836:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005838:	430b      	orrs	r3, r1
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	06df      	lsls	r7, r3, #27
 8005840:	d50c      	bpl.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005842:	4a83      	ldr	r2, [pc, #524]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005844:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005848:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800584c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005850:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005854:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005856:	4301      	orrs	r1, r0
 8005858:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800585c:	0458      	lsls	r0, r3, #17
 800585e:	d508      	bpl.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005860:	497b      	ldr	r1, [pc, #492]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005862:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005864:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005868:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800586c:	4302      	orrs	r2, r0
 800586e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005872:	0419      	lsls	r1, r3, #16
 8005874:	d508      	bpl.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005876:	4976      	ldr	r1, [pc, #472]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005878:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800587a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800587e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005882:	4302      	orrs	r2, r0
 8005884:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005888:	03da      	lsls	r2, r3, #15
 800588a:	d508      	bpl.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800588c:	4970      	ldr	r1, [pc, #448]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800588e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005890:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005894:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005898:	4302      	orrs	r2, r0
 800589a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800589e:	065f      	lsls	r7, r3, #25
 80058a0:	d508      	bpl.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058a2:	496b      	ldr	r1, [pc, #428]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80058a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80058aa:	f022 0203 	bic.w	r2, r2, #3
 80058ae:	4302      	orrs	r2, r0
 80058b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058b4:	0618      	lsls	r0, r3, #24
 80058b6:	d508      	bpl.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058b8:	4965      	ldr	r1, [pc, #404]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80058bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80058c0:	f022 020c 	bic.w	r2, r2, #12
 80058c4:	4302      	orrs	r2, r0
 80058c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ca:	05d9      	lsls	r1, r3, #23
 80058cc:	d508      	bpl.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ce:	4960      	ldr	r1, [pc, #384]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80058d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80058d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80058da:	4302      	orrs	r2, r0
 80058dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058e0:	059a      	lsls	r2, r3, #22
 80058e2:	d508      	bpl.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058e4:	495a      	ldr	r1, [pc, #360]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80058e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80058ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80058f0:	4302      	orrs	r2, r0
 80058f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058f6:	055f      	lsls	r7, r3, #21
 80058f8:	d508      	bpl.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058fa:	4955      	ldr	r1, [pc, #340]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80058fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005902:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005906:	4302      	orrs	r2, r0
 8005908:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800590c:	0518      	lsls	r0, r3, #20
 800590e:	d508      	bpl.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005910:	494f      	ldr	r1, [pc, #316]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005912:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005914:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005918:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800591c:	4302      	orrs	r2, r0
 800591e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005922:	04d9      	lsls	r1, r3, #19
 8005924:	d508      	bpl.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005926:	494a      	ldr	r1, [pc, #296]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005928:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800592a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800592e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005932:	4302      	orrs	r2, r0
 8005934:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005938:	049a      	lsls	r2, r3, #18
 800593a:	d508      	bpl.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800593c:	4944      	ldr	r1, [pc, #272]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800593e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005940:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005944:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005948:	4302      	orrs	r2, r0
 800594a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800594e:	029f      	lsls	r7, r3, #10
 8005950:	d50c      	bpl.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005952:	483f      	ldr	r0, [pc, #252]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005954:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005956:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800595a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800595e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8005962:	bf08      	it	eq
 8005964:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005966:	430a      	orrs	r2, r1
 8005968:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800596c:	0358      	lsls	r0, r3, #13
 800596e:	d508      	bpl.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005970:	4937      	ldr	r1, [pc, #220]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005972:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005974:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800597c:	4302      	orrs	r2, r0
 800597e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005982:	0219      	lsls	r1, r3, #8
 8005984:	d508      	bpl.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005986:	4932      	ldr	r1, [pc, #200]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005988:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800598a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800598e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005992:	4302      	orrs	r2, r0
 8005994:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	d508      	bpl.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800599c:	492c      	ldr	r1, [pc, #176]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800599e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80059a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80059a4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80059a8:	4302      	orrs	r2, r0
 80059aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80059ae:	2e00      	cmp	r6, #0
 80059b0:	f040 808f 	bne.w	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059b8:	f000 808b 	beq.w	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059bc:	2d01      	cmp	r5, #1
 80059be:	d14f      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059c0:	4d23      	ldr	r5, [pc, #140]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ca:	f7fe fe2f 	bl	800462c <HAL_GetTick>
 80059ce:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	009f      	lsls	r7, r3, #2
 80059d4:	f100 80e0 	bmi.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	0305      	lsls	r5, r0, #12
 80059dc:	d501      	bpl.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80059de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059e0:	b11b      	cbz	r3, 80059ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80059e2:	02c1      	lsls	r1, r0, #11
 80059e4:	d518      	bpl.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059e8:	b9b3      	cbnz	r3, 8005a18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059ea:	4919      	ldr	r1, [pc, #100]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80059ec:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80059fa:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a04:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8005a08:	6a22      	ldr	r2, [r4, #32]
 8005a0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a18:	0282      	lsls	r2, r0, #10
 8005a1a:	d510      	bpl.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005a1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a22:	d10c      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a24:	490a      	ldr	r1, [pc, #40]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005a26:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005a2c:	6920      	ldr	r0, [r4, #16]
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005a34:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a3e:	4c04      	ldr	r4, [pc, #16]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a48:	f7fe fdf0 	bl	800462c <HAL_GetTick>
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	e003      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	f140 80a3 	bpl.w	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005a60:	2000      	movs	r0, #0
 8005a62:	e009      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      plli2sused = 1;
 8005a64:	2601      	movs	r6, #1
 8005a66:	e6b5      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a68:	f7fe fde0 	bl	800462c <HAL_GetTick>
 8005a6c:	eba0 0008 	sub.w	r0, r0, r8
 8005a70:	2864      	cmp	r0, #100	; 0x64
 8005a72:	f67f aec3 	bls.w	80057fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8005a76:	2003      	movs	r0, #3
}
 8005a78:	b003      	add	sp, #12
 8005a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005a84:	4293      	cmp	r3, r2
 8005a86:	f43f aec3 	beq.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a96:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005a9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a9e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005aa0:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aa4:	07da      	lsls	r2, r3, #31
 8005aa6:	f57f aeb3 	bpl.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 8005aaa:	f7fe fdbf 	bl	800462c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005ab2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ab6:	079b      	lsls	r3, r3, #30
 8005ab8:	f53f aeaa 	bmi.w	8005810 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abc:	f7fe fdb6 	bl	800462c <HAL_GetTick>
 8005ac0:	eba0 0008 	sub.w	r0, r0, r8
 8005ac4:	4548      	cmp	r0, r9
 8005ac6:	d9f5      	bls.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8005ac8:	e7d5      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aca:	6891      	ldr	r1, [r2, #8]
 8005acc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005ad0:	e6ae      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 8005ad2:	4e38      	ldr	r6, [pc, #224]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ada:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005adc:	f7fe fda6 	bl	800462c <HAL_GetTick>
 8005ae0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ae2:	6833      	ldr	r3, [r6, #0]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	d451      	bmi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	07d7      	lsls	r7, r2, #31
 8005aec:	d50d      	bpl.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005af0:	b95b      	cbnz	r3, 8005b0a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005af2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005af6:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8005afa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005afe:	071b      	lsls	r3, r3, #28
 8005b00:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005b04:	430b      	orrs	r3, r1
 8005b06:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b0a:	0310      	lsls	r0, r2, #12
 8005b0c:	d503      	bpl.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b14:	d005      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8005b16:	02d1      	lsls	r1, r2, #11
 8005b18:	d519      	bpl.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b20:	d115      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b22:	4924      	ldr	r1, [pc, #144]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005b24:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b26:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005b2a:	6866      	ldr	r6, [r4, #4]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005b32:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005b36:	4303      	orrs	r3, r0
 8005b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b3c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005b40:	69e3      	ldr	r3, [r4, #28]
 8005b42:	f020 001f 	bic.w	r0, r0, #31
 8005b46:	3b01      	subs	r3, #1
 8005b48:	4303      	orrs	r3, r0
 8005b4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b4e:	0192      	lsls	r2, r2, #6
 8005b50:	d50a      	bpl.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	6862      	ldr	r2, [r4, #4]
 8005b56:	061b      	lsls	r3, r3, #24
 8005b58:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005b5c:	68a2      	ldr	r2, [r4, #8]
 8005b5e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005b62:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005b68:	4e12      	ldr	r6, [pc, #72]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b6a:	6833      	ldr	r3, [r6, #0]
 8005b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b70:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005b72:	f7fe fd5b 	bl	800462c <HAL_GetTick>
 8005b76:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	f53f af1e 	bmi.w	80059bc <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b80:	f7fe fd54 	bl	800462c <HAL_GetTick>
 8005b84:	1bc0      	subs	r0, r0, r7
 8005b86:	2864      	cmp	r0, #100	; 0x64
 8005b88:	d9f6      	bls.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005b8a:	e774      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b8c:	f7fe fd4e 	bl	800462c <HAL_GetTick>
 8005b90:	1bc0      	subs	r0, r0, r7
 8005b92:	2864      	cmp	r0, #100	; 0x64
 8005b94:	d9a5      	bls.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005b96:	e76e      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b98:	f7fe fd48 	bl	800462c <HAL_GetTick>
 8005b9c:	1b80      	subs	r0, r0, r6
 8005b9e:	2864      	cmp	r0, #100	; 0x64
 8005ba0:	f67f af16 	bls.w	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ba4:	e767      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ba6:	f7fe fd41 	bl	800462c <HAL_GetTick>
 8005baa:	1b40      	subs	r0, r0, r5
 8005bac:	2864      	cmp	r0, #100	; 0x64
 8005bae:	f67f af53 	bls.w	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005bb2:	e760      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8005bb4:	40023800 	.word	0x40023800

08005bb8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb8:	6a03      	ldr	r3, [r0, #32]
 8005bba:	f023 0301 	bic.w	r3, r3, #1
{
 8005bbe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bce:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8005bd2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005bd6:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bd8:	688d      	ldr	r5, [r1, #8]
 8005bda:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bdc:	4d0e      	ldr	r5, [pc, #56]	; (8005c18 <TIM_OC1_SetConfig+0x60>)
 8005bde:	42a8      	cmp	r0, r5
 8005be0:	d002      	beq.n	8005be8 <TIM_OC1_SetConfig+0x30>
 8005be2:	4e0e      	ldr	r6, [pc, #56]	; (8005c1c <TIM_OC1_SetConfig+0x64>)
 8005be4:	42b0      	cmp	r0, r6
 8005be6:	d111      	bne.n	8005c0c <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bec:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8005bf0:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bf4:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	d002      	beq.n	8005c00 <TIM_OC1_SetConfig+0x48>
 8005bfa:	4d08      	ldr	r5, [pc, #32]	; (8005c1c <TIM_OC1_SetConfig+0x64>)
 8005bfc:	42a8      	cmp	r0, r5
 8005bfe:	d105      	bne.n	8005c0c <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c04:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005c08:	4335      	orrs	r5, r6
 8005c0a:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c0e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c10:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005c12:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	6203      	str	r3, [r0, #32]
}
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400

08005c20 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c20:	6a03      	ldr	r3, [r0, #32]
 8005c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8005c26:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c28:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c36:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8005c3a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005c3e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c40:	688d      	ldr	r5, [r1, #8]
 8005c42:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c46:	4d11      	ldr	r5, [pc, #68]	; (8005c8c <TIM_OC3_SetConfig+0x6c>)
 8005c48:	42a8      	cmp	r0, r5
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC3_SetConfig+0x34>
 8005c4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c50:	42a8      	cmp	r0, r5
 8005c52:	d114      	bne.n	8005c7e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c54:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c5a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5e:	4d0b      	ldr	r5, [pc, #44]	; (8005c8c <TIM_OC3_SetConfig+0x6c>)
 8005c60:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c66:	d003      	beq.n	8005c70 <TIM_OC3_SetConfig+0x50>
 8005c68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c6c:	42a8      	cmp	r0, r5
 8005c6e:	d106      	bne.n	8005c7e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c74:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005c78:	4335      	orrs	r5, r6
 8005c7a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c80:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005c82:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005c84:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	6203      	str	r3, [r0, #32]
}
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40010000 	.word	0x40010000

08005c90 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c90:	6a03      	ldr	r3, [r0, #32]
 8005c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8005c96:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9e:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005caa:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb2:	688d      	ldr	r5, [r1, #8]
 8005cb4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb8:	4d08      	ldr	r5, [pc, #32]	; (8005cdc <TIM_OC4_SetConfig+0x4c>)
 8005cba:	42a8      	cmp	r0, r5
 8005cbc:	d003      	beq.n	8005cc6 <TIM_OC4_SetConfig+0x36>
 8005cbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cc2:	42a8      	cmp	r0, r5
 8005cc4:	d104      	bne.n	8005cd0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cc6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cca:	694d      	ldr	r5, [r1, #20]
 8005ccc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cd4:	684b      	ldr	r3, [r1, #4]
 8005cd6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd8:	6202      	str	r2, [r0, #32]
}
 8005cda:	bd30      	pop	{r4, r5, pc}
 8005cdc:	40010000 	.word	0x40010000

08005ce0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8005ce6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cee:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cf0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005cfe:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d00:	688d      	ldr	r5, [r1, #8]
 8005d02:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	4d09      	ldr	r5, [pc, #36]	; (8005d2c <TIM_OC5_SetConfig+0x4c>)
 8005d08:	42a8      	cmp	r0, r5
 8005d0a:	d003      	beq.n	8005d14 <TIM_OC5_SetConfig+0x34>
 8005d0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d10:	42a8      	cmp	r0, r5
 8005d12:	d104      	bne.n	8005d1e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d14:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d18:	694d      	ldr	r5, [r1, #20]
 8005d1a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d20:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d22:	684b      	ldr	r3, [r1, #4]
 8005d24:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	6202      	str	r2, [r0, #32]
}
 8005d28:	bd30      	pop	{r4, r5, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40010000 	.word	0x40010000

08005d30 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d30:	6a03      	ldr	r3, [r0, #32]
 8005d32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8005d36:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d3e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d40:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d44:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d52:	688d      	ldr	r5, [r1, #8]
 8005d54:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	4d08      	ldr	r5, [pc, #32]	; (8005d7c <TIM_OC6_SetConfig+0x4c>)
 8005d5a:	42a8      	cmp	r0, r5
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC6_SetConfig+0x36>
 8005d5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d62:	42a8      	cmp	r0, r5
 8005d64:	d104      	bne.n	8005d70 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d66:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d6a:	694d      	ldr	r5, [r1, #20]
 8005d6c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d72:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d74:	684b      	ldr	r3, [r1, #4]
 8005d76:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d78:	6202      	str	r2, [r0, #32]
}
 8005d7a:	bd30      	pop	{r4, r5, pc}
 8005d7c:	40010000 	.word	0x40010000

08005d80 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d82:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d88:	4b08      	ldr	r3, [pc, #32]	; (8005dac <HAL_TIM_Base_Start+0x2c>)
 8005d8a:	6891      	ldr	r1, [r2, #8]
 8005d8c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8e:	2b06      	cmp	r3, #6
 8005d90:	d006      	beq.n	8005da0 <HAL_TIM_Base_Start+0x20>
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d96:	d003      	beq.n	8005da0 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8005d98:	6813      	ldr	r3, [r2, #0]
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005da6:	2000      	movs	r0, #0
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	00010007 	.word	0x00010007

08005db0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db0:	6803      	ldr	r3, [r0, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <HAL_TIM_Base_Start_IT+0x28>)
 8005dbc:	6899      	ldr	r1, [r3, #8]
 8005dbe:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc0:	2a06      	cmp	r2, #6
 8005dc2:	d006      	beq.n	8005dd2 <HAL_TIM_Base_Start_IT+0x22>
 8005dc4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
}
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	00010007 	.word	0x00010007

08005ddc <HAL_TIM_OnePulse_MspInit>:
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_OC_DelayElapsedCallback>:
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIM_IC_CaptureCallback>:
 8005de0:	4770      	bx	lr

08005de2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_TriggerCallback>:
 8005de4:	4770      	bx	lr

08005de6 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005de6:	6803      	ldr	r3, [r0, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	0791      	lsls	r1, r2, #30
{
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df0:	d50f      	bpl.n	8005e12 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	0792      	lsls	r2, r2, #30
 8005df6:	d50c      	bpl.n	8005e12 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005df8:	f06f 0202 	mvn.w	r2, #2
 8005dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dfe:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e00:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e02:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e04:	0799      	lsls	r1, r3, #30
 8005e06:	f000 8085 	beq.w	8005f14 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	f7ff ffe9 	bl	8005de0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	0752      	lsls	r2, r2, #29
 8005e18:	d510      	bpl.n	8005e3c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	0750      	lsls	r0, r2, #29
 8005e1e:	d50d      	bpl.n	8005e3c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e20:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005e24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e28:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e2a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e2c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e2e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005e32:	d075      	beq.n	8005f20 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e34:	f7ff ffd4 	bl	8005de0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	0711      	lsls	r1, r2, #28
 8005e42:	d50f      	bpl.n	8005e64 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	0712      	lsls	r2, r2, #28
 8005e48:	d50c      	bpl.n	8005e64 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e4a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e52:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e54:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e56:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e58:	079b      	lsls	r3, r3, #30
 8005e5a:	d067      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5c:	f7ff ffc0 	bl	8005de0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e60:	2300      	movs	r3, #0
 8005e62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	06d0      	lsls	r0, r2, #27
 8005e6a:	d510      	bpl.n	8005e8e <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	06d1      	lsls	r1, r2, #27
 8005e70:	d50d      	bpl.n	8005e8e <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e72:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8005e76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e80:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005e84:	d058      	beq.n	8005f38 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	f7ff ffab 	bl	8005de0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	07d2      	lsls	r2, r2, #31
 8005e94:	d508      	bpl.n	8005ea8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	07d0      	lsls	r0, r2, #31
 8005e9a:	d505      	bpl.n	8005ea8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e9c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ea0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ea2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ea4:	f7fc f93e 	bl	8002124 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	0611      	lsls	r1, r2, #24
 8005eae:	d508      	bpl.n	8005ec2 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	0612      	lsls	r2, r2, #24
 8005eb4:	d505      	bpl.n	8005ec2 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005eba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ebc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ebe:	f000 fae0 	bl	8006482 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	05d0      	lsls	r0, r2, #23
 8005ec8:	d508      	bpl.n	8005edc <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	0611      	lsls	r1, r2, #24
 8005ece:	d505      	bpl.n	8005edc <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ed0:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005ed4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ed6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005ed8:	f000 fad4 	bl	8006484 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	0652      	lsls	r2, r2, #25
 8005ee2:	d508      	bpl.n	8005ef6 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	0650      	lsls	r0, r2, #25
 8005ee8:	d505      	bpl.n	8005ef6 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8005eee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ef0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005ef2:	f7ff ff77 	bl	8005de4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	0691      	lsls	r1, r2, #26
 8005efc:	d522      	bpl.n	8005f44 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	0692      	lsls	r2, r2, #26
 8005f02:	d51f      	bpl.n	8005f44 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f04:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005f08:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f0a:	611a      	str	r2, [r3, #16]
}
 8005f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005f10:	f000 bab6 	b.w	8006480 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f14:	f7ff ff63 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7ff ff62 	bl	8005de2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f1e:	e776      	b.n	8005e0e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f20:	f7ff ff5d 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f24:	4620      	mov	r0, r4
 8005f26:	f7ff ff5c 	bl	8005de2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f2a:	e785      	b.n	8005e38 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2c:	f7ff ff57 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff ff56 	bl	8005de2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f36:	e793      	b.n	8005e60 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f38:	f7ff ff51 	bl	8005dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff ff50 	bl	8005de2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f42:	e7a2      	b.n	8005e8a <HAL_TIM_IRQHandler+0xa4>
}
 8005f44:	bd10      	pop	{r4, pc}
	...

08005f48 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	4a30      	ldr	r2, [pc, #192]	; (800600c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005f4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f4c:	4290      	cmp	r0, r2
 8005f4e:	d012      	beq.n	8005f76 <TIM_Base_SetConfig+0x2e>
 8005f50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f54:	d00f      	beq.n	8005f76 <TIM_Base_SetConfig+0x2e>
 8005f56:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005f5a:	4290      	cmp	r0, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_Base_SetConfig+0x2e>
 8005f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f62:	4290      	cmp	r0, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_Base_SetConfig+0x2e>
 8005f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f6a:	4290      	cmp	r0, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_Base_SetConfig+0x2e>
 8005f6e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005f72:	4290      	cmp	r0, r2
 8005f74:	d119      	bne.n	8005faa <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005f76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f7c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7e:	4a23      	ldr	r2, [pc, #140]	; (800600c <TIM_Base_SetConfig+0xc4>)
 8005f80:	4290      	cmp	r0, r2
 8005f82:	d029      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005f84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005f88:	d026      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005f8a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005f8e:	4290      	cmp	r0, r2
 8005f90:	d022      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005f92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f96:	4290      	cmp	r0, r2
 8005f98:	d01e      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f9e:	4290      	cmp	r0, r2
 8005fa0:	d01a      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005fa2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005fa6:	4290      	cmp	r0, r2
 8005fa8:	d016      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005faa:	4a19      	ldr	r2, [pc, #100]	; (8006010 <TIM_Base_SetConfig+0xc8>)
 8005fac:	4290      	cmp	r0, r2
 8005fae:	d013      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fb4:	4290      	cmp	r0, r2
 8005fb6:	d00f      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005fb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fbc:	4290      	cmp	r0, r2
 8005fbe:	d00b      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005fc0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005fc4:	4290      	cmp	r0, r2
 8005fc6:	d007      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fcc:	4290      	cmp	r0, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_Base_SetConfig+0x90>
 8005fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fd4:	4290      	cmp	r0, r2
 8005fd6:	d103      	bne.n	8005fe0 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fdc:	68ca      	ldr	r2, [r1, #12]
 8005fde:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe0:	694a      	ldr	r2, [r1, #20]
 8005fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005fe8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fea:	688b      	ldr	r3, [r1, #8]
 8005fec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005fee:	680b      	ldr	r3, [r1, #0]
 8005ff0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <TIM_Base_SetConfig+0xc4>)
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	d003      	beq.n	8006000 <TIM_Base_SetConfig+0xb8>
 8005ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ffc:	4298      	cmp	r0, r3
 8005ffe:	d101      	bne.n	8006004 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006000:	690b      	ldr	r3, [r1, #16]
 8006002:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006004:	2301      	movs	r3, #1
 8006006:	6143      	str	r3, [r0, #20]
}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40014000 	.word	0x40014000

08006014 <HAL_TIM_Base_Init>:
{
 8006014:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006016:	4604      	mov	r4, r0
 8006018:	b1a0      	cbz	r0, 8006044 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800601a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800601e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006022:	b91b      	cbnz	r3, 800602c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006024:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006028:	f7fc fd58 	bl	8002adc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006036:	f7ff ff87 	bl	8005f48 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800603a:	2301      	movs	r3, #1
  return HAL_OK;
 800603c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800603e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006042:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006044:	2001      	movs	r0, #1
 8006046:	e7fc      	b.n	8006042 <HAL_TIM_Base_Init+0x2e>

08006048 <HAL_TIM_PWM_Init>:
{
 8006048:	b510      	push	{r4, lr}
  if (htim == NULL)
 800604a:	4604      	mov	r4, r0
 800604c:	b1a0      	cbz	r0, 8006078 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800604e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006056:	b91b      	cbnz	r3, 8006060 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006058:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800605c:	f7fc fd20 	bl	8002aa0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006062:	6820      	ldr	r0, [r4, #0]
 8006064:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006066:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606a:	f7ff ff6d 	bl	8005f48 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800606e:	2301      	movs	r3, #1
  return HAL_OK;
 8006070:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006076:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006078:	2001      	movs	r0, #1
 800607a:	e7fc      	b.n	8006076 <HAL_TIM_PWM_Init+0x2e>

0800607c <HAL_TIM_OnePulse_Init>:
{
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	460d      	mov	r5, r1
  if (htim == NULL)
 8006080:	4604      	mov	r4, r0
 8006082:	b1e0      	cbz	r0, 80060be <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006084:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006088:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800608c:	b91b      	cbnz	r3, 8006096 <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 800608e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8006092:	f7ff fea3 	bl	8005ddc <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006096:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006098:	1d21      	adds	r1, r4, #4
 800609a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a0:	f7ff ff52 	bl	8005f48 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80060a4:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80060a6:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	f022 0208 	bic.w	r2, r2, #8
 80060ae:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	4329      	orrs	r1, r5
 80060b4:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80060bc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80060be:	2001      	movs	r0, #1
 80060c0:	e7fc      	b.n	80060bc <HAL_TIM_OnePulse_Init+0x40>
	...

080060c4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c4:	6a03      	ldr	r3, [r0, #32]
 80060c6:	f023 0310 	bic.w	r3, r3, #16
{
 80060ca:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060cc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80060ce:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80060d0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80060d2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80060d4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060da:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80060de:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e6:	688d      	ldr	r5, [r1, #8]
 80060e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060ec:	4d10      	ldr	r5, [pc, #64]	; (8006130 <TIM_OC2_SetConfig+0x6c>)
 80060ee:	42a8      	cmp	r0, r5
 80060f0:	d003      	beq.n	80060fa <TIM_OC2_SetConfig+0x36>
 80060f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060f6:	42a8      	cmp	r0, r5
 80060f8:	d114      	bne.n	8006124 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80060fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006100:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006104:	4d0a      	ldr	r5, [pc, #40]	; (8006130 <TIM_OC2_SetConfig+0x6c>)
 8006106:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8006108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610c:	d003      	beq.n	8006116 <TIM_OC2_SetConfig+0x52>
 800610e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006112:	42a8      	cmp	r0, r5
 8006114:	d106      	bne.n	8006124 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006116:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800611a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800611e:	4335      	orrs	r5, r6
 8006120:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006124:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8006126:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006128:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800612a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800612c:	6203      	str	r3, [r0, #32]
}
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	40010000 	.word	0x40010000

08006134 <HAL_TIM_PWM_ConfigChannel>:
{
 8006134:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006136:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800613a:	4604      	mov	r4, r0
 800613c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800613e:	2b01      	cmp	r3, #1
 8006140:	d010      	beq.n	8006164 <HAL_TIM_PWM_ConfigChannel+0x30>
 8006142:	2301      	movs	r3, #1
  switch (Channel)
 8006144:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8006146:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800614a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800614e:	d043      	beq.n	80061d8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8006150:	d809      	bhi.n	8006166 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006152:	b1fa      	cbz	r2, 8006194 <HAL_TIM_PWM_ConfigChannel+0x60>
 8006154:	2a04      	cmp	r2, #4
 8006156:	d02e      	beq.n	80061b6 <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 8006158:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800615a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800615c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006160:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006164:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8006166:	2a10      	cmp	r2, #16
 8006168:	d047      	beq.n	80061fa <HAL_TIM_PWM_ConfigChannel+0xc6>
 800616a:	2a14      	cmp	r2, #20
 800616c:	d056      	beq.n	800621c <HAL_TIM_PWM_ConfigChannel+0xe8>
 800616e:	2a0c      	cmp	r2, #12
 8006170:	d1f2      	bne.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	f7ff fd8c 	bl	8005c90 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006178:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800617a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006182:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006192:	e030      	b.n	80061f6 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006194:	6820      	ldr	r0, [r4, #0]
 8006196:	f7ff fd0f 	bl	8005bb8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800619a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800619c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	f042 0208 	orr.w	r2, r2, #8
 80061a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a6:	699a      	ldr	r2, [r3, #24]
 80061a8:	f022 0204 	bic.w	r2, r2, #4
 80061ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061b2:	619a      	str	r2, [r3, #24]
      break;
 80061b4:	e7d0      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	f7ff ff84 	bl	80060c4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80061d6:	e7ec      	b.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	f7ff fd21 	bl	8005c20 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	f042 0208 	orr.w	r2, r2, #8
 80061e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	f022 0204 	bic.w	r2, r2, #4
 80061f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061f6:	61da      	str	r2, [r3, #28]
      break;
 80061f8:	e7ae      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	f7ff fd70 	bl	8005ce0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006200:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006202:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006206:	f042 0208 	orr.w	r2, r2, #8
 800620a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800620c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006216:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800621a:	e79d      	b.n	8006158 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	f7ff fd87 	bl	8005d30 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006222:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006224:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800622e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006234:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006238:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800623c:	e7ec      	b.n	8006218 <HAL_TIM_PWM_ConfigChannel+0xe4>

0800623e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800623e:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006240:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8006242:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006244:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006248:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800624c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624e:	6083      	str	r3, [r0, #8]
}
 8006250:	bd10      	pop	{r4, pc}
	...

08006254 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006254:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
{
 800625a:	b570      	push	{r4, r5, r6, lr}
 800625c:	4604      	mov	r4, r0
 800625e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8006262:	d017      	beq.n	8006294 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006268:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800626a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800626c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006270:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006272:	4b41      	ldr	r3, [pc, #260]	; (8006378 <HAL_TIM_ConfigClockSource+0x124>)
 8006274:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006276:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006278:	680b      	ldr	r3, [r1, #0]
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d065      	beq.n	800634a <HAL_TIM_ConfigClockSource+0xf6>
 800627e:	d815      	bhi.n	80062ac <HAL_TIM_ConfigClockSource+0x58>
 8006280:	2b10      	cmp	r3, #16
 8006282:	d00c      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x4a>
 8006284:	d807      	bhi.n	8006296 <HAL_TIM_ConfigClockSource+0x42>
 8006286:	b153      	cbz	r3, 800629e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8006288:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800628a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800628c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006290:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006294:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006296:	2b20      	cmp	r3, #32
 8006298:	d001      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x4a>
 800629a:	2b30      	cmp	r3, #48	; 0x30
 800629c:	d1f4      	bne.n	8006288 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800629e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80062a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a8:	4313      	orrs	r3, r2
 80062aa:	e01a      	b.n	80062e2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 80062ac:	2b60      	cmp	r3, #96	; 0x60
 80062ae:	d034      	beq.n	800631a <HAL_TIM_ConfigClockSource+0xc6>
 80062b0:	d819      	bhi.n	80062e6 <HAL_TIM_ConfigClockSource+0x92>
 80062b2:	2b50      	cmp	r3, #80	; 0x50
 80062b4:	d1e8      	bne.n	8006288 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b6:	684a      	ldr	r2, [r1, #4]
 80062b8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80062ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062bc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062be:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c2:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80062c6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ca:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80062d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80062d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80062d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062de:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80062e2:	6083      	str	r3, [r0, #8]
 80062e4:	e7d0      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80062e6:	2b70      	cmp	r3, #112	; 0x70
 80062e8:	d00c      	beq.n	8006304 <HAL_TIM_ConfigClockSource+0xb0>
 80062ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ee:	d1cb      	bne.n	8006288 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80062f0:	68cb      	ldr	r3, [r1, #12]
 80062f2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80062f6:	f7ff ffa2 	bl	800623e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	6893      	ldr	r3, [r2, #8]
 80062fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006302:	e008      	b.n	8006316 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8006304:	68cb      	ldr	r3, [r1, #12]
 8006306:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800630a:	f7ff ff98 	bl	800623e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006312:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006316:	6093      	str	r3, [r2, #8]
      break;
 8006318:	e7b6      	b.n	8006288 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631a:	684d      	ldr	r5, [r1, #4]
 800631c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800631e:	6a01      	ldr	r1, [r0, #32]
 8006320:	f021 0110 	bic.w	r1, r1, #16
 8006324:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006326:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006328:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800632e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006332:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8006336:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800633a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800633c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800633e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006344:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8006348:	e7cb      	b.n	80062e2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	684a      	ldr	r2, [r1, #4]
 800634c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800634e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006350:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006352:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006356:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800635a:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800635c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006364:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006368:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800636a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800636c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006372:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8006376:	e7b4      	b.n	80062e2 <HAL_TIM_ConfigClockSource+0x8e>
 8006378:	fffe0088 	.word	0xfffe0088

0800637c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800637c:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006380:	6a03      	ldr	r3, [r0, #32]
{
 8006382:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006384:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006386:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006388:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800638a:	ea23 0304 	bic.w	r3, r3, r4
 800638e:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006390:	6a03      	ldr	r3, [r0, #32]
 8006392:	431a      	orrs	r2, r3
 8006394:	6202      	str	r2, [r0, #32]
}
 8006396:	bd10      	pop	{r4, pc}

08006398 <HAL_TIM_OC_Start>:
{
 8006398:	b510      	push	{r4, lr}
 800639a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800639c:	2201      	movs	r2, #1
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	f7ff ffec 	bl	800637c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <HAL_TIM_OC_Start+0x40>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <HAL_TIM_OC_Start+0x1c>
 80063ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d103      	bne.n	80063bc <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80063b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063bc:	6899      	ldr	r1, [r3, #8]
 80063be:	4a07      	ldr	r2, [pc, #28]	; (80063dc <HAL_TIM_OC_Start+0x44>)
 80063c0:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c2:	2a06      	cmp	r2, #6
 80063c4:	d006      	beq.n	80063d4 <HAL_TIM_OC_Start+0x3c>
 80063c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80063ca:	d003      	beq.n	80063d4 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
}
 80063d4:	2000      	movs	r0, #0
 80063d6:	bd10      	pop	{r4, pc}
 80063d8:	40010000 	.word	0x40010000
 80063dc:	00010007 	.word	0x00010007

080063e0 <HAL_TIM_PWM_Start>:
 80063e0:	f7ff bfda 	b.w	8006398 <HAL_TIM_OC_Start>

080063e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	f04f 0302 	mov.w	r3, #2
{
 80063ee:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80063f0:	d03e      	beq.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80063f6:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f8:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063fa:	4d1e      	ldr	r5, [pc, #120]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 80063fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006400:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006402:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006404:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006406:	d002      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8006408:	4e1b      	ldr	r6, [pc, #108]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800640a:	42b3      	cmp	r3, r6
 800640c:	d103      	bne.n	8006416 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800640e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006412:	684e      	ldr	r6, [r1, #4]
 8006414:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006416:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006418:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641c:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800641e:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8006422:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	d019      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642a:	d016      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800642c:	4a13      	ldr	r2, [pc, #76]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8006432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800643a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8006442:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800644a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8006452:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006456:	4293      	cmp	r3, r2
 8006458:	d104      	bne.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800645a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800645c:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006460:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006464:	2301      	movs	r3, #1
 8006466:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646a:	2300      	movs	r3, #0
 800646c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006470:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	40010000 	.word	0x40010000
 8006478:	40010400 	.word	0x40010400
 800647c:	40000400 	.word	0x40000400

08006480 <HAL_TIMEx_CommutCallback>:
 8006480:	4770      	bx	lr

08006482 <HAL_TIMEx_BreakCallback>:
 8006482:	4770      	bx	lr

08006484 <HAL_TIMEx_Break2Callback>:
 8006484:	4770      	bx	lr

08006486 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006486:	6803      	ldr	r3, [r0, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800648e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006498:	2320      	movs	r3, #32
 800649a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	6603      	str	r3, [r0, #96]	; 0x60
}
 80064a0:	4770      	bx	lr
	...

080064a4 <HAL_UART_Transmit_DMA>:
{
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	4604      	mov	r4, r0
 80064a8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80064aa:	6f67      	ldr	r7, [r4, #116]	; 0x74
 80064ac:	2f20      	cmp	r7, #32
 80064ae:	d136      	bne.n	800651e <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 80064b0:	b341      	cbz	r1, 8006504 <HAL_UART_Transmit_DMA+0x60>
 80064b2:	b33a      	cbz	r2, 8006504 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80064b4:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80064b8:	2a01      	cmp	r2, #1
 80064ba:	d030      	beq.n	800651e <HAL_UART_Transmit_DMA+0x7a>
 80064bc:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064be:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c0:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 80064c2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 80064c4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 80064c8:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064cc:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 80064ce:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80064d0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064d4:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 80064d6:	b1b8      	cbz	r0, 8006508 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064d8:	f8df c048 	ldr.w	ip, [pc, #72]	; 8006524 <HAL_UART_Transmit_DMA+0x80>
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064e2:	f8df c044 	ldr.w	ip, [pc, #68]	; 8006528 <HAL_UART_Transmit_DMA+0x84>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064e6:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064e8:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064ec:	f8df c03c 	ldr.w	ip, [pc, #60]	; 800652c <HAL_UART_Transmit_DMA+0x88>
      huart->hdmatx->XferAbortCallback = NULL;
 80064f0:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064f4:	f7fe fc62 	bl	8004dbc <HAL_DMA_Start_IT>
 80064f8:	b130      	cbz	r0, 8006508 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064fa:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 80064fc:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006500:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006502:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 8006504:	2001      	movs	r0, #1
 8006506:	e009      	b.n	800651c <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800650c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800650e:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006510:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8006512:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800651e:	2002      	movs	r0, #2
 8006520:	e7fc      	b.n	800651c <HAL_UART_Transmit_DMA+0x78>
 8006522:	bf00      	nop
 8006524:	080065c1 	.word	0x080065c1
 8006528:	080065f1 	.word	0x080065f1
 800652c:	08006641 	.word	0x08006641

08006530 <HAL_UART_Receive_DMA>:
{
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006532:	6f87      	ldr	r7, [r0, #120]	; 0x78
{
 8006534:	4604      	mov	r4, r0
 8006536:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006538:	2f20      	cmp	r7, #32
 800653a:	d138      	bne.n	80065ae <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800653c:	b321      	cbz	r1, 8006588 <HAL_UART_Receive_DMA+0x58>
 800653e:	b31a      	cbz	r2, 8006588 <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 8006540:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 8006544:	2a01      	cmp	r2, #1
 8006546:	d032      	beq.n	80065ae <HAL_UART_Receive_DMA+0x7e>
 8006548:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654a:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800654c:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800654e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8006552:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    huart->RxXferSize = Size;
 8006556:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800655a:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800655c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800655e:	b1a8      	cbz	r0, 800658c <HAL_UART_Receive_DMA+0x5c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006560:	4a14      	ldr	r2, [pc, #80]	; (80065b4 <HAL_UART_Receive_DMA+0x84>)
 8006562:	f8d4 c000 	ldr.w	ip, [r4]
 8006566:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006568:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <HAL_UART_Receive_DMA+0x88>)
 800656a:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800656c:	4a13      	ldr	r2, [pc, #76]	; (80065bc <HAL_UART_Receive_DMA+0x8c>)
      huart->hdmarx->XferAbortCallback = NULL;
 800656e:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006572:	460a      	mov	r2, r1
 8006574:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 8006578:	f7fe fc20 	bl	8004dbc <HAL_DMA_Start_IT>
 800657c:	b130      	cbz	r0, 800658c <HAL_UART_Receive_DMA+0x5c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800657e:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8006580:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006584:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006586:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 8006588:	2001      	movs	r0, #1
 800658a:	e00f      	b.n	80065ac <HAL_UART_Receive_DMA+0x7c>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658c:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800658e:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006590:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8006592:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800659a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80065ae:	2002      	movs	r0, #2
 80065b0:	e7fc      	b.n	80065ac <HAL_UART_Receive_DMA+0x7c>
 80065b2:	bf00      	nop
 80065b4:	080065fd 	.word	0x080065fd
 80065b8:	08006637 	.word	0x08006637
 80065bc:	08006641 	.word	0x08006641

080065c0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80065c0:	69c2      	ldr	r2, [r0, #28]
 80065c2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 80065c6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80065ca:	d00c      	beq.n	80065e6 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065da:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065e4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fb fdac 	bl	8002144 <HAL_UART_TxCpltCallback>
}
 80065ec:	e7fa      	b.n	80065e4 <UART_DMATransmitCplt+0x24>

080065ee <HAL_UART_TxHalfCpltCallback>:
 80065ee:	4770      	bx	lr

080065f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065f0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80065f4:	f7ff fffb 	bl	80065ee <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f8:	bd08      	pop	{r3, pc}

080065fa <HAL_UART_RxCpltCallback>:
 80065fa:	4770      	bx	lr

080065fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80065fe:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006600:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006606:	d011      	beq.n	800662c <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	6819      	ldr	r1, [r3, #0]
 8006612:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006616:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006618:	6899      	ldr	r1, [r3, #8]
 800661a:	f021 0101 	bic.w	r1, r1, #1
 800661e:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006620:	6899      	ldr	r1, [r3, #8]
 8006622:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006626:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006628:	2320      	movs	r3, #32
 800662a:	6793      	str	r3, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800662c:	4610      	mov	r0, r2
 800662e:	f7ff ffe4 	bl	80065fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006632:	bd08      	pop	{r3, pc}

08006634 <HAL_UART_RxHalfCpltCallback>:
 8006634:	4770      	bx	lr

08006636 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006636:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006638:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800663a:	f7ff fffb 	bl	8006634 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800663e:	bd08      	pop	{r3, pc}

08006640 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006640:	6b81      	ldr	r1, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006642:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006644:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006646:	6f88      	ldr	r0, [r1, #120]	; 0x78
{
 8006648:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800664a:	689c      	ldr	r4, [r3, #8]
 800664c:	0624      	lsls	r4, r4, #24
 800664e:	d50a      	bpl.n	8006666 <UART_DMAError+0x26>
 8006650:	2a21      	cmp	r2, #33	; 0x21
 8006652:	d108      	bne.n	8006666 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006654:	2200      	movs	r2, #0
 8006656:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006660:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006662:	2220      	movs	r2, #32
 8006664:	674a      	str	r2, [r1, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	065b      	lsls	r3, r3, #25
 800666a:	d507      	bpl.n	800667c <UART_DMAError+0x3c>
 800666c:	2822      	cmp	r0, #34	; 0x22
 800666e:	d105      	bne.n	800667c <UART_DMAError+0x3c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006670:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8006672:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8006674:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006678:	f7ff ff05 	bl	8006486 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800667c:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800667e:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006680:	f043 0310 	orr.w	r3, r3, #16
 8006684:	67cb      	str	r3, [r1, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006686:	f7fb fd68 	bl	800215a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800668a:	bd10      	pop	{r4, pc}

0800668c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800668c:	6803      	ldr	r3, [r0, #0]
{
 800668e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006690:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8006692:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006696:	6819      	ldr	r1, [r3, #0]
{
 8006698:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800669a:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800669c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800669e:	d109      	bne.n	80066b4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066a0:	0696      	lsls	r6, r2, #26
 80066a2:	d56e      	bpl.n	8006782 <HAL_UART_IRQHandler+0xf6>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066a4:	068d      	lsls	r5, r1, #26
 80066a6:	d56c      	bpl.n	8006782 <HAL_UART_IRQHandler+0xf6>
      if (huart->RxISR != NULL)
 80066a8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d064      	beq.n	8006778 <HAL_UART_IRQHandler+0xec>
}
 80066ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80066b2:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066b4:	f015 0001 	ands.w	r0, r5, #1
 80066b8:	d102      	bne.n	80066c0 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80066ba:	f411 7f90 	tst.w	r1, #288	; 0x120
 80066be:	d060      	beq.n	8006782 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066c0:	07d6      	lsls	r6, r2, #31
 80066c2:	d507      	bpl.n	80066d4 <HAL_UART_IRQHandler+0x48>
 80066c4:	05cd      	lsls	r5, r1, #23
 80066c6:	d505      	bpl.n	80066d4 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066c8:	2501      	movs	r5, #1
 80066ca:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066cc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80066ce:	f045 0501 	orr.w	r5, r5, #1
 80066d2:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d4:	0796      	lsls	r6, r2, #30
 80066d6:	d506      	bpl.n	80066e6 <HAL_UART_IRQHandler+0x5a>
 80066d8:	b128      	cbz	r0, 80066e6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066da:	2502      	movs	r5, #2
 80066dc:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066de:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80066e0:	f045 0504 	orr.w	r5, r5, #4
 80066e4:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066e6:	0755      	lsls	r5, r2, #29
 80066e8:	d506      	bpl.n	80066f8 <HAL_UART_IRQHandler+0x6c>
 80066ea:	b128      	cbz	r0, 80066f8 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066ec:	2504      	movs	r5, #4
 80066ee:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066f0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80066f2:	f045 0502 	orr.w	r5, r5, #2
 80066f6:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066f8:	0716      	lsls	r6, r2, #28
 80066fa:	d508      	bpl.n	800670e <HAL_UART_IRQHandler+0x82>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066fc:	068d      	lsls	r5, r1, #26
 80066fe:	d400      	bmi.n	8006702 <HAL_UART_IRQHandler+0x76>
 8006700:	b128      	cbz	r0, 800670e <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006702:	2008      	movs	r0, #8
 8006704:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006706:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006708:	f040 0008 	orr.w	r0, r0, #8
 800670c:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800670e:	0510      	lsls	r0, r2, #20
 8006710:	d508      	bpl.n	8006724 <HAL_UART_IRQHandler+0x98>
 8006712:	014e      	lsls	r6, r1, #5
 8006714:	d506      	bpl.n	8006724 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006716:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800671a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800671c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800671e:	f043 0320 	orr.w	r3, r3, #32
 8006722:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006724:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006726:	b33b      	cbz	r3, 8006778 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006728:	0695      	lsls	r5, r2, #26
 800672a:	d505      	bpl.n	8006738 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800672c:	0688      	lsls	r0, r1, #26
 800672e:	d503      	bpl.n	8006738 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 8006730:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006732:	b10b      	cbz	r3, 8006738 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 8006734:	4620      	mov	r0, r4
 8006736:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006738:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 800673a:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800673c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800673e:	6892      	ldr	r2, [r2, #8]
 8006740:	0651      	lsls	r1, r2, #25
 8006742:	d402      	bmi.n	800674a <HAL_UART_IRQHandler+0xbe>
 8006744:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8006748:	d017      	beq.n	800677a <HAL_UART_IRQHandler+0xee>
        UART_EndRxTransfer(huart);
 800674a:	f7ff fe9c 	bl	8006486 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	0652      	lsls	r2, r2, #25
 8006754:	d50d      	bpl.n	8006772 <HAL_UART_IRQHandler+0xe6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006756:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006758:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800675e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006760:	b138      	cbz	r0, 8006772 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006762:	4b14      	ldr	r3, [pc, #80]	; (80067b4 <HAL_UART_IRQHandler+0x128>)
 8006764:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006766:	f7fe fb66 	bl	8004e36 <HAL_DMA_Abort_IT>
 800676a:	b128      	cbz	r0, 8006778 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800676c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800676e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006770:	e79d      	b.n	80066ae <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 8006772:	4620      	mov	r0, r4
 8006774:	f7fb fcf1 	bl	800215a <HAL_UART_ErrorCallback>
}
 8006778:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800677a:	f7fb fcee 	bl	800215a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8006780:	e7fa      	b.n	8006778 <HAL_UART_IRQHandler+0xec>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006782:	0616      	lsls	r6, r2, #24
 8006784:	d506      	bpl.n	8006794 <HAL_UART_IRQHandler+0x108>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006786:	060d      	lsls	r5, r1, #24
 8006788:	d504      	bpl.n	8006794 <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 800678a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f3      	beq.n	8006778 <HAL_UART_IRQHandler+0xec>
      huart->TxISR(huart);
 8006790:	4620      	mov	r0, r4
 8006792:	e78c      	b.n	80066ae <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006794:	0650      	lsls	r0, r2, #25
 8006796:	d5ef      	bpl.n	8006778 <HAL_UART_IRQHandler+0xec>
 8006798:	064a      	lsls	r2, r1, #25
 800679a:	d5ed      	bpl.n	8006778 <HAL_UART_IRQHandler+0xec>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800679c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800679e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80067a6:	2320      	movs	r3, #32
 80067a8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80067ae:	f7fb fcc9 	bl	8002144 <HAL_UART_TxCpltCallback>
 80067b2:	e7e1      	b.n	8006778 <HAL_UART_IRQHandler+0xec>
 80067b4:	080067b9 	.word	0x080067b9

080067b8 <UART_DMAAbortOnError>:
{
 80067b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067c2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80067c6:	f7fb fcc8 	bl	800215a <HAL_UART_ErrorCallback>
}
 80067ca:	bd08      	pop	{r3, pc}

080067cc <UART_SetConfig>:
{
 80067cc:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ce:	69c2      	ldr	r2, [r0, #28]
{
 80067d0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d2:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067d4:	6881      	ldr	r1, [r0, #8]
 80067d6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067d8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067da:	4301      	orrs	r1, r0
 80067dc:	6960      	ldr	r0, [r4, #20]
 80067de:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067e0:	489a      	ldr	r0, [pc, #616]	; (8006a4c <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067e2:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067e4:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 80067e6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067e8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ea:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ec:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80067f4:	4301      	orrs	r1, r0
 80067f6:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067f8:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067fa:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80067fc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067fe:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8006802:	4301      	orrs	r1, r0
 8006804:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006806:	4992      	ldr	r1, [pc, #584]	; (8006a50 <UART_SetConfig+0x284>)
 8006808:	428b      	cmp	r3, r1
 800680a:	d118      	bne.n	800683e <UART_SetConfig+0x72>
 800680c:	4b91      	ldr	r3, [pc, #580]	; (8006a54 <UART_SetConfig+0x288>)
 800680e:	4992      	ldr	r1, [pc, #584]	; (8006a58 <UART_SetConfig+0x28c>)
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800681a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800681e:	f040 80bd 	bne.w	800699c <UART_SetConfig+0x1d0>
    switch (clocksource)
 8006822:	2b08      	cmp	r3, #8
 8006824:	f200 80af 	bhi.w	8006986 <UART_SetConfig+0x1ba>
 8006828:	e8df f013 	tbh	[pc, r3, lsl #1]
 800682c:	00aa0095 	.word	0x00aa0095
 8006830:	00ad00f9 	.word	0x00ad00f9
 8006834:	00ad0105 	.word	0x00ad0105
 8006838:	00ad00ad 	.word	0x00ad00ad
 800683c:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800683e:	4987      	ldr	r1, [pc, #540]	; (8006a5c <UART_SetConfig+0x290>)
 8006840:	428b      	cmp	r3, r1
 8006842:	d106      	bne.n	8006852 <UART_SetConfig+0x86>
 8006844:	4b83      	ldr	r3, [pc, #524]	; (8006a54 <UART_SetConfig+0x288>)
 8006846:	4986      	ldr	r1, [pc, #536]	; (8006a60 <UART_SetConfig+0x294>)
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	e7e2      	b.n	8006818 <UART_SetConfig+0x4c>
 8006852:	4984      	ldr	r1, [pc, #528]	; (8006a64 <UART_SetConfig+0x298>)
 8006854:	428b      	cmp	r3, r1
 8006856:	d118      	bne.n	800688a <UART_SetConfig+0xbe>
 8006858:	4b7e      	ldr	r3, [pc, #504]	; (8006a54 <UART_SetConfig+0x288>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006862:	2b10      	cmp	r3, #16
 8006864:	f000 80e4 	beq.w	8006a30 <UART_SetConfig+0x264>
 8006868:	d802      	bhi.n	8006870 <UART_SetConfig+0xa4>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0d5      	beq.n	800681a <UART_SetConfig+0x4e>
 800686e:	e005      	b.n	800687c <UART_SetConfig+0xb0>
 8006870:	2b20      	cmp	r3, #32
 8006872:	f000 80d1 	beq.w	8006a18 <UART_SetConfig+0x24c>
 8006876:	2b30      	cmp	r3, #48	; 0x30
 8006878:	f000 80e0 	beq.w	8006a3c <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800687c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006880:	f000 8081 	beq.w	8006986 <UART_SetConfig+0x1ba>
        ret = HAL_ERROR;
 8006884:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006886:	2300      	movs	r3, #0
 8006888:	e0a9      	b.n	80069de <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800688a:	4977      	ldr	r1, [pc, #476]	; (8006a68 <UART_SetConfig+0x29c>)
 800688c:	428b      	cmp	r3, r1
 800688e:	d10d      	bne.n	80068ac <UART_SetConfig+0xe0>
 8006890:	4b70      	ldr	r3, [pc, #448]	; (8006a54 <UART_SetConfig+0x288>)
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	f000 80c8 	beq.w	8006a30 <UART_SetConfig+0x264>
 80068a0:	d9e3      	bls.n	800686a <UART_SetConfig+0x9e>
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	f000 80b8 	beq.w	8006a18 <UART_SetConfig+0x24c>
 80068a8:	2bc0      	cmp	r3, #192	; 0xc0
 80068aa:	e7e5      	b.n	8006878 <UART_SetConfig+0xac>
 80068ac:	496f      	ldr	r1, [pc, #444]	; (8006a6c <UART_SetConfig+0x2a0>)
 80068ae:	428b      	cmp	r3, r1
 80068b0:	d110      	bne.n	80068d4 <UART_SetConfig+0x108>
 80068b2:	4b68      	ldr	r3, [pc, #416]	; (8006a54 <UART_SetConfig+0x288>)
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c0:	f000 80b6 	beq.w	8006a30 <UART_SetConfig+0x264>
 80068c4:	d9d1      	bls.n	800686a <UART_SetConfig+0x9e>
 80068c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ca:	f000 80a5 	beq.w	8006a18 <UART_SetConfig+0x24c>
 80068ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d2:	e7d1      	b.n	8006878 <UART_SetConfig+0xac>
 80068d4:	4966      	ldr	r1, [pc, #408]	; (8006a70 <UART_SetConfig+0x2a4>)
 80068d6:	428b      	cmp	r3, r1
 80068d8:	d114      	bne.n	8006904 <UART_SetConfig+0x138>
 80068da:	4b5e      	ldr	r3, [pc, #376]	; (8006a54 <UART_SetConfig+0x288>)
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	f000 80a2 	beq.w	8006a30 <UART_SetConfig+0x264>
 80068ec:	d803      	bhi.n	80068f6 <UART_SetConfig+0x12a>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1c4      	bne.n	800687c <UART_SetConfig+0xb0>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e791      	b.n	800681a <UART_SetConfig+0x4e>
 80068f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068fa:	f000 808d 	beq.w	8006a18 <UART_SetConfig+0x24c>
 80068fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006902:	e7b9      	b.n	8006878 <UART_SetConfig+0xac>
 8006904:	495b      	ldr	r1, [pc, #364]	; (8006a74 <UART_SetConfig+0x2a8>)
 8006906:	428b      	cmp	r3, r1
 8006908:	d113      	bne.n	8006932 <UART_SetConfig+0x166>
 800690a:	4b52      	ldr	r3, [pc, #328]	; (8006a54 <UART_SetConfig+0x288>)
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006910:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006918:	f000 808a 	beq.w	8006a30 <UART_SetConfig+0x264>
 800691c:	d803      	bhi.n	8006926 <UART_SetConfig+0x15a>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1ac      	bne.n	800687c <UART_SetConfig+0xb0>
 8006922:	2300      	movs	r3, #0
 8006924:	e779      	b.n	800681a <UART_SetConfig+0x4e>
 8006926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692a:	d075      	beq.n	8006a18 <UART_SetConfig+0x24c>
 800692c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006930:	e7a2      	b.n	8006878 <UART_SetConfig+0xac>
 8006932:	4951      	ldr	r1, [pc, #324]	; (8006a78 <UART_SetConfig+0x2ac>)
 8006934:	428b      	cmp	r3, r1
 8006936:	d1a1      	bne.n	800687c <UART_SetConfig+0xb0>
 8006938:	4b46      	ldr	r3, [pc, #280]	; (8006a54 <UART_SetConfig+0x288>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006946:	d073      	beq.n	8006a30 <UART_SetConfig+0x264>
 8006948:	d98f      	bls.n	800686a <UART_SetConfig+0x9e>
 800694a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694e:	d063      	beq.n	8006a18 <UART_SetConfig+0x24c>
 8006950:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006954:	e790      	b.n	8006878 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006956:	f7fe fee1 	bl	800571c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800695a:	6861      	ldr	r1, [r4, #4]
 800695c:	084a      	lsrs	r2, r1, #1
 800695e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8006962:	fbb3 f3f1 	udiv	r3, r3, r1
 8006966:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006968:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800696a:	f1a3 0110 	sub.w	r1, r3, #16
 800696e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006972:	4291      	cmp	r1, r2
 8006974:	d90a      	bls.n	800698c <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 8006976:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006978:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800697a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800697e:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006980:	f7fe fedc 	bl	800573c <HAL_RCC_GetPCLK2Freq>
 8006984:	e7e9      	b.n	800695a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8006986:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006988:	2300      	movs	r3, #0
 800698a:	e7ee      	b.n	800696a <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800698c:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006990:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8006994:	6821      	ldr	r1, [r4, #0]
 8006996:	4313      	orrs	r3, r2
 8006998:	60cb      	str	r3, [r1, #12]
 800699a:	e7ed      	b.n	8006978 <UART_SetConfig+0x1ac>
    switch (clocksource)
 800699c:	2b08      	cmp	r3, #8
 800699e:	f63f af71 	bhi.w	8006884 <UART_SetConfig+0xb8>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <UART_SetConfig+0x1dc>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069cd 	.word	0x080069cd
 80069ac:	080069f1 	.word	0x080069f1
 80069b0:	080069f7 	.word	0x080069f7
 80069b4:	08006885 	.word	0x08006885
 80069b8:	08006a09 	.word	0x08006a09
 80069bc:	08006885 	.word	0x08006885
 80069c0:	08006885 	.word	0x08006885
 80069c4:	08006885 	.word	0x08006885
 80069c8:	08006a0f 	.word	0x08006a0f
        pclk = HAL_RCC_GetPCLK1Freq();
 80069cc:	f7fe fea6 	bl	800571c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069d0:	6862      	ldr	r2, [r4, #4]
 80069d2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80069d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069da:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80069dc:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069de:	f1a3 0110 	sub.w	r1, r3, #16
 80069e2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80069e6:	4291      	cmp	r1, r2
 80069e8:	d8c5      	bhi.n	8006976 <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	60d3      	str	r3, [r2, #12]
 80069ee:	e7c3      	b.n	8006978 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 80069f0:	f7fe fea4 	bl	800573c <HAL_RCC_GetPCLK2Freq>
 80069f4:	e7ec      	b.n	80069d0 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80069f6:	6860      	ldr	r0, [r4, #4]
 80069f8:	0843      	lsrs	r3, r0, #1
 80069fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80069fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a02:	fbb3 f3f0 	udiv	r3, r3, r0
 8006a06:	e7e8      	b.n	80069da <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a08:	f7fe fdbc 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 8006a0c:	e7e0      	b.n	80069d0 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a0e:	6860      	ldr	r0, [r4, #4]
 8006a10:	0843      	lsrs	r3, r0, #1
 8006a12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a16:	e7f4      	b.n	8006a02 <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a1c:	d1eb      	bne.n	80069f6 <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006a1e:	6860      	ldr	r0, [r4, #4]
 8006a20:	0843      	lsrs	r3, r0, #1
 8006a22:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006a26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a2a:	fbb3 f3f0 	udiv	r3, r3, r0
 8006a2e:	e79a      	b.n	8006966 <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a30:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a34:	d1e8      	bne.n	8006a08 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fe fda5 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 8006a3a:	e78e      	b.n	800695a <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a40:	d1e5      	bne.n	8006a0e <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a42:	6860      	ldr	r0, [r4, #4]
 8006a44:	0843      	lsrs	r3, r0, #1
 8006a46:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006a4a:	e7ee      	b.n	8006a2a <UART_SetConfig+0x25e>
 8006a4c:	efff69f3 	.word	0xefff69f3
 8006a50:	40011000 	.word	0x40011000
 8006a54:	40023800 	.word	0x40023800
 8006a58:	0800dfb0 	.word	0x0800dfb0
 8006a5c:	40004400 	.word	0x40004400
 8006a60:	0800dfb4 	.word	0x0800dfb4
 8006a64:	40004800 	.word	0x40004800
 8006a68:	40004c00 	.word	0x40004c00
 8006a6c:	40005000 	.word	0x40005000
 8006a70:	40011400 	.word	0x40011400
 8006a74:	40007800 	.word	0x40007800
 8006a78:	40007c00 	.word	0x40007c00

08006a7c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006a7e:	07da      	lsls	r2, r3, #31
{
 8006a80:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a82:	d506      	bpl.n	8006a92 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a84:	6801      	ldr	r1, [r0, #0]
 8006a86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006a88:	684a      	ldr	r2, [r1, #4]
 8006a8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006a8e:	4322      	orrs	r2, r4
 8006a90:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a92:	079c      	lsls	r4, r3, #30
 8006a94:	d506      	bpl.n	8006aa4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a96:	6801      	ldr	r1, [r0, #0]
 8006a98:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006a9a:	684a      	ldr	r2, [r1, #4]
 8006a9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006aa0:	4322      	orrs	r2, r4
 8006aa2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006aa4:	0759      	lsls	r1, r3, #29
 8006aa6:	d506      	bpl.n	8006ab6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aa8:	6801      	ldr	r1, [r0, #0]
 8006aaa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006aac:	684a      	ldr	r2, [r1, #4]
 8006aae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ab2:	4322      	orrs	r2, r4
 8006ab4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ab6:	071a      	lsls	r2, r3, #28
 8006ab8:	d506      	bpl.n	8006ac8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006aba:	6801      	ldr	r1, [r0, #0]
 8006abc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006abe:	684a      	ldr	r2, [r1, #4]
 8006ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ac4:	4322      	orrs	r2, r4
 8006ac6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ac8:	06dc      	lsls	r4, r3, #27
 8006aca:	d506      	bpl.n	8006ada <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006acc:	6801      	ldr	r1, [r0, #0]
 8006ace:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006ad0:	688a      	ldr	r2, [r1, #8]
 8006ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ad6:	4322      	orrs	r2, r4
 8006ad8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ada:	0699      	lsls	r1, r3, #26
 8006adc:	d506      	bpl.n	8006aec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ade:	6801      	ldr	r1, [r0, #0]
 8006ae0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006ae2:	688a      	ldr	r2, [r1, #8]
 8006ae4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae8:	4322      	orrs	r2, r4
 8006aea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aec:	065a      	lsls	r2, r3, #25
 8006aee:	d510      	bpl.n	8006b12 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006af0:	6801      	ldr	r1, [r0, #0]
 8006af2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006af4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006af6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006afa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006afe:	ea42 0204 	orr.w	r2, r2, r4
 8006b02:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b04:	d105      	bne.n	8006b12 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b06:	684a      	ldr	r2, [r1, #4]
 8006b08:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006b0a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006b0e:	4322      	orrs	r2, r4
 8006b10:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	d506      	bpl.n	8006b24 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b16:	6802      	ldr	r2, [r0, #0]
 8006b18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006b1a:	6853      	ldr	r3, [r2, #4]
 8006b1c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006b20:	430b      	orrs	r3, r1
 8006b22:	6053      	str	r3, [r2, #4]
}
 8006b24:	bd10      	pop	{r4, pc}

08006b26 <UART_WaitOnFlagUntilTimeout>:
{
 8006b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2a:	9d06      	ldr	r5, [sp, #24]
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460f      	mov	r7, r1
 8006b30:	4616      	mov	r6, r2
 8006b32:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b34:	6821      	ldr	r1, [r4, #0]
 8006b36:	69ca      	ldr	r2, [r1, #28]
 8006b38:	ea37 0302 	bics.w	r3, r7, r2
 8006b3c:	bf0c      	ite	eq
 8006b3e:	2201      	moveq	r2, #1
 8006b40:	2200      	movne	r2, #0
 8006b42:	42b2      	cmp	r2, r6
 8006b44:	d001      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006b46:	2000      	movs	r0, #0
 8006b48:	e018      	b.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8006b4a:	1c68      	adds	r0, r5, #1
 8006b4c:	d0f3      	beq.n	8006b36 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fd fd6d 	bl	800462c <HAL_GetTick>
 8006b52:	eba0 0008 	sub.w	r0, r0, r8
 8006b56:	42a8      	cmp	r0, r5
 8006b58:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b5a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5c:	d800      	bhi.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x3a>
 8006b5e:	b97d      	cbnz	r5, 8006b80 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b64:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	6883      	ldr	r3, [r0, #8]
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006b6e:	2320      	movs	r3, #32
 8006b70:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b72:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8006b74:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8006b76:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006b78:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8006b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b80:	075a      	lsls	r2, r3, #29
 8006b82:	d5d7      	bpl.n	8006b34 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b84:	69c3      	ldr	r3, [r0, #28]
 8006b86:	051b      	lsls	r3, r3, #20
 8006b88:	d5d4      	bpl.n	8006b34 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b8e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b90:	6803      	ldr	r3, [r0, #0]
 8006b92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b96:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b98:	6883      	ldr	r3, [r0, #8]
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ba6:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006ba8:	e7e4      	b.n	8006b74 <UART_WaitOnFlagUntilTimeout+0x4e>

08006baa <UART_CheckIdleState>:
{
 8006baa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	2500      	movs	r5, #0
{
 8006bae:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006bb2:	f7fd fd3b 	bl	800462c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bb6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006bb8:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	0712      	lsls	r2, r2, #28
 8006bbe:	d407      	bmi.n	8006bd0 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006bc2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8006bc6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8006bca:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006bcc:	b003      	add	sp, #12
 8006bce:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006bd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bd8:	4620      	mov	r0, r4
 8006bda:	9200      	str	r2, [sp, #0]
 8006bdc:	462a      	mov	r2, r5
 8006bde:	f7ff ffa2 	bl	8006b26 <UART_WaitOnFlagUntilTimeout>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0ec      	beq.n	8006bc0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8006be6:	2003      	movs	r0, #3
 8006be8:	e7f0      	b.n	8006bcc <UART_CheckIdleState+0x22>

08006bea <HAL_UART_Init>:
{
 8006bea:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006bec:	4604      	mov	r4, r0
 8006bee:	b340      	cbz	r0, 8006c42 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006bf0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006bf2:	b91b      	cbnz	r3, 8006bfc <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8006bf4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8006bf8:	f7fb fff4 	bl	8002be4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006bfc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006bfe:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c00:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006c02:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8006c04:	6813      	ldr	r3, [r2, #0]
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c0c:	f7ff fdde 	bl	80067cc <UART_SetConfig>
 8006c10:	2801      	cmp	r0, #1
 8006c12:	d016      	beq.n	8006c42 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c16:	b113      	cbz	r3, 8006c1e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f7ff ff2f 	bl	8006a7c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c1e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006c20:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c30:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	f042 0201 	orr.w	r2, r2, #1
}
 8006c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006c3c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006c3e:	f7ff bfb4 	b.w	8006baa <UART_CheckIdleState>
}
 8006c42:	2001      	movs	r0, #1
 8006c44:	bd10      	pop	{r4, pc}
	...

08006c48 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c48:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c4c:	b113      	cbz	r3, 8006c54 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8006c4e:	f06f 0005 	mvn.w	r0, #5
 8006c52:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c54:	f3ef 8210 	mrs	r2, PRIMASK
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8006c5a:	b912      	cbnz	r2, 8006c62 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c5c:	f3ef 8211 	mrs	r2, BASEPRI
 8006c60:	b112      	cbz	r2, 8006c68 <osKernelInitialize+0x20>
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	2a02      	cmp	r2, #2
 8006c66:	d0f2      	beq.n	8006c4e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	b910      	cbnz	r0, 8006c72 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8006c72:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006c76:	4770      	bx	lr
 8006c78:	20002f74 	.word	0x20002f74

08006c7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c7c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c82:	b113      	cbz	r3, 8006c8a <osKernelStart+0xe>
    stat = osErrorISR;
 8006c84:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8006c88:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c8a:	f3ef 8210 	mrs	r2, PRIMASK
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8006c90:	b912      	cbnz	r2, 8006c98 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c92:	f3ef 8211 	mrs	r2, BASEPRI
 8006c96:	b112      	cbz	r2, 8006c9e <osKernelStart+0x22>
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	2a02      	cmp	r2, #2
 8006c9c:	d0f2      	beq.n	8006c84 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	2a01      	cmp	r2, #1
 8006ca2:	d105      	bne.n	8006cb0 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006ca8:	f000 ffc6 	bl	8007c38 <vTaskStartScheduler>
      stat = osOK;
 8006cac:	2000      	movs	r0, #0
 8006cae:	e7eb      	b.n	8006c88 <osKernelStart+0xc>
      stat = osError;
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006cb4:	e7e8      	b.n	8006c88 <osKernelStart+0xc>
 8006cb6:	bf00      	nop
 8006cb8:	20002f74 	.word	0x20002f74

08006cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cc2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cc4:	460b      	mov	r3, r1
  hTask = NULL;
 8006cc6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006ccc:	bb32      	cbnz	r2, 8006d1c <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cce:	f3ef 8210 	mrs	r2, PRIMASK
 8006cd2:	b912      	cbnz	r2, 8006cda <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cd4:	f3ef 8211 	mrs	r2, BASEPRI
 8006cd8:	b11a      	cbz	r2, 8006ce2 <osThreadNew+0x26>
 8006cda:	4a23      	ldr	r2, [pc, #140]	; (8006d68 <osThreadNew+0xac>)
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	2a02      	cmp	r2, #2
 8006ce0:	d01c      	beq.n	8006d1c <osThreadNew+0x60>
 8006ce2:	b1d8      	cbz	r0, 8006d1c <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006ce4:	2c00      	cmp	r4, #0
 8006ce6:	d037      	beq.n	8006d58 <osThreadNew+0x9c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006ce8:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 8006cea:	6821      	ldr	r1, [r4, #0]
 8006cec:	2d00      	cmp	r5, #0
 8006cee:	bf08      	it	eq
 8006cf0:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cf2:	1e6a      	subs	r2, r5, #1
 8006cf4:	462f      	mov	r7, r5
 8006cf6:	2a37      	cmp	r2, #55	; 0x37
 8006cf8:	d833      	bhi.n	8006d62 <osThreadNew+0xa6>
 8006cfa:	6862      	ldr	r2, [r4, #4]
 8006cfc:	07d2      	lsls	r2, r2, #31
 8006cfe:	d430      	bmi.n	8006d62 <osThreadNew+0xa6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006d00:	6966      	ldr	r6, [r4, #20]
 8006d02:	b176      	cbz	r6, 8006d22 <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d04:	08b2      	lsrs	r2, r6, #2
 8006d06:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d0a:	f1bc 0f00 	cmp.w	ip, #0
 8006d0e:	d00b      	beq.n	8006d28 <osThreadNew+0x6c>
 8006d10:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 8006d14:	d902      	bls.n	8006d1c <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d16:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d18:	b104      	cbz	r4, 8006d1c <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d1a:	b9b6      	cbnz	r6, 8006d4a <osThreadNew+0x8e>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d1c:	9805      	ldr	r0, [sp, #20]
}
 8006d1e:	b007      	add	sp, #28
 8006d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d26:	e7ee      	b.n	8006d06 <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d28:	f1be 0f00 	cmp.w	lr, #0
 8006d2c:	d1f6      	bne.n	8006d1c <osThreadNew+0x60>
      if (mem == 0) {
 8006d2e:	6924      	ldr	r4, [r4, #16]
 8006d30:	2c00      	cmp	r4, #0
 8006d32:	d1f3      	bne.n	8006d1c <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d34:	ac05      	add	r4, sp, #20
 8006d36:	b292      	uxth	r2, r2
 8006d38:	e9cd 7400 	strd	r7, r4, [sp]
 8006d3c:	f000 ff4e 	bl	8007bdc <xTaskCreate>
 8006d40:	2801      	cmp	r0, #1
          hTask = NULL;
 8006d42:	bf1c      	itt	ne
 8006d44:	2300      	movne	r3, #0
 8006d46:	9305      	strne	r3, [sp, #20]
 8006d48:	e7e8      	b.n	8006d1c <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d4a:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8006d4e:	9500      	str	r5, [sp, #0]
 8006d50:	f000 ff06 	bl	8007b60 <xTaskCreateStatic>
 8006d54:	9005      	str	r0, [sp, #20]
 8006d56:	e7e1      	b.n	8006d1c <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 8006d58:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8006d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    name = NULL;
 8006d5e:	4621      	mov	r1, r4
 8006d60:	e7e8      	b.n	8006d34 <osThreadNew+0x78>
        return (NULL);
 8006d62:	2000      	movs	r0, #0
 8006d64:	e7db      	b.n	8006d1e <osThreadNew+0x62>
 8006d66:	bf00      	nop
 8006d68:	20002f74 	.word	0x20002f74

08006d6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006d6c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d72:	b113      	cbz	r3, 8006d7a <osDelay+0xe>
    stat = osErrorISR;
 8006d74:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006d78:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d7a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006d7e:	b913      	cbnz	r3, 8006d86 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d80:	f3ef 8311 	mrs	r3, BASEPRI
 8006d84:	b11b      	cbz	r3, 8006d8e <osDelay+0x22>
 8006d86:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <osDelay+0x30>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d0f2      	beq.n	8006d74 <osDelay+0x8>
    if (ticks != 0U) {
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0f2      	beq.n	8006d78 <osDelay+0xc>
      vTaskDelay(ticks);
 8006d92:	f001 f8af 	bl	8007ef4 <vTaskDelay>
    stat = osOK;
 8006d96:	2000      	movs	r0, #0
 8006d98:	e7ee      	b.n	8006d78 <osDelay+0xc>
 8006d9a:	bf00      	nop
 8006d9c:	20002f74 	.word	0x20002f74

08006da0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006da8:	b113      	cbz	r3, 8006db0 <osMutexNew+0x10>
  hMutex = NULL;
 8006daa:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006dac:	4628      	mov	r0, r5
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db0:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8006db4:	b912      	cbnz	r2, 8006dbc <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006db6:	f3ef 8211 	mrs	r2, BASEPRI
 8006dba:	b11a      	cbz	r2, 8006dc4 <osMutexNew+0x24>
 8006dbc:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <osMutexNew+0x80>)
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	2a02      	cmp	r2, #2
 8006dc2:	d0f2      	beq.n	8006daa <osMutexNew+0xa>
    if (attr != NULL) {
 8006dc4:	b104      	cbz	r4, 8006dc8 <osMutexNew+0x28>
      type = attr->attr_bits;
 8006dc6:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006dc8:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 8006dcc:	071b      	lsls	r3, r3, #28
 8006dce:	d4ec      	bmi.n	8006daa <osMutexNew+0xa>
      if (attr != NULL) {
 8006dd0:	b1b4      	cbz	r4, 8006e00 <osMutexNew+0x60>
 8006dd2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006dd6:	b189      	cbz	r1, 8006dfc <osMutexNew+0x5c>
 8006dd8:	2b4f      	cmp	r3, #79	; 0x4f
 8006dda:	d9e6      	bls.n	8006daa <osMutexNew+0xa>
        if (rmtx != 0U) {
 8006ddc:	b1de      	cbz	r6, 8006e16 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006dde:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006de0:	f000 fade 	bl	80073a0 <xQueueCreateMutexStatic>
 8006de4:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0df      	beq.n	8006daa <osMutexNew+0xa>
          name = attr->name;
 8006dea:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 fd1b 	bl	8007828 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	d0da      	beq.n	8006dac <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006df6:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 8006dfa:	e7d7      	b.n	8006dac <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1d4      	bne.n	8006daa <osMutexNew+0xa>
          if (rmtx != 0U) {
 8006e00:	b15e      	cbz	r6, 8006e1a <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006e02:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8006e04:	f000 fb01 	bl	800740a <xQueueCreateMutex>
 8006e08:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d0cd      	beq.n	8006daa <osMutexNew+0xa>
        if (attr != NULL) {
 8006e0e:	2c00      	cmp	r4, #0
 8006e10:	d1eb      	bne.n	8006dea <osMutexNew+0x4a>
          name = NULL;
 8006e12:	4621      	mov	r1, r4
 8006e14:	e7ea      	b.n	8006dec <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006e16:	2001      	movs	r0, #1
 8006e18:	e7e2      	b.n	8006de0 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	e7f2      	b.n	8006e04 <osMutexNew+0x64>
 8006e1e:	bf00      	nop
 8006e20:	20002f74 	.word	0x20002f74

08006e24 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006e24:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e26:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006e2a:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8006e2c:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006e30:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e32:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006e36:	b112      	cbz	r2, 8006e3e <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8006e38:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006e3c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006e42:	b912      	cbnz	r2, 8006e4a <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e44:	f3ef 8211 	mrs	r2, BASEPRI
 8006e48:	b11a      	cbz	r2, 8006e52 <osMutexAcquire+0x2e>
 8006e4a:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <osMutexAcquire+0x5c>)
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	2a02      	cmp	r2, #2
 8006e50:	d0f2      	beq.n	8006e38 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8006e52:	b188      	cbz	r0, 8006e78 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006e54:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006e56:	b163      	cbz	r3, 8006e72 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006e58:	f000 fcc2 	bl	80077e0 <xQueueTakeMutexRecursive>
 8006e5c:	2801      	cmp	r0, #1
 8006e5e:	d101      	bne.n	8006e64 <osMutexAcquire+0x40>
  stat = osOK;
 8006e60:	2000      	movs	r0, #0
 8006e62:	e7eb      	b.n	8006e3c <osMutexAcquire+0x18>
          stat = osErrorResource;
 8006e64:	2c00      	cmp	r4, #0
 8006e66:	bf14      	ite	ne
 8006e68:	f06f 0001 	mvnne.w	r0, #1
 8006e6c:	f06f 0002 	mvneq.w	r0, #2
 8006e70:	e7e4      	b.n	8006e3c <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006e72:	f000 fbeb 	bl	800764c <xQueueSemaphoreTake>
 8006e76:	e7f1      	b.n	8006e5c <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8006e78:	f06f 0003 	mvn.w	r0, #3
 8006e7c:	e7de      	b.n	8006e3c <osMutexAcquire+0x18>
 8006e7e:	bf00      	nop
 8006e80:	20002f74 	.word	0x20002f74

08006e84 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006e84:	b508      	push	{r3, lr}
 8006e86:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e88:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006e8c:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e90:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006e94:	b112      	cbz	r2, 8006e9c <osMutexRelease+0x18>
    stat = osErrorISR;
 8006e96:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006e9a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006ea0:	b912      	cbnz	r2, 8006ea8 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ea6:	b11a      	cbz	r2, 8006eb0 <osMutexRelease+0x2c>
 8006ea8:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <osMutexRelease+0x50>)
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	2a02      	cmp	r2, #2
 8006eae:	d0f2      	beq.n	8006e96 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8006eb0:	b168      	cbz	r0, 8006ece <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8006eb2:	b13b      	cbz	r3, 8006ec4 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006eb4:	f000 fa89 	bl	80073ca <xQueueGiveMutexRecursive>
 8006eb8:	2801      	cmp	r0, #1
  stat = osOK;
 8006eba:	bf0c      	ite	eq
 8006ebc:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8006ebe:	f06f 0002 	mvnne.w	r0, #2
 8006ec2:	e7ea      	b.n	8006e9a <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f000 f9b0 	bl	800722c <xQueueGenericSend>
 8006ecc:	e7f4      	b.n	8006eb8 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8006ece:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006ed2:	e7e2      	b.n	8006e9a <osMutexRelease+0x16>
 8006ed4:	20002f74 	.word	0x20002f74

08006ed8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ed8:	4b03      	ldr	r3, [pc, #12]	; (8006ee8 <vApplicationGetIdleTaskMemory+0x10>)
 8006eda:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006edc:	4b03      	ldr	r3, [pc, #12]	; (8006eec <vApplicationGetIdleTaskMemory+0x14>)
 8006ede:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ee4:	6013      	str	r3, [r2, #0]
}
 8006ee6:	4770      	bx	lr
 8006ee8:	20002f18 	.word	0x20002f18
 8006eec:	20002b18 	.word	0x20002b18

08006ef0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <vApplicationGetTimerTaskMemory+0x10>)
 8006ef2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ef4:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <vApplicationGetTimerTaskMemory+0x14>)
 8006ef6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006efc:	6013      	str	r3, [r2, #0]
}
 8006efe:	4770      	bx	lr
 8006f00:	20003778 	.word	0x20003778
 8006f04:	20002f78 	.word	0x20002f78

08006f08 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f08:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f0c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f10:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f12:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f14:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f1c:	4770      	bx	lr

08006f1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f22:	4770      	bx	lr

08006f24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f24:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f26:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006f28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f2a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f30:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006f32:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006f34:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006f36:	3301      	adds	r3, #1
 8006f38:	6003      	str	r3, [r0, #0]
}
 8006f3a:	4770      	bx	lr

08006f3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f3c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f3e:	1c53      	adds	r3, r2, #1
{
 8006f40:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8006f42:	d10a      	bne.n	8006f5a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f44:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f4a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f4c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f4e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006f50:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006f52:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006f54:	3301      	adds	r3, #1
 8006f56:	6003      	str	r3, [r0, #0]
}
 8006f58:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f5a:	f100 0308 	add.w	r3, r0, #8
 8006f5e:	685c      	ldr	r4, [r3, #4]
 8006f60:	6825      	ldr	r5, [r4, #0]
 8006f62:	4295      	cmp	r5, r2
 8006f64:	d8ef      	bhi.n	8006f46 <vListInsert+0xa>
 8006f66:	4623      	mov	r3, r4
 8006f68:	e7f9      	b.n	8006f5e <vListInsert+0x22>

08006f6a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f6a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f6e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f70:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f72:	6882      	ldr	r2, [r0, #8]
 8006f74:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f76:	6859      	ldr	r1, [r3, #4]
 8006f78:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f7a:	bf08      	it	eq
 8006f7c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f7e:	2200      	movs	r2, #0
 8006f80:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	3a01      	subs	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f88:	6818      	ldr	r0, [r3, #0]
}
 8006f8a:	4770      	bx	lr

08006f8c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f90:	f001 fc58 	bl	8008844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006f96:	f001 fc7b 	bl	8008890 <vPortExitCritical>

	return xReturn;
}
 8006f9a:	fab4 f084 	clz	r0, r4
 8006f9e:	0940      	lsrs	r0, r0, #5
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <prvCopyDataToQueue>:
{
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fa6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8006fa8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006faa:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fac:	b942      	cbnz	r2, 8006fc0 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fae:	6805      	ldr	r5, [r0, #0]
 8006fb0:	b99d      	cbnz	r5, 8006fda <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fb2:	6880      	ldr	r0, [r0, #8]
 8006fb4:	f001 f92a 	bl	800820c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fb8:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fba:	3601      	adds	r6, #1
 8006fbc:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006fc0:	b96d      	cbnz	r5, 8006fde <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fc2:	6840      	ldr	r0, [r0, #4]
 8006fc4:	f003 f9c8 	bl	800a358 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fc8:	6863      	ldr	r3, [r4, #4]
 8006fca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006fcc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fce:	68a2      	ldr	r2, [r4, #8]
 8006fd0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fd2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fd4:	d301      	bcc.n	8006fda <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e7ed      	b.n	8006fba <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fde:	68c0      	ldr	r0, [r0, #12]
 8006fe0:	f003 f9ba 	bl	800a358 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fe6:	68e2      	ldr	r2, [r4, #12]
 8006fe8:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fea:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fec:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fee:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ff0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ff2:	bf3e      	ittt	cc
 8006ff4:	68a2      	ldrcc	r2, [r4, #8]
 8006ff6:	189b      	addcc	r3, r3, r2
 8006ff8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006ffa:	2d02      	cmp	r5, #2
 8006ffc:	d1ed      	bne.n	8006fda <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ffe:	b10e      	cbz	r6, 8007004 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007000:	3e01      	subs	r6, #1
 8007002:	e7ea      	b.n	8006fda <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007004:	4630      	mov	r0, r6
 8007006:	e7d8      	b.n	8006fba <prvCopyDataToQueue+0x18>

08007008 <prvCopyDataFromQueue>:
{
 8007008:	4603      	mov	r3, r0
 800700a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800700c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800700e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007010:	b162      	cbz	r2, 800702c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007012:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007014:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007016:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007018:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800701a:	60d9      	str	r1, [r3, #12]
}
 800701c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007020:	bf24      	itt	cs
 8007022:	6819      	ldrcs	r1, [r3, #0]
 8007024:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007026:	68d9      	ldr	r1, [r3, #12]
 8007028:	f003 b996 	b.w	800a358 <memcpy>
}
 800702c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007030:	4770      	bx	lr

08007032 <prvUnlockQueue>:
{
 8007032:	b570      	push	{r4, r5, r6, lr}
 8007034:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007036:	f001 fc05 	bl	8008844 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800703a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800703e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007042:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007044:	2d00      	cmp	r5, #0
 8007046:	dc14      	bgt.n	8007072 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007048:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800704a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800704e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007052:	f001 fc1d 	bl	8008890 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007056:	f001 fbf5 	bl	8008844 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800705a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800705e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007060:	2d00      	cmp	r5, #0
 8007062:	dc12      	bgt.n	800708a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007064:	23ff      	movs	r3, #255	; 0xff
 8007066:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800706a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800706e:	f001 bc0f 	b.w	8008890 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0e7      	beq.n	8007048 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007078:	4630      	mov	r0, r6
 800707a:	f000 ffdb 	bl	8008034 <xTaskRemoveFromEventList>
 800707e:	b108      	cbz	r0, 8007084 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007080:	f001 f868 	bl	8008154 <vTaskMissedYield>
 8007084:	3d01      	subs	r5, #1
 8007086:	b26d      	sxtb	r5, r5
 8007088:	e7dc      	b.n	8007044 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0e9      	beq.n	8007064 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007090:	4630      	mov	r0, r6
 8007092:	f000 ffcf 	bl	8008034 <xTaskRemoveFromEventList>
 8007096:	b108      	cbz	r0, 800709c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007098:	f001 f85c 	bl	8008154 <vTaskMissedYield>
 800709c:	3d01      	subs	r5, #1
 800709e:	b26d      	sxtb	r5, r5
 80070a0:	e7de      	b.n	8007060 <prvUnlockQueue+0x2e>
	...

080070a4 <xQueueGenericReset>:
{
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80070a8:	4604      	mov	r4, r0
 80070aa:	b950      	cbnz	r0, 80070c2 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	b672      	cpsid	i
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	b662      	cpsie	i
 80070c0:	e7fe      	b.n	80070c0 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80070c2:	f001 fbbf 	bl	8008844 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070cc:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070ce:	4343      	muls	r3, r0
 80070d0:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070d2:	1a1b      	subs	r3, r3, r0
 80070d4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070d6:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070d8:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070da:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070dc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070de:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80070e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80070e8:	b995      	cbnz	r5, 8007110 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	b163      	cbz	r3, 8007108 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ee:	f104 0010 	add.w	r0, r4, #16
 80070f2:	f000 ff9f 	bl	8008034 <xTaskRemoveFromEventList>
 80070f6:	b138      	cbz	r0, 8007108 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <xQueueGenericReset+0x80>)
 80070fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007108:	f001 fbc2 	bl	8008890 <vPortExitCritical>
}
 800710c:	2001      	movs	r0, #1
 800710e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007110:	f104 0010 	add.w	r0, r4, #16
 8007114:	f7ff fef8 	bl	8006f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007118:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800711c:	f7ff fef4 	bl	8006f08 <vListInitialise>
 8007120:	e7f2      	b.n	8007108 <xQueueGenericReset+0x64>
 8007122:	bf00      	nop
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <xQueueGenericCreateStatic>:
	{
 8007128:	b513      	push	{r0, r1, r4, lr}
 800712a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800712c:	b950      	cbnz	r0, 8007144 <xQueueGenericCreateStatic+0x1c>
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	b672      	cpsid	i
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	b662      	cpsie	i
 8007142:	e7fe      	b.n	8007142 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8007144:	b953      	cbnz	r3, 800715c <xQueueGenericCreateStatic+0x34>
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	b672      	cpsid	i
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	b662      	cpsie	i
 800715a:	e7fe      	b.n	800715a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800715c:	b15a      	cbz	r2, 8007176 <xQueueGenericCreateStatic+0x4e>
 800715e:	b9b1      	cbnz	r1, 800718e <xQueueGenericCreateStatic+0x66>
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	b672      	cpsid	i
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	b662      	cpsie	i
 8007174:	e7fe      	b.n	8007174 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007176:	b151      	cbz	r1, 800718e <xQueueGenericCreateStatic+0x66>
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	b672      	cpsid	i
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	b662      	cpsie	i
 800718c:	e7fe      	b.n	800718c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800718e:	2350      	movs	r3, #80	; 0x50
 8007190:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	2b50      	cmp	r3, #80	; 0x50
 8007196:	d00a      	beq.n	80071ae <xQueueGenericCreateStatic+0x86>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	b672      	cpsid	i
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	b662      	cpsie	i
 80071ac:	e7fe      	b.n	80071ac <xQueueGenericCreateStatic+0x84>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071ae:	2900      	cmp	r1, #0
 80071b0:	bf08      	it	eq
 80071b2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071b4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071b6:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071b8:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80071be:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071c2:	4619      	mov	r1, r3
 80071c4:	4620      	mov	r0, r4
 80071c6:	f7ff ff6d 	bl	80070a4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80071ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 80071ce:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80071d0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80071d4:	b002      	add	sp, #8
 80071d6:	bd10      	pop	{r4, pc}

080071d8 <xQueueGenericCreate>:
	{
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	460d      	mov	r5, r1
 80071dc:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071de:	4606      	mov	r6, r0
 80071e0:	b950      	cbnz	r0, 80071f8 <xQueueGenericCreate+0x20>
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	b672      	cpsid	i
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	b662      	cpsie	i
 80071f6:	e7fe      	b.n	80071f6 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071fa:	3050      	adds	r0, #80	; 0x50
 80071fc:	f001 fc80 	bl	8008b00 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007200:	4604      	mov	r4, r0
 8007202:	b160      	cbz	r0, 800721e <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007204:	2300      	movs	r3, #0
 8007206:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800720a:	b955      	cbnz	r5, 8007222 <xQueueGenericCreate+0x4a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800720c:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800720e:	2101      	movs	r1, #1
 8007210:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007212:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007216:	f7ff ff45 	bl	80070a4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800721a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800721e:	4620      	mov	r0, r4
 8007220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007222:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007226:	6003      	str	r3, [r0, #0]
 8007228:	e7f1      	b.n	800720e <xQueueGenericCreate+0x36>
	...

0800722c <xQueueGenericSend>:
{
 800722c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	4688      	mov	r8, r1
 8007232:	9201      	str	r2, [sp, #4]
 8007234:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007236:	4604      	mov	r4, r0
 8007238:	b950      	cbnz	r0, 8007250 <xQueueGenericSend+0x24>
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	b672      	cpsid	i
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	b662      	cpsie	i
 800724e:	e7fe      	b.n	800724e <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007250:	b961      	cbnz	r1, 800726c <xQueueGenericSend+0x40>
 8007252:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007254:	b153      	cbz	r3, 800726c <xQueueGenericSend+0x40>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	b672      	cpsid	i
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	b662      	cpsie	i
 800726a:	e7fe      	b.n	800726a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800726c:	2f02      	cmp	r7, #2
 800726e:	d10d      	bne.n	800728c <xQueueGenericSend+0x60>
 8007270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007272:	2b01      	cmp	r3, #1
 8007274:	d00a      	beq.n	800728c <xQueueGenericSend+0x60>
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	b672      	cpsid	i
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	b662      	cpsie	i
 800728a:	e7fe      	b.n	800728a <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800728c:	f000 ff6e 	bl	800816c <xTaskGetSchedulerState>
 8007290:	b960      	cbnz	r0, 80072ac <xQueueGenericSend+0x80>
 8007292:	9e01      	ldr	r6, [sp, #4]
 8007294:	b15e      	cbz	r6, 80072ae <xQueueGenericSend+0x82>
 8007296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729a:	b672      	cpsid	i
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	b662      	cpsie	i
 80072aa:	e7fe      	b.n	80072aa <xQueueGenericSend+0x7e>
 80072ac:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80072ae:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80072b2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800739c <xQueueGenericSend+0x170>
 80072b6:	e037      	b.n	8007328 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80072b8:	9d01      	ldr	r5, [sp, #4]
 80072ba:	b91d      	cbnz	r5, 80072c4 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80072bc:	f001 fae8 	bl	8008890 <vPortExitCritical>
			return errQUEUE_FULL;
 80072c0:	2000      	movs	r0, #0
 80072c2:	e050      	b.n	8007366 <xQueueGenericSend+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 80072c4:	b916      	cbnz	r6, 80072cc <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072c6:	a802      	add	r0, sp, #8
 80072c8:	f000 fef8 	bl	80080bc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80072cc:	f001 fae0 	bl	8008890 <vPortExitCritical>
		vTaskSuspendAll();
 80072d0:	f000 fcfa 	bl	8007cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072d4:	f001 fab6 	bl	8008844 <vPortEnterCritical>
 80072d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80072dc:	2bff      	cmp	r3, #255	; 0xff
 80072de:	d101      	bne.n	80072e4 <xQueueGenericSend+0xb8>
 80072e0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80072e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80072e8:	2bff      	cmp	r3, #255	; 0xff
 80072ea:	d101      	bne.n	80072f0 <xQueueGenericSend+0xc4>
 80072ec:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80072f0:	f001 face 	bl	8008890 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072f4:	a901      	add	r1, sp, #4
 80072f6:	a802      	add	r0, sp, #8
 80072f8:	f000 feec 	bl	80080d4 <xTaskCheckForTimeOut>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d146      	bne.n	800738e <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007300:	f001 faa0 	bl	8008844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007304:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007308:	429a      	cmp	r2, r3
 800730a:	d12f      	bne.n	800736c <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800730c:	f001 fac0 	bl	8008890 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007310:	9901      	ldr	r1, [sp, #4]
 8007312:	f104 0010 	add.w	r0, r4, #16
 8007316:	f000 fe51 	bl	8007fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800731a:	4620      	mov	r0, r4
 800731c:	f7ff fe89 	bl	8007032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007320:	f000 fd72 	bl	8007e08 <xTaskResumeAll>
 8007324:	b350      	cbz	r0, 800737c <xQueueGenericSend+0x150>
 8007326:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007328:	f001 fa8c 	bl	8008844 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800732c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800732e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007330:	429a      	cmp	r2, r3
 8007332:	d301      	bcc.n	8007338 <xQueueGenericSend+0x10c>
 8007334:	2f02      	cmp	r7, #2
 8007336:	d1bf      	bne.n	80072b8 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007338:	463a      	mov	r2, r7
 800733a:	4641      	mov	r1, r8
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff fe30 	bl	8006fa2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007344:	b11b      	cbz	r3, 800734e <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007346:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800734a:	f000 fe73 	bl	8008034 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800734e:	b138      	cbz	r0, 8007360 <xQueueGenericSend+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 8007350:	4b12      	ldr	r3, [pc, #72]	; (800739c <xQueueGenericSend+0x170>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007360:	f001 fa96 	bl	8008890 <vPortExitCritical>
				return pdPASS;
 8007364:	2001      	movs	r0, #1
}
 8007366:	b004      	add	sp, #16
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800736c:	f001 fa90 	bl	8008890 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007370:	4620      	mov	r0, r4
 8007372:	f7ff fe5e 	bl	8007032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007376:	f000 fd47 	bl	8007e08 <xTaskResumeAll>
 800737a:	e7d4      	b.n	8007326 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800737c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007380:	f8ca 3000 	str.w	r3, [sl]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	e7cb      	b.n	8007326 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800738e:	4620      	mov	r0, r4
 8007390:	f7ff fe4f 	bl	8007032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007394:	f000 fd38 	bl	8007e08 <xTaskResumeAll>
 8007398:	e792      	b.n	80072c0 <xQueueGenericSend+0x94>
 800739a:	bf00      	nop
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80073a0:	2200      	movs	r2, #0
 80073a2:	460b      	mov	r3, r1
	{
 80073a4:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80073a6:	4611      	mov	r1, r2
 80073a8:	9000      	str	r0, [sp, #0]
 80073aa:	2001      	movs	r0, #1
 80073ac:	f7ff febc 	bl	8007128 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 80073b0:	4604      	mov	r4, r0
 80073b2:	b138      	cbz	r0, 80073c4 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80073b8:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80073ba:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80073bc:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80073be:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80073c0:	f7ff ff34 	bl	800722c <xQueueGenericSend>
	}
 80073c4:	4620      	mov	r0, r4
 80073c6:	b002      	add	sp, #8
 80073c8:	bd10      	pop	{r4, pc}

080073ca <xQueueGiveMutexRecursive>:
	{
 80073ca:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80073cc:	4604      	mov	r4, r0
 80073ce:	b950      	cbnz	r0, 80073e6 <xQueueGiveMutexRecursive+0x1c>
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	b672      	cpsid	i
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	b662      	cpsie	i
 80073e4:	e7fe      	b.n	80073e4 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073e6:	6885      	ldr	r5, [r0, #8]
 80073e8:	f000 feba 	bl	8008160 <xTaskGetCurrentTaskHandle>
 80073ec:	4285      	cmp	r5, r0
 80073ee:	d10a      	bne.n	8007406 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80073f0:	68e3      	ldr	r3, [r4, #12]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80073f6:	b923      	cbnz	r3, 8007402 <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80073f8:	461a      	mov	r2, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	4620      	mov	r0, r4
 80073fe:	f7ff ff15 	bl	800722c <xQueueGenericSend>
			xReturn = pdPASS;
 8007402:	2001      	movs	r0, #1
		return xReturn;
 8007404:	e000      	b.n	8007408 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8007406:	2000      	movs	r0, #0
	}
 8007408:	bd38      	pop	{r3, r4, r5, pc}

0800740a <xQueueCreateMutex>:
	{
 800740a:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800740c:	4602      	mov	r2, r0
 800740e:	2100      	movs	r1, #0
 8007410:	2001      	movs	r0, #1
 8007412:	f7ff fee1 	bl	80071d8 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8007416:	4604      	mov	r4, r0
 8007418:	b138      	cbz	r0, 800742a <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800741a:	2300      	movs	r3, #0
 800741c:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800741e:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007420:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007422:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007424:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007426:	f7ff ff01 	bl	800722c <xQueueGenericSend>
	}
 800742a:	4620      	mov	r0, r4
 800742c:	bd10      	pop	{r4, pc}

0800742e <xQueueGenericSendFromISR>:
{
 800742e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007432:	4689      	mov	r9, r1
 8007434:	4690      	mov	r8, r2
 8007436:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007438:	4604      	mov	r4, r0
 800743a:	b950      	cbnz	r0, 8007452 <xQueueGenericSendFromISR+0x24>
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	b672      	cpsid	i
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	b662      	cpsie	i
 8007450:	e7fe      	b.n	8007450 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007452:	b961      	cbnz	r1, 800746e <xQueueGenericSendFromISR+0x40>
 8007454:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007456:	b153      	cbz	r3, 800746e <xQueueGenericSendFromISR+0x40>
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	b672      	cpsid	i
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	b662      	cpsie	i
 800746c:	e7fe      	b.n	800746c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800746e:	2f02      	cmp	r7, #2
 8007470:	d10d      	bne.n	800748e <xQueueGenericSendFromISR+0x60>
 8007472:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007474:	2b01      	cmp	r3, #1
 8007476:	d00a      	beq.n	800748e <xQueueGenericSendFromISR+0x60>
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	b672      	cpsid	i
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	b662      	cpsie	i
 800748c:	e7fe      	b.n	800748c <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800748e:	f001 fae1 	bl	8008a54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007492:	f3ef 8611 	mrs	r6, BASEPRI
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	b672      	cpsid	i
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80074ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d301      	bcc.n	80074b6 <xQueueGenericSendFromISR+0x88>
 80074b2:	2f02      	cmp	r7, #2
 80074b4:	d122      	bne.n	80074fc <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80074b6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074ba:	463a      	mov	r2, r7
 80074bc:	4649      	mov	r1, r9
 80074be:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80074c0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074c2:	f7ff fd6e 	bl	8006fa2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80074c6:	1c6b      	adds	r3, r5, #1
 80074c8:	d113      	bne.n	80074f2 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074cc:	b90b      	cbnz	r3, 80074d2 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 80074ce:	2001      	movs	r0, #1
 80074d0:	e00b      	b.n	80074ea <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074d6:	f000 fdad 	bl	8008034 <xTaskRemoveFromEventList>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0f7      	beq.n	80074ce <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80074de:	f1b8 0f00 	cmp.w	r8, #0
 80074e2:	d0f4      	beq.n	80074ce <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074e4:	2001      	movs	r0, #1
 80074e6:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074ea:	f386 8811 	msr	BASEPRI, r6
}
 80074ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074f2:	3501      	adds	r5, #1
 80074f4:	b26d      	sxtb	r5, r5
 80074f6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80074fa:	e7e8      	b.n	80074ce <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80074fc:	2000      	movs	r0, #0
 80074fe:	e7f4      	b.n	80074ea <xQueueGenericSendFromISR+0xbc>

08007500 <xQueueReceive>:
{
 8007500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007504:	b085      	sub	sp, #20
 8007506:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8007508:	4604      	mov	r4, r0
{
 800750a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800750c:	b950      	cbnz	r0, 8007524 <xQueueReceive+0x24>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	b672      	cpsid	i
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	b662      	cpsie	i
 8007522:	e7fe      	b.n	8007522 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007524:	b961      	cbnz	r1, 8007540 <xQueueReceive+0x40>
 8007526:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007528:	b153      	cbz	r3, 8007540 <xQueueReceive+0x40>
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	b672      	cpsid	i
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	b662      	cpsie	i
 800753e:	e7fe      	b.n	800753e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007540:	f000 fe14 	bl	800816c <xTaskGetSchedulerState>
 8007544:	b960      	cbnz	r0, 8007560 <xQueueReceive+0x60>
 8007546:	9e01      	ldr	r6, [sp, #4]
 8007548:	b15e      	cbz	r6, 8007562 <xQueueReceive+0x62>
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	b672      	cpsid	i
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	b662      	cpsie	i
 800755e:	e7fe      	b.n	800755e <xQueueReceive+0x5e>
 8007560:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007562:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8007566:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8007648 <xQueueReceive+0x148>
 800756a:	e03b      	b.n	80075e4 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800756c:	9d01      	ldr	r5, [sp, #4]
 800756e:	b91d      	cbnz	r5, 8007578 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8007570:	f001 f98e 	bl	8008890 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007574:	2000      	movs	r0, #0
 8007576:	e052      	b.n	800761e <xQueueReceive+0x11e>
				else if( xEntryTimeSet == pdFALSE )
 8007578:	b916      	cbnz	r6, 8007580 <xQueueReceive+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800757a:	a802      	add	r0, sp, #8
 800757c:	f000 fd9e 	bl	80080bc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007580:	f001 f986 	bl	8008890 <vPortExitCritical>
		vTaskSuspendAll();
 8007584:	f000 fba0 	bl	8007cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007588:	f001 f95c 	bl	8008844 <vPortEnterCritical>
 800758c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007590:	2bff      	cmp	r3, #255	; 0xff
 8007592:	d101      	bne.n	8007598 <xQueueReceive+0x98>
 8007594:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8007598:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800759c:	2bff      	cmp	r3, #255	; 0xff
 800759e:	d101      	bne.n	80075a4 <xQueueReceive+0xa4>
 80075a0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80075a4:	f001 f974 	bl	8008890 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075a8:	a901      	add	r1, sp, #4
 80075aa:	a802      	add	r0, sp, #8
 80075ac:	f000 fd92 	bl	80080d4 <xTaskCheckForTimeOut>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d13d      	bne.n	8007630 <xQueueReceive+0x130>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7ff fce9 	bl	8006f8c <prvIsQueueEmpty>
 80075ba:	b398      	cbz	r0, 8007624 <xQueueReceive+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075bc:	9901      	ldr	r1, [sp, #4]
 80075be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80075c2:	f000 fcfb 	bl	8007fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075c6:	4620      	mov	r0, r4
 80075c8:	f7ff fd33 	bl	8007032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075cc:	f000 fc1c 	bl	8007e08 <xTaskResumeAll>
 80075d0:	b938      	cbnz	r0, 80075e2 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 80075d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075d6:	f8c9 3000 	str.w	r3, [r9]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80075e4:	f001 f92e 	bl	8008844 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ea:	2d00      	cmp	r5, #0
 80075ec:	d0be      	beq.n	800756c <xQueueReceive+0x6c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075ee:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075f0:	4639      	mov	r1, r7
 80075f2:	4620      	mov	r0, r4
 80075f4:	f7ff fd08 	bl	8007008 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075f8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	b163      	cbz	r3, 8007618 <xQueueReceive+0x118>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075fe:	f104 0010 	add.w	r0, r4, #16
 8007602:	f000 fd17 	bl	8008034 <xTaskRemoveFromEventList>
 8007606:	b138      	cbz	r0, 8007618 <xQueueReceive+0x118>
						queueYIELD_IF_USING_PREEMPTION();
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <xQueueReceive+0x148>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007618:	f001 f93a 	bl	8008890 <vPortExitCritical>
				return pdPASS;
 800761c:	2001      	movs	r0, #1
}
 800761e:	b005      	add	sp, #20
 8007620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff fd04 	bl	8007032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800762a:	f000 fbed 	bl	8007e08 <xTaskResumeAll>
 800762e:	e7d8      	b.n	80075e2 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8007630:	4620      	mov	r0, r4
 8007632:	f7ff fcfe 	bl	8007032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007636:	f000 fbe7 	bl	8007e08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff fca6 	bl	8006f8c <prvIsQueueEmpty>
 8007640:	2800      	cmp	r0, #0
 8007642:	d0ce      	beq.n	80075e2 <xQueueReceive+0xe2>
 8007644:	e796      	b.n	8007574 <xQueueReceive+0x74>
 8007646:	bf00      	nop
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <xQueueSemaphoreTake>:
{
 800764c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8007650:	4604      	mov	r4, r0
{
 8007652:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007654:	b950      	cbnz	r0, 800766c <xQueueSemaphoreTake+0x20>
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	b672      	cpsid	i
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	b662      	cpsie	i
 800766a:	e7fe      	b.n	800766a <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800766c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800766e:	b155      	cbz	r5, 8007686 <xQueueSemaphoreTake+0x3a>
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	b672      	cpsid	i
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	b662      	cpsie	i
 8007684:	e7fe      	b.n	8007684 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007686:	f000 fd71 	bl	800816c <xTaskGetSchedulerState>
 800768a:	b960      	cbnz	r0, 80076a6 <xQueueSemaphoreTake+0x5a>
 800768c:	9d01      	ldr	r5, [sp, #4]
 800768e:	b155      	cbz	r5, 80076a6 <xQueueSemaphoreTake+0x5a>
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	b672      	cpsid	i
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	b662      	cpsie	i
 80076a4:	e7fe      	b.n	80076a4 <xQueueSemaphoreTake+0x58>
 80076a6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80076a8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80076aa:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80077dc <xQueueSemaphoreTake+0x190>
 80076ae:	e051      	b.n	8007754 <xQueueSemaphoreTake+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 80076b0:	9b01      	ldr	r3, [sp, #4]
 80076b2:	b973      	cbnz	r3, 80076d2 <xQueueSemaphoreTake+0x86>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80076b4:	b155      	cbz	r5, 80076cc <xQueueSemaphoreTake+0x80>
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	b672      	cpsid	i
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	b662      	cpsie	i
 80076ca:	e7fe      	b.n	80076ca <xQueueSemaphoreTake+0x7e>
					taskEXIT_CRITICAL();
 80076cc:	f001 f8e0 	bl	8008890 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80076d0:	e05e      	b.n	8007790 <xQueueSemaphoreTake+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80076d2:	b916      	cbnz	r6, 80076da <xQueueSemaphoreTake+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076d4:	a802      	add	r0, sp, #8
 80076d6:	f000 fcf1 	bl	80080bc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80076da:	f001 f8d9 	bl	8008890 <vPortExitCritical>
		vTaskSuspendAll();
 80076de:	f000 faf3 	bl	8007cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076e2:	f001 f8af 	bl	8008844 <vPortEnterCritical>
 80076e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80076ea:	2bff      	cmp	r3, #255	; 0xff
 80076ec:	d101      	bne.n	80076f2 <xQueueSemaphoreTake+0xa6>
 80076ee:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80076f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80076f6:	2bff      	cmp	r3, #255	; 0xff
 80076f8:	d101      	bne.n	80076fe <xQueueSemaphoreTake+0xb2>
 80076fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076fe:	f001 f8c7 	bl	8008890 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007702:	a901      	add	r1, sp, #4
 8007704:	a802      	add	r0, sp, #8
 8007706:	f000 fce5 	bl	80080d4 <xTaskCheckForTimeOut>
 800770a:	2800      	cmp	r0, #0
 800770c:	d14a      	bne.n	80077a4 <xQueueSemaphoreTake+0x158>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800770e:	4620      	mov	r0, r4
 8007710:	f7ff fc3c 	bl	8006f8c <prvIsQueueEmpty>
 8007714:	2800      	cmp	r0, #0
 8007716:	d03f      	beq.n	8007798 <xQueueSemaphoreTake+0x14c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	b93b      	cbnz	r3, 800772c <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 800771c:	f001 f892 	bl	8008844 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007720:	68a0      	ldr	r0, [r4, #8]
 8007722:	f000 fd33 	bl	800818c <xTaskPriorityInherit>
 8007726:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007728:	f001 f8b2 	bl	8008890 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800772c:	9901      	ldr	r1, [sp, #4]
 800772e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007732:	f000 fc43 	bl	8007fbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007736:	4620      	mov	r0, r4
 8007738:	f7ff fc7b 	bl	8007032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800773c:	f000 fb64 	bl	8007e08 <xTaskResumeAll>
 8007740:	b938      	cbnz	r0, 8007752 <xQueueSemaphoreTake+0x106>
					portYIELD_WITHIN_API();
 8007742:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007746:	f8c8 3000 	str.w	r3, [r8]
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007754:	f001 f876 	bl	8008844 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0a8      	beq.n	80076b0 <xQueueSemaphoreTake+0x64>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800775e:	3b01      	subs	r3, #1
 8007760:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	b913      	cbnz	r3, 800776c <xQueueSemaphoreTake+0x120>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007766:	f000 fde9 	bl	800833c <pvTaskIncrementMutexHeldCount>
 800776a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	b163      	cbz	r3, 800778a <xQueueSemaphoreTake+0x13e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007770:	f104 0010 	add.w	r0, r4, #16
 8007774:	f000 fc5e 	bl	8008034 <xTaskRemoveFromEventList>
 8007778:	b138      	cbz	r0, 800778a <xQueueSemaphoreTake+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 800777a:	4b18      	ldr	r3, [pc, #96]	; (80077dc <xQueueSemaphoreTake+0x190>)
 800777c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800778a:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800778c:	f001 f880 	bl	8008890 <vPortExitCritical>
}
 8007790:	4628      	mov	r0, r5
 8007792:	b004      	add	sp, #16
 8007794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8007798:	4620      	mov	r0, r4
 800779a:	f7ff fc4a 	bl	8007032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800779e:	f000 fb33 	bl	8007e08 <xTaskResumeAll>
 80077a2:	e7d6      	b.n	8007752 <xQueueSemaphoreTake+0x106>
			prvUnlockQueue( pxQueue );
 80077a4:	4620      	mov	r0, r4
 80077a6:	f7ff fc44 	bl	8007032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077aa:	f000 fb2d 	bl	8007e08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ae:	4620      	mov	r0, r4
 80077b0:	f7ff fbec 	bl	8006f8c <prvIsQueueEmpty>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d0cc      	beq.n	8007752 <xQueueSemaphoreTake+0x106>
					if( xInheritanceOccurred != pdFALSE )
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	d0e9      	beq.n	8007790 <xQueueSemaphoreTake+0x144>
						taskENTER_CRITICAL();
 80077bc:	f001 f842 	bl	8008844 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80077c2:	b119      	cbz	r1, 80077cc <xQueueSemaphoreTake+0x180>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80077c6:	6819      	ldr	r1, [r3, #0]
 80077c8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80077cc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80077ce:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80077d0:	f000 fd62 	bl	8008298 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80077d4:	f001 f85c 	bl	8008890 <vPortExitCritical>
 80077d8:	e7da      	b.n	8007790 <xQueueSemaphoreTake+0x144>
 80077da:	bf00      	nop
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <xQueueTakeMutexRecursive>:
	{
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 80077e4:	4604      	mov	r4, r0
 80077e6:	b950      	cbnz	r0, 80077fe <xQueueTakeMutexRecursive+0x1e>
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	b672      	cpsid	i
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	b662      	cpsie	i
 80077fc:	e7fe      	b.n	80077fc <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80077fe:	6886      	ldr	r6, [r0, #8]
 8007800:	f000 fcae 	bl	8008160 <xTaskGetCurrentTaskHandle>
 8007804:	4286      	cmp	r6, r0
 8007806:	d104      	bne.n	8007812 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007808:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800780a:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800780c:	3301      	adds	r3, #1
 800780e:	60e3      	str	r3, [r4, #12]
	}
 8007810:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007812:	4629      	mov	r1, r5
 8007814:	4620      	mov	r0, r4
 8007816:	f7ff ff19 	bl	800764c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800781a:	2800      	cmp	r0, #0
 800781c:	d0f8      	beq.n	8007810 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8007824:	e7f4      	b.n	8007810 <xQueueTakeMutexRecursive+0x30>
	...

08007828 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007828:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800782a:	4a07      	ldr	r2, [pc, #28]	; (8007848 <vQueueAddToRegistry+0x20>)
	{
 800782c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800782e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007832:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007836:	b91d      	cbnz	r5, 8007840 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007838:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800783c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800783e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007840:	3301      	adds	r3, #1
 8007842:	2b08      	cmp	r3, #8
 8007844:	d1f3      	bne.n	800782e <vQueueAddToRegistry+0x6>
 8007846:	e7fa      	b.n	800783e <vQueueAddToRegistry+0x16>
 8007848:	20008414 	.word	0x20008414

0800784c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4604      	mov	r4, r0
 8007850:	460d      	mov	r5, r1
 8007852:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007854:	f000 fff6 	bl	8008844 <vPortEnterCritical>
 8007858:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800785c:	2bff      	cmp	r3, #255	; 0xff
 800785e:	d102      	bne.n	8007866 <vQueueWaitForMessageRestricted+0x1a>
 8007860:	2300      	movs	r3, #0
 8007862:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007866:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800786a:	2bff      	cmp	r3, #255	; 0xff
 800786c:	d102      	bne.n	8007874 <vQueueWaitForMessageRestricted+0x28>
 800786e:	2300      	movs	r3, #0
 8007870:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007874:	f001 f80c 	bl	8008890 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007878:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800787a:	b92b      	cbnz	r3, 8007888 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800787c:	4632      	mov	r2, r6
 800787e:	4629      	mov	r1, r5
 8007880:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007884:	f000 fbb6 	bl	8007ff4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007888:	4620      	mov	r0, r4
	}
 800788a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800788e:	f7ff bbd0 	b.w	8007032 <prvUnlockQueue>
	...

08007894 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800789a:	f000 ffd3 	bl	8008844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800789e:	4b2e      	ldr	r3, [pc, #184]	; (8007958 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 80078a0:	4d2e      	ldr	r5, [pc, #184]	; (800795c <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4f2e      	ldr	r7, [pc, #184]	; (8007960 <prvAddNewTaskToReadyList+0xcc>)
 80078a6:	3201      	adds	r2, #1
 80078a8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80078aa:	682e      	ldr	r6, [r5, #0]
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	d148      	bne.n	8007942 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078b0:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11f      	bne.n	80078f8 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078b8:	f04f 0814 	mov.w	r8, #20
 80078bc:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078c0:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078c2:	f7ff fb21 	bl	8006f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078c6:	2e38      	cmp	r6, #56	; 0x38
 80078c8:	d1f8      	bne.n	80078bc <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078ca:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800798c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80078ce:	4e25      	ldr	r6, [pc, #148]	; (8007964 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 80078d0:	4640      	mov	r0, r8
 80078d2:	f7ff fb19 	bl	8006f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078d6:	4630      	mov	r0, r6
 80078d8:	f7ff fb16 	bl	8006f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078dc:	4822      	ldr	r0, [pc, #136]	; (8007968 <prvAddNewTaskToReadyList+0xd4>)
 80078de:	f7ff fb13 	bl	8006f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078e2:	4822      	ldr	r0, [pc, #136]	; (800796c <prvAddNewTaskToReadyList+0xd8>)
 80078e4:	f7ff fb10 	bl	8006f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078e8:	4821      	ldr	r0, [pc, #132]	; (8007970 <prvAddNewTaskToReadyList+0xdc>)
 80078ea:	f7ff fb0d 	bl	8006f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ee:	4b21      	ldr	r3, [pc, #132]	; (8007974 <prvAddNewTaskToReadyList+0xe0>)
 80078f0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078f4:	4b20      	ldr	r3, [pc, #128]	; (8007978 <prvAddNewTaskToReadyList+0xe4>)
 80078f6:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 80078f8:	4a20      	ldr	r2, [pc, #128]	; (800797c <prvAddNewTaskToReadyList+0xe8>)
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007900:	4a1f      	ldr	r2, [pc, #124]	; (8007980 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007902:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007904:	6811      	ldr	r1, [r2, #0]
 8007906:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007908:	428b      	cmp	r3, r1
 800790a:	d900      	bls.n	800790e <prvAddNewTaskToReadyList+0x7a>
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	2014      	movs	r0, #20
 8007910:	1d21      	adds	r1, r4, #4
 8007912:	fb00 7003 	mla	r0, r0, r3, r7
 8007916:	f7ff fb05 	bl	8006f24 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800791a:	f000 ffb9 	bl	8008890 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800791e:	4b19      	ldr	r3, [pc, #100]	; (8007984 <prvAddNewTaskToReadyList+0xf0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	b163      	cbz	r3, 800793e <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007928:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800792a:	429a      	cmp	r2, r3
 800792c:	d207      	bcs.n	800793e <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800792e:	4b16      	ldr	r3, [pc, #88]	; (8007988 <prvAddNewTaskToReadyList+0xf4>)
 8007930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	f3bf 8f6f 	isb	sy
}
 800793e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007942:	4b10      	ldr	r3, [pc, #64]	; (8007984 <prvAddNewTaskToReadyList+0xf0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1d6      	bne.n	80078f8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800794a:	682b      	ldr	r3, [r5, #0]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d8d1      	bhi.n	80078f8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8007954:	602c      	str	r4, [r5, #0]
 8007956:	e7cf      	b.n	80078f8 <prvAddNewTaskToReadyList+0x64>
 8007958:	20003c40 	.word	0x20003c40
 800795c:	200037d4 	.word	0x200037d4
 8007960:	200037e0 	.word	0x200037e0
 8007964:	20003c6c 	.word	0x20003c6c
 8007968:	20003c88 	.word	0x20003c88
 800796c:	20003cb4 	.word	0x20003cb4
 8007970:	20003ca0 	.word	0x20003ca0
 8007974:	200037d8 	.word	0x200037d8
 8007978:	200037dc 	.word	0x200037dc
 800797c:	20003c50 	.word	0x20003c50
 8007980:	20003c54 	.word	0x20003c54
 8007984:	20003c9c 	.word	0x20003c9c
 8007988:	e000ed04 	.word	0xe000ed04
 800798c:	20003c58 	.word	0x20003c58

08007990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007990:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007992:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8007996:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007998:	b93b      	cbnz	r3, 80079aa <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800799a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800799c:	f001 f940 	bl	8008c20 <vPortFree>
				vPortFree( pxTCB );
 80079a0:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80079a6:	f001 b93b 	b.w	8008c20 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d0f9      	beq.n	80079a2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d00a      	beq.n	80079c8 <prvDeleteTCB+0x38>
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	e7fe      	b.n	80079c6 <prvDeleteTCB+0x36>
	}
 80079c8:	bd10      	pop	{r4, pc}
	...

080079cc <prvIdleTask>:
{
 80079cc:	b580      	push	{r7, lr}
				taskYIELD();
 80079ce:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8007a2c <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d2:	4f12      	ldr	r7, [pc, #72]	; (8007a1c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079d4:	4c12      	ldr	r4, [pc, #72]	; (8007a20 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80079d6:	4d13      	ldr	r5, [pc, #76]	; (8007a24 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	b963      	cbnz	r3, 80079f6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079dc:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <prvIdleTask+0x5c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d9f8      	bls.n	80079d6 <prvIdleTask+0xa>
				taskYIELD();
 80079e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079e8:	f8c8 3000 	str.w	r3, [r8]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	e7ee      	b.n	80079d4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80079f6:	f000 ff25 	bl	8008844 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079fe:	1d30      	adds	r0, r6, #4
 8007a00:	f7ff fab3 	bl	8006f6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007a10:	f000 ff3e 	bl	8008890 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007a14:	4630      	mov	r0, r6
 8007a16:	f7ff ffbb 	bl	8007990 <prvDeleteTCB>
 8007a1a:	e7dd      	b.n	80079d8 <prvIdleTask+0xc>
 8007a1c:	20003cb4 	.word	0x20003cb4
 8007a20:	20003c44 	.word	0x20003c44
 8007a24:	20003c40 	.word	0x20003c40
 8007a28:	200037e0 	.word	0x200037e0
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a30:	4a06      	ldr	r2, [pc, #24]	; (8007a4c <prvResetNextTaskUnblockTime+0x1c>)
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	6819      	ldr	r1, [r3, #0]
 8007a36:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <prvResetNextTaskUnblockTime+0x20>)
 8007a38:	b919      	cbnz	r1, 8007a42 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a3a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a3e:	601a      	str	r2, [r3, #0]
	}
}
 8007a40:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a46:	68d2      	ldr	r2, [r2, #12]
 8007a48:	6852      	ldr	r2, [r2, #4]
 8007a4a:	e7f8      	b.n	8007a3e <prvResetNextTaskUnblockTime+0xe>
 8007a4c:	200037d8 	.word	0x200037d8
 8007a50:	20003c80 	.word	0x20003c80

08007a54 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a58:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a60:	21a5      	movs	r1, #165	; 0xa5
 8007a62:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007a64:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a66:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007a6a:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007a70:	f002 fc7d 	bl	800a36e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a76:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a78:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8007a7c:	b395      	cbz	r5, 8007ae4 <prvInitialiseNewTask.isra.2+0x90>
 8007a7e:	1e6b      	subs	r3, r5, #1
 8007a80:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8007a84:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a86:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007a8a:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8007a8e:	7819      	ldrb	r1, [r3, #0]
 8007a90:	b109      	cbz	r1, 8007a96 <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a92:	42ab      	cmp	r3, r5
 8007a94:	d1f7      	bne.n	8007a86 <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a96:	2300      	movs	r3, #0
 8007a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a9c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007a9e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aa2:	1d20      	adds	r0, r4, #4
 8007aa4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007aa6:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8007aaa:	bf28      	it	cs
 8007aac:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007aae:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007ab0:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ab2:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ab6:	f7ff fa32 	bl	8006f1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007aba:	f104 0018 	add.w	r0, r4, #24
 8007abe:	f7ff fa2e 	bl	8006f1e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007ac2:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ac6:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac8:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007acc:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ace:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ad0:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ad2:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ad6:	f000 fe8b 	bl	80087f0 <pxPortInitialiseStack>
 8007ada:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007adc:	b106      	cbz	r6, 8007ae0 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ade:	6034      	str	r4, [r6, #0]
}
 8007ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ae4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8007ae8:	e7d8      	b.n	8007a9c <prvInitialiseNewTask.isra.2+0x48>
	...

08007aec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007aee:	4b16      	ldr	r3, [pc, #88]	; (8007b48 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8007af0:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af2:	4e16      	ldr	r6, [pc, #88]	; (8007b4c <prvAddCurrentTaskToDelayedList+0x60>)
{
 8007af4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007af6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af8:	6830      	ldr	r0, [r6, #0]
 8007afa:	3004      	adds	r0, #4
 8007afc:	f7ff fa35 	bl	8006f6a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b00:	1c6b      	adds	r3, r5, #1
 8007b02:	4633      	mov	r3, r6
 8007b04:	d107      	bne.n	8007b16 <prvAddCurrentTaskToDelayedList+0x2a>
 8007b06:	b137      	cbz	r7, 8007b16 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b08:	6831      	ldr	r1, [r6, #0]
 8007b0a:	4811      	ldr	r0, [pc, #68]	; (8007b50 <prvAddCurrentTaskToDelayedList+0x64>)
 8007b0c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b12:	f7ff ba07 	b.w	8006f24 <vListInsertEnd>
 8007b16:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8007b1c:	d307      	bcc.n	8007b2e <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b1e:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <prvAddCurrentTaskToDelayedList+0x68>)
 8007b20:	6810      	ldr	r0, [r2, #0]
 8007b22:	6819      	ldr	r1, [r3, #0]
}
 8007b24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b28:	3104      	adds	r1, #4
 8007b2a:	f7ff ba07 	b.w	8006f3c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b2e:	4a0a      	ldr	r2, [pc, #40]	; (8007b58 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007b30:	6810      	ldr	r0, [r2, #0]
 8007b32:	6819      	ldr	r1, [r3, #0]
 8007b34:	3104      	adds	r1, #4
 8007b36:	f7ff fa01 	bl	8006f3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b3a:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <prvAddCurrentTaskToDelayedList+0x70>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	42a2      	cmp	r2, r4
 8007b40:	d900      	bls.n	8007b44 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8007b42:	601c      	str	r4, [r3, #0]
}
 8007b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20003cc8 	.word	0x20003cc8
 8007b4c:	200037d4 	.word	0x200037d4
 8007b50:	20003ca0 	.word	0x20003ca0
 8007b54:	200037dc 	.word	0x200037dc
 8007b58:	200037d8 	.word	0x200037d8
 8007b5c:	20003c80 	.word	0x20003c80

08007b60 <xTaskCreateStatic>:
	{
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007b68:	b955      	cbnz	r5, 8007b80 <xTaskCreateStatic+0x20>
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	b672      	cpsid	i
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	b662      	cpsie	i
 8007b7e:	e7fe      	b.n	8007b7e <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8007b80:	b954      	cbnz	r4, 8007b98 <xTaskCreateStatic+0x38>
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	b672      	cpsid	i
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	b662      	cpsie	i
 8007b96:	e7fe      	b.n	8007b96 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b98:	265c      	movs	r6, #92	; 0x5c
 8007b9a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b9c:	9e05      	ldr	r6, [sp, #20]
 8007b9e:	2e5c      	cmp	r6, #92	; 0x5c
 8007ba0:	d00a      	beq.n	8007bb8 <xTaskCreateStatic+0x58>
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	e7fe      	b.n	8007bb6 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bb8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bba:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bbc:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bbe:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bc2:	ad04      	add	r5, sp, #16
 8007bc4:	9402      	str	r4, [sp, #8]
 8007bc6:	9501      	str	r5, [sp, #4]
 8007bc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007bca:	9500      	str	r5, [sp, #0]
 8007bcc:	f7ff ff42 	bl	8007a54 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f7ff fe5f 	bl	8007894 <prvAddNewTaskToReadyList>
	}
 8007bd6:	9804      	ldr	r0, [sp, #16]
 8007bd8:	b006      	add	sp, #24
 8007bda:	bd70      	pop	{r4, r5, r6, pc}

08007bdc <xTaskCreate>:
	{
 8007bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007be0:	4607      	mov	r7, r0
 8007be2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007be4:	0090      	lsls	r0, r2, #2
	{
 8007be6:	4688      	mov	r8, r1
 8007be8:	4616      	mov	r6, r2
 8007bea:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bec:	f000 ff88 	bl	8008b00 <pvPortMalloc>
			if( pxStack != NULL )
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	b1e8      	cbz	r0, 8007c30 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bf4:	205c      	movs	r0, #92	; 0x5c
 8007bf6:	f000 ff83 	bl	8008b00 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	b1a8      	cbz	r0, 8007c2a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bfe:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8007c00:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c02:	4632      	mov	r2, r6
 8007c04:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c06:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c0c:	9002      	str	r0, [sp, #8]
 8007c0e:	4638      	mov	r0, r7
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	464b      	mov	r3, r9
 8007c18:	f7ff ff1c 	bl	8007a54 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7ff fe39 	bl	8007894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c22:	2001      	movs	r0, #1
	}
 8007c24:	b005      	add	sp, #20
 8007c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f000 fff8 	bl	8008c20 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8007c34:	e7f6      	b.n	8007c24 <xTaskCreate+0x48>
	...

08007c38 <vTaskStartScheduler>:
{
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c3c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c3e:	aa07      	add	r2, sp, #28
 8007c40:	a906      	add	r1, sp, #24
 8007c42:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c44:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c48:	f7ff f946 	bl	8006ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c4c:	9b05      	ldr	r3, [sp, #20]
 8007c4e:	9a07      	ldr	r2, [sp, #28]
 8007c50:	9302      	str	r3, [sp, #8]
 8007c52:	9b06      	ldr	r3, [sp, #24]
 8007c54:	4917      	ldr	r1, [pc, #92]	; (8007cb4 <vTaskStartScheduler+0x7c>)
 8007c56:	4818      	ldr	r0, [pc, #96]	; (8007cb8 <vTaskStartScheduler+0x80>)
 8007c58:	e9cd 4300 	strd	r4, r3, [sp]
 8007c5c:	4623      	mov	r3, r4
 8007c5e:	f7ff ff7f 	bl	8007b60 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007c62:	b1b8      	cbz	r0, 8007c94 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8007c64:	f000 fbc8 	bl	80083f8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007c68:	2801      	cmp	r0, #1
 8007c6a:	d115      	bne.n	8007c98 <vTaskStartScheduler+0x60>
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	b672      	cpsid	i
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c80:	4b0e      	ldr	r3, [pc, #56]	; (8007cbc <vTaskStartScheduler+0x84>)
 8007c82:	f04f 32ff 	mov.w	r2, #4294967295
 8007c86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c88:	4b0d      	ldr	r3, [pc, #52]	; (8007cc0 <vTaskStartScheduler+0x88>)
 8007c8a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <vTaskStartScheduler+0x8c>)
 8007c8e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007c90:	f000 fe7a 	bl	8008988 <xPortStartScheduler>
}
 8007c94:	b008      	add	sp, #32
 8007c96:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d1fb      	bne.n	8007c94 <vTaskStartScheduler+0x5c>
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	b672      	cpsid	i
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	b662      	cpsie	i
 8007cb0:	e7fe      	b.n	8007cb0 <vTaskStartScheduler+0x78>
 8007cb2:	bf00      	nop
 8007cb4:	0800dfc1 	.word	0x0800dfc1
 8007cb8:	080079cd 	.word	0x080079cd
 8007cbc:	20003c80 	.word	0x20003c80
 8007cc0:	20003c9c 	.word	0x20003c9c
 8007cc4:	20003cc8 	.word	0x20003cc8

08007cc8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007cc8:	4a02      	ldr	r2, [pc, #8]	; (8007cd4 <vTaskSuspendAll+0xc>)
 8007cca:	6813      	ldr	r3, [r2, #0]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	6013      	str	r3, [r2, #0]
}
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20003c4c 	.word	0x20003c4c

08007cd8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007cd8:	4b01      	ldr	r3, [pc, #4]	; (8007ce0 <xTaskGetTickCount+0x8>)
 8007cda:	6818      	ldr	r0, [r3, #0]
}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20003cc8 	.word	0x20003cc8

08007ce4 <xTaskIncrementTick>:
{
 8007ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ce8:	4b3c      	ldr	r3, [pc, #240]	; (8007ddc <xTaskIncrementTick+0xf8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d16d      	bne.n	8007dcc <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cf0:	4b3b      	ldr	r3, [pc, #236]	; (8007de0 <xTaskIncrementTick+0xfc>)
 8007cf2:	681c      	ldr	r4, [r3, #0]
 8007cf4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8007cf6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cf8:	b9cc      	cbnz	r4, 8007d2e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007cfa:	4b3a      	ldr	r3, [pc, #232]	; (8007de4 <xTaskIncrementTick+0x100>)
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	6812      	ldr	r2, [r2, #0]
 8007d00:	b152      	cbz	r2, 8007d18 <xTaskIncrementTick+0x34>
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	b672      	cpsid	i
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	b662      	cpsie	i
 8007d16:	e7fe      	b.n	8007d16 <xTaskIncrementTick+0x32>
 8007d18:	4a33      	ldr	r2, [pc, #204]	; (8007de8 <xTaskIncrementTick+0x104>)
 8007d1a:	6819      	ldr	r1, [r3, #0]
 8007d1c:	6810      	ldr	r0, [r2, #0]
 8007d1e:	6018      	str	r0, [r3, #0]
 8007d20:	6011      	str	r1, [r2, #0]
 8007d22:	4a32      	ldr	r2, [pc, #200]	; (8007dec <xTaskIncrementTick+0x108>)
 8007d24:	6813      	ldr	r3, [r2, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	f7ff fe81 	bl	8007a30 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d2e:	4d30      	ldr	r5, [pc, #192]	; (8007df0 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007d30:	f04f 0b00 	mov.w	fp, #0
 8007d34:	4f2f      	ldr	r7, [pc, #188]	; (8007df4 <xTaskIncrementTick+0x110>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d36:	682b      	ldr	r3, [r5, #0]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d911      	bls.n	8007d60 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	4b2e      	ldr	r3, [pc, #184]	; (8007df8 <xTaskIncrementTick+0x114>)
 8007d40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007d42:	2214      	movs	r2, #20
 8007d44:	434a      	muls	r2, r1
 8007d46:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8007d48:	2a02      	cmp	r2, #2
 8007d4a:	bf28      	it	cs
 8007d4c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8007d50:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <xTaskIncrementTick+0x118>)
 8007d52:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8007d54:	2a00      	cmp	r2, #0
}
 8007d56:	bf0c      	ite	eq
 8007d58:	4658      	moveq	r0, fp
 8007d5a:	2001      	movne	r0, #1
 8007d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d60:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007de4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8007d64:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007e04 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d68:	f8d9 2000 	ldr.w	r2, [r9]
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	b91a      	cbnz	r2, 8007d78 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d70:	f04f 32ff 	mov.w	r2, #4294967295
 8007d74:	602a      	str	r2, [r5, #0]
					break;
 8007d76:	e7e1      	b.n	8007d3c <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d78:	f8d9 2000 	ldr.w	r2, [r9]
 8007d7c:	68d2      	ldr	r2, [r2, #12]
 8007d7e:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d80:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007d82:	428c      	cmp	r4, r1
 8007d84:	d201      	bcs.n	8007d8a <xTaskIncrementTick+0xa6>
						xNextTaskUnblockTime = xItemValue;
 8007d86:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d88:	e7d8      	b.n	8007d3c <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d8a:	f106 0804 	add.w	r8, r6, #4
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f7ff f8eb 	bl	8006f6a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d94:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8007d96:	b119      	cbz	r1, 8007da0 <xTaskIncrementTick+0xbc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d98:	f106 0018 	add.w	r0, r6, #24
 8007d9c:	f7ff f8e5 	bl	8006f6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007da0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007da2:	f8da 1000 	ldr.w	r1, [sl]
 8007da6:	4288      	cmp	r0, r1
 8007da8:	d901      	bls.n	8007dae <xTaskIncrementTick+0xca>
 8007daa:	f8ca 0000 	str.w	r0, [sl]
 8007dae:	2214      	movs	r2, #20
 8007db0:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <xTaskIncrementTick+0x114>)
 8007db2:	4641      	mov	r1, r8
 8007db4:	fb02 3000 	mla	r0, r2, r0, r3
 8007db8:	f7ff f8b4 	bl	8006f24 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dbc:	6838      	ldr	r0, [r7, #0]
 8007dbe:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8007dc0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007dc2:	4291      	cmp	r1, r2
 8007dc4:	bf28      	it	cs
 8007dc6:	f04f 0b01 	movcs.w	fp, #1
 8007dca:	e7cd      	b.n	8007d68 <xTaskIncrementTick+0x84>
		++uxPendedTicks;
 8007dcc:	4a0c      	ldr	r2, [pc, #48]	; (8007e00 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007dce:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8007dd2:	6813      	ldr	r3, [r2, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	e7ba      	b.n	8007d50 <xTaskIncrementTick+0x6c>
 8007dda:	bf00      	nop
 8007ddc:	20003c4c 	.word	0x20003c4c
 8007de0:	20003cc8 	.word	0x20003cc8
 8007de4:	200037d8 	.word	0x200037d8
 8007de8:	200037dc 	.word	0x200037dc
 8007dec:	20003c84 	.word	0x20003c84
 8007df0:	20003c80 	.word	0x20003c80
 8007df4:	200037d4 	.word	0x200037d4
 8007df8:	200037e0 	.word	0x200037e0
 8007dfc:	20003ccc 	.word	0x20003ccc
 8007e00:	20003c48 	.word	0x20003c48
 8007e04:	20003c54 	.word	0x20003c54

08007e08 <xTaskResumeAll>:
{
 8007e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8007e0c:	4c30      	ldr	r4, [pc, #192]	; (8007ed0 <xTaskResumeAll+0xc8>)
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	b953      	cbnz	r3, 8007e28 <xTaskResumeAll+0x20>
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	b672      	cpsid	i
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	b662      	cpsie	i
 8007e26:	e7fe      	b.n	8007e26 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8007e28:	f000 fd0c 	bl	8008844 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e32:	6824      	ldr	r4, [r4, #0]
 8007e34:	b12c      	cbz	r4, 8007e42 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8007e36:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007e38:	f000 fd2a 	bl	8008890 <vPortExitCritical>
}
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e42:	4b24      	ldr	r3, [pc, #144]	; (8007ed4 <xTaskResumeAll+0xcc>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f5      	beq.n	8007e36 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e4a:	4d23      	ldr	r5, [pc, #140]	; (8007ed8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8007e4c:	4e23      	ldr	r6, [pc, #140]	; (8007edc <xTaskResumeAll+0xd4>)
 8007e4e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007ef0 <xTaskResumeAll+0xe8>
 8007e52:	e01d      	b.n	8007e90 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e54:	68eb      	ldr	r3, [r5, #12]
 8007e56:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e58:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e5a:	f104 0018 	add.w	r0, r4, #24
 8007e5e:	f7ff f884 	bl	8006f6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e62:	4638      	mov	r0, r7
 8007e64:	f7ff f881 	bl	8006f6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e6a:	6832      	ldr	r2, [r6, #0]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d900      	bls.n	8007e72 <xTaskResumeAll+0x6a>
 8007e70:	6033      	str	r3, [r6, #0]
 8007e72:	2014      	movs	r0, #20
 8007e74:	4639      	mov	r1, r7
 8007e76:	fb00 8003 	mla	r0, r0, r3, r8
 8007e7a:	f7ff f853 	bl	8006f24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e7e:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <xTaskResumeAll+0xd8>)
 8007e80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d302      	bcc.n	8007e90 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <xTaskResumeAll+0xdc>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1de      	bne.n	8007e54 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 8007e96:	b10c      	cbz	r4, 8007e9c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8007e98:	f7ff fdca 	bl	8007a30 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e9c:	4d12      	ldr	r5, [pc, #72]	; (8007ee8 <xTaskResumeAll+0xe0>)
 8007e9e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ea0:	b144      	cbz	r4, 8007eb4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8007ea2:	4e10      	ldr	r6, [pc, #64]	; (8007ee4 <xTaskResumeAll+0xdc>)
 8007ea4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007ea6:	f7ff ff1d 	bl	8007ce4 <xTaskIncrementTick>
 8007eaa:	b100      	cbz	r0, 8007eae <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8007eac:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007eae:	3c01      	subs	r4, #1
 8007eb0:	d1f9      	bne.n	8007ea6 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8007eb2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <xTaskResumeAll+0xdc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0bc      	beq.n	8007e36 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <xTaskResumeAll+0xe4>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007ecc:	2401      	movs	r4, #1
 8007ece:	e7b3      	b.n	8007e38 <xTaskResumeAll+0x30>
 8007ed0:	20003c4c 	.word	0x20003c4c
 8007ed4:	20003c40 	.word	0x20003c40
 8007ed8:	20003c88 	.word	0x20003c88
 8007edc:	20003c54 	.word	0x20003c54
 8007ee0:	200037d4 	.word	0x200037d4
 8007ee4:	20003ccc 	.word	0x20003ccc
 8007ee8:	20003c48 	.word	0x20003c48
 8007eec:	e000ed04 	.word	0xe000ed04
 8007ef0:	200037e0 	.word	0x200037e0

08007ef4 <vTaskDelay>:
	{
 8007ef4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ef6:	b940      	cbnz	r0, 8007f0a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <vTaskDelay+0x44>)
 8007efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	f3bf 8f6f 	isb	sy
	}
 8007f08:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <vTaskDelay+0x48>)
 8007f0c:	6819      	ldr	r1, [r3, #0]
 8007f0e:	b151      	cbz	r1, 8007f26 <vTaskDelay+0x32>
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	b672      	cpsid	i
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	b662      	cpsie	i
 8007f24:	e7fe      	b.n	8007f24 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007f26:	f7ff fecf 	bl	8007cc8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f2a:	f7ff fddf 	bl	8007aec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007f2e:	f7ff ff6b 	bl	8007e08 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d0e0      	beq.n	8007ef8 <vTaskDelay+0x4>
 8007f36:	e7e7      	b.n	8007f08 <vTaskDelay+0x14>
 8007f38:	e000ed04 	.word	0xe000ed04
 8007f3c:	20003c4c 	.word	0x20003c4c

08007f40 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f40:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <vTaskSwitchContext+0x68>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4b19      	ldr	r3, [pc, #100]	; (8007fac <vTaskSwitchContext+0x6c>)
{
 8007f46:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f48:	b112      	cbz	r2, 8007f50 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
}
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8007f50:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f52:	2714      	movs	r7, #20
 8007f54:	4d16      	ldr	r5, [pc, #88]	; (8007fb0 <vTaskSwitchContext+0x70>)
 8007f56:	4a17      	ldr	r2, [pc, #92]	; (8007fb4 <vTaskSwitchContext+0x74>)
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	4616      	mov	r6, r2
 8007f5c:	fb07 f103 	mul.w	r1, r7, r3
 8007f60:	5854      	ldr	r4, [r2, r1]
 8007f62:	1850      	adds	r0, r2, r1
 8007f64:	b18c      	cbz	r4, 8007f8a <vTaskSwitchContext+0x4a>
 8007f66:	6844      	ldr	r4, [r0, #4]
 8007f68:	3108      	adds	r1, #8
 8007f6a:	6864      	ldr	r4, [r4, #4]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	4294      	cmp	r4, r2
 8007f70:	6044      	str	r4, [r0, #4]
 8007f72:	bf04      	itt	eq
 8007f74:	6862      	ldreq	r2, [r4, #4]
 8007f76:	6042      	streq	r2, [r0, #4]
 8007f78:	2214      	movs	r2, #20
 8007f7a:	fb02 6203 	mla	r2, r2, r3, r6
 8007f7e:	6852      	ldr	r2, [r2, #4]
 8007f80:	68d1      	ldr	r1, [r2, #12]
 8007f82:	4a0d      	ldr	r2, [pc, #52]	; (8007fb8 <vTaskSwitchContext+0x78>)
 8007f84:	6011      	str	r1, [r2, #0]
 8007f86:	602b      	str	r3, [r5, #0]
}
 8007f88:	e7e1      	b.n	8007f4e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	b953      	cbnz	r3, 8007fa2 <vTaskSwitchContext+0x62>
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	b672      	cpsid	i
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	b662      	cpsie	i
 8007fa0:	e7fe      	b.n	8007fa0 <vTaskSwitchContext+0x60>
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	e7da      	b.n	8007f5c <vTaskSwitchContext+0x1c>
 8007fa6:	bf00      	nop
 8007fa8:	20003c4c 	.word	0x20003c4c
 8007fac:	20003ccc 	.word	0x20003ccc
 8007fb0:	20003c54 	.word	0x20003c54
 8007fb4:	200037e0 	.word	0x200037e0
 8007fb8:	200037d4 	.word	0x200037d4

08007fbc <vTaskPlaceOnEventList>:
{
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007fc0:	b950      	cbnz	r0, 8007fd8 <vTaskPlaceOnEventList+0x1c>
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	b672      	cpsid	i
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	b662      	cpsie	i
 8007fd6:	e7fe      	b.n	8007fd6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <vTaskPlaceOnEventList+0x34>)
 8007fda:	6819      	ldr	r1, [r3, #0]
 8007fdc:	3118      	adds	r1, #24
 8007fde:	f7fe ffad 	bl	8006f3c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	2101      	movs	r1, #1
}
 8007fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fea:	f7ff bd7f 	b.w	8007aec <prvAddCurrentTaskToDelayedList>
 8007fee:	bf00      	nop
 8007ff0:	200037d4 	.word	0x200037d4

08007ff4 <vTaskPlaceOnEventListRestricted>:
	{
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8007ffa:	b950      	cbnz	r0, 8008012 <vTaskPlaceOnEventListRestricted+0x1e>
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	b672      	cpsid	i
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	b662      	cpsie	i
 8008010:	e7fe      	b.n	8008010 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008012:	4b07      	ldr	r3, [pc, #28]	; (8008030 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008014:	6819      	ldr	r1, [r3, #0]
 8008016:	3118      	adds	r1, #24
 8008018:	f7fe ff84 	bl	8006f24 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800801c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800801e:	4621      	mov	r1, r4
 8008020:	bf0c      	ite	eq
 8008022:	4628      	moveq	r0, r5
 8008024:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800802c:	f7ff bd5e 	b.w	8007aec <prvAddCurrentTaskToDelayedList>
 8008030:	200037d4 	.word	0x200037d4

08008034 <xTaskRemoveFromEventList>:
{
 8008034:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008036:	68c3      	ldr	r3, [r0, #12]
 8008038:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800803a:	b954      	cbnz	r4, 8008052 <xTaskRemoveFromEventList+0x1e>
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	b672      	cpsid	i
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	b662      	cpsie	i
 8008050:	e7fe      	b.n	8008050 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008052:	f104 0518 	add.w	r5, r4, #24
 8008056:	4628      	mov	r0, r5
 8008058:	f7fe ff87 	bl	8006f6a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800805c:	4b11      	ldr	r3, [pc, #68]	; (80080a4 <xTaskRemoveFromEventList+0x70>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	b9d3      	cbnz	r3, 8008098 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008062:	1d25      	adds	r5, r4, #4
 8008064:	4628      	mov	r0, r5
 8008066:	f7fe ff80 	bl	8006f6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800806a:	4a0f      	ldr	r2, [pc, #60]	; (80080a8 <xTaskRemoveFromEventList+0x74>)
 800806c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800806e:	6811      	ldr	r1, [r2, #0]
 8008070:	428b      	cmp	r3, r1
 8008072:	d900      	bls.n	8008076 <xTaskRemoveFromEventList+0x42>
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	4a0d      	ldr	r2, [pc, #52]	; (80080ac <xTaskRemoveFromEventList+0x78>)
 8008078:	2014      	movs	r0, #20
 800807a:	4629      	mov	r1, r5
 800807c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008080:	f7fe ff50 	bl	8006f24 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <xTaskRemoveFromEventList+0x7c>)
 8008086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	429a      	cmp	r2, r3
 800808e:	d906      	bls.n	800809e <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 8008090:	2001      	movs	r0, #1
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <xTaskRemoveFromEventList+0x80>)
 8008094:	6018      	str	r0, [r3, #0]
}
 8008096:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008098:	4629      	mov	r1, r5
 800809a:	4807      	ldr	r0, [pc, #28]	; (80080b8 <xTaskRemoveFromEventList+0x84>)
 800809c:	e7f0      	b.n	8008080 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 800809e:	2000      	movs	r0, #0
	return xReturn;
 80080a0:	e7f9      	b.n	8008096 <xTaskRemoveFromEventList+0x62>
 80080a2:	bf00      	nop
 80080a4:	20003c4c 	.word	0x20003c4c
 80080a8:	20003c54 	.word	0x20003c54
 80080ac:	200037e0 	.word	0x200037e0
 80080b0:	200037d4 	.word	0x200037d4
 80080b4:	20003ccc 	.word	0x20003ccc
 80080b8:	20003c88 	.word	0x20003c88

080080bc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080bc:	4b03      	ldr	r3, [pc, #12]	; (80080cc <vTaskInternalSetTimeOutState+0x10>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080c2:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <vTaskInternalSetTimeOutState+0x14>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6043      	str	r3, [r0, #4]
}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20003c84 	.word	0x20003c84
 80080d0:	20003cc8 	.word	0x20003cc8

080080d4 <xTaskCheckForTimeOut>:
{
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80080d8:	4605      	mov	r5, r0
 80080da:	b950      	cbnz	r0, 80080f2 <xTaskCheckForTimeOut+0x1e>
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	b672      	cpsid	i
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	b662      	cpsie	i
 80080f0:	e7fe      	b.n	80080f0 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80080f2:	b951      	cbnz	r1, 800810a <xTaskCheckForTimeOut+0x36>
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	e7fe      	b.n	8008108 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800810a:	f000 fb9b 	bl	8008844 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008110:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8008112:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008114:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008116:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8008118:	1c5e      	adds	r6, r3, #1
 800811a:	d00d      	beq.n	8008138 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800811c:	4e0c      	ldr	r6, [pc, #48]	; (8008150 <xTaskCheckForTimeOut+0x7c>)
 800811e:	682f      	ldr	r7, [r5, #0]
 8008120:	6836      	ldr	r6, [r6, #0]
 8008122:	42b7      	cmp	r7, r6
 8008124:	d001      	beq.n	800812a <xTaskCheckForTimeOut+0x56>
 8008126:	4288      	cmp	r0, r1
 8008128:	d90d      	bls.n	8008146 <xTaskCheckForTimeOut+0x72>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800812a:	4293      	cmp	r3, r2
 800812c:	d909      	bls.n	8008142 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 800812e:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008130:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8008132:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008134:	f7ff ffc2 	bl	80080bc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008138:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800813a:	f000 fba9 	bl	8008890 <vPortExitCritical>
}
 800813e:	4620      	mov	r0, r4
 8008140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008146:	2401      	movs	r4, #1
 8008148:	e7f7      	b.n	800813a <xTaskCheckForTimeOut+0x66>
 800814a:	bf00      	nop
 800814c:	20003cc8 	.word	0x20003cc8
 8008150:	20003c84 	.word	0x20003c84

08008154 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008154:	4b01      	ldr	r3, [pc, #4]	; (800815c <vTaskMissedYield+0x8>)
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
}
 800815a:	4770      	bx	lr
 800815c:	20003ccc 	.word	0x20003ccc

08008160 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008160:	4b01      	ldr	r3, [pc, #4]	; (8008168 <xTaskGetCurrentTaskHandle+0x8>)
 8008162:	6818      	ldr	r0, [r3, #0]
	}
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	200037d4 	.word	0x200037d4

0800816c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800816c:	4b05      	ldr	r3, [pc, #20]	; (8008184 <xTaskGetSchedulerState+0x18>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	b133      	cbz	r3, 8008180 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <xTaskGetSchedulerState+0x1c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8008178:	bf0c      	ite	eq
 800817a:	2002      	moveq	r0, #2
 800817c:	2000      	movne	r0, #0
 800817e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008180:	2001      	movs	r0, #1
	}
 8008182:	4770      	bx	lr
 8008184:	20003c9c 	.word	0x20003c9c
 8008188:	20003c4c 	.word	0x20003c4c

0800818c <xTaskPriorityInherit>:
	{
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800818e:	4604      	mov	r4, r0
 8008190:	b340      	cbz	r0, 80081e4 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008192:	4a1b      	ldr	r2, [pc, #108]	; (8008200 <xTaskPriorityInherit+0x74>)
 8008194:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008196:	6811      	ldr	r1, [r2, #0]
 8008198:	4616      	mov	r6, r2
 800819a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800819c:	428b      	cmp	r3, r1
 800819e:	d226      	bcs.n	80081ee <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081a0:	6982      	ldr	r2, [r0, #24]
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	db04      	blt.n	80081b0 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a6:	6832      	ldr	r2, [r6, #0]
 80081a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081aa:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80081ae:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80081b0:	2214      	movs	r2, #20
 80081b2:	4d14      	ldr	r5, [pc, #80]	; (8008204 <xTaskPriorityInherit+0x78>)
 80081b4:	fb02 5303 	mla	r3, r2, r3, r5
 80081b8:	6962      	ldr	r2, [r4, #20]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d113      	bne.n	80081e6 <xTaskPriorityInherit+0x5a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081be:	1d27      	adds	r7, r4, #4
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7fe fed2 	bl	8006f6a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081c6:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081c8:	4a0f      	ldr	r2, [pc, #60]	; (8008208 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081cc:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081ce:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081d0:	428b      	cmp	r3, r1
 80081d2:	d900      	bls.n	80081d6 <xTaskPriorityInherit+0x4a>
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	2014      	movs	r0, #20
 80081d8:	4639      	mov	r1, r7
 80081da:	fb00 5003 	mla	r0, r0, r3, r5
 80081de:	f7fe fea1 	bl	8006f24 <vListInsertEnd>
				xReturn = pdTRUE;
 80081e2:	2001      	movs	r0, #1
	}
 80081e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081e6:	6833      	ldr	r3, [r6, #0]
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ec:	e7f9      	b.n	80081e2 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80081f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80081f4:	42a0      	cmp	r0, r4
 80081f6:	bf2c      	ite	cs
 80081f8:	2000      	movcs	r0, #0
 80081fa:	2001      	movcc	r0, #1
 80081fc:	e7f2      	b.n	80081e4 <xTaskPriorityInherit+0x58>
 80081fe:	bf00      	nop
 8008200:	200037d4 	.word	0x200037d4
 8008204:	200037e0 	.word	0x200037e0
 8008208:	20003c54 	.word	0x20003c54

0800820c <xTaskPriorityDisinherit>:
	{
 800820c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800820e:	b908      	cbnz	r0, 8008214 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008210:	2000      	movs	r0, #0
	}
 8008212:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008214:	4b1d      	ldr	r3, [pc, #116]	; (800828c <xTaskPriorityDisinherit+0x80>)
 8008216:	681c      	ldr	r4, [r3, #0]
 8008218:	4284      	cmp	r4, r0
 800821a:	d00a      	beq.n	8008232 <xTaskPriorityDisinherit+0x26>
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	e7fe      	b.n	8008230 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8008232:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008234:	b953      	cbnz	r3, 800824c <xTaskPriorityDisinherit+0x40>
 8008236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823a:	b672      	cpsid	i
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	b662      	cpsie	i
 800824a:	e7fe      	b.n	800824a <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800824c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800824e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008250:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008252:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008254:	4291      	cmp	r1, r2
 8008256:	d0db      	beq.n	8008210 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1d9      	bne.n	8008210 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800825c:	1d25      	adds	r5, r4, #4
 800825e:	4628      	mov	r0, r5
 8008260:	f7fe fe83 	bl	8006f6a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008264:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800826a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800826e:	4a08      	ldr	r2, [pc, #32]	; (8008290 <xTaskPriorityDisinherit+0x84>)
 8008270:	6811      	ldr	r1, [r2, #0]
 8008272:	428b      	cmp	r3, r1
 8008274:	d900      	bls.n	8008278 <xTaskPriorityDisinherit+0x6c>
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	4a06      	ldr	r2, [pc, #24]	; (8008294 <xTaskPriorityDisinherit+0x88>)
 800827a:	2014      	movs	r0, #20
 800827c:	4629      	mov	r1, r5
 800827e:	fb00 2003 	mla	r0, r0, r3, r2
 8008282:	f7fe fe4f 	bl	8006f24 <vListInsertEnd>
					xReturn = pdTRUE;
 8008286:	2001      	movs	r0, #1
		return xReturn;
 8008288:	e7c3      	b.n	8008212 <xTaskPriorityDisinherit+0x6>
 800828a:	bf00      	nop
 800828c:	200037d4 	.word	0x200037d4
 8008290:	20003c54 	.word	0x20003c54
 8008294:	200037e0 	.word	0x200037e0

08008298 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008298:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800829a:	4604      	mov	r4, r0
 800829c:	2800      	cmp	r0, #0
 800829e:	d046      	beq.n	800832e <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 80082a0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80082a2:	b952      	cbnz	r2, 80082ba <vTaskPriorityDisinheritAfterTimeout+0x22>
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	b672      	cpsid	i
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	b662      	cpsie	i
 80082b8:	e7fe      	b.n	80082b8 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80082ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80082bc:	4299      	cmp	r1, r3
 80082be:	bf38      	it	cc
 80082c0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80082c4:	428b      	cmp	r3, r1
 80082c6:	d032      	beq.n	800832e <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082c8:	2a01      	cmp	r2, #1
 80082ca:	d130      	bne.n	800832e <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 80082cc:	4a18      	ldr	r2, [pc, #96]	; (8008330 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80082ce:	6812      	ldr	r2, [r2, #0]
 80082d0:	4282      	cmp	r2, r0
 80082d2:	d10a      	bne.n	80082ea <vTaskPriorityDisinheritAfterTimeout+0x52>
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
 80082e8:	e7fe      	b.n	80082e8 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082ea:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082ec:	4d11      	ldr	r5, [pc, #68]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082ee:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082f0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 80082f4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082f6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082fa:	bfa8      	it	ge
 80082fc:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008300:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008302:	bfa8      	it	ge
 8008304:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008306:	429a      	cmp	r2, r3
 8008308:	d111      	bne.n	800832e <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800830a:	1d06      	adds	r6, r0, #4
 800830c:	4630      	mov	r0, r6
 800830e:	f7fe fe2c 	bl	8006f6a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008312:	4a09      	ldr	r2, [pc, #36]	; (8008338 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008316:	6811      	ldr	r1, [r2, #0]
 8008318:	428b      	cmp	r3, r1
 800831a:	d900      	bls.n	800831e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	2014      	movs	r0, #20
 8008320:	4631      	mov	r1, r6
 8008322:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8008326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800832a:	f7fe bdfb 	b.w	8006f24 <vListInsertEnd>
	}
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	200037d4 	.word	0x200037d4
 8008334:	200037e0 	.word	0x200037e0
 8008338:	20003c54 	.word	0x20003c54

0800833c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800833c:	4b04      	ldr	r3, [pc, #16]	; (8008350 <pvTaskIncrementMutexHeldCount+0x14>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	b11a      	cbz	r2, 800834a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008346:	3201      	adds	r2, #1
 8008348:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800834a:	6818      	ldr	r0, [r3, #0]
	}
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	200037d4 	.word	0x200037d4

08008354 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008356:	4c11      	ldr	r4, [pc, #68]	; (800839c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008358:	f000 fa74 	bl	8008844 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	b9bd      	cbnz	r5, 8008390 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008360:	4f0f      	ldr	r7, [pc, #60]	; (80083a0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008362:	4e10      	ldr	r6, [pc, #64]	; (80083a4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008364:	4638      	mov	r0, r7
 8008366:	f7fe fdcf 	bl	8006f08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800836a:	4630      	mov	r0, r6
 800836c:	f7fe fdcc 	bl	8006f08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008370:	4b0d      	ldr	r3, [pc, #52]	; (80083a8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008372:	4a0e      	ldr	r2, [pc, #56]	; (80083ac <prvCheckForValidListAndQueue+0x58>)
 8008374:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8008376:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008378:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800837a:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <prvCheckForValidListAndQueue+0x5c>)
 800837c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800837e:	9500      	str	r5, [sp, #0]
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <prvCheckForValidListAndQueue+0x60>)
 8008382:	f7fe fed1 	bl	8007128 <xQueueGenericCreateStatic>
 8008386:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008388:	b110      	cbz	r0, 8008390 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800838a:	490b      	ldr	r1, [pc, #44]	; (80083b8 <prvCheckForValidListAndQueue+0x64>)
 800838c:	f7ff fa4c 	bl	8007828 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008390:	b003      	add	sp, #12
 8008392:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008396:	f000 ba7b 	b.w	8008890 <vPortExitCritical>
 800839a:	bf00      	nop
 800839c:	20003df4 	.word	0x20003df4
 80083a0:	20003d78 	.word	0x20003d78
 80083a4:	20003d8c 	.word	0x20003d8c
 80083a8:	20003cd0 	.word	0x20003cd0
 80083ac:	20003cd8 	.word	0x20003cd8
 80083b0:	20003cd4 	.word	0x20003cd4
 80083b4:	20003da4 	.word	0x20003da4
 80083b8:	0800dfc6 	.word	0x0800dfc6

080083bc <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80083bc:	4291      	cmp	r1, r2
{
 80083be:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083c0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083c2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80083c4:	d80a      	bhi.n	80083dc <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c6:	1ad2      	subs	r2, r2, r3
 80083c8:	6983      	ldr	r3, [r0, #24]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d20d      	bcs.n	80083ea <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083ce:	1d01      	adds	r1, r0, #4
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	f7fe fdb2 	bl	8006f3c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80083d8:	2000      	movs	r0, #0
}
 80083da:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083dc:	429a      	cmp	r2, r3
 80083de:	d201      	bcs.n	80083e4 <prvInsertTimerInActiveList+0x28>
 80083e0:	4299      	cmp	r1, r3
 80083e2:	d202      	bcs.n	80083ea <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083e4:	1d01      	adds	r1, r0, #4
 80083e6:	4b03      	ldr	r3, [pc, #12]	; (80083f4 <prvInsertTimerInActiveList+0x38>)
 80083e8:	e7f3      	b.n	80083d2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80083ea:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80083ec:	e7f5      	b.n	80083da <prvInsertTimerInActiveList+0x1e>
 80083ee:	bf00      	nop
 80083f0:	20003cd4 	.word	0x20003cd4
 80083f4:	20003cd0 	.word	0x20003cd0

080083f8 <xTimerCreateTimerTask>:
{
 80083f8:	b510      	push	{r4, lr}
 80083fa:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80083fc:	f7ff ffaa 	bl	8008354 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008400:	4b13      	ldr	r3, [pc, #76]	; (8008450 <xTimerCreateTimerTask+0x58>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	b1b3      	cbz	r3, 8008434 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008406:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008408:	aa07      	add	r2, sp, #28
 800840a:	a906      	add	r1, sp, #24
 800840c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800840e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008412:	f7fe fd6d 	bl	8006ef0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008416:	9b05      	ldr	r3, [sp, #20]
 8008418:	9a07      	ldr	r2, [sp, #28]
 800841a:	9302      	str	r3, [sp, #8]
 800841c:	9b06      	ldr	r3, [sp, #24]
 800841e:	490d      	ldr	r1, [pc, #52]	; (8008454 <xTimerCreateTimerTask+0x5c>)
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	2302      	movs	r3, #2
 8008424:	480c      	ldr	r0, [pc, #48]	; (8008458 <xTimerCreateTimerTask+0x60>)
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	4623      	mov	r3, r4
 800842a:	f7ff fb99 	bl	8007b60 <xTaskCreateStatic>
 800842e:	4b0b      	ldr	r3, [pc, #44]	; (800845c <xTimerCreateTimerTask+0x64>)
 8008430:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008432:	b950      	cbnz	r0, 800844a <xTimerCreateTimerTask+0x52>
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	b672      	cpsid	i
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	b662      	cpsie	i
 8008448:	e7fe      	b.n	8008448 <xTimerCreateTimerTask+0x50>
}
 800844a:	2001      	movs	r0, #1
 800844c:	b008      	add	sp, #32
 800844e:	bd10      	pop	{r4, pc}
 8008450:	20003df4 	.word	0x20003df4
 8008454:	0800dfcb 	.word	0x0800dfcb
 8008458:	08008541 	.word	0x08008541
 800845c:	20003df8 	.word	0x20003df8

08008460 <xTimerGenericCommand>:
{
 8008460:	b530      	push	{r4, r5, lr}
 8008462:	4615      	mov	r5, r2
 8008464:	b085      	sub	sp, #20
 8008466:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008468:	4603      	mov	r3, r0
 800846a:	b950      	cbnz	r0, 8008482 <xTimerGenericCommand+0x22>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	e7fe      	b.n	8008480 <xTimerGenericCommand+0x20>
	if( xTimerQueue != NULL )
 8008482:	4c0d      	ldr	r4, [pc, #52]	; (80084b8 <xTimerGenericCommand+0x58>)
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	b178      	cbz	r0, 80084a8 <xTimerGenericCommand+0x48>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008488:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800848a:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800848c:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008490:	dc0c      	bgt.n	80084ac <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008492:	f7ff fe6b 	bl	800816c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008496:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008498:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800849a:	4669      	mov	r1, sp
 800849c:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800849e:	bf0c      	ite	eq
 80084a0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084a2:	461a      	movne	r2, r3
 80084a4:	f7fe fec2 	bl	800722c <xQueueGenericSend>
}
 80084a8:	b005      	add	sp, #20
 80084aa:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084ac:	2300      	movs	r3, #0
 80084ae:	4669      	mov	r1, sp
 80084b0:	f7fe ffbd 	bl	800742e <xQueueGenericSendFromISR>
 80084b4:	e7f8      	b.n	80084a8 <xTimerGenericCommand+0x48>
 80084b6:	bf00      	nop
 80084b8:	20003df4 	.word	0x20003df4

080084bc <prvSwitchTimerLists>:
{
 80084bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084c0:	4d1d      	ldr	r5, [pc, #116]	; (8008538 <prvSwitchTimerLists+0x7c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	b932      	cbnz	r2, 80084da <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80084cc:	4a1b      	ldr	r2, [pc, #108]	; (800853c <prvSwitchTimerLists+0x80>)
 80084ce:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084d0:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80084d2:	6029      	str	r1, [r5, #0]
}
 80084d4:	b002      	add	sp, #8
 80084d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084da:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084dc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084de:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e0:	1d27      	adds	r7, r4, #4
 80084e2:	4638      	mov	r0, r7
 80084e4:	f7fe fd41 	bl	8006f6a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084e8:	6a23      	ldr	r3, [r4, #32]
 80084ea:	4620      	mov	r0, r4
 80084ec:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80084f2:	075b      	lsls	r3, r3, #29
 80084f4:	d5e7      	bpl.n	80084c6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084f6:	69a3      	ldr	r3, [r4, #24]
 80084f8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80084fa:	429e      	cmp	r6, r3
 80084fc:	d206      	bcs.n	800850c <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084fe:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008500:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008502:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008504:	6828      	ldr	r0, [r5, #0]
 8008506:	f7fe fd19 	bl	8006f3c <vListInsert>
 800850a:	e7dc      	b.n	80084c6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800850c:	2300      	movs	r3, #0
 800850e:	f8cd 8000 	str.w	r8, [sp]
 8008512:	4632      	mov	r2, r6
 8008514:	4620      	mov	r0, r4
 8008516:	4619      	mov	r1, r3
 8008518:	f7ff ffa2 	bl	8008460 <xTimerGenericCommand>
				configASSERT( xResult );
 800851c:	2800      	cmp	r0, #0
 800851e:	d1d2      	bne.n	80084c6 <prvSwitchTimerLists+0xa>
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	b672      	cpsid	i
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	b662      	cpsie	i
 8008534:	e7fe      	b.n	8008534 <prvSwitchTimerLists+0x78>
 8008536:	bf00      	nop
 8008538:	20003cd0 	.word	0x20003cd0
 800853c:	20003cd4 	.word	0x20003cd4

08008540 <prvTimerTask>:
{
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008544:	4d84      	ldr	r5, [pc, #528]	; (8008758 <prvTimerTask+0x218>)
{
 8008546:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8008548:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8008764 <prvTimerTask+0x224>
 800854c:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800854e:	682a      	ldr	r2, [r5, #0]
 8008550:	6813      	ldr	r3, [r2, #0]
 8008552:	b353      	cbz	r3, 80085aa <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008554:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008556:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008558:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 800855c:	f8df b208 	ldr.w	fp, [pc, #520]	; 8008768 <prvTimerTask+0x228>
	vTaskSuspendAll();
 8008560:	f7ff fbb2 	bl	8007cc8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008564:	f7ff fbb8 	bl	8007cd8 <xTaskGetTickCount>
 8008568:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800856a:	f8db 3000 	ldr.w	r3, [fp]
 800856e:	465e      	mov	r6, fp
 8008570:	4298      	cmp	r0, r3
 8008572:	d31d      	bcc.n	80085b0 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8008574:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008578:	b32c      	cbz	r4, 80085c6 <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800857a:	4b78      	ldr	r3, [pc, #480]	; (800875c <prvTimerTask+0x21c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	fab2 f282 	clz	r2, r2
 8008584:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008586:	4b76      	ldr	r3, [pc, #472]	; (8008760 <prvTimerTask+0x220>)
 8008588:	eba9 010a 	sub.w	r1, r9, sl
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f7ff f95d 	bl	800784c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008592:	f7ff fc39 	bl	8007e08 <xTaskResumeAll>
 8008596:	b988      	cbnz	r0, 80085bc <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 8008598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800859c:	f8c8 3000 	str.w	r3, [r8]
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	e008      	b.n	80085bc <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085aa:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 80085ac:	4699      	mov	r9, r3
 80085ae:	e7d5      	b.n	800855c <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 80085b0:	f7ff ff84 	bl	80084bc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80085b4:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 80085b8:	f7ff fc26 	bl	8007e08 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085bc:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8008760 <prvTimerTask+0x220>
 80085c0:	f04f 0a00 	mov.w	sl, #0
 80085c4:	e083      	b.n	80086ce <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085c6:	4581      	cmp	r9, r0
 80085c8:	d832      	bhi.n	8008630 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 80085ca:	f7ff fc1d 	bl	8007e08 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085d6:	f10b 0004 	add.w	r0, fp, #4
 80085da:	f7fe fcc6 	bl	8006f6a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085de:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 80085e2:	0758      	lsls	r0, r3, #29
 80085e4:	d51b      	bpl.n	800861e <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085e6:	f8db 1018 	ldr.w	r1, [fp, #24]
 80085ea:	464b      	mov	r3, r9
 80085ec:	4652      	mov	r2, sl
 80085ee:	4658      	mov	r0, fp
 80085f0:	4449      	add	r1, r9
 80085f2:	f7ff fee3 	bl	80083bc <prvInsertTimerInActiveList>
 80085f6:	b1b0      	cbz	r0, 8008626 <prvTimerTask+0xe6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085f8:	9400      	str	r4, [sp, #0]
 80085fa:	4623      	mov	r3, r4
 80085fc:	464a      	mov	r2, r9
 80085fe:	4621      	mov	r1, r4
 8008600:	4658      	mov	r0, fp
 8008602:	f7ff ff2d 	bl	8008460 <xTimerGenericCommand>
			configASSERT( xResult );
 8008606:	b970      	cbnz	r0, 8008626 <prvTimerTask+0xe6>
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	b672      	cpsid	i
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	b662      	cpsie	i
 800861c:	e7fe      	b.n	800861c <prvTimerTask+0xdc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800861e:	f023 0301 	bic.w	r3, r3, #1
 8008622:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008626:	f8db 3020 	ldr.w	r3, [fp, #32]
 800862a:	4658      	mov	r0, fp
 800862c:	4798      	blx	r3
 800862e:	e7c5      	b.n	80085bc <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008630:	4622      	mov	r2, r4
 8008632:	e7a8      	b.n	8008586 <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008634:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008638:	465a      	mov	r2, fp
 800863a:	69a1      	ldr	r1, [r4, #24]
 800863c:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008646:	9b03      	ldr	r3, [sp, #12]
 8008648:	4419      	add	r1, r3
 800864a:	f7ff feb7 	bl	80083bc <prvInsertTimerInActiveList>
 800864e:	2800      	cmp	r0, #0
 8008650:	d03d      	beq.n	80086ce <prvTimerTask+0x18e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008652:	6a23      	ldr	r3, [r4, #32]
 8008654:	4620      	mov	r0, r4
 8008656:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008658:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800865c:	0759      	lsls	r1, r3, #29
 800865e:	d536      	bpl.n	80086ce <prvTimerTask+0x18e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008660:	69a2      	ldr	r2, [r4, #24]
 8008662:	2300      	movs	r3, #0
 8008664:	9903      	ldr	r1, [sp, #12]
 8008666:	4620      	mov	r0, r4
 8008668:	f8cd a000 	str.w	sl, [sp]
 800866c:	440a      	add	r2, r1
 800866e:	4619      	mov	r1, r3
 8008670:	f7ff fef6 	bl	8008460 <xTimerGenericCommand>
							configASSERT( xResult );
 8008674:	bb58      	cbnz	r0, 80086ce <prvTimerTask+0x18e>
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	b672      	cpsid	i
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	b662      	cpsie	i
 800868a:	e7fe      	b.n	800868a <prvTimerTask+0x14a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800868c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008690:	f023 0301 	bic.w	r3, r3, #1
 8008694:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8008698:	e019      	b.n	80086ce <prvTimerTask+0x18e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800869a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800869e:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086a0:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086a4:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086aa:	b951      	cbnz	r1, 80086c2 <prvTimerTask+0x182>
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	b672      	cpsid	i
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	b662      	cpsie	i
 80086c0:	e7fe      	b.n	80086c0 <prvTimerTask+0x180>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086c2:	465b      	mov	r3, fp
 80086c4:	465a      	mov	r2, fp
 80086c6:	4459      	add	r1, fp
 80086c8:	4620      	mov	r0, r4
 80086ca:	f7ff fe77 	bl	80083bc <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086ce:	2200      	movs	r2, #0
 80086d0:	a902      	add	r1, sp, #8
 80086d2:	f8d9 0000 	ldr.w	r0, [r9]
 80086d6:	f7fe ff13 	bl	8007500 <xQueueReceive>
 80086da:	2800      	cmp	r0, #0
 80086dc:	f43f af37 	beq.w	800854e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da03      	bge.n	80086ee <prvTimerTask+0x1ae>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ec:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dbec      	blt.n	80086ce <prvTimerTask+0x18e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086f4:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086f6:	6963      	ldr	r3, [r4, #20]
 80086f8:	b113      	cbz	r3, 8008700 <prvTimerTask+0x1c0>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086fa:	1d20      	adds	r0, r4, #4
 80086fc:	f7fe fc35 	bl	8006f6a <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008700:	f7ff faea 	bl	8007cd8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008704:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8008706:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8008708:	4298      	cmp	r0, r3
 800870a:	d201      	bcs.n	8008710 <prvTimerTask+0x1d0>
		prvSwitchTimerLists();
 800870c:	f7ff fed6 	bl	80084bc <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8008710:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8008712:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 8008716:	2b09      	cmp	r3, #9
 8008718:	d8d9      	bhi.n	80086ce <prvTimerTask+0x18e>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <prvTimerTask+0x1e0>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008635 	.word	0x08008635
 8008724:	08008635 	.word	0x08008635
 8008728:	08008635 	.word	0x08008635
 800872c:	0800868d 	.word	0x0800868d
 8008730:	0800869b 	.word	0x0800869b
 8008734:	08008749 	.word	0x08008749
 8008738:	08008635 	.word	0x08008635
 800873c:	08008635 	.word	0x08008635
 8008740:	0800868d 	.word	0x0800868d
 8008744:	0800869b 	.word	0x0800869b
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008748:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800874c:	079a      	lsls	r2, r3, #30
 800874e:	d49f      	bmi.n	8008690 <prvTimerTask+0x150>
							vPortFree( pxTimer );
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fa65 	bl	8008c20 <vPortFree>
 8008756:	e7ba      	b.n	80086ce <prvTimerTask+0x18e>
 8008758:	20003cd0 	.word	0x20003cd0
 800875c:	20003cd4 	.word	0x20003cd4
 8008760:	20003df4 	.word	0x20003df4
 8008764:	e000ed04 	.word	0xe000ed04
 8008768:	20003da0 	.word	0x20003da0

0800876c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800876c:	2300      	movs	r3, #0
{
 800876e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008770:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <prvTaskExitError+0x44>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	d00a      	beq.n	8008790 <prvTaskExitError+0x24>
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	b672      	cpsid	i
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	b662      	cpsie	i
 800878e:	e7fe      	b.n	800878e <prvTaskExitError+0x22>
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	b672      	cpsid	i
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0fc      	beq.n	80087a4 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087aa:	b002      	add	sp, #8
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	200027e8 	.word	0x200027e8

080087b4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087b4:	4808      	ldr	r0, [pc, #32]	; (80087d8 <prvPortStartFirstTask+0x24>)
 80087b6:	6800      	ldr	r0, [r0, #0]
 80087b8:	6800      	ldr	r0, [r0, #0]
 80087ba:	f380 8808 	msr	MSP, r0
 80087be:	f04f 0000 	mov.w	r0, #0
 80087c2:	f380 8814 	msr	CONTROL, r0
 80087c6:	b662      	cpsie	i
 80087c8:	b661      	cpsie	f
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	df00      	svc	0
 80087d4:	bf00      	nop
 80087d6:	0000      	.short	0x0000
 80087d8:	e000ed08 	.word	0xe000ed08

080087dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80087ec <vPortEnableVFP+0x10>
 80087e0:	6801      	ldr	r1, [r0, #0]
 80087e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80087e6:	6001      	str	r1, [r0, #0]
 80087e8:	4770      	bx	lr
 80087ea:	0000      	.short	0x0000
 80087ec:	e000ed88 	.word	0xe000ed88

080087f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087f4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087f8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80087fc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087fe:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008800:	4b03      	ldr	r3, [pc, #12]	; (8008810 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008802:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008804:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008806:	f06f 0302 	mvn.w	r3, #2
 800880a:	6203      	str	r3, [r0, #32]
}
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	0800876d 	.word	0x0800876d
	...

08008820 <SVC_Handler>:
	__asm volatile (
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <pxCurrentTCBConst2>)
 8008822:	6819      	ldr	r1, [r3, #0]
 8008824:	6808      	ldr	r0, [r1, #0]
 8008826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882a:	f380 8809 	msr	PSP, r0
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f04f 0000 	mov.w	r0, #0
 8008836:	f380 8811 	msr	BASEPRI, r0
 800883a:	4770      	bx	lr
 800883c:	f3af 8000 	nop.w

08008840 <pxCurrentTCBConst2>:
 8008840:	200037d4 	.word	0x200037d4

08008844 <vPortEnterCritical>:
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	b672      	cpsid	i
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	b662      	cpsie	i
	uxCriticalNesting++;
 8008858:	4a0b      	ldr	r2, [pc, #44]	; (8008888 <vPortEnterCritical+0x44>)
 800885a:	6813      	ldr	r3, [r2, #0]
 800885c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800885e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008862:	d10f      	bne.n	8008884 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <vPortEnterCritical+0x48>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f013 0fff 	tst.w	r3, #255	; 0xff
 800886c:	d00a      	beq.n	8008884 <vPortEnterCritical+0x40>
 800886e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008872:	b672      	cpsid	i
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	b662      	cpsie	i
 8008882:	e7fe      	b.n	8008882 <vPortEnterCritical+0x3e>
}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	200027e8 	.word	0x200027e8
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008890:	4a09      	ldr	r2, [pc, #36]	; (80088b8 <vPortExitCritical+0x28>)
 8008892:	6813      	ldr	r3, [r2, #0]
 8008894:	b953      	cbnz	r3, 80088ac <vPortExitCritical+0x1c>
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	b672      	cpsid	i
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	b662      	cpsie	i
 80088aa:	e7fe      	b.n	80088aa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80088ac:	3b01      	subs	r3, #1
 80088ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088b0:	b90b      	cbnz	r3, 80088b6 <vPortExitCritical+0x26>
	__asm volatile
 80088b2:	f383 8811 	msr	BASEPRI, r3
}
 80088b6:	4770      	bx	lr
 80088b8:	200027e8 	.word	0x200027e8
 80088bc:	00000000 	.word	0x00000000

080088c0 <PendSV_Handler>:
	__asm volatile
 80088c0:	f3ef 8009 	mrs	r0, PSP
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4b15      	ldr	r3, [pc, #84]	; (8008920 <pxCurrentTCBConst>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f01e 0f10 	tst.w	lr, #16
 80088d0:	bf08      	it	eq
 80088d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	6010      	str	r0, [r2, #0]
 80088dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088e4:	b672      	cpsid	i
 80088e6:	f380 8811 	msr	BASEPRI, r0
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	b662      	cpsie	i
 80088f4:	f7ff fb24 	bl	8007f40 <vTaskSwitchContext>
 80088f8:	f04f 0000 	mov.w	r0, #0
 80088fc:	f380 8811 	msr	BASEPRI, r0
 8008900:	bc09      	pop	{r0, r3}
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	f01e 0f10 	tst.w	lr, #16
 800890e:	bf08      	it	eq
 8008910:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008914:	f380 8809 	msr	PSP, r0
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <pxCurrentTCBConst>:
 8008920:	200037d4 	.word	0x200037d4

08008924 <xPortSysTickHandler>:
{
 8008924:	b508      	push	{r3, lr}
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	b672      	cpsid	i
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800893a:	f7ff f9d3 	bl	8007ce4 <xTaskIncrementTick>
 800893e:	b118      	cbz	r0, 8008948 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008940:	4b03      	ldr	r3, [pc, #12]	; (8008950 <xPortSysTickHandler+0x2c>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008948:	2300      	movs	r3, #0
 800894a:	f383 8811 	msr	BASEPRI, r3
}
 800894e:	bd08      	pop	{r3, pc}
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008954:	2300      	movs	r3, #0
 8008956:	4a08      	ldr	r2, [pc, #32]	; (8008978 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008958:	4908      	ldr	r1, [pc, #32]	; (800897c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800895a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800895c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800895e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008962:	4b07      	ldr	r3, [pc, #28]	; (8008980 <vPortSetupTimerInterrupt+0x2c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	fbb3 f3f1 	udiv	r3, r3, r1
 800896a:	4906      	ldr	r1, [pc, #24]	; (8008984 <vPortSetupTimerInterrupt+0x30>)
 800896c:	3b01      	subs	r3, #1
 800896e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008970:	2307      	movs	r3, #7
 8008972:	6013      	str	r3, [r2, #0]
}
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	e000e010 	.word	0xe000e010
 800897c:	e000e018 	.word	0xe000e018
 8008980:	20000018 	.word	0x20000018
 8008984:	e000e014 	.word	0xe000e014

08008988 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008988:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <xPortStartScheduler+0xb4>)
{
 800898a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800898c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800898e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008994:	22ff      	movs	r2, #255	; 0xff
 8008996:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008998:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800899a:	4a29      	ldr	r2, [pc, #164]	; (8008a40 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80089a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089aa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ac:	2207      	movs	r2, #7
 80089ae:	4b25      	ldr	r3, [pc, #148]	; (8008a44 <xPortStartScheduler+0xbc>)
 80089b0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089b2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80089b6:	1e54      	subs	r4, r2, #1
 80089b8:	0600      	lsls	r0, r0, #24
 80089ba:	d40f      	bmi.n	80089dc <xPortStartScheduler+0x54>
 80089bc:	b101      	cbz	r1, 80089c0 <xPortStartScheduler+0x38>
 80089be:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	2a03      	cmp	r2, #3
 80089c4:	d013      	beq.n	80089ee <xPortStartScheduler+0x66>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	b672      	cpsid	i
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	b662      	cpsie	i
 80089da:	e7fe      	b.n	80089da <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80089e0:	2101      	movs	r1, #1
 80089e2:	0052      	lsls	r2, r2, #1
 80089e4:	b2d2      	uxtb	r2, r2
 80089e6:	f88d 2003 	strb.w	r2, [sp, #3]
 80089ea:	4622      	mov	r2, r4
 80089ec:	e7e1      	b.n	80089b2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089ee:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 80089f0:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80089f6:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089f8:	9b01      	ldr	r3, [sp, #4]
 80089fa:	4a10      	ldr	r2, [pc, #64]	; (8008a3c <xPortStartScheduler+0xb4>)
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <xPortStartScheduler+0xc0>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008a08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008a10:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8008a12:	f7ff ff9f 	bl	8008954 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008a16:	4b0d      	ldr	r3, [pc, #52]	; (8008a4c <xPortStartScheduler+0xc4>)
 8008a18:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8008a1a:	f7ff fedf 	bl	80087dc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a1e:	4a0c      	ldr	r2, [pc, #48]	; (8008a50 <xPortStartScheduler+0xc8>)
 8008a20:	6813      	ldr	r3, [r2, #0]
 8008a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a26:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8008a28:	f7ff fec4 	bl	80087b4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008a2c:	f7ff fa88 	bl	8007f40 <vTaskSwitchContext>
	prvTaskExitError();
 8008a30:	f7ff fe9c 	bl	800876c <prvTaskExitError>
}
 8008a34:	4620      	mov	r0, r4
 8008a36:	b002      	add	sp, #8
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	bf00      	nop
 8008a3c:	e000e400 	.word	0xe000e400
 8008a40:	20003dfc 	.word	0x20003dfc
 8008a44:	20003e00 	.word	0x20003e00
 8008a48:	e000ed20 	.word	0xe000ed20
 8008a4c:	200027e8 	.word	0x200027e8
 8008a50:	e000ef34 	.word	0xe000ef34

08008a54 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a54:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a58:	2b0f      	cmp	r3, #15
 8008a5a:	d910      	bls.n	8008a7e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a5c:	4a12      	ldr	r2, [pc, #72]	; (8008aa8 <vPortValidateInterruptPriority+0x54>)
 8008a5e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a60:	4a12      	ldr	r2, [pc, #72]	; (8008aac <vPortValidateInterruptPriority+0x58>)
 8008a62:	7812      	ldrb	r2, [r2, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d90a      	bls.n	8008a7e <vPortValidateInterruptPriority+0x2a>
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	b672      	cpsid	i
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	b662      	cpsie	i
 8008a7c:	e7fe      	b.n	8008a7c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a7e:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <vPortValidateInterruptPriority+0x5c>)
 8008a80:	4a0c      	ldr	r2, [pc, #48]	; (8008ab4 <vPortValidateInterruptPriority+0x60>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6812      	ldr	r2, [r2, #0]
 8008a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d90a      	bls.n	8008aa4 <vPortValidateInterruptPriority+0x50>
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	b672      	cpsid	i
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	b662      	cpsie	i
 8008aa2:	e7fe      	b.n	8008aa2 <vPortValidateInterruptPriority+0x4e>
	}
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	e000e3f0 	.word	0xe000e3f0
 8008aac:	20003dfc 	.word	0x20003dfc
 8008ab0:	e000ed0c 	.word	0xe000ed0c
 8008ab4:	20003e00 	.word	0x20003e00

08008ab8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ab8:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <prvInsertBlockIntoFreeList+0x40>)
{
 8008aba:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	4282      	cmp	r2, r0
 8008ac0:	d318      	bcc.n	8008af4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ac2:	685c      	ldr	r4, [r3, #4]
 8008ac4:	1919      	adds	r1, r3, r4
 8008ac6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ac8:	bf01      	itttt	eq
 8008aca:	6841      	ldreq	r1, [r0, #4]
 8008acc:	4618      	moveq	r0, r3
 8008ace:	1909      	addeq	r1, r1, r4
 8008ad0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ad2:	6844      	ldr	r4, [r0, #4]
 8008ad4:	1901      	adds	r1, r0, r4
 8008ad6:	428a      	cmp	r2, r1
 8008ad8:	d107      	bne.n	8008aea <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ada:	4908      	ldr	r1, [pc, #32]	; (8008afc <prvInsertBlockIntoFreeList+0x44>)
 8008adc:	6809      	ldr	r1, [r1, #0]
 8008ade:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ae0:	bf1f      	itttt	ne
 8008ae2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ae4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ae6:	1909      	addne	r1, r1, r4
 8008ae8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008aea:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008aec:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008aee:	bf18      	it	ne
 8008af0:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008af2:	bd10      	pop	{r4, pc}
 8008af4:	4613      	mov	r3, r2
 8008af6:	e7e1      	b.n	8008abc <prvInsertBlockIntoFreeList+0x4>
 8008af8:	20007a14 	.word	0x20007a14
 8008afc:	20003e04 	.word	0x20003e04

08008b00 <pvPortMalloc>:
{
 8008b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008b06:	f7ff f8df 	bl	8007cc8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008b0a:	493f      	ldr	r1, [pc, #252]	; (8008c08 <pvPortMalloc+0x108>)
 8008b0c:	4d3f      	ldr	r5, [pc, #252]	; (8008c0c <pvPortMalloc+0x10c>)
 8008b0e:	680b      	ldr	r3, [r1, #0]
 8008b10:	bb03      	cbnz	r3, 8008b54 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8008b12:	4a3f      	ldr	r2, [pc, #252]	; (8008c10 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;
 8008b14:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b16:	0756      	lsls	r6, r2, #29
 8008b18:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b1c:	4e3d      	ldr	r6, [pc, #244]	; (8008c14 <pvPortMalloc+0x114>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b1e:	bf14      	ite	ne
 8008b20:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b22:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.xBlockSize = ( size_t ) 0;
 8008b26:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b28:	bf1c      	itt	ne
 8008b2a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b2e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b30:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b32:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008b34:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b36:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8008b3a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b3e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8008b40:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b42:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b46:	4b34      	ldr	r3, [pc, #208]	; (8008c18 <pvPortMalloc+0x118>)
 8008b48:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b4a:	4b34      	ldr	r3, [pc, #208]	; (8008c1c <pvPortMalloc+0x11c>)
 8008b4c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b52:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b54:	682f      	ldr	r7, [r5, #0]
 8008b56:	4227      	tst	r7, r4
 8008b58:	d151      	bne.n	8008bfe <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d040      	beq.n	8008be0 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 8008b5e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b62:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b64:	bf1c      	itt	ne
 8008b66:	f023 0307 	bicne.w	r3, r3, #7
 8008b6a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d046      	beq.n	8008bfe <pvPortMalloc+0xfe>
 8008b70:	4a2a      	ldr	r2, [pc, #168]	; (8008c1c <pvPortMalloc+0x11c>)
 8008b72:	6816      	ldr	r6, [r2, #0]
 8008b74:	4690      	mov	r8, r2
 8008b76:	429e      	cmp	r6, r3
 8008b78:	d341      	bcc.n	8008bfe <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8008b7a:	4a26      	ldr	r2, [pc, #152]	; (8008c14 <pvPortMalloc+0x114>)
 8008b7c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7e:	6868      	ldr	r0, [r5, #4]
 8008b80:	4298      	cmp	r0, r3
 8008b82:	d201      	bcs.n	8008b88 <pvPortMalloc+0x88>
 8008b84:	682c      	ldr	r4, [r5, #0]
 8008b86:	b9b4      	cbnz	r4, 8008bb6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8008b88:	6809      	ldr	r1, [r1, #0]
 8008b8a:	42a9      	cmp	r1, r5
 8008b8c:	d037      	beq.n	8008bfe <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b8e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b90:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b92:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b94:	1ac2      	subs	r2, r0, r3
 8008b96:	2a10      	cmp	r2, #16
 8008b98:	d914      	bls.n	8008bc4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b9a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b9c:	0741      	lsls	r1, r0, #29
 8008b9e:	d00d      	beq.n	8008bbc <pvPortMalloc+0xbc>
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	b672      	cpsid	i
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	b662      	cpsie	i
 8008bb4:	e7fe      	b.n	8008bb4 <pvPortMalloc+0xb4>
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4625      	mov	r5, r4
 8008bba:	e7e0      	b.n	8008b7e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bbc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bbe:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bc0:	f7ff ff7a 	bl	8008ab8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bc4:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bc6:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bc8:	4913      	ldr	r1, [pc, #76]	; (8008c18 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bca:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bcc:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bce:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008bd0:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bd2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bd6:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bd8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bda:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bdc:	bf38      	it	cc
 8008bde:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8008be0:	f7ff f912 	bl	8007e08 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008be4:	0763      	lsls	r3, r4, #29
 8008be6:	d00c      	beq.n	8008c02 <pvPortMalloc+0x102>
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	b672      	cpsid	i
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	b662      	cpsie	i
 8008bfc:	e7fe      	b.n	8008bfc <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8008bfe:	2400      	movs	r4, #0
 8008c00:	e7ee      	b.n	8008be0 <pvPortMalloc+0xe0>
}
 8008c02:	4620      	mov	r0, r4
 8008c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c08:	20003e04 	.word	0x20003e04
 8008c0c:	20007a08 	.word	0x20007a08
 8008c10:	20003e08 	.word	0x20003e08
 8008c14:	20007a14 	.word	0x20007a14
 8008c18:	20007a10 	.word	0x20007a10
 8008c1c:	20007a0c 	.word	0x20007a0c

08008c20 <vPortFree>:
{
 8008c20:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008c22:	4604      	mov	r4, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d032      	beq.n	8008c8e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c28:	4a19      	ldr	r2, [pc, #100]	; (8008c90 <vPortFree+0x70>)
 8008c2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008c2e:	6812      	ldr	r2, [r2, #0]
 8008c30:	4213      	tst	r3, r2
 8008c32:	d10a      	bne.n	8008c4a <vPortFree+0x2a>
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	b672      	cpsid	i
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	b662      	cpsie	i
 8008c48:	e7fe      	b.n	8008c48 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c4a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008c4e:	b151      	cbz	r1, 8008c66 <vPortFree+0x46>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	b672      	cpsid	i
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	b662      	cpsie	i
 8008c64:	e7fe      	b.n	8008c64 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c66:	ea23 0302 	bic.w	r3, r3, r2
 8008c6a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008c6e:	f7ff f82b 	bl	8007cc8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c72:	4a08      	ldr	r2, [pc, #32]	; (8008c94 <vPortFree+0x74>)
 8008c74:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c78:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c7c:	6811      	ldr	r1, [r2, #0]
 8008c7e:	440b      	add	r3, r1
 8008c80:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c82:	f7ff ff19 	bl	8008ab8 <prvInsertBlockIntoFreeList>
}
 8008c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008c8a:	f7ff b8bd 	b.w	8007e08 <xTaskResumeAll>
}
 8008c8e:	bd10      	pop	{r4, pc}
 8008c90:	20007a08 	.word	0x20007a08
 8008c94:	20007a0c 	.word	0x20007a0c

08008c98 <font_setCR>:
static unsigned char minDigitWd;
static unsigned char dualChar;

void font_setScale2(unsigned char _sx, unsigned char _sy) { sx = _sx; sy = _sy; }
void font_setScale1(unsigned char s) { sx = sy = s; }
void font_setCR(unsigned char _cr) { cr = _cr; }
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	71fb      	strb	r3, [r7, #7]
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	4a03      	ldr	r2, [pc, #12]	; (8008cb4 <font_setCR+0x1c>)
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20007a48 	.word	0x20007a48

08008cb8 <font_getHeight>:
void font_setSpacingY(unsigned char sp) { spacingY = sp; }
void font_setFontMinWd(unsigned char wd) { minCharWd = wd; }
void font_setCharMinWd(unsigned char wd) { minCharWd = wd; }
void font_setDigitMinWd(unsigned char wd) { minDigitWd = wd; }
int font_getWidth() { return rFont ? rFont->wd : 0; }
int font_getHeight() { return rFont ? rFont->ht : 0; }
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <font_getHeight+0x20>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <font_getHeight+0x14>
 8008cc4:	4b04      	ldr	r3, [pc, #16]	; (8008cd8 <font_getHeight+0x20>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	789b      	ldrb	r3, [r3, #2]
 8008cca:	e000      	b.n	8008cce <font_getHeight+0x16>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	20007a24 	.word	0x20007a24

08008cdc <font_init>:
void font_setFillRectFun(void (*fun)(int x, int y, int w, int h, int c)) { fillRectFun=fun; }

// ----------------------------------------------------------------
// fillRect function callback and screen width and height is necessary to initialize the library
void font_init(void (*rectFun)(int x, int y, int w, int h, int c), int swd, int sht)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
  fillRectFun = rectFun;
 8008ce8:	4a14      	ldr	r2, [pc, #80]	; (8008d3c <font_init+0x60>)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6013      	str	r3, [r2, #0]
  scrWd = swd;
 8008cee:	4a14      	ldr	r2, [pc, #80]	; (8008d40 <font_init+0x64>)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	6013      	str	r3, [r2, #0]
  scrHt = sht;
 8008cf4:	4a13      	ldr	r2, [pc, #76]	; (8008d44 <font_init+0x68>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6013      	str	r3, [r2, #0]
  cr = bold = dualChar = 0;
 8008cfa:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <font_init+0x6c>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	701a      	strb	r2, [r3, #0]
 8008d00:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <font_init+0x70>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <font_init+0x70>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <font_init+0x74>)
 8008d0c:	6013      	str	r3, [r2, #0]
  isNumberFun = &font_isNumber;
 8008d0e:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <font_init+0x78>)
 8008d10:	4a11      	ldr	r2, [pc, #68]	; (8008d58 <font_init+0x7c>)
 8008d12:	601a      	str	r2, [r3, #0]
  sx = sy = 1;
 8008d14:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <font_init+0x80>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <font_init+0x80>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a10      	ldr	r2, [pc, #64]	; (8008d60 <font_init+0x84>)
 8008d20:	6013      	str	r3, [r2, #0]
  fg = bg = 1;
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <font_init+0x88>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <font_init+0x88>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a0e      	ldr	r2, [pc, #56]	; (8008d68 <font_init+0x8c>)
 8008d2e:	6013      	str	r3, [r2, #0]
}
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	20007a20 	.word	0x20007a20
 8008d40:	20007a38 	.word	0x20007a38
 8008d44:	20007a3c 	.word	0x20007a3c
 8008d48:	20007a4e 	.word	0x20007a4e
 8008d4c:	20007a44 	.word	0x20007a44
 8008d50:	20007a48 	.word	0x20007a48
 8008d54:	20007a1c 	.word	0x20007a1c
 8008d58:	0800a2d1 	.word	0x0800a2d1
 8008d5c:	200027f4 	.word	0x200027f4
 8008d60:	200027f0 	.word	0x200027f0
 8008d64:	200027fc 	.word	0x200027fc
 8008d68:	200027f8 	.word	0x200027f8

08008d6c <font_setFont>:

// ---------------------------------
void font_setFont(RRE_Font *f)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  rFont = f;
 8008d74:	4a0a      	ldr	r2, [pc, #40]	; (8008da0 <font_setFont+0x34>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6013      	str	r3, [r2, #0]
  minCharWd = minDigitWd = 0;
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <font_setFont+0x38>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <font_setFont+0x38>)
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <font_setFont+0x3c>)
 8008d86:	701a      	strb	r2, [r3, #0]
  spacing = 1;
 8008d88:	4b08      	ldr	r3, [pc, #32]	; (8008dac <font_setFont+0x40>)
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]
  spacingY = 0;
 8008d8e:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <font_setFont+0x44>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20007a24 	.word	0x20007a24
 8008da4:	20007a4d 	.word	0x20007a4d
 8008da8:	20007a4c 	.word	0x20007a4c
 8008dac:	200027ec 	.word	0x200027ec
 8008db0:	20007a40 	.word	0x20007a40

08008db4 <font_charWidthOptim>:
  return xmax-xmin;
}

// ----------------------------------------------------------------
int font_charWidthOptim(unsigned char c, int *_xmin)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b08f      	sub	sp, #60	; 0x3c
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
  if(c<rFont->firstCh || c>rFont->lastCh) return c==' '? rFont->wd/2 : 0;
 8008dc0:	4b7e      	ldr	r3, [pc, #504]	; (8008fbc <font_charWidthOptim+0x208>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	78db      	ldrb	r3, [r3, #3]
 8008dc6:	79fa      	ldrb	r2, [r7, #7]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d305      	bcc.n	8008dd8 <font_charWidthOptim+0x24>
 8008dcc:	4b7b      	ldr	r3, [pc, #492]	; (8008fbc <font_charWidthOptim+0x208>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	79fa      	ldrb	r2, [r7, #7]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d90a      	bls.n	8008dee <font_charWidthOptim+0x3a>
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d105      	bne.n	8008dea <font_charWidthOptim+0x36>
 8008dde:	4b77      	ldr	r3, [pc, #476]	; (8008fbc <font_charWidthOptim+0x208>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	e0e2      	b.n	8008fb0 <font_charWidthOptim+0x1fc>
 8008dea:	2300      	movs	r3, #0
 8008dec:	e0e0      	b.n	8008fb0 <font_charWidthOptim+0x1fc>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 8008dee:	4b73      	ldr	r3, [pc, #460]	; (8008fbc <font_charWidthOptim+0x208>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	4971      	ldr	r1, [pc, #452]	; (8008fbc <font_charWidthOptim+0x208>)
 8008df8:	6809      	ldr	r1, [r1, #0]
 8008dfa:	78c9      	ldrb	r1, [r1, #3]
 8008dfc:	1a5b      	subs	r3, r3, r1
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	4413      	add	r3, r2
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	867b      	strh	r3, [r7, #50]	; 0x32
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 8008e06:	4b6d      	ldr	r3, [pc, #436]	; (8008fbc <font_charWidthOptim+0x208>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68da      	ldr	r2, [r3, #12]
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	496b      	ldr	r1, [pc, #428]	; (8008fbc <font_charWidthOptim+0x208>)
 8008e10:	6809      	ldr	r1, [r1, #0]
 8008e12:	78c9      	ldrb	r1, [r1, #3]
 8008e14:	1a5b      	subs	r3, r3, r1
 8008e16:	3301      	adds	r3, #1
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4413      	add	r3, r2
 8008e1c:	881a      	ldrh	r2, [r3, #0]
 8008e1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	863b      	strh	r3, [r7, #48]	; 0x30
  if(!recNum) return rFont->wd/2;
 8008e24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <font_charWidthOptim+0x82>
 8008e2a:	4b64      	ldr	r3, [pc, #400]	; (8008fbc <font_charWidthOptim+0x208>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	785b      	ldrb	r3, [r3, #1]
 8008e30:	085b      	lsrs	r3, r3, #1
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	e0bc      	b.n	8008fb0 <font_charWidthOptim+0x1fc>
  if(_xmin) *_xmin=0;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <font_charWidthOptim+0x8e>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
  int chWd = rFont->wd;
 8008e42:	4b5e      	ldr	r3, [pc, #376]	; (8008fbc <font_charWidthOptim+0x208>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
  switch(rFont->type & 7) {
 8008e4a:	4b5c      	ldr	r3, [pc, #368]	; (8008fbc <font_charWidthOptim+0x208>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	2b06      	cmp	r3, #6
 8008e56:	f200 80a9 	bhi.w	8008fac <font_charWidthOptim+0x1f8>
 8008e5a:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <font_charWidthOptim+0xac>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008e7d 	.word	0x08008e7d
 8008e64:	08008f07 	.word	0x08008f07
 8008e68:	08008f2d 	.word	0x08008f2d
 8008e6c:	08008ead 	.word	0x08008ead
 8008e70:	08008f5f 	.word	0x08008f5f
 8008e74:	08008f81 	.word	0x08008f81
 8008e78:	08008edf 	.word	0x08008edf
#if ENABLE_RRE_16B==1
    case RRE_16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8008e7c:	4b4f      	ldr	r3, [pc, #316]	; (8008fbc <font_charWidthOptim+0x208>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	60fb      	str	r3, [r7, #12]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008e84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e86:	1e5a      	subs	r2, r3, #1
 8008e88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008e8a:	4413      	add	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	817b      	strh	r3, [r7, #10]
      chWd = (v & 0x000f)+1+((v & 0x0f00)>>8);
 8008e96:	897b      	ldrh	r3, [r7, #10]
 8008e98:	f003 030f 	and.w	r3, r3, #15
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	897b      	ldrh	r3, [r7, #10]
 8008ea0:	121b      	asrs	r3, r3, #8
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	4413      	add	r3, r2
 8008ea8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008eaa:	e080      	b.n	8008fae <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8008eac:	4b43      	ldr	r3, [pc, #268]	; (8008fbc <font_charWidthOptim+0x208>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6899      	ldr	r1, [r3, #8]
 8008eb2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008eb4:	1e5a      	subs	r2, r3, #1
 8008eb6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008eb8:	441a      	add	r2, r3
 8008eba:	4613      	mov	r3, r2
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	4413      	add	r3, r2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	623b      	str	r3, [r7, #32]
      chWd = ((rects[0]) & 0x3f)+((rects[2]) & 0x3f)+1;
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	3302      	adds	r3, #2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ed6:	4413      	add	r3, r2
 8008ed8:	3301      	adds	r3, #1
 8008eda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008edc:	e067      	b.n	8008fae <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*4;
 8008ede:	4b37      	ldr	r3, [pc, #220]	; (8008fbc <font_charWidthOptim+0x208>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008ee6:	1e51      	subs	r1, r2, #1
 8008ee8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008eea:	440a      	add	r2, r1
 8008eec:	0092      	lsls	r2, r2, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      chWd = (rects[0])+(rects[2])+1;
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	3302      	adds	r3, #2
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	4413      	add	r3, r2
 8008f00:	3301      	adds	r3, #1
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008f04:	e053      	b.n	8008fae <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8008f06:	4b2d      	ldr	r3, [pc, #180]	; (8008fbc <font_charWidthOptim+0x208>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	617b      	str	r3, [r7, #20]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008f0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f10:	1e5a      	subs	r2, r3, #1
 8008f12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f14:	4413      	add	r3, r2
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	827b      	strh	r3, [r7, #18]
      chWd = (v & 0x3f)+1;
 8008f20:	8a7b      	ldrh	r3, [r7, #18]
 8008f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f26:	3301      	adds	r3, #1
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008f2a:	e040      	b.n	8008fae <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8008f2c:	4b23      	ldr	r3, [pc, #140]	; (8008fbc <font_charWidthOptim+0x208>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	61fb      	str	r3, [r7, #28]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008f34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f36:	1e5a      	subs	r2, r3, #1
 8008f38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f3a:	4413      	add	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	4413      	add	r3, r2
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	837b      	strh	r3, [r7, #26]
      chWd = (v & 0x1f)+((v>>11) & 0x1f)+1;
 8008f46:	8b7b      	ldrh	r3, [r7, #26]
 8008f48:	f003 021f 	and.w	r2, r3, #31
 8008f4c:	8b7b      	ldrh	r3, [r7, #26]
 8008f4e:	0adb      	lsrs	r3, r3, #11
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f003 031f 	and.w	r3, r3, #31
 8008f56:	4413      	add	r3, r2
 8008f58:	3301      	adds	r3, #1
 8008f5a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008f5c:	e027      	b.n	8008fae <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8008f5e:	4b17      	ldr	r3, [pc, #92]	; (8008fbc <font_charWidthOptim+0x208>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6899      	ldr	r1, [r3, #8]
 8008f64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f66:	1e5a      	subs	r2, r3, #1
 8008f68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f6a:	441a      	add	r2, r3
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4413      	add	r3, r2
 8008f72:	440b      	add	r3, r1
 8008f74:	627b      	str	r3, [r7, #36]	; 0x24
      chWd = (rects[0])+1;
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008f7e:	e016      	b.n	8008fae <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8008f80:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <font_charWidthOptim+0x208>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6899      	ldr	r1, [r3, #8]
 8008f86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f88:	1e5a      	subs	r2, r3, #1
 8008f8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f8c:	441a      	add	r2, r3
 8008f8e:	4613      	mov	r3, r2
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	4413      	add	r3, r2
 8008f94:	440b      	add	r3, r1
 8008f96:	62bb      	str	r3, [r7, #40]	; 0x28
      chWd = (rects[0])+(rects[2])+1;
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008faa:	e000      	b.n	8008fae <font_charWidthOptim+0x1fa>
#endif
    default: break;
 8008fac:	bf00      	nop
  }
  return chWd;
 8008fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	373c      	adds	r7, #60	; 0x3c
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	20007a24 	.word	0x20007a24

08008fc0 <font_charWidth>:

// ----------------------------------------------------------------
int font_charWidth(unsigned char c)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	71fb      	strb	r3, [r7, #7]
  c = convertPolish(c);
#endif
#if ENABLE_NOSORT==1
  int wd = (rFont->type & RRE_NO_SORT) ? charWidthNoSort(c,_xmin) : charWidthOptim(c,_xmin);
#else
  int wd = font_charWidthOptim(c, 0);
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fef0 	bl	8008db4 <font_charWidthOptim>
 8008fd4:	60f8      	str	r0, [r7, #12]
#endif
  int wdL = 0, wdR = spacing; // default spacing before and behind char
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	4b2a      	ldr	r3, [pc, #168]	; (8009084 <font_charWidth+0xc4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	613b      	str	r3, [r7, #16]
  if((*isNumberFun)(c) && minDigitWd>0) {
 8008fe0:	4b29      	ldr	r3, [pc, #164]	; (8009088 <font_charWidth+0xc8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	79fa      	ldrb	r2, [r7, #7]
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	4798      	blx	r3
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01e      	beq.n	800902e <font_charWidth+0x6e>
 8008ff0:	4b26      	ldr	r3, [pc, #152]	; (800908c <font_charWidth+0xcc>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01a      	beq.n	800902e <font_charWidth+0x6e>
    if(minDigitWd>wd) {
 8008ff8:	4b24      	ldr	r3, [pc, #144]	; (800908c <font_charWidth+0xcc>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4293      	cmp	r3, r2
 8009002:	da2e      	bge.n	8009062 <font_charWidth+0xa2>
      wdL = (minDigitWd-wd)/2;
 8009004:	4b21      	ldr	r3, [pc, #132]	; (800908c <font_charWidth+0xcc>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	da00      	bge.n	8009014 <font_charWidth+0x54>
 8009012:	3301      	adds	r3, #1
 8009014:	105b      	asrs	r3, r3, #1
 8009016:	617b      	str	r3, [r7, #20]
      wdR += (minDigitWd-wd-wdL);
 8009018:	4b1c      	ldr	r3, [pc, #112]	; (800908c <font_charWidth+0xcc>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1ad2      	subs	r2, r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	693a      	ldr	r2, [r7, #16]
 8009028:	4413      	add	r3, r2
 800902a:	613b      	str	r3, [r7, #16]
    if(minDigitWd>wd) {
 800902c:	e019      	b.n	8009062 <font_charWidth+0xa2>
    }
  } else if(minCharWd>wd) {
 800902e:	4b18      	ldr	r3, [pc, #96]	; (8009090 <font_charWidth+0xd0>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4293      	cmp	r3, r2
 8009038:	da13      	bge.n	8009062 <font_charWidth+0xa2>
    wdL = (minCharWd-wd)/2;
 800903a:	4b15      	ldr	r3, [pc, #84]	; (8009090 <font_charWidth+0xd0>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	461a      	mov	r2, r3
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	da00      	bge.n	800904a <font_charWidth+0x8a>
 8009048:	3301      	adds	r3, #1
 800904a:	105b      	asrs	r3, r3, #1
 800904c:	617b      	str	r3, [r7, #20]
    wdR += (minCharWd-wd-wdL);
 800904e:	4b10      	ldr	r3, [pc, #64]	; (8009090 <font_charWidth+0xd0>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4413      	add	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
  }
  return (wd+wdL+wdR+bold)*sx;
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	441a      	add	r2, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	441a      	add	r2, r3
 800906c:	4b09      	ldr	r3, [pc, #36]	; (8009094 <font_charWidth+0xd4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4413      	add	r3, r2
 8009072:	4a09      	ldr	r2, [pc, #36]	; (8009098 <font_charWidth+0xd8>)
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	fb02 f303 	mul.w	r3, r2, r3
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	200027ec 	.word	0x200027ec
 8009088:	20007a1c 	.word	0x20007a1c
 800908c:	20007a4d 	.word	0x20007a4d
 8009090:	20007a4c 	.word	0x20007a4c
 8009094:	20007a44 	.word	0x20007a44
 8009098:	200027f0 	.word	0x200027f0

0800909c <font_drawChar>:

// ----------------------------------------------------------------
int font_drawChar(int x, int y, unsigned char c)
{
 800909c:	b5b0      	push	{r4, r5, r7, lr}
 800909e:	b0ac      	sub	sp, #176	; 0xb0
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	71fb      	strb	r3, [r7, #7]
#if CONVERT_PL_CHARS==1
  c = convertPolish(c);
#endif
  if(x>=scrWd || y>=scrHt || x+rFont->wd*sx-1<0 || y+rFont->ht*sy-1<0) return 0;
 80090aa:	4bac      	ldr	r3, [pc, #688]	; (800935c <font_drawChar+0x2c0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	da1e      	bge.n	80090f2 <font_drawChar+0x56>
 80090b4:	4baa      	ldr	r3, [pc, #680]	; (8009360 <font_drawChar+0x2c4>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	da19      	bge.n	80090f2 <font_drawChar+0x56>
 80090be:	4ba9      	ldr	r3, [pc, #676]	; (8009364 <font_drawChar+0x2c8>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	785b      	ldrb	r3, [r3, #1]
 80090c4:	461a      	mov	r2, r3
 80090c6:	4ba8      	ldr	r3, [pc, #672]	; (8009368 <font_drawChar+0x2cc>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	fb03 f202 	mul.w	r2, r3, r2
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	3b01      	subs	r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	db0c      	blt.n	80090f2 <font_drawChar+0x56>
 80090d8:	4ba2      	ldr	r3, [pc, #648]	; (8009364 <font_drawChar+0x2c8>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	789b      	ldrb	r3, [r3, #2]
 80090de:	461a      	mov	r2, r3
 80090e0:	4ba2      	ldr	r3, [pc, #648]	; (800936c <font_drawChar+0x2d0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	fb03 f202 	mul.w	r2, r3, r2
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4413      	add	r3, r2
 80090ec:	3b01      	subs	r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	da02      	bge.n	80090f8 <font_drawChar+0x5c>
 80090f2:	2300      	movs	r3, #0
 80090f4:	f001 b828 	b.w	800a148 <font_drawChar+0x10ac>
  if(c<rFont->firstCh || c>rFont->lastCh) return font_charWidth(c);
 80090f8:	4b9a      	ldr	r3, [pc, #616]	; (8009364 <font_drawChar+0x2c8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	78db      	ldrb	r3, [r3, #3]
 80090fe:	79fa      	ldrb	r2, [r7, #7]
 8009100:	429a      	cmp	r2, r3
 8009102:	d305      	bcc.n	8009110 <font_drawChar+0x74>
 8009104:	4b97      	ldr	r3, [pc, #604]	; (8009364 <font_drawChar+0x2c8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	791b      	ldrb	r3, [r3, #4]
 800910a:	79fa      	ldrb	r2, [r7, #7]
 800910c:	429a      	cmp	r2, r3
 800910e:	d906      	bls.n	800911e <font_drawChar+0x82>
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff ff54 	bl	8008fc0 <font_charWidth>
 8009118:	4603      	mov	r3, r0
 800911a:	f001 b815 	b.w	800a148 <font_drawChar+0x10ac>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 800911e:	4b91      	ldr	r3, [pc, #580]	; (8009364 <font_drawChar+0x2c8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	498f      	ldr	r1, [pc, #572]	; (8009364 <font_drawChar+0x2c8>)
 8009128:	6809      	ldr	r1, [r1, #0]
 800912a:	78c9      	ldrb	r1, [r1, #3]
 800912c:	1a5b      	subs	r3, r3, r1
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	4413      	add	r3, r2
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 8009138:	4b8a      	ldr	r3, [pc, #552]	; (8009364 <font_drawChar+0x2c8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	4988      	ldr	r1, [pc, #544]	; (8009364 <font_drawChar+0x2c8>)
 8009142:	6809      	ldr	r1, [r1, #0]
 8009144:	78c9      	ldrb	r1, [r1, #3]
 8009146:	1a5b      	subs	r3, r3, r1
 8009148:	3301      	adds	r3, #1
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	4413      	add	r3, r2
 800914e:	881a      	ldrh	r2, [r3, #0]
 8009150:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if ENABLE_NOSORT==1
  int xmin, chWd = (rFont->type & RRE_NO_SORT) ? font_charWidthNoSort(c,&xmin) : font_charWidthOptim(c,&xmin);
#else
  int xmin, chWd = font_charWidthOptim(c,&xmin);
 800915a:	f107 0210 	add.w	r2, r7, #16
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fe26 	bl	8008db4 <font_charWidthOptim>
 8009168:	65b8      	str	r0, [r7, #88]	; 0x58
#endif
  int wd=chWd, wdL = 0, wdR = spacing;
 800916a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800916c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009170:	2300      	movs	r3, #0
 8009172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009176:	4b7e      	ldr	r3, [pc, #504]	; (8009370 <font_drawChar+0x2d4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if((*isNumberFun)(c) && minDigitWd>0) {
 800917e:	4b7d      	ldr	r3, [pc, #500]	; (8009374 <font_drawChar+0x2d8>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	79fa      	ldrb	r2, [r7, #7]
 8009184:	4610      	mov	r0, r2
 8009186:	4798      	blx	r3
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d025      	beq.n	80091da <font_drawChar+0x13e>
 800918e:	4b7a      	ldr	r3, [pc, #488]	; (8009378 <font_drawChar+0x2dc>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d021      	beq.n	80091da <font_drawChar+0x13e>
    if(minDigitWd>wd) {
 8009196:	4b78      	ldr	r3, [pc, #480]	; (8009378 <font_drawChar+0x2dc>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091a0:	4293      	cmp	r3, r2
 80091a2:	da3b      	bge.n	800921c <font_drawChar+0x180>
      wdL = (minDigitWd-wd)/2;
 80091a4:	4b74      	ldr	r3, [pc, #464]	; (8009378 <font_drawChar+0x2dc>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	461a      	mov	r2, r3
 80091aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	da00      	bge.n	80091b6 <font_drawChar+0x11a>
 80091b4:	3301      	adds	r3, #1
 80091b6:	105b      	asrs	r3, r3, #1
 80091b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      wdR += (minDigitWd-wd-wdL);
 80091bc:	4b6e      	ldr	r3, [pc, #440]	; (8009378 <font_drawChar+0x2dc>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091c6:	1ad2      	subs	r2, r2, r3
 80091c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80091d2:	4413      	add	r3, r2
 80091d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(minDigitWd>wd) {
 80091d8:	e020      	b.n	800921c <font_drawChar+0x180>
    }
  } else if(minCharWd>wd) {
 80091da:	4b68      	ldr	r3, [pc, #416]	; (800937c <font_drawChar+0x2e0>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091e4:	4293      	cmp	r3, r2
 80091e6:	da19      	bge.n	800921c <font_drawChar+0x180>
    wdL = (minCharWd-wd)/2;
 80091e8:	4b64      	ldr	r3, [pc, #400]	; (800937c <font_drawChar+0x2e0>)
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	da00      	bge.n	80091fa <font_drawChar+0x15e>
 80091f8:	3301      	adds	r3, #1
 80091fa:	105b      	asrs	r3, r3, #1
 80091fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    wdR += (minCharWd-wd-wdL);
 8009200:	4b5e      	ldr	r3, [pc, #376]	; (800937c <font_drawChar+0x2e0>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	461a      	mov	r2, r3
 8009206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800920a:	1ad2      	subs	r2, r2, r3
 800920c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009216:	4413      	add	r3, r2
 8009218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  if(x+wd+wdL+wdR>scrWd) wdR = max(scrWd-x-wdL-wd, 0);
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009222:	441a      	add	r2, r3
 8009224:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009228:	441a      	add	r2, r3
 800922a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800922e:	441a      	add	r2, r3
 8009230:	4b4a      	ldr	r3, [pc, #296]	; (800935c <font_drawChar+0x2c0>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	dd0d      	ble.n	8009254 <font_drawChar+0x1b8>
 8009238:	4b48      	ldr	r3, [pc, #288]	; (800935c <font_drawChar+0x2c0>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	1ad2      	subs	r2, r2, r3
 8009240:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009244:	1ad2      	subs	r2, r2, r3
 8009246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if(x+wd+wdL+wdR>scrWd) wd  = max(scrWd-x-wdL, 0);
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800925a:	441a      	add	r2, r3
 800925c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009260:	441a      	add	r2, r3
 8009262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009266:	441a      	add	r2, r3
 8009268:	4b3c      	ldr	r3, [pc, #240]	; (800935c <font_drawChar+0x2c0>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	dd0a      	ble.n	8009286 <font_drawChar+0x1ea>
 8009270:	4b3a      	ldr	r3, [pc, #232]	; (800935c <font_drawChar+0x2c0>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	1ad2      	subs	r2, r2, r3
 8009278:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if(x+wd+wdL+wdR>scrWd) wdL = max(scrWd-x, 0);
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800928c:	441a      	add	r2, r3
 800928e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009292:	441a      	add	r2, r3
 8009294:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009298:	441a      	add	r2, r3
 800929a:	4b30      	ldr	r3, [pc, #192]	; (800935c <font_drawChar+0x2c0>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	dd07      	ble.n	80092b2 <font_drawChar+0x216>
 80092a2:	4b2e      	ldr	r3, [pc, #184]	; (800935c <font_drawChar+0x2c0>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  wd+=wdR+wdL;
 80092b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80092b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092ba:	4413      	add	r3, r2
 80092bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80092c0:	4413      	add	r3, r2
 80092c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int type=rFont->type & 7;
 80092c6:	4b27      	ldr	r3, [pc, #156]	; (8009364 <font_drawChar+0x2c8>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	657b      	str	r3, [r7, #84]	; 0x54
  if(bg!=fg && (type==RRE_16B ||type==RRE_24B ||type==RRE_32B || !recNum)) (*fillRectFun)(x, y, (wd+bold)*sx, rFont->ht*sy, bg);
 80092d2:	4b2b      	ldr	r3, [pc, #172]	; (8009380 <font_drawChar+0x2e4>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <font_drawChar+0x2e8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d026      	beq.n	800932c <font_drawChar+0x290>
 80092de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d009      	beq.n	80092f8 <font_drawChar+0x25c>
 80092e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d006      	beq.n	80092f8 <font_drawChar+0x25c>
 80092ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ec:	2b06      	cmp	r3, #6
 80092ee:	d003      	beq.n	80092f8 <font_drawChar+0x25c>
 80092f0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d119      	bne.n	800932c <font_drawChar+0x290>
 80092f8:	4b23      	ldr	r3, [pc, #140]	; (8009388 <font_drawChar+0x2ec>)
 80092fa:	681c      	ldr	r4, [r3, #0]
 80092fc:	4b23      	ldr	r3, [pc, #140]	; (800938c <font_drawChar+0x2f0>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009304:	4413      	add	r3, r2
 8009306:	4a18      	ldr	r2, [pc, #96]	; (8009368 <font_drawChar+0x2cc>)
 8009308:	6812      	ldr	r2, [r2, #0]
 800930a:	fb02 f203 	mul.w	r2, r2, r3
 800930e:	4b15      	ldr	r3, [pc, #84]	; (8009364 <font_drawChar+0x2c8>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	789b      	ldrb	r3, [r3, #2]
 8009314:	4619      	mov	r1, r3
 8009316:	4b15      	ldr	r3, [pc, #84]	; (800936c <font_drawChar+0x2d0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	fb03 f101 	mul.w	r1, r3, r1
 800931e:	4b18      	ldr	r3, [pc, #96]	; (8009380 <font_drawChar+0x2e4>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	460b      	mov	r3, r1
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	47a0      	blx	r4
  x+=wdL*sx;
 800932c:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <font_drawChar+0x2cc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009334:	fb02 f303 	mul.w	r3, r2, r3
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]
  if(!recNum) return (wd+bold)*sx;
 800933e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d124      	bne.n	8009390 <font_drawChar+0x2f4>
 8009346:	4b11      	ldr	r3, [pc, #68]	; (800938c <font_drawChar+0x2f0>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800934e:	4413      	add	r3, r2
 8009350:	4a05      	ldr	r2, [pc, #20]	; (8009368 <font_drawChar+0x2cc>)
 8009352:	6812      	ldr	r2, [r2, #0]
 8009354:	fb02 f303 	mul.w	r3, r2, r3
 8009358:	f000 bef6 	b.w	800a148 <font_drawChar+0x10ac>
 800935c:	20007a38 	.word	0x20007a38
 8009360:	20007a3c 	.word	0x20007a3c
 8009364:	20007a24 	.word	0x20007a24
 8009368:	200027f0 	.word	0x200027f0
 800936c:	200027f4 	.word	0x200027f4
 8009370:	200027ec 	.word	0x200027ec
 8009374:	20007a1c 	.word	0x20007a1c
 8009378:	20007a4d 	.word	0x20007a4d
 800937c:	20007a4c 	.word	0x20007a4c
 8009380:	200027fc 	.word	0x200027fc
 8009384:	200027f8 	.word	0x200027f8
 8009388:	20007a20 	.word	0x20007a20
 800938c:	20007a44 	.word	0x20007a44
  switch(type) {
 8009390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009392:	2b06      	cmp	r3, #6
 8009394:	f200 86c8 	bhi.w	800a128 <font_drawChar+0x108c>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <font_drawChar+0x304>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093bd 	.word	0x080093bd
 80093a4:	08009641 	.word	0x08009641
 80093a8:	08009979 	.word	0x08009979
 80093ac:	0800947d 	.word	0x0800947d
 80093b0:	08009d5d 	.word	0x08009d5d
 80093b4:	0800a053 	.word	0x0800a053
 80093b8:	08009561 	.word	0x08009561
#if ENABLE_RRE_16B==1
    case RRE_16B:
      for(int i=0; i<recNum; i++) {
 80093bc:	2300      	movs	r3, #0
 80093be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093c2:	e053      	b.n	800946c <font_drawChar+0x3d0>
        unsigned short *rects = (unsigned short*)rFont->rects;
 80093c4:	4b94      	ldr	r3, [pc, #592]	; (8009618 <font_drawChar+0x57c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	61bb      	str	r3, [r7, #24]
        unsigned short v = (rects[i+recIdx]);
 80093cc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80093d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093d4:	4413      	add	r3, r2
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	4413      	add	r3, r2
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	82fb      	strh	r3, [r7, #22]
        xf = (v & 0x000f)-xmin;
 80093e0:	8afb      	ldrh	r3, [r7, #22]
 80093e2:	f003 020f 	and.w	r2, r3, #15
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	4a8c      	ldr	r2, [pc, #560]	; (800961c <font_drawChar+0x580>)
 80093ec:	6013      	str	r3, [r2, #0]
        yf = (v & 0x00f0)>>4;
 80093ee:	8afb      	ldrh	r3, [r7, #22]
 80093f0:	111b      	asrs	r3, r3, #4
 80093f2:	f003 030f 	and.w	r3, r3, #15
 80093f6:	4a8a      	ldr	r2, [pc, #552]	; (8009620 <font_drawChar+0x584>)
 80093f8:	6013      	str	r3, [r2, #0]
        wf = ((v & 0x0f00)>>8)+1;
 80093fa:	8afb      	ldrh	r3, [r7, #22]
 80093fc:	121b      	asrs	r3, r3, #8
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	3301      	adds	r3, #1
 8009404:	4a87      	ldr	r2, [pc, #540]	; (8009624 <font_drawChar+0x588>)
 8009406:	6013      	str	r3, [r2, #0]
        hf = ((v & 0xf000)>>12)+1;
 8009408:	8afb      	ldrh	r3, [r7, #22]
 800940a:	0b1b      	lsrs	r3, r3, #12
 800940c:	b29b      	uxth	r3, r3
 800940e:	3301      	adds	r3, #1
 8009410:	4a85      	ldr	r2, [pc, #532]	; (8009628 <font_drawChar+0x58c>)
 8009412:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009414:	4b85      	ldr	r3, [pc, #532]	; (800962c <font_drawChar+0x590>)
 8009416:	681c      	ldr	r4, [r3, #0]
 8009418:	4b80      	ldr	r3, [pc, #512]	; (800961c <font_drawChar+0x580>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a84      	ldr	r2, [pc, #528]	; (8009630 <font_drawChar+0x594>)
 800941e:	6812      	ldr	r2, [r2, #0]
 8009420:	fb02 f203 	mul.w	r2, r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	18d0      	adds	r0, r2, r3
 8009428:	4b7d      	ldr	r3, [pc, #500]	; (8009620 <font_drawChar+0x584>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a81      	ldr	r2, [pc, #516]	; (8009634 <font_drawChar+0x598>)
 800942e:	6812      	ldr	r2, [r2, #0]
 8009430:	fb02 f203 	mul.w	r2, r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	18d1      	adds	r1, r2, r3
 8009438:	4b7a      	ldr	r3, [pc, #488]	; (8009624 <font_drawChar+0x588>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a7c      	ldr	r2, [pc, #496]	; (8009630 <font_drawChar+0x594>)
 800943e:	6812      	ldr	r2, [r2, #0]
 8009440:	fb02 f203 	mul.w	r2, r2, r3
 8009444:	4b7c      	ldr	r3, [pc, #496]	; (8009638 <font_drawChar+0x59c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	18d5      	adds	r5, r2, r3
 800944a:	4b77      	ldr	r3, [pc, #476]	; (8009628 <font_drawChar+0x58c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a79      	ldr	r2, [pc, #484]	; (8009634 <font_drawChar+0x598>)
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	fb02 f203 	mul.w	r2, r2, r3
 8009456:	4b79      	ldr	r3, [pc, #484]	; (800963c <font_drawChar+0x5a0>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	4613      	mov	r3, r2
 800945e:	462a      	mov	r2, r5
 8009460:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009466:	3301      	adds	r3, #1
 8009468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800946c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009470:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009474:	429a      	cmp	r2, r3
 8009476:	dba5      	blt.n	80093c4 <font_drawChar+0x328>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8009478:	f000 be5d 	b.w	800a136 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B:
      for(int i=0; i<recNum; i++) {
 800947c:	2300      	movs	r3, #0
 800947e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009482:	e065      	b.n	8009550 <font_drawChar+0x4b4>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8009484:	4b64      	ldr	r3, [pc, #400]	; (8009618 <font_drawChar+0x57c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6899      	ldr	r1, [r3, #8]
 800948a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800948e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009492:	441a      	add	r2, r3
 8009494:	4613      	mov	r3, r2
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	4413      	add	r3, r2
 800949a:	440b      	add	r3, r1
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
        xf = ((rects[0]) & 0x3f)-xmin;
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	4a5c      	ldr	r2, [pc, #368]	; (800961c <font_drawChar+0x580>)
 80094ac:	6013      	str	r3, [r2, #0]
        yf = ((rects[1]) & 0x3f);
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	3301      	adds	r3, #1
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094b8:	4a59      	ldr	r2, [pc, #356]	; (8009620 <font_drawChar+0x584>)
 80094ba:	6013      	str	r3, [r2, #0]
        wf = ((rects[2]) & 0x3f)+1;
 80094bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094be:	3302      	adds	r3, #2
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094c6:	3301      	adds	r3, #1
 80094c8:	4a56      	ldr	r2, [pc, #344]	; (8009624 <font_drawChar+0x588>)
 80094ca:	6013      	str	r3, [r2, #0]
        hf = 1+((((rects[0]) & 0xc0)>>6) | (((rects[1]) & 0xc0)>>4) | (((rects[2]) & 0xc0)>>2));
 80094cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	099b      	lsrs	r3, r3, #6
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	461a      	mov	r2, r3
 80094d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d8:	3301      	adds	r3, #1
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	111b      	asrs	r3, r3, #4
 80094de:	f003 030c 	and.w	r3, r3, #12
 80094e2:	431a      	orrs	r2, r3
 80094e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e6:	3302      	adds	r3, #2
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	109b      	asrs	r3, r3, #2
 80094ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094f0:	4313      	orrs	r3, r2
 80094f2:	3301      	adds	r3, #1
 80094f4:	4a4c      	ldr	r2, [pc, #304]	; (8009628 <font_drawChar+0x58c>)
 80094f6:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80094f8:	4b4c      	ldr	r3, [pc, #304]	; (800962c <font_drawChar+0x590>)
 80094fa:	681c      	ldr	r4, [r3, #0]
 80094fc:	4b47      	ldr	r3, [pc, #284]	; (800961c <font_drawChar+0x580>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a4b      	ldr	r2, [pc, #300]	; (8009630 <font_drawChar+0x594>)
 8009502:	6812      	ldr	r2, [r2, #0]
 8009504:	fb02 f203 	mul.w	r2, r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	18d0      	adds	r0, r2, r3
 800950c:	4b44      	ldr	r3, [pc, #272]	; (8009620 <font_drawChar+0x584>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a48      	ldr	r2, [pc, #288]	; (8009634 <font_drawChar+0x598>)
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	fb02 f203 	mul.w	r2, r2, r3
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	18d1      	adds	r1, r2, r3
 800951c:	4b41      	ldr	r3, [pc, #260]	; (8009624 <font_drawChar+0x588>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a43      	ldr	r2, [pc, #268]	; (8009630 <font_drawChar+0x594>)
 8009522:	6812      	ldr	r2, [r2, #0]
 8009524:	fb02 f203 	mul.w	r2, r2, r3
 8009528:	4b43      	ldr	r3, [pc, #268]	; (8009638 <font_drawChar+0x59c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	18d5      	adds	r5, r2, r3
 800952e:	4b3e      	ldr	r3, [pc, #248]	; (8009628 <font_drawChar+0x58c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a40      	ldr	r2, [pc, #256]	; (8009634 <font_drawChar+0x598>)
 8009534:	6812      	ldr	r2, [r2, #0]
 8009536:	fb02 f203 	mul.w	r2, r2, r3
 800953a:	4b40      	ldr	r3, [pc, #256]	; (800963c <font_drawChar+0x5a0>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4613      	mov	r3, r2
 8009542:	462a      	mov	r2, r5
 8009544:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800954a:	3301      	adds	r3, #1
 800954c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009550:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009554:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009558:	429a      	cmp	r2, r3
 800955a:	db93      	blt.n	8009484 <font_drawChar+0x3e8>
      }
      break;
 800955c:	f000 bdeb 	b.w	800a136 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B:
      for(int i=0; i<recNum; i++) {
 8009560:	2300      	movs	r3, #0
 8009562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009566:	e04f      	b.n	8009608 <font_drawChar+0x56c>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*4;
 8009568:	4b2b      	ldr	r3, [pc, #172]	; (8009618 <font_drawChar+0x57c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8009572:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009576:	440a      	add	r2, r1
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	4413      	add	r3, r2
 800957c:	653b      	str	r3, [r7, #80]	; 0x50
        xf = (rects[0])-xmin;
 800957e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	4a24      	ldr	r2, [pc, #144]	; (800961c <font_drawChar+0x580>)
 800958a:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800958c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800958e:	3301      	adds	r3, #1
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	4b22      	ldr	r3, [pc, #136]	; (8009620 <font_drawChar+0x584>)
 8009596:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 8009598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800959a:	3302      	adds	r3, #2
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	3301      	adds	r3, #1
 80095a0:	4a20      	ldr	r2, [pc, #128]	; (8009624 <font_drawChar+0x588>)
 80095a2:	6013      	str	r3, [r2, #0]
        hf = (rects[3])+1;
 80095a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a6:	3303      	adds	r3, #3
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	4a1e      	ldr	r2, [pc, #120]	; (8009628 <font_drawChar+0x58c>)
 80095ae:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80095b0:	4b1e      	ldr	r3, [pc, #120]	; (800962c <font_drawChar+0x590>)
 80095b2:	681c      	ldr	r4, [r3, #0]
 80095b4:	4b19      	ldr	r3, [pc, #100]	; (800961c <font_drawChar+0x580>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a1d      	ldr	r2, [pc, #116]	; (8009630 <font_drawChar+0x594>)
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	fb02 f203 	mul.w	r2, r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	18d0      	adds	r0, r2, r3
 80095c4:	4b16      	ldr	r3, [pc, #88]	; (8009620 <font_drawChar+0x584>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1a      	ldr	r2, [pc, #104]	; (8009634 <font_drawChar+0x598>)
 80095ca:	6812      	ldr	r2, [r2, #0]
 80095cc:	fb02 f203 	mul.w	r2, r2, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	18d1      	adds	r1, r2, r3
 80095d4:	4b13      	ldr	r3, [pc, #76]	; (8009624 <font_drawChar+0x588>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a15      	ldr	r2, [pc, #84]	; (8009630 <font_drawChar+0x594>)
 80095da:	6812      	ldr	r2, [r2, #0]
 80095dc:	fb02 f203 	mul.w	r2, r2, r3
 80095e0:	4b15      	ldr	r3, [pc, #84]	; (8009638 <font_drawChar+0x59c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	18d5      	adds	r5, r2, r3
 80095e6:	4b10      	ldr	r3, [pc, #64]	; (8009628 <font_drawChar+0x58c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a12      	ldr	r2, [pc, #72]	; (8009634 <font_drawChar+0x598>)
 80095ec:	6812      	ldr	r2, [r2, #0]
 80095ee:	fb02 f203 	mul.w	r2, r2, r3
 80095f2:	4b12      	ldr	r3, [pc, #72]	; (800963c <font_drawChar+0x5a0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	462a      	mov	r2, r5
 80095fc:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80095fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009602:	3301      	adds	r3, #1
 8009604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009608:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800960c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009610:	429a      	cmp	r2, r3
 8009612:	dba9      	blt.n	8009568 <font_drawChar+0x4cc>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8009614:	f000 bd8f 	b.w	800a136 <font_drawChar+0x109a>
 8009618:	20007a24 	.word	0x20007a24
 800961c:	20007a28 	.word	0x20007a28
 8009620:	20007a2c 	.word	0x20007a2c
 8009624:	20007a30 	.word	0x20007a30
 8009628:	20007a34 	.word	0x20007a34
 800962c:	20007a20 	.word	0x20007a20
 8009630:	200027f0 	.word	0x200027f0
 8009634:	200027f4 	.word	0x200027f4
 8009638:	20007a44 	.word	0x20007a44
 800963c:	200027f8 	.word	0x200027f8
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B:
      if(bg!=fg) {
 8009640:	4b96      	ldr	r3, [pc, #600]	; (800989c <font_drawChar+0x800>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	4b96      	ldr	r3, [pc, #600]	; (80098a0 <font_drawChar+0x804>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	429a      	cmp	r2, r3
 800964a:	f000 8123 	beq.w	8009894 <font_drawChar+0x7f8>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 800964e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009652:	2b00      	cmp	r3, #0
 8009654:	dd1d      	ble.n	8009692 <font_drawChar+0x5f6>
 8009656:	4b93      	ldr	r3, [pc, #588]	; (80098a4 <font_drawChar+0x808>)
 8009658:	681c      	ldr	r4, [r3, #0]
 800965a:	4b93      	ldr	r3, [pc, #588]	; (80098a8 <font_drawChar+0x80c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009662:	fb02 f303 	mul.w	r3, r2, r3
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	1ad0      	subs	r0, r2, r3
 800966a:	4b8f      	ldr	r3, [pc, #572]	; (80098a8 <font_drawChar+0x80c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009672:	fb02 f203 	mul.w	r2, r2, r3
 8009676:	4b8d      	ldr	r3, [pc, #564]	; (80098ac <font_drawChar+0x810>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	789b      	ldrb	r3, [r3, #2]
 800967c:	4619      	mov	r1, r3
 800967e:	4b8c      	ldr	r3, [pc, #560]	; (80098b0 <font_drawChar+0x814>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	fb03 f101 	mul.w	r1, r3, r1
 8009686:	4b85      	ldr	r3, [pc, #532]	; (800989c <font_drawChar+0x800>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	460b      	mov	r3, r1
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects+recIdx;
 8009692:	4b86      	ldr	r3, [pc, #536]	; (80098ac <font_drawChar+0x810>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	4413      	add	r3, r2
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
        int idx=0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while(idx<recNum) {
 80096a8:	e0c9      	b.n	800983e <font_drawChar+0x7a2>
          unsigned short v = *(rects+idx);
 80096aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b2:	4413      	add	r3, r2
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	847b      	strh	r3, [r7, #34]	; 0x22
          xf = (v & 0x3f)-xmin;
 80096b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	4a7c      	ldr	r2, [pc, #496]	; (80098b4 <font_drawChar+0x818>)
 80096c4:	6013      	str	r3, [r2, #0]
          int ybg=0,xfCur=xf;
 80096c6:	2300      	movs	r3, #0
 80096c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80096cc:	4b79      	ldr	r3, [pc, #484]	; (80098b4 <font_drawChar+0x818>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	61fb      	str	r3, [r7, #28]
          while(xf==xfCur && idx<recNum) {
 80096d2:	e079      	b.n	80097c8 <font_drawChar+0x72c>
            v = *(rects+idx);
 80096d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096dc:	4413      	add	r3, r2
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	847b      	strh	r3, [r7, #34]	; 0x22
            yf = (v>>6) & 0x1f;
 80096e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096e4:	099b      	lsrs	r3, r3, #6
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f003 031f 	and.w	r3, r3, #31
 80096ec:	4a72      	ldr	r2, [pc, #456]	; (80098b8 <font_drawChar+0x81c>)
 80096ee:	6013      	str	r3, [r2, #0]
            hf = ((v>>11) & 0x1f)+1;
 80096f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096f2:	0adb      	lsrs	r3, r3, #11
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	f003 031f 	and.w	r3, r3, #31
 80096fa:	3301      	adds	r3, #1
 80096fc:	4a6f      	ldr	r2, [pc, #444]	; (80098bc <font_drawChar+0x820>)
 80096fe:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8009700:	4b6d      	ldr	r3, [pc, #436]	; (80098b8 <font_drawChar+0x81c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009708:	429a      	cmp	r2, r3
 800970a:	da21      	bge.n	8009750 <font_drawChar+0x6b4>
 800970c:	4b65      	ldr	r3, [pc, #404]	; (80098a4 <font_drawChar+0x808>)
 800970e:	681c      	ldr	r4, [r3, #0]
 8009710:	4b65      	ldr	r3, [pc, #404]	; (80098a8 <font_drawChar+0x80c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69fa      	ldr	r2, [r7, #28]
 8009716:	fb02 f203 	mul.w	r2, r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	18d0      	adds	r0, r2, r3
 800971e:	4b64      	ldr	r3, [pc, #400]	; (80098b0 <font_drawChar+0x814>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009726:	fb02 f203 	mul.w	r2, r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	18d1      	adds	r1, r2, r3
 800972e:	4b5e      	ldr	r3, [pc, #376]	; (80098a8 <font_drawChar+0x80c>)
 8009730:	681d      	ldr	r5, [r3, #0]
 8009732:	4b61      	ldr	r3, [pc, #388]	; (80098b8 <font_drawChar+0x81c>)
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	4a5c      	ldr	r2, [pc, #368]	; (80098b0 <font_drawChar+0x814>)
 800973e:	6812      	ldr	r2, [r2, #0]
 8009740:	fb02 f203 	mul.w	r2, r2, r3
 8009744:	4b55      	ldr	r3, [pc, #340]	; (800989c <font_drawChar+0x800>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	4613      	mov	r3, r2
 800974c:	462a      	mov	r2, r5
 800974e:	47a0      	blx	r4
            ybg = yf+hf;
 8009750:	4b59      	ldr	r3, [pc, #356]	; (80098b8 <font_drawChar+0x81c>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b59      	ldr	r3, [pc, #356]	; (80098bc <font_drawChar+0x820>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4413      	add	r3, r2
 800975a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 800975e:	4b51      	ldr	r3, [pc, #324]	; (80098a4 <font_drawChar+0x808>)
 8009760:	681c      	ldr	r4, [r3, #0]
 8009762:	4b51      	ldr	r3, [pc, #324]	; (80098a8 <font_drawChar+0x80c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	fb02 f203 	mul.w	r2, r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	18d0      	adds	r0, r2, r3
 8009770:	4b51      	ldr	r3, [pc, #324]	; (80098b8 <font_drawChar+0x81c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a4e      	ldr	r2, [pc, #312]	; (80098b0 <font_drawChar+0x814>)
 8009776:	6812      	ldr	r2, [r2, #0]
 8009778:	fb02 f203 	mul.w	r2, r2, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	18d1      	adds	r1, r2, r3
 8009780:	4b4f      	ldr	r3, [pc, #316]	; (80098c0 <font_drawChar+0x824>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	4b48      	ldr	r3, [pc, #288]	; (80098a8 <font_drawChar+0x80c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	18d5      	adds	r5, r2, r3
 800978a:	4b4c      	ldr	r3, [pc, #304]	; (80098bc <font_drawChar+0x820>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a48      	ldr	r2, [pc, #288]	; (80098b0 <font_drawChar+0x814>)
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	fb02 f203 	mul.w	r2, r2, r3
 8009796:	4b42      	ldr	r3, [pc, #264]	; (80098a0 <font_drawChar+0x804>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4613      	mov	r3, r2
 800979e:	462a      	mov	r2, r5
 80097a0:	47a0      	blx	r4
            idx++;
 80097a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097a6:	3301      	adds	r3, #1
 80097a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            v = *(rects+idx);
 80097ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b4:	4413      	add	r3, r2
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	847b      	strh	r3, [r7, #34]	; 0x22
            xf = (v & 0x3f)-xmin;
 80097ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	4a3b      	ldr	r2, [pc, #236]	; (80098b4 <font_drawChar+0x818>)
 80097c6:	6013      	str	r3, [r2, #0]
          while(xf==xfCur && idx<recNum) {
 80097c8:	4b3a      	ldr	r3, [pc, #232]	; (80098b4 <font_drawChar+0x818>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d106      	bne.n	80097e0 <font_drawChar+0x744>
 80097d2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80097d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80097da:	429a      	cmp	r2, r3
 80097dc:	f6ff af7a 	blt.w	80096d4 <font_drawChar+0x638>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 80097e0:	4b32      	ldr	r3, [pc, #200]	; (80098ac <font_drawChar+0x810>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	789b      	ldrb	r3, [r3, #2]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ec:	4293      	cmp	r3, r2
 80097ee:	da26      	bge.n	800983e <font_drawChar+0x7a2>
 80097f0:	4b2c      	ldr	r3, [pc, #176]	; (80098a4 <font_drawChar+0x808>)
 80097f2:	681c      	ldr	r4, [r3, #0]
 80097f4:	4b2c      	ldr	r3, [pc, #176]	; (80098a8 <font_drawChar+0x80c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	69fa      	ldr	r2, [r7, #28]
 80097fa:	fb02 f203 	mul.w	r2, r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	18d0      	adds	r0, r2, r3
 8009802:	4b2b      	ldr	r3, [pc, #172]	; (80098b0 <font_drawChar+0x814>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800980a:	fb02 f203 	mul.w	r2, r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	18d1      	adds	r1, r2, r3
 8009812:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <font_drawChar+0x824>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	4b24      	ldr	r3, [pc, #144]	; (80098a8 <font_drawChar+0x80c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	18d5      	adds	r5, r2, r3
 800981c:	4b23      	ldr	r3, [pc, #140]	; (80098ac <font_drawChar+0x810>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	789b      	ldrb	r3, [r3, #2]
 8009822:	461a      	mov	r2, r3
 8009824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	4a21      	ldr	r2, [pc, #132]	; (80098b0 <font_drawChar+0x814>)
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	fb02 f203 	mul.w	r2, r2, r3
 8009832:	4b1a      	ldr	r3, [pc, #104]	; (800989c <font_drawChar+0x800>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4613      	mov	r3, r2
 800983a:	462a      	mov	r2, r5
 800983c:	47a0      	blx	r4
        while(idx<recNum) {
 800983e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009842:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009846:	429a      	cmp	r2, r3
 8009848:	f6ff af2f 	blt.w	80096aa <font_drawChar+0x60e>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 800984c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009850:	2b00      	cmp	r3, #0
 8009852:	f340 846b 	ble.w	800a12c <font_drawChar+0x1090>
 8009856:	4b13      	ldr	r3, [pc, #76]	; (80098a4 <font_drawChar+0x808>)
 8009858:	681c      	ldr	r4, [r3, #0]
 800985a:	4b13      	ldr	r3, [pc, #76]	; (80098a8 <font_drawChar+0x80c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009860:	fb02 f203 	mul.w	r2, r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	18d0      	adds	r0, r2, r3
 8009868:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <font_drawChar+0x80c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009870:	fb02 f203 	mul.w	r2, r2, r3
 8009874:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <font_drawChar+0x810>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	789b      	ldrb	r3, [r3, #2]
 800987a:	4619      	mov	r1, r3
 800987c:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <font_drawChar+0x814>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	fb03 f101 	mul.w	r1, r3, r1
 8009884:	4b05      	ldr	r3, [pc, #20]	; (800989c <font_drawChar+0x800>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	460b      	mov	r3, r1
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	47a0      	blx	r4
        yf = (v>>6) & 0x1f;
        hf = ((v>>11) & 0x1f)+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009890:	f000 bc4c 	b.w	800a12c <font_drawChar+0x1090>
      for(int i=0; i<recNum; i++) {
 8009894:	2300      	movs	r3, #0
 8009896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800989a:	e066      	b.n	800996a <font_drawChar+0x8ce>
 800989c:	200027fc 	.word	0x200027fc
 80098a0:	200027f8 	.word	0x200027f8
 80098a4:	20007a20 	.word	0x20007a20
 80098a8:	200027f0 	.word	0x200027f0
 80098ac:	20007a24 	.word	0x20007a24
 80098b0:	200027f4 	.word	0x200027f4
 80098b4:	20007a28 	.word	0x20007a28
 80098b8:	20007a2c 	.word	0x20007a2c
 80098bc:	20007a34 	.word	0x20007a34
 80098c0:	20007a44 	.word	0x20007a44
        unsigned short *rects = (unsigned short*)rFont->rects;
 80098c4:	4b64      	ldr	r3, [pc, #400]	; (8009a58 <font_drawChar+0x9bc>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        unsigned short v = (rects[i+recIdx]);
 80098cc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80098d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098d4:	4413      	add	r3, r2
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098da:	4413      	add	r3, r2
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	857b      	strh	r3, [r7, #42]	; 0x2a
        xf = (v & 0x3f)-xmin;
 80098e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80098e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	4a5c      	ldr	r2, [pc, #368]	; (8009a5c <font_drawChar+0x9c0>)
 80098ec:	6013      	str	r3, [r2, #0]
        yf = (v>>6) & 0x1f;
 80098ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80098f0:	099b      	lsrs	r3, r3, #6
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	f003 031f 	and.w	r3, r3, #31
 80098f8:	4a59      	ldr	r2, [pc, #356]	; (8009a60 <font_drawChar+0x9c4>)
 80098fa:	6013      	str	r3, [r2, #0]
        hf = ((v>>11) & 0x1f)+1;
 80098fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80098fe:	0adb      	lsrs	r3, r3, #11
 8009900:	b29b      	uxth	r3, r3
 8009902:	f003 031f 	and.w	r3, r3, #31
 8009906:	3301      	adds	r3, #1
 8009908:	4a56      	ldr	r2, [pc, #344]	; (8009a64 <font_drawChar+0x9c8>)
 800990a:	6013      	str	r3, [r2, #0]
        wf = 1;
 800990c:	4b56      	ldr	r3, [pc, #344]	; (8009a68 <font_drawChar+0x9cc>)
 800990e:	2201      	movs	r2, #1
 8009910:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009912:	4b56      	ldr	r3, [pc, #344]	; (8009a6c <font_drawChar+0x9d0>)
 8009914:	681c      	ldr	r4, [r3, #0]
 8009916:	4b51      	ldr	r3, [pc, #324]	; (8009a5c <font_drawChar+0x9c0>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a55      	ldr	r2, [pc, #340]	; (8009a70 <font_drawChar+0x9d4>)
 800991c:	6812      	ldr	r2, [r2, #0]
 800991e:	fb02 f203 	mul.w	r2, r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	18d0      	adds	r0, r2, r3
 8009926:	4b4e      	ldr	r3, [pc, #312]	; (8009a60 <font_drawChar+0x9c4>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a52      	ldr	r2, [pc, #328]	; (8009a74 <font_drawChar+0x9d8>)
 800992c:	6812      	ldr	r2, [r2, #0]
 800992e:	fb02 f203 	mul.w	r2, r2, r3
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	18d1      	adds	r1, r2, r3
 8009936:	4b4c      	ldr	r3, [pc, #304]	; (8009a68 <font_drawChar+0x9cc>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a4d      	ldr	r2, [pc, #308]	; (8009a70 <font_drawChar+0x9d4>)
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	fb02 f203 	mul.w	r2, r2, r3
 8009942:	4b4d      	ldr	r3, [pc, #308]	; (8009a78 <font_drawChar+0x9dc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	18d5      	adds	r5, r2, r3
 8009948:	4b46      	ldr	r3, [pc, #280]	; (8009a64 <font_drawChar+0x9c8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a49      	ldr	r2, [pc, #292]	; (8009a74 <font_drawChar+0x9d8>)
 800994e:	6812      	ldr	r2, [r2, #0]
 8009950:	fb02 f203 	mul.w	r2, r2, r3
 8009954:	4b49      	ldr	r3, [pc, #292]	; (8009a7c <font_drawChar+0x9e0>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	4613      	mov	r3, r2
 800995c:	462a      	mov	r2, r5
 800995e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009964:	3301      	adds	r3, #1
 8009966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800996a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800996e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009972:	429a      	cmp	r2, r3
 8009974:	dba6      	blt.n	80098c4 <font_drawChar+0x828>
      break;
 8009976:	e3d9      	b.n	800a12c <font_drawChar+0x1090>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B:
      if(bg!=fg) {
 8009978:	4b41      	ldr	r3, [pc, #260]	; (8009a80 <font_drawChar+0x9e4>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	4b3f      	ldr	r3, [pc, #252]	; (8009a7c <font_drawChar+0x9e0>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	f000 817e 	beq.w	8009c82 <font_drawChar+0xbe6>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8009986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800998a:	2b00      	cmp	r3, #0
 800998c:	dd1d      	ble.n	80099ca <font_drawChar+0x92e>
 800998e:	4b37      	ldr	r3, [pc, #220]	; (8009a6c <font_drawChar+0x9d0>)
 8009990:	681c      	ldr	r4, [r3, #0]
 8009992:	4b37      	ldr	r3, [pc, #220]	; (8009a70 <font_drawChar+0x9d4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800999a:	fb02 f303 	mul.w	r3, r2, r3
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	1ad0      	subs	r0, r2, r3
 80099a2:	4b33      	ldr	r3, [pc, #204]	; (8009a70 <font_drawChar+0x9d4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80099aa:	fb02 f203 	mul.w	r2, r2, r3
 80099ae:	4b2a      	ldr	r3, [pc, #168]	; (8009a58 <font_drawChar+0x9bc>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	789b      	ldrb	r3, [r3, #2]
 80099b4:	4619      	mov	r1, r3
 80099b6:	4b2f      	ldr	r3, [pc, #188]	; (8009a74 <font_drawChar+0x9d8>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	fb03 f101 	mul.w	r1, r3, r1
 80099be:	4b30      	ldr	r3, [pc, #192]	; (8009a80 <font_drawChar+0x9e4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	460b      	mov	r3, r1
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects;
 80099ca:	4b23      	ldr	r3, [pc, #140]	; (8009a58 <font_drawChar+0x9bc>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	633b      	str	r3, [r7, #48]	; 0x30
        int idx=0,yfCur=0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099d8:	2300      	movs	r3, #0
 80099da:	67fb      	str	r3, [r7, #124]	; 0x7c
        while(idx<recNum) {
 80099dc:	e127      	b.n	8009c2e <font_drawChar+0xb92>
          unsigned short v = *(rects+idx+recIdx);
 80099de:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80099e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099e6:	4413      	add	r3, r2
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ec:	4413      	add	r3, r2
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
          yf = (v>>5) & 0x3f;
 80099f4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80099f8:	095b      	lsrs	r3, r3, #5
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a00:	4a17      	ldr	r2, [pc, #92]	; (8009a60 <font_drawChar+0x9c4>)
 8009a02:	6013      	str	r3, [r2, #0]
          if(yf-yfCur>1 /*|| (yf-yfCur>0 && yfCur==0)*/) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yf-yfCur)*sy, bg);
 8009a04:	4b16      	ldr	r3, [pc, #88]	; (8009a60 <font_drawChar+0x9c4>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	dd1c      	ble.n	8009a4a <font_drawChar+0x9ae>
 8009a10:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <font_drawChar+0x9d0>)
 8009a12:	681c      	ldr	r4, [r3, #0]
 8009a14:	4b17      	ldr	r3, [pc, #92]	; (8009a74 <font_drawChar+0x9d8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a1a:	fb02 f203 	mul.w	r2, r2, r3
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	18d1      	adds	r1, r2, r3
 8009a22:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <font_drawChar+0x9d4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a28:	fb02 f003 	mul.w	r0, r2, r3
 8009a2c:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <font_drawChar+0x9c4>)
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	4a0f      	ldr	r2, [pc, #60]	; (8009a74 <font_drawChar+0x9d8>)
 8009a36:	6812      	ldr	r2, [r2, #0]
 8009a38:	fb02 f203 	mul.w	r2, r2, r3
 8009a3c:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <font_drawChar+0x9e4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4613      	mov	r3, r2
 8009a44:	4602      	mov	r2, r0
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	47a0      	blx	r4
          //Serial.print(idx); Serial.print("  "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          yfCur=yf;
 8009a4a:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <font_drawChar+0x9c4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
          int xbg=0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	677b      	str	r3, [r7, #116]	; 0x74
          while(yf==yfCur && idx<recNum) {
 8009a54:	e08a      	b.n	8009b6c <font_drawChar+0xad0>
 8009a56:	bf00      	nop
 8009a58:	20007a24 	.word	0x20007a24
 8009a5c:	20007a28 	.word	0x20007a28
 8009a60:	20007a2c 	.word	0x20007a2c
 8009a64:	20007a34 	.word	0x20007a34
 8009a68:	20007a30 	.word	0x20007a30
 8009a6c:	20007a20 	.word	0x20007a20
 8009a70:	200027f0 	.word	0x200027f0
 8009a74:	200027f4 	.word	0x200027f4
 8009a78:	20007a44 	.word	0x20007a44
 8009a7c:	200027f8 	.word	0x200027f8
 8009a80:	200027fc 	.word	0x200027fc
            xf = v & 0x1f;
 8009a84:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009a88:	f003 031f 	and.w	r3, r3, #31
 8009a8c:	4a7e      	ldr	r2, [pc, #504]	; (8009c88 <font_drawChar+0xbec>)
 8009a8e:	6013      	str	r3, [r2, #0]
            wf = ((v>>11) & 0x1f)+1;
 8009a90:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009a94:	0adb      	lsrs	r3, r3, #11
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f003 031f 	and.w	r3, r3, #31
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	4a7b      	ldr	r2, [pc, #492]	; (8009c8c <font_drawChar+0xbf0>)
 8009aa0:	6013      	str	r3, [r2, #0]
            if(xf>xbg) (*fillRectFun)(x+xbg*sx, y+yf*sy, (xf-xbg)*sx, 1*sy, bg);
 8009aa2:	4b79      	ldr	r3, [pc, #484]	; (8009c88 <font_drawChar+0xbec>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	da1f      	bge.n	8009aec <font_drawChar+0xa50>
 8009aac:	4b78      	ldr	r3, [pc, #480]	; (8009c90 <font_drawChar+0xbf4>)
 8009aae:	681c      	ldr	r4, [r3, #0]
 8009ab0:	4b78      	ldr	r3, [pc, #480]	; (8009c94 <font_drawChar+0xbf8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ab6:	fb02 f203 	mul.w	r2, r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	18d0      	adds	r0, r2, r3
 8009abe:	4b76      	ldr	r3, [pc, #472]	; (8009c98 <font_drawChar+0xbfc>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a76      	ldr	r2, [pc, #472]	; (8009c9c <font_drawChar+0xc00>)
 8009ac4:	6812      	ldr	r2, [r2, #0]
 8009ac6:	fb02 f203 	mul.w	r2, r2, r3
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	18d1      	adds	r1, r2, r3
 8009ace:	4b6e      	ldr	r3, [pc, #440]	; (8009c88 <font_drawChar+0xbec>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	4a6f      	ldr	r2, [pc, #444]	; (8009c94 <font_drawChar+0xbf8>)
 8009ad8:	6812      	ldr	r2, [r2, #0]
 8009ada:	fb02 f203 	mul.w	r2, r2, r3
 8009ade:	4b6f      	ldr	r3, [pc, #444]	; (8009c9c <font_drawChar+0xc00>)
 8009ae0:	681d      	ldr	r5, [r3, #0]
 8009ae2:	4b6f      	ldr	r3, [pc, #444]	; (8009ca0 <font_drawChar+0xc04>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	462b      	mov	r3, r5
 8009aea:	47a0      	blx	r4
            xbg = xf+wf;
 8009aec:	4b66      	ldr	r3, [pc, #408]	; (8009c88 <font_drawChar+0xbec>)
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	4b66      	ldr	r3, [pc, #408]	; (8009c8c <font_drawChar+0xbf0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4413      	add	r3, r2
 8009af6:	677b      	str	r3, [r7, #116]	; 0x74
            //if(idx==recNum-1) fg=0x07E0; else fg=0xffff;
            (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, 1*sy, fg);
 8009af8:	4b65      	ldr	r3, [pc, #404]	; (8009c90 <font_drawChar+0xbf4>)
 8009afa:	681c      	ldr	r4, [r3, #0]
 8009afc:	4b62      	ldr	r3, [pc, #392]	; (8009c88 <font_drawChar+0xbec>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a64      	ldr	r2, [pc, #400]	; (8009c94 <font_drawChar+0xbf8>)
 8009b02:	6812      	ldr	r2, [r2, #0]
 8009b04:	fb02 f203 	mul.w	r2, r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	18d0      	adds	r0, r2, r3
 8009b0c:	4b62      	ldr	r3, [pc, #392]	; (8009c98 <font_drawChar+0xbfc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a62      	ldr	r2, [pc, #392]	; (8009c9c <font_drawChar+0xc00>)
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	fb02 f203 	mul.w	r2, r2, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	18d1      	adds	r1, r2, r3
 8009b1c:	4b5b      	ldr	r3, [pc, #364]	; (8009c8c <font_drawChar+0xbf0>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a5c      	ldr	r2, [pc, #368]	; (8009c94 <font_drawChar+0xbf8>)
 8009b22:	6812      	ldr	r2, [r2, #0]
 8009b24:	fb02 f203 	mul.w	r2, r2, r3
 8009b28:	4b5e      	ldr	r3, [pc, #376]	; (8009ca4 <font_drawChar+0xc08>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	441a      	add	r2, r3
 8009b2e:	4b5b      	ldr	r3, [pc, #364]	; (8009c9c <font_drawChar+0xc00>)
 8009b30:	681d      	ldr	r5, [r3, #0]
 8009b32:	4b5d      	ldr	r3, [pc, #372]	; (8009ca8 <font_drawChar+0xc0c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	462b      	mov	r3, r5
 8009b3a:	47a0      	blx	r4
            idx++;
 8009b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b40:	3301      	adds	r3, #1
 8009b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            v = *(rects+idx+recIdx);
 8009b46:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009b4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b4e:	4413      	add	r3, r2
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            yf = (v>>5) & 0x3f;
 8009b5c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009b60:	095b      	lsrs	r3, r3, #5
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b68:	4a4b      	ldr	r2, [pc, #300]	; (8009c98 <font_drawChar+0xbfc>)
 8009b6a:	6013      	str	r3, [r2, #0]
          while(yf==yfCur && idx<recNum) {
 8009b6c:	4b4a      	ldr	r3, [pc, #296]	; (8009c98 <font_drawChar+0xbfc>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d105      	bne.n	8009b82 <font_drawChar+0xae6>
 8009b76:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	db80      	blt.n	8009a84 <font_drawChar+0x9e8>
          }
          // last bg line
          if(xbg<chWd) (*fillRectFun)(x+xbg*sx, y+yfCur*sy, (chWd-xbg)*sx, 1*sy, bg);
 8009b82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b86:	429a      	cmp	r2, r3
 8009b88:	da1d      	bge.n	8009bc6 <font_drawChar+0xb2a>
 8009b8a:	4b41      	ldr	r3, [pc, #260]	; (8009c90 <font_drawChar+0xbf4>)
 8009b8c:	681c      	ldr	r4, [r3, #0]
 8009b8e:	4b41      	ldr	r3, [pc, #260]	; (8009c94 <font_drawChar+0xbf8>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b94:	fb02 f203 	mul.w	r2, r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	18d0      	adds	r0, r2, r3
 8009b9c:	4b3f      	ldr	r3, [pc, #252]	; (8009c9c <font_drawChar+0xc00>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009ba2:	fb02 f203 	mul.w	r2, r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	18d1      	adds	r1, r2, r3
 8009baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	4a38      	ldr	r2, [pc, #224]	; (8009c94 <font_drawChar+0xbf8>)
 8009bb2:	6812      	ldr	r2, [r2, #0]
 8009bb4:	fb02 f203 	mul.w	r2, r2, r3
 8009bb8:	4b38      	ldr	r3, [pc, #224]	; (8009c9c <font_drawChar+0xc00>)
 8009bba:	681d      	ldr	r5, [r3, #0]
 8009bbc:	4b38      	ldr	r3, [pc, #224]	; (8009ca0 <font_drawChar+0xc04>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	462b      	mov	r3, r5
 8009bc4:	47a0      	blx	r4
          //Serial.print(idx); Serial.print(" ++ "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          if(idx==recNum-1 && yfCur<rFont->ht) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yfCur<rFont->ht-yfCur)*sy, bg);
 8009bc6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d12c      	bne.n	8009c2e <font_drawChar+0xb92>
 8009bd4:	4b35      	ldr	r3, [pc, #212]	; (8009cac <font_drawChar+0xc10>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	789b      	ldrb	r3, [r3, #2]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bde:	4293      	cmp	r3, r2
 8009be0:	da25      	bge.n	8009c2e <font_drawChar+0xb92>
 8009be2:	4b2b      	ldr	r3, [pc, #172]	; (8009c90 <font_drawChar+0xbf4>)
 8009be4:	681c      	ldr	r4, [r3, #0]
 8009be6:	4b2d      	ldr	r3, [pc, #180]	; (8009c9c <font_drawChar+0xc00>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009bec:	fb02 f203 	mul.w	r2, r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	18d1      	adds	r1, r2, r3
 8009bf4:	4b27      	ldr	r3, [pc, #156]	; (8009c94 <font_drawChar+0xbf8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bfa:	fb02 f003 	mul.w	r0, r2, r3
 8009bfe:	4b2b      	ldr	r3, [pc, #172]	; (8009cac <font_drawChar+0xc10>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	789b      	ldrb	r3, [r3, #2]
 8009c04:	461a      	mov	r2, r3
 8009c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	bfb4      	ite	lt
 8009c10:	2301      	movlt	r3, #1
 8009c12:	2300      	movge	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	461a      	mov	r2, r3
 8009c18:	4b20      	ldr	r3, [pc, #128]	; (8009c9c <font_drawChar+0xc00>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	fb03 f202 	mul.w	r2, r3, r2
 8009c20:	4b1f      	ldr	r3, [pc, #124]	; (8009ca0 <font_drawChar+0xc04>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	4613      	mov	r3, r2
 8009c28:	4602      	mov	r2, r0
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	47a0      	blx	r4
        while(idx<recNum) {
 8009c2e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c36:	429a      	cmp	r2, r3
 8009c38:	f6ff aed1 	blt.w	80099de <font_drawChar+0x942>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8009c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f340 8275 	ble.w	800a130 <font_drawChar+0x1094>
 8009c46:	4b12      	ldr	r3, [pc, #72]	; (8009c90 <font_drawChar+0xbf4>)
 8009c48:	681c      	ldr	r4, [r3, #0]
 8009c4a:	4b12      	ldr	r3, [pc, #72]	; (8009c94 <font_drawChar+0xbf8>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c50:	fb02 f203 	mul.w	r2, r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	18d0      	adds	r0, r2, r3
 8009c58:	4b0e      	ldr	r3, [pc, #56]	; (8009c94 <font_drawChar+0xbf8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009c60:	fb02 f203 	mul.w	r2, r2, r3
 8009c64:	4b11      	ldr	r3, [pc, #68]	; (8009cac <font_drawChar+0xc10>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	789b      	ldrb	r3, [r3, #2]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4b0b      	ldr	r3, [pc, #44]	; (8009c9c <font_drawChar+0xc00>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	fb03 f101 	mul.w	r1, r3, r1
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <font_drawChar+0xc04>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	47a0      	blx	r4
        yf = (v>>5) & 0x3f;
        wf = ((v>>11) & 0x1f)+1;
        hf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009c80:	e256      	b.n	800a130 <font_drawChar+0x1094>
      for(int i=0; i<recNum; i++) {
 8009c82:	2300      	movs	r3, #0
 8009c84:	673b      	str	r3, [r7, #112]	; 0x70
 8009c86:	e063      	b.n	8009d50 <font_drawChar+0xcb4>
 8009c88:	20007a28 	.word	0x20007a28
 8009c8c:	20007a30 	.word	0x20007a30
 8009c90:	20007a20 	.word	0x20007a20
 8009c94:	200027f0 	.word	0x200027f0
 8009c98:	20007a2c 	.word	0x20007a2c
 8009c9c:	200027f4 	.word	0x200027f4
 8009ca0:	200027fc 	.word	0x200027fc
 8009ca4:	20007a44 	.word	0x20007a44
 8009ca8:	200027f8 	.word	0x200027f8
 8009cac:	20007a24 	.word	0x20007a24
        unsigned short *rects = (unsigned short*)rFont->rects;
 8009cb0:	4b4c      	ldr	r3, [pc, #304]	; (8009de4 <font_drawChar+0xd48>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned short v = (rects[i+recIdx]);
 8009cb8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cbe:	4413      	add	r3, r2
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cc4:	4413      	add	r3, r2
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        xf = (v & 0x1f)-xmin;
 8009cca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ccc:	f003 021f 	and.w	r2, r3, #31
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	4a44      	ldr	r2, [pc, #272]	; (8009de8 <font_drawChar+0xd4c>)
 8009cd6:	6013      	str	r3, [r2, #0]
        yf = (v>>5) & 0x3f;
 8009cd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009cda:	095b      	lsrs	r3, r3, #5
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ce2:	4a42      	ldr	r2, [pc, #264]	; (8009dec <font_drawChar+0xd50>)
 8009ce4:	6013      	str	r3, [r2, #0]
        wf = ((v>>11) & 0x1f)+1;
 8009ce6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ce8:	0adb      	lsrs	r3, r3, #11
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	4a3f      	ldr	r2, [pc, #252]	; (8009df0 <font_drawChar+0xd54>)
 8009cf4:	6013      	str	r3, [r2, #0]
        hf = 1;
 8009cf6:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <font_drawChar+0xd58>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009cfc:	4b3e      	ldr	r3, [pc, #248]	; (8009df8 <font_drawChar+0xd5c>)
 8009cfe:	681c      	ldr	r4, [r3, #0]
 8009d00:	4b39      	ldr	r3, [pc, #228]	; (8009de8 <font_drawChar+0xd4c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a3d      	ldr	r2, [pc, #244]	; (8009dfc <font_drawChar+0xd60>)
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	fb02 f203 	mul.w	r2, r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	18d0      	adds	r0, r2, r3
 8009d10:	4b36      	ldr	r3, [pc, #216]	; (8009dec <font_drawChar+0xd50>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a3a      	ldr	r2, [pc, #232]	; (8009e00 <font_drawChar+0xd64>)
 8009d16:	6812      	ldr	r2, [r2, #0]
 8009d18:	fb02 f203 	mul.w	r2, r2, r3
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	18d1      	adds	r1, r2, r3
 8009d20:	4b33      	ldr	r3, [pc, #204]	; (8009df0 <font_drawChar+0xd54>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a35      	ldr	r2, [pc, #212]	; (8009dfc <font_drawChar+0xd60>)
 8009d26:	6812      	ldr	r2, [r2, #0]
 8009d28:	fb02 f203 	mul.w	r2, r2, r3
 8009d2c:	4b35      	ldr	r3, [pc, #212]	; (8009e04 <font_drawChar+0xd68>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	18d5      	adds	r5, r2, r3
 8009d32:	4b30      	ldr	r3, [pc, #192]	; (8009df4 <font_drawChar+0xd58>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a32      	ldr	r2, [pc, #200]	; (8009e00 <font_drawChar+0xd64>)
 8009d38:	6812      	ldr	r2, [r2, #0]
 8009d3a:	fb02 f203 	mul.w	r2, r2, r3
 8009d3e:	4b32      	ldr	r3, [pc, #200]	; (8009e08 <font_drawChar+0xd6c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	4613      	mov	r3, r2
 8009d46:	462a      	mov	r2, r5
 8009d48:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009d50:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009d54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d56:	429a      	cmp	r2, r3
 8009d58:	dbaa      	blt.n	8009cb0 <font_drawChar+0xc14>
      break;
 8009d5a:	e1e9      	b.n	800a130 <font_drawChar+0x1094>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B:
      if(bg!=fg) {
 8009d5c:	4b2b      	ldr	r3, [pc, #172]	; (8009e0c <font_drawChar+0xd70>)
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	4b29      	ldr	r3, [pc, #164]	; (8009e08 <font_drawChar+0xd6c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	f000 811f 	beq.w	8009fa8 <font_drawChar+0xf0c>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8009d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dd1d      	ble.n	8009dae <font_drawChar+0xd12>
 8009d72:	4b21      	ldr	r3, [pc, #132]	; (8009df8 <font_drawChar+0xd5c>)
 8009d74:	681c      	ldr	r4, [r3, #0]
 8009d76:	4b21      	ldr	r3, [pc, #132]	; (8009dfc <font_drawChar+0xd60>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009d7e:	fb02 f303 	mul.w	r3, r2, r3
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	1ad0      	subs	r0, r2, r3
 8009d86:	4b1d      	ldr	r3, [pc, #116]	; (8009dfc <font_drawChar+0xd60>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009d8e:	fb02 f203 	mul.w	r2, r2, r3
 8009d92:	4b14      	ldr	r3, [pc, #80]	; (8009de4 <font_drawChar+0xd48>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	789b      	ldrb	r3, [r3, #2]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <font_drawChar+0xd64>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	fb03 f101 	mul.w	r1, r3, r1
 8009da2:	4b1a      	ldr	r3, [pc, #104]	; (8009e0c <font_drawChar+0xd70>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	460b      	mov	r3, r1
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	47a0      	blx	r4
        unsigned char *rects = (unsigned char*)rFont->rects + recIdx*3;
 8009dae:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <font_drawChar+0xd48>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6899      	ldr	r1, [r3, #8]
 8009db4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009db8:	4613      	mov	r3, r2
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	4413      	add	r3, r2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	647b      	str	r3, [r7, #68]	; 0x44
        int idx=0;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(idx<recNum*3) {
 8009dc6:	e0c3      	b.n	8009f50 <font_drawChar+0xeb4>
          xf = *(rects+idx+0);
 8009dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <font_drawChar+0xd4c>)
 8009dd4:	601a      	str	r2, [r3, #0]
          int ybg=0,xfCur=xf;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dda:	4b03      	ldr	r3, [pc, #12]	; (8009de8 <font_drawChar+0xd4c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	643b      	str	r3, [r7, #64]	; 0x40
          while(xf==xfCur && idx<recNum*3) {
 8009de0:	e07d      	b.n	8009ede <font_drawChar+0xe42>
 8009de2:	bf00      	nop
 8009de4:	20007a24 	.word	0x20007a24
 8009de8:	20007a28 	.word	0x20007a28
 8009dec:	20007a2c 	.word	0x20007a2c
 8009df0:	20007a30 	.word	0x20007a30
 8009df4:	20007a34 	.word	0x20007a34
 8009df8:	20007a20 	.word	0x20007a20
 8009dfc:	200027f0 	.word	0x200027f0
 8009e00:	200027f4 	.word	0x200027f4
 8009e04:	20007a44 	.word	0x20007a44
 8009e08:	200027f8 	.word	0x200027f8
 8009e0c:	200027fc 	.word	0x200027fc
            yf = *(rects+idx+1);
 8009e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e12:	3301      	adds	r3, #1
 8009e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e16:	4413      	add	r3, r2
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	4b8e      	ldr	r3, [pc, #568]	; (800a058 <font_drawChar+0xfbc>)
 8009e1e:	601a      	str	r2, [r3, #0]
            hf = *(rects+idx+2)+1;
 8009e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e22:	3302      	adds	r3, #2
 8009e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e26:	4413      	add	r3, r2
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	4a8b      	ldr	r2, [pc, #556]	; (800a05c <font_drawChar+0xfc0>)
 8009e2e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8009e30:	4b89      	ldr	r3, [pc, #548]	; (800a058 <font_drawChar+0xfbc>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e36:	429a      	cmp	r2, r3
 8009e38:	da1f      	bge.n	8009e7a <font_drawChar+0xdde>
 8009e3a:	4b89      	ldr	r3, [pc, #548]	; (800a060 <font_drawChar+0xfc4>)
 8009e3c:	681c      	ldr	r4, [r3, #0]
 8009e3e:	4b89      	ldr	r3, [pc, #548]	; (800a064 <font_drawChar+0xfc8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e44:	fb02 f203 	mul.w	r2, r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	18d0      	adds	r0, r2, r3
 8009e4c:	4b86      	ldr	r3, [pc, #536]	; (800a068 <font_drawChar+0xfcc>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e52:	fb02 f203 	mul.w	r2, r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	18d1      	adds	r1, r2, r3
 8009e5a:	4b82      	ldr	r3, [pc, #520]	; (800a064 <font_drawChar+0xfc8>)
 8009e5c:	681d      	ldr	r5, [r3, #0]
 8009e5e:	4b7e      	ldr	r3, [pc, #504]	; (800a058 <font_drawChar+0xfbc>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	4a80      	ldr	r2, [pc, #512]	; (800a068 <font_drawChar+0xfcc>)
 8009e68:	6812      	ldr	r2, [r2, #0]
 8009e6a:	fb02 f203 	mul.w	r2, r2, r3
 8009e6e:	4b7f      	ldr	r3, [pc, #508]	; (800a06c <font_drawChar+0xfd0>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	4613      	mov	r3, r2
 8009e76:	462a      	mov	r2, r5
 8009e78:	47a0      	blx	r4
            ybg = yf+hf;
 8009e7a:	4b77      	ldr	r3, [pc, #476]	; (800a058 <font_drawChar+0xfbc>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	4b77      	ldr	r3, [pc, #476]	; (800a05c <font_drawChar+0xfc0>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4413      	add	r3, r2
 8009e84:	66bb      	str	r3, [r7, #104]	; 0x68
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 8009e86:	4b76      	ldr	r3, [pc, #472]	; (800a060 <font_drawChar+0xfc4>)
 8009e88:	681c      	ldr	r4, [r3, #0]
 8009e8a:	4b76      	ldr	r3, [pc, #472]	; (800a064 <font_drawChar+0xfc8>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e90:	fb02 f203 	mul.w	r2, r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	18d0      	adds	r0, r2, r3
 8009e98:	4b6f      	ldr	r3, [pc, #444]	; (800a058 <font_drawChar+0xfbc>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a72      	ldr	r2, [pc, #456]	; (800a068 <font_drawChar+0xfcc>)
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	fb02 f203 	mul.w	r2, r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	18d1      	adds	r1, r2, r3
 8009ea8:	4b71      	ldr	r3, [pc, #452]	; (800a070 <font_drawChar+0xfd4>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	4b6d      	ldr	r3, [pc, #436]	; (800a064 <font_drawChar+0xfc8>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	18d5      	adds	r5, r2, r3
 8009eb2:	4b6a      	ldr	r3, [pc, #424]	; (800a05c <font_drawChar+0xfc0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a6c      	ldr	r2, [pc, #432]	; (800a068 <font_drawChar+0xfcc>)
 8009eb8:	6812      	ldr	r2, [r2, #0]
 8009eba:	fb02 f203 	mul.w	r2, r2, r3
 8009ebe:	4b6d      	ldr	r3, [pc, #436]	; (800a074 <font_drawChar+0xfd8>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	47a0      	blx	r4
            idx += 3;
 8009eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ecc:	3303      	adds	r3, #3
 8009ece:	66fb      	str	r3, [r7, #108]	; 0x6c
            xf = *(rects+idx+0);
 8009ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ed4:	4413      	add	r3, r2
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4b67      	ldr	r3, [pc, #412]	; (800a078 <font_drawChar+0xfdc>)
 8009edc:	601a      	str	r2, [r3, #0]
          while(xf==xfCur && idx<recNum*3) {
 8009ede:	4b66      	ldr	r3, [pc, #408]	; (800a078 <font_drawChar+0xfdc>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d107      	bne.n	8009ef8 <font_drawChar+0xe5c>
 8009ee8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009eec:	4613      	mov	r3, r2
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	4413      	add	r3, r2
 8009ef2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	db8b      	blt.n	8009e10 <font_drawChar+0xd74>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 8009ef8:	4b60      	ldr	r3, [pc, #384]	; (800a07c <font_drawChar+0xfe0>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	789b      	ldrb	r3, [r3, #2]
 8009efe:	461a      	mov	r2, r3
 8009f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f02:	4293      	cmp	r3, r2
 8009f04:	da24      	bge.n	8009f50 <font_drawChar+0xeb4>
 8009f06:	4b56      	ldr	r3, [pc, #344]	; (800a060 <font_drawChar+0xfc4>)
 8009f08:	681c      	ldr	r4, [r3, #0]
 8009f0a:	4b56      	ldr	r3, [pc, #344]	; (800a064 <font_drawChar+0xfc8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f10:	fb02 f203 	mul.w	r2, r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	18d0      	adds	r0, r2, r3
 8009f18:	4b53      	ldr	r3, [pc, #332]	; (800a068 <font_drawChar+0xfcc>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f1e:	fb02 f203 	mul.w	r2, r2, r3
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	18d1      	adds	r1, r2, r3
 8009f26:	4b52      	ldr	r3, [pc, #328]	; (800a070 <font_drawChar+0xfd4>)
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	4b4e      	ldr	r3, [pc, #312]	; (800a064 <font_drawChar+0xfc8>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	18d5      	adds	r5, r2, r3
 8009f30:	4b52      	ldr	r3, [pc, #328]	; (800a07c <font_drawChar+0xfe0>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	789b      	ldrb	r3, [r3, #2]
 8009f36:	461a      	mov	r2, r3
 8009f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	4a4a      	ldr	r2, [pc, #296]	; (800a068 <font_drawChar+0xfcc>)
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	fb02 f203 	mul.w	r2, r2, r3
 8009f44:	4b49      	ldr	r3, [pc, #292]	; (800a06c <font_drawChar+0xfd0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	462a      	mov	r2, r5
 8009f4e:	47a0      	blx	r4
        while(idx<recNum*3) {
 8009f50:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009f54:	4613      	mov	r3, r2
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	4413      	add	r3, r2
 8009f5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	f6ff af33 	blt.w	8009dc8 <font_drawChar+0xd2c>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8009f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f340 80e4 	ble.w	800a134 <font_drawChar+0x1098>
 8009f6c:	4b3c      	ldr	r3, [pc, #240]	; (800a060 <font_drawChar+0xfc4>)
 8009f6e:	681c      	ldr	r4, [r3, #0]
 8009f70:	4b3c      	ldr	r3, [pc, #240]	; (800a064 <font_drawChar+0xfc8>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f76:	fb02 f203 	mul.w	r2, r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	18d0      	adds	r0, r2, r3
 8009f7e:	4b39      	ldr	r3, [pc, #228]	; (800a064 <font_drawChar+0xfc8>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009f86:	fb02 f203 	mul.w	r2, r2, r3
 8009f8a:	4b3c      	ldr	r3, [pc, #240]	; (800a07c <font_drawChar+0xfe0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	789b      	ldrb	r3, [r3, #2]
 8009f90:	4619      	mov	r1, r3
 8009f92:	4b35      	ldr	r3, [pc, #212]	; (800a068 <font_drawChar+0xfcc>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	fb03 f101 	mul.w	r1, r3, r1
 8009f9a:	4b34      	ldr	r3, [pc, #208]	; (800a06c <font_drawChar+0xfd0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	47a0      	blx	r4
        yf = (rects[1]);
        hf = (rects[2])+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009fa6:	e0c5      	b.n	800a134 <font_drawChar+0x1098>
      for(int i=0; i<recNum; i++) {
 8009fa8:	2300      	movs	r3, #0
 8009faa:	667b      	str	r3, [r7, #100]	; 0x64
 8009fac:	e04b      	b.n	800a046 <font_drawChar+0xfaa>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8009fae:	4b33      	ldr	r3, [pc, #204]	; (800a07c <font_drawChar+0xfe0>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6899      	ldr	r1, [r3, #8]
 8009fb4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fba:	441a      	add	r2, r3
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	4413      	add	r3, r2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	64bb      	str	r3, [r7, #72]	; 0x48
        xf = (rects[0])-xmin;
 8009fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	4a29      	ldr	r2, [pc, #164]	; (800a078 <font_drawChar+0xfdc>)
 8009fd2:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 8009fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <font_drawChar+0xfbc>)
 8009fde:	601a      	str	r2, [r3, #0]
        hf = (rects[2])+1;
 8009fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe2:	3302      	adds	r3, #2
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	4a1c      	ldr	r2, [pc, #112]	; (800a05c <font_drawChar+0xfc0>)
 8009fea:	6013      	str	r3, [r2, #0]
        wf = 1;
 8009fec:	4b24      	ldr	r3, [pc, #144]	; (800a080 <font_drawChar+0xfe4>)
 8009fee:	2201      	movs	r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <font_drawChar+0xfc4>)
 8009ff4:	681c      	ldr	r4, [r3, #0]
 8009ff6:	4b20      	ldr	r3, [pc, #128]	; (800a078 <font_drawChar+0xfdc>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a1a      	ldr	r2, [pc, #104]	; (800a064 <font_drawChar+0xfc8>)
 8009ffc:	6812      	ldr	r2, [r2, #0]
 8009ffe:	fb02 f203 	mul.w	r2, r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	18d0      	adds	r0, r2, r3
 800a006:	4b14      	ldr	r3, [pc, #80]	; (800a058 <font_drawChar+0xfbc>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a17      	ldr	r2, [pc, #92]	; (800a068 <font_drawChar+0xfcc>)
 800a00c:	6812      	ldr	r2, [r2, #0]
 800a00e:	fb02 f203 	mul.w	r2, r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	18d1      	adds	r1, r2, r3
 800a016:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <font_drawChar+0xfe4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a12      	ldr	r2, [pc, #72]	; (800a064 <font_drawChar+0xfc8>)
 800a01c:	6812      	ldr	r2, [r2, #0]
 800a01e:	fb02 f203 	mul.w	r2, r2, r3
 800a022:	4b13      	ldr	r3, [pc, #76]	; (800a070 <font_drawChar+0xfd4>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	18d5      	adds	r5, r2, r3
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <font_drawChar+0xfc0>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a0e      	ldr	r2, [pc, #56]	; (800a068 <font_drawChar+0xfcc>)
 800a02e:	6812      	ldr	r2, [r2, #0]
 800a030:	fb02 f203 	mul.w	r2, r2, r3
 800a034:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <font_drawChar+0xfd8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	4613      	mov	r3, r2
 800a03c:	462a      	mov	r2, r5
 800a03e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800a040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a042:	3301      	adds	r3, #1
 800a044:	667b      	str	r3, [r7, #100]	; 0x64
 800a046:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a04a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a04c:	429a      	cmp	r2, r3
 800a04e:	dbae      	blt.n	8009fae <font_drawChar+0xf12>
      break;
 800a050:	e070      	b.n	800a134 <font_drawChar+0x1098>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B:
      for(int i=0; i<recNum; i++) {
 800a052:	2300      	movs	r3, #0
 800a054:	663b      	str	r3, [r7, #96]	; 0x60
 800a056:	e061      	b.n	800a11c <font_drawChar+0x1080>
 800a058:	20007a2c 	.word	0x20007a2c
 800a05c:	20007a34 	.word	0x20007a34
 800a060:	20007a20 	.word	0x20007a20
 800a064:	200027f0 	.word	0x200027f0
 800a068:	200027f4 	.word	0x200027f4
 800a06c:	200027fc 	.word	0x200027fc
 800a070:	20007a44 	.word	0x20007a44
 800a074:	200027f8 	.word	0x200027f8
 800a078:	20007a28 	.word	0x20007a28
 800a07c:	20007a24 	.word	0x20007a24
 800a080:	20007a30 	.word	0x20007a30
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 800a084:	4b32      	ldr	r3, [pc, #200]	; (800a150 <font_drawChar+0x10b4>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6899      	ldr	r1, [r3, #8]
 800a08a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800a08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a090:	441a      	add	r2, r3
 800a092:	4613      	mov	r3, r2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	4413      	add	r3, r2
 800a098:	440b      	add	r3, r1
 800a09a:	64fb      	str	r3, [r7, #76]	; 0x4c
        xf = (rects[0])-xmin;
 800a09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	4a2b      	ldr	r2, [pc, #172]	; (800a154 <font_drawChar+0x10b8>)
 800a0a8:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800a0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	4b29      	ldr	r3, [pc, #164]	; (800a158 <font_drawChar+0x10bc>)
 800a0b4:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 800a0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a27      	ldr	r2, [pc, #156]	; (800a15c <font_drawChar+0x10c0>)
 800a0c0:	6013      	str	r3, [r2, #0]
        hf = 1;
 800a0c2:	4b27      	ldr	r3, [pc, #156]	; (800a160 <font_drawChar+0x10c4>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 800a0c8:	4b26      	ldr	r3, [pc, #152]	; (800a164 <font_drawChar+0x10c8>)
 800a0ca:	681c      	ldr	r4, [r3, #0]
 800a0cc:	4b21      	ldr	r3, [pc, #132]	; (800a154 <font_drawChar+0x10b8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a25      	ldr	r2, [pc, #148]	; (800a168 <font_drawChar+0x10cc>)
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	fb02 f203 	mul.w	r2, r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	18d0      	adds	r0, r2, r3
 800a0dc:	4b1e      	ldr	r3, [pc, #120]	; (800a158 <font_drawChar+0x10bc>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a22      	ldr	r2, [pc, #136]	; (800a16c <font_drawChar+0x10d0>)
 800a0e2:	6812      	ldr	r2, [r2, #0]
 800a0e4:	fb02 f203 	mul.w	r2, r2, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	18d1      	adds	r1, r2, r3
 800a0ec:	4b1b      	ldr	r3, [pc, #108]	; (800a15c <font_drawChar+0x10c0>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a1d      	ldr	r2, [pc, #116]	; (800a168 <font_drawChar+0x10cc>)
 800a0f2:	6812      	ldr	r2, [r2, #0]
 800a0f4:	fb02 f203 	mul.w	r2, r2, r3
 800a0f8:	4b1d      	ldr	r3, [pc, #116]	; (800a170 <font_drawChar+0x10d4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	18d5      	adds	r5, r2, r3
 800a0fe:	4b18      	ldr	r3, [pc, #96]	; (800a160 <font_drawChar+0x10c4>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a1a      	ldr	r2, [pc, #104]	; (800a16c <font_drawChar+0x10d0>)
 800a104:	6812      	ldr	r2, [r2, #0]
 800a106:	fb02 f203 	mul.w	r2, r2, r3
 800a10a:	4b1a      	ldr	r3, [pc, #104]	; (800a174 <font_drawChar+0x10d8>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	4613      	mov	r3, r2
 800a112:	462a      	mov	r2, r5
 800a114:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800a116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a118:	3301      	adds	r3, #1
 800a11a:	663b      	str	r3, [r7, #96]	; 0x60
 800a11c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a122:	429a      	cmp	r2, r3
 800a124:	dbae      	blt.n	800a084 <font_drawChar+0xfe8>
      }
      break;
 800a126:	e006      	b.n	800a136 <font_drawChar+0x109a>
    default: break;
 800a128:	bf00      	nop
 800a12a:	e004      	b.n	800a136 <font_drawChar+0x109a>
      break;
 800a12c:	bf00      	nop
 800a12e:	e002      	b.n	800a136 <font_drawChar+0x109a>
      break;
 800a130:	bf00      	nop
 800a132:	e000      	b.n	800a136 <font_drawChar+0x109a>
      break;
 800a134:	bf00      	nop
#endif
  }
  return (wd+bold)*sx;
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <font_drawChar+0x10d4>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a13e:	4413      	add	r3, r2
 800a140:	4a09      	ldr	r2, [pc, #36]	; (800a168 <font_drawChar+0x10cc>)
 800a142:	6812      	ldr	r2, [r2, #0]
 800a144:	fb02 f303 	mul.w	r3, r2, r3
}
 800a148:	4618      	mov	r0, r3
 800a14a:	37a8      	adds	r7, #168	; 0xa8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bdb0      	pop	{r4, r5, r7, pc}
 800a150:	20007a24 	.word	0x20007a24
 800a154:	20007a28 	.word	0x20007a28
 800a158:	20007a2c 	.word	0x20007a2c
 800a15c:	20007a30 	.word	0x20007a30
 800a160:	20007a34 	.word	0x20007a34
 800a164:	20007a20 	.word	0x20007a20
 800a168:	200027f0 	.word	0x200027f0
 800a16c:	200027f4 	.word	0x200027f4
 800a170:	20007a44 	.word	0x20007a44
 800a174:	200027f8 	.word	0x200027f8

0800a178 <font_strWidth>:

// ----------------------------------------------------------------
int font_strWidth(char *str)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  int wd = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
  while (*str) wd += font_charWidth(*str++);
 800a184:	e00a      	b.n	800a19c <font_strWidth+0x24>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe ff16 	bl	8008fc0 <font_charWidth>
 800a194:	4602      	mov	r2, r0
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4413      	add	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1f0      	bne.n	800a186 <font_strWidth+0xe>
  return wd;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <font_printf>:

static char printfbuffer[512];

int font_printf(int xpos, int ypos, char *str, ...)
{
 800a1b0:	b40c      	push	{r2, r3}
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, str);
 800a1bc:	f107 031c 	add.w	r3, r7, #28
 800a1c0:	60fb      	str	r3, [r7, #12]
  vsnprintf(printfbuffer, sizeof(printfbuffer), str, args);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1ca:	4808      	ldr	r0, [pc, #32]	; (800a1ec <font_printf+0x3c>)
 800a1cc:	f001 fe16 	bl	800bdfc <vsniprintf>
  va_end(args);
  return font_printStr(xpos, ypos,printfbuffer);
 800a1d0:	4a06      	ldr	r2, [pc, #24]	; (800a1ec <font_printf+0x3c>)
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f80b 	bl	800a1f0 <font_printStr>
 800a1da:	4603      	mov	r3, r0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1e6:	b002      	add	sp, #8
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20007a50 	.word	0x20007a50

0800a1f0 <font_printStr>:

// ----------------------------------------------------------------
int font_printStr(int xpos, int ypos, char *str)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08a      	sub	sp, #40	; 0x28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
  unsigned char ch;
  int stl, row;
  int x = xpos;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	627b      	str	r3, [r7, #36]	; 0x24
  int y = ypos;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	623b      	str	r3, [r7, #32]
  int wd = font_strWidth(str);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7ff ffb7 	bl	800a178 <font_strWidth>
 800a20a:	61f8      	str	r0, [r7, #28]

  //fillRectFun(xpos, ypos, wd, font_getHeight(), 0);

  if(x==ALIGN_RIGHT) x = scrWd - wd; // right = -1
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	d105      	bne.n	800a220 <font_printStr+0x30>
 800a214:	4b29      	ldr	r3, [pc, #164]	; (800a2bc <font_printStr+0xcc>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
 800a21e:	e00b      	b.n	800a238 <font_printStr+0x48>
  else if(x<0) x = (scrWd - wd) / 2; // center = -2
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	2b00      	cmp	r3, #0
 800a224:	da08      	bge.n	800a238 <font_printStr+0x48>
 800a226:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <font_printStr+0xcc>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	da00      	bge.n	800a234 <font_printStr+0x44>
 800a232:	3301      	adds	r3, #1
 800a234:	105b      	asrs	r3, r3, #1
 800a236:	627b      	str	r3, [r7, #36]	; 0x24
  if(x<0) x = 0; // left
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da34      	bge.n	800a2a8 <font_printStr+0xb8>
 800a23e:	2300      	movs	r3, #0
 800a240:	627b      	str	r3, [r7, #36]	; 0x24

  while(*str) {
 800a242:	e031      	b.n	800a2a8 <font_printStr+0xb8>
    char ch = *str++;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	607a      	str	r2, [r7, #4]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	76fb      	strb	r3, [r7, #27]
    int wd = font_drawChar(x,y,ch);
 800a24e:	7efb      	ldrb	r3, [r7, #27]
 800a250:	461a      	mov	r2, r3
 800a252:	6a39      	ldr	r1, [r7, #32]
 800a254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a256:	f7fe ff21 	bl	800909c <font_drawChar>
 800a25a:	6178      	str	r0, [r7, #20]
    x+=wd;
 800a25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	4413      	add	r3, r2
 800a262:	627b      	str	r3, [r7, #36]	; 0x24
    if((cr && x>=scrWd) || ch==10) { 
 800a264:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <font_printStr+0xd0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d004      	beq.n	800a276 <font_printStr+0x86>
 800a26c:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <font_printStr+0xcc>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a272:	429a      	cmp	r2, r3
 800a274:	da02      	bge.n	800a27c <font_printStr+0x8c>
 800a276:	7efb      	ldrb	r3, [r7, #27]
 800a278:	2b0a      	cmp	r3, #10
 800a27a:	d115      	bne.n	800a2a8 <font_printStr+0xb8>
      x = cr ? 0 : xpos; 
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <font_printStr+0xd0>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <font_printStr+0x98>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	e000      	b.n	800a28a <font_printStr+0x9a>
 800a288:	2300      	movs	r3, #0
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
      y += rFont->ht * sy + spacingY; 
 800a28c:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <font_printStr+0xd4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	789b      	ldrb	r3, [r3, #2]
 800a292:	461a      	mov	r2, r3
 800a294:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <font_printStr+0xd8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	fb03 f202 	mul.w	r2, r3, r2
 800a29c:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <font_printStr+0xdc>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	6a3a      	ldr	r2, [r7, #32]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	623b      	str	r3, [r7, #32]
  while(*str) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1c9      	bne.n	800a244 <font_printStr+0x54>
    }
  }
  return x;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3728      	adds	r7, #40	; 0x28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20007a38 	.word	0x20007a38
 800a2c0:	20007a48 	.word	0x20007a48
 800a2c4:	20007a24 	.word	0x20007a24
 800a2c8:	200027f4 	.word	0x200027f4
 800a2cc:	20007a40 	.word	0x20007a40

0800a2d0 <font_isNumber>:
// ----------------------------------------------------------------
// callbacks
bool font_isNumber(unsigned char ch)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) || ch==' ' || ch=='-';
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	2b2f      	cmp	r3, #47	; 0x2f
 800a2de:	d902      	bls.n	800a2e6 <font_isNumber+0x16>
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	2b39      	cmp	r3, #57	; 0x39
 800a2e4:	d905      	bls.n	800a2f2 <font_isNumber+0x22>
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d002      	beq.n	800a2f2 <font_isNumber+0x22>
 800a2ec:	79fb      	ldrb	r3, [r7, #7]
 800a2ee:	2b2d      	cmp	r3, #45	; 0x2d
 800a2f0:	d101      	bne.n	800a2f6 <font_isNumber+0x26>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <font_isNumber+0x28>
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <__errno>:
 800a304:	4b01      	ldr	r3, [pc, #4]	; (800a30c <__errno+0x8>)
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	20002840 	.word	0x20002840

0800a310 <__libc_init_array>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	4e0d      	ldr	r6, [pc, #52]	; (800a348 <__libc_init_array+0x38>)
 800a314:	4c0d      	ldr	r4, [pc, #52]	; (800a34c <__libc_init_array+0x3c>)
 800a316:	1ba4      	subs	r4, r4, r6
 800a318:	10a4      	asrs	r4, r4, #2
 800a31a:	2500      	movs	r5, #0
 800a31c:	42a5      	cmp	r5, r4
 800a31e:	d109      	bne.n	800a334 <__libc_init_array+0x24>
 800a320:	4e0b      	ldr	r6, [pc, #44]	; (800a350 <__libc_init_array+0x40>)
 800a322:	4c0c      	ldr	r4, [pc, #48]	; (800a354 <__libc_init_array+0x44>)
 800a324:	f003 fd90 	bl	800de48 <_init>
 800a328:	1ba4      	subs	r4, r4, r6
 800a32a:	10a4      	asrs	r4, r4, #2
 800a32c:	2500      	movs	r5, #0
 800a32e:	42a5      	cmp	r5, r4
 800a330:	d105      	bne.n	800a33e <__libc_init_array+0x2e>
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a338:	4798      	blx	r3
 800a33a:	3501      	adds	r5, #1
 800a33c:	e7ee      	b.n	800a31c <__libc_init_array+0xc>
 800a33e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a342:	4798      	blx	r3
 800a344:	3501      	adds	r5, #1
 800a346:	e7f2      	b.n	800a32e <__libc_init_array+0x1e>
 800a348:	08010120 	.word	0x08010120
 800a34c:	08010120 	.word	0x08010120
 800a350:	08010120 	.word	0x08010120
 800a354:	08010124 	.word	0x08010124

0800a358 <memcpy>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	1e43      	subs	r3, r0, #1
 800a35c:	440a      	add	r2, r1
 800a35e:	4291      	cmp	r1, r2
 800a360:	d100      	bne.n	800a364 <memcpy+0xc>
 800a362:	bd10      	pop	{r4, pc}
 800a364:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a368:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a36c:	e7f7      	b.n	800a35e <memcpy+0x6>

0800a36e <memset>:
 800a36e:	4402      	add	r2, r0
 800a370:	4603      	mov	r3, r0
 800a372:	4293      	cmp	r3, r2
 800a374:	d100      	bne.n	800a378 <memset+0xa>
 800a376:	4770      	bx	lr
 800a378:	f803 1b01 	strb.w	r1, [r3], #1
 800a37c:	e7f9      	b.n	800a372 <memset+0x4>

0800a37e <__cvt>:
 800a37e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a382:	ec55 4b10 	vmov	r4, r5, d0
 800a386:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a388:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a38c:	2d00      	cmp	r5, #0
 800a38e:	460e      	mov	r6, r1
 800a390:	4691      	mov	r9, r2
 800a392:	4619      	mov	r1, r3
 800a394:	bfb8      	it	lt
 800a396:	4622      	movlt	r2, r4
 800a398:	462b      	mov	r3, r5
 800a39a:	f027 0720 	bic.w	r7, r7, #32
 800a39e:	bfbb      	ittet	lt
 800a3a0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3a4:	461d      	movlt	r5, r3
 800a3a6:	2300      	movge	r3, #0
 800a3a8:	232d      	movlt	r3, #45	; 0x2d
 800a3aa:	bfb8      	it	lt
 800a3ac:	4614      	movlt	r4, r2
 800a3ae:	2f46      	cmp	r7, #70	; 0x46
 800a3b0:	700b      	strb	r3, [r1, #0]
 800a3b2:	d004      	beq.n	800a3be <__cvt+0x40>
 800a3b4:	2f45      	cmp	r7, #69	; 0x45
 800a3b6:	d100      	bne.n	800a3ba <__cvt+0x3c>
 800a3b8:	3601      	adds	r6, #1
 800a3ba:	2102      	movs	r1, #2
 800a3bc:	e000      	b.n	800a3c0 <__cvt+0x42>
 800a3be:	2103      	movs	r1, #3
 800a3c0:	ab03      	add	r3, sp, #12
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	ab02      	add	r3, sp, #8
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	4653      	mov	r3, sl
 800a3cc:	ec45 4b10 	vmov	d0, r4, r5
 800a3d0:	f001 fdae 	bl	800bf30 <_dtoa_r>
 800a3d4:	2f47      	cmp	r7, #71	; 0x47
 800a3d6:	4680      	mov	r8, r0
 800a3d8:	d102      	bne.n	800a3e0 <__cvt+0x62>
 800a3da:	f019 0f01 	tst.w	r9, #1
 800a3de:	d026      	beq.n	800a42e <__cvt+0xb0>
 800a3e0:	2f46      	cmp	r7, #70	; 0x46
 800a3e2:	eb08 0906 	add.w	r9, r8, r6
 800a3e6:	d111      	bne.n	800a40c <__cvt+0x8e>
 800a3e8:	f898 3000 	ldrb.w	r3, [r8]
 800a3ec:	2b30      	cmp	r3, #48	; 0x30
 800a3ee:	d10a      	bne.n	800a406 <__cvt+0x88>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f7f6 fb8e 	bl	8000b18 <__aeabi_dcmpeq>
 800a3fc:	b918      	cbnz	r0, 800a406 <__cvt+0x88>
 800a3fe:	f1c6 0601 	rsb	r6, r6, #1
 800a402:	f8ca 6000 	str.w	r6, [sl]
 800a406:	f8da 3000 	ldr.w	r3, [sl]
 800a40a:	4499      	add	r9, r3
 800a40c:	2200      	movs	r2, #0
 800a40e:	2300      	movs	r3, #0
 800a410:	4620      	mov	r0, r4
 800a412:	4629      	mov	r1, r5
 800a414:	f7f6 fb80 	bl	8000b18 <__aeabi_dcmpeq>
 800a418:	b938      	cbnz	r0, 800a42a <__cvt+0xac>
 800a41a:	2230      	movs	r2, #48	; 0x30
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	454b      	cmp	r3, r9
 800a420:	d205      	bcs.n	800a42e <__cvt+0xb0>
 800a422:	1c59      	adds	r1, r3, #1
 800a424:	9103      	str	r1, [sp, #12]
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	e7f8      	b.n	800a41c <__cvt+0x9e>
 800a42a:	f8cd 900c 	str.w	r9, [sp, #12]
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a432:	eba3 0308 	sub.w	r3, r3, r8
 800a436:	4640      	mov	r0, r8
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	b004      	add	sp, #16
 800a43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a440 <__exponent>:
 800a440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a442:	2900      	cmp	r1, #0
 800a444:	4604      	mov	r4, r0
 800a446:	bfba      	itte	lt
 800a448:	4249      	neglt	r1, r1
 800a44a:	232d      	movlt	r3, #45	; 0x2d
 800a44c:	232b      	movge	r3, #43	; 0x2b
 800a44e:	2909      	cmp	r1, #9
 800a450:	f804 2b02 	strb.w	r2, [r4], #2
 800a454:	7043      	strb	r3, [r0, #1]
 800a456:	dd20      	ble.n	800a49a <__exponent+0x5a>
 800a458:	f10d 0307 	add.w	r3, sp, #7
 800a45c:	461f      	mov	r7, r3
 800a45e:	260a      	movs	r6, #10
 800a460:	fb91 f5f6 	sdiv	r5, r1, r6
 800a464:	fb06 1115 	mls	r1, r6, r5, r1
 800a468:	3130      	adds	r1, #48	; 0x30
 800a46a:	2d09      	cmp	r5, #9
 800a46c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a470:	f103 32ff 	add.w	r2, r3, #4294967295
 800a474:	4629      	mov	r1, r5
 800a476:	dc09      	bgt.n	800a48c <__exponent+0x4c>
 800a478:	3130      	adds	r1, #48	; 0x30
 800a47a:	3b02      	subs	r3, #2
 800a47c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a480:	42bb      	cmp	r3, r7
 800a482:	4622      	mov	r2, r4
 800a484:	d304      	bcc.n	800a490 <__exponent+0x50>
 800a486:	1a10      	subs	r0, r2, r0
 800a488:	b003      	add	sp, #12
 800a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a48c:	4613      	mov	r3, r2
 800a48e:	e7e7      	b.n	800a460 <__exponent+0x20>
 800a490:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a494:	f804 2b01 	strb.w	r2, [r4], #1
 800a498:	e7f2      	b.n	800a480 <__exponent+0x40>
 800a49a:	2330      	movs	r3, #48	; 0x30
 800a49c:	4419      	add	r1, r3
 800a49e:	7083      	strb	r3, [r0, #2]
 800a4a0:	1d02      	adds	r2, r0, #4
 800a4a2:	70c1      	strb	r1, [r0, #3]
 800a4a4:	e7ef      	b.n	800a486 <__exponent+0x46>
	...

0800a4a8 <_printf_float>:
 800a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	b08d      	sub	sp, #52	; 0x34
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	f002 fe1d 	bl	800d0f8 <_localeconv_r>
 800a4be:	6803      	ldr	r3, [r0, #0]
 800a4c0:	9304      	str	r3, [sp, #16]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7f5 feac 	bl	8000220 <strlen>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a4d0:	9005      	str	r0, [sp, #20]
 800a4d2:	3307      	adds	r3, #7
 800a4d4:	f023 0307 	bic.w	r3, r3, #7
 800a4d8:	f103 0208 	add.w	r2, r3, #8
 800a4dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a4e0:	f8d4 b000 	ldr.w	fp, [r4]
 800a4e4:	f8c8 2000 	str.w	r2, [r8]
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a4f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a4f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a502:	4ba7      	ldr	r3, [pc, #668]	; (800a7a0 <_printf_float+0x2f8>)
 800a504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a508:	f7f6 fb38 	bl	8000b7c <__aeabi_dcmpun>
 800a50c:	bb70      	cbnz	r0, 800a56c <_printf_float+0xc4>
 800a50e:	f04f 32ff 	mov.w	r2, #4294967295
 800a512:	4ba3      	ldr	r3, [pc, #652]	; (800a7a0 <_printf_float+0x2f8>)
 800a514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a518:	f7f6 fb12 	bl	8000b40 <__aeabi_dcmple>
 800a51c:	bb30      	cbnz	r0, 800a56c <_printf_float+0xc4>
 800a51e:	2200      	movs	r2, #0
 800a520:	2300      	movs	r3, #0
 800a522:	4640      	mov	r0, r8
 800a524:	4649      	mov	r1, r9
 800a526:	f7f6 fb01 	bl	8000b2c <__aeabi_dcmplt>
 800a52a:	b110      	cbz	r0, 800a532 <_printf_float+0x8a>
 800a52c:	232d      	movs	r3, #45	; 0x2d
 800a52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a532:	4a9c      	ldr	r2, [pc, #624]	; (800a7a4 <_printf_float+0x2fc>)
 800a534:	4b9c      	ldr	r3, [pc, #624]	; (800a7a8 <_printf_float+0x300>)
 800a536:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a53a:	bf8c      	ite	hi
 800a53c:	4690      	movhi	r8, r2
 800a53e:	4698      	movls	r8, r3
 800a540:	2303      	movs	r3, #3
 800a542:	f02b 0204 	bic.w	r2, fp, #4
 800a546:	6123      	str	r3, [r4, #16]
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	f04f 0900 	mov.w	r9, #0
 800a54e:	9700      	str	r7, [sp, #0]
 800a550:	4633      	mov	r3, r6
 800a552:	aa0b      	add	r2, sp, #44	; 0x2c
 800a554:	4621      	mov	r1, r4
 800a556:	4628      	mov	r0, r5
 800a558:	f000 f9e6 	bl	800a928 <_printf_common>
 800a55c:	3001      	adds	r0, #1
 800a55e:	f040 808d 	bne.w	800a67c <_printf_float+0x1d4>
 800a562:	f04f 30ff 	mov.w	r0, #4294967295
 800a566:	b00d      	add	sp, #52	; 0x34
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	4642      	mov	r2, r8
 800a56e:	464b      	mov	r3, r9
 800a570:	4640      	mov	r0, r8
 800a572:	4649      	mov	r1, r9
 800a574:	f7f6 fb02 	bl	8000b7c <__aeabi_dcmpun>
 800a578:	b110      	cbz	r0, 800a580 <_printf_float+0xd8>
 800a57a:	4a8c      	ldr	r2, [pc, #560]	; (800a7ac <_printf_float+0x304>)
 800a57c:	4b8c      	ldr	r3, [pc, #560]	; (800a7b0 <_printf_float+0x308>)
 800a57e:	e7da      	b.n	800a536 <_printf_float+0x8e>
 800a580:	6861      	ldr	r1, [r4, #4]
 800a582:	1c4b      	adds	r3, r1, #1
 800a584:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a588:	a80a      	add	r0, sp, #40	; 0x28
 800a58a:	d13e      	bne.n	800a60a <_printf_float+0x162>
 800a58c:	2306      	movs	r3, #6
 800a58e:	6063      	str	r3, [r4, #4]
 800a590:	2300      	movs	r3, #0
 800a592:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a596:	ab09      	add	r3, sp, #36	; 0x24
 800a598:	9300      	str	r3, [sp, #0]
 800a59a:	ec49 8b10 	vmov	d0, r8, r9
 800a59e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a5a2:	6022      	str	r2, [r4, #0]
 800a5a4:	f8cd a004 	str.w	sl, [sp, #4]
 800a5a8:	6861      	ldr	r1, [r4, #4]
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f7ff fee7 	bl	800a37e <__cvt>
 800a5b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a5b4:	2b47      	cmp	r3, #71	; 0x47
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	d109      	bne.n	800a5ce <_printf_float+0x126>
 800a5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5bc:	1cd8      	adds	r0, r3, #3
 800a5be:	db02      	blt.n	800a5c6 <_printf_float+0x11e>
 800a5c0:	6862      	ldr	r2, [r4, #4]
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	dd47      	ble.n	800a656 <_printf_float+0x1ae>
 800a5c6:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5ca:	fa5f fa8a 	uxtb.w	sl, sl
 800a5ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a5d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5d4:	d824      	bhi.n	800a620 <_printf_float+0x178>
 800a5d6:	3901      	subs	r1, #1
 800a5d8:	4652      	mov	r2, sl
 800a5da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a5de:	9109      	str	r1, [sp, #36]	; 0x24
 800a5e0:	f7ff ff2e 	bl	800a440 <__exponent>
 800a5e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5e6:	1813      	adds	r3, r2, r0
 800a5e8:	2a01      	cmp	r2, #1
 800a5ea:	4681      	mov	r9, r0
 800a5ec:	6123      	str	r3, [r4, #16]
 800a5ee:	dc02      	bgt.n	800a5f6 <_printf_float+0x14e>
 800a5f0:	6822      	ldr	r2, [r4, #0]
 800a5f2:	07d1      	lsls	r1, r2, #31
 800a5f4:	d501      	bpl.n	800a5fa <_printf_float+0x152>
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	6123      	str	r3, [r4, #16]
 800a5fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0a5      	beq.n	800a54e <_printf_float+0xa6>
 800a602:	232d      	movs	r3, #45	; 0x2d
 800a604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a608:	e7a1      	b.n	800a54e <_printf_float+0xa6>
 800a60a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a60e:	f000 8177 	beq.w	800a900 <_printf_float+0x458>
 800a612:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a616:	d1bb      	bne.n	800a590 <_printf_float+0xe8>
 800a618:	2900      	cmp	r1, #0
 800a61a:	d1b9      	bne.n	800a590 <_printf_float+0xe8>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e7b6      	b.n	800a58e <_printf_float+0xe6>
 800a620:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a624:	d119      	bne.n	800a65a <_printf_float+0x1b2>
 800a626:	2900      	cmp	r1, #0
 800a628:	6863      	ldr	r3, [r4, #4]
 800a62a:	dd0c      	ble.n	800a646 <_printf_float+0x19e>
 800a62c:	6121      	str	r1, [r4, #16]
 800a62e:	b913      	cbnz	r3, 800a636 <_printf_float+0x18e>
 800a630:	6822      	ldr	r2, [r4, #0]
 800a632:	07d2      	lsls	r2, r2, #31
 800a634:	d502      	bpl.n	800a63c <_printf_float+0x194>
 800a636:	3301      	adds	r3, #1
 800a638:	440b      	add	r3, r1
 800a63a:	6123      	str	r3, [r4, #16]
 800a63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a640:	f04f 0900 	mov.w	r9, #0
 800a644:	e7d9      	b.n	800a5fa <_printf_float+0x152>
 800a646:	b913      	cbnz	r3, 800a64e <_printf_float+0x1a6>
 800a648:	6822      	ldr	r2, [r4, #0]
 800a64a:	07d0      	lsls	r0, r2, #31
 800a64c:	d501      	bpl.n	800a652 <_printf_float+0x1aa>
 800a64e:	3302      	adds	r3, #2
 800a650:	e7f3      	b.n	800a63a <_printf_float+0x192>
 800a652:	2301      	movs	r3, #1
 800a654:	e7f1      	b.n	800a63a <_printf_float+0x192>
 800a656:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a65a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a65e:	4293      	cmp	r3, r2
 800a660:	db05      	blt.n	800a66e <_printf_float+0x1c6>
 800a662:	6822      	ldr	r2, [r4, #0]
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	07d1      	lsls	r1, r2, #31
 800a668:	d5e8      	bpl.n	800a63c <_printf_float+0x194>
 800a66a:	3301      	adds	r3, #1
 800a66c:	e7e5      	b.n	800a63a <_printf_float+0x192>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	bfd4      	ite	le
 800a672:	f1c3 0302 	rsble	r3, r3, #2
 800a676:	2301      	movgt	r3, #1
 800a678:	4413      	add	r3, r2
 800a67a:	e7de      	b.n	800a63a <_printf_float+0x192>
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	055a      	lsls	r2, r3, #21
 800a680:	d407      	bmi.n	800a692 <_printf_float+0x1ea>
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	4642      	mov	r2, r8
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	d12b      	bne.n	800a6e8 <_printf_float+0x240>
 800a690:	e767      	b.n	800a562 <_printf_float+0xba>
 800a692:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a696:	f240 80dc 	bls.w	800a852 <_printf_float+0x3aa>
 800a69a:	2200      	movs	r2, #0
 800a69c:	2300      	movs	r3, #0
 800a69e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6a2:	f7f6 fa39 	bl	8000b18 <__aeabi_dcmpeq>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d033      	beq.n	800a712 <_printf_float+0x26a>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4a41      	ldr	r2, [pc, #260]	; (800a7b4 <_printf_float+0x30c>)
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	f43f af54 	beq.w	800a562 <_printf_float+0xba>
 800a6ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	db02      	blt.n	800a6c8 <_printf_float+0x220>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	07d8      	lsls	r0, r3, #31
 800a6c6:	d50f      	bpl.n	800a6e8 <_printf_float+0x240>
 800a6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	f43f af45 	beq.w	800a562 <_printf_float+0xba>
 800a6d8:	f04f 0800 	mov.w	r8, #0
 800a6dc:	f104 091a 	add.w	r9, r4, #26
 800a6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	4543      	cmp	r3, r8
 800a6e6:	dc09      	bgt.n	800a6fc <_printf_float+0x254>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	079b      	lsls	r3, r3, #30
 800a6ec:	f100 8103 	bmi.w	800a8f6 <_printf_float+0x44e>
 800a6f0:	68e0      	ldr	r0, [r4, #12]
 800a6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	bfb8      	it	lt
 800a6f8:	4618      	movlt	r0, r3
 800a6fa:	e734      	b.n	800a566 <_printf_float+0xbe>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	464a      	mov	r2, r9
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	f43f af2b 	beq.w	800a562 <_printf_float+0xba>
 800a70c:	f108 0801 	add.w	r8, r8, #1
 800a710:	e7e6      	b.n	800a6e0 <_printf_float+0x238>
 800a712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a714:	2b00      	cmp	r3, #0
 800a716:	dc2b      	bgt.n	800a770 <_printf_float+0x2c8>
 800a718:	2301      	movs	r3, #1
 800a71a:	4a26      	ldr	r2, [pc, #152]	; (800a7b4 <_printf_float+0x30c>)
 800a71c:	4631      	mov	r1, r6
 800a71e:	4628      	mov	r0, r5
 800a720:	47b8      	blx	r7
 800a722:	3001      	adds	r0, #1
 800a724:	f43f af1d 	beq.w	800a562 <_printf_float+0xba>
 800a728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72a:	b923      	cbnz	r3, 800a736 <_printf_float+0x28e>
 800a72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a72e:	b913      	cbnz	r3, 800a736 <_printf_float+0x28e>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	07d9      	lsls	r1, r3, #31
 800a734:	d5d8      	bpl.n	800a6e8 <_printf_float+0x240>
 800a736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a73a:	4631      	mov	r1, r6
 800a73c:	4628      	mov	r0, r5
 800a73e:	47b8      	blx	r7
 800a740:	3001      	adds	r0, #1
 800a742:	f43f af0e 	beq.w	800a562 <_printf_float+0xba>
 800a746:	f04f 0900 	mov.w	r9, #0
 800a74a:	f104 0a1a 	add.w	sl, r4, #26
 800a74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a750:	425b      	negs	r3, r3
 800a752:	454b      	cmp	r3, r9
 800a754:	dc01      	bgt.n	800a75a <_printf_float+0x2b2>
 800a756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a758:	e794      	b.n	800a684 <_printf_float+0x1dc>
 800a75a:	2301      	movs	r3, #1
 800a75c:	4652      	mov	r2, sl
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f aefc 	beq.w	800a562 <_printf_float+0xba>
 800a76a:	f109 0901 	add.w	r9, r9, #1
 800a76e:	e7ee      	b.n	800a74e <_printf_float+0x2a6>
 800a770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a774:	429a      	cmp	r2, r3
 800a776:	bfa8      	it	ge
 800a778:	461a      	movge	r2, r3
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	4691      	mov	r9, r2
 800a77e:	dd07      	ble.n	800a790 <_printf_float+0x2e8>
 800a780:	4613      	mov	r3, r2
 800a782:	4631      	mov	r1, r6
 800a784:	4642      	mov	r2, r8
 800a786:	4628      	mov	r0, r5
 800a788:	47b8      	blx	r7
 800a78a:	3001      	adds	r0, #1
 800a78c:	f43f aee9 	beq.w	800a562 <_printf_float+0xba>
 800a790:	f104 031a 	add.w	r3, r4, #26
 800a794:	f04f 0b00 	mov.w	fp, #0
 800a798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a79c:	9306      	str	r3, [sp, #24]
 800a79e:	e015      	b.n	800a7cc <_printf_float+0x324>
 800a7a0:	7fefffff 	.word	0x7fefffff
 800a7a4:	0800fe66 	.word	0x0800fe66
 800a7a8:	0800fe62 	.word	0x0800fe62
 800a7ac:	0800fe6e 	.word	0x0800fe6e
 800a7b0:	0800fe6a 	.word	0x0800fe6a
 800a7b4:	0800fe72 	.word	0x0800fe72
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	9a06      	ldr	r2, [sp, #24]
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4628      	mov	r0, r5
 800a7c0:	47b8      	blx	r7
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	f43f aecd 	beq.w	800a562 <_printf_float+0xba>
 800a7c8:	f10b 0b01 	add.w	fp, fp, #1
 800a7cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a7d0:	ebaa 0309 	sub.w	r3, sl, r9
 800a7d4:	455b      	cmp	r3, fp
 800a7d6:	dcef      	bgt.n	800a7b8 <_printf_float+0x310>
 800a7d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	44d0      	add	r8, sl
 800a7e0:	db15      	blt.n	800a80e <_printf_float+0x366>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	07da      	lsls	r2, r3, #31
 800a7e6:	d412      	bmi.n	800a80e <_printf_float+0x366>
 800a7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ec:	eba3 020a 	sub.w	r2, r3, sl
 800a7f0:	eba3 0a01 	sub.w	sl, r3, r1
 800a7f4:	4592      	cmp	sl, r2
 800a7f6:	bfa8      	it	ge
 800a7f8:	4692      	movge	sl, r2
 800a7fa:	f1ba 0f00 	cmp.w	sl, #0
 800a7fe:	dc0e      	bgt.n	800a81e <_printf_float+0x376>
 800a800:	f04f 0800 	mov.w	r8, #0
 800a804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a808:	f104 091a 	add.w	r9, r4, #26
 800a80c:	e019      	b.n	800a842 <_printf_float+0x39a>
 800a80e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a812:	4631      	mov	r1, r6
 800a814:	4628      	mov	r0, r5
 800a816:	47b8      	blx	r7
 800a818:	3001      	adds	r0, #1
 800a81a:	d1e5      	bne.n	800a7e8 <_printf_float+0x340>
 800a81c:	e6a1      	b.n	800a562 <_printf_float+0xba>
 800a81e:	4653      	mov	r3, sl
 800a820:	4642      	mov	r2, r8
 800a822:	4631      	mov	r1, r6
 800a824:	4628      	mov	r0, r5
 800a826:	47b8      	blx	r7
 800a828:	3001      	adds	r0, #1
 800a82a:	d1e9      	bne.n	800a800 <_printf_float+0x358>
 800a82c:	e699      	b.n	800a562 <_printf_float+0xba>
 800a82e:	2301      	movs	r3, #1
 800a830:	464a      	mov	r2, r9
 800a832:	4631      	mov	r1, r6
 800a834:	4628      	mov	r0, r5
 800a836:	47b8      	blx	r7
 800a838:	3001      	adds	r0, #1
 800a83a:	f43f ae92 	beq.w	800a562 <_printf_float+0xba>
 800a83e:	f108 0801 	add.w	r8, r8, #1
 800a842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a846:	1a9b      	subs	r3, r3, r2
 800a848:	eba3 030a 	sub.w	r3, r3, sl
 800a84c:	4543      	cmp	r3, r8
 800a84e:	dcee      	bgt.n	800a82e <_printf_float+0x386>
 800a850:	e74a      	b.n	800a6e8 <_printf_float+0x240>
 800a852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a854:	2a01      	cmp	r2, #1
 800a856:	dc01      	bgt.n	800a85c <_printf_float+0x3b4>
 800a858:	07db      	lsls	r3, r3, #31
 800a85a:	d53a      	bpl.n	800a8d2 <_printf_float+0x42a>
 800a85c:	2301      	movs	r3, #1
 800a85e:	4642      	mov	r2, r8
 800a860:	4631      	mov	r1, r6
 800a862:	4628      	mov	r0, r5
 800a864:	47b8      	blx	r7
 800a866:	3001      	adds	r0, #1
 800a868:	f43f ae7b 	beq.w	800a562 <_printf_float+0xba>
 800a86c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a870:	4631      	mov	r1, r6
 800a872:	4628      	mov	r0, r5
 800a874:	47b8      	blx	r7
 800a876:	3001      	adds	r0, #1
 800a878:	f108 0801 	add.w	r8, r8, #1
 800a87c:	f43f ae71 	beq.w	800a562 <_printf_float+0xba>
 800a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a882:	2200      	movs	r2, #0
 800a884:	f103 3aff 	add.w	sl, r3, #4294967295
 800a888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a88c:	2300      	movs	r3, #0
 800a88e:	f7f6 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800a892:	b9c8      	cbnz	r0, 800a8c8 <_printf_float+0x420>
 800a894:	4653      	mov	r3, sl
 800a896:	4642      	mov	r2, r8
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	d10e      	bne.n	800a8c0 <_printf_float+0x418>
 800a8a2:	e65e      	b.n	800a562 <_printf_float+0xba>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	4652      	mov	r2, sl
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f43f ae57 	beq.w	800a562 <_printf_float+0xba>
 800a8b4:	f108 0801 	add.w	r8, r8, #1
 800a8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	4543      	cmp	r3, r8
 800a8be:	dcf1      	bgt.n	800a8a4 <_printf_float+0x3fc>
 800a8c0:	464b      	mov	r3, r9
 800a8c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8c6:	e6de      	b.n	800a686 <_printf_float+0x1de>
 800a8c8:	f04f 0800 	mov.w	r8, #0
 800a8cc:	f104 0a1a 	add.w	sl, r4, #26
 800a8d0:	e7f2      	b.n	800a8b8 <_printf_float+0x410>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e7df      	b.n	800a896 <_printf_float+0x3ee>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	464a      	mov	r2, r9
 800a8da:	4631      	mov	r1, r6
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b8      	blx	r7
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	f43f ae3e 	beq.w	800a562 <_printf_float+0xba>
 800a8e6:	f108 0801 	add.w	r8, r8, #1
 800a8ea:	68e3      	ldr	r3, [r4, #12]
 800a8ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	4543      	cmp	r3, r8
 800a8f2:	dcf0      	bgt.n	800a8d6 <_printf_float+0x42e>
 800a8f4:	e6fc      	b.n	800a6f0 <_printf_float+0x248>
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	f104 0919 	add.w	r9, r4, #25
 800a8fe:	e7f4      	b.n	800a8ea <_printf_float+0x442>
 800a900:	2900      	cmp	r1, #0
 800a902:	f43f ae8b 	beq.w	800a61c <_printf_float+0x174>
 800a906:	2300      	movs	r3, #0
 800a908:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a90c:	ab09      	add	r3, sp, #36	; 0x24
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	ec49 8b10 	vmov	d0, r8, r9
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	f8cd a004 	str.w	sl, [sp, #4]
 800a91a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a91e:	4628      	mov	r0, r5
 800a920:	f7ff fd2d 	bl	800a37e <__cvt>
 800a924:	4680      	mov	r8, r0
 800a926:	e648      	b.n	800a5ba <_printf_float+0x112>

0800a928 <_printf_common>:
 800a928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	4691      	mov	r9, r2
 800a92e:	461f      	mov	r7, r3
 800a930:	688a      	ldr	r2, [r1, #8]
 800a932:	690b      	ldr	r3, [r1, #16]
 800a934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a938:	4293      	cmp	r3, r2
 800a93a:	bfb8      	it	lt
 800a93c:	4613      	movlt	r3, r2
 800a93e:	f8c9 3000 	str.w	r3, [r9]
 800a942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a946:	4606      	mov	r6, r0
 800a948:	460c      	mov	r4, r1
 800a94a:	b112      	cbz	r2, 800a952 <_printf_common+0x2a>
 800a94c:	3301      	adds	r3, #1
 800a94e:	f8c9 3000 	str.w	r3, [r9]
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	0699      	lsls	r1, r3, #26
 800a956:	bf42      	ittt	mi
 800a958:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a95c:	3302      	addmi	r3, #2
 800a95e:	f8c9 3000 	strmi.w	r3, [r9]
 800a962:	6825      	ldr	r5, [r4, #0]
 800a964:	f015 0506 	ands.w	r5, r5, #6
 800a968:	d107      	bne.n	800a97a <_printf_common+0x52>
 800a96a:	f104 0a19 	add.w	sl, r4, #25
 800a96e:	68e3      	ldr	r3, [r4, #12]
 800a970:	f8d9 2000 	ldr.w	r2, [r9]
 800a974:	1a9b      	subs	r3, r3, r2
 800a976:	42ab      	cmp	r3, r5
 800a978:	dc28      	bgt.n	800a9cc <_printf_common+0xa4>
 800a97a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	3300      	adds	r3, #0
 800a982:	bf18      	it	ne
 800a984:	2301      	movne	r3, #1
 800a986:	0692      	lsls	r2, r2, #26
 800a988:	d42d      	bmi.n	800a9e6 <_printf_common+0xbe>
 800a98a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a98e:	4639      	mov	r1, r7
 800a990:	4630      	mov	r0, r6
 800a992:	47c0      	blx	r8
 800a994:	3001      	adds	r0, #1
 800a996:	d020      	beq.n	800a9da <_printf_common+0xb2>
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	68e5      	ldr	r5, [r4, #12]
 800a99c:	f8d9 2000 	ldr.w	r2, [r9]
 800a9a0:	f003 0306 	and.w	r3, r3, #6
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	bf08      	it	eq
 800a9a8:	1aad      	subeq	r5, r5, r2
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	6922      	ldr	r2, [r4, #16]
 800a9ae:	bf0c      	ite	eq
 800a9b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b4:	2500      	movne	r5, #0
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	bfc4      	itt	gt
 800a9ba:	1a9b      	subgt	r3, r3, r2
 800a9bc:	18ed      	addgt	r5, r5, r3
 800a9be:	f04f 0900 	mov.w	r9, #0
 800a9c2:	341a      	adds	r4, #26
 800a9c4:	454d      	cmp	r5, r9
 800a9c6:	d11a      	bne.n	800a9fe <_printf_common+0xd6>
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e008      	b.n	800a9de <_printf_common+0xb6>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4652      	mov	r2, sl
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	47c0      	blx	r8
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d103      	bne.n	800a9e2 <_printf_common+0xba>
 800a9da:	f04f 30ff 	mov.w	r0, #4294967295
 800a9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e2:	3501      	adds	r5, #1
 800a9e4:	e7c3      	b.n	800a96e <_printf_common+0x46>
 800a9e6:	18e1      	adds	r1, r4, r3
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	2030      	movs	r0, #48	; 0x30
 800a9ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9f0:	4422      	add	r2, r4
 800a9f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9fa:	3302      	adds	r3, #2
 800a9fc:	e7c5      	b.n	800a98a <_printf_common+0x62>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	4622      	mov	r2, r4
 800aa02:	4639      	mov	r1, r7
 800aa04:	4630      	mov	r0, r6
 800aa06:	47c0      	blx	r8
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d0e6      	beq.n	800a9da <_printf_common+0xb2>
 800aa0c:	f109 0901 	add.w	r9, r9, #1
 800aa10:	e7d8      	b.n	800a9c4 <_printf_common+0x9c>
	...

0800aa14 <_printf_i>:
 800aa14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	7e09      	ldrb	r1, [r1, #24]
 800aa20:	b085      	sub	sp, #20
 800aa22:	296e      	cmp	r1, #110	; 0x6e
 800aa24:	4617      	mov	r7, r2
 800aa26:	4606      	mov	r6, r0
 800aa28:	4698      	mov	r8, r3
 800aa2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa2c:	f000 80b3 	beq.w	800ab96 <_printf_i+0x182>
 800aa30:	d822      	bhi.n	800aa78 <_printf_i+0x64>
 800aa32:	2963      	cmp	r1, #99	; 0x63
 800aa34:	d036      	beq.n	800aaa4 <_printf_i+0x90>
 800aa36:	d80a      	bhi.n	800aa4e <_printf_i+0x3a>
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	f000 80b9 	beq.w	800abb0 <_printf_i+0x19c>
 800aa3e:	2958      	cmp	r1, #88	; 0x58
 800aa40:	f000 8083 	beq.w	800ab4a <_printf_i+0x136>
 800aa44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800aa4c:	e032      	b.n	800aab4 <_printf_i+0xa0>
 800aa4e:	2964      	cmp	r1, #100	; 0x64
 800aa50:	d001      	beq.n	800aa56 <_printf_i+0x42>
 800aa52:	2969      	cmp	r1, #105	; 0x69
 800aa54:	d1f6      	bne.n	800aa44 <_printf_i+0x30>
 800aa56:	6820      	ldr	r0, [r4, #0]
 800aa58:	6813      	ldr	r3, [r2, #0]
 800aa5a:	0605      	lsls	r5, r0, #24
 800aa5c:	f103 0104 	add.w	r1, r3, #4
 800aa60:	d52a      	bpl.n	800aab8 <_printf_i+0xa4>
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6011      	str	r1, [r2, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	da03      	bge.n	800aa72 <_printf_i+0x5e>
 800aa6a:	222d      	movs	r2, #45	; 0x2d
 800aa6c:	425b      	negs	r3, r3
 800aa6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800aa72:	486f      	ldr	r0, [pc, #444]	; (800ac30 <_printf_i+0x21c>)
 800aa74:	220a      	movs	r2, #10
 800aa76:	e039      	b.n	800aaec <_printf_i+0xd8>
 800aa78:	2973      	cmp	r1, #115	; 0x73
 800aa7a:	f000 809d 	beq.w	800abb8 <_printf_i+0x1a4>
 800aa7e:	d808      	bhi.n	800aa92 <_printf_i+0x7e>
 800aa80:	296f      	cmp	r1, #111	; 0x6f
 800aa82:	d020      	beq.n	800aac6 <_printf_i+0xb2>
 800aa84:	2970      	cmp	r1, #112	; 0x70
 800aa86:	d1dd      	bne.n	800aa44 <_printf_i+0x30>
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	f043 0320 	orr.w	r3, r3, #32
 800aa8e:	6023      	str	r3, [r4, #0]
 800aa90:	e003      	b.n	800aa9a <_printf_i+0x86>
 800aa92:	2975      	cmp	r1, #117	; 0x75
 800aa94:	d017      	beq.n	800aac6 <_printf_i+0xb2>
 800aa96:	2978      	cmp	r1, #120	; 0x78
 800aa98:	d1d4      	bne.n	800aa44 <_printf_i+0x30>
 800aa9a:	2378      	movs	r3, #120	; 0x78
 800aa9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aaa0:	4864      	ldr	r0, [pc, #400]	; (800ac34 <_printf_i+0x220>)
 800aaa2:	e055      	b.n	800ab50 <_printf_i+0x13c>
 800aaa4:	6813      	ldr	r3, [r2, #0]
 800aaa6:	1d19      	adds	r1, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	6011      	str	r1, [r2, #0]
 800aaac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab4:	2301      	movs	r3, #1
 800aab6:	e08c      	b.n	800abd2 <_printf_i+0x1be>
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	6011      	str	r1, [r2, #0]
 800aabc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aac0:	bf18      	it	ne
 800aac2:	b21b      	sxthne	r3, r3
 800aac4:	e7cf      	b.n	800aa66 <_printf_i+0x52>
 800aac6:	6813      	ldr	r3, [r2, #0]
 800aac8:	6825      	ldr	r5, [r4, #0]
 800aaca:	1d18      	adds	r0, r3, #4
 800aacc:	6010      	str	r0, [r2, #0]
 800aace:	0628      	lsls	r0, r5, #24
 800aad0:	d501      	bpl.n	800aad6 <_printf_i+0xc2>
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	e002      	b.n	800aadc <_printf_i+0xc8>
 800aad6:	0668      	lsls	r0, r5, #25
 800aad8:	d5fb      	bpl.n	800aad2 <_printf_i+0xbe>
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	4854      	ldr	r0, [pc, #336]	; (800ac30 <_printf_i+0x21c>)
 800aade:	296f      	cmp	r1, #111	; 0x6f
 800aae0:	bf14      	ite	ne
 800aae2:	220a      	movne	r2, #10
 800aae4:	2208      	moveq	r2, #8
 800aae6:	2100      	movs	r1, #0
 800aae8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaec:	6865      	ldr	r5, [r4, #4]
 800aaee:	60a5      	str	r5, [r4, #8]
 800aaf0:	2d00      	cmp	r5, #0
 800aaf2:	f2c0 8095 	blt.w	800ac20 <_printf_i+0x20c>
 800aaf6:	6821      	ldr	r1, [r4, #0]
 800aaf8:	f021 0104 	bic.w	r1, r1, #4
 800aafc:	6021      	str	r1, [r4, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d13d      	bne.n	800ab7e <_printf_i+0x16a>
 800ab02:	2d00      	cmp	r5, #0
 800ab04:	f040 808e 	bne.w	800ac24 <_printf_i+0x210>
 800ab08:	4665      	mov	r5, ip
 800ab0a:	2a08      	cmp	r2, #8
 800ab0c:	d10b      	bne.n	800ab26 <_printf_i+0x112>
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	07db      	lsls	r3, r3, #31
 800ab12:	d508      	bpl.n	800ab26 <_printf_i+0x112>
 800ab14:	6923      	ldr	r3, [r4, #16]
 800ab16:	6862      	ldr	r2, [r4, #4]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	bfde      	ittt	le
 800ab1c:	2330      	movle	r3, #48	; 0x30
 800ab1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab22:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab26:	ebac 0305 	sub.w	r3, ip, r5
 800ab2a:	6123      	str	r3, [r4, #16]
 800ab2c:	f8cd 8000 	str.w	r8, [sp]
 800ab30:	463b      	mov	r3, r7
 800ab32:	aa03      	add	r2, sp, #12
 800ab34:	4621      	mov	r1, r4
 800ab36:	4630      	mov	r0, r6
 800ab38:	f7ff fef6 	bl	800a928 <_printf_common>
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d14d      	bne.n	800abdc <_printf_i+0x1c8>
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	b005      	add	sp, #20
 800ab46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab4a:	4839      	ldr	r0, [pc, #228]	; (800ac30 <_printf_i+0x21c>)
 800ab4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ab50:	6813      	ldr	r3, [r2, #0]
 800ab52:	6821      	ldr	r1, [r4, #0]
 800ab54:	1d1d      	adds	r5, r3, #4
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6015      	str	r5, [r2, #0]
 800ab5a:	060a      	lsls	r2, r1, #24
 800ab5c:	d50b      	bpl.n	800ab76 <_printf_i+0x162>
 800ab5e:	07ca      	lsls	r2, r1, #31
 800ab60:	bf44      	itt	mi
 800ab62:	f041 0120 	orrmi.w	r1, r1, #32
 800ab66:	6021      	strmi	r1, [r4, #0]
 800ab68:	b91b      	cbnz	r3, 800ab72 <_printf_i+0x15e>
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	f022 0220 	bic.w	r2, r2, #32
 800ab70:	6022      	str	r2, [r4, #0]
 800ab72:	2210      	movs	r2, #16
 800ab74:	e7b7      	b.n	800aae6 <_printf_i+0xd2>
 800ab76:	064d      	lsls	r5, r1, #25
 800ab78:	bf48      	it	mi
 800ab7a:	b29b      	uxthmi	r3, r3
 800ab7c:	e7ef      	b.n	800ab5e <_printf_i+0x14a>
 800ab7e:	4665      	mov	r5, ip
 800ab80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab84:	fb02 3311 	mls	r3, r2, r1, r3
 800ab88:	5cc3      	ldrb	r3, [r0, r3]
 800ab8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ab8e:	460b      	mov	r3, r1
 800ab90:	2900      	cmp	r1, #0
 800ab92:	d1f5      	bne.n	800ab80 <_printf_i+0x16c>
 800ab94:	e7b9      	b.n	800ab0a <_printf_i+0xf6>
 800ab96:	6813      	ldr	r3, [r2, #0]
 800ab98:	6825      	ldr	r5, [r4, #0]
 800ab9a:	6961      	ldr	r1, [r4, #20]
 800ab9c:	1d18      	adds	r0, r3, #4
 800ab9e:	6010      	str	r0, [r2, #0]
 800aba0:	0628      	lsls	r0, r5, #24
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	d501      	bpl.n	800abaa <_printf_i+0x196>
 800aba6:	6019      	str	r1, [r3, #0]
 800aba8:	e002      	b.n	800abb0 <_printf_i+0x19c>
 800abaa:	066a      	lsls	r2, r5, #25
 800abac:	d5fb      	bpl.n	800aba6 <_printf_i+0x192>
 800abae:	8019      	strh	r1, [r3, #0]
 800abb0:	2300      	movs	r3, #0
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	4665      	mov	r5, ip
 800abb6:	e7b9      	b.n	800ab2c <_printf_i+0x118>
 800abb8:	6813      	ldr	r3, [r2, #0]
 800abba:	1d19      	adds	r1, r3, #4
 800abbc:	6011      	str	r1, [r2, #0]
 800abbe:	681d      	ldr	r5, [r3, #0]
 800abc0:	6862      	ldr	r2, [r4, #4]
 800abc2:	2100      	movs	r1, #0
 800abc4:	4628      	mov	r0, r5
 800abc6:	f7f5 fb33 	bl	8000230 <memchr>
 800abca:	b108      	cbz	r0, 800abd0 <_printf_i+0x1bc>
 800abcc:	1b40      	subs	r0, r0, r5
 800abce:	6060      	str	r0, [r4, #4]
 800abd0:	6863      	ldr	r3, [r4, #4]
 800abd2:	6123      	str	r3, [r4, #16]
 800abd4:	2300      	movs	r3, #0
 800abd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abda:	e7a7      	b.n	800ab2c <_printf_i+0x118>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	462a      	mov	r2, r5
 800abe0:	4639      	mov	r1, r7
 800abe2:	4630      	mov	r0, r6
 800abe4:	47c0      	blx	r8
 800abe6:	3001      	adds	r0, #1
 800abe8:	d0aa      	beq.n	800ab40 <_printf_i+0x12c>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	079b      	lsls	r3, r3, #30
 800abee:	d413      	bmi.n	800ac18 <_printf_i+0x204>
 800abf0:	68e0      	ldr	r0, [r4, #12]
 800abf2:	9b03      	ldr	r3, [sp, #12]
 800abf4:	4298      	cmp	r0, r3
 800abf6:	bfb8      	it	lt
 800abf8:	4618      	movlt	r0, r3
 800abfa:	e7a3      	b.n	800ab44 <_printf_i+0x130>
 800abfc:	2301      	movs	r3, #1
 800abfe:	464a      	mov	r2, r9
 800ac00:	4639      	mov	r1, r7
 800ac02:	4630      	mov	r0, r6
 800ac04:	47c0      	blx	r8
 800ac06:	3001      	adds	r0, #1
 800ac08:	d09a      	beq.n	800ab40 <_printf_i+0x12c>
 800ac0a:	3501      	adds	r5, #1
 800ac0c:	68e3      	ldr	r3, [r4, #12]
 800ac0e:	9a03      	ldr	r2, [sp, #12]
 800ac10:	1a9b      	subs	r3, r3, r2
 800ac12:	42ab      	cmp	r3, r5
 800ac14:	dcf2      	bgt.n	800abfc <_printf_i+0x1e8>
 800ac16:	e7eb      	b.n	800abf0 <_printf_i+0x1dc>
 800ac18:	2500      	movs	r5, #0
 800ac1a:	f104 0919 	add.w	r9, r4, #25
 800ac1e:	e7f5      	b.n	800ac0c <_printf_i+0x1f8>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1ac      	bne.n	800ab7e <_printf_i+0x16a>
 800ac24:	7803      	ldrb	r3, [r0, #0]
 800ac26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac2e:	e76c      	b.n	800ab0a <_printf_i+0xf6>
 800ac30:	0800fe74 	.word	0x0800fe74
 800ac34:	0800fe85 	.word	0x0800fe85

0800ac38 <_scanf_float>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	469a      	mov	sl, r3
 800ac3e:	688b      	ldr	r3, [r1, #8]
 800ac40:	4616      	mov	r6, r2
 800ac42:	1e5a      	subs	r2, r3, #1
 800ac44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac48:	b087      	sub	sp, #28
 800ac4a:	bf83      	ittte	hi
 800ac4c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ac50:	189b      	addhi	r3, r3, r2
 800ac52:	9301      	strhi	r3, [sp, #4]
 800ac54:	2300      	movls	r3, #0
 800ac56:	bf86      	itte	hi
 800ac58:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac5c:	608b      	strhi	r3, [r1, #8]
 800ac5e:	9301      	strls	r3, [sp, #4]
 800ac60:	680b      	ldr	r3, [r1, #0]
 800ac62:	4688      	mov	r8, r1
 800ac64:	f04f 0b00 	mov.w	fp, #0
 800ac68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ac6c:	f848 3b1c 	str.w	r3, [r8], #28
 800ac70:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ac74:	4607      	mov	r7, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	4645      	mov	r5, r8
 800ac7a:	465a      	mov	r2, fp
 800ac7c:	46d9      	mov	r9, fp
 800ac7e:	f8cd b008 	str.w	fp, [sp, #8]
 800ac82:	68a1      	ldr	r1, [r4, #8]
 800ac84:	b181      	cbz	r1, 800aca8 <_scanf_float+0x70>
 800ac86:	6833      	ldr	r3, [r6, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b49      	cmp	r3, #73	; 0x49
 800ac8c:	d071      	beq.n	800ad72 <_scanf_float+0x13a>
 800ac8e:	d84d      	bhi.n	800ad2c <_scanf_float+0xf4>
 800ac90:	2b39      	cmp	r3, #57	; 0x39
 800ac92:	d840      	bhi.n	800ad16 <_scanf_float+0xde>
 800ac94:	2b31      	cmp	r3, #49	; 0x31
 800ac96:	f080 8088 	bcs.w	800adaa <_scanf_float+0x172>
 800ac9a:	2b2d      	cmp	r3, #45	; 0x2d
 800ac9c:	f000 8090 	beq.w	800adc0 <_scanf_float+0x188>
 800aca0:	d815      	bhi.n	800acce <_scanf_float+0x96>
 800aca2:	2b2b      	cmp	r3, #43	; 0x2b
 800aca4:	f000 808c 	beq.w	800adc0 <_scanf_float+0x188>
 800aca8:	f1b9 0f00 	cmp.w	r9, #0
 800acac:	d003      	beq.n	800acb6 <_scanf_float+0x7e>
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	3a01      	subs	r2, #1
 800acb8:	2a01      	cmp	r2, #1
 800acba:	f200 80ea 	bhi.w	800ae92 <_scanf_float+0x25a>
 800acbe:	4545      	cmp	r5, r8
 800acc0:	f200 80dc 	bhi.w	800ae7c <_scanf_float+0x244>
 800acc4:	2601      	movs	r6, #1
 800acc6:	4630      	mov	r0, r6
 800acc8:	b007      	add	sp, #28
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	2b2e      	cmp	r3, #46	; 0x2e
 800acd0:	f000 809f 	beq.w	800ae12 <_scanf_float+0x1da>
 800acd4:	2b30      	cmp	r3, #48	; 0x30
 800acd6:	d1e7      	bne.n	800aca8 <_scanf_float+0x70>
 800acd8:	6820      	ldr	r0, [r4, #0]
 800acda:	f410 7f80 	tst.w	r0, #256	; 0x100
 800acde:	d064      	beq.n	800adaa <_scanf_float+0x172>
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ace6:	6020      	str	r0, [r4, #0]
 800ace8:	f109 0901 	add.w	r9, r9, #1
 800acec:	b11b      	cbz	r3, 800acf6 <_scanf_float+0xbe>
 800acee:	3b01      	subs	r3, #1
 800acf0:	3101      	adds	r1, #1
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	60a1      	str	r1, [r4, #8]
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	60a3      	str	r3, [r4, #8]
 800acfc:	6923      	ldr	r3, [r4, #16]
 800acfe:	3301      	adds	r3, #1
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	6873      	ldr	r3, [r6, #4]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	6073      	str	r3, [r6, #4]
 800ad0a:	f340 80ac 	ble.w	800ae66 <_scanf_float+0x22e>
 800ad0e:	6833      	ldr	r3, [r6, #0]
 800ad10:	3301      	adds	r3, #1
 800ad12:	6033      	str	r3, [r6, #0]
 800ad14:	e7b5      	b.n	800ac82 <_scanf_float+0x4a>
 800ad16:	2b45      	cmp	r3, #69	; 0x45
 800ad18:	f000 8085 	beq.w	800ae26 <_scanf_float+0x1ee>
 800ad1c:	2b46      	cmp	r3, #70	; 0x46
 800ad1e:	d06a      	beq.n	800adf6 <_scanf_float+0x1be>
 800ad20:	2b41      	cmp	r3, #65	; 0x41
 800ad22:	d1c1      	bne.n	800aca8 <_scanf_float+0x70>
 800ad24:	2a01      	cmp	r2, #1
 800ad26:	d1bf      	bne.n	800aca8 <_scanf_float+0x70>
 800ad28:	2202      	movs	r2, #2
 800ad2a:	e046      	b.n	800adba <_scanf_float+0x182>
 800ad2c:	2b65      	cmp	r3, #101	; 0x65
 800ad2e:	d07a      	beq.n	800ae26 <_scanf_float+0x1ee>
 800ad30:	d818      	bhi.n	800ad64 <_scanf_float+0x12c>
 800ad32:	2b54      	cmp	r3, #84	; 0x54
 800ad34:	d066      	beq.n	800ae04 <_scanf_float+0x1cc>
 800ad36:	d811      	bhi.n	800ad5c <_scanf_float+0x124>
 800ad38:	2b4e      	cmp	r3, #78	; 0x4e
 800ad3a:	d1b5      	bne.n	800aca8 <_scanf_float+0x70>
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	d146      	bne.n	800adce <_scanf_float+0x196>
 800ad40:	f1b9 0f00 	cmp.w	r9, #0
 800ad44:	d145      	bne.n	800add2 <_scanf_float+0x19a>
 800ad46:	6821      	ldr	r1, [r4, #0]
 800ad48:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ad4c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ad50:	d13f      	bne.n	800add2 <_scanf_float+0x19a>
 800ad52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ad56:	6021      	str	r1, [r4, #0]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	e02e      	b.n	800adba <_scanf_float+0x182>
 800ad5c:	2b59      	cmp	r3, #89	; 0x59
 800ad5e:	d01e      	beq.n	800ad9e <_scanf_float+0x166>
 800ad60:	2b61      	cmp	r3, #97	; 0x61
 800ad62:	e7de      	b.n	800ad22 <_scanf_float+0xea>
 800ad64:	2b6e      	cmp	r3, #110	; 0x6e
 800ad66:	d0e9      	beq.n	800ad3c <_scanf_float+0x104>
 800ad68:	d815      	bhi.n	800ad96 <_scanf_float+0x15e>
 800ad6a:	2b66      	cmp	r3, #102	; 0x66
 800ad6c:	d043      	beq.n	800adf6 <_scanf_float+0x1be>
 800ad6e:	2b69      	cmp	r3, #105	; 0x69
 800ad70:	d19a      	bne.n	800aca8 <_scanf_float+0x70>
 800ad72:	f1bb 0f00 	cmp.w	fp, #0
 800ad76:	d138      	bne.n	800adea <_scanf_float+0x1b2>
 800ad78:	f1b9 0f00 	cmp.w	r9, #0
 800ad7c:	d197      	bne.n	800acae <_scanf_float+0x76>
 800ad7e:	6821      	ldr	r1, [r4, #0]
 800ad80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ad84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ad88:	d195      	bne.n	800acb6 <_scanf_float+0x7e>
 800ad8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ad8e:	6021      	str	r1, [r4, #0]
 800ad90:	f04f 0b01 	mov.w	fp, #1
 800ad94:	e011      	b.n	800adba <_scanf_float+0x182>
 800ad96:	2b74      	cmp	r3, #116	; 0x74
 800ad98:	d034      	beq.n	800ae04 <_scanf_float+0x1cc>
 800ad9a:	2b79      	cmp	r3, #121	; 0x79
 800ad9c:	d184      	bne.n	800aca8 <_scanf_float+0x70>
 800ad9e:	f1bb 0f07 	cmp.w	fp, #7
 800ada2:	d181      	bne.n	800aca8 <_scanf_float+0x70>
 800ada4:	f04f 0b08 	mov.w	fp, #8
 800ada8:	e007      	b.n	800adba <_scanf_float+0x182>
 800adaa:	eb12 0f0b 	cmn.w	r2, fp
 800adae:	f47f af7b 	bne.w	800aca8 <_scanf_float+0x70>
 800adb2:	6821      	ldr	r1, [r4, #0]
 800adb4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800adb8:	6021      	str	r1, [r4, #0]
 800adba:	702b      	strb	r3, [r5, #0]
 800adbc:	3501      	adds	r5, #1
 800adbe:	e79a      	b.n	800acf6 <_scanf_float+0xbe>
 800adc0:	6821      	ldr	r1, [r4, #0]
 800adc2:	0608      	lsls	r0, r1, #24
 800adc4:	f57f af70 	bpl.w	800aca8 <_scanf_float+0x70>
 800adc8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800adcc:	e7f4      	b.n	800adb8 <_scanf_float+0x180>
 800adce:	2a02      	cmp	r2, #2
 800add0:	d047      	beq.n	800ae62 <_scanf_float+0x22a>
 800add2:	f1bb 0f01 	cmp.w	fp, #1
 800add6:	d003      	beq.n	800ade0 <_scanf_float+0x1a8>
 800add8:	f1bb 0f04 	cmp.w	fp, #4
 800addc:	f47f af64 	bne.w	800aca8 <_scanf_float+0x70>
 800ade0:	f10b 0b01 	add.w	fp, fp, #1
 800ade4:	fa5f fb8b 	uxtb.w	fp, fp
 800ade8:	e7e7      	b.n	800adba <_scanf_float+0x182>
 800adea:	f1bb 0f03 	cmp.w	fp, #3
 800adee:	d0f7      	beq.n	800ade0 <_scanf_float+0x1a8>
 800adf0:	f1bb 0f05 	cmp.w	fp, #5
 800adf4:	e7f2      	b.n	800addc <_scanf_float+0x1a4>
 800adf6:	f1bb 0f02 	cmp.w	fp, #2
 800adfa:	f47f af55 	bne.w	800aca8 <_scanf_float+0x70>
 800adfe:	f04f 0b03 	mov.w	fp, #3
 800ae02:	e7da      	b.n	800adba <_scanf_float+0x182>
 800ae04:	f1bb 0f06 	cmp.w	fp, #6
 800ae08:	f47f af4e 	bne.w	800aca8 <_scanf_float+0x70>
 800ae0c:	f04f 0b07 	mov.w	fp, #7
 800ae10:	e7d3      	b.n	800adba <_scanf_float+0x182>
 800ae12:	6821      	ldr	r1, [r4, #0]
 800ae14:	0588      	lsls	r0, r1, #22
 800ae16:	f57f af47 	bpl.w	800aca8 <_scanf_float+0x70>
 800ae1a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ae1e:	6021      	str	r1, [r4, #0]
 800ae20:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae24:	e7c9      	b.n	800adba <_scanf_float+0x182>
 800ae26:	6821      	ldr	r1, [r4, #0]
 800ae28:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ae2c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ae30:	d006      	beq.n	800ae40 <_scanf_float+0x208>
 800ae32:	0548      	lsls	r0, r1, #21
 800ae34:	f57f af38 	bpl.w	800aca8 <_scanf_float+0x70>
 800ae38:	f1b9 0f00 	cmp.w	r9, #0
 800ae3c:	f43f af3b 	beq.w	800acb6 <_scanf_float+0x7e>
 800ae40:	0588      	lsls	r0, r1, #22
 800ae42:	bf58      	it	pl
 800ae44:	9802      	ldrpl	r0, [sp, #8]
 800ae46:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ae4a:	bf58      	it	pl
 800ae4c:	eba9 0000 	subpl.w	r0, r9, r0
 800ae50:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ae54:	bf58      	it	pl
 800ae56:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ae5a:	6021      	str	r1, [r4, #0]
 800ae5c:	f04f 0900 	mov.w	r9, #0
 800ae60:	e7ab      	b.n	800adba <_scanf_float+0x182>
 800ae62:	2203      	movs	r2, #3
 800ae64:	e7a9      	b.n	800adba <_scanf_float+0x182>
 800ae66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae6a:	9205      	str	r2, [sp, #20]
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4638      	mov	r0, r7
 800ae70:	4798      	blx	r3
 800ae72:	9a05      	ldr	r2, [sp, #20]
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f43f af04 	beq.w	800ac82 <_scanf_float+0x4a>
 800ae7a:	e715      	b.n	800aca8 <_scanf_float+0x70>
 800ae7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ae84:	4632      	mov	r2, r6
 800ae86:	4638      	mov	r0, r7
 800ae88:	4798      	blx	r3
 800ae8a:	6923      	ldr	r3, [r4, #16]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	e715      	b.n	800acbe <_scanf_float+0x86>
 800ae92:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ae96:	2b06      	cmp	r3, #6
 800ae98:	d80a      	bhi.n	800aeb0 <_scanf_float+0x278>
 800ae9a:	f1bb 0f02 	cmp.w	fp, #2
 800ae9e:	d968      	bls.n	800af72 <_scanf_float+0x33a>
 800aea0:	f1ab 0b03 	sub.w	fp, fp, #3
 800aea4:	fa5f fb8b 	uxtb.w	fp, fp
 800aea8:	eba5 0b0b 	sub.w	fp, r5, fp
 800aeac:	455d      	cmp	r5, fp
 800aeae:	d14b      	bne.n	800af48 <_scanf_float+0x310>
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	05da      	lsls	r2, r3, #23
 800aeb4:	d51f      	bpl.n	800aef6 <_scanf_float+0x2be>
 800aeb6:	055b      	lsls	r3, r3, #21
 800aeb8:	d468      	bmi.n	800af8c <_scanf_float+0x354>
 800aeba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	2965      	cmp	r1, #101	; 0x65
 800aec2:	f103 33ff 	add.w	r3, r3, #4294967295
 800aec6:	f105 3bff 	add.w	fp, r5, #4294967295
 800aeca:	6123      	str	r3, [r4, #16]
 800aecc:	d00d      	beq.n	800aeea <_scanf_float+0x2b2>
 800aece:	2945      	cmp	r1, #69	; 0x45
 800aed0:	d00b      	beq.n	800aeea <_scanf_float+0x2b2>
 800aed2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aed6:	4632      	mov	r2, r6
 800aed8:	4638      	mov	r0, r7
 800aeda:	4798      	blx	r3
 800aedc:	6923      	ldr	r3, [r4, #16]
 800aede:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	f1a5 0b02 	sub.w	fp, r5, #2
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aeee:	4632      	mov	r2, r6
 800aef0:	4638      	mov	r0, r7
 800aef2:	4798      	blx	r3
 800aef4:	465d      	mov	r5, fp
 800aef6:	6826      	ldr	r6, [r4, #0]
 800aef8:	f016 0610 	ands.w	r6, r6, #16
 800aefc:	d17a      	bne.n	800aff4 <_scanf_float+0x3bc>
 800aefe:	702e      	strb	r6, [r5, #0]
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af0a:	d142      	bne.n	800af92 <_scanf_float+0x35a>
 800af0c:	9b02      	ldr	r3, [sp, #8]
 800af0e:	eba9 0303 	sub.w	r3, r9, r3
 800af12:	425a      	negs	r2, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d149      	bne.n	800afac <_scanf_float+0x374>
 800af18:	2200      	movs	r2, #0
 800af1a:	4641      	mov	r1, r8
 800af1c:	4638      	mov	r0, r7
 800af1e:	f000 fea3 	bl	800bc68 <_strtod_r>
 800af22:	6825      	ldr	r5, [r4, #0]
 800af24:	f8da 3000 	ldr.w	r3, [sl]
 800af28:	f015 0f02 	tst.w	r5, #2
 800af2c:	f103 0204 	add.w	r2, r3, #4
 800af30:	ec59 8b10 	vmov	r8, r9, d0
 800af34:	f8ca 2000 	str.w	r2, [sl]
 800af38:	d043      	beq.n	800afc2 <_scanf_float+0x38a>
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	e9c3 8900 	strd	r8, r9, [r3]
 800af40:	68e3      	ldr	r3, [r4, #12]
 800af42:	3301      	adds	r3, #1
 800af44:	60e3      	str	r3, [r4, #12]
 800af46:	e6be      	b.n	800acc6 <_scanf_float+0x8e>
 800af48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800af50:	4632      	mov	r2, r6
 800af52:	4638      	mov	r0, r7
 800af54:	4798      	blx	r3
 800af56:	6923      	ldr	r3, [r4, #16]
 800af58:	3b01      	subs	r3, #1
 800af5a:	6123      	str	r3, [r4, #16]
 800af5c:	e7a6      	b.n	800aeac <_scanf_float+0x274>
 800af5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800af66:	4632      	mov	r2, r6
 800af68:	4638      	mov	r0, r7
 800af6a:	4798      	blx	r3
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	3b01      	subs	r3, #1
 800af70:	6123      	str	r3, [r4, #16]
 800af72:	4545      	cmp	r5, r8
 800af74:	d8f3      	bhi.n	800af5e <_scanf_float+0x326>
 800af76:	e6a5      	b.n	800acc4 <_scanf_float+0x8c>
 800af78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800af80:	4632      	mov	r2, r6
 800af82:	4638      	mov	r0, r7
 800af84:	4798      	blx	r3
 800af86:	6923      	ldr	r3, [r4, #16]
 800af88:	3b01      	subs	r3, #1
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	4545      	cmp	r5, r8
 800af8e:	d8f3      	bhi.n	800af78 <_scanf_float+0x340>
 800af90:	e698      	b.n	800acc4 <_scanf_float+0x8c>
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0bf      	beq.n	800af18 <_scanf_float+0x2e0>
 800af98:	9904      	ldr	r1, [sp, #16]
 800af9a:	230a      	movs	r3, #10
 800af9c:	4632      	mov	r2, r6
 800af9e:	3101      	adds	r1, #1
 800afa0:	4638      	mov	r0, r7
 800afa2:	f000 feed 	bl	800bd80 <_strtol_r>
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	9d04      	ldr	r5, [sp, #16]
 800afaa:	1ac2      	subs	r2, r0, r3
 800afac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800afb0:	429d      	cmp	r5, r3
 800afb2:	bf28      	it	cs
 800afb4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800afb8:	490f      	ldr	r1, [pc, #60]	; (800aff8 <_scanf_float+0x3c0>)
 800afba:	4628      	mov	r0, r5
 800afbc:	f000 f824 	bl	800b008 <siprintf>
 800afc0:	e7aa      	b.n	800af18 <_scanf_float+0x2e0>
 800afc2:	f015 0504 	ands.w	r5, r5, #4
 800afc6:	d1b8      	bne.n	800af3a <_scanf_float+0x302>
 800afc8:	681f      	ldr	r7, [r3, #0]
 800afca:	ee10 2a10 	vmov	r2, s0
 800afce:	464b      	mov	r3, r9
 800afd0:	ee10 0a10 	vmov	r0, s0
 800afd4:	4649      	mov	r1, r9
 800afd6:	f7f5 fdd1 	bl	8000b7c <__aeabi_dcmpun>
 800afda:	b128      	cbz	r0, 800afe8 <_scanf_float+0x3b0>
 800afdc:	4628      	mov	r0, r5
 800afde:	f000 f80d 	bl	800affc <nanf>
 800afe2:	ed87 0a00 	vstr	s0, [r7]
 800afe6:	e7ab      	b.n	800af40 <_scanf_float+0x308>
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 fe24 	bl	8000c38 <__aeabi_d2f>
 800aff0:	6038      	str	r0, [r7, #0]
 800aff2:	e7a5      	b.n	800af40 <_scanf_float+0x308>
 800aff4:	2600      	movs	r6, #0
 800aff6:	e666      	b.n	800acc6 <_scanf_float+0x8e>
 800aff8:	0800fe96 	.word	0x0800fe96

0800affc <nanf>:
 800affc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b004 <nanf+0x8>
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	7fc00000 	.word	0x7fc00000

0800b008 <siprintf>:
 800b008:	b40e      	push	{r1, r2, r3}
 800b00a:	b500      	push	{lr}
 800b00c:	b09c      	sub	sp, #112	; 0x70
 800b00e:	ab1d      	add	r3, sp, #116	; 0x74
 800b010:	9002      	str	r0, [sp, #8]
 800b012:	9006      	str	r0, [sp, #24]
 800b014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b018:	4809      	ldr	r0, [pc, #36]	; (800b040 <siprintf+0x38>)
 800b01a:	9107      	str	r1, [sp, #28]
 800b01c:	9104      	str	r1, [sp, #16]
 800b01e:	4909      	ldr	r1, [pc, #36]	; (800b044 <siprintf+0x3c>)
 800b020:	f853 2b04 	ldr.w	r2, [r3], #4
 800b024:	9105      	str	r1, [sp, #20]
 800b026:	6800      	ldr	r0, [r0, #0]
 800b028:	9301      	str	r3, [sp, #4]
 800b02a:	a902      	add	r1, sp, #8
 800b02c:	f002 fd9c 	bl	800db68 <_svfiprintf_r>
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
 800b036:	b01c      	add	sp, #112	; 0x70
 800b038:	f85d eb04 	ldr.w	lr, [sp], #4
 800b03c:	b003      	add	sp, #12
 800b03e:	4770      	bx	lr
 800b040:	20002840 	.word	0x20002840
 800b044:	ffff0208 	.word	0xffff0208

0800b048 <sulp>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	460d      	mov	r5, r1
 800b04e:	ec45 4b10 	vmov	d0, r4, r5
 800b052:	4616      	mov	r6, r2
 800b054:	f002 fb44 	bl	800d6e0 <__ulp>
 800b058:	ec51 0b10 	vmov	r0, r1, d0
 800b05c:	b17e      	cbz	r6, 800b07e <sulp+0x36>
 800b05e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b062:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b066:	2b00      	cmp	r3, #0
 800b068:	dd09      	ble.n	800b07e <sulp+0x36>
 800b06a:	051b      	lsls	r3, r3, #20
 800b06c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b070:	2400      	movs	r4, #0
 800b072:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b076:	4622      	mov	r2, r4
 800b078:	462b      	mov	r3, r5
 800b07a:	f7f5 fae5 	bl	8000648 <__aeabi_dmul>
 800b07e:	bd70      	pop	{r4, r5, r6, pc}

0800b080 <_strtod_l>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	461f      	mov	r7, r3
 800b086:	b0a1      	sub	sp, #132	; 0x84
 800b088:	2300      	movs	r3, #0
 800b08a:	4681      	mov	r9, r0
 800b08c:	4638      	mov	r0, r7
 800b08e:	460e      	mov	r6, r1
 800b090:	9217      	str	r2, [sp, #92]	; 0x5c
 800b092:	931c      	str	r3, [sp, #112]	; 0x70
 800b094:	f002 f82d 	bl	800d0f2 <__localeconv_l>
 800b098:	4680      	mov	r8, r0
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	f7f5 f8c0 	bl	8000220 <strlen>
 800b0a0:	f04f 0a00 	mov.w	sl, #0
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	f04f 0b00 	mov.w	fp, #0
 800b0aa:	961b      	str	r6, [sp, #108]	; 0x6c
 800b0ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0ae:	781a      	ldrb	r2, [r3, #0]
 800b0b0:	2a0d      	cmp	r2, #13
 800b0b2:	d832      	bhi.n	800b11a <_strtod_l+0x9a>
 800b0b4:	2a09      	cmp	r2, #9
 800b0b6:	d236      	bcs.n	800b126 <_strtod_l+0xa6>
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	d03e      	beq.n	800b13a <_strtod_l+0xba>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	930d      	str	r3, [sp, #52]	; 0x34
 800b0c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b0c2:	782b      	ldrb	r3, [r5, #0]
 800b0c4:	2b30      	cmp	r3, #48	; 0x30
 800b0c6:	f040 80ac 	bne.w	800b222 <_strtod_l+0x1a2>
 800b0ca:	786b      	ldrb	r3, [r5, #1]
 800b0cc:	2b58      	cmp	r3, #88	; 0x58
 800b0ce:	d001      	beq.n	800b0d4 <_strtod_l+0x54>
 800b0d0:	2b78      	cmp	r3, #120	; 0x78
 800b0d2:	d167      	bne.n	800b1a4 <_strtod_l+0x124>
 800b0d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	ab1c      	add	r3, sp, #112	; 0x70
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	9702      	str	r7, [sp, #8]
 800b0de:	ab1d      	add	r3, sp, #116	; 0x74
 800b0e0:	4a88      	ldr	r2, [pc, #544]	; (800b304 <_strtod_l+0x284>)
 800b0e2:	a91b      	add	r1, sp, #108	; 0x6c
 800b0e4:	4648      	mov	r0, r9
 800b0e6:	f001 fd2a 	bl	800cb3e <__gethex>
 800b0ea:	f010 0407 	ands.w	r4, r0, #7
 800b0ee:	4606      	mov	r6, r0
 800b0f0:	d005      	beq.n	800b0fe <_strtod_l+0x7e>
 800b0f2:	2c06      	cmp	r4, #6
 800b0f4:	d12b      	bne.n	800b14e <_strtod_l+0xce>
 800b0f6:	3501      	adds	r5, #1
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	951b      	str	r5, [sp, #108]	; 0x6c
 800b0fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b0fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b100:	2b00      	cmp	r3, #0
 800b102:	f040 859a 	bne.w	800bc3a <_strtod_l+0xbba>
 800b106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b108:	b1e3      	cbz	r3, 800b144 <_strtod_l+0xc4>
 800b10a:	4652      	mov	r2, sl
 800b10c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b110:	ec43 2b10 	vmov	d0, r2, r3
 800b114:	b021      	add	sp, #132	; 0x84
 800b116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11a:	2a2b      	cmp	r2, #43	; 0x2b
 800b11c:	d015      	beq.n	800b14a <_strtod_l+0xca>
 800b11e:	2a2d      	cmp	r2, #45	; 0x2d
 800b120:	d004      	beq.n	800b12c <_strtod_l+0xac>
 800b122:	2a20      	cmp	r2, #32
 800b124:	d1ca      	bne.n	800b0bc <_strtod_l+0x3c>
 800b126:	3301      	adds	r3, #1
 800b128:	931b      	str	r3, [sp, #108]	; 0x6c
 800b12a:	e7bf      	b.n	800b0ac <_strtod_l+0x2c>
 800b12c:	2201      	movs	r2, #1
 800b12e:	920d      	str	r2, [sp, #52]	; 0x34
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	921b      	str	r2, [sp, #108]	; 0x6c
 800b134:	785b      	ldrb	r3, [r3, #1]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1c2      	bne.n	800b0c0 <_strtod_l+0x40>
 800b13a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b13c:	961b      	str	r6, [sp, #108]	; 0x6c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f040 8579 	bne.w	800bc36 <_strtod_l+0xbb6>
 800b144:	4652      	mov	r2, sl
 800b146:	465b      	mov	r3, fp
 800b148:	e7e2      	b.n	800b110 <_strtod_l+0x90>
 800b14a:	2200      	movs	r2, #0
 800b14c:	e7ef      	b.n	800b12e <_strtod_l+0xae>
 800b14e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b150:	b13a      	cbz	r2, 800b162 <_strtod_l+0xe2>
 800b152:	2135      	movs	r1, #53	; 0x35
 800b154:	a81e      	add	r0, sp, #120	; 0x78
 800b156:	f002 fbbb 	bl	800d8d0 <__copybits>
 800b15a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b15c:	4648      	mov	r0, r9
 800b15e:	f002 f827 	bl	800d1b0 <_Bfree>
 800b162:	3c01      	subs	r4, #1
 800b164:	2c04      	cmp	r4, #4
 800b166:	d806      	bhi.n	800b176 <_strtod_l+0xf6>
 800b168:	e8df f004 	tbb	[pc, r4]
 800b16c:	1714030a 	.word	0x1714030a
 800b170:	0a          	.byte	0x0a
 800b171:	00          	.byte	0x00
 800b172:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b176:	0730      	lsls	r0, r6, #28
 800b178:	d5c1      	bpl.n	800b0fe <_strtod_l+0x7e>
 800b17a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b17e:	e7be      	b.n	800b0fe <_strtod_l+0x7e>
 800b180:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b184:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b186:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b18a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b18e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b192:	e7f0      	b.n	800b176 <_strtod_l+0xf6>
 800b194:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b308 <_strtod_l+0x288>
 800b198:	e7ed      	b.n	800b176 <_strtod_l+0xf6>
 800b19a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b19e:	f04f 3aff 	mov.w	sl, #4294967295
 800b1a2:	e7e8      	b.n	800b176 <_strtod_l+0xf6>
 800b1a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b1aa:	785b      	ldrb	r3, [r3, #1]
 800b1ac:	2b30      	cmp	r3, #48	; 0x30
 800b1ae:	d0f9      	beq.n	800b1a4 <_strtod_l+0x124>
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d0a4      	beq.n	800b0fe <_strtod_l+0x7e>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	2500      	movs	r5, #0
 800b1b8:	9306      	str	r3, [sp, #24]
 800b1ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1bc:	9308      	str	r3, [sp, #32]
 800b1be:	9507      	str	r5, [sp, #28]
 800b1c0:	9505      	str	r5, [sp, #20]
 800b1c2:	220a      	movs	r2, #10
 800b1c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b1c6:	7807      	ldrb	r7, [r0, #0]
 800b1c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b1cc:	b2d9      	uxtb	r1, r3
 800b1ce:	2909      	cmp	r1, #9
 800b1d0:	d929      	bls.n	800b226 <_strtod_l+0x1a6>
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	f8d8 1000 	ldr.w	r1, [r8]
 800b1d8:	f002 fdce 	bl	800dd78 <strncmp>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d031      	beq.n	800b244 <_strtod_l+0x1c4>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	9c05      	ldr	r4, [sp, #20]
 800b1e4:	9004      	str	r0, [sp, #16]
 800b1e6:	463b      	mov	r3, r7
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	2b65      	cmp	r3, #101	; 0x65
 800b1ec:	d001      	beq.n	800b1f2 <_strtod_l+0x172>
 800b1ee:	2b45      	cmp	r3, #69	; 0x45
 800b1f0:	d114      	bne.n	800b21c <_strtod_l+0x19c>
 800b1f2:	b924      	cbnz	r4, 800b1fe <_strtod_l+0x17e>
 800b1f4:	b910      	cbnz	r0, 800b1fc <_strtod_l+0x17c>
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d09e      	beq.n	800b13a <_strtod_l+0xba>
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b200:	1c73      	adds	r3, r6, #1
 800b202:	931b      	str	r3, [sp, #108]	; 0x6c
 800b204:	7873      	ldrb	r3, [r6, #1]
 800b206:	2b2b      	cmp	r3, #43	; 0x2b
 800b208:	d078      	beq.n	800b2fc <_strtod_l+0x27c>
 800b20a:	2b2d      	cmp	r3, #45	; 0x2d
 800b20c:	d070      	beq.n	800b2f0 <_strtod_l+0x270>
 800b20e:	f04f 0c00 	mov.w	ip, #0
 800b212:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b216:	2f09      	cmp	r7, #9
 800b218:	d97c      	bls.n	800b314 <_strtod_l+0x294>
 800b21a:	961b      	str	r6, [sp, #108]	; 0x6c
 800b21c:	f04f 0e00 	mov.w	lr, #0
 800b220:	e09a      	b.n	800b358 <_strtod_l+0x2d8>
 800b222:	2300      	movs	r3, #0
 800b224:	e7c7      	b.n	800b1b6 <_strtod_l+0x136>
 800b226:	9905      	ldr	r1, [sp, #20]
 800b228:	2908      	cmp	r1, #8
 800b22a:	bfdd      	ittte	le
 800b22c:	9907      	ldrle	r1, [sp, #28]
 800b22e:	fb02 3301 	mlale	r3, r2, r1, r3
 800b232:	9307      	strle	r3, [sp, #28]
 800b234:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b238:	9b05      	ldr	r3, [sp, #20]
 800b23a:	3001      	adds	r0, #1
 800b23c:	3301      	adds	r3, #1
 800b23e:	9305      	str	r3, [sp, #20]
 800b240:	901b      	str	r0, [sp, #108]	; 0x6c
 800b242:	e7bf      	b.n	800b1c4 <_strtod_l+0x144>
 800b244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b246:	191a      	adds	r2, r3, r4
 800b248:	921b      	str	r2, [sp, #108]	; 0x6c
 800b24a:	9a05      	ldr	r2, [sp, #20]
 800b24c:	5d1b      	ldrb	r3, [r3, r4]
 800b24e:	2a00      	cmp	r2, #0
 800b250:	d037      	beq.n	800b2c2 <_strtod_l+0x242>
 800b252:	9c05      	ldr	r4, [sp, #20]
 800b254:	4602      	mov	r2, r0
 800b256:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b25a:	2909      	cmp	r1, #9
 800b25c:	d913      	bls.n	800b286 <_strtod_l+0x206>
 800b25e:	2101      	movs	r1, #1
 800b260:	9104      	str	r1, [sp, #16]
 800b262:	e7c2      	b.n	800b1ea <_strtod_l+0x16a>
 800b264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	921b      	str	r2, [sp, #108]	; 0x6c
 800b26a:	785b      	ldrb	r3, [r3, #1]
 800b26c:	3001      	adds	r0, #1
 800b26e:	2b30      	cmp	r3, #48	; 0x30
 800b270:	d0f8      	beq.n	800b264 <_strtod_l+0x1e4>
 800b272:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b276:	2a08      	cmp	r2, #8
 800b278:	f200 84e4 	bhi.w	800bc44 <_strtod_l+0xbc4>
 800b27c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b27e:	9208      	str	r2, [sp, #32]
 800b280:	4602      	mov	r2, r0
 800b282:	2000      	movs	r0, #0
 800b284:	4604      	mov	r4, r0
 800b286:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b28a:	f100 0101 	add.w	r1, r0, #1
 800b28e:	d012      	beq.n	800b2b6 <_strtod_l+0x236>
 800b290:	440a      	add	r2, r1
 800b292:	eb00 0c04 	add.w	ip, r0, r4
 800b296:	4621      	mov	r1, r4
 800b298:	270a      	movs	r7, #10
 800b29a:	458c      	cmp	ip, r1
 800b29c:	d113      	bne.n	800b2c6 <_strtod_l+0x246>
 800b29e:	1821      	adds	r1, r4, r0
 800b2a0:	2908      	cmp	r1, #8
 800b2a2:	f104 0401 	add.w	r4, r4, #1
 800b2a6:	4404      	add	r4, r0
 800b2a8:	dc19      	bgt.n	800b2de <_strtod_l+0x25e>
 800b2aa:	9b07      	ldr	r3, [sp, #28]
 800b2ac:	210a      	movs	r1, #10
 800b2ae:	fb01 e303 	mla	r3, r1, r3, lr
 800b2b2:	9307      	str	r3, [sp, #28]
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2b8:	1c58      	adds	r0, r3, #1
 800b2ba:	901b      	str	r0, [sp, #108]	; 0x6c
 800b2bc:	785b      	ldrb	r3, [r3, #1]
 800b2be:	4608      	mov	r0, r1
 800b2c0:	e7c9      	b.n	800b256 <_strtod_l+0x1d6>
 800b2c2:	9805      	ldr	r0, [sp, #20]
 800b2c4:	e7d3      	b.n	800b26e <_strtod_l+0x1ee>
 800b2c6:	2908      	cmp	r1, #8
 800b2c8:	f101 0101 	add.w	r1, r1, #1
 800b2cc:	dc03      	bgt.n	800b2d6 <_strtod_l+0x256>
 800b2ce:	9b07      	ldr	r3, [sp, #28]
 800b2d0:	437b      	muls	r3, r7
 800b2d2:	9307      	str	r3, [sp, #28]
 800b2d4:	e7e1      	b.n	800b29a <_strtod_l+0x21a>
 800b2d6:	2910      	cmp	r1, #16
 800b2d8:	bfd8      	it	le
 800b2da:	437d      	mulle	r5, r7
 800b2dc:	e7dd      	b.n	800b29a <_strtod_l+0x21a>
 800b2de:	2c10      	cmp	r4, #16
 800b2e0:	bfdc      	itt	le
 800b2e2:	210a      	movle	r1, #10
 800b2e4:	fb01 e505 	mlale	r5, r1, r5, lr
 800b2e8:	e7e4      	b.n	800b2b4 <_strtod_l+0x234>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	9304      	str	r3, [sp, #16]
 800b2ee:	e781      	b.n	800b1f4 <_strtod_l+0x174>
 800b2f0:	f04f 0c01 	mov.w	ip, #1
 800b2f4:	1cb3      	adds	r3, r6, #2
 800b2f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2f8:	78b3      	ldrb	r3, [r6, #2]
 800b2fa:	e78a      	b.n	800b212 <_strtod_l+0x192>
 800b2fc:	f04f 0c00 	mov.w	ip, #0
 800b300:	e7f8      	b.n	800b2f4 <_strtod_l+0x274>
 800b302:	bf00      	nop
 800b304:	0800fe9c 	.word	0x0800fe9c
 800b308:	7ff00000 	.word	0x7ff00000
 800b30c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b30e:	1c5f      	adds	r7, r3, #1
 800b310:	971b      	str	r7, [sp, #108]	; 0x6c
 800b312:	785b      	ldrb	r3, [r3, #1]
 800b314:	2b30      	cmp	r3, #48	; 0x30
 800b316:	d0f9      	beq.n	800b30c <_strtod_l+0x28c>
 800b318:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b31c:	2f08      	cmp	r7, #8
 800b31e:	f63f af7d 	bhi.w	800b21c <_strtod_l+0x19c>
 800b322:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b328:	930a      	str	r3, [sp, #40]	; 0x28
 800b32a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b32c:	1c5f      	adds	r7, r3, #1
 800b32e:	971b      	str	r7, [sp, #108]	; 0x6c
 800b330:	785b      	ldrb	r3, [r3, #1]
 800b332:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b336:	f1b8 0f09 	cmp.w	r8, #9
 800b33a:	d937      	bls.n	800b3ac <_strtod_l+0x32c>
 800b33c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b33e:	1a7f      	subs	r7, r7, r1
 800b340:	2f08      	cmp	r7, #8
 800b342:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b346:	dc37      	bgt.n	800b3b8 <_strtod_l+0x338>
 800b348:	45be      	cmp	lr, r7
 800b34a:	bfa8      	it	ge
 800b34c:	46be      	movge	lr, r7
 800b34e:	f1bc 0f00 	cmp.w	ip, #0
 800b352:	d001      	beq.n	800b358 <_strtod_l+0x2d8>
 800b354:	f1ce 0e00 	rsb	lr, lr, #0
 800b358:	2c00      	cmp	r4, #0
 800b35a:	d151      	bne.n	800b400 <_strtod_l+0x380>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f47f aece 	bne.w	800b0fe <_strtod_l+0x7e>
 800b362:	9a06      	ldr	r2, [sp, #24]
 800b364:	2a00      	cmp	r2, #0
 800b366:	f47f aeca 	bne.w	800b0fe <_strtod_l+0x7e>
 800b36a:	9a04      	ldr	r2, [sp, #16]
 800b36c:	2a00      	cmp	r2, #0
 800b36e:	f47f aee4 	bne.w	800b13a <_strtod_l+0xba>
 800b372:	2b4e      	cmp	r3, #78	; 0x4e
 800b374:	d027      	beq.n	800b3c6 <_strtod_l+0x346>
 800b376:	dc21      	bgt.n	800b3bc <_strtod_l+0x33c>
 800b378:	2b49      	cmp	r3, #73	; 0x49
 800b37a:	f47f aede 	bne.w	800b13a <_strtod_l+0xba>
 800b37e:	49a0      	ldr	r1, [pc, #640]	; (800b600 <_strtod_l+0x580>)
 800b380:	a81b      	add	r0, sp, #108	; 0x6c
 800b382:	f001 fe0f 	bl	800cfa4 <__match>
 800b386:	2800      	cmp	r0, #0
 800b388:	f43f aed7 	beq.w	800b13a <_strtod_l+0xba>
 800b38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b38e:	499d      	ldr	r1, [pc, #628]	; (800b604 <_strtod_l+0x584>)
 800b390:	3b01      	subs	r3, #1
 800b392:	a81b      	add	r0, sp, #108	; 0x6c
 800b394:	931b      	str	r3, [sp, #108]	; 0x6c
 800b396:	f001 fe05 	bl	800cfa4 <__match>
 800b39a:	b910      	cbnz	r0, 800b3a2 <_strtod_l+0x322>
 800b39c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b39e:	3301      	adds	r3, #1
 800b3a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3a2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b618 <_strtod_l+0x598>
 800b3a6:	f04f 0a00 	mov.w	sl, #0
 800b3aa:	e6a8      	b.n	800b0fe <_strtod_l+0x7e>
 800b3ac:	210a      	movs	r1, #10
 800b3ae:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b3b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b3b6:	e7b8      	b.n	800b32a <_strtod_l+0x2aa>
 800b3b8:	46be      	mov	lr, r7
 800b3ba:	e7c8      	b.n	800b34e <_strtod_l+0x2ce>
 800b3bc:	2b69      	cmp	r3, #105	; 0x69
 800b3be:	d0de      	beq.n	800b37e <_strtod_l+0x2fe>
 800b3c0:	2b6e      	cmp	r3, #110	; 0x6e
 800b3c2:	f47f aeba 	bne.w	800b13a <_strtod_l+0xba>
 800b3c6:	4990      	ldr	r1, [pc, #576]	; (800b608 <_strtod_l+0x588>)
 800b3c8:	a81b      	add	r0, sp, #108	; 0x6c
 800b3ca:	f001 fdeb 	bl	800cfa4 <__match>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	f43f aeb3 	beq.w	800b13a <_strtod_l+0xba>
 800b3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b28      	cmp	r3, #40	; 0x28
 800b3da:	d10e      	bne.n	800b3fa <_strtod_l+0x37a>
 800b3dc:	aa1e      	add	r2, sp, #120	; 0x78
 800b3de:	498b      	ldr	r1, [pc, #556]	; (800b60c <_strtod_l+0x58c>)
 800b3e0:	a81b      	add	r0, sp, #108	; 0x6c
 800b3e2:	f001 fdf3 	bl	800cfcc <__hexnan>
 800b3e6:	2805      	cmp	r0, #5
 800b3e8:	d107      	bne.n	800b3fa <_strtod_l+0x37a>
 800b3ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b3ec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b3f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b3f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b3f8:	e681      	b.n	800b0fe <_strtod_l+0x7e>
 800b3fa:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b620 <_strtod_l+0x5a0>
 800b3fe:	e7d2      	b.n	800b3a6 <_strtod_l+0x326>
 800b400:	ebae 0302 	sub.w	r3, lr, r2
 800b404:	9306      	str	r3, [sp, #24]
 800b406:	9b05      	ldr	r3, [sp, #20]
 800b408:	9807      	ldr	r0, [sp, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bf08      	it	eq
 800b40e:	4623      	moveq	r3, r4
 800b410:	2c10      	cmp	r4, #16
 800b412:	9305      	str	r3, [sp, #20]
 800b414:	46a0      	mov	r8, r4
 800b416:	bfa8      	it	ge
 800b418:	f04f 0810 	movge.w	r8, #16
 800b41c:	f7f5 f89a 	bl	8000554 <__aeabi_ui2d>
 800b420:	2c09      	cmp	r4, #9
 800b422:	4682      	mov	sl, r0
 800b424:	468b      	mov	fp, r1
 800b426:	dc13      	bgt.n	800b450 <_strtod_l+0x3d0>
 800b428:	9b06      	ldr	r3, [sp, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f43f ae67 	beq.w	800b0fe <_strtod_l+0x7e>
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	dd7a      	ble.n	800b52a <_strtod_l+0x4aa>
 800b434:	2b16      	cmp	r3, #22
 800b436:	dc61      	bgt.n	800b4fc <_strtod_l+0x47c>
 800b438:	4a75      	ldr	r2, [pc, #468]	; (800b610 <_strtod_l+0x590>)
 800b43a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b43e:	e9de 0100 	ldrd	r0, r1, [lr]
 800b442:	4652      	mov	r2, sl
 800b444:	465b      	mov	r3, fp
 800b446:	f7f5 f8ff 	bl	8000648 <__aeabi_dmul>
 800b44a:	4682      	mov	sl, r0
 800b44c:	468b      	mov	fp, r1
 800b44e:	e656      	b.n	800b0fe <_strtod_l+0x7e>
 800b450:	4b6f      	ldr	r3, [pc, #444]	; (800b610 <_strtod_l+0x590>)
 800b452:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b456:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b45a:	f7f5 f8f5 	bl	8000648 <__aeabi_dmul>
 800b45e:	4606      	mov	r6, r0
 800b460:	4628      	mov	r0, r5
 800b462:	460f      	mov	r7, r1
 800b464:	f7f5 f876 	bl	8000554 <__aeabi_ui2d>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	f7f4 ff34 	bl	80002dc <__adddf3>
 800b474:	2c0f      	cmp	r4, #15
 800b476:	4682      	mov	sl, r0
 800b478:	468b      	mov	fp, r1
 800b47a:	ddd5      	ble.n	800b428 <_strtod_l+0x3a8>
 800b47c:	9b06      	ldr	r3, [sp, #24]
 800b47e:	eba4 0808 	sub.w	r8, r4, r8
 800b482:	4498      	add	r8, r3
 800b484:	f1b8 0f00 	cmp.w	r8, #0
 800b488:	f340 8096 	ble.w	800b5b8 <_strtod_l+0x538>
 800b48c:	f018 030f 	ands.w	r3, r8, #15
 800b490:	d00a      	beq.n	800b4a8 <_strtod_l+0x428>
 800b492:	495f      	ldr	r1, [pc, #380]	; (800b610 <_strtod_l+0x590>)
 800b494:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b498:	4652      	mov	r2, sl
 800b49a:	465b      	mov	r3, fp
 800b49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4a0:	f7f5 f8d2 	bl	8000648 <__aeabi_dmul>
 800b4a4:	4682      	mov	sl, r0
 800b4a6:	468b      	mov	fp, r1
 800b4a8:	f038 080f 	bics.w	r8, r8, #15
 800b4ac:	d073      	beq.n	800b596 <_strtod_l+0x516>
 800b4ae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b4b2:	dd47      	ble.n	800b544 <_strtod_l+0x4c4>
 800b4b4:	2400      	movs	r4, #0
 800b4b6:	46a0      	mov	r8, r4
 800b4b8:	9407      	str	r4, [sp, #28]
 800b4ba:	9405      	str	r4, [sp, #20]
 800b4bc:	2322      	movs	r3, #34	; 0x22
 800b4be:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b618 <_strtod_l+0x598>
 800b4c2:	f8c9 3000 	str.w	r3, [r9]
 800b4c6:	f04f 0a00 	mov.w	sl, #0
 800b4ca:	9b07      	ldr	r3, [sp, #28]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f43f ae16 	beq.w	800b0fe <_strtod_l+0x7e>
 800b4d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4d4:	4648      	mov	r0, r9
 800b4d6:	f001 fe6b 	bl	800d1b0 <_Bfree>
 800b4da:	9905      	ldr	r1, [sp, #20]
 800b4dc:	4648      	mov	r0, r9
 800b4de:	f001 fe67 	bl	800d1b0 <_Bfree>
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	4648      	mov	r0, r9
 800b4e6:	f001 fe63 	bl	800d1b0 <_Bfree>
 800b4ea:	9907      	ldr	r1, [sp, #28]
 800b4ec:	4648      	mov	r0, r9
 800b4ee:	f001 fe5f 	bl	800d1b0 <_Bfree>
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4648      	mov	r0, r9
 800b4f6:	f001 fe5b 	bl	800d1b0 <_Bfree>
 800b4fa:	e600      	b.n	800b0fe <_strtod_l+0x7e>
 800b4fc:	9a06      	ldr	r2, [sp, #24]
 800b4fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b502:	4293      	cmp	r3, r2
 800b504:	dbba      	blt.n	800b47c <_strtod_l+0x3fc>
 800b506:	4d42      	ldr	r5, [pc, #264]	; (800b610 <_strtod_l+0x590>)
 800b508:	f1c4 040f 	rsb	r4, r4, #15
 800b50c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b510:	4652      	mov	r2, sl
 800b512:	465b      	mov	r3, fp
 800b514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b518:	f7f5 f896 	bl	8000648 <__aeabi_dmul>
 800b51c:	9b06      	ldr	r3, [sp, #24]
 800b51e:	1b1c      	subs	r4, r3, r4
 800b520:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b524:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b528:	e78d      	b.n	800b446 <_strtod_l+0x3c6>
 800b52a:	f113 0f16 	cmn.w	r3, #22
 800b52e:	dba5      	blt.n	800b47c <_strtod_l+0x3fc>
 800b530:	4a37      	ldr	r2, [pc, #220]	; (800b610 <_strtod_l+0x590>)
 800b532:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b536:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b53a:	4650      	mov	r0, sl
 800b53c:	4659      	mov	r1, fp
 800b53e:	f7f5 f9ad 	bl	800089c <__aeabi_ddiv>
 800b542:	e782      	b.n	800b44a <_strtod_l+0x3ca>
 800b544:	2300      	movs	r3, #0
 800b546:	4e33      	ldr	r6, [pc, #204]	; (800b614 <_strtod_l+0x594>)
 800b548:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b54c:	4650      	mov	r0, sl
 800b54e:	4659      	mov	r1, fp
 800b550:	461d      	mov	r5, r3
 800b552:	f1b8 0f01 	cmp.w	r8, #1
 800b556:	dc21      	bgt.n	800b59c <_strtod_l+0x51c>
 800b558:	b10b      	cbz	r3, 800b55e <_strtod_l+0x4de>
 800b55a:	4682      	mov	sl, r0
 800b55c:	468b      	mov	fp, r1
 800b55e:	4b2d      	ldr	r3, [pc, #180]	; (800b614 <_strtod_l+0x594>)
 800b560:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b564:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b568:	4652      	mov	r2, sl
 800b56a:	465b      	mov	r3, fp
 800b56c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b570:	f7f5 f86a 	bl	8000648 <__aeabi_dmul>
 800b574:	4b28      	ldr	r3, [pc, #160]	; (800b618 <_strtod_l+0x598>)
 800b576:	460a      	mov	r2, r1
 800b578:	400b      	ands	r3, r1
 800b57a:	4928      	ldr	r1, [pc, #160]	; (800b61c <_strtod_l+0x59c>)
 800b57c:	428b      	cmp	r3, r1
 800b57e:	4682      	mov	sl, r0
 800b580:	d898      	bhi.n	800b4b4 <_strtod_l+0x434>
 800b582:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b586:	428b      	cmp	r3, r1
 800b588:	bf86      	itte	hi
 800b58a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b624 <_strtod_l+0x5a4>
 800b58e:	f04f 3aff 	movhi.w	sl, #4294967295
 800b592:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b596:	2300      	movs	r3, #0
 800b598:	9304      	str	r3, [sp, #16]
 800b59a:	e077      	b.n	800b68c <_strtod_l+0x60c>
 800b59c:	f018 0f01 	tst.w	r8, #1
 800b5a0:	d006      	beq.n	800b5b0 <_strtod_l+0x530>
 800b5a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f7f5 f84d 	bl	8000648 <__aeabi_dmul>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	3501      	adds	r5, #1
 800b5b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b5b6:	e7cc      	b.n	800b552 <_strtod_l+0x4d2>
 800b5b8:	d0ed      	beq.n	800b596 <_strtod_l+0x516>
 800b5ba:	f1c8 0800 	rsb	r8, r8, #0
 800b5be:	f018 020f 	ands.w	r2, r8, #15
 800b5c2:	d00a      	beq.n	800b5da <_strtod_l+0x55a>
 800b5c4:	4b12      	ldr	r3, [pc, #72]	; (800b610 <_strtod_l+0x590>)
 800b5c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	4659      	mov	r1, fp
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	f7f5 f963 	bl	800089c <__aeabi_ddiv>
 800b5d6:	4682      	mov	sl, r0
 800b5d8:	468b      	mov	fp, r1
 800b5da:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b5de:	d0da      	beq.n	800b596 <_strtod_l+0x516>
 800b5e0:	f1b8 0f1f 	cmp.w	r8, #31
 800b5e4:	dd20      	ble.n	800b628 <_strtod_l+0x5a8>
 800b5e6:	2400      	movs	r4, #0
 800b5e8:	46a0      	mov	r8, r4
 800b5ea:	9407      	str	r4, [sp, #28]
 800b5ec:	9405      	str	r4, [sp, #20]
 800b5ee:	2322      	movs	r3, #34	; 0x22
 800b5f0:	f04f 0a00 	mov.w	sl, #0
 800b5f4:	f04f 0b00 	mov.w	fp, #0
 800b5f8:	f8c9 3000 	str.w	r3, [r9]
 800b5fc:	e765      	b.n	800b4ca <_strtod_l+0x44a>
 800b5fe:	bf00      	nop
 800b600:	0800fe67 	.word	0x0800fe67
 800b604:	0800fef3 	.word	0x0800fef3
 800b608:	0800fe6f 	.word	0x0800fe6f
 800b60c:	0800feb0 	.word	0x0800feb0
 800b610:	0800ff30 	.word	0x0800ff30
 800b614:	0800ff08 	.word	0x0800ff08
 800b618:	7ff00000 	.word	0x7ff00000
 800b61c:	7ca00000 	.word	0x7ca00000
 800b620:	fff80000 	.word	0xfff80000
 800b624:	7fefffff 	.word	0x7fefffff
 800b628:	f018 0310 	ands.w	r3, r8, #16
 800b62c:	bf18      	it	ne
 800b62e:	236a      	movne	r3, #106	; 0x6a
 800b630:	4da0      	ldr	r5, [pc, #640]	; (800b8b4 <_strtod_l+0x834>)
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	4650      	mov	r0, sl
 800b636:	4659      	mov	r1, fp
 800b638:	2300      	movs	r3, #0
 800b63a:	f1b8 0f00 	cmp.w	r8, #0
 800b63e:	f300 810a 	bgt.w	800b856 <_strtod_l+0x7d6>
 800b642:	b10b      	cbz	r3, 800b648 <_strtod_l+0x5c8>
 800b644:	4682      	mov	sl, r0
 800b646:	468b      	mov	fp, r1
 800b648:	9b04      	ldr	r3, [sp, #16]
 800b64a:	b1bb      	cbz	r3, 800b67c <_strtod_l+0x5fc>
 800b64c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b650:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b654:	2b00      	cmp	r3, #0
 800b656:	4659      	mov	r1, fp
 800b658:	dd10      	ble.n	800b67c <_strtod_l+0x5fc>
 800b65a:	2b1f      	cmp	r3, #31
 800b65c:	f340 8107 	ble.w	800b86e <_strtod_l+0x7ee>
 800b660:	2b34      	cmp	r3, #52	; 0x34
 800b662:	bfde      	ittt	le
 800b664:	3b20      	suble	r3, #32
 800b666:	f04f 32ff 	movle.w	r2, #4294967295
 800b66a:	fa02 f303 	lslle.w	r3, r2, r3
 800b66e:	f04f 0a00 	mov.w	sl, #0
 800b672:	bfcc      	ite	gt
 800b674:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b678:	ea03 0b01 	andle.w	fp, r3, r1
 800b67c:	2200      	movs	r2, #0
 800b67e:	2300      	movs	r3, #0
 800b680:	4650      	mov	r0, sl
 800b682:	4659      	mov	r1, fp
 800b684:	f7f5 fa48 	bl	8000b18 <__aeabi_dcmpeq>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d1ac      	bne.n	800b5e6 <_strtod_l+0x566>
 800b68c:	9b07      	ldr	r3, [sp, #28]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	9a05      	ldr	r2, [sp, #20]
 800b692:	9908      	ldr	r1, [sp, #32]
 800b694:	4623      	mov	r3, r4
 800b696:	4648      	mov	r0, r9
 800b698:	f001 fddc 	bl	800d254 <__s2b>
 800b69c:	9007      	str	r0, [sp, #28]
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f43f af08 	beq.w	800b4b4 <_strtod_l+0x434>
 800b6a4:	9a06      	ldr	r2, [sp, #24]
 800b6a6:	9b06      	ldr	r3, [sp, #24]
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	f1c3 0300 	rsb	r3, r3, #0
 800b6ae:	bfa8      	it	ge
 800b6b0:	2300      	movge	r3, #0
 800b6b2:	930e      	str	r3, [sp, #56]	; 0x38
 800b6b4:	2400      	movs	r4, #0
 800b6b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b6ba:	9316      	str	r3, [sp, #88]	; 0x58
 800b6bc:	46a0      	mov	r8, r4
 800b6be:	9b07      	ldr	r3, [sp, #28]
 800b6c0:	4648      	mov	r0, r9
 800b6c2:	6859      	ldr	r1, [r3, #4]
 800b6c4:	f001 fd40 	bl	800d148 <_Balloc>
 800b6c8:	9005      	str	r0, [sp, #20]
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	f43f aef6 	beq.w	800b4bc <_strtod_l+0x43c>
 800b6d0:	9b07      	ldr	r3, [sp, #28]
 800b6d2:	691a      	ldr	r2, [r3, #16]
 800b6d4:	3202      	adds	r2, #2
 800b6d6:	f103 010c 	add.w	r1, r3, #12
 800b6da:	0092      	lsls	r2, r2, #2
 800b6dc:	300c      	adds	r0, #12
 800b6de:	f7fe fe3b 	bl	800a358 <memcpy>
 800b6e2:	aa1e      	add	r2, sp, #120	; 0x78
 800b6e4:	a91d      	add	r1, sp, #116	; 0x74
 800b6e6:	ec4b ab10 	vmov	d0, sl, fp
 800b6ea:	4648      	mov	r0, r9
 800b6ec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b6f0:	f002 f86c 	bl	800d7cc <__d2b>
 800b6f4:	901c      	str	r0, [sp, #112]	; 0x70
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f43f aee0 	beq.w	800b4bc <_strtod_l+0x43c>
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	4648      	mov	r0, r9
 800b700:	f001 fe34 	bl	800d36c <__i2b>
 800b704:	4680      	mov	r8, r0
 800b706:	2800      	cmp	r0, #0
 800b708:	f43f aed8 	beq.w	800b4bc <_strtod_l+0x43c>
 800b70c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b70e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b710:	2e00      	cmp	r6, #0
 800b712:	bfab      	itete	ge
 800b714:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b716:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b718:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b71a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b71c:	bfac      	ite	ge
 800b71e:	18f7      	addge	r7, r6, r3
 800b720:	1b9d      	sublt	r5, r3, r6
 800b722:	9b04      	ldr	r3, [sp, #16]
 800b724:	1af6      	subs	r6, r6, r3
 800b726:	4416      	add	r6, r2
 800b728:	4b63      	ldr	r3, [pc, #396]	; (800b8b8 <_strtod_l+0x838>)
 800b72a:	3e01      	subs	r6, #1
 800b72c:	429e      	cmp	r6, r3
 800b72e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b732:	f280 80af 	bge.w	800b894 <_strtod_l+0x814>
 800b736:	1b9b      	subs	r3, r3, r6
 800b738:	2b1f      	cmp	r3, #31
 800b73a:	eba2 0203 	sub.w	r2, r2, r3
 800b73e:	f04f 0101 	mov.w	r1, #1
 800b742:	f300 809b 	bgt.w	800b87c <_strtod_l+0x7fc>
 800b746:	fa01 f303 	lsl.w	r3, r1, r3
 800b74a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b74c:	2300      	movs	r3, #0
 800b74e:	930a      	str	r3, [sp, #40]	; 0x28
 800b750:	18be      	adds	r6, r7, r2
 800b752:	9b04      	ldr	r3, [sp, #16]
 800b754:	42b7      	cmp	r7, r6
 800b756:	4415      	add	r5, r2
 800b758:	441d      	add	r5, r3
 800b75a:	463b      	mov	r3, r7
 800b75c:	bfa8      	it	ge
 800b75e:	4633      	movge	r3, r6
 800b760:	42ab      	cmp	r3, r5
 800b762:	bfa8      	it	ge
 800b764:	462b      	movge	r3, r5
 800b766:	2b00      	cmp	r3, #0
 800b768:	bfc2      	ittt	gt
 800b76a:	1af6      	subgt	r6, r6, r3
 800b76c:	1aed      	subgt	r5, r5, r3
 800b76e:	1aff      	subgt	r7, r7, r3
 800b770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b772:	b1bb      	cbz	r3, 800b7a4 <_strtod_l+0x724>
 800b774:	4641      	mov	r1, r8
 800b776:	461a      	mov	r2, r3
 800b778:	4648      	mov	r0, r9
 800b77a:	f001 fe97 	bl	800d4ac <__pow5mult>
 800b77e:	4680      	mov	r8, r0
 800b780:	2800      	cmp	r0, #0
 800b782:	f43f ae9b 	beq.w	800b4bc <_strtod_l+0x43c>
 800b786:	4601      	mov	r1, r0
 800b788:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b78a:	4648      	mov	r0, r9
 800b78c:	f001 fdf7 	bl	800d37e <__multiply>
 800b790:	900c      	str	r0, [sp, #48]	; 0x30
 800b792:	2800      	cmp	r0, #0
 800b794:	f43f ae92 	beq.w	800b4bc <_strtod_l+0x43c>
 800b798:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b79a:	4648      	mov	r0, r9
 800b79c:	f001 fd08 	bl	800d1b0 <_Bfree>
 800b7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7a2:	931c      	str	r3, [sp, #112]	; 0x70
 800b7a4:	2e00      	cmp	r6, #0
 800b7a6:	dc7a      	bgt.n	800b89e <_strtod_l+0x81e>
 800b7a8:	9b06      	ldr	r3, [sp, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	dd08      	ble.n	800b7c0 <_strtod_l+0x740>
 800b7ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b7b0:	9905      	ldr	r1, [sp, #20]
 800b7b2:	4648      	mov	r0, r9
 800b7b4:	f001 fe7a 	bl	800d4ac <__pow5mult>
 800b7b8:	9005      	str	r0, [sp, #20]
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	f43f ae7e 	beq.w	800b4bc <_strtod_l+0x43c>
 800b7c0:	2d00      	cmp	r5, #0
 800b7c2:	dd08      	ble.n	800b7d6 <_strtod_l+0x756>
 800b7c4:	462a      	mov	r2, r5
 800b7c6:	9905      	ldr	r1, [sp, #20]
 800b7c8:	4648      	mov	r0, r9
 800b7ca:	f001 febd 	bl	800d548 <__lshift>
 800b7ce:	9005      	str	r0, [sp, #20]
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	f43f ae73 	beq.w	800b4bc <_strtod_l+0x43c>
 800b7d6:	2f00      	cmp	r7, #0
 800b7d8:	dd08      	ble.n	800b7ec <_strtod_l+0x76c>
 800b7da:	4641      	mov	r1, r8
 800b7dc:	463a      	mov	r2, r7
 800b7de:	4648      	mov	r0, r9
 800b7e0:	f001 feb2 	bl	800d548 <__lshift>
 800b7e4:	4680      	mov	r8, r0
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	f43f ae68 	beq.w	800b4bc <_strtod_l+0x43c>
 800b7ec:	9a05      	ldr	r2, [sp, #20]
 800b7ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7f0:	4648      	mov	r0, r9
 800b7f2:	f001 ff17 	bl	800d624 <__mdiff>
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	f43f ae5f 	beq.w	800b4bc <_strtod_l+0x43c>
 800b7fe:	68c3      	ldr	r3, [r0, #12]
 800b800:	930c      	str	r3, [sp, #48]	; 0x30
 800b802:	2300      	movs	r3, #0
 800b804:	60c3      	str	r3, [r0, #12]
 800b806:	4641      	mov	r1, r8
 800b808:	f001 fef2 	bl	800d5f0 <__mcmp>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	da55      	bge.n	800b8bc <_strtod_l+0x83c>
 800b810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b812:	b9e3      	cbnz	r3, 800b84e <_strtod_l+0x7ce>
 800b814:	f1ba 0f00 	cmp.w	sl, #0
 800b818:	d119      	bne.n	800b84e <_strtod_l+0x7ce>
 800b81a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b81e:	b9b3      	cbnz	r3, 800b84e <_strtod_l+0x7ce>
 800b820:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b824:	0d1b      	lsrs	r3, r3, #20
 800b826:	051b      	lsls	r3, r3, #20
 800b828:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b82c:	d90f      	bls.n	800b84e <_strtod_l+0x7ce>
 800b82e:	6963      	ldr	r3, [r4, #20]
 800b830:	b913      	cbnz	r3, 800b838 <_strtod_l+0x7b8>
 800b832:	6923      	ldr	r3, [r4, #16]
 800b834:	2b01      	cmp	r3, #1
 800b836:	dd0a      	ble.n	800b84e <_strtod_l+0x7ce>
 800b838:	4621      	mov	r1, r4
 800b83a:	2201      	movs	r2, #1
 800b83c:	4648      	mov	r0, r9
 800b83e:	f001 fe83 	bl	800d548 <__lshift>
 800b842:	4641      	mov	r1, r8
 800b844:	4604      	mov	r4, r0
 800b846:	f001 fed3 	bl	800d5f0 <__mcmp>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	dc67      	bgt.n	800b91e <_strtod_l+0x89e>
 800b84e:	9b04      	ldr	r3, [sp, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d171      	bne.n	800b938 <_strtod_l+0x8b8>
 800b854:	e63d      	b.n	800b4d2 <_strtod_l+0x452>
 800b856:	f018 0f01 	tst.w	r8, #1
 800b85a:	d004      	beq.n	800b866 <_strtod_l+0x7e6>
 800b85c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b860:	f7f4 fef2 	bl	8000648 <__aeabi_dmul>
 800b864:	2301      	movs	r3, #1
 800b866:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b86a:	3508      	adds	r5, #8
 800b86c:	e6e5      	b.n	800b63a <_strtod_l+0x5ba>
 800b86e:	f04f 32ff 	mov.w	r2, #4294967295
 800b872:	fa02 f303 	lsl.w	r3, r2, r3
 800b876:	ea03 0a0a 	and.w	sl, r3, sl
 800b87a:	e6ff      	b.n	800b67c <_strtod_l+0x5fc>
 800b87c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b880:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b884:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b888:	36e2      	adds	r6, #226	; 0xe2
 800b88a:	fa01 f306 	lsl.w	r3, r1, r6
 800b88e:	930a      	str	r3, [sp, #40]	; 0x28
 800b890:	910f      	str	r1, [sp, #60]	; 0x3c
 800b892:	e75d      	b.n	800b750 <_strtod_l+0x6d0>
 800b894:	2300      	movs	r3, #0
 800b896:	930a      	str	r3, [sp, #40]	; 0x28
 800b898:	2301      	movs	r3, #1
 800b89a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b89c:	e758      	b.n	800b750 <_strtod_l+0x6d0>
 800b89e:	4632      	mov	r2, r6
 800b8a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8a2:	4648      	mov	r0, r9
 800b8a4:	f001 fe50 	bl	800d548 <__lshift>
 800b8a8:	901c      	str	r0, [sp, #112]	; 0x70
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	f47f af7c 	bne.w	800b7a8 <_strtod_l+0x728>
 800b8b0:	e604      	b.n	800b4bc <_strtod_l+0x43c>
 800b8b2:	bf00      	nop
 800b8b4:	0800fec8 	.word	0x0800fec8
 800b8b8:	fffffc02 	.word	0xfffffc02
 800b8bc:	465d      	mov	r5, fp
 800b8be:	f040 8086 	bne.w	800b9ce <_strtod_l+0x94e>
 800b8c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8c8:	b32a      	cbz	r2, 800b916 <_strtod_l+0x896>
 800b8ca:	4aaf      	ldr	r2, [pc, #700]	; (800bb88 <_strtod_l+0xb08>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d153      	bne.n	800b978 <_strtod_l+0x8f8>
 800b8d0:	9b04      	ldr	r3, [sp, #16]
 800b8d2:	4650      	mov	r0, sl
 800b8d4:	b1d3      	cbz	r3, 800b90c <_strtod_l+0x88c>
 800b8d6:	4aad      	ldr	r2, [pc, #692]	; (800bb8c <_strtod_l+0xb0c>)
 800b8d8:	402a      	ands	r2, r5
 800b8da:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b8de:	f04f 31ff 	mov.w	r1, #4294967295
 800b8e2:	d816      	bhi.n	800b912 <_strtod_l+0x892>
 800b8e4:	0d12      	lsrs	r2, r2, #20
 800b8e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ee:	4298      	cmp	r0, r3
 800b8f0:	d142      	bne.n	800b978 <_strtod_l+0x8f8>
 800b8f2:	4ba7      	ldr	r3, [pc, #668]	; (800bb90 <_strtod_l+0xb10>)
 800b8f4:	429d      	cmp	r5, r3
 800b8f6:	d102      	bne.n	800b8fe <_strtod_l+0x87e>
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	f43f addf 	beq.w	800b4bc <_strtod_l+0x43c>
 800b8fe:	4ba3      	ldr	r3, [pc, #652]	; (800bb8c <_strtod_l+0xb0c>)
 800b900:	402b      	ands	r3, r5
 800b902:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b906:	f04f 0a00 	mov.w	sl, #0
 800b90a:	e7a0      	b.n	800b84e <_strtod_l+0x7ce>
 800b90c:	f04f 33ff 	mov.w	r3, #4294967295
 800b910:	e7ed      	b.n	800b8ee <_strtod_l+0x86e>
 800b912:	460b      	mov	r3, r1
 800b914:	e7eb      	b.n	800b8ee <_strtod_l+0x86e>
 800b916:	bb7b      	cbnz	r3, 800b978 <_strtod_l+0x8f8>
 800b918:	f1ba 0f00 	cmp.w	sl, #0
 800b91c:	d12c      	bne.n	800b978 <_strtod_l+0x8f8>
 800b91e:	9904      	ldr	r1, [sp, #16]
 800b920:	4a9a      	ldr	r2, [pc, #616]	; (800bb8c <_strtod_l+0xb0c>)
 800b922:	465b      	mov	r3, fp
 800b924:	b1f1      	cbz	r1, 800b964 <_strtod_l+0x8e4>
 800b926:	ea02 010b 	and.w	r1, r2, fp
 800b92a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b92e:	dc19      	bgt.n	800b964 <_strtod_l+0x8e4>
 800b930:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b934:	f77f ae5b 	ble.w	800b5ee <_strtod_l+0x56e>
 800b938:	4a96      	ldr	r2, [pc, #600]	; (800bb94 <_strtod_l+0xb14>)
 800b93a:	2300      	movs	r3, #0
 800b93c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b940:	4650      	mov	r0, sl
 800b942:	4659      	mov	r1, fp
 800b944:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b948:	f7f4 fe7e 	bl	8000648 <__aeabi_dmul>
 800b94c:	4682      	mov	sl, r0
 800b94e:	468b      	mov	fp, r1
 800b950:	2900      	cmp	r1, #0
 800b952:	f47f adbe 	bne.w	800b4d2 <_strtod_l+0x452>
 800b956:	2800      	cmp	r0, #0
 800b958:	f47f adbb 	bne.w	800b4d2 <_strtod_l+0x452>
 800b95c:	2322      	movs	r3, #34	; 0x22
 800b95e:	f8c9 3000 	str.w	r3, [r9]
 800b962:	e5b6      	b.n	800b4d2 <_strtod_l+0x452>
 800b964:	4013      	ands	r3, r2
 800b966:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b96a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b96e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b972:	f04f 3aff 	mov.w	sl, #4294967295
 800b976:	e76a      	b.n	800b84e <_strtod_l+0x7ce>
 800b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b97a:	b193      	cbz	r3, 800b9a2 <_strtod_l+0x922>
 800b97c:	422b      	tst	r3, r5
 800b97e:	f43f af66 	beq.w	800b84e <_strtod_l+0x7ce>
 800b982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b984:	9a04      	ldr	r2, [sp, #16]
 800b986:	4650      	mov	r0, sl
 800b988:	4659      	mov	r1, fp
 800b98a:	b173      	cbz	r3, 800b9aa <_strtod_l+0x92a>
 800b98c:	f7ff fb5c 	bl	800b048 <sulp>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b998:	f7f4 fca0 	bl	80002dc <__adddf3>
 800b99c:	4682      	mov	sl, r0
 800b99e:	468b      	mov	fp, r1
 800b9a0:	e755      	b.n	800b84e <_strtod_l+0x7ce>
 800b9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9a4:	ea13 0f0a 	tst.w	r3, sl
 800b9a8:	e7e9      	b.n	800b97e <_strtod_l+0x8fe>
 800b9aa:	f7ff fb4d 	bl	800b048 <sulp>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9b6:	f7f4 fc8f 	bl	80002d8 <__aeabi_dsub>
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4682      	mov	sl, r0
 800b9c0:	468b      	mov	fp, r1
 800b9c2:	f7f5 f8a9 	bl	8000b18 <__aeabi_dcmpeq>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f47f ae11 	bne.w	800b5ee <_strtod_l+0x56e>
 800b9cc:	e73f      	b.n	800b84e <_strtod_l+0x7ce>
 800b9ce:	4641      	mov	r1, r8
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f001 ff4a 	bl	800d86a <__ratio>
 800b9d6:	ec57 6b10 	vmov	r6, r7, d0
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9e0:	ee10 0a10 	vmov	r0, s0
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	f7f5 f8ab 	bl	8000b40 <__aeabi_dcmple>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d077      	beq.n	800bade <_strtod_l+0xa5e>
 800b9ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d04a      	beq.n	800ba8a <_strtod_l+0xa0a>
 800b9f4:	4b68      	ldr	r3, [pc, #416]	; (800bb98 <_strtod_l+0xb18>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b9fc:	4f66      	ldr	r7, [pc, #408]	; (800bb98 <_strtod_l+0xb18>)
 800b9fe:	2600      	movs	r6, #0
 800ba00:	4b62      	ldr	r3, [pc, #392]	; (800bb8c <_strtod_l+0xb0c>)
 800ba02:	402b      	ands	r3, r5
 800ba04:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba08:	4b64      	ldr	r3, [pc, #400]	; (800bb9c <_strtod_l+0xb1c>)
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	f040 80ce 	bne.w	800bbac <_strtod_l+0xb2c>
 800ba10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba18:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ba1c:	ec4b ab10 	vmov	d0, sl, fp
 800ba20:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ba24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ba28:	f001 fe5a 	bl	800d6e0 <__ulp>
 800ba2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba30:	ec53 2b10 	vmov	r2, r3, d0
 800ba34:	f7f4 fe08 	bl	8000648 <__aeabi_dmul>
 800ba38:	4652      	mov	r2, sl
 800ba3a:	465b      	mov	r3, fp
 800ba3c:	f7f4 fc4e 	bl	80002dc <__adddf3>
 800ba40:	460b      	mov	r3, r1
 800ba42:	4952      	ldr	r1, [pc, #328]	; (800bb8c <_strtod_l+0xb0c>)
 800ba44:	4a56      	ldr	r2, [pc, #344]	; (800bba0 <_strtod_l+0xb20>)
 800ba46:	4019      	ands	r1, r3
 800ba48:	4291      	cmp	r1, r2
 800ba4a:	4682      	mov	sl, r0
 800ba4c:	d95b      	bls.n	800bb06 <_strtod_l+0xa86>
 800ba4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d103      	bne.n	800ba60 <_strtod_l+0x9e0>
 800ba58:	9b08      	ldr	r3, [sp, #32]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	f43f ad2e 	beq.w	800b4bc <_strtod_l+0x43c>
 800ba60:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800bb90 <_strtod_l+0xb10>
 800ba64:	f04f 3aff 	mov.w	sl, #4294967295
 800ba68:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	f001 fba0 	bl	800d1b0 <_Bfree>
 800ba70:	9905      	ldr	r1, [sp, #20]
 800ba72:	4648      	mov	r0, r9
 800ba74:	f001 fb9c 	bl	800d1b0 <_Bfree>
 800ba78:	4641      	mov	r1, r8
 800ba7a:	4648      	mov	r0, r9
 800ba7c:	f001 fb98 	bl	800d1b0 <_Bfree>
 800ba80:	4621      	mov	r1, r4
 800ba82:	4648      	mov	r0, r9
 800ba84:	f001 fb94 	bl	800d1b0 <_Bfree>
 800ba88:	e619      	b.n	800b6be <_strtod_l+0x63e>
 800ba8a:	f1ba 0f00 	cmp.w	sl, #0
 800ba8e:	d11a      	bne.n	800bac6 <_strtod_l+0xa46>
 800ba90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba94:	b9eb      	cbnz	r3, 800bad2 <_strtod_l+0xa52>
 800ba96:	2200      	movs	r2, #0
 800ba98:	4b3f      	ldr	r3, [pc, #252]	; (800bb98 <_strtod_l+0xb18>)
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	f7f5 f845 	bl	8000b2c <__aeabi_dcmplt>
 800baa2:	b9c8      	cbnz	r0, 800bad8 <_strtod_l+0xa58>
 800baa4:	4630      	mov	r0, r6
 800baa6:	4639      	mov	r1, r7
 800baa8:	2200      	movs	r2, #0
 800baaa:	4b3e      	ldr	r3, [pc, #248]	; (800bba4 <_strtod_l+0xb24>)
 800baac:	f7f4 fdcc 	bl	8000648 <__aeabi_dmul>
 800bab0:	4606      	mov	r6, r0
 800bab2:	460f      	mov	r7, r1
 800bab4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bab8:	9618      	str	r6, [sp, #96]	; 0x60
 800baba:	9319      	str	r3, [sp, #100]	; 0x64
 800babc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800bac0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bac4:	e79c      	b.n	800ba00 <_strtod_l+0x980>
 800bac6:	f1ba 0f01 	cmp.w	sl, #1
 800baca:	d102      	bne.n	800bad2 <_strtod_l+0xa52>
 800bacc:	2d00      	cmp	r5, #0
 800bace:	f43f ad8e 	beq.w	800b5ee <_strtod_l+0x56e>
 800bad2:	2200      	movs	r2, #0
 800bad4:	4b34      	ldr	r3, [pc, #208]	; (800bba8 <_strtod_l+0xb28>)
 800bad6:	e78f      	b.n	800b9f8 <_strtod_l+0x978>
 800bad8:	2600      	movs	r6, #0
 800bada:	4f32      	ldr	r7, [pc, #200]	; (800bba4 <_strtod_l+0xb24>)
 800badc:	e7ea      	b.n	800bab4 <_strtod_l+0xa34>
 800bade:	4b31      	ldr	r3, [pc, #196]	; (800bba4 <_strtod_l+0xb24>)
 800bae0:	4630      	mov	r0, r6
 800bae2:	4639      	mov	r1, r7
 800bae4:	2200      	movs	r2, #0
 800bae6:	f7f4 fdaf 	bl	8000648 <__aeabi_dmul>
 800baea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baec:	4606      	mov	r6, r0
 800baee:	460f      	mov	r7, r1
 800baf0:	b933      	cbnz	r3, 800bb00 <_strtod_l+0xa80>
 800baf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baf6:	9010      	str	r0, [sp, #64]	; 0x40
 800baf8:	9311      	str	r3, [sp, #68]	; 0x44
 800bafa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bafe:	e7df      	b.n	800bac0 <_strtod_l+0xa40>
 800bb00:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bb04:	e7f9      	b.n	800bafa <_strtod_l+0xa7a>
 800bb06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1ab      	bne.n	800ba68 <_strtod_l+0x9e8>
 800bb10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb14:	0d1b      	lsrs	r3, r3, #20
 800bb16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb18:	051b      	lsls	r3, r3, #20
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	465d      	mov	r5, fp
 800bb1e:	d1a3      	bne.n	800ba68 <_strtod_l+0x9e8>
 800bb20:	4639      	mov	r1, r7
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7f5 f840 	bl	8000ba8 <__aeabi_d2iz>
 800bb28:	f7f4 fd24 	bl	8000574 <__aeabi_i2d>
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4602      	mov	r2, r0
 800bb30:	4639      	mov	r1, r7
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7f4 fbd0 	bl	80002d8 <__aeabi_dsub>
 800bb38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	b933      	cbnz	r3, 800bb4e <_strtod_l+0xace>
 800bb40:	f1ba 0f00 	cmp.w	sl, #0
 800bb44:	d103      	bne.n	800bb4e <_strtod_l+0xace>
 800bb46:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800bb4a:	2d00      	cmp	r5, #0
 800bb4c:	d06d      	beq.n	800bc2a <_strtod_l+0xbaa>
 800bb4e:	a30a      	add	r3, pc, #40	; (adr r3, 800bb78 <_strtod_l+0xaf8>)
 800bb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb54:	4630      	mov	r0, r6
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f4 ffe8 	bl	8000b2c <__aeabi_dcmplt>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f47f acb8 	bne.w	800b4d2 <_strtod_l+0x452>
 800bb62:	a307      	add	r3, pc, #28	; (adr r3, 800bb80 <_strtod_l+0xb00>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 fffc 	bl	8000b68 <__aeabi_dcmpgt>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	f43f af79 	beq.w	800ba68 <_strtod_l+0x9e8>
 800bb76:	e4ac      	b.n	800b4d2 <_strtod_l+0x452>
 800bb78:	94a03595 	.word	0x94a03595
 800bb7c:	3fdfffff 	.word	0x3fdfffff
 800bb80:	35afe535 	.word	0x35afe535
 800bb84:	3fe00000 	.word	0x3fe00000
 800bb88:	000fffff 	.word	0x000fffff
 800bb8c:	7ff00000 	.word	0x7ff00000
 800bb90:	7fefffff 	.word	0x7fefffff
 800bb94:	39500000 	.word	0x39500000
 800bb98:	3ff00000 	.word	0x3ff00000
 800bb9c:	7fe00000 	.word	0x7fe00000
 800bba0:	7c9fffff 	.word	0x7c9fffff
 800bba4:	3fe00000 	.word	0x3fe00000
 800bba8:	bff00000 	.word	0xbff00000
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	b333      	cbz	r3, 800bbfe <_strtod_l+0xb7e>
 800bbb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbb2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bbb6:	d822      	bhi.n	800bbfe <_strtod_l+0xb7e>
 800bbb8:	a327      	add	r3, pc, #156	; (adr r3, 800bc58 <_strtod_l+0xbd8>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	f7f4 ffbd 	bl	8000b40 <__aeabi_dcmple>
 800bbc6:	b1a0      	cbz	r0, 800bbf2 <_strtod_l+0xb72>
 800bbc8:	4639      	mov	r1, r7
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f7f5 f814 	bl	8000bf8 <__aeabi_d2uiz>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	bf08      	it	eq
 800bbd4:	2001      	moveq	r0, #1
 800bbd6:	f7f4 fcbd 	bl	8000554 <__aeabi_ui2d>
 800bbda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	bb03      	cbnz	r3, 800bc24 <_strtod_l+0xba4>
 800bbe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe6:	9012      	str	r0, [sp, #72]	; 0x48
 800bbe8:	9313      	str	r3, [sp, #76]	; 0x4c
 800bbea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bbee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bbf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbf6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bbfa:	1a9b      	subs	r3, r3, r2
 800bbfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbfe:	ed9d 0b08 	vldr	d0, [sp, #32]
 800bc02:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800bc06:	f001 fd6b 	bl	800d6e0 <__ulp>
 800bc0a:	4650      	mov	r0, sl
 800bc0c:	ec53 2b10 	vmov	r2, r3, d0
 800bc10:	4659      	mov	r1, fp
 800bc12:	f7f4 fd19 	bl	8000648 <__aeabi_dmul>
 800bc16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc1a:	f7f4 fb5f 	bl	80002dc <__adddf3>
 800bc1e:	4682      	mov	sl, r0
 800bc20:	468b      	mov	fp, r1
 800bc22:	e772      	b.n	800bb0a <_strtod_l+0xa8a>
 800bc24:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800bc28:	e7df      	b.n	800bbea <_strtod_l+0xb6a>
 800bc2a:	a30d      	add	r3, pc, #52	; (adr r3, 800bc60 <_strtod_l+0xbe0>)
 800bc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc30:	f7f4 ff7c 	bl	8000b2c <__aeabi_dcmplt>
 800bc34:	e79c      	b.n	800bb70 <_strtod_l+0xaf0>
 800bc36:	2300      	movs	r3, #0
 800bc38:	930d      	str	r3, [sp, #52]	; 0x34
 800bc3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	f7ff ba61 	b.w	800b106 <_strtod_l+0x86>
 800bc44:	2b65      	cmp	r3, #101	; 0x65
 800bc46:	f04f 0200 	mov.w	r2, #0
 800bc4a:	f43f ab4e 	beq.w	800b2ea <_strtod_l+0x26a>
 800bc4e:	2101      	movs	r1, #1
 800bc50:	4614      	mov	r4, r2
 800bc52:	9104      	str	r1, [sp, #16]
 800bc54:	f7ff bacb 	b.w	800b1ee <_strtod_l+0x16e>
 800bc58:	ffc00000 	.word	0xffc00000
 800bc5c:	41dfffff 	.word	0x41dfffff
 800bc60:	94a03595 	.word	0x94a03595
 800bc64:	3fcfffff 	.word	0x3fcfffff

0800bc68 <_strtod_r>:
 800bc68:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <_strtod_r+0x18>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	b410      	push	{r4}
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	4c04      	ldr	r4, [pc, #16]	; (800bc84 <_strtod_r+0x1c>)
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bf08      	it	eq
 800bc76:	4623      	moveq	r3, r4
 800bc78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc7c:	f7ff ba00 	b.w	800b080 <_strtod_l>
 800bc80:	20002840 	.word	0x20002840
 800bc84:	200028a4 	.word	0x200028a4

0800bc88 <_strtol_l.isra.0>:
 800bc88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	4689      	mov	r9, r1
 800bc90:	4692      	mov	sl, r2
 800bc92:	461e      	mov	r6, r3
 800bc94:	460f      	mov	r7, r1
 800bc96:	463d      	mov	r5, r7
 800bc98:	9808      	ldr	r0, [sp, #32]
 800bc9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc9e:	f001 fa25 	bl	800d0ec <__locale_ctype_ptr_l>
 800bca2:	4420      	add	r0, r4
 800bca4:	7843      	ldrb	r3, [r0, #1]
 800bca6:	f013 0308 	ands.w	r3, r3, #8
 800bcaa:	d132      	bne.n	800bd12 <_strtol_l.isra.0+0x8a>
 800bcac:	2c2d      	cmp	r4, #45	; 0x2d
 800bcae:	d132      	bne.n	800bd16 <_strtol_l.isra.0+0x8e>
 800bcb0:	787c      	ldrb	r4, [r7, #1]
 800bcb2:	1cbd      	adds	r5, r7, #2
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	2e00      	cmp	r6, #0
 800bcb8:	d05d      	beq.n	800bd76 <_strtol_l.isra.0+0xee>
 800bcba:	2e10      	cmp	r6, #16
 800bcbc:	d109      	bne.n	800bcd2 <_strtol_l.isra.0+0x4a>
 800bcbe:	2c30      	cmp	r4, #48	; 0x30
 800bcc0:	d107      	bne.n	800bcd2 <_strtol_l.isra.0+0x4a>
 800bcc2:	782b      	ldrb	r3, [r5, #0]
 800bcc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bcc8:	2b58      	cmp	r3, #88	; 0x58
 800bcca:	d14f      	bne.n	800bd6c <_strtol_l.isra.0+0xe4>
 800bccc:	786c      	ldrb	r4, [r5, #1]
 800bcce:	2610      	movs	r6, #16
 800bcd0:	3502      	adds	r5, #2
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	bf14      	ite	ne
 800bcd6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bcda:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bcde:	2700      	movs	r7, #0
 800bce0:	fbb1 fcf6 	udiv	ip, r1, r6
 800bce4:	4638      	mov	r0, r7
 800bce6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bcea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bcee:	2b09      	cmp	r3, #9
 800bcf0:	d817      	bhi.n	800bd22 <_strtol_l.isra.0+0x9a>
 800bcf2:	461c      	mov	r4, r3
 800bcf4:	42a6      	cmp	r6, r4
 800bcf6:	dd23      	ble.n	800bd40 <_strtol_l.isra.0+0xb8>
 800bcf8:	1c7b      	adds	r3, r7, #1
 800bcfa:	d007      	beq.n	800bd0c <_strtol_l.isra.0+0x84>
 800bcfc:	4584      	cmp	ip, r0
 800bcfe:	d31c      	bcc.n	800bd3a <_strtol_l.isra.0+0xb2>
 800bd00:	d101      	bne.n	800bd06 <_strtol_l.isra.0+0x7e>
 800bd02:	45a6      	cmp	lr, r4
 800bd04:	db19      	blt.n	800bd3a <_strtol_l.isra.0+0xb2>
 800bd06:	fb00 4006 	mla	r0, r0, r6, r4
 800bd0a:	2701      	movs	r7, #1
 800bd0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd10:	e7eb      	b.n	800bcea <_strtol_l.isra.0+0x62>
 800bd12:	462f      	mov	r7, r5
 800bd14:	e7bf      	b.n	800bc96 <_strtol_l.isra.0+0xe>
 800bd16:	2c2b      	cmp	r4, #43	; 0x2b
 800bd18:	bf04      	itt	eq
 800bd1a:	1cbd      	addeq	r5, r7, #2
 800bd1c:	787c      	ldrbeq	r4, [r7, #1]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	e7c9      	b.n	800bcb6 <_strtol_l.isra.0+0x2e>
 800bd22:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bd26:	2b19      	cmp	r3, #25
 800bd28:	d801      	bhi.n	800bd2e <_strtol_l.isra.0+0xa6>
 800bd2a:	3c37      	subs	r4, #55	; 0x37
 800bd2c:	e7e2      	b.n	800bcf4 <_strtol_l.isra.0+0x6c>
 800bd2e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bd32:	2b19      	cmp	r3, #25
 800bd34:	d804      	bhi.n	800bd40 <_strtol_l.isra.0+0xb8>
 800bd36:	3c57      	subs	r4, #87	; 0x57
 800bd38:	e7dc      	b.n	800bcf4 <_strtol_l.isra.0+0x6c>
 800bd3a:	f04f 37ff 	mov.w	r7, #4294967295
 800bd3e:	e7e5      	b.n	800bd0c <_strtol_l.isra.0+0x84>
 800bd40:	1c7b      	adds	r3, r7, #1
 800bd42:	d108      	bne.n	800bd56 <_strtol_l.isra.0+0xce>
 800bd44:	2322      	movs	r3, #34	; 0x22
 800bd46:	f8c8 3000 	str.w	r3, [r8]
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	f1ba 0f00 	cmp.w	sl, #0
 800bd50:	d107      	bne.n	800bd62 <_strtol_l.isra.0+0xda>
 800bd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd56:	b102      	cbz	r2, 800bd5a <_strtol_l.isra.0+0xd2>
 800bd58:	4240      	negs	r0, r0
 800bd5a:	f1ba 0f00 	cmp.w	sl, #0
 800bd5e:	d0f8      	beq.n	800bd52 <_strtol_l.isra.0+0xca>
 800bd60:	b10f      	cbz	r7, 800bd66 <_strtol_l.isra.0+0xde>
 800bd62:	f105 39ff 	add.w	r9, r5, #4294967295
 800bd66:	f8ca 9000 	str.w	r9, [sl]
 800bd6a:	e7f2      	b.n	800bd52 <_strtol_l.isra.0+0xca>
 800bd6c:	2430      	movs	r4, #48	; 0x30
 800bd6e:	2e00      	cmp	r6, #0
 800bd70:	d1af      	bne.n	800bcd2 <_strtol_l.isra.0+0x4a>
 800bd72:	2608      	movs	r6, #8
 800bd74:	e7ad      	b.n	800bcd2 <_strtol_l.isra.0+0x4a>
 800bd76:	2c30      	cmp	r4, #48	; 0x30
 800bd78:	d0a3      	beq.n	800bcc2 <_strtol_l.isra.0+0x3a>
 800bd7a:	260a      	movs	r6, #10
 800bd7c:	e7a9      	b.n	800bcd2 <_strtol_l.isra.0+0x4a>
	...

0800bd80 <_strtol_r>:
 800bd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd82:	4c06      	ldr	r4, [pc, #24]	; (800bd9c <_strtol_r+0x1c>)
 800bd84:	4d06      	ldr	r5, [pc, #24]	; (800bda0 <_strtol_r+0x20>)
 800bd86:	6824      	ldr	r4, [r4, #0]
 800bd88:	6a24      	ldr	r4, [r4, #32]
 800bd8a:	2c00      	cmp	r4, #0
 800bd8c:	bf08      	it	eq
 800bd8e:	462c      	moveq	r4, r5
 800bd90:	9400      	str	r4, [sp, #0]
 800bd92:	f7ff ff79 	bl	800bc88 <_strtol_l.isra.0>
 800bd96:	b003      	add	sp, #12
 800bd98:	bd30      	pop	{r4, r5, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20002840 	.word	0x20002840
 800bda0:	200028a4 	.word	0x200028a4

0800bda4 <_vsniprintf_r>:
 800bda4:	b530      	push	{r4, r5, lr}
 800bda6:	1e14      	subs	r4, r2, #0
 800bda8:	4605      	mov	r5, r0
 800bdaa:	b09b      	sub	sp, #108	; 0x6c
 800bdac:	4618      	mov	r0, r3
 800bdae:	da05      	bge.n	800bdbc <_vsniprintf_r+0x18>
 800bdb0:	238b      	movs	r3, #139	; 0x8b
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb8:	b01b      	add	sp, #108	; 0x6c
 800bdba:	bd30      	pop	{r4, r5, pc}
 800bdbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bdc0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bdc4:	bf14      	ite	ne
 800bdc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bdca:	4623      	moveq	r3, r4
 800bdcc:	9302      	str	r3, [sp, #8]
 800bdce:	9305      	str	r3, [sp, #20]
 800bdd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdd4:	9100      	str	r1, [sp, #0]
 800bdd6:	9104      	str	r1, [sp, #16]
 800bdd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bddc:	4602      	mov	r2, r0
 800bdde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bde0:	4669      	mov	r1, sp
 800bde2:	4628      	mov	r0, r5
 800bde4:	f001 fec0 	bl	800db68 <_svfiprintf_r>
 800bde8:	1c43      	adds	r3, r0, #1
 800bdea:	bfbc      	itt	lt
 800bdec:	238b      	movlt	r3, #139	; 0x8b
 800bdee:	602b      	strlt	r3, [r5, #0]
 800bdf0:	2c00      	cmp	r4, #0
 800bdf2:	d0e1      	beq.n	800bdb8 <_vsniprintf_r+0x14>
 800bdf4:	9b00      	ldr	r3, [sp, #0]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	e7dd      	b.n	800bdb8 <_vsniprintf_r+0x14>

0800bdfc <vsniprintf>:
 800bdfc:	b507      	push	{r0, r1, r2, lr}
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	4613      	mov	r3, r2
 800be02:	460a      	mov	r2, r1
 800be04:	4601      	mov	r1, r0
 800be06:	4803      	ldr	r0, [pc, #12]	; (800be14 <vsniprintf+0x18>)
 800be08:	6800      	ldr	r0, [r0, #0]
 800be0a:	f7ff ffcb 	bl	800bda4 <_vsniprintf_r>
 800be0e:	b003      	add	sp, #12
 800be10:	f85d fb04 	ldr.w	pc, [sp], #4
 800be14:	20002840 	.word	0x20002840

0800be18 <quorem>:
 800be18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	6903      	ldr	r3, [r0, #16]
 800be1e:	690c      	ldr	r4, [r1, #16]
 800be20:	42a3      	cmp	r3, r4
 800be22:	4680      	mov	r8, r0
 800be24:	f2c0 8082 	blt.w	800bf2c <quorem+0x114>
 800be28:	3c01      	subs	r4, #1
 800be2a:	f101 0714 	add.w	r7, r1, #20
 800be2e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800be32:	f100 0614 	add.w	r6, r0, #20
 800be36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800be3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800be3e:	eb06 030c 	add.w	r3, r6, ip
 800be42:	3501      	adds	r5, #1
 800be44:	eb07 090c 	add.w	r9, r7, ip
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	fbb0 f5f5 	udiv	r5, r0, r5
 800be4e:	b395      	cbz	r5, 800beb6 <quorem+0x9e>
 800be50:	f04f 0a00 	mov.w	sl, #0
 800be54:	4638      	mov	r0, r7
 800be56:	46b6      	mov	lr, r6
 800be58:	46d3      	mov	fp, sl
 800be5a:	f850 2b04 	ldr.w	r2, [r0], #4
 800be5e:	b293      	uxth	r3, r2
 800be60:	fb05 a303 	mla	r3, r5, r3, sl
 800be64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be68:	b29b      	uxth	r3, r3
 800be6a:	ebab 0303 	sub.w	r3, fp, r3
 800be6e:	0c12      	lsrs	r2, r2, #16
 800be70:	f8de b000 	ldr.w	fp, [lr]
 800be74:	fb05 a202 	mla	r2, r5, r2, sl
 800be78:	fa13 f38b 	uxtah	r3, r3, fp
 800be7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800be80:	fa1f fb82 	uxth.w	fp, r2
 800be84:	f8de 2000 	ldr.w	r2, [lr]
 800be88:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800be8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be90:	b29b      	uxth	r3, r3
 800be92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be96:	4581      	cmp	r9, r0
 800be98:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800be9c:	f84e 3b04 	str.w	r3, [lr], #4
 800bea0:	d2db      	bcs.n	800be5a <quorem+0x42>
 800bea2:	f856 300c 	ldr.w	r3, [r6, ip]
 800bea6:	b933      	cbnz	r3, 800beb6 <quorem+0x9e>
 800bea8:	9b01      	ldr	r3, [sp, #4]
 800beaa:	3b04      	subs	r3, #4
 800beac:	429e      	cmp	r6, r3
 800beae:	461a      	mov	r2, r3
 800beb0:	d330      	bcc.n	800bf14 <quorem+0xfc>
 800beb2:	f8c8 4010 	str.w	r4, [r8, #16]
 800beb6:	4640      	mov	r0, r8
 800beb8:	f001 fb9a 	bl	800d5f0 <__mcmp>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	db25      	blt.n	800bf0c <quorem+0xf4>
 800bec0:	3501      	adds	r5, #1
 800bec2:	4630      	mov	r0, r6
 800bec4:	f04f 0c00 	mov.w	ip, #0
 800bec8:	f857 2b04 	ldr.w	r2, [r7], #4
 800becc:	f8d0 e000 	ldr.w	lr, [r0]
 800bed0:	b293      	uxth	r3, r2
 800bed2:	ebac 0303 	sub.w	r3, ip, r3
 800bed6:	0c12      	lsrs	r2, r2, #16
 800bed8:	fa13 f38e 	uxtah	r3, r3, lr
 800bedc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800beea:	45b9      	cmp	r9, r7
 800beec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bef0:	f840 3b04 	str.w	r3, [r0], #4
 800bef4:	d2e8      	bcs.n	800bec8 <quorem+0xb0>
 800bef6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800befa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800befe:	b92a      	cbnz	r2, 800bf0c <quorem+0xf4>
 800bf00:	3b04      	subs	r3, #4
 800bf02:	429e      	cmp	r6, r3
 800bf04:	461a      	mov	r2, r3
 800bf06:	d30b      	bcc.n	800bf20 <quorem+0x108>
 800bf08:	f8c8 4010 	str.w	r4, [r8, #16]
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	b003      	add	sp, #12
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf14:	6812      	ldr	r2, [r2, #0]
 800bf16:	3b04      	subs	r3, #4
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	d1ca      	bne.n	800beb2 <quorem+0x9a>
 800bf1c:	3c01      	subs	r4, #1
 800bf1e:	e7c5      	b.n	800beac <quorem+0x94>
 800bf20:	6812      	ldr	r2, [r2, #0]
 800bf22:	3b04      	subs	r3, #4
 800bf24:	2a00      	cmp	r2, #0
 800bf26:	d1ef      	bne.n	800bf08 <quorem+0xf0>
 800bf28:	3c01      	subs	r4, #1
 800bf2a:	e7ea      	b.n	800bf02 <quorem+0xea>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	e7ee      	b.n	800bf0e <quorem+0xf6>

0800bf30 <_dtoa_r>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	ec57 6b10 	vmov	r6, r7, d0
 800bf38:	b097      	sub	sp, #92	; 0x5c
 800bf3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf3c:	9106      	str	r1, [sp, #24]
 800bf3e:	4604      	mov	r4, r0
 800bf40:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf42:	9312      	str	r3, [sp, #72]	; 0x48
 800bf44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf48:	e9cd 6700 	strd	r6, r7, [sp]
 800bf4c:	b93d      	cbnz	r5, 800bf5e <_dtoa_r+0x2e>
 800bf4e:	2010      	movs	r0, #16
 800bf50:	f001 f8e0 	bl	800d114 <malloc>
 800bf54:	6260      	str	r0, [r4, #36]	; 0x24
 800bf56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf5a:	6005      	str	r5, [r0, #0]
 800bf5c:	60c5      	str	r5, [r0, #12]
 800bf5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf60:	6819      	ldr	r1, [r3, #0]
 800bf62:	b151      	cbz	r1, 800bf7a <_dtoa_r+0x4a>
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	604a      	str	r2, [r1, #4]
 800bf68:	2301      	movs	r3, #1
 800bf6a:	4093      	lsls	r3, r2
 800bf6c:	608b      	str	r3, [r1, #8]
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f001 f91e 	bl	800d1b0 <_Bfree>
 800bf74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf76:	2200      	movs	r2, #0
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	1e3b      	subs	r3, r7, #0
 800bf7c:	bfbb      	ittet	lt
 800bf7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf82:	9301      	strlt	r3, [sp, #4]
 800bf84:	2300      	movge	r3, #0
 800bf86:	2201      	movlt	r2, #1
 800bf88:	bfac      	ite	ge
 800bf8a:	f8c8 3000 	strge.w	r3, [r8]
 800bf8e:	f8c8 2000 	strlt.w	r2, [r8]
 800bf92:	4baf      	ldr	r3, [pc, #700]	; (800c250 <_dtoa_r+0x320>)
 800bf94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf98:	ea33 0308 	bics.w	r3, r3, r8
 800bf9c:	d114      	bne.n	800bfc8 <_dtoa_r+0x98>
 800bf9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfa0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bfa4:	6013      	str	r3, [r2, #0]
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	b923      	cbnz	r3, 800bfb4 <_dtoa_r+0x84>
 800bfaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	f000 8542 	beq.w	800ca38 <_dtoa_r+0xb08>
 800bfb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c264 <_dtoa_r+0x334>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 8544 	beq.w	800ca48 <_dtoa_r+0xb18>
 800bfc0:	f10b 0303 	add.w	r3, fp, #3
 800bfc4:	f000 bd3e 	b.w	800ca44 <_dtoa_r+0xb14>
 800bfc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2300      	movs	r3, #0
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 fda0 	bl	8000b18 <__aeabi_dcmpeq>
 800bfd8:	4681      	mov	r9, r0
 800bfda:	b168      	cbz	r0, 800bff8 <_dtoa_r+0xc8>
 800bfdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfde:	2301      	movs	r3, #1
 800bfe0:	6013      	str	r3, [r2, #0]
 800bfe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 8524 	beq.w	800ca32 <_dtoa_r+0xb02>
 800bfea:	4b9a      	ldr	r3, [pc, #616]	; (800c254 <_dtoa_r+0x324>)
 800bfec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bfee:	f103 3bff 	add.w	fp, r3, #4294967295
 800bff2:	6013      	str	r3, [r2, #0]
 800bff4:	f000 bd28 	b.w	800ca48 <_dtoa_r+0xb18>
 800bff8:	aa14      	add	r2, sp, #80	; 0x50
 800bffa:	a915      	add	r1, sp, #84	; 0x54
 800bffc:	ec47 6b10 	vmov	d0, r6, r7
 800c000:	4620      	mov	r0, r4
 800c002:	f001 fbe3 	bl	800d7cc <__d2b>
 800c006:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c00a:	9004      	str	r0, [sp, #16]
 800c00c:	2d00      	cmp	r5, #0
 800c00e:	d07c      	beq.n	800c10a <_dtoa_r+0x1da>
 800c010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c014:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c018:	46b2      	mov	sl, r6
 800c01a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c01e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c022:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c026:	2200      	movs	r2, #0
 800c028:	4b8b      	ldr	r3, [pc, #556]	; (800c258 <_dtoa_r+0x328>)
 800c02a:	4650      	mov	r0, sl
 800c02c:	4659      	mov	r1, fp
 800c02e:	f7f4 f953 	bl	80002d8 <__aeabi_dsub>
 800c032:	a381      	add	r3, pc, #516	; (adr r3, 800c238 <_dtoa_r+0x308>)
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	f7f4 fb06 	bl	8000648 <__aeabi_dmul>
 800c03c:	a380      	add	r3, pc, #512	; (adr r3, 800c240 <_dtoa_r+0x310>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	f7f4 f94b 	bl	80002dc <__adddf3>
 800c046:	4606      	mov	r6, r0
 800c048:	4628      	mov	r0, r5
 800c04a:	460f      	mov	r7, r1
 800c04c:	f7f4 fa92 	bl	8000574 <__aeabi_i2d>
 800c050:	a37d      	add	r3, pc, #500	; (adr r3, 800c248 <_dtoa_r+0x318>)
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	f7f4 faf7 	bl	8000648 <__aeabi_dmul>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	4630      	mov	r0, r6
 800c060:	4639      	mov	r1, r7
 800c062:	f7f4 f93b 	bl	80002dc <__adddf3>
 800c066:	4606      	mov	r6, r0
 800c068:	460f      	mov	r7, r1
 800c06a:	f7f4 fd9d 	bl	8000ba8 <__aeabi_d2iz>
 800c06e:	2200      	movs	r2, #0
 800c070:	4682      	mov	sl, r0
 800c072:	2300      	movs	r3, #0
 800c074:	4630      	mov	r0, r6
 800c076:	4639      	mov	r1, r7
 800c078:	f7f4 fd58 	bl	8000b2c <__aeabi_dcmplt>
 800c07c:	b148      	cbz	r0, 800c092 <_dtoa_r+0x162>
 800c07e:	4650      	mov	r0, sl
 800c080:	f7f4 fa78 	bl	8000574 <__aeabi_i2d>
 800c084:	4632      	mov	r2, r6
 800c086:	463b      	mov	r3, r7
 800c088:	f7f4 fd46 	bl	8000b18 <__aeabi_dcmpeq>
 800c08c:	b908      	cbnz	r0, 800c092 <_dtoa_r+0x162>
 800c08e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c092:	f1ba 0f16 	cmp.w	sl, #22
 800c096:	d859      	bhi.n	800c14c <_dtoa_r+0x21c>
 800c098:	4970      	ldr	r1, [pc, #448]	; (800c25c <_dtoa_r+0x32c>)
 800c09a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c09e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0a6:	f7f4 fd5f 	bl	8000b68 <__aeabi_dcmpgt>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d050      	beq.n	800c150 <_dtoa_r+0x220>
 800c0ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0b8:	1b5d      	subs	r5, r3, r5
 800c0ba:	f1b5 0801 	subs.w	r8, r5, #1
 800c0be:	bf49      	itett	mi
 800c0c0:	f1c5 0301 	rsbmi	r3, r5, #1
 800c0c4:	2300      	movpl	r3, #0
 800c0c6:	9305      	strmi	r3, [sp, #20]
 800c0c8:	f04f 0800 	movmi.w	r8, #0
 800c0cc:	bf58      	it	pl
 800c0ce:	9305      	strpl	r3, [sp, #20]
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	db3e      	blt.n	800c154 <_dtoa_r+0x224>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	44d0      	add	r8, sl
 800c0da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c0de:	9307      	str	r3, [sp, #28]
 800c0e0:	9b06      	ldr	r3, [sp, #24]
 800c0e2:	2b09      	cmp	r3, #9
 800c0e4:	f200 8090 	bhi.w	800c208 <_dtoa_r+0x2d8>
 800c0e8:	2b05      	cmp	r3, #5
 800c0ea:	bfc4      	itt	gt
 800c0ec:	3b04      	subgt	r3, #4
 800c0ee:	9306      	strgt	r3, [sp, #24]
 800c0f0:	9b06      	ldr	r3, [sp, #24]
 800c0f2:	f1a3 0302 	sub.w	r3, r3, #2
 800c0f6:	bfcc      	ite	gt
 800c0f8:	2500      	movgt	r5, #0
 800c0fa:	2501      	movle	r5, #1
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	f200 808f 	bhi.w	800c220 <_dtoa_r+0x2f0>
 800c102:	e8df f003 	tbb	[pc, r3]
 800c106:	7f7d      	.short	0x7f7d
 800c108:	7131      	.short	0x7131
 800c10a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c10e:	441d      	add	r5, r3
 800c110:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c114:	2820      	cmp	r0, #32
 800c116:	dd13      	ble.n	800c140 <_dtoa_r+0x210>
 800c118:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c11c:	9b00      	ldr	r3, [sp, #0]
 800c11e:	fa08 f800 	lsl.w	r8, r8, r0
 800c122:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c126:	fa23 f000 	lsr.w	r0, r3, r0
 800c12a:	ea48 0000 	orr.w	r0, r8, r0
 800c12e:	f7f4 fa11 	bl	8000554 <__aeabi_ui2d>
 800c132:	2301      	movs	r3, #1
 800c134:	4682      	mov	sl, r0
 800c136:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c13a:	3d01      	subs	r5, #1
 800c13c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c13e:	e772      	b.n	800c026 <_dtoa_r+0xf6>
 800c140:	9b00      	ldr	r3, [sp, #0]
 800c142:	f1c0 0020 	rsb	r0, r0, #32
 800c146:	fa03 f000 	lsl.w	r0, r3, r0
 800c14a:	e7f0      	b.n	800c12e <_dtoa_r+0x1fe>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e7b1      	b.n	800c0b4 <_dtoa_r+0x184>
 800c150:	900f      	str	r0, [sp, #60]	; 0x3c
 800c152:	e7b0      	b.n	800c0b6 <_dtoa_r+0x186>
 800c154:	9b05      	ldr	r3, [sp, #20]
 800c156:	eba3 030a 	sub.w	r3, r3, sl
 800c15a:	9305      	str	r3, [sp, #20]
 800c15c:	f1ca 0300 	rsb	r3, sl, #0
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	2300      	movs	r3, #0
 800c164:	930e      	str	r3, [sp, #56]	; 0x38
 800c166:	e7bb      	b.n	800c0e0 <_dtoa_r+0x1b0>
 800c168:	2301      	movs	r3, #1
 800c16a:	930a      	str	r3, [sp, #40]	; 0x28
 800c16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	dd59      	ble.n	800c226 <_dtoa_r+0x2f6>
 800c172:	9302      	str	r3, [sp, #8]
 800c174:	4699      	mov	r9, r3
 800c176:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c178:	2200      	movs	r2, #0
 800c17a:	6072      	str	r2, [r6, #4]
 800c17c:	2204      	movs	r2, #4
 800c17e:	f102 0014 	add.w	r0, r2, #20
 800c182:	4298      	cmp	r0, r3
 800c184:	6871      	ldr	r1, [r6, #4]
 800c186:	d953      	bls.n	800c230 <_dtoa_r+0x300>
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 ffdd 	bl	800d148 <_Balloc>
 800c18e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c190:	6030      	str	r0, [r6, #0]
 800c192:	f1b9 0f0e 	cmp.w	r9, #14
 800c196:	f8d3 b000 	ldr.w	fp, [r3]
 800c19a:	f200 80e6 	bhi.w	800c36a <_dtoa_r+0x43a>
 800c19e:	2d00      	cmp	r5, #0
 800c1a0:	f000 80e3 	beq.w	800c36a <_dtoa_r+0x43a>
 800c1a4:	ed9d 7b00 	vldr	d7, [sp]
 800c1a8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c1b0:	dd74      	ble.n	800c29c <_dtoa_r+0x36c>
 800c1b2:	4a2a      	ldr	r2, [pc, #168]	; (800c25c <_dtoa_r+0x32c>)
 800c1b4:	f00a 030f 	and.w	r3, sl, #15
 800c1b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1bc:	ed93 7b00 	vldr	d7, [r3]
 800c1c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c1c4:	06f0      	lsls	r0, r6, #27
 800c1c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c1ca:	d565      	bpl.n	800c298 <_dtoa_r+0x368>
 800c1cc:	4b24      	ldr	r3, [pc, #144]	; (800c260 <_dtoa_r+0x330>)
 800c1ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c1d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1d6:	f7f4 fb61 	bl	800089c <__aeabi_ddiv>
 800c1da:	e9cd 0100 	strd	r0, r1, [sp]
 800c1de:	f006 060f 	and.w	r6, r6, #15
 800c1e2:	2503      	movs	r5, #3
 800c1e4:	4f1e      	ldr	r7, [pc, #120]	; (800c260 <_dtoa_r+0x330>)
 800c1e6:	e04c      	b.n	800c282 <_dtoa_r+0x352>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c1ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ee:	4453      	add	r3, sl
 800c1f0:	f103 0901 	add.w	r9, r3, #1
 800c1f4:	9302      	str	r3, [sp, #8]
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	bfb8      	it	lt
 800c1fc:	2301      	movlt	r3, #1
 800c1fe:	e7ba      	b.n	800c176 <_dtoa_r+0x246>
 800c200:	2300      	movs	r3, #0
 800c202:	e7b2      	b.n	800c16a <_dtoa_r+0x23a>
 800c204:	2300      	movs	r3, #0
 800c206:	e7f0      	b.n	800c1ea <_dtoa_r+0x2ba>
 800c208:	2501      	movs	r5, #1
 800c20a:	2300      	movs	r3, #0
 800c20c:	9306      	str	r3, [sp, #24]
 800c20e:	950a      	str	r5, [sp, #40]	; 0x28
 800c210:	f04f 33ff 	mov.w	r3, #4294967295
 800c214:	9302      	str	r3, [sp, #8]
 800c216:	4699      	mov	r9, r3
 800c218:	2200      	movs	r2, #0
 800c21a:	2312      	movs	r3, #18
 800c21c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c21e:	e7aa      	b.n	800c176 <_dtoa_r+0x246>
 800c220:	2301      	movs	r3, #1
 800c222:	930a      	str	r3, [sp, #40]	; 0x28
 800c224:	e7f4      	b.n	800c210 <_dtoa_r+0x2e0>
 800c226:	2301      	movs	r3, #1
 800c228:	9302      	str	r3, [sp, #8]
 800c22a:	4699      	mov	r9, r3
 800c22c:	461a      	mov	r2, r3
 800c22e:	e7f5      	b.n	800c21c <_dtoa_r+0x2ec>
 800c230:	3101      	adds	r1, #1
 800c232:	6071      	str	r1, [r6, #4]
 800c234:	0052      	lsls	r2, r2, #1
 800c236:	e7a2      	b.n	800c17e <_dtoa_r+0x24e>
 800c238:	636f4361 	.word	0x636f4361
 800c23c:	3fd287a7 	.word	0x3fd287a7
 800c240:	8b60c8b3 	.word	0x8b60c8b3
 800c244:	3fc68a28 	.word	0x3fc68a28
 800c248:	509f79fb 	.word	0x509f79fb
 800c24c:	3fd34413 	.word	0x3fd34413
 800c250:	7ff00000 	.word	0x7ff00000
 800c254:	0800fe73 	.word	0x0800fe73
 800c258:	3ff80000 	.word	0x3ff80000
 800c25c:	0800ff30 	.word	0x0800ff30
 800c260:	0800ff08 	.word	0x0800ff08
 800c264:	0800fef9 	.word	0x0800fef9
 800c268:	07f1      	lsls	r1, r6, #31
 800c26a:	d508      	bpl.n	800c27e <_dtoa_r+0x34e>
 800c26c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c274:	f7f4 f9e8 	bl	8000648 <__aeabi_dmul>
 800c278:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c27c:	3501      	adds	r5, #1
 800c27e:	1076      	asrs	r6, r6, #1
 800c280:	3708      	adds	r7, #8
 800c282:	2e00      	cmp	r6, #0
 800c284:	d1f0      	bne.n	800c268 <_dtoa_r+0x338>
 800c286:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c28a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c28e:	f7f4 fb05 	bl	800089c <__aeabi_ddiv>
 800c292:	e9cd 0100 	strd	r0, r1, [sp]
 800c296:	e01a      	b.n	800c2ce <_dtoa_r+0x39e>
 800c298:	2502      	movs	r5, #2
 800c29a:	e7a3      	b.n	800c1e4 <_dtoa_r+0x2b4>
 800c29c:	f000 80a0 	beq.w	800c3e0 <_dtoa_r+0x4b0>
 800c2a0:	f1ca 0600 	rsb	r6, sl, #0
 800c2a4:	4b9f      	ldr	r3, [pc, #636]	; (800c524 <_dtoa_r+0x5f4>)
 800c2a6:	4fa0      	ldr	r7, [pc, #640]	; (800c528 <_dtoa_r+0x5f8>)
 800c2a8:	f006 020f 	and.w	r2, r6, #15
 800c2ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c2b8:	f7f4 f9c6 	bl	8000648 <__aeabi_dmul>
 800c2bc:	e9cd 0100 	strd	r0, r1, [sp]
 800c2c0:	1136      	asrs	r6, r6, #4
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2502      	movs	r5, #2
 800c2c6:	2e00      	cmp	r6, #0
 800c2c8:	d17f      	bne.n	800c3ca <_dtoa_r+0x49a>
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1e1      	bne.n	800c292 <_dtoa_r+0x362>
 800c2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f000 8087 	beq.w	800c3e4 <_dtoa_r+0x4b4>
 800c2d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	4b93      	ldr	r3, [pc, #588]	; (800c52c <_dtoa_r+0x5fc>)
 800c2de:	4630      	mov	r0, r6
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	f7f4 fc23 	bl	8000b2c <__aeabi_dcmplt>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d07c      	beq.n	800c3e4 <_dtoa_r+0x4b4>
 800c2ea:	f1b9 0f00 	cmp.w	r9, #0
 800c2ee:	d079      	beq.n	800c3e4 <_dtoa_r+0x4b4>
 800c2f0:	9b02      	ldr	r3, [sp, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	dd35      	ble.n	800c362 <_dtoa_r+0x432>
 800c2f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c2fa:	9308      	str	r3, [sp, #32]
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	2200      	movs	r2, #0
 800c300:	4b8b      	ldr	r3, [pc, #556]	; (800c530 <_dtoa_r+0x600>)
 800c302:	4630      	mov	r0, r6
 800c304:	f7f4 f9a0 	bl	8000648 <__aeabi_dmul>
 800c308:	e9cd 0100 	strd	r0, r1, [sp]
 800c30c:	9f02      	ldr	r7, [sp, #8]
 800c30e:	3501      	adds	r5, #1
 800c310:	4628      	mov	r0, r5
 800c312:	f7f4 f92f 	bl	8000574 <__aeabi_i2d>
 800c316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c31a:	f7f4 f995 	bl	8000648 <__aeabi_dmul>
 800c31e:	2200      	movs	r2, #0
 800c320:	4b84      	ldr	r3, [pc, #528]	; (800c534 <_dtoa_r+0x604>)
 800c322:	f7f3 ffdb 	bl	80002dc <__adddf3>
 800c326:	4605      	mov	r5, r0
 800c328:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c32c:	2f00      	cmp	r7, #0
 800c32e:	d15d      	bne.n	800c3ec <_dtoa_r+0x4bc>
 800c330:	2200      	movs	r2, #0
 800c332:	4b81      	ldr	r3, [pc, #516]	; (800c538 <_dtoa_r+0x608>)
 800c334:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c338:	f7f3 ffce 	bl	80002d8 <__aeabi_dsub>
 800c33c:	462a      	mov	r2, r5
 800c33e:	4633      	mov	r3, r6
 800c340:	e9cd 0100 	strd	r0, r1, [sp]
 800c344:	f7f4 fc10 	bl	8000b68 <__aeabi_dcmpgt>
 800c348:	2800      	cmp	r0, #0
 800c34a:	f040 8288 	bne.w	800c85e <_dtoa_r+0x92e>
 800c34e:	462a      	mov	r2, r5
 800c350:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c354:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c358:	f7f4 fbe8 	bl	8000b2c <__aeabi_dcmplt>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f040 827c 	bne.w	800c85a <_dtoa_r+0x92a>
 800c362:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c366:	e9cd 2300 	strd	r2, r3, [sp]
 800c36a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f2c0 8150 	blt.w	800c612 <_dtoa_r+0x6e2>
 800c372:	f1ba 0f0e 	cmp.w	sl, #14
 800c376:	f300 814c 	bgt.w	800c612 <_dtoa_r+0x6e2>
 800c37a:	4b6a      	ldr	r3, [pc, #424]	; (800c524 <_dtoa_r+0x5f4>)
 800c37c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c380:	ed93 7b00 	vldr	d7, [r3]
 800c384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c386:	2b00      	cmp	r3, #0
 800c388:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c38c:	f280 80d8 	bge.w	800c540 <_dtoa_r+0x610>
 800c390:	f1b9 0f00 	cmp.w	r9, #0
 800c394:	f300 80d4 	bgt.w	800c540 <_dtoa_r+0x610>
 800c398:	f040 825e 	bne.w	800c858 <_dtoa_r+0x928>
 800c39c:	2200      	movs	r2, #0
 800c39e:	4b66      	ldr	r3, [pc, #408]	; (800c538 <_dtoa_r+0x608>)
 800c3a0:	ec51 0b17 	vmov	r0, r1, d7
 800c3a4:	f7f4 f950 	bl	8000648 <__aeabi_dmul>
 800c3a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ac:	f7f4 fbd2 	bl	8000b54 <__aeabi_dcmpge>
 800c3b0:	464f      	mov	r7, r9
 800c3b2:	464e      	mov	r6, r9
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	f040 8234 	bne.w	800c822 <_dtoa_r+0x8f2>
 800c3ba:	2331      	movs	r3, #49	; 0x31
 800c3bc:	f10b 0501 	add.w	r5, fp, #1
 800c3c0:	f88b 3000 	strb.w	r3, [fp]
 800c3c4:	f10a 0a01 	add.w	sl, sl, #1
 800c3c8:	e22f      	b.n	800c82a <_dtoa_r+0x8fa>
 800c3ca:	07f2      	lsls	r2, r6, #31
 800c3cc:	d505      	bpl.n	800c3da <_dtoa_r+0x4aa>
 800c3ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3d2:	f7f4 f939 	bl	8000648 <__aeabi_dmul>
 800c3d6:	3501      	adds	r5, #1
 800c3d8:	2301      	movs	r3, #1
 800c3da:	1076      	asrs	r6, r6, #1
 800c3dc:	3708      	adds	r7, #8
 800c3de:	e772      	b.n	800c2c6 <_dtoa_r+0x396>
 800c3e0:	2502      	movs	r5, #2
 800c3e2:	e774      	b.n	800c2ce <_dtoa_r+0x39e>
 800c3e4:	f8cd a020 	str.w	sl, [sp, #32]
 800c3e8:	464f      	mov	r7, r9
 800c3ea:	e791      	b.n	800c310 <_dtoa_r+0x3e0>
 800c3ec:	4b4d      	ldr	r3, [pc, #308]	; (800c524 <_dtoa_r+0x5f4>)
 800c3ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d047      	beq.n	800c48c <_dtoa_r+0x55c>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	460b      	mov	r3, r1
 800c400:	2000      	movs	r0, #0
 800c402:	494e      	ldr	r1, [pc, #312]	; (800c53c <_dtoa_r+0x60c>)
 800c404:	f7f4 fa4a 	bl	800089c <__aeabi_ddiv>
 800c408:	462a      	mov	r2, r5
 800c40a:	4633      	mov	r3, r6
 800c40c:	f7f3 ff64 	bl	80002d8 <__aeabi_dsub>
 800c410:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c414:	465d      	mov	r5, fp
 800c416:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c41a:	f7f4 fbc5 	bl	8000ba8 <__aeabi_d2iz>
 800c41e:	4606      	mov	r6, r0
 800c420:	f7f4 f8a8 	bl	8000574 <__aeabi_i2d>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c42c:	f7f3 ff54 	bl	80002d8 <__aeabi_dsub>
 800c430:	3630      	adds	r6, #48	; 0x30
 800c432:	f805 6b01 	strb.w	r6, [r5], #1
 800c436:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c43a:	e9cd 0100 	strd	r0, r1, [sp]
 800c43e:	f7f4 fb75 	bl	8000b2c <__aeabi_dcmplt>
 800c442:	2800      	cmp	r0, #0
 800c444:	d163      	bne.n	800c50e <_dtoa_r+0x5de>
 800c446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c44a:	2000      	movs	r0, #0
 800c44c:	4937      	ldr	r1, [pc, #220]	; (800c52c <_dtoa_r+0x5fc>)
 800c44e:	f7f3 ff43 	bl	80002d8 <__aeabi_dsub>
 800c452:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c456:	f7f4 fb69 	bl	8000b2c <__aeabi_dcmplt>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f040 80b7 	bne.w	800c5ce <_dtoa_r+0x69e>
 800c460:	eba5 030b 	sub.w	r3, r5, fp
 800c464:	429f      	cmp	r7, r3
 800c466:	f77f af7c 	ble.w	800c362 <_dtoa_r+0x432>
 800c46a:	2200      	movs	r2, #0
 800c46c:	4b30      	ldr	r3, [pc, #192]	; (800c530 <_dtoa_r+0x600>)
 800c46e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c472:	f7f4 f8e9 	bl	8000648 <__aeabi_dmul>
 800c476:	2200      	movs	r2, #0
 800c478:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c47c:	4b2c      	ldr	r3, [pc, #176]	; (800c530 <_dtoa_r+0x600>)
 800c47e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c482:	f7f4 f8e1 	bl	8000648 <__aeabi_dmul>
 800c486:	e9cd 0100 	strd	r0, r1, [sp]
 800c48a:	e7c4      	b.n	800c416 <_dtoa_r+0x4e6>
 800c48c:	462a      	mov	r2, r5
 800c48e:	4633      	mov	r3, r6
 800c490:	f7f4 f8da 	bl	8000648 <__aeabi_dmul>
 800c494:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c498:	eb0b 0507 	add.w	r5, fp, r7
 800c49c:	465e      	mov	r6, fp
 800c49e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4a2:	f7f4 fb81 	bl	8000ba8 <__aeabi_d2iz>
 800c4a6:	4607      	mov	r7, r0
 800c4a8:	f7f4 f864 	bl	8000574 <__aeabi_i2d>
 800c4ac:	3730      	adds	r7, #48	; 0x30
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4b6:	f7f3 ff0f 	bl	80002d8 <__aeabi_dsub>
 800c4ba:	f806 7b01 	strb.w	r7, [r6], #1
 800c4be:	42ae      	cmp	r6, r5
 800c4c0:	e9cd 0100 	strd	r0, r1, [sp]
 800c4c4:	f04f 0200 	mov.w	r2, #0
 800c4c8:	d126      	bne.n	800c518 <_dtoa_r+0x5e8>
 800c4ca:	4b1c      	ldr	r3, [pc, #112]	; (800c53c <_dtoa_r+0x60c>)
 800c4cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4d0:	f7f3 ff04 	bl	80002dc <__adddf3>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4dc:	f7f4 fb44 	bl	8000b68 <__aeabi_dcmpgt>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d174      	bne.n	800c5ce <_dtoa_r+0x69e>
 800c4e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	4914      	ldr	r1, [pc, #80]	; (800c53c <_dtoa_r+0x60c>)
 800c4ec:	f7f3 fef4 	bl	80002d8 <__aeabi_dsub>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4f8:	f7f4 fb18 	bl	8000b2c <__aeabi_dcmplt>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	f43f af30 	beq.w	800c362 <_dtoa_r+0x432>
 800c502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c506:	2b30      	cmp	r3, #48	; 0x30
 800c508:	f105 32ff 	add.w	r2, r5, #4294967295
 800c50c:	d002      	beq.n	800c514 <_dtoa_r+0x5e4>
 800c50e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c512:	e04a      	b.n	800c5aa <_dtoa_r+0x67a>
 800c514:	4615      	mov	r5, r2
 800c516:	e7f4      	b.n	800c502 <_dtoa_r+0x5d2>
 800c518:	4b05      	ldr	r3, [pc, #20]	; (800c530 <_dtoa_r+0x600>)
 800c51a:	f7f4 f895 	bl	8000648 <__aeabi_dmul>
 800c51e:	e9cd 0100 	strd	r0, r1, [sp]
 800c522:	e7bc      	b.n	800c49e <_dtoa_r+0x56e>
 800c524:	0800ff30 	.word	0x0800ff30
 800c528:	0800ff08 	.word	0x0800ff08
 800c52c:	3ff00000 	.word	0x3ff00000
 800c530:	40240000 	.word	0x40240000
 800c534:	401c0000 	.word	0x401c0000
 800c538:	40140000 	.word	0x40140000
 800c53c:	3fe00000 	.word	0x3fe00000
 800c540:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c544:	465d      	mov	r5, fp
 800c546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c54a:	4630      	mov	r0, r6
 800c54c:	4639      	mov	r1, r7
 800c54e:	f7f4 f9a5 	bl	800089c <__aeabi_ddiv>
 800c552:	f7f4 fb29 	bl	8000ba8 <__aeabi_d2iz>
 800c556:	4680      	mov	r8, r0
 800c558:	f7f4 f80c 	bl	8000574 <__aeabi_i2d>
 800c55c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c560:	f7f4 f872 	bl	8000648 <__aeabi_dmul>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	4630      	mov	r0, r6
 800c56a:	4639      	mov	r1, r7
 800c56c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c570:	f7f3 feb2 	bl	80002d8 <__aeabi_dsub>
 800c574:	f805 6b01 	strb.w	r6, [r5], #1
 800c578:	eba5 060b 	sub.w	r6, r5, fp
 800c57c:	45b1      	cmp	r9, r6
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	d139      	bne.n	800c5f8 <_dtoa_r+0x6c8>
 800c584:	f7f3 feaa 	bl	80002dc <__adddf3>
 800c588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c58c:	4606      	mov	r6, r0
 800c58e:	460f      	mov	r7, r1
 800c590:	f7f4 faea 	bl	8000b68 <__aeabi_dcmpgt>
 800c594:	b9c8      	cbnz	r0, 800c5ca <_dtoa_r+0x69a>
 800c596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c59a:	4630      	mov	r0, r6
 800c59c:	4639      	mov	r1, r7
 800c59e:	f7f4 fabb 	bl	8000b18 <__aeabi_dcmpeq>
 800c5a2:	b110      	cbz	r0, 800c5aa <_dtoa_r+0x67a>
 800c5a4:	f018 0f01 	tst.w	r8, #1
 800c5a8:	d10f      	bne.n	800c5ca <_dtoa_r+0x69a>
 800c5aa:	9904      	ldr	r1, [sp, #16]
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f000 fdff 	bl	800d1b0 <_Bfree>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5b6:	702b      	strb	r3, [r5, #0]
 800c5b8:	f10a 0301 	add.w	r3, sl, #1
 800c5bc:	6013      	str	r3, [r2, #0]
 800c5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 8241 	beq.w	800ca48 <_dtoa_r+0xb18>
 800c5c6:	601d      	str	r5, [r3, #0]
 800c5c8:	e23e      	b.n	800ca48 <_dtoa_r+0xb18>
 800c5ca:	f8cd a020 	str.w	sl, [sp, #32]
 800c5ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c5d2:	2a39      	cmp	r2, #57	; 0x39
 800c5d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800c5d8:	d108      	bne.n	800c5ec <_dtoa_r+0x6bc>
 800c5da:	459b      	cmp	fp, r3
 800c5dc:	d10a      	bne.n	800c5f4 <_dtoa_r+0x6c4>
 800c5de:	9b08      	ldr	r3, [sp, #32]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	9308      	str	r3, [sp, #32]
 800c5e4:	2330      	movs	r3, #48	; 0x30
 800c5e6:	f88b 3000 	strb.w	r3, [fp]
 800c5ea:	465b      	mov	r3, fp
 800c5ec:	781a      	ldrb	r2, [r3, #0]
 800c5ee:	3201      	adds	r2, #1
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	e78c      	b.n	800c50e <_dtoa_r+0x5de>
 800c5f4:	461d      	mov	r5, r3
 800c5f6:	e7ea      	b.n	800c5ce <_dtoa_r+0x69e>
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4b9b      	ldr	r3, [pc, #620]	; (800c868 <_dtoa_r+0x938>)
 800c5fc:	f7f4 f824 	bl	8000648 <__aeabi_dmul>
 800c600:	2200      	movs	r2, #0
 800c602:	2300      	movs	r3, #0
 800c604:	4606      	mov	r6, r0
 800c606:	460f      	mov	r7, r1
 800c608:	f7f4 fa86 	bl	8000b18 <__aeabi_dcmpeq>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	d09a      	beq.n	800c546 <_dtoa_r+0x616>
 800c610:	e7cb      	b.n	800c5aa <_dtoa_r+0x67a>
 800c612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c614:	2a00      	cmp	r2, #0
 800c616:	f000 808b 	beq.w	800c730 <_dtoa_r+0x800>
 800c61a:	9a06      	ldr	r2, [sp, #24]
 800c61c:	2a01      	cmp	r2, #1
 800c61e:	dc6e      	bgt.n	800c6fe <_dtoa_r+0x7ce>
 800c620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c622:	2a00      	cmp	r2, #0
 800c624:	d067      	beq.n	800c6f6 <_dtoa_r+0x7c6>
 800c626:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c62a:	9f07      	ldr	r7, [sp, #28]
 800c62c:	9d05      	ldr	r5, [sp, #20]
 800c62e:	9a05      	ldr	r2, [sp, #20]
 800c630:	2101      	movs	r1, #1
 800c632:	441a      	add	r2, r3
 800c634:	4620      	mov	r0, r4
 800c636:	9205      	str	r2, [sp, #20]
 800c638:	4498      	add	r8, r3
 800c63a:	f000 fe97 	bl	800d36c <__i2b>
 800c63e:	4606      	mov	r6, r0
 800c640:	2d00      	cmp	r5, #0
 800c642:	dd0c      	ble.n	800c65e <_dtoa_r+0x72e>
 800c644:	f1b8 0f00 	cmp.w	r8, #0
 800c648:	dd09      	ble.n	800c65e <_dtoa_r+0x72e>
 800c64a:	4545      	cmp	r5, r8
 800c64c:	9a05      	ldr	r2, [sp, #20]
 800c64e:	462b      	mov	r3, r5
 800c650:	bfa8      	it	ge
 800c652:	4643      	movge	r3, r8
 800c654:	1ad2      	subs	r2, r2, r3
 800c656:	9205      	str	r2, [sp, #20]
 800c658:	1aed      	subs	r5, r5, r3
 800c65a:	eba8 0803 	sub.w	r8, r8, r3
 800c65e:	9b07      	ldr	r3, [sp, #28]
 800c660:	b1eb      	cbz	r3, 800c69e <_dtoa_r+0x76e>
 800c662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c664:	2b00      	cmp	r3, #0
 800c666:	d067      	beq.n	800c738 <_dtoa_r+0x808>
 800c668:	b18f      	cbz	r7, 800c68e <_dtoa_r+0x75e>
 800c66a:	4631      	mov	r1, r6
 800c66c:	463a      	mov	r2, r7
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 ff1c 	bl	800d4ac <__pow5mult>
 800c674:	9a04      	ldr	r2, [sp, #16]
 800c676:	4601      	mov	r1, r0
 800c678:	4606      	mov	r6, r0
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 fe7f 	bl	800d37e <__multiply>
 800c680:	9904      	ldr	r1, [sp, #16]
 800c682:	9008      	str	r0, [sp, #32]
 800c684:	4620      	mov	r0, r4
 800c686:	f000 fd93 	bl	800d1b0 <_Bfree>
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	9b07      	ldr	r3, [sp, #28]
 800c690:	1bda      	subs	r2, r3, r7
 800c692:	d004      	beq.n	800c69e <_dtoa_r+0x76e>
 800c694:	9904      	ldr	r1, [sp, #16]
 800c696:	4620      	mov	r0, r4
 800c698:	f000 ff08 	bl	800d4ac <__pow5mult>
 800c69c:	9004      	str	r0, [sp, #16]
 800c69e:	2101      	movs	r1, #1
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f000 fe63 	bl	800d36c <__i2b>
 800c6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 81d0 	beq.w	800ca50 <_dtoa_r+0xb20>
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f000 fef9 	bl	800d4ac <__pow5mult>
 800c6ba:	9b06      	ldr	r3, [sp, #24]
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	4607      	mov	r7, r0
 800c6c0:	dc40      	bgt.n	800c744 <_dtoa_r+0x814>
 800c6c2:	9b00      	ldr	r3, [sp, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d139      	bne.n	800c73c <_dtoa_r+0x80c>
 800c6c8:	9b01      	ldr	r3, [sp, #4]
 800c6ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d136      	bne.n	800c740 <_dtoa_r+0x810>
 800c6d2:	9b01      	ldr	r3, [sp, #4]
 800c6d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6d8:	0d1b      	lsrs	r3, r3, #20
 800c6da:	051b      	lsls	r3, r3, #20
 800c6dc:	b12b      	cbz	r3, 800c6ea <_dtoa_r+0x7ba>
 800c6de:	9b05      	ldr	r3, [sp, #20]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	9305      	str	r3, [sp, #20]
 800c6e4:	f108 0801 	add.w	r8, r8, #1
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	9307      	str	r3, [sp, #28]
 800c6ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d12a      	bne.n	800c748 <_dtoa_r+0x818>
 800c6f2:	2001      	movs	r0, #1
 800c6f4:	e030      	b.n	800c758 <_dtoa_r+0x828>
 800c6f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c6fc:	e795      	b.n	800c62a <_dtoa_r+0x6fa>
 800c6fe:	9b07      	ldr	r3, [sp, #28]
 800c700:	f109 37ff 	add.w	r7, r9, #4294967295
 800c704:	42bb      	cmp	r3, r7
 800c706:	bfbf      	itttt	lt
 800c708:	9b07      	ldrlt	r3, [sp, #28]
 800c70a:	9707      	strlt	r7, [sp, #28]
 800c70c:	1afa      	sublt	r2, r7, r3
 800c70e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c710:	bfbb      	ittet	lt
 800c712:	189b      	addlt	r3, r3, r2
 800c714:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c716:	1bdf      	subge	r7, r3, r7
 800c718:	2700      	movlt	r7, #0
 800c71a:	f1b9 0f00 	cmp.w	r9, #0
 800c71e:	bfb5      	itete	lt
 800c720:	9b05      	ldrlt	r3, [sp, #20]
 800c722:	9d05      	ldrge	r5, [sp, #20]
 800c724:	eba3 0509 	sublt.w	r5, r3, r9
 800c728:	464b      	movge	r3, r9
 800c72a:	bfb8      	it	lt
 800c72c:	2300      	movlt	r3, #0
 800c72e:	e77e      	b.n	800c62e <_dtoa_r+0x6fe>
 800c730:	9f07      	ldr	r7, [sp, #28]
 800c732:	9d05      	ldr	r5, [sp, #20]
 800c734:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c736:	e783      	b.n	800c640 <_dtoa_r+0x710>
 800c738:	9a07      	ldr	r2, [sp, #28]
 800c73a:	e7ab      	b.n	800c694 <_dtoa_r+0x764>
 800c73c:	2300      	movs	r3, #0
 800c73e:	e7d4      	b.n	800c6ea <_dtoa_r+0x7ba>
 800c740:	9b00      	ldr	r3, [sp, #0]
 800c742:	e7d2      	b.n	800c6ea <_dtoa_r+0x7ba>
 800c744:	2300      	movs	r3, #0
 800c746:	9307      	str	r3, [sp, #28]
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c74e:	6918      	ldr	r0, [r3, #16]
 800c750:	f000 fdbe 	bl	800d2d0 <__hi0bits>
 800c754:	f1c0 0020 	rsb	r0, r0, #32
 800c758:	4440      	add	r0, r8
 800c75a:	f010 001f 	ands.w	r0, r0, #31
 800c75e:	d047      	beq.n	800c7f0 <_dtoa_r+0x8c0>
 800c760:	f1c0 0320 	rsb	r3, r0, #32
 800c764:	2b04      	cmp	r3, #4
 800c766:	dd3b      	ble.n	800c7e0 <_dtoa_r+0x8b0>
 800c768:	9b05      	ldr	r3, [sp, #20]
 800c76a:	f1c0 001c 	rsb	r0, r0, #28
 800c76e:	4403      	add	r3, r0
 800c770:	9305      	str	r3, [sp, #20]
 800c772:	4405      	add	r5, r0
 800c774:	4480      	add	r8, r0
 800c776:	9b05      	ldr	r3, [sp, #20]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dd05      	ble.n	800c788 <_dtoa_r+0x858>
 800c77c:	461a      	mov	r2, r3
 800c77e:	9904      	ldr	r1, [sp, #16]
 800c780:	4620      	mov	r0, r4
 800c782:	f000 fee1 	bl	800d548 <__lshift>
 800c786:	9004      	str	r0, [sp, #16]
 800c788:	f1b8 0f00 	cmp.w	r8, #0
 800c78c:	dd05      	ble.n	800c79a <_dtoa_r+0x86a>
 800c78e:	4639      	mov	r1, r7
 800c790:	4642      	mov	r2, r8
 800c792:	4620      	mov	r0, r4
 800c794:	f000 fed8 	bl	800d548 <__lshift>
 800c798:	4607      	mov	r7, r0
 800c79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c79c:	b353      	cbz	r3, 800c7f4 <_dtoa_r+0x8c4>
 800c79e:	4639      	mov	r1, r7
 800c7a0:	9804      	ldr	r0, [sp, #16]
 800c7a2:	f000 ff25 	bl	800d5f0 <__mcmp>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	da24      	bge.n	800c7f4 <_dtoa_r+0x8c4>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	220a      	movs	r2, #10
 800c7ae:	9904      	ldr	r1, [sp, #16]
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f000 fd14 	bl	800d1de <__multadd>
 800c7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b8:	9004      	str	r0, [sp, #16]
 800c7ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f000 814d 	beq.w	800ca5e <_dtoa_r+0xb2e>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4631      	mov	r1, r6
 800c7c8:	220a      	movs	r2, #10
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fd07 	bl	800d1de <__multadd>
 800c7d0:	9b02      	ldr	r3, [sp, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	dc4f      	bgt.n	800c878 <_dtoa_r+0x948>
 800c7d8:	9b06      	ldr	r3, [sp, #24]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	dd4c      	ble.n	800c878 <_dtoa_r+0x948>
 800c7de:	e011      	b.n	800c804 <_dtoa_r+0x8d4>
 800c7e0:	d0c9      	beq.n	800c776 <_dtoa_r+0x846>
 800c7e2:	9a05      	ldr	r2, [sp, #20]
 800c7e4:	331c      	adds	r3, #28
 800c7e6:	441a      	add	r2, r3
 800c7e8:	9205      	str	r2, [sp, #20]
 800c7ea:	441d      	add	r5, r3
 800c7ec:	4498      	add	r8, r3
 800c7ee:	e7c2      	b.n	800c776 <_dtoa_r+0x846>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	e7f6      	b.n	800c7e2 <_dtoa_r+0x8b2>
 800c7f4:	f1b9 0f00 	cmp.w	r9, #0
 800c7f8:	dc38      	bgt.n	800c86c <_dtoa_r+0x93c>
 800c7fa:	9b06      	ldr	r3, [sp, #24]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	dd35      	ble.n	800c86c <_dtoa_r+0x93c>
 800c800:	f8cd 9008 	str.w	r9, [sp, #8]
 800c804:	9b02      	ldr	r3, [sp, #8]
 800c806:	b963      	cbnz	r3, 800c822 <_dtoa_r+0x8f2>
 800c808:	4639      	mov	r1, r7
 800c80a:	2205      	movs	r2, #5
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 fce6 	bl	800d1de <__multadd>
 800c812:	4601      	mov	r1, r0
 800c814:	4607      	mov	r7, r0
 800c816:	9804      	ldr	r0, [sp, #16]
 800c818:	f000 feea 	bl	800d5f0 <__mcmp>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	f73f adcc 	bgt.w	800c3ba <_dtoa_r+0x48a>
 800c822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c824:	465d      	mov	r5, fp
 800c826:	ea6f 0a03 	mvn.w	sl, r3
 800c82a:	f04f 0900 	mov.w	r9, #0
 800c82e:	4639      	mov	r1, r7
 800c830:	4620      	mov	r0, r4
 800c832:	f000 fcbd 	bl	800d1b0 <_Bfree>
 800c836:	2e00      	cmp	r6, #0
 800c838:	f43f aeb7 	beq.w	800c5aa <_dtoa_r+0x67a>
 800c83c:	f1b9 0f00 	cmp.w	r9, #0
 800c840:	d005      	beq.n	800c84e <_dtoa_r+0x91e>
 800c842:	45b1      	cmp	r9, r6
 800c844:	d003      	beq.n	800c84e <_dtoa_r+0x91e>
 800c846:	4649      	mov	r1, r9
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 fcb1 	bl	800d1b0 <_Bfree>
 800c84e:	4631      	mov	r1, r6
 800c850:	4620      	mov	r0, r4
 800c852:	f000 fcad 	bl	800d1b0 <_Bfree>
 800c856:	e6a8      	b.n	800c5aa <_dtoa_r+0x67a>
 800c858:	2700      	movs	r7, #0
 800c85a:	463e      	mov	r6, r7
 800c85c:	e7e1      	b.n	800c822 <_dtoa_r+0x8f2>
 800c85e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c862:	463e      	mov	r6, r7
 800c864:	e5a9      	b.n	800c3ba <_dtoa_r+0x48a>
 800c866:	bf00      	nop
 800c868:	40240000 	.word	0x40240000
 800c86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c86e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	f000 80fa 	beq.w	800ca6c <_dtoa_r+0xb3c>
 800c878:	2d00      	cmp	r5, #0
 800c87a:	dd05      	ble.n	800c888 <_dtoa_r+0x958>
 800c87c:	4631      	mov	r1, r6
 800c87e:	462a      	mov	r2, r5
 800c880:	4620      	mov	r0, r4
 800c882:	f000 fe61 	bl	800d548 <__lshift>
 800c886:	4606      	mov	r6, r0
 800c888:	9b07      	ldr	r3, [sp, #28]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d04c      	beq.n	800c928 <_dtoa_r+0x9f8>
 800c88e:	6871      	ldr	r1, [r6, #4]
 800c890:	4620      	mov	r0, r4
 800c892:	f000 fc59 	bl	800d148 <_Balloc>
 800c896:	6932      	ldr	r2, [r6, #16]
 800c898:	3202      	adds	r2, #2
 800c89a:	4605      	mov	r5, r0
 800c89c:	0092      	lsls	r2, r2, #2
 800c89e:	f106 010c 	add.w	r1, r6, #12
 800c8a2:	300c      	adds	r0, #12
 800c8a4:	f7fd fd58 	bl	800a358 <memcpy>
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f000 fe4b 	bl	800d548 <__lshift>
 800c8b2:	9b00      	ldr	r3, [sp, #0]
 800c8b4:	f8cd b014 	str.w	fp, [sp, #20]
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	46b1      	mov	r9, r6
 800c8be:	9307      	str	r3, [sp, #28]
 800c8c0:	4606      	mov	r6, r0
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	9804      	ldr	r0, [sp, #16]
 800c8c6:	f7ff faa7 	bl	800be18 <quorem>
 800c8ca:	4649      	mov	r1, r9
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c8d2:	9804      	ldr	r0, [sp, #16]
 800c8d4:	f000 fe8c 	bl	800d5f0 <__mcmp>
 800c8d8:	4632      	mov	r2, r6
 800c8da:	9000      	str	r0, [sp, #0]
 800c8dc:	4639      	mov	r1, r7
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f000 fea0 	bl	800d624 <__mdiff>
 800c8e4:	68c3      	ldr	r3, [r0, #12]
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	bb03      	cbnz	r3, 800c92c <_dtoa_r+0x9fc>
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	9008      	str	r0, [sp, #32]
 800c8ee:	9804      	ldr	r0, [sp, #16]
 800c8f0:	f000 fe7e 	bl	800d5f0 <__mcmp>
 800c8f4:	9a08      	ldr	r2, [sp, #32]
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	4611      	mov	r1, r2
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	9308      	str	r3, [sp, #32]
 800c8fe:	f000 fc57 	bl	800d1b0 <_Bfree>
 800c902:	9b08      	ldr	r3, [sp, #32]
 800c904:	b9a3      	cbnz	r3, 800c930 <_dtoa_r+0xa00>
 800c906:	9a06      	ldr	r2, [sp, #24]
 800c908:	b992      	cbnz	r2, 800c930 <_dtoa_r+0xa00>
 800c90a:	9a07      	ldr	r2, [sp, #28]
 800c90c:	b982      	cbnz	r2, 800c930 <_dtoa_r+0xa00>
 800c90e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c912:	d029      	beq.n	800c968 <_dtoa_r+0xa38>
 800c914:	9b00      	ldr	r3, [sp, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	dd01      	ble.n	800c91e <_dtoa_r+0x9ee>
 800c91a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c91e:	9b05      	ldr	r3, [sp, #20]
 800c920:	1c5d      	adds	r5, r3, #1
 800c922:	f883 8000 	strb.w	r8, [r3]
 800c926:	e782      	b.n	800c82e <_dtoa_r+0x8fe>
 800c928:	4630      	mov	r0, r6
 800c92a:	e7c2      	b.n	800c8b2 <_dtoa_r+0x982>
 800c92c:	2301      	movs	r3, #1
 800c92e:	e7e3      	b.n	800c8f8 <_dtoa_r+0x9c8>
 800c930:	9a00      	ldr	r2, [sp, #0]
 800c932:	2a00      	cmp	r2, #0
 800c934:	db04      	blt.n	800c940 <_dtoa_r+0xa10>
 800c936:	d125      	bne.n	800c984 <_dtoa_r+0xa54>
 800c938:	9a06      	ldr	r2, [sp, #24]
 800c93a:	bb1a      	cbnz	r2, 800c984 <_dtoa_r+0xa54>
 800c93c:	9a07      	ldr	r2, [sp, #28]
 800c93e:	bb0a      	cbnz	r2, 800c984 <_dtoa_r+0xa54>
 800c940:	2b00      	cmp	r3, #0
 800c942:	ddec      	ble.n	800c91e <_dtoa_r+0x9ee>
 800c944:	2201      	movs	r2, #1
 800c946:	9904      	ldr	r1, [sp, #16]
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fdfd 	bl	800d548 <__lshift>
 800c94e:	4639      	mov	r1, r7
 800c950:	9004      	str	r0, [sp, #16]
 800c952:	f000 fe4d 	bl	800d5f0 <__mcmp>
 800c956:	2800      	cmp	r0, #0
 800c958:	dc03      	bgt.n	800c962 <_dtoa_r+0xa32>
 800c95a:	d1e0      	bne.n	800c91e <_dtoa_r+0x9ee>
 800c95c:	f018 0f01 	tst.w	r8, #1
 800c960:	d0dd      	beq.n	800c91e <_dtoa_r+0x9ee>
 800c962:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c966:	d1d8      	bne.n	800c91a <_dtoa_r+0x9ea>
 800c968:	9b05      	ldr	r3, [sp, #20]
 800c96a:	9a05      	ldr	r2, [sp, #20]
 800c96c:	1c5d      	adds	r5, r3, #1
 800c96e:	2339      	movs	r3, #57	; 0x39
 800c970:	7013      	strb	r3, [r2, #0]
 800c972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c976:	2b39      	cmp	r3, #57	; 0x39
 800c978:	f105 32ff 	add.w	r2, r5, #4294967295
 800c97c:	d04f      	beq.n	800ca1e <_dtoa_r+0xaee>
 800c97e:	3301      	adds	r3, #1
 800c980:	7013      	strb	r3, [r2, #0]
 800c982:	e754      	b.n	800c82e <_dtoa_r+0x8fe>
 800c984:	9a05      	ldr	r2, [sp, #20]
 800c986:	2b00      	cmp	r3, #0
 800c988:	f102 0501 	add.w	r5, r2, #1
 800c98c:	dd06      	ble.n	800c99c <_dtoa_r+0xa6c>
 800c98e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c992:	d0e9      	beq.n	800c968 <_dtoa_r+0xa38>
 800c994:	f108 0801 	add.w	r8, r8, #1
 800c998:	9b05      	ldr	r3, [sp, #20]
 800c99a:	e7c2      	b.n	800c922 <_dtoa_r+0x9f2>
 800c99c:	9a02      	ldr	r2, [sp, #8]
 800c99e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c9a2:	eba5 030b 	sub.w	r3, r5, fp
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d021      	beq.n	800c9ee <_dtoa_r+0xabe>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	220a      	movs	r2, #10
 800c9ae:	9904      	ldr	r1, [sp, #16]
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 fc14 	bl	800d1de <__multadd>
 800c9b6:	45b1      	cmp	r9, r6
 800c9b8:	9004      	str	r0, [sp, #16]
 800c9ba:	f04f 0300 	mov.w	r3, #0
 800c9be:	f04f 020a 	mov.w	r2, #10
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	d105      	bne.n	800c9d4 <_dtoa_r+0xaa4>
 800c9c8:	f000 fc09 	bl	800d1de <__multadd>
 800c9cc:	4681      	mov	r9, r0
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	9505      	str	r5, [sp, #20]
 800c9d2:	e776      	b.n	800c8c2 <_dtoa_r+0x992>
 800c9d4:	f000 fc03 	bl	800d1de <__multadd>
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4681      	mov	r9, r0
 800c9dc:	2300      	movs	r3, #0
 800c9de:	220a      	movs	r2, #10
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fbfc 	bl	800d1de <__multadd>
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	e7f2      	b.n	800c9d0 <_dtoa_r+0xaa0>
 800c9ea:	f04f 0900 	mov.w	r9, #0
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	9904      	ldr	r1, [sp, #16]
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f000 fda8 	bl	800d548 <__lshift>
 800c9f8:	4639      	mov	r1, r7
 800c9fa:	9004      	str	r0, [sp, #16]
 800c9fc:	f000 fdf8 	bl	800d5f0 <__mcmp>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	dcb6      	bgt.n	800c972 <_dtoa_r+0xa42>
 800ca04:	d102      	bne.n	800ca0c <_dtoa_r+0xadc>
 800ca06:	f018 0f01 	tst.w	r8, #1
 800ca0a:	d1b2      	bne.n	800c972 <_dtoa_r+0xa42>
 800ca0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca10:	2b30      	cmp	r3, #48	; 0x30
 800ca12:	f105 32ff 	add.w	r2, r5, #4294967295
 800ca16:	f47f af0a 	bne.w	800c82e <_dtoa_r+0x8fe>
 800ca1a:	4615      	mov	r5, r2
 800ca1c:	e7f6      	b.n	800ca0c <_dtoa_r+0xadc>
 800ca1e:	4593      	cmp	fp, r2
 800ca20:	d105      	bne.n	800ca2e <_dtoa_r+0xafe>
 800ca22:	2331      	movs	r3, #49	; 0x31
 800ca24:	f10a 0a01 	add.w	sl, sl, #1
 800ca28:	f88b 3000 	strb.w	r3, [fp]
 800ca2c:	e6ff      	b.n	800c82e <_dtoa_r+0x8fe>
 800ca2e:	4615      	mov	r5, r2
 800ca30:	e79f      	b.n	800c972 <_dtoa_r+0xa42>
 800ca32:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ca98 <_dtoa_r+0xb68>
 800ca36:	e007      	b.n	800ca48 <_dtoa_r+0xb18>
 800ca38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ca9c <_dtoa_r+0xb6c>
 800ca3e:	b11b      	cbz	r3, 800ca48 <_dtoa_r+0xb18>
 800ca40:	f10b 0308 	add.w	r3, fp, #8
 800ca44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca46:	6013      	str	r3, [r2, #0]
 800ca48:	4658      	mov	r0, fp
 800ca4a:	b017      	add	sp, #92	; 0x5c
 800ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca50:	9b06      	ldr	r3, [sp, #24]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	f77f ae35 	ble.w	800c6c2 <_dtoa_r+0x792>
 800ca58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca5a:	9307      	str	r3, [sp, #28]
 800ca5c:	e649      	b.n	800c6f2 <_dtoa_r+0x7c2>
 800ca5e:	9b02      	ldr	r3, [sp, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	dc03      	bgt.n	800ca6c <_dtoa_r+0xb3c>
 800ca64:	9b06      	ldr	r3, [sp, #24]
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	f73f aecc 	bgt.w	800c804 <_dtoa_r+0x8d4>
 800ca6c:	465d      	mov	r5, fp
 800ca6e:	4639      	mov	r1, r7
 800ca70:	9804      	ldr	r0, [sp, #16]
 800ca72:	f7ff f9d1 	bl	800be18 <quorem>
 800ca76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ca7a:	f805 8b01 	strb.w	r8, [r5], #1
 800ca7e:	9a02      	ldr	r2, [sp, #8]
 800ca80:	eba5 030b 	sub.w	r3, r5, fp
 800ca84:	429a      	cmp	r2, r3
 800ca86:	ddb0      	ble.n	800c9ea <_dtoa_r+0xaba>
 800ca88:	2300      	movs	r3, #0
 800ca8a:	220a      	movs	r2, #10
 800ca8c:	9904      	ldr	r1, [sp, #16]
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 fba5 	bl	800d1de <__multadd>
 800ca94:	9004      	str	r0, [sp, #16]
 800ca96:	e7ea      	b.n	800ca6e <_dtoa_r+0xb3e>
 800ca98:	0800fe72 	.word	0x0800fe72
 800ca9c:	0800fef0 	.word	0x0800fef0

0800caa0 <rshift>:
 800caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa2:	6906      	ldr	r6, [r0, #16]
 800caa4:	114b      	asrs	r3, r1, #5
 800caa6:	429e      	cmp	r6, r3
 800caa8:	f100 0414 	add.w	r4, r0, #20
 800caac:	dd30      	ble.n	800cb10 <rshift+0x70>
 800caae:	f011 011f 	ands.w	r1, r1, #31
 800cab2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cab6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800caba:	d108      	bne.n	800cace <rshift+0x2e>
 800cabc:	4621      	mov	r1, r4
 800cabe:	42b2      	cmp	r2, r6
 800cac0:	460b      	mov	r3, r1
 800cac2:	d211      	bcs.n	800cae8 <rshift+0x48>
 800cac4:	f852 3b04 	ldr.w	r3, [r2], #4
 800cac8:	f841 3b04 	str.w	r3, [r1], #4
 800cacc:	e7f7      	b.n	800cabe <rshift+0x1e>
 800cace:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800cad2:	f1c1 0c20 	rsb	ip, r1, #32
 800cad6:	40cd      	lsrs	r5, r1
 800cad8:	3204      	adds	r2, #4
 800cada:	4623      	mov	r3, r4
 800cadc:	42b2      	cmp	r2, r6
 800cade:	4617      	mov	r7, r2
 800cae0:	d30c      	bcc.n	800cafc <rshift+0x5c>
 800cae2:	601d      	str	r5, [r3, #0]
 800cae4:	b105      	cbz	r5, 800cae8 <rshift+0x48>
 800cae6:	3304      	adds	r3, #4
 800cae8:	1b1a      	subs	r2, r3, r4
 800caea:	42a3      	cmp	r3, r4
 800caec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800caf0:	bf08      	it	eq
 800caf2:	2300      	moveq	r3, #0
 800caf4:	6102      	str	r2, [r0, #16]
 800caf6:	bf08      	it	eq
 800caf8:	6143      	streq	r3, [r0, #20]
 800cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cafc:	683f      	ldr	r7, [r7, #0]
 800cafe:	fa07 f70c 	lsl.w	r7, r7, ip
 800cb02:	433d      	orrs	r5, r7
 800cb04:	f843 5b04 	str.w	r5, [r3], #4
 800cb08:	f852 5b04 	ldr.w	r5, [r2], #4
 800cb0c:	40cd      	lsrs	r5, r1
 800cb0e:	e7e5      	b.n	800cadc <rshift+0x3c>
 800cb10:	4623      	mov	r3, r4
 800cb12:	e7e9      	b.n	800cae8 <rshift+0x48>

0800cb14 <__hexdig_fun>:
 800cb14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	d802      	bhi.n	800cb22 <__hexdig_fun+0xe>
 800cb1c:	3820      	subs	r0, #32
 800cb1e:	b2c0      	uxtb	r0, r0
 800cb20:	4770      	bx	lr
 800cb22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cb26:	2b05      	cmp	r3, #5
 800cb28:	d801      	bhi.n	800cb2e <__hexdig_fun+0x1a>
 800cb2a:	3847      	subs	r0, #71	; 0x47
 800cb2c:	e7f7      	b.n	800cb1e <__hexdig_fun+0xa>
 800cb2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cb32:	2b05      	cmp	r3, #5
 800cb34:	d801      	bhi.n	800cb3a <__hexdig_fun+0x26>
 800cb36:	3827      	subs	r0, #39	; 0x27
 800cb38:	e7f1      	b.n	800cb1e <__hexdig_fun+0xa>
 800cb3a:	2000      	movs	r0, #0
 800cb3c:	4770      	bx	lr

0800cb3e <__gethex>:
 800cb3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb42:	b08b      	sub	sp, #44	; 0x2c
 800cb44:	468a      	mov	sl, r1
 800cb46:	9002      	str	r0, [sp, #8]
 800cb48:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cb4a:	9306      	str	r3, [sp, #24]
 800cb4c:	4690      	mov	r8, r2
 800cb4e:	f000 fad0 	bl	800d0f2 <__localeconv_l>
 800cb52:	6803      	ldr	r3, [r0, #0]
 800cb54:	9303      	str	r3, [sp, #12]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7f3 fb62 	bl	8000220 <strlen>
 800cb5c:	9b03      	ldr	r3, [sp, #12]
 800cb5e:	9001      	str	r0, [sp, #4]
 800cb60:	4403      	add	r3, r0
 800cb62:	f04f 0b00 	mov.w	fp, #0
 800cb66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cb6a:	9307      	str	r3, [sp, #28]
 800cb6c:	f8da 3000 	ldr.w	r3, [sl]
 800cb70:	3302      	adds	r3, #2
 800cb72:	461f      	mov	r7, r3
 800cb74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb78:	2830      	cmp	r0, #48	; 0x30
 800cb7a:	d06c      	beq.n	800cc56 <__gethex+0x118>
 800cb7c:	f7ff ffca 	bl	800cb14 <__hexdig_fun>
 800cb80:	4604      	mov	r4, r0
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d16a      	bne.n	800cc5c <__gethex+0x11e>
 800cb86:	9a01      	ldr	r2, [sp, #4]
 800cb88:	9903      	ldr	r1, [sp, #12]
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f001 f8f4 	bl	800dd78 <strncmp>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d166      	bne.n	800cc62 <__gethex+0x124>
 800cb94:	9b01      	ldr	r3, [sp, #4]
 800cb96:	5cf8      	ldrb	r0, [r7, r3]
 800cb98:	18fe      	adds	r6, r7, r3
 800cb9a:	f7ff ffbb 	bl	800cb14 <__hexdig_fun>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d062      	beq.n	800cc68 <__gethex+0x12a>
 800cba2:	4633      	mov	r3, r6
 800cba4:	7818      	ldrb	r0, [r3, #0]
 800cba6:	2830      	cmp	r0, #48	; 0x30
 800cba8:	461f      	mov	r7, r3
 800cbaa:	f103 0301 	add.w	r3, r3, #1
 800cbae:	d0f9      	beq.n	800cba4 <__gethex+0x66>
 800cbb0:	f7ff ffb0 	bl	800cb14 <__hexdig_fun>
 800cbb4:	fab0 f580 	clz	r5, r0
 800cbb8:	096d      	lsrs	r5, r5, #5
 800cbba:	4634      	mov	r4, r6
 800cbbc:	f04f 0b01 	mov.w	fp, #1
 800cbc0:	463a      	mov	r2, r7
 800cbc2:	4616      	mov	r6, r2
 800cbc4:	3201      	adds	r2, #1
 800cbc6:	7830      	ldrb	r0, [r6, #0]
 800cbc8:	f7ff ffa4 	bl	800cb14 <__hexdig_fun>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d1f8      	bne.n	800cbc2 <__gethex+0x84>
 800cbd0:	9a01      	ldr	r2, [sp, #4]
 800cbd2:	9903      	ldr	r1, [sp, #12]
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f001 f8cf 	bl	800dd78 <strncmp>
 800cbda:	b950      	cbnz	r0, 800cbf2 <__gethex+0xb4>
 800cbdc:	b954      	cbnz	r4, 800cbf4 <__gethex+0xb6>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	18f4      	adds	r4, r6, r3
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	4616      	mov	r6, r2
 800cbe6:	3201      	adds	r2, #1
 800cbe8:	7830      	ldrb	r0, [r6, #0]
 800cbea:	f7ff ff93 	bl	800cb14 <__hexdig_fun>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d1f8      	bne.n	800cbe4 <__gethex+0xa6>
 800cbf2:	b10c      	cbz	r4, 800cbf8 <__gethex+0xba>
 800cbf4:	1ba4      	subs	r4, r4, r6
 800cbf6:	00a4      	lsls	r4, r4, #2
 800cbf8:	7833      	ldrb	r3, [r6, #0]
 800cbfa:	2b50      	cmp	r3, #80	; 0x50
 800cbfc:	d001      	beq.n	800cc02 <__gethex+0xc4>
 800cbfe:	2b70      	cmp	r3, #112	; 0x70
 800cc00:	d140      	bne.n	800cc84 <__gethex+0x146>
 800cc02:	7873      	ldrb	r3, [r6, #1]
 800cc04:	2b2b      	cmp	r3, #43	; 0x2b
 800cc06:	d031      	beq.n	800cc6c <__gethex+0x12e>
 800cc08:	2b2d      	cmp	r3, #45	; 0x2d
 800cc0a:	d033      	beq.n	800cc74 <__gethex+0x136>
 800cc0c:	1c71      	adds	r1, r6, #1
 800cc0e:	f04f 0900 	mov.w	r9, #0
 800cc12:	7808      	ldrb	r0, [r1, #0]
 800cc14:	f7ff ff7e 	bl	800cb14 <__hexdig_fun>
 800cc18:	1e43      	subs	r3, r0, #1
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	2b18      	cmp	r3, #24
 800cc1e:	d831      	bhi.n	800cc84 <__gethex+0x146>
 800cc20:	f1a0 0210 	sub.w	r2, r0, #16
 800cc24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc28:	f7ff ff74 	bl	800cb14 <__hexdig_fun>
 800cc2c:	1e43      	subs	r3, r0, #1
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b18      	cmp	r3, #24
 800cc32:	d922      	bls.n	800cc7a <__gethex+0x13c>
 800cc34:	f1b9 0f00 	cmp.w	r9, #0
 800cc38:	d000      	beq.n	800cc3c <__gethex+0xfe>
 800cc3a:	4252      	negs	r2, r2
 800cc3c:	4414      	add	r4, r2
 800cc3e:	f8ca 1000 	str.w	r1, [sl]
 800cc42:	b30d      	cbz	r5, 800cc88 <__gethex+0x14a>
 800cc44:	f1bb 0f00 	cmp.w	fp, #0
 800cc48:	bf0c      	ite	eq
 800cc4a:	2706      	moveq	r7, #6
 800cc4c:	2700      	movne	r7, #0
 800cc4e:	4638      	mov	r0, r7
 800cc50:	b00b      	add	sp, #44	; 0x2c
 800cc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc56:	f10b 0b01 	add.w	fp, fp, #1
 800cc5a:	e78a      	b.n	800cb72 <__gethex+0x34>
 800cc5c:	2500      	movs	r5, #0
 800cc5e:	462c      	mov	r4, r5
 800cc60:	e7ae      	b.n	800cbc0 <__gethex+0x82>
 800cc62:	463e      	mov	r6, r7
 800cc64:	2501      	movs	r5, #1
 800cc66:	e7c7      	b.n	800cbf8 <__gethex+0xba>
 800cc68:	4604      	mov	r4, r0
 800cc6a:	e7fb      	b.n	800cc64 <__gethex+0x126>
 800cc6c:	f04f 0900 	mov.w	r9, #0
 800cc70:	1cb1      	adds	r1, r6, #2
 800cc72:	e7ce      	b.n	800cc12 <__gethex+0xd4>
 800cc74:	f04f 0901 	mov.w	r9, #1
 800cc78:	e7fa      	b.n	800cc70 <__gethex+0x132>
 800cc7a:	230a      	movs	r3, #10
 800cc7c:	fb03 0202 	mla	r2, r3, r2, r0
 800cc80:	3a10      	subs	r2, #16
 800cc82:	e7cf      	b.n	800cc24 <__gethex+0xe6>
 800cc84:	4631      	mov	r1, r6
 800cc86:	e7da      	b.n	800cc3e <__gethex+0x100>
 800cc88:	1bf3      	subs	r3, r6, r7
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	4629      	mov	r1, r5
 800cc8e:	2b07      	cmp	r3, #7
 800cc90:	dc49      	bgt.n	800cd26 <__gethex+0x1e8>
 800cc92:	9802      	ldr	r0, [sp, #8]
 800cc94:	f000 fa58 	bl	800d148 <_Balloc>
 800cc98:	9b01      	ldr	r3, [sp, #4]
 800cc9a:	f100 0914 	add.w	r9, r0, #20
 800cc9e:	f04f 0b00 	mov.w	fp, #0
 800cca2:	f1c3 0301 	rsb	r3, r3, #1
 800cca6:	4605      	mov	r5, r0
 800cca8:	f8cd 9010 	str.w	r9, [sp, #16]
 800ccac:	46da      	mov	sl, fp
 800ccae:	9308      	str	r3, [sp, #32]
 800ccb0:	42b7      	cmp	r7, r6
 800ccb2:	d33b      	bcc.n	800cd2c <__gethex+0x1ee>
 800ccb4:	9804      	ldr	r0, [sp, #16]
 800ccb6:	f840 ab04 	str.w	sl, [r0], #4
 800ccba:	eba0 0009 	sub.w	r0, r0, r9
 800ccbe:	1080      	asrs	r0, r0, #2
 800ccc0:	6128      	str	r0, [r5, #16]
 800ccc2:	0147      	lsls	r7, r0, #5
 800ccc4:	4650      	mov	r0, sl
 800ccc6:	f000 fb03 	bl	800d2d0 <__hi0bits>
 800ccca:	f8d8 6000 	ldr.w	r6, [r8]
 800ccce:	1a3f      	subs	r7, r7, r0
 800ccd0:	42b7      	cmp	r7, r6
 800ccd2:	dd64      	ble.n	800cd9e <__gethex+0x260>
 800ccd4:	1bbf      	subs	r7, r7, r6
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	4628      	mov	r0, r5
 800ccda:	f000 fe13 	bl	800d904 <__any_on>
 800ccde:	4682      	mov	sl, r0
 800cce0:	b178      	cbz	r0, 800cd02 <__gethex+0x1c4>
 800cce2:	1e7b      	subs	r3, r7, #1
 800cce4:	1159      	asrs	r1, r3, #5
 800cce6:	f003 021f 	and.w	r2, r3, #31
 800ccea:	f04f 0a01 	mov.w	sl, #1
 800ccee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ccf2:	fa0a f202 	lsl.w	r2, sl, r2
 800ccf6:	420a      	tst	r2, r1
 800ccf8:	d003      	beq.n	800cd02 <__gethex+0x1c4>
 800ccfa:	4553      	cmp	r3, sl
 800ccfc:	dc46      	bgt.n	800cd8c <__gethex+0x24e>
 800ccfe:	f04f 0a02 	mov.w	sl, #2
 800cd02:	4639      	mov	r1, r7
 800cd04:	4628      	mov	r0, r5
 800cd06:	f7ff fecb 	bl	800caa0 <rshift>
 800cd0a:	443c      	add	r4, r7
 800cd0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd10:	42a3      	cmp	r3, r4
 800cd12:	da52      	bge.n	800cdba <__gethex+0x27c>
 800cd14:	4629      	mov	r1, r5
 800cd16:	9802      	ldr	r0, [sp, #8]
 800cd18:	f000 fa4a 	bl	800d1b0 <_Bfree>
 800cd1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd1e:	2300      	movs	r3, #0
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	27a3      	movs	r7, #163	; 0xa3
 800cd24:	e793      	b.n	800cc4e <__gethex+0x110>
 800cd26:	3101      	adds	r1, #1
 800cd28:	105b      	asrs	r3, r3, #1
 800cd2a:	e7b0      	b.n	800cc8e <__gethex+0x150>
 800cd2c:	1e73      	subs	r3, r6, #1
 800cd2e:	9305      	str	r3, [sp, #20]
 800cd30:	9a07      	ldr	r2, [sp, #28]
 800cd32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d018      	beq.n	800cd6c <__gethex+0x22e>
 800cd3a:	f1bb 0f20 	cmp.w	fp, #32
 800cd3e:	d107      	bne.n	800cd50 <__gethex+0x212>
 800cd40:	9b04      	ldr	r3, [sp, #16]
 800cd42:	f8c3 a000 	str.w	sl, [r3]
 800cd46:	3304      	adds	r3, #4
 800cd48:	f04f 0a00 	mov.w	sl, #0
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	46d3      	mov	fp, sl
 800cd50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cd54:	f7ff fede 	bl	800cb14 <__hexdig_fun>
 800cd58:	f000 000f 	and.w	r0, r0, #15
 800cd5c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cd60:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd64:	f10b 0b04 	add.w	fp, fp, #4
 800cd68:	9b05      	ldr	r3, [sp, #20]
 800cd6a:	e00d      	b.n	800cd88 <__gethex+0x24a>
 800cd6c:	9b05      	ldr	r3, [sp, #20]
 800cd6e:	9a08      	ldr	r2, [sp, #32]
 800cd70:	4413      	add	r3, r2
 800cd72:	42bb      	cmp	r3, r7
 800cd74:	d3e1      	bcc.n	800cd3a <__gethex+0x1fc>
 800cd76:	4618      	mov	r0, r3
 800cd78:	9a01      	ldr	r2, [sp, #4]
 800cd7a:	9903      	ldr	r1, [sp, #12]
 800cd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd7e:	f000 fffb 	bl	800dd78 <strncmp>
 800cd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d1d8      	bne.n	800cd3a <__gethex+0x1fc>
 800cd88:	461e      	mov	r6, r3
 800cd8a:	e791      	b.n	800ccb0 <__gethex+0x172>
 800cd8c:	1eb9      	subs	r1, r7, #2
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 fdb8 	bl	800d904 <__any_on>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d0b2      	beq.n	800ccfe <__gethex+0x1c0>
 800cd98:	f04f 0a03 	mov.w	sl, #3
 800cd9c:	e7b1      	b.n	800cd02 <__gethex+0x1c4>
 800cd9e:	da09      	bge.n	800cdb4 <__gethex+0x276>
 800cda0:	1bf7      	subs	r7, r6, r7
 800cda2:	4629      	mov	r1, r5
 800cda4:	463a      	mov	r2, r7
 800cda6:	9802      	ldr	r0, [sp, #8]
 800cda8:	f000 fbce 	bl	800d548 <__lshift>
 800cdac:	1be4      	subs	r4, r4, r7
 800cdae:	4605      	mov	r5, r0
 800cdb0:	f100 0914 	add.w	r9, r0, #20
 800cdb4:	f04f 0a00 	mov.w	sl, #0
 800cdb8:	e7a8      	b.n	800cd0c <__gethex+0x1ce>
 800cdba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cdbe:	42a0      	cmp	r0, r4
 800cdc0:	dd6a      	ble.n	800ce98 <__gethex+0x35a>
 800cdc2:	1b04      	subs	r4, r0, r4
 800cdc4:	42a6      	cmp	r6, r4
 800cdc6:	dc2e      	bgt.n	800ce26 <__gethex+0x2e8>
 800cdc8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d022      	beq.n	800ce16 <__gethex+0x2d8>
 800cdd0:	2b03      	cmp	r3, #3
 800cdd2:	d024      	beq.n	800ce1e <__gethex+0x2e0>
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d115      	bne.n	800ce04 <__gethex+0x2c6>
 800cdd8:	42a6      	cmp	r6, r4
 800cdda:	d113      	bne.n	800ce04 <__gethex+0x2c6>
 800cddc:	2e01      	cmp	r6, #1
 800cdde:	dc0b      	bgt.n	800cdf8 <__gethex+0x2ba>
 800cde0:	9a06      	ldr	r2, [sp, #24]
 800cde2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cde6:	6013      	str	r3, [r2, #0]
 800cde8:	2301      	movs	r3, #1
 800cdea:	612b      	str	r3, [r5, #16]
 800cdec:	f8c9 3000 	str.w	r3, [r9]
 800cdf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdf2:	2762      	movs	r7, #98	; 0x62
 800cdf4:	601d      	str	r5, [r3, #0]
 800cdf6:	e72a      	b.n	800cc4e <__gethex+0x110>
 800cdf8:	1e71      	subs	r1, r6, #1
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f000 fd82 	bl	800d904 <__any_on>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d1ed      	bne.n	800cde0 <__gethex+0x2a2>
 800ce04:	4629      	mov	r1, r5
 800ce06:	9802      	ldr	r0, [sp, #8]
 800ce08:	f000 f9d2 	bl	800d1b0 <_Bfree>
 800ce0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce0e:	2300      	movs	r3, #0
 800ce10:	6013      	str	r3, [r2, #0]
 800ce12:	2750      	movs	r7, #80	; 0x50
 800ce14:	e71b      	b.n	800cc4e <__gethex+0x110>
 800ce16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d0e1      	beq.n	800cde0 <__gethex+0x2a2>
 800ce1c:	e7f2      	b.n	800ce04 <__gethex+0x2c6>
 800ce1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1dd      	bne.n	800cde0 <__gethex+0x2a2>
 800ce24:	e7ee      	b.n	800ce04 <__gethex+0x2c6>
 800ce26:	1e67      	subs	r7, r4, #1
 800ce28:	f1ba 0f00 	cmp.w	sl, #0
 800ce2c:	d131      	bne.n	800ce92 <__gethex+0x354>
 800ce2e:	b127      	cbz	r7, 800ce3a <__gethex+0x2fc>
 800ce30:	4639      	mov	r1, r7
 800ce32:	4628      	mov	r0, r5
 800ce34:	f000 fd66 	bl	800d904 <__any_on>
 800ce38:	4682      	mov	sl, r0
 800ce3a:	117a      	asrs	r2, r7, #5
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	f007 071f 	and.w	r7, r7, #31
 800ce42:	fa03 f707 	lsl.w	r7, r3, r7
 800ce46:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	421f      	tst	r7, r3
 800ce4e:	4628      	mov	r0, r5
 800ce50:	bf18      	it	ne
 800ce52:	f04a 0a02 	orrne.w	sl, sl, #2
 800ce56:	1b36      	subs	r6, r6, r4
 800ce58:	f7ff fe22 	bl	800caa0 <rshift>
 800ce5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ce60:	2702      	movs	r7, #2
 800ce62:	f1ba 0f00 	cmp.w	sl, #0
 800ce66:	d048      	beq.n	800cefa <__gethex+0x3bc>
 800ce68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d015      	beq.n	800ce9c <__gethex+0x35e>
 800ce70:	2b03      	cmp	r3, #3
 800ce72:	d017      	beq.n	800cea4 <__gethex+0x366>
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d109      	bne.n	800ce8c <__gethex+0x34e>
 800ce78:	f01a 0f02 	tst.w	sl, #2
 800ce7c:	d006      	beq.n	800ce8c <__gethex+0x34e>
 800ce7e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce82:	ea4a 0a03 	orr.w	sl, sl, r3
 800ce86:	f01a 0f01 	tst.w	sl, #1
 800ce8a:	d10e      	bne.n	800ceaa <__gethex+0x36c>
 800ce8c:	f047 0710 	orr.w	r7, r7, #16
 800ce90:	e033      	b.n	800cefa <__gethex+0x3bc>
 800ce92:	f04f 0a01 	mov.w	sl, #1
 800ce96:	e7d0      	b.n	800ce3a <__gethex+0x2fc>
 800ce98:	2701      	movs	r7, #1
 800ce9a:	e7e2      	b.n	800ce62 <__gethex+0x324>
 800ce9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce9e:	f1c3 0301 	rsb	r3, r3, #1
 800cea2:	9315      	str	r3, [sp, #84]	; 0x54
 800cea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d0f0      	beq.n	800ce8c <__gethex+0x34e>
 800ceaa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ceae:	f105 0314 	add.w	r3, r5, #20
 800ceb2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ceb6:	eb03 010a 	add.w	r1, r3, sl
 800ceba:	f04f 0c00 	mov.w	ip, #0
 800cebe:	4618      	mov	r0, r3
 800cec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cec4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cec8:	d01c      	beq.n	800cf04 <__gethex+0x3c6>
 800ceca:	3201      	adds	r2, #1
 800cecc:	6002      	str	r2, [r0, #0]
 800cece:	2f02      	cmp	r7, #2
 800ced0:	f105 0314 	add.w	r3, r5, #20
 800ced4:	d138      	bne.n	800cf48 <__gethex+0x40a>
 800ced6:	f8d8 2000 	ldr.w	r2, [r8]
 800ceda:	3a01      	subs	r2, #1
 800cedc:	42b2      	cmp	r2, r6
 800cede:	d10a      	bne.n	800cef6 <__gethex+0x3b8>
 800cee0:	1171      	asrs	r1, r6, #5
 800cee2:	2201      	movs	r2, #1
 800cee4:	f006 061f 	and.w	r6, r6, #31
 800cee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ceec:	fa02 f606 	lsl.w	r6, r2, r6
 800cef0:	421e      	tst	r6, r3
 800cef2:	bf18      	it	ne
 800cef4:	4617      	movne	r7, r2
 800cef6:	f047 0720 	orr.w	r7, r7, #32
 800cefa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cefc:	601d      	str	r5, [r3, #0]
 800cefe:	9b06      	ldr	r3, [sp, #24]
 800cf00:	601c      	str	r4, [r3, #0]
 800cf02:	e6a4      	b.n	800cc4e <__gethex+0x110>
 800cf04:	4299      	cmp	r1, r3
 800cf06:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf0a:	d8d8      	bhi.n	800cebe <__gethex+0x380>
 800cf0c:	68ab      	ldr	r3, [r5, #8]
 800cf0e:	4599      	cmp	r9, r3
 800cf10:	db12      	blt.n	800cf38 <__gethex+0x3fa>
 800cf12:	6869      	ldr	r1, [r5, #4]
 800cf14:	9802      	ldr	r0, [sp, #8]
 800cf16:	3101      	adds	r1, #1
 800cf18:	f000 f916 	bl	800d148 <_Balloc>
 800cf1c:	692a      	ldr	r2, [r5, #16]
 800cf1e:	3202      	adds	r2, #2
 800cf20:	f105 010c 	add.w	r1, r5, #12
 800cf24:	4683      	mov	fp, r0
 800cf26:	0092      	lsls	r2, r2, #2
 800cf28:	300c      	adds	r0, #12
 800cf2a:	f7fd fa15 	bl	800a358 <memcpy>
 800cf2e:	4629      	mov	r1, r5
 800cf30:	9802      	ldr	r0, [sp, #8]
 800cf32:	f000 f93d 	bl	800d1b0 <_Bfree>
 800cf36:	465d      	mov	r5, fp
 800cf38:	692b      	ldr	r3, [r5, #16]
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cf40:	612a      	str	r2, [r5, #16]
 800cf42:	2201      	movs	r2, #1
 800cf44:	615a      	str	r2, [r3, #20]
 800cf46:	e7c2      	b.n	800cece <__gethex+0x390>
 800cf48:	692a      	ldr	r2, [r5, #16]
 800cf4a:	454a      	cmp	r2, r9
 800cf4c:	dd0b      	ble.n	800cf66 <__gethex+0x428>
 800cf4e:	2101      	movs	r1, #1
 800cf50:	4628      	mov	r0, r5
 800cf52:	f7ff fda5 	bl	800caa0 <rshift>
 800cf56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf5a:	3401      	adds	r4, #1
 800cf5c:	42a3      	cmp	r3, r4
 800cf5e:	f6ff aed9 	blt.w	800cd14 <__gethex+0x1d6>
 800cf62:	2701      	movs	r7, #1
 800cf64:	e7c7      	b.n	800cef6 <__gethex+0x3b8>
 800cf66:	f016 061f 	ands.w	r6, r6, #31
 800cf6a:	d0fa      	beq.n	800cf62 <__gethex+0x424>
 800cf6c:	449a      	add	sl, r3
 800cf6e:	f1c6 0620 	rsb	r6, r6, #32
 800cf72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cf76:	f000 f9ab 	bl	800d2d0 <__hi0bits>
 800cf7a:	42b0      	cmp	r0, r6
 800cf7c:	dbe7      	blt.n	800cf4e <__gethex+0x410>
 800cf7e:	e7f0      	b.n	800cf62 <__gethex+0x424>

0800cf80 <L_shift>:
 800cf80:	f1c2 0208 	rsb	r2, r2, #8
 800cf84:	0092      	lsls	r2, r2, #2
 800cf86:	b570      	push	{r4, r5, r6, lr}
 800cf88:	f1c2 0620 	rsb	r6, r2, #32
 800cf8c:	6843      	ldr	r3, [r0, #4]
 800cf8e:	6804      	ldr	r4, [r0, #0]
 800cf90:	fa03 f506 	lsl.w	r5, r3, r6
 800cf94:	432c      	orrs	r4, r5
 800cf96:	40d3      	lsrs	r3, r2
 800cf98:	6004      	str	r4, [r0, #0]
 800cf9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf9e:	4288      	cmp	r0, r1
 800cfa0:	d3f4      	bcc.n	800cf8c <L_shift+0xc>
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}

0800cfa4 <__match>:
 800cfa4:	b530      	push	{r4, r5, lr}
 800cfa6:	6803      	ldr	r3, [r0, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfae:	b914      	cbnz	r4, 800cfb6 <__match+0x12>
 800cfb0:	6003      	str	r3, [r0, #0]
 800cfb2:	2001      	movs	r0, #1
 800cfb4:	bd30      	pop	{r4, r5, pc}
 800cfb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cfbe:	2d19      	cmp	r5, #25
 800cfc0:	bf98      	it	ls
 800cfc2:	3220      	addls	r2, #32
 800cfc4:	42a2      	cmp	r2, r4
 800cfc6:	d0f0      	beq.n	800cfaa <__match+0x6>
 800cfc8:	2000      	movs	r0, #0
 800cfca:	e7f3      	b.n	800cfb4 <__match+0x10>

0800cfcc <__hexnan>:
 800cfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	680b      	ldr	r3, [r1, #0]
 800cfd2:	6801      	ldr	r1, [r0, #0]
 800cfd4:	115f      	asrs	r7, r3, #5
 800cfd6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cfda:	f013 031f 	ands.w	r3, r3, #31
 800cfde:	b087      	sub	sp, #28
 800cfe0:	bf18      	it	ne
 800cfe2:	3704      	addne	r7, #4
 800cfe4:	2500      	movs	r5, #0
 800cfe6:	1f3e      	subs	r6, r7, #4
 800cfe8:	4682      	mov	sl, r0
 800cfea:	4690      	mov	r8, r2
 800cfec:	9301      	str	r3, [sp, #4]
 800cfee:	f847 5c04 	str.w	r5, [r7, #-4]
 800cff2:	46b1      	mov	r9, r6
 800cff4:	4634      	mov	r4, r6
 800cff6:	9502      	str	r5, [sp, #8]
 800cff8:	46ab      	mov	fp, r5
 800cffa:	784a      	ldrb	r2, [r1, #1]
 800cffc:	1c4b      	adds	r3, r1, #1
 800cffe:	9303      	str	r3, [sp, #12]
 800d000:	b342      	cbz	r2, 800d054 <__hexnan+0x88>
 800d002:	4610      	mov	r0, r2
 800d004:	9105      	str	r1, [sp, #20]
 800d006:	9204      	str	r2, [sp, #16]
 800d008:	f7ff fd84 	bl	800cb14 <__hexdig_fun>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d143      	bne.n	800d098 <__hexnan+0xcc>
 800d010:	9a04      	ldr	r2, [sp, #16]
 800d012:	9905      	ldr	r1, [sp, #20]
 800d014:	2a20      	cmp	r2, #32
 800d016:	d818      	bhi.n	800d04a <__hexnan+0x7e>
 800d018:	9b02      	ldr	r3, [sp, #8]
 800d01a:	459b      	cmp	fp, r3
 800d01c:	dd13      	ble.n	800d046 <__hexnan+0x7a>
 800d01e:	454c      	cmp	r4, r9
 800d020:	d206      	bcs.n	800d030 <__hexnan+0x64>
 800d022:	2d07      	cmp	r5, #7
 800d024:	dc04      	bgt.n	800d030 <__hexnan+0x64>
 800d026:	462a      	mov	r2, r5
 800d028:	4649      	mov	r1, r9
 800d02a:	4620      	mov	r0, r4
 800d02c:	f7ff ffa8 	bl	800cf80 <L_shift>
 800d030:	4544      	cmp	r4, r8
 800d032:	d944      	bls.n	800d0be <__hexnan+0xf2>
 800d034:	2300      	movs	r3, #0
 800d036:	f1a4 0904 	sub.w	r9, r4, #4
 800d03a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d03e:	f8cd b008 	str.w	fp, [sp, #8]
 800d042:	464c      	mov	r4, r9
 800d044:	461d      	mov	r5, r3
 800d046:	9903      	ldr	r1, [sp, #12]
 800d048:	e7d7      	b.n	800cffa <__hexnan+0x2e>
 800d04a:	2a29      	cmp	r2, #41	; 0x29
 800d04c:	d14a      	bne.n	800d0e4 <__hexnan+0x118>
 800d04e:	3102      	adds	r1, #2
 800d050:	f8ca 1000 	str.w	r1, [sl]
 800d054:	f1bb 0f00 	cmp.w	fp, #0
 800d058:	d044      	beq.n	800d0e4 <__hexnan+0x118>
 800d05a:	454c      	cmp	r4, r9
 800d05c:	d206      	bcs.n	800d06c <__hexnan+0xa0>
 800d05e:	2d07      	cmp	r5, #7
 800d060:	dc04      	bgt.n	800d06c <__hexnan+0xa0>
 800d062:	462a      	mov	r2, r5
 800d064:	4649      	mov	r1, r9
 800d066:	4620      	mov	r0, r4
 800d068:	f7ff ff8a 	bl	800cf80 <L_shift>
 800d06c:	4544      	cmp	r4, r8
 800d06e:	d928      	bls.n	800d0c2 <__hexnan+0xf6>
 800d070:	4643      	mov	r3, r8
 800d072:	f854 2b04 	ldr.w	r2, [r4], #4
 800d076:	f843 2b04 	str.w	r2, [r3], #4
 800d07a:	42a6      	cmp	r6, r4
 800d07c:	d2f9      	bcs.n	800d072 <__hexnan+0xa6>
 800d07e:	2200      	movs	r2, #0
 800d080:	f843 2b04 	str.w	r2, [r3], #4
 800d084:	429e      	cmp	r6, r3
 800d086:	d2fb      	bcs.n	800d080 <__hexnan+0xb4>
 800d088:	6833      	ldr	r3, [r6, #0]
 800d08a:	b91b      	cbnz	r3, 800d094 <__hexnan+0xc8>
 800d08c:	4546      	cmp	r6, r8
 800d08e:	d127      	bne.n	800d0e0 <__hexnan+0x114>
 800d090:	2301      	movs	r3, #1
 800d092:	6033      	str	r3, [r6, #0]
 800d094:	2005      	movs	r0, #5
 800d096:	e026      	b.n	800d0e6 <__hexnan+0x11a>
 800d098:	3501      	adds	r5, #1
 800d09a:	2d08      	cmp	r5, #8
 800d09c:	f10b 0b01 	add.w	fp, fp, #1
 800d0a0:	dd06      	ble.n	800d0b0 <__hexnan+0xe4>
 800d0a2:	4544      	cmp	r4, r8
 800d0a4:	d9cf      	bls.n	800d046 <__hexnan+0x7a>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0ac:	2501      	movs	r5, #1
 800d0ae:	3c04      	subs	r4, #4
 800d0b0:	6822      	ldr	r2, [r4, #0]
 800d0b2:	f000 000f 	and.w	r0, r0, #15
 800d0b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d0ba:	6020      	str	r0, [r4, #0]
 800d0bc:	e7c3      	b.n	800d046 <__hexnan+0x7a>
 800d0be:	2508      	movs	r5, #8
 800d0c0:	e7c1      	b.n	800d046 <__hexnan+0x7a>
 800d0c2:	9b01      	ldr	r3, [sp, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d0df      	beq.n	800d088 <__hexnan+0xbc>
 800d0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0cc:	f1c3 0320 	rsb	r3, r3, #32
 800d0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d0d8:	401a      	ands	r2, r3
 800d0da:	f847 2c04 	str.w	r2, [r7, #-4]
 800d0de:	e7d3      	b.n	800d088 <__hexnan+0xbc>
 800d0e0:	3e04      	subs	r6, #4
 800d0e2:	e7d1      	b.n	800d088 <__hexnan+0xbc>
 800d0e4:	2004      	movs	r0, #4
 800d0e6:	b007      	add	sp, #28
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0ec <__locale_ctype_ptr_l>:
 800d0ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d0f0:	4770      	bx	lr

0800d0f2 <__localeconv_l>:
 800d0f2:	30f0      	adds	r0, #240	; 0xf0
 800d0f4:	4770      	bx	lr
	...

0800d0f8 <_localeconv_r>:
 800d0f8:	4b04      	ldr	r3, [pc, #16]	; (800d10c <_localeconv_r+0x14>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6a18      	ldr	r0, [r3, #32]
 800d0fe:	4b04      	ldr	r3, [pc, #16]	; (800d110 <_localeconv_r+0x18>)
 800d100:	2800      	cmp	r0, #0
 800d102:	bf08      	it	eq
 800d104:	4618      	moveq	r0, r3
 800d106:	30f0      	adds	r0, #240	; 0xf0
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	20002840 	.word	0x20002840
 800d110:	200028a4 	.word	0x200028a4

0800d114 <malloc>:
 800d114:	4b02      	ldr	r3, [pc, #8]	; (800d120 <malloc+0xc>)
 800d116:	4601      	mov	r1, r0
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	f000 bc71 	b.w	800da00 <_malloc_r>
 800d11e:	bf00      	nop
 800d120:	20002840 	.word	0x20002840

0800d124 <__ascii_mbtowc>:
 800d124:	b082      	sub	sp, #8
 800d126:	b901      	cbnz	r1, 800d12a <__ascii_mbtowc+0x6>
 800d128:	a901      	add	r1, sp, #4
 800d12a:	b142      	cbz	r2, 800d13e <__ascii_mbtowc+0x1a>
 800d12c:	b14b      	cbz	r3, 800d142 <__ascii_mbtowc+0x1e>
 800d12e:	7813      	ldrb	r3, [r2, #0]
 800d130:	600b      	str	r3, [r1, #0]
 800d132:	7812      	ldrb	r2, [r2, #0]
 800d134:	1c10      	adds	r0, r2, #0
 800d136:	bf18      	it	ne
 800d138:	2001      	movne	r0, #1
 800d13a:	b002      	add	sp, #8
 800d13c:	4770      	bx	lr
 800d13e:	4610      	mov	r0, r2
 800d140:	e7fb      	b.n	800d13a <__ascii_mbtowc+0x16>
 800d142:	f06f 0001 	mvn.w	r0, #1
 800d146:	e7f8      	b.n	800d13a <__ascii_mbtowc+0x16>

0800d148 <_Balloc>:
 800d148:	b570      	push	{r4, r5, r6, lr}
 800d14a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d14c:	4604      	mov	r4, r0
 800d14e:	460e      	mov	r6, r1
 800d150:	b93d      	cbnz	r5, 800d162 <_Balloc+0x1a>
 800d152:	2010      	movs	r0, #16
 800d154:	f7ff ffde 	bl	800d114 <malloc>
 800d158:	6260      	str	r0, [r4, #36]	; 0x24
 800d15a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d15e:	6005      	str	r5, [r0, #0]
 800d160:	60c5      	str	r5, [r0, #12]
 800d162:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d164:	68eb      	ldr	r3, [r5, #12]
 800d166:	b183      	cbz	r3, 800d18a <_Balloc+0x42>
 800d168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d170:	b9b8      	cbnz	r0, 800d1a2 <_Balloc+0x5a>
 800d172:	2101      	movs	r1, #1
 800d174:	fa01 f506 	lsl.w	r5, r1, r6
 800d178:	1d6a      	adds	r2, r5, #5
 800d17a:	0092      	lsls	r2, r2, #2
 800d17c:	4620      	mov	r0, r4
 800d17e:	f000 fbe2 	bl	800d946 <_calloc_r>
 800d182:	b160      	cbz	r0, 800d19e <_Balloc+0x56>
 800d184:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d188:	e00e      	b.n	800d1a8 <_Balloc+0x60>
 800d18a:	2221      	movs	r2, #33	; 0x21
 800d18c:	2104      	movs	r1, #4
 800d18e:	4620      	mov	r0, r4
 800d190:	f000 fbd9 	bl	800d946 <_calloc_r>
 800d194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d196:	60e8      	str	r0, [r5, #12]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1e4      	bne.n	800d168 <_Balloc+0x20>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	bd70      	pop	{r4, r5, r6, pc}
 800d1a2:	6802      	ldr	r2, [r0, #0]
 800d1a4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1ae:	e7f7      	b.n	800d1a0 <_Balloc+0x58>

0800d1b0 <_Bfree>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	b93c      	cbnz	r4, 800d1ca <_Bfree+0x1a>
 800d1ba:	2010      	movs	r0, #16
 800d1bc:	f7ff ffaa 	bl	800d114 <malloc>
 800d1c0:	6270      	str	r0, [r6, #36]	; 0x24
 800d1c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1c6:	6004      	str	r4, [r0, #0]
 800d1c8:	60c4      	str	r4, [r0, #12]
 800d1ca:	b13d      	cbz	r5, 800d1dc <_Bfree+0x2c>
 800d1cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d1ce:	686a      	ldr	r2, [r5, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1d6:	6029      	str	r1, [r5, #0]
 800d1d8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d1dc:	bd70      	pop	{r4, r5, r6, pc}

0800d1de <__multadd>:
 800d1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e2:	690d      	ldr	r5, [r1, #16]
 800d1e4:	461f      	mov	r7, r3
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	f101 0c14 	add.w	ip, r1, #20
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f8dc 0000 	ldr.w	r0, [ip]
 800d1f4:	b281      	uxth	r1, r0
 800d1f6:	fb02 7101 	mla	r1, r2, r1, r7
 800d1fa:	0c0f      	lsrs	r7, r1, #16
 800d1fc:	0c00      	lsrs	r0, r0, #16
 800d1fe:	fb02 7000 	mla	r0, r2, r0, r7
 800d202:	b289      	uxth	r1, r1
 800d204:	3301      	adds	r3, #1
 800d206:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d20a:	429d      	cmp	r5, r3
 800d20c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d210:	f84c 1b04 	str.w	r1, [ip], #4
 800d214:	dcec      	bgt.n	800d1f0 <__multadd+0x12>
 800d216:	b1d7      	cbz	r7, 800d24e <__multadd+0x70>
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	42ab      	cmp	r3, r5
 800d21c:	dc12      	bgt.n	800d244 <__multadd+0x66>
 800d21e:	6861      	ldr	r1, [r4, #4]
 800d220:	4630      	mov	r0, r6
 800d222:	3101      	adds	r1, #1
 800d224:	f7ff ff90 	bl	800d148 <_Balloc>
 800d228:	6922      	ldr	r2, [r4, #16]
 800d22a:	3202      	adds	r2, #2
 800d22c:	f104 010c 	add.w	r1, r4, #12
 800d230:	4680      	mov	r8, r0
 800d232:	0092      	lsls	r2, r2, #2
 800d234:	300c      	adds	r0, #12
 800d236:	f7fd f88f 	bl	800a358 <memcpy>
 800d23a:	4621      	mov	r1, r4
 800d23c:	4630      	mov	r0, r6
 800d23e:	f7ff ffb7 	bl	800d1b0 <_Bfree>
 800d242:	4644      	mov	r4, r8
 800d244:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d248:	3501      	adds	r5, #1
 800d24a:	615f      	str	r7, [r3, #20]
 800d24c:	6125      	str	r5, [r4, #16]
 800d24e:	4620      	mov	r0, r4
 800d250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d254 <__s2b>:
 800d254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d258:	460c      	mov	r4, r1
 800d25a:	4615      	mov	r5, r2
 800d25c:	461f      	mov	r7, r3
 800d25e:	2209      	movs	r2, #9
 800d260:	3308      	adds	r3, #8
 800d262:	4606      	mov	r6, r0
 800d264:	fb93 f3f2 	sdiv	r3, r3, r2
 800d268:	2100      	movs	r1, #0
 800d26a:	2201      	movs	r2, #1
 800d26c:	429a      	cmp	r2, r3
 800d26e:	db20      	blt.n	800d2b2 <__s2b+0x5e>
 800d270:	4630      	mov	r0, r6
 800d272:	f7ff ff69 	bl	800d148 <_Balloc>
 800d276:	9b08      	ldr	r3, [sp, #32]
 800d278:	6143      	str	r3, [r0, #20]
 800d27a:	2d09      	cmp	r5, #9
 800d27c:	f04f 0301 	mov.w	r3, #1
 800d280:	6103      	str	r3, [r0, #16]
 800d282:	dd19      	ble.n	800d2b8 <__s2b+0x64>
 800d284:	f104 0809 	add.w	r8, r4, #9
 800d288:	46c1      	mov	r9, r8
 800d28a:	442c      	add	r4, r5
 800d28c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d290:	4601      	mov	r1, r0
 800d292:	3b30      	subs	r3, #48	; 0x30
 800d294:	220a      	movs	r2, #10
 800d296:	4630      	mov	r0, r6
 800d298:	f7ff ffa1 	bl	800d1de <__multadd>
 800d29c:	45a1      	cmp	r9, r4
 800d29e:	d1f5      	bne.n	800d28c <__s2b+0x38>
 800d2a0:	eb08 0405 	add.w	r4, r8, r5
 800d2a4:	3c08      	subs	r4, #8
 800d2a6:	1b2d      	subs	r5, r5, r4
 800d2a8:	1963      	adds	r3, r4, r5
 800d2aa:	42bb      	cmp	r3, r7
 800d2ac:	db07      	blt.n	800d2be <__s2b+0x6a>
 800d2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2b2:	0052      	lsls	r2, r2, #1
 800d2b4:	3101      	adds	r1, #1
 800d2b6:	e7d9      	b.n	800d26c <__s2b+0x18>
 800d2b8:	340a      	adds	r4, #10
 800d2ba:	2509      	movs	r5, #9
 800d2bc:	e7f3      	b.n	800d2a6 <__s2b+0x52>
 800d2be:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2c2:	4601      	mov	r1, r0
 800d2c4:	3b30      	subs	r3, #48	; 0x30
 800d2c6:	220a      	movs	r2, #10
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f7ff ff88 	bl	800d1de <__multadd>
 800d2ce:	e7eb      	b.n	800d2a8 <__s2b+0x54>

0800d2d0 <__hi0bits>:
 800d2d0:	0c02      	lsrs	r2, r0, #16
 800d2d2:	0412      	lsls	r2, r2, #16
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	b9b2      	cbnz	r2, 800d306 <__hi0bits+0x36>
 800d2d8:	0403      	lsls	r3, r0, #16
 800d2da:	2010      	movs	r0, #16
 800d2dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d2e0:	bf04      	itt	eq
 800d2e2:	021b      	lsleq	r3, r3, #8
 800d2e4:	3008      	addeq	r0, #8
 800d2e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2ea:	bf04      	itt	eq
 800d2ec:	011b      	lsleq	r3, r3, #4
 800d2ee:	3004      	addeq	r0, #4
 800d2f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2f4:	bf04      	itt	eq
 800d2f6:	009b      	lsleq	r3, r3, #2
 800d2f8:	3002      	addeq	r0, #2
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	db06      	blt.n	800d30c <__hi0bits+0x3c>
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	d503      	bpl.n	800d30a <__hi0bits+0x3a>
 800d302:	3001      	adds	r0, #1
 800d304:	4770      	bx	lr
 800d306:	2000      	movs	r0, #0
 800d308:	e7e8      	b.n	800d2dc <__hi0bits+0xc>
 800d30a:	2020      	movs	r0, #32
 800d30c:	4770      	bx	lr

0800d30e <__lo0bits>:
 800d30e:	6803      	ldr	r3, [r0, #0]
 800d310:	f013 0207 	ands.w	r2, r3, #7
 800d314:	4601      	mov	r1, r0
 800d316:	d00b      	beq.n	800d330 <__lo0bits+0x22>
 800d318:	07da      	lsls	r2, r3, #31
 800d31a:	d423      	bmi.n	800d364 <__lo0bits+0x56>
 800d31c:	0798      	lsls	r0, r3, #30
 800d31e:	bf49      	itett	mi
 800d320:	085b      	lsrmi	r3, r3, #1
 800d322:	089b      	lsrpl	r3, r3, #2
 800d324:	2001      	movmi	r0, #1
 800d326:	600b      	strmi	r3, [r1, #0]
 800d328:	bf5c      	itt	pl
 800d32a:	600b      	strpl	r3, [r1, #0]
 800d32c:	2002      	movpl	r0, #2
 800d32e:	4770      	bx	lr
 800d330:	b298      	uxth	r0, r3
 800d332:	b9a8      	cbnz	r0, 800d360 <__lo0bits+0x52>
 800d334:	0c1b      	lsrs	r3, r3, #16
 800d336:	2010      	movs	r0, #16
 800d338:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d33c:	bf04      	itt	eq
 800d33e:	0a1b      	lsreq	r3, r3, #8
 800d340:	3008      	addeq	r0, #8
 800d342:	071a      	lsls	r2, r3, #28
 800d344:	bf04      	itt	eq
 800d346:	091b      	lsreq	r3, r3, #4
 800d348:	3004      	addeq	r0, #4
 800d34a:	079a      	lsls	r2, r3, #30
 800d34c:	bf04      	itt	eq
 800d34e:	089b      	lsreq	r3, r3, #2
 800d350:	3002      	addeq	r0, #2
 800d352:	07da      	lsls	r2, r3, #31
 800d354:	d402      	bmi.n	800d35c <__lo0bits+0x4e>
 800d356:	085b      	lsrs	r3, r3, #1
 800d358:	d006      	beq.n	800d368 <__lo0bits+0x5a>
 800d35a:	3001      	adds	r0, #1
 800d35c:	600b      	str	r3, [r1, #0]
 800d35e:	4770      	bx	lr
 800d360:	4610      	mov	r0, r2
 800d362:	e7e9      	b.n	800d338 <__lo0bits+0x2a>
 800d364:	2000      	movs	r0, #0
 800d366:	4770      	bx	lr
 800d368:	2020      	movs	r0, #32
 800d36a:	4770      	bx	lr

0800d36c <__i2b>:
 800d36c:	b510      	push	{r4, lr}
 800d36e:	460c      	mov	r4, r1
 800d370:	2101      	movs	r1, #1
 800d372:	f7ff fee9 	bl	800d148 <_Balloc>
 800d376:	2201      	movs	r2, #1
 800d378:	6144      	str	r4, [r0, #20]
 800d37a:	6102      	str	r2, [r0, #16]
 800d37c:	bd10      	pop	{r4, pc}

0800d37e <__multiply>:
 800d37e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d382:	4614      	mov	r4, r2
 800d384:	690a      	ldr	r2, [r1, #16]
 800d386:	6923      	ldr	r3, [r4, #16]
 800d388:	429a      	cmp	r2, r3
 800d38a:	bfb8      	it	lt
 800d38c:	460b      	movlt	r3, r1
 800d38e:	4688      	mov	r8, r1
 800d390:	bfbc      	itt	lt
 800d392:	46a0      	movlt	r8, r4
 800d394:	461c      	movlt	r4, r3
 800d396:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d39a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d39e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3a6:	eb07 0609 	add.w	r6, r7, r9
 800d3aa:	42b3      	cmp	r3, r6
 800d3ac:	bfb8      	it	lt
 800d3ae:	3101      	addlt	r1, #1
 800d3b0:	f7ff feca 	bl	800d148 <_Balloc>
 800d3b4:	f100 0514 	add.w	r5, r0, #20
 800d3b8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d3bc:	462b      	mov	r3, r5
 800d3be:	2200      	movs	r2, #0
 800d3c0:	4573      	cmp	r3, lr
 800d3c2:	d316      	bcc.n	800d3f2 <__multiply+0x74>
 800d3c4:	f104 0214 	add.w	r2, r4, #20
 800d3c8:	f108 0114 	add.w	r1, r8, #20
 800d3cc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d3d0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	9b00      	ldr	r3, [sp, #0]
 800d3d8:	9201      	str	r2, [sp, #4]
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d80c      	bhi.n	800d3f8 <__multiply+0x7a>
 800d3de:	2e00      	cmp	r6, #0
 800d3e0:	dd03      	ble.n	800d3ea <__multiply+0x6c>
 800d3e2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d05d      	beq.n	800d4a6 <__multiply+0x128>
 800d3ea:	6106      	str	r6, [r0, #16]
 800d3ec:	b003      	add	sp, #12
 800d3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f2:	f843 2b04 	str.w	r2, [r3], #4
 800d3f6:	e7e3      	b.n	800d3c0 <__multiply+0x42>
 800d3f8:	f8b2 b000 	ldrh.w	fp, [r2]
 800d3fc:	f1bb 0f00 	cmp.w	fp, #0
 800d400:	d023      	beq.n	800d44a <__multiply+0xcc>
 800d402:	4689      	mov	r9, r1
 800d404:	46ac      	mov	ip, r5
 800d406:	f04f 0800 	mov.w	r8, #0
 800d40a:	f859 4b04 	ldr.w	r4, [r9], #4
 800d40e:	f8dc a000 	ldr.w	sl, [ip]
 800d412:	b2a3      	uxth	r3, r4
 800d414:	fa1f fa8a 	uxth.w	sl, sl
 800d418:	fb0b a303 	mla	r3, fp, r3, sl
 800d41c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d420:	f8dc 4000 	ldr.w	r4, [ip]
 800d424:	4443      	add	r3, r8
 800d426:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d42a:	fb0b 840a 	mla	r4, fp, sl, r8
 800d42e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d432:	46e2      	mov	sl, ip
 800d434:	b29b      	uxth	r3, r3
 800d436:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d43a:	454f      	cmp	r7, r9
 800d43c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d440:	f84a 3b04 	str.w	r3, [sl], #4
 800d444:	d82b      	bhi.n	800d49e <__multiply+0x120>
 800d446:	f8cc 8004 	str.w	r8, [ip, #4]
 800d44a:	9b01      	ldr	r3, [sp, #4]
 800d44c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d450:	3204      	adds	r2, #4
 800d452:	f1ba 0f00 	cmp.w	sl, #0
 800d456:	d020      	beq.n	800d49a <__multiply+0x11c>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	4689      	mov	r9, r1
 800d45c:	46a8      	mov	r8, r5
 800d45e:	f04f 0b00 	mov.w	fp, #0
 800d462:	f8b9 c000 	ldrh.w	ip, [r9]
 800d466:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d46a:	fb0a 440c 	mla	r4, sl, ip, r4
 800d46e:	445c      	add	r4, fp
 800d470:	46c4      	mov	ip, r8
 800d472:	b29b      	uxth	r3, r3
 800d474:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d478:	f84c 3b04 	str.w	r3, [ip], #4
 800d47c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d480:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d484:	0c1b      	lsrs	r3, r3, #16
 800d486:	fb0a b303 	mla	r3, sl, r3, fp
 800d48a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d48e:	454f      	cmp	r7, r9
 800d490:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d494:	d805      	bhi.n	800d4a2 <__multiply+0x124>
 800d496:	f8c8 3004 	str.w	r3, [r8, #4]
 800d49a:	3504      	adds	r5, #4
 800d49c:	e79b      	b.n	800d3d6 <__multiply+0x58>
 800d49e:	46d4      	mov	ip, sl
 800d4a0:	e7b3      	b.n	800d40a <__multiply+0x8c>
 800d4a2:	46e0      	mov	r8, ip
 800d4a4:	e7dd      	b.n	800d462 <__multiply+0xe4>
 800d4a6:	3e01      	subs	r6, #1
 800d4a8:	e799      	b.n	800d3de <__multiply+0x60>
	...

0800d4ac <__pow5mult>:
 800d4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4b0:	4615      	mov	r5, r2
 800d4b2:	f012 0203 	ands.w	r2, r2, #3
 800d4b6:	4606      	mov	r6, r0
 800d4b8:	460f      	mov	r7, r1
 800d4ba:	d007      	beq.n	800d4cc <__pow5mult+0x20>
 800d4bc:	3a01      	subs	r2, #1
 800d4be:	4c21      	ldr	r4, [pc, #132]	; (800d544 <__pow5mult+0x98>)
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4c6:	f7ff fe8a 	bl	800d1de <__multadd>
 800d4ca:	4607      	mov	r7, r0
 800d4cc:	10ad      	asrs	r5, r5, #2
 800d4ce:	d035      	beq.n	800d53c <__pow5mult+0x90>
 800d4d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4d2:	b93c      	cbnz	r4, 800d4e4 <__pow5mult+0x38>
 800d4d4:	2010      	movs	r0, #16
 800d4d6:	f7ff fe1d 	bl	800d114 <malloc>
 800d4da:	6270      	str	r0, [r6, #36]	; 0x24
 800d4dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4e0:	6004      	str	r4, [r0, #0]
 800d4e2:	60c4      	str	r4, [r0, #12]
 800d4e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4ec:	b94c      	cbnz	r4, 800d502 <__pow5mult+0x56>
 800d4ee:	f240 2171 	movw	r1, #625	; 0x271
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7ff ff3a 	bl	800d36c <__i2b>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4fe:	4604      	mov	r4, r0
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	f04f 0800 	mov.w	r8, #0
 800d506:	07eb      	lsls	r3, r5, #31
 800d508:	d50a      	bpl.n	800d520 <__pow5mult+0x74>
 800d50a:	4639      	mov	r1, r7
 800d50c:	4622      	mov	r2, r4
 800d50e:	4630      	mov	r0, r6
 800d510:	f7ff ff35 	bl	800d37e <__multiply>
 800d514:	4639      	mov	r1, r7
 800d516:	4681      	mov	r9, r0
 800d518:	4630      	mov	r0, r6
 800d51a:	f7ff fe49 	bl	800d1b0 <_Bfree>
 800d51e:	464f      	mov	r7, r9
 800d520:	106d      	asrs	r5, r5, #1
 800d522:	d00b      	beq.n	800d53c <__pow5mult+0x90>
 800d524:	6820      	ldr	r0, [r4, #0]
 800d526:	b938      	cbnz	r0, 800d538 <__pow5mult+0x8c>
 800d528:	4622      	mov	r2, r4
 800d52a:	4621      	mov	r1, r4
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7ff ff26 	bl	800d37e <__multiply>
 800d532:	6020      	str	r0, [r4, #0]
 800d534:	f8c0 8000 	str.w	r8, [r0]
 800d538:	4604      	mov	r4, r0
 800d53a:	e7e4      	b.n	800d506 <__pow5mult+0x5a>
 800d53c:	4638      	mov	r0, r7
 800d53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d542:	bf00      	nop
 800d544:	0800fff8 	.word	0x0800fff8

0800d548 <__lshift>:
 800d548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d54c:	460c      	mov	r4, r1
 800d54e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d552:	6923      	ldr	r3, [r4, #16]
 800d554:	6849      	ldr	r1, [r1, #4]
 800d556:	eb0a 0903 	add.w	r9, sl, r3
 800d55a:	68a3      	ldr	r3, [r4, #8]
 800d55c:	4607      	mov	r7, r0
 800d55e:	4616      	mov	r6, r2
 800d560:	f109 0501 	add.w	r5, r9, #1
 800d564:	42ab      	cmp	r3, r5
 800d566:	db32      	blt.n	800d5ce <__lshift+0x86>
 800d568:	4638      	mov	r0, r7
 800d56a:	f7ff fded 	bl	800d148 <_Balloc>
 800d56e:	2300      	movs	r3, #0
 800d570:	4680      	mov	r8, r0
 800d572:	f100 0114 	add.w	r1, r0, #20
 800d576:	461a      	mov	r2, r3
 800d578:	4553      	cmp	r3, sl
 800d57a:	db2b      	blt.n	800d5d4 <__lshift+0x8c>
 800d57c:	6920      	ldr	r0, [r4, #16]
 800d57e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d582:	f104 0314 	add.w	r3, r4, #20
 800d586:	f016 021f 	ands.w	r2, r6, #31
 800d58a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d58e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d592:	d025      	beq.n	800d5e0 <__lshift+0x98>
 800d594:	f1c2 0e20 	rsb	lr, r2, #32
 800d598:	2000      	movs	r0, #0
 800d59a:	681e      	ldr	r6, [r3, #0]
 800d59c:	468a      	mov	sl, r1
 800d59e:	4096      	lsls	r6, r2
 800d5a0:	4330      	orrs	r0, r6
 800d5a2:	f84a 0b04 	str.w	r0, [sl], #4
 800d5a6:	f853 0b04 	ldr.w	r0, [r3], #4
 800d5aa:	459c      	cmp	ip, r3
 800d5ac:	fa20 f00e 	lsr.w	r0, r0, lr
 800d5b0:	d814      	bhi.n	800d5dc <__lshift+0x94>
 800d5b2:	6048      	str	r0, [r1, #4]
 800d5b4:	b108      	cbz	r0, 800d5ba <__lshift+0x72>
 800d5b6:	f109 0502 	add.w	r5, r9, #2
 800d5ba:	3d01      	subs	r5, #1
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f8c8 5010 	str.w	r5, [r8, #16]
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	f7ff fdf4 	bl	800d1b0 <_Bfree>
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ce:	3101      	adds	r1, #1
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	e7c7      	b.n	800d564 <__lshift+0x1c>
 800d5d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	e7cd      	b.n	800d578 <__lshift+0x30>
 800d5dc:	4651      	mov	r1, sl
 800d5de:	e7dc      	b.n	800d59a <__lshift+0x52>
 800d5e0:	3904      	subs	r1, #4
 800d5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5ea:	459c      	cmp	ip, r3
 800d5ec:	d8f9      	bhi.n	800d5e2 <__lshift+0x9a>
 800d5ee:	e7e4      	b.n	800d5ba <__lshift+0x72>

0800d5f0 <__mcmp>:
 800d5f0:	6903      	ldr	r3, [r0, #16]
 800d5f2:	690a      	ldr	r2, [r1, #16]
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	b530      	push	{r4, r5, lr}
 800d5f8:	d10c      	bne.n	800d614 <__mcmp+0x24>
 800d5fa:	0092      	lsls	r2, r2, #2
 800d5fc:	3014      	adds	r0, #20
 800d5fe:	3114      	adds	r1, #20
 800d600:	1884      	adds	r4, r0, r2
 800d602:	4411      	add	r1, r2
 800d604:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d608:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d60c:	4295      	cmp	r5, r2
 800d60e:	d003      	beq.n	800d618 <__mcmp+0x28>
 800d610:	d305      	bcc.n	800d61e <__mcmp+0x2e>
 800d612:	2301      	movs	r3, #1
 800d614:	4618      	mov	r0, r3
 800d616:	bd30      	pop	{r4, r5, pc}
 800d618:	42a0      	cmp	r0, r4
 800d61a:	d3f3      	bcc.n	800d604 <__mcmp+0x14>
 800d61c:	e7fa      	b.n	800d614 <__mcmp+0x24>
 800d61e:	f04f 33ff 	mov.w	r3, #4294967295
 800d622:	e7f7      	b.n	800d614 <__mcmp+0x24>

0800d624 <__mdiff>:
 800d624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	460d      	mov	r5, r1
 800d62a:	4607      	mov	r7, r0
 800d62c:	4611      	mov	r1, r2
 800d62e:	4628      	mov	r0, r5
 800d630:	4614      	mov	r4, r2
 800d632:	f7ff ffdd 	bl	800d5f0 <__mcmp>
 800d636:	1e06      	subs	r6, r0, #0
 800d638:	d108      	bne.n	800d64c <__mdiff+0x28>
 800d63a:	4631      	mov	r1, r6
 800d63c:	4638      	mov	r0, r7
 800d63e:	f7ff fd83 	bl	800d148 <_Balloc>
 800d642:	2301      	movs	r3, #1
 800d644:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64c:	bfa4      	itt	ge
 800d64e:	4623      	movge	r3, r4
 800d650:	462c      	movge	r4, r5
 800d652:	4638      	mov	r0, r7
 800d654:	6861      	ldr	r1, [r4, #4]
 800d656:	bfa6      	itte	ge
 800d658:	461d      	movge	r5, r3
 800d65a:	2600      	movge	r6, #0
 800d65c:	2601      	movlt	r6, #1
 800d65e:	f7ff fd73 	bl	800d148 <_Balloc>
 800d662:	692b      	ldr	r3, [r5, #16]
 800d664:	60c6      	str	r6, [r0, #12]
 800d666:	6926      	ldr	r6, [r4, #16]
 800d668:	f105 0914 	add.w	r9, r5, #20
 800d66c:	f104 0214 	add.w	r2, r4, #20
 800d670:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d674:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d678:	f100 0514 	add.w	r5, r0, #20
 800d67c:	f04f 0e00 	mov.w	lr, #0
 800d680:	f852 ab04 	ldr.w	sl, [r2], #4
 800d684:	f859 4b04 	ldr.w	r4, [r9], #4
 800d688:	fa1e f18a 	uxtah	r1, lr, sl
 800d68c:	b2a3      	uxth	r3, r4
 800d68e:	1ac9      	subs	r1, r1, r3
 800d690:	0c23      	lsrs	r3, r4, #16
 800d692:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d696:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d69a:	b289      	uxth	r1, r1
 800d69c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d6a0:	45c8      	cmp	r8, r9
 800d6a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d6a6:	4694      	mov	ip, r2
 800d6a8:	f845 3b04 	str.w	r3, [r5], #4
 800d6ac:	d8e8      	bhi.n	800d680 <__mdiff+0x5c>
 800d6ae:	45bc      	cmp	ip, r7
 800d6b0:	d304      	bcc.n	800d6bc <__mdiff+0x98>
 800d6b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d6b6:	b183      	cbz	r3, 800d6da <__mdiff+0xb6>
 800d6b8:	6106      	str	r6, [r0, #16]
 800d6ba:	e7c5      	b.n	800d648 <__mdiff+0x24>
 800d6bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d6c0:	fa1e f381 	uxtah	r3, lr, r1
 800d6c4:	141a      	asrs	r2, r3, #16
 800d6c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d6d4:	f845 3b04 	str.w	r3, [r5], #4
 800d6d8:	e7e9      	b.n	800d6ae <__mdiff+0x8a>
 800d6da:	3e01      	subs	r6, #1
 800d6dc:	e7e9      	b.n	800d6b2 <__mdiff+0x8e>
	...

0800d6e0 <__ulp>:
 800d6e0:	4b12      	ldr	r3, [pc, #72]	; (800d72c <__ulp+0x4c>)
 800d6e2:	ee10 2a90 	vmov	r2, s1
 800d6e6:	401a      	ands	r2, r3
 800d6e8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	dd04      	ble.n	800d6fa <__ulp+0x1a>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	ec41 0b10 	vmov	d0, r0, r1
 800d6f8:	4770      	bx	lr
 800d6fa:	425b      	negs	r3, r3
 800d6fc:	151b      	asrs	r3, r3, #20
 800d6fe:	2b13      	cmp	r3, #19
 800d700:	f04f 0000 	mov.w	r0, #0
 800d704:	f04f 0100 	mov.w	r1, #0
 800d708:	dc04      	bgt.n	800d714 <__ulp+0x34>
 800d70a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d70e:	fa42 f103 	asr.w	r1, r2, r3
 800d712:	e7ef      	b.n	800d6f4 <__ulp+0x14>
 800d714:	3b14      	subs	r3, #20
 800d716:	2b1e      	cmp	r3, #30
 800d718:	f04f 0201 	mov.w	r2, #1
 800d71c:	bfda      	itte	le
 800d71e:	f1c3 031f 	rsble	r3, r3, #31
 800d722:	fa02 f303 	lslle.w	r3, r2, r3
 800d726:	4613      	movgt	r3, r2
 800d728:	4618      	mov	r0, r3
 800d72a:	e7e3      	b.n	800d6f4 <__ulp+0x14>
 800d72c:	7ff00000 	.word	0x7ff00000

0800d730 <__b2d>:
 800d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d732:	6905      	ldr	r5, [r0, #16]
 800d734:	f100 0714 	add.w	r7, r0, #20
 800d738:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d73c:	1f2e      	subs	r6, r5, #4
 800d73e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d742:	4620      	mov	r0, r4
 800d744:	f7ff fdc4 	bl	800d2d0 <__hi0bits>
 800d748:	f1c0 0320 	rsb	r3, r0, #32
 800d74c:	280a      	cmp	r0, #10
 800d74e:	600b      	str	r3, [r1, #0]
 800d750:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d7c8 <__b2d+0x98>
 800d754:	dc14      	bgt.n	800d780 <__b2d+0x50>
 800d756:	f1c0 0e0b 	rsb	lr, r0, #11
 800d75a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d75e:	42b7      	cmp	r7, r6
 800d760:	ea41 030c 	orr.w	r3, r1, ip
 800d764:	bf34      	ite	cc
 800d766:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d76a:	2100      	movcs	r1, #0
 800d76c:	3015      	adds	r0, #21
 800d76e:	fa04 f000 	lsl.w	r0, r4, r0
 800d772:	fa21 f10e 	lsr.w	r1, r1, lr
 800d776:	ea40 0201 	orr.w	r2, r0, r1
 800d77a:	ec43 2b10 	vmov	d0, r2, r3
 800d77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d780:	42b7      	cmp	r7, r6
 800d782:	bf3a      	itte	cc
 800d784:	f1a5 0608 	subcc.w	r6, r5, #8
 800d788:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d78c:	2100      	movcs	r1, #0
 800d78e:	380b      	subs	r0, #11
 800d790:	d015      	beq.n	800d7be <__b2d+0x8e>
 800d792:	4084      	lsls	r4, r0
 800d794:	f1c0 0520 	rsb	r5, r0, #32
 800d798:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d79c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d7a0:	42be      	cmp	r6, r7
 800d7a2:	fa21 fc05 	lsr.w	ip, r1, r5
 800d7a6:	ea44 030c 	orr.w	r3, r4, ip
 800d7aa:	bf8c      	ite	hi
 800d7ac:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d7b0:	2400      	movls	r4, #0
 800d7b2:	fa01 f000 	lsl.w	r0, r1, r0
 800d7b6:	40ec      	lsrs	r4, r5
 800d7b8:	ea40 0204 	orr.w	r2, r0, r4
 800d7bc:	e7dd      	b.n	800d77a <__b2d+0x4a>
 800d7be:	ea44 030c 	orr.w	r3, r4, ip
 800d7c2:	460a      	mov	r2, r1
 800d7c4:	e7d9      	b.n	800d77a <__b2d+0x4a>
 800d7c6:	bf00      	nop
 800d7c8:	3ff00000 	.word	0x3ff00000

0800d7cc <__d2b>:
 800d7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7d0:	460e      	mov	r6, r1
 800d7d2:	2101      	movs	r1, #1
 800d7d4:	ec59 8b10 	vmov	r8, r9, d0
 800d7d8:	4615      	mov	r5, r2
 800d7da:	f7ff fcb5 	bl	800d148 <_Balloc>
 800d7de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d7e2:	4607      	mov	r7, r0
 800d7e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7e8:	bb34      	cbnz	r4, 800d838 <__d2b+0x6c>
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	f1b8 0300 	subs.w	r3, r8, #0
 800d7f0:	d027      	beq.n	800d842 <__d2b+0x76>
 800d7f2:	a802      	add	r0, sp, #8
 800d7f4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d7f8:	f7ff fd89 	bl	800d30e <__lo0bits>
 800d7fc:	9900      	ldr	r1, [sp, #0]
 800d7fe:	b1f0      	cbz	r0, 800d83e <__d2b+0x72>
 800d800:	9a01      	ldr	r2, [sp, #4]
 800d802:	f1c0 0320 	rsb	r3, r0, #32
 800d806:	fa02 f303 	lsl.w	r3, r2, r3
 800d80a:	430b      	orrs	r3, r1
 800d80c:	40c2      	lsrs	r2, r0
 800d80e:	617b      	str	r3, [r7, #20]
 800d810:	9201      	str	r2, [sp, #4]
 800d812:	9b01      	ldr	r3, [sp, #4]
 800d814:	61bb      	str	r3, [r7, #24]
 800d816:	2b00      	cmp	r3, #0
 800d818:	bf14      	ite	ne
 800d81a:	2102      	movne	r1, #2
 800d81c:	2101      	moveq	r1, #1
 800d81e:	6139      	str	r1, [r7, #16]
 800d820:	b1c4      	cbz	r4, 800d854 <__d2b+0x88>
 800d822:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d826:	4404      	add	r4, r0
 800d828:	6034      	str	r4, [r6, #0]
 800d82a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d82e:	6028      	str	r0, [r5, #0]
 800d830:	4638      	mov	r0, r7
 800d832:	b003      	add	sp, #12
 800d834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d83c:	e7d5      	b.n	800d7ea <__d2b+0x1e>
 800d83e:	6179      	str	r1, [r7, #20]
 800d840:	e7e7      	b.n	800d812 <__d2b+0x46>
 800d842:	a801      	add	r0, sp, #4
 800d844:	f7ff fd63 	bl	800d30e <__lo0bits>
 800d848:	9b01      	ldr	r3, [sp, #4]
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	2101      	movs	r1, #1
 800d84e:	6139      	str	r1, [r7, #16]
 800d850:	3020      	adds	r0, #32
 800d852:	e7e5      	b.n	800d820 <__d2b+0x54>
 800d854:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d85c:	6030      	str	r0, [r6, #0]
 800d85e:	6918      	ldr	r0, [r3, #16]
 800d860:	f7ff fd36 	bl	800d2d0 <__hi0bits>
 800d864:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d868:	e7e1      	b.n	800d82e <__d2b+0x62>

0800d86a <__ratio>:
 800d86a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86e:	4688      	mov	r8, r1
 800d870:	4669      	mov	r1, sp
 800d872:	4681      	mov	r9, r0
 800d874:	f7ff ff5c 	bl	800d730 <__b2d>
 800d878:	a901      	add	r1, sp, #4
 800d87a:	4640      	mov	r0, r8
 800d87c:	ec57 6b10 	vmov	r6, r7, d0
 800d880:	f7ff ff56 	bl	800d730 <__b2d>
 800d884:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d888:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d88c:	eba3 0c02 	sub.w	ip, r3, r2
 800d890:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d894:	1a9b      	subs	r3, r3, r2
 800d896:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d89a:	ec5b ab10 	vmov	sl, fp, d0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bfce      	itee	gt
 800d8a2:	463a      	movgt	r2, r7
 800d8a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8a8:	465a      	movle	r2, fp
 800d8aa:	4659      	mov	r1, fp
 800d8ac:	463d      	mov	r5, r7
 800d8ae:	bfd4      	ite	le
 800d8b0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d8b4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	ee10 2a10 	vmov	r2, s0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f7f2 ffeb 	bl	800089c <__aeabi_ddiv>
 800d8c6:	ec41 0b10 	vmov	d0, r0, r1
 800d8ca:	b003      	add	sp, #12
 800d8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8d0 <__copybits>:
 800d8d0:	3901      	subs	r1, #1
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	1149      	asrs	r1, r1, #5
 800d8d6:	6914      	ldr	r4, [r2, #16]
 800d8d8:	3101      	adds	r1, #1
 800d8da:	f102 0314 	add.w	r3, r2, #20
 800d8de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8e6:	42a3      	cmp	r3, r4
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	d303      	bcc.n	800d8f4 <__copybits+0x24>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	428a      	cmp	r2, r1
 800d8f0:	d305      	bcc.n	800d8fe <__copybits+0x2e>
 800d8f2:	bd10      	pop	{r4, pc}
 800d8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f8:	f840 2b04 	str.w	r2, [r0], #4
 800d8fc:	e7f3      	b.n	800d8e6 <__copybits+0x16>
 800d8fe:	f842 3b04 	str.w	r3, [r2], #4
 800d902:	e7f4      	b.n	800d8ee <__copybits+0x1e>

0800d904 <__any_on>:
 800d904:	f100 0214 	add.w	r2, r0, #20
 800d908:	6900      	ldr	r0, [r0, #16]
 800d90a:	114b      	asrs	r3, r1, #5
 800d90c:	4298      	cmp	r0, r3
 800d90e:	b510      	push	{r4, lr}
 800d910:	db11      	blt.n	800d936 <__any_on+0x32>
 800d912:	dd0a      	ble.n	800d92a <__any_on+0x26>
 800d914:	f011 011f 	ands.w	r1, r1, #31
 800d918:	d007      	beq.n	800d92a <__any_on+0x26>
 800d91a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d91e:	fa24 f001 	lsr.w	r0, r4, r1
 800d922:	fa00 f101 	lsl.w	r1, r0, r1
 800d926:	428c      	cmp	r4, r1
 800d928:	d10b      	bne.n	800d942 <__any_on+0x3e>
 800d92a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d92e:	4293      	cmp	r3, r2
 800d930:	d803      	bhi.n	800d93a <__any_on+0x36>
 800d932:	2000      	movs	r0, #0
 800d934:	bd10      	pop	{r4, pc}
 800d936:	4603      	mov	r3, r0
 800d938:	e7f7      	b.n	800d92a <__any_on+0x26>
 800d93a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d93e:	2900      	cmp	r1, #0
 800d940:	d0f5      	beq.n	800d92e <__any_on+0x2a>
 800d942:	2001      	movs	r0, #1
 800d944:	e7f6      	b.n	800d934 <__any_on+0x30>

0800d946 <_calloc_r>:
 800d946:	b538      	push	{r3, r4, r5, lr}
 800d948:	fb02 f401 	mul.w	r4, r2, r1
 800d94c:	4621      	mov	r1, r4
 800d94e:	f000 f857 	bl	800da00 <_malloc_r>
 800d952:	4605      	mov	r5, r0
 800d954:	b118      	cbz	r0, 800d95e <_calloc_r+0x18>
 800d956:	4622      	mov	r2, r4
 800d958:	2100      	movs	r1, #0
 800d95a:	f7fc fd08 	bl	800a36e <memset>
 800d95e:	4628      	mov	r0, r5
 800d960:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d964 <_free_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4605      	mov	r5, r0
 800d968:	2900      	cmp	r1, #0
 800d96a:	d045      	beq.n	800d9f8 <_free_r+0x94>
 800d96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d970:	1f0c      	subs	r4, r1, #4
 800d972:	2b00      	cmp	r3, #0
 800d974:	bfb8      	it	lt
 800d976:	18e4      	addlt	r4, r4, r3
 800d978:	f000 fa36 	bl	800dde8 <__malloc_lock>
 800d97c:	4a1f      	ldr	r2, [pc, #124]	; (800d9fc <_free_r+0x98>)
 800d97e:	6813      	ldr	r3, [r2, #0]
 800d980:	4610      	mov	r0, r2
 800d982:	b933      	cbnz	r3, 800d992 <_free_r+0x2e>
 800d984:	6063      	str	r3, [r4, #4]
 800d986:	6014      	str	r4, [r2, #0]
 800d988:	4628      	mov	r0, r5
 800d98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d98e:	f000 ba2c 	b.w	800ddea <__malloc_unlock>
 800d992:	42a3      	cmp	r3, r4
 800d994:	d90c      	bls.n	800d9b0 <_free_r+0x4c>
 800d996:	6821      	ldr	r1, [r4, #0]
 800d998:	1862      	adds	r2, r4, r1
 800d99a:	4293      	cmp	r3, r2
 800d99c:	bf04      	itt	eq
 800d99e:	681a      	ldreq	r2, [r3, #0]
 800d9a0:	685b      	ldreq	r3, [r3, #4]
 800d9a2:	6063      	str	r3, [r4, #4]
 800d9a4:	bf04      	itt	eq
 800d9a6:	1852      	addeq	r2, r2, r1
 800d9a8:	6022      	streq	r2, [r4, #0]
 800d9aa:	6004      	str	r4, [r0, #0]
 800d9ac:	e7ec      	b.n	800d988 <_free_r+0x24>
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	685a      	ldr	r2, [r3, #4]
 800d9b2:	b10a      	cbz	r2, 800d9b8 <_free_r+0x54>
 800d9b4:	42a2      	cmp	r2, r4
 800d9b6:	d9fa      	bls.n	800d9ae <_free_r+0x4a>
 800d9b8:	6819      	ldr	r1, [r3, #0]
 800d9ba:	1858      	adds	r0, r3, r1
 800d9bc:	42a0      	cmp	r0, r4
 800d9be:	d10b      	bne.n	800d9d8 <_free_r+0x74>
 800d9c0:	6820      	ldr	r0, [r4, #0]
 800d9c2:	4401      	add	r1, r0
 800d9c4:	1858      	adds	r0, r3, r1
 800d9c6:	4282      	cmp	r2, r0
 800d9c8:	6019      	str	r1, [r3, #0]
 800d9ca:	d1dd      	bne.n	800d988 <_free_r+0x24>
 800d9cc:	6810      	ldr	r0, [r2, #0]
 800d9ce:	6852      	ldr	r2, [r2, #4]
 800d9d0:	605a      	str	r2, [r3, #4]
 800d9d2:	4401      	add	r1, r0
 800d9d4:	6019      	str	r1, [r3, #0]
 800d9d6:	e7d7      	b.n	800d988 <_free_r+0x24>
 800d9d8:	d902      	bls.n	800d9e0 <_free_r+0x7c>
 800d9da:	230c      	movs	r3, #12
 800d9dc:	602b      	str	r3, [r5, #0]
 800d9de:	e7d3      	b.n	800d988 <_free_r+0x24>
 800d9e0:	6820      	ldr	r0, [r4, #0]
 800d9e2:	1821      	adds	r1, r4, r0
 800d9e4:	428a      	cmp	r2, r1
 800d9e6:	bf04      	itt	eq
 800d9e8:	6811      	ldreq	r1, [r2, #0]
 800d9ea:	6852      	ldreq	r2, [r2, #4]
 800d9ec:	6062      	str	r2, [r4, #4]
 800d9ee:	bf04      	itt	eq
 800d9f0:	1809      	addeq	r1, r1, r0
 800d9f2:	6021      	streq	r1, [r4, #0]
 800d9f4:	605c      	str	r4, [r3, #4]
 800d9f6:	e7c7      	b.n	800d988 <_free_r+0x24>
 800d9f8:	bd38      	pop	{r3, r4, r5, pc}
 800d9fa:	bf00      	nop
 800d9fc:	20007c50 	.word	0x20007c50

0800da00 <_malloc_r>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	1ccd      	adds	r5, r1, #3
 800da04:	f025 0503 	bic.w	r5, r5, #3
 800da08:	3508      	adds	r5, #8
 800da0a:	2d0c      	cmp	r5, #12
 800da0c:	bf38      	it	cc
 800da0e:	250c      	movcc	r5, #12
 800da10:	2d00      	cmp	r5, #0
 800da12:	4606      	mov	r6, r0
 800da14:	db01      	blt.n	800da1a <_malloc_r+0x1a>
 800da16:	42a9      	cmp	r1, r5
 800da18:	d903      	bls.n	800da22 <_malloc_r+0x22>
 800da1a:	230c      	movs	r3, #12
 800da1c:	6033      	str	r3, [r6, #0]
 800da1e:	2000      	movs	r0, #0
 800da20:	bd70      	pop	{r4, r5, r6, pc}
 800da22:	f000 f9e1 	bl	800dde8 <__malloc_lock>
 800da26:	4a21      	ldr	r2, [pc, #132]	; (800daac <_malloc_r+0xac>)
 800da28:	6814      	ldr	r4, [r2, #0]
 800da2a:	4621      	mov	r1, r4
 800da2c:	b991      	cbnz	r1, 800da54 <_malloc_r+0x54>
 800da2e:	4c20      	ldr	r4, [pc, #128]	; (800dab0 <_malloc_r+0xb0>)
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	b91b      	cbnz	r3, 800da3c <_malloc_r+0x3c>
 800da34:	4630      	mov	r0, r6
 800da36:	f000 f98f 	bl	800dd58 <_sbrk_r>
 800da3a:	6020      	str	r0, [r4, #0]
 800da3c:	4629      	mov	r1, r5
 800da3e:	4630      	mov	r0, r6
 800da40:	f000 f98a 	bl	800dd58 <_sbrk_r>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d124      	bne.n	800da92 <_malloc_r+0x92>
 800da48:	230c      	movs	r3, #12
 800da4a:	6033      	str	r3, [r6, #0]
 800da4c:	4630      	mov	r0, r6
 800da4e:	f000 f9cc 	bl	800ddea <__malloc_unlock>
 800da52:	e7e4      	b.n	800da1e <_malloc_r+0x1e>
 800da54:	680b      	ldr	r3, [r1, #0]
 800da56:	1b5b      	subs	r3, r3, r5
 800da58:	d418      	bmi.n	800da8c <_malloc_r+0x8c>
 800da5a:	2b0b      	cmp	r3, #11
 800da5c:	d90f      	bls.n	800da7e <_malloc_r+0x7e>
 800da5e:	600b      	str	r3, [r1, #0]
 800da60:	50cd      	str	r5, [r1, r3]
 800da62:	18cc      	adds	r4, r1, r3
 800da64:	4630      	mov	r0, r6
 800da66:	f000 f9c0 	bl	800ddea <__malloc_unlock>
 800da6a:	f104 000b 	add.w	r0, r4, #11
 800da6e:	1d23      	adds	r3, r4, #4
 800da70:	f020 0007 	bic.w	r0, r0, #7
 800da74:	1ac3      	subs	r3, r0, r3
 800da76:	d0d3      	beq.n	800da20 <_malloc_r+0x20>
 800da78:	425a      	negs	r2, r3
 800da7a:	50e2      	str	r2, [r4, r3]
 800da7c:	e7d0      	b.n	800da20 <_malloc_r+0x20>
 800da7e:	428c      	cmp	r4, r1
 800da80:	684b      	ldr	r3, [r1, #4]
 800da82:	bf16      	itet	ne
 800da84:	6063      	strne	r3, [r4, #4]
 800da86:	6013      	streq	r3, [r2, #0]
 800da88:	460c      	movne	r4, r1
 800da8a:	e7eb      	b.n	800da64 <_malloc_r+0x64>
 800da8c:	460c      	mov	r4, r1
 800da8e:	6849      	ldr	r1, [r1, #4]
 800da90:	e7cc      	b.n	800da2c <_malloc_r+0x2c>
 800da92:	1cc4      	adds	r4, r0, #3
 800da94:	f024 0403 	bic.w	r4, r4, #3
 800da98:	42a0      	cmp	r0, r4
 800da9a:	d005      	beq.n	800daa8 <_malloc_r+0xa8>
 800da9c:	1a21      	subs	r1, r4, r0
 800da9e:	4630      	mov	r0, r6
 800daa0:	f000 f95a 	bl	800dd58 <_sbrk_r>
 800daa4:	3001      	adds	r0, #1
 800daa6:	d0cf      	beq.n	800da48 <_malloc_r+0x48>
 800daa8:	6025      	str	r5, [r4, #0]
 800daaa:	e7db      	b.n	800da64 <_malloc_r+0x64>
 800daac:	20007c50 	.word	0x20007c50
 800dab0:	20007c54 	.word	0x20007c54

0800dab4 <__ssputs_r>:
 800dab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab8:	688e      	ldr	r6, [r1, #8]
 800daba:	429e      	cmp	r6, r3
 800dabc:	4682      	mov	sl, r0
 800dabe:	460c      	mov	r4, r1
 800dac0:	4690      	mov	r8, r2
 800dac2:	4699      	mov	r9, r3
 800dac4:	d837      	bhi.n	800db36 <__ssputs_r+0x82>
 800dac6:	898a      	ldrh	r2, [r1, #12]
 800dac8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dacc:	d031      	beq.n	800db32 <__ssputs_r+0x7e>
 800dace:	6825      	ldr	r5, [r4, #0]
 800dad0:	6909      	ldr	r1, [r1, #16]
 800dad2:	1a6f      	subs	r7, r5, r1
 800dad4:	6965      	ldr	r5, [r4, #20]
 800dad6:	2302      	movs	r3, #2
 800dad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dadc:	fb95 f5f3 	sdiv	r5, r5, r3
 800dae0:	f109 0301 	add.w	r3, r9, #1
 800dae4:	443b      	add	r3, r7
 800dae6:	429d      	cmp	r5, r3
 800dae8:	bf38      	it	cc
 800daea:	461d      	movcc	r5, r3
 800daec:	0553      	lsls	r3, r2, #21
 800daee:	d530      	bpl.n	800db52 <__ssputs_r+0x9e>
 800daf0:	4629      	mov	r1, r5
 800daf2:	f7ff ff85 	bl	800da00 <_malloc_r>
 800daf6:	4606      	mov	r6, r0
 800daf8:	b950      	cbnz	r0, 800db10 <__ssputs_r+0x5c>
 800dafa:	230c      	movs	r3, #12
 800dafc:	f8ca 3000 	str.w	r3, [sl]
 800db00:	89a3      	ldrh	r3, [r4, #12]
 800db02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db06:	81a3      	strh	r3, [r4, #12]
 800db08:	f04f 30ff 	mov.w	r0, #4294967295
 800db0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db10:	463a      	mov	r2, r7
 800db12:	6921      	ldr	r1, [r4, #16]
 800db14:	f7fc fc20 	bl	800a358 <memcpy>
 800db18:	89a3      	ldrh	r3, [r4, #12]
 800db1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db22:	81a3      	strh	r3, [r4, #12]
 800db24:	6126      	str	r6, [r4, #16]
 800db26:	6165      	str	r5, [r4, #20]
 800db28:	443e      	add	r6, r7
 800db2a:	1bed      	subs	r5, r5, r7
 800db2c:	6026      	str	r6, [r4, #0]
 800db2e:	60a5      	str	r5, [r4, #8]
 800db30:	464e      	mov	r6, r9
 800db32:	454e      	cmp	r6, r9
 800db34:	d900      	bls.n	800db38 <__ssputs_r+0x84>
 800db36:	464e      	mov	r6, r9
 800db38:	4632      	mov	r2, r6
 800db3a:	4641      	mov	r1, r8
 800db3c:	6820      	ldr	r0, [r4, #0]
 800db3e:	f000 f93a 	bl	800ddb6 <memmove>
 800db42:	68a3      	ldr	r3, [r4, #8]
 800db44:	1b9b      	subs	r3, r3, r6
 800db46:	60a3      	str	r3, [r4, #8]
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	441e      	add	r6, r3
 800db4c:	6026      	str	r6, [r4, #0]
 800db4e:	2000      	movs	r0, #0
 800db50:	e7dc      	b.n	800db0c <__ssputs_r+0x58>
 800db52:	462a      	mov	r2, r5
 800db54:	f000 f94a 	bl	800ddec <_realloc_r>
 800db58:	4606      	mov	r6, r0
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d1e2      	bne.n	800db24 <__ssputs_r+0x70>
 800db5e:	6921      	ldr	r1, [r4, #16]
 800db60:	4650      	mov	r0, sl
 800db62:	f7ff feff 	bl	800d964 <_free_r>
 800db66:	e7c8      	b.n	800dafa <__ssputs_r+0x46>

0800db68 <_svfiprintf_r>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	461d      	mov	r5, r3
 800db6e:	898b      	ldrh	r3, [r1, #12]
 800db70:	061f      	lsls	r7, r3, #24
 800db72:	b09d      	sub	sp, #116	; 0x74
 800db74:	4680      	mov	r8, r0
 800db76:	460c      	mov	r4, r1
 800db78:	4616      	mov	r6, r2
 800db7a:	d50f      	bpl.n	800db9c <_svfiprintf_r+0x34>
 800db7c:	690b      	ldr	r3, [r1, #16]
 800db7e:	b96b      	cbnz	r3, 800db9c <_svfiprintf_r+0x34>
 800db80:	2140      	movs	r1, #64	; 0x40
 800db82:	f7ff ff3d 	bl	800da00 <_malloc_r>
 800db86:	6020      	str	r0, [r4, #0]
 800db88:	6120      	str	r0, [r4, #16]
 800db8a:	b928      	cbnz	r0, 800db98 <_svfiprintf_r+0x30>
 800db8c:	230c      	movs	r3, #12
 800db8e:	f8c8 3000 	str.w	r3, [r8]
 800db92:	f04f 30ff 	mov.w	r0, #4294967295
 800db96:	e0c8      	b.n	800dd2a <_svfiprintf_r+0x1c2>
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	6163      	str	r3, [r4, #20]
 800db9c:	2300      	movs	r3, #0
 800db9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dba0:	2320      	movs	r3, #32
 800dba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dba6:	2330      	movs	r3, #48	; 0x30
 800dba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbac:	9503      	str	r5, [sp, #12]
 800dbae:	f04f 0b01 	mov.w	fp, #1
 800dbb2:	4637      	mov	r7, r6
 800dbb4:	463d      	mov	r5, r7
 800dbb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dbba:	b10b      	cbz	r3, 800dbc0 <_svfiprintf_r+0x58>
 800dbbc:	2b25      	cmp	r3, #37	; 0x25
 800dbbe:	d13e      	bne.n	800dc3e <_svfiprintf_r+0xd6>
 800dbc0:	ebb7 0a06 	subs.w	sl, r7, r6
 800dbc4:	d00b      	beq.n	800dbde <_svfiprintf_r+0x76>
 800dbc6:	4653      	mov	r3, sl
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4640      	mov	r0, r8
 800dbce:	f7ff ff71 	bl	800dab4 <__ssputs_r>
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	f000 80a4 	beq.w	800dd20 <_svfiprintf_r+0x1b8>
 800dbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbda:	4453      	add	r3, sl
 800dbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbde:	783b      	ldrb	r3, [r7, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 809d 	beq.w	800dd20 <_svfiprintf_r+0x1b8>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbf0:	9304      	str	r3, [sp, #16]
 800dbf2:	9307      	str	r3, [sp, #28]
 800dbf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbf8:	931a      	str	r3, [sp, #104]	; 0x68
 800dbfa:	462f      	mov	r7, r5
 800dbfc:	2205      	movs	r2, #5
 800dbfe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dc02:	4850      	ldr	r0, [pc, #320]	; (800dd44 <_svfiprintf_r+0x1dc>)
 800dc04:	f7f2 fb14 	bl	8000230 <memchr>
 800dc08:	9b04      	ldr	r3, [sp, #16]
 800dc0a:	b9d0      	cbnz	r0, 800dc42 <_svfiprintf_r+0xda>
 800dc0c:	06d9      	lsls	r1, r3, #27
 800dc0e:	bf44      	itt	mi
 800dc10:	2220      	movmi	r2, #32
 800dc12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc16:	071a      	lsls	r2, r3, #28
 800dc18:	bf44      	itt	mi
 800dc1a:	222b      	movmi	r2, #43	; 0x2b
 800dc1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc20:	782a      	ldrb	r2, [r5, #0]
 800dc22:	2a2a      	cmp	r2, #42	; 0x2a
 800dc24:	d015      	beq.n	800dc52 <_svfiprintf_r+0xea>
 800dc26:	9a07      	ldr	r2, [sp, #28]
 800dc28:	462f      	mov	r7, r5
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	250a      	movs	r5, #10
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc34:	3b30      	subs	r3, #48	; 0x30
 800dc36:	2b09      	cmp	r3, #9
 800dc38:	d94d      	bls.n	800dcd6 <_svfiprintf_r+0x16e>
 800dc3a:	b1b8      	cbz	r0, 800dc6c <_svfiprintf_r+0x104>
 800dc3c:	e00f      	b.n	800dc5e <_svfiprintf_r+0xf6>
 800dc3e:	462f      	mov	r7, r5
 800dc40:	e7b8      	b.n	800dbb4 <_svfiprintf_r+0x4c>
 800dc42:	4a40      	ldr	r2, [pc, #256]	; (800dd44 <_svfiprintf_r+0x1dc>)
 800dc44:	1a80      	subs	r0, r0, r2
 800dc46:	fa0b f000 	lsl.w	r0, fp, r0
 800dc4a:	4318      	orrs	r0, r3
 800dc4c:	9004      	str	r0, [sp, #16]
 800dc4e:	463d      	mov	r5, r7
 800dc50:	e7d3      	b.n	800dbfa <_svfiprintf_r+0x92>
 800dc52:	9a03      	ldr	r2, [sp, #12]
 800dc54:	1d11      	adds	r1, r2, #4
 800dc56:	6812      	ldr	r2, [r2, #0]
 800dc58:	9103      	str	r1, [sp, #12]
 800dc5a:	2a00      	cmp	r2, #0
 800dc5c:	db01      	blt.n	800dc62 <_svfiprintf_r+0xfa>
 800dc5e:	9207      	str	r2, [sp, #28]
 800dc60:	e004      	b.n	800dc6c <_svfiprintf_r+0x104>
 800dc62:	4252      	negs	r2, r2
 800dc64:	f043 0302 	orr.w	r3, r3, #2
 800dc68:	9207      	str	r2, [sp, #28]
 800dc6a:	9304      	str	r3, [sp, #16]
 800dc6c:	783b      	ldrb	r3, [r7, #0]
 800dc6e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc70:	d10c      	bne.n	800dc8c <_svfiprintf_r+0x124>
 800dc72:	787b      	ldrb	r3, [r7, #1]
 800dc74:	2b2a      	cmp	r3, #42	; 0x2a
 800dc76:	d133      	bne.n	800dce0 <_svfiprintf_r+0x178>
 800dc78:	9b03      	ldr	r3, [sp, #12]
 800dc7a:	1d1a      	adds	r2, r3, #4
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	9203      	str	r2, [sp, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	bfb8      	it	lt
 800dc84:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc88:	3702      	adds	r7, #2
 800dc8a:	9305      	str	r3, [sp, #20]
 800dc8c:	4d2e      	ldr	r5, [pc, #184]	; (800dd48 <_svfiprintf_r+0x1e0>)
 800dc8e:	7839      	ldrb	r1, [r7, #0]
 800dc90:	2203      	movs	r2, #3
 800dc92:	4628      	mov	r0, r5
 800dc94:	f7f2 facc 	bl	8000230 <memchr>
 800dc98:	b138      	cbz	r0, 800dcaa <_svfiprintf_r+0x142>
 800dc9a:	2340      	movs	r3, #64	; 0x40
 800dc9c:	1b40      	subs	r0, r0, r5
 800dc9e:	fa03 f000 	lsl.w	r0, r3, r0
 800dca2:	9b04      	ldr	r3, [sp, #16]
 800dca4:	4303      	orrs	r3, r0
 800dca6:	3701      	adds	r7, #1
 800dca8:	9304      	str	r3, [sp, #16]
 800dcaa:	7839      	ldrb	r1, [r7, #0]
 800dcac:	4827      	ldr	r0, [pc, #156]	; (800dd4c <_svfiprintf_r+0x1e4>)
 800dcae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcb2:	2206      	movs	r2, #6
 800dcb4:	1c7e      	adds	r6, r7, #1
 800dcb6:	f7f2 fabb 	bl	8000230 <memchr>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	d038      	beq.n	800dd30 <_svfiprintf_r+0x1c8>
 800dcbe:	4b24      	ldr	r3, [pc, #144]	; (800dd50 <_svfiprintf_r+0x1e8>)
 800dcc0:	bb13      	cbnz	r3, 800dd08 <_svfiprintf_r+0x1a0>
 800dcc2:	9b03      	ldr	r3, [sp, #12]
 800dcc4:	3307      	adds	r3, #7
 800dcc6:	f023 0307 	bic.w	r3, r3, #7
 800dcca:	3308      	adds	r3, #8
 800dccc:	9303      	str	r3, [sp, #12]
 800dcce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcd0:	444b      	add	r3, r9
 800dcd2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd4:	e76d      	b.n	800dbb2 <_svfiprintf_r+0x4a>
 800dcd6:	fb05 3202 	mla	r2, r5, r2, r3
 800dcda:	2001      	movs	r0, #1
 800dcdc:	460f      	mov	r7, r1
 800dcde:	e7a6      	b.n	800dc2e <_svfiprintf_r+0xc6>
 800dce0:	2300      	movs	r3, #0
 800dce2:	3701      	adds	r7, #1
 800dce4:	9305      	str	r3, [sp, #20]
 800dce6:	4619      	mov	r1, r3
 800dce8:	250a      	movs	r5, #10
 800dcea:	4638      	mov	r0, r7
 800dcec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcf0:	3a30      	subs	r2, #48	; 0x30
 800dcf2:	2a09      	cmp	r2, #9
 800dcf4:	d903      	bls.n	800dcfe <_svfiprintf_r+0x196>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d0c8      	beq.n	800dc8c <_svfiprintf_r+0x124>
 800dcfa:	9105      	str	r1, [sp, #20]
 800dcfc:	e7c6      	b.n	800dc8c <_svfiprintf_r+0x124>
 800dcfe:	fb05 2101 	mla	r1, r5, r1, r2
 800dd02:	2301      	movs	r3, #1
 800dd04:	4607      	mov	r7, r0
 800dd06:	e7f0      	b.n	800dcea <_svfiprintf_r+0x182>
 800dd08:	ab03      	add	r3, sp, #12
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	4622      	mov	r2, r4
 800dd0e:	4b11      	ldr	r3, [pc, #68]	; (800dd54 <_svfiprintf_r+0x1ec>)
 800dd10:	a904      	add	r1, sp, #16
 800dd12:	4640      	mov	r0, r8
 800dd14:	f7fc fbc8 	bl	800a4a8 <_printf_float>
 800dd18:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dd1c:	4681      	mov	r9, r0
 800dd1e:	d1d6      	bne.n	800dcce <_svfiprintf_r+0x166>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	065b      	lsls	r3, r3, #25
 800dd24:	f53f af35 	bmi.w	800db92 <_svfiprintf_r+0x2a>
 800dd28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd2a:	b01d      	add	sp, #116	; 0x74
 800dd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd30:	ab03      	add	r3, sp, #12
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	4622      	mov	r2, r4
 800dd36:	4b07      	ldr	r3, [pc, #28]	; (800dd54 <_svfiprintf_r+0x1ec>)
 800dd38:	a904      	add	r1, sp, #16
 800dd3a:	4640      	mov	r0, r8
 800dd3c:	f7fc fe6a 	bl	800aa14 <_printf_i>
 800dd40:	e7ea      	b.n	800dd18 <_svfiprintf_r+0x1b0>
 800dd42:	bf00      	nop
 800dd44:	08010004 	.word	0x08010004
 800dd48:	0801000a 	.word	0x0801000a
 800dd4c:	0801000e 	.word	0x0801000e
 800dd50:	0800a4a9 	.word	0x0800a4a9
 800dd54:	0800dab5 	.word	0x0800dab5

0800dd58 <_sbrk_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4c06      	ldr	r4, [pc, #24]	; (800dd74 <_sbrk_r+0x1c>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4605      	mov	r5, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	6023      	str	r3, [r4, #0]
 800dd64:	f7f5 f908 	bl	8002f78 <_sbrk>
 800dd68:	1c43      	adds	r3, r0, #1
 800dd6a:	d102      	bne.n	800dd72 <_sbrk_r+0x1a>
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	b103      	cbz	r3, 800dd72 <_sbrk_r+0x1a>
 800dd70:	602b      	str	r3, [r5, #0]
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	20008454 	.word	0x20008454

0800dd78 <strncmp>:
 800dd78:	b510      	push	{r4, lr}
 800dd7a:	b16a      	cbz	r2, 800dd98 <strncmp+0x20>
 800dd7c:	3901      	subs	r1, #1
 800dd7e:	1884      	adds	r4, r0, r2
 800dd80:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dd84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d103      	bne.n	800dd94 <strncmp+0x1c>
 800dd8c:	42a0      	cmp	r0, r4
 800dd8e:	d001      	beq.n	800dd94 <strncmp+0x1c>
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1f5      	bne.n	800dd80 <strncmp+0x8>
 800dd94:	1a98      	subs	r0, r3, r2
 800dd96:	bd10      	pop	{r4, pc}
 800dd98:	4610      	mov	r0, r2
 800dd9a:	e7fc      	b.n	800dd96 <strncmp+0x1e>

0800dd9c <__ascii_wctomb>:
 800dd9c:	b149      	cbz	r1, 800ddb2 <__ascii_wctomb+0x16>
 800dd9e:	2aff      	cmp	r2, #255	; 0xff
 800dda0:	bf85      	ittet	hi
 800dda2:	238a      	movhi	r3, #138	; 0x8a
 800dda4:	6003      	strhi	r3, [r0, #0]
 800dda6:	700a      	strbls	r2, [r1, #0]
 800dda8:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddac:	bf98      	it	ls
 800ddae:	2001      	movls	r0, #1
 800ddb0:	4770      	bx	lr
 800ddb2:	4608      	mov	r0, r1
 800ddb4:	4770      	bx	lr

0800ddb6 <memmove>:
 800ddb6:	4288      	cmp	r0, r1
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	eb01 0302 	add.w	r3, r1, r2
 800ddbe:	d807      	bhi.n	800ddd0 <memmove+0x1a>
 800ddc0:	1e42      	subs	r2, r0, #1
 800ddc2:	4299      	cmp	r1, r3
 800ddc4:	d00a      	beq.n	800dddc <memmove+0x26>
 800ddc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddca:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ddce:	e7f8      	b.n	800ddc2 <memmove+0xc>
 800ddd0:	4283      	cmp	r3, r0
 800ddd2:	d9f5      	bls.n	800ddc0 <memmove+0xa>
 800ddd4:	1881      	adds	r1, r0, r2
 800ddd6:	1ad2      	subs	r2, r2, r3
 800ddd8:	42d3      	cmn	r3, r2
 800ddda:	d100      	bne.n	800ddde <memmove+0x28>
 800dddc:	bd10      	pop	{r4, pc}
 800ddde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dde2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dde6:	e7f7      	b.n	800ddd8 <memmove+0x22>

0800dde8 <__malloc_lock>:
 800dde8:	4770      	bx	lr

0800ddea <__malloc_unlock>:
 800ddea:	4770      	bx	lr

0800ddec <_realloc_r>:
 800ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddee:	4607      	mov	r7, r0
 800ddf0:	4614      	mov	r4, r2
 800ddf2:	460e      	mov	r6, r1
 800ddf4:	b921      	cbnz	r1, 800de00 <_realloc_r+0x14>
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ddfc:	f7ff be00 	b.w	800da00 <_malloc_r>
 800de00:	b922      	cbnz	r2, 800de0c <_realloc_r+0x20>
 800de02:	f7ff fdaf 	bl	800d964 <_free_r>
 800de06:	4625      	mov	r5, r4
 800de08:	4628      	mov	r0, r5
 800de0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de0c:	f000 f814 	bl	800de38 <_malloc_usable_size_r>
 800de10:	42a0      	cmp	r0, r4
 800de12:	d20f      	bcs.n	800de34 <_realloc_r+0x48>
 800de14:	4621      	mov	r1, r4
 800de16:	4638      	mov	r0, r7
 800de18:	f7ff fdf2 	bl	800da00 <_malloc_r>
 800de1c:	4605      	mov	r5, r0
 800de1e:	2800      	cmp	r0, #0
 800de20:	d0f2      	beq.n	800de08 <_realloc_r+0x1c>
 800de22:	4631      	mov	r1, r6
 800de24:	4622      	mov	r2, r4
 800de26:	f7fc fa97 	bl	800a358 <memcpy>
 800de2a:	4631      	mov	r1, r6
 800de2c:	4638      	mov	r0, r7
 800de2e:	f7ff fd99 	bl	800d964 <_free_r>
 800de32:	e7e9      	b.n	800de08 <_realloc_r+0x1c>
 800de34:	4635      	mov	r5, r6
 800de36:	e7e7      	b.n	800de08 <_realloc_r+0x1c>

0800de38 <_malloc_usable_size_r>:
 800de38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de3c:	1f18      	subs	r0, r3, #4
 800de3e:	2b00      	cmp	r3, #0
 800de40:	bfbc      	itt	lt
 800de42:	580b      	ldrlt	r3, [r1, r0]
 800de44:	18c0      	addlt	r0, r0, r3
 800de46:	4770      	bx	lr

0800de48 <_init>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	bf00      	nop
 800de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4e:	bc08      	pop	{r3}
 800de50:	469e      	mov	lr, r3
 800de52:	4770      	bx	lr

0800de54 <_fini>:
 800de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de56:	bf00      	nop
 800de58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de5a:	bc08      	pop	{r3}
 800de5c:	469e      	mov	lr, r3
 800de5e:	4770      	bx	lr
