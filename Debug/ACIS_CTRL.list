
ACIS_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd10  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022c0  0800def0  0800def0  0001def0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101b0  080101b0  00032a30  2**0
                  CONTENTS
  4 .ARM          00000008  080101b0  080101b0  000201b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101b8  080101b8  00032a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101b8  080101b8  000201b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101bc  080101bc  000201bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a30  20000000  080101c0  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a5c  20002a30  08012bf0  00032a30  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000848c  08012bf0  0003848c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a464  00000000  00000000  00032a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005948  00000000  00000000  0005cec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  00062810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cc0  00000000  00000000  00064038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027b69  00000000  00000000  00065cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018180  00000000  00000000  0008d861  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecc44  00000000  00000000  000a59e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058bc  00000000  00000000  001926a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ebc2  00000000  00000000  00197f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a30 	.word	0x20002a30
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ded8 	.word	0x0800ded8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a34 	.word	0x20002a34
 800021c:	0800ded8 	.word	0x0800ded8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <PK_Copy>:
PACKET_C(PK_GeneralStatusRequest);
PACKET_C(PK_GeneralStatusResponse);


int8_t PK_Copy(void * dest, void * source)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  if(dest == 0 || source == 0) return -1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <PK_Copy+0x16>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <PK_Copy+0x1c>
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e032      	b.n	800105a <PK_Copy+0x82>
  uint8_t * dest_data = (uint8_t*)dest;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	617b      	str	r3, [r7, #20]
  uint8_t * source_data = (uint8_t*)source;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
  int8_t length = dest_data[1];
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	73bb      	strb	r3, [r7, #14]
  if(dest_data[1] != source_data[1] || dest_data[0] != source_data[0] || length == 0 || length > 384) return -2;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d109      	bne.n	8001028 <PK_Copy+0x50>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d103      	bne.n	8001028 <PK_Copy+0x50>
 8001020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <PK_Copy+0x56>
 8001028:	f06f 0301 	mvn.w	r3, #1
 800102c:	e015      	b.n	800105a <PK_Copy+0x82>
  for(uint8_t i=2;i<length+2;i++)
 800102e:	2302      	movs	r3, #2
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e00a      	b.n	800104a <PK_Copy+0x72>
    *dest_data++ = *source_data++;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	1c53      	adds	r3, r2, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	1c59      	adds	r1, r3, #1
 800103e:	6179      	str	r1, [r7, #20]
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=2;i<length+2;i++)
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	3301      	adds	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001050:	3302      	adds	r3, #2
 8001052:	429a      	cmp	r2, r3
 8001054:	dbee      	blt.n	8001034 <PK_Copy+0x5c>
  return length;
 8001056:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800105a:	4618      	mov	r0, r3
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <acis_gui_task>:
volatile uint8_t StatusTimeout = 0;

static int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

static void acis_gui_task(void * argument)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	6078      	str	r0, [r7, #4]
  eMenuItem_t eMenuItem = MenuMain;
 8001070:	2301      	movs	r3, #1
 8001072:	75fb      	strb	r3, [r7, #23]
  eMenuItem_t eOldMenu = MenuUndefined;
 8001074:	2300      	movs	r3, #0
 8001076:	75bb      	strb	r3, [r7, #22]
  uint32_t display_timeout = Delay_Tick;
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <acis_gui_task+0x1ac>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t now;


  while(1)
  {
    if(StatusValveNum == 1)
 800107e:	4b66      	ldr	r3, [pc, #408]	; (8001218 <acis_gui_task+0x1b0>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10c      	bne.n	80010a2 <acis_gui_task+0x3a>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108e:	4863      	ldr	r0, [pc, #396]	; (800121c <acis_gui_task+0x1b4>)
 8001090:	f004 f8c0 	bl	8005214 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109a:	4860      	ldr	r0, [pc, #384]	; (800121c <acis_gui_task+0x1b4>)
 800109c:	f004 f8ba 	bl	8005214 <HAL_GPIO_WritePin>
 80010a0:	e01d      	b.n	80010de <acis_gui_task+0x76>
    }
    else if(StatusValveNum == 2)
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <acis_gui_task+0x1b0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d10c      	bne.n	80010c6 <acis_gui_task+0x5e>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b2:	485a      	ldr	r0, [pc, #360]	; (800121c <acis_gui_task+0x1b4>)
 80010b4:	f004 f8ae 	bl	8005214 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010be:	4857      	ldr	r0, [pc, #348]	; (800121c <acis_gui_task+0x1b4>)
 80010c0:	f004 f8a8 	bl	8005214 <HAL_GPIO_WritePin>
 80010c4:	e00b      	b.n	80010de <acis_gui_task+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010cc:	4853      	ldr	r0, [pc, #332]	; (800121c <acis_gui_task+0x1b4>)
 80010ce:	f004 f8a1 	bl	8005214 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4850      	ldr	r0, [pc, #320]	; (800121c <acis_gui_task+0x1b4>)
 80010da:	f004 f89b 	bl	8005214 <HAL_GPIO_WritePin>
    }

    if(StatusCheck)
 80010de:	4b50      	ldr	r3, [pc, #320]	; (8001220 <acis_gui_task+0x1b8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <acis_gui_task+0x8e>
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ee:	484b      	ldr	r0, [pc, #300]	; (800121c <acis_gui_task+0x1b4>)
 80010f0:	f004 f890 	bl	8005214 <HAL_GPIO_WritePin>
 80010f4:	e005      	b.n	8001102 <acis_gui_task+0x9a>
    else HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4847      	ldr	r0, [pc, #284]	; (800121c <acis_gui_task+0x1b4>)
 80010fe:	f004 f889 	bl	8005214 <HAL_GPIO_WritePin>

    now = Delay_Tick;
 8001102:	4b44      	ldr	r3, [pc, #272]	; (8001214 <acis_gui_task+0x1ac>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	60fb      	str	r3, [r7, #12]
    if(eMenuItem != eOldMenu)
 8001108:	7dfa      	ldrb	r2, [r7, #23]
 800110a:	7dbb      	ldrb	r3, [r7, #22]
 800110c:	429a      	cmp	r2, r3
 800110e:	d102      	bne.n	8001116 <acis_gui_task+0xae>
    {
    }
    else
    {
      osDelay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f005 fe6d 	bl	8006df0 <osDelay>
    }

    switch (eMenuItem)
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d174      	bne.n	8001206 <acis_gui_task+0x19e>
    {
      case MenuMain :
      {

        if(DelayDiff(now, display_timeout) > 150000)
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 fcf8 	bl	8001b14 <DelayDiff>
 8001124:	4602      	mov	r2, r0
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <acis_gui_task+0x1bc>)
 8001128:	429a      	cmp	r2, r3
 800112a:	d96f      	bls.n	800120c <acis_gui_task+0x1a4>
        {
          display_timeout = now;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	613b      	str	r3, [r7, #16]
          lcd_clear();
 8001130:	f000 fe1e 	bl	8001d70 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8001134:	2301      	movs	r3, #1
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	2000      	movs	r0, #0
 8001140:	f000 ff01 	bl	8001f46 <lcd_rect>
          font_setFont(&rre_12x16);
 8001144:	4838      	ldr	r0, [pc, #224]	; (8001228 <acis_gui_task+0x1c0>)
 8001146:	f007 fe51 	bl	8008dec <font_setFont>
          font_printf(4,4,"RPM:   %5.0f",StatusRPM);
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <acis_gui_task+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa22 	bl	8000598 <__aeabi_f2d>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	e9cd 3400 	strd	r3, r4, [sp]
 800115c:	4a34      	ldr	r2, [pc, #208]	; (8001230 <acis_gui_task+0x1c8>)
 800115e:	2104      	movs	r1, #4
 8001160:	2004      	movs	r0, #4
 8001162:	f009 f865 	bl	800a230 <font_printf>
          font_printf(4,4+font_getHeight(),"Load:    %3.0f%%", StatusLoad);
 8001166:	f007 fde7 	bl	8008d38 <font_getHeight>
 800116a:	4603      	mov	r3, r0
 800116c:	1d1d      	adds	r5, r3, #4
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <acis_gui_task+0x1cc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fa10 	bl	8000598 <__aeabi_f2d>
 8001178:	4603      	mov	r3, r0
 800117a:	460c      	mov	r4, r1
 800117c:	e9cd 3400 	strd	r3, r4, [sp]
 8001180:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <acis_gui_task+0x1d0>)
 8001182:	4629      	mov	r1, r5
 8001184:	2004      	movs	r0, #4
 8001186:	f009 f853 	bl	800a230 <font_printf>
          font_printf(4,4+font_getHeight()*2,"Ign:       %3.0fd", StatusIgnition);
 800118a:	f007 fdd5 	bl	8008d38 <font_getHeight>
 800118e:	4603      	mov	r3, r0
 8001190:	3302      	adds	r3, #2
 8001192:	005d      	lsls	r5, r3, #1
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <acis_gui_task+0x1d4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9fd 	bl	8000598 <__aeabi_f2d>
 800119e:	4603      	mov	r3, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	e9cd 3400 	strd	r3, r4, [sp]
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <acis_gui_task+0x1d8>)
 80011a8:	4629      	mov	r1, r5
 80011aa:	2004      	movs	r0, #4
 80011ac:	f009 f840 	bl	800a230 <font_printf>
          font_setFont(&rre_5x8);
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <acis_gui_task+0x1dc>)
 80011b2:	f007 fe1b 	bl	8008dec <font_setFont>
          font_printf(4,53,"%d: %-11s", StatusTableNum+1, StatusTableName);
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <acis_gui_task+0x1e0>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <acis_gui_task+0x1e4>)
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	4a22      	ldr	r2, [pc, #136]	; (8001250 <acis_gui_task+0x1e8>)
 80011c6:	2135      	movs	r1, #53	; 0x35
 80011c8:	2004      	movs	r0, #4
 80011ca:	f009 f831 	bl	800a230 <font_printf>
          if(StatusTimeout)
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <acis_gui_task+0x1ec>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <acis_gui_task+0x17c>
            font_printf(72,53,"Timeout!");
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <acis_gui_task+0x1f0>)
 80011da:	2135      	movs	r1, #53	; 0x35
 80011dc:	2048      	movs	r0, #72	; 0x48
 80011de:	f009 f827 	bl	800a230 <font_printf>
 80011e2:	e00d      	b.n	8001200 <acis_gui_task+0x198>
          else
            font_printf(72,53,"U: %4.1fV",StatusVoltage);
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <acis_gui_task+0x1f4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9d5 	bl	8000598 <__aeabi_f2d>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	e9cd 3400 	strd	r3, r4, [sp]
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <acis_gui_task+0x1f8>)
 80011f8:	2135      	movs	r1, #53	; 0x35
 80011fa:	2048      	movs	r0, #72	; 0x48
 80011fc:	f009 f818 	bl	800a230 <font_printf>
          lcd_update();
 8001200:	f000 fd2a 	bl	8001c58 <lcd_update>
        }

        break;
 8001204:	e002      	b.n	800120c <acis_gui_task+0x1a4>
      }
      default :
        eMenuItem = MenuMain;
 8001206:	2301      	movs	r3, #1
 8001208:	75fb      	strb	r3, [r7, #23]
        break;
 800120a:	e000      	b.n	800120e <acis_gui_task+0x1a6>
        break;
 800120c:	bf00      	nop
    }

    eOldMenu = eMenuItem;
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	75bb      	strb	r3, [r7, #22]
    if(StatusValveNum == 1)
 8001212:	e734      	b.n	800107e <acis_gui_task+0x16>
 8001214:	40000c00 	.word	0x40000c00
 8001218:	20002a61 	.word	0x20002a61
 800121c:	40020400 	.word	0x40020400
 8001220:	20002a62 	.word	0x20002a62
 8001224:	000249f0 	.word	0x000249f0
 8001228:	20002820 	.word	0x20002820
 800122c:	20002a4c 	.word	0x20002a4c
 8001230:	0800defc 	.word	0x0800defc
 8001234:	20002a50 	.word	0x20002a50
 8001238:	0800df0c 	.word	0x0800df0c
 800123c:	20002a58 	.word	0x20002a58
 8001240:	0800df20 	.word	0x0800df20
 8001244:	20002830 	.word	0x20002830
 8001248:	20002a60 	.word	0x20002a60
 800124c:	20002a64 	.word	0x20002a64
 8001250:	0800df34 	.word	0x0800df34
 8001254:	20002a70 	.word	0x20002a70
 8001258:	0800df40 	.word	0x0800df40
 800125c:	20002a5c 	.word	0x20002a5c
 8001260:	0800df4c 	.word	0x0800df4c

08001264 <acis_main_task>:
  }
}

void acis_main_task(void * argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  tGuiHandler = osThreadNew(acis_gui_task, NULL, &cTaskAttributes);
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <acis_main_task+0x38>)
 800126e:	2100      	movs	r1, #0
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <acis_main_task+0x3c>)
 8001272:	f005 fd65 	bl	8006d40 <osThreadNew>
 8001276:	4602      	mov	r2, r0
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <acis_main_task+0x40>)
 800127a:	601a      	str	r2, [r3, #0]
  while(1)
  {
    while(acis_send_command(etrACIS, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest)) <= 0)
 800127c:	e002      	b.n	8001284 <acis_main_task+0x20>
      osDelay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f005 fdb6 	bl	8006df0 <osDelay>
    while(acis_send_command(etrACIS, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest)) <= 0)
 8001284:	2204      	movs	r2, #4
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <acis_main_task+0x44>)
 8001288:	2002      	movs	r0, #2
 800128a:	f000 f85f 	bl	800134c <acis_send_command>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	ddf4      	ble.n	800127e <acis_main_task+0x1a>

    osDelay(50);
 8001294:	2032      	movs	r0, #50	; 0x32
 8001296:	f005 fdab 	bl	8006df0 <osDelay>
    while(acis_send_command(etrACIS, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest)) <= 0)
 800129a:	e7f3      	b.n	8001284 <acis_main_task+0x20>
 800129c:	0800dfb0 	.word	0x0800dfb0
 80012a0:	08001069 	.word	0x08001069
 80012a4:	20007c8c 	.word	0x20007c8c
 80012a8:	20000000 	.word	0x20000000

080012ac <acis_parse_command>:
  }

}

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	73fb      	strb	r3, [r7, #15]
  switch(msgBuf[0])
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d000      	beq.n	80012c4 <acis_parse_command+0x18>
      StatusValveNum = PK_GeneralStatusResponse.valvenum;
      StatusTableNum = PK_GeneralStatusResponse.tablenum;
      strcpy(StatusTableName, PK_GeneralStatusResponse.tablename);
      break;
    default:
      break;
 80012c2:	e028      	b.n	8001316 <acis_parse_command+0x6a>
      PK_Copy(&PK_GeneralStatusResponse, msgBuf);
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	4816      	ldr	r0, [pc, #88]	; (8001320 <acis_parse_command+0x74>)
 80012c8:	f7ff fe86 	bl	8000fd8 <PK_Copy>
      StatusIgnition = PK_GeneralStatusResponse.IgnitionAngle;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <acis_parse_command+0x74>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <acis_parse_command+0x78>)
 80012d2:	6013      	str	r3, [r2, #0]
      StatusLoad = PK_GeneralStatusResponse.Load;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <acis_parse_command+0x74>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a13      	ldr	r2, [pc, #76]	; (8001328 <acis_parse_command+0x7c>)
 80012da:	6013      	str	r3, [r2, #0]
      StatusRPM = PK_GeneralStatusResponse.RPM;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <acis_parse_command+0x74>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <acis_parse_command+0x80>)
 80012e2:	6013      	str	r3, [r2, #0]
      StatusPressure = PK_GeneralStatusResponse.Pressure;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <acis_parse_command+0x74>)
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <acis_parse_command+0x84>)
 80012ea:	6013      	str	r3, [r2, #0]
      StatusVoltage = PK_GeneralStatusResponse.Voltage;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <acis_parse_command+0x74>)
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	4a10      	ldr	r2, [pc, #64]	; (8001334 <acis_parse_command+0x88>)
 80012f2:	6013      	str	r3, [r2, #0]
      StatusCheck = PK_GeneralStatusResponse.check;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <acis_parse_command+0x74>)
 80012f6:	799a      	ldrb	r2, [r3, #6]
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <acis_parse_command+0x8c>)
 80012fa:	701a      	strb	r2, [r3, #0]
      StatusValveNum = PK_GeneralStatusResponse.valvenum;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <acis_parse_command+0x74>)
 80012fe:	795a      	ldrb	r2, [r3, #5]
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <acis_parse_command+0x90>)
 8001302:	701a      	strb	r2, [r3, #0]
      StatusTableNum = PK_GeneralStatusResponse.tablenum;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <acis_parse_command+0x74>)
 8001306:	791a      	ldrb	r2, [r3, #4]
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <acis_parse_command+0x94>)
 800130a:	701a      	strb	r2, [r3, #0]
      strcpy(StatusTableName, PK_GeneralStatusResponse.tablename);
 800130c:	490d      	ldr	r1, [pc, #52]	; (8001344 <acis_parse_command+0x98>)
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <acis_parse_command+0x9c>)
 8001310:	f009 feda 	bl	800b0c8 <strcpy>
      break;
 8001314:	bf00      	nop
  }
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000004 	.word	0x20000004
 8001324:	20002a58 	.word	0x20002a58
 8001328:	20002a50 	.word	0x20002a50
 800132c:	20002a4c 	.word	0x20002a4c
 8001330:	20002a54 	.word	0x20002a54
 8001334:	20002a5c 	.word	0x20002a5c
 8001338:	20002a62 	.word	0x20002a62
 800133c:	20002a61 	.word	0x20002a61
 8001340:	20002a60 	.word	0x20002a60
 8001344:	2000000b 	.word	0x2000000b
 8001348:	20002a64 	.word	0x20002a64

0800134c <acis_send_command>:

inline int8_t acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	73fb      	strb	r3, [r7, #15]
  int8_t status = xSender(xChaDst, (uint8_t*)msgBuf, length);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 f935 	bl	80035d0 <xSender>
 8001366:	4603      	mov	r3, r0
 8001368:	75fb      	strb	r3, [r7, #23]
  if(status == -1)
 800136a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001372:	d106      	bne.n	8001382 <acis_send_command+0x36>
  {
    StatusTimeout = 1;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <acis_send_command+0x50>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
    StatusCheck = 1;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <acis_send_command+0x54>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e006      	b.n	8001390 <acis_send_command+0x44>
  }
  else if(status == 1) StatusTimeout = 0;
 8001382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <acis_send_command+0x44>
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <acis_send_command+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
  return status;
 8001390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20002a70 	.word	0x20002a70
 80013a0:	20002a62 	.word	0x20002a62

080013a4 <controls_irq>:
static uint32_t sw_display_ftime = 0;
static uint8_t sw_display_delay = 0;


void controls_irq(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  //Fuel1
  if(ISSWITCH(SW_CTRL(FUEL1)))
 80013a8:	4b87      	ldr	r3, [pc, #540]	; (80015c8 <controls_irq+0x224>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d11d      	bne.n	80013f0 <controls_irq+0x4c>
  {
    if(sw_fuel1_delay > SW_PRESS_DELAY)
 80013b4:	4b85      	ldr	r3, [pc, #532]	; (80015cc <controls_irq+0x228>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b32      	cmp	r3, #50	; 0x32
 80013ba:	d912      	bls.n	80013e2 <controls_irq+0x3e>
    {
      if(sw_fuel1_ftime == 0) sw_fuel1_ftime = TIM_CNT;
 80013bc:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <controls_irq+0x22c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d103      	bne.n	80013cc <controls_irq+0x28>
 80013c4:	4b83      	ldr	r3, [pc, #524]	; (80015d4 <controls_irq+0x230>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a81      	ldr	r2, [pc, #516]	; (80015d0 <controls_irq+0x22c>)
 80013ca:	6013      	str	r3, [r2, #0]
      SW_FUEL1_TIME = TIM_CNT-sw_fuel1_ftime;
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <controls_irq+0x230>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <controls_irq+0x22c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	4a80      	ldr	r2, [pc, #512]	; (80015d8 <controls_irq+0x234>)
 80013d8:	6013      	str	r3, [r2, #0]
      SW_FUEL1 = 1;
 80013da:	4b80      	ldr	r3, [pc, #512]	; (80015dc <controls_irq+0x238>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e010      	b.n	8001404 <controls_irq+0x60>
    } else sw_fuel1_delay+=TIM_STEP;
 80013e2:	4b7a      	ldr	r3, [pc, #488]	; (80015cc <controls_irq+0x228>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b78      	ldr	r3, [pc, #480]	; (80015cc <controls_irq+0x228>)
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e009      	b.n	8001404 <controls_irq+0x60>
  } else SW_FUEL1 = sw_fuel1_delay = sw_fuel1_ftime = 0;
 80013f0:	4b77      	ldr	r3, [pc, #476]	; (80015d0 <controls_irq+0x22c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	4b75      	ldr	r3, [pc, #468]	; (80015cc <controls_irq+0x228>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <controls_irq+0x228>)
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	4b76      	ldr	r3, [pc, #472]	; (80015dc <controls_irq+0x238>)
 8001402:	701a      	strb	r2, [r3, #0]

  //Fuel2
  if(ISSWITCH(SW_CTRL(FUEL2)))
 8001404:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <controls_irq+0x224>)
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140c:	2b00      	cmp	r3, #0
 800140e:	d11d      	bne.n	800144c <controls_irq+0xa8>
  {
    if(sw_fuel2_delay > SW_PRESS_DELAY)
 8001410:	4b73      	ldr	r3, [pc, #460]	; (80015e0 <controls_irq+0x23c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b32      	cmp	r3, #50	; 0x32
 8001416:	d912      	bls.n	800143e <controls_irq+0x9a>
    {
      if(sw_fuel2_ftime == 0) sw_fuel2_ftime = TIM_CNT;
 8001418:	4b72      	ldr	r3, [pc, #456]	; (80015e4 <controls_irq+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <controls_irq+0x84>
 8001420:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <controls_irq+0x230>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6f      	ldr	r2, [pc, #444]	; (80015e4 <controls_irq+0x240>)
 8001426:	6013      	str	r3, [r2, #0]
      SW_FUEL2_TIME = TIM_CNT-sw_fuel2_ftime;
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <controls_irq+0x230>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b6d      	ldr	r3, [pc, #436]	; (80015e4 <controls_irq+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	4a6d      	ldr	r2, [pc, #436]	; (80015e8 <controls_irq+0x244>)
 8001434:	6013      	str	r3, [r2, #0]
      SW_FUEL2 = 1;
 8001436:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <controls_irq+0x248>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
 800143c:	e010      	b.n	8001460 <controls_irq+0xbc>
    } else sw_fuel2_delay+=TIM_STEP;
 800143e:	4b68      	ldr	r3, [pc, #416]	; (80015e0 <controls_irq+0x23c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <controls_irq+0x23c>)
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e009      	b.n	8001460 <controls_irq+0xbc>
  } else SW_FUEL2 = sw_fuel2_delay = sw_fuel2_ftime = 0;
 800144c:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <controls_irq+0x240>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <controls_irq+0x23c>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <controls_irq+0x23c>)
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <controls_irq+0x248>)
 800145e:	701a      	strb	r2, [r3, #0]

  //Display
  if(ISSWITCH(SW_CTRL(DISPLAY)))
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <controls_irq+0x224>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d11d      	bne.n	80014a8 <controls_irq+0x104>
  {
    if(sw_display_delay > SW_PRESS_DELAY)
 800146c:	4b60      	ldr	r3, [pc, #384]	; (80015f0 <controls_irq+0x24c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b32      	cmp	r3, #50	; 0x32
 8001472:	d912      	bls.n	800149a <controls_irq+0xf6>
    {
      if(sw_display_ftime == 0) sw_display_ftime = TIM_CNT;
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <controls_irq+0x250>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <controls_irq+0xe0>
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <controls_irq+0x230>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <controls_irq+0x250>)
 8001482:	6013      	str	r3, [r2, #0]
      SW_DISPLAY_TIME = TIM_CNT-sw_display_ftime;
 8001484:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <controls_irq+0x230>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <controls_irq+0x250>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <controls_irq+0x254>)
 8001490:	6013      	str	r3, [r2, #0]
      SW_DISPLAY = 1;
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <controls_irq+0x258>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e010      	b.n	80014bc <controls_irq+0x118>
    } else sw_display_delay+=TIM_STEP;
 800149a:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <controls_irq+0x24c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <controls_irq+0x24c>)
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e009      	b.n	80014bc <controls_irq+0x118>
  } else SW_DISPLAY = sw_display_delay = sw_display_ftime = 0;
 80014a8:	4b52      	ldr	r3, [pc, #328]	; (80015f4 <controls_irq+0x250>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <controls_irq+0x24c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	4b4e      	ldr	r3, [pc, #312]	; (80015f0 <controls_irq+0x24c>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b50      	ldr	r3, [pc, #320]	; (80015fc <controls_irq+0x258>)
 80014ba:	701a      	strb	r2, [r3, #0]

  if(SW_DISPLAY)
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <controls_irq+0x258>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 81b1 	beq.w	800182a <controls_irq+0x486>
  {
    //UP
    if(ISPRESS(BUT_CTRL(UP)))
 80014c8:	4b4d      	ldr	r3, [pc, #308]	; (8001600 <controls_irq+0x25c>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d034      	beq.n	800153e <controls_irq+0x19a>
    {
      if(but_up_delay > BUT_PRESS_DELAY)
 80014d4:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <controls_irq+0x260>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b14      	cmp	r3, #20
 80014da:	d929      	bls.n	8001530 <controls_irq+0x18c>
      {
        if(but_up_ftime == 0) but_up_ftime = TIM_CNT;
 80014dc:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <controls_irq+0x264>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <controls_irq+0x148>
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <controls_irq+0x230>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a47      	ldr	r2, [pc, #284]	; (8001608 <controls_irq+0x264>)
 80014ea:	6013      	str	r3, [r2, #0]
        BUT_UP_TIME = TIM_CNT-but_up_ftime;
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <controls_irq+0x230>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <controls_irq+0x264>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	4a45      	ldr	r2, [pc, #276]	; (800160c <controls_irq+0x268>)
 80014f8:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80014fa:	4b45      	ldr	r3, [pc, #276]	; (8001610 <controls_irq+0x26c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <controls_irq+0x184>
 8001504:	4b43      	ldr	r3, [pc, #268]	; (8001614 <controls_irq+0x270>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <controls_irq+0x184>
 800150e:	4b42      	ldr	r3, [pc, #264]	; (8001618 <controls_irq+0x274>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d107      	bne.n	8001528 <controls_irq+0x184>
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <controls_irq+0x278>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <controls_irq+0x184>
          BUT_UP = 1;
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <controls_irq+0x27c>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
        BUT_UP_PRESS = 1;
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <controls_irq+0x274>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e010      	b.n	8001552 <controls_irq+0x1ae>
      } else but_up_delay+=TIM_STEP;
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <controls_irq+0x260>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <controls_irq+0x260>)
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	e009      	b.n	8001552 <controls_irq+0x1ae>
    } else BUT_UP_PRESS = but_up_delay = but_up_ftime = 0;
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <controls_irq+0x264>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <controls_irq+0x260>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <controls_irq+0x260>)
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <controls_irq+0x274>)
 8001550:	701a      	strb	r2, [r3, #0]

    //DOWN
    if(ISPRESS(BUT_CTRL(DOWN)))
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <controls_irq+0x25c>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	2b00      	cmp	r3, #0
 800155c:	d06a      	beq.n	8001634 <controls_irq+0x290>
    {
      if(but_down_delay > BUT_PRESS_DELAY)
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <controls_irq+0x280>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b14      	cmp	r3, #20
 8001564:	d929      	bls.n	80015ba <controls_irq+0x216>
      {
        if(but_down_ftime == 0) but_down_ftime = TIM_CNT;
 8001566:	4b30      	ldr	r3, [pc, #192]	; (8001628 <controls_irq+0x284>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <controls_irq+0x1d2>
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <controls_irq+0x230>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <controls_irq+0x284>)
 8001574:	6013      	str	r3, [r2, #0]
        BUT_DOWN_TIME = TIM_CNT-but_down_ftime;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <controls_irq+0x230>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <controls_irq+0x284>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4a2a      	ldr	r2, [pc, #168]	; (800162c <controls_irq+0x288>)
 8001582:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <controls_irq+0x26c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d111      	bne.n	80015b2 <controls_irq+0x20e>
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <controls_irq+0x270>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10c      	bne.n	80015b2 <controls_irq+0x20e>
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <controls_irq+0x274>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d107      	bne.n	80015b2 <controls_irq+0x20e>
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <controls_irq+0x278>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <controls_irq+0x20e>
          BUT_DOWN = 1;
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <controls_irq+0x28c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
        BUT_DOWN_PRESS = 1;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <controls_irq+0x278>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e046      	b.n	8001648 <controls_irq+0x2a4>
      } else but_down_delay+=TIM_STEP;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <controls_irq+0x280>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <controls_irq+0x280>)
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e03f      	b.n	8001648 <controls_irq+0x2a4>
 80015c8:	40020800 	.word	0x40020800
 80015cc:	20002ac8 	.word	0x20002ac8
 80015d0:	20002ac4 	.word	0x20002ac4
 80015d4:	20002a74 	.word	0x20002a74
 80015d8:	20002ac0 	.word	0x20002ac0
 80015dc:	20002abc 	.word	0x20002abc
 80015e0:	20002ad4 	.word	0x20002ad4
 80015e4:	20002ad0 	.word	0x20002ad0
 80015e8:	20002acc 	.word	0x20002acc
 80015ec:	20002ac9 	.word	0x20002ac9
 80015f0:	20002ae0 	.word	0x20002ae0
 80015f4:	20002adc 	.word	0x20002adc
 80015f8:	20002ad8 	.word	0x20002ad8
 80015fc:	20002ad5 	.word	0x20002ad5
 8001600:	40020400 	.word	0x40020400
 8001604:	20002aa0 	.word	0x20002aa0
 8001608:	20002aac 	.word	0x20002aac
 800160c:	20002a88 	.word	0x20002a88
 8001610:	20002a78 	.word	0x20002a78
 8001614:	20002a79 	.word	0x20002a79
 8001618:	20002a7a 	.word	0x20002a7a
 800161c:	20002a7b 	.word	0x20002a7b
 8001620:	20002a9a 	.word	0x20002a9a
 8001624:	20002aa1 	.word	0x20002aa1
 8001628:	20002ab0 	.word	0x20002ab0
 800162c:	20002a8c 	.word	0x20002a8c
 8001630:	20002a9b 	.word	0x20002a9b
    } else BUT_DOWN_PRESS = but_down_delay = but_down_ftime = 0;
 8001634:	4b93      	ldr	r3, [pc, #588]	; (8001884 <controls_irq+0x4e0>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	4b93      	ldr	r3, [pc, #588]	; (8001888 <controls_irq+0x4e4>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	4b91      	ldr	r3, [pc, #580]	; (8001888 <controls_irq+0x4e4>)
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	4b91      	ldr	r3, [pc, #580]	; (800188c <controls_irq+0x4e8>)
 8001646:	701a      	strb	r2, [r3, #0]

    //LEFT
    if(ISPRESS(BUT_CTRL(LEFT)))
 8001648:	4b91      	ldr	r3, [pc, #580]	; (8001890 <controls_irq+0x4ec>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d034      	beq.n	80016be <controls_irq+0x31a>
    {
      if(but_left_delay > BUT_PRESS_DELAY)
 8001654:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <controls_irq+0x4f0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b14      	cmp	r3, #20
 800165a:	d929      	bls.n	80016b0 <controls_irq+0x30c>
      {
        if(but_left_ftime == 0) but_left_ftime = TIM_CNT;
 800165c:	4b8e      	ldr	r3, [pc, #568]	; (8001898 <controls_irq+0x4f4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d103      	bne.n	800166c <controls_irq+0x2c8>
 8001664:	4b8d      	ldr	r3, [pc, #564]	; (800189c <controls_irq+0x4f8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a8b      	ldr	r2, [pc, #556]	; (8001898 <controls_irq+0x4f4>)
 800166a:	6013      	str	r3, [r2, #0]
        BUT_LEFT_TIME = TIM_CNT-but_left_ftime;
 800166c:	4b8b      	ldr	r3, [pc, #556]	; (800189c <controls_irq+0x4f8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b89      	ldr	r3, [pc, #548]	; (8001898 <controls_irq+0x4f4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	4a8a      	ldr	r2, [pc, #552]	; (80018a0 <controls_irq+0x4fc>)
 8001678:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 800167a:	4b8a      	ldr	r3, [pc, #552]	; (80018a4 <controls_irq+0x500>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d111      	bne.n	80016a8 <controls_irq+0x304>
 8001684:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <controls_irq+0x504>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <controls_irq+0x304>
 800168e:	4b87      	ldr	r3, [pc, #540]	; (80018ac <controls_irq+0x508>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <controls_irq+0x304>
 8001698:	4b7c      	ldr	r3, [pc, #496]	; (800188c <controls_irq+0x4e8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <controls_irq+0x304>
          BUT_LEFT = 1;
 80016a2:	4b83      	ldr	r3, [pc, #524]	; (80018b0 <controls_irq+0x50c>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
        BUT_LEFT_PRESS = 1;
 80016a8:	4b7e      	ldr	r3, [pc, #504]	; (80018a4 <controls_irq+0x500>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e010      	b.n	80016d2 <controls_irq+0x32e>
      } else but_left_delay+=TIM_STEP;
 80016b0:	4b78      	ldr	r3, [pc, #480]	; (8001894 <controls_irq+0x4f0>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b76      	ldr	r3, [pc, #472]	; (8001894 <controls_irq+0x4f0>)
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e009      	b.n	80016d2 <controls_irq+0x32e>
    } else BUT_LEFT_PRESS = but_left_delay = but_left_ftime = 0;
 80016be:	4b76      	ldr	r3, [pc, #472]	; (8001898 <controls_irq+0x4f4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	4b73      	ldr	r3, [pc, #460]	; (8001894 <controls_irq+0x4f0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	4b72      	ldr	r3, [pc, #456]	; (8001894 <controls_irq+0x4f0>)
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <controls_irq+0x500>)
 80016d0:	701a      	strb	r2, [r3, #0]

    //RIGHT
    if(ISPRESS(BUT_CTRL(RIGHT)))
 80016d2:	4b6f      	ldr	r3, [pc, #444]	; (8001890 <controls_irq+0x4ec>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0320 	and.w	r3, r3, #32
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d034      	beq.n	8001748 <controls_irq+0x3a4>
    {
      if(but_right_delay > BUT_PRESS_DELAY)
 80016de:	4b75      	ldr	r3, [pc, #468]	; (80018b4 <controls_irq+0x510>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b14      	cmp	r3, #20
 80016e4:	d929      	bls.n	800173a <controls_irq+0x396>
      {
        if(but_right_ftime == 0) but_right_ftime = TIM_CNT;
 80016e6:	4b74      	ldr	r3, [pc, #464]	; (80018b8 <controls_irq+0x514>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <controls_irq+0x352>
 80016ee:	4b6b      	ldr	r3, [pc, #428]	; (800189c <controls_irq+0x4f8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a71      	ldr	r2, [pc, #452]	; (80018b8 <controls_irq+0x514>)
 80016f4:	6013      	str	r3, [r2, #0]
        BUT_RIGHT_TIME = TIM_CNT-but_right_ftime;
 80016f6:	4b69      	ldr	r3, [pc, #420]	; (800189c <controls_irq+0x4f8>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <controls_irq+0x514>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a6e      	ldr	r2, [pc, #440]	; (80018bc <controls_irq+0x518>)
 8001702:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <controls_irq+0x500>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d111      	bne.n	8001732 <controls_irq+0x38e>
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <controls_irq+0x504>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10c      	bne.n	8001732 <controls_irq+0x38e>
 8001718:	4b64      	ldr	r3, [pc, #400]	; (80018ac <controls_irq+0x508>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d107      	bne.n	8001732 <controls_irq+0x38e>
 8001722:	4b5a      	ldr	r3, [pc, #360]	; (800188c <controls_irq+0x4e8>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <controls_irq+0x38e>
          BUT_RIGHT = 1;
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <controls_irq+0x51c>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
        BUT_RIGHT_PRESS = 1;
 8001732:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <controls_irq+0x504>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	e010      	b.n	800175c <controls_irq+0x3b8>
      } else but_right_delay+=TIM_STEP;
 800173a:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <controls_irq+0x510>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <controls_irq+0x510>)
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e009      	b.n	800175c <controls_irq+0x3b8>
    } else BUT_RIGHT_PRESS = but_right_delay = but_right_ftime = 0;
 8001748:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <controls_irq+0x514>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <controls_irq+0x510>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	4b57      	ldr	r3, [pc, #348]	; (80018b4 <controls_irq+0x510>)
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <controls_irq+0x504>)
 800175a:	701a      	strb	r2, [r3, #0]

    //CANCEL
    if(ISPRESS(BUT_CTRL(CANCEL)))
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <controls_irq+0x520>)
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <controls_irq+0x406>
    {
      if(but_cancel_delay > BUT_PRESS_DELAY)
 8001768:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <controls_irq+0x524>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b14      	cmp	r3, #20
 800176e:	d915      	bls.n	800179c <controls_irq+0x3f8>
      {
        if(but_cancel_ftime == 0) but_cancel_ftime = TIM_CNT;
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <controls_irq+0x528>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <controls_irq+0x3dc>
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <controls_irq+0x4f8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a53      	ldr	r2, [pc, #332]	; (80018cc <controls_irq+0x528>)
 800177e:	6013      	str	r3, [r2, #0]
        BUT_CANCEL_TIME = TIM_CNT-but_cancel_ftime;
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <controls_irq+0x4f8>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <controls_irq+0x528>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <controls_irq+0x52c>)
 800178c:	6013      	str	r3, [r2, #0]
        BUT_CANCEL = 1;
 800178e:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <controls_irq+0x530>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
        BUT_CANCEL_PRESS = 1;
 8001794:	4b50      	ldr	r3, [pc, #320]	; (80018d8 <controls_irq+0x534>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e010      	b.n	80017be <controls_irq+0x41a>
      } else but_cancel_delay+=TIM_STEP;
 800179c:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <controls_irq+0x524>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <controls_irq+0x524>)
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	e009      	b.n	80017be <controls_irq+0x41a>
    } else BUT_CANCEL_PRESS = but_cancel_delay = but_cancel_ftime = 0;
 80017aa:	4b48      	ldr	r3, [pc, #288]	; (80018cc <controls_irq+0x528>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b45      	ldr	r3, [pc, #276]	; (80018c8 <controls_irq+0x524>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <controls_irq+0x524>)
 80017b8:	781a      	ldrb	r2, [r3, #0]
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <controls_irq+0x534>)
 80017bc:	701a      	strb	r2, [r3, #0]

    //ENTER
    if(ISPRESS(BUT_CTRL(ENTER)))
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <controls_irq+0x538>)
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d020      	beq.n	800180c <controls_irq+0x468>
    {
      if(but_enter_delay > BUT_PRESS_DELAY)
 80017ca:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <controls_irq+0x53c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b14      	cmp	r3, #20
 80017d0:	d915      	bls.n	80017fe <controls_irq+0x45a>
      {
        if(but_enter_ftime == 0) but_enter_ftime = TIM_CNT;
 80017d2:	4b44      	ldr	r3, [pc, #272]	; (80018e4 <controls_irq+0x540>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <controls_irq+0x43e>
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <controls_irq+0x4f8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a41      	ldr	r2, [pc, #260]	; (80018e4 <controls_irq+0x540>)
 80017e0:	6013      	str	r3, [r2, #0]
        BUT_ENTER_TIME = TIM_CNT-but_enter_ftime;
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <controls_irq+0x4f8>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <controls_irq+0x540>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a3e      	ldr	r2, [pc, #248]	; (80018e8 <controls_irq+0x544>)
 80017ee:	6013      	str	r3, [r2, #0]
        BUT_ENTER = 1;
 80017f0:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <controls_irq+0x548>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
        BUT_ENTER_PRESS = 1;
 80017f6:	4b3e      	ldr	r3, [pc, #248]	; (80018f0 <controls_irq+0x54c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e010      	b.n	8001820 <controls_irq+0x47c>
      } else but_enter_delay+=TIM_STEP;
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <controls_irq+0x53c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <controls_irq+0x53c>)
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e009      	b.n	8001820 <controls_irq+0x47c>
    } else BUT_ENTER_PRESS = but_enter_delay = but_enter_ftime = 0;
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <controls_irq+0x540>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <controls_irq+0x53c>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <controls_irq+0x53c>)
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <controls_irq+0x54c>)
 800181e:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 255;
 8001820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001824:	22ff      	movs	r2, #255	; 0xff
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
    BUT_RIGHT_PRESS = 0;
    BUT_UP_PRESS = 0;
    BUT_DOWN_PRESS = 0;
    TIM2->CCR3 = 0;
  }
}
 8001828:	e027      	b.n	800187a <controls_irq+0x4d6>
    BUT_CANCEL = 0;
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <controls_irq+0x530>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    BUT_ENTER = 0;
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <controls_irq+0x548>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
    BUT_LEFT = 0;
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <controls_irq+0x50c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT = 0;
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <controls_irq+0x51c>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
    BUT_UP = 0;
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <controls_irq+0x550>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
    BUT_DOWN = 0;
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <controls_irq+0x554>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
    BUT_CANCEL_PRESS = 0;
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <controls_irq+0x534>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    BUT_ENTER_PRESS = 0;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <controls_irq+0x54c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
    BUT_LEFT_PRESS = 0;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <controls_irq+0x500>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT_PRESS = 0;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <controls_irq+0x504>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
    BUT_UP_PRESS = 0;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <controls_irq+0x508>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
    BUT_DOWN_PRESS = 0;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <controls_irq+0x4e8>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 0;
 8001872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001876:	2200      	movs	r2, #0
 8001878:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20002ab0 	.word	0x20002ab0
 8001888:	20002aa1 	.word	0x20002aa1
 800188c:	20002a7b 	.word	0x20002a7b
 8001890:	40020400 	.word	0x40020400
 8001894:	20002a9e 	.word	0x20002a9e
 8001898:	20002aa4 	.word	0x20002aa4
 800189c:	20002a74 	.word	0x20002a74
 80018a0:	20002a80 	.word	0x20002a80
 80018a4:	20002a78 	.word	0x20002a78
 80018a8:	20002a79 	.word	0x20002a79
 80018ac:	20002a7a 	.word	0x20002a7a
 80018b0:	20002a98 	.word	0x20002a98
 80018b4:	20002a9f 	.word	0x20002a9f
 80018b8:	20002aa8 	.word	0x20002aa8
 80018bc:	20002a84 	.word	0x20002a84
 80018c0:	20002a99 	.word	0x20002a99
 80018c4:	40020800 	.word	0x40020800
 80018c8:	20002aa3 	.word	0x20002aa3
 80018cc:	20002ab8 	.word	0x20002ab8
 80018d0:	20002a94 	.word	0x20002a94
 80018d4:	20002a9d 	.word	0x20002a9d
 80018d8:	20002a7d 	.word	0x20002a7d
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	20002aa2 	.word	0x20002aa2
 80018e4:	20002ab4 	.word	0x20002ab4
 80018e8:	20002a90 	.word	0x20002a90
 80018ec:	20002a9c 	.word	0x20002a9c
 80018f0:	20002a7c 	.word	0x20002a7c
 80018f4:	20002a9a 	.word	0x20002a9a
 80018f8:	20002a9b 	.word	0x20002a9b

080018fc <CRC16_RegisterHardware>:
  .cb_size = 0
};


void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(mutexCrc == NULL)
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <CRC16_RegisterHardware+0x2c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <CRC16_RegisterHardware+0x1c>
    mutexCrc = osMutexNew(&mutexAttrs);
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <CRC16_RegisterHardware+0x30>)
 800190e:	f005 fa89 	bl	8006e24 <osMutexNew>
 8001912:	4602      	mov	r2, r0
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <CRC16_RegisterHardware+0x2c>)
 8001916:	601a      	str	r2, [r3, #0]
  handle_crc = hcrc;
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <CRC16_RegisterHardware+0x34>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20002ae8 	.word	0x20002ae8
 800192c:	0800dfd4 	.word	0x0800dfd4
 8001930:	20002ae4 	.word	0x20002ae4

08001934 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <CRC16_Generate+0x64>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <CRC16_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 800194a:	4814      	ldr	r0, [pc, #80]	; (800199c <CRC16_Generate+0x68>)
 800194c:	f005 fa6a 	bl	8006e24 <osMutexNew>
 8001950:	4602      	mov	r2, r0
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <CRC16_Generate+0x64>)
 8001954:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <CRC16_Generate+0x6c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d017      	beq.n	800198e <CRC16_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <CRC16_Generate+0x64>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f005 fa9f 	bl	8006ea8 <osMutexAcquire>
 800196a:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10d      	bne.n	800198e <CRC16_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <CRC16_Generate+0x6c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 f986 	bl	8004c8c <HAL_CRC_Calculate>
 8001980:	4603      	mov	r3, r0
 8001982:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <CRC16_Generate+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f005 fabd 	bl	8006f08 <osMutexRelease>
    }
  }
  return result;
 800198e:	89fb      	ldrh	r3, [r7, #14]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20002ae8 	.word	0x20002ae8
 800199c:	0800dfd4 	.word	0x0800dfd4
 80019a0:	20002ae4 	.word	0x20002ae4

080019a4 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <CRC8_Generate+0x74>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <CRC8_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <CRC8_Generate+0x78>)
 80019bc:	f005 fa32 	bl	8006e24 <osMutexNew>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <CRC8_Generate+0x74>)
 80019c4:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <CRC8_Generate+0x7c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d017      	beq.n	80019fe <CRC8_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <CRC8_Generate+0x74>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f005 fa67 	bl	8006ea8 <osMutexAcquire>
 80019da:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10d      	bne.n	80019fe <CRC8_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <CRC8_Generate+0x7c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 f94e 	bl	8004c8c <HAL_CRC_Calculate>
 80019f0:	4603      	mov	r3, r0
 80019f2:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <CRC8_Generate+0x74>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f005 fa85 	bl	8006f08 <osMutexRelease>
    }
  }
  return (result & 0xFF) ^ (result >> 8);
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	b25a      	sxtb	r2, r3
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	4053      	eors	r3, r2
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20002ae8 	.word	0x20002ae8
 8001a1c:	0800dfd4 	.word	0x0800dfd4
 8001a20:	20002ae4 	.word	0x20002ae4

08001a24 <DelayInit>:

volatile uint32_t DelStart[COUNTERS];
static volatile uint32_t prescaller = 0;

void DelayInit(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <DelayInit+0x8c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <DelayInit+0x8c>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <DelayInit+0x8c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <DelayInit+0x90>)
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <DelayInit+0x94>)
 8001a46:	601a      	str	r2, [r3, #0]
    prescaller = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000);
 8001a48:	f003 feaa 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <DelayInit+0x98>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9b      	lsrs	r3, r3, #18
 8001a58:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <DelayInit+0x9c>)
 8001a5a:	6013      	str	r3, [r2, #0]
    htim_delay.Init.Prescaler = 0;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <DelayInit+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <DelayInit+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <DelayInit+0x90>)
 8001a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6e:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <DelayInit+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 8001a76:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <DelayInit+0x90>)
 8001a78:	f004 fb0e 	bl	8006098 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a80:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	4619      	mov	r1, r3
 8001a88:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <DelayInit+0x90>)
 8001a8a:	f004 fc25 	bl	80062d8 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <DelayInit+0x90>)
 8001a9c:	f004 fce4 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <DelayInit+0x90>)
 8001aa2:	f004 f9af 	bl	8005e04 <HAL_TIM_Base_Start>

}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	20002aec 	.word	0x20002aec
 8001ab8:	40000c00 	.word	0x40000c00
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	20002b2c 	.word	0x20002b2c

08001ac4 <DelayUs>:
  uint32_t tickstart = Delay_Tick * 1000;
  while(DelayDiff(Delay_Tick * 1000, tickstart) < val) {}
}

inline void DelayUs(uint32_t val)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = Delay_Tick;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <DelayUs+0x2c>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	60fb      	str	r3, [r7, #12]
  while(DelayDiff(Delay_Tick, tickstart) < val) {}
 8001ad2:	bf00      	nop
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <DelayUs+0x2c>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f81a 	bl	8001b14 <DelayDiff>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d8f5      	bhi.n	8001ad4 <DelayUs+0x10>
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40000c00 	.word	0x40000c00

08001af4 <DelayMs>:
 
inline void DelayMs(uint32_t val)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  DelayUs(val * 1000);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ffdc 	bl	8001ac4 <DelayUs>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <DelayDiff>:

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	if(a >= b)
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d307      	bcc.n	8001b36 <DelayDiff+0x22>
		return (a - b) / prescaller;
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	1ad2      	subs	r2, r2, r3
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <DelayDiff+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	e007      	b.n	8001b46 <DelayDiff+0x32>
	return ((0xFFFFFFFF - b) + a) / prescaller;
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <DelayDiff+0x40>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20002b2c 	.word	0x20002b2c

08001b58 <lcd_data>:
#include "cmsis_os.h"

uint8_t lcd_buffer[8][128];

static inline void lcd_data(uint8_t value)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2102      	movs	r1, #2
 8001b74:	4815      	ldr	r0, [pc, #84]	; (8001bcc <lcd_data+0x74>)
 8001b76:	f003 fb4d 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	4814      	ldr	r0, [pc, #80]	; (8001bd0 <lcd_data+0x78>)
 8001b80:	f003 fb48 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2102      	movs	r1, #2
 8001b88:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <lcd_data+0x78>)
 8001b8a:	f003 fb43 	bl	8005214 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8001b8e:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <lcd_data+0x7c>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8001b94:	2002      	movs	r0, #2
 8001b96:	f7ff ff95 	bl	8001ac4 <DelayUs>
  taskENTER_CRITICAL();
 8001b9a:	f006 fe93 	bl	80088c4 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	480a      	ldr	r0, [pc, #40]	; (8001bcc <lcd_data+0x74>)
 8001ba4:	f003 fb36 	bl	8005214 <HAL_GPIO_WritePin>
  DelayUs(2);
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f7ff ff8b 	bl	8001ac4 <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4806      	ldr	r0, [pc, #24]	; (8001bcc <lcd_data+0x74>)
 8001bb4:	f003 fb2e 	bl	8005214 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8001bb8:	f006 feaa 	bl	8008910 <vPortExitCritical>
  DelayUs(1);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f7ff ff81 	bl	8001ac4 <DelayUs>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <lcd_command>:

static inline void lcd_command(uint8_t value)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	041b      	lsls	r3, r3, #16
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4815      	ldr	r0, [pc, #84]	; (8001c4c <lcd_command+0x74>)
 8001bf6:	f003 fb0d 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	4814      	ldr	r0, [pc, #80]	; (8001c50 <lcd_command+0x78>)
 8001c00:	f003 fb08 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2102      	movs	r1, #2
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <lcd_command+0x78>)
 8001c0a:	f003 fb03 	bl	8005214 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8001c0e:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <lcd_command+0x7c>)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8001c14:	2002      	movs	r0, #2
 8001c16:	f7ff ff55 	bl	8001ac4 <DelayUs>
  taskENTER_CRITICAL();
 8001c1a:	f006 fe53 	bl	80088c4 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2102      	movs	r1, #2
 8001c22:	480a      	ldr	r0, [pc, #40]	; (8001c4c <lcd_command+0x74>)
 8001c24:	f003 faf6 	bl	8005214 <HAL_GPIO_WritePin>
  DelayUs(2);
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f7ff ff4b 	bl	8001ac4 <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2102      	movs	r1, #2
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <lcd_command+0x74>)
 8001c34:	f003 faee 	bl	8005214 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8001c38:	f006 fe6a 	bl	8008910 <vPortExitCritical>
  DelayUs(1);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7ff ff41 	bl	8001ac4 <DelayUs>
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020000 	.word	0x40020000

08001c58 <lcd_update>:

inline void lcd_update(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0

  for(int j = 0; j < 8; j++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e050      	b.n	8001d06 <lcd_update+0xae>
  {
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2110      	movs	r1, #16
 8001c68:	482a      	ldr	r0, [pc, #168]	; (8001d14 <lcd_update+0xbc>)
 8001c6a:	f003 fad3 	bl	8005214 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2101      	movs	r1, #1
 8001c72:	4829      	ldr	r0, [pc, #164]	; (8001d18 <lcd_update+0xc0>)
 8001c74:	f003 face 	bl	8005214 <HAL_GPIO_WritePin>

    lcd_command(0x40);
 8001c78:	2040      	movs	r0, #64	; 0x40
 8001c7a:	f7ff ffad 	bl	8001bd8 <lcd_command>
    lcd_command(0xB8 + j);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	3b48      	subs	r3, #72	; 0x48
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ffa6 	bl	8001bd8 <lcd_command>

    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2110      	movs	r1, #16
 8001c90:	4820      	ldr	r0, [pc, #128]	; (8001d14 <lcd_update+0xbc>)
 8001c92:	f003 fabf 	bl	8005214 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2101      	movs	r1, #1
 8001c9a:	481f      	ldr	r0, [pc, #124]	; (8001d18 <lcd_update+0xc0>)
 8001c9c:	f003 faba 	bl	8005214 <HAL_GPIO_WritePin>
    for(int i = 0; i < 64; i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	e00c      	b.n	8001cc0 <lcd_update+0x68>
    {
      lcd_data(lcd_buffer[j][i]);
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <lcd_update+0xc4>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	01db      	lsls	r3, r3, #7
 8001cac:	441a      	add	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff4f 	bl	8001b58 <lcd_data>
    for(int i = 0; i < 64; i++)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b3f      	cmp	r3, #63	; 0x3f
 8001cc4:	ddef      	ble.n	8001ca6 <lcd_update+0x4e>
    }
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2110      	movs	r1, #16
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <lcd_update+0xbc>)
 8001ccc:	f003 faa2 	bl	8005214 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <lcd_update+0xc0>)
 8001cd6:	f003 fa9d 	bl	8005214 <HAL_GPIO_WritePin>
    for(int i = 64; i < 128; i++)
 8001cda:	2340      	movs	r3, #64	; 0x40
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	e00c      	b.n	8001cfa <lcd_update+0xa2>
    {
      lcd_data(lcd_buffer[j][i]);
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <lcd_update+0xc4>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	01db      	lsls	r3, r3, #7
 8001ce6:	441a      	add	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff32 	bl	8001b58 <lcd_data>
    for(int i = 64; i < 128; i++)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfe:	ddef      	ble.n	8001ce0 <lcd_update+0x88>
  for(int j = 0; j < 8; j++)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b07      	cmp	r3, #7
 8001d0a:	ddab      	ble.n	8001c64 <lcd_update+0xc>
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	20007c90 	.word	0x20007c90

08001d20 <lcd_reset>:

inline void lcd_reset(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2110      	movs	r1, #16
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <lcd_reset+0x48>)
 8001d2a:	f003 fa73 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2101      	movs	r1, #1
 8001d32:	480e      	ldr	r0, [pc, #56]	; (8001d6c <lcd_reset+0x4c>)
 8001d34:	f003 fa6e 	bl	8005214 <HAL_GPIO_WritePin>
  lcd_command(0x3F); //Display ON
 8001d38:	203f      	movs	r0, #63	; 0x3f
 8001d3a:	f7ff ff4d 	bl	8001bd8 <lcd_command>
  lcd_command(0x40); //Set Y address = 0
 8001d3e:	2040      	movs	r0, #64	; 0x40
 8001d40:	f7ff ff4a 	bl	8001bd8 <lcd_command>
  lcd_command(0xB8); //Set X page = 0
 8001d44:	20b8      	movs	r0, #184	; 0xb8
 8001d46:	f7ff ff47 	bl	8001bd8 <lcd_command>
  lcd_command(0xC0); //Set Z scrolling = 0
 8001d4a:	20c0      	movs	r0, #192	; 0xc0
 8001d4c:	f7ff ff44 	bl	8001bd8 <lcd_command>
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2110      	movs	r1, #16
 8001d54:	4804      	ldr	r0, [pc, #16]	; (8001d68 <lcd_reset+0x48>)
 8001d56:	f003 fa5d 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <lcd_reset+0x4c>)
 8001d60:	f003 fa58 	bl	8005214 <HAL_GPIO_WritePin>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020400 	.word	0x40020400

08001d70 <lcd_clear>:

inline void lcd_clear(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  for(int i = 0; i < 8; i++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	e013      	b.n	8001da4 <lcd_clear+0x34>
    for(int j = 0; j < 128; j++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	e00a      	b.n	8001d98 <lcd_clear+0x28>
      lcd_buffer[i][j] = 0;
 8001d82:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <lcd_clear+0x48>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	01db      	lsls	r3, r3, #7
 8001d88:	441a      	add	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 128; j++)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9c:	ddf1      	ble.n	8001d82 <lcd_clear+0x12>
  for(int i = 0; i < 8; i++)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3301      	adds	r3, #1
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b07      	cmp	r3, #7
 8001da8:	dde8      	ble.n	8001d7c <lcd_clear+0xc>
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20007c90 	.word	0x20007c90

08001dbc <lcd_drawpoint>:

inline void lcd_drawpoint(uint8_t x, uint8_t y)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db1f      	blt.n	8001e14 <lcd_drawpoint+0x58>
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd8:	d81c      	bhi.n	8001e14 <lcd_drawpoint+0x58>
    lcd_buffer[y / 8][x] |= 1 << (y % 8);
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	b2d8      	uxtb	r0, r3
 8001de0:	4602      	mov	r2, r0
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	490e      	ldr	r1, [pc, #56]	; (8001e20 <lcd_drawpoint+0x64>)
 8001de6:	01d2      	lsls	r2, r2, #7
 8001de8:	440a      	add	r2, r1
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	79bb      	ldrb	r3, [r7, #6]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b259      	sxtb	r1, r3
 8001e02:	4602      	mov	r2, r0
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	b2c8      	uxtb	r0, r1
 8001e08:	4905      	ldr	r1, [pc, #20]	; (8001e20 <lcd_drawpoint+0x64>)
 8001e0a:	01d2      	lsls	r2, r2, #7
 8001e0c:	440a      	add	r2, r1
 8001e0e:	4413      	add	r3, r2
 8001e10:	4602      	mov	r2, r0
 8001e12:	701a      	strb	r2, [r3, #0]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20007c90 	.word	0x20007c90

08001e24 <lcd_clearpoint>:

inline void lcd_clearpoint(uint8_t x, uint8_t y)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db21      	blt.n	8001e80 <lcd_clearpoint+0x5c>
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001e40:	d81e      	bhi.n	8001e80 <lcd_clearpoint+0x5c>
    lcd_buffer[y / 8][x] &= ~(1 << (y % 8));
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	b2d8      	uxtb	r0, r3
 8001e48:	4602      	mov	r2, r0
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	490f      	ldr	r1, [pc, #60]	; (8001e8c <lcd_clearpoint+0x68>)
 8001e4e:	01d2      	lsls	r2, r2, #7
 8001e50:	440a      	add	r2, r1
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b25a      	sxtb	r2, r3
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	b259      	sxtb	r1, r3
 8001e6e:	4602      	mov	r2, r0
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	b2c8      	uxtb	r0, r1
 8001e74:	4905      	ldr	r1, [pc, #20]	; (8001e8c <lcd_clearpoint+0x68>)
 8001e76:	01d2      	lsls	r2, r2, #7
 8001e78:	440a      	add	r2, r1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	20007c90 	.word	0x20007c90

08001e90 <lcd_rect_solid>:


void lcd_rect_solid(int x, int y, int w, int h, int c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  if(c)
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d026      	beq.n	8001ef2 <lcd_rect_solid+0x62>
  {
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eac:	e01c      	b.n	8001ee8 <lcd_rect_solid+0x58>
    {
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
 8001eb6:	e00d      	b.n	8001ed4 <lcd_rect_solid+0x44>
      {
          lcd_drawpoint(j,i);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff7a 	bl	8001dbc <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dbed      	blt.n	8001eb8 <lcd_rect_solid+0x28>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	3301      	adds	r3, #1
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbde      	blt.n	8001eae <lcd_rect_solid+0x1e>
      {
          lcd_clearpoint(j,i);
      }
    }
  }
}
 8001ef0:	e025      	b.n	8001f3e <lcd_rect_solid+0xae>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	e01c      	b.n	8001f36 <lcd_rect_solid+0xa6>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e00d      	b.n	8001f22 <lcd_rect_solid+0x92>
          lcd_clearpoint(j,i);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff87 	bl	8001e24 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	dbed      	blt.n	8001f06 <lcd_rect_solid+0x76>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dbde      	blt.n	8001efc <lcd_rect_solid+0x6c>
}
 8001f3e:	bf00      	nop
 8001f40:	3730      	adds	r7, #48	; 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <lcd_rect>:


void lcd_rect(int x, int y, int w, int h, int c)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b08c      	sub	sp, #48	; 0x30
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
  if(w > 0 && h > 0)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f340 809a 	ble.w	8002090 <lcd_rect+0x14a>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f340 8096 	ble.w	8002090 <lcd_rect+0x14a>
  {
    if(c)
 8001f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d049      	beq.n	8001ffe <lcd_rect+0xb8>
    {
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f72:	e01b      	b.n	8001fac <lcd_rect+0x66>
      {
        lcd_drawpoint(x,i);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff1c 	bl	8001dbc <lcd_drawpoint>
        lcd_drawpoint(x+w-1,i);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff0e 	bl	8001dbc <lcd_drawpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	3301      	adds	r3, #1
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbdf      	blt.n	8001f74 <lcd_rect+0x2e>
      }
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	e01a      	b.n	8001ff4 <lcd_rect+0xae>
      {
        lcd_drawpoint(j,y);
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fef7 	bl	8001dbc <lcd_drawpoint>
        lcd_drawpoint(j,y+h-1);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	b2d8      	uxtb	r0, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7ff feea 	bl	8001dbc <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	3301      	adds	r3, #1
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbe0      	blt.n	8001fbe <lcd_rect+0x78>
        lcd_clearpoint(j,y);
        lcd_clearpoint(j,y+h-1);
      }
    }
  }
}
 8001ffc:	e048      	b.n	8002090 <lcd_rect+0x14a>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e01b      	b.n	8002040 <lcd_rect+0xfa>
        lcd_clearpoint(x,i);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff06 	bl	8001e24 <lcd_clearpoint>
        lcd_clearpoint(x+w-1,i);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	4413      	add	r3, r2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fef8 	bl	8001e24 <lcd_clearpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	3301      	adds	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbdf      	blt.n	8002008 <lcd_rect+0xc2>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e01a      	b.n	8002088 <lcd_rect+0x142>
        lcd_clearpoint(j,y);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fee1 	bl	8001e24 <lcd_clearpoint>
        lcd_clearpoint(j,y+h-1);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	b2d8      	uxtb	r0, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4413      	add	r3, r2
 8002070:	b2db      	uxtb	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff fed4 	bl	8001e24 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	3301      	adds	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbe0      	blt.n	8002052 <lcd_rect+0x10c>
}
 8002090:	bf00      	nop
 8002092:	3730      	adds	r7, #48	; 0x30
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <lcd_init>:
  DelayMs(3000);
  TIM2->CCR3 = 0;
}

void lcd_init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	2104      	movs	r1, #4
 80020a0:	480f      	ldr	r0, [pc, #60]	; (80020e0 <lcd_init+0x48>)
 80020a2:	f003 f8b7 	bl	8005214 <HAL_GPIO_WritePin>
  DelayUs(500);
 80020a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020aa:	f7ff fd0b 	bl	8001ac4 <DelayUs>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2104      	movs	r1, #4
 80020b2:	480b      	ldr	r0, [pc, #44]	; (80020e0 <lcd_init+0x48>)
 80020b4:	f003 f8ae 	bl	8005214 <HAL_GPIO_WritePin>
  DelayMs(2);
 80020b8:	2002      	movs	r0, #2
 80020ba:	f7ff fd1b 	bl	8001af4 <DelayMs>

  lcd_reset();
 80020be:	f7ff fe2f 	bl	8001d20 <lcd_reset>
  lcd_clear();
 80020c2:	f7ff fe55 	bl	8001d70 <lcd_clear>
  lcd_update();
 80020c6:	f7ff fdc7 	bl	8001c58 <lcd_update>

  font_init(lcd_rect_solid, 128, 64);
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <lcd_init+0x4c>)
 80020d0:	f006 fe44 	bl	8008d5c <font_init>
  font_setCR(0);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f006 fe1f 	bl	8008d18 <font_setCR>


  //font_setFont(&rre_ubuntu_32); showFont("[rre_ubuntu_32]");

}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40020400 	.word	0x40020400
 80020e4:	08001e91 	.word	0x08001e91

080020e8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020f0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <SCB_EnableICache+0x3c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80020fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002100:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <SCB_EnableICache+0x3c>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <SCB_EnableICache+0x3c>)
 800210a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002110:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002114:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <SCB_EnableDCache+0x7c>)
 8002130:	2200      	movs	r2, #0
 8002132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002136:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <SCB_EnableDCache+0x7c>)
 800213c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002140:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0b5b      	lsrs	r3, r3, #13
 8002146:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800214a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002154:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800215e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002164:	490f      	ldr	r1, [pc, #60]	; (80021a4 <SCB_EnableDCache+0x7c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ef      	bne.n	8002156 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e5      	bne.n	800214c <SCB_EnableDCache+0x24>
 8002180:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <SCB_EnableDCache+0x7c>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <SCB_EnableDCache+0x7c>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6153      	str	r3, [r2, #20]
 8002190:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002194:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM7_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    controls_irq();
 80021b8:	f7ff f8f4 	bl	80013a4 <controls_irq>
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20008404 	.word	0x20008404

080021c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f001 fd8b 	bl	8003cec <xDmaTxIrqHandler>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f001 fde6 	bl	8003db8 <xDmaErIrqHandler>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <showlogo>:

static void showlogo(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  font_setFont(&rre_ubuntu_32);
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <showlogo+0x40>)
 80021fa:	f006 fdf7 	bl	8008dec <font_setFont>
  font_printStr(30,4,"ACIS");
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <showlogo+0x44>)
 8002200:	2104      	movs	r1, #4
 8002202:	201e      	movs	r0, #30
 8002204:	f008 f834 	bl	800a270 <font_printStr>
  font_setFont(&rre_arialb_16);
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <showlogo+0x48>)
 800220a:	f006 fdef 	bl	8008dec <font_setFont>
  font_printStr(0,32,"Advanced Car");
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <showlogo+0x4c>)
 8002210:	2120      	movs	r1, #32
 8002212:	2000      	movs	r0, #0
 8002214:	f008 f82c 	bl	800a270 <font_printStr>
  font_printStr(13,46,"Ignition System");
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <showlogo+0x50>)
 800221a:	212e      	movs	r1, #46	; 0x2e
 800221c:	200d      	movs	r0, #13
 800221e:	f008 f827 	bl	800a270 <font_printStr>
  lcd_update();
 8002222:	f7ff fd19 	bl	8001c58 <lcd_update>
  DelayMs(1000);
 8002226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800222a:	f7ff fc63 	bl	8001af4 <DelayMs>
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20002850 	.word	0x20002850
 8002238:	0800df88 	.word	0x0800df88
 800223c:	20002840 	.word	0x20002840
 8002240:	0800df90 	.word	0x0800df90
 8002244:	0800dfa0 	.word	0x0800dfa0

08002248 <main>:

int main(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 800224c:	f7ff ff4c 	bl	80020e8 <SCB_EnableICache>
  SCB_EnableDCache();
 8002250:	f7ff ff6a 	bl	8002128 <SCB_EnableDCache>

  HAL_Init();
 8002254:	f002 fa0e 	bl	8004674 <HAL_Init>

  SystemClock_Config();
 8002258:	f000 f854 	bl	8002304 <SystemClock_Config>

  MX_GPIO_Init();
 800225c:	f000 fb04 	bl	8002868 <MX_GPIO_Init>
  MX_DMA_Init();
 8002260:	f000 fac0 	bl	80027e4 <MX_DMA_Init>
  MX_TIM2_Init();
 8002264:	f000 f976 	bl	8002554 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002268:	f000 f920 	bl	80024ac <MX_ADC1_Init>
  MX_TIM10_Init();
 800226c:	f000 fa02 	bl	8002674 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8002270:	f000 fa58 	bl	8002724 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002274:	f000 fa86 	bl	8002784 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8002278:	f000 f8da 	bl	8002430 <MX_CRC_Init>
  MX_TIM7_Init();
 800227c:	f000 f9c4 	bl	8002608 <MX_TIM7_Init>
  xFifosInit();
 8002280:	f001 fdd4 	bl	8003e2c <xFifosInit>

  CRC16_RegisterHardware(&hcrc);
 8002284:	4815      	ldr	r0, [pc, #84]	; (80022dc <main+0x94>)
 8002286:	f7ff fb39 	bl	80018fc <CRC16_RegisterHardware>

  HAL_GPIO_WritePin(USB_RST_GPIO_Port, USB_RST_Pin, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002290:	4813      	ldr	r0, [pc, #76]	; (80022e0 <main+0x98>)
 8002292:	f002 ffbf 	bl	8005214 <HAL_GPIO_WritePin>

  DelayInit();
 8002296:	f7ff fbc5 	bl	8001a24 <DelayInit>

  HAL_TIM_Base_Start_IT(&htim7);
 800229a:	4812      	ldr	r0, [pc, #72]	; (80022e4 <main+0x9c>)
 800229c:	f003 fdca 	bl	8005e34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80022a0:	2108      	movs	r1, #8
 80022a2:	4811      	ldr	r0, [pc, #68]	; (80022e8 <main+0xa0>)
 80022a4:	f004 f8de 	bl	8006464 <HAL_TIM_PWM_Start>
  lcd_init();
 80022a8:	f7ff fef6 	bl	8002098 <lcd_init>

  showlogo();
 80022ac:	f7ff ffa2 	bl	80021f4 <showlogo>

  osKernelInitialize();
 80022b0:	f004 fd0c 	bl	8006ccc <osKernelInitialize>

  defaultTaskHandle = osThreadNew(acis_main_task, NULL, &defaultTask_attributes);
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <main+0xa4>)
 80022b6:	2100      	movs	r1, #0
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <main+0xa8>)
 80022ba:	f004 fd41 	bl	8006d40 <osThreadNew>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <main+0xac>)
 80022c2:	601a      	str	r2, [r3, #0]
  getterTaskHandle = osThreadNew(xGetterTask, NULL, &getterTask_attributes);
 80022c4:	4a0c      	ldr	r2, [pc, #48]	; (80022f8 <main+0xb0>)
 80022c6:	2100      	movs	r1, #0
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <main+0xb4>)
 80022ca:	f004 fd39 	bl	8006d40 <osThreadNew>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <main+0xb8>)
 80022d2:	601a      	str	r2, [r3, #0]
  osKernelStart();
 80022d4:	f004 fd14 	bl	8006d00 <osKernelStart>

  while (1)
 80022d8:	e7fe      	b.n	80022d8 <main+0x90>
 80022da:	bf00      	nop
 80022dc:	200081b4 	.word	0x200081b4
 80022e0:	40020000 	.word	0x40020000
 80022e4:	20008404 	.word	0x20008404
 80022e8:	200083c4 	.word	0x200083c4
 80022ec:	0800dfe4 	.word	0x0800dfe4
 80022f0:	08001265 	.word	0x08001265
 80022f4:	20008090 	.word	0x20008090
 80022f8:	0800e008 	.word	0x0800e008
 80022fc:	080041a5 	.word	0x080041a5
 8002300:	200083c0 	.word	0x200083c0

08002304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0b4      	sub	sp, #208	; 0xd0
 8002308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800230a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800230e:	2230      	movs	r2, #48	; 0x30
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f008 f86b 	bl	800a3ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002318:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f008 f85c 	bl	800a3ee <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <SystemClock_Config+0x124>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <SystemClock_Config+0x124>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <SystemClock_Config+0x124>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800234e:	4b37      	ldr	r3, [pc, #220]	; (800242c <SystemClock_Config+0x128>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a36      	ldr	r2, [pc, #216]	; (800242c <SystemClock_Config+0x128>)
 8002354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <SystemClock_Config+0x128>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800236c:	2301      	movs	r3, #1
 800236e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002372:	2310      	movs	r3, #16
 8002374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002378:	2302      	movs	r3, #2
 800237a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002384:	2308      	movs	r3, #8
 8002386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800238a:	23d8      	movs	r3, #216	; 0xd8
 800238c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002390:	2302      	movs	r3, #2
 8002392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002396:	2302      	movs	r3, #2
 8002398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 ff75 	bl	8005290 <HAL_RCC_OscConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80023ac:	f000 fb68 	bl	8002a80 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023b0:	f002 ff36 	bl	8005220 <HAL_PWREx_EnableOverDrive>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80023ba:	f000 fb61 	bl	8002a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023be:	230f      	movs	r3, #15
 80023c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c4:	2302      	movs	r3, #2
 80023c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80023e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023e4:	2107      	movs	r1, #7
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 f93c 	bl	8005664 <HAL_RCC_ClockConfig>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80023f2:	f000 fb45 	bl	8002a80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 80023f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023fc:	2300      	movs	r3, #0
 80023fe:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002400:	2300      	movs	r3, #0
 8002402:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f9e9 	bl	80057e0 <HAL_RCCEx_PeriphCLKConfig>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8002414:	f000 fb34 	bl	8002a80 <Error_Handler>
  }

  HAL_SetTickFreq(HAL_TICK_FREQ_10KHZ);
 8002418:	2001      	movs	r0, #1
 800241a:	f002 f94f 	bl	80046bc <HAL_SetTickFreq>
}
 800241e:	bf00      	nop
 8002420:	37d0      	adds	r7, #208	; 0xd0
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000

08002430 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_CRC_Init+0x70>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <MX_CRC_Init+0x70>)
 800243c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_CRC_Init+0x70>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <MX_CRC_Init+0x74>)
 8002450:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <MX_CRC_Init+0x78>)
 8002452:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <MX_CRC_Init+0x74>)
 8002456:	2201      	movs	r2, #1
 8002458:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <MX_CRC_Init+0x74>)
 800245c:	2201      	movs	r2, #1
 800245e:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_CRC_Init+0x74>)
 8002462:	f24a 0201 	movw	r2, #40961	; 0xa001
 8002466:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_CRC_Init+0x74>)
 800246a:	2208      	movs	r2, #8
 800246c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <MX_CRC_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_CRC_Init+0x74>)
 8002476:	2220      	movs	r2, #32
 8002478:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <MX_CRC_Init+0x74>)
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_CRC_Init+0x74>)
 8002482:	2201      	movs	r2, #1
 8002484:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002486:	4807      	ldr	r0, [pc, #28]	; (80024a4 <MX_CRC_Init+0x74>)
 8002488:	f002 fbc6 	bl	8004c18 <HAL_CRC_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_CRC_Init+0x66>
  {
    Error_Handler();
 8002492:	f000 faf5 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	200081b4 	.word	0x200081b4
 80024a8:	40023000 	.word	0x40023000

080024ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024b2:	463b      	mov	r3, r7
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <MX_ADC1_Init+0x98>)
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <MX_ADC1_Init+0x9c>)
 80024c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <MX_ADC1_Init+0x98>)
 80024c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <MX_ADC1_Init+0x98>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <MX_ADC1_Init+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_ADC1_Init+0x98>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <MX_ADC1_Init+0x98>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <MX_ADC1_Init+0x98>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024ec:	4b15      	ldr	r3, [pc, #84]	; (8002544 <MX_ADC1_Init+0x98>)
 80024ee:	4a17      	ldr	r2, [pc, #92]	; (800254c <MX_ADC1_Init+0xa0>)
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <MX_ADC1_Init+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_ADC1_Init+0x98>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_ADC1_Init+0x98>)
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_ADC1_Init+0x98>)
 8002508:	2201      	movs	r2, #1
 800250a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <MX_ADC1_Init+0x98>)
 800250e:	f002 f8e9 	bl	80046e4 <HAL_ADC_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002518:	f000 fab2 	bl	8002a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <MX_ADC1_Init+0xa4>)
 800251e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002520:	2301      	movs	r3, #1
 8002522:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	4619      	mov	r1, r3
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_ADC1_Init+0x98>)
 800252e:	f002 fa17 	bl	8004960 <HAL_ADC_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002538:	f000 faa2 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20008298 	.word	0x20008298
 8002548:	40012000 	.word	0x40012000
 800254c:	0f000001 	.word	0x0f000001
 8002550:	10000012 	.word	0x10000012

08002554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255a:	f107 031c 	add.w	r3, r7, #28
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002566:	463b      	mov	r3, r7
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
 8002574:	615a      	str	r2, [r3, #20]
 8002576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <MX_TIM2_Init+0xb0>)
 800257a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800257e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 422;
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <MX_TIM2_Init+0xb0>)
 8002582:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8002586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <MX_TIM2_Init+0xb0>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_TIM2_Init+0xb0>)
 8002590:	22ff      	movs	r2, #255	; 0xff
 8002592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_TIM2_Init+0xb0>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_TIM2_Init+0xb0>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025a0:	4818      	ldr	r0, [pc, #96]	; (8002604 <MX_TIM2_Init+0xb0>)
 80025a2:	f003 fd93 	bl	80060cc <HAL_TIM_PWM_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80025ac:	f000 fa68 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4619      	mov	r1, r3
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <MX_TIM2_Init+0xb0>)
 80025c0:	f003 ff52 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80025ca:	f000 fa59 	bl	8002a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ce:	2360      	movs	r3, #96	; 0x60
 80025d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025de:	463b      	mov	r3, r7
 80025e0:	2208      	movs	r2, #8
 80025e2:	4619      	mov	r1, r3
 80025e4:	4807      	ldr	r0, [pc, #28]	; (8002604 <MX_TIM2_Init+0xb0>)
 80025e6:	f003 fde7 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80025f0:	f000 fa46 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <MX_TIM2_Init+0xb0>)
 80025f6:	f000 faed 	bl	8002bd4 <HAL_TIM_MspPostInit>

}
 80025fa:	bf00      	nop
 80025fc:	3728      	adds	r7, #40	; 0x28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200083c4 	.word	0x200083c4

08002608 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <MX_TIM7_Init+0x64>)
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <MX_TIM7_Init+0x68>)
 800261c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <MX_TIM7_Init+0x64>)
 8002620:	226b      	movs	r2, #107	; 0x6b
 8002622:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <MX_TIM7_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_TIM7_Init+0x64>)
 800262c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002630:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_TIM7_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002638:	480c      	ldr	r0, [pc, #48]	; (800266c <MX_TIM7_Init+0x64>)
 800263a:	f003 fd2d 	bl	8006098 <HAL_TIM_Base_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002644:	f000 fa1c 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	4619      	mov	r1, r3
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_TIM7_Init+0x64>)
 8002656:	f003 ff07 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002660:	f000 fa0e 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20008404 	.word	0x20008404
 8002670:	40001400 	.word	0x40001400

08002674 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
 8002688:	615a      	str	r2, [r3, #20]
 800268a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <MX_TIM10_Init+0xa8>)
 800268e:	4a24      	ldr	r2, [pc, #144]	; (8002720 <MX_TIM10_Init+0xac>)
 8002690:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10799;
 8002692:	4b22      	ldr	r3, [pc, #136]	; (800271c <MX_TIM10_Init+0xa8>)
 8002694:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002698:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <MX_TIM10_Init+0xa8>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <MX_TIM10_Init+0xa8>)
 80026a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80026a6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a8:	4b1c      	ldr	r3, [pc, #112]	; (800271c <MX_TIM10_Init+0xa8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	4b1b      	ldr	r3, [pc, #108]	; (800271c <MX_TIM10_Init+0xa8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026b4:	4819      	ldr	r0, [pc, #100]	; (800271c <MX_TIM10_Init+0xa8>)
 80026b6:	f003 fcef 	bl	8006098 <HAL_TIM_Base_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80026c0:	f000 f9de 	bl	8002a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80026c4:	4815      	ldr	r0, [pc, #84]	; (800271c <MX_TIM10_Init+0xa8>)
 80026c6:	f003 fd01 	bl	80060cc <HAL_TIM_PWM_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80026d0:	f000 f9d6 	bl	8002a80 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 80026d4:	2108      	movs	r1, #8
 80026d6:	4811      	ldr	r0, [pc, #68]	; (800271c <MX_TIM10_Init+0xa8>)
 80026d8:	f003 fd12 	bl	8006100 <HAL_TIM_OnePulse_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM10_Init+0x72>
  {
    Error_Handler();
 80026e2:	f000 f9cd 	bl	8002a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e6:	2360      	movs	r3, #96	; 0x60
 80026e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000;
 80026ea:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2200      	movs	r2, #0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4807      	ldr	r0, [pc, #28]	; (800271c <MX_TIM10_Init+0xa8>)
 8002700:	f003 fd5a 	bl	80061b8 <HAL_TIM_PWM_ConfigChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM10_Init+0x9a>
  {
    Error_Handler();
 800270a:	f000 f9b9 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800270e:	4803      	ldr	r0, [pc, #12]	; (800271c <MX_TIM10_Init+0xa8>)
 8002710:	f000 fa60 	bl	8002bd4 <HAL_TIM_MspPostInit>

}
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20008174 	.word	0x20008174
 8002720:	40014400 	.word	0x40014400

08002724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_USART1_UART_Init+0x54>)
 800272a:	4a14      	ldr	r2, [pc, #80]	; (800277c <MX_USART1_UART_Init+0x58>)
 800272c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_USART1_UART_Init+0x54>)
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <MX_USART1_UART_Init+0x5c>)
 8002732:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_USART1_UART_Init+0x54>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <MX_USART1_UART_Init+0x54>)
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <MX_USART1_UART_Init+0x54>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <MX_USART1_UART_Init+0x54>)
 8002748:	220c      	movs	r2, #12
 800274a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_USART1_UART_Init+0x54>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <MX_USART1_UART_Init+0x54>)
 8002754:	2200      	movs	r2, #0
 8002756:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <MX_USART1_UART_Init+0x54>)
 800275a:	2200      	movs	r2, #0
 800275c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_USART1_UART_Init+0x54>)
 8002760:	2200      	movs	r2, #0
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <MX_USART1_UART_Init+0x54>)
 8002766:	f004 fa82 	bl	8006c6e <HAL_UART_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8002770:	f000 f986 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20008340 	.word	0x20008340
 800277c:	40011000 	.word	0x40011000
 8002780:	00337f98 	.word	0x00337f98

08002784 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 800278a:	4a14      	ldr	r2, [pc, #80]	; (80027dc <MX_USART3_UART_Init+0x58>)
 800278c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 960000;
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <MX_USART3_UART_Init+0x5c>)
 8002792:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 80027a8:	220c      	movs	r2, #12
 80027aa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027c4:	4804      	ldr	r0, [pc, #16]	; (80027d8 <MX_USART3_UART_Init+0x54>)
 80027c6:	f004 fa52 	bl	8006c6e <HAL_UART_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 80027d0:	f000 f956 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200080f4 	.word	0x200080f4
 80027dc:	40004800 	.word	0x40004800
 80027e0:	000ea600 	.word	0x000ea600

080027e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <MX_DMA_Init+0x80>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <MX_DMA_Init+0x80>)
 80027f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_DMA_Init+0x80>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_DMA_Init+0x80>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a17      	ldr	r2, [pc, #92]	; (8002864 <MX_DMA_Init+0x80>)
 8002808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_DMA_Init+0x80>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 9, 0); //PC
 800281a:	2200      	movs	r2, #0
 800281c:	2109      	movs	r1, #9
 800281e:	200c      	movs	r0, #12
 8002820:	f002 f956 	bl	8004ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002824:	200c      	movs	r0, #12
 8002826:	f002 f985 	bl	8004b34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 9, 0); //PC
 800282a:	2200      	movs	r2, #0
 800282c:	2109      	movs	r1, #9
 800282e:	200e      	movs	r0, #14
 8002830:	f002 f94e 	bl	8004ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002834:	200e      	movs	r0, #14
 8002836:	f002 f97d 	bl	8004b34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //ACIS
 800283a:	2200      	movs	r2, #0
 800283c:	2108      	movs	r1, #8
 800283e:	203a      	movs	r0, #58	; 0x3a
 8002840:	f002 f946 	bl	8004ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002844:	203a      	movs	r0, #58	; 0x3a
 8002846:	f002 f975 	bl	8004b34 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //ACIS
 800284a:	2200      	movs	r2, #0
 800284c:	2108      	movs	r1, #8
 800284e:	2046      	movs	r0, #70	; 0x46
 8002850:	f002 f93e 	bl	8004ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002854:	2046      	movs	r0, #70	; 0x46
 8002856:	f002 f96d 	bl	8004b34 <HAL_NVIC_EnableIRQ>

}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
 800287c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <MX_GPIO_Init+0x204>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a7a      	ldr	r2, [pc, #488]	; (8002a6c <MX_GPIO_Init+0x204>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <MX_GPIO_Init+0x204>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002896:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <MX_GPIO_Init+0x204>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a74      	ldr	r2, [pc, #464]	; (8002a6c <MX_GPIO_Init+0x204>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <MX_GPIO_Init+0x204>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <MX_GPIO_Init+0x204>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <MX_GPIO_Init+0x204>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <MX_GPIO_Init+0x204>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c6:	4b69      	ldr	r3, [pc, #420]	; (8002a6c <MX_GPIO_Init+0x204>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a68      	ldr	r2, [pc, #416]	; (8002a6c <MX_GPIO_Init+0x204>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <MX_GPIO_Init+0x204>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin|LCD_CS1_Pin, GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	2116      	movs	r1, #22
 80028e2:	4863      	ldr	r0, [pc, #396]	; (8002a70 <MX_GPIO_Init+0x208>)
 80028e4:	f002 fc96 	bl	8005214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 80028e8:	2200      	movs	r2, #0
 80028ea:	f248 01ff 	movw	r1, #33023	; 0x80ff
 80028ee:	4861      	ldr	r0, [pc, #388]	; (8002a74 <MX_GPIO_Init+0x20c>)
 80028f0:	f002 fc90 	bl	8005214 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
                          |USB_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 80028f4:	2201      	movs	r2, #1
 80028f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028fa:	485f      	ldr	r0, [pc, #380]	; (8002a78 <MX_GPIO_Init+0x210>)
 80028fc:	f002 fc8a 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002906:	485c      	ldr	r0, [pc, #368]	; (8002a78 <MX_GPIO_Init+0x210>)
 8002908:	f002 fc84 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002912:	4859      	ldr	r0, [pc, #356]	; (8002a78 <MX_GPIO_Init+0x210>)
 8002914:	f002 fc7e 	bl	8005214 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8002918:	2201      	movs	r2, #1
 800291a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800291e:	4856      	ldr	r0, [pc, #344]	; (8002a78 <MX_GPIO_Init+0x210>)
 8002920:	f002 fc78 	bl	8005214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin|LCD_EN_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002924:	2200      	movs	r2, #0
 8002926:	2107      	movs	r1, #7
 8002928:	4853      	ldr	r0, [pc, #332]	; (8002a78 <MX_GPIO_Init+0x210>)
 800292a:	f002 fc73 	bl	8005214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 800292e:	2306      	movs	r3, #6
 8002930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	2301      	movs	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	484a      	ldr	r0, [pc, #296]	; (8002a70 <MX_GPIO_Init+0x208>)
 8002946:	f002 fb89 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 800294a:	2302      	movs	r3, #2
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002956:	2303      	movs	r3, #3
 8002958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4845      	ldr	r0, [pc, #276]	; (8002a78 <MX_GPIO_Init+0x210>)
 8002962:	f002 fb7b 	bl	800505c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1G_Pin|LED2G_Pin|LED2R_Pin|LED1R_Pin;
 8002966:	f44f 4331 	mov.w	r3, #45312	; 0xb100
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800296c:	2311      	movs	r3, #17
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4619      	mov	r1, r3
 800297e:	483e      	ldr	r0, [pc, #248]	; (8002a78 <MX_GPIO_Init+0x210>)
 8002980:	f002 fb6c 	bl	800505c <HAL_GPIO_Init>


  /*Configure GPIO pins : LCD_DB0_LED1R_Pin LCD_DB1_LED1G_Pin LCD_DB2_LED2R_Pin LCD_DB3_LED2G_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 8002984:	23ff      	movs	r3, #255	; 0xff
 8002986:	617b      	str	r3, [r7, #20]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002988:	2301      	movs	r3, #1
 800298a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	4836      	ldr	r0, [pc, #216]	; (8002a74 <MX_GPIO_Init+0x20c>)
 800299c:	f002 fb5e 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS1_Pin */
  GPIO_InitStruct.Pin = LCD_CS1_Pin;
 80029a0:	2310      	movs	r3, #16
 80029a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS1_GPIO_Port, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	482e      	ldr	r0, [pc, #184]	; (8002a70 <MX_GPIO_Init+0x208>)
 80029b8:	f002 fb50 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS2_Pin|LCD_RST_Pin;
 80029bc:	2305      	movs	r3, #5
 80029be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c0:	2301      	movs	r3, #1
 80029c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	4829      	ldr	r0, [pc, #164]	; (8002a78 <MX_GPIO_Init+0x210>)
 80029d4:	f002 fb42 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_DISPLAY_Pin SW_FUEL2_Pin SW_FUEL1_Pin BUT_CANCEL_Pin */
  GPIO_InitStruct.Pin = SW_DISPLAY_Pin|SW_FUEL2_Pin|SW_FUEL1_Pin|BUT_CANCEL_Pin;
 80029d8:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
 80029dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	4820      	ldr	r0, [pc, #128]	; (8002a70 <MX_GPIO_Init+0x208>)
 80029ee:	f002 fb35 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a04:	230a      	movs	r3, #10
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4819      	ldr	r0, [pc, #100]	; (8002a74 <MX_GPIO_Init+0x20c>)
 8002a10:	f002 fb24 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_RST_Pin */
  GPIO_InitStruct.Pin = USB_RST_Pin;
 8002a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RST_GPIO_Port, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4811      	ldr	r0, [pc, #68]	; (8002a74 <MX_GPIO_Init+0x20c>)
 8002a2e:	f002 fb15 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_ENTER_Pin */
  GPIO_InitStruct.Pin = BUT_ENTER_Pin;
 8002a32:	2304      	movs	r3, #4
 8002a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_ENTER_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <MX_GPIO_Init+0x214>)
 8002a46:	f002 fb09 	bl	800505c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_UP_Pin BUT_DOWN_Pin */
  GPIO_InitStruct.Pin = BUT_LEFT_Pin|BUT_RIGHT_Pin|BUT_UP_Pin|BUT_DOWN_Pin;
 8002a4a:	23f0      	movs	r3, #240	; 0xf0
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4806      	ldr	r0, [pc, #24]	; (8002a78 <MX_GPIO_Init+0x210>)
 8002a5e:	f002 fafd 	bl	800505c <HAL_GPIO_Init>

}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020c00 	.word	0x40020c00

08002a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <Error_Handler+0x6>

08002a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_MspInit+0x4c>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	f06f 0001 	mvn.w	r0, #1
 8002ac6:	f002 f803 	bl	8004ad0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_ADC_MspInit+0x44>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d113      	bne.n	8002b12 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_ADC_MspInit+0x48>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_ADC_MspInit+0x48>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_ADC_MspInit+0x48>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2105      	movs	r1, #5
 8002b06:	2012      	movs	r0, #18
 8002b08:	f001 ffe2 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b0c:	2012      	movs	r0, #18
 8002b0e:	f002 f811 	bl	8004b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40012000 	.word	0x40012000
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b34:	d10b      	bne.n	8002b4e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_TIM_PWM_MspInit+0x38>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_TIM_PWM_MspInit+0x38>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_TIM_PWM_MspInit+0x38>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_TIM_Base_MspInit+0x68>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d114      	bne.n	8002b9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_TIM_Base_MspInit+0x6c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <HAL_TIM_Base_MspInit+0x6c>)
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_TIM_Base_MspInit+0x6c>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	2037      	movs	r0, #55	; 0x37
 8002b90:	f001 ff9e 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b94:	2037      	movs	r0, #55	; 0x37
 8002b96:	f001 ffcd 	bl	8004b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002b9a:	e010      	b.n	8002bbe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <HAL_TIM_Base_MspInit+0x70>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10b      	bne.n	8002bbe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_TIM_Base_MspInit+0x6c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_TIM_Base_MspInit+0x6c>)
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_TIM_Base_MspInit+0x6c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40001400 	.word	0x40001400
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40014400 	.word	0x40014400

08002bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d11d      	bne.n	8002c32 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_TIM_MspPostInit+0x88>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <HAL_TIM_MspPostInit+0x88>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_TIM_MspPostInit+0x88>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LCD_LED_TIM2_CH3_Pin;
 8002c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c20:	2301      	movs	r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LED_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	4619      	mov	r1, r3
 8002c2a:	480d      	ldr	r0, [pc, #52]	; (8002c60 <HAL_TIM_MspPostInit+0x8c>)
 8002c2c:	f002 fa16 	bl	800505c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002c30:	e010      	b.n	8002c54 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM10)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_TIM_MspPostInit+0x90>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10b      	bne.n	8002c54 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <HAL_TIM_MspPostInit+0x88>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a06      	ldr	r2, [pc, #24]	; (8002c5c <HAL_TIM_MspPostInit+0x88>)
 8002c42:	f043 0302 	orr.w	r3, r3, #2
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_TIM_MspPostInit+0x88>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3728      	adds	r7, #40	; 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40014400 	.word	0x40014400

08002c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	; 0x30
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a96      	ldr	r2, [pc, #600]	; (8002ee0 <HAL_UART_MspInit+0x278>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f040 8091 	bne.w	8002dae <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c8c:	4b95      	ldr	r3, [pc, #596]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	4a94      	ldr	r2, [pc, #592]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002c92:	f043 0310 	orr.w	r3, r3, #16
 8002c96:	6453      	str	r3, [r2, #68]	; 0x44
 8002c98:	4b92      	ldr	r3, [pc, #584]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b8f      	ldr	r3, [pc, #572]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a8e      	ldr	r2, [pc, #568]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b8c      	ldr	r3, [pc, #560]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cce:	2307      	movs	r3, #7
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4883      	ldr	r0, [pc, #524]	; (8002ee8 <HAL_UART_MspInit+0x280>)
 8002cda:	f002 f9bf 	bl	800505c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002cde:	4b83      	ldr	r3, [pc, #524]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002ce0:	4a83      	ldr	r2, [pc, #524]	; (8002ef0 <HAL_UART_MspInit+0x288>)
 8002ce2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002ce4:	4b81      	ldr	r3, [pc, #516]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cec:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf2:	4b7e      	ldr	r3, [pc, #504]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cf8:	4b7c      	ldr	r3, [pc, #496]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d00:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d06:	4b79      	ldr	r3, [pc, #484]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d0c:	4b77      	ldr	r3, [pc, #476]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d12:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1c:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d22:	4872      	ldr	r0, [pc, #456]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d24:	f002 f80e 	bl	8004d44 <HAL_DMA_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002d2e:	f7ff fea7 	bl	8002a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a6d      	ldr	r2, [pc, #436]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d36:	66da      	str	r2, [r3, #108]	; 0x6c
 8002d38:	4a6c      	ldr	r2, [pc, #432]	; (8002eec <HAL_UART_MspInit+0x284>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d40:	4a6d      	ldr	r2, [pc, #436]	; (8002ef8 <HAL_UART_MspInit+0x290>)
 8002d42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d44:	4b6b      	ldr	r3, [pc, #428]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d4c:	4b69      	ldr	r3, [pc, #420]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d52:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d58:	4b66      	ldr	r3, [pc, #408]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d60:	4b64      	ldr	r3, [pc, #400]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d6c:	4b61      	ldr	r3, [pc, #388]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d72:	4b60      	ldr	r3, [pc, #384]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d78:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d80:	485c      	ldr	r0, [pc, #368]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d82:	f001 ffdf 	bl	8004d44 <HAL_DMA_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002d8c:	f7ff fe78 	bl	8002a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d94:	669a      	str	r2, [r3, #104]	; 0x68
 8002d96:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <HAL_UART_MspInit+0x28c>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2105      	movs	r1, #5
 8002da0:	2025      	movs	r0, #37	; 0x25
 8002da2:	f001 fe95 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002da6:	2025      	movs	r0, #37	; 0x25
 8002da8:	f001 fec4 	bl	8004b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dac:	e093      	b.n	8002ed6 <HAL_UART_MspInit+0x26e>
  else if(huart->Instance==USART3)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_UART_MspInit+0x294>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	f040 808e 	bne.w	8002ed6 <HAL_UART_MspInit+0x26e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dba:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd2:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_UART_MspInit+0x27c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df4:	2301      	movs	r3, #1
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4619      	mov	r1, r3
 8002e06:	483e      	ldr	r0, [pc, #248]	; (8002f00 <HAL_UART_MspInit+0x298>)
 8002e08:	f002 f928 	bl	800505c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e0e:	4a3e      	ldr	r2, [pc, #248]	; (8002f08 <HAL_UART_MspInit+0x2a0>)
 8002e10:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002e12:	4b3c      	ldr	r3, [pc, #240]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e18:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e1a:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e20:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e34:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002e3a:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e40:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e48:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e4e:	482d      	ldr	r0, [pc, #180]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e50:	f001 ff78 	bl	8004d44 <HAL_DMA_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8002e5a:	f7ff fe11 	bl	8002a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e62:	66da      	str	r2, [r3, #108]	; 0x6c
 8002e64:	4a27      	ldr	r2, [pc, #156]	; (8002f04 <HAL_UART_MspInit+0x29c>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002e6a:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e6c:	4a28      	ldr	r2, [pc, #160]	; (8002f10 <HAL_UART_MspInit+0x2a8>)
 8002e6e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002e70:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e76:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e92:	4b1e      	ldr	r3, [pc, #120]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002eaa:	4818      	ldr	r0, [pc, #96]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002eac:	f001 ff4a 	bl	8004d44 <HAL_DMA_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_MspInit+0x252>
      Error_Handler();
 8002eb6:	f7ff fde3 	bl	8002a80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002ebe:	669a      	str	r2, [r3, #104]	; 0x68
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_UART_MspInit+0x2a4>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2105      	movs	r1, #5
 8002eca:	2027      	movs	r0, #39	; 0x27
 8002ecc:	f001 fe00 	bl	8004ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ed0:	2027      	movs	r0, #39	; 0x27
 8002ed2:	f001 fe2f 	bl	8004b34 <HAL_NVIC_EnableIRQ>
}
 8002ed6:	bf00      	nop
 8002ed8:	3730      	adds	r7, #48	; 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40011000 	.word	0x40011000
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020000 	.word	0x40020000
 8002eec:	200082e0 	.word	0x200082e0
 8002ef0:	40026440 	.word	0x40026440
 8002ef4:	20008238 	.word	0x20008238
 8002ef8:	400264b8 	.word	0x400264b8
 8002efc:	40004800 	.word	0x40004800
 8002f00:	40020800 	.word	0x40020800
 8002f04:	20008094 	.word	0x20008094
 8002f08:	40026028 	.word	0x40026028
 8002f0c:	200081d8 	.word	0x200081d8
 8002f10:	40026058 	.word	0x40026058

08002f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <NMI_Handler+0x4>

08002f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <HardFault_Handler+0x4>

08002f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <MemManage_Handler+0x4>

08002f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <BusFault_Handler+0x4>

08002f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <UsageFault_Handler+0x4>

08002f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f44:	f001 fba8 	bl	8004698 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f48:	f005 f952 	bl	80081f0 <xTaskGetSchedulerState>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d001      	beq.n	8002f56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f52:	f005 fd27 	bl	80089a4 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <DMA1_Stream1_IRQHandler+0x10>)
 8002f62:	f001 ffbd 	bl	8004ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20008094 	.word	0x20008094

08002f70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <DMA1_Stream3_IRQHandler+0x10>)
 8002f76:	f001 ffb3 	bl	8004ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200081d8 	.word	0x200081d8

08002f84 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <ADC_IRQHandler+0x10>)
 8002f8a:	f001 fc54 	bl	8004836 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20008298 	.word	0x20008298

08002f98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <USART1_IRQHandler+0x10>)
 8002f9e:	f003 fbb7 	bl	8006710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20008340 	.word	0x20008340

08002fac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <USART3_IRQHandler+0x10>)
 8002fb2:	f003 fbad 	bl	8006710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200080f4 	.word	0x200080f4

08002fc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <TIM7_IRQHandler+0x10>)
 8002fc6:	f002 ff50 	bl	8005e6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20008404 	.word	0x20008404

08002fd4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <DMA2_Stream2_IRQHandler+0x10>)
 8002fda:	f001 ff81 	bl	8004ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200082e0 	.word	0x200082e0

08002fe8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <DMA2_Stream7_IRQHandler+0x10>)
 8002fee:	f001 ff77 	bl	8004ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20008238 	.word	0x20008238

08002ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <_sbrk+0x5c>)
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <_sbrk+0x60>)
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <_sbrk+0x64>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <_sbrk+0x64>)
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <_sbrk+0x68>)
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	429a      	cmp	r2, r3
 800302a:	d207      	bcs.n	800303c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800302c:	f007 f9aa 	bl	800a384 <__errno>
 8003030:	4602      	mov	r2, r0
 8003032:	230c      	movs	r3, #12
 8003034:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	e009      	b.n	8003050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <_sbrk+0x64>)
 800304c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20040000 	.word	0x20040000
 800305c:	00000400 	.word	0x00000400
 8003060:	20002b30 	.word	0x20002b30
 8003064:	20008490 	.word	0x20008490

08003068 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <SystemInit+0x28>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	4a07      	ldr	r2, [pc, #28]	; (8003090 <SystemInit+0x28>)
 8003074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SystemInit+0x28>)
 800307e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003082:	609a      	str	r2, [r3, #8]
#endif
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80030a6:	2320      	movs	r3, #32
 80030a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80030aa:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 80030ae:	e00b      	b.n	80030c8 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 80030b0:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <SCB_InvalidateDCache_by_Addr+0x50>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	dcf0      	bgt.n	80030b0 <SCB_InvalidateDCache_by_Addr+0x1c>
 80030ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80030d2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80030fa:	2320      	movs	r3, #32
 80030fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80030fe:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8003102:	e00b      	b.n	800311c <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8003104:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <SCB_CleanDCache_by_Addr+0x50>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	dcf0      	bgt.n	8003104 <SCB_CleanDCache_by_Addr+0x1c>
 8003122:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003126:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <Msg_GetSrc>:
static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, etrACIS },
    {{0},{0},{0},{0},{0},{0}, &huart3, etrPC },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff7d 	bl	8003094 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800319a:	e009      	b.n	80031b0 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	f7ff ff72 	bl	8003094 <SCB_InvalidateDCache_by_Addr>
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff87 	bl	80030e8 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 80031da:	e009      	b.n	80031f0 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7ff ff7c 	bl	80030e8 <SCB_CleanDCache_by_Addr>
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <calculatePacketId+0x6c>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <calculatePacketId+0x6c>)
 8003208:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <calculatePacketId+0x6c>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <calculatePacketId+0x70>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 8003216:	89fb      	ldrh	r3, [r7, #14]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	b29b      	uxth	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	703b      	strb	r3, [r7, #0]
 8003220:	89fb      	ldrh	r3, [r7, #14]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	707b      	strb	r3, [r7, #1]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	0e1b      	lsrs	r3, r3, #24
 800322a:	b2db      	uxtb	r3, r3
 800322c:	70bb      	strb	r3, [r7, #2]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b2db      	uxtb	r3, r3
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	b2db      	uxtb	r3, r3
 800323c:	713b      	strb	r3, [r7, #4]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 8003244:	463b      	mov	r3, r7
 8003246:	2106      	movs	r1, #6
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fb73 	bl	8001934 <CRC16_Generate>
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0d2      	beq.n	80031fe <calculatePacketId+0x6>
  return returnvalue;
 8003258:	88fb      	ldrh	r3, [r7, #6]

}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20002b48 	.word	0x20002b48
 8003268:	40000c00 	.word	0x40000c00

0800326c <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	4611      	mov	r1, r2
 8003278:	461a      	mov	r2, r3
 800327a:	460b      	mov	r3, r1
 800327c:	80fb      	strh	r3, [r7, #6]
 800327e:	4613      	mov	r3, r2
 8003280:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8106 	beq.w	8003496 <packager+0x22a>
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003290:	f080 8101 	bcs.w	8003496 <packager+0x22a>
    {
        uint16_t aCrc15 = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <packager+0x3a>
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	330a      	adds	r3, #10
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	e000      	b.n	80032a8 <packager+0x3c>
 80032a6:	2308      	movs	r3, #8
 80032a8:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = ( etrCTRL | ( xChaDest << 3 ) ) & HEADER_MASK_BITS;
 80032aa:	797b      	ldrb	r3, [r7, #5]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	f043 0303 	orr.w	r3, r3, #3
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80032c4:	2255      	movs	r2, #85	; 0x55
 80032c6:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	f241 0381 	movw	r3, #4225	; 0x1081
 80032ce:	4413      	add	r3, r2
 80032d0:	2255      	movs	r2, #85	; 0x55
 80032d2:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	f241 0382 	movw	r3, #4226	; 0x1082
 80032da:	4413      	add	r3, r2
 80032dc:	7cfa      	ldrb	r2, [r7, #19]
 80032de:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 80032e0:	8abb      	ldrh	r3, [r7, #20]
 80032e2:	b2d9      	uxtb	r1, r3
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	f241 0383 	movw	r3, #4227	; 0x1083
 80032ea:	4413      	add	r3, r2
 80032ec:	460a      	mov	r2, r1
 80032ee:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 80032f0:	8abb      	ldrh	r3, [r7, #20]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	b2d9      	uxtb	r1, r3
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	f241 0384 	movw	r3, #4228	; 0x1084
 80032fe:	4413      	add	r3, r2
 8003300:	460a      	mov	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 8003304:	8c3b      	ldrh	r3, [r7, #32]
 8003306:	b2d9      	uxtb	r1, r3
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	f241 0385 	movw	r3, #4229	; 0x1085
 800330e:	4413      	add	r3, r2
 8003310:	460a      	mov	r2, r1
 8003312:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 8003314:	8c3b      	ldrh	r3, [r7, #32]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	b29b      	uxth	r3, r3
 800331a:	b2d9      	uxtb	r1, r3
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	f241 0386 	movw	r3, #4230	; 0x1086
 8003322:	4413      	add	r3, r2
 8003324:	460a      	mov	r2, r1
 8003326:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800332e:	2107      	movs	r1, #7
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe fb37 	bl	80019a4 <CRC8_Generate>
 8003336:	4603      	mov	r3, r0
 8003338:	4619      	mov	r1, r3
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	f241 0387 	movw	r3, #4231	; 0x1087
 8003340:	4413      	add	r3, r2
 8003342:	460a      	mov	r2, r1
 8003344:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <packager+0x108>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	f241 0388 	movw	r3, #4232	; 0x1088
 8003352:	4413      	add	r3, r2
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	4618      	mov	r0, r3
 800335a:	f007 f83d 	bl	800a3d8 <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	3308      	adds	r3, #8
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f7fe fae2 	bl	8001934 <CRC16_Generate>
 8003370:	4603      	mov	r3, r0
 8003372:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f241 3388 	movw	r3, #5000	; 0x1388
 800337e:	4413      	add	r3, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f001 f916 	bl	80045b2 <protIsSome>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d149      	bne.n	8003420 <packager+0x1b4>
        {
          taskENTER_CRITICAL();
 800338c:	f005 fa9a 	bl	80088c4 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003396:	4413      	add	r3, r2
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d13d      	bne.n	800341c <packager+0x1b0>
          {
            xHandle->TxBusy = 1;
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	f241 33d0 	movw	r3, #5072	; 0x13d0
 80033a6:	4413      	add	r3, r2
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
            handled = 1;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 80033b0:	f005 faae 	bl	8008910 <vPortExitCritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f503 7040 	add.w	r0, r3, #768	; 0x300
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80033c0:	2208      	movs	r2, #8
 80033c2:	4619      	mov	r1, r3
 80033c4:	f007 f808 	bl	800a3d8 <memcpy>
            if (xMsgLen) {
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <packager+0x188>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	f241 0388 	movw	r3, #4232	; 0x1088
 80033da:	4413      	add	r3, r2
 80033dc:	88fa      	ldrh	r2, [r7, #6]
 80033de:	4619      	mov	r1, r3
 80033e0:	f006 fffa 	bl	800a3d8 <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	3308      	adds	r3, #8
 80033e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	8a3a      	ldrh	r2, [r7, #16]
 80033f2:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80033fa:	8aba      	ldrh	r2, [r7, #20]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff feda 	bl	80031b8 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003412:	8aba      	ldrh	r2, [r7, #20]
 8003414:	4619      	mov	r1, r3
 8003416:	f003 f887 	bl	8006528 <HAL_UART_Transmit_DMA>
 800341a:	e001      	b.n	8003420 <packager+0x1b4>
          }
          else taskEXIT_CRITICAL();
 800341c:	f005 fa78 	bl	8008910 <vPortExitCritical>
        }

        if(!handled)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d137      	bne.n	8003496 <packager+0x22a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	f241 339c 	movw	r3, #5020	; 0x139c
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	4618      	mov	r0, r3
 8003436:	f004 f94b 	bl	80076d0 <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003440:	4413      	add	r3, r2
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 8003448:	2208      	movs	r2, #8
 800344a:	4618      	mov	r0, r3
 800344c:	f001 f83d 	bl	80044ca <protPushSequence>
          if (xMsgLen) {
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d015      	beq.n	8003482 <packager+0x216>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f241 3388 	movw	r3, #5000	; 0x1388
 800345c:	4413      	add	r3, r2
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	f241 0188 	movw	r1, #4232	; 0x1088
 8003464:	4411      	add	r1, r2
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	4618      	mov	r0, r3
 800346a:	f001 f82e 	bl	80044ca <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f241 3388 	movw	r3, #5000	; 0x1388
 8003474:	4413      	add	r3, r2
 8003476:	f107 0110 	add.w	r1, r7, #16
 800347a:	2202      	movs	r2, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f001 f824 	bl	80044ca <protPushSequence>
          }
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f241 339c 	movw	r3, #5020	; 0x139c
 8003488:	4413      	add	r3, r2
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	2300      	movs	r3, #0
 800348e:	2200      	movs	r2, #0
 8003490:	2100      	movs	r1, #0
 8003492:	f003 ff0d 	bl	80072b0 <xQueueGenericSend>
        }
    }
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	807b      	strh	r3, [r7, #2]
 80034aa:	4613      	mov	r3, r2
 80034ac:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8089 	beq.w	80035c8 <acker+0x12a>
    {
        uint16_t aTotLen = 8;
 80034b6:	2308      	movs	r3, #8
 80034b8:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrCTRL | ( xChaDest << 3 ) ) | HEADER_ACK_BIT) & HEADER_MASK_BITS;
 80034ba:	787b      	ldrb	r3, [r7, #1]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	f043 0303 	orr.w	r3, r3, #3
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 80034ce:	2355      	movs	r3, #85	; 0x55
 80034d0:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 80034d2:	2355      	movs	r3, #85	; 0x55
 80034d4:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 80034da:	8abb      	ldrh	r3, [r7, #20]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 80034e0:	8abb      	ldrh	r3, [r7, #20]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 80034ea:	887b      	ldrh	r3, [r7, #2]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	2107      	movs	r1, #7
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fa4f 	bl	80019a4 <CRC8_Generate>
 8003506:	4603      	mov	r3, r0
 8003508:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	f241 3388 	movw	r3, #5000	; 0x1388
 8003514:	4413      	add	r3, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f001 f84b 	bl	80045b2 <protIsSome>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d131      	bne.n	8003586 <acker+0xe8>
        {
          taskENTER_CRITICAL();
 8003522:	f005 f9cf 	bl	80088c4 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800352c:	4413      	add	r3, r2
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d125      	bne.n	8003582 <acker+0xe4>
          {
            xHandle->TxBusy = 1;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800353c:	4413      	add	r3, r2
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
            handled = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8003546:	f005 f9e3 	bl	8008910 <vPortExitCritical>
            memcpy(xHandle->BufTx,header,8);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003550:	461a      	mov	r2, r3
 8003552:	f107 0308 	add.w	r3, r7, #8
 8003556:	cb03      	ldmia	r3!, {r0, r1}
 8003558:	6010      	str	r0, [r2, #0]
 800355a:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003562:	2108      	movs	r1, #8
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fe27 	bl	80031b8 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003578:	2208      	movs	r2, #8
 800357a:	4619      	mov	r1, r3
 800357c:	f002 ffd4 	bl	8006528 <HAL_UART_Transmit_DMA>
 8003580:	e001      	b.n	8003586 <acker+0xe8>
          }
          else taskEXIT_CRITICAL();
 8003582:	f005 f9c5 	bl	8008910 <vPortExitCritical>
        }

        if(!handled)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11d      	bne.n	80035c8 <acker+0x12a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	f241 339c 	movw	r3, #5020	; 0x139c
 8003592:	4413      	add	r3, r2
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f04f 31ff 	mov.w	r1, #4294967295
 800359a:	4618      	mov	r0, r3
 800359c:	f004 f898 	bl	80076d0 <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,header,8);
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80035a6:	4413      	add	r3, r2
 80035a8:	f107 0108 	add.w	r1, r7, #8
 80035ac:	2208      	movs	r2, #8
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 ff8b 	bl	80044ca <protPushSequence>
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	f241 339c 	movw	r3, #5020	; 0x139c
 80035ba:	4413      	add	r3, r2
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	f003 fe74 	bl	80072b0 <xQueueGenericSend>
        }
    }
}
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	4603      	mov	r3, r0
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 80035de:	4b4f      	ldr	r3, [pc, #316]	; (800371c <xSender+0x14c>)
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = NULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	e019      	b.n	8003622 <xSender+0x52>
  {
    if(xHandles[i].xChannel == xChaDest)
 80035ee:	4a4c      	ldr	r2, [pc, #304]	; (8003720 <xSender+0x150>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f241 31d4 	movw	r1, #5076	; 0x13d4
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	441a      	add	r2, r3
 80035fc:	f241 3384 	movw	r3, #4996	; 0x1384
 8003600:	4413      	add	r3, r2
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	429a      	cmp	r2, r3
 8003608:	d108      	bne.n	800361c <xSender+0x4c>
    {
      handle = &xHandles[i];
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	4a42      	ldr	r2, [pc, #264]	; (8003720 <xSender+0x150>)
 8003616:	4413      	add	r3, r2
 8003618:	61fb      	str	r3, [r7, #28]
      break;
 800361a:	e005      	b.n	8003628 <xSender+0x58>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	3301      	adds	r3, #1
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d9e2      	bls.n	80035ee <xSender+0x1e>
    }
  }

  if(handle)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d070      	beq.n	8003710 <xSender+0x140>
  {
    taskENTER_CRITICAL();
 800362e:	f005 f949 	bl	80088c4 <vPortEnterCritical>
    if(NeedAckPacket)
 8003632:	4b3c      	ldr	r3, [pc, #240]	; (8003724 <xSender+0x154>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d045      	beq.n	80036c8 <xSender+0xf8>
    {
      if(ReceivedAckPacket)
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <xSender+0x158>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <xSender+0x8a>
      {
        NeedAckPacket = 0;
 8003646:	4b37      	ldr	r3, [pc, #220]	; (8003724 <xSender+0x154>)
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 800364c:	4b37      	ldr	r3, [pc, #220]	; (800372c <xSender+0x15c>)
 800364e:	2200      	movs	r2, #0
 8003650:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8003652:	f005 f95d 	bl	8008910 <vPortExitCritical>
        return 1;
 8003656:	2301      	movs	r3, #1
 8003658:	e05b      	b.n	8003712 <xSender+0x142>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 800365a:	4b35      	ldr	r3, [pc, #212]	; (8003730 <xSender+0x160>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4619      	mov	r1, r3
 8003660:	6978      	ldr	r0, [r7, #20]
 8003662:	f7fe fa57 	bl	8001b14 <DelayDiff>
 8003666:	4602      	mov	r2, r0
 8003668:	f241 3388 	movw	r3, #5000	; 0x1388
 800366c:	429a      	cmp	r2, r3
 800366e:	d928      	bls.n	80036c2 <xSender+0xf2>
        {
          if(RetriesPacket > RETRIES_MAX)
 8003670:	4b30      	ldr	r3, [pc, #192]	; (8003734 <xSender+0x164>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b14      	cmp	r3, #20
 8003678:	d90a      	bls.n	8003690 <xSender+0xc0>
          {
            NeedAckPacket = 0;
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <xSender+0x154>)
 800367c:	2200      	movs	r2, #0
 800367e:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <xSender+0x15c>)
 8003682:	2200      	movs	r2, #0
 8003684:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 8003686:	f005 f943 	bl	8008910 <vPortExitCritical>
            return -1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e040      	b.n	8003712 <xSender+0x142>
          }
          LastNotAckedTime = now;
 8003690:	4a27      	ldr	r2, [pc, #156]	; (8003730 <xSender+0x160>)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <xSender+0x164>)
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	3301      	adds	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <xSender+0x164>)
 80036a2:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 80036a4:	f005 f934 	bl	8008910 <vPortExitCritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	4b1f      	ldr	r3, [pc, #124]	; (800372c <xSender+0x15c>)
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	7bf9      	ldrb	r1, [r7, #15]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	460b      	mov	r3, r1
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	69f8      	ldr	r0, [r7, #28]
 80036bc:	f7ff fdd6 	bl	800326c <packager>
 80036c0:	e026      	b.n	8003710 <xSender+0x140>
        }
        else taskEXIT_CRITICAL();
 80036c2:	f005 f925 	bl	8008910 <vPortExitCritical>
 80036c6:	e023      	b.n	8003710 <xSender+0x140>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <xSender+0x158>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <xSender+0x154>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 80036d4:	4a16      	ldr	r2, [pc, #88]	; (8003730 <xSender+0x160>)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <xSender+0x164>)
 80036dc:	2200      	movs	r2, #0
 80036de:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 80036e0:	f005 f916 	bl	8008910 <vPortExitCritical>
      NeededAckPacketId = calculatePacketId();
 80036e4:	f7ff fd88 	bl	80031f8 <calculatePacketId>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <xSender+0x15c>)
 80036ee:	801a      	strh	r2, [r3, #0]
      time1 = Delay_Tick;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <xSender+0x14c>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	4a10      	ldr	r2, [pc, #64]	; (8003738 <xSender+0x168>)
 80036f6:	6013      	str	r3, [r2, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <xSender+0x15c>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	7bf9      	ldrb	r1, [r7, #15]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	460b      	mov	r3, r1
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	69f8      	ldr	r0, [r7, #28]
 800370c:	f7ff fdae 	bl	800326c <packager>
    }
  }
  return 0;
 8003710:	2300      	movs	r3, #0

}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40000c00 	.word	0x40000c00
 8003720:	20000040 	.word	0x20000040
 8003724:	20002b36 	.word	0x20002b36
 8003728:	20000038 	.word	0x20000038
 800372c:	20002b38 	.word	0x20002b38
 8003730:	20002b3c 	.word	0x20002b3c
 8003734:	20002b34 	.word	0x20002b34
 8003738:	20002b40 	.word	0x20002b40

0800373c <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	70fb      	strb	r3, [r7, #3]

	uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
	sGetterHandle * hDest = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	e019      	b.n	8003788 <parser+0x4c>
  {
    if(xHandles[i].xChannel == xChaSrc)
 8003754:	4aae      	ldr	r2, [pc, #696]	; (8003a10 <parser+0x2d4>)
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f241 31d4 	movw	r1, #5076	; 0x13d4
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	441a      	add	r2, r3
 8003762:	f241 3384 	movw	r3, #4996	; 0x1384
 8003766:	4413      	add	r3, r2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	429a      	cmp	r2, r3
 800376e:	d108      	bne.n	8003782 <parser+0x46>
    {
      hDest = &xHandles[i];
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003776:	fb02 f303 	mul.w	r3, r2, r3
 800377a:	4aa5      	ldr	r2, [pc, #660]	; (8003a10 <parser+0x2d4>)
 800377c:	4413      	add	r3, r2
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003780:	e005      	b.n	800378e <parser+0x52>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	3301      	adds	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	2b01      	cmp	r3, #1
 800378c:	d9e2      	bls.n	8003754 <parser+0x18>
    }
  }


    switch (xChaDest) {
 800378e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003792:	2b01      	cmp	r3, #1
 8003794:	f2c0 811d 	blt.w	80039d2 <parser+0x296>
 8003798:	2b02      	cmp	r3, #2
 800379a:	f340 8099 	ble.w	80038d0 <parser+0x194>
 800379e:	2b03      	cmp	r3, #3
 80037a0:	f040 8117 	bne.w	80039d2 <parser+0x296>

        case etrCTRL:
        {
            if (xDataLen)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d04f      	beq.n	800384a <parser+0x10e>
            {
                for(int i = 0; i < 8; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	e00a      	b.n	80037c6 <parser+0x8a>
                  protPull(xFifo, &header[i]);
 80037b0:	f107 0210 	add.w	r2, r7, #16
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	4413      	add	r3, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fec1 	bl	8004542 <protPull>
                for(int i = 0; i < 8; i++)
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	3301      	adds	r3, #1
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	2b07      	cmp	r3, #7
 80037ca:	ddf1      	ble.n	80037b0 <parser+0x74>

                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d0:	e010      	b.n	80037f4 <parser+0xb8>
                {
                  protPull(xFifo, &data);
 80037d2:	f107 0319 	add.w	r3, r7, #25
 80037d6:	4619      	mov	r1, r3
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 feb2 	bl	8004542 <protPull>
                  hDest->BufParser[aCount]=data;
 80037de:	7e79      	ldrb	r1, [r7, #25]
 80037e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80037ea:	460a      	mov	r2, r1
 80037ec:	701a      	strb	r2, [r3, #0]
                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	3301      	adds	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b0a      	subs	r3, #10
 80037f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d3e9      	bcc.n	80037d2 <parser+0x96>
                }
                protPull(xFifo, &data);
 80037fe:	f107 0319 	add.w	r3, r7, #25
 8003802:	4619      	mov	r1, r3
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fe9c 	bl	8004542 <protPull>
                protPull(xFifo, &data);
 800380a:	f107 0319 	add.w	r3, r7, #25
 800380e:	4619      	mov	r1, r3
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fe96 	bl	8004542 <protPull>

                hDest->BufParser[aCount]=0;
 8003816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	4413      	add	r3, r2
 800381c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]

                if(hDest) acker(hDest,xPacketId,xChaSrc);
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <parser+0xfc>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	b29b      	uxth	r3, r3
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4619      	mov	r1, r3
 8003832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003834:	f7ff fe33 	bl	800349e <acker>

                acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fd32 	bl	80012ac <acis_parse_command>
                }
                taskEXIT_CRITICAL();

            }

            break;
 8003848:	e0dd      	b.n	8003a06 <parser+0x2ca>
                for (aCount = 0; aCount < 8; aCount++)
 800384a:	2300      	movs	r3, #0
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384e:	e013      	b.n	8003878 <parser+0x13c>
                  for(int i = 0; i < 8; i++)
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	e00a      	b.n	800386c <parser+0x130>
                    protPull(xFifo, &header[i]);
 8003856:	f107 0210 	add.w	r2, r7, #16
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	4619      	mov	r1, r3
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fe6e 	bl	8004542 <protPull>
                  for(int i = 0; i < 8; i++)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3301      	adds	r3, #1
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b07      	cmp	r3, #7
 8003870:	ddf1      	ble.n	8003856 <parser+0x11a>
                for (aCount = 0; aCount < 8; aCount++)
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	3301      	adds	r3, #1
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	2b07      	cmp	r3, #7
 800387c:	d9e8      	bls.n	8003850 <parser+0x114>
                taskENTER_CRITICAL();
 800387e:	f005 f821 	bl	80088c4 <vPortEnterCritical>
                if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 8003882:	4b64      	ldr	r3, [pc, #400]	; (8003a14 <parser+0x2d8>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01e      	beq.n	80038ca <parser+0x18e>
 800388c:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <parser+0x2dc>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d019      	beq.n	80038ca <parser+0x18e>
 8003896:	4b60      	ldr	r3, [pc, #384]	; (8003a18 <parser+0x2dc>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d112      	bne.n	80038ca <parser+0x18e>
 80038a4:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <parser+0x2e0>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10d      	bne.n	80038ca <parser+0x18e>
                  time2 = DelayDiff(Delay_Tick, time1);
 80038ae:	4b5c      	ldr	r3, [pc, #368]	; (8003a20 <parser+0x2e4>)
 80038b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b2:	4b5c      	ldr	r3, [pc, #368]	; (8003a24 <parser+0x2e8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe f92b 	bl	8001b14 <DelayDiff>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <parser+0x2ec>)
 80038c2:	601a      	str	r2, [r3, #0]
                  ReceivedAckPacket = 1;
 80038c4:	4b55      	ldr	r3, [pc, #340]	; (8003a1c <parser+0x2e0>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	801a      	strh	r2, [r3, #0]
                taskEXIT_CRITICAL();
 80038ca:	f005 f821 	bl	8008910 <vPortExitCritical>
            break;
 80038ce:	e09a      	b.n	8003a06 <parser+0x2ca>
        }

        case etrACIS:
        case etrPC:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b0a      	cmp	r3, #10
 80038d4:	d902      	bls.n	80038dc <parser+0x1a0>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e000      	b.n	80038de <parser+0x1a2>
 80038dc:	2308      	movs	r3, #8
 80038de:	76bb      	strb	r3, [r7, #26]

          if(hDest)
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d075      	beq.n	80039d2 <parser+0x296>
          {

            uint8_t handled = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	76fb      	strb	r3, [r7, #27]
            if(!protIsSome(&hDest->xTxFifo))
 80038ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80038f0:	4413      	add	r3, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fe5d 	bl	80045b2 <protIsSome>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13d      	bne.n	800397a <parser+0x23e>
            {
              taskENTER_CRITICAL();
 80038fe:	f004 ffe1 	bl	80088c4 <vPortEnterCritical>
              if(!hDest->TxBusy)
 8003902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003904:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003908:	4413      	add	r3, r2
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d131      	bne.n	8003976 <parser+0x23a>
              {
                hDest->TxBusy = 1;
 8003912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003914:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003918:	4413      	add	r3, r2
 800391a:	2201      	movs	r2, #1
 800391c:	701a      	strb	r2, [r3, #0]
                handled = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	76fb      	strb	r3, [r7, #27]
                taskEXIT_CRITICAL();
 8003922:	f004 fff5 	bl	8008910 <vPortExitCritical>

                for (aCount = 0; aCount < sCount; aCount++)
 8003926:	2300      	movs	r3, #0
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392a:	e00b      	b.n	8003944 <parser+0x208>
                {
                  protPull(xFifo, &hDest->BufTx[aCount]);
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003934:	4413      	add	r3, r2
 8003936:	4619      	mov	r1, r3
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fe02 	bl	8004542 <protPull>
                for (aCount = 0; aCount < sCount; aCount++)
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	3301      	adds	r3, #1
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003944:	7ebb      	ldrb	r3, [r7, #26]
 8003946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d3ef      	bcc.n	800392c <parser+0x1f0>
                }

                CacheClean(hDest->BufTx, sCount);
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003952:	7eba      	ldrb	r2, [r7, #26]
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fc2e 	bl	80031b8 <CacheClean>
                HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800396a:	7eba      	ldrb	r2, [r7, #26]
 800396c:	b292      	uxth	r2, r2
 800396e:	4619      	mov	r1, r3
 8003970:	f002 fdda 	bl	8006528 <HAL_UART_Transmit_DMA>
 8003974:	e001      	b.n	800397a <parser+0x23e>
              }
              else taskEXIT_CRITICAL();
 8003976:	f004 ffcb 	bl	8008910 <vPortExitCritical>
            }

            if(!handled)
 800397a:	7efb      	ldrb	r3, [r7, #27]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d141      	bne.n	8003a04 <parser+0x2c8>
            {
              xSemaphoreTake(xFifo->info.globallock, portMAX_DELAY);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f04f 31ff 	mov.w	r1, #4294967295
 8003988:	4618      	mov	r0, r3
 800398a:	f003 fea1 	bl	80076d0 <xQueueSemaphoreTake>
              for (aCount = 0; aCount < sCount; aCount++)
 800398e:	2300      	movs	r3, #0
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003992:	e012      	b.n	80039ba <parser+0x27e>
              {
                protPull(xFifo, &data);
 8003994:	f107 0319 	add.w	r3, r7, #25
 8003998:	4619      	mov	r1, r3
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fdd1 	bl	8004542 <protPull>
                protPush(&hDest->xTxFifo, &data);
 80039a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80039a6:	4413      	add	r3, r2
 80039a8:	f107 0219 	add.w	r2, r7, #25
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fdaa 	bl	8004508 <protPush>
              for (aCount = 0; aCount < sCount; aCount++)
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	3301      	adds	r3, #1
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ba:	7ebb      	ldrb	r3, [r7, #26]
 80039bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039be:	429a      	cmp	r2, r3
 80039c0:	d3e8      	bcc.n	8003994 <parser+0x258>
              }
              xSemaphoreGive(xFifo->info.globallock);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6958      	ldr	r0, [r3, #20]
 80039c6:	2300      	movs	r3, #0
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	f003 fc70 	bl	80072b0 <xQueueGenericSend>
            }

            break;
 80039d0:	e018      	b.n	8003a04 <parser+0x2c8>
        }
        /* no break */

        default:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0a      	cmp	r3, #10
 80039d6:	d902      	bls.n	80039de <parser+0x2a2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	e000      	b.n	80039e0 <parser+0x2a4>
 80039de:	2308      	movs	r3, #8
 80039e0:	76bb      	strb	r3, [r7, #26]
          for (aCount = 0; aCount < sCount; aCount++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e6:	e008      	b.n	80039fa <parser+0x2be>
          {
            protPull(xFifo, &data);
 80039e8:	f107 0319 	add.w	r3, r7, #25
 80039ec:	4619      	mov	r1, r3
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fda7 	bl	8004542 <protPull>
          for (aCount = 0; aCount < sCount; aCount++)
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	3301      	adds	r3, #1
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fa:	7ebb      	ldrb	r3, [r7, #26]
 80039fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d3f2      	bcc.n	80039e8 <parser+0x2ac>
          }
          break;
 8003a02:	e000      	b.n	8003a06 <parser+0x2ca>
            break;
 8003a04:	bf00      	nop
        }
    }
}
 8003a06:	bf00      	nop
 8003a08:	3730      	adds	r7, #48	; 0x30
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000040 	.word	0x20000040
 8003a14:	20002b36 	.word	0x20002b36
 8003a18:	20002b38 	.word	0x20002b38
 8003a1c:	20000038 	.word	0x20000038
 8003a20:	40000c00 	.word	0x40000c00
 8003a24:	20002b40 	.word	0x20002b40
 8003a28:	20002b44 	.word	0x20002b44

08003a2c <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	f107 030f 	add.w	r3, r7, #15
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fd8e 	bl	8004560 <protLook>
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e013      	b.n	8003a88 <countCRC8+0x3a>
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8003a66:	4413      	add	r3, r2
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ffde 	bl	8003a2c <lookByte>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4619      	mov	r1, r3
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003a7e:	460a      	mov	r2, r1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3301      	adds	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d9e8      	bls.n	8003a60 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003a94:	2107      	movs	r1, #7
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd ff84 	bl	80019a4 <CRC8_Generate>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 8003aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e013      	b.n	8003ae6 <countCRC16+0x3c>
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8003ac4:	4413      	add	r3, r2
 8003ac6:	68f9      	ldr	r1, [r7, #12]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ffaf 	bl	8003a2c <lookByte>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003adc:	460a      	mov	r2, r1
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	3b02      	subs	r3, #2
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d3e6      	bcc.n	8003abe <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	3b02      	subs	r3, #2
 8003afa:	4619      	mov	r1, r3
 8003afc:	4610      	mov	r0, r2
 8003afe:	f7fd ff19 	bl	8001934 <CRC16_Generate>
 8003b02:	4603      	mov	r3, r0
 8003b04:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 8003b06:	68bb      	ldr	r3, [r7, #8]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <Getter>:

static void Getter(sGetterHandle * handle)
{
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b08c      	sub	sp, #48	; 0x30
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8003b22:	4413      	add	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8003b2c:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	f241 33c4 	movw	r3, #5060	; 0x13c4
 8003b34:	4413      	add	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8003b3e:	4413      	add	r3, r2
 8003b40:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d043      	beq.n	8003be2 <Getter+0xd2>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f000 fbb4 	bl	80042c8 <protGetSize>
 8003b60:	4602      	mov	r2, r0
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	f200 80ad 	bhi.w	8003cc4 <Getter+0x1b4>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 8003b6a:	69f9      	ldr	r1, [r7, #28]
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff9c 	bl	8003aaa <countCRC16>
 8003b72:	4604      	mov	r4, r0
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3b02      	subs	r3, #2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7ff ff56 	bl	8003a2c <lookByte>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461d      	mov	r5, r3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff ff4e 	bl	8003a2c <lookByte>
 8003b90:	4603      	mov	r3, r0
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	442b      	add	r3, r5
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d11c      	bne.n	8003bd4 <Getter+0xc4>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003b9a:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff44 	bl	8003a2c <lookByte>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fac8 	bl	800313c <Msg_GetSrc>
 8003bac:	4603      	mov	r3, r0
 8003bae:	b2dd      	uxtb	r5, r3
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	6978      	ldr	r0, [r7, #20]
 8003bb4:	f7ff ff3a 	bl	8003a2c <lookByte>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff facc 	bl	8003158 <Msg_GetDest>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	4621      	mov	r1, r4
 8003bcc:	6978      	ldr	r0, [r7, #20]
 8003bce:	f7ff fdb5 	bl	800373c <parser>
 8003bd2:	e001      	b.n	8003bd8 <Getter+0xc8>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e070      	b.n	8003cc4 <Getter+0x1b4>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f000 fb70 	bl	80042c8 <protGetSize>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b07      	cmp	r3, #7
 8003bec:	d96a      	bls.n	8003cc4 <Getter+0x1b4>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 8003bee:	2100      	movs	r1, #0
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff ff1b 	bl	8003a2c <lookByte>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b55      	cmp	r3, #85	; 0x55
 8003bfa:	d161      	bne.n	8003cc0 <Getter+0x1b0>
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f7ff ff14 	bl	8003a2c <lookByte>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b55      	cmp	r3, #85	; 0x55
 8003c08:	d15a      	bne.n	8003cc0 <Getter+0x1b0>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff1f 	bl	8003a4e <countCRC8>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461c      	mov	r4, r3
 8003c14:	2107      	movs	r1, #7
 8003c16:	6978      	ldr	r0, [r7, #20]
 8003c18:	f7ff ff08 	bl	8003a2c <lookByte>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	d14a      	bne.n	8003cb8 <Getter+0x1a8>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 8003c22:	2103      	movs	r1, #3
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	f7ff ff01 	bl	8003a2c <lookByte>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461c      	mov	r4, r3
 8003c2e:	2104      	movs	r1, #4
 8003c30:	6978      	ldr	r0, [r7, #20]
 8003c32:	f7ff fefb 	bl	8003a2c <lookByte>
 8003c36:	4603      	mov	r3, r0
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	4423      	add	r3, r4
 8003c3c:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 8003c3e:	2105      	movs	r1, #5
 8003c40:	6978      	ldr	r0, [r7, #20]
 8003c42:	f7ff fef3 	bl	8003a2c <lookByte>
 8003c46:	4603      	mov	r3, r0
 8003c48:	b29c      	uxth	r4, r3
 8003c4a:	2106      	movs	r1, #6
 8003c4c:	6978      	ldr	r0, [r7, #20]
 8003c4e:	f7ff feed 	bl	8003a2c <lookByte>
 8003c52:	4603      	mov	r3, r0
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	4423      	add	r3, r4
 8003c5c:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 8003c5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d026      	beq.n	8003cb2 <Getter+0x1a2>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003c6a:	d222      	bcs.n	8003cb2 <Getter+0x1a2>
          {
              if (dataLen>10)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b0a      	cmp	r3, #10
 8003c70:	d902      	bls.n	8003c78 <Getter+0x168>
              {
                dataReceiving = 1;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 8003c76:	e022      	b.n	8003cbe <Getter+0x1ae>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003c78:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	6978      	ldr	r0, [r7, #20]
 8003c7e:	f7ff fed5 	bl	8003a2c <lookByte>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fa59 	bl	800313c <Msg_GetSrc>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	b2dd      	uxtb	r5, r3
 8003c8e:	2102      	movs	r1, #2
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f7ff fecb 	bl	8003a2c <lookByte>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fa5d 	bl	8003158 <Msg_GetDest>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4621      	mov	r1, r4
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7ff fd46 	bl	800373c <parser>
              if (dataLen>10)
 8003cb0:	e005      	b.n	8003cbe <Getter+0x1ae>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003cb6:	e005      	b.n	8003cc4 <Getter+0x1b4>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 8003cb8:	2301      	movs	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 8003cbc:	e002      	b.n	8003cc4 <Getter+0x1b4>
 8003cbe:	e001      	b.n	8003cc4 <Getter+0x1b4>
      }
      else { dataSkip=1; } // Wrong sync bytes
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <Getter+0x1c2>
  {
    protMoveRead(xFifo,dataSkip);
 8003cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ccc:	6978      	ldr	r0, [r7, #20]
 8003cce:	f000 fc5f 	bl	8004590 <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ce2:	801a      	strh	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	3728      	adds	r7, #40	; 0x28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bdb0      	pop	{r4, r5, r7, pc}

08003cec <xDmaTxIrqHandler>:



void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  uint32_t length = 0;;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	e053      	b.n	8003da6 <xDmaTxIrqHandler+0xba>
  {
    handle = &xHandles[i];
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <xDmaTxIrqHandler+0xc8>)
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    if(huart == handle->xUart)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d141      	bne.n	8003da0 <xDmaTxIrqHandler+0xb4>
    {
      if(protIsSome(&handle->xTxFifo))
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d22:	4413      	add	r3, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fc44 	bl	80045b2 <protIsSome>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d030      	beq.n	8003d92 <xDmaTxIrqHandler+0xa6>
      {
        handle->TxBusy = 1;
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003d36:	4413      	add	r3, r2
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8003d3c:	bf00      	nop
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d44:	4413      	add	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	1c51      	adds	r1, r2, #1
 8003d4a:	6179      	str	r1, [r7, #20]
 8003d4c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	440a      	add	r2, r1
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fbf3 	bl	8004542 <protPull>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <xDmaTxIrqHandler+0x7e>
            && length < MAX_PACK_LEN);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003d68:	d3e9      	bcc.n	8003d3e <xDmaTxIrqHandler+0x52>
        CacheClean(handle->BufTx, length);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fa20 	bl	80031b8 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f002 fbcc 	bl	8006528 <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 8003d90:	e00c      	b.n	8003dac <xDmaTxIrqHandler+0xc0>
      else handle->TxBusy = 0;
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8003d98:	4413      	add	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
      break;
 8003d9e:	e005      	b.n	8003dac <xDmaTxIrqHandler+0xc0>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3301      	adds	r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d9a8      	bls.n	8003cfe <xDmaTxIrqHandler+0x12>
    }
  }
}
 8003dac:	bf00      	nop
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20000040 	.word	0x20000040

08003db8 <xDmaErIrqHandler>:

void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e028      	b.n	8003e18 <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <xDmaErIrqHandler+0x70>)
 8003dd2:	4413      	add	r3, r2
 8003dd4:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d116      	bne.n	8003e12 <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003df2:	4618      	mov	r0, r3
 8003df4:	f002 fbde 	bl	80065b4 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e04:	4619      	mov	r1, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003e0c:	4413      	add	r3, r2
 8003e0e:	6019      	str	r1, [r3, #0]
      break;
 8003e10:	e005      	b.n	8003e1e <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d9d3      	bls.n	8003dc6 <xDmaErIrqHandler+0xe>
    }
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000040 	.word	0x20000040

08003e2c <xFifosInit>:


void xFifosInit(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	e03f      	b.n	8003eb8 <xFifosInit+0x8c>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003e3e:	fb02 f203 	mul.w	r2, r2, r3
 8003e42:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e46:	4413      	add	r3, r2
 8003e48:	4a1f      	ldr	r2, [pc, #124]	; (8003ec8 <xFifosInit+0x9c>)
 8003e4a:	1898      	adds	r0, r3, r2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8003e5a:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <xFifosInit+0x9c>)
 8003e5c:	1899      	adds	r1, r3, r2
 8003e5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e62:	2201      	movs	r2, #1
 8003e64:	f000 fa4e 	bl	8004304 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8003e76:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <xFifosInit+0x9c>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	1d18      	adds	r0, r3, #4
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8003e8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <xFifosInit+0x9c>)
 8003e8c:	1899      	adds	r1, r3, r2
 8003e8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e92:	2201      	movs	r2, #1
 8003e94:	f000 fa36 	bl	8004304 <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 8003e98:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <xFifosInit+0x9c>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f241 31d4 	movw	r1, #5076	; 0x13d4
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	441a      	add	r2, r3
 8003ea6:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003eaa:	4413      	add	r3, r2
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d9bc      	bls.n	8003e38 <xFifosInit+0xc>
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000040 	.word	0x20000040

08003ecc <xGetterInit>:

void xGetterInit(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	e026      	b.n	8003f26 <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <xGetterInit+0x68>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff f962 	bl	80031b8 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003f02:	4618      	mov	r0, r3
 8003f04:	f002 fb56 	bl	80065b4 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f14:	4619      	mov	r1, r3
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f1c:	4413      	add	r3, r2
 8003f1e:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3301      	adds	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d9d5      	bls.n	8003ed8 <xGetterInit+0xc>
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000040 	.word	0x20000040

08003f38 <xGetterLoop>:

void xGetterLoop(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0e6      	sub	sp, #408	; 0x198
 8003f3c:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003f44:	e121      	b.n	800418a <xGetterLoop+0x252>
  {
    handle = &xHandles[i];
 8003f46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f4a:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	4a93      	ldr	r2, [pc, #588]	; (80041a0 <xGetterLoop+0x268>)
 8003f54:	4413      	add	r3, r2
 8003f56:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 8003f5a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003f5e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 8003f6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003f72:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f7c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 8003f80:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f84:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f88:	4413      	add	r3, r2
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d107      	bne.n	8003fa2 <xGetterLoop+0x6a>
 8003f92:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003f96:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8003fa0:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 8003fa2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003fa6:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003faa:	4413      	add	r3, r2
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90e      	bls.n	8003fd4 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 8003fb6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003fba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003fbe:	1ad2      	subs	r2, r2, r3
 8003fc0:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8003fc4:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003fc8:	440b      	add	r3, r1
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003fd2:	e00a      	b.n	8003fea <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 8003fd4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8003fd8:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8003fdc:	4413      	add	r3, r2
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 8003fea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003fee:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003ff2:	d903      	bls.n	8003ffc <xGetterLoop+0xc4>
 8003ff4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003ff8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 8003ffc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004000:	2b00      	cmp	r3, #0
 8004002:	d050      	beq.n	80040a6 <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 8004004:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004008:	f44f 7140 	mov.w	r1, #768	; 0x300
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff f8b3 	bl	8003178 <CacheInvalidate>
        for(i=0;i<length;i++)
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004018:	e034      	b.n	8004084 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 800401a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800401e:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8004022:	4413      	add	r3, r2
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004030:	5cd1      	ldrb	r1, [r2, r3]
 8004032:	1d3a      	adds	r2, r7, #4
 8004034:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004038:	4413      	add	r3, r2
 800403a:	460a      	mov	r2, r1
 800403c:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 800403e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004042:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8004046:	4413      	add	r3, r2
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d108      	bne.n	8004060 <xGetterLoop+0x128>
 800404e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004052:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8004056:	4413      	add	r3, r2
 8004058:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e00c      	b.n	800407a <xGetterLoop+0x142>
          else handle->RxPointer--;
 8004060:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004064:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8004068:	4413      	add	r3, r2
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8004072:	f241 33cc 	movw	r3, #5068	; 0x13cc
 8004076:	440b      	add	r3, r1
 8004078:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 800407a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800407e:	3301      	adds	r3, #1
 8004080:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004084:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004088:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800408c:	429a      	cmp	r2, r3
 800408e:	d8c4      	bhi.n	800401a <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 8004090:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004094:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8004098:	4413      	add	r3, r2
 800409a:	1d39      	adds	r1, r7, #4
 800409c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fa12 	bl	80044ca <protPushSequence>
      }
    } while(length > 0);
 80040a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f af55 	bne.w	8003f5a <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 80040b0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80040b4:	f241 33a4 	movw	r3, #5028	; 0x13a4
 80040b8:	4413      	add	r3, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fa79 	bl	80045b2 <protIsSome>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <xGetterLoop+0x196>
    {
      Getter(handle);
 80040c6:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80040ca:	f7ff fd21 	bl	8003b10 <Getter>
    }

    taskENTER_CRITICAL();
 80040ce:	f004 fbf9 	bl	80088c4 <vPortEnterCritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 80040d2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80040d6:	f241 33d0 	movw	r3, #5072	; 0x13d0
 80040da:	4413      	add	r3, r2
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d14b      	bne.n	800417c <xGetterLoop+0x244>
 80040e4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80040e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80040ec:	4413      	add	r3, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fa5f 	bl	80045b2 <protIsSome>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d040      	beq.n	800417c <xGetterLoop+0x244>
    {
      length = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 8004100:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004104:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8004108:	4413      	add	r3, r2
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800410e:	f004 fbff 	bl	8008910 <vPortExitCritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8004112:	bf00      	nop
 8004114:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8004118:	f241 3388 	movw	r3, #5000	; 0x1388
 800411c:	4413      	add	r3, r2
 800411e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004122:	1c51      	adds	r1, r2, #1
 8004124:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8004128:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800412c:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8004130:	440a      	add	r2, r1
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fa04 	bl	8004542 <protPull>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d004      	beq.n	800414a <xGetterLoop+0x212>
          && length < MAX_PACK_LEN);
 8004140:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004144:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004148:	d3e4      	bcc.n	8004114 <xGetterLoop+0x1dc>
      CacheClean(handle->BufTx, length);
 800414a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800414e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004152:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f82e 	bl	80031b8 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800415c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004160:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800416a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800416e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004172:	b292      	uxth	r2, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f002 f9d7 	bl	8006528 <HAL_UART_Transmit_DMA>
 800417a:	e001      	b.n	8004180 <xGetterLoop+0x248>
    }
    else taskEXIT_CRITICAL();
 800417c:	f004 fbc8 	bl	8008910 <vPortExitCritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8004180:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004184:	3301      	adds	r3, #1
 8004186:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800418a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800418e:	2b01      	cmp	r3, #1
 8004190:	f67f aed9 	bls.w	8003f46 <xGetterLoop+0xe>
  }
}
 8004194:	bf00      	nop
 8004196:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000040 	.word	0x20000040

080041a4 <xGetterTask>:

void xGetterTask(void * arg)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  xGetterInit();
 80041ac:	f7ff fe8e 	bl	8003ecc <xGetterInit>
  for (;;)
  {
    xGetterLoop();
 80041b0:	f7ff fec2 	bl	8003f38 <xGetterLoop>
    TASK_SLEEP;
 80041b4:	2001      	movs	r0, #1
 80041b6:	f002 fe1b 	bl	8006df0 <osDelay>
    xGetterLoop();
 80041ba:	e7f9      	b.n	80041b0 <xGetterTask+0xc>

080041bc <infoGetSize>:
#include "cmsis_os.h"
#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d305      	bcc.n	80041dc <infoGetSize+0x20>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	e007      	b.n	80041ec <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	1ad2      	subs	r2, r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4413      	add	r3, r2
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681c      	ldr	r4, [r3, #0]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffd9 	bl	80041bc <infoGetSize>
 800420a:	4603      	mov	r3, r0
 800420c:	1ae3      	subs	r3, r4, r3
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bd90      	pop	{r4, r7, pc}

08004216 <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004232:	fb02 f201 	mul.w	r2, r2, r1
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff ffde 	bl	8004216 <infoCorrect>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	429a      	cmp	r2, r3
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(info->lock, portMAX_DELAY);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f04f 31ff 	mov.w	r1, #4294967295
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fa14 	bl	80076d0 <xQueueSemaphoreTake>
        infoMovePar(info,param,move);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ffc9 	bl	8004244 <infoMovePar>
    xSemaphoreGive(info->lock);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68d8      	ldr	r0, [r3, #12]
 80042b6:	2300      	movs	r3, #0
 80042b8:	2200      	movs	r2, #0
 80042ba:	2100      	movs	r1, #0
 80042bc:	f002 fff8 	bl	80072b0 <xQueueGenericSend>
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    uint32_t value;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f04f 31ff 	mov.w	r1, #4294967295
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 f9f9 	bl	80076d0 <xQueueSemaphoreTake>
        value = infoGetSize(&fifo->info);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ff6a 	bl	80041bc <infoGetSize>
 80042e8:	4603      	mov	r3, r0
 80042ea:	60fb      	str	r3, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6918      	ldr	r0, [r3, #16]
 80042f0:	2300      	movs	r3, #0
 80042f2:	2200      	movs	r2, #0
 80042f4:	2100      	movs	r1, #0
 80042f6:	f002 ffdb 	bl	80072b0 <xQueueGenericSend>
    return value;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <protInit>:
        value = infoGetAvail(&fifo->info);
    xSemaphoreGive(fifo->info.lock);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	605a      	str	r2, [r3, #4]
    fifo->info.lock = xSemaphoreCreateMutex();
 8004320:	2001      	movs	r0, #1
 8004322:	f003 f8b4 	bl	800748e <xQueueCreateMutex>
 8004326:	4602      	mov	r2, r0
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	611a      	str	r2, [r3, #16]
    fifo->info.globallock = xSemaphoreCreateMutex();
 800432c:	2001      	movs	r0, #1
 800432e:	f003 f8ae 	bl	800748e <xQueueCreateMutex>
 8004332:	4602      	mov	r2, r0
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	615a      	str	r2, [r3, #20]
    fifo->info.read = 0;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	765a      	strb	r2, [r3, #25]
    fifo->info.elemsize = xElemSize;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	79fa      	ldrb	r2, [r7, #7]
 800434e:	761a      	strb	r2, [r3, #24]
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <interPut>:
        fifo->info.write = 0;
        fifo->info.overflow = 0;
    xSemaphoreGive(fifo->info.lock);
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	7e12      	ldrb	r2, [r2, #24]
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	440b      	add	r3, r1
 8004376:	4618      	mov	r0, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7e1b      	ldrb	r3, [r3, #24]
 800437c:	461a      	mov	r2, r3
 800437e:	6839      	ldr	r1, [r7, #0]
 8004380:	f006 f82a 	bl	800a3d8 <memcpy>
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	7e12      	ldrb	r2, [r2, #24]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	440b      	add	r3, r1
 80043aa:	4619      	mov	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7e1b      	ldrb	r3, [r3, #24]
 80043b0:	461a      	mov	r2, r3
 80043b2:	6838      	ldr	r0, [r7, #0]
 80043b4:	f006 f810 	bl	800a3d8 <memcpy>
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	7e1b      	ldrb	r3, [r3, #24]
 80043d6:	4619      	mov	r1, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	fb03 f301 	mul.w	r3, r3, r1
 80043de:	4413      	add	r3, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	7e1b      	ldrb	r3, [r3, #24]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f005 fff5 	bl	800a3d8 <memcpy>
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fef7 	bl	80041f8 <infoGetAvail>
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <interPush+0x36>
        interPut(fifo,xData);
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff ff9f 	bl	8004358 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	1d18      	adds	r0, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	330c      	adds	r3, #12
 8004422:	2201      	movs	r2, #1
 8004424:	4619      	mov	r1, r3
 8004426:	f7ff ff0d 	bl	8004244 <infoMovePar>
 800442a:	e002      	b.n	8004432 <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	765a      	strb	r2, [r3, #25]
    return retval;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff ff0c 	bl	8004268 <infoIsSome>
 8004450:	4603      	mov	r3, r0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <interPull+0x36>
        interGet(fifo,xDest);
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff95 	bl	800438c <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	1d18      	adds	r0, r3, #4
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3308      	adds	r3, #8
 800446a:	2201      	movs	r2, #1
 800446c:	4619      	mov	r1, r3
 800446e:	f7ff fee9 	bl	8004244 <infoMovePar>
    }
    return retval;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
    uint32_t retval; uint32_t i;
    for (i=0; i<xCount; i++) {
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e012      	b.n	80044b4 <interPushSequence+0x38>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	7e1b      	ldrb	r3, [r3, #24]
 8004492:	461a      	mov	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	fb03 f202 	mul.w	r2, r3, r2
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff ffa8 	bl	80043f6 <interPush>
 80044a6:	6178      	str	r0, [r7, #20]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <interPushSequence+0x42>
    for (i=0; i<xCount; i++) {
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	3301      	adds	r3, #1
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d3e8      	bcc.n	800448e <interPushSequence+0x12>
 80044bc:	e000      	b.n	80044c0 <interPushSequence+0x44>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 80044be:	bf00      	nop
    }
    return retval;
 80044c0:	697b      	ldr	r3, [r7, #20]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f04f 31ff 	mov.w	r1, #4294967295
 80044de:	4618      	mov	r0, r3
 80044e0:	f003 f8f6 	bl	80076d0 <xQueueSemaphoreTake>
        retval=interPushSequence(fifo,xData,xCount);
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff ffc7 	bl	800447c <interPushSequence>
 80044ee:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(fifo->info.lock);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6918      	ldr	r0, [r3, #16]
 80044f4:	2300      	movs	r3, #0
 80044f6:	2200      	movs	r2, #0
 80044f8:	2100      	movs	r1, #0
 80044fa:	f002 fed9 	bl	80072b0 <xQueueGenericSend>
    return retval;
 80044fe:	697b      	ldr	r3, [r7, #20]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f04f 31ff 	mov.w	r1, #4294967295
 800451a:	4618      	mov	r0, r3
 800451c:	f003 f8d8 	bl	80076d0 <xQueueSemaphoreTake>
        retval=interPush(fifo,xData);
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff67 	bl	80043f6 <interPush>
 8004528:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6918      	ldr	r0, [r3, #16]
 800452e:	2300      	movs	r3, #0
 8004530:	2200      	movs	r2, #0
 8004532:	2100      	movs	r1, #0
 8004534:	f002 febc 	bl	80072b0 <xQueueGenericSend>
    return retval;
 8004538:	68fb      	ldr	r3, [r7, #12]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 8004542:	b580      	push	{r7, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ff74 	bl	800443c <interPull>
 8004554:	60f8      	str	r0, [r7, #12]
    return retval;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1d18      	adds	r0, r3, #4
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3308      	adds	r3, #8
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	4619      	mov	r1, r3
 8004578:	f7ff fe4d 	bl	8004216 <infoCorrect>
 800457c:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f7ff ff1c 	bl	80043c0 <interLook>
}
 8004588:	bf00      	nop
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	1d18      	adds	r0, r3, #4
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3308      	adds	r3, #8
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7ff fe72 	bl	800428e <protMovePar>
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	bf14      	ite	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	2300      	moveq	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045de:	e003      	b.n	80045e8 <LoopCopyDataInit>

080045e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045e6:	3104      	adds	r1, #4

080045e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045e8:	480b      	ldr	r0, [pc, #44]	; (8004618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045f0:	d3f6      	bcc.n	80045e0 <CopyDataInit>
  ldr  r2, =_sbss
 80045f2:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045f4:	e002      	b.n	80045fc <LoopFillZerobss>

080045f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045f8:	f842 3b04 	str.w	r3, [r2], #4

080045fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004600:	d3f9      	bcc.n	80045f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004602:	f7fe fd31 	bl	8003068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004606:	f005 fec3 	bl	800a390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800460a:	f7fd fe1d 	bl	8002248 <main>
  bx  lr    
 800460e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004610:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8004614:	080101c0 	.word	0x080101c0
  ldr  r0, =_sdata
 8004618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800461c:	20002a30 	.word	0x20002a30
  ldr  r2, =_sbss
 8004620:	20002a30 	.word	0x20002a30
  ldr  r3, = _ebss
 8004624:	2000848c 	.word	0x2000848c

08004628 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004628:	e7fe      	b.n	8004628 <CAN1_RX0_IRQHandler>
	...

0800462c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800462c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 0.1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <HAL_InitTick+0x3c>)
{
 8004630:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 8004632:	4a0e      	ldr	r2, [pc, #56]	; (800466c <HAL_InitTick+0x40>)
 8004634:	8818      	ldrh	r0, [r3, #0]
 8004636:	f242 7310 	movw	r3, #10000	; 0x2710
 800463a:	fbb3 f3f0 	udiv	r3, r3, r0
 800463e:	6810      	ldr	r0, [r2, #0]
 8004640:	fbb0 f0f3 	udiv	r0, r0, r3
 8004644:	f000 fa84 	bl	8004b50 <HAL_SYSTICK_Config>
 8004648:	4604      	mov	r4, r0
 800464a:	b958      	cbnz	r0, 8004664 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800464c:	2d0f      	cmp	r5, #15
 800464e:	d809      	bhi.n	8004664 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004650:	4602      	mov	r2, r0
 8004652:	4629      	mov	r1, r5
 8004654:	f04f 30ff 	mov.w	r0, #4294967295
 8004658:	f000 fa3a 	bl	8004ad0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <HAL_InitTick+0x44>)
 800465e:	4620      	mov	r0, r4
 8004660:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004662:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004664:	2001      	movs	r0, #1
 8004666:	e7fc      	b.n	8004662 <HAL_InitTick+0x36>
 8004668:	20002800 	.word	0x20002800
 800466c:	20000034 	.word	0x20000034
 8004670:	20002804 	.word	0x20002804

08004674 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8004674:	4a07      	ldr	r2, [pc, #28]	; (8004694 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004676:	2003      	movs	r0, #3
{
 8004678:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004680:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004682:	f000 fa13 	bl	8004aac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004686:	200f      	movs	r0, #15
 8004688:	f7ff ffd0 	bl	800462c <HAL_InitTick>
  HAL_MspInit();
 800468c:	f7fe f9fc 	bl	8002a88 <HAL_MspInit>
}
 8004690:	2000      	movs	r0, #0
 8004692:	bd08      	pop	{r3, pc}
 8004694:	40023c00 	.word	0x40023c00

08004698 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004698:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <HAL_IncTick+0x10>)
 800469a:	4b04      	ldr	r3, [pc, #16]	; (80046ac <HAL_IncTick+0x14>)
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	440b      	add	r3, r1
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20008444 	.word	0x20008444
 80046ac:	20002800 	.word	0x20002800

080046b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80046b0:	4b01      	ldr	r3, [pc, #4]	; (80046b8 <HAL_GetTick+0x8>)
 80046b2:	6818      	ldr	r0, [r3, #0]
}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20008444 	.word	0x20008444

080046bc <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80046bc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80046be:	4c07      	ldr	r4, [pc, #28]	; (80046dc <HAL_SetTickFreq+0x20>)
 80046c0:	8825      	ldrh	r5, [r4, #0]
 80046c2:	4285      	cmp	r5, r0
 80046c4:	d007      	beq.n	80046d6 <HAL_SetTickFreq+0x1a>

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_SetTickFreq+0x24>)
    uwTickFreq = Freq;
 80046c8:	8020      	strh	r0, [r4, #0]
    status = HAL_InitTick(uwTickPrio);
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	f7ff ffae 	bl	800462c <HAL_InitTick>

    if (status != HAL_OK)
 80046d0:	b100      	cbz	r0, 80046d4 <HAL_SetTickFreq+0x18>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80046d2:	8025      	strh	r5, [r4, #0]
    }
  }

  return status;
}
 80046d4:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 80046d6:	2000      	movs	r0, #0
 80046d8:	e7fc      	b.n	80046d4 <HAL_SetTickFreq+0x18>
 80046da:	bf00      	nop
 80046dc:	20002800 	.word	0x20002800
 80046e0:	20002804 	.word	0x20002804

080046e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046e4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046e6:	4604      	mov	r4, r0
 80046e8:	2800      	cmp	r0, #0
 80046ea:	f000 809b 	beq.w	8004824 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80046ee:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80046f0:	b925      	cbnz	r5, 80046fc <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046f2:	f7fe f9f1 	bl	8002ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046f6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046f8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046fe:	06db      	lsls	r3, r3, #27
 8004700:	f100 808e 	bmi.w	8004820 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004706:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800470a:	f023 0302 	bic.w	r3, r3, #2
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004714:	4b44      	ldr	r3, [pc, #272]	; (8004828 <HAL_ADC_Init+0x144>)
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800471c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	6861      	ldr	r1, [r4, #4]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004726:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004728:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004738:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800473a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004742:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004748:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800474a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004758:	4934      	ldr	r1, [pc, #208]	; (800482c <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800475a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800475c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800475e:	428a      	cmp	r2, r1
 8004760:	d052      	beq.n	8004808 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004762:	6899      	ldr	r1, [r3, #8]
 8004764:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004768:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800476a:	6899      	ldr	r1, [r3, #8]
 800476c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800476e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800477e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004780:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004782:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004784:	f022 0202 	bic.w	r2, r2, #2
 8004788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004790:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004792:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004796:	2a00      	cmp	r2, #0
 8004798:	d03e      	beq.n	8004818 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800479a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800479c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800479e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047a2:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80047a4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80047ac:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047b4:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 80047b6:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047ba:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047c0:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047ca:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047de:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80047f0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80047f2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80047f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004800:	2300      	movs	r3, #0
 8004802:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004806:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800480e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004816:	e7b2      	b.n	800477e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800481e:	e7c9      	b.n	80047b4 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8004820:	2001      	movs	r0, #1
 8004822:	e7ed      	b.n	8004800 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8004824:	2001      	movs	r0, #1
 8004826:	e7ee      	b.n	8004806 <HAL_ADC_Init+0x122>
 8004828:	40012300 	.word	0x40012300
 800482c:	0f000001 	.word	0x0f000001

08004830 <HAL_ADC_ConvCpltCallback>:
 8004830:	4770      	bx	lr

08004832 <HAL_ADC_LevelOutOfWindowCallback>:
 8004832:	4770      	bx	lr

08004834 <HAL_ADC_ErrorCallback>:
 8004834:	4770      	bx	lr

08004836 <HAL_ADC_IRQHandler>:
{
 8004836:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004838:	6803      	ldr	r3, [r0, #0]
{
 800483a:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800483c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800483e:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004840:	078d      	lsls	r5, r1, #30
 8004842:	d52b      	bpl.n	800489c <HAL_ADC_IRQHandler+0x66>
 8004844:	0690      	lsls	r0, r2, #26
 8004846:	d529      	bpl.n	800489c <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800484a:	06d1      	lsls	r1, r2, #27
 800484c:	d403      	bmi.n	8004856 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800484e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004854:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800485c:	d117      	bne.n	800488e <HAL_ADC_IRQHandler+0x58>
 800485e:	69a2      	ldr	r2, [r4, #24]
 8004860:	b9aa      	cbnz	r2, 800488e <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004864:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8004868:	d002      	beq.n	8004870 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800486a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800486c:	0552      	lsls	r2, r2, #21
 800486e:	d40e      	bmi.n	800488e <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	f022 0220 	bic.w	r2, r2, #32
 8004876:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800487a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004882:	04db      	lsls	r3, r3, #19
 8004884:	d403      	bmi.n	800488e <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800488e:	4620      	mov	r0, r4
 8004890:	f7ff ffce 	bl	8004830 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	f06f 0212 	mvn.w	r2, #18
 800489a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80048a0:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80048a2:	074d      	lsls	r5, r1, #29
 80048a4:	d532      	bpl.n	800490c <HAL_ADC_IRQHandler+0xd6>
 80048a6:	0610      	lsls	r0, r2, #24
 80048a8:	d530      	bpl.n	800490c <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048ac:	06d1      	lsls	r1, r2, #27
 80048ae:	d403      	bmi.n	80048b8 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80048b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b6:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80048be:	d11e      	bne.n	80048fe <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80048c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048c2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80048c6:	d002      	beq.n	80048ce <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80048c8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80048ca:	0552      	lsls	r2, r2, #21
 80048cc:	d417      	bmi.n	80048fe <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048ce:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80048d0:	0555      	lsls	r5, r2, #21
 80048d2:	d414      	bmi.n	80048fe <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80048d4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048d6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80048da:	d110      	bne.n	80048fe <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80048dc:	69a2      	ldr	r2, [r4, #24]
 80048de:	b972      	cbnz	r2, 80048fe <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80048e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ee:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80048f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f2:	05d8      	lsls	r0, r3, #23
 80048f4:	d403      	bmi.n	80048fe <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 f8d2 	bl	8004aa8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	f06f 020c 	mvn.w	r2, #12
 800490a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004910:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004912:	07c9      	lsls	r1, r1, #31
 8004914:	d50f      	bpl.n	8004936 <HAL_ADC_IRQHandler+0x100>
 8004916:	0655      	lsls	r5, r2, #25
 8004918:	d50d      	bpl.n	8004936 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	07d8      	lsls	r0, r3, #31
 800491e:	d50a      	bpl.n	8004936 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004920:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004922:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004928:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800492a:	f7ff ff82 	bl	8004832 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	f06f 0201 	mvn.w	r2, #1
 8004934:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800493a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800493c:	0689      	lsls	r1, r1, #26
 800493e:	d50d      	bpl.n	800495c <HAL_ADC_IRQHandler+0x126>
 8004940:	0152      	lsls	r2, r2, #5
 8004942:	d50b      	bpl.n	800495c <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004944:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004946:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 800494a:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800494c:	f042 0202 	orr.w	r2, r2, #2
 8004950:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004952:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8004954:	f7ff ff6e 	bl	8004834 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	601d      	str	r5, [r3, #0]
}
 800495c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004960 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8004960:	2300      	movs	r3, #0
{
 8004962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8004964:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004966:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d074      	beq.n	8004a58 <HAL_ADC_ConfigChannel+0xf8>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800496e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004970:	2301      	movs	r3, #1
 8004972:	688a      	ldr	r2, [r1, #8]
 8004974:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004976:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8004978:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800497c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8004980:	6803      	ldr	r3, [r0, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004982:	d931      	bls.n	80049e8 <HAL_ADC_ConfigChannel+0x88>
 8004984:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8004988:	d02e      	beq.n	80049e8 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800498a:	3c1e      	subs	r4, #30
 800498c:	f04f 0c07 	mov.w	ip, #7
 8004990:	68df      	ldr	r7, [r3, #12]
 8004992:	fa0c fc04 	lsl.w	ip, ip, r4
 8004996:	ea27 070c 	bic.w	r7, r7, ip
 800499a:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800499c:	4f3d      	ldr	r7, [pc, #244]	; (8004a94 <HAL_ADC_ConfigChannel+0x134>)
 800499e:	42bd      	cmp	r5, r7
 80049a0:	d11d      	bne.n	80049de <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80049a2:	68dc      	ldr	r4, [r3, #12]
 80049a4:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049a8:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 80049aa:	6849      	ldr	r1, [r1, #4]
 80049ac:	2906      	cmp	r1, #6
 80049ae:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80049b2:	d827      	bhi.n	8004a04 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049b4:	3a05      	subs	r2, #5
 80049b6:	241f      	movs	r4, #31
 80049b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049ba:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049bc:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049c0:	ea21 0104 	bic.w	r1, r1, r4
 80049c4:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049c8:	430a      	orrs	r2, r1
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80049cc:	4a32      	ldr	r2, [pc, #200]	; (8004a98 <HAL_ADC_ConfigChannel+0x138>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d034      	beq.n	8004a3c <HAL_ADC_ConfigChannel+0xdc>
  __HAL_UNLOCK(hadc);
 80049d2:	2300      	movs	r3, #0
 80049d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80049d8:	4618      	mov	r0, r3
}
 80049da:	b003      	add	sp, #12
 80049dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049de:	68df      	ldr	r7, [r3, #12]
 80049e0:	fa02 f404 	lsl.w	r4, r2, r4
 80049e4:	433c      	orrs	r4, r7
 80049e6:	e7df      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049e8:	f04f 0c07 	mov.w	ip, #7
 80049ec:	691f      	ldr	r7, [r3, #16]
 80049ee:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049f2:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049f6:	ea27 070c 	bic.w	r7, r7, ip
 80049fa:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049fc:	691f      	ldr	r7, [r3, #16]
 80049fe:	433c      	orrs	r4, r7
 8004a00:	611c      	str	r4, [r3, #16]
 8004a02:	e7d2      	b.n	80049aa <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8004a04:	290c      	cmp	r1, #12
 8004a06:	f04f 011f 	mov.w	r1, #31
 8004a0a:	d80b      	bhi.n	8004a24 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a0c:	3a23      	subs	r2, #35	; 0x23
 8004a0e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004a10:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a12:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a16:	ea24 0101 	bic.w	r1, r4, r1
 8004a1a:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
 8004a22:	e7d3      	b.n	80049cc <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a24:	3a41      	subs	r2, #65	; 0x41
 8004a26:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004a28:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a2a:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a2e:	ea24 0101 	bic.w	r1, r4, r1
 8004a32:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a36:	430a      	orrs	r2, r1
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a3a:	e7c7      	b.n	80049cc <HAL_ADC_ConfigChannel+0x6c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004a3c:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8004a40:	d10c      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0xfc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004a42:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <HAL_ADC_ConfigChannel+0x13c>)
 8004a44:	6853      	ldr	r3, [r2, #4]
 8004a46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    ADC->CCR |= ADC_CCR_VBATE;
 8004a4a:	6053      	str	r3, [r2, #4]
 8004a4c:	e7c1      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x72>
 8004a4e:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <HAL_ADC_ConfigChannel+0x13c>)
 8004a50:	6853      	ldr	r3, [r2, #4]
 8004a52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a56:	e7f8      	b.n	8004a4a <HAL_ADC_ConfigChannel+0xea>
  __HAL_LOCK(hadc);
 8004a58:	2002      	movs	r0, #2
 8004a5a:	e7be      	b.n	80049da <HAL_ADC_ConfigChannel+0x7a>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a5c:	2d12      	cmp	r5, #18
 8004a5e:	d0f6      	beq.n	8004a4e <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <HAL_ADC_ConfigChannel+0x134>)
 8004a62:	429d      	cmp	r5, r3
 8004a64:	d001      	beq.n	8004a6a <HAL_ADC_ConfigChannel+0x10a>
 8004a66:	2d11      	cmp	r5, #17
 8004a68:	d1b3      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x72>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004a6a:	490c      	ldr	r1, [pc, #48]	; (8004a9c <HAL_ADC_ConfigChannel+0x13c>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a6c:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004a6e:	684a      	ldr	r2, [r1, #4]
 8004a70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a74:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a76:	d1ac      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x72>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_ADC_ConfigChannel+0x140>)
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <HAL_ADC_ConfigChannel+0x144>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a82:	230a      	movs	r3, #10
 8004a84:	4353      	muls	r3, r2
        counter--;
 8004a86:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8004a88:	9b01      	ldr	r3, [sp, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0a1      	beq.n	80049d2 <HAL_ADC_ConfigChannel+0x72>
        counter--;
 8004a8e:	9b01      	ldr	r3, [sp, #4]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	e7f8      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x126>
 8004a94:	10000012 	.word	0x10000012
 8004a98:	40012000 	.word	0x40012000
 8004a9c:	40012300 	.word	0x40012300
 8004aa0:	20000034 	.word	0x20000034
 8004aa4:	000f4240 	.word	0x000f4240

08004aa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004aa8:	4770      	bx	lr
	...

08004aac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aac:	4a07      	ldr	r2, [pc, #28]	; (8004acc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aae:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ab6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004ac6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004ac8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004aca:	4770      	bx	lr
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad0:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ad6:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ada:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ade:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ae2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae4:	2d04      	cmp	r5, #4
 8004ae6:	bf28      	it	cs
 8004ae8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aea:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af0:	bf8c      	ite	hi
 8004af2:	3c03      	subhi	r4, #3
 8004af4:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8004af6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af8:	ea21 0303 	bic.w	r3, r1, r3
 8004afc:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b00:	fa06 f404 	lsl.w	r4, r6, r4
 8004b04:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b08:	ea43 0304 	orr.w	r3, r3, r4
 8004b0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004b10:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004b12:	db06      	blt.n	8004b22 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b14:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004b18:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004b1c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b22:	f000 000f 	and.w	r0, r0, #15
 8004b26:	4a02      	ldr	r2, [pc, #8]	; (8004b30 <HAL_NVIC_SetPriority+0x60>)
 8004b28:	5413      	strb	r3, [r2, r0]
 8004b2a:	e7f9      	b.n	8004b20 <HAL_NVIC_SetPriority+0x50>
 8004b2c:	e000ed00 	.word	0xe000ed00
 8004b30:	e000ed14 	.word	0xe000ed14

08004b34 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b34:	2800      	cmp	r0, #0
 8004b36:	db08      	blt.n	8004b4a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b38:	0942      	lsrs	r2, r0, #5
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f000 001f 	and.w	r0, r0, #31
 8004b40:	fa03 f000 	lsl.w	r0, r3, r0
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <HAL_NVIC_EnableIRQ+0x18>)
 8004b46:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b4a:	4770      	bx	lr
 8004b4c:	e000e100 	.word	0xe000e100

08004b50 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b50:	3801      	subs	r0, #1
 8004b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004b56:	d20a      	bcs.n	8004b6e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5a:	21f0      	movs	r1, #240	; 0xf0
 8004b5c:	4a06      	ldr	r2, [pc, #24]	; (8004b78 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b5e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b60:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b66:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b68:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004b6e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	e000e010 	.word	0xe000e010
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004b7e:	0896      	lsrs	r6, r2, #2
 8004b80:	460b      	mov	r3, r1
 8004b82:	6805      	ldr	r5, [r0, #0]
 8004b84:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8004b88:	42bb      	cmp	r3, r7
 8004b8a:	d108      	bne.n	8004b9e <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004b8c:	f012 0203 	ands.w	r2, r2, #3
 8004b90:	d01e      	beq.n	8004bd0 <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 8004b92:	2a01      	cmp	r2, #1
 8004b94:	d114      	bne.n	8004bc0 <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004b96:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004b9a:	702b      	strb	r3, [r5, #0]
 8004b9c:	e018      	b.n	8004bd0 <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004b9e:	785c      	ldrb	r4, [r3, #1]
 8004ba0:	3304      	adds	r3, #4
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004ba2:	f813 cc04 	ldrb.w	ip, [r3, #-4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004ba6:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004ba8:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004bac:	f813 cc01 	ldrb.w	ip, [r3, #-1]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004bb0:	ea44 040c 	orr.w	r4, r4, ip
 8004bb4:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 8004bb8:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004bbc:	602c      	str	r4, [r5, #0]
 8004bbe:	e7e3      	b.n	8004b88 <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 8004bc0:	2a02      	cmp	r2, #2
 8004bc2:	d108      	bne.n	8004bd6 <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004bc4:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 8004bce:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004bd0:	6803      	ldr	r3, [r0, #0]
 8004bd2:	6818      	ldr	r0, [r3, #0]
}
 8004bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004bd6:	785a      	ldrb	r2, [r3, #1]
 8004bd8:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 8004bdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 8004be0:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004be2:	789b      	ldrb	r3, [r3, #2]
 8004be4:	e7d9      	b.n	8004b9a <CRC_Handle_8+0x1e>

08004be6 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004be6:	b570      	push	{r4, r5, r6, lr}
 8004be8:	6800      	ldr	r0, [r0, #0]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004bea:	0855      	lsrs	r5, r2, #1
 8004bec:	2300      	movs	r3, #0
 8004bee:	429d      	cmp	r5, r3
 8004bf0:	d106      	bne.n	8004c00 <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 8004bf2:	07d3      	lsls	r3, r2, #31
 8004bf4:	d502      	bpl.n	8004bfc <CRC_Handle_16+0x16>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8004bf6:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 8004bfa:	8003      	strh	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004bfc:	6800      	ldr	r0, [r0, #0]
}
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004c00:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8004c04:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004c08:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004c0a:	8864      	ldrh	r4, [r4, #2]
 8004c0c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004c10:	6004      	str	r4, [r0, #0]
 8004c12:	e7ec      	b.n	8004bee <CRC_Handle_16+0x8>

08004c14 <HAL_CRC_MspInit>:
}
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_CRC_Init>:
{
 8004c18:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	b908      	cbnz	r0, 8004c22 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8004c1e:	2001      	movs	r0, #1
}
 8004c20:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c22:	7f43      	ldrb	r3, [r0, #29]
 8004c24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c28:	b913      	cbnz	r3, 8004c30 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004c2a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004c2c:	f7ff fff2 	bl	8004c14 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c30:	2302      	movs	r3, #2
 8004c32:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c34:	7923      	ldrb	r3, [r4, #4]
 8004c36:	b9e3      	cbnz	r3, 8004c72 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <HAL_CRC_Init+0x70>)
 8004c3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	f022 0218 	bic.w	r2, r2, #24
 8004c44:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c46:	7962      	ldrb	r2, [r4, #5]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	b9d2      	cbnz	r2, 8004c82 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c4c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c50:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004c52:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	6961      	ldr	r1, [r4, #20]
 8004c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c5c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c5e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c60:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004c70:	e7d6      	b.n	8004c20 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c72:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 f82c 	bl	8004cd4 <HAL_CRCEx_Polynomial_Set>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d0e2      	beq.n	8004c46 <HAL_CRC_Init+0x2e>
 8004c80:	e7cd      	b.n	8004c1e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c82:	6922      	ldr	r2, [r4, #16]
 8004c84:	e7e4      	b.n	8004c50 <HAL_CRC_Init+0x38>
 8004c86:	bf00      	nop
 8004c88:	04c11db7 	.word	0x04c11db7

08004c8c <HAL_CRC_Calculate>:
{
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c8e:	2502      	movs	r5, #2
{
 8004c90:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c92:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8004c94:	6805      	ldr	r5, [r0, #0]
 8004c96:	68af      	ldr	r7, [r5, #8]
 8004c98:	f047 0701 	orr.w	r7, r7, #1
 8004c9c:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 8004c9e:	6a07      	ldr	r7, [r0, #32]
 8004ca0:	2f02      	cmp	r7, #2
 8004ca2:	d012      	beq.n	8004cca <HAL_CRC_Calculate+0x3e>
 8004ca4:	2f03      	cmp	r7, #3
 8004ca6:	d004      	beq.n	8004cb2 <HAL_CRC_Calculate+0x26>
 8004ca8:	2f01      	cmp	r7, #1
 8004caa:	d111      	bne.n	8004cd0 <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004cac:	f7ff ff66 	bl	8004b7c <CRC_Handle_8>
      break;
 8004cb0:	e004      	b.n	8004cbc <HAL_CRC_Calculate+0x30>
 8004cb2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8004cb6:	42b1      	cmp	r1, r6
 8004cb8:	d103      	bne.n	8004cc2 <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 8004cba:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	7763      	strb	r3, [r4, #29]
}
 8004cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 8004cc2:	f851 3b04 	ldr.w	r3, [r1], #4
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	e7f5      	b.n	8004cb6 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004cca:	f7ff ff8c 	bl	8004be6 <CRC_Handle_16>
      break;
 8004cce:	e7f5      	b.n	8004cbc <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e7f3      	b.n	8004cbc <HAL_CRC_Calculate+0x30>

08004cd4 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004cd4:	231f      	movs	r3, #31
{
 8004cd6:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004cd8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004cdc:	d306      	bcc.n	8004cec <HAL_CRCEx_Polynomial_Set+0x18>
 8004cde:	fa21 f403 	lsr.w	r4, r1, r3
 8004ce2:	07e4      	lsls	r4, r4, #31
 8004ce4:	d5f8      	bpl.n	8004cd8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004ce6:	2a08      	cmp	r2, #8
 8004ce8:	d014      	beq.n	8004d14 <HAL_CRCEx_Polynomial_Set+0x40>
 8004cea:	d802      	bhi.n	8004cf2 <HAL_CRCEx_Polynomial_Set+0x1e>
 8004cec:	b13a      	cbz	r2, 8004cfe <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004cee:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004cf0:	e00d      	b.n	8004d0e <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 8004cf2:	2a10      	cmp	r2, #16
 8004cf4:	d00c      	beq.n	8004d10 <HAL_CRCEx_Polynomial_Set+0x3c>
 8004cf6:	2a18      	cmp	r2, #24
 8004cf8:	d1f9      	bne.n	8004cee <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cfa:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cfc:	d8f7      	bhi.n	8004cee <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004cfe:	6800      	ldr	r0, [r0, #0]
 8004d00:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d02:	6883      	ldr	r3, [r0, #8]
 8004d04:	f023 0318 	bic.w	r3, r3, #24
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	6082      	str	r2, [r0, #8]
 8004d0c:	2000      	movs	r0, #0
}
 8004d0e:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	e7f3      	b.n	8004cfc <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004d14:	2b0f      	cmp	r3, #15
 8004d16:	e7f1      	b.n	8004cfc <HAL_CRCEx_Polynomial_Set+0x28>

08004d18 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d18:	6803      	ldr	r3, [r0, #0]
 8004d1a:	2118      	movs	r1, #24
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d22:	3a10      	subs	r2, #16
 8004d24:	f023 0303 	bic.w	r3, r3, #3
 8004d28:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d2c:	4904      	ldr	r1, [pc, #16]	; (8004d40 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8004d2e:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d30:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d32:	bf88      	it	hi
 8004d34:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d36:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d38:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8004d3a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	0800e044 	.word	0x0800e044

08004d44 <HAL_DMA_Init>:
{
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7ff fcb2 	bl	80046b0 <HAL_GetTick>
 8004d4c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8004d4e:	2c00      	cmp	r4, #0
 8004d50:	d071      	beq.n	8004e36 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8004d52:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8004d54:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004d56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d68:	6821      	ldr	r1, [r4, #0]
 8004d6a:	680b      	ldr	r3, [r1, #0]
 8004d6c:	07d8      	lsls	r0, r3, #31
 8004d6e:	d43c      	bmi.n	8004dea <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8004d70:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d72:	4d32      	ldr	r5, [pc, #200]	; (8004e3c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d74:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d76:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d78:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	68e2      	ldr	r2, [r4, #12]
 8004d80:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d82:	6922      	ldr	r2, [r4, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	6962      	ldr	r2, [r4, #20]
 8004d88:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8a:	69e2      	ldr	r2, [r4, #28]
 8004d8c:	4303      	orrs	r3, r0
 8004d8e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d90:	6a22      	ldr	r2, [r4, #32]
 8004d92:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d96:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d98:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d9c:	bf02      	ittt	eq
 8004d9e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8004da2:	4335      	orreq	r5, r6
 8004da4:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004da6:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8004da8:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8004daa:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dac:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004db0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db4:	d10b      	bne.n	8004dce <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8004db6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004db8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8004dba:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dbc:	b13d      	cbz	r5, 8004dce <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dbe:	b9f8      	cbnz	r0, 8004e00 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8004dc0:	2a01      	cmp	r2, #1
 8004dc2:	d02d      	beq.n	8004e20 <HAL_DMA_Init+0xdc>
 8004dc4:	d301      	bcc.n	8004dca <HAL_DMA_Init+0x86>
 8004dc6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dc8:	d101      	bne.n	8004dce <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dca:	01ea      	lsls	r2, r5, #7
 8004dcc:	d42b      	bmi.n	8004e26 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8004dce:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7ff ffa1 	bl	8004d18 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004dd8:	233f      	movs	r3, #63	; 0x3f
 8004dda:	4093      	lsls	r3, r2
 8004ddc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dde:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004de0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004de4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004de8:	e009      	b.n	8004dfe <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dea:	f7ff fc61 	bl	80046b0 <HAL_GetTick>
 8004dee:	1b40      	subs	r0, r0, r5
 8004df0:	2805      	cmp	r0, #5
 8004df2:	d9b9      	bls.n	8004d68 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004df4:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004df6:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004df8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e00:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004e04:	d113      	bne.n	8004e2e <HAL_DMA_Init+0xea>
    switch (tmp)
 8004e06:	2a03      	cmp	r2, #3
 8004e08:	d8e1      	bhi.n	8004dce <HAL_DMA_Init+0x8a>
 8004e0a:	a001      	add	r0, pc, #4	; (adr r0, 8004e10 <HAL_DMA_Init+0xcc>)
 8004e0c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004e10:	08004e27 	.word	0x08004e27
 8004e14:	08004dcb 	.word	0x08004dcb
 8004e18:	08004e27 	.word	0x08004e27
 8004e1c:	08004e21 	.word	0x08004e21
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e20:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004e24:	d1d3      	bne.n	8004dce <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e26:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8004e28:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e2a:	6563      	str	r3, [r4, #84]	; 0x54
 8004e2c:	e7e5      	b.n	8004dfa <HAL_DMA_Init+0xb6>
    switch (tmp)
 8004e2e:	2a02      	cmp	r2, #2
 8004e30:	d9f9      	bls.n	8004e26 <HAL_DMA_Init+0xe2>
 8004e32:	2a03      	cmp	r2, #3
 8004e34:	e7c8      	b.n	8004dc8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8004e36:	2001      	movs	r0, #1
 8004e38:	e7e1      	b.n	8004dfe <HAL_DMA_Init+0xba>
 8004e3a:	bf00      	nop
 8004e3c:	e010803f 	.word	0xe010803f

08004e40 <HAL_DMA_Start_IT>:
{
 8004e40:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8004e42:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004e46:	2c01      	cmp	r4, #1
 8004e48:	d035      	beq.n	8004eb6 <HAL_DMA_Start_IT+0x76>
 8004e4a:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e4c:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8004e4e:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8004e50:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e54:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004e58:	2c01      	cmp	r4, #1
 8004e5a:	f04f 0402 	mov.w	r4, #2
 8004e5e:	d128      	bne.n	8004eb2 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e60:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e64:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e66:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8004e6e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8004e70:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e72:	6883      	ldr	r3, [r0, #8]
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d119      	bne.n	8004eac <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8004e78:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8004e7a:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004e7e:	233f      	movs	r3, #63	; 0x3f
 8004e80:	4093      	lsls	r3, r2
 8004e82:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	f043 0316 	orr.w	r3, r3, #22
 8004e8a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e8c:	6963      	ldr	r3, [r4, #20]
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8004e94:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e96:	b11b      	cbz	r3, 8004ea0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	f043 0308 	orr.w	r3, r3, #8
 8004e9e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004ea0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6023      	str	r3, [r4, #0]
}
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8004eac:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004eae:	60e2      	str	r2, [r4, #12]
 8004eb0:	e7e4      	b.n	8004e7c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8004eb2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8004eb6:	2002      	movs	r0, #2
 8004eb8:	e7f7      	b.n	8004eaa <HAL_DMA_Start_IT+0x6a>

08004eba <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eba:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d003      	beq.n	8004eca <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004eca:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ecc:	2305      	movs	r3, #5
 8004ece:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8004ed2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004ed4:	6813      	ldr	r3, [r2, #0]
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6013      	str	r3, [r2, #0]
}
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8004ee0:	2300      	movs	r3, #0
{
 8004ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8004ee4:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee6:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8004ee8:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <HAL_DMA_IRQHandler+0x178>)
{
 8004eea:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eec:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8004eee:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004ef2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	4232      	tst	r2, r6
 8004ef8:	d00c      	beq.n	8004f14 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004efa:	6801      	ldr	r1, [r0, #0]
 8004efc:	6808      	ldr	r0, [r1, #0]
 8004efe:	0740      	lsls	r0, r0, #29
 8004f00:	d508      	bpl.n	8004f14 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f02:	6808      	ldr	r0, [r1, #0]
 8004f04:	f020 0004 	bic.w	r0, r0, #4
 8004f08:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f0a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	4232      	tst	r2, r6
 8004f1a:	d008      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f1c:	6821      	ldr	r1, [r4, #0]
 8004f1e:	6949      	ldr	r1, [r1, #20]
 8004f20:	0609      	lsls	r1, r1, #24
 8004f22:	d504      	bpl.n	8004f2e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f24:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f26:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004f28:	f042 0202 	orr.w	r2, r2, #2
 8004f2c:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f2e:	2204      	movs	r2, #4
 8004f30:	409a      	lsls	r2, r3
 8004f32:	4232      	tst	r2, r6
 8004f34:	d008      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f36:	6821      	ldr	r1, [r4, #0]
 8004f38:	6809      	ldr	r1, [r1, #0]
 8004f3a:	0788      	lsls	r0, r1, #30
 8004f3c:	d504      	bpl.n	8004f48 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f3e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004f42:	f042 0204 	orr.w	r2, r2, #4
 8004f46:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f48:	2210      	movs	r2, #16
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	4232      	tst	r2, r6
 8004f4e:	d010      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	0709      	lsls	r1, r1, #28
 8004f56:	d50c      	bpl.n	8004f72 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f58:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	0350      	lsls	r0, r2, #13
 8004f5e:	d537      	bpl.n	8004fd0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0319      	lsls	r1, r3, #12
 8004f64:	d401      	bmi.n	8004f6a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8004f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f68:	e000      	b.n	8004f6c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004f6c:	b10b      	cbz	r3, 8004f72 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8004f6e:	4620      	mov	r0, r4
 8004f70:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f72:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f74:	2220      	movs	r2, #32
 8004f76:	408a      	lsls	r2, r1
 8004f78:	4232      	tst	r2, r6
 8004f7a:	d03a      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	06c6      	lsls	r6, r0, #27
 8004f82:	d536      	bpl.n	8004ff2 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f84:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f86:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004f8a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f8c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f8e:	d127      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f90:	f022 0216 	bic.w	r2, r2, #22
 8004f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f9c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004fa0:	b90a      	cbnz	r2, 8004fa6 <HAL_DMA_IRQHandler+0xc6>
 8004fa2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004fa4:	b11a      	cbz	r2, 8004fae <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	f022 0208 	bic.w	r2, r2, #8
 8004fac:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fae:	233f      	movs	r3, #63	; 0x3f
 8004fb0:	408b      	lsls	r3, r1
 8004fb2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004fc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d045      	beq.n	8005052 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8004fc6:	4620      	mov	r0, r4
}
 8004fc8:	b003      	add	sp, #12
 8004fca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8004fce:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	05d2      	lsls	r2, r2, #23
 8004fd4:	d4c7      	bmi.n	8004f66 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f022 0208 	bic.w	r2, r2, #8
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e7c2      	b.n	8004f66 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fe0:	0350      	lsls	r0, r2, #13
 8004fe2:	d527      	bpl.n	8005034 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0319      	lsls	r1, r3, #12
 8004fe8:	d431      	bmi.n	800504e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8004fea:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004fec:	b10b      	cbz	r3, 8004ff2 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ff2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ff4:	b36b      	cbz	r3, 8005052 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ff8:	07da      	lsls	r2, r3, #31
 8004ffa:	d519      	bpl.n	8005030 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ffc:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8004ffe:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8005000:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005004:	6813      	ldr	r3, [r2, #0]
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800500c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005010:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8005014:	9b01      	ldr	r3, [sp, #4]
 8005016:	3301      	adds	r3, #1
 8005018:	42bb      	cmp	r3, r7
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	d802      	bhi.n	8005024 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	07db      	lsls	r3, r3, #31
 8005022:	d4f7      	bmi.n	8005014 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8005024:	2300      	movs	r3, #0
 8005026:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800502a:	2301      	movs	r3, #1
 800502c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8005030:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005032:	e7c6      	b.n	8004fc2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800503a:	d108      	bne.n	800504e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	f021 0110 	bic.w	r1, r1, #16
 8005042:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005044:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8005046:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800504a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800504e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005050:	e7cc      	b.n	8004fec <HAL_DMA_IRQHandler+0x10c>
}
 8005052:	b003      	add	sp, #12
 8005054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005056:	bf00      	nop
 8005058:	20000034 	.word	0x20000034

0800505c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005060:	680b      	ldr	r3, [r1, #0]
{
 8005062:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005064:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800520c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005068:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800506a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800506c:	4a65      	ldr	r2, [pc, #404]	; (8005204 <HAL_GPIO_Init+0x1a8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800506e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8005210 <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 8005072:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005074:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8005076:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005078:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800507a:	42ac      	cmp	r4, r5
 800507c:	f040 80ac 	bne.w	80051d8 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005080:	684c      	ldr	r4, [r1, #4]
 8005082:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005086:	2603      	movs	r6, #3
 8005088:	f024 0c10 	bic.w	ip, r4, #16
 800508c:	fa06 f60e 	lsl.w	r6, r6, lr
 8005090:	f10c 37ff 	add.w	r7, ip, #4294967295
 8005094:	43f6      	mvns	r6, r6
 8005096:	2f01      	cmp	r7, #1
 8005098:	d811      	bhi.n	80050be <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 800509a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800509c:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80050a0:	68cf      	ldr	r7, [r1, #12]
 80050a2:	fa07 f70e 	lsl.w	r7, r7, lr
 80050a6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80050aa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80050ac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050ae:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80050b2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80050b6:	409f      	lsls	r7, r3
 80050b8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80050bc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80050be:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050c0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050c4:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80050c8:	688f      	ldr	r7, [r1, #8]
 80050ca:	fa07 f70e 	lsl.w	r7, r7, lr
 80050ce:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 80050d2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050d4:	d116      	bne.n	8005104 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 80050d6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050da:	f003 0b07 	and.w	fp, r3, #7
 80050de:	f04f 0c0f 	mov.w	ip, #15
 80050e2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80050e6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80050ea:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80050ee:	fa0c fc0b 	lsl.w	ip, ip, fp
 80050f2:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80050f6:	690f      	ldr	r7, [r1, #16]
 80050f8:	fa07 f70b 	lsl.w	r7, r7, fp
 80050fc:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8005100:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8005104:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005106:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005108:	f004 0703 	and.w	r7, r4, #3
 800510c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005110:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8005114:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005116:	00e6      	lsls	r6, r4, #3
 8005118:	d55e      	bpl.n	80051d8 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800511a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800511e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005122:	f003 0c03 	and.w	ip, r3, #3
 8005126:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800512a:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800512e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005132:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005136:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 800513a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800513e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8005142:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8005146:	9603      	str	r6, [sp, #12]
 8005148:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800514a:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 800514e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005152:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005156:	4e2c      	ldr	r6, [pc, #176]	; (8005208 <HAL_GPIO_Init+0x1ac>)
 8005158:	42b0      	cmp	r0, r6
 800515a:	d044      	beq.n	80051e6 <HAL_GPIO_Init+0x18a>
 800515c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005160:	42b0      	cmp	r0, r6
 8005162:	d042      	beq.n	80051ea <HAL_GPIO_Init+0x18e>
 8005164:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005168:	42b0      	cmp	r0, r6
 800516a:	d040      	beq.n	80051ee <HAL_GPIO_Init+0x192>
 800516c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005170:	42b0      	cmp	r0, r6
 8005172:	d03e      	beq.n	80051f2 <HAL_GPIO_Init+0x196>
 8005174:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005178:	42b0      	cmp	r0, r6
 800517a:	d03c      	beq.n	80051f6 <HAL_GPIO_Init+0x19a>
 800517c:	4548      	cmp	r0, r9
 800517e:	d03c      	beq.n	80051fa <HAL_GPIO_Init+0x19e>
 8005180:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005184:	42b0      	cmp	r0, r6
 8005186:	d03a      	beq.n	80051fe <HAL_GPIO_Init+0x1a2>
 8005188:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800518c:	42b0      	cmp	r0, r6
 800518e:	bf14      	ite	ne
 8005190:	2608      	movne	r6, #8
 8005192:	2607      	moveq	r6, #7
 8005194:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005198:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800519c:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80051a0:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80051a2:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 80051a6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80051a8:	bf0c      	ite	eq
 80051aa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80051ac:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051ae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80051b2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80051b4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80051b6:	bf0c      	ite	eq
 80051b8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80051ba:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051bc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 80051c0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80051c2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80051c4:	bf0c      	ite	eq
 80051c6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80051c8:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051ca:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80051cc:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80051ce:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80051d0:	bf54      	ite	pl
 80051d2:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80051d4:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80051d6:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051d8:	3301      	adds	r3, #1
 80051da:	2b10      	cmp	r3, #16
 80051dc:	f47f af49 	bne.w	8005072 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80051e0:	b005      	add	sp, #20
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051e6:	2600      	movs	r6, #0
 80051e8:	e7d4      	b.n	8005194 <HAL_GPIO_Init+0x138>
 80051ea:	2601      	movs	r6, #1
 80051ec:	e7d2      	b.n	8005194 <HAL_GPIO_Init+0x138>
 80051ee:	2602      	movs	r6, #2
 80051f0:	e7d0      	b.n	8005194 <HAL_GPIO_Init+0x138>
 80051f2:	2603      	movs	r6, #3
 80051f4:	e7ce      	b.n	8005194 <HAL_GPIO_Init+0x138>
 80051f6:	2604      	movs	r6, #4
 80051f8:	e7cc      	b.n	8005194 <HAL_GPIO_Init+0x138>
 80051fa:	2605      	movs	r6, #5
 80051fc:	e7ca      	b.n	8005194 <HAL_GPIO_Init+0x138>
 80051fe:	2606      	movs	r6, #6
 8005200:	e7c8      	b.n	8005194 <HAL_GPIO_Init+0x138>
 8005202:	bf00      	nop
 8005204:	40013c00 	.word	0x40013c00
 8005208:	40020000 	.word	0x40020000
 800520c:	40023800 	.word	0x40023800
 8005210:	40021400 	.word	0x40021400

08005214 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005214:	b10a      	cbz	r2, 800521a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005216:	6181      	str	r1, [r0, #24]
  }
}
 8005218:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800521a:	0409      	lsls	r1, r1, #16
 800521c:	e7fb      	b.n	8005216 <HAL_GPIO_WritePin+0x2>
	...

08005220 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005220:	4b19      	ldr	r3, [pc, #100]	; (8005288 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005222:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005226:	4c19      	ldr	r4, [pc, #100]	; (800528c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005228:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005240:	f7ff fa36 	bl	80046b0 <HAL_GetTick>
 8005244:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005246:	6863      	ldr	r3, [r4, #4]
 8005248:	03da      	lsls	r2, r3, #15
 800524a:	d50c      	bpl.n	8005266 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005252:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005254:	f7ff fa2c 	bl	80046b0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005258:	4c0c      	ldr	r4, [pc, #48]	; (800528c <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800525a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800525c:	6863      	ldr	r3, [r4, #4]
 800525e:	039b      	lsls	r3, r3, #14
 8005260:	d50a      	bpl.n	8005278 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005262:	2000      	movs	r0, #0
 8005264:	e006      	b.n	8005274 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005266:	f7ff fa23 	bl	80046b0 <HAL_GetTick>
 800526a:	1b40      	subs	r0, r0, r5
 800526c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005270:	d9e9      	bls.n	8005246 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005272:	2003      	movs	r0, #3
}
 8005274:	b003      	add	sp, #12
 8005276:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005278:	f7ff fa1a 	bl	80046b0 <HAL_GetTick>
 800527c:	1b40      	subs	r0, r0, r5
 800527e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005282:	d9eb      	bls.n	800525c <HAL_PWREx_EnableOverDrive+0x3c>
 8005284:	e7f5      	b.n	8005272 <HAL_PWREx_EnableOverDrive+0x52>
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800
 800528c:	40007000 	.word	0x40007000

08005290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005294:	4604      	mov	r4, r0
 8005296:	b908      	cbnz	r0, 800529c <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005298:	2001      	movs	r0, #1
 800529a:	e03f      	b.n	800531c <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529c:	6803      	ldr	r3, [r0, #0]
 800529e:	07d8      	lsls	r0, r3, #31
 80052a0:	d410      	bmi.n	80052c4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	0799      	lsls	r1, r3, #30
 80052a6:	d460      	bmi.n	800536a <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	0719      	lsls	r1, r3, #28
 80052ac:	f100 80a5 	bmi.w	80053fa <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	075a      	lsls	r2, r3, #29
 80052b4:	f100 80c6 	bmi.w	8005444 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052b8:	69a0      	ldr	r0, [r4, #24]
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f040 8130 	bne.w	8005520 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 80052c0:	2000      	movs	r0, #0
 80052c2:	e02b      	b.n	800531c <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052c4:	4b94      	ldr	r3, [pc, #592]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	f002 020c 	and.w	r2, r2, #12
 80052cc:	2a04      	cmp	r2, #4
 80052ce:	d007      	beq.n	80052e0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	f002 020c 	and.w	r2, r2, #12
 80052d6:	2a08      	cmp	r2, #8
 80052d8:	d10a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x60>
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	025a      	lsls	r2, r3, #9
 80052de:	d507      	bpl.n	80052f0 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	4b8d      	ldr	r3, [pc, #564]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	039b      	lsls	r3, r3, #14
 80052e6:	d5dc      	bpl.n	80052a2 <HAL_RCC_OscConfig+0x12>
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1d9      	bne.n	80052a2 <HAL_RCC_OscConfig+0x12>
 80052ee:	e7d3      	b.n	8005298 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	4d89      	ldr	r5, [pc, #548]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f8:	d113      	bne.n	8005322 <HAL_RCC_OscConfig+0x92>
 80052fa:	682b      	ldr	r3, [r5, #0]
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005302:	f7ff f9d5 	bl	80046b0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005306:	4d84      	ldr	r5, [pc, #528]	; (8005518 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8005308:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	039f      	lsls	r7, r3, #14
 800530e:	d4c8      	bmi.n	80052a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7ff f9ce 	bl	80046b0 <HAL_GetTick>
 8005314:	1b80      	subs	r0, r0, r6
 8005316:	2864      	cmp	r0, #100	; 0x64
 8005318:	d9f7      	bls.n	800530a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800531a:	2003      	movs	r0, #3
}
 800531c:	b002      	add	sp, #8
 800531e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005322:	b99b      	cbnz	r3, 800534c <HAL_RCC_OscConfig+0xbc>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532a:	602b      	str	r3, [r5, #0]
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005332:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005334:	f7ff f9bc 	bl	80046b0 <HAL_GetTick>
 8005338:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	0398      	lsls	r0, r3, #14
 800533e:	d5b0      	bpl.n	80052a2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005340:	f7ff f9b6 	bl	80046b0 <HAL_GetTick>
 8005344:	1b80      	subs	r0, r0, r6
 8005346:	2864      	cmp	r0, #100	; 0x64
 8005348:	d9f7      	bls.n	800533a <HAL_RCC_OscConfig+0xaa>
 800534a:	e7e6      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	d103      	bne.n	800535c <HAL_RCC_OscConfig+0xcc>
 8005354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	e7ce      	b.n	80052fa <HAL_RCC_OscConfig+0x6a>
 800535c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005368:	e7ca      	b.n	8005300 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800536a:	4b6b      	ldr	r3, [pc, #428]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	f012 0f0c 	tst.w	r2, #12
 8005372:	d007      	beq.n	8005384 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	f002 020c 	and.w	r2, r2, #12
 800537a:	2a08      	cmp	r2, #8
 800537c:	d111      	bne.n	80053a2 <HAL_RCC_OscConfig+0x112>
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	0259      	lsls	r1, r3, #9
 8005382:	d40e      	bmi.n	80053a2 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005384:	4b64      	ldr	r3, [pc, #400]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	0792      	lsls	r2, r2, #30
 800538a:	d502      	bpl.n	8005392 <HAL_RCC_OscConfig+0x102>
 800538c:	68e2      	ldr	r2, [r4, #12]
 800538e:	2a01      	cmp	r2, #1
 8005390:	d182      	bne.n	8005298 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6921      	ldr	r1, [r4, #16]
 8005396:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800539a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800539e:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a0:	e782      	b.n	80052a8 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	4d5c      	ldr	r5, [pc, #368]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 80053a6:	b1bb      	cbz	r3, 80053d8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80053b0:	f7ff f97e 	bl	80046b0 <HAL_GetTick>
 80053b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	079f      	lsls	r7, r3, #30
 80053ba:	d507      	bpl.n	80053cc <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	6922      	ldr	r2, [r4, #16]
 80053c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	e76d      	b.n	80052a8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053cc:	f7ff f970 	bl	80046b0 <HAL_GetTick>
 80053d0:	1b80      	subs	r0, r0, r6
 80053d2:	2802      	cmp	r0, #2
 80053d4:	d9ef      	bls.n	80053b6 <HAL_RCC_OscConfig+0x126>
 80053d6:	e7a0      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80053e0:	f7ff f966 	bl	80046b0 <HAL_GetTick>
 80053e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e6:	682b      	ldr	r3, [r5, #0]
 80053e8:	0798      	lsls	r0, r3, #30
 80053ea:	f57f af5d 	bpl.w	80052a8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ee:	f7ff f95f 	bl	80046b0 <HAL_GetTick>
 80053f2:	1b80      	subs	r0, r0, r6
 80053f4:	2802      	cmp	r0, #2
 80053f6:	d9f6      	bls.n	80053e6 <HAL_RCC_OscConfig+0x156>
 80053f8:	e78f      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053fa:	6963      	ldr	r3, [r4, #20]
 80053fc:	4d46      	ldr	r5, [pc, #280]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 80053fe:	b183      	cbz	r3, 8005422 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8005400:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005408:	f7ff f952 	bl	80046b0 <HAL_GetTick>
 800540c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005410:	079b      	lsls	r3, r3, #30
 8005412:	f53f af4d 	bmi.w	80052b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005416:	f7ff f94b 	bl	80046b0 <HAL_GetTick>
 800541a:	1b80      	subs	r0, r0, r6
 800541c:	2802      	cmp	r0, #2
 800541e:	d9f6      	bls.n	800540e <HAL_RCC_OscConfig+0x17e>
 8005420:	e77b      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8005422:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800542a:	f7ff f941 	bl	80046b0 <HAL_GetTick>
 800542e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005430:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005432:	079f      	lsls	r7, r3, #30
 8005434:	f57f af3c 	bpl.w	80052b0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005438:	f7ff f93a 	bl	80046b0 <HAL_GetTick>
 800543c:	1b80      	subs	r0, r0, r6
 800543e:	2802      	cmp	r0, #2
 8005440:	d9f6      	bls.n	8005430 <HAL_RCC_OscConfig+0x1a0>
 8005442:	e76a      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005444:	4b34      	ldr	r3, [pc, #208]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 8005446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005448:	00d0      	lsls	r0, r2, #3
 800544a:	d427      	bmi.n	800549c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800544c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800544e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005450:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005460:	4d2e      	ldr	r5, [pc, #184]	; (800551c <HAL_RCC_OscConfig+0x28c>)
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	05d9      	lsls	r1, r3, #23
 8005466:	d51b      	bpl.n	80054a0 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005468:	68a3      	ldr	r3, [r4, #8]
 800546a:	4d2b      	ldr	r5, [pc, #172]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 800546c:	2b01      	cmp	r3, #1
 800546e:	d127      	bne.n	80054c0 <HAL_RCC_OscConfig+0x230>
 8005470:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005478:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800547c:	f7ff f918 	bl	80046b0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005480:	4f25      	ldr	r7, [pc, #148]	; (8005518 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8005482:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005486:	079b      	lsls	r3, r3, #30
 8005488:	d53f      	bpl.n	800550a <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800548a:	2e00      	cmp	r6, #0
 800548c:	f43f af14 	beq.w	80052b8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005490:	4a21      	ldr	r2, [pc, #132]	; (8005518 <HAL_RCC_OscConfig+0x288>)
 8005492:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005498:	6413      	str	r3, [r2, #64]	; 0x40
 800549a:	e70d      	b.n	80052b8 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 800549c:	2600      	movs	r6, #0
 800549e:	e7df      	b.n	8005460 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80054a8:	f7ff f902 	bl	80046b0 <HAL_GetTick>
 80054ac:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	05da      	lsls	r2, r3, #23
 80054b2:	d4d9      	bmi.n	8005468 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b4:	f7ff f8fc 	bl	80046b0 <HAL_GetTick>
 80054b8:	1bc0      	subs	r0, r0, r7
 80054ba:	2864      	cmp	r0, #100	; 0x64
 80054bc:	d9f7      	bls.n	80054ae <HAL_RCC_OscConfig+0x21e>
 80054be:	e72c      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	b9ab      	cbnz	r3, 80054ee <HAL_RCC_OscConfig+0x25e>
 80054c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	672b      	str	r3, [r5, #112]	; 0x70
 80054ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80054d6:	f7ff f8eb 	bl	80046b0 <HAL_GetTick>
 80054da:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80054de:	0798      	lsls	r0, r3, #30
 80054e0:	d5d3      	bpl.n	800548a <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7ff f8e5 	bl	80046b0 <HAL_GetTick>
 80054e6:	1bc0      	subs	r0, r0, r7
 80054e8:	4540      	cmp	r0, r8
 80054ea:	d9f7      	bls.n	80054dc <HAL_RCC_OscConfig+0x24c>
 80054ec:	e715      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ee:	2b05      	cmp	r3, #5
 80054f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80054f2:	d103      	bne.n	80054fc <HAL_RCC_OscConfig+0x26c>
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	672b      	str	r3, [r5, #112]	; 0x70
 80054fa:	e7b9      	b.n	8005470 <HAL_RCC_OscConfig+0x1e0>
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	672b      	str	r3, [r5, #112]	; 0x70
 8005502:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	e7b5      	b.n	8005476 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550a:	f7ff f8d1 	bl	80046b0 <HAL_GetTick>
 800550e:	eba0 0008 	sub.w	r0, r0, r8
 8005512:	42a8      	cmp	r0, r5
 8005514:	d9b6      	bls.n	8005484 <HAL_RCC_OscConfig+0x1f4>
 8005516:	e700      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
 8005518:	40023800 	.word	0x40023800
 800551c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005520:	4d38      	ldr	r5, [pc, #224]	; (8005604 <HAL_RCC_OscConfig+0x374>)
 8005522:	68ab      	ldr	r3, [r5, #8]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b08      	cmp	r3, #8
 800552a:	d041      	beq.n	80055b0 <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 800552c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005534:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005536:	d12e      	bne.n	8005596 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8005538:	f7ff f8ba 	bl	80046b0 <HAL_GetTick>
 800553c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	0199      	lsls	r1, r3, #6
 8005542:	d422      	bmi.n	800558a <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005544:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005548:	4313      	orrs	r3, r2
 800554a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800554c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005550:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005554:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005556:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800555a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555c:	4c29      	ldr	r4, [pc, #164]	; (8005604 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800555e:	0852      	lsrs	r2, r2, #1
 8005560:	3a01      	subs	r2, #1
 8005562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005566:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005570:	f7ff f89e 	bl	80046b0 <HAL_GetTick>
 8005574:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	019a      	lsls	r2, r3, #6
 800557a:	f53f aea1 	bmi.w	80052c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557e:	f7ff f897 	bl	80046b0 <HAL_GetTick>
 8005582:	1b40      	subs	r0, r0, r5
 8005584:	2802      	cmp	r0, #2
 8005586:	d9f6      	bls.n	8005576 <HAL_RCC_OscConfig+0x2e6>
 8005588:	e6c7      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558a:	f7ff f891 	bl	80046b0 <HAL_GetTick>
 800558e:	1b80      	subs	r0, r0, r6
 8005590:	2802      	cmp	r0, #2
 8005592:	d9d4      	bls.n	800553e <HAL_RCC_OscConfig+0x2ae>
 8005594:	e6c1      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8005596:	f7ff f88b 	bl	80046b0 <HAL_GetTick>
 800559a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	019b      	lsls	r3, r3, #6
 80055a0:	f57f ae8e 	bpl.w	80052c0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a4:	f7ff f884 	bl	80046b0 <HAL_GetTick>
 80055a8:	1b00      	subs	r0, r0, r4
 80055aa:	2802      	cmp	r0, #2
 80055ac:	d9f6      	bls.n	800559c <HAL_RCC_OscConfig+0x30c>
 80055ae:	e6b4      	b.n	800531a <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b0:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80055b2:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b4:	f43f aeb2 	beq.w	800531c <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055bc:	69e1      	ldr	r1, [r4, #28]
 80055be:	428a      	cmp	r2, r1
 80055c0:	f47f ae6a 	bne.w	8005298 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c8:	6a21      	ldr	r1, [r4, #32]
 80055ca:	428a      	cmp	r2, r1
 80055cc:	f47f ae64 	bne.w	8005298 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d6:	401a      	ands	r2, r3
 80055d8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80055dc:	f47f ae5c 	bne.w	8005298 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80055e2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80055e6:	0852      	lsrs	r2, r2, #1
 80055e8:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ea:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80055ee:	f47f ae53 	bne.w	8005298 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80055f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055f8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 80055fc:	bf14      	ite	ne
 80055fe:	2001      	movne	r0, #1
 8005600:	2000      	moveq	r0, #0
 8005602:	e68b      	b.n	800531c <HAL_RCC_OscConfig+0x8c>
 8005604:	40023800 	.word	0x40023800

08005608 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005608:	4913      	ldr	r1, [pc, #76]	; (8005658 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800560a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560c:	688b      	ldr	r3, [r1, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b04      	cmp	r3, #4
 8005614:	d003      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0x16>
 8005616:	2b08      	cmp	r3, #8
 8005618:	d003      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800561a:	4810      	ldr	r0, [pc, #64]	; (800565c <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800561c:	e000      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800561e:	4810      	ldr	r0, [pc, #64]	; (8005660 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8005620:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005622:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005624:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005626:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005628:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800562c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005630:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005634:	bf1a      	itte	ne
 8005636:	480a      	ldrne	r0, [pc, #40]	; (8005660 <HAL_RCC_GetSysClockFreq+0x58>)
 8005638:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563a:	4808      	ldreq	r0, [pc, #32]	; (800565c <HAL_RCC_GetSysClockFreq+0x54>)
 800563c:	fba1 0100 	umull	r0, r1, r1, r0
 8005640:	f7fb fb4a 	bl	8000cd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <HAL_RCC_GetSysClockFreq+0x50>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800564c:	3301      	adds	r3, #1
 800564e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8005650:	fbb0 f0f3 	udiv	r0, r0, r3
 8005654:	e7e4      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x18>
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	00f42400 	.word	0x00f42400
 8005660:	017d7840 	.word	0x017d7840

08005664 <HAL_RCC_ClockConfig>:
{
 8005664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005668:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800566a:	4604      	mov	r4, r0
 800566c:	b910      	cbnz	r0, 8005674 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800566e:	2001      	movs	r0, #1
}
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4a45      	ldr	r2, [pc, #276]	; (800578c <HAL_RCC_ClockConfig+0x128>)
 8005676:	6813      	ldr	r3, [r2, #0]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	428b      	cmp	r3, r1
 800567e:	d328      	bcc.n	80056d2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005680:	6821      	ldr	r1, [r4, #0]
 8005682:	078f      	lsls	r7, r1, #30
 8005684:	d430      	bmi.n	80056e8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005686:	07c8      	lsls	r0, r1, #31
 8005688:	d443      	bmi.n	8005712 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800568a:	4a40      	ldr	r2, [pc, #256]	; (800578c <HAL_RCC_ClockConfig+0x128>)
 800568c:	6813      	ldr	r3, [r2, #0]
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	42ab      	cmp	r3, r5
 8005694:	d866      	bhi.n	8005764 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	0751      	lsls	r1, r2, #29
 800569a:	d46f      	bmi.n	800577c <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569c:	0713      	lsls	r3, r2, #28
 800569e:	d507      	bpl.n	80056b0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056a0:	4a3b      	ldr	r2, [pc, #236]	; (8005790 <HAL_RCC_ClockConfig+0x12c>)
 80056a2:	6921      	ldr	r1, [r4, #16]
 80056a4:	6893      	ldr	r3, [r2, #8]
 80056a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80056aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80056ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056b0:	f7ff ffaa 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80056b4:	4b36      	ldr	r3, [pc, #216]	; (8005790 <HAL_RCC_ClockConfig+0x12c>)
 80056b6:	4a37      	ldr	r2, [pc, #220]	; (8005794 <HAL_RCC_ClockConfig+0x130>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80056be:	5cd3      	ldrb	r3, [r2, r3]
 80056c0:	40d8      	lsrs	r0, r3
 80056c2:	4b35      	ldr	r3, [pc, #212]	; (8005798 <HAL_RCC_ClockConfig+0x134>)
 80056c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80056c6:	4b35      	ldr	r3, [pc, #212]	; (800579c <HAL_RCC_ClockConfig+0x138>)
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f7fe ffaf 	bl	800462c <HAL_InitTick>
  return HAL_OK;
 80056ce:	2000      	movs	r0, #0
 80056d0:	e7ce      	b.n	8005670 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	f023 030f 	bic.w	r3, r3, #15
 80056d8:	430b      	orrs	r3, r1
 80056da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056dc:	6813      	ldr	r3, [r2, #0]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	428b      	cmp	r3, r1
 80056e4:	d1c3      	bne.n	800566e <HAL_RCC_ClockConfig+0xa>
 80056e6:	e7cb      	b.n	8005680 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e8:	f011 0f04 	tst.w	r1, #4
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <HAL_RCC_ClockConfig+0x12c>)
 80056ee:	d003      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80056f6:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	070e      	lsls	r6, r1, #28
 80056fa:	d503      	bpl.n	8005704 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005702:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005704:	689a      	ldr	r2, [r3, #8]
 8005706:	68a0      	ldr	r0, [r4, #8]
 8005708:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800570c:	4302      	orrs	r2, r0
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	e7b9      	b.n	8005686 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005712:	6861      	ldr	r1, [r4, #4]
 8005714:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <HAL_RCC_ClockConfig+0x12c>)
 8005716:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005718:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571a:	d11b      	bne.n	8005754 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005720:	d0a5      	beq.n	800566e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005722:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005724:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005728:	4e19      	ldr	r6, [pc, #100]	; (8005790 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572a:	f022 0203 	bic.w	r2, r2, #3
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005732:	f7fe ffbd 	bl	80046b0 <HAL_GetTick>
 8005736:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005738:	68b3      	ldr	r3, [r6, #8]
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005744:	d0a1      	beq.n	800568a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005746:	f7fe ffb3 	bl	80046b0 <HAL_GetTick>
 800574a:	1bc0      	subs	r0, r0, r7
 800574c:	4540      	cmp	r0, r8
 800574e:	d9f3      	bls.n	8005738 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8005750:	2003      	movs	r0, #3
 8005752:	e78d      	b.n	8005670 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005754:	2902      	cmp	r1, #2
 8005756:	d102      	bne.n	800575e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005758:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800575c:	e7e0      	b.n	8005720 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575e:	f012 0f02 	tst.w	r2, #2
 8005762:	e7dd      	b.n	8005720 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005764:	6813      	ldr	r3, [r2, #0]
 8005766:	f023 030f 	bic.w	r3, r3, #15
 800576a:	432b      	orrs	r3, r5
 800576c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	42ab      	cmp	r3, r5
 8005776:	f47f af7a 	bne.w	800566e <HAL_RCC_ClockConfig+0xa>
 800577a:	e78c      	b.n	8005696 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <HAL_RCC_ClockConfig+0x12c>)
 800577e:	68e0      	ldr	r0, [r4, #12]
 8005780:	688b      	ldr	r3, [r1, #8]
 8005782:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005786:	4303      	orrs	r3, r0
 8005788:	608b      	str	r3, [r1, #8]
 800578a:	e787      	b.n	800569c <HAL_RCC_ClockConfig+0x38>
 800578c:	40023c00 	.word	0x40023c00
 8005790:	40023800 	.word	0x40023800
 8005794:	0800e02c 	.word	0x0800e02c
 8005798:	20000034 	.word	0x20000034
 800579c:	20002804 	.word	0x20002804

080057a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057a0:	4b04      	ldr	r3, [pc, #16]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80057a2:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80057aa:	5cd3      	ldrb	r3, [r2, r3]
 80057ac:	4a03      	ldr	r2, [pc, #12]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80057ae:	6810      	ldr	r0, [r2, #0]
}
 80057b0:	40d8      	lsrs	r0, r3
 80057b2:	4770      	bx	lr
 80057b4:	40023800 	.word	0x40023800
 80057b8:	0800e03c 	.word	0x0800e03c
 80057bc:	20000034 	.word	0x20000034

080057c0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80057c2:	4a05      	ldr	r2, [pc, #20]	; (80057d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80057ca:	5cd3      	ldrb	r3, [r2, r3]
 80057cc:	4a03      	ldr	r2, [pc, #12]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80057ce:	6810      	ldr	r0, [r2, #0]
}
 80057d0:	40d8      	lsrs	r0, r3
 80057d2:	4770      	bx	lr
 80057d4:	40023800 	.word	0x40023800
 80057d8:	0800e03c 	.word	0x0800e03c
 80057dc:	20000034 	.word	0x20000034

080057e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057e4:	6802      	ldr	r2, [r0, #0]
{
 80057e6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057e8:	f012 0601 	ands.w	r6, r2, #1
 80057ec:	d00b      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057ee:	4bb9      	ldr	r3, [pc, #740]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f0:	6899      	ldr	r1, [r3, #8]
 80057f2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80057f6:	6099      	str	r1, [r3, #8]
 80057f8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057fe:	fab6 f686 	clz	r6, r6
 8005802:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005804:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005806:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800580a:	d012      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800580c:	49b1      	ldr	r1, [pc, #708]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800580e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005810:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005814:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005818:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800581c:	bf08      	it	eq
 800581e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005820:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005824:	bf16      	itet	ne
 8005826:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800582a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800582c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800582e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005832:	02d7      	lsls	r7, r2, #11
 8005834:	d510      	bpl.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005836:	48a7      	ldr	r0, [pc, #668]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005838:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800583a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800583e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005842:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005846:	ea43 0301 	orr.w	r3, r3, r1
 800584a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800584e:	f000 814b 	beq.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8005852:	2900      	cmp	r1, #0
 8005854:	bf08      	it	eq
 8005856:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005858:	0690      	lsls	r0, r2, #26
 800585a:	d531      	bpl.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800585c:	4b9d      	ldr	r3, [pc, #628]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800585e:	4f9e      	ldr	r7, [pc, #632]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005862:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587a:	f7fe ff19 	bl	80046b0 <HAL_GetTick>
 800587e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	05d9      	lsls	r1, r3, #23
 8005884:	f140 8132 	bpl.w	8005aec <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005888:	4f92      	ldr	r7, [pc, #584]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800588a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800588c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005890:	f040 8137 	bne.w	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x322>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005894:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005896:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800589a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800589e:	4a8d      	ldr	r2, [pc, #564]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058a0:	f040 8155 	bne.w	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058a4:	6891      	ldr	r1, [r2, #8]
 80058a6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80058aa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80058ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80058b2:	4301      	orrs	r1, r0
 80058b4:	6091      	str	r1, [r2, #8]
 80058b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ba:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80058bc:	430b      	orrs	r3, r1
 80058be:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	06df      	lsls	r7, r3, #27
 80058c4:	d50c      	bpl.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058c6:	4a83      	ldr	r2, [pc, #524]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058c8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80058cc:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80058d0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80058d4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80058d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80058da:	4301      	orrs	r1, r0
 80058dc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e0:	0458      	lsls	r0, r3, #17
 80058e2:	d508      	bpl.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058e4:	497b      	ldr	r1, [pc, #492]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80058e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80058ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80058f0:	4302      	orrs	r2, r0
 80058f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058f6:	0419      	lsls	r1, r3, #16
 80058f8:	d508      	bpl.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058fa:	4976      	ldr	r1, [pc, #472]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80058fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005902:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005906:	4302      	orrs	r2, r0
 8005908:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800590c:	03da      	lsls	r2, r3, #15
 800590e:	d508      	bpl.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005910:	4970      	ldr	r1, [pc, #448]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005912:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005914:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005918:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800591c:	4302      	orrs	r2, r0
 800591e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005922:	065f      	lsls	r7, r3, #25
 8005924:	d508      	bpl.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005926:	496b      	ldr	r1, [pc, #428]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005928:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800592a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800592e:	f022 0203 	bic.w	r2, r2, #3
 8005932:	4302      	orrs	r2, r0
 8005934:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005938:	0618      	lsls	r0, r3, #24
 800593a:	d508      	bpl.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800593c:	4965      	ldr	r1, [pc, #404]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800593e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005940:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005944:	f022 020c 	bic.w	r2, r2, #12
 8005948:	4302      	orrs	r2, r0
 800594a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800594e:	05d9      	lsls	r1, r3, #23
 8005950:	d508      	bpl.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005952:	4960      	ldr	r1, [pc, #384]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005954:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005956:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800595a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800595e:	4302      	orrs	r2, r0
 8005960:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005964:	059a      	lsls	r2, r3, #22
 8005966:	d508      	bpl.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005968:	495a      	ldr	r1, [pc, #360]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800596a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800596c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005970:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005974:	4302      	orrs	r2, r0
 8005976:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800597a:	055f      	lsls	r7, r3, #21
 800597c:	d508      	bpl.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800597e:	4955      	ldr	r1, [pc, #340]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005980:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005982:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005986:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800598a:	4302      	orrs	r2, r0
 800598c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005990:	0518      	lsls	r0, r3, #20
 8005992:	d508      	bpl.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005994:	494f      	ldr	r1, [pc, #316]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005996:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005998:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800599c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059a0:	4302      	orrs	r2, r0
 80059a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80059a6:	04d9      	lsls	r1, r3, #19
 80059a8:	d508      	bpl.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80059aa:	494a      	ldr	r1, [pc, #296]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80059b2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80059b6:	4302      	orrs	r2, r0
 80059b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059bc:	049a      	lsls	r2, r3, #18
 80059be:	d508      	bpl.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059c0:	4944      	ldr	r1, [pc, #272]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80059c8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80059cc:	4302      	orrs	r2, r0
 80059ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059d2:	029f      	lsls	r7, r3, #10
 80059d4:	d50c      	bpl.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059d6:	483f      	ldr	r0, [pc, #252]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80059da:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80059de:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059e2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80059e6:	bf08      	it	eq
 80059e8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059ea:	430a      	orrs	r2, r1
 80059ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059f0:	0358      	lsls	r0, r3, #13
 80059f2:	d508      	bpl.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059f4:	4937      	ldr	r1, [pc, #220]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80059f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80059fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a00:	4302      	orrs	r2, r0
 8005a02:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a06:	0219      	lsls	r1, r3, #8
 8005a08:	d508      	bpl.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a0a:	4932      	ldr	r1, [pc, #200]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a0c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005a0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005a12:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005a16:	4302      	orrs	r2, r0
 8005a18:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	d508      	bpl.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a20:	492c      	ldr	r1, [pc, #176]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a22:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005a24:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005a28:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005a2c:	4302      	orrs	r2, r0
 8005a2e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a32:	2e00      	cmp	r6, #0
 8005a34:	f040 808f 	bne.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3c:	f000 808b 	beq.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a40:	2d01      	cmp	r5, #1
 8005a42:	d14f      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a44:	4d23      	ldr	r5, [pc, #140]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a46:	682b      	ldr	r3, [r5, #0]
 8005a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4e:	f7fe fe2f 	bl	80046b0 <HAL_GetTick>
 8005a52:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	009f      	lsls	r7, r3, #2
 8005a58:	f100 80e0 	bmi.w	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	0305      	lsls	r5, r0, #12
 8005a60:	d501      	bpl.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a64:	b11b      	cbz	r3, 8005a6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005a66:	02c1      	lsls	r1, r0, #11
 8005a68:	d518      	bpl.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a6c:	b9b3      	cbnz	r3, 8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a6e:	4919      	ldr	r1, [pc, #100]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005a70:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8005a7e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a88:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8005a8c:	6a22      	ldr	r2, [r4, #32]
 8005a8e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005a92:	3a01      	subs	r2, #1
 8005a94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a9c:	0282      	lsls	r2, r0, #10
 8005a9e:	d510      	bpl.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005aa0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aa8:	490a      	ldr	r1, [pc, #40]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005aaa:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005ab0:	6920      	ldr	r0, [r4, #16]
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005ab8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ac2:	4c04      	ldr	r4, [pc, #16]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005acc:	f7fe fdf0 	bl	80046b0 <HAL_GetTick>
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	e003      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	f140 80a3 	bpl.w	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e009      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x31c>
      plli2sused = 1;
 8005ae8:	2601      	movs	r6, #1
 8005aea:	e6b5      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aec:	f7fe fde0 	bl	80046b0 <HAL_GetTick>
 8005af0:	eba0 0008 	sub.w	r0, r0, r8
 8005af4:	2864      	cmp	r0, #100	; 0x64
 8005af6:	f67f aec3 	bls.w	8005880 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8005afa:	2003      	movs	r0, #3
}
 8005afc:	b003      	add	sp, #12
 8005afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005b04:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	f43f aec3 	beq.w	8005894 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005b1a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005b1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b22:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005b24:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b28:	07da      	lsls	r2, r3, #31
 8005b2a:	f57f aeb3 	bpl.w	8005894 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 8005b2e:	f7fe fdbf 	bl	80046b0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b32:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005b36:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b3a:	079b      	lsls	r3, r3, #30
 8005b3c:	f53f aeaa 	bmi.w	8005894 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b40:	f7fe fdb6 	bl	80046b0 <HAL_GetTick>
 8005b44:	eba0 0008 	sub.w	r0, r0, r8
 8005b48:	4548      	cmp	r0, r9
 8005b4a:	d9f5      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8005b4c:	e7d5      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b4e:	6891      	ldr	r1, [r2, #8]
 8005b50:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005b54:	e6ae      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 8005b56:	4e38      	ldr	r6, [pc, #224]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005b58:	6833      	ldr	r3, [r6, #0]
 8005b5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b5e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005b60:	f7fe fda6 	bl	80046b0 <HAL_GetTick>
 8005b64:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b66:	6833      	ldr	r3, [r6, #0]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	d451      	bmi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b6c:	6822      	ldr	r2, [r4, #0]
 8005b6e:	07d7      	lsls	r7, r2, #31
 8005b70:	d50d      	bpl.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005b72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b74:	b95b      	cbnz	r3, 8005b8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b76:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b7a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8005b7e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005b82:	071b      	lsls	r3, r3, #28
 8005b84:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b8e:	0310      	lsls	r0, r2, #12
 8005b90:	d503      	bpl.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b98:	d005      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8005b9a:	02d1      	lsls	r1, r2, #11
 8005b9c:	d519      	bpl.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ba4:	d115      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ba6:	4924      	ldr	r1, [pc, #144]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005ba8:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005baa:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005bae:	6866      	ldr	r6, [r4, #4]
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005bb6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005bba:	4303      	orrs	r3, r0
 8005bbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bc0:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005bc4:	69e3      	ldr	r3, [r4, #28]
 8005bc6:	f020 001f 	bic.w	r0, r0, #31
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	4303      	orrs	r3, r0
 8005bce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bd2:	0192      	lsls	r2, r2, #6
 8005bd4:	d50a      	bpl.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bd6:	68e3      	ldr	r3, [r4, #12]
 8005bd8:	6862      	ldr	r2, [r4, #4]
 8005bda:	061b      	lsls	r3, r3, #24
 8005bdc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005be0:	68a2      	ldr	r2, [r4, #8]
 8005be2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005be6:	4a14      	ldr	r2, [pc, #80]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005be8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005bec:	4e12      	ldr	r6, [pc, #72]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005bee:	6833      	ldr	r3, [r6, #0]
 8005bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bf4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005bf6:	f7fe fd5b 	bl	80046b0 <HAL_GetTick>
 8005bfa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	f53f af1e 	bmi.w	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c04:	f7fe fd54 	bl	80046b0 <HAL_GetTick>
 8005c08:	1bc0      	subs	r0, r0, r7
 8005c0a:	2864      	cmp	r0, #100	; 0x64
 8005c0c:	d9f6      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c0e:	e774      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c10:	f7fe fd4e 	bl	80046b0 <HAL_GetTick>
 8005c14:	1bc0      	subs	r0, r0, r7
 8005c16:	2864      	cmp	r0, #100	; 0x64
 8005c18:	d9a5      	bls.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005c1a:	e76e      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c1c:	f7fe fd48 	bl	80046b0 <HAL_GetTick>
 8005c20:	1b80      	subs	r0, r0, r6
 8005c22:	2864      	cmp	r0, #100	; 0x64
 8005c24:	f67f af16 	bls.w	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005c28:	e767      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c2a:	f7fe fd41 	bl	80046b0 <HAL_GetTick>
 8005c2e:	1b40      	subs	r0, r0, r5
 8005c30:	2864      	cmp	r0, #100	; 0x64
 8005c32:	f67f af53 	bls.w	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005c36:	e760      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8005c38:	40023800 	.word	0x40023800

08005c3c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3c:	6a03      	ldr	r3, [r0, #32]
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
{
 8005c42:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c44:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c4c:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8005c50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c52:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8005c56:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005c5a:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c5c:	688d      	ldr	r5, [r1, #8]
 8005c5e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c60:	4d0e      	ldr	r5, [pc, #56]	; (8005c9c <TIM_OC1_SetConfig+0x60>)
 8005c62:	42a8      	cmp	r0, r5
 8005c64:	d002      	beq.n	8005c6c <TIM_OC1_SetConfig+0x30>
 8005c66:	4e0e      	ldr	r6, [pc, #56]	; (8005ca0 <TIM_OC1_SetConfig+0x64>)
 8005c68:	42b0      	cmp	r0, r6
 8005c6a:	d111      	bne.n	8005c90 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c6c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c70:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c72:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8005c74:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c78:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7c:	d002      	beq.n	8005c84 <TIM_OC1_SetConfig+0x48>
 8005c7e:	4d08      	ldr	r5, [pc, #32]	; (8005ca0 <TIM_OC1_SetConfig+0x64>)
 8005c80:	42a8      	cmp	r0, r5
 8005c82:	d105      	bne.n	8005c90 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c88:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005c8c:	4335      	orrs	r5, r6
 8005c8e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c90:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c92:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c94:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005c96:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c98:	6203      	str	r3, [r0, #32]
}
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40010400 	.word	0x40010400

08005ca4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ca4:	6a03      	ldr	r3, [r0, #32]
 8005ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8005caa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8005cb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8005cbe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005cc2:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cc4:	688d      	ldr	r5, [r1, #8]
 8005cc6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cca:	4d11      	ldr	r5, [pc, #68]	; (8005d10 <TIM_OC3_SetConfig+0x6c>)
 8005ccc:	42a8      	cmp	r0, r5
 8005cce:	d003      	beq.n	8005cd8 <TIM_OC3_SetConfig+0x34>
 8005cd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cd4:	42a8      	cmp	r0, r5
 8005cd6:	d114      	bne.n	8005d02 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cde:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce2:	4d0b      	ldr	r5, [pc, #44]	; (8005d10 <TIM_OC3_SetConfig+0x6c>)
 8005ce4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC3_SetConfig+0x50>
 8005cec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cf0:	42a8      	cmp	r0, r5
 8005cf2:	d106      	bne.n	8005d02 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cf4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005cfc:	4335      	orrs	r5, r6
 8005cfe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d04:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005d06:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005d08:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	6203      	str	r3, [r0, #32]
}
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000

08005d14 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d14:	6a03      	ldr	r3, [r0, #32]
 8005d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8005d1a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d22:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d2e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d36:	688d      	ldr	r5, [r1, #8]
 8005d38:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	4d08      	ldr	r5, [pc, #32]	; (8005d60 <TIM_OC4_SetConfig+0x4c>)
 8005d3e:	42a8      	cmp	r0, r5
 8005d40:	d003      	beq.n	8005d4a <TIM_OC4_SetConfig+0x36>
 8005d42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d46:	42a8      	cmp	r0, r5
 8005d48:	d104      	bne.n	8005d54 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d4a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d4e:	694d      	ldr	r5, [r1, #20]
 8005d50:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d54:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d56:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d58:	684b      	ldr	r3, [r1, #4]
 8005d5a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5c:	6202      	str	r2, [r0, #32]
}
 8005d5e:	bd30      	pop	{r4, r5, pc}
 8005d60:	40010000 	.word	0x40010000

08005d64 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d64:	6a03      	ldr	r3, [r0, #32]
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8005d6a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d72:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d74:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8005d78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005d82:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d84:	688d      	ldr	r5, [r1, #8]
 8005d86:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8a:	4d09      	ldr	r5, [pc, #36]	; (8005db0 <TIM_OC5_SetConfig+0x4c>)
 8005d8c:	42a8      	cmp	r0, r5
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC5_SetConfig+0x34>
 8005d90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d94:	42a8      	cmp	r0, r5
 8005d96:	d104      	bne.n	8005da2 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d98:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d9c:	694d      	ldr	r5, [r1, #20]
 8005d9e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da4:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005da6:	684b      	ldr	r3, [r1, #4]
 8005da8:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005daa:	6202      	str	r2, [r0, #32]
}
 8005dac:	bd30      	pop	{r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000

08005db4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005db4:	6a03      	ldr	r3, [r0, #32]
 8005db6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8005dba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dbc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dc2:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dc4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dd6:	688d      	ldr	r5, [r1, #8]
 8005dd8:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ddc:	4d08      	ldr	r5, [pc, #32]	; (8005e00 <TIM_OC6_SetConfig+0x4c>)
 8005dde:	42a8      	cmp	r0, r5
 8005de0:	d003      	beq.n	8005dea <TIM_OC6_SetConfig+0x36>
 8005de2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005de6:	42a8      	cmp	r0, r5
 8005de8:	d104      	bne.n	8005df4 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dea:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dee:	694d      	ldr	r5, [r1, #20]
 8005df0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005df8:	684b      	ldr	r3, [r1, #4]
 8005dfa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	6202      	str	r2, [r0, #32]
}
 8005dfe:	bd30      	pop	{r4, r5, pc}
 8005e00:	40010000 	.word	0x40010000

08005e04 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e06:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0c:	4b08      	ldr	r3, [pc, #32]	; (8005e30 <HAL_TIM_Base_Start+0x2c>)
 8005e0e:	6891      	ldr	r1, [r2, #8]
 8005e10:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	2b06      	cmp	r3, #6
 8005e14:	d006      	beq.n	8005e24 <HAL_TIM_Base_Start+0x20>
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d003      	beq.n	8005e24 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8005e1c:	6813      	ldr	r3, [r2, #0]
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	00010007 	.word	0x00010007

08005e34 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e34:	6803      	ldr	r3, [r0, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e3e:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <HAL_TIM_Base_Start_IT+0x28>)
 8005e40:	6899      	ldr	r1, [r3, #8]
 8005e42:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	2a06      	cmp	r2, #6
 8005e46:	d006      	beq.n	8005e56 <HAL_TIM_Base_Start_IT+0x22>
 8005e48:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
}
 8005e56:	2000      	movs	r0, #0
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	00010007 	.word	0x00010007

08005e60 <HAL_TIM_OnePulse_MspInit>:
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIM_OC_DelayElapsedCallback>:
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIM_IC_CaptureCallback>:
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_TriggerCallback>:
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e6a:	6803      	ldr	r3, [r0, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	0791      	lsls	r1, r2, #30
{
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e74:	d50f      	bpl.n	8005e96 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	0792      	lsls	r2, r2, #30
 8005e7a:	d50c      	bpl.n	8005e96 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e7c:	f06f 0202 	mvn.w	r2, #2
 8005e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e82:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e84:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e86:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e88:	0799      	lsls	r1, r3, #30
 8005e8a:	f000 8085 	beq.w	8005f98 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	f7ff ffe9 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	2300      	movs	r3, #0
 8005e94:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	0752      	lsls	r2, r2, #29
 8005e9c:	d510      	bpl.n	8005ec0 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	0750      	lsls	r0, r2, #29
 8005ea2:	d50d      	bpl.n	8005ec0 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ea4:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eac:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eae:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eb0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eb2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005eb6:	d075      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb8:	f7ff ffd4 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	0711      	lsls	r1, r2, #28
 8005ec6:	d50f      	bpl.n	8005ee8 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	0712      	lsls	r2, r2, #28
 8005ecc:	d50c      	bpl.n	8005ee8 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ece:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed6:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eda:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005edc:	079b      	lsls	r3, r3, #30
 8005ede:	d067      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee0:	f7ff ffc0 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	06d0      	lsls	r0, r2, #27
 8005eee:	d510      	bpl.n	8005f12 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	06d1      	lsls	r1, r2, #27
 8005ef4:	d50d      	bpl.n	8005f12 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ef6:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005efe:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f00:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f02:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f04:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005f08:	d058      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0a:	f7ff ffab 	bl	8005e64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	07d2      	lsls	r2, r2, #31
 8005f18:	d508      	bpl.n	8005f2c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	07d0      	lsls	r0, r2, #31
 8005f1e:	d505      	bpl.n	8005f2c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f20:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f28:	f7fc f93e 	bl	80021a8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	0611      	lsls	r1, r2, #24
 8005f32:	d508      	bpl.n	8005f46 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	0612      	lsls	r2, r2, #24
 8005f38:	d505      	bpl.n	8005f46 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005f3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005f42:	f000 fae0 	bl	8006506 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	05d0      	lsls	r0, r2, #23
 8005f4c:	d508      	bpl.n	8005f60 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	0611      	lsls	r1, r2, #24
 8005f52:	d505      	bpl.n	8005f60 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f54:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005f58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005f5c:	f000 fad4 	bl	8006508 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	0652      	lsls	r2, r2, #25
 8005f66:	d508      	bpl.n	8005f7a <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	0650      	lsls	r0, r2, #25
 8005f6c:	d505      	bpl.n	8005f7a <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8005f72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005f76:	f7ff ff77 	bl	8005e68 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	0691      	lsls	r1, r2, #26
 8005f80:	d522      	bpl.n	8005fc8 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	0692      	lsls	r2, r2, #26
 8005f86:	d51f      	bpl.n	8005fc8 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f88:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005f8c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f8e:	611a      	str	r2, [r3, #16]
}
 8005f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005f94:	f000 bab6 	b.w	8006504 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f98:	f7ff ff63 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff ff62 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fa2:	e776      	b.n	8005e92 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa4:	f7ff ff5d 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff ff5c 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fae:	e785      	b.n	8005ebc <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb0:	f7ff ff57 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7ff ff56 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fba:	e793      	b.n	8005ee4 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbc:	f7ff ff51 	bl	8005e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f7ff ff50 	bl	8005e66 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fc6:	e7a2      	b.n	8005f0e <HAL_TIM_IRQHandler+0xa4>
}
 8005fc8:	bd10      	pop	{r4, pc}
	...

08005fcc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	4a30      	ldr	r2, [pc, #192]	; (8006090 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005fce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	4290      	cmp	r0, r2
 8005fd2:	d012      	beq.n	8005ffa <TIM_Base_SetConfig+0x2e>
 8005fd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005fd8:	d00f      	beq.n	8005ffa <TIM_Base_SetConfig+0x2e>
 8005fda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005fde:	4290      	cmp	r0, r2
 8005fe0:	d00b      	beq.n	8005ffa <TIM_Base_SetConfig+0x2e>
 8005fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fe6:	4290      	cmp	r0, r2
 8005fe8:	d007      	beq.n	8005ffa <TIM_Base_SetConfig+0x2e>
 8005fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fee:	4290      	cmp	r0, r2
 8005ff0:	d003      	beq.n	8005ffa <TIM_Base_SetConfig+0x2e>
 8005ff2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005ff6:	4290      	cmp	r0, r2
 8005ff8:	d119      	bne.n	800602e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005ffa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006000:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006002:	4a23      	ldr	r2, [pc, #140]	; (8006090 <TIM_Base_SetConfig+0xc4>)
 8006004:	4290      	cmp	r0, r2
 8006006:	d029      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 8006008:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800600c:	d026      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 800600e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006012:	4290      	cmp	r0, r2
 8006014:	d022      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 8006016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800601a:	4290      	cmp	r0, r2
 800601c:	d01e      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 800601e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006022:	4290      	cmp	r0, r2
 8006024:	d01a      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 8006026:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800602a:	4290      	cmp	r0, r2
 800602c:	d016      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 800602e:	4a19      	ldr	r2, [pc, #100]	; (8006094 <TIM_Base_SetConfig+0xc8>)
 8006030:	4290      	cmp	r0, r2
 8006032:	d013      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 8006034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006038:	4290      	cmp	r0, r2
 800603a:	d00f      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 800603c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006040:	4290      	cmp	r0, r2
 8006042:	d00b      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 8006044:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006048:	4290      	cmp	r0, r2
 800604a:	d007      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 800604c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006050:	4290      	cmp	r0, r2
 8006052:	d003      	beq.n	800605c <TIM_Base_SetConfig+0x90>
 8006054:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006058:	4290      	cmp	r0, r2
 800605a:	d103      	bne.n	8006064 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006060:	68ca      	ldr	r2, [r1, #12]
 8006062:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006064:	694a      	ldr	r2, [r1, #20]
 8006066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800606c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606e:	688b      	ldr	r3, [r1, #8]
 8006070:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006072:	680b      	ldr	r3, [r1, #0]
 8006074:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006076:	4b06      	ldr	r3, [pc, #24]	; (8006090 <TIM_Base_SetConfig+0xc4>)
 8006078:	4298      	cmp	r0, r3
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0xb8>
 800607c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006080:	4298      	cmp	r0, r3
 8006082:	d101      	bne.n	8006088 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006084:	690b      	ldr	r3, [r1, #16]
 8006086:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006088:	2301      	movs	r3, #1
 800608a:	6143      	str	r3, [r0, #20]
}
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40010000 	.word	0x40010000
 8006094:	40014000 	.word	0x40014000

08006098 <HAL_TIM_Base_Init>:
{
 8006098:	b510      	push	{r4, lr}
  if (htim == NULL)
 800609a:	4604      	mov	r4, r0
 800609c:	b1a0      	cbz	r0, 80060c8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800609e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060a6:	b91b      	cbnz	r3, 80060b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80060a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80060ac:	f7fc fd58 	bl	8002b60 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b2:	6820      	ldr	r0, [r4, #0]
 80060b4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80060b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ba:	f7ff ff87 	bl	8005fcc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80060be:	2301      	movs	r3, #1
  return HAL_OK;
 80060c0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80060c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060c8:	2001      	movs	r0, #1
 80060ca:	e7fc      	b.n	80060c6 <HAL_TIM_Base_Init+0x2e>

080060cc <HAL_TIM_PWM_Init>:
{
 80060cc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060ce:	4604      	mov	r4, r0
 80060d0:	b1a0      	cbz	r0, 80060fc <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060da:	b91b      	cbnz	r3, 80060e4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80060dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80060e0:	f7fc fd20 	bl	8002b24 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e6:	6820      	ldr	r0, [r4, #0]
 80060e8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80060ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ee:	f7ff ff6d 	bl	8005fcc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80060f2:	2301      	movs	r3, #1
  return HAL_OK;
 80060f4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80060fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060fc:	2001      	movs	r0, #1
 80060fe:	e7fc      	b.n	80060fa <HAL_TIM_PWM_Init+0x2e>

08006100 <HAL_TIM_OnePulse_Init>:
{
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	460d      	mov	r5, r1
  if (htim == NULL)
 8006104:	4604      	mov	r4, r0
 8006106:	b1e0      	cbz	r0, 8006142 <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006108:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800610c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006110:	b91b      	cbnz	r3, 800611a <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 8006112:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8006116:	f7ff fea3 	bl	8005e60 <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800611a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611c:	1d21      	adds	r1, r4, #4
 800611e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006124:	f7ff ff52 	bl	8005fcc <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006128:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800612a:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	f022 0208 	bic.w	r2, r2, #8
 8006132:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	4329      	orrs	r1, r5
 8006138:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800613a:	2301      	movs	r3, #1
 800613c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006140:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006142:	2001      	movs	r0, #1
 8006144:	e7fc      	b.n	8006140 <HAL_TIM_OnePulse_Init+0x40>
	...

08006148 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006148:	6a03      	ldr	r3, [r0, #32]
 800614a:	f023 0310 	bic.w	r3, r3, #16
{
 800614e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006150:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006152:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006154:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006156:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8006158:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800615e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006162:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006166:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800616a:	688d      	ldr	r5, [r1, #8]
 800616c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006170:	4d10      	ldr	r5, [pc, #64]	; (80061b4 <TIM_OC2_SetConfig+0x6c>)
 8006172:	42a8      	cmp	r0, r5
 8006174:	d003      	beq.n	800617e <TIM_OC2_SetConfig+0x36>
 8006176:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800617a:	42a8      	cmp	r0, r5
 800617c:	d114      	bne.n	80061a8 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800617e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006184:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006188:	4d0a      	ldr	r5, [pc, #40]	; (80061b4 <TIM_OC2_SetConfig+0x6c>)
 800618a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800618c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006190:	d003      	beq.n	800619a <TIM_OC2_SetConfig+0x52>
 8006192:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006196:	42a8      	cmp	r0, r5
 8006198:	d106      	bne.n	80061a8 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800619a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800619e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80061a2:	4335      	orrs	r5, r6
 80061a4:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80061a8:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80061aa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80061ac:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80061ae:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80061b0:	6203      	str	r3, [r0, #32]
}
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
 80061b4:	40010000 	.word	0x40010000

080061b8 <HAL_TIM_PWM_ConfigChannel>:
{
 80061b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80061ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80061be:	4604      	mov	r4, r0
 80061c0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d010      	beq.n	80061e8 <HAL_TIM_PWM_ConfigChannel+0x30>
 80061c6:	2301      	movs	r3, #1
  switch (Channel)
 80061c8:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 80061ca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80061ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80061d2:	d043      	beq.n	800625c <HAL_TIM_PWM_ConfigChannel+0xa4>
 80061d4:	d809      	bhi.n	80061ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80061d6:	b1fa      	cbz	r2, 8006218 <HAL_TIM_PWM_ConfigChannel+0x60>
 80061d8:	2a04      	cmp	r2, #4
 80061da:	d02e      	beq.n	800623a <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80061de:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80061e8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80061ea:	2a10      	cmp	r2, #16
 80061ec:	d047      	beq.n	800627e <HAL_TIM_PWM_ConfigChannel+0xc6>
 80061ee:	2a14      	cmp	r2, #20
 80061f0:	d056      	beq.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0xe8>
 80061f2:	2a0c      	cmp	r2, #12
 80061f4:	d1f2      	bne.n	80061dc <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f6:	6820      	ldr	r0, [r4, #0]
 80061f8:	f7ff fd8c 	bl	8005d14 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006200:	69da      	ldr	r2, [r3, #28]
 8006202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006206:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006216:	e030      	b.n	800627a <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	f7ff fd0f 	bl	8005c3c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800621e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006220:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	f042 0208 	orr.w	r2, r2, #8
 8006228:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	f022 0204 	bic.w	r2, r2, #4
 8006230:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006232:	699a      	ldr	r2, [r3, #24]
 8006234:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006236:	619a      	str	r2, [r3, #24]
      break;
 8006238:	e7d0      	b.n	80061dc <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800623a:	6820      	ldr	r0, [r4, #0]
 800623c:	f7ff ff84 	bl	8006148 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006240:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006242:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800625a:	e7ec      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	f7ff fd21 	bl	8005ca4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006262:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006264:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	f042 0208 	orr.w	r2, r2, #8
 800626c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	f022 0204 	bic.w	r2, r2, #4
 8006274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627a:	61da      	str	r2, [r3, #28]
      break;
 800627c:	e7ae      	b.n	80061dc <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	f7ff fd70 	bl	8005d64 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006284:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006286:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800628a:	f042 0208 	orr.w	r2, r2, #8
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006292:	f022 0204 	bic.w	r2, r2, #4
 8006296:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800629a:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800629c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800629e:	e79d      	b.n	80061dc <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062a0:	6820      	ldr	r0, [r4, #0]
 80062a2:	f7ff fd87 	bl	8005db4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062c0:	e7ec      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0xe4>

080062c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c2:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c4:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80062c6:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062cc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d0:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d2:	6083      	str	r3, [r0, #8]
}
 80062d4:	bd10      	pop	{r4, pc}
	...

080062d8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80062d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80062dc:	2b01      	cmp	r3, #1
{
 80062de:	b570      	push	{r4, r5, r6, lr}
 80062e0:	4604      	mov	r4, r0
 80062e2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80062e6:	d017      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80062ec:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80062ee:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80062f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80062f4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f6:	4b41      	ldr	r3, [pc, #260]	; (80063fc <HAL_TIM_ConfigClockSource+0x124>)
 80062f8:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80062fa:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80062fc:	680b      	ldr	r3, [r1, #0]
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d065      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0xf6>
 8006302:	d815      	bhi.n	8006330 <HAL_TIM_ConfigClockSource+0x58>
 8006304:	2b10      	cmp	r3, #16
 8006306:	d00c      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x4a>
 8006308:	d807      	bhi.n	800631a <HAL_TIM_ConfigClockSource+0x42>
 800630a:	b153      	cbz	r3, 8006322 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 800630c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800630e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006310:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006314:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006318:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800631a:	2b20      	cmp	r3, #32
 800631c:	d001      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x4a>
 800631e:	2b30      	cmp	r3, #48	; 0x30
 8006320:	d1f4      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8006322:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006324:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006328:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632c:	4313      	orrs	r3, r2
 800632e:	e01a      	b.n	8006366 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8006330:	2b60      	cmp	r3, #96	; 0x60
 8006332:	d034      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xc6>
 8006334:	d819      	bhi.n	800636a <HAL_TIM_ConfigClockSource+0x92>
 8006336:	2b50      	cmp	r3, #80	; 0x50
 8006338:	d1e8      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	684a      	ldr	r2, [r1, #4]
 800633c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800633e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006340:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006342:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006346:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800634a:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006354:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006358:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800635a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800635c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006362:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006366:	6083      	str	r3, [r0, #8]
 8006368:	e7d0      	b.n	800630c <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 800636a:	2b70      	cmp	r3, #112	; 0x70
 800636c:	d00c      	beq.n	8006388 <HAL_TIM_ConfigClockSource+0xb0>
 800636e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006372:	d1cb      	bne.n	800630c <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006374:	68cb      	ldr	r3, [r1, #12]
 8006376:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800637a:	f7ff ffa2 	bl	80062c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800637e:	6822      	ldr	r2, [r4, #0]
 8006380:	6893      	ldr	r3, [r2, #8]
 8006382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006386:	e008      	b.n	800639a <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8006388:	68cb      	ldr	r3, [r1, #12]
 800638a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800638e:	f7ff ff98 	bl	80062c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006396:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800639a:	6093      	str	r3, [r2, #8]
      break;
 800639c:	e7b6      	b.n	800630c <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639e:	684d      	ldr	r5, [r1, #4]
 80063a0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a2:	6a01      	ldr	r1, [r0, #32]
 80063a4:	f021 0110 	bic.w	r1, r1, #16
 80063a8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063aa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80063ac:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ae:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80063be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80063c0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80063c2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063c8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80063cc:	e7cb      	b.n	8006366 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	684a      	ldr	r2, [r1, #4]
 80063d0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80063d2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063da:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80063de:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063e2:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063e8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80063ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80063ee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80063f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80063fa:	e7b4      	b.n	8006366 <HAL_TIM_ConfigClockSource+0x8e>
 80063fc:	fffe0088 	.word	0xfffe0088

08006400 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006400:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006404:	6a03      	ldr	r3, [r0, #32]
{
 8006406:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006408:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800640a:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800640c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800640e:	ea23 0304 	bic.w	r3, r3, r4
 8006412:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006414:	6a03      	ldr	r3, [r0, #32]
 8006416:	431a      	orrs	r2, r3
 8006418:	6202      	str	r2, [r0, #32]
}
 800641a:	bd10      	pop	{r4, pc}

0800641c <HAL_TIM_OC_Start>:
{
 800641c:	b510      	push	{r4, lr}
 800641e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006420:	2201      	movs	r2, #1
 8006422:	6800      	ldr	r0, [r0, #0]
 8006424:	f7ff ffec 	bl	8006400 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	4a0c      	ldr	r2, [pc, #48]	; (800645c <HAL_TIM_OC_Start+0x40>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <HAL_TIM_OC_Start+0x1c>
 8006430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006434:	4293      	cmp	r3, r2
 8006436:	d103      	bne.n	8006440 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8006438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006440:	6899      	ldr	r1, [r3, #8]
 8006442:	4a07      	ldr	r2, [pc, #28]	; (8006460 <HAL_TIM_OC_Start+0x44>)
 8006444:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	2a06      	cmp	r2, #6
 8006448:	d006      	beq.n	8006458 <HAL_TIM_OC_Start+0x3c>
 800644a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800644e:	d003      	beq.n	8006458 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
}
 8006458:	2000      	movs	r0, #0
 800645a:	bd10      	pop	{r4, pc}
 800645c:	40010000 	.word	0x40010000
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIM_PWM_Start>:
 8006464:	f7ff bfda 	b.w	800641c <HAL_TIM_OC_Start>

08006468 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006468:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	f04f 0302 	mov.w	r3, #2
{
 8006472:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006474:	d03e      	beq.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006476:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800647a:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800647c:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800647e:	4d1e      	ldr	r5, [pc, #120]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 8006480:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006484:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006486:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006488:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800648a:	d002      	beq.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 800648c:	4e1b      	ldr	r6, [pc, #108]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800648e:	42b3      	cmp	r3, r6
 8006490:	d103      	bne.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006496:	684e      	ldr	r6, [r1, #4]
 8006498:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800649a:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800649c:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a0:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a2:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 80064a6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a8:	d019      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80064aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ae:	d016      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80064b0:	4a13      	ldr	r2, [pc, #76]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80064b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00f      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80064be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00b      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80064c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d007      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80064ce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80064d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80064da:	4293      	cmp	r3, r2
 80064dc:	d104      	bne.n	80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064de:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064e0:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	2301      	movs	r3, #1
 80064ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ee:	2300      	movs	r3, #0
 80064f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80064f4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40010400 	.word	0x40010400
 8006500:	40000400 	.word	0x40000400

08006504 <HAL_TIMEx_CommutCallback>:
 8006504:	4770      	bx	lr

08006506 <HAL_TIMEx_BreakCallback>:
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_Break2Callback>:
 8006508:	4770      	bx	lr

0800650a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800650a:	6803      	ldr	r3, [r0, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006512:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	f022 0201 	bic.w	r2, r2, #1
 800651a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800651c:	2320      	movs	r3, #32
 800651e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006520:	2300      	movs	r3, #0
 8006522:	6603      	str	r3, [r0, #96]	; 0x60
}
 8006524:	4770      	bx	lr
	...

08006528 <HAL_UART_Transmit_DMA>:
{
 8006528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652a:	4604      	mov	r4, r0
 800652c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800652e:	6f67      	ldr	r7, [r4, #116]	; 0x74
 8006530:	2f20      	cmp	r7, #32
 8006532:	d136      	bne.n	80065a2 <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 8006534:	b341      	cbz	r1, 8006588 <HAL_UART_Transmit_DMA+0x60>
 8006536:	b33a      	cbz	r2, 8006588 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8006538:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800653c:	2a01      	cmp	r2, #1
 800653e:	d030      	beq.n	80065a2 <HAL_UART_Transmit_DMA+0x7a>
 8006540:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006542:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006544:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8006546:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 8006548:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 800654c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8006552:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006554:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006558:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800655a:	b1b8      	cbz	r0, 800658c <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800655c:	f8df c048 	ldr.w	ip, [pc, #72]	; 80065a8 <HAL_UART_Transmit_DMA+0x80>
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006566:	f8df c044 	ldr.w	ip, [pc, #68]	; 80065ac <HAL_UART_Transmit_DMA+0x84>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800656a:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800656c:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006570:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80065b0 <HAL_UART_Transmit_DMA+0x88>
      huart->hdmatx->XferAbortCallback = NULL;
 8006574:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006578:	f7fe fc62 	bl	8004e40 <HAL_DMA_Start_IT>
 800657c:	b130      	cbz	r0, 800658c <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800657e:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8006580:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006584:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006586:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 8006588:	2001      	movs	r0, #1
 800658a:	e009      	b.n	80065a0 <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8006590:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006592:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006594:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8006596:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800659a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800659e:	609a      	str	r2, [r3, #8]
}
 80065a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80065a2:	2002      	movs	r0, #2
 80065a4:	e7fc      	b.n	80065a0 <HAL_UART_Transmit_DMA+0x78>
 80065a6:	bf00      	nop
 80065a8:	08006645 	.word	0x08006645
 80065ac:	08006675 	.word	0x08006675
 80065b0:	080066c5 	.word	0x080066c5

080065b4 <HAL_UART_Receive_DMA>:
{
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b6:	6f87      	ldr	r7, [r0, #120]	; 0x78
{
 80065b8:	4604      	mov	r4, r0
 80065ba:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80065bc:	2f20      	cmp	r7, #32
 80065be:	d138      	bne.n	8006632 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 80065c0:	b321      	cbz	r1, 800660c <HAL_UART_Receive_DMA+0x58>
 80065c2:	b31a      	cbz	r2, 800660c <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 80065c4:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 80065c8:	2a01      	cmp	r2, #1
 80065ca:	d032      	beq.n	8006632 <HAL_UART_Receive_DMA+0x7e>
 80065cc:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ce:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065d0:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 80065d2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d4:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 80065d6:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    huart->RxXferSize = Size;
 80065da:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065de:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 80065e0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80065e2:	b1a8      	cbz	r0, 8006610 <HAL_UART_Receive_DMA+0x5c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065e4:	4a14      	ldr	r2, [pc, #80]	; (8006638 <HAL_UART_Receive_DMA+0x84>)
 80065e6:	f8d4 c000 	ldr.w	ip, [r4]
 80065ea:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065ec:	4a13      	ldr	r2, [pc, #76]	; (800663c <HAL_UART_Receive_DMA+0x88>)
 80065ee:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <HAL_UART_Receive_DMA+0x8c>)
      huart->hdmarx->XferAbortCallback = NULL;
 80065f2:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80065f6:	460a      	mov	r2, r1
 80065f8:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 80065fc:	f7fe fc20 	bl	8004e40 <HAL_DMA_Start_IT>
 8006600:	b130      	cbz	r0, 8006610 <HAL_UART_Receive_DMA+0x5c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006602:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8006604:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006608:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800660a:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 800660c:	2001      	movs	r0, #1
 800660e:	e00f      	b.n	8006630 <HAL_UART_Receive_DMA+0x7c>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006610:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8006612:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006614:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8006616:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800661a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006632:	2002      	movs	r0, #2
 8006634:	e7fc      	b.n	8006630 <HAL_UART_Receive_DMA+0x7c>
 8006636:	bf00      	nop
 8006638:	08006681 	.word	0x08006681
 800663c:	080066bb 	.word	0x080066bb
 8006640:	080066c5 	.word	0x080066c5

08006644 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006644:	69c2      	ldr	r2, [r0, #28]
 8006646:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 800664a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800664c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800664e:	d00c      	beq.n	800666a <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8006650:	2200      	movs	r2, #0
 8006652:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689a      	ldr	r2, [r3, #8]
 800665a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800665e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006666:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006668:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800666a:	4618      	mov	r0, r3
 800666c:	f7fb fdac 	bl	80021c8 <HAL_UART_TxCpltCallback>
}
 8006670:	e7fa      	b.n	8006668 <UART_DMATransmitCplt+0x24>

08006672 <HAL_UART_TxHalfCpltCallback>:
 8006672:	4770      	bx	lr

08006674 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006674:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006676:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006678:	f7ff fffb 	bl	8006672 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667c:	bd08      	pop	{r3, pc}

0800667e <HAL_UART_RxCpltCallback>:
 800667e:	4770      	bx	lr

08006680 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006680:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006682:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006684:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668a:	d011      	beq.n	80066b0 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	6819      	ldr	r1, [r3, #0]
 8006696:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800669a:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669c:	6899      	ldr	r1, [r3, #8]
 800669e:	f021 0101 	bic.w	r1, r1, #1
 80066a2:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a4:	6899      	ldr	r1, [r3, #8]
 80066a6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80066aa:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066ac:	2320      	movs	r3, #32
 80066ae:	6793      	str	r3, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7ff ffe4 	bl	800667e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b6:	bd08      	pop	{r3, pc}

080066b8 <HAL_UART_RxHalfCpltCallback>:
 80066b8:	4770      	bx	lr

080066ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066ba:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80066bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80066be:	f7ff fffb 	bl	80066b8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c2:	bd08      	pop	{r3, pc}

080066c4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c4:	6b81      	ldr	r1, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066c6:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066c8:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066ca:	6f88      	ldr	r0, [r1, #120]	; 0x78
{
 80066cc:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066ce:	689c      	ldr	r4, [r3, #8]
 80066d0:	0624      	lsls	r4, r4, #24
 80066d2:	d50a      	bpl.n	80066ea <UART_DMAError+0x26>
 80066d4:	2a21      	cmp	r2, #33	; 0x21
 80066d6:	d108      	bne.n	80066ea <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80066d8:	2200      	movs	r2, #0
 80066da:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80066e4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	2220      	movs	r2, #32
 80066e8:	674a      	str	r2, [r1, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	065b      	lsls	r3, r3, #25
 80066ee:	d507      	bpl.n	8006700 <UART_DMAError+0x3c>
 80066f0:	2822      	cmp	r0, #34	; 0x22
 80066f2:	d105      	bne.n	8006700 <UART_DMAError+0x3c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80066f4:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 80066f6:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 80066f8:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80066fc:	f7ff ff05 	bl	800650a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006700:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006702:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006704:	f043 0310 	orr.w	r3, r3, #16
 8006708:	67cb      	str	r3, [r1, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800670a:	f7fb fd68 	bl	80021de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670e:	bd10      	pop	{r4, pc}

08006710 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006710:	6803      	ldr	r3, [r0, #0]
{
 8006712:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006714:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8006716:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800671a:	6819      	ldr	r1, [r3, #0]
{
 800671c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800671e:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006720:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8006722:	d109      	bne.n	8006738 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006724:	0696      	lsls	r6, r2, #26
 8006726:	d56e      	bpl.n	8006806 <HAL_UART_IRQHandler+0xf6>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006728:	068d      	lsls	r5, r1, #26
 800672a:	d56c      	bpl.n	8006806 <HAL_UART_IRQHandler+0xf6>
      if (huart->RxISR != NULL)
 800672c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800672e:	2b00      	cmp	r3, #0
 8006730:	d064      	beq.n	80067fc <HAL_UART_IRQHandler+0xec>
}
 8006732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006736:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006738:	f015 0001 	ands.w	r0, r5, #1
 800673c:	d102      	bne.n	8006744 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800673e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006742:	d060      	beq.n	8006806 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006744:	07d6      	lsls	r6, r2, #31
 8006746:	d507      	bpl.n	8006758 <HAL_UART_IRQHandler+0x48>
 8006748:	05cd      	lsls	r5, r1, #23
 800674a:	d505      	bpl.n	8006758 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800674c:	2501      	movs	r5, #1
 800674e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006750:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8006752:	f045 0501 	orr.w	r5, r5, #1
 8006756:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006758:	0796      	lsls	r6, r2, #30
 800675a:	d506      	bpl.n	800676a <HAL_UART_IRQHandler+0x5a>
 800675c:	b128      	cbz	r0, 800676a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800675e:	2502      	movs	r5, #2
 8006760:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006762:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8006764:	f045 0504 	orr.w	r5, r5, #4
 8006768:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800676a:	0755      	lsls	r5, r2, #29
 800676c:	d506      	bpl.n	800677c <HAL_UART_IRQHandler+0x6c>
 800676e:	b128      	cbz	r0, 800677c <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006770:	2504      	movs	r5, #4
 8006772:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006774:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8006776:	f045 0502 	orr.w	r5, r5, #2
 800677a:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800677c:	0716      	lsls	r6, r2, #28
 800677e:	d508      	bpl.n	8006792 <HAL_UART_IRQHandler+0x82>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006780:	068d      	lsls	r5, r1, #26
 8006782:	d400      	bmi.n	8006786 <HAL_UART_IRQHandler+0x76>
 8006784:	b128      	cbz	r0, 8006792 <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006786:	2008      	movs	r0, #8
 8006788:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800678a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800678c:	f040 0008 	orr.w	r0, r0, #8
 8006790:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006792:	0510      	lsls	r0, r2, #20
 8006794:	d508      	bpl.n	80067a8 <HAL_UART_IRQHandler+0x98>
 8006796:	014e      	lsls	r6, r1, #5
 8006798:	d506      	bpl.n	80067a8 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800679a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800679e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80067a2:	f043 0320 	orr.w	r3, r3, #32
 80067a6:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067a8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80067aa:	b33b      	cbz	r3, 80067fc <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067ac:	0695      	lsls	r5, r2, #26
 80067ae:	d505      	bpl.n	80067bc <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067b0:	0688      	lsls	r0, r1, #26
 80067b2:	d503      	bpl.n	80067bc <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 80067b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80067b6:	b10b      	cbz	r3, 80067bc <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 80067b8:	4620      	mov	r0, r4
 80067ba:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067bc:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 80067be:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 80067c0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067c2:	6892      	ldr	r2, [r2, #8]
 80067c4:	0651      	lsls	r1, r2, #25
 80067c6:	d402      	bmi.n	80067ce <HAL_UART_IRQHandler+0xbe>
 80067c8:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80067cc:	d017      	beq.n	80067fe <HAL_UART_IRQHandler+0xee>
        UART_EndRxTransfer(huart);
 80067ce:	f7ff fe9c 	bl	800650a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	0652      	lsls	r2, r2, #25
 80067d8:	d50d      	bpl.n	80067f6 <HAL_UART_IRQHandler+0xe6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80067dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80067e4:	b138      	cbz	r0, 80067f6 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <HAL_UART_IRQHandler+0x128>)
 80067e8:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ea:	f7fe fb66 	bl	8004eba <HAL_DMA_Abort_IT>
 80067ee:	b128      	cbz	r0, 80067fc <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80067f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80067f4:	e79d      	b.n	8006732 <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7fb fcf1 	bl	80021de <HAL_UART_ErrorCallback>
}
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80067fe:	f7fb fcee 	bl	80021de <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006802:	67e5      	str	r5, [r4, #124]	; 0x7c
 8006804:	e7fa      	b.n	80067fc <HAL_UART_IRQHandler+0xec>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006806:	0616      	lsls	r6, r2, #24
 8006808:	d506      	bpl.n	8006818 <HAL_UART_IRQHandler+0x108>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800680a:	060d      	lsls	r5, r1, #24
 800680c:	d504      	bpl.n	8006818 <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 800680e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f3      	beq.n	80067fc <HAL_UART_IRQHandler+0xec>
      huart->TxISR(huart);
 8006814:	4620      	mov	r0, r4
 8006816:	e78c      	b.n	8006732 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006818:	0650      	lsls	r0, r2, #25
 800681a:	d5ef      	bpl.n	80067fc <HAL_UART_IRQHandler+0xec>
 800681c:	064a      	lsls	r2, r1, #25
 800681e:	d5ed      	bpl.n	80067fc <HAL_UART_IRQHandler+0xec>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006820:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006822:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006828:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800682a:	2320      	movs	r3, #32
 800682c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800682e:	2300      	movs	r3, #0
 8006830:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8006832:	f7fb fcc9 	bl	80021c8 <HAL_UART_TxCpltCallback>
 8006836:	e7e1      	b.n	80067fc <HAL_UART_IRQHandler+0xec>
 8006838:	0800683d 	.word	0x0800683d

0800683c <UART_DMAAbortOnError>:
{
 800683c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800683e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006846:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800684a:	f7fb fcc8 	bl	80021de <HAL_UART_ErrorCallback>
}
 800684e:	bd08      	pop	{r3, pc}

08006850 <UART_SetConfig>:
{
 8006850:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006852:	69c2      	ldr	r2, [r0, #28]
{
 8006854:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006856:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006858:	6881      	ldr	r1, [r0, #8]
 800685a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800685c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800685e:	4301      	orrs	r1, r0
 8006860:	6960      	ldr	r0, [r4, #20]
 8006862:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006864:	489a      	ldr	r0, [pc, #616]	; (8006ad0 <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006866:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006868:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 800686a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800686c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800686e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006870:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006878:	4301      	orrs	r1, r0
 800687a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800687c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800687e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8006880:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006882:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8006886:	4301      	orrs	r1, r0
 8006888:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800688a:	4992      	ldr	r1, [pc, #584]	; (8006ad4 <UART_SetConfig+0x284>)
 800688c:	428b      	cmp	r3, r1
 800688e:	d118      	bne.n	80068c2 <UART_SetConfig+0x72>
 8006890:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <UART_SetConfig+0x288>)
 8006892:	4992      	ldr	r1, [pc, #584]	; (8006adc <UART_SetConfig+0x28c>)
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80068a2:	f040 80bd 	bne.w	8006a20 <UART_SetConfig+0x1d0>
    switch (clocksource)
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	f200 80af 	bhi.w	8006a0a <UART_SetConfig+0x1ba>
 80068ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80068b0:	00aa0095 	.word	0x00aa0095
 80068b4:	00ad00f9 	.word	0x00ad00f9
 80068b8:	00ad0105 	.word	0x00ad0105
 80068bc:	00ad00ad 	.word	0x00ad00ad
 80068c0:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068c2:	4987      	ldr	r1, [pc, #540]	; (8006ae0 <UART_SetConfig+0x290>)
 80068c4:	428b      	cmp	r3, r1
 80068c6:	d106      	bne.n	80068d6 <UART_SetConfig+0x86>
 80068c8:	4b83      	ldr	r3, [pc, #524]	; (8006ad8 <UART_SetConfig+0x288>)
 80068ca:	4986      	ldr	r1, [pc, #536]	; (8006ae4 <UART_SetConfig+0x294>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f003 030c 	and.w	r3, r3, #12
 80068d4:	e7e2      	b.n	800689c <UART_SetConfig+0x4c>
 80068d6:	4984      	ldr	r1, [pc, #528]	; (8006ae8 <UART_SetConfig+0x298>)
 80068d8:	428b      	cmp	r3, r1
 80068da:	d118      	bne.n	800690e <UART_SetConfig+0xbe>
 80068dc:	4b7e      	ldr	r3, [pc, #504]	; (8006ad8 <UART_SetConfig+0x288>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	f000 80e4 	beq.w	8006ab4 <UART_SetConfig+0x264>
 80068ec:	d802      	bhi.n	80068f4 <UART_SetConfig+0xa4>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0d5      	beq.n	800689e <UART_SetConfig+0x4e>
 80068f2:	e005      	b.n	8006900 <UART_SetConfig+0xb0>
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	f000 80d1 	beq.w	8006a9c <UART_SetConfig+0x24c>
 80068fa:	2b30      	cmp	r3, #48	; 0x30
 80068fc:	f000 80e0 	beq.w	8006ac0 <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006900:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006904:	f000 8081 	beq.w	8006a0a <UART_SetConfig+0x1ba>
        ret = HAL_ERROR;
 8006908:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800690a:	2300      	movs	r3, #0
 800690c:	e0a9      	b.n	8006a62 <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800690e:	4977      	ldr	r1, [pc, #476]	; (8006aec <UART_SetConfig+0x29c>)
 8006910:	428b      	cmp	r3, r1
 8006912:	d10d      	bne.n	8006930 <UART_SetConfig+0xe0>
 8006914:	4b70      	ldr	r3, [pc, #448]	; (8006ad8 <UART_SetConfig+0x288>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	f000 80c8 	beq.w	8006ab4 <UART_SetConfig+0x264>
 8006924:	d9e3      	bls.n	80068ee <UART_SetConfig+0x9e>
 8006926:	2b80      	cmp	r3, #128	; 0x80
 8006928:	f000 80b8 	beq.w	8006a9c <UART_SetConfig+0x24c>
 800692c:	2bc0      	cmp	r3, #192	; 0xc0
 800692e:	e7e5      	b.n	80068fc <UART_SetConfig+0xac>
 8006930:	496f      	ldr	r1, [pc, #444]	; (8006af0 <UART_SetConfig+0x2a0>)
 8006932:	428b      	cmp	r3, r1
 8006934:	d110      	bne.n	8006958 <UART_SetConfig+0x108>
 8006936:	4b68      	ldr	r3, [pc, #416]	; (8006ad8 <UART_SetConfig+0x288>)
 8006938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006944:	f000 80b6 	beq.w	8006ab4 <UART_SetConfig+0x264>
 8006948:	d9d1      	bls.n	80068ee <UART_SetConfig+0x9e>
 800694a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694e:	f000 80a5 	beq.w	8006a9c <UART_SetConfig+0x24c>
 8006952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006956:	e7d1      	b.n	80068fc <UART_SetConfig+0xac>
 8006958:	4966      	ldr	r1, [pc, #408]	; (8006af4 <UART_SetConfig+0x2a4>)
 800695a:	428b      	cmp	r3, r1
 800695c:	d114      	bne.n	8006988 <UART_SetConfig+0x138>
 800695e:	4b5e      	ldr	r3, [pc, #376]	; (8006ad8 <UART_SetConfig+0x288>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696c:	f000 80a2 	beq.w	8006ab4 <UART_SetConfig+0x264>
 8006970:	d803      	bhi.n	800697a <UART_SetConfig+0x12a>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1c4      	bne.n	8006900 <UART_SetConfig+0xb0>
 8006976:	2301      	movs	r3, #1
 8006978:	e791      	b.n	800689e <UART_SetConfig+0x4e>
 800697a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697e:	f000 808d 	beq.w	8006a9c <UART_SetConfig+0x24c>
 8006982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006986:	e7b9      	b.n	80068fc <UART_SetConfig+0xac>
 8006988:	495b      	ldr	r1, [pc, #364]	; (8006af8 <UART_SetConfig+0x2a8>)
 800698a:	428b      	cmp	r3, r1
 800698c:	d113      	bne.n	80069b6 <UART_SetConfig+0x166>
 800698e:	4b52      	ldr	r3, [pc, #328]	; (8006ad8 <UART_SetConfig+0x288>)
 8006990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006994:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	f000 808a 	beq.w	8006ab4 <UART_SetConfig+0x264>
 80069a0:	d803      	bhi.n	80069aa <UART_SetConfig+0x15a>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1ac      	bne.n	8006900 <UART_SetConfig+0xb0>
 80069a6:	2300      	movs	r3, #0
 80069a8:	e779      	b.n	800689e <UART_SetConfig+0x4e>
 80069aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ae:	d075      	beq.n	8006a9c <UART_SetConfig+0x24c>
 80069b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b4:	e7a2      	b.n	80068fc <UART_SetConfig+0xac>
 80069b6:	4951      	ldr	r1, [pc, #324]	; (8006afc <UART_SetConfig+0x2ac>)
 80069b8:	428b      	cmp	r3, r1
 80069ba:	d1a1      	bne.n	8006900 <UART_SetConfig+0xb0>
 80069bc:	4b46      	ldr	r3, [pc, #280]	; (8006ad8 <UART_SetConfig+0x288>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ca:	d073      	beq.n	8006ab4 <UART_SetConfig+0x264>
 80069cc:	d98f      	bls.n	80068ee <UART_SetConfig+0x9e>
 80069ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d2:	d063      	beq.n	8006a9c <UART_SetConfig+0x24c>
 80069d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069d8:	e790      	b.n	80068fc <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 80069da:	f7fe fee1 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069de:	6861      	ldr	r1, [r4, #4]
 80069e0:	084a      	lsrs	r2, r1, #1
 80069e2:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80069e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ea:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ec:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ee:	f1a3 0110 	sub.w	r1, r3, #16
 80069f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80069f6:	4291      	cmp	r1, r2
 80069f8:	d90a      	bls.n	8006a10 <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 80069fa:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80069fc:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80069fe:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a04:	f7fe fedc 	bl	80057c0 <HAL_RCC_GetPCLK2Freq>
 8006a08:	e7e9      	b.n	80069de <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8006a0a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	e7ee      	b.n	80069ee <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a10:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a14:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8006a18:	6821      	ldr	r1, [r4, #0]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60cb      	str	r3, [r1, #12]
 8006a1e:	e7ed      	b.n	80069fc <UART_SetConfig+0x1ac>
    switch (clocksource)
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	f63f af71 	bhi.w	8006908 <UART_SetConfig+0xb8>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <UART_SetConfig+0x1dc>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a75 	.word	0x08006a75
 8006a34:	08006a7b 	.word	0x08006a7b
 8006a38:	08006909 	.word	0x08006909
 8006a3c:	08006a8d 	.word	0x08006a8d
 8006a40:	08006909 	.word	0x08006909
 8006a44:	08006909 	.word	0x08006909
 8006a48:	08006909 	.word	0x08006909
 8006a4c:	08006a93 	.word	0x08006a93
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fe fea6 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a54:	6862      	ldr	r2, [r4, #4]
 8006a56:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8006a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a5e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a60:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a62:	f1a3 0110 	sub.w	r1, r3, #16
 8006a66:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006a6a:	4291      	cmp	r1, r2
 8006a6c:	d8c5      	bhi.n	80069fa <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	60d3      	str	r3, [r2, #12]
 8006a72:	e7c3      	b.n	80069fc <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fe fea4 	bl	80057c0 <HAL_RCC_GetPCLK2Freq>
 8006a78:	e7ec      	b.n	8006a54 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006a7a:	6860      	ldr	r0, [r4, #4]
 8006a7c:	0843      	lsrs	r3, r0, #1
 8006a7e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006a82:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a86:	fbb3 f3f0 	udiv	r3, r3, r0
 8006a8a:	e7e8      	b.n	8006a5e <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a8c:	f7fe fdbc 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 8006a90:	e7e0      	b.n	8006a54 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a92:	6860      	ldr	r0, [r4, #4]
 8006a94:	0843      	lsrs	r3, r0, #1
 8006a96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006a9a:	e7f4      	b.n	8006a86 <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006aa0:	d1eb      	bne.n	8006a7a <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006aa2:	6860      	ldr	r0, [r4, #4]
 8006aa4:	0843      	lsrs	r3, r0, #1
 8006aa6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006aaa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006aae:	fbb3 f3f0 	udiv	r3, r3, r0
 8006ab2:	e79a      	b.n	80069ea <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ab4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006ab8:	d1e8      	bne.n	8006a8c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006aba:	f7fe fda5 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 8006abe:	e78e      	b.n	80069de <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006ac4:	d1e5      	bne.n	8006a92 <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ac6:	6860      	ldr	r0, [r4, #4]
 8006ac8:	0843      	lsrs	r3, r0, #1
 8006aca:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006ace:	e7ee      	b.n	8006aae <UART_SetConfig+0x25e>
 8006ad0:	efff69f3 	.word	0xefff69f3
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	0800e04c 	.word	0x0800e04c
 8006ae0:	40004400 	.word	0x40004400
 8006ae4:	0800e050 	.word	0x0800e050
 8006ae8:	40004800 	.word	0x40004800
 8006aec:	40004c00 	.word	0x40004c00
 8006af0:	40005000 	.word	0x40005000
 8006af4:	40011400 	.word	0x40011400
 8006af8:	40007800 	.word	0x40007800
 8006afc:	40007c00 	.word	0x40007c00

08006b00 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b02:	07da      	lsls	r2, r3, #31
{
 8006b04:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b06:	d506      	bpl.n	8006b16 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b08:	6801      	ldr	r1, [r0, #0]
 8006b0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006b0c:	684a      	ldr	r2, [r1, #4]
 8006b0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b12:	4322      	orrs	r2, r4
 8006b14:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b16:	079c      	lsls	r4, r3, #30
 8006b18:	d506      	bpl.n	8006b28 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1a:	6801      	ldr	r1, [r0, #0]
 8006b1c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006b1e:	684a      	ldr	r2, [r1, #4]
 8006b20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b24:	4322      	orrs	r2, r4
 8006b26:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b28:	0759      	lsls	r1, r3, #29
 8006b2a:	d506      	bpl.n	8006b3a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b2c:	6801      	ldr	r1, [r0, #0]
 8006b2e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006b30:	684a      	ldr	r2, [r1, #4]
 8006b32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b36:	4322      	orrs	r2, r4
 8006b38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b3a:	071a      	lsls	r2, r3, #28
 8006b3c:	d506      	bpl.n	8006b4c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3e:	6801      	ldr	r1, [r0, #0]
 8006b40:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006b42:	684a      	ldr	r2, [r1, #4]
 8006b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b48:	4322      	orrs	r2, r4
 8006b4a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b4c:	06dc      	lsls	r4, r3, #27
 8006b4e:	d506      	bpl.n	8006b5e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b50:	6801      	ldr	r1, [r0, #0]
 8006b52:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006b54:	688a      	ldr	r2, [r1, #8]
 8006b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b5a:	4322      	orrs	r2, r4
 8006b5c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b5e:	0699      	lsls	r1, r3, #26
 8006b60:	d506      	bpl.n	8006b70 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b62:	6801      	ldr	r1, [r0, #0]
 8006b64:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006b66:	688a      	ldr	r2, [r1, #8]
 8006b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b6c:	4322      	orrs	r2, r4
 8006b6e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b70:	065a      	lsls	r2, r3, #25
 8006b72:	d510      	bpl.n	8006b96 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b74:	6801      	ldr	r1, [r0, #0]
 8006b76:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006b78:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b7a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b7e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b82:	ea42 0204 	orr.w	r2, r2, r4
 8006b86:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b88:	d105      	bne.n	8006b96 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b8a:	684a      	ldr	r2, [r1, #4]
 8006b8c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006b8e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006b92:	4322      	orrs	r2, r4
 8006b94:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	d506      	bpl.n	8006ba8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b9a:	6802      	ldr	r2, [r0, #0]
 8006b9c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006b9e:	6853      	ldr	r3, [r2, #4]
 8006ba0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	6053      	str	r3, [r2, #4]
}
 8006ba8:	bd10      	pop	{r4, pc}

08006baa <UART_WaitOnFlagUntilTimeout>:
{
 8006baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bae:	9d06      	ldr	r5, [sp, #24]
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	460f      	mov	r7, r1
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb8:	6821      	ldr	r1, [r4, #0]
 8006bba:	69ca      	ldr	r2, [r1, #28]
 8006bbc:	ea37 0302 	bics.w	r3, r7, r2
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2201      	moveq	r2, #1
 8006bc4:	2200      	movne	r2, #0
 8006bc6:	42b2      	cmp	r2, r6
 8006bc8:	d001      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e018      	b.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8006bce:	1c68      	adds	r0, r5, #1
 8006bd0:	d0f3      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fd fd6d 	bl	80046b0 <HAL_GetTick>
 8006bd6:	eba0 0008 	sub.w	r0, r0, r8
 8006bda:	42a8      	cmp	r0, r5
 8006bdc:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bde:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be0:	d800      	bhi.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x3a>
 8006be2:	b97d      	cbnz	r5, 8006c04 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006be8:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bea:	6883      	ldr	r3, [r0, #8]
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006bf2:	2320      	movs	r3, #32
 8006bf4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8006bf8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8006bfa:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006bfc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8006c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c04:	075a      	lsls	r2, r3, #29
 8006c06:	d5d7      	bpl.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c08:	69c3      	ldr	r3, [r0, #28]
 8006c0a:	051b      	lsls	r3, r3, #20
 8006c0c:	d5d4      	bpl.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c12:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c14:	6803      	ldr	r3, [r0, #0]
 8006c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c1a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1c:	6883      	ldr	r3, [r0, #8]
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006c24:	2320      	movs	r3, #32
 8006c26:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006c28:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c2a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006c2c:	e7e4      	b.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x4e>

08006c2e <UART_CheckIdleState>:
{
 8006c2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c30:	2500      	movs	r5, #0
{
 8006c32:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006c36:	f7fd fd3b 	bl	80046b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c3a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006c3c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	0712      	lsls	r2, r2, #28
 8006c42:	d407      	bmi.n	8006c54 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8006c44:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006c46:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006c48:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8006c4a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006c50:	b003      	add	sp, #12
 8006c52:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c54:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006c58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	9200      	str	r2, [sp, #0]
 8006c60:	462a      	mov	r2, r5
 8006c62:	f7ff ffa2 	bl	8006baa <UART_WaitOnFlagUntilTimeout>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d0ec      	beq.n	8006c44 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8006c6a:	2003      	movs	r0, #3
 8006c6c:	e7f0      	b.n	8006c50 <UART_CheckIdleState+0x22>

08006c6e <HAL_UART_Init>:
{
 8006c6e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006c70:	4604      	mov	r4, r0
 8006c72:	b340      	cbz	r0, 8006cc6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006c74:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006c76:	b91b      	cbnz	r3, 8006c80 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8006c78:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8006c7c:	f7fb fff4 	bl	8002c68 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006c80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006c82:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c84:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006c86:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8006c88:	6813      	ldr	r3, [r2, #0]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c90:	f7ff fdde 	bl	8006850 <UART_SetConfig>
 8006c94:	2801      	cmp	r0, #1
 8006c96:	d016      	beq.n	8006cc6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c9a:	b113      	cbz	r3, 8006ca2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f7ff ff2f 	bl	8006b00 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006ca4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cb4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
}
 8006cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006cc0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006cc2:	f7ff bfb4 	b.w	8006c2e <UART_CheckIdleState>
}
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	bd10      	pop	{r4, pc}
	...

08006ccc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ccc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cd0:	b113      	cbz	r3, 8006cd8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8006cd2:	f06f 0005 	mvn.w	r0, #5
 8006cd6:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd8:	f3ef 8210 	mrs	r2, PRIMASK
 8006cdc:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8006cde:	b912      	cbnz	r2, 8006ce6 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ce0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ce4:	b112      	cbz	r2, 8006cec <osKernelInitialize+0x20>
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	2a02      	cmp	r2, #2
 8006cea:	d0f2      	beq.n	8006cd2 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	b910      	cbnz	r0, 8006cf6 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8006cf6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006cfa:	4770      	bx	lr
 8006cfc:	20002fa8 	.word	0x20002fa8

08006d00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d00:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d02:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d06:	b113      	cbz	r3, 8006d0e <osKernelStart+0xe>
    stat = osErrorISR;
 8006d08:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8006d0c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0e:	f3ef 8210 	mrs	r2, PRIMASK
 8006d12:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8006d14:	b912      	cbnz	r2, 8006d1c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d16:	f3ef 8211 	mrs	r2, BASEPRI
 8006d1a:	b112      	cbz	r2, 8006d22 <osKernelStart+0x22>
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	2a02      	cmp	r2, #2
 8006d20:	d0f2      	beq.n	8006d08 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	2a01      	cmp	r2, #1
 8006d26:	d105      	bne.n	8006d34 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8006d28:	2202      	movs	r2, #2
 8006d2a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006d2c:	f000 ffc6 	bl	8007cbc <vTaskStartScheduler>
      stat = osOK;
 8006d30:	2000      	movs	r0, #0
 8006d32:	e7eb      	b.n	8006d0c <osKernelStart+0xc>
      stat = osError;
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006d38:	e7e8      	b.n	8006d0c <osKernelStart+0xc>
 8006d3a:	bf00      	nop
 8006d3c:	20002fa8 	.word	0x20002fa8

08006d40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d42:	4614      	mov	r4, r2
 8006d44:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d46:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d48:	460b      	mov	r3, r1
  hTask = NULL;
 8006d4a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d4c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006d50:	bb32      	cbnz	r2, 8006da0 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d52:	f3ef 8210 	mrs	r2, PRIMASK
 8006d56:	b912      	cbnz	r2, 8006d5e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d58:	f3ef 8211 	mrs	r2, BASEPRI
 8006d5c:	b11a      	cbz	r2, 8006d66 <osThreadNew+0x26>
 8006d5e:	4a23      	ldr	r2, [pc, #140]	; (8006dec <osThreadNew+0xac>)
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	2a02      	cmp	r2, #2
 8006d64:	d01c      	beq.n	8006da0 <osThreadNew+0x60>
 8006d66:	b1d8      	cbz	r0, 8006da0 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	d037      	beq.n	8006ddc <osThreadNew+0x9c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006d6c:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 8006d6e:	6821      	ldr	r1, [r4, #0]
 8006d70:	2d00      	cmp	r5, #0
 8006d72:	bf08      	it	eq
 8006d74:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d76:	1e6a      	subs	r2, r5, #1
 8006d78:	462f      	mov	r7, r5
 8006d7a:	2a37      	cmp	r2, #55	; 0x37
 8006d7c:	d833      	bhi.n	8006de6 <osThreadNew+0xa6>
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	07d2      	lsls	r2, r2, #31
 8006d82:	d430      	bmi.n	8006de6 <osThreadNew+0xa6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006d84:	6966      	ldr	r6, [r4, #20]
 8006d86:	b176      	cbz	r6, 8006da6 <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d88:	08b2      	lsrs	r2, r6, #2
 8006d8a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d8e:	f1bc 0f00 	cmp.w	ip, #0
 8006d92:	d00b      	beq.n	8006dac <osThreadNew+0x6c>
 8006d94:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 8006d98:	d902      	bls.n	8006da0 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d9a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d9c:	b104      	cbz	r4, 8006da0 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d9e:	b9b6      	cbnz	r6, 8006dce <osThreadNew+0x8e>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006da0:	9805      	ldr	r0, [sp, #20]
}
 8006da2:	b007      	add	sp, #28
 8006da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006daa:	e7ee      	b.n	8006d8a <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006dac:	f1be 0f00 	cmp.w	lr, #0
 8006db0:	d1f6      	bne.n	8006da0 <osThreadNew+0x60>
      if (mem == 0) {
 8006db2:	6924      	ldr	r4, [r4, #16]
 8006db4:	2c00      	cmp	r4, #0
 8006db6:	d1f3      	bne.n	8006da0 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006db8:	ac05      	add	r4, sp, #20
 8006dba:	b292      	uxth	r2, r2
 8006dbc:	e9cd 7400 	strd	r7, r4, [sp]
 8006dc0:	f000 ff4e 	bl	8007c60 <xTaskCreate>
 8006dc4:	2801      	cmp	r0, #1
          hTask = NULL;
 8006dc6:	bf1c      	itt	ne
 8006dc8:	2300      	movne	r3, #0
 8006dca:	9305      	strne	r3, [sp, #20]
 8006dcc:	e7e8      	b.n	8006da0 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dce:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8006dd2:	9500      	str	r5, [sp, #0]
 8006dd4:	f000 ff06 	bl	8007be4 <xTaskCreateStatic>
 8006dd8:	9005      	str	r0, [sp, #20]
 8006dda:	e7e1      	b.n	8006da0 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 8006ddc:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8006dde:	f44f 7280 	mov.w	r2, #256	; 0x100
    name = NULL;
 8006de2:	4621      	mov	r1, r4
 8006de4:	e7e8      	b.n	8006db8 <osThreadNew+0x78>
        return (NULL);
 8006de6:	2000      	movs	r0, #0
 8006de8:	e7db      	b.n	8006da2 <osThreadNew+0x62>
 8006dea:	bf00      	nop
 8006dec:	20002fa8 	.word	0x20002fa8

08006df0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006df0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006df6:	b113      	cbz	r3, 8006dfe <osDelay+0xe>
    stat = osErrorISR;
 8006df8:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006dfc:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfe:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8006e02:	b913      	cbnz	r3, 8006e0a <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e04:	f3ef 8311 	mrs	r3, BASEPRI
 8006e08:	b11b      	cbz	r3, 8006e12 <osDelay+0x22>
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <osDelay+0x30>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d0f2      	beq.n	8006df8 <osDelay+0x8>
    if (ticks != 0U) {
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d0f2      	beq.n	8006dfc <osDelay+0xc>
      vTaskDelay(ticks);
 8006e16:	f001 f8af 	bl	8007f78 <vTaskDelay>
    stat = osOK;
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	e7ee      	b.n	8006dfc <osDelay+0xc>
 8006e1e:	bf00      	nop
 8006e20:	20002fa8 	.word	0x20002fa8

08006e24 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e28:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006e2c:	b113      	cbz	r3, 8006e34 <osMutexNew+0x10>
  hMutex = NULL;
 8006e2e:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006e30:	4628      	mov	r0, r5
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e34:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8006e38:	b912      	cbnz	r2, 8006e40 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e3e:	b11a      	cbz	r2, 8006e48 <osMutexNew+0x24>
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <osMutexNew+0x80>)
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	2a02      	cmp	r2, #2
 8006e46:	d0f2      	beq.n	8006e2e <osMutexNew+0xa>
    if (attr != NULL) {
 8006e48:	b104      	cbz	r4, 8006e4c <osMutexNew+0x28>
      type = attr->attr_bits;
 8006e4a:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006e4c:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 8006e50:	071b      	lsls	r3, r3, #28
 8006e52:	d4ec      	bmi.n	8006e2e <osMutexNew+0xa>
      if (attr != NULL) {
 8006e54:	b1b4      	cbz	r4, 8006e84 <osMutexNew+0x60>
 8006e56:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e5a:	b189      	cbz	r1, 8006e80 <osMutexNew+0x5c>
 8006e5c:	2b4f      	cmp	r3, #79	; 0x4f
 8006e5e:	d9e6      	bls.n	8006e2e <osMutexNew+0xa>
        if (rmtx != 0U) {
 8006e60:	b1de      	cbz	r6, 8006e9a <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006e62:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006e64:	f000 fade 	bl	8007424 <xQueueCreateMutexStatic>
 8006e68:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d0df      	beq.n	8006e2e <osMutexNew+0xa>
          name = attr->name;
 8006e6e:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 8006e70:	4628      	mov	r0, r5
 8006e72:	f000 fd1b 	bl	80078ac <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006e76:	2e00      	cmp	r6, #0
 8006e78:	d0da      	beq.n	8006e30 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006e7a:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 8006e7e:	e7d7      	b.n	8006e30 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1d4      	bne.n	8006e2e <osMutexNew+0xa>
          if (rmtx != 0U) {
 8006e84:	b15e      	cbz	r6, 8006e9e <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006e86:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8006e88:	f000 fb01 	bl	800748e <xQueueCreateMutex>
 8006e8c:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d0cd      	beq.n	8006e2e <osMutexNew+0xa>
        if (attr != NULL) {
 8006e92:	2c00      	cmp	r4, #0
 8006e94:	d1eb      	bne.n	8006e6e <osMutexNew+0x4a>
          name = NULL;
 8006e96:	4621      	mov	r1, r4
 8006e98:	e7ea      	b.n	8006e70 <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	e7e2      	b.n	8006e64 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	e7f2      	b.n	8006e88 <osMutexNew+0x64>
 8006ea2:	bf00      	nop
 8006ea4:	20002fa8 	.word	0x20002fa8

08006ea8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006ea8:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006eaa:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006eae:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8006eb0:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006eb4:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eb6:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006eba:	b112      	cbz	r2, 8006ec2 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8006ebc:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006ec0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec2:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006ec6:	b912      	cbnz	r2, 8006ece <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ec8:	f3ef 8211 	mrs	r2, BASEPRI
 8006ecc:	b11a      	cbz	r2, 8006ed6 <osMutexAcquire+0x2e>
 8006ece:	4a0d      	ldr	r2, [pc, #52]	; (8006f04 <osMutexAcquire+0x5c>)
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	2a02      	cmp	r2, #2
 8006ed4:	d0f2      	beq.n	8006ebc <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8006ed6:	b188      	cbz	r0, 8006efc <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006ed8:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006eda:	b163      	cbz	r3, 8006ef6 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006edc:	f000 fcc2 	bl	8007864 <xQueueTakeMutexRecursive>
 8006ee0:	2801      	cmp	r0, #1
 8006ee2:	d101      	bne.n	8006ee8 <osMutexAcquire+0x40>
  stat = osOK;
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e7eb      	b.n	8006ec0 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	bf14      	ite	ne
 8006eec:	f06f 0001 	mvnne.w	r0, #1
 8006ef0:	f06f 0002 	mvneq.w	r0, #2
 8006ef4:	e7e4      	b.n	8006ec0 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006ef6:	f000 fbeb 	bl	80076d0 <xQueueSemaphoreTake>
 8006efa:	e7f1      	b.n	8006ee0 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8006efc:	f06f 0003 	mvn.w	r0, #3
 8006f00:	e7de      	b.n	8006ec0 <osMutexAcquire+0x18>
 8006f02:	bf00      	nop
 8006f04:	20002fa8 	.word	0x20002fa8

08006f08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006f08:	b508      	push	{r3, lr}
 8006f0a:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006f0c:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006f10:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f14:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006f18:	b112      	cbz	r2, 8006f20 <osMutexRelease+0x18>
    stat = osErrorISR;
 8006f1a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8006f1e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f20:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006f24:	b912      	cbnz	r2, 8006f2c <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f26:	f3ef 8211 	mrs	r2, BASEPRI
 8006f2a:	b11a      	cbz	r2, 8006f34 <osMutexRelease+0x2c>
 8006f2c:	4a0a      	ldr	r2, [pc, #40]	; (8006f58 <osMutexRelease+0x50>)
 8006f2e:	6812      	ldr	r2, [r2, #0]
 8006f30:	2a02      	cmp	r2, #2
 8006f32:	d0f2      	beq.n	8006f1a <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8006f34:	b168      	cbz	r0, 8006f52 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8006f36:	b13b      	cbz	r3, 8006f48 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006f38:	f000 fa89 	bl	800744e <xQueueGiveMutexRecursive>
 8006f3c:	2801      	cmp	r0, #1
  stat = osOK;
 8006f3e:	bf0c      	ite	eq
 8006f40:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8006f42:	f06f 0002 	mvnne.w	r0, #2
 8006f46:	e7ea      	b.n	8006f1e <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	f000 f9b0 	bl	80072b0 <xQueueGenericSend>
 8006f50:	e7f4      	b.n	8006f3c <osMutexRelease+0x34>
    stat = osErrorParameter;
 8006f52:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006f56:	e7e2      	b.n	8006f1e <osMutexRelease+0x16>
 8006f58:	20002fa8 	.word	0x20002fa8

08006f5c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <vApplicationGetIdleTaskMemory+0x10>)
 8006f5e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f60:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <vApplicationGetIdleTaskMemory+0x14>)
 8006f62:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f68:	6013      	str	r3, [r2, #0]
}
 8006f6a:	4770      	bx	lr
 8006f6c:	20002f4c 	.word	0x20002f4c
 8006f70:	20002b4c 	.word	0x20002b4c

08006f74 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f74:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <vApplicationGetTimerTaskMemory+0x10>)
 8006f76:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f78:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <vApplicationGetTimerTaskMemory+0x14>)
 8006f7a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f80:	6013      	str	r3, [r2, #0]
}
 8006f82:	4770      	bx	lr
 8006f84:	200037ac 	.word	0x200037ac
 8006f88:	20002fac 	.word	0x20002fac

08006f8c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f8c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f90:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f94:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f96:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f98:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fa0:	4770      	bx	lr

08006fa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fa6:	4770      	bx	lr

08006fa8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fa8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006faa:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006fac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fb4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006fb6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006fb8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006fba:	3301      	adds	r3, #1
 8006fbc:	6003      	str	r3, [r0, #0]
}
 8006fbe:	4770      	bx	lr

08006fc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fc0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fc2:	1c53      	adds	r3, r2, #1
{
 8006fc4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8006fc6:	d10a      	bne.n	8006fde <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fc8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fce:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fd0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fd2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006fd4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006fd6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006fd8:	3301      	adds	r3, #1
 8006fda:	6003      	str	r3, [r0, #0]
}
 8006fdc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fde:	f100 0308 	add.w	r3, r0, #8
 8006fe2:	685c      	ldr	r4, [r3, #4]
 8006fe4:	6825      	ldr	r5, [r4, #0]
 8006fe6:	4295      	cmp	r5, r2
 8006fe8:	d8ef      	bhi.n	8006fca <vListInsert+0xa>
 8006fea:	4623      	mov	r3, r4
 8006fec:	e7f9      	b.n	8006fe2 <vListInsert+0x22>

08006fee <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fee:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ff2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ff4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ff6:	6882      	ldr	r2, [r0, #8]
 8006ff8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ffa:	6859      	ldr	r1, [r3, #4]
 8006ffc:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ffe:	bf08      	it	eq
 8007000:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007002:	2200      	movs	r2, #0
 8007004:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	3a01      	subs	r2, #1
 800700a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800700c:	6818      	ldr	r0, [r3, #0]
}
 800700e:	4770      	bx	lr

08007010 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007010:	b510      	push	{r4, lr}
 8007012:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007014:	f001 fc56 	bl	80088c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007018:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800701a:	f001 fc79 	bl	8008910 <vPortExitCritical>

	return xReturn;
}
 800701e:	fab4 f084 	clz	r0, r4
 8007022:	0940      	lsrs	r0, r0, #5
 8007024:	bd10      	pop	{r4, pc}

08007026 <prvCopyDataToQueue>:
{
 8007026:	b570      	push	{r4, r5, r6, lr}
 8007028:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800702a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800702c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800702e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007030:	b942      	cbnz	r2, 8007044 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007032:	6805      	ldr	r5, [r0, #0]
 8007034:	b99d      	cbnz	r5, 800705e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007036:	6880      	ldr	r0, [r0, #8]
 8007038:	f001 f92a 	bl	8008290 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800703c:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800703e:	3601      	adds	r6, #1
 8007040:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007042:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007044:	b96d      	cbnz	r5, 8007062 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007046:	6840      	ldr	r0, [r0, #4]
 8007048:	f003 f9c6 	bl	800a3d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007050:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007052:	68a2      	ldr	r2, [r4, #8]
 8007054:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007056:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007058:	d301      	bcc.n	800705e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800705e:	2000      	movs	r0, #0
 8007060:	e7ed      	b.n	800703e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007062:	68c0      	ldr	r0, [r0, #12]
 8007064:	f003 f9b8 	bl	800a3d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800706a:	68e2      	ldr	r2, [r4, #12]
 800706c:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800706e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007070:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007072:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007074:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007076:	bf3e      	ittt	cc
 8007078:	68a2      	ldrcc	r2, [r4, #8]
 800707a:	189b      	addcc	r3, r3, r2
 800707c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800707e:	2d02      	cmp	r5, #2
 8007080:	d1ed      	bne.n	800705e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007082:	b10e      	cbz	r6, 8007088 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007084:	3e01      	subs	r6, #1
 8007086:	e7ea      	b.n	800705e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007088:	4630      	mov	r0, r6
 800708a:	e7d8      	b.n	800703e <prvCopyDataToQueue+0x18>

0800708c <prvCopyDataFromQueue>:
{
 800708c:	4603      	mov	r3, r0
 800708e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007092:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007094:	b162      	cbz	r2, 80070b0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007096:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007098:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800709a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800709c:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800709e:	60d9      	str	r1, [r3, #12]
}
 80070a0:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070a4:	bf24      	itt	cs
 80070a6:	6819      	ldrcs	r1, [r3, #0]
 80070a8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070aa:	68d9      	ldr	r1, [r3, #12]
 80070ac:	f003 b994 	b.w	800a3d8 <memcpy>
}
 80070b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <prvUnlockQueue>:
{
 80070b6:	b570      	push	{r4, r5, r6, lr}
 80070b8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80070ba:	f001 fc03 	bl	80088c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80070be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070c2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80070c6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	dc14      	bgt.n	80070f6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80070cc:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ce:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80070d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80070d6:	f001 fc1b 	bl	8008910 <vPortExitCritical>
	taskENTER_CRITICAL();
 80070da:	f001 fbf3 	bl	80088c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80070de:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80070e2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070e4:	2d00      	cmp	r5, #0
 80070e6:	dc12      	bgt.n	800710e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80070e8:	23ff      	movs	r3, #255	; 0xff
 80070ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80070ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80070f2:	f001 bc0d 	b.w	8008910 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0e7      	beq.n	80070cc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fc:	4630      	mov	r0, r6
 80070fe:	f000 ffdb 	bl	80080b8 <xTaskRemoveFromEventList>
 8007102:	b108      	cbz	r0, 8007108 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007104:	f001 f868 	bl	80081d8 <vTaskMissedYield>
 8007108:	3d01      	subs	r5, #1
 800710a:	b26d      	sxtb	r5, r5
 800710c:	e7dc      	b.n	80070c8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800710e:	6923      	ldr	r3, [r4, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0e9      	beq.n	80070e8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007114:	4630      	mov	r0, r6
 8007116:	f000 ffcf 	bl	80080b8 <xTaskRemoveFromEventList>
 800711a:	b108      	cbz	r0, 8007120 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800711c:	f001 f85c 	bl	80081d8 <vTaskMissedYield>
 8007120:	3d01      	subs	r5, #1
 8007122:	b26d      	sxtb	r5, r5
 8007124:	e7de      	b.n	80070e4 <prvUnlockQueue+0x2e>
	...

08007128 <xQueueGenericReset>:
{
 8007128:	b538      	push	{r3, r4, r5, lr}
 800712a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800712c:	4604      	mov	r4, r0
 800712e:	b950      	cbnz	r0, 8007146 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	e7fe      	b.n	8007144 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007146:	f001 fbbd 	bl	80088c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007150:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007152:	4343      	muls	r3, r0
 8007154:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007156:	1a1b      	subs	r3, r3, r0
 8007158:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800715a:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800715c:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800715e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007160:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007162:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007164:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007168:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800716c:	b995      	cbnz	r5, 8007194 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	b163      	cbz	r3, 800718c <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007172:	f104 0010 	add.w	r0, r4, #16
 8007176:	f000 ff9f 	bl	80080b8 <xTaskRemoveFromEventList>
 800717a:	b138      	cbz	r0, 800718c <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <xQueueGenericReset+0x80>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800718c:	f001 fbc0 	bl	8008910 <vPortExitCritical>
}
 8007190:	2001      	movs	r0, #1
 8007192:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007194:	f104 0010 	add.w	r0, r4, #16
 8007198:	f7ff fef8 	bl	8006f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800719c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80071a0:	f7ff fef4 	bl	8006f8c <vListInitialise>
 80071a4:	e7f2      	b.n	800718c <xQueueGenericReset+0x64>
 80071a6:	bf00      	nop
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <xQueueGenericCreateStatic>:
	{
 80071ac:	b513      	push	{r0, r1, r4, lr}
 80071ae:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071b0:	b950      	cbnz	r0, 80071c8 <xQueueGenericCreateStatic+0x1c>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	e7fe      	b.n	80071c6 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80071c8:	b953      	cbnz	r3, 80071e0 <xQueueGenericCreateStatic+0x34>
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	b672      	cpsid	i
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	b662      	cpsie	i
 80071de:	e7fe      	b.n	80071de <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071e0:	b15a      	cbz	r2, 80071fa <xQueueGenericCreateStatic+0x4e>
 80071e2:	b9b1      	cbnz	r1, 8007212 <xQueueGenericCreateStatic+0x66>
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	b672      	cpsid	i
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	b662      	cpsie	i
 80071f8:	e7fe      	b.n	80071f8 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071fa:	b151      	cbz	r1, 8007212 <xQueueGenericCreateStatic+0x66>
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	b672      	cpsid	i
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	b662      	cpsie	i
 8007210:	e7fe      	b.n	8007210 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007212:	2350      	movs	r3, #80	; 0x50
 8007214:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	2b50      	cmp	r3, #80	; 0x50
 800721a:	d00a      	beq.n	8007232 <xQueueGenericCreateStatic+0x86>
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	b672      	cpsid	i
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	b662      	cpsie	i
 8007230:	e7fe      	b.n	8007230 <xQueueGenericCreateStatic+0x84>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007232:	2900      	cmp	r1, #0
 8007234:	bf08      	it	eq
 8007236:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007238:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800723a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800723c:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800723e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007242:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007246:	4619      	mov	r1, r3
 8007248:	4620      	mov	r0, r4
 800724a:	f7ff ff6d 	bl	8007128 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800724e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8007252:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007254:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007258:	b002      	add	sp, #8
 800725a:	bd10      	pop	{r4, pc}

0800725c <xQueueGenericCreate>:
	{
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	460d      	mov	r5, r1
 8007260:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007262:	4606      	mov	r6, r0
 8007264:	b950      	cbnz	r0, 800727c <xQueueGenericCreate+0x20>
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	b672      	cpsid	i
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	b662      	cpsie	i
 800727a:	e7fe      	b.n	800727a <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800727e:	3050      	adds	r0, #80	; 0x50
 8007280:	f001 fc7e 	bl	8008b80 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007284:	4604      	mov	r4, r0
 8007286:	b160      	cbz	r0, 80072a2 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007288:	2300      	movs	r3, #0
 800728a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800728e:	b955      	cbnz	r5, 80072a6 <xQueueGenericCreate+0x4a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007290:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007292:	2101      	movs	r1, #1
 8007294:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007296:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800729a:	f7ff ff45 	bl	8007128 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800729e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80072a2:	4620      	mov	r0, r4
 80072a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072a6:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072aa:	6003      	str	r3, [r0, #0]
 80072ac:	e7f1      	b.n	8007292 <xQueueGenericCreate+0x36>
	...

080072b0 <xQueueGenericSend>:
{
 80072b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	4688      	mov	r8, r1
 80072b6:	9201      	str	r2, [sp, #4]
 80072b8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80072ba:	4604      	mov	r4, r0
 80072bc:	b950      	cbnz	r0, 80072d4 <xQueueGenericSend+0x24>
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	b672      	cpsid	i
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	b662      	cpsie	i
 80072d2:	e7fe      	b.n	80072d2 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072d4:	b961      	cbnz	r1, 80072f0 <xQueueGenericSend+0x40>
 80072d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80072d8:	b153      	cbz	r3, 80072f0 <xQueueGenericSend+0x40>
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	e7fe      	b.n	80072ee <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072f0:	2f02      	cmp	r7, #2
 80072f2:	d10d      	bne.n	8007310 <xQueueGenericSend+0x60>
 80072f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d00a      	beq.n	8007310 <xQueueGenericSend+0x60>
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	b672      	cpsid	i
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	b662      	cpsie	i
 800730e:	e7fe      	b.n	800730e <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007310:	f000 ff6e 	bl	80081f0 <xTaskGetSchedulerState>
 8007314:	b960      	cbnz	r0, 8007330 <xQueueGenericSend+0x80>
 8007316:	9e01      	ldr	r6, [sp, #4]
 8007318:	b15e      	cbz	r6, 8007332 <xQueueGenericSend+0x82>
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	b672      	cpsid	i
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	b662      	cpsie	i
 800732e:	e7fe      	b.n	800732e <xQueueGenericSend+0x7e>
 8007330:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007332:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8007336:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8007420 <xQueueGenericSend+0x170>
 800733a:	e037      	b.n	80073ac <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800733c:	9d01      	ldr	r5, [sp, #4]
 800733e:	b91d      	cbnz	r5, 8007348 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8007340:	f001 fae6 	bl	8008910 <vPortExitCritical>
			return errQUEUE_FULL;
 8007344:	2000      	movs	r0, #0
 8007346:	e050      	b.n	80073ea <xQueueGenericSend+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8007348:	b916      	cbnz	r6, 8007350 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800734a:	a802      	add	r0, sp, #8
 800734c:	f000 fef8 	bl	8008140 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007350:	f001 fade 	bl	8008910 <vPortExitCritical>
		vTaskSuspendAll();
 8007354:	f000 fcfa 	bl	8007d4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007358:	f001 fab4 	bl	80088c4 <vPortEnterCritical>
 800735c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007360:	2bff      	cmp	r3, #255	; 0xff
 8007362:	d101      	bne.n	8007368 <xQueueGenericSend+0xb8>
 8007364:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8007368:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800736c:	2bff      	cmp	r3, #255	; 0xff
 800736e:	d101      	bne.n	8007374 <xQueueGenericSend+0xc4>
 8007370:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8007374:	f001 facc 	bl	8008910 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007378:	a901      	add	r1, sp, #4
 800737a:	a802      	add	r0, sp, #8
 800737c:	f000 feec 	bl	8008158 <xTaskCheckForTimeOut>
 8007380:	2800      	cmp	r0, #0
 8007382:	d146      	bne.n	8007412 <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007384:	f001 fa9e 	bl	80088c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007388:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800738a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800738c:	429a      	cmp	r2, r3
 800738e:	d12f      	bne.n	80073f0 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007390:	f001 fabe 	bl	8008910 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007394:	9901      	ldr	r1, [sp, #4]
 8007396:	f104 0010 	add.w	r0, r4, #16
 800739a:	f000 fe51 	bl	8008040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff fe89 	bl	80070b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073a4:	f000 fd72 	bl	8007e8c <xTaskResumeAll>
 80073a8:	b350      	cbz	r0, 8007400 <xQueueGenericSend+0x150>
 80073aa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80073ac:	f001 fa8a 	bl	80088c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80073b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d301      	bcc.n	80073bc <xQueueGenericSend+0x10c>
 80073b8:	2f02      	cmp	r7, #2
 80073ba:	d1bf      	bne.n	800733c <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073bc:	463a      	mov	r2, r7
 80073be:	4641      	mov	r1, r8
 80073c0:	4620      	mov	r0, r4
 80073c2:	f7ff fe30 	bl	8007026 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c8:	b11b      	cbz	r3, 80073d2 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80073ce:	f000 fe73 	bl	80080b8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80073d2:	b138      	cbz	r0, 80073e4 <xQueueGenericSend+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 80073d4:	4b12      	ldr	r3, [pc, #72]	; (8007420 <xQueueGenericSend+0x170>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80073e4:	f001 fa94 	bl	8008910 <vPortExitCritical>
				return pdPASS;
 80073e8:	2001      	movs	r0, #1
}
 80073ea:	b004      	add	sp, #16
 80073ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80073f0:	f001 fa8e 	bl	8008910 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80073f4:	4620      	mov	r0, r4
 80073f6:	f7ff fe5e 	bl	80070b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073fa:	f000 fd47 	bl	8007e8c <xTaskResumeAll>
 80073fe:	e7d4      	b.n	80073aa <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8007400:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007404:	f8ca 3000 	str.w	r3, [sl]
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	e7cb      	b.n	80073aa <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff fe4f 	bl	80070b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007418:	f000 fd38 	bl	8007e8c <xTaskResumeAll>
 800741c:	e792      	b.n	8007344 <xQueueGenericSend+0x94>
 800741e:	bf00      	nop
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007424:	2200      	movs	r2, #0
 8007426:	460b      	mov	r3, r1
	{
 8007428:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800742a:	4611      	mov	r1, r2
 800742c:	9000      	str	r0, [sp, #0]
 800742e:	2001      	movs	r0, #1
 8007430:	f7ff febc 	bl	80071ac <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8007434:	4604      	mov	r4, r0
 8007436:	b138      	cbz	r0, 8007448 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800743c:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800743e:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007440:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007442:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007444:	f7ff ff34 	bl	80072b0 <xQueueGenericSend>
	}
 8007448:	4620      	mov	r0, r4
 800744a:	b002      	add	sp, #8
 800744c:	bd10      	pop	{r4, pc}

0800744e <xQueueGiveMutexRecursive>:
	{
 800744e:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8007450:	4604      	mov	r4, r0
 8007452:	b950      	cbnz	r0, 800746a <xQueueGiveMutexRecursive+0x1c>
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	b672      	cpsid	i
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	b662      	cpsie	i
 8007468:	e7fe      	b.n	8007468 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800746a:	6885      	ldr	r5, [r0, #8]
 800746c:	f000 feba 	bl	80081e4 <xTaskGetCurrentTaskHandle>
 8007470:	4285      	cmp	r5, r0
 8007472:	d10a      	bne.n	800748a <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007474:	68e3      	ldr	r3, [r4, #12]
 8007476:	3b01      	subs	r3, #1
 8007478:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800747a:	b923      	cbnz	r3, 8007486 <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800747c:	461a      	mov	r2, r3
 800747e:	4619      	mov	r1, r3
 8007480:	4620      	mov	r0, r4
 8007482:	f7ff ff15 	bl	80072b0 <xQueueGenericSend>
			xReturn = pdPASS;
 8007486:	2001      	movs	r0, #1
		return xReturn;
 8007488:	e000      	b.n	800748c <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800748a:	2000      	movs	r0, #0
	}
 800748c:	bd38      	pop	{r3, r4, r5, pc}

0800748e <xQueueCreateMutex>:
	{
 800748e:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007490:	4602      	mov	r2, r0
 8007492:	2100      	movs	r1, #0
 8007494:	2001      	movs	r0, #1
 8007496:	f7ff fee1 	bl	800725c <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800749a:	4604      	mov	r4, r0
 800749c:	b138      	cbz	r0, 80074ae <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074a2:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074a4:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074a6:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074a8:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074aa:	f7ff ff01 	bl	80072b0 <xQueueGenericSend>
	}
 80074ae:	4620      	mov	r0, r4
 80074b0:	bd10      	pop	{r4, pc}

080074b2 <xQueueGenericSendFromISR>:
{
 80074b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b6:	4689      	mov	r9, r1
 80074b8:	4690      	mov	r8, r2
 80074ba:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80074bc:	4604      	mov	r4, r0
 80074be:	b950      	cbnz	r0, 80074d6 <xQueueGenericSendFromISR+0x24>
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	b672      	cpsid	i
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	b662      	cpsie	i
 80074d4:	e7fe      	b.n	80074d4 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074d6:	b961      	cbnz	r1, 80074f2 <xQueueGenericSendFromISR+0x40>
 80074d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80074da:	b153      	cbz	r3, 80074f2 <xQueueGenericSendFromISR+0x40>
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	b672      	cpsid	i
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	b662      	cpsie	i
 80074f0:	e7fe      	b.n	80074f0 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074f2:	2f02      	cmp	r7, #2
 80074f4:	d10d      	bne.n	8007512 <xQueueGenericSendFromISR+0x60>
 80074f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d00a      	beq.n	8007512 <xQueueGenericSendFromISR+0x60>
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	b672      	cpsid	i
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	b662      	cpsie	i
 8007510:	e7fe      	b.n	8007510 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007512:	f001 fadf 	bl	8008ad4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007516:	f3ef 8611 	mrs	r6, BASEPRI
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	b672      	cpsid	i
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800752e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007532:	429a      	cmp	r2, r3
 8007534:	d301      	bcc.n	800753a <xQueueGenericSendFromISR+0x88>
 8007536:	2f02      	cmp	r7, #2
 8007538:	d122      	bne.n	8007580 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800753a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800753e:	463a      	mov	r2, r7
 8007540:	4649      	mov	r1, r9
 8007542:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8007544:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007546:	f7ff fd6e 	bl	8007026 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800754a:	1c6b      	adds	r3, r5, #1
 800754c:	d113      	bne.n	8007576 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800754e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007550:	b90b      	cbnz	r3, 8007556 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8007552:	2001      	movs	r0, #1
 8007554:	e00b      	b.n	800756e <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007556:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800755a:	f000 fdad 	bl	80080b8 <xTaskRemoveFromEventList>
 800755e:	2800      	cmp	r0, #0
 8007560:	d0f7      	beq.n	8007552 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8007562:	f1b8 0f00 	cmp.w	r8, #0
 8007566:	d0f4      	beq.n	8007552 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007568:	2001      	movs	r0, #1
 800756a:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800756e:	f386 8811 	msr	BASEPRI, r6
}
 8007572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007576:	3501      	adds	r5, #1
 8007578:	b26d      	sxtb	r5, r5
 800757a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800757e:	e7e8      	b.n	8007552 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8007580:	2000      	movs	r0, #0
 8007582:	e7f4      	b.n	800756e <xQueueGenericSendFromISR+0xbc>

08007584 <xQueueReceive>:
{
 8007584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007588:	b085      	sub	sp, #20
 800758a:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800758c:	4604      	mov	r4, r0
{
 800758e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007590:	b950      	cbnz	r0, 80075a8 <xQueueReceive+0x24>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	b672      	cpsid	i
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	b662      	cpsie	i
 80075a6:	e7fe      	b.n	80075a6 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075a8:	b961      	cbnz	r1, 80075c4 <xQueueReceive+0x40>
 80075aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80075ac:	b153      	cbz	r3, 80075c4 <xQueueReceive+0x40>
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	b672      	cpsid	i
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	b662      	cpsie	i
 80075c2:	e7fe      	b.n	80075c2 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075c4:	f000 fe14 	bl	80081f0 <xTaskGetSchedulerState>
 80075c8:	b960      	cbnz	r0, 80075e4 <xQueueReceive+0x60>
 80075ca:	9e01      	ldr	r6, [sp, #4]
 80075cc:	b15e      	cbz	r6, 80075e6 <xQueueReceive+0x62>
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	b672      	cpsid	i
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	b662      	cpsie	i
 80075e2:	e7fe      	b.n	80075e2 <xQueueReceive+0x5e>
 80075e4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80075e6:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80075ea:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80076cc <xQueueReceive+0x148>
 80075ee:	e03b      	b.n	8007668 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 80075f0:	9d01      	ldr	r5, [sp, #4]
 80075f2:	b91d      	cbnz	r5, 80075fc <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 80075f4:	f001 f98c 	bl	8008910 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80075f8:	2000      	movs	r0, #0
 80075fa:	e052      	b.n	80076a2 <xQueueReceive+0x11e>
				else if( xEntryTimeSet == pdFALSE )
 80075fc:	b916      	cbnz	r6, 8007604 <xQueueReceive+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075fe:	a802      	add	r0, sp, #8
 8007600:	f000 fd9e 	bl	8008140 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007604:	f001 f984 	bl	8008910 <vPortExitCritical>
		vTaskSuspendAll();
 8007608:	f000 fba0 	bl	8007d4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800760c:	f001 f95a 	bl	80088c4 <vPortEnterCritical>
 8007610:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007614:	2bff      	cmp	r3, #255	; 0xff
 8007616:	d101      	bne.n	800761c <xQueueReceive+0x98>
 8007618:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800761c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007620:	2bff      	cmp	r3, #255	; 0xff
 8007622:	d101      	bne.n	8007628 <xQueueReceive+0xa4>
 8007624:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8007628:	f001 f972 	bl	8008910 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800762c:	a901      	add	r1, sp, #4
 800762e:	a802      	add	r0, sp, #8
 8007630:	f000 fd92 	bl	8008158 <xTaskCheckForTimeOut>
 8007634:	2800      	cmp	r0, #0
 8007636:	d13d      	bne.n	80076b4 <xQueueReceive+0x130>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007638:	4620      	mov	r0, r4
 800763a:	f7ff fce9 	bl	8007010 <prvIsQueueEmpty>
 800763e:	b398      	cbz	r0, 80076a8 <xQueueReceive+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007640:	9901      	ldr	r1, [sp, #4]
 8007642:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007646:	f000 fcfb 	bl	8008040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800764a:	4620      	mov	r0, r4
 800764c:	f7ff fd33 	bl	80070b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007650:	f000 fc1c 	bl	8007e8c <xTaskResumeAll>
 8007654:	b938      	cbnz	r0, 8007666 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8007656:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800765a:	f8c9 3000 	str.w	r3, [r9]
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007668:	f001 f92c 	bl	80088c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800766c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800766e:	2d00      	cmp	r5, #0
 8007670:	d0be      	beq.n	80075f0 <xQueueReceive+0x6c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007672:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007674:	4639      	mov	r1, r7
 8007676:	4620      	mov	r0, r4
 8007678:	f7ff fd08 	bl	800708c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800767c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	b163      	cbz	r3, 800769c <xQueueReceive+0x118>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007682:	f104 0010 	add.w	r0, r4, #16
 8007686:	f000 fd17 	bl	80080b8 <xTaskRemoveFromEventList>
 800768a:	b138      	cbz	r0, 800769c <xQueueReceive+0x118>
						queueYIELD_IF_USING_PREEMPTION();
 800768c:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <xQueueReceive+0x148>)
 800768e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800769c:	f001 f938 	bl	8008910 <vPortExitCritical>
				return pdPASS;
 80076a0:	2001      	movs	r0, #1
}
 80076a2:	b005      	add	sp, #20
 80076a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff fd04 	bl	80070b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ae:	f000 fbed 	bl	8007e8c <xTaskResumeAll>
 80076b2:	e7d8      	b.n	8007666 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 80076b4:	4620      	mov	r0, r4
 80076b6:	f7ff fcfe 	bl	80070b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ba:	f000 fbe7 	bl	8007e8c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076be:	4620      	mov	r0, r4
 80076c0:	f7ff fca6 	bl	8007010 <prvIsQueueEmpty>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d0ce      	beq.n	8007666 <xQueueReceive+0xe2>
 80076c8:	e796      	b.n	80075f8 <xQueueReceive+0x74>
 80076ca:	bf00      	nop
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <xQueueSemaphoreTake>:
{
 80076d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80076d4:	4604      	mov	r4, r0
{
 80076d6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80076d8:	b950      	cbnz	r0, 80076f0 <xQueueSemaphoreTake+0x20>
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	b672      	cpsid	i
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	b662      	cpsie	i
 80076ee:	e7fe      	b.n	80076ee <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80076f0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80076f2:	b155      	cbz	r5, 800770a <xQueueSemaphoreTake+0x3a>
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	b672      	cpsid	i
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	b662      	cpsie	i
 8007708:	e7fe      	b.n	8007708 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800770a:	f000 fd71 	bl	80081f0 <xTaskGetSchedulerState>
 800770e:	b960      	cbnz	r0, 800772a <xQueueSemaphoreTake+0x5a>
 8007710:	9d01      	ldr	r5, [sp, #4]
 8007712:	b155      	cbz	r5, 800772a <xQueueSemaphoreTake+0x5a>
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	b672      	cpsid	i
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	b662      	cpsie	i
 8007728:	e7fe      	b.n	8007728 <xQueueSemaphoreTake+0x58>
 800772a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800772c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800772e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8007860 <xQueueSemaphoreTake+0x190>
 8007732:	e051      	b.n	80077d8 <xQueueSemaphoreTake+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	b973      	cbnz	r3, 8007756 <xQueueSemaphoreTake+0x86>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007738:	b155      	cbz	r5, 8007750 <xQueueSemaphoreTake+0x80>
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	b672      	cpsid	i
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	b662      	cpsie	i
 800774e:	e7fe      	b.n	800774e <xQueueSemaphoreTake+0x7e>
					taskEXIT_CRITICAL();
 8007750:	f001 f8de 	bl	8008910 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007754:	e05e      	b.n	8007814 <xQueueSemaphoreTake+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8007756:	b916      	cbnz	r6, 800775e <xQueueSemaphoreTake+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007758:	a802      	add	r0, sp, #8
 800775a:	f000 fcf1 	bl	8008140 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800775e:	f001 f8d7 	bl	8008910 <vPortExitCritical>
		vTaskSuspendAll();
 8007762:	f000 faf3 	bl	8007d4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007766:	f001 f8ad 	bl	80088c4 <vPortEnterCritical>
 800776a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800776e:	2bff      	cmp	r3, #255	; 0xff
 8007770:	d101      	bne.n	8007776 <xQueueSemaphoreTake+0xa6>
 8007772:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8007776:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800777a:	2bff      	cmp	r3, #255	; 0xff
 800777c:	d101      	bne.n	8007782 <xQueueSemaphoreTake+0xb2>
 800777e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007782:	f001 f8c5 	bl	8008910 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007786:	a901      	add	r1, sp, #4
 8007788:	a802      	add	r0, sp, #8
 800778a:	f000 fce5 	bl	8008158 <xTaskCheckForTimeOut>
 800778e:	2800      	cmp	r0, #0
 8007790:	d14a      	bne.n	8007828 <xQueueSemaphoreTake+0x158>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007792:	4620      	mov	r0, r4
 8007794:	f7ff fc3c 	bl	8007010 <prvIsQueueEmpty>
 8007798:	2800      	cmp	r0, #0
 800779a:	d03f      	beq.n	800781c <xQueueSemaphoreTake+0x14c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	b93b      	cbnz	r3, 80077b0 <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 80077a0:	f001 f890 	bl	80088c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077a4:	68a0      	ldr	r0, [r4, #8]
 80077a6:	f000 fd33 	bl	8008210 <xTaskPriorityInherit>
 80077aa:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80077ac:	f001 f8b0 	bl	8008910 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077b0:	9901      	ldr	r1, [sp, #4]
 80077b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077b6:	f000 fc43 	bl	8008040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff fc7b 	bl	80070b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077c0:	f000 fb64 	bl	8007e8c <xTaskResumeAll>
 80077c4:	b938      	cbnz	r0, 80077d6 <xQueueSemaphoreTake+0x106>
					portYIELD_WITHIN_API();
 80077c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077ca:	f8c8 3000 	str.w	r3, [r8]
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80077d8:	f001 f874 	bl	80088c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0a8      	beq.n	8007734 <xQueueSemaphoreTake+0x64>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077e2:	3b01      	subs	r3, #1
 80077e4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	b913      	cbnz	r3, 80077f0 <xQueueSemaphoreTake+0x120>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077ea:	f000 fde9 	bl	80083c0 <pvTaskIncrementMutexHeldCount>
 80077ee:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	b163      	cbz	r3, 800780e <xQueueSemaphoreTake+0x13e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077f4:	f104 0010 	add.w	r0, r4, #16
 80077f8:	f000 fc5e 	bl	80080b8 <xTaskRemoveFromEventList>
 80077fc:	b138      	cbz	r0, 800780e <xQueueSemaphoreTake+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 80077fe:	4b18      	ldr	r3, [pc, #96]	; (8007860 <xQueueSemaphoreTake+0x190>)
 8007800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800780e:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8007810:	f001 f87e 	bl	8008910 <vPortExitCritical>
}
 8007814:	4628      	mov	r0, r5
 8007816:	b004      	add	sp, #16
 8007818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800781c:	4620      	mov	r0, r4
 800781e:	f7ff fc4a 	bl	80070b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007822:	f000 fb33 	bl	8007e8c <xTaskResumeAll>
 8007826:	e7d6      	b.n	80077d6 <xQueueSemaphoreTake+0x106>
			prvUnlockQueue( pxQueue );
 8007828:	4620      	mov	r0, r4
 800782a:	f7ff fc44 	bl	80070b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800782e:	f000 fb2d 	bl	8007e8c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007832:	4620      	mov	r0, r4
 8007834:	f7ff fbec 	bl	8007010 <prvIsQueueEmpty>
 8007838:	2800      	cmp	r0, #0
 800783a:	d0cc      	beq.n	80077d6 <xQueueSemaphoreTake+0x106>
					if( xInheritanceOccurred != pdFALSE )
 800783c:	2d00      	cmp	r5, #0
 800783e:	d0e9      	beq.n	8007814 <xQueueSemaphoreTake+0x144>
						taskENTER_CRITICAL();
 8007840:	f001 f840 	bl	80088c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007844:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007846:	b119      	cbz	r1, 8007850 <xQueueSemaphoreTake+0x180>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007848:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800784a:	6819      	ldr	r1, [r3, #0]
 800784c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007850:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8007852:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007854:	f000 fd62 	bl	800831c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007858:	f001 f85a 	bl	8008910 <vPortExitCritical>
 800785c:	e7da      	b.n	8007814 <xQueueSemaphoreTake+0x144>
 800785e:	bf00      	nop
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <xQueueTakeMutexRecursive>:
	{
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8007868:	4604      	mov	r4, r0
 800786a:	b950      	cbnz	r0, 8007882 <xQueueTakeMutexRecursive+0x1e>
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	b672      	cpsid	i
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	b662      	cpsie	i
 8007880:	e7fe      	b.n	8007880 <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007882:	6886      	ldr	r6, [r0, #8]
 8007884:	f000 fcae 	bl	80081e4 <xTaskGetCurrentTaskHandle>
 8007888:	4286      	cmp	r6, r0
 800788a:	d104      	bne.n	8007896 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800788c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800788e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007890:	3301      	adds	r3, #1
 8007892:	60e3      	str	r3, [r4, #12]
	}
 8007894:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007896:	4629      	mov	r1, r5
 8007898:	4620      	mov	r0, r4
 800789a:	f7ff ff19 	bl	80076d0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800789e:	2800      	cmp	r0, #0
 80078a0:	d0f8      	beq.n	8007894 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	3301      	adds	r3, #1
 80078a6:	60e3      	str	r3, [r4, #12]
		return xReturn;
 80078a8:	e7f4      	b.n	8007894 <xQueueTakeMutexRecursive+0x30>
	...

080078ac <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078ac:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078ae:	4a07      	ldr	r2, [pc, #28]	; (80078cc <vQueueAddToRegistry+0x20>)
	{
 80078b0:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078b2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80078b6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80078ba:	b91d      	cbnz	r5, 80078c4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078c0:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078c2:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c4:	3301      	adds	r3, #1
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d1f3      	bne.n	80078b2 <vQueueAddToRegistry+0x6>
 80078ca:	e7fa      	b.n	80078c2 <vQueueAddToRegistry+0x16>
 80078cc:	20008448 	.word	0x20008448

080078d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4604      	mov	r4, r0
 80078d4:	460d      	mov	r5, r1
 80078d6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078d8:	f000 fff4 	bl	80088c4 <vPortEnterCritical>
 80078dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80078e0:	2bff      	cmp	r3, #255	; 0xff
 80078e2:	d102      	bne.n	80078ea <vQueueWaitForMessageRestricted+0x1a>
 80078e4:	2300      	movs	r3, #0
 80078e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80078ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	d102      	bne.n	80078f8 <vQueueWaitForMessageRestricted+0x28>
 80078f2:	2300      	movs	r3, #0
 80078f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078f8:	f001 f80a 	bl	8008910 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078fe:	b92b      	cbnz	r3, 800790c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007900:	4632      	mov	r2, r6
 8007902:	4629      	mov	r1, r5
 8007904:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007908:	f000 fbb6 	bl	8008078 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800790c:	4620      	mov	r0, r4
	}
 800790e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007912:	f7ff bbd0 	b.w	80070b6 <prvUnlockQueue>
	...

08007918 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800791e:	f000 ffd1 	bl	80088c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007922:	4b2e      	ldr	r3, [pc, #184]	; (80079dc <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8007924:	4d2e      	ldr	r5, [pc, #184]	; (80079e0 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4f2e      	ldr	r7, [pc, #184]	; (80079e4 <prvAddNewTaskToReadyList+0xcc>)
 800792a:	3201      	adds	r2, #1
 800792c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800792e:	682e      	ldr	r6, [r5, #0]
 8007930:	2e00      	cmp	r6, #0
 8007932:	d148      	bne.n	80079c6 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007934:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d11f      	bne.n	800797c <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800793c:	f04f 0814 	mov.w	r8, #20
 8007940:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007944:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007946:	f7ff fb21 	bl	8006f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800794a:	2e38      	cmp	r6, #56	; 0x38
 800794c:	d1f8      	bne.n	8007940 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 800794e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007a10 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8007952:	4e25      	ldr	r6, [pc, #148]	; (80079e8 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8007954:	4640      	mov	r0, r8
 8007956:	f7ff fb19 	bl	8006f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff fb16 	bl	8006f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007960:	4822      	ldr	r0, [pc, #136]	; (80079ec <prvAddNewTaskToReadyList+0xd4>)
 8007962:	f7ff fb13 	bl	8006f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007966:	4822      	ldr	r0, [pc, #136]	; (80079f0 <prvAddNewTaskToReadyList+0xd8>)
 8007968:	f7ff fb10 	bl	8006f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800796c:	4821      	ldr	r0, [pc, #132]	; (80079f4 <prvAddNewTaskToReadyList+0xdc>)
 800796e:	f7ff fb0d 	bl	8006f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007972:	4b21      	ldr	r3, [pc, #132]	; (80079f8 <prvAddNewTaskToReadyList+0xe0>)
 8007974:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007978:	4b20      	ldr	r3, [pc, #128]	; (80079fc <prvAddNewTaskToReadyList+0xe4>)
 800797a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800797c:	4a20      	ldr	r2, [pc, #128]	; (8007a00 <prvAddNewTaskToReadyList+0xe8>)
 800797e:	6813      	ldr	r3, [r2, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007984:	4a1f      	ldr	r2, [pc, #124]	; (8007a04 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007986:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007988:	6811      	ldr	r1, [r2, #0]
 800798a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800798c:	428b      	cmp	r3, r1
 800798e:	d900      	bls.n	8007992 <prvAddNewTaskToReadyList+0x7a>
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	2014      	movs	r0, #20
 8007994:	1d21      	adds	r1, r4, #4
 8007996:	fb00 7003 	mla	r0, r0, r3, r7
 800799a:	f7ff fb05 	bl	8006fa8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800799e:	f000 ffb7 	bl	8008910 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80079a2:	4b19      	ldr	r3, [pc, #100]	; (8007a08 <prvAddNewTaskToReadyList+0xf0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	b163      	cbz	r3, 80079c2 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d207      	bcs.n	80079c2 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 80079b2:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <prvAddNewTaskToReadyList+0xf4>)
 80079b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
}
 80079c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80079c6:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <prvAddNewTaskToReadyList+0xf0>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1d6      	bne.n	800797c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d8d1      	bhi.n	800797c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80079d8:	602c      	str	r4, [r5, #0]
 80079da:	e7cf      	b.n	800797c <prvAddNewTaskToReadyList+0x64>
 80079dc:	20003c74 	.word	0x20003c74
 80079e0:	20003808 	.word	0x20003808
 80079e4:	20003814 	.word	0x20003814
 80079e8:	20003ca0 	.word	0x20003ca0
 80079ec:	20003cbc 	.word	0x20003cbc
 80079f0:	20003ce8 	.word	0x20003ce8
 80079f4:	20003cd4 	.word	0x20003cd4
 80079f8:	2000380c 	.word	0x2000380c
 80079fc:	20003810 	.word	0x20003810
 8007a00:	20003c84 	.word	0x20003c84
 8007a04:	20003c88 	.word	0x20003c88
 8007a08:	20003cd0 	.word	0x20003cd0
 8007a0c:	e000ed04 	.word	0xe000ed04
 8007a10:	20003c8c 	.word	0x20003c8c

08007a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a14:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a16:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8007a1a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a1c:	b93b      	cbnz	r3, 8007a2e <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a1e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007a20:	f001 f93e 	bl	8008ca0 <vPortFree>
				vPortFree( pxTCB );
 8007a24:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007a2a:	f001 b939 	b.w	8008ca0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d0f9      	beq.n	8007a26 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d00a      	beq.n	8007a4c <prvDeleteTCB+0x38>
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	b672      	cpsid	i
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	b662      	cpsie	i
 8007a4a:	e7fe      	b.n	8007a4a <prvDeleteTCB+0x36>
	}
 8007a4c:	bd10      	pop	{r4, pc}
	...

08007a50 <prvIdleTask>:
{
 8007a50:	b580      	push	{r7, lr}
				taskYIELD();
 8007a52:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8007ab0 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a56:	4f12      	ldr	r7, [pc, #72]	; (8007aa0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a58:	4c12      	ldr	r4, [pc, #72]	; (8007aa4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007a5a:	4d13      	ldr	r5, [pc, #76]	; (8007aa8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	b963      	cbnz	r3, 8007a7a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a60:	4b12      	ldr	r3, [pc, #72]	; (8007aac <prvIdleTask+0x5c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d9f8      	bls.n	8007a5a <prvIdleTask+0xa>
				taskYIELD();
 8007a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a6c:	f8c8 3000 	str.w	r3, [r8]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	e7ee      	b.n	8007a58 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8007a7a:	f000 ff23 	bl	80088c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a82:	1d30      	adds	r0, r6, #4
 8007a84:	f7ff fab3 	bl	8006fee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007a94:	f000 ff3c 	bl	8008910 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff ffbb 	bl	8007a14 <prvDeleteTCB>
 8007a9e:	e7dd      	b.n	8007a5c <prvIdleTask+0xc>
 8007aa0:	20003ce8 	.word	0x20003ce8
 8007aa4:	20003c78 	.word	0x20003c78
 8007aa8:	20003c74 	.word	0x20003c74
 8007aac:	20003814 	.word	0x20003814
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab4:	4a06      	ldr	r2, [pc, #24]	; (8007ad0 <prvResetNextTaskUnblockTime+0x1c>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	6819      	ldr	r1, [r3, #0]
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <prvResetNextTaskUnblockTime+0x20>)
 8007abc:	b919      	cbnz	r1, 8007ac6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007abe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ac2:	601a      	str	r2, [r3, #0]
	}
}
 8007ac4:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007aca:	68d2      	ldr	r2, [r2, #12]
 8007acc:	6852      	ldr	r2, [r2, #4]
 8007ace:	e7f8      	b.n	8007ac2 <prvResetNextTaskUnblockTime+0xe>
 8007ad0:	2000380c 	.word	0x2000380c
 8007ad4:	20003cb4 	.word	0x20003cb4

08007ad8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007adc:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ae4:	21a5      	movs	r1, #165	; 0xa5
 8007ae6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007ae8:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aea:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007aee:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007af2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007af4:	f002 fc7b 	bl	800a3ee <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007af8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007afa:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007afc:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8007b00:	b395      	cbz	r5, 8007b68 <prvInitialiseNewTask.isra.2+0x90>
 8007b02:	1e6b      	subs	r3, r5, #1
 8007b04:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8007b08:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b0a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007b0e:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8007b12:	7819      	ldrb	r1, [r3, #0]
 8007b14:	b109      	cbz	r1, 8007b1a <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b16:	42ab      	cmp	r3, r5
 8007b18:	d1f7      	bne.n	8007b0a <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b20:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8007b22:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b26:	1d20      	adds	r0, r4, #4
 8007b28:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007b2a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8007b2e:	bf28      	it	cs
 8007b30:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8007b32:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007b34:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b36:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b3a:	f7ff fa32 	bl	8006fa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b3e:	f104 0018 	add.w	r0, r4, #24
 8007b42:	f7ff fa2e 	bl	8006fa2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007b46:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b4a:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b4c:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4e:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b50:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b52:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b54:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b56:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b5a:	f000 fe8b 	bl	8008874 <pxPortInitialiseStack>
 8007b5e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007b60:	b106      	cbz	r6, 8007b64 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b62:	6034      	str	r4, [r6, #0]
}
 8007b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b68:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8007b6c:	e7d8      	b.n	8007b20 <prvInitialiseNewTask.isra.2+0x48>
	...

08007b70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b72:	4b16      	ldr	r3, [pc, #88]	; (8007bcc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8007b74:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b76:	4e16      	ldr	r6, [pc, #88]	; (8007bd0 <prvAddCurrentTaskToDelayedList+0x60>)
{
 8007b78:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8007b7a:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b7c:	6830      	ldr	r0, [r6, #0]
 8007b7e:	3004      	adds	r0, #4
 8007b80:	f7ff fa35 	bl	8006fee <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b84:	1c6b      	adds	r3, r5, #1
 8007b86:	4633      	mov	r3, r6
 8007b88:	d107      	bne.n	8007b9a <prvAddCurrentTaskToDelayedList+0x2a>
 8007b8a:	b137      	cbz	r7, 8007b9a <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b8c:	6831      	ldr	r1, [r6, #0]
 8007b8e:	4811      	ldr	r0, [pc, #68]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0x64>)
 8007b90:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b96:	f7ff ba07 	b.w	8006fa8 <vListInsertEnd>
 8007b9a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8007ba0:	d307      	bcc.n	8007bb2 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba2:	4a0d      	ldr	r2, [pc, #52]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0x68>)
 8007ba4:	6810      	ldr	r0, [r2, #0]
 8007ba6:	6819      	ldr	r1, [r3, #0]
}
 8007ba8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bac:	3104      	adds	r1, #4
 8007bae:	f7ff ba07 	b.w	8006fc0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bb2:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x6c>)
 8007bb4:	6810      	ldr	r0, [r2, #0]
 8007bb6:	6819      	ldr	r1, [r3, #0]
 8007bb8:	3104      	adds	r1, #4
 8007bba:	f7ff fa01 	bl	8006fc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bbe:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <prvAddCurrentTaskToDelayedList+0x70>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	42a2      	cmp	r2, r4
 8007bc4:	d900      	bls.n	8007bc8 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8007bc6:	601c      	str	r4, [r3, #0]
}
 8007bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20003cfc 	.word	0x20003cfc
 8007bd0:	20003808 	.word	0x20003808
 8007bd4:	20003cd4 	.word	0x20003cd4
 8007bd8:	20003810 	.word	0x20003810
 8007bdc:	2000380c 	.word	0x2000380c
 8007be0:	20003cb4 	.word	0x20003cb4

08007be4 <xTaskCreateStatic>:
	{
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007bec:	b955      	cbnz	r5, 8007c04 <xTaskCreateStatic+0x20>
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	b672      	cpsid	i
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	b662      	cpsie	i
 8007c02:	e7fe      	b.n	8007c02 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8007c04:	b954      	cbnz	r4, 8007c1c <xTaskCreateStatic+0x38>
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	b672      	cpsid	i
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	b662      	cpsie	i
 8007c1a:	e7fe      	b.n	8007c1a <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c1c:	265c      	movs	r6, #92	; 0x5c
 8007c1e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c20:	9e05      	ldr	r6, [sp, #20]
 8007c22:	2e5c      	cmp	r6, #92	; 0x5c
 8007c24:	d00a      	beq.n	8007c3c <xTaskCreateStatic+0x58>
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	b672      	cpsid	i
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	b662      	cpsie	i
 8007c3a:	e7fe      	b.n	8007c3a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c3c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c3e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c40:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c42:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c46:	ad04      	add	r5, sp, #16
 8007c48:	9402      	str	r4, [sp, #8]
 8007c4a:	9501      	str	r5, [sp, #4]
 8007c4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c4e:	9500      	str	r5, [sp, #0]
 8007c50:	f7ff ff42 	bl	8007ad8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c54:	4620      	mov	r0, r4
 8007c56:	f7ff fe5f 	bl	8007918 <prvAddNewTaskToReadyList>
	}
 8007c5a:	9804      	ldr	r0, [sp, #16]
 8007c5c:	b006      	add	sp, #24
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}

08007c60 <xTaskCreate>:
	{
 8007c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c64:	4607      	mov	r7, r0
 8007c66:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c68:	0090      	lsls	r0, r2, #2
	{
 8007c6a:	4688      	mov	r8, r1
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c70:	f000 ff86 	bl	8008b80 <pvPortMalloc>
			if( pxStack != NULL )
 8007c74:	4605      	mov	r5, r0
 8007c76:	b1e8      	cbz	r0, 8007cb4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c78:	205c      	movs	r0, #92	; 0x5c
 8007c7a:	f000 ff81 	bl	8008b80 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007c7e:	4604      	mov	r4, r0
 8007c80:	b1a8      	cbz	r0, 8007cae <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c82:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8007c84:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c86:	4632      	mov	r2, r6
 8007c88:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c8a:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c90:	9002      	str	r0, [sp, #8]
 8007c92:	4638      	mov	r0, r7
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	f7ff ff1c 	bl	8007ad8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff fe39 	bl	8007918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ca6:	2001      	movs	r0, #1
	}
 8007ca8:	b005      	add	sp, #20
 8007caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f000 fff6 	bl	8008ca0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8007cb8:	e7f6      	b.n	8007ca8 <xTaskCreate+0x48>
	...

08007cbc <vTaskStartScheduler>:
{
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cc0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cc2:	aa07      	add	r2, sp, #28
 8007cc4:	a906      	add	r1, sp, #24
 8007cc6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cc8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ccc:	f7ff f946 	bl	8006f5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cd0:	9b05      	ldr	r3, [sp, #20]
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	9302      	str	r3, [sp, #8]
 8007cd6:	9b06      	ldr	r3, [sp, #24]
 8007cd8:	4917      	ldr	r1, [pc, #92]	; (8007d38 <vTaskStartScheduler+0x7c>)
 8007cda:	4818      	ldr	r0, [pc, #96]	; (8007d3c <vTaskStartScheduler+0x80>)
 8007cdc:	e9cd 4300 	strd	r4, r3, [sp]
 8007ce0:	4623      	mov	r3, r4
 8007ce2:	f7ff ff7f 	bl	8007be4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007ce6:	b1b8      	cbz	r0, 8007d18 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8007ce8:	f000 fbc8 	bl	800847c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007cec:	2801      	cmp	r0, #1
 8007cee:	d115      	bne.n	8007d1c <vTaskStartScheduler+0x60>
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	b672      	cpsid	i
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d04:	4b0e      	ldr	r3, [pc, #56]	; (8007d40 <vTaskStartScheduler+0x84>)
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <vTaskStartScheduler+0x88>)
 8007d0e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d10:	4b0d      	ldr	r3, [pc, #52]	; (8007d48 <vTaskStartScheduler+0x8c>)
 8007d12:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007d14:	f000 fe78 	bl	8008a08 <xPortStartScheduler>
}
 8007d18:	b008      	add	sp, #32
 8007d1a:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d1fb      	bne.n	8007d18 <vTaskStartScheduler+0x5c>
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	b672      	cpsid	i
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	b662      	cpsie	i
 8007d34:	e7fe      	b.n	8007d34 <vTaskStartScheduler+0x78>
 8007d36:	bf00      	nop
 8007d38:	0800e05d 	.word	0x0800e05d
 8007d3c:	08007a51 	.word	0x08007a51
 8007d40:	20003cb4 	.word	0x20003cb4
 8007d44:	20003cd0 	.word	0x20003cd0
 8007d48:	20003cfc 	.word	0x20003cfc

08007d4c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007d4c:	4a02      	ldr	r2, [pc, #8]	; (8007d58 <vTaskSuspendAll+0xc>)
 8007d4e:	6813      	ldr	r3, [r2, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	6013      	str	r3, [r2, #0]
}
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20003c80 	.word	0x20003c80

08007d5c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <xTaskGetTickCount+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20003cfc 	.word	0x20003cfc

08007d68 <xTaskIncrementTick>:
{
 8007d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d6c:	4b3c      	ldr	r3, [pc, #240]	; (8007e60 <xTaskIncrementTick+0xf8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d16d      	bne.n	8007e50 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d74:	4b3b      	ldr	r3, [pc, #236]	; (8007e64 <xTaskIncrementTick+0xfc>)
 8007d76:	681c      	ldr	r4, [r3, #0]
 8007d78:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8007d7a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d7c:	b9cc      	cbnz	r4, 8007db2 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8007d7e:	4b3a      	ldr	r3, [pc, #232]	; (8007e68 <xTaskIncrementTick+0x100>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	b152      	cbz	r2, 8007d9c <xTaskIncrementTick+0x34>
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	e7fe      	b.n	8007d9a <xTaskIncrementTick+0x32>
 8007d9c:	4a33      	ldr	r2, [pc, #204]	; (8007e6c <xTaskIncrementTick+0x104>)
 8007d9e:	6819      	ldr	r1, [r3, #0]
 8007da0:	6810      	ldr	r0, [r2, #0]
 8007da2:	6018      	str	r0, [r3, #0]
 8007da4:	6011      	str	r1, [r2, #0]
 8007da6:	4a32      	ldr	r2, [pc, #200]	; (8007e70 <xTaskIncrementTick+0x108>)
 8007da8:	6813      	ldr	r3, [r2, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	f7ff fe81 	bl	8007ab4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007db2:	4d30      	ldr	r5, [pc, #192]	; (8007e74 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007db4:	f04f 0b00 	mov.w	fp, #0
 8007db8:	4f2f      	ldr	r7, [pc, #188]	; (8007e78 <xTaskIncrementTick+0x110>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	d911      	bls.n	8007de4 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	4b2e      	ldr	r3, [pc, #184]	; (8007e7c <xTaskIncrementTick+0x114>)
 8007dc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007dc6:	2214      	movs	r2, #20
 8007dc8:	434a      	muls	r2, r1
 8007dca:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8007dcc:	2a02      	cmp	r2, #2
 8007dce:	bf28      	it	cs
 8007dd0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8007dd4:	4a2a      	ldr	r2, [pc, #168]	; (8007e80 <xTaskIncrementTick+0x118>)
 8007dd6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8007dd8:	2a00      	cmp	r2, #0
}
 8007dda:	bf0c      	ite	eq
 8007ddc:	4658      	moveq	r0, fp
 8007dde:	2001      	movne	r0, #1
 8007de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007de4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007e68 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8007de8:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007e88 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dec:	f8d9 2000 	ldr.w	r2, [r9]
 8007df0:	6812      	ldr	r2, [r2, #0]
 8007df2:	b91a      	cbnz	r2, 8007dfc <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295
 8007df8:	602a      	str	r2, [r5, #0]
					break;
 8007dfa:	e7e1      	b.n	8007dc0 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8007e00:	68d2      	ldr	r2, [r2, #12]
 8007e02:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e04:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007e06:	428c      	cmp	r4, r1
 8007e08:	d201      	bcs.n	8007e0e <xTaskIncrementTick+0xa6>
						xNextTaskUnblockTime = xItemValue;
 8007e0a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e0c:	e7d8      	b.n	8007dc0 <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e0e:	f106 0804 	add.w	r8, r6, #4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f7ff f8eb 	bl	8006fee <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e18:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8007e1a:	b119      	cbz	r1, 8007e24 <xTaskIncrementTick+0xbc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e1c:	f106 0018 	add.w	r0, r6, #24
 8007e20:	f7ff f8e5 	bl	8006fee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e24:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007e26:	f8da 1000 	ldr.w	r1, [sl]
 8007e2a:	4288      	cmp	r0, r1
 8007e2c:	d901      	bls.n	8007e32 <xTaskIncrementTick+0xca>
 8007e2e:	f8ca 0000 	str.w	r0, [sl]
 8007e32:	2214      	movs	r2, #20
 8007e34:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <xTaskIncrementTick+0x114>)
 8007e36:	4641      	mov	r1, r8
 8007e38:	fb02 3000 	mla	r0, r2, r0, r3
 8007e3c:	f7ff f8b4 	bl	8006fa8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e40:	6838      	ldr	r0, [r7, #0]
 8007e42:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8007e44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007e46:	4291      	cmp	r1, r2
 8007e48:	bf28      	it	cs
 8007e4a:	f04f 0b01 	movcs.w	fp, #1
 8007e4e:	e7cd      	b.n	8007dec <xTaskIncrementTick+0x84>
		++uxPendedTicks;
 8007e50:	4a0c      	ldr	r2, [pc, #48]	; (8007e84 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007e52:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8007e56:	6813      	ldr	r3, [r2, #0]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	e7ba      	b.n	8007dd4 <xTaskIncrementTick+0x6c>
 8007e5e:	bf00      	nop
 8007e60:	20003c80 	.word	0x20003c80
 8007e64:	20003cfc 	.word	0x20003cfc
 8007e68:	2000380c 	.word	0x2000380c
 8007e6c:	20003810 	.word	0x20003810
 8007e70:	20003cb8 	.word	0x20003cb8
 8007e74:	20003cb4 	.word	0x20003cb4
 8007e78:	20003808 	.word	0x20003808
 8007e7c:	20003814 	.word	0x20003814
 8007e80:	20003d00 	.word	0x20003d00
 8007e84:	20003c7c 	.word	0x20003c7c
 8007e88:	20003c88 	.word	0x20003c88

08007e8c <xTaskResumeAll>:
{
 8007e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8007e90:	4c30      	ldr	r4, [pc, #192]	; (8007f54 <xTaskResumeAll+0xc8>)
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	b953      	cbnz	r3, 8007eac <xTaskResumeAll+0x20>
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	b672      	cpsid	i
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	b662      	cpsie	i
 8007eaa:	e7fe      	b.n	8007eaa <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8007eac:	f000 fd0a 	bl	80088c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb6:	6824      	ldr	r4, [r4, #0]
 8007eb8:	b12c      	cbz	r4, 8007ec6 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8007eba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007ebc:	f000 fd28 	bl	8008910 <vPortExitCritical>
}
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ec6:	4b24      	ldr	r3, [pc, #144]	; (8007f58 <xTaskResumeAll+0xcc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0f5      	beq.n	8007eba <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ece:	4d23      	ldr	r5, [pc, #140]	; (8007f5c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8007ed0:	4e23      	ldr	r6, [pc, #140]	; (8007f60 <xTaskResumeAll+0xd4>)
 8007ed2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8007f74 <xTaskResumeAll+0xe8>
 8007ed6:	e01d      	b.n	8007f14 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed8:	68eb      	ldr	r3, [r5, #12]
 8007eda:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007edc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ede:	f104 0018 	add.w	r0, r4, #24
 8007ee2:	f7ff f884 	bl	8006fee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	f7ff f881 	bl	8006fee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007eee:	6832      	ldr	r2, [r6, #0]
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d900      	bls.n	8007ef6 <xTaskResumeAll+0x6a>
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	2014      	movs	r0, #20
 8007ef8:	4639      	mov	r1, r7
 8007efa:	fb00 8003 	mla	r0, r0, r3, r8
 8007efe:	f7ff f853 	bl	8006fa8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f02:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <xTaskResumeAll+0xd8>)
 8007f04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d302      	bcc.n	8007f14 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8007f0e:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <xTaskResumeAll+0xdc>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1de      	bne.n	8007ed8 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 8007f1a:	b10c      	cbz	r4, 8007f20 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8007f1c:	f7ff fdca 	bl	8007ab4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007f20:	4d12      	ldr	r5, [pc, #72]	; (8007f6c <xTaskResumeAll+0xe0>)
 8007f22:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f24:	b144      	cbz	r4, 8007f38 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8007f26:	4e10      	ldr	r6, [pc, #64]	; (8007f68 <xTaskResumeAll+0xdc>)
 8007f28:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007f2a:	f7ff ff1d 	bl	8007d68 <xTaskIncrementTick>
 8007f2e:	b100      	cbz	r0, 8007f32 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8007f30:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f32:	3c01      	subs	r4, #1
 8007f34:	d1f9      	bne.n	8007f2a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8007f36:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <xTaskResumeAll+0xdc>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0bc      	beq.n	8007eba <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8007f40:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <xTaskResumeAll+0xe4>)
 8007f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007f50:	2401      	movs	r4, #1
 8007f52:	e7b3      	b.n	8007ebc <xTaskResumeAll+0x30>
 8007f54:	20003c80 	.word	0x20003c80
 8007f58:	20003c74 	.word	0x20003c74
 8007f5c:	20003cbc 	.word	0x20003cbc
 8007f60:	20003c88 	.word	0x20003c88
 8007f64:	20003808 	.word	0x20003808
 8007f68:	20003d00 	.word	0x20003d00
 8007f6c:	20003c7c 	.word	0x20003c7c
 8007f70:	e000ed04 	.word	0xe000ed04
 8007f74:	20003814 	.word	0x20003814

08007f78 <vTaskDelay>:
	{
 8007f78:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f7a:	b940      	cbnz	r0, 8007f8e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <vTaskDelay+0x44>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
	}
 8007f8c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <vTaskDelay+0x48>)
 8007f90:	6819      	ldr	r1, [r3, #0]
 8007f92:	b151      	cbz	r1, 8007faa <vTaskDelay+0x32>
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	b672      	cpsid	i
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	b662      	cpsie	i
 8007fa8:	e7fe      	b.n	8007fa8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007faa:	f7ff fecf 	bl	8007d4c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fae:	f7ff fddf 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007fb2:	f7ff ff6b 	bl	8007e8c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d0e0      	beq.n	8007f7c <vTaskDelay+0x4>
 8007fba:	e7e7      	b.n	8007f8c <vTaskDelay+0x14>
 8007fbc:	e000ed04 	.word	0xe000ed04
 8007fc0:	20003c80 	.word	0x20003c80

08007fc4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fc4:	4b19      	ldr	r3, [pc, #100]	; (800802c <vTaskSwitchContext+0x68>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	4b19      	ldr	r3, [pc, #100]	; (8008030 <vTaskSwitchContext+0x6c>)
{
 8007fca:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fcc:	b112      	cbz	r2, 8007fd4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8007fd4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd6:	2714      	movs	r7, #20
 8007fd8:	4d16      	ldr	r5, [pc, #88]	; (8008034 <vTaskSwitchContext+0x70>)
 8007fda:	4a17      	ldr	r2, [pc, #92]	; (8008038 <vTaskSwitchContext+0x74>)
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	4616      	mov	r6, r2
 8007fe0:	fb07 f103 	mul.w	r1, r7, r3
 8007fe4:	5854      	ldr	r4, [r2, r1]
 8007fe6:	1850      	adds	r0, r2, r1
 8007fe8:	b18c      	cbz	r4, 800800e <vTaskSwitchContext+0x4a>
 8007fea:	6844      	ldr	r4, [r0, #4]
 8007fec:	3108      	adds	r1, #8
 8007fee:	6864      	ldr	r4, [r4, #4]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	4294      	cmp	r4, r2
 8007ff4:	6044      	str	r4, [r0, #4]
 8007ff6:	bf04      	itt	eq
 8007ff8:	6862      	ldreq	r2, [r4, #4]
 8007ffa:	6042      	streq	r2, [r0, #4]
 8007ffc:	2214      	movs	r2, #20
 8007ffe:	fb02 6203 	mla	r2, r2, r3, r6
 8008002:	6852      	ldr	r2, [r2, #4]
 8008004:	68d1      	ldr	r1, [r2, #12]
 8008006:	4a0d      	ldr	r2, [pc, #52]	; (800803c <vTaskSwitchContext+0x78>)
 8008008:	6011      	str	r1, [r2, #0]
 800800a:	602b      	str	r3, [r5, #0]
}
 800800c:	e7e1      	b.n	8007fd2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800800e:	b953      	cbnz	r3, 8008026 <vTaskSwitchContext+0x62>
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	b672      	cpsid	i
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	b662      	cpsie	i
 8008024:	e7fe      	b.n	8008024 <vTaskSwitchContext+0x60>
 8008026:	3b01      	subs	r3, #1
 8008028:	e7da      	b.n	8007fe0 <vTaskSwitchContext+0x1c>
 800802a:	bf00      	nop
 800802c:	20003c80 	.word	0x20003c80
 8008030:	20003d00 	.word	0x20003d00
 8008034:	20003c88 	.word	0x20003c88
 8008038:	20003814 	.word	0x20003814
 800803c:	20003808 	.word	0x20003808

08008040 <vTaskPlaceOnEventList>:
{
 8008040:	b510      	push	{r4, lr}
 8008042:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008044:	b950      	cbnz	r0, 800805c <vTaskPlaceOnEventList+0x1c>
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	b672      	cpsid	i
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	b662      	cpsie	i
 800805a:	e7fe      	b.n	800805a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800805c:	4b05      	ldr	r3, [pc, #20]	; (8008074 <vTaskPlaceOnEventList+0x34>)
 800805e:	6819      	ldr	r1, [r3, #0]
 8008060:	3118      	adds	r1, #24
 8008062:	f7fe ffad 	bl	8006fc0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008066:	4620      	mov	r0, r4
 8008068:	2101      	movs	r1, #1
}
 800806a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800806e:	f7ff bd7f 	b.w	8007b70 <prvAddCurrentTaskToDelayedList>
 8008072:	bf00      	nop
 8008074:	20003808 	.word	0x20003808

08008078 <vTaskPlaceOnEventListRestricted>:
	{
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	460d      	mov	r5, r1
 800807c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800807e:	b950      	cbnz	r0, 8008096 <vTaskPlaceOnEventListRestricted+0x1e>
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	b672      	cpsid	i
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	b662      	cpsie	i
 8008094:	e7fe      	b.n	8008094 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008098:	6819      	ldr	r1, [r3, #0]
 800809a:	3118      	adds	r1, #24
 800809c:	f7fe ff84 	bl	8006fa8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80080a0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080a2:	4621      	mov	r1, r4
 80080a4:	bf0c      	ite	eq
 80080a6:	4628      	moveq	r0, r5
 80080a8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80080ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080b0:	f7ff bd5e 	b.w	8007b70 <prvAddCurrentTaskToDelayedList>
 80080b4:	20003808 	.word	0x20003808

080080b8 <xTaskRemoveFromEventList>:
{
 80080b8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ba:	68c3      	ldr	r3, [r0, #12]
 80080bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80080be:	b954      	cbnz	r4, 80080d6 <xTaskRemoveFromEventList+0x1e>
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	b672      	cpsid	i
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	b662      	cpsie	i
 80080d4:	e7fe      	b.n	80080d4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080d6:	f104 0518 	add.w	r5, r4, #24
 80080da:	4628      	mov	r0, r5
 80080dc:	f7fe ff87 	bl	8006fee <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e0:	4b11      	ldr	r3, [pc, #68]	; (8008128 <xTaskRemoveFromEventList+0x70>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	b9d3      	cbnz	r3, 800811c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080e6:	1d25      	adds	r5, r4, #4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f7fe ff80 	bl	8006fee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080ee:	4a0f      	ldr	r2, [pc, #60]	; (800812c <xTaskRemoveFromEventList+0x74>)
 80080f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80080f2:	6811      	ldr	r1, [r2, #0]
 80080f4:	428b      	cmp	r3, r1
 80080f6:	d900      	bls.n	80080fa <xTaskRemoveFromEventList+0x42>
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	4a0d      	ldr	r2, [pc, #52]	; (8008130 <xTaskRemoveFromEventList+0x78>)
 80080fc:	2014      	movs	r0, #20
 80080fe:	4629      	mov	r1, r5
 8008100:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008104:	f7fe ff50 	bl	8006fa8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <xTaskRemoveFromEventList+0x7c>)
 800810a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	429a      	cmp	r2, r3
 8008112:	d906      	bls.n	8008122 <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 8008114:	2001      	movs	r0, #1
 8008116:	4b08      	ldr	r3, [pc, #32]	; (8008138 <xTaskRemoveFromEventList+0x80>)
 8008118:	6018      	str	r0, [r3, #0]
}
 800811a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800811c:	4629      	mov	r1, r5
 800811e:	4807      	ldr	r0, [pc, #28]	; (800813c <xTaskRemoveFromEventList+0x84>)
 8008120:	e7f0      	b.n	8008104 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 8008122:	2000      	movs	r0, #0
	return xReturn;
 8008124:	e7f9      	b.n	800811a <xTaskRemoveFromEventList+0x62>
 8008126:	bf00      	nop
 8008128:	20003c80 	.word	0x20003c80
 800812c:	20003c88 	.word	0x20003c88
 8008130:	20003814 	.word	0x20003814
 8008134:	20003808 	.word	0x20003808
 8008138:	20003d00 	.word	0x20003d00
 800813c:	20003cbc 	.word	0x20003cbc

08008140 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008140:	4b03      	ldr	r3, [pc, #12]	; (8008150 <vTaskInternalSetTimeOutState+0x10>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008146:	4b03      	ldr	r3, [pc, #12]	; (8008154 <vTaskInternalSetTimeOutState+0x14>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6043      	str	r3, [r0, #4]
}
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20003cb8 	.word	0x20003cb8
 8008154:	20003cfc 	.word	0x20003cfc

08008158 <xTaskCheckForTimeOut>:
{
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800815c:	4605      	mov	r5, r0
 800815e:	b950      	cbnz	r0, 8008176 <xTaskCheckForTimeOut+0x1e>
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	b672      	cpsid	i
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	b662      	cpsie	i
 8008174:	e7fe      	b.n	8008174 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8008176:	b951      	cbnz	r1, 800818e <xTaskCheckForTimeOut+0x36>
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	b672      	cpsid	i
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	b662      	cpsie	i
 800818c:	e7fe      	b.n	800818c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800818e:	f000 fb99 	bl	80088c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008192:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008194:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8008196:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008198:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800819a:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800819c:	1c5e      	adds	r6, r3, #1
 800819e:	d00d      	beq.n	80081bc <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081a0:	4e0c      	ldr	r6, [pc, #48]	; (80081d4 <xTaskCheckForTimeOut+0x7c>)
 80081a2:	682f      	ldr	r7, [r5, #0]
 80081a4:	6836      	ldr	r6, [r6, #0]
 80081a6:	42b7      	cmp	r7, r6
 80081a8:	d001      	beq.n	80081ae <xTaskCheckForTimeOut+0x56>
 80081aa:	4288      	cmp	r0, r1
 80081ac:	d90d      	bls.n	80081ca <xTaskCheckForTimeOut+0x72>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d909      	bls.n	80081c6 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 80081b2:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081b4:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80081b6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081b8:	f7ff ffc2 	bl	8008140 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80081bc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80081be:	f000 fba7 	bl	8008910 <vPortExitCritical>
}
 80081c2:	4620      	mov	r0, r4
 80081c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80081ca:	2401      	movs	r4, #1
 80081cc:	e7f7      	b.n	80081be <xTaskCheckForTimeOut+0x66>
 80081ce:	bf00      	nop
 80081d0:	20003cfc 	.word	0x20003cfc
 80081d4:	20003cb8 	.word	0x20003cb8

080081d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80081d8:	4b01      	ldr	r3, [pc, #4]	; (80081e0 <vTaskMissedYield+0x8>)
 80081da:	2201      	movs	r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
}
 80081de:	4770      	bx	lr
 80081e0:	20003d00 	.word	0x20003d00

080081e4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80081e4:	4b01      	ldr	r3, [pc, #4]	; (80081ec <xTaskGetCurrentTaskHandle+0x8>)
 80081e6:	6818      	ldr	r0, [r3, #0]
	}
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20003808 	.word	0x20003808

080081f0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <xTaskGetSchedulerState+0x18>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	b133      	cbz	r3, 8008204 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f6:	4b05      	ldr	r3, [pc, #20]	; (800820c <xTaskGetSchedulerState+0x1c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80081fc:	bf0c      	ite	eq
 80081fe:	2002      	moveq	r0, #2
 8008200:	2000      	movne	r0, #0
 8008202:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008204:	2001      	movs	r0, #1
	}
 8008206:	4770      	bx	lr
 8008208:	20003cd0 	.word	0x20003cd0
 800820c:	20003c80 	.word	0x20003c80

08008210 <xTaskPriorityInherit>:
	{
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008212:	4604      	mov	r4, r0
 8008214:	b340      	cbz	r0, 8008268 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008216:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <xTaskPriorityInherit+0x74>)
 8008218:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800821a:	6811      	ldr	r1, [r2, #0]
 800821c:	4616      	mov	r6, r2
 800821e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008220:	428b      	cmp	r3, r1
 8008222:	d226      	bcs.n	8008272 <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008224:	6982      	ldr	r2, [r0, #24]
 8008226:	2a00      	cmp	r2, #0
 8008228:	db04      	blt.n	8008234 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822a:	6832      	ldr	r2, [r6, #0]
 800822c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800822e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008232:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008234:	2214      	movs	r2, #20
 8008236:	4d14      	ldr	r5, [pc, #80]	; (8008288 <xTaskPriorityInherit+0x78>)
 8008238:	fb02 5303 	mla	r3, r2, r3, r5
 800823c:	6962      	ldr	r2, [r4, #20]
 800823e:	429a      	cmp	r2, r3
 8008240:	d113      	bne.n	800826a <xTaskPriorityInherit+0x5a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008242:	1d27      	adds	r7, r4, #4
 8008244:	4638      	mov	r0, r7
 8008246:	f7fe fed2 	bl	8006fee <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800824a:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800824c:	4a0f      	ldr	r2, [pc, #60]	; (800828c <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008250:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008252:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008254:	428b      	cmp	r3, r1
 8008256:	d900      	bls.n	800825a <xTaskPriorityInherit+0x4a>
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	2014      	movs	r0, #20
 800825c:	4639      	mov	r1, r7
 800825e:	fb00 5003 	mla	r0, r0, r3, r5
 8008262:	f7fe fea1 	bl	8006fa8 <vListInsertEnd>
				xReturn = pdTRUE;
 8008266:	2001      	movs	r0, #1
	}
 8008268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800826a:	6833      	ldr	r3, [r6, #0]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008270:	e7f9      	b.n	8008266 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008276:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008278:	42a0      	cmp	r0, r4
 800827a:	bf2c      	ite	cs
 800827c:	2000      	movcs	r0, #0
 800827e:	2001      	movcc	r0, #1
 8008280:	e7f2      	b.n	8008268 <xTaskPriorityInherit+0x58>
 8008282:	bf00      	nop
 8008284:	20003808 	.word	0x20003808
 8008288:	20003814 	.word	0x20003814
 800828c:	20003c88 	.word	0x20003c88

08008290 <xTaskPriorityDisinherit>:
	{
 8008290:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008292:	b908      	cbnz	r0, 8008298 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008294:	2000      	movs	r0, #0
	}
 8008296:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008298:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <xTaskPriorityDisinherit+0x80>)
 800829a:	681c      	ldr	r4, [r3, #0]
 800829c:	4284      	cmp	r4, r0
 800829e:	d00a      	beq.n	80082b6 <xTaskPriorityDisinherit+0x26>
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	b672      	cpsid	i
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	b662      	cpsie	i
 80082b4:	e7fe      	b.n	80082b4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80082b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80082b8:	b953      	cbnz	r3, 80082d0 <xTaskPriorityDisinherit+0x40>
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	b672      	cpsid	i
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	b662      	cpsie	i
 80082ce:	e7fe      	b.n	80082ce <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80082d2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80082d6:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082d8:	4291      	cmp	r1, r2
 80082da:	d0db      	beq.n	8008294 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1d9      	bne.n	8008294 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082e0:	1d25      	adds	r5, r4, #4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f7fe fe83 	bl	8006fee <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082ee:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80082f2:	4a08      	ldr	r2, [pc, #32]	; (8008314 <xTaskPriorityDisinherit+0x84>)
 80082f4:	6811      	ldr	r1, [r2, #0]
 80082f6:	428b      	cmp	r3, r1
 80082f8:	d900      	bls.n	80082fc <xTaskPriorityDisinherit+0x6c>
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	4a06      	ldr	r2, [pc, #24]	; (8008318 <xTaskPriorityDisinherit+0x88>)
 80082fe:	2014      	movs	r0, #20
 8008300:	4629      	mov	r1, r5
 8008302:	fb00 2003 	mla	r0, r0, r3, r2
 8008306:	f7fe fe4f 	bl	8006fa8 <vListInsertEnd>
					xReturn = pdTRUE;
 800830a:	2001      	movs	r0, #1
		return xReturn;
 800830c:	e7c3      	b.n	8008296 <xTaskPriorityDisinherit+0x6>
 800830e:	bf00      	nop
 8008310:	20003808 	.word	0x20003808
 8008314:	20003c88 	.word	0x20003c88
 8008318:	20003814 	.word	0x20003814

0800831c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800831c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800831e:	4604      	mov	r4, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	d046      	beq.n	80083b2 <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 8008324:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008326:	b952      	cbnz	r2, 800833e <vTaskPriorityDisinheritAfterTimeout+0x22>
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	b672      	cpsid	i
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	b662      	cpsie	i
 800833c:	e7fe      	b.n	800833c <vTaskPriorityDisinheritAfterTimeout+0x20>
 800833e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008340:	4299      	cmp	r1, r3
 8008342:	bf38      	it	cc
 8008344:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008346:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008348:	428b      	cmp	r3, r1
 800834a:	d032      	beq.n	80083b2 <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800834c:	2a01      	cmp	r2, #1
 800834e:	d130      	bne.n	80083b2 <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 8008350:	4a18      	ldr	r2, [pc, #96]	; (80083b4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	4282      	cmp	r2, r0
 8008356:	d10a      	bne.n	800836e <vTaskPriorityDisinheritAfterTimeout+0x52>
 8008358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835c:	b672      	cpsid	i
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	b662      	cpsie	i
 800836c:	e7fe      	b.n	800836c <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800836e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008370:	4d11      	ldr	r5, [pc, #68]	; (80083b8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008372:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008374:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8008378:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800837a:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800837e:	bfa8      	it	ge
 8008380:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008384:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008386:	bfa8      	it	ge
 8008388:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800838a:	429a      	cmp	r2, r3
 800838c:	d111      	bne.n	80083b2 <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800838e:	1d06      	adds	r6, r0, #4
 8008390:	4630      	mov	r0, r6
 8008392:	f7fe fe2c 	bl	8006fee <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008396:	4a09      	ldr	r2, [pc, #36]	; (80083bc <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008398:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800839a:	6811      	ldr	r1, [r2, #0]
 800839c:	428b      	cmp	r3, r1
 800839e:	d900      	bls.n	80083a2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	2014      	movs	r0, #20
 80083a4:	4631      	mov	r1, r6
 80083a6:	fb00 5003 	mla	r0, r0, r3, r5
	}
 80083aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80083ae:	f7fe bdfb 	b.w	8006fa8 <vListInsertEnd>
	}
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	20003808 	.word	0x20003808
 80083b8:	20003814 	.word	0x20003814
 80083bc:	20003c88 	.word	0x20003c88

080083c0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80083c0:	4b04      	ldr	r3, [pc, #16]	; (80083d4 <pvTaskIncrementMutexHeldCount+0x14>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	b11a      	cbz	r2, 80083ce <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80083c6:	6819      	ldr	r1, [r3, #0]
 80083c8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80083ca:	3201      	adds	r2, #1
 80083cc:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80083ce:	6818      	ldr	r0, [r3, #0]
	}
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20003808 	.word	0x20003808

080083d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80083da:	4c11      	ldr	r4, [pc, #68]	; (8008420 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80083dc:	f000 fa72 	bl	80088c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80083e0:	6825      	ldr	r5, [r4, #0]
 80083e2:	b9bd      	cbnz	r5, 8008414 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80083e4:	4f0f      	ldr	r7, [pc, #60]	; (8008424 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80083e6:	4e10      	ldr	r6, [pc, #64]	; (8008428 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7fe fdcf 	bl	8006f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7fe fdcc 	bl	8006f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083f4:	4b0d      	ldr	r3, [pc, #52]	; (800842c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083f6:	4a0e      	ldr	r2, [pc, #56]	; (8008430 <prvCheckForValidListAndQueue+0x58>)
 80083f8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80083fa:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083fc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80083fe:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <prvCheckForValidListAndQueue+0x5c>)
 8008400:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008402:	9500      	str	r5, [sp, #0]
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <prvCheckForValidListAndQueue+0x60>)
 8008406:	f7fe fed1 	bl	80071ac <xQueueGenericCreateStatic>
 800840a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800840c:	b110      	cbz	r0, 8008414 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800840e:	490b      	ldr	r1, [pc, #44]	; (800843c <prvCheckForValidListAndQueue+0x64>)
 8008410:	f7ff fa4c 	bl	80078ac <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008414:	b003      	add	sp, #12
 8008416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800841a:	f000 ba79 	b.w	8008910 <vPortExitCritical>
 800841e:	bf00      	nop
 8008420:	20003e28 	.word	0x20003e28
 8008424:	20003dac 	.word	0x20003dac
 8008428:	20003dc0 	.word	0x20003dc0
 800842c:	20003d04 	.word	0x20003d04
 8008430:	20003d0c 	.word	0x20003d0c
 8008434:	20003d08 	.word	0x20003d08
 8008438:	20003dd8 	.word	0x20003dd8
 800843c:	0800e062 	.word	0x0800e062

08008440 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008440:	4291      	cmp	r1, r2
{
 8008442:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008444:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008446:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008448:	d80a      	bhi.n	8008460 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	6983      	ldr	r3, [r0, #24]
 800844e:	429a      	cmp	r2, r3
 8008450:	d20d      	bcs.n	800846e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008452:	1d01      	adds	r1, r0, #4
 8008454:	4b07      	ldr	r3, [pc, #28]	; (8008474 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	f7fe fdb2 	bl	8006fc0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800845c:	2000      	movs	r0, #0
}
 800845e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008460:	429a      	cmp	r2, r3
 8008462:	d201      	bcs.n	8008468 <prvInsertTimerInActiveList+0x28>
 8008464:	4299      	cmp	r1, r3
 8008466:	d202      	bcs.n	800846e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008468:	1d01      	adds	r1, r0, #4
 800846a:	4b03      	ldr	r3, [pc, #12]	; (8008478 <prvInsertTimerInActiveList+0x38>)
 800846c:	e7f3      	b.n	8008456 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800846e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008470:	e7f5      	b.n	800845e <prvInsertTimerInActiveList+0x1e>
 8008472:	bf00      	nop
 8008474:	20003d08 	.word	0x20003d08
 8008478:	20003d04 	.word	0x20003d04

0800847c <xTimerCreateTimerTask>:
{
 800847c:	b510      	push	{r4, lr}
 800847e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008480:	f7ff ffaa 	bl	80083d8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <xTimerCreateTimerTask+0x58>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	b1b3      	cbz	r3, 80084b8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800848a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800848c:	aa07      	add	r2, sp, #28
 800848e:	a906      	add	r1, sp, #24
 8008490:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008492:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008496:	f7fe fd6d 	bl	8006f74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800849a:	9b05      	ldr	r3, [sp, #20]
 800849c:	9a07      	ldr	r2, [sp, #28]
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	9b06      	ldr	r3, [sp, #24]
 80084a2:	490d      	ldr	r1, [pc, #52]	; (80084d8 <xTimerCreateTimerTask+0x5c>)
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	2302      	movs	r3, #2
 80084a8:	480c      	ldr	r0, [pc, #48]	; (80084dc <xTimerCreateTimerTask+0x60>)
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	4623      	mov	r3, r4
 80084ae:	f7ff fb99 	bl	8007be4 <xTaskCreateStatic>
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <xTimerCreateTimerTask+0x64>)
 80084b4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80084b6:	b950      	cbnz	r0, 80084ce <xTimerCreateTimerTask+0x52>
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
 80084cc:	e7fe      	b.n	80084cc <xTimerCreateTimerTask+0x50>
}
 80084ce:	2001      	movs	r0, #1
 80084d0:	b008      	add	sp, #32
 80084d2:	bd10      	pop	{r4, pc}
 80084d4:	20003e28 	.word	0x20003e28
 80084d8:	0800e067 	.word	0x0800e067
 80084dc:	080085c5 	.word	0x080085c5
 80084e0:	20003e2c 	.word	0x20003e2c

080084e4 <xTimerGenericCommand>:
{
 80084e4:	b530      	push	{r4, r5, lr}
 80084e6:	4615      	mov	r5, r2
 80084e8:	b085      	sub	sp, #20
 80084ea:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80084ec:	4603      	mov	r3, r0
 80084ee:	b950      	cbnz	r0, 8008506 <xTimerGenericCommand+0x22>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	b672      	cpsid	i
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	b662      	cpsie	i
 8008504:	e7fe      	b.n	8008504 <xTimerGenericCommand+0x20>
	if( xTimerQueue != NULL )
 8008506:	4c0d      	ldr	r4, [pc, #52]	; (800853c <xTimerGenericCommand+0x58>)
 8008508:	6820      	ldr	r0, [r4, #0]
 800850a:	b178      	cbz	r0, 800852c <xTimerGenericCommand+0x48>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800850c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800850e:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008510:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008514:	dc0c      	bgt.n	8008530 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008516:	f7ff fe6b 	bl	80081f0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800851a:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800851c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800851e:	4669      	mov	r1, sp
 8008520:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008522:	bf0c      	ite	eq
 8008524:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008526:	461a      	movne	r2, r3
 8008528:	f7fe fec2 	bl	80072b0 <xQueueGenericSend>
}
 800852c:	b005      	add	sp, #20
 800852e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008530:	2300      	movs	r3, #0
 8008532:	4669      	mov	r1, sp
 8008534:	f7fe ffbd 	bl	80074b2 <xQueueGenericSendFromISR>
 8008538:	e7f8      	b.n	800852c <xTimerGenericCommand+0x48>
 800853a:	bf00      	nop
 800853c:	20003e28 	.word	0x20003e28

08008540 <prvSwitchTimerLists>:
{
 8008540:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008544:	4d1d      	ldr	r5, [pc, #116]	; (80085bc <prvSwitchTimerLists+0x7c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008546:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800854a:	682b      	ldr	r3, [r5, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	b932      	cbnz	r2, 800855e <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8008550:	4a1b      	ldr	r2, [pc, #108]	; (80085c0 <prvSwitchTimerLists+0x80>)
 8008552:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008554:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008556:	6029      	str	r1, [r5, #0]
}
 8008558:	b002      	add	sp, #8
 800855a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800855e:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008560:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008562:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008564:	1d27      	adds	r7, r4, #4
 8008566:	4638      	mov	r0, r7
 8008568:	f7fe fd41 	bl	8006fee <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800856c:	6a23      	ldr	r3, [r4, #32]
 800856e:	4620      	mov	r0, r4
 8008570:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008572:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008576:	075b      	lsls	r3, r3, #29
 8008578:	d5e7      	bpl.n	800854a <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800857a:	69a3      	ldr	r3, [r4, #24]
 800857c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800857e:	429e      	cmp	r6, r3
 8008580:	d206      	bcs.n	8008590 <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008582:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008584:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008586:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008588:	6828      	ldr	r0, [r5, #0]
 800858a:	f7fe fd19 	bl	8006fc0 <vListInsert>
 800858e:	e7dc      	b.n	800854a <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008590:	2300      	movs	r3, #0
 8008592:	f8cd 8000 	str.w	r8, [sp]
 8008596:	4632      	mov	r2, r6
 8008598:	4620      	mov	r0, r4
 800859a:	4619      	mov	r1, r3
 800859c:	f7ff ffa2 	bl	80084e4 <xTimerGenericCommand>
				configASSERT( xResult );
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d1d2      	bne.n	800854a <prvSwitchTimerLists+0xa>
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	b672      	cpsid	i
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	b662      	cpsie	i
 80085b8:	e7fe      	b.n	80085b8 <prvSwitchTimerLists+0x78>
 80085ba:	bf00      	nop
 80085bc:	20003d04 	.word	0x20003d04
 80085c0:	20003d08 	.word	0x20003d08

080085c4 <prvTimerTask>:
{
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085c8:	4d84      	ldr	r5, [pc, #528]	; (80087dc <prvTimerTask+0x218>)
{
 80085ca:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 80085cc:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80087e8 <prvTimerTask+0x224>
 80085d0:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085d2:	682a      	ldr	r2, [r5, #0]
 80085d4:	6813      	ldr	r3, [r2, #0]
 80085d6:	b353      	cbz	r3, 800862e <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085d8:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085da:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085dc:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 80085e0:	f8df b208 	ldr.w	fp, [pc, #520]	; 80087ec <prvTimerTask+0x228>
	vTaskSuspendAll();
 80085e4:	f7ff fbb2 	bl	8007d4c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80085e8:	f7ff fbb8 	bl	8007d5c <xTaskGetTickCount>
 80085ec:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80085ee:	f8db 3000 	ldr.w	r3, [fp]
 80085f2:	465e      	mov	r6, fp
 80085f4:	4298      	cmp	r0, r3
 80085f6:	d31d      	bcc.n	8008634 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 80085f8:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085fc:	b32c      	cbz	r4, 800864a <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085fe:	4b78      	ldr	r3, [pc, #480]	; (80087e0 <prvTimerTask+0x21c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	fab2 f282 	clz	r2, r2
 8008608:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800860a:	4b76      	ldr	r3, [pc, #472]	; (80087e4 <prvTimerTask+0x220>)
 800860c:	eba9 010a 	sub.w	r1, r9, sl
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	f7ff f95d 	bl	80078d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008616:	f7ff fc39 	bl	8007e8c <xTaskResumeAll>
 800861a:	b988      	cbnz	r0, 8008640 <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 800861c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008620:	f8c8 3000 	str.w	r3, [r8]
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	e008      	b.n	8008640 <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800862e:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 8008630:	4699      	mov	r9, r3
 8008632:	e7d5      	b.n	80085e0 <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 8008634:	f7ff ff84 	bl	8008540 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008638:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 800863c:	f7ff fc26 	bl	8007e8c <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008640:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80087e4 <prvTimerTask+0x220>
 8008644:	f04f 0a00 	mov.w	sl, #0
 8008648:	e083      	b.n	8008752 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800864a:	4581      	cmp	r9, r0
 800864c:	d832      	bhi.n	80086b4 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 800864e:	f7ff fc1d 	bl	8007e8c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800865a:	f10b 0004 	add.w	r0, fp, #4
 800865e:	f7fe fcc6 	bl	8006fee <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008662:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 8008666:	0758      	lsls	r0, r3, #29
 8008668:	d51b      	bpl.n	80086a2 <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800866a:	f8db 1018 	ldr.w	r1, [fp, #24]
 800866e:	464b      	mov	r3, r9
 8008670:	4652      	mov	r2, sl
 8008672:	4658      	mov	r0, fp
 8008674:	4449      	add	r1, r9
 8008676:	f7ff fee3 	bl	8008440 <prvInsertTimerInActiveList>
 800867a:	b1b0      	cbz	r0, 80086aa <prvTimerTask+0xe6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800867c:	9400      	str	r4, [sp, #0]
 800867e:	4623      	mov	r3, r4
 8008680:	464a      	mov	r2, r9
 8008682:	4621      	mov	r1, r4
 8008684:	4658      	mov	r0, fp
 8008686:	f7ff ff2d 	bl	80084e4 <xTimerGenericCommand>
			configASSERT( xResult );
 800868a:	b970      	cbnz	r0, 80086aa <prvTimerTask+0xe6>
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	b672      	cpsid	i
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	b662      	cpsie	i
 80086a0:	e7fe      	b.n	80086a0 <prvTimerTask+0xdc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086aa:	f8db 3020 	ldr.w	r3, [fp, #32]
 80086ae:	4658      	mov	r0, fp
 80086b0:	4798      	blx	r3
 80086b2:	e7c5      	b.n	8008640 <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086b4:	4622      	mov	r2, r4
 80086b6:	e7a8      	b.n	800860a <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086b8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086bc:	465a      	mov	r2, fp
 80086be:	69a1      	ldr	r1, [r4, #24]
 80086c0:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	4419      	add	r1, r3
 80086ce:	f7ff feb7 	bl	8008440 <prvInsertTimerInActiveList>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d03d      	beq.n	8008752 <prvTimerTask+0x18e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086d6:	6a23      	ldr	r3, [r4, #32]
 80086d8:	4620      	mov	r0, r4
 80086da:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80086e0:	0759      	lsls	r1, r3, #29
 80086e2:	d536      	bpl.n	8008752 <prvTimerTask+0x18e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086e4:	69a2      	ldr	r2, [r4, #24]
 80086e6:	2300      	movs	r3, #0
 80086e8:	9903      	ldr	r1, [sp, #12]
 80086ea:	4620      	mov	r0, r4
 80086ec:	f8cd a000 	str.w	sl, [sp]
 80086f0:	440a      	add	r2, r1
 80086f2:	4619      	mov	r1, r3
 80086f4:	f7ff fef6 	bl	80084e4 <xTimerGenericCommand>
							configASSERT( xResult );
 80086f8:	bb58      	cbnz	r0, 8008752 <prvTimerTask+0x18e>
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	b672      	cpsid	i
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	b662      	cpsie	i
 800870e:	e7fe      	b.n	800870e <prvTimerTask+0x14a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008710:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008714:	f023 0301 	bic.w	r3, r3, #1
 8008718:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800871c:	e019      	b.n	8008752 <prvTimerTask+0x18e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800871e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008722:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008724:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008728:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800872a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800872e:	b951      	cbnz	r1, 8008746 <prvTimerTask+0x182>
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	b672      	cpsid	i
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	b662      	cpsie	i
 8008744:	e7fe      	b.n	8008744 <prvTimerTask+0x180>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008746:	465b      	mov	r3, fp
 8008748:	465a      	mov	r2, fp
 800874a:	4459      	add	r1, fp
 800874c:	4620      	mov	r0, r4
 800874e:	f7ff fe77 	bl	8008440 <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008752:	2200      	movs	r2, #0
 8008754:	a902      	add	r1, sp, #8
 8008756:	f8d9 0000 	ldr.w	r0, [r9]
 800875a:	f7fe ff13 	bl	8007584 <xQueueReceive>
 800875e:	2800      	cmp	r0, #0
 8008760:	f43f af37 	beq.w	80085d2 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008764:	9b02      	ldr	r3, [sp, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	da03      	bge.n	8008772 <prvTimerTask+0x1ae>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008770:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008772:	9b02      	ldr	r3, [sp, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	dbec      	blt.n	8008752 <prvTimerTask+0x18e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008778:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800877a:	6963      	ldr	r3, [r4, #20]
 800877c:	b113      	cbz	r3, 8008784 <prvTimerTask+0x1c0>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800877e:	1d20      	adds	r0, r4, #4
 8008780:	f7fe fc35 	bl	8006fee <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008784:	f7ff faea 	bl	8007d5c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008788:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800878a:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800878c:	4298      	cmp	r0, r3
 800878e:	d201      	bcs.n	8008794 <prvTimerTask+0x1d0>
		prvSwitchTimerLists();
 8008790:	f7ff fed6 	bl	8008540 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8008794:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8008796:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 800879a:	2b09      	cmp	r3, #9
 800879c:	d8d9      	bhi.n	8008752 <prvTimerTask+0x18e>
 800879e:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <prvTimerTask+0x1e0>)
 80087a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a4:	080086b9 	.word	0x080086b9
 80087a8:	080086b9 	.word	0x080086b9
 80087ac:	080086b9 	.word	0x080086b9
 80087b0:	08008711 	.word	0x08008711
 80087b4:	0800871f 	.word	0x0800871f
 80087b8:	080087cd 	.word	0x080087cd
 80087bc:	080086b9 	.word	0x080086b9
 80087c0:	080086b9 	.word	0x080086b9
 80087c4:	08008711 	.word	0x08008711
 80087c8:	0800871f 	.word	0x0800871f
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80087d0:	079a      	lsls	r2, r3, #30
 80087d2:	d49f      	bmi.n	8008714 <prvTimerTask+0x150>
							vPortFree( pxTimer );
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fa63 	bl	8008ca0 <vPortFree>
 80087da:	e7ba      	b.n	8008752 <prvTimerTask+0x18e>
 80087dc:	20003d04 	.word	0x20003d04
 80087e0:	20003d08 	.word	0x20003d08
 80087e4:	20003e28 	.word	0x20003e28
 80087e8:	e000ed04 	.word	0xe000ed04
 80087ec:	20003dd4 	.word	0x20003dd4

080087f0 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 80087f0:	2300      	movs	r3, #0
{
 80087f2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80087f4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <prvTaskExitError+0x44>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3301      	adds	r3, #1
 80087fc:	d00a      	beq.n	8008814 <prvTaskExitError+0x24>
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	b672      	cpsid	i
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	b662      	cpsie	i
 8008812:	e7fe      	b.n	8008812 <prvTaskExitError+0x22>
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	b672      	cpsid	i
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0fc      	beq.n	8008828 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800882e:	b002      	add	sp, #8
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20002808 	.word	0x20002808

08008838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008838:	4808      	ldr	r0, [pc, #32]	; (800885c <prvPortStartFirstTask+0x24>)
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	6800      	ldr	r0, [r0, #0]
 800883e:	f380 8808 	msr	MSP, r0
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f380 8814 	msr	CONTROL, r0
 800884a:	b662      	cpsie	i
 800884c:	b661      	cpsie	f
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	df00      	svc	0
 8008858:	bf00      	nop
 800885a:	0000      	.short	0x0000
 800885c:	e000ed08 	.word	0xe000ed08

08008860 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008860:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008870 <vPortEnableVFP+0x10>
 8008864:	6801      	ldr	r1, [r0, #0]
 8008866:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800886a:	6001      	str	r1, [r0, #0]
 800886c:	4770      	bx	lr
 800886e:	0000      	.short	0x0000
 8008870:	e000ed88 	.word	0xe000ed88

08008874 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008878:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800887c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008880:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008882:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008884:	4b03      	ldr	r3, [pc, #12]	; (8008894 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008886:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008888:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800888a:	f06f 0302 	mvn.w	r3, #2
 800888e:	6203      	str	r3, [r0, #32]
}
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	080087f1 	.word	0x080087f1
	...

080088a0 <SVC_Handler>:
	__asm volatile (
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <pxCurrentTCBConst2>)
 80088a2:	6819      	ldr	r1, [r3, #0]
 80088a4:	6808      	ldr	r0, [r1, #0]
 80088a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088aa:	f380 8809 	msr	PSP, r0
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8811 	msr	BASEPRI, r0
 80088ba:	4770      	bx	lr
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst2>:
 80088c0:	20003808 	.word	0x20003808

080088c4 <vPortEnterCritical>:
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	b672      	cpsid	i
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	b662      	cpsie	i
	uxCriticalNesting++;
 80088d8:	4a0b      	ldr	r2, [pc, #44]	; (8008908 <vPortEnterCritical+0x44>)
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80088de:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80088e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80088e2:	d10f      	bne.n	8008904 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088e4:	4b09      	ldr	r3, [pc, #36]	; (800890c <vPortEnterCritical+0x48>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088ec:	d00a      	beq.n	8008904 <vPortEnterCritical+0x40>
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	b672      	cpsid	i
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	b662      	cpsie	i
 8008902:	e7fe      	b.n	8008902 <vPortEnterCritical+0x3e>
}
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	20002808 	.word	0x20002808
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008910:	4a09      	ldr	r2, [pc, #36]	; (8008938 <vPortExitCritical+0x28>)
 8008912:	6813      	ldr	r3, [r2, #0]
 8008914:	b953      	cbnz	r3, 800892c <vPortExitCritical+0x1c>
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	b672      	cpsid	i
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	b662      	cpsie	i
 800892a:	e7fe      	b.n	800892a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800892c:	3b01      	subs	r3, #1
 800892e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008930:	b90b      	cbnz	r3, 8008936 <vPortExitCritical+0x26>
	__asm volatile
 8008932:	f383 8811 	msr	BASEPRI, r3
}
 8008936:	4770      	bx	lr
 8008938:	20002808 	.word	0x20002808
 800893c:	00000000 	.word	0x00000000

08008940 <PendSV_Handler>:
	__asm volatile
 8008940:	f3ef 8009 	mrs	r0, PSP
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <pxCurrentTCBConst>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	f01e 0f10 	tst.w	lr, #16
 8008950:	bf08      	it	eq
 8008952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	6010      	str	r0, [r2, #0]
 800895c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008964:	b672      	cpsid	i
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	b662      	cpsie	i
 8008974:	f7ff fb26 	bl	8007fc4 <vTaskSwitchContext>
 8008978:	f04f 0000 	mov.w	r0, #0
 800897c:	f380 8811 	msr	BASEPRI, r0
 8008980:	bc09      	pop	{r0, r3}
 8008982:	6819      	ldr	r1, [r3, #0]
 8008984:	6808      	ldr	r0, [r1, #0]
 8008986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898a:	f01e 0f10 	tst.w	lr, #16
 800898e:	bf08      	it	eq
 8008990:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008994:	f380 8809 	msr	PSP, r0
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop

080089a0 <pxCurrentTCBConst>:
 80089a0:	20003808 	.word	0x20003808

080089a4 <xPortSysTickHandler>:
{
 80089a4:	b508      	push	{r3, lr}
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	b672      	cpsid	i
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80089ba:	f7ff f9d5 	bl	8007d68 <xTaskIncrementTick>
 80089be:	b118      	cbz	r0, 80089c8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089c0:	4b03      	ldr	r3, [pc, #12]	; (80089d0 <xPortSysTickHandler+0x2c>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80089c8:	2300      	movs	r3, #0
 80089ca:	f383 8811 	msr	BASEPRI, r3
}
 80089ce:	bd08      	pop	{r3, pc}
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089d4:	2300      	movs	r3, #0
 80089d6:	4a08      	ldr	r2, [pc, #32]	; (80089f8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089d8:	4908      	ldr	r1, [pc, #32]	; (80089fc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089dc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089de:	f242 7110 	movw	r1, #10000	; 0x2710
 80089e2:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <vPortSetupTimerInterrupt+0x2c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80089ea:	4906      	ldr	r1, [pc, #24]	; (8008a04 <vPortSetupTimerInterrupt+0x30>)
 80089ec:	3b01      	subs	r3, #1
 80089ee:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089f0:	2307      	movs	r3, #7
 80089f2:	6013      	str	r3, [r2, #0]
}
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	e000e010 	.word	0xe000e010
 80089fc:	e000e018 	.word	0xe000e018
 8008a00:	20000034 	.word	0x20000034
 8008a04:	e000e014 	.word	0xe000e014

08008a08 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a08:	4b2c      	ldr	r3, [pc, #176]	; (8008abc <xPortStartScheduler+0xb4>)
{
 8008a0a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a0c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a0e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a14:	22ff      	movs	r2, #255	; 0xff
 8008a16:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a18:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a1a:	4a29      	ldr	r2, [pc, #164]	; (8008ac0 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008a26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a2a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a2c:	2207      	movs	r2, #7
 8008a2e:	4b25      	ldr	r3, [pc, #148]	; (8008ac4 <xPortStartScheduler+0xbc>)
 8008a30:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a32:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008a36:	1e54      	subs	r4, r2, #1
 8008a38:	0600      	lsls	r0, r0, #24
 8008a3a:	d40f      	bmi.n	8008a5c <xPortStartScheduler+0x54>
 8008a3c:	b101      	cbz	r1, 8008a40 <xPortStartScheduler+0x38>
 8008a3e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	2a03      	cmp	r2, #3
 8008a44:	d013      	beq.n	8008a6e <xPortStartScheduler+0x66>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	b672      	cpsid	i
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	b662      	cpsie	i
 8008a5a:	e7fe      	b.n	8008a5a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008a60:	2101      	movs	r1, #1
 8008a62:	0052      	lsls	r2, r2, #1
 8008a64:	b2d2      	uxtb	r2, r2
 8008a66:	f88d 2003 	strb.w	r2, [sp, #3]
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	e7e1      	b.n	8008a32 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a6e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8008a70:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a72:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008a76:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a78:	9b01      	ldr	r3, [sp, #4]
 8008a7a:	4a10      	ldr	r2, [pc, #64]	; (8008abc <xPortStartScheduler+0xb4>)
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a80:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <xPortStartScheduler+0xc0>)
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008a88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008a90:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8008a92:	f7ff ff9f 	bl	80089d4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008a96:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <xPortStartScheduler+0xc4>)
 8008a98:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8008a9a:	f7ff fee1 	bl	8008860 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	; (8008ad0 <xPortStartScheduler+0xc8>)
 8008aa0:	6813      	ldr	r3, [r2, #0]
 8008aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008aa6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8008aa8:	f7ff fec6 	bl	8008838 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008aac:	f7ff fa8a 	bl	8007fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8008ab0:	f7ff fe9e 	bl	80087f0 <prvTaskExitError>
}
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	b002      	add	sp, #8
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	bf00      	nop
 8008abc:	e000e400 	.word	0xe000e400
 8008ac0:	20003e30 	.word	0x20003e30
 8008ac4:	20003e34 	.word	0x20003e34
 8008ac8:	e000ed20 	.word	0xe000ed20
 8008acc:	20002808 	.word	0x20002808
 8008ad0:	e000ef34 	.word	0xe000ef34

08008ad4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ad4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ad8:	2b0f      	cmp	r3, #15
 8008ada:	d910      	bls.n	8008afe <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008adc:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <vPortValidateInterruptPriority+0x54>)
 8008ade:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ae0:	4a12      	ldr	r2, [pc, #72]	; (8008b2c <vPortValidateInterruptPriority+0x58>)
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d90a      	bls.n	8008afe <vPortValidateInterruptPriority+0x2a>
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	b672      	cpsid	i
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	b662      	cpsie	i
 8008afc:	e7fe      	b.n	8008afc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008afe:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <vPortValidateInterruptPriority+0x5c>)
 8008b00:	4a0c      	ldr	r2, [pc, #48]	; (8008b34 <vPortValidateInterruptPriority+0x60>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6812      	ldr	r2, [r2, #0]
 8008b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d90a      	bls.n	8008b24 <vPortValidateInterruptPriority+0x50>
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	b672      	cpsid	i
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	b662      	cpsie	i
 8008b22:	e7fe      	b.n	8008b22 <vPortValidateInterruptPriority+0x4e>
	}
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	e000e3f0 	.word	0xe000e3f0
 8008b2c:	20003e30 	.word	0x20003e30
 8008b30:	e000ed0c 	.word	0xe000ed0c
 8008b34:	20003e34 	.word	0x20003e34

08008b38 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b38:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <prvInsertBlockIntoFreeList+0x40>)
{
 8008b3a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4282      	cmp	r2, r0
 8008b40:	d318      	bcc.n	8008b74 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b42:	685c      	ldr	r4, [r3, #4]
 8008b44:	1919      	adds	r1, r3, r4
 8008b46:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b48:	bf01      	itttt	eq
 8008b4a:	6841      	ldreq	r1, [r0, #4]
 8008b4c:	4618      	moveq	r0, r3
 8008b4e:	1909      	addeq	r1, r1, r4
 8008b50:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b52:	6844      	ldr	r4, [r0, #4]
 8008b54:	1901      	adds	r1, r0, r4
 8008b56:	428a      	cmp	r2, r1
 8008b58:	d107      	bne.n	8008b6a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b5a:	4908      	ldr	r1, [pc, #32]	; (8008b7c <prvInsertBlockIntoFreeList+0x44>)
 8008b5c:	6809      	ldr	r1, [r1, #0]
 8008b5e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b60:	bf1f      	itttt	ne
 8008b62:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b64:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b66:	1909      	addne	r1, r1, r4
 8008b68:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b6a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b6c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b6e:	bf18      	it	ne
 8008b70:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b72:	bd10      	pop	{r4, pc}
 8008b74:	4613      	mov	r3, r2
 8008b76:	e7e1      	b.n	8008b3c <prvInsertBlockIntoFreeList+0x4>
 8008b78:	20007a48 	.word	0x20007a48
 8008b7c:	20003e38 	.word	0x20003e38

08008b80 <pvPortMalloc>:
{
 8008b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b84:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008b86:	f7ff f8e1 	bl	8007d4c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008b8a:	493f      	ldr	r1, [pc, #252]	; (8008c88 <pvPortMalloc+0x108>)
 8008b8c:	4d3f      	ldr	r5, [pc, #252]	; (8008c8c <pvPortMalloc+0x10c>)
 8008b8e:	680b      	ldr	r3, [r1, #0]
 8008b90:	bb03      	cbnz	r3, 8008bd4 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8008b92:	4a3f      	ldr	r2, [pc, #252]	; (8008c90 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;
 8008b94:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b96:	0756      	lsls	r6, r2, #29
 8008b98:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b9c:	4e3d      	ldr	r6, [pc, #244]	; (8008c94 <pvPortMalloc+0x114>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b9e:	bf14      	ite	ne
 8008ba0:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ba2:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.xBlockSize = ( size_t ) 0;
 8008ba6:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba8:	bf1c      	itt	ne
 8008baa:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bae:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bb0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bb2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008bb4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8008bba:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bbe:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8008bc0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bc2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bc6:	4b34      	ldr	r3, [pc, #208]	; (8008c98 <pvPortMalloc+0x118>)
 8008bc8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bca:	4b34      	ldr	r3, [pc, #208]	; (8008c9c <pvPortMalloc+0x11c>)
 8008bcc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bd2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bd4:	682f      	ldr	r7, [r5, #0]
 8008bd6:	4227      	tst	r7, r4
 8008bd8:	d151      	bne.n	8008c7e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8008bda:	2c00      	cmp	r4, #0
 8008bdc:	d040      	beq.n	8008c60 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 8008bde:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008be2:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008be4:	bf1c      	itt	ne
 8008be6:	f023 0307 	bicne.w	r3, r3, #7
 8008bea:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d046      	beq.n	8008c7e <pvPortMalloc+0xfe>
 8008bf0:	4a2a      	ldr	r2, [pc, #168]	; (8008c9c <pvPortMalloc+0x11c>)
 8008bf2:	6816      	ldr	r6, [r2, #0]
 8008bf4:	4690      	mov	r8, r2
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	d341      	bcc.n	8008c7e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8008bfa:	4a26      	ldr	r2, [pc, #152]	; (8008c94 <pvPortMalloc+0x114>)
 8008bfc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bfe:	6868      	ldr	r0, [r5, #4]
 8008c00:	4298      	cmp	r0, r3
 8008c02:	d201      	bcs.n	8008c08 <pvPortMalloc+0x88>
 8008c04:	682c      	ldr	r4, [r5, #0]
 8008c06:	b9b4      	cbnz	r4, 8008c36 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8008c08:	6809      	ldr	r1, [r1, #0]
 8008c0a:	42a9      	cmp	r1, r5
 8008c0c:	d037      	beq.n	8008c7e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c0e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c10:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c12:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c14:	1ac2      	subs	r2, r0, r3
 8008c16:	2a10      	cmp	r2, #16
 8008c18:	d914      	bls.n	8008c44 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c1a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c1c:	0741      	lsls	r1, r0, #29
 8008c1e:	d00d      	beq.n	8008c3c <pvPortMalloc+0xbc>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	e7fe      	b.n	8008c34 <pvPortMalloc+0xb4>
 8008c36:	462a      	mov	r2, r5
 8008c38:	4625      	mov	r5, r4
 8008c3a:	e7e0      	b.n	8008bfe <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c3c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c3e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c40:	f7ff ff7a 	bl	8008b38 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c44:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c46:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c48:	4913      	ldr	r1, [pc, #76]	; (8008c98 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c4a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c4c:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c4e:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008c50:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c52:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c56:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c58:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c5a:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c5c:	bf38      	it	cc
 8008c5e:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8008c60:	f7ff f914 	bl	8007e8c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c64:	0763      	lsls	r3, r4, #29
 8008c66:	d00c      	beq.n	8008c82 <pvPortMalloc+0x102>
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	b672      	cpsid	i
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	b662      	cpsie	i
 8008c7c:	e7fe      	b.n	8008c7c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8008c7e:	2400      	movs	r4, #0
 8008c80:	e7ee      	b.n	8008c60 <pvPortMalloc+0xe0>
}
 8008c82:	4620      	mov	r0, r4
 8008c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c88:	20003e38 	.word	0x20003e38
 8008c8c:	20007a3c 	.word	0x20007a3c
 8008c90:	20003e3c 	.word	0x20003e3c
 8008c94:	20007a48 	.word	0x20007a48
 8008c98:	20007a44 	.word	0x20007a44
 8008c9c:	20007a40 	.word	0x20007a40

08008ca0 <vPortFree>:
{
 8008ca0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d032      	beq.n	8008d0e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ca8:	4a19      	ldr	r2, [pc, #100]	; (8008d10 <vPortFree+0x70>)
 8008caa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	4213      	tst	r3, r2
 8008cb2:	d10a      	bne.n	8008cca <vPortFree+0x2a>
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	b672      	cpsid	i
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	b662      	cpsie	i
 8008cc8:	e7fe      	b.n	8008cc8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cca:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008cce:	b151      	cbz	r1, 8008ce6 <vPortFree+0x46>
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	b672      	cpsid	i
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	b662      	cpsie	i
 8008ce4:	e7fe      	b.n	8008ce4 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ce6:	ea23 0302 	bic.w	r3, r3, r2
 8008cea:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008cee:	f7ff f82d 	bl	8007d4c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cf2:	4a08      	ldr	r2, [pc, #32]	; (8008d14 <vPortFree+0x74>)
 8008cf4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cf8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cfc:	6811      	ldr	r1, [r2, #0]
 8008cfe:	440b      	add	r3, r1
 8008d00:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d02:	f7ff ff19 	bl	8008b38 <prvInsertBlockIntoFreeList>
}
 8008d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008d0a:	f7ff b8bf 	b.w	8007e8c <xTaskResumeAll>
}
 8008d0e:	bd10      	pop	{r4, pc}
 8008d10:	20007a3c 	.word	0x20007a3c
 8008d14:	20007a40 	.word	0x20007a40

08008d18 <font_setCR>:
static unsigned char minDigitWd;
static unsigned char dualChar;

void font_setScale2(unsigned char _sx, unsigned char _sy) { sx = _sx; sy = _sy; }
void font_setScale1(unsigned char s) { sx = sy = s; }
void font_setCR(unsigned char _cr) { cr = _cr; }
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	71fb      	strb	r3, [r7, #7]
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	4a03      	ldr	r2, [pc, #12]	; (8008d34 <font_setCR+0x1c>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	20007a7c 	.word	0x20007a7c

08008d38 <font_getHeight>:
void font_setSpacingY(unsigned char sp) { spacingY = sp; }
void font_setFontMinWd(unsigned char wd) { minCharWd = wd; }
void font_setCharMinWd(unsigned char wd) { minCharWd = wd; }
void font_setDigitMinWd(unsigned char wd) { minDigitWd = wd; }
int font_getWidth() { return rFont ? rFont->wd : 0; }
int font_getHeight() { return rFont ? rFont->ht : 0; }
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <font_getHeight+0x20>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <font_getHeight+0x14>
 8008d44:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <font_getHeight+0x20>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	789b      	ldrb	r3, [r3, #2]
 8008d4a:	e000      	b.n	8008d4e <font_getHeight+0x16>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	20007a58 	.word	0x20007a58

08008d5c <font_init>:
void font_setFillRectFun(void (*fun)(int x, int y, int w, int h, int c)) { fillRectFun=fun; }

// ----------------------------------------------------------------
// fillRect function callback and screen width and height is necessary to initialize the library
void font_init(void (*rectFun)(int x, int y, int w, int h, int c), int swd, int sht)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  fillRectFun = rectFun;
 8008d68:	4a14      	ldr	r2, [pc, #80]	; (8008dbc <font_init+0x60>)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6013      	str	r3, [r2, #0]
  scrWd = swd;
 8008d6e:	4a14      	ldr	r2, [pc, #80]	; (8008dc0 <font_init+0x64>)
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6013      	str	r3, [r2, #0]
  scrHt = sht;
 8008d74:	4a13      	ldr	r2, [pc, #76]	; (8008dc4 <font_init+0x68>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6013      	str	r3, [r2, #0]
  cr = bold = dualChar = 0;
 8008d7a:	4b13      	ldr	r3, [pc, #76]	; (8008dc8 <font_init+0x6c>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <font_init+0x70>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <font_init+0x70>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a11      	ldr	r2, [pc, #68]	; (8008dd0 <font_init+0x74>)
 8008d8c:	6013      	str	r3, [r2, #0]
  isNumberFun = &font_isNumber;
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <font_init+0x78>)
 8008d90:	4a11      	ldr	r2, [pc, #68]	; (8008dd8 <font_init+0x7c>)
 8008d92:	601a      	str	r2, [r3, #0]
  sx = sy = 1;
 8008d94:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <font_init+0x80>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	4b10      	ldr	r3, [pc, #64]	; (8008ddc <font_init+0x80>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a10      	ldr	r2, [pc, #64]	; (8008de0 <font_init+0x84>)
 8008da0:	6013      	str	r3, [r2, #0]
  fg = bg = 1;
 8008da2:	4b10      	ldr	r3, [pc, #64]	; (8008de4 <font_init+0x88>)
 8008da4:	2201      	movs	r2, #1
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <font_init+0x88>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a0e      	ldr	r2, [pc, #56]	; (8008de8 <font_init+0x8c>)
 8008dae:	6013      	str	r3, [r2, #0]
}
 8008db0:	bf00      	nop
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	20007a54 	.word	0x20007a54
 8008dc0:	20007a6c 	.word	0x20007a6c
 8008dc4:	20007a70 	.word	0x20007a70
 8008dc8:	20007a82 	.word	0x20007a82
 8008dcc:	20007a78 	.word	0x20007a78
 8008dd0:	20007a7c 	.word	0x20007a7c
 8008dd4:	20007a50 	.word	0x20007a50
 8008dd8:	0800a351 	.word	0x0800a351
 8008ddc:	20002814 	.word	0x20002814
 8008de0:	20002810 	.word	0x20002810
 8008de4:	2000281c 	.word	0x2000281c
 8008de8:	20002818 	.word	0x20002818

08008dec <font_setFont>:

// ---------------------------------
void font_setFont(RRE_Font *f)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  rFont = f;
 8008df4:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <font_setFont+0x34>)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6013      	str	r3, [r2, #0]
  minCharWd = minDigitWd = 0;
 8008dfa:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <font_setFont+0x38>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <font_setFont+0x38>)
 8008e02:	781a      	ldrb	r2, [r3, #0]
 8008e04:	4b08      	ldr	r3, [pc, #32]	; (8008e28 <font_setFont+0x3c>)
 8008e06:	701a      	strb	r2, [r3, #0]
  spacing = 1;
 8008e08:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <font_setFont+0x40>)
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]
  spacingY = 0;
 8008e0e:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <font_setFont+0x44>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	20007a58 	.word	0x20007a58
 8008e24:	20007a81 	.word	0x20007a81
 8008e28:	20007a80 	.word	0x20007a80
 8008e2c:	2000280c 	.word	0x2000280c
 8008e30:	20007a74 	.word	0x20007a74

08008e34 <font_charWidthOptim>:
  return xmax-xmin;
}

// ----------------------------------------------------------------
int font_charWidthOptim(unsigned char c, int *_xmin)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b08f      	sub	sp, #60	; 0x3c
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	6039      	str	r1, [r7, #0]
 8008e3e:	71fb      	strb	r3, [r7, #7]
  if(c<rFont->firstCh || c>rFont->lastCh) return c==' '? rFont->wd/2 : 0;
 8008e40:	4b7e      	ldr	r3, [pc, #504]	; (800903c <font_charWidthOptim+0x208>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	78db      	ldrb	r3, [r3, #3]
 8008e46:	79fa      	ldrb	r2, [r7, #7]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d305      	bcc.n	8008e58 <font_charWidthOptim+0x24>
 8008e4c:	4b7b      	ldr	r3, [pc, #492]	; (800903c <font_charWidthOptim+0x208>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	791b      	ldrb	r3, [r3, #4]
 8008e52:	79fa      	ldrb	r2, [r7, #7]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d90a      	bls.n	8008e6e <font_charWidthOptim+0x3a>
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d105      	bne.n	8008e6a <font_charWidthOptim+0x36>
 8008e5e:	4b77      	ldr	r3, [pc, #476]	; (800903c <font_charWidthOptim+0x208>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	085b      	lsrs	r3, r3, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	e0e2      	b.n	8009030 <font_charWidthOptim+0x1fc>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e0e0      	b.n	8009030 <font_charWidthOptim+0x1fc>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 8008e6e:	4b73      	ldr	r3, [pc, #460]	; (800903c <font_charWidthOptim+0x208>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	4971      	ldr	r1, [pc, #452]	; (800903c <font_charWidthOptim+0x208>)
 8008e78:	6809      	ldr	r1, [r1, #0]
 8008e7a:	78c9      	ldrb	r1, [r1, #3]
 8008e7c:	1a5b      	subs	r3, r3, r1
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	867b      	strh	r3, [r7, #50]	; 0x32
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 8008e86:	4b6d      	ldr	r3, [pc, #436]	; (800903c <font_charWidthOptim+0x208>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	496b      	ldr	r1, [pc, #428]	; (800903c <font_charWidthOptim+0x208>)
 8008e90:	6809      	ldr	r1, [r1, #0]
 8008e92:	78c9      	ldrb	r1, [r1, #3]
 8008e94:	1a5b      	subs	r3, r3, r1
 8008e96:	3301      	adds	r3, #1
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881a      	ldrh	r2, [r3, #0]
 8008e9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	863b      	strh	r3, [r7, #48]	; 0x30
  if(!recNum) return rFont->wd/2;
 8008ea4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <font_charWidthOptim+0x82>
 8008eaa:	4b64      	ldr	r3, [pc, #400]	; (800903c <font_charWidthOptim+0x208>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	e0bc      	b.n	8009030 <font_charWidthOptim+0x1fc>
  if(_xmin) *_xmin=0;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <font_charWidthOptim+0x8e>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
  int chWd = rFont->wd;
 8008ec2:	4b5e      	ldr	r3, [pc, #376]	; (800903c <font_charWidthOptim+0x208>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	785b      	ldrb	r3, [r3, #1]
 8008ec8:	637b      	str	r3, [r7, #52]	; 0x34
  switch(rFont->type & 7) {
 8008eca:	4b5c      	ldr	r3, [pc, #368]	; (800903c <font_charWidthOptim+0x208>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 0307 	and.w	r3, r3, #7
 8008ed4:	2b06      	cmp	r3, #6
 8008ed6:	f200 80a9 	bhi.w	800902c <font_charWidthOptim+0x1f8>
 8008eda:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <font_charWidthOptim+0xac>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008efd 	.word	0x08008efd
 8008ee4:	08008f87 	.word	0x08008f87
 8008ee8:	08008fad 	.word	0x08008fad
 8008eec:	08008f2d 	.word	0x08008f2d
 8008ef0:	08008fdf 	.word	0x08008fdf
 8008ef4:	08009001 	.word	0x08009001
 8008ef8:	08008f5f 	.word	0x08008f5f
#if ENABLE_RRE_16B==1
    case RRE_16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8008efc:	4b4f      	ldr	r3, [pc, #316]	; (800903c <font_charWidthOptim+0x208>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	60fb      	str	r3, [r7, #12]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008f04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f06:	1e5a      	subs	r2, r3, #1
 8008f08:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f0a:	4413      	add	r3, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4413      	add	r3, r2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	817b      	strh	r3, [r7, #10]
      chWd = (v & 0x000f)+1+((v & 0x0f00)>>8);
 8008f16:	897b      	ldrh	r3, [r7, #10]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	897b      	ldrh	r3, [r7, #10]
 8008f20:	121b      	asrs	r3, r3, #8
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	4413      	add	r3, r2
 8008f28:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008f2a:	e080      	b.n	800902e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8008f2c:	4b43      	ldr	r3, [pc, #268]	; (800903c <font_charWidthOptim+0x208>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6899      	ldr	r1, [r3, #8]
 8008f32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f38:	441a      	add	r2, r3
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4413      	add	r3, r2
 8008f40:	440b      	add	r3, r1
 8008f42:	623b      	str	r3, [r7, #32]
      chWd = ((rects[0]) & 0x3f)+((rects[2]) & 0x3f)+1;
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	3302      	adds	r3, #2
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f56:	4413      	add	r3, r2
 8008f58:	3301      	adds	r3, #1
 8008f5a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008f5c:	e067      	b.n	800902e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*4;
 8008f5e:	4b37      	ldr	r3, [pc, #220]	; (800903c <font_charWidthOptim+0x208>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008f66:	1e51      	subs	r1, r2, #1
 8008f68:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008f6a:	440a      	add	r2, r1
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      chWd = (rects[0])+(rects[2])+1;
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	4413      	add	r3, r2
 8008f80:	3301      	adds	r3, #1
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008f84:	e053      	b.n	800902e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8008f86:	4b2d      	ldr	r3, [pc, #180]	; (800903c <font_charWidthOptim+0x208>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	617b      	str	r3, [r7, #20]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008f8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f90:	1e5a      	subs	r2, r3, #1
 8008f92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f94:	4413      	add	r3, r2
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	827b      	strh	r3, [r7, #18]
      chWd = (v & 0x3f)+1;
 8008fa0:	8a7b      	ldrh	r3, [r7, #18]
 8008fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008faa:	e040      	b.n	800902e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8008fac:	4b23      	ldr	r3, [pc, #140]	; (800903c <font_charWidthOptim+0x208>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	61fb      	str	r3, [r7, #28]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008fb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008fb6:	1e5a      	subs	r2, r3, #1
 8008fb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008fba:	4413      	add	r3, r2
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	69fa      	ldr	r2, [r7, #28]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	837b      	strh	r3, [r7, #26]
      chWd = (v & 0x1f)+((v>>11) & 0x1f)+1;
 8008fc6:	8b7b      	ldrh	r3, [r7, #26]
 8008fc8:	f003 021f 	and.w	r2, r3, #31
 8008fcc:	8b7b      	ldrh	r3, [r7, #26]
 8008fce:	0adb      	lsrs	r3, r3, #11
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f003 031f 	and.w	r3, r3, #31
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3301      	adds	r3, #1
 8008fda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008fdc:	e027      	b.n	800902e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8008fde:	4b17      	ldr	r3, [pc, #92]	; (800903c <font_charWidthOptim+0x208>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6899      	ldr	r1, [r3, #8]
 8008fe4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008fe6:	1e5a      	subs	r2, r3, #1
 8008fe8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008fea:	441a      	add	r2, r3
 8008fec:	4613      	mov	r3, r2
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	4413      	add	r3, r2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
      chWd = (rects[0])+1;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8008ffe:	e016      	b.n	800902e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8009000:	4b0e      	ldr	r3, [pc, #56]	; (800903c <font_charWidthOptim+0x208>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6899      	ldr	r1, [r3, #8]
 8009006:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009008:	1e5a      	subs	r2, r3, #1
 800900a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800900c:	441a      	add	r2, r3
 800900e:	4613      	mov	r3, r2
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4413      	add	r3, r2
 8009014:	440b      	add	r3, r1
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
      chWd = (rects[0])+(rects[2])+1;
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	3302      	adds	r3, #2
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	4413      	add	r3, r2
 8009026:	3301      	adds	r3, #1
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800902a:	e000      	b.n	800902e <font_charWidthOptim+0x1fa>
#endif
    default: break;
 800902c:	bf00      	nop
  }
  return chWd;
 800902e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009030:	4618      	mov	r0, r3
 8009032:	373c      	adds	r7, #60	; 0x3c
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20007a58 	.word	0x20007a58

08009040 <font_charWidth>:

// ----------------------------------------------------------------
int font_charWidth(unsigned char c)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	71fb      	strb	r3, [r7, #7]
  c = convertPolish(c);
#endif
#if ENABLE_NOSORT==1
  int wd = (rFont->type & RRE_NO_SORT) ? charWidthNoSort(c,_xmin) : charWidthOptim(c,_xmin);
#else
  int wd = font_charWidthOptim(c, 0);
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fef0 	bl	8008e34 <font_charWidthOptim>
 8009054:	60f8      	str	r0, [r7, #12]
#endif
  int wdL = 0, wdR = spacing; // default spacing before and behind char
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]
 800905a:	4b2a      	ldr	r3, [pc, #168]	; (8009104 <font_charWidth+0xc4>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	613b      	str	r3, [r7, #16]
  if((*isNumberFun)(c) && minDigitWd>0) {
 8009060:	4b29      	ldr	r3, [pc, #164]	; (8009108 <font_charWidth+0xc8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	79fa      	ldrb	r2, [r7, #7]
 8009066:	4610      	mov	r0, r2
 8009068:	4798      	blx	r3
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01e      	beq.n	80090ae <font_charWidth+0x6e>
 8009070:	4b26      	ldr	r3, [pc, #152]	; (800910c <font_charWidth+0xcc>)
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d01a      	beq.n	80090ae <font_charWidth+0x6e>
    if(minDigitWd>wd) {
 8009078:	4b24      	ldr	r3, [pc, #144]	; (800910c <font_charWidth+0xcc>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4293      	cmp	r3, r2
 8009082:	da2e      	bge.n	80090e2 <font_charWidth+0xa2>
      wdL = (minDigitWd-wd)/2;
 8009084:	4b21      	ldr	r3, [pc, #132]	; (800910c <font_charWidth+0xcc>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	da00      	bge.n	8009094 <font_charWidth+0x54>
 8009092:	3301      	adds	r3, #1
 8009094:	105b      	asrs	r3, r3, #1
 8009096:	617b      	str	r3, [r7, #20]
      wdR += (minDigitWd-wd-wdL);
 8009098:	4b1c      	ldr	r3, [pc, #112]	; (800910c <font_charWidth+0xcc>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1ad2      	subs	r2, r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4413      	add	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]
    if(minDigitWd>wd) {
 80090ac:	e019      	b.n	80090e2 <font_charWidth+0xa2>
    }
  } else if(minCharWd>wd) {
 80090ae:	4b18      	ldr	r3, [pc, #96]	; (8009110 <font_charWidth+0xd0>)
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4293      	cmp	r3, r2
 80090b8:	da13      	bge.n	80090e2 <font_charWidth+0xa2>
    wdL = (minCharWd-wd)/2;
 80090ba:	4b15      	ldr	r3, [pc, #84]	; (8009110 <font_charWidth+0xd0>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	da00      	bge.n	80090ca <font_charWidth+0x8a>
 80090c8:	3301      	adds	r3, #1
 80090ca:	105b      	asrs	r3, r3, #1
 80090cc:	617b      	str	r3, [r7, #20]
    wdR += (minCharWd-wd-wdL);
 80090ce:	4b10      	ldr	r3, [pc, #64]	; (8009110 <font_charWidth+0xd0>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4413      	add	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]
  }
  return (wd+wdL+wdR+bold)*sx;
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	441a      	add	r2, r3
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	441a      	add	r2, r3
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <font_charWidth+0xd4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4413      	add	r3, r2
 80090f2:	4a09      	ldr	r2, [pc, #36]	; (8009118 <font_charWidth+0xd8>)
 80090f4:	6812      	ldr	r2, [r2, #0]
 80090f6:	fb02 f303 	mul.w	r3, r2, r3
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	2000280c 	.word	0x2000280c
 8009108:	20007a50 	.word	0x20007a50
 800910c:	20007a81 	.word	0x20007a81
 8009110:	20007a80 	.word	0x20007a80
 8009114:	20007a78 	.word	0x20007a78
 8009118:	20002810 	.word	0x20002810

0800911c <font_drawChar>:

// ----------------------------------------------------------------
int font_drawChar(int x, int y, unsigned char c)
{
 800911c:	b5b0      	push	{r4, r5, r7, lr}
 800911e:	b0ac      	sub	sp, #176	; 0xb0
 8009120:	af02      	add	r7, sp, #8
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	4613      	mov	r3, r2
 8009128:	71fb      	strb	r3, [r7, #7]
#if CONVERT_PL_CHARS==1
  c = convertPolish(c);
#endif
  if(x>=scrWd || y>=scrHt || x+rFont->wd*sx-1<0 || y+rFont->ht*sy-1<0) return 0;
 800912a:	4bac      	ldr	r3, [pc, #688]	; (80093dc <font_drawChar+0x2c0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	429a      	cmp	r2, r3
 8009132:	da1e      	bge.n	8009172 <font_drawChar+0x56>
 8009134:	4baa      	ldr	r3, [pc, #680]	; (80093e0 <font_drawChar+0x2c4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	429a      	cmp	r2, r3
 800913c:	da19      	bge.n	8009172 <font_drawChar+0x56>
 800913e:	4ba9      	ldr	r3, [pc, #676]	; (80093e4 <font_drawChar+0x2c8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	785b      	ldrb	r3, [r3, #1]
 8009144:	461a      	mov	r2, r3
 8009146:	4ba8      	ldr	r3, [pc, #672]	; (80093e8 <font_drawChar+0x2cc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	fb03 f202 	mul.w	r2, r3, r2
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4413      	add	r3, r2
 8009152:	3b01      	subs	r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	db0c      	blt.n	8009172 <font_drawChar+0x56>
 8009158:	4ba2      	ldr	r3, [pc, #648]	; (80093e4 <font_drawChar+0x2c8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	789b      	ldrb	r3, [r3, #2]
 800915e:	461a      	mov	r2, r3
 8009160:	4ba2      	ldr	r3, [pc, #648]	; (80093ec <font_drawChar+0x2d0>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	fb03 f202 	mul.w	r2, r3, r2
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4413      	add	r3, r2
 800916c:	3b01      	subs	r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	da02      	bge.n	8009178 <font_drawChar+0x5c>
 8009172:	2300      	movs	r3, #0
 8009174:	f001 b828 	b.w	800a1c8 <font_drawChar+0x10ac>
  if(c<rFont->firstCh || c>rFont->lastCh) return font_charWidth(c);
 8009178:	4b9a      	ldr	r3, [pc, #616]	; (80093e4 <font_drawChar+0x2c8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	78db      	ldrb	r3, [r3, #3]
 800917e:	79fa      	ldrb	r2, [r7, #7]
 8009180:	429a      	cmp	r2, r3
 8009182:	d305      	bcc.n	8009190 <font_drawChar+0x74>
 8009184:	4b97      	ldr	r3, [pc, #604]	; (80093e4 <font_drawChar+0x2c8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	791b      	ldrb	r3, [r3, #4]
 800918a:	79fa      	ldrb	r2, [r7, #7]
 800918c:	429a      	cmp	r2, r3
 800918e:	d906      	bls.n	800919e <font_drawChar+0x82>
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff ff54 	bl	8009040 <font_charWidth>
 8009198:	4603      	mov	r3, r0
 800919a:	f001 b815 	b.w	800a1c8 <font_drawChar+0x10ac>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 800919e:	4b91      	ldr	r3, [pc, #580]	; (80093e4 <font_drawChar+0x2c8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	498f      	ldr	r1, [pc, #572]	; (80093e4 <font_drawChar+0x2c8>)
 80091a8:	6809      	ldr	r1, [r1, #0]
 80091aa:	78c9      	ldrb	r1, [r1, #3]
 80091ac:	1a5b      	subs	r3, r3, r1
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	4413      	add	r3, r2
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 80091b8:	4b8a      	ldr	r3, [pc, #552]	; (80093e4 <font_drawChar+0x2c8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	4988      	ldr	r1, [pc, #544]	; (80093e4 <font_drawChar+0x2c8>)
 80091c2:	6809      	ldr	r1, [r1, #0]
 80091c4:	78c9      	ldrb	r1, [r1, #3]
 80091c6:	1a5b      	subs	r3, r3, r1
 80091c8:	3301      	adds	r3, #1
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	4413      	add	r3, r2
 80091ce:	881a      	ldrh	r2, [r3, #0]
 80091d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if ENABLE_NOSORT==1
  int xmin, chWd = (rFont->type & RRE_NO_SORT) ? font_charWidthNoSort(c,&xmin) : font_charWidthOptim(c,&xmin);
#else
  int xmin, chWd = font_charWidthOptim(c,&xmin);
 80091da:	f107 0210 	add.w	r2, r7, #16
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fe26 	bl	8008e34 <font_charWidthOptim>
 80091e8:	65b8      	str	r0, [r7, #88]	; 0x58
#endif
  int wd=chWd, wdL = 0, wdR = spacing;
 80091ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091f0:	2300      	movs	r3, #0
 80091f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80091f6:	4b7e      	ldr	r3, [pc, #504]	; (80093f0 <font_drawChar+0x2d4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if((*isNumberFun)(c) && minDigitWd>0) {
 80091fe:	4b7d      	ldr	r3, [pc, #500]	; (80093f4 <font_drawChar+0x2d8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	79fa      	ldrb	r2, [r7, #7]
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d025      	beq.n	800925a <font_drawChar+0x13e>
 800920e:	4b7a      	ldr	r3, [pc, #488]	; (80093f8 <font_drawChar+0x2dc>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d021      	beq.n	800925a <font_drawChar+0x13e>
    if(minDigitWd>wd) {
 8009216:	4b78      	ldr	r3, [pc, #480]	; (80093f8 <font_drawChar+0x2dc>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009220:	4293      	cmp	r3, r2
 8009222:	da3b      	bge.n	800929c <font_drawChar+0x180>
      wdL = (minDigitWd-wd)/2;
 8009224:	4b74      	ldr	r3, [pc, #464]	; (80093f8 <font_drawChar+0x2dc>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
 800922a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	da00      	bge.n	8009236 <font_drawChar+0x11a>
 8009234:	3301      	adds	r3, #1
 8009236:	105b      	asrs	r3, r3, #1
 8009238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      wdR += (minDigitWd-wd-wdL);
 800923c:	4b6e      	ldr	r3, [pc, #440]	; (80093f8 <font_drawChar+0x2dc>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	461a      	mov	r2, r3
 8009242:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009246:	1ad2      	subs	r2, r2, r3
 8009248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009252:	4413      	add	r3, r2
 8009254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(minDigitWd>wd) {
 8009258:	e020      	b.n	800929c <font_drawChar+0x180>
    }
  } else if(minCharWd>wd) {
 800925a:	4b68      	ldr	r3, [pc, #416]	; (80093fc <font_drawChar+0x2e0>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009264:	4293      	cmp	r3, r2
 8009266:	da19      	bge.n	800929c <font_drawChar+0x180>
    wdL = (minCharWd-wd)/2;
 8009268:	4b64      	ldr	r3, [pc, #400]	; (80093fc <font_drawChar+0x2e0>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	da00      	bge.n	800927a <font_drawChar+0x15e>
 8009278:	3301      	adds	r3, #1
 800927a:	105b      	asrs	r3, r3, #1
 800927c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    wdR += (minCharWd-wd-wdL);
 8009280:	4b5e      	ldr	r3, [pc, #376]	; (80093fc <font_drawChar+0x2e0>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009296:	4413      	add	r3, r2
 8009298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  if(x+wd+wdL+wdR>scrWd) wdR = max(scrWd-x-wdL-wd, 0);
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092a2:	441a      	add	r2, r3
 80092a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092a8:	441a      	add	r2, r3
 80092aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092ae:	441a      	add	r2, r3
 80092b0:	4b4a      	ldr	r3, [pc, #296]	; (80093dc <font_drawChar+0x2c0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	dd0d      	ble.n	80092d4 <font_drawChar+0x1b8>
 80092b8:	4b48      	ldr	r3, [pc, #288]	; (80093dc <font_drawChar+0x2c0>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	1ad2      	subs	r2, r2, r3
 80092c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092c4:	1ad2      	subs	r2, r2, r3
 80092c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if(x+wd+wdL+wdR>scrWd) wd  = max(scrWd-x-wdL, 0);
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80092da:	441a      	add	r2, r3
 80092dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092e0:	441a      	add	r2, r3
 80092e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092e6:	441a      	add	r2, r3
 80092e8:	4b3c      	ldr	r3, [pc, #240]	; (80093dc <font_drawChar+0x2c0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	dd0a      	ble.n	8009306 <font_drawChar+0x1ea>
 80092f0:	4b3a      	ldr	r3, [pc, #232]	; (80093dc <font_drawChar+0x2c0>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	1ad2      	subs	r2, r2, r3
 80092f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if(x+wd+wdL+wdR>scrWd) wdL = max(scrWd-x, 0);
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800930c:	441a      	add	r2, r3
 800930e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009312:	441a      	add	r2, r3
 8009314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009318:	441a      	add	r2, r3
 800931a:	4b30      	ldr	r3, [pc, #192]	; (80093dc <font_drawChar+0x2c0>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	dd07      	ble.n	8009332 <font_drawChar+0x216>
 8009322:	4b2e      	ldr	r3, [pc, #184]	; (80093dc <font_drawChar+0x2c0>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800932e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  wd+=wdR+wdL;
 8009332:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800933a:	4413      	add	r3, r2
 800933c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009340:	4413      	add	r3, r2
 8009342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int type=rFont->type & 7;
 8009346:	4b27      	ldr	r3, [pc, #156]	; (80093e4 <font_drawChar+0x2c8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	657b      	str	r3, [r7, #84]	; 0x54
  if(bg!=fg && (type==RRE_16B ||type==RRE_24B ||type==RRE_32B || !recNum)) (*fillRectFun)(x, y, (wd+bold)*sx, rFont->ht*sy, bg);
 8009352:	4b2b      	ldr	r3, [pc, #172]	; (8009400 <font_drawChar+0x2e4>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4b2b      	ldr	r3, [pc, #172]	; (8009404 <font_drawChar+0x2e8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d026      	beq.n	80093ac <font_drawChar+0x290>
 800935e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009360:	2b00      	cmp	r3, #0
 8009362:	d009      	beq.n	8009378 <font_drawChar+0x25c>
 8009364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009366:	2b03      	cmp	r3, #3
 8009368:	d006      	beq.n	8009378 <font_drawChar+0x25c>
 800936a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800936c:	2b06      	cmp	r3, #6
 800936e:	d003      	beq.n	8009378 <font_drawChar+0x25c>
 8009370:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d119      	bne.n	80093ac <font_drawChar+0x290>
 8009378:	4b23      	ldr	r3, [pc, #140]	; (8009408 <font_drawChar+0x2ec>)
 800937a:	681c      	ldr	r4, [r3, #0]
 800937c:	4b23      	ldr	r3, [pc, #140]	; (800940c <font_drawChar+0x2f0>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009384:	4413      	add	r3, r2
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <font_drawChar+0x2cc>)
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	fb02 f203 	mul.w	r2, r2, r3
 800938e:	4b15      	ldr	r3, [pc, #84]	; (80093e4 <font_drawChar+0x2c8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	789b      	ldrb	r3, [r3, #2]
 8009394:	4619      	mov	r1, r3
 8009396:	4b15      	ldr	r3, [pc, #84]	; (80093ec <font_drawChar+0x2d0>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	fb03 f101 	mul.w	r1, r3, r1
 800939e:	4b18      	ldr	r3, [pc, #96]	; (8009400 <font_drawChar+0x2e4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	460b      	mov	r3, r1
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	47a0      	blx	r4
  x+=wdL*sx;
 80093ac:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <font_drawChar+0x2cc>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80093b4:	fb02 f303 	mul.w	r3, r2, r3
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
  if(!recNum) return (wd+bold)*sx;
 80093be:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d124      	bne.n	8009410 <font_drawChar+0x2f4>
 80093c6:	4b11      	ldr	r3, [pc, #68]	; (800940c <font_drawChar+0x2f0>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093ce:	4413      	add	r3, r2
 80093d0:	4a05      	ldr	r2, [pc, #20]	; (80093e8 <font_drawChar+0x2cc>)
 80093d2:	6812      	ldr	r2, [r2, #0]
 80093d4:	fb02 f303 	mul.w	r3, r2, r3
 80093d8:	f000 bef6 	b.w	800a1c8 <font_drawChar+0x10ac>
 80093dc:	20007a6c 	.word	0x20007a6c
 80093e0:	20007a70 	.word	0x20007a70
 80093e4:	20007a58 	.word	0x20007a58
 80093e8:	20002810 	.word	0x20002810
 80093ec:	20002814 	.word	0x20002814
 80093f0:	2000280c 	.word	0x2000280c
 80093f4:	20007a50 	.word	0x20007a50
 80093f8:	20007a81 	.word	0x20007a81
 80093fc:	20007a80 	.word	0x20007a80
 8009400:	2000281c 	.word	0x2000281c
 8009404:	20002818 	.word	0x20002818
 8009408:	20007a54 	.word	0x20007a54
 800940c:	20007a78 	.word	0x20007a78
  switch(type) {
 8009410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009412:	2b06      	cmp	r3, #6
 8009414:	f200 86c8 	bhi.w	800a1a8 <font_drawChar+0x108c>
 8009418:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <font_drawChar+0x304>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	0800943d 	.word	0x0800943d
 8009424:	080096c1 	.word	0x080096c1
 8009428:	080099f9 	.word	0x080099f9
 800942c:	080094fd 	.word	0x080094fd
 8009430:	08009ddd 	.word	0x08009ddd
 8009434:	0800a0d3 	.word	0x0800a0d3
 8009438:	080095e1 	.word	0x080095e1
#if ENABLE_RRE_16B==1
    case RRE_16B:
      for(int i=0; i<recNum; i++) {
 800943c:	2300      	movs	r3, #0
 800943e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009442:	e053      	b.n	80094ec <font_drawChar+0x3d0>
        unsigned short *rects = (unsigned short*)rFont->rects;
 8009444:	4b94      	ldr	r3, [pc, #592]	; (8009698 <font_drawChar+0x57c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	61bb      	str	r3, [r7, #24]
        unsigned short v = (rects[i+recIdx]);
 800944c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009454:	4413      	add	r3, r2
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	4413      	add	r3, r2
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	82fb      	strh	r3, [r7, #22]
        xf = (v & 0x000f)-xmin;
 8009460:	8afb      	ldrh	r3, [r7, #22]
 8009462:	f003 020f 	and.w	r2, r3, #15
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	4a8c      	ldr	r2, [pc, #560]	; (800969c <font_drawChar+0x580>)
 800946c:	6013      	str	r3, [r2, #0]
        yf = (v & 0x00f0)>>4;
 800946e:	8afb      	ldrh	r3, [r7, #22]
 8009470:	111b      	asrs	r3, r3, #4
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	4a8a      	ldr	r2, [pc, #552]	; (80096a0 <font_drawChar+0x584>)
 8009478:	6013      	str	r3, [r2, #0]
        wf = ((v & 0x0f00)>>8)+1;
 800947a:	8afb      	ldrh	r3, [r7, #22]
 800947c:	121b      	asrs	r3, r3, #8
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	3301      	adds	r3, #1
 8009484:	4a87      	ldr	r2, [pc, #540]	; (80096a4 <font_drawChar+0x588>)
 8009486:	6013      	str	r3, [r2, #0]
        hf = ((v & 0xf000)>>12)+1;
 8009488:	8afb      	ldrh	r3, [r7, #22]
 800948a:	0b1b      	lsrs	r3, r3, #12
 800948c:	b29b      	uxth	r3, r3
 800948e:	3301      	adds	r3, #1
 8009490:	4a85      	ldr	r2, [pc, #532]	; (80096a8 <font_drawChar+0x58c>)
 8009492:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009494:	4b85      	ldr	r3, [pc, #532]	; (80096ac <font_drawChar+0x590>)
 8009496:	681c      	ldr	r4, [r3, #0]
 8009498:	4b80      	ldr	r3, [pc, #512]	; (800969c <font_drawChar+0x580>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a84      	ldr	r2, [pc, #528]	; (80096b0 <font_drawChar+0x594>)
 800949e:	6812      	ldr	r2, [r2, #0]
 80094a0:	fb02 f203 	mul.w	r2, r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	18d0      	adds	r0, r2, r3
 80094a8:	4b7d      	ldr	r3, [pc, #500]	; (80096a0 <font_drawChar+0x584>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a81      	ldr	r2, [pc, #516]	; (80096b4 <font_drawChar+0x598>)
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	fb02 f203 	mul.w	r2, r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	18d1      	adds	r1, r2, r3
 80094b8:	4b7a      	ldr	r3, [pc, #488]	; (80096a4 <font_drawChar+0x588>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a7c      	ldr	r2, [pc, #496]	; (80096b0 <font_drawChar+0x594>)
 80094be:	6812      	ldr	r2, [r2, #0]
 80094c0:	fb02 f203 	mul.w	r2, r2, r3
 80094c4:	4b7c      	ldr	r3, [pc, #496]	; (80096b8 <font_drawChar+0x59c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	18d5      	adds	r5, r2, r3
 80094ca:	4b77      	ldr	r3, [pc, #476]	; (80096a8 <font_drawChar+0x58c>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a79      	ldr	r2, [pc, #484]	; (80096b4 <font_drawChar+0x598>)
 80094d0:	6812      	ldr	r2, [r2, #0]
 80094d2:	fb02 f203 	mul.w	r2, r2, r3
 80094d6:	4b79      	ldr	r3, [pc, #484]	; (80096bc <font_drawChar+0x5a0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	4613      	mov	r3, r2
 80094de:	462a      	mov	r2, r5
 80094e0:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80094e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094e6:	3301      	adds	r3, #1
 80094e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80094f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80094f4:	429a      	cmp	r2, r3
 80094f6:	dba5      	blt.n	8009444 <font_drawChar+0x328>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 80094f8:	f000 be5d 	b.w	800a1b6 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B:
      for(int i=0; i<recNum; i++) {
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009502:	e065      	b.n	80095d0 <font_drawChar+0x4b4>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8009504:	4b64      	ldr	r3, [pc, #400]	; (8009698 <font_drawChar+0x57c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6899      	ldr	r1, [r3, #8]
 800950a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800950e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009512:	441a      	add	r2, r3
 8009514:	4613      	mov	r3, r2
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	4413      	add	r3, r2
 800951a:	440b      	add	r3, r1
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
        xf = ((rects[0]) & 0x3f)-xmin;
 800951e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	4a5c      	ldr	r2, [pc, #368]	; (800969c <font_drawChar+0x580>)
 800952c:	6013      	str	r3, [r2, #0]
        yf = ((rects[1]) & 0x3f);
 800952e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009530:	3301      	adds	r3, #1
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009538:	4a59      	ldr	r2, [pc, #356]	; (80096a0 <font_drawChar+0x584>)
 800953a:	6013      	str	r3, [r2, #0]
        wf = ((rects[2]) & 0x3f)+1;
 800953c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953e:	3302      	adds	r3, #2
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009546:	3301      	adds	r3, #1
 8009548:	4a56      	ldr	r2, [pc, #344]	; (80096a4 <font_drawChar+0x588>)
 800954a:	6013      	str	r3, [r2, #0]
        hf = 1+((((rects[0]) & 0xc0)>>6) | (((rects[1]) & 0xc0)>>4) | (((rects[2]) & 0xc0)>>2));
 800954c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	099b      	lsrs	r3, r3, #6
 8009552:	b2db      	uxtb	r3, r3
 8009554:	461a      	mov	r2, r3
 8009556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009558:	3301      	adds	r3, #1
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	111b      	asrs	r3, r3, #4
 800955e:	f003 030c 	and.w	r3, r3, #12
 8009562:	431a      	orrs	r2, r3
 8009564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009566:	3302      	adds	r3, #2
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	109b      	asrs	r3, r3, #2
 800956c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009570:	4313      	orrs	r3, r2
 8009572:	3301      	adds	r3, #1
 8009574:	4a4c      	ldr	r2, [pc, #304]	; (80096a8 <font_drawChar+0x58c>)
 8009576:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009578:	4b4c      	ldr	r3, [pc, #304]	; (80096ac <font_drawChar+0x590>)
 800957a:	681c      	ldr	r4, [r3, #0]
 800957c:	4b47      	ldr	r3, [pc, #284]	; (800969c <font_drawChar+0x580>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a4b      	ldr	r2, [pc, #300]	; (80096b0 <font_drawChar+0x594>)
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	fb02 f203 	mul.w	r2, r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	18d0      	adds	r0, r2, r3
 800958c:	4b44      	ldr	r3, [pc, #272]	; (80096a0 <font_drawChar+0x584>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a48      	ldr	r2, [pc, #288]	; (80096b4 <font_drawChar+0x598>)
 8009592:	6812      	ldr	r2, [r2, #0]
 8009594:	fb02 f203 	mul.w	r2, r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	18d1      	adds	r1, r2, r3
 800959c:	4b41      	ldr	r3, [pc, #260]	; (80096a4 <font_drawChar+0x588>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a43      	ldr	r2, [pc, #268]	; (80096b0 <font_drawChar+0x594>)
 80095a2:	6812      	ldr	r2, [r2, #0]
 80095a4:	fb02 f203 	mul.w	r2, r2, r3
 80095a8:	4b43      	ldr	r3, [pc, #268]	; (80096b8 <font_drawChar+0x59c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	18d5      	adds	r5, r2, r3
 80095ae:	4b3e      	ldr	r3, [pc, #248]	; (80096a8 <font_drawChar+0x58c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a40      	ldr	r2, [pc, #256]	; (80096b4 <font_drawChar+0x598>)
 80095b4:	6812      	ldr	r2, [r2, #0]
 80095b6:	fb02 f203 	mul.w	r2, r2, r3
 80095ba:	4b40      	ldr	r3, [pc, #256]	; (80096bc <font_drawChar+0x5a0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	4613      	mov	r3, r2
 80095c2:	462a      	mov	r2, r5
 80095c4:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80095c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095ca:	3301      	adds	r3, #1
 80095cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80095d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095d8:	429a      	cmp	r2, r3
 80095da:	db93      	blt.n	8009504 <font_drawChar+0x3e8>
      }
      break;
 80095dc:	f000 bdeb 	b.w	800a1b6 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B:
      for(int i=0; i<recNum; i++) {
 80095e0:	2300      	movs	r3, #0
 80095e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095e6:	e04f      	b.n	8009688 <font_drawChar+0x56c>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*4;
 80095e8:	4b2b      	ldr	r3, [pc, #172]	; (8009698 <font_drawChar+0x57c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 80095f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80095f6:	440a      	add	r2, r1
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	653b      	str	r3, [r7, #80]	; 0x50
        xf = (rects[0])-xmin;
 80095fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	4a24      	ldr	r2, [pc, #144]	; (800969c <font_drawChar+0x580>)
 800960a:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800960c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960e:	3301      	adds	r3, #1
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <font_drawChar+0x584>)
 8009616:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 8009618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961a:	3302      	adds	r3, #2
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	3301      	adds	r3, #1
 8009620:	4a20      	ldr	r2, [pc, #128]	; (80096a4 <font_drawChar+0x588>)
 8009622:	6013      	str	r3, [r2, #0]
        hf = (rects[3])+1;
 8009624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009626:	3303      	adds	r3, #3
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	4a1e      	ldr	r2, [pc, #120]	; (80096a8 <font_drawChar+0x58c>)
 800962e:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009630:	4b1e      	ldr	r3, [pc, #120]	; (80096ac <font_drawChar+0x590>)
 8009632:	681c      	ldr	r4, [r3, #0]
 8009634:	4b19      	ldr	r3, [pc, #100]	; (800969c <font_drawChar+0x580>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1d      	ldr	r2, [pc, #116]	; (80096b0 <font_drawChar+0x594>)
 800963a:	6812      	ldr	r2, [r2, #0]
 800963c:	fb02 f203 	mul.w	r2, r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	18d0      	adds	r0, r2, r3
 8009644:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <font_drawChar+0x584>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1a      	ldr	r2, [pc, #104]	; (80096b4 <font_drawChar+0x598>)
 800964a:	6812      	ldr	r2, [r2, #0]
 800964c:	fb02 f203 	mul.w	r2, r2, r3
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	18d1      	adds	r1, r2, r3
 8009654:	4b13      	ldr	r3, [pc, #76]	; (80096a4 <font_drawChar+0x588>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a15      	ldr	r2, [pc, #84]	; (80096b0 <font_drawChar+0x594>)
 800965a:	6812      	ldr	r2, [r2, #0]
 800965c:	fb02 f203 	mul.w	r2, r2, r3
 8009660:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <font_drawChar+0x59c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	18d5      	adds	r5, r2, r3
 8009666:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <font_drawChar+0x58c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a12      	ldr	r2, [pc, #72]	; (80096b4 <font_drawChar+0x598>)
 800966c:	6812      	ldr	r2, [r2, #0]
 800966e:	fb02 f203 	mul.w	r2, r2, r3
 8009672:	4b12      	ldr	r3, [pc, #72]	; (80096bc <font_drawChar+0x5a0>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4613      	mov	r3, r2
 800967a:	462a      	mov	r2, r5
 800967c:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800967e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009682:	3301      	adds	r3, #1
 8009684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009688:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800968c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009690:	429a      	cmp	r2, r3
 8009692:	dba9      	blt.n	80095e8 <font_drawChar+0x4cc>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8009694:	f000 bd8f 	b.w	800a1b6 <font_drawChar+0x109a>
 8009698:	20007a58 	.word	0x20007a58
 800969c:	20007a5c 	.word	0x20007a5c
 80096a0:	20007a60 	.word	0x20007a60
 80096a4:	20007a64 	.word	0x20007a64
 80096a8:	20007a68 	.word	0x20007a68
 80096ac:	20007a54 	.word	0x20007a54
 80096b0:	20002810 	.word	0x20002810
 80096b4:	20002814 	.word	0x20002814
 80096b8:	20007a78 	.word	0x20007a78
 80096bc:	20002818 	.word	0x20002818
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B:
      if(bg!=fg) {
 80096c0:	4b96      	ldr	r3, [pc, #600]	; (800991c <font_drawChar+0x800>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	4b96      	ldr	r3, [pc, #600]	; (8009920 <font_drawChar+0x804>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	f000 8123 	beq.w	8009914 <font_drawChar+0x7f8>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 80096ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	dd1d      	ble.n	8009712 <font_drawChar+0x5f6>
 80096d6:	4b93      	ldr	r3, [pc, #588]	; (8009924 <font_drawChar+0x808>)
 80096d8:	681c      	ldr	r4, [r3, #0]
 80096da:	4b93      	ldr	r3, [pc, #588]	; (8009928 <font_drawChar+0x80c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80096e2:	fb02 f303 	mul.w	r3, r2, r3
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	1ad0      	subs	r0, r2, r3
 80096ea:	4b8f      	ldr	r3, [pc, #572]	; (8009928 <font_drawChar+0x80c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80096f2:	fb02 f203 	mul.w	r2, r2, r3
 80096f6:	4b8d      	ldr	r3, [pc, #564]	; (800992c <font_drawChar+0x810>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	789b      	ldrb	r3, [r3, #2]
 80096fc:	4619      	mov	r1, r3
 80096fe:	4b8c      	ldr	r3, [pc, #560]	; (8009930 <font_drawChar+0x814>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	fb03 f101 	mul.w	r1, r3, r1
 8009706:	4b85      	ldr	r3, [pc, #532]	; (800991c <font_drawChar+0x800>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	460b      	mov	r3, r1
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects+recIdx;
 8009712:	4b86      	ldr	r3, [pc, #536]	; (800992c <font_drawChar+0x810>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	4413      	add	r3, r2
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
        int idx=0;
 8009722:	2300      	movs	r3, #0
 8009724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while(idx<recNum) {
 8009728:	e0c9      	b.n	80098be <font_drawChar+0x7a2>
          unsigned short v = *(rects+idx);
 800972a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009732:	4413      	add	r3, r2
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	847b      	strh	r3, [r7, #34]	; 0x22
          xf = (v & 0x3f)-xmin;
 8009738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800973a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	4a7c      	ldr	r2, [pc, #496]	; (8009934 <font_drawChar+0x818>)
 8009744:	6013      	str	r3, [r2, #0]
          int ybg=0,xfCur=xf;
 8009746:	2300      	movs	r3, #0
 8009748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800974c:	4b79      	ldr	r3, [pc, #484]	; (8009934 <font_drawChar+0x818>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	61fb      	str	r3, [r7, #28]
          while(xf==xfCur && idx<recNum) {
 8009752:	e079      	b.n	8009848 <font_drawChar+0x72c>
            v = *(rects+idx);
 8009754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975c:	4413      	add	r3, r2
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	847b      	strh	r3, [r7, #34]	; 0x22
            yf = (v>>6) & 0x1f;
 8009762:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009764:	099b      	lsrs	r3, r3, #6
 8009766:	b29b      	uxth	r3, r3
 8009768:	f003 031f 	and.w	r3, r3, #31
 800976c:	4a72      	ldr	r2, [pc, #456]	; (8009938 <font_drawChar+0x81c>)
 800976e:	6013      	str	r3, [r2, #0]
            hf = ((v>>11) & 0x1f)+1;
 8009770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009772:	0adb      	lsrs	r3, r3, #11
 8009774:	b29b      	uxth	r3, r3
 8009776:	f003 031f 	and.w	r3, r3, #31
 800977a:	3301      	adds	r3, #1
 800977c:	4a6f      	ldr	r2, [pc, #444]	; (800993c <font_drawChar+0x820>)
 800977e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8009780:	4b6d      	ldr	r3, [pc, #436]	; (8009938 <font_drawChar+0x81c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009788:	429a      	cmp	r2, r3
 800978a:	da21      	bge.n	80097d0 <font_drawChar+0x6b4>
 800978c:	4b65      	ldr	r3, [pc, #404]	; (8009924 <font_drawChar+0x808>)
 800978e:	681c      	ldr	r4, [r3, #0]
 8009790:	4b65      	ldr	r3, [pc, #404]	; (8009928 <font_drawChar+0x80c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	fb02 f203 	mul.w	r2, r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	18d0      	adds	r0, r2, r3
 800979e:	4b64      	ldr	r3, [pc, #400]	; (8009930 <font_drawChar+0x814>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80097a6:	fb02 f203 	mul.w	r2, r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	18d1      	adds	r1, r2, r3
 80097ae:	4b5e      	ldr	r3, [pc, #376]	; (8009928 <font_drawChar+0x80c>)
 80097b0:	681d      	ldr	r5, [r3, #0]
 80097b2:	4b61      	ldr	r3, [pc, #388]	; (8009938 <font_drawChar+0x81c>)
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ba:	1ad3      	subs	r3, r2, r3
 80097bc:	4a5c      	ldr	r2, [pc, #368]	; (8009930 <font_drawChar+0x814>)
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	fb02 f203 	mul.w	r2, r2, r3
 80097c4:	4b55      	ldr	r3, [pc, #340]	; (800991c <font_drawChar+0x800>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	4613      	mov	r3, r2
 80097cc:	462a      	mov	r2, r5
 80097ce:	47a0      	blx	r4
            ybg = yf+hf;
 80097d0:	4b59      	ldr	r3, [pc, #356]	; (8009938 <font_drawChar+0x81c>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	4b59      	ldr	r3, [pc, #356]	; (800993c <font_drawChar+0x820>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4413      	add	r3, r2
 80097da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 80097de:	4b51      	ldr	r3, [pc, #324]	; (8009924 <font_drawChar+0x808>)
 80097e0:	681c      	ldr	r4, [r3, #0]
 80097e2:	4b51      	ldr	r3, [pc, #324]	; (8009928 <font_drawChar+0x80c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	fb02 f203 	mul.w	r2, r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	18d0      	adds	r0, r2, r3
 80097f0:	4b51      	ldr	r3, [pc, #324]	; (8009938 <font_drawChar+0x81c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a4e      	ldr	r2, [pc, #312]	; (8009930 <font_drawChar+0x814>)
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	fb02 f203 	mul.w	r2, r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	18d1      	adds	r1, r2, r3
 8009800:	4b4f      	ldr	r3, [pc, #316]	; (8009940 <font_drawChar+0x824>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4b48      	ldr	r3, [pc, #288]	; (8009928 <font_drawChar+0x80c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	18d5      	adds	r5, r2, r3
 800980a:	4b4c      	ldr	r3, [pc, #304]	; (800993c <font_drawChar+0x820>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a48      	ldr	r2, [pc, #288]	; (8009930 <font_drawChar+0x814>)
 8009810:	6812      	ldr	r2, [r2, #0]
 8009812:	fb02 f203 	mul.w	r2, r2, r3
 8009816:	4b42      	ldr	r3, [pc, #264]	; (8009920 <font_drawChar+0x804>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	4613      	mov	r3, r2
 800981e:	462a      	mov	r2, r5
 8009820:	47a0      	blx	r4
            idx++;
 8009822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009826:	3301      	adds	r3, #1
 8009828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            v = *(rects+idx);
 800982c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009834:	4413      	add	r3, r2
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	847b      	strh	r3, [r7, #34]	; 0x22
            xf = (v & 0x3f)-xmin;
 800983a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800983c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	4a3b      	ldr	r2, [pc, #236]	; (8009934 <font_drawChar+0x818>)
 8009846:	6013      	str	r3, [r2, #0]
          while(xf==xfCur && idx<recNum) {
 8009848:	4b3a      	ldr	r3, [pc, #232]	; (8009934 <font_drawChar+0x818>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	429a      	cmp	r2, r3
 8009850:	d106      	bne.n	8009860 <font_drawChar+0x744>
 8009852:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009856:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800985a:	429a      	cmp	r2, r3
 800985c:	f6ff af7a 	blt.w	8009754 <font_drawChar+0x638>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 8009860:	4b32      	ldr	r3, [pc, #200]	; (800992c <font_drawChar+0x810>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	789b      	ldrb	r3, [r3, #2]
 8009866:	461a      	mov	r2, r3
 8009868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800986c:	4293      	cmp	r3, r2
 800986e:	da26      	bge.n	80098be <font_drawChar+0x7a2>
 8009870:	4b2c      	ldr	r3, [pc, #176]	; (8009924 <font_drawChar+0x808>)
 8009872:	681c      	ldr	r4, [r3, #0]
 8009874:	4b2c      	ldr	r3, [pc, #176]	; (8009928 <font_drawChar+0x80c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	fb02 f203 	mul.w	r2, r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	18d0      	adds	r0, r2, r3
 8009882:	4b2b      	ldr	r3, [pc, #172]	; (8009930 <font_drawChar+0x814>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800988a:	fb02 f203 	mul.w	r2, r2, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	18d1      	adds	r1, r2, r3
 8009892:	4b2b      	ldr	r3, [pc, #172]	; (8009940 <font_drawChar+0x824>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	4b24      	ldr	r3, [pc, #144]	; (8009928 <font_drawChar+0x80c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	18d5      	adds	r5, r2, r3
 800989c:	4b23      	ldr	r3, [pc, #140]	; (800992c <font_drawChar+0x810>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	789b      	ldrb	r3, [r3, #2]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	4a21      	ldr	r2, [pc, #132]	; (8009930 <font_drawChar+0x814>)
 80098ac:	6812      	ldr	r2, [r2, #0]
 80098ae:	fb02 f203 	mul.w	r2, r2, r3
 80098b2:	4b1a      	ldr	r3, [pc, #104]	; (800991c <font_drawChar+0x800>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	4613      	mov	r3, r2
 80098ba:	462a      	mov	r2, r5
 80098bc:	47a0      	blx	r4
        while(idx<recNum) {
 80098be:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80098c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80098c6:	429a      	cmp	r2, r3
 80098c8:	f6ff af2f 	blt.w	800972a <font_drawChar+0x60e>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 80098cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f340 846b 	ble.w	800a1ac <font_drawChar+0x1090>
 80098d6:	4b13      	ldr	r3, [pc, #76]	; (8009924 <font_drawChar+0x808>)
 80098d8:	681c      	ldr	r4, [r3, #0]
 80098da:	4b13      	ldr	r3, [pc, #76]	; (8009928 <font_drawChar+0x80c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098e0:	fb02 f203 	mul.w	r2, r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	18d0      	adds	r0, r2, r3
 80098e8:	4b0f      	ldr	r3, [pc, #60]	; (8009928 <font_drawChar+0x80c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80098f0:	fb02 f203 	mul.w	r2, r2, r3
 80098f4:	4b0d      	ldr	r3, [pc, #52]	; (800992c <font_drawChar+0x810>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	4619      	mov	r1, r3
 80098fc:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <font_drawChar+0x814>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	fb03 f101 	mul.w	r1, r3, r1
 8009904:	4b05      	ldr	r3, [pc, #20]	; (800991c <font_drawChar+0x800>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	460b      	mov	r3, r1
 800990c:	68b9      	ldr	r1, [r7, #8]
 800990e:	47a0      	blx	r4
        yf = (v>>6) & 0x1f;
        hf = ((v>>11) & 0x1f)+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009910:	f000 bc4c 	b.w	800a1ac <font_drawChar+0x1090>
      for(int i=0; i<recNum; i++) {
 8009914:	2300      	movs	r3, #0
 8009916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800991a:	e066      	b.n	80099ea <font_drawChar+0x8ce>
 800991c:	2000281c 	.word	0x2000281c
 8009920:	20002818 	.word	0x20002818
 8009924:	20007a54 	.word	0x20007a54
 8009928:	20002810 	.word	0x20002810
 800992c:	20007a58 	.word	0x20007a58
 8009930:	20002814 	.word	0x20002814
 8009934:	20007a5c 	.word	0x20007a5c
 8009938:	20007a60 	.word	0x20007a60
 800993c:	20007a68 	.word	0x20007a68
 8009940:	20007a78 	.word	0x20007a78
        unsigned short *rects = (unsigned short*)rFont->rects;
 8009944:	4b64      	ldr	r3, [pc, #400]	; (8009ad8 <font_drawChar+0x9bc>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c
        unsigned short v = (rects[i+recIdx]);
 800994c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009954:	4413      	add	r3, r2
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	857b      	strh	r3, [r7, #42]	; 0x2a
        xf = (v & 0x3f)-xmin;
 8009960:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	4a5c      	ldr	r2, [pc, #368]	; (8009adc <font_drawChar+0x9c0>)
 800996c:	6013      	str	r3, [r2, #0]
        yf = (v>>6) & 0x1f;
 800996e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009970:	099b      	lsrs	r3, r3, #6
 8009972:	b29b      	uxth	r3, r3
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	4a59      	ldr	r2, [pc, #356]	; (8009ae0 <font_drawChar+0x9c4>)
 800997a:	6013      	str	r3, [r2, #0]
        hf = ((v>>11) & 0x1f)+1;
 800997c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800997e:	0adb      	lsrs	r3, r3, #11
 8009980:	b29b      	uxth	r3, r3
 8009982:	f003 031f 	and.w	r3, r3, #31
 8009986:	3301      	adds	r3, #1
 8009988:	4a56      	ldr	r2, [pc, #344]	; (8009ae4 <font_drawChar+0x9c8>)
 800998a:	6013      	str	r3, [r2, #0]
        wf = 1;
 800998c:	4b56      	ldr	r3, [pc, #344]	; (8009ae8 <font_drawChar+0x9cc>)
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009992:	4b56      	ldr	r3, [pc, #344]	; (8009aec <font_drawChar+0x9d0>)
 8009994:	681c      	ldr	r4, [r3, #0]
 8009996:	4b51      	ldr	r3, [pc, #324]	; (8009adc <font_drawChar+0x9c0>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a55      	ldr	r2, [pc, #340]	; (8009af0 <font_drawChar+0x9d4>)
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	fb02 f203 	mul.w	r2, r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	18d0      	adds	r0, r2, r3
 80099a6:	4b4e      	ldr	r3, [pc, #312]	; (8009ae0 <font_drawChar+0x9c4>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a52      	ldr	r2, [pc, #328]	; (8009af4 <font_drawChar+0x9d8>)
 80099ac:	6812      	ldr	r2, [r2, #0]
 80099ae:	fb02 f203 	mul.w	r2, r2, r3
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	18d1      	adds	r1, r2, r3
 80099b6:	4b4c      	ldr	r3, [pc, #304]	; (8009ae8 <font_drawChar+0x9cc>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a4d      	ldr	r2, [pc, #308]	; (8009af0 <font_drawChar+0x9d4>)
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	fb02 f203 	mul.w	r2, r2, r3
 80099c2:	4b4d      	ldr	r3, [pc, #308]	; (8009af8 <font_drawChar+0x9dc>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	18d5      	adds	r5, r2, r3
 80099c8:	4b46      	ldr	r3, [pc, #280]	; (8009ae4 <font_drawChar+0x9c8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a49      	ldr	r2, [pc, #292]	; (8009af4 <font_drawChar+0x9d8>)
 80099ce:	6812      	ldr	r2, [r2, #0]
 80099d0:	fb02 f203 	mul.w	r2, r2, r3
 80099d4:	4b49      	ldr	r3, [pc, #292]	; (8009afc <font_drawChar+0x9e0>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	4613      	mov	r3, r2
 80099dc:	462a      	mov	r2, r5
 80099de:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80099e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099e4:	3301      	adds	r3, #1
 80099e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80099ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80099f2:	429a      	cmp	r2, r3
 80099f4:	dba6      	blt.n	8009944 <font_drawChar+0x828>
      break;
 80099f6:	e3d9      	b.n	800a1ac <font_drawChar+0x1090>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B:
      if(bg!=fg) {
 80099f8:	4b41      	ldr	r3, [pc, #260]	; (8009b00 <font_drawChar+0x9e4>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	4b3f      	ldr	r3, [pc, #252]	; (8009afc <font_drawChar+0x9e0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	f000 817e 	beq.w	8009d02 <font_drawChar+0xbe6>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8009a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	dd1d      	ble.n	8009a4a <font_drawChar+0x92e>
 8009a0e:	4b37      	ldr	r3, [pc, #220]	; (8009aec <font_drawChar+0x9d0>)
 8009a10:	681c      	ldr	r4, [r3, #0]
 8009a12:	4b37      	ldr	r3, [pc, #220]	; (8009af0 <font_drawChar+0x9d4>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a1a:	fb02 f303 	mul.w	r3, r2, r3
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	1ad0      	subs	r0, r2, r3
 8009a22:	4b33      	ldr	r3, [pc, #204]	; (8009af0 <font_drawChar+0x9d4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009a2a:	fb02 f203 	mul.w	r2, r2, r3
 8009a2e:	4b2a      	ldr	r3, [pc, #168]	; (8009ad8 <font_drawChar+0x9bc>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	789b      	ldrb	r3, [r3, #2]
 8009a34:	4619      	mov	r1, r3
 8009a36:	4b2f      	ldr	r3, [pc, #188]	; (8009af4 <font_drawChar+0x9d8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	fb03 f101 	mul.w	r1, r3, r1
 8009a3e:	4b30      	ldr	r3, [pc, #192]	; (8009b00 <font_drawChar+0x9e4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	460b      	mov	r3, r1
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects;
 8009a4a:	4b23      	ldr	r3, [pc, #140]	; (8009ad8 <font_drawChar+0x9bc>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30
        int idx=0,yfCur=0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a58:	2300      	movs	r3, #0
 8009a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
        while(idx<recNum) {
 8009a5c:	e127      	b.n	8009cae <font_drawChar+0xb92>
          unsigned short v = *(rects+idx+recIdx);
 8009a5e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a66:	4413      	add	r3, r2
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a6c:	4413      	add	r3, r2
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
          yf = (v>>5) & 0x3f;
 8009a74:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009a78:	095b      	lsrs	r3, r3, #5
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a80:	4a17      	ldr	r2, [pc, #92]	; (8009ae0 <font_drawChar+0x9c4>)
 8009a82:	6013      	str	r3, [r2, #0]
          if(yf-yfCur>1 /*|| (yf-yfCur>0 && yfCur==0)*/) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yf-yfCur)*sy, bg);
 8009a84:	4b16      	ldr	r3, [pc, #88]	; (8009ae0 <font_drawChar+0x9c4>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	dd1c      	ble.n	8009aca <font_drawChar+0x9ae>
 8009a90:	4b16      	ldr	r3, [pc, #88]	; (8009aec <font_drawChar+0x9d0>)
 8009a92:	681c      	ldr	r4, [r3, #0]
 8009a94:	4b17      	ldr	r3, [pc, #92]	; (8009af4 <font_drawChar+0x9d8>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a9a:	fb02 f203 	mul.w	r2, r2, r3
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	18d1      	adds	r1, r2, r3
 8009aa2:	4b13      	ldr	r3, [pc, #76]	; (8009af0 <font_drawChar+0x9d4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009aa8:	fb02 f003 	mul.w	r0, r2, r3
 8009aac:	4b0c      	ldr	r3, [pc, #48]	; (8009ae0 <font_drawChar+0x9c4>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	4a0f      	ldr	r2, [pc, #60]	; (8009af4 <font_drawChar+0x9d8>)
 8009ab6:	6812      	ldr	r2, [r2, #0]
 8009ab8:	fb02 f203 	mul.w	r2, r2, r3
 8009abc:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <font_drawChar+0x9e4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	47a0      	blx	r4
          //Serial.print(idx); Serial.print("  "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          yfCur=yf;
 8009aca:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <font_drawChar+0x9c4>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	67fb      	str	r3, [r7, #124]	; 0x7c
          int xbg=0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	677b      	str	r3, [r7, #116]	; 0x74
          while(yf==yfCur && idx<recNum) {
 8009ad4:	e08a      	b.n	8009bec <font_drawChar+0xad0>
 8009ad6:	bf00      	nop
 8009ad8:	20007a58 	.word	0x20007a58
 8009adc:	20007a5c 	.word	0x20007a5c
 8009ae0:	20007a60 	.word	0x20007a60
 8009ae4:	20007a68 	.word	0x20007a68
 8009ae8:	20007a64 	.word	0x20007a64
 8009aec:	20007a54 	.word	0x20007a54
 8009af0:	20002810 	.word	0x20002810
 8009af4:	20002814 	.word	0x20002814
 8009af8:	20007a78 	.word	0x20007a78
 8009afc:	20002818 	.word	0x20002818
 8009b00:	2000281c 	.word	0x2000281c
            xf = v & 0x1f;
 8009b04:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009b08:	f003 031f 	and.w	r3, r3, #31
 8009b0c:	4a7e      	ldr	r2, [pc, #504]	; (8009d08 <font_drawChar+0xbec>)
 8009b0e:	6013      	str	r3, [r2, #0]
            wf = ((v>>11) & 0x1f)+1;
 8009b10:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009b14:	0adb      	lsrs	r3, r3, #11
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	f003 031f 	and.w	r3, r3, #31
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	4a7b      	ldr	r2, [pc, #492]	; (8009d0c <font_drawChar+0xbf0>)
 8009b20:	6013      	str	r3, [r2, #0]
            if(xf>xbg) (*fillRectFun)(x+xbg*sx, y+yf*sy, (xf-xbg)*sx, 1*sy, bg);
 8009b22:	4b79      	ldr	r3, [pc, #484]	; (8009d08 <font_drawChar+0xbec>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	da1f      	bge.n	8009b6c <font_drawChar+0xa50>
 8009b2c:	4b78      	ldr	r3, [pc, #480]	; (8009d10 <font_drawChar+0xbf4>)
 8009b2e:	681c      	ldr	r4, [r3, #0]
 8009b30:	4b78      	ldr	r3, [pc, #480]	; (8009d14 <font_drawChar+0xbf8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b36:	fb02 f203 	mul.w	r2, r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	18d0      	adds	r0, r2, r3
 8009b3e:	4b76      	ldr	r3, [pc, #472]	; (8009d18 <font_drawChar+0xbfc>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a76      	ldr	r2, [pc, #472]	; (8009d1c <font_drawChar+0xc00>)
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	fb02 f203 	mul.w	r2, r2, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	18d1      	adds	r1, r2, r3
 8009b4e:	4b6e      	ldr	r3, [pc, #440]	; (8009d08 <font_drawChar+0xbec>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	4a6f      	ldr	r2, [pc, #444]	; (8009d14 <font_drawChar+0xbf8>)
 8009b58:	6812      	ldr	r2, [r2, #0]
 8009b5a:	fb02 f203 	mul.w	r2, r2, r3
 8009b5e:	4b6f      	ldr	r3, [pc, #444]	; (8009d1c <font_drawChar+0xc00>)
 8009b60:	681d      	ldr	r5, [r3, #0]
 8009b62:	4b6f      	ldr	r3, [pc, #444]	; (8009d20 <font_drawChar+0xc04>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	462b      	mov	r3, r5
 8009b6a:	47a0      	blx	r4
            xbg = xf+wf;
 8009b6c:	4b66      	ldr	r3, [pc, #408]	; (8009d08 <font_drawChar+0xbec>)
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	4b66      	ldr	r3, [pc, #408]	; (8009d0c <font_drawChar+0xbf0>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4413      	add	r3, r2
 8009b76:	677b      	str	r3, [r7, #116]	; 0x74
            //if(idx==recNum-1) fg=0x07E0; else fg=0xffff;
            (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, 1*sy, fg);
 8009b78:	4b65      	ldr	r3, [pc, #404]	; (8009d10 <font_drawChar+0xbf4>)
 8009b7a:	681c      	ldr	r4, [r3, #0]
 8009b7c:	4b62      	ldr	r3, [pc, #392]	; (8009d08 <font_drawChar+0xbec>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a64      	ldr	r2, [pc, #400]	; (8009d14 <font_drawChar+0xbf8>)
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	fb02 f203 	mul.w	r2, r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	18d0      	adds	r0, r2, r3
 8009b8c:	4b62      	ldr	r3, [pc, #392]	; (8009d18 <font_drawChar+0xbfc>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a62      	ldr	r2, [pc, #392]	; (8009d1c <font_drawChar+0xc00>)
 8009b92:	6812      	ldr	r2, [r2, #0]
 8009b94:	fb02 f203 	mul.w	r2, r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	18d1      	adds	r1, r2, r3
 8009b9c:	4b5b      	ldr	r3, [pc, #364]	; (8009d0c <font_drawChar+0xbf0>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a5c      	ldr	r2, [pc, #368]	; (8009d14 <font_drawChar+0xbf8>)
 8009ba2:	6812      	ldr	r2, [r2, #0]
 8009ba4:	fb02 f203 	mul.w	r2, r2, r3
 8009ba8:	4b5e      	ldr	r3, [pc, #376]	; (8009d24 <font_drawChar+0xc08>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	441a      	add	r2, r3
 8009bae:	4b5b      	ldr	r3, [pc, #364]	; (8009d1c <font_drawChar+0xc00>)
 8009bb0:	681d      	ldr	r5, [r3, #0]
 8009bb2:	4b5d      	ldr	r3, [pc, #372]	; (8009d28 <font_drawChar+0xc0c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462b      	mov	r3, r5
 8009bba:	47a0      	blx	r4
            idx++;
 8009bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            v = *(rects+idx+recIdx);
 8009bc6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bce:	4413      	add	r3, r2
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd4:	4413      	add	r3, r2
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            yf = (v>>5) & 0x3f;
 8009bdc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009be8:	4a4b      	ldr	r2, [pc, #300]	; (8009d18 <font_drawChar+0xbfc>)
 8009bea:	6013      	str	r3, [r2, #0]
          while(yf==yfCur && idx<recNum) {
 8009bec:	4b4a      	ldr	r3, [pc, #296]	; (8009d18 <font_drawChar+0xbfc>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d105      	bne.n	8009c02 <font_drawChar+0xae6>
 8009bf6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	db80      	blt.n	8009b04 <font_drawChar+0x9e8>
          }
          // last bg line
          if(xbg<chWd) (*fillRectFun)(x+xbg*sx, y+yfCur*sy, (chWd-xbg)*sx, 1*sy, bg);
 8009c02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c06:	429a      	cmp	r2, r3
 8009c08:	da1d      	bge.n	8009c46 <font_drawChar+0xb2a>
 8009c0a:	4b41      	ldr	r3, [pc, #260]	; (8009d10 <font_drawChar+0xbf4>)
 8009c0c:	681c      	ldr	r4, [r3, #0]
 8009c0e:	4b41      	ldr	r3, [pc, #260]	; (8009d14 <font_drawChar+0xbf8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c14:	fb02 f203 	mul.w	r2, r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	18d0      	adds	r0, r2, r3
 8009c1c:	4b3f      	ldr	r3, [pc, #252]	; (8009d1c <font_drawChar+0xc00>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c22:	fb02 f203 	mul.w	r2, r2, r3
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	18d1      	adds	r1, r2, r3
 8009c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	4a38      	ldr	r2, [pc, #224]	; (8009d14 <font_drawChar+0xbf8>)
 8009c32:	6812      	ldr	r2, [r2, #0]
 8009c34:	fb02 f203 	mul.w	r2, r2, r3
 8009c38:	4b38      	ldr	r3, [pc, #224]	; (8009d1c <font_drawChar+0xc00>)
 8009c3a:	681d      	ldr	r5, [r3, #0]
 8009c3c:	4b38      	ldr	r3, [pc, #224]	; (8009d20 <font_drawChar+0xc04>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	462b      	mov	r3, r5
 8009c44:	47a0      	blx	r4
          //Serial.print(idx); Serial.print(" ++ "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          if(idx==recNum-1 && yfCur<rFont->ht) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yfCur<rFont->ht-yfCur)*sy, bg);
 8009c46:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d12c      	bne.n	8009cae <font_drawChar+0xb92>
 8009c54:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <font_drawChar+0xc10>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	789b      	ldrb	r3, [r3, #2]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	da25      	bge.n	8009cae <font_drawChar+0xb92>
 8009c62:	4b2b      	ldr	r3, [pc, #172]	; (8009d10 <font_drawChar+0xbf4>)
 8009c64:	681c      	ldr	r4, [r3, #0]
 8009c66:	4b2d      	ldr	r3, [pc, #180]	; (8009d1c <font_drawChar+0xc00>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c6c:	fb02 f203 	mul.w	r2, r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	18d1      	adds	r1, r2, r3
 8009c74:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <font_drawChar+0xbf8>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c7a:	fb02 f003 	mul.w	r0, r2, r3
 8009c7e:	4b2b      	ldr	r3, [pc, #172]	; (8009d2c <font_drawChar+0xc10>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	789b      	ldrb	r3, [r3, #2]
 8009c84:	461a      	mov	r2, r3
 8009c86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	bfb4      	ite	lt
 8009c90:	2301      	movlt	r3, #1
 8009c92:	2300      	movge	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	4b20      	ldr	r3, [pc, #128]	; (8009d1c <font_drawChar+0xc00>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	fb03 f202 	mul.w	r2, r3, r2
 8009ca0:	4b1f      	ldr	r3, [pc, #124]	; (8009d20 <font_drawChar+0xc04>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	4602      	mov	r2, r0
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	47a0      	blx	r4
        while(idx<recNum) {
 8009cae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	f6ff aed1 	blt.w	8009a5e <font_drawChar+0x942>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8009cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f340 8275 	ble.w	800a1b0 <font_drawChar+0x1094>
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <font_drawChar+0xbf4>)
 8009cc8:	681c      	ldr	r4, [r3, #0]
 8009cca:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <font_drawChar+0xbf8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cd0:	fb02 f203 	mul.w	r2, r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	18d0      	adds	r0, r2, r3
 8009cd8:	4b0e      	ldr	r3, [pc, #56]	; (8009d14 <font_drawChar+0xbf8>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009ce0:	fb02 f203 	mul.w	r2, r2, r3
 8009ce4:	4b11      	ldr	r3, [pc, #68]	; (8009d2c <font_drawChar+0xc10>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	789b      	ldrb	r3, [r3, #2]
 8009cea:	4619      	mov	r1, r3
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <font_drawChar+0xc00>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	fb03 f101 	mul.w	r1, r3, r1
 8009cf4:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <font_drawChar+0xc04>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	68b9      	ldr	r1, [r7, #8]
 8009cfe:	47a0      	blx	r4
        yf = (v>>5) & 0x3f;
        wf = ((v>>11) & 0x1f)+1;
        hf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009d00:	e256      	b.n	800a1b0 <font_drawChar+0x1094>
      for(int i=0; i<recNum; i++) {
 8009d02:	2300      	movs	r3, #0
 8009d04:	673b      	str	r3, [r7, #112]	; 0x70
 8009d06:	e063      	b.n	8009dd0 <font_drawChar+0xcb4>
 8009d08:	20007a5c 	.word	0x20007a5c
 8009d0c:	20007a64 	.word	0x20007a64
 8009d10:	20007a54 	.word	0x20007a54
 8009d14:	20002810 	.word	0x20002810
 8009d18:	20007a60 	.word	0x20007a60
 8009d1c:	20002814 	.word	0x20002814
 8009d20:	2000281c 	.word	0x2000281c
 8009d24:	20007a78 	.word	0x20007a78
 8009d28:	20002818 	.word	0x20002818
 8009d2c:	20007a58 	.word	0x20007a58
        unsigned short *rects = (unsigned short*)rFont->rects;
 8009d30:	4b4c      	ldr	r3, [pc, #304]	; (8009e64 <font_drawChar+0xd48>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned short v = (rects[i+recIdx]);
 8009d38:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d3e:	4413      	add	r3, r2
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d44:	4413      	add	r3, r2
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	86fb      	strh	r3, [r7, #54]	; 0x36
        xf = (v & 0x1f)-xmin;
 8009d4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d4c:	f003 021f 	and.w	r2, r3, #31
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	4a44      	ldr	r2, [pc, #272]	; (8009e68 <font_drawChar+0xd4c>)
 8009d56:	6013      	str	r3, [r2, #0]
        yf = (v>>5) & 0x3f;
 8009d58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d62:	4a42      	ldr	r2, [pc, #264]	; (8009e6c <font_drawChar+0xd50>)
 8009d64:	6013      	str	r3, [r2, #0]
        wf = ((v>>11) & 0x1f)+1;
 8009d66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d68:	0adb      	lsrs	r3, r3, #11
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	f003 031f 	and.w	r3, r3, #31
 8009d70:	3301      	adds	r3, #1
 8009d72:	4a3f      	ldr	r2, [pc, #252]	; (8009e70 <font_drawChar+0xd54>)
 8009d74:	6013      	str	r3, [r2, #0]
        hf = 1;
 8009d76:	4b3f      	ldr	r3, [pc, #252]	; (8009e74 <font_drawChar+0xd58>)
 8009d78:	2201      	movs	r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009d7c:	4b3e      	ldr	r3, [pc, #248]	; (8009e78 <font_drawChar+0xd5c>)
 8009d7e:	681c      	ldr	r4, [r3, #0]
 8009d80:	4b39      	ldr	r3, [pc, #228]	; (8009e68 <font_drawChar+0xd4c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a3d      	ldr	r2, [pc, #244]	; (8009e7c <font_drawChar+0xd60>)
 8009d86:	6812      	ldr	r2, [r2, #0]
 8009d88:	fb02 f203 	mul.w	r2, r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	18d0      	adds	r0, r2, r3
 8009d90:	4b36      	ldr	r3, [pc, #216]	; (8009e6c <font_drawChar+0xd50>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a3a      	ldr	r2, [pc, #232]	; (8009e80 <font_drawChar+0xd64>)
 8009d96:	6812      	ldr	r2, [r2, #0]
 8009d98:	fb02 f203 	mul.w	r2, r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	18d1      	adds	r1, r2, r3
 8009da0:	4b33      	ldr	r3, [pc, #204]	; (8009e70 <font_drawChar+0xd54>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a35      	ldr	r2, [pc, #212]	; (8009e7c <font_drawChar+0xd60>)
 8009da6:	6812      	ldr	r2, [r2, #0]
 8009da8:	fb02 f203 	mul.w	r2, r2, r3
 8009dac:	4b35      	ldr	r3, [pc, #212]	; (8009e84 <font_drawChar+0xd68>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	18d5      	adds	r5, r2, r3
 8009db2:	4b30      	ldr	r3, [pc, #192]	; (8009e74 <font_drawChar+0xd58>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a32      	ldr	r2, [pc, #200]	; (8009e80 <font_drawChar+0xd64>)
 8009db8:	6812      	ldr	r2, [r2, #0]
 8009dba:	fb02 f203 	mul.w	r2, r2, r3
 8009dbe:	4b32      	ldr	r3, [pc, #200]	; (8009e88 <font_drawChar+0xd6c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009dcc:	3301      	adds	r3, #1
 8009dce:	673b      	str	r3, [r7, #112]	; 0x70
 8009dd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009dd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	dbaa      	blt.n	8009d30 <font_drawChar+0xc14>
      break;
 8009dda:	e1e9      	b.n	800a1b0 <font_drawChar+0x1094>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B:
      if(bg!=fg) {
 8009ddc:	4b2b      	ldr	r3, [pc, #172]	; (8009e8c <font_drawChar+0xd70>)
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	4b29      	ldr	r3, [pc, #164]	; (8009e88 <font_drawChar+0xd6c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	f000 811f 	beq.w	800a028 <font_drawChar+0xf0c>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8009dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	dd1d      	ble.n	8009e2e <font_drawChar+0xd12>
 8009df2:	4b21      	ldr	r3, [pc, #132]	; (8009e78 <font_drawChar+0xd5c>)
 8009df4:	681c      	ldr	r4, [r3, #0]
 8009df6:	4b21      	ldr	r3, [pc, #132]	; (8009e7c <font_drawChar+0xd60>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009dfe:	fb02 f303 	mul.w	r3, r2, r3
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	1ad0      	subs	r0, r2, r3
 8009e06:	4b1d      	ldr	r3, [pc, #116]	; (8009e7c <font_drawChar+0xd60>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009e0e:	fb02 f203 	mul.w	r2, r2, r3
 8009e12:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <font_drawChar+0xd48>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4b19      	ldr	r3, [pc, #100]	; (8009e80 <font_drawChar+0xd64>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	fb03 f101 	mul.w	r1, r3, r1
 8009e22:	4b1a      	ldr	r3, [pc, #104]	; (8009e8c <font_drawChar+0xd70>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	47a0      	blx	r4
        unsigned char *rects = (unsigned char*)rFont->rects + recIdx*3;
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	; (8009e64 <font_drawChar+0xd48>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6899      	ldr	r1, [r3, #8]
 8009e34:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009e38:	4613      	mov	r3, r2
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	4413      	add	r3, r2
 8009e3e:	440b      	add	r3, r1
 8009e40:	647b      	str	r3, [r7, #68]	; 0x44
        int idx=0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(idx<recNum*3) {
 8009e46:	e0c3      	b.n	8009fd0 <font_drawChar+0xeb4>
          xf = *(rects+idx+0);
 8009e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e4c:	4413      	add	r3, r2
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	461a      	mov	r2, r3
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <font_drawChar+0xd4c>)
 8009e54:	601a      	str	r2, [r3, #0]
          int ybg=0,xfCur=xf;
 8009e56:	2300      	movs	r3, #0
 8009e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e5a:	4b03      	ldr	r3, [pc, #12]	; (8009e68 <font_drawChar+0xd4c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	643b      	str	r3, [r7, #64]	; 0x40
          while(xf==xfCur && idx<recNum*3) {
 8009e60:	e07d      	b.n	8009f5e <font_drawChar+0xe42>
 8009e62:	bf00      	nop
 8009e64:	20007a58 	.word	0x20007a58
 8009e68:	20007a5c 	.word	0x20007a5c
 8009e6c:	20007a60 	.word	0x20007a60
 8009e70:	20007a64 	.word	0x20007a64
 8009e74:	20007a68 	.word	0x20007a68
 8009e78:	20007a54 	.word	0x20007a54
 8009e7c:	20002810 	.word	0x20002810
 8009e80:	20002814 	.word	0x20002814
 8009e84:	20007a78 	.word	0x20007a78
 8009e88:	20002818 	.word	0x20002818
 8009e8c:	2000281c 	.word	0x2000281c
            yf = *(rects+idx+1);
 8009e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e92:	3301      	adds	r3, #1
 8009e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e96:	4413      	add	r3, r2
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4b8e      	ldr	r3, [pc, #568]	; (800a0d8 <font_drawChar+0xfbc>)
 8009e9e:	601a      	str	r2, [r3, #0]
            hf = *(rects+idx+2)+1;
 8009ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea2:	3302      	adds	r3, #2
 8009ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ea6:	4413      	add	r3, r2
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	4a8b      	ldr	r2, [pc, #556]	; (800a0dc <font_drawChar+0xfc0>)
 8009eae:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8009eb0:	4b89      	ldr	r3, [pc, #548]	; (800a0d8 <font_drawChar+0xfbc>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	da1f      	bge.n	8009efa <font_drawChar+0xdde>
 8009eba:	4b89      	ldr	r3, [pc, #548]	; (800a0e0 <font_drawChar+0xfc4>)
 8009ebc:	681c      	ldr	r4, [r3, #0]
 8009ebe:	4b89      	ldr	r3, [pc, #548]	; (800a0e4 <font_drawChar+0xfc8>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ec4:	fb02 f203 	mul.w	r2, r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	18d0      	adds	r0, r2, r3
 8009ecc:	4b86      	ldr	r3, [pc, #536]	; (800a0e8 <font_drawChar+0xfcc>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ed2:	fb02 f203 	mul.w	r2, r2, r3
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	18d1      	adds	r1, r2, r3
 8009eda:	4b82      	ldr	r3, [pc, #520]	; (800a0e4 <font_drawChar+0xfc8>)
 8009edc:	681d      	ldr	r5, [r3, #0]
 8009ede:	4b7e      	ldr	r3, [pc, #504]	; (800a0d8 <font_drawChar+0xfbc>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	4a80      	ldr	r2, [pc, #512]	; (800a0e8 <font_drawChar+0xfcc>)
 8009ee8:	6812      	ldr	r2, [r2, #0]
 8009eea:	fb02 f203 	mul.w	r2, r2, r3
 8009eee:	4b7f      	ldr	r3, [pc, #508]	; (800a0ec <font_drawChar+0xfd0>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	462a      	mov	r2, r5
 8009ef8:	47a0      	blx	r4
            ybg = yf+hf;
 8009efa:	4b77      	ldr	r3, [pc, #476]	; (800a0d8 <font_drawChar+0xfbc>)
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b77      	ldr	r3, [pc, #476]	; (800a0dc <font_drawChar+0xfc0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4413      	add	r3, r2
 8009f04:	66bb      	str	r3, [r7, #104]	; 0x68
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 8009f06:	4b76      	ldr	r3, [pc, #472]	; (800a0e0 <font_drawChar+0xfc4>)
 8009f08:	681c      	ldr	r4, [r3, #0]
 8009f0a:	4b76      	ldr	r3, [pc, #472]	; (800a0e4 <font_drawChar+0xfc8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f10:	fb02 f203 	mul.w	r2, r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	18d0      	adds	r0, r2, r3
 8009f18:	4b6f      	ldr	r3, [pc, #444]	; (800a0d8 <font_drawChar+0xfbc>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a72      	ldr	r2, [pc, #456]	; (800a0e8 <font_drawChar+0xfcc>)
 8009f1e:	6812      	ldr	r2, [r2, #0]
 8009f20:	fb02 f203 	mul.w	r2, r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	18d1      	adds	r1, r2, r3
 8009f28:	4b71      	ldr	r3, [pc, #452]	; (800a0f0 <font_drawChar+0xfd4>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	4b6d      	ldr	r3, [pc, #436]	; (800a0e4 <font_drawChar+0xfc8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	18d5      	adds	r5, r2, r3
 8009f32:	4b6a      	ldr	r3, [pc, #424]	; (800a0dc <font_drawChar+0xfc0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a6c      	ldr	r2, [pc, #432]	; (800a0e8 <font_drawChar+0xfcc>)
 8009f38:	6812      	ldr	r2, [r2, #0]
 8009f3a:	fb02 f203 	mul.w	r2, r2, r3
 8009f3e:	4b6d      	ldr	r3, [pc, #436]	; (800a0f4 <font_drawChar+0xfd8>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	4613      	mov	r3, r2
 8009f46:	462a      	mov	r2, r5
 8009f48:	47a0      	blx	r4
            idx += 3;
 8009f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f4c:	3303      	adds	r3, #3
 8009f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
            xf = *(rects+idx+0);
 8009f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f54:	4413      	add	r3, r2
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	461a      	mov	r2, r3
 8009f5a:	4b67      	ldr	r3, [pc, #412]	; (800a0f8 <font_drawChar+0xfdc>)
 8009f5c:	601a      	str	r2, [r3, #0]
          while(xf==xfCur && idx<recNum*3) {
 8009f5e:	4b66      	ldr	r3, [pc, #408]	; (800a0f8 <font_drawChar+0xfdc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d107      	bne.n	8009f78 <font_drawChar+0xe5c>
 8009f68:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	4413      	add	r3, r2
 8009f72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f74:	429a      	cmp	r2, r3
 8009f76:	db8b      	blt.n	8009e90 <font_drawChar+0xd74>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 8009f78:	4b60      	ldr	r3, [pc, #384]	; (800a0fc <font_drawChar+0xfe0>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	789b      	ldrb	r3, [r3, #2]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f82:	4293      	cmp	r3, r2
 8009f84:	da24      	bge.n	8009fd0 <font_drawChar+0xeb4>
 8009f86:	4b56      	ldr	r3, [pc, #344]	; (800a0e0 <font_drawChar+0xfc4>)
 8009f88:	681c      	ldr	r4, [r3, #0]
 8009f8a:	4b56      	ldr	r3, [pc, #344]	; (800a0e4 <font_drawChar+0xfc8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f90:	fb02 f203 	mul.w	r2, r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	18d0      	adds	r0, r2, r3
 8009f98:	4b53      	ldr	r3, [pc, #332]	; (800a0e8 <font_drawChar+0xfcc>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f9e:	fb02 f203 	mul.w	r2, r2, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	18d1      	adds	r1, r2, r3
 8009fa6:	4b52      	ldr	r3, [pc, #328]	; (800a0f0 <font_drawChar+0xfd4>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	4b4e      	ldr	r3, [pc, #312]	; (800a0e4 <font_drawChar+0xfc8>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	18d5      	adds	r5, r2, r3
 8009fb0:	4b52      	ldr	r3, [pc, #328]	; (800a0fc <font_drawChar+0xfe0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	789b      	ldrb	r3, [r3, #2]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	4a4a      	ldr	r2, [pc, #296]	; (800a0e8 <font_drawChar+0xfcc>)
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	fb02 f203 	mul.w	r2, r2, r3
 8009fc4:	4b49      	ldr	r3, [pc, #292]	; (800a0ec <font_drawChar+0xfd0>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	462a      	mov	r2, r5
 8009fce:	47a0      	blx	r4
        while(idx<recNum*3) {
 8009fd0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	005b      	lsls	r3, r3, #1
 8009fd8:	4413      	add	r3, r2
 8009fda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	f6ff af33 	blt.w	8009e48 <font_drawChar+0xd2c>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8009fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f340 80e4 	ble.w	800a1b4 <font_drawChar+0x1098>
 8009fec:	4b3c      	ldr	r3, [pc, #240]	; (800a0e0 <font_drawChar+0xfc4>)
 8009fee:	681c      	ldr	r4, [r3, #0]
 8009ff0:	4b3c      	ldr	r3, [pc, #240]	; (800a0e4 <font_drawChar+0xfc8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ff6:	fb02 f203 	mul.w	r2, r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	18d0      	adds	r0, r2, r3
 8009ffe:	4b39      	ldr	r3, [pc, #228]	; (800a0e4 <font_drawChar+0xfc8>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a006:	fb02 f203 	mul.w	r2, r2, r3
 800a00a:	4b3c      	ldr	r3, [pc, #240]	; (800a0fc <font_drawChar+0xfe0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	789b      	ldrb	r3, [r3, #2]
 800a010:	4619      	mov	r1, r3
 800a012:	4b35      	ldr	r3, [pc, #212]	; (800a0e8 <font_drawChar+0xfcc>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	fb03 f101 	mul.w	r1, r3, r1
 800a01a:	4b34      	ldr	r3, [pc, #208]	; (800a0ec <font_drawChar+0xfd0>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	460b      	mov	r3, r1
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	47a0      	blx	r4
        yf = (rects[1]);
        hf = (rects[2])+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 800a026:	e0c5      	b.n	800a1b4 <font_drawChar+0x1098>
      for(int i=0; i<recNum; i++) {
 800a028:	2300      	movs	r3, #0
 800a02a:	667b      	str	r3, [r7, #100]	; 0x64
 800a02c:	e04b      	b.n	800a0c6 <font_drawChar+0xfaa>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 800a02e:	4b33      	ldr	r3, [pc, #204]	; (800a0fc <font_drawChar+0xfe0>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6899      	ldr	r1, [r3, #8]
 800a034:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800a038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a03a:	441a      	add	r2, r3
 800a03c:	4613      	mov	r3, r2
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	4413      	add	r3, r2
 800a042:	440b      	add	r3, r1
 800a044:	64bb      	str	r3, [r7, #72]	; 0x48
        xf = (rects[0])-xmin;
 800a046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	4a29      	ldr	r2, [pc, #164]	; (800a0f8 <font_drawChar+0xfdc>)
 800a052:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800a054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a056:	3301      	adds	r3, #1
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <font_drawChar+0xfbc>)
 800a05e:	601a      	str	r2, [r3, #0]
        hf = (rects[2])+1;
 800a060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a062:	3302      	adds	r3, #2
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	3301      	adds	r3, #1
 800a068:	4a1c      	ldr	r2, [pc, #112]	; (800a0dc <font_drawChar+0xfc0>)
 800a06a:	6013      	str	r3, [r2, #0]
        wf = 1;
 800a06c:	4b24      	ldr	r3, [pc, #144]	; (800a100 <font_drawChar+0xfe4>)
 800a06e:	2201      	movs	r2, #1
 800a070:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 800a072:	4b1b      	ldr	r3, [pc, #108]	; (800a0e0 <font_drawChar+0xfc4>)
 800a074:	681c      	ldr	r4, [r3, #0]
 800a076:	4b20      	ldr	r3, [pc, #128]	; (800a0f8 <font_drawChar+0xfdc>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a1a      	ldr	r2, [pc, #104]	; (800a0e4 <font_drawChar+0xfc8>)
 800a07c:	6812      	ldr	r2, [r2, #0]
 800a07e:	fb02 f203 	mul.w	r2, r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	18d0      	adds	r0, r2, r3
 800a086:	4b14      	ldr	r3, [pc, #80]	; (800a0d8 <font_drawChar+0xfbc>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a17      	ldr	r2, [pc, #92]	; (800a0e8 <font_drawChar+0xfcc>)
 800a08c:	6812      	ldr	r2, [r2, #0]
 800a08e:	fb02 f203 	mul.w	r2, r2, r3
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	18d1      	adds	r1, r2, r3
 800a096:	4b1a      	ldr	r3, [pc, #104]	; (800a100 <font_drawChar+0xfe4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a12      	ldr	r2, [pc, #72]	; (800a0e4 <font_drawChar+0xfc8>)
 800a09c:	6812      	ldr	r2, [r2, #0]
 800a09e:	fb02 f203 	mul.w	r2, r2, r3
 800a0a2:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <font_drawChar+0xfd4>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	18d5      	adds	r5, r2, r3
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <font_drawChar+0xfc0>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a0e      	ldr	r2, [pc, #56]	; (800a0e8 <font_drawChar+0xfcc>)
 800a0ae:	6812      	ldr	r2, [r2, #0]
 800a0b0:	fb02 f203 	mul.w	r2, r2, r3
 800a0b4:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <font_drawChar+0xfd8>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	462a      	mov	r2, r5
 800a0be:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800a0c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	667b      	str	r3, [r7, #100]	; 0x64
 800a0c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a0ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	dbae      	blt.n	800a02e <font_drawChar+0xf12>
      break;
 800a0d0:	e070      	b.n	800a1b4 <font_drawChar+0x1098>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B:
      for(int i=0; i<recNum; i++) {
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a0d6:	e061      	b.n	800a19c <font_drawChar+0x1080>
 800a0d8:	20007a60 	.word	0x20007a60
 800a0dc:	20007a68 	.word	0x20007a68
 800a0e0:	20007a54 	.word	0x20007a54
 800a0e4:	20002810 	.word	0x20002810
 800a0e8:	20002814 	.word	0x20002814
 800a0ec:	2000281c 	.word	0x2000281c
 800a0f0:	20007a78 	.word	0x20007a78
 800a0f4:	20002818 	.word	0x20002818
 800a0f8:	20007a5c 	.word	0x20007a5c
 800a0fc:	20007a58 	.word	0x20007a58
 800a100:	20007a64 	.word	0x20007a64
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 800a104:	4b32      	ldr	r3, [pc, #200]	; (800a1d0 <font_drawChar+0x10b4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6899      	ldr	r1, [r3, #8]
 800a10a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800a10e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a110:	441a      	add	r2, r3
 800a112:	4613      	mov	r3, r2
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	4413      	add	r3, r2
 800a118:	440b      	add	r3, r1
 800a11a:	64fb      	str	r3, [r7, #76]	; 0x4c
        xf = (rects[0])-xmin;
 800a11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	4a2b      	ldr	r2, [pc, #172]	; (800a1d4 <font_drawChar+0x10b8>)
 800a128:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800a12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12c:	3301      	adds	r3, #1
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	4b29      	ldr	r3, [pc, #164]	; (800a1d8 <font_drawChar+0x10bc>)
 800a134:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 800a136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a138:	3302      	adds	r3, #2
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	3301      	adds	r3, #1
 800a13e:	4a27      	ldr	r2, [pc, #156]	; (800a1dc <font_drawChar+0x10c0>)
 800a140:	6013      	str	r3, [r2, #0]
        hf = 1;
 800a142:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <font_drawChar+0x10c4>)
 800a144:	2201      	movs	r2, #1
 800a146:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 800a148:	4b26      	ldr	r3, [pc, #152]	; (800a1e4 <font_drawChar+0x10c8>)
 800a14a:	681c      	ldr	r4, [r3, #0]
 800a14c:	4b21      	ldr	r3, [pc, #132]	; (800a1d4 <font_drawChar+0x10b8>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a25      	ldr	r2, [pc, #148]	; (800a1e8 <font_drawChar+0x10cc>)
 800a152:	6812      	ldr	r2, [r2, #0]
 800a154:	fb02 f203 	mul.w	r2, r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	18d0      	adds	r0, r2, r3
 800a15c:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <font_drawChar+0x10bc>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a22      	ldr	r2, [pc, #136]	; (800a1ec <font_drawChar+0x10d0>)
 800a162:	6812      	ldr	r2, [r2, #0]
 800a164:	fb02 f203 	mul.w	r2, r2, r3
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	18d1      	adds	r1, r2, r3
 800a16c:	4b1b      	ldr	r3, [pc, #108]	; (800a1dc <font_drawChar+0x10c0>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a1d      	ldr	r2, [pc, #116]	; (800a1e8 <font_drawChar+0x10cc>)
 800a172:	6812      	ldr	r2, [r2, #0]
 800a174:	fb02 f203 	mul.w	r2, r2, r3
 800a178:	4b1d      	ldr	r3, [pc, #116]	; (800a1f0 <font_drawChar+0x10d4>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	18d5      	adds	r5, r2, r3
 800a17e:	4b18      	ldr	r3, [pc, #96]	; (800a1e0 <font_drawChar+0x10c4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a1a      	ldr	r2, [pc, #104]	; (800a1ec <font_drawChar+0x10d0>)
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	fb02 f203 	mul.w	r2, r2, r3
 800a18a:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <font_drawChar+0x10d8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	4613      	mov	r3, r2
 800a192:	462a      	mov	r2, r5
 800a194:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800a196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a198:	3301      	adds	r3, #1
 800a19a:	663b      	str	r3, [r7, #96]	; 0x60
 800a19c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a1a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	dbae      	blt.n	800a104 <font_drawChar+0xfe8>
      }
      break;
 800a1a6:	e006      	b.n	800a1b6 <font_drawChar+0x109a>
    default: break;
 800a1a8:	bf00      	nop
 800a1aa:	e004      	b.n	800a1b6 <font_drawChar+0x109a>
      break;
 800a1ac:	bf00      	nop
 800a1ae:	e002      	b.n	800a1b6 <font_drawChar+0x109a>
      break;
 800a1b0:	bf00      	nop
 800a1b2:	e000      	b.n	800a1b6 <font_drawChar+0x109a>
      break;
 800a1b4:	bf00      	nop
#endif
  }
  return (wd+bold)*sx;
 800a1b6:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <font_drawChar+0x10d4>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1be:	4413      	add	r3, r2
 800a1c0:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <font_drawChar+0x10cc>)
 800a1c2:	6812      	ldr	r2, [r2, #0]
 800a1c4:	fb02 f303 	mul.w	r3, r2, r3
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	37a8      	adds	r7, #168	; 0xa8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a1d0:	20007a58 	.word	0x20007a58
 800a1d4:	20007a5c 	.word	0x20007a5c
 800a1d8:	20007a60 	.word	0x20007a60
 800a1dc:	20007a64 	.word	0x20007a64
 800a1e0:	20007a68 	.word	0x20007a68
 800a1e4:	20007a54 	.word	0x20007a54
 800a1e8:	20002810 	.word	0x20002810
 800a1ec:	20002814 	.word	0x20002814
 800a1f0:	20007a78 	.word	0x20007a78
 800a1f4:	20002818 	.word	0x20002818

0800a1f8 <font_strWidth>:

// ----------------------------------------------------------------
int font_strWidth(char *str)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  int wd = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	60fb      	str	r3, [r7, #12]
  while (*str) wd += font_charWidth(*str++);
 800a204:	e00a      	b.n	800a21c <font_strWidth+0x24>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe ff16 	bl	8009040 <font_charWidth>
 800a214:	4602      	mov	r2, r0
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1f0      	bne.n	800a206 <font_strWidth+0xe>
  return wd;
 800a224:	68fb      	ldr	r3, [r7, #12]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
	...

0800a230 <font_printf>:

static char printfbuffer[512];

int font_printf(int xpos, int ypos, char *str, ...)
{
 800a230:	b40c      	push	{r2, r3}
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, str);
 800a23c:	f107 031c 	add.w	r3, r7, #28
 800a240:	60fb      	str	r3, [r7, #12]
  vsnprintf(printfbuffer, sizeof(printfbuffer), str, args);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a24a:	4808      	ldr	r0, [pc, #32]	; (800a26c <font_printf+0x3c>)
 800a24c:	f001 fe1e 	bl	800be8c <vsniprintf>
  va_end(args);
  return font_printStr(xpos, ypos,printfbuffer);
 800a250:	4a06      	ldr	r2, [pc, #24]	; (800a26c <font_printf+0x3c>)
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f80b 	bl	800a270 <font_printStr>
 800a25a:	4603      	mov	r3, r0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a266:	b002      	add	sp, #8
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	20007a84 	.word	0x20007a84

0800a270 <font_printStr>:

// ----------------------------------------------------------------
int font_printStr(int xpos, int ypos, char *str)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	; 0x28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
  unsigned char ch;
  int stl, row;
  int x = xpos;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	627b      	str	r3, [r7, #36]	; 0x24
  int y = ypos;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	623b      	str	r3, [r7, #32]
  int wd = font_strWidth(str);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff ffb7 	bl	800a1f8 <font_strWidth>
 800a28a:	61f8      	str	r0, [r7, #28]

  //fillRectFun(xpos, ypos, wd, font_getHeight(), 0);

  if(x==ALIGN_RIGHT) x = scrWd - wd; // right = -1
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a292:	d105      	bne.n	800a2a0 <font_printStr+0x30>
 800a294:	4b29      	ldr	r3, [pc, #164]	; (800a33c <font_printStr+0xcc>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	627b      	str	r3, [r7, #36]	; 0x24
 800a29e:	e00b      	b.n	800a2b8 <font_printStr+0x48>
  else if(x<0) x = (scrWd - wd) / 2; // center = -2
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	da08      	bge.n	800a2b8 <font_printStr+0x48>
 800a2a6:	4b25      	ldr	r3, [pc, #148]	; (800a33c <font_printStr+0xcc>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	da00      	bge.n	800a2b4 <font_printStr+0x44>
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	105b      	asrs	r3, r3, #1
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
  if(x<0) x = 0; // left
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	da34      	bge.n	800a328 <font_printStr+0xb8>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24

  while(*str) {
 800a2c2:	e031      	b.n	800a328 <font_printStr+0xb8>
    char ch = *str++;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	607a      	str	r2, [r7, #4]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	76fb      	strb	r3, [r7, #27]
    int wd = font_drawChar(x,y,ch);
 800a2ce:	7efb      	ldrb	r3, [r7, #27]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6a39      	ldr	r1, [r7, #32]
 800a2d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2d6:	f7fe ff21 	bl	800911c <font_drawChar>
 800a2da:	6178      	str	r0, [r7, #20]
    x+=wd;
 800a2dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
    if((cr && x>=scrWd) || ch==10) { 
 800a2e4:	4b16      	ldr	r3, [pc, #88]	; (800a340 <font_printStr+0xd0>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d004      	beq.n	800a2f6 <font_printStr+0x86>
 800a2ec:	4b13      	ldr	r3, [pc, #76]	; (800a33c <font_printStr+0xcc>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	da02      	bge.n	800a2fc <font_printStr+0x8c>
 800a2f6:	7efb      	ldrb	r3, [r7, #27]
 800a2f8:	2b0a      	cmp	r3, #10
 800a2fa:	d115      	bne.n	800a328 <font_printStr+0xb8>
      x = cr ? 0 : xpos; 
 800a2fc:	4b10      	ldr	r3, [pc, #64]	; (800a340 <font_printStr+0xd0>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <font_printStr+0x98>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	e000      	b.n	800a30a <font_printStr+0x9a>
 800a308:	2300      	movs	r3, #0
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
      y += rFont->ht * sy + spacingY; 
 800a30c:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <font_printStr+0xd4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	789b      	ldrb	r3, [r3, #2]
 800a312:	461a      	mov	r2, r3
 800a314:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <font_printStr+0xd8>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	fb03 f202 	mul.w	r2, r3, r2
 800a31c:	4b0b      	ldr	r3, [pc, #44]	; (800a34c <font_printStr+0xdc>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4413      	add	r3, r2
 800a322:	6a3a      	ldr	r2, [r7, #32]
 800a324:	4413      	add	r3, r2
 800a326:	623b      	str	r3, [r7, #32]
  while(*str) {
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1c9      	bne.n	800a2c4 <font_printStr+0x54>
    }
  }
  return x;
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a332:	4618      	mov	r0, r3
 800a334:	3728      	adds	r7, #40	; 0x28
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20007a6c 	.word	0x20007a6c
 800a340:	20007a7c 	.word	0x20007a7c
 800a344:	20007a58 	.word	0x20007a58
 800a348:	20002814 	.word	0x20002814
 800a34c:	20007a74 	.word	0x20007a74

0800a350 <font_isNumber>:
// ----------------------------------------------------------------
// callbacks
bool font_isNumber(unsigned char ch)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) || ch==' ' || ch=='-';
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	2b2f      	cmp	r3, #47	; 0x2f
 800a35e:	d902      	bls.n	800a366 <font_isNumber+0x16>
 800a360:	79fb      	ldrb	r3, [r7, #7]
 800a362:	2b39      	cmp	r3, #57	; 0x39
 800a364:	d905      	bls.n	800a372 <font_isNumber+0x22>
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	2b20      	cmp	r3, #32
 800a36a:	d002      	beq.n	800a372 <font_isNumber+0x22>
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	2b2d      	cmp	r3, #45	; 0x2d
 800a370:	d101      	bne.n	800a376 <font_isNumber+0x26>
 800a372:	2301      	movs	r3, #1
 800a374:	e000      	b.n	800a378 <font_isNumber+0x28>
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <__errno>:
 800a384:	4b01      	ldr	r3, [pc, #4]	; (800a38c <__errno+0x8>)
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	20002860 	.word	0x20002860

0800a390 <__libc_init_array>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	4e0d      	ldr	r6, [pc, #52]	; (800a3c8 <__libc_init_array+0x38>)
 800a394:	4c0d      	ldr	r4, [pc, #52]	; (800a3cc <__libc_init_array+0x3c>)
 800a396:	1ba4      	subs	r4, r4, r6
 800a398:	10a4      	asrs	r4, r4, #2
 800a39a:	2500      	movs	r5, #0
 800a39c:	42a5      	cmp	r5, r4
 800a39e:	d109      	bne.n	800a3b4 <__libc_init_array+0x24>
 800a3a0:	4e0b      	ldr	r6, [pc, #44]	; (800a3d0 <__libc_init_array+0x40>)
 800a3a2:	4c0c      	ldr	r4, [pc, #48]	; (800a3d4 <__libc_init_array+0x44>)
 800a3a4:	f003 fd98 	bl	800ded8 <_init>
 800a3a8:	1ba4      	subs	r4, r4, r6
 800a3aa:	10a4      	asrs	r4, r4, #2
 800a3ac:	2500      	movs	r5, #0
 800a3ae:	42a5      	cmp	r5, r4
 800a3b0:	d105      	bne.n	800a3be <__libc_init_array+0x2e>
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3b8:	4798      	blx	r3
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	e7ee      	b.n	800a39c <__libc_init_array+0xc>
 800a3be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3c2:	4798      	blx	r3
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	e7f2      	b.n	800a3ae <__libc_init_array+0x1e>
 800a3c8:	080101b8 	.word	0x080101b8
 800a3cc:	080101b8 	.word	0x080101b8
 800a3d0:	080101b8 	.word	0x080101b8
 800a3d4:	080101bc 	.word	0x080101bc

0800a3d8 <memcpy>:
 800a3d8:	b510      	push	{r4, lr}
 800a3da:	1e43      	subs	r3, r0, #1
 800a3dc:	440a      	add	r2, r1
 800a3de:	4291      	cmp	r1, r2
 800a3e0:	d100      	bne.n	800a3e4 <memcpy+0xc>
 800a3e2:	bd10      	pop	{r4, pc}
 800a3e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3ec:	e7f7      	b.n	800a3de <memcpy+0x6>

0800a3ee <memset>:
 800a3ee:	4402      	add	r2, r0
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d100      	bne.n	800a3f8 <memset+0xa>
 800a3f6:	4770      	bx	lr
 800a3f8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3fc:	e7f9      	b.n	800a3f2 <memset+0x4>

0800a3fe <__cvt>:
 800a3fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a402:	ec55 4b10 	vmov	r4, r5, d0
 800a406:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a408:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a40c:	2d00      	cmp	r5, #0
 800a40e:	460e      	mov	r6, r1
 800a410:	4691      	mov	r9, r2
 800a412:	4619      	mov	r1, r3
 800a414:	bfb8      	it	lt
 800a416:	4622      	movlt	r2, r4
 800a418:	462b      	mov	r3, r5
 800a41a:	f027 0720 	bic.w	r7, r7, #32
 800a41e:	bfbb      	ittet	lt
 800a420:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a424:	461d      	movlt	r5, r3
 800a426:	2300      	movge	r3, #0
 800a428:	232d      	movlt	r3, #45	; 0x2d
 800a42a:	bfb8      	it	lt
 800a42c:	4614      	movlt	r4, r2
 800a42e:	2f46      	cmp	r7, #70	; 0x46
 800a430:	700b      	strb	r3, [r1, #0]
 800a432:	d004      	beq.n	800a43e <__cvt+0x40>
 800a434:	2f45      	cmp	r7, #69	; 0x45
 800a436:	d100      	bne.n	800a43a <__cvt+0x3c>
 800a438:	3601      	adds	r6, #1
 800a43a:	2102      	movs	r1, #2
 800a43c:	e000      	b.n	800a440 <__cvt+0x42>
 800a43e:	2103      	movs	r1, #3
 800a440:	ab03      	add	r3, sp, #12
 800a442:	9301      	str	r3, [sp, #4]
 800a444:	ab02      	add	r3, sp, #8
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	4632      	mov	r2, r6
 800a44a:	4653      	mov	r3, sl
 800a44c:	ec45 4b10 	vmov	d0, r4, r5
 800a450:	f001 fdb6 	bl	800bfc0 <_dtoa_r>
 800a454:	2f47      	cmp	r7, #71	; 0x47
 800a456:	4680      	mov	r8, r0
 800a458:	d102      	bne.n	800a460 <__cvt+0x62>
 800a45a:	f019 0f01 	tst.w	r9, #1
 800a45e:	d026      	beq.n	800a4ae <__cvt+0xb0>
 800a460:	2f46      	cmp	r7, #70	; 0x46
 800a462:	eb08 0906 	add.w	r9, r8, r6
 800a466:	d111      	bne.n	800a48c <__cvt+0x8e>
 800a468:	f898 3000 	ldrb.w	r3, [r8]
 800a46c:	2b30      	cmp	r3, #48	; 0x30
 800a46e:	d10a      	bne.n	800a486 <__cvt+0x88>
 800a470:	2200      	movs	r2, #0
 800a472:	2300      	movs	r3, #0
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f6 fb4e 	bl	8000b18 <__aeabi_dcmpeq>
 800a47c:	b918      	cbnz	r0, 800a486 <__cvt+0x88>
 800a47e:	f1c6 0601 	rsb	r6, r6, #1
 800a482:	f8ca 6000 	str.w	r6, [sl]
 800a486:	f8da 3000 	ldr.w	r3, [sl]
 800a48a:	4499      	add	r9, r3
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f6 fb40 	bl	8000b18 <__aeabi_dcmpeq>
 800a498:	b938      	cbnz	r0, 800a4aa <__cvt+0xac>
 800a49a:	2230      	movs	r2, #48	; 0x30
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	454b      	cmp	r3, r9
 800a4a0:	d205      	bcs.n	800a4ae <__cvt+0xb0>
 800a4a2:	1c59      	adds	r1, r3, #1
 800a4a4:	9103      	str	r1, [sp, #12]
 800a4a6:	701a      	strb	r2, [r3, #0]
 800a4a8:	e7f8      	b.n	800a49c <__cvt+0x9e>
 800a4aa:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4b2:	eba3 0308 	sub.w	r3, r3, r8
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	b004      	add	sp, #16
 800a4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a4c0 <__exponent>:
 800a4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4c2:	2900      	cmp	r1, #0
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	bfba      	itte	lt
 800a4c8:	4249      	neglt	r1, r1
 800a4ca:	232d      	movlt	r3, #45	; 0x2d
 800a4cc:	232b      	movge	r3, #43	; 0x2b
 800a4ce:	2909      	cmp	r1, #9
 800a4d0:	f804 2b02 	strb.w	r2, [r4], #2
 800a4d4:	7043      	strb	r3, [r0, #1]
 800a4d6:	dd20      	ble.n	800a51a <__exponent+0x5a>
 800a4d8:	f10d 0307 	add.w	r3, sp, #7
 800a4dc:	461f      	mov	r7, r3
 800a4de:	260a      	movs	r6, #10
 800a4e0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a4e4:	fb06 1115 	mls	r1, r6, r5, r1
 800a4e8:	3130      	adds	r1, #48	; 0x30
 800a4ea:	2d09      	cmp	r5, #9
 800a4ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a4f0:	f103 32ff 	add.w	r2, r3, #4294967295
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	dc09      	bgt.n	800a50c <__exponent+0x4c>
 800a4f8:	3130      	adds	r1, #48	; 0x30
 800a4fa:	3b02      	subs	r3, #2
 800a4fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a500:	42bb      	cmp	r3, r7
 800a502:	4622      	mov	r2, r4
 800a504:	d304      	bcc.n	800a510 <__exponent+0x50>
 800a506:	1a10      	subs	r0, r2, r0
 800a508:	b003      	add	sp, #12
 800a50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50c:	4613      	mov	r3, r2
 800a50e:	e7e7      	b.n	800a4e0 <__exponent+0x20>
 800a510:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a514:	f804 2b01 	strb.w	r2, [r4], #1
 800a518:	e7f2      	b.n	800a500 <__exponent+0x40>
 800a51a:	2330      	movs	r3, #48	; 0x30
 800a51c:	4419      	add	r1, r3
 800a51e:	7083      	strb	r3, [r0, #2]
 800a520:	1d02      	adds	r2, r0, #4
 800a522:	70c1      	strb	r1, [r0, #3]
 800a524:	e7ef      	b.n	800a506 <__exponent+0x46>
	...

0800a528 <_printf_float>:
 800a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	b08d      	sub	sp, #52	; 0x34
 800a52e:	460c      	mov	r4, r1
 800a530:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a534:	4616      	mov	r6, r2
 800a536:	461f      	mov	r7, r3
 800a538:	4605      	mov	r5, r0
 800a53a:	f002 fe25 	bl	800d188 <_localeconv_r>
 800a53e:	6803      	ldr	r3, [r0, #0]
 800a540:	9304      	str	r3, [sp, #16]
 800a542:	4618      	mov	r0, r3
 800a544:	f7f5 fe6c 	bl	8000220 <strlen>
 800a548:	2300      	movs	r3, #0
 800a54a:	930a      	str	r3, [sp, #40]	; 0x28
 800a54c:	f8d8 3000 	ldr.w	r3, [r8]
 800a550:	9005      	str	r0, [sp, #20]
 800a552:	3307      	adds	r3, #7
 800a554:	f023 0307 	bic.w	r3, r3, #7
 800a558:	f103 0208 	add.w	r2, r3, #8
 800a55c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a560:	f8d4 b000 	ldr.w	fp, [r4]
 800a564:	f8c8 2000 	str.w	r2, [r8]
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a570:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a574:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a578:	9307      	str	r3, [sp, #28]
 800a57a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295
 800a582:	4ba7      	ldr	r3, [pc, #668]	; (800a820 <_printf_float+0x2f8>)
 800a584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a588:	f7f6 faf8 	bl	8000b7c <__aeabi_dcmpun>
 800a58c:	bb70      	cbnz	r0, 800a5ec <_printf_float+0xc4>
 800a58e:	f04f 32ff 	mov.w	r2, #4294967295
 800a592:	4ba3      	ldr	r3, [pc, #652]	; (800a820 <_printf_float+0x2f8>)
 800a594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a598:	f7f6 fad2 	bl	8000b40 <__aeabi_dcmple>
 800a59c:	bb30      	cbnz	r0, 800a5ec <_printf_float+0xc4>
 800a59e:	2200      	movs	r2, #0
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	f7f6 fac1 	bl	8000b2c <__aeabi_dcmplt>
 800a5aa:	b110      	cbz	r0, 800a5b2 <_printf_float+0x8a>
 800a5ac:	232d      	movs	r3, #45	; 0x2d
 800a5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b2:	4a9c      	ldr	r2, [pc, #624]	; (800a824 <_printf_float+0x2fc>)
 800a5b4:	4b9c      	ldr	r3, [pc, #624]	; (800a828 <_printf_float+0x300>)
 800a5b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a5ba:	bf8c      	ite	hi
 800a5bc:	4690      	movhi	r8, r2
 800a5be:	4698      	movls	r8, r3
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	f02b 0204 	bic.w	r2, fp, #4
 800a5c6:	6123      	str	r3, [r4, #16]
 800a5c8:	6022      	str	r2, [r4, #0]
 800a5ca:	f04f 0900 	mov.w	r9, #0
 800a5ce:	9700      	str	r7, [sp, #0]
 800a5d0:	4633      	mov	r3, r6
 800a5d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 f9e6 	bl	800a9a8 <_printf_common>
 800a5dc:	3001      	adds	r0, #1
 800a5de:	f040 808d 	bne.w	800a6fc <_printf_float+0x1d4>
 800a5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e6:	b00d      	add	sp, #52	; 0x34
 800a5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	4649      	mov	r1, r9
 800a5f4:	f7f6 fac2 	bl	8000b7c <__aeabi_dcmpun>
 800a5f8:	b110      	cbz	r0, 800a600 <_printf_float+0xd8>
 800a5fa:	4a8c      	ldr	r2, [pc, #560]	; (800a82c <_printf_float+0x304>)
 800a5fc:	4b8c      	ldr	r3, [pc, #560]	; (800a830 <_printf_float+0x308>)
 800a5fe:	e7da      	b.n	800a5b6 <_printf_float+0x8e>
 800a600:	6861      	ldr	r1, [r4, #4]
 800a602:	1c4b      	adds	r3, r1, #1
 800a604:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a608:	a80a      	add	r0, sp, #40	; 0x28
 800a60a:	d13e      	bne.n	800a68a <_printf_float+0x162>
 800a60c:	2306      	movs	r3, #6
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	2300      	movs	r3, #0
 800a612:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a616:	ab09      	add	r3, sp, #36	; 0x24
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	ec49 8b10 	vmov	d0, r8, r9
 800a61e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a622:	6022      	str	r2, [r4, #0]
 800a624:	f8cd a004 	str.w	sl, [sp, #4]
 800a628:	6861      	ldr	r1, [r4, #4]
 800a62a:	4628      	mov	r0, r5
 800a62c:	f7ff fee7 	bl	800a3fe <__cvt>
 800a630:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a634:	2b47      	cmp	r3, #71	; 0x47
 800a636:	4680      	mov	r8, r0
 800a638:	d109      	bne.n	800a64e <_printf_float+0x126>
 800a63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63c:	1cd8      	adds	r0, r3, #3
 800a63e:	db02      	blt.n	800a646 <_printf_float+0x11e>
 800a640:	6862      	ldr	r2, [r4, #4]
 800a642:	4293      	cmp	r3, r2
 800a644:	dd47      	ble.n	800a6d6 <_printf_float+0x1ae>
 800a646:	f1aa 0a02 	sub.w	sl, sl, #2
 800a64a:	fa5f fa8a 	uxtb.w	sl, sl
 800a64e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a652:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a654:	d824      	bhi.n	800a6a0 <_printf_float+0x178>
 800a656:	3901      	subs	r1, #1
 800a658:	4652      	mov	r2, sl
 800a65a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a65e:	9109      	str	r1, [sp, #36]	; 0x24
 800a660:	f7ff ff2e 	bl	800a4c0 <__exponent>
 800a664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a666:	1813      	adds	r3, r2, r0
 800a668:	2a01      	cmp	r2, #1
 800a66a:	4681      	mov	r9, r0
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	dc02      	bgt.n	800a676 <_printf_float+0x14e>
 800a670:	6822      	ldr	r2, [r4, #0]
 800a672:	07d1      	lsls	r1, r2, #31
 800a674:	d501      	bpl.n	800a67a <_printf_float+0x152>
 800a676:	3301      	adds	r3, #1
 800a678:	6123      	str	r3, [r4, #16]
 800a67a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0a5      	beq.n	800a5ce <_printf_float+0xa6>
 800a682:	232d      	movs	r3, #45	; 0x2d
 800a684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a688:	e7a1      	b.n	800a5ce <_printf_float+0xa6>
 800a68a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a68e:	f000 8177 	beq.w	800a980 <_printf_float+0x458>
 800a692:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a696:	d1bb      	bne.n	800a610 <_printf_float+0xe8>
 800a698:	2900      	cmp	r1, #0
 800a69a:	d1b9      	bne.n	800a610 <_printf_float+0xe8>
 800a69c:	2301      	movs	r3, #1
 800a69e:	e7b6      	b.n	800a60e <_printf_float+0xe6>
 800a6a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a6a4:	d119      	bne.n	800a6da <_printf_float+0x1b2>
 800a6a6:	2900      	cmp	r1, #0
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	dd0c      	ble.n	800a6c6 <_printf_float+0x19e>
 800a6ac:	6121      	str	r1, [r4, #16]
 800a6ae:	b913      	cbnz	r3, 800a6b6 <_printf_float+0x18e>
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	07d2      	lsls	r2, r2, #31
 800a6b4:	d502      	bpl.n	800a6bc <_printf_float+0x194>
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	440b      	add	r3, r1
 800a6ba:	6123      	str	r3, [r4, #16]
 800a6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6be:	65a3      	str	r3, [r4, #88]	; 0x58
 800a6c0:	f04f 0900 	mov.w	r9, #0
 800a6c4:	e7d9      	b.n	800a67a <_printf_float+0x152>
 800a6c6:	b913      	cbnz	r3, 800a6ce <_printf_float+0x1a6>
 800a6c8:	6822      	ldr	r2, [r4, #0]
 800a6ca:	07d0      	lsls	r0, r2, #31
 800a6cc:	d501      	bpl.n	800a6d2 <_printf_float+0x1aa>
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	e7f3      	b.n	800a6ba <_printf_float+0x192>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e7f1      	b.n	800a6ba <_printf_float+0x192>
 800a6d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a6da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	db05      	blt.n	800a6ee <_printf_float+0x1c6>
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	6123      	str	r3, [r4, #16]
 800a6e6:	07d1      	lsls	r1, r2, #31
 800a6e8:	d5e8      	bpl.n	800a6bc <_printf_float+0x194>
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	e7e5      	b.n	800a6ba <_printf_float+0x192>
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfd4      	ite	le
 800a6f2:	f1c3 0302 	rsble	r3, r3, #2
 800a6f6:	2301      	movgt	r3, #1
 800a6f8:	4413      	add	r3, r2
 800a6fa:	e7de      	b.n	800a6ba <_printf_float+0x192>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	055a      	lsls	r2, r3, #21
 800a700:	d407      	bmi.n	800a712 <_printf_float+0x1ea>
 800a702:	6923      	ldr	r3, [r4, #16]
 800a704:	4642      	mov	r2, r8
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	d12b      	bne.n	800a768 <_printf_float+0x240>
 800a710:	e767      	b.n	800a5e2 <_printf_float+0xba>
 800a712:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a716:	f240 80dc 	bls.w	800a8d2 <_printf_float+0x3aa>
 800a71a:	2200      	movs	r2, #0
 800a71c:	2300      	movs	r3, #0
 800a71e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a722:	f7f6 f9f9 	bl	8000b18 <__aeabi_dcmpeq>
 800a726:	2800      	cmp	r0, #0
 800a728:	d033      	beq.n	800a792 <_printf_float+0x26a>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4a41      	ldr	r2, [pc, #260]	; (800a834 <_printf_float+0x30c>)
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	f43f af54 	beq.w	800a5e2 <_printf_float+0xba>
 800a73a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a73e:	429a      	cmp	r2, r3
 800a740:	db02      	blt.n	800a748 <_printf_float+0x220>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	07d8      	lsls	r0, r3, #31
 800a746:	d50f      	bpl.n	800a768 <_printf_float+0x240>
 800a748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a74c:	4631      	mov	r1, r6
 800a74e:	4628      	mov	r0, r5
 800a750:	47b8      	blx	r7
 800a752:	3001      	adds	r0, #1
 800a754:	f43f af45 	beq.w	800a5e2 <_printf_float+0xba>
 800a758:	f04f 0800 	mov.w	r8, #0
 800a75c:	f104 091a 	add.w	r9, r4, #26
 800a760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a762:	3b01      	subs	r3, #1
 800a764:	4543      	cmp	r3, r8
 800a766:	dc09      	bgt.n	800a77c <_printf_float+0x254>
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	079b      	lsls	r3, r3, #30
 800a76c:	f100 8103 	bmi.w	800a976 <_printf_float+0x44e>
 800a770:	68e0      	ldr	r0, [r4, #12]
 800a772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a774:	4298      	cmp	r0, r3
 800a776:	bfb8      	it	lt
 800a778:	4618      	movlt	r0, r3
 800a77a:	e734      	b.n	800a5e6 <_printf_float+0xbe>
 800a77c:	2301      	movs	r3, #1
 800a77e:	464a      	mov	r2, r9
 800a780:	4631      	mov	r1, r6
 800a782:	4628      	mov	r0, r5
 800a784:	47b8      	blx	r7
 800a786:	3001      	adds	r0, #1
 800a788:	f43f af2b 	beq.w	800a5e2 <_printf_float+0xba>
 800a78c:	f108 0801 	add.w	r8, r8, #1
 800a790:	e7e6      	b.n	800a760 <_printf_float+0x238>
 800a792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a794:	2b00      	cmp	r3, #0
 800a796:	dc2b      	bgt.n	800a7f0 <_printf_float+0x2c8>
 800a798:	2301      	movs	r3, #1
 800a79a:	4a26      	ldr	r2, [pc, #152]	; (800a834 <_printf_float+0x30c>)
 800a79c:	4631      	mov	r1, r6
 800a79e:	4628      	mov	r0, r5
 800a7a0:	47b8      	blx	r7
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	f43f af1d 	beq.w	800a5e2 <_printf_float+0xba>
 800a7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7aa:	b923      	cbnz	r3, 800a7b6 <_printf_float+0x28e>
 800a7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ae:	b913      	cbnz	r3, 800a7b6 <_printf_float+0x28e>
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	07d9      	lsls	r1, r3, #31
 800a7b4:	d5d8      	bpl.n	800a768 <_printf_float+0x240>
 800a7b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f43f af0e 	beq.w	800a5e2 <_printf_float+0xba>
 800a7c6:	f04f 0900 	mov.w	r9, #0
 800a7ca:	f104 0a1a 	add.w	sl, r4, #26
 800a7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d0:	425b      	negs	r3, r3
 800a7d2:	454b      	cmp	r3, r9
 800a7d4:	dc01      	bgt.n	800a7da <_printf_float+0x2b2>
 800a7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d8:	e794      	b.n	800a704 <_printf_float+0x1dc>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4652      	mov	r2, sl
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	47b8      	blx	r7
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	f43f aefc 	beq.w	800a5e2 <_printf_float+0xba>
 800a7ea:	f109 0901 	add.w	r9, r9, #1
 800a7ee:	e7ee      	b.n	800a7ce <_printf_float+0x2a6>
 800a7f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	bfa8      	it	ge
 800a7f8:	461a      	movge	r2, r3
 800a7fa:	2a00      	cmp	r2, #0
 800a7fc:	4691      	mov	r9, r2
 800a7fe:	dd07      	ble.n	800a810 <_printf_float+0x2e8>
 800a800:	4613      	mov	r3, r2
 800a802:	4631      	mov	r1, r6
 800a804:	4642      	mov	r2, r8
 800a806:	4628      	mov	r0, r5
 800a808:	47b8      	blx	r7
 800a80a:	3001      	adds	r0, #1
 800a80c:	f43f aee9 	beq.w	800a5e2 <_printf_float+0xba>
 800a810:	f104 031a 	add.w	r3, r4, #26
 800a814:	f04f 0b00 	mov.w	fp, #0
 800a818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a81c:	9306      	str	r3, [sp, #24]
 800a81e:	e015      	b.n	800a84c <_printf_float+0x324>
 800a820:	7fefffff 	.word	0x7fefffff
 800a824:	0800ff02 	.word	0x0800ff02
 800a828:	0800fefe 	.word	0x0800fefe
 800a82c:	0800ff0a 	.word	0x0800ff0a
 800a830:	0800ff06 	.word	0x0800ff06
 800a834:	0800ff0e 	.word	0x0800ff0e
 800a838:	2301      	movs	r3, #1
 800a83a:	9a06      	ldr	r2, [sp, #24]
 800a83c:	4631      	mov	r1, r6
 800a83e:	4628      	mov	r0, r5
 800a840:	47b8      	blx	r7
 800a842:	3001      	adds	r0, #1
 800a844:	f43f aecd 	beq.w	800a5e2 <_printf_float+0xba>
 800a848:	f10b 0b01 	add.w	fp, fp, #1
 800a84c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a850:	ebaa 0309 	sub.w	r3, sl, r9
 800a854:	455b      	cmp	r3, fp
 800a856:	dcef      	bgt.n	800a838 <_printf_float+0x310>
 800a858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a85c:	429a      	cmp	r2, r3
 800a85e:	44d0      	add	r8, sl
 800a860:	db15      	blt.n	800a88e <_printf_float+0x366>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	07da      	lsls	r2, r3, #31
 800a866:	d412      	bmi.n	800a88e <_printf_float+0x366>
 800a868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a86a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a86c:	eba3 020a 	sub.w	r2, r3, sl
 800a870:	eba3 0a01 	sub.w	sl, r3, r1
 800a874:	4592      	cmp	sl, r2
 800a876:	bfa8      	it	ge
 800a878:	4692      	movge	sl, r2
 800a87a:	f1ba 0f00 	cmp.w	sl, #0
 800a87e:	dc0e      	bgt.n	800a89e <_printf_float+0x376>
 800a880:	f04f 0800 	mov.w	r8, #0
 800a884:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a888:	f104 091a 	add.w	r9, r4, #26
 800a88c:	e019      	b.n	800a8c2 <_printf_float+0x39a>
 800a88e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a892:	4631      	mov	r1, r6
 800a894:	4628      	mov	r0, r5
 800a896:	47b8      	blx	r7
 800a898:	3001      	adds	r0, #1
 800a89a:	d1e5      	bne.n	800a868 <_printf_float+0x340>
 800a89c:	e6a1      	b.n	800a5e2 <_printf_float+0xba>
 800a89e:	4653      	mov	r3, sl
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b8      	blx	r7
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d1e9      	bne.n	800a880 <_printf_float+0x358>
 800a8ac:	e699      	b.n	800a5e2 <_printf_float+0xba>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	464a      	mov	r2, r9
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b8      	blx	r7
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	f43f ae92 	beq.w	800a5e2 <_printf_float+0xba>
 800a8be:	f108 0801 	add.w	r8, r8, #1
 800a8c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	eba3 030a 	sub.w	r3, r3, sl
 800a8cc:	4543      	cmp	r3, r8
 800a8ce:	dcee      	bgt.n	800a8ae <_printf_float+0x386>
 800a8d0:	e74a      	b.n	800a768 <_printf_float+0x240>
 800a8d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8d4:	2a01      	cmp	r2, #1
 800a8d6:	dc01      	bgt.n	800a8dc <_printf_float+0x3b4>
 800a8d8:	07db      	lsls	r3, r3, #31
 800a8da:	d53a      	bpl.n	800a952 <_printf_float+0x42a>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4642      	mov	r2, r8
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b8      	blx	r7
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f43f ae7b 	beq.w	800a5e2 <_printf_float+0xba>
 800a8ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	47b8      	blx	r7
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	f108 0801 	add.w	r8, r8, #1
 800a8fc:	f43f ae71 	beq.w	800a5e2 <_printf_float+0xba>
 800a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a902:	2200      	movs	r2, #0
 800a904:	f103 3aff 	add.w	sl, r3, #4294967295
 800a908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a90c:	2300      	movs	r3, #0
 800a90e:	f7f6 f903 	bl	8000b18 <__aeabi_dcmpeq>
 800a912:	b9c8      	cbnz	r0, 800a948 <_printf_float+0x420>
 800a914:	4653      	mov	r3, sl
 800a916:	4642      	mov	r2, r8
 800a918:	4631      	mov	r1, r6
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b8      	blx	r7
 800a91e:	3001      	adds	r0, #1
 800a920:	d10e      	bne.n	800a940 <_printf_float+0x418>
 800a922:	e65e      	b.n	800a5e2 <_printf_float+0xba>
 800a924:	2301      	movs	r3, #1
 800a926:	4652      	mov	r2, sl
 800a928:	4631      	mov	r1, r6
 800a92a:	4628      	mov	r0, r5
 800a92c:	47b8      	blx	r7
 800a92e:	3001      	adds	r0, #1
 800a930:	f43f ae57 	beq.w	800a5e2 <_printf_float+0xba>
 800a934:	f108 0801 	add.w	r8, r8, #1
 800a938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a93a:	3b01      	subs	r3, #1
 800a93c:	4543      	cmp	r3, r8
 800a93e:	dcf1      	bgt.n	800a924 <_printf_float+0x3fc>
 800a940:	464b      	mov	r3, r9
 800a942:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a946:	e6de      	b.n	800a706 <_printf_float+0x1de>
 800a948:	f04f 0800 	mov.w	r8, #0
 800a94c:	f104 0a1a 	add.w	sl, r4, #26
 800a950:	e7f2      	b.n	800a938 <_printf_float+0x410>
 800a952:	2301      	movs	r3, #1
 800a954:	e7df      	b.n	800a916 <_printf_float+0x3ee>
 800a956:	2301      	movs	r3, #1
 800a958:	464a      	mov	r2, r9
 800a95a:	4631      	mov	r1, r6
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b8      	blx	r7
 800a960:	3001      	adds	r0, #1
 800a962:	f43f ae3e 	beq.w	800a5e2 <_printf_float+0xba>
 800a966:	f108 0801 	add.w	r8, r8, #1
 800a96a:	68e3      	ldr	r3, [r4, #12]
 800a96c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a96e:	1a9b      	subs	r3, r3, r2
 800a970:	4543      	cmp	r3, r8
 800a972:	dcf0      	bgt.n	800a956 <_printf_float+0x42e>
 800a974:	e6fc      	b.n	800a770 <_printf_float+0x248>
 800a976:	f04f 0800 	mov.w	r8, #0
 800a97a:	f104 0919 	add.w	r9, r4, #25
 800a97e:	e7f4      	b.n	800a96a <_printf_float+0x442>
 800a980:	2900      	cmp	r1, #0
 800a982:	f43f ae8b 	beq.w	800a69c <_printf_float+0x174>
 800a986:	2300      	movs	r3, #0
 800a988:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a98c:	ab09      	add	r3, sp, #36	; 0x24
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	ec49 8b10 	vmov	d0, r8, r9
 800a994:	6022      	str	r2, [r4, #0]
 800a996:	f8cd a004 	str.w	sl, [sp, #4]
 800a99a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f7ff fd2d 	bl	800a3fe <__cvt>
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	e648      	b.n	800a63a <_printf_float+0x112>

0800a9a8 <_printf_common>:
 800a9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ac:	4691      	mov	r9, r2
 800a9ae:	461f      	mov	r7, r3
 800a9b0:	688a      	ldr	r2, [r1, #8]
 800a9b2:	690b      	ldr	r3, [r1, #16]
 800a9b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	bfb8      	it	lt
 800a9bc:	4613      	movlt	r3, r2
 800a9be:	f8c9 3000 	str.w	r3, [r9]
 800a9c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	b112      	cbz	r2, 800a9d2 <_printf_common+0x2a>
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	f8c9 3000 	str.w	r3, [r9]
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	0699      	lsls	r1, r3, #26
 800a9d6:	bf42      	ittt	mi
 800a9d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a9dc:	3302      	addmi	r3, #2
 800a9de:	f8c9 3000 	strmi.w	r3, [r9]
 800a9e2:	6825      	ldr	r5, [r4, #0]
 800a9e4:	f015 0506 	ands.w	r5, r5, #6
 800a9e8:	d107      	bne.n	800a9fa <_printf_common+0x52>
 800a9ea:	f104 0a19 	add.w	sl, r4, #25
 800a9ee:	68e3      	ldr	r3, [r4, #12]
 800a9f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a9f4:	1a9b      	subs	r3, r3, r2
 800a9f6:	42ab      	cmp	r3, r5
 800a9f8:	dc28      	bgt.n	800aa4c <_printf_common+0xa4>
 800a9fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a9fe:	6822      	ldr	r2, [r4, #0]
 800aa00:	3300      	adds	r3, #0
 800aa02:	bf18      	it	ne
 800aa04:	2301      	movne	r3, #1
 800aa06:	0692      	lsls	r2, r2, #26
 800aa08:	d42d      	bmi.n	800aa66 <_printf_common+0xbe>
 800aa0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa0e:	4639      	mov	r1, r7
 800aa10:	4630      	mov	r0, r6
 800aa12:	47c0      	blx	r8
 800aa14:	3001      	adds	r0, #1
 800aa16:	d020      	beq.n	800aa5a <_printf_common+0xb2>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	68e5      	ldr	r5, [r4, #12]
 800aa1c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa20:	f003 0306 	and.w	r3, r3, #6
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	bf08      	it	eq
 800aa28:	1aad      	subeq	r5, r5, r2
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	6922      	ldr	r2, [r4, #16]
 800aa2e:	bf0c      	ite	eq
 800aa30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa34:	2500      	movne	r5, #0
 800aa36:	4293      	cmp	r3, r2
 800aa38:	bfc4      	itt	gt
 800aa3a:	1a9b      	subgt	r3, r3, r2
 800aa3c:	18ed      	addgt	r5, r5, r3
 800aa3e:	f04f 0900 	mov.w	r9, #0
 800aa42:	341a      	adds	r4, #26
 800aa44:	454d      	cmp	r5, r9
 800aa46:	d11a      	bne.n	800aa7e <_printf_common+0xd6>
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e008      	b.n	800aa5e <_printf_common+0xb6>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	4652      	mov	r2, sl
 800aa50:	4639      	mov	r1, r7
 800aa52:	4630      	mov	r0, r6
 800aa54:	47c0      	blx	r8
 800aa56:	3001      	adds	r0, #1
 800aa58:	d103      	bne.n	800aa62 <_printf_common+0xba>
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa62:	3501      	adds	r5, #1
 800aa64:	e7c3      	b.n	800a9ee <_printf_common+0x46>
 800aa66:	18e1      	adds	r1, r4, r3
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	2030      	movs	r0, #48	; 0x30
 800aa6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa70:	4422      	add	r2, r4
 800aa72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa7a:	3302      	adds	r3, #2
 800aa7c:	e7c5      	b.n	800aa0a <_printf_common+0x62>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4622      	mov	r2, r4
 800aa82:	4639      	mov	r1, r7
 800aa84:	4630      	mov	r0, r6
 800aa86:	47c0      	blx	r8
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d0e6      	beq.n	800aa5a <_printf_common+0xb2>
 800aa8c:	f109 0901 	add.w	r9, r9, #1
 800aa90:	e7d8      	b.n	800aa44 <_printf_common+0x9c>
	...

0800aa94 <_printf_i>:
 800aa94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	7e09      	ldrb	r1, [r1, #24]
 800aaa0:	b085      	sub	sp, #20
 800aaa2:	296e      	cmp	r1, #110	; 0x6e
 800aaa4:	4617      	mov	r7, r2
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	4698      	mov	r8, r3
 800aaaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaac:	f000 80b3 	beq.w	800ac16 <_printf_i+0x182>
 800aab0:	d822      	bhi.n	800aaf8 <_printf_i+0x64>
 800aab2:	2963      	cmp	r1, #99	; 0x63
 800aab4:	d036      	beq.n	800ab24 <_printf_i+0x90>
 800aab6:	d80a      	bhi.n	800aace <_printf_i+0x3a>
 800aab8:	2900      	cmp	r1, #0
 800aaba:	f000 80b9 	beq.w	800ac30 <_printf_i+0x19c>
 800aabe:	2958      	cmp	r1, #88	; 0x58
 800aac0:	f000 8083 	beq.w	800abca <_printf_i+0x136>
 800aac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aac8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800aacc:	e032      	b.n	800ab34 <_printf_i+0xa0>
 800aace:	2964      	cmp	r1, #100	; 0x64
 800aad0:	d001      	beq.n	800aad6 <_printf_i+0x42>
 800aad2:	2969      	cmp	r1, #105	; 0x69
 800aad4:	d1f6      	bne.n	800aac4 <_printf_i+0x30>
 800aad6:	6820      	ldr	r0, [r4, #0]
 800aad8:	6813      	ldr	r3, [r2, #0]
 800aada:	0605      	lsls	r5, r0, #24
 800aadc:	f103 0104 	add.w	r1, r3, #4
 800aae0:	d52a      	bpl.n	800ab38 <_printf_i+0xa4>
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6011      	str	r1, [r2, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da03      	bge.n	800aaf2 <_printf_i+0x5e>
 800aaea:	222d      	movs	r2, #45	; 0x2d
 800aaec:	425b      	negs	r3, r3
 800aaee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800aaf2:	486f      	ldr	r0, [pc, #444]	; (800acb0 <_printf_i+0x21c>)
 800aaf4:	220a      	movs	r2, #10
 800aaf6:	e039      	b.n	800ab6c <_printf_i+0xd8>
 800aaf8:	2973      	cmp	r1, #115	; 0x73
 800aafa:	f000 809d 	beq.w	800ac38 <_printf_i+0x1a4>
 800aafe:	d808      	bhi.n	800ab12 <_printf_i+0x7e>
 800ab00:	296f      	cmp	r1, #111	; 0x6f
 800ab02:	d020      	beq.n	800ab46 <_printf_i+0xb2>
 800ab04:	2970      	cmp	r1, #112	; 0x70
 800ab06:	d1dd      	bne.n	800aac4 <_printf_i+0x30>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	f043 0320 	orr.w	r3, r3, #32
 800ab0e:	6023      	str	r3, [r4, #0]
 800ab10:	e003      	b.n	800ab1a <_printf_i+0x86>
 800ab12:	2975      	cmp	r1, #117	; 0x75
 800ab14:	d017      	beq.n	800ab46 <_printf_i+0xb2>
 800ab16:	2978      	cmp	r1, #120	; 0x78
 800ab18:	d1d4      	bne.n	800aac4 <_printf_i+0x30>
 800ab1a:	2378      	movs	r3, #120	; 0x78
 800ab1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab20:	4864      	ldr	r0, [pc, #400]	; (800acb4 <_printf_i+0x220>)
 800ab22:	e055      	b.n	800abd0 <_printf_i+0x13c>
 800ab24:	6813      	ldr	r3, [r2, #0]
 800ab26:	1d19      	adds	r1, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6011      	str	r1, [r2, #0]
 800ab2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab34:	2301      	movs	r3, #1
 800ab36:	e08c      	b.n	800ac52 <_printf_i+0x1be>
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6011      	str	r1, [r2, #0]
 800ab3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab40:	bf18      	it	ne
 800ab42:	b21b      	sxthne	r3, r3
 800ab44:	e7cf      	b.n	800aae6 <_printf_i+0x52>
 800ab46:	6813      	ldr	r3, [r2, #0]
 800ab48:	6825      	ldr	r5, [r4, #0]
 800ab4a:	1d18      	adds	r0, r3, #4
 800ab4c:	6010      	str	r0, [r2, #0]
 800ab4e:	0628      	lsls	r0, r5, #24
 800ab50:	d501      	bpl.n	800ab56 <_printf_i+0xc2>
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	e002      	b.n	800ab5c <_printf_i+0xc8>
 800ab56:	0668      	lsls	r0, r5, #25
 800ab58:	d5fb      	bpl.n	800ab52 <_printf_i+0xbe>
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	4854      	ldr	r0, [pc, #336]	; (800acb0 <_printf_i+0x21c>)
 800ab5e:	296f      	cmp	r1, #111	; 0x6f
 800ab60:	bf14      	ite	ne
 800ab62:	220a      	movne	r2, #10
 800ab64:	2208      	moveq	r2, #8
 800ab66:	2100      	movs	r1, #0
 800ab68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab6c:	6865      	ldr	r5, [r4, #4]
 800ab6e:	60a5      	str	r5, [r4, #8]
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	f2c0 8095 	blt.w	800aca0 <_printf_i+0x20c>
 800ab76:	6821      	ldr	r1, [r4, #0]
 800ab78:	f021 0104 	bic.w	r1, r1, #4
 800ab7c:	6021      	str	r1, [r4, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d13d      	bne.n	800abfe <_printf_i+0x16a>
 800ab82:	2d00      	cmp	r5, #0
 800ab84:	f040 808e 	bne.w	800aca4 <_printf_i+0x210>
 800ab88:	4665      	mov	r5, ip
 800ab8a:	2a08      	cmp	r2, #8
 800ab8c:	d10b      	bne.n	800aba6 <_printf_i+0x112>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	07db      	lsls	r3, r3, #31
 800ab92:	d508      	bpl.n	800aba6 <_printf_i+0x112>
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	6862      	ldr	r2, [r4, #4]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	bfde      	ittt	le
 800ab9c:	2330      	movle	r3, #48	; 0x30
 800ab9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aba6:	ebac 0305 	sub.w	r3, ip, r5
 800abaa:	6123      	str	r3, [r4, #16]
 800abac:	f8cd 8000 	str.w	r8, [sp]
 800abb0:	463b      	mov	r3, r7
 800abb2:	aa03      	add	r2, sp, #12
 800abb4:	4621      	mov	r1, r4
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7ff fef6 	bl	800a9a8 <_printf_common>
 800abbc:	3001      	adds	r0, #1
 800abbe:	d14d      	bne.n	800ac5c <_printf_i+0x1c8>
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	b005      	add	sp, #20
 800abc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abca:	4839      	ldr	r0, [pc, #228]	; (800acb0 <_printf_i+0x21c>)
 800abcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800abd0:	6813      	ldr	r3, [r2, #0]
 800abd2:	6821      	ldr	r1, [r4, #0]
 800abd4:	1d1d      	adds	r5, r3, #4
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6015      	str	r5, [r2, #0]
 800abda:	060a      	lsls	r2, r1, #24
 800abdc:	d50b      	bpl.n	800abf6 <_printf_i+0x162>
 800abde:	07ca      	lsls	r2, r1, #31
 800abe0:	bf44      	itt	mi
 800abe2:	f041 0120 	orrmi.w	r1, r1, #32
 800abe6:	6021      	strmi	r1, [r4, #0]
 800abe8:	b91b      	cbnz	r3, 800abf2 <_printf_i+0x15e>
 800abea:	6822      	ldr	r2, [r4, #0]
 800abec:	f022 0220 	bic.w	r2, r2, #32
 800abf0:	6022      	str	r2, [r4, #0]
 800abf2:	2210      	movs	r2, #16
 800abf4:	e7b7      	b.n	800ab66 <_printf_i+0xd2>
 800abf6:	064d      	lsls	r5, r1, #25
 800abf8:	bf48      	it	mi
 800abfa:	b29b      	uxthmi	r3, r3
 800abfc:	e7ef      	b.n	800abde <_printf_i+0x14a>
 800abfe:	4665      	mov	r5, ip
 800ac00:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac04:	fb02 3311 	mls	r3, r2, r1, r3
 800ac08:	5cc3      	ldrb	r3, [r0, r3]
 800ac0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ac0e:	460b      	mov	r3, r1
 800ac10:	2900      	cmp	r1, #0
 800ac12:	d1f5      	bne.n	800ac00 <_printf_i+0x16c>
 800ac14:	e7b9      	b.n	800ab8a <_printf_i+0xf6>
 800ac16:	6813      	ldr	r3, [r2, #0]
 800ac18:	6825      	ldr	r5, [r4, #0]
 800ac1a:	6961      	ldr	r1, [r4, #20]
 800ac1c:	1d18      	adds	r0, r3, #4
 800ac1e:	6010      	str	r0, [r2, #0]
 800ac20:	0628      	lsls	r0, r5, #24
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	d501      	bpl.n	800ac2a <_printf_i+0x196>
 800ac26:	6019      	str	r1, [r3, #0]
 800ac28:	e002      	b.n	800ac30 <_printf_i+0x19c>
 800ac2a:	066a      	lsls	r2, r5, #25
 800ac2c:	d5fb      	bpl.n	800ac26 <_printf_i+0x192>
 800ac2e:	8019      	strh	r1, [r3, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	6123      	str	r3, [r4, #16]
 800ac34:	4665      	mov	r5, ip
 800ac36:	e7b9      	b.n	800abac <_printf_i+0x118>
 800ac38:	6813      	ldr	r3, [r2, #0]
 800ac3a:	1d19      	adds	r1, r3, #4
 800ac3c:	6011      	str	r1, [r2, #0]
 800ac3e:	681d      	ldr	r5, [r3, #0]
 800ac40:	6862      	ldr	r2, [r4, #4]
 800ac42:	2100      	movs	r1, #0
 800ac44:	4628      	mov	r0, r5
 800ac46:	f7f5 faf3 	bl	8000230 <memchr>
 800ac4a:	b108      	cbz	r0, 800ac50 <_printf_i+0x1bc>
 800ac4c:	1b40      	subs	r0, r0, r5
 800ac4e:	6060      	str	r0, [r4, #4]
 800ac50:	6863      	ldr	r3, [r4, #4]
 800ac52:	6123      	str	r3, [r4, #16]
 800ac54:	2300      	movs	r3, #0
 800ac56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac5a:	e7a7      	b.n	800abac <_printf_i+0x118>
 800ac5c:	6923      	ldr	r3, [r4, #16]
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4639      	mov	r1, r7
 800ac62:	4630      	mov	r0, r6
 800ac64:	47c0      	blx	r8
 800ac66:	3001      	adds	r0, #1
 800ac68:	d0aa      	beq.n	800abc0 <_printf_i+0x12c>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	079b      	lsls	r3, r3, #30
 800ac6e:	d413      	bmi.n	800ac98 <_printf_i+0x204>
 800ac70:	68e0      	ldr	r0, [r4, #12]
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	4298      	cmp	r0, r3
 800ac76:	bfb8      	it	lt
 800ac78:	4618      	movlt	r0, r3
 800ac7a:	e7a3      	b.n	800abc4 <_printf_i+0x130>
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	464a      	mov	r2, r9
 800ac80:	4639      	mov	r1, r7
 800ac82:	4630      	mov	r0, r6
 800ac84:	47c0      	blx	r8
 800ac86:	3001      	adds	r0, #1
 800ac88:	d09a      	beq.n	800abc0 <_printf_i+0x12c>
 800ac8a:	3501      	adds	r5, #1
 800ac8c:	68e3      	ldr	r3, [r4, #12]
 800ac8e:	9a03      	ldr	r2, [sp, #12]
 800ac90:	1a9b      	subs	r3, r3, r2
 800ac92:	42ab      	cmp	r3, r5
 800ac94:	dcf2      	bgt.n	800ac7c <_printf_i+0x1e8>
 800ac96:	e7eb      	b.n	800ac70 <_printf_i+0x1dc>
 800ac98:	2500      	movs	r5, #0
 800ac9a:	f104 0919 	add.w	r9, r4, #25
 800ac9e:	e7f5      	b.n	800ac8c <_printf_i+0x1f8>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1ac      	bne.n	800abfe <_printf_i+0x16a>
 800aca4:	7803      	ldrb	r3, [r0, #0]
 800aca6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acaa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acae:	e76c      	b.n	800ab8a <_printf_i+0xf6>
 800acb0:	0800ff10 	.word	0x0800ff10
 800acb4:	0800ff21 	.word	0x0800ff21

0800acb8 <_scanf_float>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	469a      	mov	sl, r3
 800acbe:	688b      	ldr	r3, [r1, #8]
 800acc0:	4616      	mov	r6, r2
 800acc2:	1e5a      	subs	r2, r3, #1
 800acc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800acc8:	b087      	sub	sp, #28
 800acca:	bf83      	ittte	hi
 800accc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800acd0:	189b      	addhi	r3, r3, r2
 800acd2:	9301      	strhi	r3, [sp, #4]
 800acd4:	2300      	movls	r3, #0
 800acd6:	bf86      	itte	hi
 800acd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800acdc:	608b      	strhi	r3, [r1, #8]
 800acde:	9301      	strls	r3, [sp, #4]
 800ace0:	680b      	ldr	r3, [r1, #0]
 800ace2:	4688      	mov	r8, r1
 800ace4:	f04f 0b00 	mov.w	fp, #0
 800ace8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800acec:	f848 3b1c 	str.w	r3, [r8], #28
 800acf0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800acf4:	4607      	mov	r7, r0
 800acf6:	460c      	mov	r4, r1
 800acf8:	4645      	mov	r5, r8
 800acfa:	465a      	mov	r2, fp
 800acfc:	46d9      	mov	r9, fp
 800acfe:	f8cd b008 	str.w	fp, [sp, #8]
 800ad02:	68a1      	ldr	r1, [r4, #8]
 800ad04:	b181      	cbz	r1, 800ad28 <_scanf_float+0x70>
 800ad06:	6833      	ldr	r3, [r6, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b49      	cmp	r3, #73	; 0x49
 800ad0c:	d071      	beq.n	800adf2 <_scanf_float+0x13a>
 800ad0e:	d84d      	bhi.n	800adac <_scanf_float+0xf4>
 800ad10:	2b39      	cmp	r3, #57	; 0x39
 800ad12:	d840      	bhi.n	800ad96 <_scanf_float+0xde>
 800ad14:	2b31      	cmp	r3, #49	; 0x31
 800ad16:	f080 8088 	bcs.w	800ae2a <_scanf_float+0x172>
 800ad1a:	2b2d      	cmp	r3, #45	; 0x2d
 800ad1c:	f000 8090 	beq.w	800ae40 <_scanf_float+0x188>
 800ad20:	d815      	bhi.n	800ad4e <_scanf_float+0x96>
 800ad22:	2b2b      	cmp	r3, #43	; 0x2b
 800ad24:	f000 808c 	beq.w	800ae40 <_scanf_float+0x188>
 800ad28:	f1b9 0f00 	cmp.w	r9, #0
 800ad2c:	d003      	beq.n	800ad36 <_scanf_float+0x7e>
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	3a01      	subs	r2, #1
 800ad38:	2a01      	cmp	r2, #1
 800ad3a:	f200 80ea 	bhi.w	800af12 <_scanf_float+0x25a>
 800ad3e:	4545      	cmp	r5, r8
 800ad40:	f200 80dc 	bhi.w	800aefc <_scanf_float+0x244>
 800ad44:	2601      	movs	r6, #1
 800ad46:	4630      	mov	r0, r6
 800ad48:	b007      	add	sp, #28
 800ad4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ad50:	f000 809f 	beq.w	800ae92 <_scanf_float+0x1da>
 800ad54:	2b30      	cmp	r3, #48	; 0x30
 800ad56:	d1e7      	bne.n	800ad28 <_scanf_float+0x70>
 800ad58:	6820      	ldr	r0, [r4, #0]
 800ad5a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ad5e:	d064      	beq.n	800ae2a <_scanf_float+0x172>
 800ad60:	9b01      	ldr	r3, [sp, #4]
 800ad62:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ad66:	6020      	str	r0, [r4, #0]
 800ad68:	f109 0901 	add.w	r9, r9, #1
 800ad6c:	b11b      	cbz	r3, 800ad76 <_scanf_float+0xbe>
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	3101      	adds	r1, #1
 800ad72:	9301      	str	r3, [sp, #4]
 800ad74:	60a1      	str	r1, [r4, #8]
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	60a3      	str	r3, [r4, #8]
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	6873      	ldr	r3, [r6, #4]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	6073      	str	r3, [r6, #4]
 800ad8a:	f340 80ac 	ble.w	800aee6 <_scanf_float+0x22e>
 800ad8e:	6833      	ldr	r3, [r6, #0]
 800ad90:	3301      	adds	r3, #1
 800ad92:	6033      	str	r3, [r6, #0]
 800ad94:	e7b5      	b.n	800ad02 <_scanf_float+0x4a>
 800ad96:	2b45      	cmp	r3, #69	; 0x45
 800ad98:	f000 8085 	beq.w	800aea6 <_scanf_float+0x1ee>
 800ad9c:	2b46      	cmp	r3, #70	; 0x46
 800ad9e:	d06a      	beq.n	800ae76 <_scanf_float+0x1be>
 800ada0:	2b41      	cmp	r3, #65	; 0x41
 800ada2:	d1c1      	bne.n	800ad28 <_scanf_float+0x70>
 800ada4:	2a01      	cmp	r2, #1
 800ada6:	d1bf      	bne.n	800ad28 <_scanf_float+0x70>
 800ada8:	2202      	movs	r2, #2
 800adaa:	e046      	b.n	800ae3a <_scanf_float+0x182>
 800adac:	2b65      	cmp	r3, #101	; 0x65
 800adae:	d07a      	beq.n	800aea6 <_scanf_float+0x1ee>
 800adb0:	d818      	bhi.n	800ade4 <_scanf_float+0x12c>
 800adb2:	2b54      	cmp	r3, #84	; 0x54
 800adb4:	d066      	beq.n	800ae84 <_scanf_float+0x1cc>
 800adb6:	d811      	bhi.n	800addc <_scanf_float+0x124>
 800adb8:	2b4e      	cmp	r3, #78	; 0x4e
 800adba:	d1b5      	bne.n	800ad28 <_scanf_float+0x70>
 800adbc:	2a00      	cmp	r2, #0
 800adbe:	d146      	bne.n	800ae4e <_scanf_float+0x196>
 800adc0:	f1b9 0f00 	cmp.w	r9, #0
 800adc4:	d145      	bne.n	800ae52 <_scanf_float+0x19a>
 800adc6:	6821      	ldr	r1, [r4, #0]
 800adc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800adcc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800add0:	d13f      	bne.n	800ae52 <_scanf_float+0x19a>
 800add2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800add6:	6021      	str	r1, [r4, #0]
 800add8:	2201      	movs	r2, #1
 800adda:	e02e      	b.n	800ae3a <_scanf_float+0x182>
 800addc:	2b59      	cmp	r3, #89	; 0x59
 800adde:	d01e      	beq.n	800ae1e <_scanf_float+0x166>
 800ade0:	2b61      	cmp	r3, #97	; 0x61
 800ade2:	e7de      	b.n	800ada2 <_scanf_float+0xea>
 800ade4:	2b6e      	cmp	r3, #110	; 0x6e
 800ade6:	d0e9      	beq.n	800adbc <_scanf_float+0x104>
 800ade8:	d815      	bhi.n	800ae16 <_scanf_float+0x15e>
 800adea:	2b66      	cmp	r3, #102	; 0x66
 800adec:	d043      	beq.n	800ae76 <_scanf_float+0x1be>
 800adee:	2b69      	cmp	r3, #105	; 0x69
 800adf0:	d19a      	bne.n	800ad28 <_scanf_float+0x70>
 800adf2:	f1bb 0f00 	cmp.w	fp, #0
 800adf6:	d138      	bne.n	800ae6a <_scanf_float+0x1b2>
 800adf8:	f1b9 0f00 	cmp.w	r9, #0
 800adfc:	d197      	bne.n	800ad2e <_scanf_float+0x76>
 800adfe:	6821      	ldr	r1, [r4, #0]
 800ae00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ae04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ae08:	d195      	bne.n	800ad36 <_scanf_float+0x7e>
 800ae0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ae0e:	6021      	str	r1, [r4, #0]
 800ae10:	f04f 0b01 	mov.w	fp, #1
 800ae14:	e011      	b.n	800ae3a <_scanf_float+0x182>
 800ae16:	2b74      	cmp	r3, #116	; 0x74
 800ae18:	d034      	beq.n	800ae84 <_scanf_float+0x1cc>
 800ae1a:	2b79      	cmp	r3, #121	; 0x79
 800ae1c:	d184      	bne.n	800ad28 <_scanf_float+0x70>
 800ae1e:	f1bb 0f07 	cmp.w	fp, #7
 800ae22:	d181      	bne.n	800ad28 <_scanf_float+0x70>
 800ae24:	f04f 0b08 	mov.w	fp, #8
 800ae28:	e007      	b.n	800ae3a <_scanf_float+0x182>
 800ae2a:	eb12 0f0b 	cmn.w	r2, fp
 800ae2e:	f47f af7b 	bne.w	800ad28 <_scanf_float+0x70>
 800ae32:	6821      	ldr	r1, [r4, #0]
 800ae34:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ae38:	6021      	str	r1, [r4, #0]
 800ae3a:	702b      	strb	r3, [r5, #0]
 800ae3c:	3501      	adds	r5, #1
 800ae3e:	e79a      	b.n	800ad76 <_scanf_float+0xbe>
 800ae40:	6821      	ldr	r1, [r4, #0]
 800ae42:	0608      	lsls	r0, r1, #24
 800ae44:	f57f af70 	bpl.w	800ad28 <_scanf_float+0x70>
 800ae48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ae4c:	e7f4      	b.n	800ae38 <_scanf_float+0x180>
 800ae4e:	2a02      	cmp	r2, #2
 800ae50:	d047      	beq.n	800aee2 <_scanf_float+0x22a>
 800ae52:	f1bb 0f01 	cmp.w	fp, #1
 800ae56:	d003      	beq.n	800ae60 <_scanf_float+0x1a8>
 800ae58:	f1bb 0f04 	cmp.w	fp, #4
 800ae5c:	f47f af64 	bne.w	800ad28 <_scanf_float+0x70>
 800ae60:	f10b 0b01 	add.w	fp, fp, #1
 800ae64:	fa5f fb8b 	uxtb.w	fp, fp
 800ae68:	e7e7      	b.n	800ae3a <_scanf_float+0x182>
 800ae6a:	f1bb 0f03 	cmp.w	fp, #3
 800ae6e:	d0f7      	beq.n	800ae60 <_scanf_float+0x1a8>
 800ae70:	f1bb 0f05 	cmp.w	fp, #5
 800ae74:	e7f2      	b.n	800ae5c <_scanf_float+0x1a4>
 800ae76:	f1bb 0f02 	cmp.w	fp, #2
 800ae7a:	f47f af55 	bne.w	800ad28 <_scanf_float+0x70>
 800ae7e:	f04f 0b03 	mov.w	fp, #3
 800ae82:	e7da      	b.n	800ae3a <_scanf_float+0x182>
 800ae84:	f1bb 0f06 	cmp.w	fp, #6
 800ae88:	f47f af4e 	bne.w	800ad28 <_scanf_float+0x70>
 800ae8c:	f04f 0b07 	mov.w	fp, #7
 800ae90:	e7d3      	b.n	800ae3a <_scanf_float+0x182>
 800ae92:	6821      	ldr	r1, [r4, #0]
 800ae94:	0588      	lsls	r0, r1, #22
 800ae96:	f57f af47 	bpl.w	800ad28 <_scanf_float+0x70>
 800ae9a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ae9e:	6021      	str	r1, [r4, #0]
 800aea0:	f8cd 9008 	str.w	r9, [sp, #8]
 800aea4:	e7c9      	b.n	800ae3a <_scanf_float+0x182>
 800aea6:	6821      	ldr	r1, [r4, #0]
 800aea8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800aeac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800aeb0:	d006      	beq.n	800aec0 <_scanf_float+0x208>
 800aeb2:	0548      	lsls	r0, r1, #21
 800aeb4:	f57f af38 	bpl.w	800ad28 <_scanf_float+0x70>
 800aeb8:	f1b9 0f00 	cmp.w	r9, #0
 800aebc:	f43f af3b 	beq.w	800ad36 <_scanf_float+0x7e>
 800aec0:	0588      	lsls	r0, r1, #22
 800aec2:	bf58      	it	pl
 800aec4:	9802      	ldrpl	r0, [sp, #8]
 800aec6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800aeca:	bf58      	it	pl
 800aecc:	eba9 0000 	subpl.w	r0, r9, r0
 800aed0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800aed4:	bf58      	it	pl
 800aed6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800aeda:	6021      	str	r1, [r4, #0]
 800aedc:	f04f 0900 	mov.w	r9, #0
 800aee0:	e7ab      	b.n	800ae3a <_scanf_float+0x182>
 800aee2:	2203      	movs	r2, #3
 800aee4:	e7a9      	b.n	800ae3a <_scanf_float+0x182>
 800aee6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aeea:	9205      	str	r2, [sp, #20]
 800aeec:	4631      	mov	r1, r6
 800aeee:	4638      	mov	r0, r7
 800aef0:	4798      	blx	r3
 800aef2:	9a05      	ldr	r2, [sp, #20]
 800aef4:	2800      	cmp	r0, #0
 800aef6:	f43f af04 	beq.w	800ad02 <_scanf_float+0x4a>
 800aefa:	e715      	b.n	800ad28 <_scanf_float+0x70>
 800aefc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800af04:	4632      	mov	r2, r6
 800af06:	4638      	mov	r0, r7
 800af08:	4798      	blx	r3
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	6123      	str	r3, [r4, #16]
 800af10:	e715      	b.n	800ad3e <_scanf_float+0x86>
 800af12:	f10b 33ff 	add.w	r3, fp, #4294967295
 800af16:	2b06      	cmp	r3, #6
 800af18:	d80a      	bhi.n	800af30 <_scanf_float+0x278>
 800af1a:	f1bb 0f02 	cmp.w	fp, #2
 800af1e:	d968      	bls.n	800aff2 <_scanf_float+0x33a>
 800af20:	f1ab 0b03 	sub.w	fp, fp, #3
 800af24:	fa5f fb8b 	uxtb.w	fp, fp
 800af28:	eba5 0b0b 	sub.w	fp, r5, fp
 800af2c:	455d      	cmp	r5, fp
 800af2e:	d14b      	bne.n	800afc8 <_scanf_float+0x310>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	05da      	lsls	r2, r3, #23
 800af34:	d51f      	bpl.n	800af76 <_scanf_float+0x2be>
 800af36:	055b      	lsls	r3, r3, #21
 800af38:	d468      	bmi.n	800b00c <_scanf_float+0x354>
 800af3a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800af3e:	6923      	ldr	r3, [r4, #16]
 800af40:	2965      	cmp	r1, #101	; 0x65
 800af42:	f103 33ff 	add.w	r3, r3, #4294967295
 800af46:	f105 3bff 	add.w	fp, r5, #4294967295
 800af4a:	6123      	str	r3, [r4, #16]
 800af4c:	d00d      	beq.n	800af6a <_scanf_float+0x2b2>
 800af4e:	2945      	cmp	r1, #69	; 0x45
 800af50:	d00b      	beq.n	800af6a <_scanf_float+0x2b2>
 800af52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af56:	4632      	mov	r2, r6
 800af58:	4638      	mov	r0, r7
 800af5a:	4798      	blx	r3
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800af62:	3b01      	subs	r3, #1
 800af64:	f1a5 0b02 	sub.w	fp, r5, #2
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af6e:	4632      	mov	r2, r6
 800af70:	4638      	mov	r0, r7
 800af72:	4798      	blx	r3
 800af74:	465d      	mov	r5, fp
 800af76:	6826      	ldr	r6, [r4, #0]
 800af78:	f016 0610 	ands.w	r6, r6, #16
 800af7c:	d17a      	bne.n	800b074 <_scanf_float+0x3bc>
 800af7e:	702e      	strb	r6, [r5, #0]
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af8a:	d142      	bne.n	800b012 <_scanf_float+0x35a>
 800af8c:	9b02      	ldr	r3, [sp, #8]
 800af8e:	eba9 0303 	sub.w	r3, r9, r3
 800af92:	425a      	negs	r2, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d149      	bne.n	800b02c <_scanf_float+0x374>
 800af98:	2200      	movs	r2, #0
 800af9a:	4641      	mov	r1, r8
 800af9c:	4638      	mov	r0, r7
 800af9e:	f000 feab 	bl	800bcf8 <_strtod_r>
 800afa2:	6825      	ldr	r5, [r4, #0]
 800afa4:	f8da 3000 	ldr.w	r3, [sl]
 800afa8:	f015 0f02 	tst.w	r5, #2
 800afac:	f103 0204 	add.w	r2, r3, #4
 800afb0:	ec59 8b10 	vmov	r8, r9, d0
 800afb4:	f8ca 2000 	str.w	r2, [sl]
 800afb8:	d043      	beq.n	800b042 <_scanf_float+0x38a>
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	e9c3 8900 	strd	r8, r9, [r3]
 800afc0:	68e3      	ldr	r3, [r4, #12]
 800afc2:	3301      	adds	r3, #1
 800afc4:	60e3      	str	r3, [r4, #12]
 800afc6:	e6be      	b.n	800ad46 <_scanf_float+0x8e>
 800afc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800afd0:	4632      	mov	r2, r6
 800afd2:	4638      	mov	r0, r7
 800afd4:	4798      	blx	r3
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	3b01      	subs	r3, #1
 800afda:	6123      	str	r3, [r4, #16]
 800afdc:	e7a6      	b.n	800af2c <_scanf_float+0x274>
 800afde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afe2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800afe6:	4632      	mov	r2, r6
 800afe8:	4638      	mov	r0, r7
 800afea:	4798      	blx	r3
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	3b01      	subs	r3, #1
 800aff0:	6123      	str	r3, [r4, #16]
 800aff2:	4545      	cmp	r5, r8
 800aff4:	d8f3      	bhi.n	800afde <_scanf_float+0x326>
 800aff6:	e6a5      	b.n	800ad44 <_scanf_float+0x8c>
 800aff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800affc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b000:	4632      	mov	r2, r6
 800b002:	4638      	mov	r0, r7
 800b004:	4798      	blx	r3
 800b006:	6923      	ldr	r3, [r4, #16]
 800b008:	3b01      	subs	r3, #1
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	4545      	cmp	r5, r8
 800b00e:	d8f3      	bhi.n	800aff8 <_scanf_float+0x340>
 800b010:	e698      	b.n	800ad44 <_scanf_float+0x8c>
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0bf      	beq.n	800af98 <_scanf_float+0x2e0>
 800b018:	9904      	ldr	r1, [sp, #16]
 800b01a:	230a      	movs	r3, #10
 800b01c:	4632      	mov	r2, r6
 800b01e:	3101      	adds	r1, #1
 800b020:	4638      	mov	r0, r7
 800b022:	f000 fef5 	bl	800be10 <_strtol_r>
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	9d04      	ldr	r5, [sp, #16]
 800b02a:	1ac2      	subs	r2, r0, r3
 800b02c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b030:	429d      	cmp	r5, r3
 800b032:	bf28      	it	cs
 800b034:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b038:	490f      	ldr	r1, [pc, #60]	; (800b078 <_scanf_float+0x3c0>)
 800b03a:	4628      	mov	r0, r5
 800b03c:	f000 f824 	bl	800b088 <siprintf>
 800b040:	e7aa      	b.n	800af98 <_scanf_float+0x2e0>
 800b042:	f015 0504 	ands.w	r5, r5, #4
 800b046:	d1b8      	bne.n	800afba <_scanf_float+0x302>
 800b048:	681f      	ldr	r7, [r3, #0]
 800b04a:	ee10 2a10 	vmov	r2, s0
 800b04e:	464b      	mov	r3, r9
 800b050:	ee10 0a10 	vmov	r0, s0
 800b054:	4649      	mov	r1, r9
 800b056:	f7f5 fd91 	bl	8000b7c <__aeabi_dcmpun>
 800b05a:	b128      	cbz	r0, 800b068 <_scanf_float+0x3b0>
 800b05c:	4628      	mov	r0, r5
 800b05e:	f000 f80d 	bl	800b07c <nanf>
 800b062:	ed87 0a00 	vstr	s0, [r7]
 800b066:	e7ab      	b.n	800afc0 <_scanf_float+0x308>
 800b068:	4640      	mov	r0, r8
 800b06a:	4649      	mov	r1, r9
 800b06c:	f7f5 fde4 	bl	8000c38 <__aeabi_d2f>
 800b070:	6038      	str	r0, [r7, #0]
 800b072:	e7a5      	b.n	800afc0 <_scanf_float+0x308>
 800b074:	2600      	movs	r6, #0
 800b076:	e666      	b.n	800ad46 <_scanf_float+0x8e>
 800b078:	0800ff32 	.word	0x0800ff32

0800b07c <nanf>:
 800b07c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b084 <nanf+0x8>
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	7fc00000 	.word	0x7fc00000

0800b088 <siprintf>:
 800b088:	b40e      	push	{r1, r2, r3}
 800b08a:	b500      	push	{lr}
 800b08c:	b09c      	sub	sp, #112	; 0x70
 800b08e:	ab1d      	add	r3, sp, #116	; 0x74
 800b090:	9002      	str	r0, [sp, #8]
 800b092:	9006      	str	r0, [sp, #24]
 800b094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b098:	4809      	ldr	r0, [pc, #36]	; (800b0c0 <siprintf+0x38>)
 800b09a:	9107      	str	r1, [sp, #28]
 800b09c:	9104      	str	r1, [sp, #16]
 800b09e:	4909      	ldr	r1, [pc, #36]	; (800b0c4 <siprintf+0x3c>)
 800b0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a4:	9105      	str	r1, [sp, #20]
 800b0a6:	6800      	ldr	r0, [r0, #0]
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	a902      	add	r1, sp, #8
 800b0ac:	f002 fda4 	bl	800dbf8 <_svfiprintf_r>
 800b0b0:	9b02      	ldr	r3, [sp, #8]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]
 800b0b6:	b01c      	add	sp, #112	; 0x70
 800b0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0bc:	b003      	add	sp, #12
 800b0be:	4770      	bx	lr
 800b0c0:	20002860 	.word	0x20002860
 800b0c4:	ffff0208 	.word	0xffff0208

0800b0c8 <strcpy>:
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ce:	f803 2b01 	strb.w	r2, [r3], #1
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	d1f9      	bne.n	800b0ca <strcpy+0x2>
 800b0d6:	4770      	bx	lr

0800b0d8 <sulp>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	4604      	mov	r4, r0
 800b0dc:	460d      	mov	r5, r1
 800b0de:	ec45 4b10 	vmov	d0, r4, r5
 800b0e2:	4616      	mov	r6, r2
 800b0e4:	f002 fb44 	bl	800d770 <__ulp>
 800b0e8:	ec51 0b10 	vmov	r0, r1, d0
 800b0ec:	b17e      	cbz	r6, 800b10e <sulp+0x36>
 800b0ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	dd09      	ble.n	800b10e <sulp+0x36>
 800b0fa:	051b      	lsls	r3, r3, #20
 800b0fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b100:	2400      	movs	r4, #0
 800b102:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b106:	4622      	mov	r2, r4
 800b108:	462b      	mov	r3, r5
 800b10a:	f7f5 fa9d 	bl	8000648 <__aeabi_dmul>
 800b10e:	bd70      	pop	{r4, r5, r6, pc}

0800b110 <_strtod_l>:
 800b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	461f      	mov	r7, r3
 800b116:	b0a1      	sub	sp, #132	; 0x84
 800b118:	2300      	movs	r3, #0
 800b11a:	4681      	mov	r9, r0
 800b11c:	4638      	mov	r0, r7
 800b11e:	460e      	mov	r6, r1
 800b120:	9217      	str	r2, [sp, #92]	; 0x5c
 800b122:	931c      	str	r3, [sp, #112]	; 0x70
 800b124:	f002 f82d 	bl	800d182 <__localeconv_l>
 800b128:	4680      	mov	r8, r0
 800b12a:	6800      	ldr	r0, [r0, #0]
 800b12c:	f7f5 f878 	bl	8000220 <strlen>
 800b130:	f04f 0a00 	mov.w	sl, #0
 800b134:	4604      	mov	r4, r0
 800b136:	f04f 0b00 	mov.w	fp, #0
 800b13a:	961b      	str	r6, [sp, #108]	; 0x6c
 800b13c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	2a0d      	cmp	r2, #13
 800b142:	d832      	bhi.n	800b1aa <_strtod_l+0x9a>
 800b144:	2a09      	cmp	r2, #9
 800b146:	d236      	bcs.n	800b1b6 <_strtod_l+0xa6>
 800b148:	2a00      	cmp	r2, #0
 800b14a:	d03e      	beq.n	800b1ca <_strtod_l+0xba>
 800b14c:	2300      	movs	r3, #0
 800b14e:	930d      	str	r3, [sp, #52]	; 0x34
 800b150:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b152:	782b      	ldrb	r3, [r5, #0]
 800b154:	2b30      	cmp	r3, #48	; 0x30
 800b156:	f040 80ac 	bne.w	800b2b2 <_strtod_l+0x1a2>
 800b15a:	786b      	ldrb	r3, [r5, #1]
 800b15c:	2b58      	cmp	r3, #88	; 0x58
 800b15e:	d001      	beq.n	800b164 <_strtod_l+0x54>
 800b160:	2b78      	cmp	r3, #120	; 0x78
 800b162:	d167      	bne.n	800b234 <_strtod_l+0x124>
 800b164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	ab1c      	add	r3, sp, #112	; 0x70
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	9702      	str	r7, [sp, #8]
 800b16e:	ab1d      	add	r3, sp, #116	; 0x74
 800b170:	4a88      	ldr	r2, [pc, #544]	; (800b394 <_strtod_l+0x284>)
 800b172:	a91b      	add	r1, sp, #108	; 0x6c
 800b174:	4648      	mov	r0, r9
 800b176:	f001 fd2a 	bl	800cbce <__gethex>
 800b17a:	f010 0407 	ands.w	r4, r0, #7
 800b17e:	4606      	mov	r6, r0
 800b180:	d005      	beq.n	800b18e <_strtod_l+0x7e>
 800b182:	2c06      	cmp	r4, #6
 800b184:	d12b      	bne.n	800b1de <_strtod_l+0xce>
 800b186:	3501      	adds	r5, #1
 800b188:	2300      	movs	r3, #0
 800b18a:	951b      	str	r5, [sp, #108]	; 0x6c
 800b18c:	930d      	str	r3, [sp, #52]	; 0x34
 800b18e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b190:	2b00      	cmp	r3, #0
 800b192:	f040 859a 	bne.w	800bcca <_strtod_l+0xbba>
 800b196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b198:	b1e3      	cbz	r3, 800b1d4 <_strtod_l+0xc4>
 800b19a:	4652      	mov	r2, sl
 800b19c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b1a0:	ec43 2b10 	vmov	d0, r2, r3
 800b1a4:	b021      	add	sp, #132	; 0x84
 800b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1aa:	2a2b      	cmp	r2, #43	; 0x2b
 800b1ac:	d015      	beq.n	800b1da <_strtod_l+0xca>
 800b1ae:	2a2d      	cmp	r2, #45	; 0x2d
 800b1b0:	d004      	beq.n	800b1bc <_strtod_l+0xac>
 800b1b2:	2a20      	cmp	r2, #32
 800b1b4:	d1ca      	bne.n	800b14c <_strtod_l+0x3c>
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1ba:	e7bf      	b.n	800b13c <_strtod_l+0x2c>
 800b1bc:	2201      	movs	r2, #1
 800b1be:	920d      	str	r2, [sp, #52]	; 0x34
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b1c4:	785b      	ldrb	r3, [r3, #1]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1c2      	bne.n	800b150 <_strtod_l+0x40>
 800b1ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1cc:	961b      	str	r6, [sp, #108]	; 0x6c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f040 8579 	bne.w	800bcc6 <_strtod_l+0xbb6>
 800b1d4:	4652      	mov	r2, sl
 800b1d6:	465b      	mov	r3, fp
 800b1d8:	e7e2      	b.n	800b1a0 <_strtod_l+0x90>
 800b1da:	2200      	movs	r2, #0
 800b1dc:	e7ef      	b.n	800b1be <_strtod_l+0xae>
 800b1de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b1e0:	b13a      	cbz	r2, 800b1f2 <_strtod_l+0xe2>
 800b1e2:	2135      	movs	r1, #53	; 0x35
 800b1e4:	a81e      	add	r0, sp, #120	; 0x78
 800b1e6:	f002 fbbb 	bl	800d960 <__copybits>
 800b1ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b1ec:	4648      	mov	r0, r9
 800b1ee:	f002 f827 	bl	800d240 <_Bfree>
 800b1f2:	3c01      	subs	r4, #1
 800b1f4:	2c04      	cmp	r4, #4
 800b1f6:	d806      	bhi.n	800b206 <_strtod_l+0xf6>
 800b1f8:	e8df f004 	tbb	[pc, r4]
 800b1fc:	1714030a 	.word	0x1714030a
 800b200:	0a          	.byte	0x0a
 800b201:	00          	.byte	0x00
 800b202:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b206:	0730      	lsls	r0, r6, #28
 800b208:	d5c1      	bpl.n	800b18e <_strtod_l+0x7e>
 800b20a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b20e:	e7be      	b.n	800b18e <_strtod_l+0x7e>
 800b210:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b214:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b216:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b21a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b21e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b222:	e7f0      	b.n	800b206 <_strtod_l+0xf6>
 800b224:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b398 <_strtod_l+0x288>
 800b228:	e7ed      	b.n	800b206 <_strtod_l+0xf6>
 800b22a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b22e:	f04f 3aff 	mov.w	sl, #4294967295
 800b232:	e7e8      	b.n	800b206 <_strtod_l+0xf6>
 800b234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	921b      	str	r2, [sp, #108]	; 0x6c
 800b23a:	785b      	ldrb	r3, [r3, #1]
 800b23c:	2b30      	cmp	r3, #48	; 0x30
 800b23e:	d0f9      	beq.n	800b234 <_strtod_l+0x124>
 800b240:	2b00      	cmp	r3, #0
 800b242:	d0a4      	beq.n	800b18e <_strtod_l+0x7e>
 800b244:	2301      	movs	r3, #1
 800b246:	2500      	movs	r5, #0
 800b248:	9306      	str	r3, [sp, #24]
 800b24a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b24c:	9308      	str	r3, [sp, #32]
 800b24e:	9507      	str	r5, [sp, #28]
 800b250:	9505      	str	r5, [sp, #20]
 800b252:	220a      	movs	r2, #10
 800b254:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b256:	7807      	ldrb	r7, [r0, #0]
 800b258:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b25c:	b2d9      	uxtb	r1, r3
 800b25e:	2909      	cmp	r1, #9
 800b260:	d929      	bls.n	800b2b6 <_strtod_l+0x1a6>
 800b262:	4622      	mov	r2, r4
 800b264:	f8d8 1000 	ldr.w	r1, [r8]
 800b268:	f002 fdce 	bl	800de08 <strncmp>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d031      	beq.n	800b2d4 <_strtod_l+0x1c4>
 800b270:	2000      	movs	r0, #0
 800b272:	9c05      	ldr	r4, [sp, #20]
 800b274:	9004      	str	r0, [sp, #16]
 800b276:	463b      	mov	r3, r7
 800b278:	4602      	mov	r2, r0
 800b27a:	2b65      	cmp	r3, #101	; 0x65
 800b27c:	d001      	beq.n	800b282 <_strtod_l+0x172>
 800b27e:	2b45      	cmp	r3, #69	; 0x45
 800b280:	d114      	bne.n	800b2ac <_strtod_l+0x19c>
 800b282:	b924      	cbnz	r4, 800b28e <_strtod_l+0x17e>
 800b284:	b910      	cbnz	r0, 800b28c <_strtod_l+0x17c>
 800b286:	9b06      	ldr	r3, [sp, #24]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d09e      	beq.n	800b1ca <_strtod_l+0xba>
 800b28c:	2400      	movs	r4, #0
 800b28e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b290:	1c73      	adds	r3, r6, #1
 800b292:	931b      	str	r3, [sp, #108]	; 0x6c
 800b294:	7873      	ldrb	r3, [r6, #1]
 800b296:	2b2b      	cmp	r3, #43	; 0x2b
 800b298:	d078      	beq.n	800b38c <_strtod_l+0x27c>
 800b29a:	2b2d      	cmp	r3, #45	; 0x2d
 800b29c:	d070      	beq.n	800b380 <_strtod_l+0x270>
 800b29e:	f04f 0c00 	mov.w	ip, #0
 800b2a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b2a6:	2f09      	cmp	r7, #9
 800b2a8:	d97c      	bls.n	800b3a4 <_strtod_l+0x294>
 800b2aa:	961b      	str	r6, [sp, #108]	; 0x6c
 800b2ac:	f04f 0e00 	mov.w	lr, #0
 800b2b0:	e09a      	b.n	800b3e8 <_strtod_l+0x2d8>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e7c7      	b.n	800b246 <_strtod_l+0x136>
 800b2b6:	9905      	ldr	r1, [sp, #20]
 800b2b8:	2908      	cmp	r1, #8
 800b2ba:	bfdd      	ittte	le
 800b2bc:	9907      	ldrle	r1, [sp, #28]
 800b2be:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2c2:	9307      	strle	r3, [sp, #28]
 800b2c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	9305      	str	r3, [sp, #20]
 800b2d0:	901b      	str	r0, [sp, #108]	; 0x6c
 800b2d2:	e7bf      	b.n	800b254 <_strtod_l+0x144>
 800b2d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2d6:	191a      	adds	r2, r3, r4
 800b2d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2da:	9a05      	ldr	r2, [sp, #20]
 800b2dc:	5d1b      	ldrb	r3, [r3, r4]
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d037      	beq.n	800b352 <_strtod_l+0x242>
 800b2e2:	9c05      	ldr	r4, [sp, #20]
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b2ea:	2909      	cmp	r1, #9
 800b2ec:	d913      	bls.n	800b316 <_strtod_l+0x206>
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	9104      	str	r1, [sp, #16]
 800b2f2:	e7c2      	b.n	800b27a <_strtod_l+0x16a>
 800b2f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2fa:	785b      	ldrb	r3, [r3, #1]
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	2b30      	cmp	r3, #48	; 0x30
 800b300:	d0f8      	beq.n	800b2f4 <_strtod_l+0x1e4>
 800b302:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b306:	2a08      	cmp	r2, #8
 800b308:	f200 84e4 	bhi.w	800bcd4 <_strtod_l+0xbc4>
 800b30c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b30e:	9208      	str	r2, [sp, #32]
 800b310:	4602      	mov	r2, r0
 800b312:	2000      	movs	r0, #0
 800b314:	4604      	mov	r4, r0
 800b316:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b31a:	f100 0101 	add.w	r1, r0, #1
 800b31e:	d012      	beq.n	800b346 <_strtod_l+0x236>
 800b320:	440a      	add	r2, r1
 800b322:	eb00 0c04 	add.w	ip, r0, r4
 800b326:	4621      	mov	r1, r4
 800b328:	270a      	movs	r7, #10
 800b32a:	458c      	cmp	ip, r1
 800b32c:	d113      	bne.n	800b356 <_strtod_l+0x246>
 800b32e:	1821      	adds	r1, r4, r0
 800b330:	2908      	cmp	r1, #8
 800b332:	f104 0401 	add.w	r4, r4, #1
 800b336:	4404      	add	r4, r0
 800b338:	dc19      	bgt.n	800b36e <_strtod_l+0x25e>
 800b33a:	9b07      	ldr	r3, [sp, #28]
 800b33c:	210a      	movs	r1, #10
 800b33e:	fb01 e303 	mla	r3, r1, r3, lr
 800b342:	9307      	str	r3, [sp, #28]
 800b344:	2100      	movs	r1, #0
 800b346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b348:	1c58      	adds	r0, r3, #1
 800b34a:	901b      	str	r0, [sp, #108]	; 0x6c
 800b34c:	785b      	ldrb	r3, [r3, #1]
 800b34e:	4608      	mov	r0, r1
 800b350:	e7c9      	b.n	800b2e6 <_strtod_l+0x1d6>
 800b352:	9805      	ldr	r0, [sp, #20]
 800b354:	e7d3      	b.n	800b2fe <_strtod_l+0x1ee>
 800b356:	2908      	cmp	r1, #8
 800b358:	f101 0101 	add.w	r1, r1, #1
 800b35c:	dc03      	bgt.n	800b366 <_strtod_l+0x256>
 800b35e:	9b07      	ldr	r3, [sp, #28]
 800b360:	437b      	muls	r3, r7
 800b362:	9307      	str	r3, [sp, #28]
 800b364:	e7e1      	b.n	800b32a <_strtod_l+0x21a>
 800b366:	2910      	cmp	r1, #16
 800b368:	bfd8      	it	le
 800b36a:	437d      	mulle	r5, r7
 800b36c:	e7dd      	b.n	800b32a <_strtod_l+0x21a>
 800b36e:	2c10      	cmp	r4, #16
 800b370:	bfdc      	itt	le
 800b372:	210a      	movle	r1, #10
 800b374:	fb01 e505 	mlale	r5, r1, r5, lr
 800b378:	e7e4      	b.n	800b344 <_strtod_l+0x234>
 800b37a:	2301      	movs	r3, #1
 800b37c:	9304      	str	r3, [sp, #16]
 800b37e:	e781      	b.n	800b284 <_strtod_l+0x174>
 800b380:	f04f 0c01 	mov.w	ip, #1
 800b384:	1cb3      	adds	r3, r6, #2
 800b386:	931b      	str	r3, [sp, #108]	; 0x6c
 800b388:	78b3      	ldrb	r3, [r6, #2]
 800b38a:	e78a      	b.n	800b2a2 <_strtod_l+0x192>
 800b38c:	f04f 0c00 	mov.w	ip, #0
 800b390:	e7f8      	b.n	800b384 <_strtod_l+0x274>
 800b392:	bf00      	nop
 800b394:	0800ff38 	.word	0x0800ff38
 800b398:	7ff00000 	.word	0x7ff00000
 800b39c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b39e:	1c5f      	adds	r7, r3, #1
 800b3a0:	971b      	str	r7, [sp, #108]	; 0x6c
 800b3a2:	785b      	ldrb	r3, [r3, #1]
 800b3a4:	2b30      	cmp	r3, #48	; 0x30
 800b3a6:	d0f9      	beq.n	800b39c <_strtod_l+0x28c>
 800b3a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b3ac:	2f08      	cmp	r7, #8
 800b3ae:	f63f af7d 	bhi.w	800b2ac <_strtod_l+0x19c>
 800b3b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3b8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3bc:	1c5f      	adds	r7, r3, #1
 800b3be:	971b      	str	r7, [sp, #108]	; 0x6c
 800b3c0:	785b      	ldrb	r3, [r3, #1]
 800b3c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b3c6:	f1b8 0f09 	cmp.w	r8, #9
 800b3ca:	d937      	bls.n	800b43c <_strtod_l+0x32c>
 800b3cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3ce:	1a7f      	subs	r7, r7, r1
 800b3d0:	2f08      	cmp	r7, #8
 800b3d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b3d6:	dc37      	bgt.n	800b448 <_strtod_l+0x338>
 800b3d8:	45be      	cmp	lr, r7
 800b3da:	bfa8      	it	ge
 800b3dc:	46be      	movge	lr, r7
 800b3de:	f1bc 0f00 	cmp.w	ip, #0
 800b3e2:	d001      	beq.n	800b3e8 <_strtod_l+0x2d8>
 800b3e4:	f1ce 0e00 	rsb	lr, lr, #0
 800b3e8:	2c00      	cmp	r4, #0
 800b3ea:	d151      	bne.n	800b490 <_strtod_l+0x380>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	f47f aece 	bne.w	800b18e <_strtod_l+0x7e>
 800b3f2:	9a06      	ldr	r2, [sp, #24]
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	f47f aeca 	bne.w	800b18e <_strtod_l+0x7e>
 800b3fa:	9a04      	ldr	r2, [sp, #16]
 800b3fc:	2a00      	cmp	r2, #0
 800b3fe:	f47f aee4 	bne.w	800b1ca <_strtod_l+0xba>
 800b402:	2b4e      	cmp	r3, #78	; 0x4e
 800b404:	d027      	beq.n	800b456 <_strtod_l+0x346>
 800b406:	dc21      	bgt.n	800b44c <_strtod_l+0x33c>
 800b408:	2b49      	cmp	r3, #73	; 0x49
 800b40a:	f47f aede 	bne.w	800b1ca <_strtod_l+0xba>
 800b40e:	49a0      	ldr	r1, [pc, #640]	; (800b690 <_strtod_l+0x580>)
 800b410:	a81b      	add	r0, sp, #108	; 0x6c
 800b412:	f001 fe0f 	bl	800d034 <__match>
 800b416:	2800      	cmp	r0, #0
 800b418:	f43f aed7 	beq.w	800b1ca <_strtod_l+0xba>
 800b41c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b41e:	499d      	ldr	r1, [pc, #628]	; (800b694 <_strtod_l+0x584>)
 800b420:	3b01      	subs	r3, #1
 800b422:	a81b      	add	r0, sp, #108	; 0x6c
 800b424:	931b      	str	r3, [sp, #108]	; 0x6c
 800b426:	f001 fe05 	bl	800d034 <__match>
 800b42a:	b910      	cbnz	r0, 800b432 <_strtod_l+0x322>
 800b42c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b42e:	3301      	adds	r3, #1
 800b430:	931b      	str	r3, [sp, #108]	; 0x6c
 800b432:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b6a8 <_strtod_l+0x598>
 800b436:	f04f 0a00 	mov.w	sl, #0
 800b43a:	e6a8      	b.n	800b18e <_strtod_l+0x7e>
 800b43c:	210a      	movs	r1, #10
 800b43e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b442:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b446:	e7b8      	b.n	800b3ba <_strtod_l+0x2aa>
 800b448:	46be      	mov	lr, r7
 800b44a:	e7c8      	b.n	800b3de <_strtod_l+0x2ce>
 800b44c:	2b69      	cmp	r3, #105	; 0x69
 800b44e:	d0de      	beq.n	800b40e <_strtod_l+0x2fe>
 800b450:	2b6e      	cmp	r3, #110	; 0x6e
 800b452:	f47f aeba 	bne.w	800b1ca <_strtod_l+0xba>
 800b456:	4990      	ldr	r1, [pc, #576]	; (800b698 <_strtod_l+0x588>)
 800b458:	a81b      	add	r0, sp, #108	; 0x6c
 800b45a:	f001 fdeb 	bl	800d034 <__match>
 800b45e:	2800      	cmp	r0, #0
 800b460:	f43f aeb3 	beq.w	800b1ca <_strtod_l+0xba>
 800b464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	2b28      	cmp	r3, #40	; 0x28
 800b46a:	d10e      	bne.n	800b48a <_strtod_l+0x37a>
 800b46c:	aa1e      	add	r2, sp, #120	; 0x78
 800b46e:	498b      	ldr	r1, [pc, #556]	; (800b69c <_strtod_l+0x58c>)
 800b470:	a81b      	add	r0, sp, #108	; 0x6c
 800b472:	f001 fdf3 	bl	800d05c <__hexnan>
 800b476:	2805      	cmp	r0, #5
 800b478:	d107      	bne.n	800b48a <_strtod_l+0x37a>
 800b47a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b47c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b480:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b484:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b488:	e681      	b.n	800b18e <_strtod_l+0x7e>
 800b48a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b6b0 <_strtod_l+0x5a0>
 800b48e:	e7d2      	b.n	800b436 <_strtod_l+0x326>
 800b490:	ebae 0302 	sub.w	r3, lr, r2
 800b494:	9306      	str	r3, [sp, #24]
 800b496:	9b05      	ldr	r3, [sp, #20]
 800b498:	9807      	ldr	r0, [sp, #28]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	bf08      	it	eq
 800b49e:	4623      	moveq	r3, r4
 800b4a0:	2c10      	cmp	r4, #16
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	46a0      	mov	r8, r4
 800b4a6:	bfa8      	it	ge
 800b4a8:	f04f 0810 	movge.w	r8, #16
 800b4ac:	f7f5 f852 	bl	8000554 <__aeabi_ui2d>
 800b4b0:	2c09      	cmp	r4, #9
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	468b      	mov	fp, r1
 800b4b6:	dc13      	bgt.n	800b4e0 <_strtod_l+0x3d0>
 800b4b8:	9b06      	ldr	r3, [sp, #24]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f43f ae67 	beq.w	800b18e <_strtod_l+0x7e>
 800b4c0:	9b06      	ldr	r3, [sp, #24]
 800b4c2:	dd7a      	ble.n	800b5ba <_strtod_l+0x4aa>
 800b4c4:	2b16      	cmp	r3, #22
 800b4c6:	dc61      	bgt.n	800b58c <_strtod_l+0x47c>
 800b4c8:	4a75      	ldr	r2, [pc, #468]	; (800b6a0 <_strtod_l+0x590>)
 800b4ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b4ce:	e9de 0100 	ldrd	r0, r1, [lr]
 800b4d2:	4652      	mov	r2, sl
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	f7f5 f8b7 	bl	8000648 <__aeabi_dmul>
 800b4da:	4682      	mov	sl, r0
 800b4dc:	468b      	mov	fp, r1
 800b4de:	e656      	b.n	800b18e <_strtod_l+0x7e>
 800b4e0:	4b6f      	ldr	r3, [pc, #444]	; (800b6a0 <_strtod_l+0x590>)
 800b4e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b4e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b4ea:	f7f5 f8ad 	bl	8000648 <__aeabi_dmul>
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	460f      	mov	r7, r1
 800b4f4:	f7f5 f82e 	bl	8000554 <__aeabi_ui2d>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f7f4 feec 	bl	80002dc <__adddf3>
 800b504:	2c0f      	cmp	r4, #15
 800b506:	4682      	mov	sl, r0
 800b508:	468b      	mov	fp, r1
 800b50a:	ddd5      	ble.n	800b4b8 <_strtod_l+0x3a8>
 800b50c:	9b06      	ldr	r3, [sp, #24]
 800b50e:	eba4 0808 	sub.w	r8, r4, r8
 800b512:	4498      	add	r8, r3
 800b514:	f1b8 0f00 	cmp.w	r8, #0
 800b518:	f340 8096 	ble.w	800b648 <_strtod_l+0x538>
 800b51c:	f018 030f 	ands.w	r3, r8, #15
 800b520:	d00a      	beq.n	800b538 <_strtod_l+0x428>
 800b522:	495f      	ldr	r1, [pc, #380]	; (800b6a0 <_strtod_l+0x590>)
 800b524:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b528:	4652      	mov	r2, sl
 800b52a:	465b      	mov	r3, fp
 800b52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b530:	f7f5 f88a 	bl	8000648 <__aeabi_dmul>
 800b534:	4682      	mov	sl, r0
 800b536:	468b      	mov	fp, r1
 800b538:	f038 080f 	bics.w	r8, r8, #15
 800b53c:	d073      	beq.n	800b626 <_strtod_l+0x516>
 800b53e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b542:	dd47      	ble.n	800b5d4 <_strtod_l+0x4c4>
 800b544:	2400      	movs	r4, #0
 800b546:	46a0      	mov	r8, r4
 800b548:	9407      	str	r4, [sp, #28]
 800b54a:	9405      	str	r4, [sp, #20]
 800b54c:	2322      	movs	r3, #34	; 0x22
 800b54e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b6a8 <_strtod_l+0x598>
 800b552:	f8c9 3000 	str.w	r3, [r9]
 800b556:	f04f 0a00 	mov.w	sl, #0
 800b55a:	9b07      	ldr	r3, [sp, #28]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f43f ae16 	beq.w	800b18e <_strtod_l+0x7e>
 800b562:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b564:	4648      	mov	r0, r9
 800b566:	f001 fe6b 	bl	800d240 <_Bfree>
 800b56a:	9905      	ldr	r1, [sp, #20]
 800b56c:	4648      	mov	r0, r9
 800b56e:	f001 fe67 	bl	800d240 <_Bfree>
 800b572:	4641      	mov	r1, r8
 800b574:	4648      	mov	r0, r9
 800b576:	f001 fe63 	bl	800d240 <_Bfree>
 800b57a:	9907      	ldr	r1, [sp, #28]
 800b57c:	4648      	mov	r0, r9
 800b57e:	f001 fe5f 	bl	800d240 <_Bfree>
 800b582:	4621      	mov	r1, r4
 800b584:	4648      	mov	r0, r9
 800b586:	f001 fe5b 	bl	800d240 <_Bfree>
 800b58a:	e600      	b.n	800b18e <_strtod_l+0x7e>
 800b58c:	9a06      	ldr	r2, [sp, #24]
 800b58e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b592:	4293      	cmp	r3, r2
 800b594:	dbba      	blt.n	800b50c <_strtod_l+0x3fc>
 800b596:	4d42      	ldr	r5, [pc, #264]	; (800b6a0 <_strtod_l+0x590>)
 800b598:	f1c4 040f 	rsb	r4, r4, #15
 800b59c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	465b      	mov	r3, fp
 800b5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a8:	f7f5 f84e 	bl	8000648 <__aeabi_dmul>
 800b5ac:	9b06      	ldr	r3, [sp, #24]
 800b5ae:	1b1c      	subs	r4, r3, r4
 800b5b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b5b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5b8:	e78d      	b.n	800b4d6 <_strtod_l+0x3c6>
 800b5ba:	f113 0f16 	cmn.w	r3, #22
 800b5be:	dba5      	blt.n	800b50c <_strtod_l+0x3fc>
 800b5c0:	4a37      	ldr	r2, [pc, #220]	; (800b6a0 <_strtod_l+0x590>)
 800b5c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b5c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	4659      	mov	r1, fp
 800b5ce:	f7f5 f965 	bl	800089c <__aeabi_ddiv>
 800b5d2:	e782      	b.n	800b4da <_strtod_l+0x3ca>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4e33      	ldr	r6, [pc, #204]	; (800b6a4 <_strtod_l+0x594>)
 800b5d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b5dc:	4650      	mov	r0, sl
 800b5de:	4659      	mov	r1, fp
 800b5e0:	461d      	mov	r5, r3
 800b5e2:	f1b8 0f01 	cmp.w	r8, #1
 800b5e6:	dc21      	bgt.n	800b62c <_strtod_l+0x51c>
 800b5e8:	b10b      	cbz	r3, 800b5ee <_strtod_l+0x4de>
 800b5ea:	4682      	mov	sl, r0
 800b5ec:	468b      	mov	fp, r1
 800b5ee:	4b2d      	ldr	r3, [pc, #180]	; (800b6a4 <_strtod_l+0x594>)
 800b5f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b5f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b5f8:	4652      	mov	r2, sl
 800b5fa:	465b      	mov	r3, fp
 800b5fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b600:	f7f5 f822 	bl	8000648 <__aeabi_dmul>
 800b604:	4b28      	ldr	r3, [pc, #160]	; (800b6a8 <_strtod_l+0x598>)
 800b606:	460a      	mov	r2, r1
 800b608:	400b      	ands	r3, r1
 800b60a:	4928      	ldr	r1, [pc, #160]	; (800b6ac <_strtod_l+0x59c>)
 800b60c:	428b      	cmp	r3, r1
 800b60e:	4682      	mov	sl, r0
 800b610:	d898      	bhi.n	800b544 <_strtod_l+0x434>
 800b612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b616:	428b      	cmp	r3, r1
 800b618:	bf86      	itte	hi
 800b61a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b6b4 <_strtod_l+0x5a4>
 800b61e:	f04f 3aff 	movhi.w	sl, #4294967295
 800b622:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b626:	2300      	movs	r3, #0
 800b628:	9304      	str	r3, [sp, #16]
 800b62a:	e077      	b.n	800b71c <_strtod_l+0x60c>
 800b62c:	f018 0f01 	tst.w	r8, #1
 800b630:	d006      	beq.n	800b640 <_strtod_l+0x530>
 800b632:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f7f5 f805 	bl	8000648 <__aeabi_dmul>
 800b63e:	2301      	movs	r3, #1
 800b640:	3501      	adds	r5, #1
 800b642:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b646:	e7cc      	b.n	800b5e2 <_strtod_l+0x4d2>
 800b648:	d0ed      	beq.n	800b626 <_strtod_l+0x516>
 800b64a:	f1c8 0800 	rsb	r8, r8, #0
 800b64e:	f018 020f 	ands.w	r2, r8, #15
 800b652:	d00a      	beq.n	800b66a <_strtod_l+0x55a>
 800b654:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <_strtod_l+0x590>)
 800b656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b65a:	4650      	mov	r0, sl
 800b65c:	4659      	mov	r1, fp
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f5 f91b 	bl	800089c <__aeabi_ddiv>
 800b666:	4682      	mov	sl, r0
 800b668:	468b      	mov	fp, r1
 800b66a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b66e:	d0da      	beq.n	800b626 <_strtod_l+0x516>
 800b670:	f1b8 0f1f 	cmp.w	r8, #31
 800b674:	dd20      	ble.n	800b6b8 <_strtod_l+0x5a8>
 800b676:	2400      	movs	r4, #0
 800b678:	46a0      	mov	r8, r4
 800b67a:	9407      	str	r4, [sp, #28]
 800b67c:	9405      	str	r4, [sp, #20]
 800b67e:	2322      	movs	r3, #34	; 0x22
 800b680:	f04f 0a00 	mov.w	sl, #0
 800b684:	f04f 0b00 	mov.w	fp, #0
 800b688:	f8c9 3000 	str.w	r3, [r9]
 800b68c:	e765      	b.n	800b55a <_strtod_l+0x44a>
 800b68e:	bf00      	nop
 800b690:	0800ff03 	.word	0x0800ff03
 800b694:	0800ff8b 	.word	0x0800ff8b
 800b698:	0800ff0b 	.word	0x0800ff0b
 800b69c:	0800ff4c 	.word	0x0800ff4c
 800b6a0:	0800ffc8 	.word	0x0800ffc8
 800b6a4:	0800ffa0 	.word	0x0800ffa0
 800b6a8:	7ff00000 	.word	0x7ff00000
 800b6ac:	7ca00000 	.word	0x7ca00000
 800b6b0:	fff80000 	.word	0xfff80000
 800b6b4:	7fefffff 	.word	0x7fefffff
 800b6b8:	f018 0310 	ands.w	r3, r8, #16
 800b6bc:	bf18      	it	ne
 800b6be:	236a      	movne	r3, #106	; 0x6a
 800b6c0:	4da0      	ldr	r5, [pc, #640]	; (800b944 <_strtod_l+0x834>)
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	4650      	mov	r0, sl
 800b6c6:	4659      	mov	r1, fp
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f1b8 0f00 	cmp.w	r8, #0
 800b6ce:	f300 810a 	bgt.w	800b8e6 <_strtod_l+0x7d6>
 800b6d2:	b10b      	cbz	r3, 800b6d8 <_strtod_l+0x5c8>
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	468b      	mov	fp, r1
 800b6d8:	9b04      	ldr	r3, [sp, #16]
 800b6da:	b1bb      	cbz	r3, 800b70c <_strtod_l+0x5fc>
 800b6dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b6e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	4659      	mov	r1, fp
 800b6e8:	dd10      	ble.n	800b70c <_strtod_l+0x5fc>
 800b6ea:	2b1f      	cmp	r3, #31
 800b6ec:	f340 8107 	ble.w	800b8fe <_strtod_l+0x7ee>
 800b6f0:	2b34      	cmp	r3, #52	; 0x34
 800b6f2:	bfde      	ittt	le
 800b6f4:	3b20      	suble	r3, #32
 800b6f6:	f04f 32ff 	movle.w	r2, #4294967295
 800b6fa:	fa02 f303 	lslle.w	r3, r2, r3
 800b6fe:	f04f 0a00 	mov.w	sl, #0
 800b702:	bfcc      	ite	gt
 800b704:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b708:	ea03 0b01 	andle.w	fp, r3, r1
 800b70c:	2200      	movs	r2, #0
 800b70e:	2300      	movs	r3, #0
 800b710:	4650      	mov	r0, sl
 800b712:	4659      	mov	r1, fp
 800b714:	f7f5 fa00 	bl	8000b18 <__aeabi_dcmpeq>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d1ac      	bne.n	800b676 <_strtod_l+0x566>
 800b71c:	9b07      	ldr	r3, [sp, #28]
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	9a05      	ldr	r2, [sp, #20]
 800b722:	9908      	ldr	r1, [sp, #32]
 800b724:	4623      	mov	r3, r4
 800b726:	4648      	mov	r0, r9
 800b728:	f001 fddc 	bl	800d2e4 <__s2b>
 800b72c:	9007      	str	r0, [sp, #28]
 800b72e:	2800      	cmp	r0, #0
 800b730:	f43f af08 	beq.w	800b544 <_strtod_l+0x434>
 800b734:	9a06      	ldr	r2, [sp, #24]
 800b736:	9b06      	ldr	r3, [sp, #24]
 800b738:	2a00      	cmp	r2, #0
 800b73a:	f1c3 0300 	rsb	r3, r3, #0
 800b73e:	bfa8      	it	ge
 800b740:	2300      	movge	r3, #0
 800b742:	930e      	str	r3, [sp, #56]	; 0x38
 800b744:	2400      	movs	r4, #0
 800b746:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b74a:	9316      	str	r3, [sp, #88]	; 0x58
 800b74c:	46a0      	mov	r8, r4
 800b74e:	9b07      	ldr	r3, [sp, #28]
 800b750:	4648      	mov	r0, r9
 800b752:	6859      	ldr	r1, [r3, #4]
 800b754:	f001 fd40 	bl	800d1d8 <_Balloc>
 800b758:	9005      	str	r0, [sp, #20]
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f43f aef6 	beq.w	800b54c <_strtod_l+0x43c>
 800b760:	9b07      	ldr	r3, [sp, #28]
 800b762:	691a      	ldr	r2, [r3, #16]
 800b764:	3202      	adds	r2, #2
 800b766:	f103 010c 	add.w	r1, r3, #12
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	300c      	adds	r0, #12
 800b76e:	f7fe fe33 	bl	800a3d8 <memcpy>
 800b772:	aa1e      	add	r2, sp, #120	; 0x78
 800b774:	a91d      	add	r1, sp, #116	; 0x74
 800b776:	ec4b ab10 	vmov	d0, sl, fp
 800b77a:	4648      	mov	r0, r9
 800b77c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b780:	f002 f86c 	bl	800d85c <__d2b>
 800b784:	901c      	str	r0, [sp, #112]	; 0x70
 800b786:	2800      	cmp	r0, #0
 800b788:	f43f aee0 	beq.w	800b54c <_strtod_l+0x43c>
 800b78c:	2101      	movs	r1, #1
 800b78e:	4648      	mov	r0, r9
 800b790:	f001 fe34 	bl	800d3fc <__i2b>
 800b794:	4680      	mov	r8, r0
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f aed8 	beq.w	800b54c <_strtod_l+0x43c>
 800b79c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b79e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	bfab      	itete	ge
 800b7a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b7a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b7a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b7aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b7ac:	bfac      	ite	ge
 800b7ae:	18f7      	addge	r7, r6, r3
 800b7b0:	1b9d      	sublt	r5, r3, r6
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	1af6      	subs	r6, r6, r3
 800b7b6:	4416      	add	r6, r2
 800b7b8:	4b63      	ldr	r3, [pc, #396]	; (800b948 <_strtod_l+0x838>)
 800b7ba:	3e01      	subs	r6, #1
 800b7bc:	429e      	cmp	r6, r3
 800b7be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b7c2:	f280 80af 	bge.w	800b924 <_strtod_l+0x814>
 800b7c6:	1b9b      	subs	r3, r3, r6
 800b7c8:	2b1f      	cmp	r3, #31
 800b7ca:	eba2 0203 	sub.w	r2, r2, r3
 800b7ce:	f04f 0101 	mov.w	r1, #1
 800b7d2:	f300 809b 	bgt.w	800b90c <_strtod_l+0x7fc>
 800b7d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7da:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7dc:	2300      	movs	r3, #0
 800b7de:	930a      	str	r3, [sp, #40]	; 0x28
 800b7e0:	18be      	adds	r6, r7, r2
 800b7e2:	9b04      	ldr	r3, [sp, #16]
 800b7e4:	42b7      	cmp	r7, r6
 800b7e6:	4415      	add	r5, r2
 800b7e8:	441d      	add	r5, r3
 800b7ea:	463b      	mov	r3, r7
 800b7ec:	bfa8      	it	ge
 800b7ee:	4633      	movge	r3, r6
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	bfa8      	it	ge
 800b7f4:	462b      	movge	r3, r5
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	bfc2      	ittt	gt
 800b7fa:	1af6      	subgt	r6, r6, r3
 800b7fc:	1aed      	subgt	r5, r5, r3
 800b7fe:	1aff      	subgt	r7, r7, r3
 800b800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b802:	b1bb      	cbz	r3, 800b834 <_strtod_l+0x724>
 800b804:	4641      	mov	r1, r8
 800b806:	461a      	mov	r2, r3
 800b808:	4648      	mov	r0, r9
 800b80a:	f001 fe97 	bl	800d53c <__pow5mult>
 800b80e:	4680      	mov	r8, r0
 800b810:	2800      	cmp	r0, #0
 800b812:	f43f ae9b 	beq.w	800b54c <_strtod_l+0x43c>
 800b816:	4601      	mov	r1, r0
 800b818:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b81a:	4648      	mov	r0, r9
 800b81c:	f001 fdf7 	bl	800d40e <__multiply>
 800b820:	900c      	str	r0, [sp, #48]	; 0x30
 800b822:	2800      	cmp	r0, #0
 800b824:	f43f ae92 	beq.w	800b54c <_strtod_l+0x43c>
 800b828:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b82a:	4648      	mov	r0, r9
 800b82c:	f001 fd08 	bl	800d240 <_Bfree>
 800b830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b832:	931c      	str	r3, [sp, #112]	; 0x70
 800b834:	2e00      	cmp	r6, #0
 800b836:	dc7a      	bgt.n	800b92e <_strtod_l+0x81e>
 800b838:	9b06      	ldr	r3, [sp, #24]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dd08      	ble.n	800b850 <_strtod_l+0x740>
 800b83e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b840:	9905      	ldr	r1, [sp, #20]
 800b842:	4648      	mov	r0, r9
 800b844:	f001 fe7a 	bl	800d53c <__pow5mult>
 800b848:	9005      	str	r0, [sp, #20]
 800b84a:	2800      	cmp	r0, #0
 800b84c:	f43f ae7e 	beq.w	800b54c <_strtod_l+0x43c>
 800b850:	2d00      	cmp	r5, #0
 800b852:	dd08      	ble.n	800b866 <_strtod_l+0x756>
 800b854:	462a      	mov	r2, r5
 800b856:	9905      	ldr	r1, [sp, #20]
 800b858:	4648      	mov	r0, r9
 800b85a:	f001 febd 	bl	800d5d8 <__lshift>
 800b85e:	9005      	str	r0, [sp, #20]
 800b860:	2800      	cmp	r0, #0
 800b862:	f43f ae73 	beq.w	800b54c <_strtod_l+0x43c>
 800b866:	2f00      	cmp	r7, #0
 800b868:	dd08      	ble.n	800b87c <_strtod_l+0x76c>
 800b86a:	4641      	mov	r1, r8
 800b86c:	463a      	mov	r2, r7
 800b86e:	4648      	mov	r0, r9
 800b870:	f001 feb2 	bl	800d5d8 <__lshift>
 800b874:	4680      	mov	r8, r0
 800b876:	2800      	cmp	r0, #0
 800b878:	f43f ae68 	beq.w	800b54c <_strtod_l+0x43c>
 800b87c:	9a05      	ldr	r2, [sp, #20]
 800b87e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b880:	4648      	mov	r0, r9
 800b882:	f001 ff17 	bl	800d6b4 <__mdiff>
 800b886:	4604      	mov	r4, r0
 800b888:	2800      	cmp	r0, #0
 800b88a:	f43f ae5f 	beq.w	800b54c <_strtod_l+0x43c>
 800b88e:	68c3      	ldr	r3, [r0, #12]
 800b890:	930c      	str	r3, [sp, #48]	; 0x30
 800b892:	2300      	movs	r3, #0
 800b894:	60c3      	str	r3, [r0, #12]
 800b896:	4641      	mov	r1, r8
 800b898:	f001 fef2 	bl	800d680 <__mcmp>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	da55      	bge.n	800b94c <_strtod_l+0x83c>
 800b8a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8a2:	b9e3      	cbnz	r3, 800b8de <_strtod_l+0x7ce>
 800b8a4:	f1ba 0f00 	cmp.w	sl, #0
 800b8a8:	d119      	bne.n	800b8de <_strtod_l+0x7ce>
 800b8aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8ae:	b9b3      	cbnz	r3, 800b8de <_strtod_l+0x7ce>
 800b8b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8b4:	0d1b      	lsrs	r3, r3, #20
 800b8b6:	051b      	lsls	r3, r3, #20
 800b8b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b8bc:	d90f      	bls.n	800b8de <_strtod_l+0x7ce>
 800b8be:	6963      	ldr	r3, [r4, #20]
 800b8c0:	b913      	cbnz	r3, 800b8c8 <_strtod_l+0x7b8>
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	dd0a      	ble.n	800b8de <_strtod_l+0x7ce>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	4648      	mov	r0, r9
 800b8ce:	f001 fe83 	bl	800d5d8 <__lshift>
 800b8d2:	4641      	mov	r1, r8
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	f001 fed3 	bl	800d680 <__mcmp>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	dc67      	bgt.n	800b9ae <_strtod_l+0x89e>
 800b8de:	9b04      	ldr	r3, [sp, #16]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d171      	bne.n	800b9c8 <_strtod_l+0x8b8>
 800b8e4:	e63d      	b.n	800b562 <_strtod_l+0x452>
 800b8e6:	f018 0f01 	tst.w	r8, #1
 800b8ea:	d004      	beq.n	800b8f6 <_strtod_l+0x7e6>
 800b8ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8f0:	f7f4 feaa 	bl	8000648 <__aeabi_dmul>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b8fa:	3508      	adds	r5, #8
 800b8fc:	e6e5      	b.n	800b6ca <_strtod_l+0x5ba>
 800b8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b902:	fa02 f303 	lsl.w	r3, r2, r3
 800b906:	ea03 0a0a 	and.w	sl, r3, sl
 800b90a:	e6ff      	b.n	800b70c <_strtod_l+0x5fc>
 800b90c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b910:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b914:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b918:	36e2      	adds	r6, #226	; 0xe2
 800b91a:	fa01 f306 	lsl.w	r3, r1, r6
 800b91e:	930a      	str	r3, [sp, #40]	; 0x28
 800b920:	910f      	str	r1, [sp, #60]	; 0x3c
 800b922:	e75d      	b.n	800b7e0 <_strtod_l+0x6d0>
 800b924:	2300      	movs	r3, #0
 800b926:	930a      	str	r3, [sp, #40]	; 0x28
 800b928:	2301      	movs	r3, #1
 800b92a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b92c:	e758      	b.n	800b7e0 <_strtod_l+0x6d0>
 800b92e:	4632      	mov	r2, r6
 800b930:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b932:	4648      	mov	r0, r9
 800b934:	f001 fe50 	bl	800d5d8 <__lshift>
 800b938:	901c      	str	r0, [sp, #112]	; 0x70
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f47f af7c 	bne.w	800b838 <_strtod_l+0x728>
 800b940:	e604      	b.n	800b54c <_strtod_l+0x43c>
 800b942:	bf00      	nop
 800b944:	0800ff60 	.word	0x0800ff60
 800b948:	fffffc02 	.word	0xfffffc02
 800b94c:	465d      	mov	r5, fp
 800b94e:	f040 8086 	bne.w	800ba5e <_strtod_l+0x94e>
 800b952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b958:	b32a      	cbz	r2, 800b9a6 <_strtod_l+0x896>
 800b95a:	4aaf      	ldr	r2, [pc, #700]	; (800bc18 <_strtod_l+0xb08>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d153      	bne.n	800ba08 <_strtod_l+0x8f8>
 800b960:	9b04      	ldr	r3, [sp, #16]
 800b962:	4650      	mov	r0, sl
 800b964:	b1d3      	cbz	r3, 800b99c <_strtod_l+0x88c>
 800b966:	4aad      	ldr	r2, [pc, #692]	; (800bc1c <_strtod_l+0xb0c>)
 800b968:	402a      	ands	r2, r5
 800b96a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b96e:	f04f 31ff 	mov.w	r1, #4294967295
 800b972:	d816      	bhi.n	800b9a2 <_strtod_l+0x892>
 800b974:	0d12      	lsrs	r2, r2, #20
 800b976:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b97a:	fa01 f303 	lsl.w	r3, r1, r3
 800b97e:	4298      	cmp	r0, r3
 800b980:	d142      	bne.n	800ba08 <_strtod_l+0x8f8>
 800b982:	4ba7      	ldr	r3, [pc, #668]	; (800bc20 <_strtod_l+0xb10>)
 800b984:	429d      	cmp	r5, r3
 800b986:	d102      	bne.n	800b98e <_strtod_l+0x87e>
 800b988:	3001      	adds	r0, #1
 800b98a:	f43f addf 	beq.w	800b54c <_strtod_l+0x43c>
 800b98e:	4ba3      	ldr	r3, [pc, #652]	; (800bc1c <_strtod_l+0xb0c>)
 800b990:	402b      	ands	r3, r5
 800b992:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b996:	f04f 0a00 	mov.w	sl, #0
 800b99a:	e7a0      	b.n	800b8de <_strtod_l+0x7ce>
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	e7ed      	b.n	800b97e <_strtod_l+0x86e>
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	e7eb      	b.n	800b97e <_strtod_l+0x86e>
 800b9a6:	bb7b      	cbnz	r3, 800ba08 <_strtod_l+0x8f8>
 800b9a8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ac:	d12c      	bne.n	800ba08 <_strtod_l+0x8f8>
 800b9ae:	9904      	ldr	r1, [sp, #16]
 800b9b0:	4a9a      	ldr	r2, [pc, #616]	; (800bc1c <_strtod_l+0xb0c>)
 800b9b2:	465b      	mov	r3, fp
 800b9b4:	b1f1      	cbz	r1, 800b9f4 <_strtod_l+0x8e4>
 800b9b6:	ea02 010b 	and.w	r1, r2, fp
 800b9ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b9be:	dc19      	bgt.n	800b9f4 <_strtod_l+0x8e4>
 800b9c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b9c4:	f77f ae5b 	ble.w	800b67e <_strtod_l+0x56e>
 800b9c8:	4a96      	ldr	r2, [pc, #600]	; (800bc24 <_strtod_l+0xb14>)
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b9d0:	4650      	mov	r0, sl
 800b9d2:	4659      	mov	r1, fp
 800b9d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b9d8:	f7f4 fe36 	bl	8000648 <__aeabi_dmul>
 800b9dc:	4682      	mov	sl, r0
 800b9de:	468b      	mov	fp, r1
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	f47f adbe 	bne.w	800b562 <_strtod_l+0x452>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f47f adbb 	bne.w	800b562 <_strtod_l+0x452>
 800b9ec:	2322      	movs	r3, #34	; 0x22
 800b9ee:	f8c9 3000 	str.w	r3, [r9]
 800b9f2:	e5b6      	b.n	800b562 <_strtod_l+0x452>
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b9fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b9fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ba02:	f04f 3aff 	mov.w	sl, #4294967295
 800ba06:	e76a      	b.n	800b8de <_strtod_l+0x7ce>
 800ba08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba0a:	b193      	cbz	r3, 800ba32 <_strtod_l+0x922>
 800ba0c:	422b      	tst	r3, r5
 800ba0e:	f43f af66 	beq.w	800b8de <_strtod_l+0x7ce>
 800ba12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba14:	9a04      	ldr	r2, [sp, #16]
 800ba16:	4650      	mov	r0, sl
 800ba18:	4659      	mov	r1, fp
 800ba1a:	b173      	cbz	r3, 800ba3a <_strtod_l+0x92a>
 800ba1c:	f7ff fb5c 	bl	800b0d8 <sulp>
 800ba20:	4602      	mov	r2, r0
 800ba22:	460b      	mov	r3, r1
 800ba24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba28:	f7f4 fc58 	bl	80002dc <__adddf3>
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	468b      	mov	fp, r1
 800ba30:	e755      	b.n	800b8de <_strtod_l+0x7ce>
 800ba32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba34:	ea13 0f0a 	tst.w	r3, sl
 800ba38:	e7e9      	b.n	800ba0e <_strtod_l+0x8fe>
 800ba3a:	f7ff fb4d 	bl	800b0d8 <sulp>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba46:	f7f4 fc47 	bl	80002d8 <__aeabi_dsub>
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	4682      	mov	sl, r0
 800ba50:	468b      	mov	fp, r1
 800ba52:	f7f5 f861 	bl	8000b18 <__aeabi_dcmpeq>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	f47f ae11 	bne.w	800b67e <_strtod_l+0x56e>
 800ba5c:	e73f      	b.n	800b8de <_strtod_l+0x7ce>
 800ba5e:	4641      	mov	r1, r8
 800ba60:	4620      	mov	r0, r4
 800ba62:	f001 ff4a 	bl	800d8fa <__ratio>
 800ba66:	ec57 6b10 	vmov	r6, r7, d0
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba70:	ee10 0a10 	vmov	r0, s0
 800ba74:	4639      	mov	r1, r7
 800ba76:	f7f5 f863 	bl	8000b40 <__aeabi_dcmple>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d077      	beq.n	800bb6e <_strtod_l+0xa5e>
 800ba7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d04a      	beq.n	800bb1a <_strtod_l+0xa0a>
 800ba84:	4b68      	ldr	r3, [pc, #416]	; (800bc28 <_strtod_l+0xb18>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba8c:	4f66      	ldr	r7, [pc, #408]	; (800bc28 <_strtod_l+0xb18>)
 800ba8e:	2600      	movs	r6, #0
 800ba90:	4b62      	ldr	r3, [pc, #392]	; (800bc1c <_strtod_l+0xb0c>)
 800ba92:	402b      	ands	r3, r5
 800ba94:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba98:	4b64      	ldr	r3, [pc, #400]	; (800bc2c <_strtod_l+0xb1c>)
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	f040 80ce 	bne.w	800bc3c <_strtod_l+0xb2c>
 800baa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800baa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800baa8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800baac:	ec4b ab10 	vmov	d0, sl, fp
 800bab0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800bab4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bab8:	f001 fe5a 	bl	800d770 <__ulp>
 800babc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bac0:	ec53 2b10 	vmov	r2, r3, d0
 800bac4:	f7f4 fdc0 	bl	8000648 <__aeabi_dmul>
 800bac8:	4652      	mov	r2, sl
 800baca:	465b      	mov	r3, fp
 800bacc:	f7f4 fc06 	bl	80002dc <__adddf3>
 800bad0:	460b      	mov	r3, r1
 800bad2:	4952      	ldr	r1, [pc, #328]	; (800bc1c <_strtod_l+0xb0c>)
 800bad4:	4a56      	ldr	r2, [pc, #344]	; (800bc30 <_strtod_l+0xb20>)
 800bad6:	4019      	ands	r1, r3
 800bad8:	4291      	cmp	r1, r2
 800bada:	4682      	mov	sl, r0
 800badc:	d95b      	bls.n	800bb96 <_strtod_l+0xa86>
 800bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d103      	bne.n	800baf0 <_strtod_l+0x9e0>
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	3301      	adds	r3, #1
 800baec:	f43f ad2e 	beq.w	800b54c <_strtod_l+0x43c>
 800baf0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800bc20 <_strtod_l+0xb10>
 800baf4:	f04f 3aff 	mov.w	sl, #4294967295
 800baf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bafa:	4648      	mov	r0, r9
 800bafc:	f001 fba0 	bl	800d240 <_Bfree>
 800bb00:	9905      	ldr	r1, [sp, #20]
 800bb02:	4648      	mov	r0, r9
 800bb04:	f001 fb9c 	bl	800d240 <_Bfree>
 800bb08:	4641      	mov	r1, r8
 800bb0a:	4648      	mov	r0, r9
 800bb0c:	f001 fb98 	bl	800d240 <_Bfree>
 800bb10:	4621      	mov	r1, r4
 800bb12:	4648      	mov	r0, r9
 800bb14:	f001 fb94 	bl	800d240 <_Bfree>
 800bb18:	e619      	b.n	800b74e <_strtod_l+0x63e>
 800bb1a:	f1ba 0f00 	cmp.w	sl, #0
 800bb1e:	d11a      	bne.n	800bb56 <_strtod_l+0xa46>
 800bb20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb24:	b9eb      	cbnz	r3, 800bb62 <_strtod_l+0xa52>
 800bb26:	2200      	movs	r2, #0
 800bb28:	4b3f      	ldr	r3, [pc, #252]	; (800bc28 <_strtod_l+0xb18>)
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	f7f4 fffd 	bl	8000b2c <__aeabi_dcmplt>
 800bb32:	b9c8      	cbnz	r0, 800bb68 <_strtod_l+0xa58>
 800bb34:	4630      	mov	r0, r6
 800bb36:	4639      	mov	r1, r7
 800bb38:	2200      	movs	r2, #0
 800bb3a:	4b3e      	ldr	r3, [pc, #248]	; (800bc34 <_strtod_l+0xb24>)
 800bb3c:	f7f4 fd84 	bl	8000648 <__aeabi_dmul>
 800bb40:	4606      	mov	r6, r0
 800bb42:	460f      	mov	r7, r1
 800bb44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bb48:	9618      	str	r6, [sp, #96]	; 0x60
 800bb4a:	9319      	str	r3, [sp, #100]	; 0x64
 800bb4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800bb50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bb54:	e79c      	b.n	800ba90 <_strtod_l+0x980>
 800bb56:	f1ba 0f01 	cmp.w	sl, #1
 800bb5a:	d102      	bne.n	800bb62 <_strtod_l+0xa52>
 800bb5c:	2d00      	cmp	r5, #0
 800bb5e:	f43f ad8e 	beq.w	800b67e <_strtod_l+0x56e>
 800bb62:	2200      	movs	r2, #0
 800bb64:	4b34      	ldr	r3, [pc, #208]	; (800bc38 <_strtod_l+0xb28>)
 800bb66:	e78f      	b.n	800ba88 <_strtod_l+0x978>
 800bb68:	2600      	movs	r6, #0
 800bb6a:	4f32      	ldr	r7, [pc, #200]	; (800bc34 <_strtod_l+0xb24>)
 800bb6c:	e7ea      	b.n	800bb44 <_strtod_l+0xa34>
 800bb6e:	4b31      	ldr	r3, [pc, #196]	; (800bc34 <_strtod_l+0xb24>)
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	2200      	movs	r2, #0
 800bb76:	f7f4 fd67 	bl	8000648 <__aeabi_dmul>
 800bb7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	b933      	cbnz	r3, 800bb90 <_strtod_l+0xa80>
 800bb82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb86:	9010      	str	r0, [sp, #64]	; 0x40
 800bb88:	9311      	str	r3, [sp, #68]	; 0x44
 800bb8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb8e:	e7df      	b.n	800bb50 <_strtod_l+0xa40>
 800bb90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bb94:	e7f9      	b.n	800bb8a <_strtod_l+0xa7a>
 800bb96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bb9a:	9b04      	ldr	r3, [sp, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1ab      	bne.n	800baf8 <_strtod_l+0x9e8>
 800bba0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bba4:	0d1b      	lsrs	r3, r3, #20
 800bba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bba8:	051b      	lsls	r3, r3, #20
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	465d      	mov	r5, fp
 800bbae:	d1a3      	bne.n	800baf8 <_strtod_l+0x9e8>
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f7f4 fff8 	bl	8000ba8 <__aeabi_d2iz>
 800bbb8:	f7f4 fcdc 	bl	8000574 <__aeabi_i2d>
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f7f4 fb88 	bl	80002d8 <__aeabi_dsub>
 800bbc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460f      	mov	r7, r1
 800bbce:	b933      	cbnz	r3, 800bbde <_strtod_l+0xace>
 800bbd0:	f1ba 0f00 	cmp.w	sl, #0
 800bbd4:	d103      	bne.n	800bbde <_strtod_l+0xace>
 800bbd6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	d06d      	beq.n	800bcba <_strtod_l+0xbaa>
 800bbde:	a30a      	add	r3, pc, #40	; (adr r3, 800bc08 <_strtod_l+0xaf8>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	f7f4 ffa0 	bl	8000b2c <__aeabi_dcmplt>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	f47f acb8 	bne.w	800b562 <_strtod_l+0x452>
 800bbf2:	a307      	add	r3, pc, #28	; (adr r3, 800bc10 <_strtod_l+0xb00>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	4639      	mov	r1, r7
 800bbfc:	f7f4 ffb4 	bl	8000b68 <__aeabi_dcmpgt>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	f43f af79 	beq.w	800baf8 <_strtod_l+0x9e8>
 800bc06:	e4ac      	b.n	800b562 <_strtod_l+0x452>
 800bc08:	94a03595 	.word	0x94a03595
 800bc0c:	3fdfffff 	.word	0x3fdfffff
 800bc10:	35afe535 	.word	0x35afe535
 800bc14:	3fe00000 	.word	0x3fe00000
 800bc18:	000fffff 	.word	0x000fffff
 800bc1c:	7ff00000 	.word	0x7ff00000
 800bc20:	7fefffff 	.word	0x7fefffff
 800bc24:	39500000 	.word	0x39500000
 800bc28:	3ff00000 	.word	0x3ff00000
 800bc2c:	7fe00000 	.word	0x7fe00000
 800bc30:	7c9fffff 	.word	0x7c9fffff
 800bc34:	3fe00000 	.word	0x3fe00000
 800bc38:	bff00000 	.word	0xbff00000
 800bc3c:	9b04      	ldr	r3, [sp, #16]
 800bc3e:	b333      	cbz	r3, 800bc8e <_strtod_l+0xb7e>
 800bc40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc46:	d822      	bhi.n	800bc8e <_strtod_l+0xb7e>
 800bc48:	a327      	add	r3, pc, #156	; (adr r3, 800bce8 <_strtod_l+0xbd8>)
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	4630      	mov	r0, r6
 800bc50:	4639      	mov	r1, r7
 800bc52:	f7f4 ff75 	bl	8000b40 <__aeabi_dcmple>
 800bc56:	b1a0      	cbz	r0, 800bc82 <_strtod_l+0xb72>
 800bc58:	4639      	mov	r1, r7
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7f4 ffcc 	bl	8000bf8 <__aeabi_d2uiz>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	bf08      	it	eq
 800bc64:	2001      	moveq	r0, #1
 800bc66:	f7f4 fc75 	bl	8000554 <__aeabi_ui2d>
 800bc6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	bb03      	cbnz	r3, 800bcb4 <_strtod_l+0xba4>
 800bc72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc76:	9012      	str	r0, [sp, #72]	; 0x48
 800bc78:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bc7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bc82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bc8a:	1a9b      	subs	r3, r3, r2
 800bc8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800bc92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800bc96:	f001 fd6b 	bl	800d770 <__ulp>
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	ec53 2b10 	vmov	r2, r3, d0
 800bca0:	4659      	mov	r1, fp
 800bca2:	f7f4 fcd1 	bl	8000648 <__aeabi_dmul>
 800bca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcaa:	f7f4 fb17 	bl	80002dc <__adddf3>
 800bcae:	4682      	mov	sl, r0
 800bcb0:	468b      	mov	fp, r1
 800bcb2:	e772      	b.n	800bb9a <_strtod_l+0xa8a>
 800bcb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800bcb8:	e7df      	b.n	800bc7a <_strtod_l+0xb6a>
 800bcba:	a30d      	add	r3, pc, #52	; (adr r3, 800bcf0 <_strtod_l+0xbe0>)
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	f7f4 ff34 	bl	8000b2c <__aeabi_dcmplt>
 800bcc4:	e79c      	b.n	800bc00 <_strtod_l+0xaf0>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	930d      	str	r3, [sp, #52]	; 0x34
 800bcca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	f7ff ba61 	b.w	800b196 <_strtod_l+0x86>
 800bcd4:	2b65      	cmp	r3, #101	; 0x65
 800bcd6:	f04f 0200 	mov.w	r2, #0
 800bcda:	f43f ab4e 	beq.w	800b37a <_strtod_l+0x26a>
 800bcde:	2101      	movs	r1, #1
 800bce0:	4614      	mov	r4, r2
 800bce2:	9104      	str	r1, [sp, #16]
 800bce4:	f7ff bacb 	b.w	800b27e <_strtod_l+0x16e>
 800bce8:	ffc00000 	.word	0xffc00000
 800bcec:	41dfffff 	.word	0x41dfffff
 800bcf0:	94a03595 	.word	0x94a03595
 800bcf4:	3fcfffff 	.word	0x3fcfffff

0800bcf8 <_strtod_r>:
 800bcf8:	4b05      	ldr	r3, [pc, #20]	; (800bd10 <_strtod_r+0x18>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	b410      	push	{r4}
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	4c04      	ldr	r4, [pc, #16]	; (800bd14 <_strtod_r+0x1c>)
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	bf08      	it	eq
 800bd06:	4623      	moveq	r3, r4
 800bd08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd0c:	f7ff ba00 	b.w	800b110 <_strtod_l>
 800bd10:	20002860 	.word	0x20002860
 800bd14:	200028c4 	.word	0x200028c4

0800bd18 <_strtol_l.isra.0>:
 800bd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	4692      	mov	sl, r2
 800bd22:	461e      	mov	r6, r3
 800bd24:	460f      	mov	r7, r1
 800bd26:	463d      	mov	r5, r7
 800bd28:	9808      	ldr	r0, [sp, #32]
 800bd2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd2e:	f001 fa25 	bl	800d17c <__locale_ctype_ptr_l>
 800bd32:	4420      	add	r0, r4
 800bd34:	7843      	ldrb	r3, [r0, #1]
 800bd36:	f013 0308 	ands.w	r3, r3, #8
 800bd3a:	d132      	bne.n	800bda2 <_strtol_l.isra.0+0x8a>
 800bd3c:	2c2d      	cmp	r4, #45	; 0x2d
 800bd3e:	d132      	bne.n	800bda6 <_strtol_l.isra.0+0x8e>
 800bd40:	787c      	ldrb	r4, [r7, #1]
 800bd42:	1cbd      	adds	r5, r7, #2
 800bd44:	2201      	movs	r2, #1
 800bd46:	2e00      	cmp	r6, #0
 800bd48:	d05d      	beq.n	800be06 <_strtol_l.isra.0+0xee>
 800bd4a:	2e10      	cmp	r6, #16
 800bd4c:	d109      	bne.n	800bd62 <_strtol_l.isra.0+0x4a>
 800bd4e:	2c30      	cmp	r4, #48	; 0x30
 800bd50:	d107      	bne.n	800bd62 <_strtol_l.isra.0+0x4a>
 800bd52:	782b      	ldrb	r3, [r5, #0]
 800bd54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd58:	2b58      	cmp	r3, #88	; 0x58
 800bd5a:	d14f      	bne.n	800bdfc <_strtol_l.isra.0+0xe4>
 800bd5c:	786c      	ldrb	r4, [r5, #1]
 800bd5e:	2610      	movs	r6, #16
 800bd60:	3502      	adds	r5, #2
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	bf14      	ite	ne
 800bd66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bd6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bd6e:	2700      	movs	r7, #0
 800bd70:	fbb1 fcf6 	udiv	ip, r1, r6
 800bd74:	4638      	mov	r0, r7
 800bd76:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bd7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bd7e:	2b09      	cmp	r3, #9
 800bd80:	d817      	bhi.n	800bdb2 <_strtol_l.isra.0+0x9a>
 800bd82:	461c      	mov	r4, r3
 800bd84:	42a6      	cmp	r6, r4
 800bd86:	dd23      	ble.n	800bdd0 <_strtol_l.isra.0+0xb8>
 800bd88:	1c7b      	adds	r3, r7, #1
 800bd8a:	d007      	beq.n	800bd9c <_strtol_l.isra.0+0x84>
 800bd8c:	4584      	cmp	ip, r0
 800bd8e:	d31c      	bcc.n	800bdca <_strtol_l.isra.0+0xb2>
 800bd90:	d101      	bne.n	800bd96 <_strtol_l.isra.0+0x7e>
 800bd92:	45a6      	cmp	lr, r4
 800bd94:	db19      	blt.n	800bdca <_strtol_l.isra.0+0xb2>
 800bd96:	fb00 4006 	mla	r0, r0, r6, r4
 800bd9a:	2701      	movs	r7, #1
 800bd9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bda0:	e7eb      	b.n	800bd7a <_strtol_l.isra.0+0x62>
 800bda2:	462f      	mov	r7, r5
 800bda4:	e7bf      	b.n	800bd26 <_strtol_l.isra.0+0xe>
 800bda6:	2c2b      	cmp	r4, #43	; 0x2b
 800bda8:	bf04      	itt	eq
 800bdaa:	1cbd      	addeq	r5, r7, #2
 800bdac:	787c      	ldrbeq	r4, [r7, #1]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	e7c9      	b.n	800bd46 <_strtol_l.isra.0+0x2e>
 800bdb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bdb6:	2b19      	cmp	r3, #25
 800bdb8:	d801      	bhi.n	800bdbe <_strtol_l.isra.0+0xa6>
 800bdba:	3c37      	subs	r4, #55	; 0x37
 800bdbc:	e7e2      	b.n	800bd84 <_strtol_l.isra.0+0x6c>
 800bdbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bdc2:	2b19      	cmp	r3, #25
 800bdc4:	d804      	bhi.n	800bdd0 <_strtol_l.isra.0+0xb8>
 800bdc6:	3c57      	subs	r4, #87	; 0x57
 800bdc8:	e7dc      	b.n	800bd84 <_strtol_l.isra.0+0x6c>
 800bdca:	f04f 37ff 	mov.w	r7, #4294967295
 800bdce:	e7e5      	b.n	800bd9c <_strtol_l.isra.0+0x84>
 800bdd0:	1c7b      	adds	r3, r7, #1
 800bdd2:	d108      	bne.n	800bde6 <_strtol_l.isra.0+0xce>
 800bdd4:	2322      	movs	r3, #34	; 0x22
 800bdd6:	f8c8 3000 	str.w	r3, [r8]
 800bdda:	4608      	mov	r0, r1
 800bddc:	f1ba 0f00 	cmp.w	sl, #0
 800bde0:	d107      	bne.n	800bdf2 <_strtol_l.isra.0+0xda>
 800bde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde6:	b102      	cbz	r2, 800bdea <_strtol_l.isra.0+0xd2>
 800bde8:	4240      	negs	r0, r0
 800bdea:	f1ba 0f00 	cmp.w	sl, #0
 800bdee:	d0f8      	beq.n	800bde2 <_strtol_l.isra.0+0xca>
 800bdf0:	b10f      	cbz	r7, 800bdf6 <_strtol_l.isra.0+0xde>
 800bdf2:	f105 39ff 	add.w	r9, r5, #4294967295
 800bdf6:	f8ca 9000 	str.w	r9, [sl]
 800bdfa:	e7f2      	b.n	800bde2 <_strtol_l.isra.0+0xca>
 800bdfc:	2430      	movs	r4, #48	; 0x30
 800bdfe:	2e00      	cmp	r6, #0
 800be00:	d1af      	bne.n	800bd62 <_strtol_l.isra.0+0x4a>
 800be02:	2608      	movs	r6, #8
 800be04:	e7ad      	b.n	800bd62 <_strtol_l.isra.0+0x4a>
 800be06:	2c30      	cmp	r4, #48	; 0x30
 800be08:	d0a3      	beq.n	800bd52 <_strtol_l.isra.0+0x3a>
 800be0a:	260a      	movs	r6, #10
 800be0c:	e7a9      	b.n	800bd62 <_strtol_l.isra.0+0x4a>
	...

0800be10 <_strtol_r>:
 800be10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be12:	4c06      	ldr	r4, [pc, #24]	; (800be2c <_strtol_r+0x1c>)
 800be14:	4d06      	ldr	r5, [pc, #24]	; (800be30 <_strtol_r+0x20>)
 800be16:	6824      	ldr	r4, [r4, #0]
 800be18:	6a24      	ldr	r4, [r4, #32]
 800be1a:	2c00      	cmp	r4, #0
 800be1c:	bf08      	it	eq
 800be1e:	462c      	moveq	r4, r5
 800be20:	9400      	str	r4, [sp, #0]
 800be22:	f7ff ff79 	bl	800bd18 <_strtol_l.isra.0>
 800be26:	b003      	add	sp, #12
 800be28:	bd30      	pop	{r4, r5, pc}
 800be2a:	bf00      	nop
 800be2c:	20002860 	.word	0x20002860
 800be30:	200028c4 	.word	0x200028c4

0800be34 <_vsniprintf_r>:
 800be34:	b530      	push	{r4, r5, lr}
 800be36:	1e14      	subs	r4, r2, #0
 800be38:	4605      	mov	r5, r0
 800be3a:	b09b      	sub	sp, #108	; 0x6c
 800be3c:	4618      	mov	r0, r3
 800be3e:	da05      	bge.n	800be4c <_vsniprintf_r+0x18>
 800be40:	238b      	movs	r3, #139	; 0x8b
 800be42:	602b      	str	r3, [r5, #0]
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	b01b      	add	sp, #108	; 0x6c
 800be4a:	bd30      	pop	{r4, r5, pc}
 800be4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be50:	f8ad 300c 	strh.w	r3, [sp, #12]
 800be54:	bf14      	ite	ne
 800be56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800be5a:	4623      	moveq	r3, r4
 800be5c:	9302      	str	r3, [sp, #8]
 800be5e:	9305      	str	r3, [sp, #20]
 800be60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be64:	9100      	str	r1, [sp, #0]
 800be66:	9104      	str	r1, [sp, #16]
 800be68:	f8ad 300e 	strh.w	r3, [sp, #14]
 800be6c:	4602      	mov	r2, r0
 800be6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800be70:	4669      	mov	r1, sp
 800be72:	4628      	mov	r0, r5
 800be74:	f001 fec0 	bl	800dbf8 <_svfiprintf_r>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	bfbc      	itt	lt
 800be7c:	238b      	movlt	r3, #139	; 0x8b
 800be7e:	602b      	strlt	r3, [r5, #0]
 800be80:	2c00      	cmp	r4, #0
 800be82:	d0e1      	beq.n	800be48 <_vsniprintf_r+0x14>
 800be84:	9b00      	ldr	r3, [sp, #0]
 800be86:	2200      	movs	r2, #0
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	e7dd      	b.n	800be48 <_vsniprintf_r+0x14>

0800be8c <vsniprintf>:
 800be8c:	b507      	push	{r0, r1, r2, lr}
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	4613      	mov	r3, r2
 800be92:	460a      	mov	r2, r1
 800be94:	4601      	mov	r1, r0
 800be96:	4803      	ldr	r0, [pc, #12]	; (800bea4 <vsniprintf+0x18>)
 800be98:	6800      	ldr	r0, [r0, #0]
 800be9a:	f7ff ffcb 	bl	800be34 <_vsniprintf_r>
 800be9e:	b003      	add	sp, #12
 800bea0:	f85d fb04 	ldr.w	pc, [sp], #4
 800bea4:	20002860 	.word	0x20002860

0800bea8 <quorem>:
 800bea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	6903      	ldr	r3, [r0, #16]
 800beae:	690c      	ldr	r4, [r1, #16]
 800beb0:	42a3      	cmp	r3, r4
 800beb2:	4680      	mov	r8, r0
 800beb4:	f2c0 8082 	blt.w	800bfbc <quorem+0x114>
 800beb8:	3c01      	subs	r4, #1
 800beba:	f101 0714 	add.w	r7, r1, #20
 800bebe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bec2:	f100 0614 	add.w	r6, r0, #20
 800bec6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800beca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bece:	eb06 030c 	add.w	r3, r6, ip
 800bed2:	3501      	adds	r5, #1
 800bed4:	eb07 090c 	add.w	r9, r7, ip
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	fbb0 f5f5 	udiv	r5, r0, r5
 800bede:	b395      	cbz	r5, 800bf46 <quorem+0x9e>
 800bee0:	f04f 0a00 	mov.w	sl, #0
 800bee4:	4638      	mov	r0, r7
 800bee6:	46b6      	mov	lr, r6
 800bee8:	46d3      	mov	fp, sl
 800beea:	f850 2b04 	ldr.w	r2, [r0], #4
 800beee:	b293      	uxth	r3, r2
 800bef0:	fb05 a303 	mla	r3, r5, r3, sl
 800bef4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bef8:	b29b      	uxth	r3, r3
 800befa:	ebab 0303 	sub.w	r3, fp, r3
 800befe:	0c12      	lsrs	r2, r2, #16
 800bf00:	f8de b000 	ldr.w	fp, [lr]
 800bf04:	fb05 a202 	mla	r2, r5, r2, sl
 800bf08:	fa13 f38b 	uxtah	r3, r3, fp
 800bf0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bf10:	fa1f fb82 	uxth.w	fp, r2
 800bf14:	f8de 2000 	ldr.w	r2, [lr]
 800bf18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bf1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf26:	4581      	cmp	r9, r0
 800bf28:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bf2c:	f84e 3b04 	str.w	r3, [lr], #4
 800bf30:	d2db      	bcs.n	800beea <quorem+0x42>
 800bf32:	f856 300c 	ldr.w	r3, [r6, ip]
 800bf36:	b933      	cbnz	r3, 800bf46 <quorem+0x9e>
 800bf38:	9b01      	ldr	r3, [sp, #4]
 800bf3a:	3b04      	subs	r3, #4
 800bf3c:	429e      	cmp	r6, r3
 800bf3e:	461a      	mov	r2, r3
 800bf40:	d330      	bcc.n	800bfa4 <quorem+0xfc>
 800bf42:	f8c8 4010 	str.w	r4, [r8, #16]
 800bf46:	4640      	mov	r0, r8
 800bf48:	f001 fb9a 	bl	800d680 <__mcmp>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	db25      	blt.n	800bf9c <quorem+0xf4>
 800bf50:	3501      	adds	r5, #1
 800bf52:	4630      	mov	r0, r6
 800bf54:	f04f 0c00 	mov.w	ip, #0
 800bf58:	f857 2b04 	ldr.w	r2, [r7], #4
 800bf5c:	f8d0 e000 	ldr.w	lr, [r0]
 800bf60:	b293      	uxth	r3, r2
 800bf62:	ebac 0303 	sub.w	r3, ip, r3
 800bf66:	0c12      	lsrs	r2, r2, #16
 800bf68:	fa13 f38e 	uxtah	r3, r3, lr
 800bf6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf7a:	45b9      	cmp	r9, r7
 800bf7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf80:	f840 3b04 	str.w	r3, [r0], #4
 800bf84:	d2e8      	bcs.n	800bf58 <quorem+0xb0>
 800bf86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bf8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bf8e:	b92a      	cbnz	r2, 800bf9c <quorem+0xf4>
 800bf90:	3b04      	subs	r3, #4
 800bf92:	429e      	cmp	r6, r3
 800bf94:	461a      	mov	r2, r3
 800bf96:	d30b      	bcc.n	800bfb0 <quorem+0x108>
 800bf98:	f8c8 4010 	str.w	r4, [r8, #16]
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	b003      	add	sp, #12
 800bfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa4:	6812      	ldr	r2, [r2, #0]
 800bfa6:	3b04      	subs	r3, #4
 800bfa8:	2a00      	cmp	r2, #0
 800bfaa:	d1ca      	bne.n	800bf42 <quorem+0x9a>
 800bfac:	3c01      	subs	r4, #1
 800bfae:	e7c5      	b.n	800bf3c <quorem+0x94>
 800bfb0:	6812      	ldr	r2, [r2, #0]
 800bfb2:	3b04      	subs	r3, #4
 800bfb4:	2a00      	cmp	r2, #0
 800bfb6:	d1ef      	bne.n	800bf98 <quorem+0xf0>
 800bfb8:	3c01      	subs	r4, #1
 800bfba:	e7ea      	b.n	800bf92 <quorem+0xea>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e7ee      	b.n	800bf9e <quorem+0xf6>

0800bfc0 <_dtoa_r>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	ec57 6b10 	vmov	r6, r7, d0
 800bfc8:	b097      	sub	sp, #92	; 0x5c
 800bfca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bfcc:	9106      	str	r1, [sp, #24]
 800bfce:	4604      	mov	r4, r0
 800bfd0:	920b      	str	r2, [sp, #44]	; 0x2c
 800bfd2:	9312      	str	r3, [sp, #72]	; 0x48
 800bfd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bfd8:	e9cd 6700 	strd	r6, r7, [sp]
 800bfdc:	b93d      	cbnz	r5, 800bfee <_dtoa_r+0x2e>
 800bfde:	2010      	movs	r0, #16
 800bfe0:	f001 f8e0 	bl	800d1a4 <malloc>
 800bfe4:	6260      	str	r0, [r4, #36]	; 0x24
 800bfe6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bfea:	6005      	str	r5, [r0, #0]
 800bfec:	60c5      	str	r5, [r0, #12]
 800bfee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff0:	6819      	ldr	r1, [r3, #0]
 800bff2:	b151      	cbz	r1, 800c00a <_dtoa_r+0x4a>
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	604a      	str	r2, [r1, #4]
 800bff8:	2301      	movs	r3, #1
 800bffa:	4093      	lsls	r3, r2
 800bffc:	608b      	str	r3, [r1, #8]
 800bffe:	4620      	mov	r0, r4
 800c000:	f001 f91e 	bl	800d240 <_Bfree>
 800c004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c006:	2200      	movs	r2, #0
 800c008:	601a      	str	r2, [r3, #0]
 800c00a:	1e3b      	subs	r3, r7, #0
 800c00c:	bfbb      	ittet	lt
 800c00e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c012:	9301      	strlt	r3, [sp, #4]
 800c014:	2300      	movge	r3, #0
 800c016:	2201      	movlt	r2, #1
 800c018:	bfac      	ite	ge
 800c01a:	f8c8 3000 	strge.w	r3, [r8]
 800c01e:	f8c8 2000 	strlt.w	r2, [r8]
 800c022:	4baf      	ldr	r3, [pc, #700]	; (800c2e0 <_dtoa_r+0x320>)
 800c024:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c028:	ea33 0308 	bics.w	r3, r3, r8
 800c02c:	d114      	bne.n	800c058 <_dtoa_r+0x98>
 800c02e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c030:	f242 730f 	movw	r3, #9999	; 0x270f
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	b923      	cbnz	r3, 800c044 <_dtoa_r+0x84>
 800c03a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c03e:	2800      	cmp	r0, #0
 800c040:	f000 8542 	beq.w	800cac8 <_dtoa_r+0xb08>
 800c044:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c046:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c2f4 <_dtoa_r+0x334>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 8544 	beq.w	800cad8 <_dtoa_r+0xb18>
 800c050:	f10b 0303 	add.w	r3, fp, #3
 800c054:	f000 bd3e 	b.w	800cad4 <_dtoa_r+0xb14>
 800c058:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c05c:	2200      	movs	r2, #0
 800c05e:	2300      	movs	r3, #0
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 fd58 	bl	8000b18 <__aeabi_dcmpeq>
 800c068:	4681      	mov	r9, r0
 800c06a:	b168      	cbz	r0, 800c088 <_dtoa_r+0xc8>
 800c06c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c06e:	2301      	movs	r3, #1
 800c070:	6013      	str	r3, [r2, #0]
 800c072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 8524 	beq.w	800cac2 <_dtoa_r+0xb02>
 800c07a:	4b9a      	ldr	r3, [pc, #616]	; (800c2e4 <_dtoa_r+0x324>)
 800c07c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c07e:	f103 3bff 	add.w	fp, r3, #4294967295
 800c082:	6013      	str	r3, [r2, #0]
 800c084:	f000 bd28 	b.w	800cad8 <_dtoa_r+0xb18>
 800c088:	aa14      	add	r2, sp, #80	; 0x50
 800c08a:	a915      	add	r1, sp, #84	; 0x54
 800c08c:	ec47 6b10 	vmov	d0, r6, r7
 800c090:	4620      	mov	r0, r4
 800c092:	f001 fbe3 	bl	800d85c <__d2b>
 800c096:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c09a:	9004      	str	r0, [sp, #16]
 800c09c:	2d00      	cmp	r5, #0
 800c09e:	d07c      	beq.n	800c19a <_dtoa_r+0x1da>
 800c0a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c0a8:	46b2      	mov	sl, r6
 800c0aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c0ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c0b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	4b8b      	ldr	r3, [pc, #556]	; (800c2e8 <_dtoa_r+0x328>)
 800c0ba:	4650      	mov	r0, sl
 800c0bc:	4659      	mov	r1, fp
 800c0be:	f7f4 f90b 	bl	80002d8 <__aeabi_dsub>
 800c0c2:	a381      	add	r3, pc, #516	; (adr r3, 800c2c8 <_dtoa_r+0x308>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	f7f4 fabe 	bl	8000648 <__aeabi_dmul>
 800c0cc:	a380      	add	r3, pc, #512	; (adr r3, 800c2d0 <_dtoa_r+0x310>)
 800c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d2:	f7f4 f903 	bl	80002dc <__adddf3>
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	4628      	mov	r0, r5
 800c0da:	460f      	mov	r7, r1
 800c0dc:	f7f4 fa4a 	bl	8000574 <__aeabi_i2d>
 800c0e0:	a37d      	add	r3, pc, #500	; (adr r3, 800c2d8 <_dtoa_r+0x318>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	f7f4 faaf 	bl	8000648 <__aeabi_dmul>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 f8f3 	bl	80002dc <__adddf3>
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	f7f4 fd55 	bl	8000ba8 <__aeabi_d2iz>
 800c0fe:	2200      	movs	r2, #0
 800c100:	4682      	mov	sl, r0
 800c102:	2300      	movs	r3, #0
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800c10c:	b148      	cbz	r0, 800c122 <_dtoa_r+0x162>
 800c10e:	4650      	mov	r0, sl
 800c110:	f7f4 fa30 	bl	8000574 <__aeabi_i2d>
 800c114:	4632      	mov	r2, r6
 800c116:	463b      	mov	r3, r7
 800c118:	f7f4 fcfe 	bl	8000b18 <__aeabi_dcmpeq>
 800c11c:	b908      	cbnz	r0, 800c122 <_dtoa_r+0x162>
 800c11e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c122:	f1ba 0f16 	cmp.w	sl, #22
 800c126:	d859      	bhi.n	800c1dc <_dtoa_r+0x21c>
 800c128:	4970      	ldr	r1, [pc, #448]	; (800c2ec <_dtoa_r+0x32c>)
 800c12a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c12e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c132:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c136:	f7f4 fd17 	bl	8000b68 <__aeabi_dcmpgt>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d050      	beq.n	800c1e0 <_dtoa_r+0x220>
 800c13e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c142:	2300      	movs	r3, #0
 800c144:	930f      	str	r3, [sp, #60]	; 0x3c
 800c146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c148:	1b5d      	subs	r5, r3, r5
 800c14a:	f1b5 0801 	subs.w	r8, r5, #1
 800c14e:	bf49      	itett	mi
 800c150:	f1c5 0301 	rsbmi	r3, r5, #1
 800c154:	2300      	movpl	r3, #0
 800c156:	9305      	strmi	r3, [sp, #20]
 800c158:	f04f 0800 	movmi.w	r8, #0
 800c15c:	bf58      	it	pl
 800c15e:	9305      	strpl	r3, [sp, #20]
 800c160:	f1ba 0f00 	cmp.w	sl, #0
 800c164:	db3e      	blt.n	800c1e4 <_dtoa_r+0x224>
 800c166:	2300      	movs	r3, #0
 800c168:	44d0      	add	r8, sl
 800c16a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c16e:	9307      	str	r3, [sp, #28]
 800c170:	9b06      	ldr	r3, [sp, #24]
 800c172:	2b09      	cmp	r3, #9
 800c174:	f200 8090 	bhi.w	800c298 <_dtoa_r+0x2d8>
 800c178:	2b05      	cmp	r3, #5
 800c17a:	bfc4      	itt	gt
 800c17c:	3b04      	subgt	r3, #4
 800c17e:	9306      	strgt	r3, [sp, #24]
 800c180:	9b06      	ldr	r3, [sp, #24]
 800c182:	f1a3 0302 	sub.w	r3, r3, #2
 800c186:	bfcc      	ite	gt
 800c188:	2500      	movgt	r5, #0
 800c18a:	2501      	movle	r5, #1
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	f200 808f 	bhi.w	800c2b0 <_dtoa_r+0x2f0>
 800c192:	e8df f003 	tbb	[pc, r3]
 800c196:	7f7d      	.short	0x7f7d
 800c198:	7131      	.short	0x7131
 800c19a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c19e:	441d      	add	r5, r3
 800c1a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c1a4:	2820      	cmp	r0, #32
 800c1a6:	dd13      	ble.n	800c1d0 <_dtoa_r+0x210>
 800c1a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c1ac:	9b00      	ldr	r3, [sp, #0]
 800c1ae:	fa08 f800 	lsl.w	r8, r8, r0
 800c1b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c1b6:	fa23 f000 	lsr.w	r0, r3, r0
 800c1ba:	ea48 0000 	orr.w	r0, r8, r0
 800c1be:	f7f4 f9c9 	bl	8000554 <__aeabi_ui2d>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	4682      	mov	sl, r0
 800c1c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c1ca:	3d01      	subs	r5, #1
 800c1cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800c1ce:	e772      	b.n	800c0b6 <_dtoa_r+0xf6>
 800c1d0:	9b00      	ldr	r3, [sp, #0]
 800c1d2:	f1c0 0020 	rsb	r0, r0, #32
 800c1d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c1da:	e7f0      	b.n	800c1be <_dtoa_r+0x1fe>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e7b1      	b.n	800c144 <_dtoa_r+0x184>
 800c1e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800c1e2:	e7b0      	b.n	800c146 <_dtoa_r+0x186>
 800c1e4:	9b05      	ldr	r3, [sp, #20]
 800c1e6:	eba3 030a 	sub.w	r3, r3, sl
 800c1ea:	9305      	str	r3, [sp, #20]
 800c1ec:	f1ca 0300 	rsb	r3, sl, #0
 800c1f0:	9307      	str	r3, [sp, #28]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	930e      	str	r3, [sp, #56]	; 0x38
 800c1f6:	e7bb      	b.n	800c170 <_dtoa_r+0x1b0>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c1fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dd59      	ble.n	800c2b6 <_dtoa_r+0x2f6>
 800c202:	9302      	str	r3, [sp, #8]
 800c204:	4699      	mov	r9, r3
 800c206:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c208:	2200      	movs	r2, #0
 800c20a:	6072      	str	r2, [r6, #4]
 800c20c:	2204      	movs	r2, #4
 800c20e:	f102 0014 	add.w	r0, r2, #20
 800c212:	4298      	cmp	r0, r3
 800c214:	6871      	ldr	r1, [r6, #4]
 800c216:	d953      	bls.n	800c2c0 <_dtoa_r+0x300>
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 ffdd 	bl	800d1d8 <_Balloc>
 800c21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c220:	6030      	str	r0, [r6, #0]
 800c222:	f1b9 0f0e 	cmp.w	r9, #14
 800c226:	f8d3 b000 	ldr.w	fp, [r3]
 800c22a:	f200 80e6 	bhi.w	800c3fa <_dtoa_r+0x43a>
 800c22e:	2d00      	cmp	r5, #0
 800c230:	f000 80e3 	beq.w	800c3fa <_dtoa_r+0x43a>
 800c234:	ed9d 7b00 	vldr	d7, [sp]
 800c238:	f1ba 0f00 	cmp.w	sl, #0
 800c23c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c240:	dd74      	ble.n	800c32c <_dtoa_r+0x36c>
 800c242:	4a2a      	ldr	r2, [pc, #168]	; (800c2ec <_dtoa_r+0x32c>)
 800c244:	f00a 030f 	and.w	r3, sl, #15
 800c248:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c24c:	ed93 7b00 	vldr	d7, [r3]
 800c250:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c254:	06f0      	lsls	r0, r6, #27
 800c256:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c25a:	d565      	bpl.n	800c328 <_dtoa_r+0x368>
 800c25c:	4b24      	ldr	r3, [pc, #144]	; (800c2f0 <_dtoa_r+0x330>)
 800c25e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c262:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c266:	f7f4 fb19 	bl	800089c <__aeabi_ddiv>
 800c26a:	e9cd 0100 	strd	r0, r1, [sp]
 800c26e:	f006 060f 	and.w	r6, r6, #15
 800c272:	2503      	movs	r5, #3
 800c274:	4f1e      	ldr	r7, [pc, #120]	; (800c2f0 <_dtoa_r+0x330>)
 800c276:	e04c      	b.n	800c312 <_dtoa_r+0x352>
 800c278:	2301      	movs	r3, #1
 800c27a:	930a      	str	r3, [sp, #40]	; 0x28
 800c27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c27e:	4453      	add	r3, sl
 800c280:	f103 0901 	add.w	r9, r3, #1
 800c284:	9302      	str	r3, [sp, #8]
 800c286:	464b      	mov	r3, r9
 800c288:	2b01      	cmp	r3, #1
 800c28a:	bfb8      	it	lt
 800c28c:	2301      	movlt	r3, #1
 800c28e:	e7ba      	b.n	800c206 <_dtoa_r+0x246>
 800c290:	2300      	movs	r3, #0
 800c292:	e7b2      	b.n	800c1fa <_dtoa_r+0x23a>
 800c294:	2300      	movs	r3, #0
 800c296:	e7f0      	b.n	800c27a <_dtoa_r+0x2ba>
 800c298:	2501      	movs	r5, #1
 800c29a:	2300      	movs	r3, #0
 800c29c:	9306      	str	r3, [sp, #24]
 800c29e:	950a      	str	r5, [sp, #40]	; 0x28
 800c2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a4:	9302      	str	r3, [sp, #8]
 800c2a6:	4699      	mov	r9, r3
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2312      	movs	r3, #18
 800c2ac:	920b      	str	r2, [sp, #44]	; 0x2c
 800c2ae:	e7aa      	b.n	800c206 <_dtoa_r+0x246>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c2b4:	e7f4      	b.n	800c2a0 <_dtoa_r+0x2e0>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	9302      	str	r3, [sp, #8]
 800c2ba:	4699      	mov	r9, r3
 800c2bc:	461a      	mov	r2, r3
 800c2be:	e7f5      	b.n	800c2ac <_dtoa_r+0x2ec>
 800c2c0:	3101      	adds	r1, #1
 800c2c2:	6071      	str	r1, [r6, #4]
 800c2c4:	0052      	lsls	r2, r2, #1
 800c2c6:	e7a2      	b.n	800c20e <_dtoa_r+0x24e>
 800c2c8:	636f4361 	.word	0x636f4361
 800c2cc:	3fd287a7 	.word	0x3fd287a7
 800c2d0:	8b60c8b3 	.word	0x8b60c8b3
 800c2d4:	3fc68a28 	.word	0x3fc68a28
 800c2d8:	509f79fb 	.word	0x509f79fb
 800c2dc:	3fd34413 	.word	0x3fd34413
 800c2e0:	7ff00000 	.word	0x7ff00000
 800c2e4:	0800ff0f 	.word	0x0800ff0f
 800c2e8:	3ff80000 	.word	0x3ff80000
 800c2ec:	0800ffc8 	.word	0x0800ffc8
 800c2f0:	0800ffa0 	.word	0x0800ffa0
 800c2f4:	0800ff91 	.word	0x0800ff91
 800c2f8:	07f1      	lsls	r1, r6, #31
 800c2fa:	d508      	bpl.n	800c30e <_dtoa_r+0x34e>
 800c2fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c300:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c304:	f7f4 f9a0 	bl	8000648 <__aeabi_dmul>
 800c308:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c30c:	3501      	adds	r5, #1
 800c30e:	1076      	asrs	r6, r6, #1
 800c310:	3708      	adds	r7, #8
 800c312:	2e00      	cmp	r6, #0
 800c314:	d1f0      	bne.n	800c2f8 <_dtoa_r+0x338>
 800c316:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c31a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c31e:	f7f4 fabd 	bl	800089c <__aeabi_ddiv>
 800c322:	e9cd 0100 	strd	r0, r1, [sp]
 800c326:	e01a      	b.n	800c35e <_dtoa_r+0x39e>
 800c328:	2502      	movs	r5, #2
 800c32a:	e7a3      	b.n	800c274 <_dtoa_r+0x2b4>
 800c32c:	f000 80a0 	beq.w	800c470 <_dtoa_r+0x4b0>
 800c330:	f1ca 0600 	rsb	r6, sl, #0
 800c334:	4b9f      	ldr	r3, [pc, #636]	; (800c5b4 <_dtoa_r+0x5f4>)
 800c336:	4fa0      	ldr	r7, [pc, #640]	; (800c5b8 <_dtoa_r+0x5f8>)
 800c338:	f006 020f 	and.w	r2, r6, #15
 800c33c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c348:	f7f4 f97e 	bl	8000648 <__aeabi_dmul>
 800c34c:	e9cd 0100 	strd	r0, r1, [sp]
 800c350:	1136      	asrs	r6, r6, #4
 800c352:	2300      	movs	r3, #0
 800c354:	2502      	movs	r5, #2
 800c356:	2e00      	cmp	r6, #0
 800c358:	d17f      	bne.n	800c45a <_dtoa_r+0x49a>
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e1      	bne.n	800c322 <_dtoa_r+0x362>
 800c35e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 8087 	beq.w	800c474 <_dtoa_r+0x4b4>
 800c366:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c36a:	2200      	movs	r2, #0
 800c36c:	4b93      	ldr	r3, [pc, #588]	; (800c5bc <_dtoa_r+0x5fc>)
 800c36e:	4630      	mov	r0, r6
 800c370:	4639      	mov	r1, r7
 800c372:	f7f4 fbdb 	bl	8000b2c <__aeabi_dcmplt>
 800c376:	2800      	cmp	r0, #0
 800c378:	d07c      	beq.n	800c474 <_dtoa_r+0x4b4>
 800c37a:	f1b9 0f00 	cmp.w	r9, #0
 800c37e:	d079      	beq.n	800c474 <_dtoa_r+0x4b4>
 800c380:	9b02      	ldr	r3, [sp, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	dd35      	ble.n	800c3f2 <_dtoa_r+0x432>
 800c386:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c38a:	9308      	str	r3, [sp, #32]
 800c38c:	4639      	mov	r1, r7
 800c38e:	2200      	movs	r2, #0
 800c390:	4b8b      	ldr	r3, [pc, #556]	; (800c5c0 <_dtoa_r+0x600>)
 800c392:	4630      	mov	r0, r6
 800c394:	f7f4 f958 	bl	8000648 <__aeabi_dmul>
 800c398:	e9cd 0100 	strd	r0, r1, [sp]
 800c39c:	9f02      	ldr	r7, [sp, #8]
 800c39e:	3501      	adds	r5, #1
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f7f4 f8e7 	bl	8000574 <__aeabi_i2d>
 800c3a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3aa:	f7f4 f94d 	bl	8000648 <__aeabi_dmul>
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4b84      	ldr	r3, [pc, #528]	; (800c5c4 <_dtoa_r+0x604>)
 800c3b2:	f7f3 ff93 	bl	80002dc <__adddf3>
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c3bc:	2f00      	cmp	r7, #0
 800c3be:	d15d      	bne.n	800c47c <_dtoa_r+0x4bc>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	4b81      	ldr	r3, [pc, #516]	; (800c5c8 <_dtoa_r+0x608>)
 800c3c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3c8:	f7f3 ff86 	bl	80002d8 <__aeabi_dsub>
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	4633      	mov	r3, r6
 800c3d0:	e9cd 0100 	strd	r0, r1, [sp]
 800c3d4:	f7f4 fbc8 	bl	8000b68 <__aeabi_dcmpgt>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	f040 8288 	bne.w	800c8ee <_dtoa_r+0x92e>
 800c3de:	462a      	mov	r2, r5
 800c3e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c3e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3e8:	f7f4 fba0 	bl	8000b2c <__aeabi_dcmplt>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f040 827c 	bne.w	800c8ea <_dtoa_r+0x92a>
 800c3f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3f6:	e9cd 2300 	strd	r2, r3, [sp]
 800c3fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f2c0 8150 	blt.w	800c6a2 <_dtoa_r+0x6e2>
 800c402:	f1ba 0f0e 	cmp.w	sl, #14
 800c406:	f300 814c 	bgt.w	800c6a2 <_dtoa_r+0x6e2>
 800c40a:	4b6a      	ldr	r3, [pc, #424]	; (800c5b4 <_dtoa_r+0x5f4>)
 800c40c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c410:	ed93 7b00 	vldr	d7, [r3]
 800c414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c416:	2b00      	cmp	r3, #0
 800c418:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c41c:	f280 80d8 	bge.w	800c5d0 <_dtoa_r+0x610>
 800c420:	f1b9 0f00 	cmp.w	r9, #0
 800c424:	f300 80d4 	bgt.w	800c5d0 <_dtoa_r+0x610>
 800c428:	f040 825e 	bne.w	800c8e8 <_dtoa_r+0x928>
 800c42c:	2200      	movs	r2, #0
 800c42e:	4b66      	ldr	r3, [pc, #408]	; (800c5c8 <_dtoa_r+0x608>)
 800c430:	ec51 0b17 	vmov	r0, r1, d7
 800c434:	f7f4 f908 	bl	8000648 <__aeabi_dmul>
 800c438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c43c:	f7f4 fb8a 	bl	8000b54 <__aeabi_dcmpge>
 800c440:	464f      	mov	r7, r9
 800c442:	464e      	mov	r6, r9
 800c444:	2800      	cmp	r0, #0
 800c446:	f040 8234 	bne.w	800c8b2 <_dtoa_r+0x8f2>
 800c44a:	2331      	movs	r3, #49	; 0x31
 800c44c:	f10b 0501 	add.w	r5, fp, #1
 800c450:	f88b 3000 	strb.w	r3, [fp]
 800c454:	f10a 0a01 	add.w	sl, sl, #1
 800c458:	e22f      	b.n	800c8ba <_dtoa_r+0x8fa>
 800c45a:	07f2      	lsls	r2, r6, #31
 800c45c:	d505      	bpl.n	800c46a <_dtoa_r+0x4aa>
 800c45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c462:	f7f4 f8f1 	bl	8000648 <__aeabi_dmul>
 800c466:	3501      	adds	r5, #1
 800c468:	2301      	movs	r3, #1
 800c46a:	1076      	asrs	r6, r6, #1
 800c46c:	3708      	adds	r7, #8
 800c46e:	e772      	b.n	800c356 <_dtoa_r+0x396>
 800c470:	2502      	movs	r5, #2
 800c472:	e774      	b.n	800c35e <_dtoa_r+0x39e>
 800c474:	f8cd a020 	str.w	sl, [sp, #32]
 800c478:	464f      	mov	r7, r9
 800c47a:	e791      	b.n	800c3a0 <_dtoa_r+0x3e0>
 800c47c:	4b4d      	ldr	r3, [pc, #308]	; (800c5b4 <_dtoa_r+0x5f4>)
 800c47e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c482:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d047      	beq.n	800c51c <_dtoa_r+0x55c>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	2000      	movs	r0, #0
 800c492:	494e      	ldr	r1, [pc, #312]	; (800c5cc <_dtoa_r+0x60c>)
 800c494:	f7f4 fa02 	bl	800089c <__aeabi_ddiv>
 800c498:	462a      	mov	r2, r5
 800c49a:	4633      	mov	r3, r6
 800c49c:	f7f3 ff1c 	bl	80002d8 <__aeabi_dsub>
 800c4a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c4a4:	465d      	mov	r5, fp
 800c4a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4aa:	f7f4 fb7d 	bl	8000ba8 <__aeabi_d2iz>
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	f7f4 f860 	bl	8000574 <__aeabi_i2d>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4bc:	f7f3 ff0c 	bl	80002d8 <__aeabi_dsub>
 800c4c0:	3630      	adds	r6, #48	; 0x30
 800c4c2:	f805 6b01 	strb.w	r6, [r5], #1
 800c4c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c4ca:	e9cd 0100 	strd	r0, r1, [sp]
 800c4ce:	f7f4 fb2d 	bl	8000b2c <__aeabi_dcmplt>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d163      	bne.n	800c59e <_dtoa_r+0x5de>
 800c4d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4da:	2000      	movs	r0, #0
 800c4dc:	4937      	ldr	r1, [pc, #220]	; (800c5bc <_dtoa_r+0x5fc>)
 800c4de:	f7f3 fefb 	bl	80002d8 <__aeabi_dsub>
 800c4e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c4e6:	f7f4 fb21 	bl	8000b2c <__aeabi_dcmplt>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f040 80b7 	bne.w	800c65e <_dtoa_r+0x69e>
 800c4f0:	eba5 030b 	sub.w	r3, r5, fp
 800c4f4:	429f      	cmp	r7, r3
 800c4f6:	f77f af7c 	ble.w	800c3f2 <_dtoa_r+0x432>
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4b30      	ldr	r3, [pc, #192]	; (800c5c0 <_dtoa_r+0x600>)
 800c4fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c502:	f7f4 f8a1 	bl	8000648 <__aeabi_dmul>
 800c506:	2200      	movs	r2, #0
 800c508:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c50c:	4b2c      	ldr	r3, [pc, #176]	; (800c5c0 <_dtoa_r+0x600>)
 800c50e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c512:	f7f4 f899 	bl	8000648 <__aeabi_dmul>
 800c516:	e9cd 0100 	strd	r0, r1, [sp]
 800c51a:	e7c4      	b.n	800c4a6 <_dtoa_r+0x4e6>
 800c51c:	462a      	mov	r2, r5
 800c51e:	4633      	mov	r3, r6
 800c520:	f7f4 f892 	bl	8000648 <__aeabi_dmul>
 800c524:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c528:	eb0b 0507 	add.w	r5, fp, r7
 800c52c:	465e      	mov	r6, fp
 800c52e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c532:	f7f4 fb39 	bl	8000ba8 <__aeabi_d2iz>
 800c536:	4607      	mov	r7, r0
 800c538:	f7f4 f81c 	bl	8000574 <__aeabi_i2d>
 800c53c:	3730      	adds	r7, #48	; 0x30
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c546:	f7f3 fec7 	bl	80002d8 <__aeabi_dsub>
 800c54a:	f806 7b01 	strb.w	r7, [r6], #1
 800c54e:	42ae      	cmp	r6, r5
 800c550:	e9cd 0100 	strd	r0, r1, [sp]
 800c554:	f04f 0200 	mov.w	r2, #0
 800c558:	d126      	bne.n	800c5a8 <_dtoa_r+0x5e8>
 800c55a:	4b1c      	ldr	r3, [pc, #112]	; (800c5cc <_dtoa_r+0x60c>)
 800c55c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c560:	f7f3 febc 	bl	80002dc <__adddf3>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c56c:	f7f4 fafc 	bl	8000b68 <__aeabi_dcmpgt>
 800c570:	2800      	cmp	r0, #0
 800c572:	d174      	bne.n	800c65e <_dtoa_r+0x69e>
 800c574:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c578:	2000      	movs	r0, #0
 800c57a:	4914      	ldr	r1, [pc, #80]	; (800c5cc <_dtoa_r+0x60c>)
 800c57c:	f7f3 feac 	bl	80002d8 <__aeabi_dsub>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c588:	f7f4 fad0 	bl	8000b2c <__aeabi_dcmplt>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f43f af30 	beq.w	800c3f2 <_dtoa_r+0x432>
 800c592:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c596:	2b30      	cmp	r3, #48	; 0x30
 800c598:	f105 32ff 	add.w	r2, r5, #4294967295
 800c59c:	d002      	beq.n	800c5a4 <_dtoa_r+0x5e4>
 800c59e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c5a2:	e04a      	b.n	800c63a <_dtoa_r+0x67a>
 800c5a4:	4615      	mov	r5, r2
 800c5a6:	e7f4      	b.n	800c592 <_dtoa_r+0x5d2>
 800c5a8:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <_dtoa_r+0x600>)
 800c5aa:	f7f4 f84d 	bl	8000648 <__aeabi_dmul>
 800c5ae:	e9cd 0100 	strd	r0, r1, [sp]
 800c5b2:	e7bc      	b.n	800c52e <_dtoa_r+0x56e>
 800c5b4:	0800ffc8 	.word	0x0800ffc8
 800c5b8:	0800ffa0 	.word	0x0800ffa0
 800c5bc:	3ff00000 	.word	0x3ff00000
 800c5c0:	40240000 	.word	0x40240000
 800c5c4:	401c0000 	.word	0x401c0000
 800c5c8:	40140000 	.word	0x40140000
 800c5cc:	3fe00000 	.word	0x3fe00000
 800c5d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c5d4:	465d      	mov	r5, fp
 800c5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f7f4 f95d 	bl	800089c <__aeabi_ddiv>
 800c5e2:	f7f4 fae1 	bl	8000ba8 <__aeabi_d2iz>
 800c5e6:	4680      	mov	r8, r0
 800c5e8:	f7f3 ffc4 	bl	8000574 <__aeabi_i2d>
 800c5ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5f0:	f7f4 f82a 	bl	8000648 <__aeabi_dmul>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	4639      	mov	r1, r7
 800c5fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c600:	f7f3 fe6a 	bl	80002d8 <__aeabi_dsub>
 800c604:	f805 6b01 	strb.w	r6, [r5], #1
 800c608:	eba5 060b 	sub.w	r6, r5, fp
 800c60c:	45b1      	cmp	r9, r6
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	d139      	bne.n	800c688 <_dtoa_r+0x6c8>
 800c614:	f7f3 fe62 	bl	80002dc <__adddf3>
 800c618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c61c:	4606      	mov	r6, r0
 800c61e:	460f      	mov	r7, r1
 800c620:	f7f4 faa2 	bl	8000b68 <__aeabi_dcmpgt>
 800c624:	b9c8      	cbnz	r0, 800c65a <_dtoa_r+0x69a>
 800c626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c62a:	4630      	mov	r0, r6
 800c62c:	4639      	mov	r1, r7
 800c62e:	f7f4 fa73 	bl	8000b18 <__aeabi_dcmpeq>
 800c632:	b110      	cbz	r0, 800c63a <_dtoa_r+0x67a>
 800c634:	f018 0f01 	tst.w	r8, #1
 800c638:	d10f      	bne.n	800c65a <_dtoa_r+0x69a>
 800c63a:	9904      	ldr	r1, [sp, #16]
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 fdff 	bl	800d240 <_Bfree>
 800c642:	2300      	movs	r3, #0
 800c644:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c646:	702b      	strb	r3, [r5, #0]
 800c648:	f10a 0301 	add.w	r3, sl, #1
 800c64c:	6013      	str	r3, [r2, #0]
 800c64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 8241 	beq.w	800cad8 <_dtoa_r+0xb18>
 800c656:	601d      	str	r5, [r3, #0]
 800c658:	e23e      	b.n	800cad8 <_dtoa_r+0xb18>
 800c65a:	f8cd a020 	str.w	sl, [sp, #32]
 800c65e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c662:	2a39      	cmp	r2, #57	; 0x39
 800c664:	f105 33ff 	add.w	r3, r5, #4294967295
 800c668:	d108      	bne.n	800c67c <_dtoa_r+0x6bc>
 800c66a:	459b      	cmp	fp, r3
 800c66c:	d10a      	bne.n	800c684 <_dtoa_r+0x6c4>
 800c66e:	9b08      	ldr	r3, [sp, #32]
 800c670:	3301      	adds	r3, #1
 800c672:	9308      	str	r3, [sp, #32]
 800c674:	2330      	movs	r3, #48	; 0x30
 800c676:	f88b 3000 	strb.w	r3, [fp]
 800c67a:	465b      	mov	r3, fp
 800c67c:	781a      	ldrb	r2, [r3, #0]
 800c67e:	3201      	adds	r2, #1
 800c680:	701a      	strb	r2, [r3, #0]
 800c682:	e78c      	b.n	800c59e <_dtoa_r+0x5de>
 800c684:	461d      	mov	r5, r3
 800c686:	e7ea      	b.n	800c65e <_dtoa_r+0x69e>
 800c688:	2200      	movs	r2, #0
 800c68a:	4b9b      	ldr	r3, [pc, #620]	; (800c8f8 <_dtoa_r+0x938>)
 800c68c:	f7f3 ffdc 	bl	8000648 <__aeabi_dmul>
 800c690:	2200      	movs	r2, #0
 800c692:	2300      	movs	r3, #0
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	f7f4 fa3e 	bl	8000b18 <__aeabi_dcmpeq>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d09a      	beq.n	800c5d6 <_dtoa_r+0x616>
 800c6a0:	e7cb      	b.n	800c63a <_dtoa_r+0x67a>
 800c6a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6a4:	2a00      	cmp	r2, #0
 800c6a6:	f000 808b 	beq.w	800c7c0 <_dtoa_r+0x800>
 800c6aa:	9a06      	ldr	r2, [sp, #24]
 800c6ac:	2a01      	cmp	r2, #1
 800c6ae:	dc6e      	bgt.n	800c78e <_dtoa_r+0x7ce>
 800c6b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c6b2:	2a00      	cmp	r2, #0
 800c6b4:	d067      	beq.n	800c786 <_dtoa_r+0x7c6>
 800c6b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c6ba:	9f07      	ldr	r7, [sp, #28]
 800c6bc:	9d05      	ldr	r5, [sp, #20]
 800c6be:	9a05      	ldr	r2, [sp, #20]
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	441a      	add	r2, r3
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	9205      	str	r2, [sp, #20]
 800c6c8:	4498      	add	r8, r3
 800c6ca:	f000 fe97 	bl	800d3fc <__i2b>
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	dd0c      	ble.n	800c6ee <_dtoa_r+0x72e>
 800c6d4:	f1b8 0f00 	cmp.w	r8, #0
 800c6d8:	dd09      	ble.n	800c6ee <_dtoa_r+0x72e>
 800c6da:	4545      	cmp	r5, r8
 800c6dc:	9a05      	ldr	r2, [sp, #20]
 800c6de:	462b      	mov	r3, r5
 800c6e0:	bfa8      	it	ge
 800c6e2:	4643      	movge	r3, r8
 800c6e4:	1ad2      	subs	r2, r2, r3
 800c6e6:	9205      	str	r2, [sp, #20]
 800c6e8:	1aed      	subs	r5, r5, r3
 800c6ea:	eba8 0803 	sub.w	r8, r8, r3
 800c6ee:	9b07      	ldr	r3, [sp, #28]
 800c6f0:	b1eb      	cbz	r3, 800c72e <_dtoa_r+0x76e>
 800c6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d067      	beq.n	800c7c8 <_dtoa_r+0x808>
 800c6f8:	b18f      	cbz	r7, 800c71e <_dtoa_r+0x75e>
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	463a      	mov	r2, r7
 800c6fe:	4620      	mov	r0, r4
 800c700:	f000 ff1c 	bl	800d53c <__pow5mult>
 800c704:	9a04      	ldr	r2, [sp, #16]
 800c706:	4601      	mov	r1, r0
 800c708:	4606      	mov	r6, r0
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fe7f 	bl	800d40e <__multiply>
 800c710:	9904      	ldr	r1, [sp, #16]
 800c712:	9008      	str	r0, [sp, #32]
 800c714:	4620      	mov	r0, r4
 800c716:	f000 fd93 	bl	800d240 <_Bfree>
 800c71a:	9b08      	ldr	r3, [sp, #32]
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	9b07      	ldr	r3, [sp, #28]
 800c720:	1bda      	subs	r2, r3, r7
 800c722:	d004      	beq.n	800c72e <_dtoa_r+0x76e>
 800c724:	9904      	ldr	r1, [sp, #16]
 800c726:	4620      	mov	r0, r4
 800c728:	f000 ff08 	bl	800d53c <__pow5mult>
 800c72c:	9004      	str	r0, [sp, #16]
 800c72e:	2101      	movs	r1, #1
 800c730:	4620      	mov	r0, r4
 800c732:	f000 fe63 	bl	800d3fc <__i2b>
 800c736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c738:	4607      	mov	r7, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 81d0 	beq.w	800cae0 <_dtoa_r+0xb20>
 800c740:	461a      	mov	r2, r3
 800c742:	4601      	mov	r1, r0
 800c744:	4620      	mov	r0, r4
 800c746:	f000 fef9 	bl	800d53c <__pow5mult>
 800c74a:	9b06      	ldr	r3, [sp, #24]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	4607      	mov	r7, r0
 800c750:	dc40      	bgt.n	800c7d4 <_dtoa_r+0x814>
 800c752:	9b00      	ldr	r3, [sp, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d139      	bne.n	800c7cc <_dtoa_r+0x80c>
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d136      	bne.n	800c7d0 <_dtoa_r+0x810>
 800c762:	9b01      	ldr	r3, [sp, #4]
 800c764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c768:	0d1b      	lsrs	r3, r3, #20
 800c76a:	051b      	lsls	r3, r3, #20
 800c76c:	b12b      	cbz	r3, 800c77a <_dtoa_r+0x7ba>
 800c76e:	9b05      	ldr	r3, [sp, #20]
 800c770:	3301      	adds	r3, #1
 800c772:	9305      	str	r3, [sp, #20]
 800c774:	f108 0801 	add.w	r8, r8, #1
 800c778:	2301      	movs	r3, #1
 800c77a:	9307      	str	r3, [sp, #28]
 800c77c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d12a      	bne.n	800c7d8 <_dtoa_r+0x818>
 800c782:	2001      	movs	r0, #1
 800c784:	e030      	b.n	800c7e8 <_dtoa_r+0x828>
 800c786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c788:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c78c:	e795      	b.n	800c6ba <_dtoa_r+0x6fa>
 800c78e:	9b07      	ldr	r3, [sp, #28]
 800c790:	f109 37ff 	add.w	r7, r9, #4294967295
 800c794:	42bb      	cmp	r3, r7
 800c796:	bfbf      	itttt	lt
 800c798:	9b07      	ldrlt	r3, [sp, #28]
 800c79a:	9707      	strlt	r7, [sp, #28]
 800c79c:	1afa      	sublt	r2, r7, r3
 800c79e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c7a0:	bfbb      	ittet	lt
 800c7a2:	189b      	addlt	r3, r3, r2
 800c7a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c7a6:	1bdf      	subge	r7, r3, r7
 800c7a8:	2700      	movlt	r7, #0
 800c7aa:	f1b9 0f00 	cmp.w	r9, #0
 800c7ae:	bfb5      	itete	lt
 800c7b0:	9b05      	ldrlt	r3, [sp, #20]
 800c7b2:	9d05      	ldrge	r5, [sp, #20]
 800c7b4:	eba3 0509 	sublt.w	r5, r3, r9
 800c7b8:	464b      	movge	r3, r9
 800c7ba:	bfb8      	it	lt
 800c7bc:	2300      	movlt	r3, #0
 800c7be:	e77e      	b.n	800c6be <_dtoa_r+0x6fe>
 800c7c0:	9f07      	ldr	r7, [sp, #28]
 800c7c2:	9d05      	ldr	r5, [sp, #20]
 800c7c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c7c6:	e783      	b.n	800c6d0 <_dtoa_r+0x710>
 800c7c8:	9a07      	ldr	r2, [sp, #28]
 800c7ca:	e7ab      	b.n	800c724 <_dtoa_r+0x764>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e7d4      	b.n	800c77a <_dtoa_r+0x7ba>
 800c7d0:	9b00      	ldr	r3, [sp, #0]
 800c7d2:	e7d2      	b.n	800c77a <_dtoa_r+0x7ba>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9307      	str	r3, [sp, #28]
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c7de:	6918      	ldr	r0, [r3, #16]
 800c7e0:	f000 fdbe 	bl	800d360 <__hi0bits>
 800c7e4:	f1c0 0020 	rsb	r0, r0, #32
 800c7e8:	4440      	add	r0, r8
 800c7ea:	f010 001f 	ands.w	r0, r0, #31
 800c7ee:	d047      	beq.n	800c880 <_dtoa_r+0x8c0>
 800c7f0:	f1c0 0320 	rsb	r3, r0, #32
 800c7f4:	2b04      	cmp	r3, #4
 800c7f6:	dd3b      	ble.n	800c870 <_dtoa_r+0x8b0>
 800c7f8:	9b05      	ldr	r3, [sp, #20]
 800c7fa:	f1c0 001c 	rsb	r0, r0, #28
 800c7fe:	4403      	add	r3, r0
 800c800:	9305      	str	r3, [sp, #20]
 800c802:	4405      	add	r5, r0
 800c804:	4480      	add	r8, r0
 800c806:	9b05      	ldr	r3, [sp, #20]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	dd05      	ble.n	800c818 <_dtoa_r+0x858>
 800c80c:	461a      	mov	r2, r3
 800c80e:	9904      	ldr	r1, [sp, #16]
 800c810:	4620      	mov	r0, r4
 800c812:	f000 fee1 	bl	800d5d8 <__lshift>
 800c816:	9004      	str	r0, [sp, #16]
 800c818:	f1b8 0f00 	cmp.w	r8, #0
 800c81c:	dd05      	ble.n	800c82a <_dtoa_r+0x86a>
 800c81e:	4639      	mov	r1, r7
 800c820:	4642      	mov	r2, r8
 800c822:	4620      	mov	r0, r4
 800c824:	f000 fed8 	bl	800d5d8 <__lshift>
 800c828:	4607      	mov	r7, r0
 800c82a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c82c:	b353      	cbz	r3, 800c884 <_dtoa_r+0x8c4>
 800c82e:	4639      	mov	r1, r7
 800c830:	9804      	ldr	r0, [sp, #16]
 800c832:	f000 ff25 	bl	800d680 <__mcmp>
 800c836:	2800      	cmp	r0, #0
 800c838:	da24      	bge.n	800c884 <_dtoa_r+0x8c4>
 800c83a:	2300      	movs	r3, #0
 800c83c:	220a      	movs	r2, #10
 800c83e:	9904      	ldr	r1, [sp, #16]
 800c840:	4620      	mov	r0, r4
 800c842:	f000 fd14 	bl	800d26e <__multadd>
 800c846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c848:	9004      	str	r0, [sp, #16]
 800c84a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c84e:	2b00      	cmp	r3, #0
 800c850:	f000 814d 	beq.w	800caee <_dtoa_r+0xb2e>
 800c854:	2300      	movs	r3, #0
 800c856:	4631      	mov	r1, r6
 800c858:	220a      	movs	r2, #10
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 fd07 	bl	800d26e <__multadd>
 800c860:	9b02      	ldr	r3, [sp, #8]
 800c862:	2b00      	cmp	r3, #0
 800c864:	4606      	mov	r6, r0
 800c866:	dc4f      	bgt.n	800c908 <_dtoa_r+0x948>
 800c868:	9b06      	ldr	r3, [sp, #24]
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	dd4c      	ble.n	800c908 <_dtoa_r+0x948>
 800c86e:	e011      	b.n	800c894 <_dtoa_r+0x8d4>
 800c870:	d0c9      	beq.n	800c806 <_dtoa_r+0x846>
 800c872:	9a05      	ldr	r2, [sp, #20]
 800c874:	331c      	adds	r3, #28
 800c876:	441a      	add	r2, r3
 800c878:	9205      	str	r2, [sp, #20]
 800c87a:	441d      	add	r5, r3
 800c87c:	4498      	add	r8, r3
 800c87e:	e7c2      	b.n	800c806 <_dtoa_r+0x846>
 800c880:	4603      	mov	r3, r0
 800c882:	e7f6      	b.n	800c872 <_dtoa_r+0x8b2>
 800c884:	f1b9 0f00 	cmp.w	r9, #0
 800c888:	dc38      	bgt.n	800c8fc <_dtoa_r+0x93c>
 800c88a:	9b06      	ldr	r3, [sp, #24]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	dd35      	ble.n	800c8fc <_dtoa_r+0x93c>
 800c890:	f8cd 9008 	str.w	r9, [sp, #8]
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	b963      	cbnz	r3, 800c8b2 <_dtoa_r+0x8f2>
 800c898:	4639      	mov	r1, r7
 800c89a:	2205      	movs	r2, #5
 800c89c:	4620      	mov	r0, r4
 800c89e:	f000 fce6 	bl	800d26e <__multadd>
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	4607      	mov	r7, r0
 800c8a6:	9804      	ldr	r0, [sp, #16]
 800c8a8:	f000 feea 	bl	800d680 <__mcmp>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	f73f adcc 	bgt.w	800c44a <_dtoa_r+0x48a>
 800c8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8b4:	465d      	mov	r5, fp
 800c8b6:	ea6f 0a03 	mvn.w	sl, r3
 800c8ba:	f04f 0900 	mov.w	r9, #0
 800c8be:	4639      	mov	r1, r7
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f000 fcbd 	bl	800d240 <_Bfree>
 800c8c6:	2e00      	cmp	r6, #0
 800c8c8:	f43f aeb7 	beq.w	800c63a <_dtoa_r+0x67a>
 800c8cc:	f1b9 0f00 	cmp.w	r9, #0
 800c8d0:	d005      	beq.n	800c8de <_dtoa_r+0x91e>
 800c8d2:	45b1      	cmp	r9, r6
 800c8d4:	d003      	beq.n	800c8de <_dtoa_r+0x91e>
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fcb1 	bl	800d240 <_Bfree>
 800c8de:	4631      	mov	r1, r6
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fcad 	bl	800d240 <_Bfree>
 800c8e6:	e6a8      	b.n	800c63a <_dtoa_r+0x67a>
 800c8e8:	2700      	movs	r7, #0
 800c8ea:	463e      	mov	r6, r7
 800c8ec:	e7e1      	b.n	800c8b2 <_dtoa_r+0x8f2>
 800c8ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c8f2:	463e      	mov	r6, r7
 800c8f4:	e5a9      	b.n	800c44a <_dtoa_r+0x48a>
 800c8f6:	bf00      	nop
 800c8f8:	40240000 	.word	0x40240000
 800c8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80fa 	beq.w	800cafc <_dtoa_r+0xb3c>
 800c908:	2d00      	cmp	r5, #0
 800c90a:	dd05      	ble.n	800c918 <_dtoa_r+0x958>
 800c90c:	4631      	mov	r1, r6
 800c90e:	462a      	mov	r2, r5
 800c910:	4620      	mov	r0, r4
 800c912:	f000 fe61 	bl	800d5d8 <__lshift>
 800c916:	4606      	mov	r6, r0
 800c918:	9b07      	ldr	r3, [sp, #28]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d04c      	beq.n	800c9b8 <_dtoa_r+0x9f8>
 800c91e:	6871      	ldr	r1, [r6, #4]
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fc59 	bl	800d1d8 <_Balloc>
 800c926:	6932      	ldr	r2, [r6, #16]
 800c928:	3202      	adds	r2, #2
 800c92a:	4605      	mov	r5, r0
 800c92c:	0092      	lsls	r2, r2, #2
 800c92e:	f106 010c 	add.w	r1, r6, #12
 800c932:	300c      	adds	r0, #12
 800c934:	f7fd fd50 	bl	800a3d8 <memcpy>
 800c938:	2201      	movs	r2, #1
 800c93a:	4629      	mov	r1, r5
 800c93c:	4620      	mov	r0, r4
 800c93e:	f000 fe4b 	bl	800d5d8 <__lshift>
 800c942:	9b00      	ldr	r3, [sp, #0]
 800c944:	f8cd b014 	str.w	fp, [sp, #20]
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	46b1      	mov	r9, r6
 800c94e:	9307      	str	r3, [sp, #28]
 800c950:	4606      	mov	r6, r0
 800c952:	4639      	mov	r1, r7
 800c954:	9804      	ldr	r0, [sp, #16]
 800c956:	f7ff faa7 	bl	800bea8 <quorem>
 800c95a:	4649      	mov	r1, r9
 800c95c:	4605      	mov	r5, r0
 800c95e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c962:	9804      	ldr	r0, [sp, #16]
 800c964:	f000 fe8c 	bl	800d680 <__mcmp>
 800c968:	4632      	mov	r2, r6
 800c96a:	9000      	str	r0, [sp, #0]
 800c96c:	4639      	mov	r1, r7
 800c96e:	4620      	mov	r0, r4
 800c970:	f000 fea0 	bl	800d6b4 <__mdiff>
 800c974:	68c3      	ldr	r3, [r0, #12]
 800c976:	4602      	mov	r2, r0
 800c978:	bb03      	cbnz	r3, 800c9bc <_dtoa_r+0x9fc>
 800c97a:	4601      	mov	r1, r0
 800c97c:	9008      	str	r0, [sp, #32]
 800c97e:	9804      	ldr	r0, [sp, #16]
 800c980:	f000 fe7e 	bl	800d680 <__mcmp>
 800c984:	9a08      	ldr	r2, [sp, #32]
 800c986:	4603      	mov	r3, r0
 800c988:	4611      	mov	r1, r2
 800c98a:	4620      	mov	r0, r4
 800c98c:	9308      	str	r3, [sp, #32]
 800c98e:	f000 fc57 	bl	800d240 <_Bfree>
 800c992:	9b08      	ldr	r3, [sp, #32]
 800c994:	b9a3      	cbnz	r3, 800c9c0 <_dtoa_r+0xa00>
 800c996:	9a06      	ldr	r2, [sp, #24]
 800c998:	b992      	cbnz	r2, 800c9c0 <_dtoa_r+0xa00>
 800c99a:	9a07      	ldr	r2, [sp, #28]
 800c99c:	b982      	cbnz	r2, 800c9c0 <_dtoa_r+0xa00>
 800c99e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c9a2:	d029      	beq.n	800c9f8 <_dtoa_r+0xa38>
 800c9a4:	9b00      	ldr	r3, [sp, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	dd01      	ble.n	800c9ae <_dtoa_r+0x9ee>
 800c9aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c9ae:	9b05      	ldr	r3, [sp, #20]
 800c9b0:	1c5d      	adds	r5, r3, #1
 800c9b2:	f883 8000 	strb.w	r8, [r3]
 800c9b6:	e782      	b.n	800c8be <_dtoa_r+0x8fe>
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	e7c2      	b.n	800c942 <_dtoa_r+0x982>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e7e3      	b.n	800c988 <_dtoa_r+0x9c8>
 800c9c0:	9a00      	ldr	r2, [sp, #0]
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	db04      	blt.n	800c9d0 <_dtoa_r+0xa10>
 800c9c6:	d125      	bne.n	800ca14 <_dtoa_r+0xa54>
 800c9c8:	9a06      	ldr	r2, [sp, #24]
 800c9ca:	bb1a      	cbnz	r2, 800ca14 <_dtoa_r+0xa54>
 800c9cc:	9a07      	ldr	r2, [sp, #28]
 800c9ce:	bb0a      	cbnz	r2, 800ca14 <_dtoa_r+0xa54>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	ddec      	ble.n	800c9ae <_dtoa_r+0x9ee>
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	9904      	ldr	r1, [sp, #16]
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fdfd 	bl	800d5d8 <__lshift>
 800c9de:	4639      	mov	r1, r7
 800c9e0:	9004      	str	r0, [sp, #16]
 800c9e2:	f000 fe4d 	bl	800d680 <__mcmp>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	dc03      	bgt.n	800c9f2 <_dtoa_r+0xa32>
 800c9ea:	d1e0      	bne.n	800c9ae <_dtoa_r+0x9ee>
 800c9ec:	f018 0f01 	tst.w	r8, #1
 800c9f0:	d0dd      	beq.n	800c9ae <_dtoa_r+0x9ee>
 800c9f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c9f6:	d1d8      	bne.n	800c9aa <_dtoa_r+0x9ea>
 800c9f8:	9b05      	ldr	r3, [sp, #20]
 800c9fa:	9a05      	ldr	r2, [sp, #20]
 800c9fc:	1c5d      	adds	r5, r3, #1
 800c9fe:	2339      	movs	r3, #57	; 0x39
 800ca00:	7013      	strb	r3, [r2, #0]
 800ca02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca06:	2b39      	cmp	r3, #57	; 0x39
 800ca08:	f105 32ff 	add.w	r2, r5, #4294967295
 800ca0c:	d04f      	beq.n	800caae <_dtoa_r+0xaee>
 800ca0e:	3301      	adds	r3, #1
 800ca10:	7013      	strb	r3, [r2, #0]
 800ca12:	e754      	b.n	800c8be <_dtoa_r+0x8fe>
 800ca14:	9a05      	ldr	r2, [sp, #20]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f102 0501 	add.w	r5, r2, #1
 800ca1c:	dd06      	ble.n	800ca2c <_dtoa_r+0xa6c>
 800ca1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ca22:	d0e9      	beq.n	800c9f8 <_dtoa_r+0xa38>
 800ca24:	f108 0801 	add.w	r8, r8, #1
 800ca28:	9b05      	ldr	r3, [sp, #20]
 800ca2a:	e7c2      	b.n	800c9b2 <_dtoa_r+0x9f2>
 800ca2c:	9a02      	ldr	r2, [sp, #8]
 800ca2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ca32:	eba5 030b 	sub.w	r3, r5, fp
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d021      	beq.n	800ca7e <_dtoa_r+0xabe>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	220a      	movs	r2, #10
 800ca3e:	9904      	ldr	r1, [sp, #16]
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 fc14 	bl	800d26e <__multadd>
 800ca46:	45b1      	cmp	r9, r6
 800ca48:	9004      	str	r0, [sp, #16]
 800ca4a:	f04f 0300 	mov.w	r3, #0
 800ca4e:	f04f 020a 	mov.w	r2, #10
 800ca52:	4649      	mov	r1, r9
 800ca54:	4620      	mov	r0, r4
 800ca56:	d105      	bne.n	800ca64 <_dtoa_r+0xaa4>
 800ca58:	f000 fc09 	bl	800d26e <__multadd>
 800ca5c:	4681      	mov	r9, r0
 800ca5e:	4606      	mov	r6, r0
 800ca60:	9505      	str	r5, [sp, #20]
 800ca62:	e776      	b.n	800c952 <_dtoa_r+0x992>
 800ca64:	f000 fc03 	bl	800d26e <__multadd>
 800ca68:	4631      	mov	r1, r6
 800ca6a:	4681      	mov	r9, r0
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	220a      	movs	r2, #10
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fbfc 	bl	800d26e <__multadd>
 800ca76:	4606      	mov	r6, r0
 800ca78:	e7f2      	b.n	800ca60 <_dtoa_r+0xaa0>
 800ca7a:	f04f 0900 	mov.w	r9, #0
 800ca7e:	2201      	movs	r2, #1
 800ca80:	9904      	ldr	r1, [sp, #16]
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 fda8 	bl	800d5d8 <__lshift>
 800ca88:	4639      	mov	r1, r7
 800ca8a:	9004      	str	r0, [sp, #16]
 800ca8c:	f000 fdf8 	bl	800d680 <__mcmp>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	dcb6      	bgt.n	800ca02 <_dtoa_r+0xa42>
 800ca94:	d102      	bne.n	800ca9c <_dtoa_r+0xadc>
 800ca96:	f018 0f01 	tst.w	r8, #1
 800ca9a:	d1b2      	bne.n	800ca02 <_dtoa_r+0xa42>
 800ca9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800caa0:	2b30      	cmp	r3, #48	; 0x30
 800caa2:	f105 32ff 	add.w	r2, r5, #4294967295
 800caa6:	f47f af0a 	bne.w	800c8be <_dtoa_r+0x8fe>
 800caaa:	4615      	mov	r5, r2
 800caac:	e7f6      	b.n	800ca9c <_dtoa_r+0xadc>
 800caae:	4593      	cmp	fp, r2
 800cab0:	d105      	bne.n	800cabe <_dtoa_r+0xafe>
 800cab2:	2331      	movs	r3, #49	; 0x31
 800cab4:	f10a 0a01 	add.w	sl, sl, #1
 800cab8:	f88b 3000 	strb.w	r3, [fp]
 800cabc:	e6ff      	b.n	800c8be <_dtoa_r+0x8fe>
 800cabe:	4615      	mov	r5, r2
 800cac0:	e79f      	b.n	800ca02 <_dtoa_r+0xa42>
 800cac2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cb28 <_dtoa_r+0xb68>
 800cac6:	e007      	b.n	800cad8 <_dtoa_r+0xb18>
 800cac8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cb2c <_dtoa_r+0xb6c>
 800cace:	b11b      	cbz	r3, 800cad8 <_dtoa_r+0xb18>
 800cad0:	f10b 0308 	add.w	r3, fp, #8
 800cad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cad6:	6013      	str	r3, [r2, #0]
 800cad8:	4658      	mov	r0, fp
 800cada:	b017      	add	sp, #92	; 0x5c
 800cadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae0:	9b06      	ldr	r3, [sp, #24]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	f77f ae35 	ble.w	800c752 <_dtoa_r+0x792>
 800cae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800caea:	9307      	str	r3, [sp, #28]
 800caec:	e649      	b.n	800c782 <_dtoa_r+0x7c2>
 800caee:	9b02      	ldr	r3, [sp, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dc03      	bgt.n	800cafc <_dtoa_r+0xb3c>
 800caf4:	9b06      	ldr	r3, [sp, #24]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	f73f aecc 	bgt.w	800c894 <_dtoa_r+0x8d4>
 800cafc:	465d      	mov	r5, fp
 800cafe:	4639      	mov	r1, r7
 800cb00:	9804      	ldr	r0, [sp, #16]
 800cb02:	f7ff f9d1 	bl	800bea8 <quorem>
 800cb06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cb0a:	f805 8b01 	strb.w	r8, [r5], #1
 800cb0e:	9a02      	ldr	r2, [sp, #8]
 800cb10:	eba5 030b 	sub.w	r3, r5, fp
 800cb14:	429a      	cmp	r2, r3
 800cb16:	ddb0      	ble.n	800ca7a <_dtoa_r+0xaba>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	220a      	movs	r2, #10
 800cb1c:	9904      	ldr	r1, [sp, #16]
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f000 fba5 	bl	800d26e <__multadd>
 800cb24:	9004      	str	r0, [sp, #16]
 800cb26:	e7ea      	b.n	800cafe <_dtoa_r+0xb3e>
 800cb28:	0800ff0e 	.word	0x0800ff0e
 800cb2c:	0800ff88 	.word	0x0800ff88

0800cb30 <rshift>:
 800cb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb32:	6906      	ldr	r6, [r0, #16]
 800cb34:	114b      	asrs	r3, r1, #5
 800cb36:	429e      	cmp	r6, r3
 800cb38:	f100 0414 	add.w	r4, r0, #20
 800cb3c:	dd30      	ble.n	800cba0 <rshift+0x70>
 800cb3e:	f011 011f 	ands.w	r1, r1, #31
 800cb42:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cb46:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cb4a:	d108      	bne.n	800cb5e <rshift+0x2e>
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	42b2      	cmp	r2, r6
 800cb50:	460b      	mov	r3, r1
 800cb52:	d211      	bcs.n	800cb78 <rshift+0x48>
 800cb54:	f852 3b04 	ldr.w	r3, [r2], #4
 800cb58:	f841 3b04 	str.w	r3, [r1], #4
 800cb5c:	e7f7      	b.n	800cb4e <rshift+0x1e>
 800cb5e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800cb62:	f1c1 0c20 	rsb	ip, r1, #32
 800cb66:	40cd      	lsrs	r5, r1
 800cb68:	3204      	adds	r2, #4
 800cb6a:	4623      	mov	r3, r4
 800cb6c:	42b2      	cmp	r2, r6
 800cb6e:	4617      	mov	r7, r2
 800cb70:	d30c      	bcc.n	800cb8c <rshift+0x5c>
 800cb72:	601d      	str	r5, [r3, #0]
 800cb74:	b105      	cbz	r5, 800cb78 <rshift+0x48>
 800cb76:	3304      	adds	r3, #4
 800cb78:	1b1a      	subs	r2, r3, r4
 800cb7a:	42a3      	cmp	r3, r4
 800cb7c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb80:	bf08      	it	eq
 800cb82:	2300      	moveq	r3, #0
 800cb84:	6102      	str	r2, [r0, #16]
 800cb86:	bf08      	it	eq
 800cb88:	6143      	streq	r3, [r0, #20]
 800cb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb8c:	683f      	ldr	r7, [r7, #0]
 800cb8e:	fa07 f70c 	lsl.w	r7, r7, ip
 800cb92:	433d      	orrs	r5, r7
 800cb94:	f843 5b04 	str.w	r5, [r3], #4
 800cb98:	f852 5b04 	ldr.w	r5, [r2], #4
 800cb9c:	40cd      	lsrs	r5, r1
 800cb9e:	e7e5      	b.n	800cb6c <rshift+0x3c>
 800cba0:	4623      	mov	r3, r4
 800cba2:	e7e9      	b.n	800cb78 <rshift+0x48>

0800cba4 <__hexdig_fun>:
 800cba4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cba8:	2b09      	cmp	r3, #9
 800cbaa:	d802      	bhi.n	800cbb2 <__hexdig_fun+0xe>
 800cbac:	3820      	subs	r0, #32
 800cbae:	b2c0      	uxtb	r0, r0
 800cbb0:	4770      	bx	lr
 800cbb2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cbb6:	2b05      	cmp	r3, #5
 800cbb8:	d801      	bhi.n	800cbbe <__hexdig_fun+0x1a>
 800cbba:	3847      	subs	r0, #71	; 0x47
 800cbbc:	e7f7      	b.n	800cbae <__hexdig_fun+0xa>
 800cbbe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cbc2:	2b05      	cmp	r3, #5
 800cbc4:	d801      	bhi.n	800cbca <__hexdig_fun+0x26>
 800cbc6:	3827      	subs	r0, #39	; 0x27
 800cbc8:	e7f1      	b.n	800cbae <__hexdig_fun+0xa>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	4770      	bx	lr

0800cbce <__gethex>:
 800cbce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd2:	b08b      	sub	sp, #44	; 0x2c
 800cbd4:	468a      	mov	sl, r1
 800cbd6:	9002      	str	r0, [sp, #8]
 800cbd8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cbda:	9306      	str	r3, [sp, #24]
 800cbdc:	4690      	mov	r8, r2
 800cbde:	f000 fad0 	bl	800d182 <__localeconv_l>
 800cbe2:	6803      	ldr	r3, [r0, #0]
 800cbe4:	9303      	str	r3, [sp, #12]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7f3 fb1a 	bl	8000220 <strlen>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	9001      	str	r0, [sp, #4]
 800cbf0:	4403      	add	r3, r0
 800cbf2:	f04f 0b00 	mov.w	fp, #0
 800cbf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cbfa:	9307      	str	r3, [sp, #28]
 800cbfc:	f8da 3000 	ldr.w	r3, [sl]
 800cc00:	3302      	adds	r3, #2
 800cc02:	461f      	mov	r7, r3
 800cc04:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc08:	2830      	cmp	r0, #48	; 0x30
 800cc0a:	d06c      	beq.n	800cce6 <__gethex+0x118>
 800cc0c:	f7ff ffca 	bl	800cba4 <__hexdig_fun>
 800cc10:	4604      	mov	r4, r0
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d16a      	bne.n	800ccec <__gethex+0x11e>
 800cc16:	9a01      	ldr	r2, [sp, #4]
 800cc18:	9903      	ldr	r1, [sp, #12]
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	f001 f8f4 	bl	800de08 <strncmp>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	d166      	bne.n	800ccf2 <__gethex+0x124>
 800cc24:	9b01      	ldr	r3, [sp, #4]
 800cc26:	5cf8      	ldrb	r0, [r7, r3]
 800cc28:	18fe      	adds	r6, r7, r3
 800cc2a:	f7ff ffbb 	bl	800cba4 <__hexdig_fun>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d062      	beq.n	800ccf8 <__gethex+0x12a>
 800cc32:	4633      	mov	r3, r6
 800cc34:	7818      	ldrb	r0, [r3, #0]
 800cc36:	2830      	cmp	r0, #48	; 0x30
 800cc38:	461f      	mov	r7, r3
 800cc3a:	f103 0301 	add.w	r3, r3, #1
 800cc3e:	d0f9      	beq.n	800cc34 <__gethex+0x66>
 800cc40:	f7ff ffb0 	bl	800cba4 <__hexdig_fun>
 800cc44:	fab0 f580 	clz	r5, r0
 800cc48:	096d      	lsrs	r5, r5, #5
 800cc4a:	4634      	mov	r4, r6
 800cc4c:	f04f 0b01 	mov.w	fp, #1
 800cc50:	463a      	mov	r2, r7
 800cc52:	4616      	mov	r6, r2
 800cc54:	3201      	adds	r2, #1
 800cc56:	7830      	ldrb	r0, [r6, #0]
 800cc58:	f7ff ffa4 	bl	800cba4 <__hexdig_fun>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d1f8      	bne.n	800cc52 <__gethex+0x84>
 800cc60:	9a01      	ldr	r2, [sp, #4]
 800cc62:	9903      	ldr	r1, [sp, #12]
 800cc64:	4630      	mov	r0, r6
 800cc66:	f001 f8cf 	bl	800de08 <strncmp>
 800cc6a:	b950      	cbnz	r0, 800cc82 <__gethex+0xb4>
 800cc6c:	b954      	cbnz	r4, 800cc84 <__gethex+0xb6>
 800cc6e:	9b01      	ldr	r3, [sp, #4]
 800cc70:	18f4      	adds	r4, r6, r3
 800cc72:	4622      	mov	r2, r4
 800cc74:	4616      	mov	r6, r2
 800cc76:	3201      	adds	r2, #1
 800cc78:	7830      	ldrb	r0, [r6, #0]
 800cc7a:	f7ff ff93 	bl	800cba4 <__hexdig_fun>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d1f8      	bne.n	800cc74 <__gethex+0xa6>
 800cc82:	b10c      	cbz	r4, 800cc88 <__gethex+0xba>
 800cc84:	1ba4      	subs	r4, r4, r6
 800cc86:	00a4      	lsls	r4, r4, #2
 800cc88:	7833      	ldrb	r3, [r6, #0]
 800cc8a:	2b50      	cmp	r3, #80	; 0x50
 800cc8c:	d001      	beq.n	800cc92 <__gethex+0xc4>
 800cc8e:	2b70      	cmp	r3, #112	; 0x70
 800cc90:	d140      	bne.n	800cd14 <__gethex+0x146>
 800cc92:	7873      	ldrb	r3, [r6, #1]
 800cc94:	2b2b      	cmp	r3, #43	; 0x2b
 800cc96:	d031      	beq.n	800ccfc <__gethex+0x12e>
 800cc98:	2b2d      	cmp	r3, #45	; 0x2d
 800cc9a:	d033      	beq.n	800cd04 <__gethex+0x136>
 800cc9c:	1c71      	adds	r1, r6, #1
 800cc9e:	f04f 0900 	mov.w	r9, #0
 800cca2:	7808      	ldrb	r0, [r1, #0]
 800cca4:	f7ff ff7e 	bl	800cba4 <__hexdig_fun>
 800cca8:	1e43      	subs	r3, r0, #1
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b18      	cmp	r3, #24
 800ccae:	d831      	bhi.n	800cd14 <__gethex+0x146>
 800ccb0:	f1a0 0210 	sub.w	r2, r0, #16
 800ccb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ccb8:	f7ff ff74 	bl	800cba4 <__hexdig_fun>
 800ccbc:	1e43      	subs	r3, r0, #1
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	2b18      	cmp	r3, #24
 800ccc2:	d922      	bls.n	800cd0a <__gethex+0x13c>
 800ccc4:	f1b9 0f00 	cmp.w	r9, #0
 800ccc8:	d000      	beq.n	800cccc <__gethex+0xfe>
 800ccca:	4252      	negs	r2, r2
 800cccc:	4414      	add	r4, r2
 800ccce:	f8ca 1000 	str.w	r1, [sl]
 800ccd2:	b30d      	cbz	r5, 800cd18 <__gethex+0x14a>
 800ccd4:	f1bb 0f00 	cmp.w	fp, #0
 800ccd8:	bf0c      	ite	eq
 800ccda:	2706      	moveq	r7, #6
 800ccdc:	2700      	movne	r7, #0
 800ccde:	4638      	mov	r0, r7
 800cce0:	b00b      	add	sp, #44	; 0x2c
 800cce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce6:	f10b 0b01 	add.w	fp, fp, #1
 800ccea:	e78a      	b.n	800cc02 <__gethex+0x34>
 800ccec:	2500      	movs	r5, #0
 800ccee:	462c      	mov	r4, r5
 800ccf0:	e7ae      	b.n	800cc50 <__gethex+0x82>
 800ccf2:	463e      	mov	r6, r7
 800ccf4:	2501      	movs	r5, #1
 800ccf6:	e7c7      	b.n	800cc88 <__gethex+0xba>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	e7fb      	b.n	800ccf4 <__gethex+0x126>
 800ccfc:	f04f 0900 	mov.w	r9, #0
 800cd00:	1cb1      	adds	r1, r6, #2
 800cd02:	e7ce      	b.n	800cca2 <__gethex+0xd4>
 800cd04:	f04f 0901 	mov.w	r9, #1
 800cd08:	e7fa      	b.n	800cd00 <__gethex+0x132>
 800cd0a:	230a      	movs	r3, #10
 800cd0c:	fb03 0202 	mla	r2, r3, r2, r0
 800cd10:	3a10      	subs	r2, #16
 800cd12:	e7cf      	b.n	800ccb4 <__gethex+0xe6>
 800cd14:	4631      	mov	r1, r6
 800cd16:	e7da      	b.n	800ccce <__gethex+0x100>
 800cd18:	1bf3      	subs	r3, r6, r7
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	2b07      	cmp	r3, #7
 800cd20:	dc49      	bgt.n	800cdb6 <__gethex+0x1e8>
 800cd22:	9802      	ldr	r0, [sp, #8]
 800cd24:	f000 fa58 	bl	800d1d8 <_Balloc>
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	f100 0914 	add.w	r9, r0, #20
 800cd2e:	f04f 0b00 	mov.w	fp, #0
 800cd32:	f1c3 0301 	rsb	r3, r3, #1
 800cd36:	4605      	mov	r5, r0
 800cd38:	f8cd 9010 	str.w	r9, [sp, #16]
 800cd3c:	46da      	mov	sl, fp
 800cd3e:	9308      	str	r3, [sp, #32]
 800cd40:	42b7      	cmp	r7, r6
 800cd42:	d33b      	bcc.n	800cdbc <__gethex+0x1ee>
 800cd44:	9804      	ldr	r0, [sp, #16]
 800cd46:	f840 ab04 	str.w	sl, [r0], #4
 800cd4a:	eba0 0009 	sub.w	r0, r0, r9
 800cd4e:	1080      	asrs	r0, r0, #2
 800cd50:	6128      	str	r0, [r5, #16]
 800cd52:	0147      	lsls	r7, r0, #5
 800cd54:	4650      	mov	r0, sl
 800cd56:	f000 fb03 	bl	800d360 <__hi0bits>
 800cd5a:	f8d8 6000 	ldr.w	r6, [r8]
 800cd5e:	1a3f      	subs	r7, r7, r0
 800cd60:	42b7      	cmp	r7, r6
 800cd62:	dd64      	ble.n	800ce2e <__gethex+0x260>
 800cd64:	1bbf      	subs	r7, r7, r6
 800cd66:	4639      	mov	r1, r7
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f000 fe13 	bl	800d994 <__any_on>
 800cd6e:	4682      	mov	sl, r0
 800cd70:	b178      	cbz	r0, 800cd92 <__gethex+0x1c4>
 800cd72:	1e7b      	subs	r3, r7, #1
 800cd74:	1159      	asrs	r1, r3, #5
 800cd76:	f003 021f 	and.w	r2, r3, #31
 800cd7a:	f04f 0a01 	mov.w	sl, #1
 800cd7e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cd82:	fa0a f202 	lsl.w	r2, sl, r2
 800cd86:	420a      	tst	r2, r1
 800cd88:	d003      	beq.n	800cd92 <__gethex+0x1c4>
 800cd8a:	4553      	cmp	r3, sl
 800cd8c:	dc46      	bgt.n	800ce1c <__gethex+0x24e>
 800cd8e:	f04f 0a02 	mov.w	sl, #2
 800cd92:	4639      	mov	r1, r7
 800cd94:	4628      	mov	r0, r5
 800cd96:	f7ff fecb 	bl	800cb30 <rshift>
 800cd9a:	443c      	add	r4, r7
 800cd9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cda0:	42a3      	cmp	r3, r4
 800cda2:	da52      	bge.n	800ce4a <__gethex+0x27c>
 800cda4:	4629      	mov	r1, r5
 800cda6:	9802      	ldr	r0, [sp, #8]
 800cda8:	f000 fa4a 	bl	800d240 <_Bfree>
 800cdac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cdae:	2300      	movs	r3, #0
 800cdb0:	6013      	str	r3, [r2, #0]
 800cdb2:	27a3      	movs	r7, #163	; 0xa3
 800cdb4:	e793      	b.n	800ccde <__gethex+0x110>
 800cdb6:	3101      	adds	r1, #1
 800cdb8:	105b      	asrs	r3, r3, #1
 800cdba:	e7b0      	b.n	800cd1e <__gethex+0x150>
 800cdbc:	1e73      	subs	r3, r6, #1
 800cdbe:	9305      	str	r3, [sp, #20]
 800cdc0:	9a07      	ldr	r2, [sp, #28]
 800cdc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d018      	beq.n	800cdfc <__gethex+0x22e>
 800cdca:	f1bb 0f20 	cmp.w	fp, #32
 800cdce:	d107      	bne.n	800cde0 <__gethex+0x212>
 800cdd0:	9b04      	ldr	r3, [sp, #16]
 800cdd2:	f8c3 a000 	str.w	sl, [r3]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	f04f 0a00 	mov.w	sl, #0
 800cddc:	9304      	str	r3, [sp, #16]
 800cdde:	46d3      	mov	fp, sl
 800cde0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cde4:	f7ff fede 	bl	800cba4 <__hexdig_fun>
 800cde8:	f000 000f 	and.w	r0, r0, #15
 800cdec:	fa00 f00b 	lsl.w	r0, r0, fp
 800cdf0:	ea4a 0a00 	orr.w	sl, sl, r0
 800cdf4:	f10b 0b04 	add.w	fp, fp, #4
 800cdf8:	9b05      	ldr	r3, [sp, #20]
 800cdfa:	e00d      	b.n	800ce18 <__gethex+0x24a>
 800cdfc:	9b05      	ldr	r3, [sp, #20]
 800cdfe:	9a08      	ldr	r2, [sp, #32]
 800ce00:	4413      	add	r3, r2
 800ce02:	42bb      	cmp	r3, r7
 800ce04:	d3e1      	bcc.n	800cdca <__gethex+0x1fc>
 800ce06:	4618      	mov	r0, r3
 800ce08:	9a01      	ldr	r2, [sp, #4]
 800ce0a:	9903      	ldr	r1, [sp, #12]
 800ce0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0e:	f000 fffb 	bl	800de08 <strncmp>
 800ce12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1d8      	bne.n	800cdca <__gethex+0x1fc>
 800ce18:	461e      	mov	r6, r3
 800ce1a:	e791      	b.n	800cd40 <__gethex+0x172>
 800ce1c:	1eb9      	subs	r1, r7, #2
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f000 fdb8 	bl	800d994 <__any_on>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d0b2      	beq.n	800cd8e <__gethex+0x1c0>
 800ce28:	f04f 0a03 	mov.w	sl, #3
 800ce2c:	e7b1      	b.n	800cd92 <__gethex+0x1c4>
 800ce2e:	da09      	bge.n	800ce44 <__gethex+0x276>
 800ce30:	1bf7      	subs	r7, r6, r7
 800ce32:	4629      	mov	r1, r5
 800ce34:	463a      	mov	r2, r7
 800ce36:	9802      	ldr	r0, [sp, #8]
 800ce38:	f000 fbce 	bl	800d5d8 <__lshift>
 800ce3c:	1be4      	subs	r4, r4, r7
 800ce3e:	4605      	mov	r5, r0
 800ce40:	f100 0914 	add.w	r9, r0, #20
 800ce44:	f04f 0a00 	mov.w	sl, #0
 800ce48:	e7a8      	b.n	800cd9c <__gethex+0x1ce>
 800ce4a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ce4e:	42a0      	cmp	r0, r4
 800ce50:	dd6a      	ble.n	800cf28 <__gethex+0x35a>
 800ce52:	1b04      	subs	r4, r0, r4
 800ce54:	42a6      	cmp	r6, r4
 800ce56:	dc2e      	bgt.n	800ceb6 <__gethex+0x2e8>
 800ce58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d022      	beq.n	800cea6 <__gethex+0x2d8>
 800ce60:	2b03      	cmp	r3, #3
 800ce62:	d024      	beq.n	800ceae <__gethex+0x2e0>
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d115      	bne.n	800ce94 <__gethex+0x2c6>
 800ce68:	42a6      	cmp	r6, r4
 800ce6a:	d113      	bne.n	800ce94 <__gethex+0x2c6>
 800ce6c:	2e01      	cmp	r6, #1
 800ce6e:	dc0b      	bgt.n	800ce88 <__gethex+0x2ba>
 800ce70:	9a06      	ldr	r2, [sp, #24]
 800ce72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	2301      	movs	r3, #1
 800ce7a:	612b      	str	r3, [r5, #16]
 800ce7c:	f8c9 3000 	str.w	r3, [r9]
 800ce80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce82:	2762      	movs	r7, #98	; 0x62
 800ce84:	601d      	str	r5, [r3, #0]
 800ce86:	e72a      	b.n	800ccde <__gethex+0x110>
 800ce88:	1e71      	subs	r1, r6, #1
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f000 fd82 	bl	800d994 <__any_on>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d1ed      	bne.n	800ce70 <__gethex+0x2a2>
 800ce94:	4629      	mov	r1, r5
 800ce96:	9802      	ldr	r0, [sp, #8]
 800ce98:	f000 f9d2 	bl	800d240 <_Bfree>
 800ce9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce9e:	2300      	movs	r3, #0
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	2750      	movs	r7, #80	; 0x50
 800cea4:	e71b      	b.n	800ccde <__gethex+0x110>
 800cea6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0e1      	beq.n	800ce70 <__gethex+0x2a2>
 800ceac:	e7f2      	b.n	800ce94 <__gethex+0x2c6>
 800ceae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1dd      	bne.n	800ce70 <__gethex+0x2a2>
 800ceb4:	e7ee      	b.n	800ce94 <__gethex+0x2c6>
 800ceb6:	1e67      	subs	r7, r4, #1
 800ceb8:	f1ba 0f00 	cmp.w	sl, #0
 800cebc:	d131      	bne.n	800cf22 <__gethex+0x354>
 800cebe:	b127      	cbz	r7, 800ceca <__gethex+0x2fc>
 800cec0:	4639      	mov	r1, r7
 800cec2:	4628      	mov	r0, r5
 800cec4:	f000 fd66 	bl	800d994 <__any_on>
 800cec8:	4682      	mov	sl, r0
 800ceca:	117a      	asrs	r2, r7, #5
 800cecc:	2301      	movs	r3, #1
 800cece:	f007 071f 	and.w	r7, r7, #31
 800ced2:	fa03 f707 	lsl.w	r7, r3, r7
 800ced6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ceda:	4621      	mov	r1, r4
 800cedc:	421f      	tst	r7, r3
 800cede:	4628      	mov	r0, r5
 800cee0:	bf18      	it	ne
 800cee2:	f04a 0a02 	orrne.w	sl, sl, #2
 800cee6:	1b36      	subs	r6, r6, r4
 800cee8:	f7ff fe22 	bl	800cb30 <rshift>
 800ceec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cef0:	2702      	movs	r7, #2
 800cef2:	f1ba 0f00 	cmp.w	sl, #0
 800cef6:	d048      	beq.n	800cf8a <__gethex+0x3bc>
 800cef8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d015      	beq.n	800cf2c <__gethex+0x35e>
 800cf00:	2b03      	cmp	r3, #3
 800cf02:	d017      	beq.n	800cf34 <__gethex+0x366>
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d109      	bne.n	800cf1c <__gethex+0x34e>
 800cf08:	f01a 0f02 	tst.w	sl, #2
 800cf0c:	d006      	beq.n	800cf1c <__gethex+0x34e>
 800cf0e:	f8d9 3000 	ldr.w	r3, [r9]
 800cf12:	ea4a 0a03 	orr.w	sl, sl, r3
 800cf16:	f01a 0f01 	tst.w	sl, #1
 800cf1a:	d10e      	bne.n	800cf3a <__gethex+0x36c>
 800cf1c:	f047 0710 	orr.w	r7, r7, #16
 800cf20:	e033      	b.n	800cf8a <__gethex+0x3bc>
 800cf22:	f04f 0a01 	mov.w	sl, #1
 800cf26:	e7d0      	b.n	800ceca <__gethex+0x2fc>
 800cf28:	2701      	movs	r7, #1
 800cf2a:	e7e2      	b.n	800cef2 <__gethex+0x324>
 800cf2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf2e:	f1c3 0301 	rsb	r3, r3, #1
 800cf32:	9315      	str	r3, [sp, #84]	; 0x54
 800cf34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0f0      	beq.n	800cf1c <__gethex+0x34e>
 800cf3a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cf3e:	f105 0314 	add.w	r3, r5, #20
 800cf42:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cf46:	eb03 010a 	add.w	r1, r3, sl
 800cf4a:	f04f 0c00 	mov.w	ip, #0
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf58:	d01c      	beq.n	800cf94 <__gethex+0x3c6>
 800cf5a:	3201      	adds	r2, #1
 800cf5c:	6002      	str	r2, [r0, #0]
 800cf5e:	2f02      	cmp	r7, #2
 800cf60:	f105 0314 	add.w	r3, r5, #20
 800cf64:	d138      	bne.n	800cfd8 <__gethex+0x40a>
 800cf66:	f8d8 2000 	ldr.w	r2, [r8]
 800cf6a:	3a01      	subs	r2, #1
 800cf6c:	42b2      	cmp	r2, r6
 800cf6e:	d10a      	bne.n	800cf86 <__gethex+0x3b8>
 800cf70:	1171      	asrs	r1, r6, #5
 800cf72:	2201      	movs	r2, #1
 800cf74:	f006 061f 	and.w	r6, r6, #31
 800cf78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf7c:	fa02 f606 	lsl.w	r6, r2, r6
 800cf80:	421e      	tst	r6, r3
 800cf82:	bf18      	it	ne
 800cf84:	4617      	movne	r7, r2
 800cf86:	f047 0720 	orr.w	r7, r7, #32
 800cf8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf8c:	601d      	str	r5, [r3, #0]
 800cf8e:	9b06      	ldr	r3, [sp, #24]
 800cf90:	601c      	str	r4, [r3, #0]
 800cf92:	e6a4      	b.n	800ccde <__gethex+0x110>
 800cf94:	4299      	cmp	r1, r3
 800cf96:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf9a:	d8d8      	bhi.n	800cf4e <__gethex+0x380>
 800cf9c:	68ab      	ldr	r3, [r5, #8]
 800cf9e:	4599      	cmp	r9, r3
 800cfa0:	db12      	blt.n	800cfc8 <__gethex+0x3fa>
 800cfa2:	6869      	ldr	r1, [r5, #4]
 800cfa4:	9802      	ldr	r0, [sp, #8]
 800cfa6:	3101      	adds	r1, #1
 800cfa8:	f000 f916 	bl	800d1d8 <_Balloc>
 800cfac:	692a      	ldr	r2, [r5, #16]
 800cfae:	3202      	adds	r2, #2
 800cfb0:	f105 010c 	add.w	r1, r5, #12
 800cfb4:	4683      	mov	fp, r0
 800cfb6:	0092      	lsls	r2, r2, #2
 800cfb8:	300c      	adds	r0, #12
 800cfba:	f7fd fa0d 	bl	800a3d8 <memcpy>
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	9802      	ldr	r0, [sp, #8]
 800cfc2:	f000 f93d 	bl	800d240 <_Bfree>
 800cfc6:	465d      	mov	r5, fp
 800cfc8:	692b      	ldr	r3, [r5, #16]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cfd0:	612a      	str	r2, [r5, #16]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	615a      	str	r2, [r3, #20]
 800cfd6:	e7c2      	b.n	800cf5e <__gethex+0x390>
 800cfd8:	692a      	ldr	r2, [r5, #16]
 800cfda:	454a      	cmp	r2, r9
 800cfdc:	dd0b      	ble.n	800cff6 <__gethex+0x428>
 800cfde:	2101      	movs	r1, #1
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f7ff fda5 	bl	800cb30 <rshift>
 800cfe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfea:	3401      	adds	r4, #1
 800cfec:	42a3      	cmp	r3, r4
 800cfee:	f6ff aed9 	blt.w	800cda4 <__gethex+0x1d6>
 800cff2:	2701      	movs	r7, #1
 800cff4:	e7c7      	b.n	800cf86 <__gethex+0x3b8>
 800cff6:	f016 061f 	ands.w	r6, r6, #31
 800cffa:	d0fa      	beq.n	800cff2 <__gethex+0x424>
 800cffc:	449a      	add	sl, r3
 800cffe:	f1c6 0620 	rsb	r6, r6, #32
 800d002:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d006:	f000 f9ab 	bl	800d360 <__hi0bits>
 800d00a:	42b0      	cmp	r0, r6
 800d00c:	dbe7      	blt.n	800cfde <__gethex+0x410>
 800d00e:	e7f0      	b.n	800cff2 <__gethex+0x424>

0800d010 <L_shift>:
 800d010:	f1c2 0208 	rsb	r2, r2, #8
 800d014:	0092      	lsls	r2, r2, #2
 800d016:	b570      	push	{r4, r5, r6, lr}
 800d018:	f1c2 0620 	rsb	r6, r2, #32
 800d01c:	6843      	ldr	r3, [r0, #4]
 800d01e:	6804      	ldr	r4, [r0, #0]
 800d020:	fa03 f506 	lsl.w	r5, r3, r6
 800d024:	432c      	orrs	r4, r5
 800d026:	40d3      	lsrs	r3, r2
 800d028:	6004      	str	r4, [r0, #0]
 800d02a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d02e:	4288      	cmp	r0, r1
 800d030:	d3f4      	bcc.n	800d01c <L_shift+0xc>
 800d032:	bd70      	pop	{r4, r5, r6, pc}

0800d034 <__match>:
 800d034:	b530      	push	{r4, r5, lr}
 800d036:	6803      	ldr	r3, [r0, #0]
 800d038:	3301      	adds	r3, #1
 800d03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03e:	b914      	cbnz	r4, 800d046 <__match+0x12>
 800d040:	6003      	str	r3, [r0, #0]
 800d042:	2001      	movs	r0, #1
 800d044:	bd30      	pop	{r4, r5, pc}
 800d046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d04a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d04e:	2d19      	cmp	r5, #25
 800d050:	bf98      	it	ls
 800d052:	3220      	addls	r2, #32
 800d054:	42a2      	cmp	r2, r4
 800d056:	d0f0      	beq.n	800d03a <__match+0x6>
 800d058:	2000      	movs	r0, #0
 800d05a:	e7f3      	b.n	800d044 <__match+0x10>

0800d05c <__hexnan>:
 800d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	680b      	ldr	r3, [r1, #0]
 800d062:	6801      	ldr	r1, [r0, #0]
 800d064:	115f      	asrs	r7, r3, #5
 800d066:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d06a:	f013 031f 	ands.w	r3, r3, #31
 800d06e:	b087      	sub	sp, #28
 800d070:	bf18      	it	ne
 800d072:	3704      	addne	r7, #4
 800d074:	2500      	movs	r5, #0
 800d076:	1f3e      	subs	r6, r7, #4
 800d078:	4682      	mov	sl, r0
 800d07a:	4690      	mov	r8, r2
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	f847 5c04 	str.w	r5, [r7, #-4]
 800d082:	46b1      	mov	r9, r6
 800d084:	4634      	mov	r4, r6
 800d086:	9502      	str	r5, [sp, #8]
 800d088:	46ab      	mov	fp, r5
 800d08a:	784a      	ldrb	r2, [r1, #1]
 800d08c:	1c4b      	adds	r3, r1, #1
 800d08e:	9303      	str	r3, [sp, #12]
 800d090:	b342      	cbz	r2, 800d0e4 <__hexnan+0x88>
 800d092:	4610      	mov	r0, r2
 800d094:	9105      	str	r1, [sp, #20]
 800d096:	9204      	str	r2, [sp, #16]
 800d098:	f7ff fd84 	bl	800cba4 <__hexdig_fun>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d143      	bne.n	800d128 <__hexnan+0xcc>
 800d0a0:	9a04      	ldr	r2, [sp, #16]
 800d0a2:	9905      	ldr	r1, [sp, #20]
 800d0a4:	2a20      	cmp	r2, #32
 800d0a6:	d818      	bhi.n	800d0da <__hexnan+0x7e>
 800d0a8:	9b02      	ldr	r3, [sp, #8]
 800d0aa:	459b      	cmp	fp, r3
 800d0ac:	dd13      	ble.n	800d0d6 <__hexnan+0x7a>
 800d0ae:	454c      	cmp	r4, r9
 800d0b0:	d206      	bcs.n	800d0c0 <__hexnan+0x64>
 800d0b2:	2d07      	cmp	r5, #7
 800d0b4:	dc04      	bgt.n	800d0c0 <__hexnan+0x64>
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff ffa8 	bl	800d010 <L_shift>
 800d0c0:	4544      	cmp	r4, r8
 800d0c2:	d944      	bls.n	800d14e <__hexnan+0xf2>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f1a4 0904 	sub.w	r9, r4, #4
 800d0ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0ce:	f8cd b008 	str.w	fp, [sp, #8]
 800d0d2:	464c      	mov	r4, r9
 800d0d4:	461d      	mov	r5, r3
 800d0d6:	9903      	ldr	r1, [sp, #12]
 800d0d8:	e7d7      	b.n	800d08a <__hexnan+0x2e>
 800d0da:	2a29      	cmp	r2, #41	; 0x29
 800d0dc:	d14a      	bne.n	800d174 <__hexnan+0x118>
 800d0de:	3102      	adds	r1, #2
 800d0e0:	f8ca 1000 	str.w	r1, [sl]
 800d0e4:	f1bb 0f00 	cmp.w	fp, #0
 800d0e8:	d044      	beq.n	800d174 <__hexnan+0x118>
 800d0ea:	454c      	cmp	r4, r9
 800d0ec:	d206      	bcs.n	800d0fc <__hexnan+0xa0>
 800d0ee:	2d07      	cmp	r5, #7
 800d0f0:	dc04      	bgt.n	800d0fc <__hexnan+0xa0>
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7ff ff8a 	bl	800d010 <L_shift>
 800d0fc:	4544      	cmp	r4, r8
 800d0fe:	d928      	bls.n	800d152 <__hexnan+0xf6>
 800d100:	4643      	mov	r3, r8
 800d102:	f854 2b04 	ldr.w	r2, [r4], #4
 800d106:	f843 2b04 	str.w	r2, [r3], #4
 800d10a:	42a6      	cmp	r6, r4
 800d10c:	d2f9      	bcs.n	800d102 <__hexnan+0xa6>
 800d10e:	2200      	movs	r2, #0
 800d110:	f843 2b04 	str.w	r2, [r3], #4
 800d114:	429e      	cmp	r6, r3
 800d116:	d2fb      	bcs.n	800d110 <__hexnan+0xb4>
 800d118:	6833      	ldr	r3, [r6, #0]
 800d11a:	b91b      	cbnz	r3, 800d124 <__hexnan+0xc8>
 800d11c:	4546      	cmp	r6, r8
 800d11e:	d127      	bne.n	800d170 <__hexnan+0x114>
 800d120:	2301      	movs	r3, #1
 800d122:	6033      	str	r3, [r6, #0]
 800d124:	2005      	movs	r0, #5
 800d126:	e026      	b.n	800d176 <__hexnan+0x11a>
 800d128:	3501      	adds	r5, #1
 800d12a:	2d08      	cmp	r5, #8
 800d12c:	f10b 0b01 	add.w	fp, fp, #1
 800d130:	dd06      	ble.n	800d140 <__hexnan+0xe4>
 800d132:	4544      	cmp	r4, r8
 800d134:	d9cf      	bls.n	800d0d6 <__hexnan+0x7a>
 800d136:	2300      	movs	r3, #0
 800d138:	f844 3c04 	str.w	r3, [r4, #-4]
 800d13c:	2501      	movs	r5, #1
 800d13e:	3c04      	subs	r4, #4
 800d140:	6822      	ldr	r2, [r4, #0]
 800d142:	f000 000f 	and.w	r0, r0, #15
 800d146:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d14a:	6020      	str	r0, [r4, #0]
 800d14c:	e7c3      	b.n	800d0d6 <__hexnan+0x7a>
 800d14e:	2508      	movs	r5, #8
 800d150:	e7c1      	b.n	800d0d6 <__hexnan+0x7a>
 800d152:	9b01      	ldr	r3, [sp, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d0df      	beq.n	800d118 <__hexnan+0xbc>
 800d158:	f04f 32ff 	mov.w	r2, #4294967295
 800d15c:	f1c3 0320 	rsb	r3, r3, #32
 800d160:	fa22 f303 	lsr.w	r3, r2, r3
 800d164:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d168:	401a      	ands	r2, r3
 800d16a:	f847 2c04 	str.w	r2, [r7, #-4]
 800d16e:	e7d3      	b.n	800d118 <__hexnan+0xbc>
 800d170:	3e04      	subs	r6, #4
 800d172:	e7d1      	b.n	800d118 <__hexnan+0xbc>
 800d174:	2004      	movs	r0, #4
 800d176:	b007      	add	sp, #28
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d17c <__locale_ctype_ptr_l>:
 800d17c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d180:	4770      	bx	lr

0800d182 <__localeconv_l>:
 800d182:	30f0      	adds	r0, #240	; 0xf0
 800d184:	4770      	bx	lr
	...

0800d188 <_localeconv_r>:
 800d188:	4b04      	ldr	r3, [pc, #16]	; (800d19c <_localeconv_r+0x14>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6a18      	ldr	r0, [r3, #32]
 800d18e:	4b04      	ldr	r3, [pc, #16]	; (800d1a0 <_localeconv_r+0x18>)
 800d190:	2800      	cmp	r0, #0
 800d192:	bf08      	it	eq
 800d194:	4618      	moveq	r0, r3
 800d196:	30f0      	adds	r0, #240	; 0xf0
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	20002860 	.word	0x20002860
 800d1a0:	200028c4 	.word	0x200028c4

0800d1a4 <malloc>:
 800d1a4:	4b02      	ldr	r3, [pc, #8]	; (800d1b0 <malloc+0xc>)
 800d1a6:	4601      	mov	r1, r0
 800d1a8:	6818      	ldr	r0, [r3, #0]
 800d1aa:	f000 bc71 	b.w	800da90 <_malloc_r>
 800d1ae:	bf00      	nop
 800d1b0:	20002860 	.word	0x20002860

0800d1b4 <__ascii_mbtowc>:
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	b901      	cbnz	r1, 800d1ba <__ascii_mbtowc+0x6>
 800d1b8:	a901      	add	r1, sp, #4
 800d1ba:	b142      	cbz	r2, 800d1ce <__ascii_mbtowc+0x1a>
 800d1bc:	b14b      	cbz	r3, 800d1d2 <__ascii_mbtowc+0x1e>
 800d1be:	7813      	ldrb	r3, [r2, #0]
 800d1c0:	600b      	str	r3, [r1, #0]
 800d1c2:	7812      	ldrb	r2, [r2, #0]
 800d1c4:	1c10      	adds	r0, r2, #0
 800d1c6:	bf18      	it	ne
 800d1c8:	2001      	movne	r0, #1
 800d1ca:	b002      	add	sp, #8
 800d1cc:	4770      	bx	lr
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	e7fb      	b.n	800d1ca <__ascii_mbtowc+0x16>
 800d1d2:	f06f 0001 	mvn.w	r0, #1
 800d1d6:	e7f8      	b.n	800d1ca <__ascii_mbtowc+0x16>

0800d1d8 <_Balloc>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1dc:	4604      	mov	r4, r0
 800d1de:	460e      	mov	r6, r1
 800d1e0:	b93d      	cbnz	r5, 800d1f2 <_Balloc+0x1a>
 800d1e2:	2010      	movs	r0, #16
 800d1e4:	f7ff ffde 	bl	800d1a4 <malloc>
 800d1e8:	6260      	str	r0, [r4, #36]	; 0x24
 800d1ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d1ee:	6005      	str	r5, [r0, #0]
 800d1f0:	60c5      	str	r5, [r0, #12]
 800d1f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d1f4:	68eb      	ldr	r3, [r5, #12]
 800d1f6:	b183      	cbz	r3, 800d21a <_Balloc+0x42>
 800d1f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d200:	b9b8      	cbnz	r0, 800d232 <_Balloc+0x5a>
 800d202:	2101      	movs	r1, #1
 800d204:	fa01 f506 	lsl.w	r5, r1, r6
 800d208:	1d6a      	adds	r2, r5, #5
 800d20a:	0092      	lsls	r2, r2, #2
 800d20c:	4620      	mov	r0, r4
 800d20e:	f000 fbe2 	bl	800d9d6 <_calloc_r>
 800d212:	b160      	cbz	r0, 800d22e <_Balloc+0x56>
 800d214:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d218:	e00e      	b.n	800d238 <_Balloc+0x60>
 800d21a:	2221      	movs	r2, #33	; 0x21
 800d21c:	2104      	movs	r1, #4
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 fbd9 	bl	800d9d6 <_calloc_r>
 800d224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d226:	60e8      	str	r0, [r5, #12]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1e4      	bne.n	800d1f8 <_Balloc+0x20>
 800d22e:	2000      	movs	r0, #0
 800d230:	bd70      	pop	{r4, r5, r6, pc}
 800d232:	6802      	ldr	r2, [r0, #0]
 800d234:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d238:	2300      	movs	r3, #0
 800d23a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d23e:	e7f7      	b.n	800d230 <_Balloc+0x58>

0800d240 <_Bfree>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d244:	4606      	mov	r6, r0
 800d246:	460d      	mov	r5, r1
 800d248:	b93c      	cbnz	r4, 800d25a <_Bfree+0x1a>
 800d24a:	2010      	movs	r0, #16
 800d24c:	f7ff ffaa 	bl	800d1a4 <malloc>
 800d250:	6270      	str	r0, [r6, #36]	; 0x24
 800d252:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d256:	6004      	str	r4, [r0, #0]
 800d258:	60c4      	str	r4, [r0, #12]
 800d25a:	b13d      	cbz	r5, 800d26c <_Bfree+0x2c>
 800d25c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d25e:	686a      	ldr	r2, [r5, #4]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d266:	6029      	str	r1, [r5, #0]
 800d268:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d26c:	bd70      	pop	{r4, r5, r6, pc}

0800d26e <__multadd>:
 800d26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d272:	690d      	ldr	r5, [r1, #16]
 800d274:	461f      	mov	r7, r3
 800d276:	4606      	mov	r6, r0
 800d278:	460c      	mov	r4, r1
 800d27a:	f101 0c14 	add.w	ip, r1, #20
 800d27e:	2300      	movs	r3, #0
 800d280:	f8dc 0000 	ldr.w	r0, [ip]
 800d284:	b281      	uxth	r1, r0
 800d286:	fb02 7101 	mla	r1, r2, r1, r7
 800d28a:	0c0f      	lsrs	r7, r1, #16
 800d28c:	0c00      	lsrs	r0, r0, #16
 800d28e:	fb02 7000 	mla	r0, r2, r0, r7
 800d292:	b289      	uxth	r1, r1
 800d294:	3301      	adds	r3, #1
 800d296:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d29a:	429d      	cmp	r5, r3
 800d29c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d2a0:	f84c 1b04 	str.w	r1, [ip], #4
 800d2a4:	dcec      	bgt.n	800d280 <__multadd+0x12>
 800d2a6:	b1d7      	cbz	r7, 800d2de <__multadd+0x70>
 800d2a8:	68a3      	ldr	r3, [r4, #8]
 800d2aa:	42ab      	cmp	r3, r5
 800d2ac:	dc12      	bgt.n	800d2d4 <__multadd+0x66>
 800d2ae:	6861      	ldr	r1, [r4, #4]
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	3101      	adds	r1, #1
 800d2b4:	f7ff ff90 	bl	800d1d8 <_Balloc>
 800d2b8:	6922      	ldr	r2, [r4, #16]
 800d2ba:	3202      	adds	r2, #2
 800d2bc:	f104 010c 	add.w	r1, r4, #12
 800d2c0:	4680      	mov	r8, r0
 800d2c2:	0092      	lsls	r2, r2, #2
 800d2c4:	300c      	adds	r0, #12
 800d2c6:	f7fd f887 	bl	800a3d8 <memcpy>
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f7ff ffb7 	bl	800d240 <_Bfree>
 800d2d2:	4644      	mov	r4, r8
 800d2d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2d8:	3501      	adds	r5, #1
 800d2da:	615f      	str	r7, [r3, #20]
 800d2dc:	6125      	str	r5, [r4, #16]
 800d2de:	4620      	mov	r0, r4
 800d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d2e4 <__s2b>:
 800d2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2e8:	460c      	mov	r4, r1
 800d2ea:	4615      	mov	r5, r2
 800d2ec:	461f      	mov	r7, r3
 800d2ee:	2209      	movs	r2, #9
 800d2f0:	3308      	adds	r3, #8
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	db20      	blt.n	800d342 <__s2b+0x5e>
 800d300:	4630      	mov	r0, r6
 800d302:	f7ff ff69 	bl	800d1d8 <_Balloc>
 800d306:	9b08      	ldr	r3, [sp, #32]
 800d308:	6143      	str	r3, [r0, #20]
 800d30a:	2d09      	cmp	r5, #9
 800d30c:	f04f 0301 	mov.w	r3, #1
 800d310:	6103      	str	r3, [r0, #16]
 800d312:	dd19      	ble.n	800d348 <__s2b+0x64>
 800d314:	f104 0809 	add.w	r8, r4, #9
 800d318:	46c1      	mov	r9, r8
 800d31a:	442c      	add	r4, r5
 800d31c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d320:	4601      	mov	r1, r0
 800d322:	3b30      	subs	r3, #48	; 0x30
 800d324:	220a      	movs	r2, #10
 800d326:	4630      	mov	r0, r6
 800d328:	f7ff ffa1 	bl	800d26e <__multadd>
 800d32c:	45a1      	cmp	r9, r4
 800d32e:	d1f5      	bne.n	800d31c <__s2b+0x38>
 800d330:	eb08 0405 	add.w	r4, r8, r5
 800d334:	3c08      	subs	r4, #8
 800d336:	1b2d      	subs	r5, r5, r4
 800d338:	1963      	adds	r3, r4, r5
 800d33a:	42bb      	cmp	r3, r7
 800d33c:	db07      	blt.n	800d34e <__s2b+0x6a>
 800d33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d342:	0052      	lsls	r2, r2, #1
 800d344:	3101      	adds	r1, #1
 800d346:	e7d9      	b.n	800d2fc <__s2b+0x18>
 800d348:	340a      	adds	r4, #10
 800d34a:	2509      	movs	r5, #9
 800d34c:	e7f3      	b.n	800d336 <__s2b+0x52>
 800d34e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d352:	4601      	mov	r1, r0
 800d354:	3b30      	subs	r3, #48	; 0x30
 800d356:	220a      	movs	r2, #10
 800d358:	4630      	mov	r0, r6
 800d35a:	f7ff ff88 	bl	800d26e <__multadd>
 800d35e:	e7eb      	b.n	800d338 <__s2b+0x54>

0800d360 <__hi0bits>:
 800d360:	0c02      	lsrs	r2, r0, #16
 800d362:	0412      	lsls	r2, r2, #16
 800d364:	4603      	mov	r3, r0
 800d366:	b9b2      	cbnz	r2, 800d396 <__hi0bits+0x36>
 800d368:	0403      	lsls	r3, r0, #16
 800d36a:	2010      	movs	r0, #16
 800d36c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d370:	bf04      	itt	eq
 800d372:	021b      	lsleq	r3, r3, #8
 800d374:	3008      	addeq	r0, #8
 800d376:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d37a:	bf04      	itt	eq
 800d37c:	011b      	lsleq	r3, r3, #4
 800d37e:	3004      	addeq	r0, #4
 800d380:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d384:	bf04      	itt	eq
 800d386:	009b      	lsleq	r3, r3, #2
 800d388:	3002      	addeq	r0, #2
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	db06      	blt.n	800d39c <__hi0bits+0x3c>
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	d503      	bpl.n	800d39a <__hi0bits+0x3a>
 800d392:	3001      	adds	r0, #1
 800d394:	4770      	bx	lr
 800d396:	2000      	movs	r0, #0
 800d398:	e7e8      	b.n	800d36c <__hi0bits+0xc>
 800d39a:	2020      	movs	r0, #32
 800d39c:	4770      	bx	lr

0800d39e <__lo0bits>:
 800d39e:	6803      	ldr	r3, [r0, #0]
 800d3a0:	f013 0207 	ands.w	r2, r3, #7
 800d3a4:	4601      	mov	r1, r0
 800d3a6:	d00b      	beq.n	800d3c0 <__lo0bits+0x22>
 800d3a8:	07da      	lsls	r2, r3, #31
 800d3aa:	d423      	bmi.n	800d3f4 <__lo0bits+0x56>
 800d3ac:	0798      	lsls	r0, r3, #30
 800d3ae:	bf49      	itett	mi
 800d3b0:	085b      	lsrmi	r3, r3, #1
 800d3b2:	089b      	lsrpl	r3, r3, #2
 800d3b4:	2001      	movmi	r0, #1
 800d3b6:	600b      	strmi	r3, [r1, #0]
 800d3b8:	bf5c      	itt	pl
 800d3ba:	600b      	strpl	r3, [r1, #0]
 800d3bc:	2002      	movpl	r0, #2
 800d3be:	4770      	bx	lr
 800d3c0:	b298      	uxth	r0, r3
 800d3c2:	b9a8      	cbnz	r0, 800d3f0 <__lo0bits+0x52>
 800d3c4:	0c1b      	lsrs	r3, r3, #16
 800d3c6:	2010      	movs	r0, #16
 800d3c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d3cc:	bf04      	itt	eq
 800d3ce:	0a1b      	lsreq	r3, r3, #8
 800d3d0:	3008      	addeq	r0, #8
 800d3d2:	071a      	lsls	r2, r3, #28
 800d3d4:	bf04      	itt	eq
 800d3d6:	091b      	lsreq	r3, r3, #4
 800d3d8:	3004      	addeq	r0, #4
 800d3da:	079a      	lsls	r2, r3, #30
 800d3dc:	bf04      	itt	eq
 800d3de:	089b      	lsreq	r3, r3, #2
 800d3e0:	3002      	addeq	r0, #2
 800d3e2:	07da      	lsls	r2, r3, #31
 800d3e4:	d402      	bmi.n	800d3ec <__lo0bits+0x4e>
 800d3e6:	085b      	lsrs	r3, r3, #1
 800d3e8:	d006      	beq.n	800d3f8 <__lo0bits+0x5a>
 800d3ea:	3001      	adds	r0, #1
 800d3ec:	600b      	str	r3, [r1, #0]
 800d3ee:	4770      	bx	lr
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	e7e9      	b.n	800d3c8 <__lo0bits+0x2a>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	4770      	bx	lr
 800d3f8:	2020      	movs	r0, #32
 800d3fa:	4770      	bx	lr

0800d3fc <__i2b>:
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	460c      	mov	r4, r1
 800d400:	2101      	movs	r1, #1
 800d402:	f7ff fee9 	bl	800d1d8 <_Balloc>
 800d406:	2201      	movs	r2, #1
 800d408:	6144      	str	r4, [r0, #20]
 800d40a:	6102      	str	r2, [r0, #16]
 800d40c:	bd10      	pop	{r4, pc}

0800d40e <__multiply>:
 800d40e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d412:	4614      	mov	r4, r2
 800d414:	690a      	ldr	r2, [r1, #16]
 800d416:	6923      	ldr	r3, [r4, #16]
 800d418:	429a      	cmp	r2, r3
 800d41a:	bfb8      	it	lt
 800d41c:	460b      	movlt	r3, r1
 800d41e:	4688      	mov	r8, r1
 800d420:	bfbc      	itt	lt
 800d422:	46a0      	movlt	r8, r4
 800d424:	461c      	movlt	r4, r3
 800d426:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d42a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d42e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d432:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d436:	eb07 0609 	add.w	r6, r7, r9
 800d43a:	42b3      	cmp	r3, r6
 800d43c:	bfb8      	it	lt
 800d43e:	3101      	addlt	r1, #1
 800d440:	f7ff feca 	bl	800d1d8 <_Balloc>
 800d444:	f100 0514 	add.w	r5, r0, #20
 800d448:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d44c:	462b      	mov	r3, r5
 800d44e:	2200      	movs	r2, #0
 800d450:	4573      	cmp	r3, lr
 800d452:	d316      	bcc.n	800d482 <__multiply+0x74>
 800d454:	f104 0214 	add.w	r2, r4, #20
 800d458:	f108 0114 	add.w	r1, r8, #20
 800d45c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d460:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	9b00      	ldr	r3, [sp, #0]
 800d468:	9201      	str	r2, [sp, #4]
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d80c      	bhi.n	800d488 <__multiply+0x7a>
 800d46e:	2e00      	cmp	r6, #0
 800d470:	dd03      	ble.n	800d47a <__multiply+0x6c>
 800d472:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d476:	2b00      	cmp	r3, #0
 800d478:	d05d      	beq.n	800d536 <__multiply+0x128>
 800d47a:	6106      	str	r6, [r0, #16]
 800d47c:	b003      	add	sp, #12
 800d47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d482:	f843 2b04 	str.w	r2, [r3], #4
 800d486:	e7e3      	b.n	800d450 <__multiply+0x42>
 800d488:	f8b2 b000 	ldrh.w	fp, [r2]
 800d48c:	f1bb 0f00 	cmp.w	fp, #0
 800d490:	d023      	beq.n	800d4da <__multiply+0xcc>
 800d492:	4689      	mov	r9, r1
 800d494:	46ac      	mov	ip, r5
 800d496:	f04f 0800 	mov.w	r8, #0
 800d49a:	f859 4b04 	ldr.w	r4, [r9], #4
 800d49e:	f8dc a000 	ldr.w	sl, [ip]
 800d4a2:	b2a3      	uxth	r3, r4
 800d4a4:	fa1f fa8a 	uxth.w	sl, sl
 800d4a8:	fb0b a303 	mla	r3, fp, r3, sl
 800d4ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d4b0:	f8dc 4000 	ldr.w	r4, [ip]
 800d4b4:	4443      	add	r3, r8
 800d4b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d4ba:	fb0b 840a 	mla	r4, fp, sl, r8
 800d4be:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d4c2:	46e2      	mov	sl, ip
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d4ca:	454f      	cmp	r7, r9
 800d4cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d4d0:	f84a 3b04 	str.w	r3, [sl], #4
 800d4d4:	d82b      	bhi.n	800d52e <__multiply+0x120>
 800d4d6:	f8cc 8004 	str.w	r8, [ip, #4]
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d4e0:	3204      	adds	r2, #4
 800d4e2:	f1ba 0f00 	cmp.w	sl, #0
 800d4e6:	d020      	beq.n	800d52a <__multiply+0x11c>
 800d4e8:	682b      	ldr	r3, [r5, #0]
 800d4ea:	4689      	mov	r9, r1
 800d4ec:	46a8      	mov	r8, r5
 800d4ee:	f04f 0b00 	mov.w	fp, #0
 800d4f2:	f8b9 c000 	ldrh.w	ip, [r9]
 800d4f6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d4fa:	fb0a 440c 	mla	r4, sl, ip, r4
 800d4fe:	445c      	add	r4, fp
 800d500:	46c4      	mov	ip, r8
 800d502:	b29b      	uxth	r3, r3
 800d504:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d508:	f84c 3b04 	str.w	r3, [ip], #4
 800d50c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d510:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d514:	0c1b      	lsrs	r3, r3, #16
 800d516:	fb0a b303 	mla	r3, sl, r3, fp
 800d51a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d51e:	454f      	cmp	r7, r9
 800d520:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d524:	d805      	bhi.n	800d532 <__multiply+0x124>
 800d526:	f8c8 3004 	str.w	r3, [r8, #4]
 800d52a:	3504      	adds	r5, #4
 800d52c:	e79b      	b.n	800d466 <__multiply+0x58>
 800d52e:	46d4      	mov	ip, sl
 800d530:	e7b3      	b.n	800d49a <__multiply+0x8c>
 800d532:	46e0      	mov	r8, ip
 800d534:	e7dd      	b.n	800d4f2 <__multiply+0xe4>
 800d536:	3e01      	subs	r6, #1
 800d538:	e799      	b.n	800d46e <__multiply+0x60>
	...

0800d53c <__pow5mult>:
 800d53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d540:	4615      	mov	r5, r2
 800d542:	f012 0203 	ands.w	r2, r2, #3
 800d546:	4606      	mov	r6, r0
 800d548:	460f      	mov	r7, r1
 800d54a:	d007      	beq.n	800d55c <__pow5mult+0x20>
 800d54c:	3a01      	subs	r2, #1
 800d54e:	4c21      	ldr	r4, [pc, #132]	; (800d5d4 <__pow5mult+0x98>)
 800d550:	2300      	movs	r3, #0
 800d552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d556:	f7ff fe8a 	bl	800d26e <__multadd>
 800d55a:	4607      	mov	r7, r0
 800d55c:	10ad      	asrs	r5, r5, #2
 800d55e:	d035      	beq.n	800d5cc <__pow5mult+0x90>
 800d560:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d562:	b93c      	cbnz	r4, 800d574 <__pow5mult+0x38>
 800d564:	2010      	movs	r0, #16
 800d566:	f7ff fe1d 	bl	800d1a4 <malloc>
 800d56a:	6270      	str	r0, [r6, #36]	; 0x24
 800d56c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d570:	6004      	str	r4, [r0, #0]
 800d572:	60c4      	str	r4, [r0, #12]
 800d574:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d57c:	b94c      	cbnz	r4, 800d592 <__pow5mult+0x56>
 800d57e:	f240 2171 	movw	r1, #625	; 0x271
 800d582:	4630      	mov	r0, r6
 800d584:	f7ff ff3a 	bl	800d3fc <__i2b>
 800d588:	2300      	movs	r3, #0
 800d58a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d58e:	4604      	mov	r4, r0
 800d590:	6003      	str	r3, [r0, #0]
 800d592:	f04f 0800 	mov.w	r8, #0
 800d596:	07eb      	lsls	r3, r5, #31
 800d598:	d50a      	bpl.n	800d5b0 <__pow5mult+0x74>
 800d59a:	4639      	mov	r1, r7
 800d59c:	4622      	mov	r2, r4
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7ff ff35 	bl	800d40e <__multiply>
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	4681      	mov	r9, r0
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	f7ff fe49 	bl	800d240 <_Bfree>
 800d5ae:	464f      	mov	r7, r9
 800d5b0:	106d      	asrs	r5, r5, #1
 800d5b2:	d00b      	beq.n	800d5cc <__pow5mult+0x90>
 800d5b4:	6820      	ldr	r0, [r4, #0]
 800d5b6:	b938      	cbnz	r0, 800d5c8 <__pow5mult+0x8c>
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f7ff ff26 	bl	800d40e <__multiply>
 800d5c2:	6020      	str	r0, [r4, #0]
 800d5c4:	f8c0 8000 	str.w	r8, [r0]
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	e7e4      	b.n	800d596 <__pow5mult+0x5a>
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d2:	bf00      	nop
 800d5d4:	08010090 	.word	0x08010090

0800d5d8 <__lshift>:
 800d5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5dc:	460c      	mov	r4, r1
 800d5de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5e2:	6923      	ldr	r3, [r4, #16]
 800d5e4:	6849      	ldr	r1, [r1, #4]
 800d5e6:	eb0a 0903 	add.w	r9, sl, r3
 800d5ea:	68a3      	ldr	r3, [r4, #8]
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	4616      	mov	r6, r2
 800d5f0:	f109 0501 	add.w	r5, r9, #1
 800d5f4:	42ab      	cmp	r3, r5
 800d5f6:	db32      	blt.n	800d65e <__lshift+0x86>
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	f7ff fded 	bl	800d1d8 <_Balloc>
 800d5fe:	2300      	movs	r3, #0
 800d600:	4680      	mov	r8, r0
 800d602:	f100 0114 	add.w	r1, r0, #20
 800d606:	461a      	mov	r2, r3
 800d608:	4553      	cmp	r3, sl
 800d60a:	db2b      	blt.n	800d664 <__lshift+0x8c>
 800d60c:	6920      	ldr	r0, [r4, #16]
 800d60e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d612:	f104 0314 	add.w	r3, r4, #20
 800d616:	f016 021f 	ands.w	r2, r6, #31
 800d61a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d61e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d622:	d025      	beq.n	800d670 <__lshift+0x98>
 800d624:	f1c2 0e20 	rsb	lr, r2, #32
 800d628:	2000      	movs	r0, #0
 800d62a:	681e      	ldr	r6, [r3, #0]
 800d62c:	468a      	mov	sl, r1
 800d62e:	4096      	lsls	r6, r2
 800d630:	4330      	orrs	r0, r6
 800d632:	f84a 0b04 	str.w	r0, [sl], #4
 800d636:	f853 0b04 	ldr.w	r0, [r3], #4
 800d63a:	459c      	cmp	ip, r3
 800d63c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d640:	d814      	bhi.n	800d66c <__lshift+0x94>
 800d642:	6048      	str	r0, [r1, #4]
 800d644:	b108      	cbz	r0, 800d64a <__lshift+0x72>
 800d646:	f109 0502 	add.w	r5, r9, #2
 800d64a:	3d01      	subs	r5, #1
 800d64c:	4638      	mov	r0, r7
 800d64e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d652:	4621      	mov	r1, r4
 800d654:	f7ff fdf4 	bl	800d240 <_Bfree>
 800d658:	4640      	mov	r0, r8
 800d65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d65e:	3101      	adds	r1, #1
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	e7c7      	b.n	800d5f4 <__lshift+0x1c>
 800d664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d668:	3301      	adds	r3, #1
 800d66a:	e7cd      	b.n	800d608 <__lshift+0x30>
 800d66c:	4651      	mov	r1, sl
 800d66e:	e7dc      	b.n	800d62a <__lshift+0x52>
 800d670:	3904      	subs	r1, #4
 800d672:	f853 2b04 	ldr.w	r2, [r3], #4
 800d676:	f841 2f04 	str.w	r2, [r1, #4]!
 800d67a:	459c      	cmp	ip, r3
 800d67c:	d8f9      	bhi.n	800d672 <__lshift+0x9a>
 800d67e:	e7e4      	b.n	800d64a <__lshift+0x72>

0800d680 <__mcmp>:
 800d680:	6903      	ldr	r3, [r0, #16]
 800d682:	690a      	ldr	r2, [r1, #16]
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	b530      	push	{r4, r5, lr}
 800d688:	d10c      	bne.n	800d6a4 <__mcmp+0x24>
 800d68a:	0092      	lsls	r2, r2, #2
 800d68c:	3014      	adds	r0, #20
 800d68e:	3114      	adds	r1, #20
 800d690:	1884      	adds	r4, r0, r2
 800d692:	4411      	add	r1, r2
 800d694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d69c:	4295      	cmp	r5, r2
 800d69e:	d003      	beq.n	800d6a8 <__mcmp+0x28>
 800d6a0:	d305      	bcc.n	800d6ae <__mcmp+0x2e>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	bd30      	pop	{r4, r5, pc}
 800d6a8:	42a0      	cmp	r0, r4
 800d6aa:	d3f3      	bcc.n	800d694 <__mcmp+0x14>
 800d6ac:	e7fa      	b.n	800d6a4 <__mcmp+0x24>
 800d6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b2:	e7f7      	b.n	800d6a4 <__mcmp+0x24>

0800d6b4 <__mdiff>:
 800d6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6b8:	460d      	mov	r5, r1
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4628      	mov	r0, r5
 800d6c0:	4614      	mov	r4, r2
 800d6c2:	f7ff ffdd 	bl	800d680 <__mcmp>
 800d6c6:	1e06      	subs	r6, r0, #0
 800d6c8:	d108      	bne.n	800d6dc <__mdiff+0x28>
 800d6ca:	4631      	mov	r1, r6
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff fd83 	bl	800d1d8 <_Balloc>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6dc:	bfa4      	itt	ge
 800d6de:	4623      	movge	r3, r4
 800d6e0:	462c      	movge	r4, r5
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	6861      	ldr	r1, [r4, #4]
 800d6e6:	bfa6      	itte	ge
 800d6e8:	461d      	movge	r5, r3
 800d6ea:	2600      	movge	r6, #0
 800d6ec:	2601      	movlt	r6, #1
 800d6ee:	f7ff fd73 	bl	800d1d8 <_Balloc>
 800d6f2:	692b      	ldr	r3, [r5, #16]
 800d6f4:	60c6      	str	r6, [r0, #12]
 800d6f6:	6926      	ldr	r6, [r4, #16]
 800d6f8:	f105 0914 	add.w	r9, r5, #20
 800d6fc:	f104 0214 	add.w	r2, r4, #20
 800d700:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d704:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d708:	f100 0514 	add.w	r5, r0, #20
 800d70c:	f04f 0e00 	mov.w	lr, #0
 800d710:	f852 ab04 	ldr.w	sl, [r2], #4
 800d714:	f859 4b04 	ldr.w	r4, [r9], #4
 800d718:	fa1e f18a 	uxtah	r1, lr, sl
 800d71c:	b2a3      	uxth	r3, r4
 800d71e:	1ac9      	subs	r1, r1, r3
 800d720:	0c23      	lsrs	r3, r4, #16
 800d722:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d726:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d72a:	b289      	uxth	r1, r1
 800d72c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d730:	45c8      	cmp	r8, r9
 800d732:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d736:	4694      	mov	ip, r2
 800d738:	f845 3b04 	str.w	r3, [r5], #4
 800d73c:	d8e8      	bhi.n	800d710 <__mdiff+0x5c>
 800d73e:	45bc      	cmp	ip, r7
 800d740:	d304      	bcc.n	800d74c <__mdiff+0x98>
 800d742:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d746:	b183      	cbz	r3, 800d76a <__mdiff+0xb6>
 800d748:	6106      	str	r6, [r0, #16]
 800d74a:	e7c5      	b.n	800d6d8 <__mdiff+0x24>
 800d74c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d750:	fa1e f381 	uxtah	r3, lr, r1
 800d754:	141a      	asrs	r2, r3, #16
 800d756:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d760:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d764:	f845 3b04 	str.w	r3, [r5], #4
 800d768:	e7e9      	b.n	800d73e <__mdiff+0x8a>
 800d76a:	3e01      	subs	r6, #1
 800d76c:	e7e9      	b.n	800d742 <__mdiff+0x8e>
	...

0800d770 <__ulp>:
 800d770:	4b12      	ldr	r3, [pc, #72]	; (800d7bc <__ulp+0x4c>)
 800d772:	ee10 2a90 	vmov	r2, s1
 800d776:	401a      	ands	r2, r3
 800d778:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd04      	ble.n	800d78a <__ulp+0x1a>
 800d780:	2000      	movs	r0, #0
 800d782:	4619      	mov	r1, r3
 800d784:	ec41 0b10 	vmov	d0, r0, r1
 800d788:	4770      	bx	lr
 800d78a:	425b      	negs	r3, r3
 800d78c:	151b      	asrs	r3, r3, #20
 800d78e:	2b13      	cmp	r3, #19
 800d790:	f04f 0000 	mov.w	r0, #0
 800d794:	f04f 0100 	mov.w	r1, #0
 800d798:	dc04      	bgt.n	800d7a4 <__ulp+0x34>
 800d79a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d79e:	fa42 f103 	asr.w	r1, r2, r3
 800d7a2:	e7ef      	b.n	800d784 <__ulp+0x14>
 800d7a4:	3b14      	subs	r3, #20
 800d7a6:	2b1e      	cmp	r3, #30
 800d7a8:	f04f 0201 	mov.w	r2, #1
 800d7ac:	bfda      	itte	le
 800d7ae:	f1c3 031f 	rsble	r3, r3, #31
 800d7b2:	fa02 f303 	lslle.w	r3, r2, r3
 800d7b6:	4613      	movgt	r3, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	e7e3      	b.n	800d784 <__ulp+0x14>
 800d7bc:	7ff00000 	.word	0x7ff00000

0800d7c0 <__b2d>:
 800d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c2:	6905      	ldr	r5, [r0, #16]
 800d7c4:	f100 0714 	add.w	r7, r0, #20
 800d7c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d7cc:	1f2e      	subs	r6, r5, #4
 800d7ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f7ff fdc4 	bl	800d360 <__hi0bits>
 800d7d8:	f1c0 0320 	rsb	r3, r0, #32
 800d7dc:	280a      	cmp	r0, #10
 800d7de:	600b      	str	r3, [r1, #0]
 800d7e0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d858 <__b2d+0x98>
 800d7e4:	dc14      	bgt.n	800d810 <__b2d+0x50>
 800d7e6:	f1c0 0e0b 	rsb	lr, r0, #11
 800d7ea:	fa24 f10e 	lsr.w	r1, r4, lr
 800d7ee:	42b7      	cmp	r7, r6
 800d7f0:	ea41 030c 	orr.w	r3, r1, ip
 800d7f4:	bf34      	ite	cc
 800d7f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d7fa:	2100      	movcs	r1, #0
 800d7fc:	3015      	adds	r0, #21
 800d7fe:	fa04 f000 	lsl.w	r0, r4, r0
 800d802:	fa21 f10e 	lsr.w	r1, r1, lr
 800d806:	ea40 0201 	orr.w	r2, r0, r1
 800d80a:	ec43 2b10 	vmov	d0, r2, r3
 800d80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d810:	42b7      	cmp	r7, r6
 800d812:	bf3a      	itte	cc
 800d814:	f1a5 0608 	subcc.w	r6, r5, #8
 800d818:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d81c:	2100      	movcs	r1, #0
 800d81e:	380b      	subs	r0, #11
 800d820:	d015      	beq.n	800d84e <__b2d+0x8e>
 800d822:	4084      	lsls	r4, r0
 800d824:	f1c0 0520 	rsb	r5, r0, #32
 800d828:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d82c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d830:	42be      	cmp	r6, r7
 800d832:	fa21 fc05 	lsr.w	ip, r1, r5
 800d836:	ea44 030c 	orr.w	r3, r4, ip
 800d83a:	bf8c      	ite	hi
 800d83c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d840:	2400      	movls	r4, #0
 800d842:	fa01 f000 	lsl.w	r0, r1, r0
 800d846:	40ec      	lsrs	r4, r5
 800d848:	ea40 0204 	orr.w	r2, r0, r4
 800d84c:	e7dd      	b.n	800d80a <__b2d+0x4a>
 800d84e:	ea44 030c 	orr.w	r3, r4, ip
 800d852:	460a      	mov	r2, r1
 800d854:	e7d9      	b.n	800d80a <__b2d+0x4a>
 800d856:	bf00      	nop
 800d858:	3ff00000 	.word	0x3ff00000

0800d85c <__d2b>:
 800d85c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d860:	460e      	mov	r6, r1
 800d862:	2101      	movs	r1, #1
 800d864:	ec59 8b10 	vmov	r8, r9, d0
 800d868:	4615      	mov	r5, r2
 800d86a:	f7ff fcb5 	bl	800d1d8 <_Balloc>
 800d86e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d872:	4607      	mov	r7, r0
 800d874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d878:	bb34      	cbnz	r4, 800d8c8 <__d2b+0x6c>
 800d87a:	9301      	str	r3, [sp, #4]
 800d87c:	f1b8 0300 	subs.w	r3, r8, #0
 800d880:	d027      	beq.n	800d8d2 <__d2b+0x76>
 800d882:	a802      	add	r0, sp, #8
 800d884:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d888:	f7ff fd89 	bl	800d39e <__lo0bits>
 800d88c:	9900      	ldr	r1, [sp, #0]
 800d88e:	b1f0      	cbz	r0, 800d8ce <__d2b+0x72>
 800d890:	9a01      	ldr	r2, [sp, #4]
 800d892:	f1c0 0320 	rsb	r3, r0, #32
 800d896:	fa02 f303 	lsl.w	r3, r2, r3
 800d89a:	430b      	orrs	r3, r1
 800d89c:	40c2      	lsrs	r2, r0
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	9201      	str	r2, [sp, #4]
 800d8a2:	9b01      	ldr	r3, [sp, #4]
 800d8a4:	61bb      	str	r3, [r7, #24]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	bf14      	ite	ne
 800d8aa:	2102      	movne	r1, #2
 800d8ac:	2101      	moveq	r1, #1
 800d8ae:	6139      	str	r1, [r7, #16]
 800d8b0:	b1c4      	cbz	r4, 800d8e4 <__d2b+0x88>
 800d8b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d8b6:	4404      	add	r4, r0
 800d8b8:	6034      	str	r4, [r6, #0]
 800d8ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d8be:	6028      	str	r0, [r5, #0]
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	b003      	add	sp, #12
 800d8c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8cc:	e7d5      	b.n	800d87a <__d2b+0x1e>
 800d8ce:	6179      	str	r1, [r7, #20]
 800d8d0:	e7e7      	b.n	800d8a2 <__d2b+0x46>
 800d8d2:	a801      	add	r0, sp, #4
 800d8d4:	f7ff fd63 	bl	800d39e <__lo0bits>
 800d8d8:	9b01      	ldr	r3, [sp, #4]
 800d8da:	617b      	str	r3, [r7, #20]
 800d8dc:	2101      	movs	r1, #1
 800d8de:	6139      	str	r1, [r7, #16]
 800d8e0:	3020      	adds	r0, #32
 800d8e2:	e7e5      	b.n	800d8b0 <__d2b+0x54>
 800d8e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d8e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d8ec:	6030      	str	r0, [r6, #0]
 800d8ee:	6918      	ldr	r0, [r3, #16]
 800d8f0:	f7ff fd36 	bl	800d360 <__hi0bits>
 800d8f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d8f8:	e7e1      	b.n	800d8be <__d2b+0x62>

0800d8fa <__ratio>:
 800d8fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fe:	4688      	mov	r8, r1
 800d900:	4669      	mov	r1, sp
 800d902:	4681      	mov	r9, r0
 800d904:	f7ff ff5c 	bl	800d7c0 <__b2d>
 800d908:	a901      	add	r1, sp, #4
 800d90a:	4640      	mov	r0, r8
 800d90c:	ec57 6b10 	vmov	r6, r7, d0
 800d910:	f7ff ff56 	bl	800d7c0 <__b2d>
 800d914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d918:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d91c:	eba3 0c02 	sub.w	ip, r3, r2
 800d920:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d924:	1a9b      	subs	r3, r3, r2
 800d926:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d92a:	ec5b ab10 	vmov	sl, fp, d0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bfce      	itee	gt
 800d932:	463a      	movgt	r2, r7
 800d934:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d938:	465a      	movle	r2, fp
 800d93a:	4659      	mov	r1, fp
 800d93c:	463d      	mov	r5, r7
 800d93e:	bfd4      	ite	le
 800d940:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d944:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d948:	4630      	mov	r0, r6
 800d94a:	ee10 2a10 	vmov	r2, s0
 800d94e:	460b      	mov	r3, r1
 800d950:	4629      	mov	r1, r5
 800d952:	f7f2 ffa3 	bl	800089c <__aeabi_ddiv>
 800d956:	ec41 0b10 	vmov	d0, r0, r1
 800d95a:	b003      	add	sp, #12
 800d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d960 <__copybits>:
 800d960:	3901      	subs	r1, #1
 800d962:	b510      	push	{r4, lr}
 800d964:	1149      	asrs	r1, r1, #5
 800d966:	6914      	ldr	r4, [r2, #16]
 800d968:	3101      	adds	r1, #1
 800d96a:	f102 0314 	add.w	r3, r2, #20
 800d96e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d972:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d976:	42a3      	cmp	r3, r4
 800d978:	4602      	mov	r2, r0
 800d97a:	d303      	bcc.n	800d984 <__copybits+0x24>
 800d97c:	2300      	movs	r3, #0
 800d97e:	428a      	cmp	r2, r1
 800d980:	d305      	bcc.n	800d98e <__copybits+0x2e>
 800d982:	bd10      	pop	{r4, pc}
 800d984:	f853 2b04 	ldr.w	r2, [r3], #4
 800d988:	f840 2b04 	str.w	r2, [r0], #4
 800d98c:	e7f3      	b.n	800d976 <__copybits+0x16>
 800d98e:	f842 3b04 	str.w	r3, [r2], #4
 800d992:	e7f4      	b.n	800d97e <__copybits+0x1e>

0800d994 <__any_on>:
 800d994:	f100 0214 	add.w	r2, r0, #20
 800d998:	6900      	ldr	r0, [r0, #16]
 800d99a:	114b      	asrs	r3, r1, #5
 800d99c:	4298      	cmp	r0, r3
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	db11      	blt.n	800d9c6 <__any_on+0x32>
 800d9a2:	dd0a      	ble.n	800d9ba <__any_on+0x26>
 800d9a4:	f011 011f 	ands.w	r1, r1, #31
 800d9a8:	d007      	beq.n	800d9ba <__any_on+0x26>
 800d9aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d9ae:	fa24 f001 	lsr.w	r0, r4, r1
 800d9b2:	fa00 f101 	lsl.w	r1, r0, r1
 800d9b6:	428c      	cmp	r4, r1
 800d9b8:	d10b      	bne.n	800d9d2 <__any_on+0x3e>
 800d9ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d803      	bhi.n	800d9ca <__any_on+0x36>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	bd10      	pop	{r4, pc}
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	e7f7      	b.n	800d9ba <__any_on+0x26>
 800d9ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9ce:	2900      	cmp	r1, #0
 800d9d0:	d0f5      	beq.n	800d9be <__any_on+0x2a>
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	e7f6      	b.n	800d9c4 <__any_on+0x30>

0800d9d6 <_calloc_r>:
 800d9d6:	b538      	push	{r3, r4, r5, lr}
 800d9d8:	fb02 f401 	mul.w	r4, r2, r1
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f000 f857 	bl	800da90 <_malloc_r>
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	b118      	cbz	r0, 800d9ee <_calloc_r+0x18>
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	f7fc fd00 	bl	800a3ee <memset>
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d9f4 <_free_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	2900      	cmp	r1, #0
 800d9fa:	d045      	beq.n	800da88 <_free_r+0x94>
 800d9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da00:	1f0c      	subs	r4, r1, #4
 800da02:	2b00      	cmp	r3, #0
 800da04:	bfb8      	it	lt
 800da06:	18e4      	addlt	r4, r4, r3
 800da08:	f000 fa36 	bl	800de78 <__malloc_lock>
 800da0c:	4a1f      	ldr	r2, [pc, #124]	; (800da8c <_free_r+0x98>)
 800da0e:	6813      	ldr	r3, [r2, #0]
 800da10:	4610      	mov	r0, r2
 800da12:	b933      	cbnz	r3, 800da22 <_free_r+0x2e>
 800da14:	6063      	str	r3, [r4, #4]
 800da16:	6014      	str	r4, [r2, #0]
 800da18:	4628      	mov	r0, r5
 800da1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da1e:	f000 ba2c 	b.w	800de7a <__malloc_unlock>
 800da22:	42a3      	cmp	r3, r4
 800da24:	d90c      	bls.n	800da40 <_free_r+0x4c>
 800da26:	6821      	ldr	r1, [r4, #0]
 800da28:	1862      	adds	r2, r4, r1
 800da2a:	4293      	cmp	r3, r2
 800da2c:	bf04      	itt	eq
 800da2e:	681a      	ldreq	r2, [r3, #0]
 800da30:	685b      	ldreq	r3, [r3, #4]
 800da32:	6063      	str	r3, [r4, #4]
 800da34:	bf04      	itt	eq
 800da36:	1852      	addeq	r2, r2, r1
 800da38:	6022      	streq	r2, [r4, #0]
 800da3a:	6004      	str	r4, [r0, #0]
 800da3c:	e7ec      	b.n	800da18 <_free_r+0x24>
 800da3e:	4613      	mov	r3, r2
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	b10a      	cbz	r2, 800da48 <_free_r+0x54>
 800da44:	42a2      	cmp	r2, r4
 800da46:	d9fa      	bls.n	800da3e <_free_r+0x4a>
 800da48:	6819      	ldr	r1, [r3, #0]
 800da4a:	1858      	adds	r0, r3, r1
 800da4c:	42a0      	cmp	r0, r4
 800da4e:	d10b      	bne.n	800da68 <_free_r+0x74>
 800da50:	6820      	ldr	r0, [r4, #0]
 800da52:	4401      	add	r1, r0
 800da54:	1858      	adds	r0, r3, r1
 800da56:	4282      	cmp	r2, r0
 800da58:	6019      	str	r1, [r3, #0]
 800da5a:	d1dd      	bne.n	800da18 <_free_r+0x24>
 800da5c:	6810      	ldr	r0, [r2, #0]
 800da5e:	6852      	ldr	r2, [r2, #4]
 800da60:	605a      	str	r2, [r3, #4]
 800da62:	4401      	add	r1, r0
 800da64:	6019      	str	r1, [r3, #0]
 800da66:	e7d7      	b.n	800da18 <_free_r+0x24>
 800da68:	d902      	bls.n	800da70 <_free_r+0x7c>
 800da6a:	230c      	movs	r3, #12
 800da6c:	602b      	str	r3, [r5, #0]
 800da6e:	e7d3      	b.n	800da18 <_free_r+0x24>
 800da70:	6820      	ldr	r0, [r4, #0]
 800da72:	1821      	adds	r1, r4, r0
 800da74:	428a      	cmp	r2, r1
 800da76:	bf04      	itt	eq
 800da78:	6811      	ldreq	r1, [r2, #0]
 800da7a:	6852      	ldreq	r2, [r2, #4]
 800da7c:	6062      	str	r2, [r4, #4]
 800da7e:	bf04      	itt	eq
 800da80:	1809      	addeq	r1, r1, r0
 800da82:	6021      	streq	r1, [r4, #0]
 800da84:	605c      	str	r4, [r3, #4]
 800da86:	e7c7      	b.n	800da18 <_free_r+0x24>
 800da88:	bd38      	pop	{r3, r4, r5, pc}
 800da8a:	bf00      	nop
 800da8c:	20007c84 	.word	0x20007c84

0800da90 <_malloc_r>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	1ccd      	adds	r5, r1, #3
 800da94:	f025 0503 	bic.w	r5, r5, #3
 800da98:	3508      	adds	r5, #8
 800da9a:	2d0c      	cmp	r5, #12
 800da9c:	bf38      	it	cc
 800da9e:	250c      	movcc	r5, #12
 800daa0:	2d00      	cmp	r5, #0
 800daa2:	4606      	mov	r6, r0
 800daa4:	db01      	blt.n	800daaa <_malloc_r+0x1a>
 800daa6:	42a9      	cmp	r1, r5
 800daa8:	d903      	bls.n	800dab2 <_malloc_r+0x22>
 800daaa:	230c      	movs	r3, #12
 800daac:	6033      	str	r3, [r6, #0]
 800daae:	2000      	movs	r0, #0
 800dab0:	bd70      	pop	{r4, r5, r6, pc}
 800dab2:	f000 f9e1 	bl	800de78 <__malloc_lock>
 800dab6:	4a21      	ldr	r2, [pc, #132]	; (800db3c <_malloc_r+0xac>)
 800dab8:	6814      	ldr	r4, [r2, #0]
 800daba:	4621      	mov	r1, r4
 800dabc:	b991      	cbnz	r1, 800dae4 <_malloc_r+0x54>
 800dabe:	4c20      	ldr	r4, [pc, #128]	; (800db40 <_malloc_r+0xb0>)
 800dac0:	6823      	ldr	r3, [r4, #0]
 800dac2:	b91b      	cbnz	r3, 800dacc <_malloc_r+0x3c>
 800dac4:	4630      	mov	r0, r6
 800dac6:	f000 f98f 	bl	800dde8 <_sbrk_r>
 800daca:	6020      	str	r0, [r4, #0]
 800dacc:	4629      	mov	r1, r5
 800dace:	4630      	mov	r0, r6
 800dad0:	f000 f98a 	bl	800dde8 <_sbrk_r>
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	d124      	bne.n	800db22 <_malloc_r+0x92>
 800dad8:	230c      	movs	r3, #12
 800dada:	6033      	str	r3, [r6, #0]
 800dadc:	4630      	mov	r0, r6
 800dade:	f000 f9cc 	bl	800de7a <__malloc_unlock>
 800dae2:	e7e4      	b.n	800daae <_malloc_r+0x1e>
 800dae4:	680b      	ldr	r3, [r1, #0]
 800dae6:	1b5b      	subs	r3, r3, r5
 800dae8:	d418      	bmi.n	800db1c <_malloc_r+0x8c>
 800daea:	2b0b      	cmp	r3, #11
 800daec:	d90f      	bls.n	800db0e <_malloc_r+0x7e>
 800daee:	600b      	str	r3, [r1, #0]
 800daf0:	50cd      	str	r5, [r1, r3]
 800daf2:	18cc      	adds	r4, r1, r3
 800daf4:	4630      	mov	r0, r6
 800daf6:	f000 f9c0 	bl	800de7a <__malloc_unlock>
 800dafa:	f104 000b 	add.w	r0, r4, #11
 800dafe:	1d23      	adds	r3, r4, #4
 800db00:	f020 0007 	bic.w	r0, r0, #7
 800db04:	1ac3      	subs	r3, r0, r3
 800db06:	d0d3      	beq.n	800dab0 <_malloc_r+0x20>
 800db08:	425a      	negs	r2, r3
 800db0a:	50e2      	str	r2, [r4, r3]
 800db0c:	e7d0      	b.n	800dab0 <_malloc_r+0x20>
 800db0e:	428c      	cmp	r4, r1
 800db10:	684b      	ldr	r3, [r1, #4]
 800db12:	bf16      	itet	ne
 800db14:	6063      	strne	r3, [r4, #4]
 800db16:	6013      	streq	r3, [r2, #0]
 800db18:	460c      	movne	r4, r1
 800db1a:	e7eb      	b.n	800daf4 <_malloc_r+0x64>
 800db1c:	460c      	mov	r4, r1
 800db1e:	6849      	ldr	r1, [r1, #4]
 800db20:	e7cc      	b.n	800dabc <_malloc_r+0x2c>
 800db22:	1cc4      	adds	r4, r0, #3
 800db24:	f024 0403 	bic.w	r4, r4, #3
 800db28:	42a0      	cmp	r0, r4
 800db2a:	d005      	beq.n	800db38 <_malloc_r+0xa8>
 800db2c:	1a21      	subs	r1, r4, r0
 800db2e:	4630      	mov	r0, r6
 800db30:	f000 f95a 	bl	800dde8 <_sbrk_r>
 800db34:	3001      	adds	r0, #1
 800db36:	d0cf      	beq.n	800dad8 <_malloc_r+0x48>
 800db38:	6025      	str	r5, [r4, #0]
 800db3a:	e7db      	b.n	800daf4 <_malloc_r+0x64>
 800db3c:	20007c84 	.word	0x20007c84
 800db40:	20007c88 	.word	0x20007c88

0800db44 <__ssputs_r>:
 800db44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db48:	688e      	ldr	r6, [r1, #8]
 800db4a:	429e      	cmp	r6, r3
 800db4c:	4682      	mov	sl, r0
 800db4e:	460c      	mov	r4, r1
 800db50:	4690      	mov	r8, r2
 800db52:	4699      	mov	r9, r3
 800db54:	d837      	bhi.n	800dbc6 <__ssputs_r+0x82>
 800db56:	898a      	ldrh	r2, [r1, #12]
 800db58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db5c:	d031      	beq.n	800dbc2 <__ssputs_r+0x7e>
 800db5e:	6825      	ldr	r5, [r4, #0]
 800db60:	6909      	ldr	r1, [r1, #16]
 800db62:	1a6f      	subs	r7, r5, r1
 800db64:	6965      	ldr	r5, [r4, #20]
 800db66:	2302      	movs	r3, #2
 800db68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db6c:	fb95 f5f3 	sdiv	r5, r5, r3
 800db70:	f109 0301 	add.w	r3, r9, #1
 800db74:	443b      	add	r3, r7
 800db76:	429d      	cmp	r5, r3
 800db78:	bf38      	it	cc
 800db7a:	461d      	movcc	r5, r3
 800db7c:	0553      	lsls	r3, r2, #21
 800db7e:	d530      	bpl.n	800dbe2 <__ssputs_r+0x9e>
 800db80:	4629      	mov	r1, r5
 800db82:	f7ff ff85 	bl	800da90 <_malloc_r>
 800db86:	4606      	mov	r6, r0
 800db88:	b950      	cbnz	r0, 800dba0 <__ssputs_r+0x5c>
 800db8a:	230c      	movs	r3, #12
 800db8c:	f8ca 3000 	str.w	r3, [sl]
 800db90:	89a3      	ldrh	r3, [r4, #12]
 800db92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db96:	81a3      	strh	r3, [r4, #12]
 800db98:	f04f 30ff 	mov.w	r0, #4294967295
 800db9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba0:	463a      	mov	r2, r7
 800dba2:	6921      	ldr	r1, [r4, #16]
 800dba4:	f7fc fc18 	bl	800a3d8 <memcpy>
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dbae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbb2:	81a3      	strh	r3, [r4, #12]
 800dbb4:	6126      	str	r6, [r4, #16]
 800dbb6:	6165      	str	r5, [r4, #20]
 800dbb8:	443e      	add	r6, r7
 800dbba:	1bed      	subs	r5, r5, r7
 800dbbc:	6026      	str	r6, [r4, #0]
 800dbbe:	60a5      	str	r5, [r4, #8]
 800dbc0:	464e      	mov	r6, r9
 800dbc2:	454e      	cmp	r6, r9
 800dbc4:	d900      	bls.n	800dbc8 <__ssputs_r+0x84>
 800dbc6:	464e      	mov	r6, r9
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4641      	mov	r1, r8
 800dbcc:	6820      	ldr	r0, [r4, #0]
 800dbce:	f000 f93a 	bl	800de46 <memmove>
 800dbd2:	68a3      	ldr	r3, [r4, #8]
 800dbd4:	1b9b      	subs	r3, r3, r6
 800dbd6:	60a3      	str	r3, [r4, #8]
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	441e      	add	r6, r3
 800dbdc:	6026      	str	r6, [r4, #0]
 800dbde:	2000      	movs	r0, #0
 800dbe0:	e7dc      	b.n	800db9c <__ssputs_r+0x58>
 800dbe2:	462a      	mov	r2, r5
 800dbe4:	f000 f94a 	bl	800de7c <_realloc_r>
 800dbe8:	4606      	mov	r6, r0
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d1e2      	bne.n	800dbb4 <__ssputs_r+0x70>
 800dbee:	6921      	ldr	r1, [r4, #16]
 800dbf0:	4650      	mov	r0, sl
 800dbf2:	f7ff feff 	bl	800d9f4 <_free_r>
 800dbf6:	e7c8      	b.n	800db8a <__ssputs_r+0x46>

0800dbf8 <_svfiprintf_r>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	461d      	mov	r5, r3
 800dbfe:	898b      	ldrh	r3, [r1, #12]
 800dc00:	061f      	lsls	r7, r3, #24
 800dc02:	b09d      	sub	sp, #116	; 0x74
 800dc04:	4680      	mov	r8, r0
 800dc06:	460c      	mov	r4, r1
 800dc08:	4616      	mov	r6, r2
 800dc0a:	d50f      	bpl.n	800dc2c <_svfiprintf_r+0x34>
 800dc0c:	690b      	ldr	r3, [r1, #16]
 800dc0e:	b96b      	cbnz	r3, 800dc2c <_svfiprintf_r+0x34>
 800dc10:	2140      	movs	r1, #64	; 0x40
 800dc12:	f7ff ff3d 	bl	800da90 <_malloc_r>
 800dc16:	6020      	str	r0, [r4, #0]
 800dc18:	6120      	str	r0, [r4, #16]
 800dc1a:	b928      	cbnz	r0, 800dc28 <_svfiprintf_r+0x30>
 800dc1c:	230c      	movs	r3, #12
 800dc1e:	f8c8 3000 	str.w	r3, [r8]
 800dc22:	f04f 30ff 	mov.w	r0, #4294967295
 800dc26:	e0c8      	b.n	800ddba <_svfiprintf_r+0x1c2>
 800dc28:	2340      	movs	r3, #64	; 0x40
 800dc2a:	6163      	str	r3, [r4, #20]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc30:	2320      	movs	r3, #32
 800dc32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc36:	2330      	movs	r3, #48	; 0x30
 800dc38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc3c:	9503      	str	r5, [sp, #12]
 800dc3e:	f04f 0b01 	mov.w	fp, #1
 800dc42:	4637      	mov	r7, r6
 800dc44:	463d      	mov	r5, r7
 800dc46:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dc4a:	b10b      	cbz	r3, 800dc50 <_svfiprintf_r+0x58>
 800dc4c:	2b25      	cmp	r3, #37	; 0x25
 800dc4e:	d13e      	bne.n	800dcce <_svfiprintf_r+0xd6>
 800dc50:	ebb7 0a06 	subs.w	sl, r7, r6
 800dc54:	d00b      	beq.n	800dc6e <_svfiprintf_r+0x76>
 800dc56:	4653      	mov	r3, sl
 800dc58:	4632      	mov	r2, r6
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	f7ff ff71 	bl	800db44 <__ssputs_r>
 800dc62:	3001      	adds	r0, #1
 800dc64:	f000 80a4 	beq.w	800ddb0 <_svfiprintf_r+0x1b8>
 800dc68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc6a:	4453      	add	r3, sl
 800dc6c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc6e:	783b      	ldrb	r3, [r7, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 809d 	beq.w	800ddb0 <_svfiprintf_r+0x1b8>
 800dc76:	2300      	movs	r3, #0
 800dc78:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	9307      	str	r3, [sp, #28]
 800dc84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc88:	931a      	str	r3, [sp, #104]	; 0x68
 800dc8a:	462f      	mov	r7, r5
 800dc8c:	2205      	movs	r2, #5
 800dc8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dc92:	4850      	ldr	r0, [pc, #320]	; (800ddd4 <_svfiprintf_r+0x1dc>)
 800dc94:	f7f2 facc 	bl	8000230 <memchr>
 800dc98:	9b04      	ldr	r3, [sp, #16]
 800dc9a:	b9d0      	cbnz	r0, 800dcd2 <_svfiprintf_r+0xda>
 800dc9c:	06d9      	lsls	r1, r3, #27
 800dc9e:	bf44      	itt	mi
 800dca0:	2220      	movmi	r2, #32
 800dca2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dca6:	071a      	lsls	r2, r3, #28
 800dca8:	bf44      	itt	mi
 800dcaa:	222b      	movmi	r2, #43	; 0x2b
 800dcac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dcb0:	782a      	ldrb	r2, [r5, #0]
 800dcb2:	2a2a      	cmp	r2, #42	; 0x2a
 800dcb4:	d015      	beq.n	800dce2 <_svfiprintf_r+0xea>
 800dcb6:	9a07      	ldr	r2, [sp, #28]
 800dcb8:	462f      	mov	r7, r5
 800dcba:	2000      	movs	r0, #0
 800dcbc:	250a      	movs	r5, #10
 800dcbe:	4639      	mov	r1, r7
 800dcc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcc4:	3b30      	subs	r3, #48	; 0x30
 800dcc6:	2b09      	cmp	r3, #9
 800dcc8:	d94d      	bls.n	800dd66 <_svfiprintf_r+0x16e>
 800dcca:	b1b8      	cbz	r0, 800dcfc <_svfiprintf_r+0x104>
 800dccc:	e00f      	b.n	800dcee <_svfiprintf_r+0xf6>
 800dcce:	462f      	mov	r7, r5
 800dcd0:	e7b8      	b.n	800dc44 <_svfiprintf_r+0x4c>
 800dcd2:	4a40      	ldr	r2, [pc, #256]	; (800ddd4 <_svfiprintf_r+0x1dc>)
 800dcd4:	1a80      	subs	r0, r0, r2
 800dcd6:	fa0b f000 	lsl.w	r0, fp, r0
 800dcda:	4318      	orrs	r0, r3
 800dcdc:	9004      	str	r0, [sp, #16]
 800dcde:	463d      	mov	r5, r7
 800dce0:	e7d3      	b.n	800dc8a <_svfiprintf_r+0x92>
 800dce2:	9a03      	ldr	r2, [sp, #12]
 800dce4:	1d11      	adds	r1, r2, #4
 800dce6:	6812      	ldr	r2, [r2, #0]
 800dce8:	9103      	str	r1, [sp, #12]
 800dcea:	2a00      	cmp	r2, #0
 800dcec:	db01      	blt.n	800dcf2 <_svfiprintf_r+0xfa>
 800dcee:	9207      	str	r2, [sp, #28]
 800dcf0:	e004      	b.n	800dcfc <_svfiprintf_r+0x104>
 800dcf2:	4252      	negs	r2, r2
 800dcf4:	f043 0302 	orr.w	r3, r3, #2
 800dcf8:	9207      	str	r2, [sp, #28]
 800dcfa:	9304      	str	r3, [sp, #16]
 800dcfc:	783b      	ldrb	r3, [r7, #0]
 800dcfe:	2b2e      	cmp	r3, #46	; 0x2e
 800dd00:	d10c      	bne.n	800dd1c <_svfiprintf_r+0x124>
 800dd02:	787b      	ldrb	r3, [r7, #1]
 800dd04:	2b2a      	cmp	r3, #42	; 0x2a
 800dd06:	d133      	bne.n	800dd70 <_svfiprintf_r+0x178>
 800dd08:	9b03      	ldr	r3, [sp, #12]
 800dd0a:	1d1a      	adds	r2, r3, #4
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	9203      	str	r2, [sp, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	bfb8      	it	lt
 800dd14:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd18:	3702      	adds	r7, #2
 800dd1a:	9305      	str	r3, [sp, #20]
 800dd1c:	4d2e      	ldr	r5, [pc, #184]	; (800ddd8 <_svfiprintf_r+0x1e0>)
 800dd1e:	7839      	ldrb	r1, [r7, #0]
 800dd20:	2203      	movs	r2, #3
 800dd22:	4628      	mov	r0, r5
 800dd24:	f7f2 fa84 	bl	8000230 <memchr>
 800dd28:	b138      	cbz	r0, 800dd3a <_svfiprintf_r+0x142>
 800dd2a:	2340      	movs	r3, #64	; 0x40
 800dd2c:	1b40      	subs	r0, r0, r5
 800dd2e:	fa03 f000 	lsl.w	r0, r3, r0
 800dd32:	9b04      	ldr	r3, [sp, #16]
 800dd34:	4303      	orrs	r3, r0
 800dd36:	3701      	adds	r7, #1
 800dd38:	9304      	str	r3, [sp, #16]
 800dd3a:	7839      	ldrb	r1, [r7, #0]
 800dd3c:	4827      	ldr	r0, [pc, #156]	; (800dddc <_svfiprintf_r+0x1e4>)
 800dd3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd42:	2206      	movs	r2, #6
 800dd44:	1c7e      	adds	r6, r7, #1
 800dd46:	f7f2 fa73 	bl	8000230 <memchr>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d038      	beq.n	800ddc0 <_svfiprintf_r+0x1c8>
 800dd4e:	4b24      	ldr	r3, [pc, #144]	; (800dde0 <_svfiprintf_r+0x1e8>)
 800dd50:	bb13      	cbnz	r3, 800dd98 <_svfiprintf_r+0x1a0>
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	3307      	adds	r3, #7
 800dd56:	f023 0307 	bic.w	r3, r3, #7
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	9303      	str	r3, [sp, #12]
 800dd5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd60:	444b      	add	r3, r9
 800dd62:	9309      	str	r3, [sp, #36]	; 0x24
 800dd64:	e76d      	b.n	800dc42 <_svfiprintf_r+0x4a>
 800dd66:	fb05 3202 	mla	r2, r5, r2, r3
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	460f      	mov	r7, r1
 800dd6e:	e7a6      	b.n	800dcbe <_svfiprintf_r+0xc6>
 800dd70:	2300      	movs	r3, #0
 800dd72:	3701      	adds	r7, #1
 800dd74:	9305      	str	r3, [sp, #20]
 800dd76:	4619      	mov	r1, r3
 800dd78:	250a      	movs	r5, #10
 800dd7a:	4638      	mov	r0, r7
 800dd7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd80:	3a30      	subs	r2, #48	; 0x30
 800dd82:	2a09      	cmp	r2, #9
 800dd84:	d903      	bls.n	800dd8e <_svfiprintf_r+0x196>
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d0c8      	beq.n	800dd1c <_svfiprintf_r+0x124>
 800dd8a:	9105      	str	r1, [sp, #20]
 800dd8c:	e7c6      	b.n	800dd1c <_svfiprintf_r+0x124>
 800dd8e:	fb05 2101 	mla	r1, r5, r1, r2
 800dd92:	2301      	movs	r3, #1
 800dd94:	4607      	mov	r7, r0
 800dd96:	e7f0      	b.n	800dd7a <_svfiprintf_r+0x182>
 800dd98:	ab03      	add	r3, sp, #12
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	4b11      	ldr	r3, [pc, #68]	; (800dde4 <_svfiprintf_r+0x1ec>)
 800dda0:	a904      	add	r1, sp, #16
 800dda2:	4640      	mov	r0, r8
 800dda4:	f7fc fbc0 	bl	800a528 <_printf_float>
 800dda8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ddac:	4681      	mov	r9, r0
 800ddae:	d1d6      	bne.n	800dd5e <_svfiprintf_r+0x166>
 800ddb0:	89a3      	ldrh	r3, [r4, #12]
 800ddb2:	065b      	lsls	r3, r3, #25
 800ddb4:	f53f af35 	bmi.w	800dc22 <_svfiprintf_r+0x2a>
 800ddb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddba:	b01d      	add	sp, #116	; 0x74
 800ddbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc0:	ab03      	add	r3, sp, #12
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	4622      	mov	r2, r4
 800ddc6:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <_svfiprintf_r+0x1ec>)
 800ddc8:	a904      	add	r1, sp, #16
 800ddca:	4640      	mov	r0, r8
 800ddcc:	f7fc fe62 	bl	800aa94 <_printf_i>
 800ddd0:	e7ea      	b.n	800dda8 <_svfiprintf_r+0x1b0>
 800ddd2:	bf00      	nop
 800ddd4:	0801009c 	.word	0x0801009c
 800ddd8:	080100a2 	.word	0x080100a2
 800dddc:	080100a6 	.word	0x080100a6
 800dde0:	0800a529 	.word	0x0800a529
 800dde4:	0800db45 	.word	0x0800db45

0800dde8 <_sbrk_r>:
 800dde8:	b538      	push	{r3, r4, r5, lr}
 800ddea:	4c06      	ldr	r4, [pc, #24]	; (800de04 <_sbrk_r+0x1c>)
 800ddec:	2300      	movs	r3, #0
 800ddee:	4605      	mov	r5, r0
 800ddf0:	4608      	mov	r0, r1
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	f7f5 f902 	bl	8002ffc <_sbrk>
 800ddf8:	1c43      	adds	r3, r0, #1
 800ddfa:	d102      	bne.n	800de02 <_sbrk_r+0x1a>
 800ddfc:	6823      	ldr	r3, [r4, #0]
 800ddfe:	b103      	cbz	r3, 800de02 <_sbrk_r+0x1a>
 800de00:	602b      	str	r3, [r5, #0]
 800de02:	bd38      	pop	{r3, r4, r5, pc}
 800de04:	20008488 	.word	0x20008488

0800de08 <strncmp>:
 800de08:	b510      	push	{r4, lr}
 800de0a:	b16a      	cbz	r2, 800de28 <strncmp+0x20>
 800de0c:	3901      	subs	r1, #1
 800de0e:	1884      	adds	r4, r0, r2
 800de10:	f810 3b01 	ldrb.w	r3, [r0], #1
 800de14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800de18:	4293      	cmp	r3, r2
 800de1a:	d103      	bne.n	800de24 <strncmp+0x1c>
 800de1c:	42a0      	cmp	r0, r4
 800de1e:	d001      	beq.n	800de24 <strncmp+0x1c>
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1f5      	bne.n	800de10 <strncmp+0x8>
 800de24:	1a98      	subs	r0, r3, r2
 800de26:	bd10      	pop	{r4, pc}
 800de28:	4610      	mov	r0, r2
 800de2a:	e7fc      	b.n	800de26 <strncmp+0x1e>

0800de2c <__ascii_wctomb>:
 800de2c:	b149      	cbz	r1, 800de42 <__ascii_wctomb+0x16>
 800de2e:	2aff      	cmp	r2, #255	; 0xff
 800de30:	bf85      	ittet	hi
 800de32:	238a      	movhi	r3, #138	; 0x8a
 800de34:	6003      	strhi	r3, [r0, #0]
 800de36:	700a      	strbls	r2, [r1, #0]
 800de38:	f04f 30ff 	movhi.w	r0, #4294967295
 800de3c:	bf98      	it	ls
 800de3e:	2001      	movls	r0, #1
 800de40:	4770      	bx	lr
 800de42:	4608      	mov	r0, r1
 800de44:	4770      	bx	lr

0800de46 <memmove>:
 800de46:	4288      	cmp	r0, r1
 800de48:	b510      	push	{r4, lr}
 800de4a:	eb01 0302 	add.w	r3, r1, r2
 800de4e:	d807      	bhi.n	800de60 <memmove+0x1a>
 800de50:	1e42      	subs	r2, r0, #1
 800de52:	4299      	cmp	r1, r3
 800de54:	d00a      	beq.n	800de6c <memmove+0x26>
 800de56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800de5e:	e7f8      	b.n	800de52 <memmove+0xc>
 800de60:	4283      	cmp	r3, r0
 800de62:	d9f5      	bls.n	800de50 <memmove+0xa>
 800de64:	1881      	adds	r1, r0, r2
 800de66:	1ad2      	subs	r2, r2, r3
 800de68:	42d3      	cmn	r3, r2
 800de6a:	d100      	bne.n	800de6e <memmove+0x28>
 800de6c:	bd10      	pop	{r4, pc}
 800de6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800de76:	e7f7      	b.n	800de68 <memmove+0x22>

0800de78 <__malloc_lock>:
 800de78:	4770      	bx	lr

0800de7a <__malloc_unlock>:
 800de7a:	4770      	bx	lr

0800de7c <_realloc_r>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	4607      	mov	r7, r0
 800de80:	4614      	mov	r4, r2
 800de82:	460e      	mov	r6, r1
 800de84:	b921      	cbnz	r1, 800de90 <_realloc_r+0x14>
 800de86:	4611      	mov	r1, r2
 800de88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de8c:	f7ff be00 	b.w	800da90 <_malloc_r>
 800de90:	b922      	cbnz	r2, 800de9c <_realloc_r+0x20>
 800de92:	f7ff fdaf 	bl	800d9f4 <_free_r>
 800de96:	4625      	mov	r5, r4
 800de98:	4628      	mov	r0, r5
 800de9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de9c:	f000 f814 	bl	800dec8 <_malloc_usable_size_r>
 800dea0:	42a0      	cmp	r0, r4
 800dea2:	d20f      	bcs.n	800dec4 <_realloc_r+0x48>
 800dea4:	4621      	mov	r1, r4
 800dea6:	4638      	mov	r0, r7
 800dea8:	f7ff fdf2 	bl	800da90 <_malloc_r>
 800deac:	4605      	mov	r5, r0
 800deae:	2800      	cmp	r0, #0
 800deb0:	d0f2      	beq.n	800de98 <_realloc_r+0x1c>
 800deb2:	4631      	mov	r1, r6
 800deb4:	4622      	mov	r2, r4
 800deb6:	f7fc fa8f 	bl	800a3d8 <memcpy>
 800deba:	4631      	mov	r1, r6
 800debc:	4638      	mov	r0, r7
 800debe:	f7ff fd99 	bl	800d9f4 <_free_r>
 800dec2:	e7e9      	b.n	800de98 <_realloc_r+0x1c>
 800dec4:	4635      	mov	r5, r6
 800dec6:	e7e7      	b.n	800de98 <_realloc_r+0x1c>

0800dec8 <_malloc_usable_size_r>:
 800dec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800decc:	1f18      	subs	r0, r3, #4
 800dece:	2b00      	cmp	r3, #0
 800ded0:	bfbc      	itt	lt
 800ded2:	580b      	ldrlt	r3, [r1, r0]
 800ded4:	18c0      	addlt	r0, r0, r3
 800ded6:	4770      	bx	lr

0800ded8 <_init>:
 800ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deda:	bf00      	nop
 800dedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dede:	bc08      	pop	{r3}
 800dee0:	469e      	mov	lr, r3
 800dee2:	4770      	bx	lr

0800dee4 <_fini>:
 800dee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee6:	bf00      	nop
 800dee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deea:	bc08      	pop	{r3}
 800deec:	469e      	mov	lr, r3
 800deee:	4770      	bx	lr
