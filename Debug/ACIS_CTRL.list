
ACIS_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d0  08016d58  08016d58  00026d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a528  0801a528  00032ef4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a528  0801a528  0002a528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a530  0801a530  00032ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a530  0801a530  0002a530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a534  0801a534  0002a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002ef4  20000000  0801a538  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c8ec  20002f00  0801d42c  00032f00  2**5
                  ALLOC
 10 ._user_heap_stack 00000c04  2001f7ec  0801d42c  0003f7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032ef4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee89  00000000  00000000  00032f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005e15  00000000  00000000  00061dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001898  00000000  00000000  00067bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d08  00000000  00000000  00069460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028cea  00000000  00000000  0006b168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b76d  00000000  00000000  00093e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee61c  00000000  00000000  000af5bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019dbdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af0  00000000  00000000  0019dc58  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ebd8  00000000  00000000  001a3748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002f00 	.word	0x20002f00
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016d3c 	.word	0x08016d3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002f04 	.word	0x20002f04
 800021c:	08016d3c 	.word	0x08016d3c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <PK_Copy>:
PACKET_C(PK_PcConnected);
PACKET_C(PK_FuelSwitch);


int16_t PK_Copy(void * dest, void * source)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  if(dest == 0 || source == 0) return -1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <PK_Copy+0x16>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <PK_Copy+0x1c>
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e037      	b.n	8001064 <PK_Copy+0x8c>
  uint8_t * dest_data = (uint8_t*)dest;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	617b      	str	r3, [r7, #20]
  uint8_t * source_data = (uint8_t*)source;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
  int16_t length = dest_data[1];
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	81bb      	strh	r3, [r7, #12]
  if(dest_data[1] != source_data[1] || dest_data[0] != source_data[0] || length == 0 || length > 384) return -2;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d10e      	bne.n	8001032 <PK_Copy+0x5a>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d108      	bne.n	8001032 <PK_Copy+0x5a>
 8001020:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <PK_Copy+0x5a>
 8001028:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800102c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001030:	dd02      	ble.n	8001038 <PK_Copy+0x60>
 8001032:	f06f 0301 	mvn.w	r3, #1
 8001036:	e015      	b.n	8001064 <PK_Copy+0x8c>
  for(uint8_t i=2;i<length+2;i++)
 8001038:	2302      	movs	r3, #2
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e00a      	b.n	8001054 <PK_Copy+0x7c>
    *dest_data++ = *source_data++;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	1c53      	adds	r3, r2, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	1c59      	adds	r1, r3, #1
 8001048:	6179      	str	r1, [r7, #20]
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=2;i<length+2;i++)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	3301      	adds	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800105a:	3302      	adds	r3, #2
 800105c:	429a      	cmp	r2, r3
 800105e:	dbee      	blt.n	800103e <PK_Copy+0x66>
  return length;
 8001060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <acis_apply_parameter>:
volatile uint8_t StatusTimeout = 0;

static HAL_StatusTypeDef acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

static HAL_StatusTypeDef acis_apply_parameter(void * parameter, int size)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b092      	sub	sp, #72	; 0x48
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  uint32_t addr = (uint32_t)parameter;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t config_addr_start = (uint32_t)&acis_config;
 8001084:	4b71      	ldr	r3, [pc, #452]	; (800124c <acis_apply_parameter+0x1dc>)
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t config_addr_end = (uint32_t)&acis_config.tables[0];
 8001088:	4b71      	ldr	r3, [pc, #452]	; (8001250 <acis_apply_parameter+0x1e0>)
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tables_addr_start[TABLE_SETUPS_MAX];
  uint32_t tables_addr_end[TABLE_SETUPS_MAX];
  uint32_t configsize = config_addr_end - config_addr_start;
 800108c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t tablesize = sizeof(sAcisIgnTable);
 8001094:	f640 436c 	movw	r3, #3180	; 0xc6c
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
 800109e:	e023      	b.n	80010e8 <acis_apply_parameter+0x78>
  {
    tables_addr_start[i] = (uint32_t)&acis_config.tables[i];
 80010a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a2:	f640 426c 	movw	r2, #3180	; 0xc6c
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	33c0      	adds	r3, #192	; 0xc0
 80010ac:	4a67      	ldr	r2, [pc, #412]	; (800124c <acis_apply_parameter+0x1dc>)
 80010ae:	4413      	add	r3, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010ba:	440b      	add	r3, r1
 80010bc:	f843 2c30 	str.w	r2, [r3, #-48]
    tables_addr_end[i] = (uint32_t)&acis_config.tables[i] + sizeof(sAcisIgnTable);
 80010c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c2:	f640 426c 	movw	r2, #3180	; 0xc6c
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	33c0      	adds	r3, #192	; 0xc0
 80010cc:	4a5f      	ldr	r2, [pc, #380]	; (800124c <acis_apply_parameter+0x1dc>)
 80010ce:	4413      	add	r3, r2
 80010d0:	f603 426c 	addw	r2, r3, #3180	; 0xc6c
 80010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010dc:	440b      	add	r3, r1
 80010de:	f843 2c40 	str.w	r2, [r3, #-64]
  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 80010e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010e4:	3301      	adds	r3, #1
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
 80010e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	ddd8      	ble.n	80010a0 <acis_apply_parameter+0x30>
  }

  if(addr >= config_addr_start && addr < config_addr_end)
 80010ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d33d      	bcc.n	8001172 <acis_apply_parameter+0x102>
 80010f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d239      	bcs.n	8001172 <acis_apply_parameter+0x102>
  {
    PK_ConfigMemoryData.Destination = etrACIS;
 80010fe:	4b55      	ldr	r3, [pc, #340]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001100:	2202      	movs	r2, #2
 8001102:	709a      	strb	r2, [r3, #2]
    PK_ConfigMemoryData.configsize = configsize;
 8001104:	4a53      	ldr	r2, [pc, #332]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001108:	6093      	str	r3, [r2, #8]
    PK_ConfigMemoryData.offset = addr - config_addr_start;
 800110a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	4a50      	ldr	r2, [pc, #320]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001112:	60d3      	str	r3, [r2, #12]
    PK_ConfigMemoryData.size = sizeof(uint32_t);
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001116:	2204      	movs	r2, #4
 8001118:	611a      	str	r2, [r3, #16]

    memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[PK_ConfigMemoryData.offset], PK_ConfigMemoryData.size);
 800111a:	4b4e      	ldr	r3, [pc, #312]	; (8001254 <acis_apply_parameter+0x1e4>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4a4b      	ldr	r2, [pc, #300]	; (800124c <acis_apply_parameter+0x1dc>)
 8001120:	1899      	adds	r1, r3, r2
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	461a      	mov	r2, r3
 8001128:	484b      	ldr	r0, [pc, #300]	; (8001258 <acis_apply_parameter+0x1e8>)
 800112a:	f011 fe9b 	bl	8012e64 <memcpy>
    memset(&PK_ConfigMemoryData.data[PK_ConfigMemoryData.size], 0, sizeof(PK_ConfigMemoryData.data) - PK_ConfigMemoryData.size);
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	3310      	adds	r3, #16
 8001134:	4a47      	ldr	r2, [pc, #284]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001136:	4413      	add	r3, r2
 8001138:	1d98      	adds	r0, r3, #6
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <acis_apply_parameter+0x1e4>)
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8001142:	461a      	mov	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f011 fe98 	bl	8012e7a <memset>
    PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 800114a:	21e0      	movs	r1, #224	; 0xe0
 800114c:	4842      	ldr	r0, [pc, #264]	; (8001258 <acis_apply_parameter+0x1e8>)
 800114e:	f008 fc8b 	bl	8009a68 <CRC16_Generate>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001158:	829a      	strh	r2, [r3, #20]

    Applying = 1;
 800115a:	4b40      	ldr	r3, [pc, #256]	; (800125c <acis_apply_parameter+0x1ec>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
    protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 8001160:	22f8      	movs	r2, #248	; 0xf8
 8001162:	493c      	ldr	r1, [pc, #240]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001164:	483e      	ldr	r0, [pc, #248]	; (8001260 <acis_apply_parameter+0x1f0>)
 8001166:	f00b fee5 	bl	800cf34 <protPushSequence>
    status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001170:	e066      	b.n	8001240 <acis_apply_parameter+0x1d0>
  }
  else
  {
    for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001176:	e060      	b.n	800123a <acis_apply_parameter+0x1ca>
    {
      if(addr >= tables_addr_start[i] && addr < tables_addr_end[i])
 8001178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001180:	4413      	add	r3, r2
 8001182:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001188:	429a      	cmp	r2, r3
 800118a:	d353      	bcc.n	8001234 <acis_apply_parameter+0x1c4>
 800118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001194:	4413      	add	r3, r2
 8001196:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800119a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800119c:	429a      	cmp	r2, r3
 800119e:	d249      	bcs.n	8001234 <acis_apply_parameter+0x1c4>
      {
        PK_TableMemoryData.Destination = etrACIS;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	709a      	strb	r2, [r3, #2]
        PK_TableMemoryData.tablesize = tablesize;
 80011a6:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	60d3      	str	r3, [r2, #12]
        PK_TableMemoryData.table = i;
 80011ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ae:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011b0:	6093      	str	r3, [r2, #8]
        PK_TableMemoryData.offset = addr - tables_addr_start[i];
 80011b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80011ba:	4413      	add	r3, r2
 80011bc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80011c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011c6:	6113      	str	r3, [r2, #16]
        PK_TableMemoryData.size = size;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4a26      	ldr	r2, [pc, #152]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011cc:	6153      	str	r3, [r2, #20]

        memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[i])[PK_TableMemoryData.offset], PK_TableMemoryData.size);
 80011ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d0:	f640 426c 	movw	r2, #3180	; 0xc6c
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	33c0      	adds	r3, #192	; 0xc0
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <acis_apply_parameter+0x1dc>)
 80011dc:	441a      	add	r2, r3
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	18d1      	adds	r1, r2, r3
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	461a      	mov	r2, r3
 80011ea:	481f      	ldr	r0, [pc, #124]	; (8001268 <acis_apply_parameter+0x1f8>)
 80011ec:	f011 fe3a 	bl	8012e64 <memcpy>
        memset(&PK_TableMemoryData.data[PK_TableMemoryData.size], 0, sizeof(PK_TableMemoryData.data) - PK_TableMemoryData.size);
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	3318      	adds	r3, #24
 80011f6:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011f8:	4413      	add	r3, r2
 80011fa:	1c98      	adds	r0, r3, #2
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8001204:	461a      	mov	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f011 fe37 	bl	8012e7a <memset>
        PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 800120c:	21e0      	movs	r1, #224	; 0xe0
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <acis_apply_parameter+0x1f8>)
 8001210:	f008 fc2a 	bl	8009a68 <CRC16_Generate>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <acis_apply_parameter+0x1f4>)
 800121a:	831a      	strh	r2, [r3, #24]

        Applying = 1;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <acis_apply_parameter+0x1ec>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
        protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 8001222:	22fc      	movs	r2, #252	; 0xfc
 8001224:	490f      	ldr	r1, [pc, #60]	; (8001264 <acis_apply_parameter+0x1f4>)
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <acis_apply_parameter+0x1f0>)
 8001228:	f00b fe84 	bl	800cf34 <protPushSequence>
        status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        break;
 8001232:	e005      	b.n	8001240 <acis_apply_parameter+0x1d0>
    for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8001234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001236:	3301      	adds	r3, #1
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800123a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800123c:	2b03      	cmp	r3, #3
 800123e:	dd9b      	ble.n	8001178 <acis_apply_parameter+0x108>
  }

  //if(status != HAL_OK)
    //ApplyError = 1;

  return status;
 8001240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001244:	4618      	mov	r0, r3
 8001246:	3748      	adds	r7, #72	; 0x48
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20002f20 	.word	0x20002f20
 8001250:	20002fe0 	.word	0x20002fe0
 8001254:	20000200 	.word	0x20000200
 8001258:	20000216 	.word	0x20000216
 800125c:	2000699a 	.word	0x2000699a
 8001260:	20006940 	.word	0x20006940
 8001264:	200000c0 	.word	0x200000c0
 8001268:	200000da 	.word	0x200000da

0800126c <acis_gui_task>:

static void acis_gui_task(void * argument)
{
 800126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001270:	b0fc      	sub	sp, #496	; 0x1f0
 8001272:	af02      	add	r7, sp, #8
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	6018      	str	r0, [r3, #0]
  sAcisIgnTable * table;
  eMenuItem_t eOldMenu = MenuUndefined;
 8001278:	2300      	movs	r3, #0
 800127a:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
  uint32_t check_last = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  uint32_t display_timeout = Delay_Tick;
 8001284:	4bc4      	ldr	r3, [pc, #784]	; (8001598 <acis_gui_task+0x32c>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  uint32_t value_timeout = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  uint32_t select_timeout = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  uint32_t last_menu_switch = Delay_Tick;
 8001298:	4bbf      	ldr	r3, [pc, #764]	; (8001598 <acis_gui_task+0x32c>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  uint32_t now;
  uint8_t cnt = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7

  int32_t menuitem = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  uint32_t menufirst = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  int32_t menuitem2 = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
  uint32_t menufirst2 = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  int32_t menuitem3 = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  uint32_t menufirst3 = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  int32_t menuitem4 = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  uint32_t menufirst4 = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

  int32_t stringchar = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  uint32_t menuselecting = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  uint32_t menuselected = 0;
 80012e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
  char tablestring[TABLE_STRING_MAX];
  int16_t tablechars[TABLE_STRING_MAX];
  uint16_t lcd_chars_len = strlen(lcd_chars);
 80012ea:	4bac      	ldr	r3, [pc, #688]	; (800159c <acis_gui_task+0x330>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ff96 	bl	8000220 <strlen>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 80012fa:	801a      	strh	r2, [r3, #0]
  const sConfigLinking * tablesetupitem = NULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  const char * tablesetuptitle = NULL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  float rpm = 0;
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  float pres = 0;
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  float ign = 0;
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

  //config_default(&acis_config);

  while(1)
  {
    if(StatusValveNum == 1)
 8001320:	4b9f      	ldr	r3, [pc, #636]	; (80015a0 <acis_gui_task+0x334>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d10c      	bne.n	8001344 <acis_gui_task+0xd8>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001330:	489c      	ldr	r0, [pc, #624]	; (80015a4 <acis_gui_task+0x338>)
 8001332:	f00c fca5 	bl	800dc80 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133c:	4899      	ldr	r0, [pc, #612]	; (80015a4 <acis_gui_task+0x338>)
 800133e:	f00c fc9f 	bl	800dc80 <HAL_GPIO_WritePin>
 8001342:	e01d      	b.n	8001380 <acis_gui_task+0x114>
    }
    else if(StatusValveNum == 2)
 8001344:	4b96      	ldr	r3, [pc, #600]	; (80015a0 <acis_gui_task+0x334>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d10c      	bne.n	8001368 <acis_gui_task+0xfc>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001354:	4893      	ldr	r0, [pc, #588]	; (80015a4 <acis_gui_task+0x338>)
 8001356:	f00c fc93 	bl	800dc80 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001360:	4890      	ldr	r0, [pc, #576]	; (80015a4 <acis_gui_task+0x338>)
 8001362:	f00c fc8d 	bl	800dc80 <HAL_GPIO_WritePin>
 8001366:	e00b      	b.n	8001380 <acis_gui_task+0x114>
    }
    else
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136e:	488d      	ldr	r0, [pc, #564]	; (80015a4 <acis_gui_task+0x338>)
 8001370:	f00c fc86 	bl	800dc80 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137a:	488a      	ldr	r0, [pc, #552]	; (80015a4 <acis_gui_task+0x338>)
 800137c:	f00c fc80 	bl	800dc80 <HAL_GPIO_WritePin>
    }

    if(DragStatus == 1)
 8001380:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <acis_gui_task+0x33c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b01      	cmp	r3, #1
 8001388:	d13e      	bne.n	8001408 <acis_gui_task+0x19c>
    {
      if(DelayDiff(now, check_last) < 400000)
 800138a:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 800138e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001392:	f008 fc63 	bl	8009c5c <DelayDiff>
 8001396:	4602      	mov	r2, r0
 8001398:	4b84      	ldr	r3, [pc, #528]	; (80015ac <acis_gui_task+0x340>)
 800139a:	429a      	cmp	r2, r3
 800139c:	d80c      	bhi.n	80013b8 <acis_gui_task+0x14c>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	487f      	ldr	r0, [pc, #508]	; (80015a4 <acis_gui_task+0x338>)
 80013a6:	f00c fc6b 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b0:	487c      	ldr	r0, [pc, #496]	; (80015a4 <acis_gui_task+0x338>)
 80013b2:	f00c fc65 	bl	800dc80 <HAL_GPIO_WritePin>
 80013b6:	e13f      	b.n	8001638 <acis_gui_task+0x3cc>
      }
      else if(DelayDiff(now, check_last) < 800000)
 80013b8:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 80013bc:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80013c0:	f008 fc4c 	bl	8009c5c <DelayDiff>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <acis_gui_task+0x344>)
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d80c      	bhi.n	80013e6 <acis_gui_task+0x17a>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d2:	4874      	ldr	r0, [pc, #464]	; (80015a4 <acis_gui_task+0x338>)
 80013d4:	f00c fc54 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013de:	4871      	ldr	r0, [pc, #452]	; (80015a4 <acis_gui_task+0x338>)
 80013e0:	f00c fc4e 	bl	800dc80 <HAL_GPIO_WritePin>
 80013e4:	e128      	b.n	8001638 <acis_gui_task+0x3cc>
      }
      else
      {
        check_last = now;
 80013e6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80013ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	486b      	ldr	r0, [pc, #428]	; (80015a4 <acis_gui_task+0x338>)
 80013f6:	f00c fc43 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001400:	4868      	ldr	r0, [pc, #416]	; (80015a4 <acis_gui_task+0x338>)
 8001402:	f00c fc3d 	bl	800dc80 <HAL_GPIO_WritePin>
 8001406:	e117      	b.n	8001638 <acis_gui_task+0x3cc>
      }
    }
    else if(DragStatus == 2)
 8001408:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <acis_gui_task+0x33c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d13e      	bne.n	8001490 <acis_gui_task+0x224>
    {
      if(DelayDiff(now, check_last) < 200000)
 8001412:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8001416:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800141a:	f008 fc1f 	bl	8009c5c <DelayDiff>
 800141e:	4602      	mov	r2, r0
 8001420:	4b64      	ldr	r3, [pc, #400]	; (80015b4 <acis_gui_task+0x348>)
 8001422:	429a      	cmp	r2, r3
 8001424:	d80c      	bhi.n	8001440 <acis_gui_task+0x1d4>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142c:	485d      	ldr	r0, [pc, #372]	; (80015a4 <acis_gui_task+0x338>)
 800142e:	f00c fc27 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	485a      	ldr	r0, [pc, #360]	; (80015a4 <acis_gui_task+0x338>)
 800143a:	f00c fc21 	bl	800dc80 <HAL_GPIO_WritePin>
 800143e:	e0fb      	b.n	8001638 <acis_gui_task+0x3cc>
      }
      else if(DelayDiff(now, check_last) < 400000)
 8001440:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8001444:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001448:	f008 fc08 	bl	8009c5c <DelayDiff>
 800144c:	4602      	mov	r2, r0
 800144e:	4b57      	ldr	r3, [pc, #348]	; (80015ac <acis_gui_task+0x340>)
 8001450:	429a      	cmp	r2, r3
 8001452:	d80c      	bhi.n	800146e <acis_gui_task+0x202>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145a:	4852      	ldr	r0, [pc, #328]	; (80015a4 <acis_gui_task+0x338>)
 800145c:	f00c fc10 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001466:	484f      	ldr	r0, [pc, #316]	; (80015a4 <acis_gui_task+0x338>)
 8001468:	f00c fc0a 	bl	800dc80 <HAL_GPIO_WritePin>
 800146c:	e0e4      	b.n	8001638 <acis_gui_task+0x3cc>
      }
      else
      {
        check_last = now;
 800146e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001472:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147c:	4849      	ldr	r0, [pc, #292]	; (80015a4 <acis_gui_task+0x338>)
 800147e:	f00c fbff 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001488:	4846      	ldr	r0, [pc, #280]	; (80015a4 <acis_gui_task+0x338>)
 800148a:	f00c fbf9 	bl	800dc80 <HAL_GPIO_WritePin>
 800148e:	e0d3      	b.n	8001638 <acis_gui_task+0x3cc>
      }
    }
    else if(DragStatus == 3)
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <acis_gui_task+0x33c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d10c      	bne.n	80014b4 <acis_gui_task+0x248>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a0:	4840      	ldr	r0, [pc, #256]	; (80015a4 <acis_gui_task+0x338>)
 80014a2:	f00c fbed 	bl	800dc80 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ac:	483d      	ldr	r0, [pc, #244]	; (80015a4 <acis_gui_task+0x338>)
 80014ae:	f00c fbe7 	bl	800dc80 <HAL_GPIO_WritePin>
 80014b2:	e0c1      	b.n	8001638 <acis_gui_task+0x3cc>
    }
    else if(DragStatus == 4)
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <acis_gui_task+0x33c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d10c      	bne.n	80014d8 <acis_gui_task+0x26c>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <acis_gui_task+0x338>)
 80014c6:	f00c fbdb 	bl	800dc80 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d0:	4834      	ldr	r0, [pc, #208]	; (80015a4 <acis_gui_task+0x338>)
 80014d2:	f00c fbd5 	bl	800dc80 <HAL_GPIO_WritePin>
 80014d6:	e0af      	b.n	8001638 <acis_gui_task+0x3cc>
    }
    else if(StatusCheck)
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <acis_gui_task+0x34c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03e      	beq.n	8001560 <acis_gui_task+0x2f4>
    {
      if(DelayDiff(now, check_last) < 1000000)
 80014e2:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 80014e6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80014ea:	f008 fbb7 	bl	8009c5c <DelayDiff>
 80014ee:	4602      	mov	r2, r0
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <acis_gui_task+0x350>)
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d80c      	bhi.n	8001510 <acis_gui_task+0x2a4>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fc:	4829      	ldr	r0, [pc, #164]	; (80015a4 <acis_gui_task+0x338>)
 80014fe:	f00c fbbf 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001508:	4826      	ldr	r0, [pc, #152]	; (80015a4 <acis_gui_task+0x338>)
 800150a:	f00c fbb9 	bl	800dc80 <HAL_GPIO_WritePin>
 800150e:	e093      	b.n	8001638 <acis_gui_task+0x3cc>
      }
      else if(DelayDiff(now, check_last) < 2000000)
 8001510:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8001514:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001518:	f008 fba0 	bl	8009c5c <DelayDiff>
 800151c:	4602      	mov	r2, r0
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <acis_gui_task+0x354>)
 8001520:	429a      	cmp	r2, r3
 8001522:	d80c      	bhi.n	800153e <acis_gui_task+0x2d2>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	481e      	ldr	r0, [pc, #120]	; (80015a4 <acis_gui_task+0x338>)
 800152c:	f00c fba8 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001536:	481b      	ldr	r0, [pc, #108]	; (80015a4 <acis_gui_task+0x338>)
 8001538:	f00c fba2 	bl	800dc80 <HAL_GPIO_WritePin>
 800153c:	e07c      	b.n	8001638 <acis_gui_task+0x3cc>
      }
      else
      {
        check_last = now;
 800153e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001542:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154c:	4815      	ldr	r0, [pc, #84]	; (80015a4 <acis_gui_task+0x338>)
 800154e:	f00c fb97 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001558:	4812      	ldr	r0, [pc, #72]	; (80015a4 <acis_gui_task+0x338>)
 800155a:	f00c fb91 	bl	800dc80 <HAL_GPIO_WritePin>
 800155e:	e06b      	b.n	8001638 <acis_gui_task+0x3cc>
      }
    }
    else if(!StatusSynchronized)
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <acis_gui_task+0x358>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d156      	bne.n	8001618 <acis_gui_task+0x3ac>
    {
      if(DelayDiff(now, check_last) < 1000000)
 800156a:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 800156e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001572:	f008 fb73 	bl	8009c5c <DelayDiff>
 8001576:	4602      	mov	r2, r0
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <acis_gui_task+0x350>)
 800157a:	429a      	cmp	r2, r3
 800157c:	d824      	bhi.n	80015c8 <acis_gui_task+0x35c>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <acis_gui_task+0x338>)
 8001586:	f00c fb7b 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <acis_gui_task+0x338>)
 8001592:	f00c fb75 	bl	800dc80 <HAL_GPIO_WritePin>
 8001596:	e04f      	b.n	8001638 <acis_gui_task+0x3cc>
 8001598:	40000c00 	.word	0x40000c00
 800159c:	200004d0 	.word	0x200004d0
 80015a0:	2000697c 	.word	0x2000697c
 80015a4:	40020400 	.word	0x40020400
 80015a8:	200069a0 	.word	0x200069a0
 80015ac:	00061a7f 	.word	0x00061a7f
 80015b0:	000c34ff 	.word	0x000c34ff
 80015b4:	00030d3f 	.word	0x00030d3f
 80015b8:	2000697d 	.word	0x2000697d
 80015bc:	000f423f 	.word	0x000f423f
 80015c0:	001e847f 	.word	0x001e847f
 80015c4:	2000697e 	.word	0x2000697e
      }
      else if(DelayDiff(now, check_last) < 2000000)
 80015c8:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 80015cc:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80015d0:	f008 fb44 	bl	8009c5c <DelayDiff>
 80015d4:	4602      	mov	r2, r0
 80015d6:	4b9a      	ldr	r3, [pc, #616]	; (8001840 <acis_gui_task+0x5d4>)
 80015d8:	429a      	cmp	r2, r3
 80015da:	d80c      	bhi.n	80015f6 <acis_gui_task+0x38a>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e2:	4898      	ldr	r0, [pc, #608]	; (8001844 <acis_gui_task+0x5d8>)
 80015e4:	f00c fb4c 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ee:	4895      	ldr	r0, [pc, #596]	; (8001844 <acis_gui_task+0x5d8>)
 80015f0:	f00c fb46 	bl	800dc80 <HAL_GPIO_WritePin>
 80015f4:	e020      	b.n	8001638 <acis_gui_task+0x3cc>
      }
      else
      {
        check_last = now;
 80015f6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001604:	488f      	ldr	r0, [pc, #572]	; (8001844 <acis_gui_task+0x5d8>)
 8001606:	f00c fb3b 	bl	800dc80 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001610:	488c      	ldr	r0, [pc, #560]	; (8001844 <acis_gui_task+0x5d8>)
 8001612:	f00c fb35 	bl	800dc80 <HAL_GPIO_WritePin>
 8001616:	e00f      	b.n	8001638 <acis_gui_task+0x3cc>
      }
    }
    else
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161e:	4889      	ldr	r0, [pc, #548]	; (8001844 <acis_gui_task+0x5d8>)
 8001620:	f00c fb2e 	bl	800dc80 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162a:	4886      	ldr	r0, [pc, #536]	; (8001844 <acis_gui_task+0x5d8>)
 800162c:	f00c fb28 	bl	800dc80 <HAL_GPIO_WritePin>
      check_last = now;
 8001630:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001634:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    }

    now = Delay_Tick;
 8001638:	4b83      	ldr	r3, [pc, #524]	; (8001848 <acis_gui_task+0x5dc>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    if(BUT_CANCEL_PRESS && BUT_CANCEL_TIME >= 1000 && eMenuItem > MenuMain)
 8001640:	4b82      	ldr	r3, [pc, #520]	; (800184c <acis_gui_task+0x5e0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00f      	beq.n	800166a <acis_gui_task+0x3fe>
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <acis_gui_task+0x5e4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001652:	d30a      	bcc.n	800166a <acis_gui_task+0x3fe>
 8001654:	4b7f      	ldr	r3, [pc, #508]	; (8001854 <acis_gui_task+0x5e8>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b04      	cmp	r3, #4
 800165c:	d905      	bls.n	800166a <acis_gui_task+0x3fe>
    {
      BUT_CANCEL_TIME = 0;
 800165e:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <acis_gui_task+0x5e4>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
      eMenuItem = MenuMain;
 8001664:	4b7b      	ldr	r3, [pc, #492]	; (8001854 <acis_gui_task+0x5e8>)
 8001666:	2204      	movs	r2, #4
 8001668:	701a      	strb	r2, [r3, #0]
    }

    if(StatusPcConnected)
 800166a:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <acis_gui_task+0x5ec>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <acis_gui_task+0x410>
    {
      eMenuItem = MenuPcConnected;
 8001674:	4b77      	ldr	r3, [pc, #476]	; (8001854 <acis_gui_task+0x5e8>)
 8001676:	2203      	movs	r2, #3
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e02d      	b.n	80016d8 <acis_gui_task+0x46c>
    }
    else if(StatusSynchronizing)
 800167c:	4b77      	ldr	r3, [pc, #476]	; (800185c <acis_gui_task+0x5f0>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <acis_gui_task+0x422>
    {
      eMenuItem = MenuSynchronizing;
 8001686:	4b73      	ldr	r3, [pc, #460]	; (8001854 <acis_gui_task+0x5e8>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e024      	b.n	80016d8 <acis_gui_task+0x46c>
    }
    else
    {
      if(SyncError)
 800168e:	4b74      	ldr	r3, [pc, #464]	; (8001860 <acis_gui_task+0x5f4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <acis_gui_task+0x434>
      {
        eMenuItem = MenuSyncError;
 8001698:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <acis_gui_task+0x5e8>)
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e007      	b.n	80016b0 <acis_gui_task+0x444>
      }
      else if(eMenuItem == MenuSynchronizing)
 80016a0:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <acis_gui_task+0x5e8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <acis_gui_task+0x444>
        eMenuItem = MenuMain;
 80016aa:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <acis_gui_task+0x5e8>)
 80016ac:	2204      	movs	r2, #4
 80016ae:	701a      	strb	r2, [r3, #0]

      if(eMenuItem == MenuPcConnected)
 80016b0:	4b68      	ldr	r3, [pc, #416]	; (8001854 <acis_gui_task+0x5e8>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d10e      	bne.n	80016d8 <acis_gui_task+0x46c>
      {
        eMenuItem = MenuSynchronizing;
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <acis_gui_task+0x5e8>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
        StatusSynchronizing = 1;
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <acis_gui_task+0x5f0>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
        SyncStep = 0;
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <acis_gui_task+0x5f8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
        SyncError = 0;
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <acis_gui_task+0x5f4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
        SyncSize = 0;
 80016d2:	4b65      	ldr	r3, [pc, #404]	; (8001868 <acis_gui_task+0x5fc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(eMenuItem != eOldMenu && eMenuItem == MenuTableConfigRestore)
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <acis_gui_task+0x5e8>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f897 21e3 	ldrb.w	r2, [r7, #483]	; 0x1e3
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d010      	beq.n	8001708 <acis_gui_task+0x49c>
 80016e6:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <acis_gui_task+0x5e8>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b15      	cmp	r3, #21
 80016ee:	d10b      	bne.n	8001708 <acis_gui_task+0x49c>
    {
      SyncError = 0;
 80016f0:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <acis_gui_task+0x5f4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
      SyncRequestDone = 0;
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <acis_gui_task+0x600>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
      FlashRequestDone = 0;
 80016fc:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <acis_gui_task+0x604>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
      NeedLoad = 1;
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <acis_gui_task+0x608>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
    }

    if(eMenuItem != eOldMenu && eMenuItem == MenuTableConfigSave)
 8001708:	4b52      	ldr	r3, [pc, #328]	; (8001854 <acis_gui_task+0x5e8>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f897 21e3 	ldrb.w	r2, [r7, #483]	; 0x1e3
 8001712:	429a      	cmp	r2, r3
 8001714:	d010      	beq.n	8001738 <acis_gui_task+0x4cc>
 8001716:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <acis_gui_task+0x5e8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b14      	cmp	r3, #20
 800171e:	d10b      	bne.n	8001738 <acis_gui_task+0x4cc>
    {
      SyncError = 0;
 8001720:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <acis_gui_task+0x5f4>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
      SyncRequestDone = 0;
 8001726:	4b51      	ldr	r3, [pc, #324]	; (800186c <acis_gui_task+0x600>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
      FlashRequestDone = 0;
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <acis_gui_task+0x604>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
      NeedSave = 1;
 8001732:	4b51      	ldr	r3, [pc, #324]	; (8001878 <acis_gui_task+0x60c>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
    }

    if(eMenuItem != eOldMenu && eOldMenu < MenuMainLast && eMenuItem < MenuTableSetup)
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <acis_gui_task+0x5e8>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f897 21e3 	ldrb.w	r2, [r7, #483]	; 0x1e3
 8001742:	429a      	cmp	r2, r3
 8001744:	d040      	beq.n	80017c8 <acis_gui_task+0x55c>
 8001746:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 800174a:	2b09      	cmp	r3, #9
 800174c:	d83c      	bhi.n	80017c8 <acis_gui_task+0x55c>
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <acis_gui_task+0x5e8>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b08      	cmp	r3, #8
 8001756:	d837      	bhi.n	80017c8 <acis_gui_task+0x55c>
    {
      last_menu_switch = now;
 8001758:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800175c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
      display_timeout = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
      BUT_UP = 0;
 8001766:	4b45      	ldr	r3, [pc, #276]	; (800187c <acis_gui_task+0x610>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
      BUT_DOWN = 0;
 800176c:	4b44      	ldr	r3, [pc, #272]	; (8001880 <acis_gui_task+0x614>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
      BUT_LEFT = 0;
 8001772:	4b44      	ldr	r3, [pc, #272]	; (8001884 <acis_gui_task+0x618>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
      BUT_RIGHT = 0;
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <acis_gui_task+0x61c>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
      BUT_ENTER = 0;
 800177e:	4b43      	ldr	r3, [pc, #268]	; (800188c <acis_gui_task+0x620>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
      BUT_CANCEL = 0;
 8001784:	4b42      	ldr	r3, [pc, #264]	; (8001890 <acis_gui_task+0x624>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
      BUT_UP_TIME = 0;
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <acis_gui_task+0x628>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
      BUT_DOWN_TIME = 0;
 8001790:	4b41      	ldr	r3, [pc, #260]	; (8001898 <acis_gui_task+0x62c>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
      BUT_LEFT_TIME = 0;
 8001796:	4b41      	ldr	r3, [pc, #260]	; (800189c <acis_gui_task+0x630>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
      BUT_RIGHT_TIME = 0;
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <acis_gui_task+0x634>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
      BUT_ENTER_TIME = 0;
 80017a2:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <acis_gui_task+0x638>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
      BUT_CANCEL_TIME = 0;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <acis_gui_task+0x5e4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
      menuselecting = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
      menufirst = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
      menuitem = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
      DragStatus = 0;
 80017c0:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <acis_gui_task+0x63c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
 80017c6:	e002      	b.n	80017ce <acis_gui_task+0x562>
    }
    else
    {
      Delay(1);
 80017c8:	200a      	movs	r0, #10
 80017ca:	f00e f847 	bl	800f85c <osDelay>
    }

    eOldMenu = eMenuItem;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <acis_gui_task+0x5e8>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3

    switch (eMenuItem)
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <acis_gui_task+0x5e8>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	2b14      	cmp	r3, #20
 80017e0:	f206 83c4 	bhi.w	8007f6c <acis_gui_task+0x6d00>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <acis_gui_task+0x580>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	08007d19 	.word	0x08007d19
 80017f0:	08007eef 	.word	0x08007eef
 80017f4:	08007cd1 	.word	0x08007cd1
 80017f8:	080018ad 	.word	0x080018ad
 80017fc:	08001a33 	.word	0x08001a33
 8001800:	080028d7 	.word	0x080028d7
 8001804:	080034b7 	.word	0x080034b7
 8001808:	080040b7 	.word	0x080040b7
 800180c:	08005445 	.word	0x08005445
 8001810:	08007f6d 	.word	0x08007f6d
 8001814:	08005897 	.word	0x08005897
 8001818:	08005897 	.word	0x08005897
 800181c:	08005897 	.word	0x08005897
 8001820:	08005897 	.word	0x08005897
 8001824:	08005897 	.word	0x08005897
 8001828:	08005897 	.word	0x08005897
 800182c:	08005897 	.word	0x08005897
 8001830:	08006883 	.word	0x08006883
 8001834:	0800707d 	.word	0x0800707d
 8001838:	08007e55 	.word	0x08007e55
 800183c:	08007ea3 	.word	0x08007ea3
 8001840:	001e847f 	.word	0x001e847f
 8001844:	40020400 	.word	0x40020400
 8001848:	40000c00 	.word	0x40000c00
 800184c:	200159c9 	.word	0x200159c9
 8001850:	200159e0 	.word	0x200159e0
 8001854:	2000695c 	.word	0x2000695c
 8001858:	20006984 	.word	0x20006984
 800185c:	2000697f 	.word	0x2000697f
 8001860:	20006998 	.word	0x20006998
 8001864:	20006987 	.word	0x20006987
 8001868:	2000698c 	.word	0x2000698c
 800186c:	20006988 	.word	0x20006988
 8001870:	20006989 	.word	0x20006989
 8001874:	20006986 	.word	0x20006986
 8001878:	20006985 	.word	0x20006985
 800187c:	200159e6 	.word	0x200159e6
 8001880:	200159e7 	.word	0x200159e7
 8001884:	200159e4 	.word	0x200159e4
 8001888:	200159e5 	.word	0x200159e5
 800188c:	200159e8 	.word	0x200159e8
 8001890:	200159e9 	.word	0x200159e9
 8001894:	200159d4 	.word	0x200159d4
 8001898:	200159d8 	.word	0x200159d8
 800189c:	200159cc 	.word	0x200159cc
 80018a0:	200159d0 	.word	0x200159d0
 80018a4:	200159dc 	.word	0x200159dc
 80018a8:	200069a0 	.word	0x200069a0
    {
      case MenuMain :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 80018ac:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 80018b0:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80018b4:	f008 f9d2 	bl	8009c5c <DelayDiff>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4bc2      	ldr	r3, [pc, #776]	; (8001bc4 <acis_gui_task+0x958>)
 80018bc:	429a      	cmp	r2, r3
 80018be:	f240 8099 	bls.w	80019f4 <acis_gui_task+0x788>
        {
          display_timeout = now;
 80018c2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80018c6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 80018ca:	f008 faf7 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80018ce:	2301      	movs	r3, #1
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2340      	movs	r3, #64	; 0x40
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	2100      	movs	r1, #0
 80018d8:	2000      	movs	r0, #0
 80018da:	f008 fbda 	bl	800a092 <lcd_rect>
          font_setFont(&rre_12x16);
 80018de:	48ba      	ldr	r0, [pc, #744]	; (8001bc8 <acis_gui_task+0x95c>)
 80018e0:	f00f ffcc 	bl	801187c <font_setFont>
          font_printf(4,4,"RPM:");
 80018e4:	4ab9      	ldr	r2, [pc, #740]	; (8001bcc <acis_gui_task+0x960>)
 80018e6:	2104      	movs	r1, #4
 80018e8:	2004      	movs	r0, #4
 80018ea:	f011 f9e9 	bl	8012cc0 <font_printf>
          font_printf(-125,4,"%03.0f",StatusRPM);
 80018ee:	4bb8      	ldr	r3, [pc, #736]	; (8001bd0 <acis_gui_task+0x964>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe50 	bl	8000598 <__aeabi_f2d>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	e9cd 3400 	strd	r3, r4, [sp]
 8001900:	4ab4      	ldr	r2, [pc, #720]	; (8001bd4 <acis_gui_task+0x968>)
 8001902:	2104      	movs	r1, #4
 8001904:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001908:	f011 f9da 	bl	8012cc0 <font_printf>
          font_printf(4,4+font_getHeight(),"Pres:");
 800190c:	f00f ff5c 	bl	80117c8 <font_getHeight>
 8001910:	4603      	mov	r3, r0
 8001912:	3304      	adds	r3, #4
 8001914:	4ab0      	ldr	r2, [pc, #704]	; (8001bd8 <acis_gui_task+0x96c>)
 8001916:	4619      	mov	r1, r3
 8001918:	2004      	movs	r0, #4
 800191a:	f011 f9d1 	bl	8012cc0 <font_printf>
          font_printf(-125,4+font_getHeight(),"%04.0f", StatusPressure);
 800191e:	f00f ff53 	bl	80117c8 <font_getHeight>
 8001922:	4603      	mov	r3, r0
 8001924:	1d1d      	adds	r5, r3, #4
 8001926:	4bad      	ldr	r3, [pc, #692]	; (8001bdc <acis_gui_task+0x970>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe34 	bl	8000598 <__aeabi_f2d>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	e9cd 3400 	strd	r3, r4, [sp]
 8001938:	4aa9      	ldr	r2, [pc, #676]	; (8001be0 <acis_gui_task+0x974>)
 800193a:	4629      	mov	r1, r5
 800193c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001940:	f011 f9be 	bl	8012cc0 <font_printf>
          font_printf(4,4+font_getHeight()*2,"Ign:");
 8001944:	f00f ff40 	bl	80117c8 <font_getHeight>
 8001948:	4603      	mov	r3, r0
 800194a:	3302      	adds	r3, #2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4aa5      	ldr	r2, [pc, #660]	; (8001be4 <acis_gui_task+0x978>)
 8001950:	4619      	mov	r1, r3
 8001952:	2004      	movs	r0, #4
 8001954:	f011 f9b4 	bl	8012cc0 <font_printf>
          font_printf(-125,4+font_getHeight()*2,"%3.0fd", StatusIgnition);
 8001958:	f00f ff36 	bl	80117c8 <font_getHeight>
 800195c:	4603      	mov	r3, r0
 800195e:	3302      	adds	r3, #2
 8001960:	005d      	lsls	r5, r3, #1
 8001962:	4ba1      	ldr	r3, [pc, #644]	; (8001be8 <acis_gui_task+0x97c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fe16 	bl	8000598 <__aeabi_f2d>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	e9cd 3400 	strd	r3, r4, [sp]
 8001974:	4a9d      	ldr	r2, [pc, #628]	; (8001bec <acis_gui_task+0x980>)
 8001976:	4629      	mov	r1, r5
 8001978:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800197c:	f011 f9a0 	bl	8012cc0 <font_printf>
          font_setFont(&rre_5x8);
 8001980:	489b      	ldr	r0, [pc, #620]	; (8001bf0 <acis_gui_task+0x984>)
 8001982:	f00f ff7b 	bl	801187c <font_setFont>
          font_printf(4,53,"%d: %-11s", StatusTableNum+1, StatusTableName);
 8001986:	4b9b      	ldr	r3, [pc, #620]	; (8001bf4 <acis_gui_task+0x988>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	4b9a      	ldr	r3, [pc, #616]	; (8001bf8 <acis_gui_task+0x98c>)
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	4a9a      	ldr	r2, [pc, #616]	; (8001bfc <acis_gui_task+0x990>)
 8001994:	2135      	movs	r1, #53	; 0x35
 8001996:	2004      	movs	r0, #4
 8001998:	f011 f992 	bl	8012cc0 <font_printf>

          if(StatusTimeout)
 800199c:	4b98      	ldr	r3, [pc, #608]	; (8001c00 <acis_gui_task+0x994>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <acis_gui_task+0x748>
            font_printf(-125,53,"Timeout!");
 80019a6:	4a97      	ldr	r2, [pc, #604]	; (8001c04 <acis_gui_task+0x998>)
 80019a8:	2135      	movs	r1, #53	; 0x35
 80019aa:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80019ae:	f011 f987 	bl	8012cc0 <font_printf>
 80019b2:	e01d      	b.n	80019f0 <acis_gui_task+0x784>
          else
          {
            font_printf(-125,53,"%4.1fV", StatusVoltage);
 80019b4:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <acis_gui_task+0x99c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fded 	bl	8000598 <__aeabi_f2d>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	e9cd 3400 	strd	r3, r4, [sp]
 80019c6:	4a91      	ldr	r2, [pc, #580]	; (8001c0c <acis_gui_task+0x9a0>)
 80019c8:	2135      	movs	r1, #53	; 0x35
 80019ca:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80019ce:	f011 f977 	bl	8012cc0 <font_printf>
            //font_printf(-95,53,"%02.0f%%",StatusLoad);
            font_printf(-95,53,"%3.0fC",StatusTemperature);
 80019d2:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <acis_gui_task+0x9a4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdde 	bl	8000598 <__aeabi_f2d>
 80019dc:	4603      	mov	r3, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	e9cd 3400 	strd	r3, r4, [sp]
 80019e4:	4a8b      	ldr	r2, [pc, #556]	; (8001c14 <acis_gui_task+0x9a8>)
 80019e6:	2135      	movs	r1, #53	; 0x35
 80019e8:	f06f 005e 	mvn.w	r0, #94	; 0x5e
 80019ec:	f011 f968 	bl	8012cc0 <font_printf>
          }

          lcd_update();
 80019f0:	f008 f9d8 	bl	8009da4 <lcd_update>
        }
        if(BUT_RIGHT) BUT_RIGHT = 0, eMenuItem++;
 80019f4:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <acis_gui_task+0x9ac>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <acis_gui_task+0x7aa>
 80019fe:	4b86      	ldr	r3, [pc, #536]	; (8001c18 <acis_gui_task+0x9ac>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	4b85      	ldr	r3, [pc, #532]	; (8001c1c <acis_gui_task+0x9b0>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b83      	ldr	r3, [pc, #524]	; (8001c1c <acis_gui_task+0x9b0>)
 8001a10:	701a      	strb	r2, [r3, #0]
        else if(BUT_LEFT) BUT_LEFT = 0, eMenuItem = MenuMainLast - 1;
        break;
 8001a12:	f006 baaf 	b.w	8007f74 <acis_gui_task+0x6d08>
        else if(BUT_LEFT) BUT_LEFT = 0, eMenuItem = MenuMainLast - 1;
 8001a16:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <acis_gui_task+0x9b4>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f006 82a9 	beq.w	8007f74 <acis_gui_task+0x6d08>
 8001a22:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <acis_gui_task+0x9b4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	4b7c      	ldr	r3, [pc, #496]	; (8001c1c <acis_gui_task+0x9b0>)
 8001a2a:	2209      	movs	r2, #9
 8001a2c:	701a      	strb	r2, [r3, #0]
        break;
 8001a2e:	f006 baa1 	b.w	8007f74 <acis_gui_task+0x6d08>
      }

      case MenuMainDrag :
      {
        if(DelayDiff(now, display_timeout) > 30000)
 8001a32:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8001a36:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001a3a:	f008 f90f 	bl	8009c5c <DelayDiff>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f247 5330 	movw	r3, #30000	; 0x7530
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f240 83a2 	bls.w	800218e <acis_gui_task+0xf22>
        {
          display_timeout = now;
 8001a4a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a4e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 8001a52:	f008 fa33 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8001a56:	2301      	movs	r3, #1
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2340      	movs	r3, #64	; 0x40
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2000      	movs	r0, #0
 8001a62:	f008 fb16 	bl	800a092 <lcd_rect>
          font_setFont(&rre_8x12);
 8001a66:	486f      	ldr	r0, [pc, #444]	; (8001c24 <acis_gui_task+0x9b8>)
 8001a68:	f00f ff08 	bl	801187c <font_setFont>
          font_printf(0,2,"Drag Measure");
 8001a6c:	4a6e      	ldr	r2, [pc, #440]	; (8001c28 <acis_gui_task+0x9bc>)
 8001a6e:	2102      	movs	r1, #2
 8001a70:	2000      	movs	r0, #0
 8001a72:	f011 f925 	bl	8012cc0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8001a76:	2301      	movs	r3, #1
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	210f      	movs	r1, #15
 8001a80:	2000      	movs	r0, #0
 8001a82:	f008 fb06 	bl	800a092 <lcd_rect>

          if(DragStatus <= 2)
 8001a86:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <acis_gui_task+0x9c0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f200 814d 	bhi.w	8001d2c <acis_gui_task+0xac0>
          {
            font_setFont(&rre_5x8);
 8001a92:	4857      	ldr	r0, [pc, #348]	; (8001bf0 <acis_gui_task+0x984>)
 8001a94:	f00f fef2 	bl	801187c <font_setFont>
            for(int i = 0; i < sizeof(DragConfig) / sizeof(sConfigLinking); i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a9e:	e140      	b.n	8001d22 <acis_gui_task+0xab6>
            {

              font_printf(3,18 + font_getHeight()*i,"%s:", DragConfig[i].name);
 8001aa0:	f00f fe92 	bl	80117c8 <font_getHeight>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001aaa:	fb03 f302 	mul.w	r3, r3, r2
 8001aae:	f103 0012 	add.w	r0, r3, #18
 8001ab2:	495f      	ldr	r1, [pc, #380]	; (8001c30 <acis_gui_task+0x9c4>)
 8001ab4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	440b      	add	r3, r1
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a5b      	ldr	r2, [pc, #364]	; (8001c34 <acis_gui_task+0x9c8>)
 8001ac6:	4601      	mov	r1, r0
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f011 f8f9 	bl	8012cc0 <font_printf>
              if(DragConfig[i].valuef)
 8001ace:	4958      	ldr	r1, [pc, #352]	; (8001c30 <acis_gui_task+0x9c4>)
 8001ad0:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	440b      	add	r3, r1
 8001ade:	330c      	adds	r3, #12
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80ae 	beq.w	8001c44 <acis_gui_task+0x9d8>
              {
                if((!menuselecting || menuitem != i))
 8001ae8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <acis_gui_task+0x890>
 8001af0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001af4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d021      	beq.n	8001b40 <acis_gui_task+0x8d4>
                  font_printf(-125,18 + font_getHeight()*i,"%03.0f", *DragConfig[i].valuef);
 8001afc:	f00f fe64 	bl	80117c8 <font_getHeight>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b06:	fb03 f302 	mul.w	r3, r3, r2
 8001b0a:	f103 0512 	add.w	r5, r3, #18
 8001b0e:	4948      	ldr	r1, [pc, #288]	; (8001c30 <acis_gui_task+0x9c4>)
 8001b10:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	440b      	add	r3, r1
 8001b1e:	330c      	adds	r3, #12
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd37 	bl	8000598 <__aeabi_f2d>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	e9cd 3400 	strd	r3, r4, [sp]
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <acis_gui_task+0x968>)
 8001b34:	4629      	mov	r1, r5
 8001b36:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001b3a:	f011 f8c1 	bl	8012cc0 <font_printf>
 8001b3e:	e0eb      	b.n	8001d18 <acis_gui_task+0xaac>
                else if(menuitem == i && DelayDiff(now, select_timeout) < 500000)
 8001b40:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001b44:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d12b      	bne.n	8001ba4 <acis_gui_task+0x938>
 8001b4c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001b50:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001b54:	f008 f882 	bl	8009c5c <DelayDiff>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <acis_gui_task+0x9cc>)
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d821      	bhi.n	8001ba4 <acis_gui_task+0x938>
                  font_printf(-125,18 + font_getHeight()*i,"> %03.0f", *DragConfig[i].valuef);
 8001b60:	f00f fe32 	bl	80117c8 <font_getHeight>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b6a:	fb03 f302 	mul.w	r3, r3, r2
 8001b6e:	f103 0512 	add.w	r5, r3, #18
 8001b72:	492f      	ldr	r1, [pc, #188]	; (8001c30 <acis_gui_task+0x9c4>)
 8001b74:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	440b      	add	r3, r1
 8001b82:	330c      	adds	r3, #12
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fd05 	bl	8000598 <__aeabi_f2d>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460c      	mov	r4, r1
 8001b92:	e9cd 3400 	strd	r3, r4, [sp]
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <acis_gui_task+0x9d0>)
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001b9e:	f011 f88f 	bl	8012cc0 <font_printf>
 8001ba2:	e0b9      	b.n	8001d18 <acis_gui_task+0xaac>
                else if(DelayDiff(now, select_timeout) > 800000)
 8001ba4:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001ba8:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001bac:	f008 f856 	bl	8009c5c <DelayDiff>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <acis_gui_task+0x9d4>)
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	f240 80af 	bls.w	8001d18 <acis_gui_task+0xaac>
                  select_timeout = now;
 8001bba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bbe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001bc2:	e0a9      	b.n	8001d18 <acis_gui_task+0xaac>
 8001bc4:	000249f0 	.word	0x000249f0
 8001bc8:	20002cc0 	.word	0x20002cc0
 8001bcc:	08017084 	.word	0x08017084
 8001bd0:	20006960 	.word	0x20006960
 8001bd4:	0801708c 	.word	0x0801708c
 8001bd8:	08017094 	.word	0x08017094
 8001bdc:	20006968 	.word	0x20006968
 8001be0:	0801709c 	.word	0x0801709c
 8001be4:	080170a4 	.word	0x080170a4
 8001be8:	2000696c 	.word	0x2000696c
 8001bec:	080170ac 	.word	0x080170ac
 8001bf0:	20002cd0 	.word	0x20002cd0
 8001bf4:	20006978 	.word	0x20006978
 8001bf8:	200159b0 	.word	0x200159b0
 8001bfc:	080170b4 	.word	0x080170b4
 8001c00:	200159bc 	.word	0x200159bc
 8001c04:	080170c0 	.word	0x080170c0
 8001c08:	20006970 	.word	0x20006970
 8001c0c:	080170cc 	.word	0x080170cc
 8001c10:	20006974 	.word	0x20006974
 8001c14:	080170d4 	.word	0x080170d4
 8001c18:	200159e5 	.word	0x200159e5
 8001c1c:	2000695c 	.word	0x2000695c
 8001c20:	200159e4 	.word	0x200159e4
 8001c24:	20002ce0 	.word	0x20002ce0
 8001c28:	080170dc 	.word	0x080170dc
 8001c2c:	200069a0 	.word	0x200069a0
 8001c30:	080172cc 	.word	0x080172cc
 8001c34:	080170ec 	.word	0x080170ec
 8001c38:	0007a11f 	.word	0x0007a11f
 8001c3c:	080170f0 	.word	0x080170f0
 8001c40:	000c3500 	.word	0x000c3500
              }
              else if(DragConfig[i].valuei)
 8001c44:	49bf      	ldr	r1, [pc, #764]	; (8001f44 <acis_gui_task+0xcd8>)
 8001c46:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	440b      	add	r3, r1
 8001c54:	3308      	adds	r3, #8
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d05d      	beq.n	8001d18 <acis_gui_task+0xaac>
              {
                if((!menuselecting || menuitem != i))
 8001c5c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <acis_gui_task+0xa04>
 8001c64:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001c68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d01a      	beq.n	8001ca6 <acis_gui_task+0xa3a>
                  font_printf(-125,18 + font_getHeight()*i,"%d", *DragConfig[i].valuei);
 8001c70:	f00f fdaa 	bl	80117c8 <font_getHeight>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c7a:	fb03 f302 	mul.w	r3, r3, r2
 8001c7e:	f103 0012 	add.w	r0, r3, #18
 8001c82:	49b0      	ldr	r1, [pc, #704]	; (8001f44 <acis_gui_task+0xcd8>)
 8001c84:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	440b      	add	r3, r1
 8001c92:	3308      	adds	r3, #8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4aab      	ldr	r2, [pc, #684]	; (8001f48 <acis_gui_task+0xcdc>)
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001ca0:	f011 f80e 	bl	8012cc0 <font_printf>
 8001ca4:	e038      	b.n	8001d18 <acis_gui_task+0xaac>
                else if(menuitem == i && DelayDiff(now, select_timeout) < 500000)
 8001ca6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001caa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d124      	bne.n	8001cfc <acis_gui_task+0xa90>
 8001cb2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001cb6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001cba:	f007 ffcf 	bl	8009c5c <DelayDiff>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4ba2      	ldr	r3, [pc, #648]	; (8001f4c <acis_gui_task+0xce0>)
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d81a      	bhi.n	8001cfc <acis_gui_task+0xa90>
                  font_printf(-125,18 + font_getHeight()*i,"> %d", *DragConfig[i].valuei);
 8001cc6:	f00f fd7f 	bl	80117c8 <font_getHeight>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001cd0:	fb03 f302 	mul.w	r3, r3, r2
 8001cd4:	f103 0012 	add.w	r0, r3, #18
 8001cd8:	499a      	ldr	r1, [pc, #616]	; (8001f44 <acis_gui_task+0xcd8>)
 8001cda:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3308      	adds	r3, #8
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a98      	ldr	r2, [pc, #608]	; (8001f50 <acis_gui_task+0xce4>)
 8001cf0:	4601      	mov	r1, r0
 8001cf2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001cf6:	f010 ffe3 	bl	8012cc0 <font_printf>
 8001cfa:	e00d      	b.n	8001d18 <acis_gui_task+0xaac>
                else if(DelayDiff(now, select_timeout) > 800000)
 8001cfc:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001d00:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001d04:	f007 ffaa 	bl	8009c5c <DelayDiff>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b92      	ldr	r3, [pc, #584]	; (8001f54 <acis_gui_task+0xce8>)
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d903      	bls.n	8001d18 <acis_gui_task+0xaac>
                  select_timeout = now;
 8001d10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d14:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            for(int i = 0; i < sizeof(DragConfig) / sizeof(sConfigLinking); i++)
 8001d18:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d22:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	f67f aeba 	bls.w	8001aa0 <acis_gui_task+0x834>
              }
            }
          }

          font_setFont(&rre_bold_6x8);
 8001d2c:	488a      	ldr	r0, [pc, #552]	; (8001f58 <acis_gui_task+0xcec>)
 8001d2e:	f00f fda5 	bl	801187c <font_setFont>
          if(StatusSynchronized)
 8001d32:	4b8a      	ldr	r3, [pc, #552]	; (8001f5c <acis_gui_task+0xcf0>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a1 	beq.w	8001e80 <acis_gui_task+0xc14>
          {
            if(DragStatus == 0)
 8001d3e:	4b88      	ldr	r3, [pc, #544]	; (8001f60 <acis_gui_task+0xcf4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <acis_gui_task+0xaea>
              font_printf(-125,53,"Ready");
 8001d48:	4a86      	ldr	r2, [pc, #536]	; (8001f64 <acis_gui_task+0xcf8>)
 8001d4a:	2135      	movs	r1, #53	; 0x35
 8001d4c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001d50:	f010 ffb6 	bl	8012cc0 <font_printf>
 8001d54:	e0b3      	b.n	8001ebe <acis_gui_task+0xc52>
            else if(DragStatus == 1)
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <acis_gui_task+0xcf4>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d120      	bne.n	8001da2 <acis_gui_task+0xb36>
            {
              if(DelayDiff(now, select_timeout) < 500000)
 8001d60:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001d64:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001d68:	f007 ff78 	bl	8009c5c <DelayDiff>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b77      	ldr	r3, [pc, #476]	; (8001f4c <acis_gui_task+0xce0>)
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d806      	bhi.n	8001d82 <acis_gui_task+0xb16>
                font_printf(-125,53,"SET");
 8001d74:	4a7c      	ldr	r2, [pc, #496]	; (8001f68 <acis_gui_task+0xcfc>)
 8001d76:	2135      	movs	r1, #53	; 0x35
 8001d78:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001d7c:	f010 ffa0 	bl	8012cc0 <font_printf>
 8001d80:	e09d      	b.n	8001ebe <acis_gui_task+0xc52>
              else if(DelayDiff(now, select_timeout) > 800000)
 8001d82:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001d86:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001d8a:	f007 ff67 	bl	8009c5c <DelayDiff>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <acis_gui_task+0xce8>)
 8001d92:	429a      	cmp	r2, r3
 8001d94:	f240 8093 	bls.w	8001ebe <acis_gui_task+0xc52>
                select_timeout = now;
 8001d98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001da0:	e08d      	b.n	8001ebe <acis_gui_task+0xc52>
            }
            else if(DragStatus == 2)
 8001da2:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <acis_gui_task+0xcf4>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d11f      	bne.n	8001dec <acis_gui_task+0xb80>
            {
              if(DelayDiff(now, select_timeout) < 500000)
 8001dac:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001db0:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001db4:	f007 ff52 	bl	8009c5c <DelayDiff>
 8001db8:	4602      	mov	r2, r0
 8001dba:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <acis_gui_task+0xce0>)
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d806      	bhi.n	8001dce <acis_gui_task+0xb62>
                font_printf(-125,53,"GO!");
 8001dc0:	4a6a      	ldr	r2, [pc, #424]	; (8001f6c <acis_gui_task+0xd00>)
 8001dc2:	2135      	movs	r1, #53	; 0x35
 8001dc4:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001dc8:	f010 ff7a 	bl	8012cc0 <font_printf>
 8001dcc:	e077      	b.n	8001ebe <acis_gui_task+0xc52>
              else if(DelayDiff(now, select_timeout) > 800000)
 8001dce:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001dd2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001dd6:	f007 ff41 	bl	8009c5c <DelayDiff>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <acis_gui_task+0xce8>)
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d96d      	bls.n	8001ebe <acis_gui_task+0xc52>
                select_timeout = now;
 8001de2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001de6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001dea:	e068      	b.n	8001ebe <acis_gui_task+0xc52>
            }
            else if(DragStatus == 3)
 8001dec:	4b5c      	ldr	r3, [pc, #368]	; (8001f60 <acis_gui_task+0xcf4>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d11f      	bne.n	8001e36 <acis_gui_task+0xbca>
            {
              if(DelayDiff(now, select_timeout) < 500000)
 8001df6:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001dfa:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001dfe:	f007 ff2d 	bl	8009c5c <DelayDiff>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <acis_gui_task+0xce0>)
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d806      	bhi.n	8001e18 <acis_gui_task+0xbac>
                font_printf(-125,53,"Done");
 8001e0a:	4a59      	ldr	r2, [pc, #356]	; (8001f70 <acis_gui_task+0xd04>)
 8001e0c:	2135      	movs	r1, #53	; 0x35
 8001e0e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001e12:	f010 ff55 	bl	8012cc0 <font_printf>
 8001e16:	e052      	b.n	8001ebe <acis_gui_task+0xc52>
              else if(DelayDiff(now, select_timeout) > 800000)
 8001e18:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001e1c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001e20:	f007 ff1c 	bl	8009c5c <DelayDiff>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <acis_gui_task+0xce8>)
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d948      	bls.n	8001ebe <acis_gui_task+0xc52>
                select_timeout = now;
 8001e2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001e34:	e043      	b.n	8001ebe <acis_gui_task+0xc52>
            }
            else if(DragStatus == 4)
 8001e36:	4b4a      	ldr	r3, [pc, #296]	; (8001f60 <acis_gui_task+0xcf4>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d13e      	bne.n	8001ebe <acis_gui_task+0xc52>
            {
              if(DelayDiff(now, select_timeout) < 500000)
 8001e40:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001e44:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001e48:	f007 ff08 	bl	8009c5c <DelayDiff>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <acis_gui_task+0xce0>)
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d806      	bhi.n	8001e62 <acis_gui_task+0xbf6>
                font_printf(-125,53,"Fail");
 8001e54:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <acis_gui_task+0xd08>)
 8001e56:	2135      	movs	r1, #53	; 0x35
 8001e58:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001e5c:	f010 ff30 	bl	8012cc0 <font_printf>
 8001e60:	e02d      	b.n	8001ebe <acis_gui_task+0xc52>
              else if(DelayDiff(now, select_timeout) > 800000)
 8001e62:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001e66:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001e6a:	f007 fef7 	bl	8009c5c <DelayDiff>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <acis_gui_task+0xce8>)
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d923      	bls.n	8001ebe <acis_gui_task+0xc52>
                select_timeout = now;
 8001e76:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e7a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001e7e:	e01e      	b.n	8001ebe <acis_gui_task+0xc52>
            }
          }
          else
          {
            if(DelayDiff(now, select_timeout) < 500000)
 8001e80:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001e84:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001e88:	f007 fee8 	bl	8009c5c <DelayDiff>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <acis_gui_task+0xce0>)
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d806      	bhi.n	8001ea2 <acis_gui_task+0xc36>
              font_printf(-125,53,"N/Sync");
 8001e94:	4a38      	ldr	r2, [pc, #224]	; (8001f78 <acis_gui_task+0xd0c>)
 8001e96:	2135      	movs	r1, #53	; 0x35
 8001e98:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001e9c:	f010 ff10 	bl	8012cc0 <font_printf>
 8001ea0:	e00d      	b.n	8001ebe <acis_gui_task+0xc52>
            else if(DelayDiff(now, select_timeout) > 800000)
 8001ea2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8001ea6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001eaa:	f007 fed7 	bl	8009c5c <DelayDiff>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <acis_gui_task+0xce8>)
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d903      	bls.n	8001ebe <acis_gui_task+0xc52>
              select_timeout = now;
 8001eb6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001eba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }

          if(DelayDiff(now, value_timeout) > 150000)
 8001ebe:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8001ec2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8001ec6:	f007 fec9 	bl	8009c5c <DelayDiff>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <acis_gui_task+0xd10>)
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d907      	bls.n	8001ee2 <acis_gui_task+0xc76>
          {
            value_timeout = now;
 8001ed2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ed6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            rpm = StatusRPM;
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <acis_gui_task+0xd14>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
          }

          font_setFont(&rre_arialb_16);
 8001ee2:	4828      	ldr	r0, [pc, #160]	; (8001f84 <acis_gui_task+0xd18>)
 8001ee4:	f00f fcca 	bl	801187c <font_setFont>
          font_printf(10,34+14,"%5.2f", DragTime);
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <acis_gui_task+0xd1c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb53 	bl	8000598 <__aeabi_f2d>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	e9cd 3400 	strd	r3, r4, [sp]
 8001efa:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <acis_gui_task+0xd20>)
 8001efc:	2130      	movs	r1, #48	; 0x30
 8001efe:	200a      	movs	r0, #10
 8001f00:	f010 fede 	bl	8012cc0 <font_printf>
          font_printf(-80,34+14,"sec");
 8001f04:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <acis_gui_task+0xd24>)
 8001f06:	2130      	movs	r1, #48	; 0x30
 8001f08:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8001f0c:	f010 fed8 	bl	8012cc0 <font_printf>
          if(DragStatus <= 2)
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <acis_gui_task+0xcf4>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d840      	bhi.n	8001f9c <acis_gui_task+0xd30>
          {
            font_printf(10,34,"%03.0f", rpm);
 8001f1a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001f1e:	f7fe fb3b 	bl	8000598 <__aeabi_f2d>
 8001f22:	4603      	mov	r3, r0
 8001f24:	460c      	mov	r4, r1
 8001f26:	e9cd 3400 	strd	r3, r4, [sp]
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <acis_gui_task+0xd28>)
 8001f2c:	2122      	movs	r1, #34	; 0x22
 8001f2e:	200a      	movs	r0, #10
 8001f30:	f010 fec6 	bl	8012cc0 <font_printf>
            font_printf(-90,34,"RPM");
 8001f34:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <acis_gui_task+0xd2c>)
 8001f36:	2122      	movs	r1, #34	; 0x22
 8001f38:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8001f3c:	f010 fec0 	bl	8012cc0 <font_printf>
 8001f40:	e123      	b.n	800218a <acis_gui_task+0xf1e>
 8001f42:	bf00      	nop
 8001f44:	080172cc 	.word	0x080172cc
 8001f48:	080170fc 	.word	0x080170fc
 8001f4c:	0007a11f 	.word	0x0007a11f
 8001f50:	08017100 	.word	0x08017100
 8001f54:	000c3500 	.word	0x000c3500
 8001f58:	20002d00 	.word	0x20002d00
 8001f5c:	2000697e 	.word	0x2000697e
 8001f60:	200069a0 	.word	0x200069a0
 8001f64:	08017108 	.word	0x08017108
 8001f68:	08017110 	.word	0x08017110
 8001f6c:	08017114 	.word	0x08017114
 8001f70:	08017118 	.word	0x08017118
 8001f74:	08017120 	.word	0x08017120
 8001f78:	08017128 	.word	0x08017128
 8001f7c:	000249f0 	.word	0x000249f0
 8001f80:	20006960 	.word	0x20006960
 8001f84:	20002cf0 	.word	0x20002cf0
 8001f88:	2000699c 	.word	0x2000699c
 8001f8c:	08017130 	.word	0x08017130
 8001f90:	08017138 	.word	0x08017138
 8001f94:	0801708c 	.word	0x0801708c
 8001f98:	0801713c 	.word	0x0801713c
          }
          else if(DragGraphReady)
 8001f9c:	4ba3      	ldr	r3, [pc, #652]	; (800222c <acis_gui_task+0xfc0>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80ec 	beq.w	8002180 <acis_gui_task+0xf14>
          {
            int cnt = DragPointsRawCount;
 8001fa8:	4ba1      	ldr	r3, [pc, #644]	; (8002230 <acis_gui_task+0xfc4>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fb0:	601a      	str	r2, [r3, #0]
            float x = -1.0f ,y = -1.0f , prevx = -1.0f , prevy = -1.0f ;
 8001fb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fb6:	4a9f      	ldr	r2, [pc, #636]	; (8002234 <acis_gui_task+0xfc8>)
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fbe:	4a9d      	ldr	r2, [pc, #628]	; (8002234 <acis_gui_task+0xfc8>)
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <acis_gui_task+0xfc8>)
 8001fc4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fc8:	4b9a      	ldr	r3, [pc, #616]	; (8002234 <acis_gui_task+0xfc8>)
 8001fca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            float max = DragRpmTo;
 8001fce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd2:	4a99      	ldr	r2, [pc, #612]	; (8002238 <acis_gui_task+0xfcc>)
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	601a      	str	r2, [r3, #0]
            float min = DragRpmFrom;
 8001fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fdc:	4a97      	ldr	r2, [pc, #604]	; (800223c <acis_gui_task+0xfd0>)
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
            float depmin = 0;
 8001fe2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
            float depmax = DragTime * 1000000.0f;
 8001fec:	4b94      	ldr	r3, [pc, #592]	; (8002240 <acis_gui_task+0xfd4>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ff6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002244 <acis_gui_task+0xfd8>
 8001ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
            float value, dep;
            for(int i = 0; i < cnt; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8002008:	e0b1      	b.n	800216e <acis_gui_task+0xf02>
            {
              dep = DragPointsRaw[i].Time;
 800200a:	498f      	ldr	r1, [pc, #572]	; (8002248 <acis_gui_task+0xfdc>)
 800200c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3310      	adds	r3, #16
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002022:	ee07 2a90 	vmov	s15, r2
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	edc3 7a00 	vstr	s15, [r3]
              value = DragPointsRaw[i].RPM;
 800202e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002032:	4885      	ldr	r0, [pc, #532]	; (8002248 <acis_gui_task+0xfdc>)
 8002034:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4403      	add	r3, r0
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	600b      	str	r3, [r1, #0]
              x = 126.0f * (dep - depmin) / (depmax-depmin) + 1.0f;
 8002046:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800204a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800204e:	ed92 7a00 	vldr	s14, [r2]
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800224c <acis_gui_task+0xfe0>
 800205e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002062:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002066:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800206a:	ed92 7a00 	vldr	s14, [r2]
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800207e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002082:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002086:	edc3 7a00 	vstr	s15, [r3]
              y = 63 - (value - min) / (max-min) * 47;
 800208a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800208e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002092:	ed92 7a00 	vldr	s14, [r2]
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800209e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80020a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020a6:	ed92 7a00 	vldr	s14, [r2]
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002250 <acis_gui_task+0xfe4>
 80020ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002254 <acis_gui_task+0xfe8>
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	edc3 7a00 	vstr	s15, [r3]

              if(prevx == -1.0f && prevy == -1.0f)
 80020ce:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 80020d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80020d6:	eef4 7a47 	vcmp.f32	s15, s14
 80020da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020de:	d112      	bne.n	8002106 <acis_gui_task+0xe9a>
 80020e0:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 80020e4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80020e8:	eef4 7a47 	vcmp.f32	s15, s14
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f0:	d109      	bne.n	8002106 <acis_gui_task+0xe9a>
                prevx = x, prevy = y;
 80020f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

              lcd_line(prevx, prevy, x, y, 1);
 8002106:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 800210a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	b298      	uxth	r0, r3
 8002114:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 8002118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800211c:	ee17 3a90 	vmov	r3, s15
 8002120:	b299      	uxth	r1, r3
 8002122:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212e:	ee17 3a90 	vmov	r3, s15
 8002132:	b29a      	uxth	r2, r3
 8002134:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002140:	ee17 3a90 	vmov	r3, s15
 8002144:	b29c      	uxth	r4, r3
 8002146:	2301      	movs	r3, #1
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	4623      	mov	r3, r4
 800214c:	f008 f84a 	bl	800a1e4 <lcd_line>

              prevx = x;
 8002150:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
              prevy = y;
 800215a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
            for(int i = 0; i < cnt; i++)
 8002164:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002168:	3301      	adds	r3, #1
 800216a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800216e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002172:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	f6ff af46 	blt.w	800200a <acis_gui_task+0xd9e>
 800217e:	e004      	b.n	800218a <acis_gui_task+0xf1e>
            }
          }
          else
          {
            font_printf(0,30,"Please, wait...");
 8002180:	4a35      	ldr	r2, [pc, #212]	; (8002258 <acis_gui_task+0xfec>)
 8002182:	211e      	movs	r1, #30
 8002184:	2000      	movs	r0, #0
 8002186:	f010 fd9b 	bl	8012cc0 <font_printf>
          }

          lcd_update();
 800218a:	f007 fe0b 	bl	8009da4 <lcd_update>
        }
        if(BUT_ENTER_PRESS)
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <acis_gui_task+0xff0>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <acis_gui_task+0xf74>
        {
          if(StatusSynchronized && !BUT_CANCEL_PRESS && BUT_ENTER_TIME > 500)
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <acis_gui_task+0xff4>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d07a      	beq.n	8002298 <acis_gui_task+0x102c>
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <acis_gui_task+0xff8>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d175      	bne.n	8002298 <acis_gui_task+0x102c>
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <acis_gui_task+0xffc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021b4:	d970      	bls.n	8002298 <acis_gui_task+0x102c>
          {
            select_timeout = now;
 80021b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021ba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            if(DragStatus == 0 || DragStatus >= 3)
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <acis_gui_task+0x1000>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <acis_gui_task+0xf66>
 80021c8:	4b28      	ldr	r3, [pc, #160]	; (800226c <acis_gui_task+0x1000>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d962      	bls.n	8002298 <acis_gui_task+0x102c>
            {
              menuselecting = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
              DragStatus = 1;
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <acis_gui_task+0x1000>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e05b      	b.n	8002298 <acis_gui_task+0x102c>
            }
          }
        }
        else if(BUT_ENTER)
 80021e0:	4b23      	ldr	r3, [pc, #140]	; (8002270 <acis_gui_task+0x1004>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d056      	beq.n	8002298 <acis_gui_task+0x102c>
        {
          display_timeout = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(DragStatus >= 3)
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <acis_gui_task+0x1000>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d903      	bls.n	8002202 <acis_gui_task+0xf96>
            DragStatus = 0;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <acis_gui_task+0x1000>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e03b      	b.n	800227a <acis_gui_task+0x100e>
          else if(!menuselecting && DragStatus == 0)
 8002202:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d134      	bne.n	8002274 <acis_gui_task+0x1008>
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <acis_gui_task+0x1000>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d12f      	bne.n	8002274 <acis_gui_task+0x1008>
          {
              menuselecting = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
              menuitem = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
              select_timeout = now;
 8002220:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002224:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002228:	e027      	b.n	800227a <acis_gui_task+0x100e>
 800222a:	bf00      	nop
 800222c:	200069a1 	.word	0x200069a1
 8002230:	200069a8 	.word	0x200069a8
 8002234:	bf800000 	.word	0xbf800000
 8002238:	200004cc 	.word	0x200004cc
 800223c:	200004c8 	.word	0x200004c8
 8002240:	2000699c 	.word	0x2000699c
 8002244:	49742400 	.word	0x49742400
 8002248:	200069ac 	.word	0x200069ac
 800224c:	42fc0000 	.word	0x42fc0000
 8002250:	423c0000 	.word	0x423c0000
 8002254:	427c0000 	.word	0x427c0000
 8002258:	08017140 	.word	0x08017140
 800225c:	200159c8 	.word	0x200159c8
 8002260:	2000697e 	.word	0x2000697e
 8002264:	200159c9 	.word	0x200159c9
 8002268:	200159dc 	.word	0x200159dc
 800226c:	200069a0 	.word	0x200069a0
 8002270:	200159e8 	.word	0x200159e8

          }
          else
          {
            menuselecting = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 800227a:	4b91      	ldr	r3, [pc, #580]	; (80024c0 <acis_gui_task+0x1254>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8002280:	4b90      	ldr	r3, [pc, #576]	; (80024c4 <acis_gui_task+0x1258>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8002286:	4b90      	ldr	r3, [pc, #576]	; (80024c8 <acis_gui_task+0x125c>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 800228c:	4b8f      	ldr	r3, [pc, #572]	; (80024cc <acis_gui_task+0x1260>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8002292:	4b8f      	ldr	r3, [pc, #572]	; (80024d0 <acis_gui_task+0x1264>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8002298:	4b8e      	ldr	r3, [pc, #568]	; (80024d4 <acis_gui_task+0x1268>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01b      	beq.n	80022da <acis_gui_task+0x106e>
        {
          display_timeout = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 80022a8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <acis_gui_task+0x104a>
          {
            menuselecting = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          DragStatus = 0;
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <acis_gui_task+0x126c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
          BUT_UP = 0;
 80022bc:	4b80      	ldr	r3, [pc, #512]	; (80024c0 <acis_gui_task+0x1254>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 80022c2:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <acis_gui_task+0x1258>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 80022c8:	4b7f      	ldr	r3, [pc, #508]	; (80024c8 <acis_gui_task+0x125c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 80022ce:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <acis_gui_task+0x1260>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 80022d4:	4b7f      	ldr	r3, [pc, #508]	; (80024d4 <acis_gui_task+0x1268>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <acis_gui_task+0x125c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10b      	bne.n	80022fc <acis_gui_task+0x1090>
 80022e4:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <acis_gui_task+0x1270>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8130 	beq.w	8002550 <acis_gui_task+0x12e4>
 80022f0:	4b7b      	ldr	r3, [pc, #492]	; (80024e0 <acis_gui_task+0x1274>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80022f8:	f240 812a 	bls.w	8002550 <acis_gui_task+0x12e4>
        {
          display_timeout = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 8002302:	4b77      	ldr	r3, [pc, #476]	; (80024e0 <acis_gui_task+0x1274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d904      	bls.n	8002314 <acis_gui_task+0x10a8>
 800230a:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <acis_gui_task+0x1274>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3b64      	subs	r3, #100	; 0x64
 8002310:	4a73      	ldr	r2, [pc, #460]	; (80024e0 <acis_gui_task+0x1274>)
 8002312:	6013      	str	r3, [r2, #0]
          if(menuselecting && StatusSynchronized)
 8002314:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8119 	beq.w	8002550 <acis_gui_task+0x12e4>
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <acis_gui_task+0x1278>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8113 	beq.w	8002550 <acis_gui_task+0x12e4>
          {
            if(DragConfig[menuitem].valuef)
 800232a:	496f      	ldr	r1, [pc, #444]	; (80024e8 <acis_gui_task+0x127c>)
 800232c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	440b      	add	r3, r1
 800233a:	330c      	adds	r3, #12
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d06c      	beq.n	800241c <acis_gui_task+0x11b0>
            {
              if(*DragConfig[menuitem].valuef - DragConfig[menuitem].step < DragConfig[menuitem].min)
 8002342:	4969      	ldr	r1, [pc, #420]	; (80024e8 <acis_gui_task+0x127c>)
 8002344:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	440b      	add	r3, r1
 8002352:	330c      	adds	r3, #12
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	ed93 7a00 	vldr	s14, [r3]
 800235a:	4963      	ldr	r1, [pc, #396]	; (80024e8 <acis_gui_task+0x127c>)
 800235c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	440b      	add	r3, r1
 800236a:	3318      	adds	r3, #24
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002374:	495c      	ldr	r1, [pc, #368]	; (80024e8 <acis_gui_task+0x127c>)
 8002376:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	440b      	add	r3, r1
 8002384:	3310      	adds	r3, #16
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	d51a      	bpl.n	80023d0 <acis_gui_task+0x1164>
                *DragConfig[menuitem].valuef = DragConfig[menuitem].min;
 800239a:	4953      	ldr	r1, [pc, #332]	; (80024e8 <acis_gui_task+0x127c>)
 800239c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	440b      	add	r3, r1
 80023aa:	3310      	adds	r3, #16
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	494e      	ldr	r1, [pc, #312]	; (80024e8 <acis_gui_task+0x127c>)
 80023b0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	440b      	add	r3, r1
 80023be:	330c      	adds	r3, #12
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	ee07 0a90 	vmov	s15, r0
 80023c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ca:	edc3 7a00 	vstr	s15, [r3]
 80023ce:	e0b8      	b.n	8002542 <acis_gui_task+0x12d6>
              else *DragConfig[menuitem].valuef -= DragConfig[menuitem].step;
 80023d0:	4945      	ldr	r1, [pc, #276]	; (80024e8 <acis_gui_task+0x127c>)
 80023d2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	440b      	add	r3, r1
 80023e0:	330c      	adds	r3, #12
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	493f      	ldr	r1, [pc, #252]	; (80024e8 <acis_gui_task+0x127c>)
 80023ea:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	440b      	add	r3, r1
 80023f8:	3318      	adds	r3, #24
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	493a      	ldr	r1, [pc, #232]	; (80024e8 <acis_gui_task+0x127c>)
 8002400:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	440b      	add	r3, r1
 800240e:	330c      	adds	r3, #12
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002416:	edc3 7a00 	vstr	s15, [r3]
 800241a:	e092      	b.n	8002542 <acis_gui_task+0x12d6>
            }
            else if(DragConfig[menuitem].valuei)
 800241c:	4932      	ldr	r1, [pc, #200]	; (80024e8 <acis_gui_task+0x127c>)
 800241e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	440b      	add	r3, r1
 800242c:	3308      	adds	r3, #8
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8086 	beq.w	8002542 <acis_gui_task+0x12d6>
            {
              if(*DragConfig[menuitem].valuei - DragConfig[menuitem].step < DragConfig[menuitem].min)
 8002436:	492c      	ldr	r1, [pc, #176]	; (80024e8 <acis_gui_task+0x127c>)
 8002438:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	440b      	add	r3, r1
 8002446:	3308      	adds	r3, #8
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002454:	4924      	ldr	r1, [pc, #144]	; (80024e8 <acis_gui_task+0x127c>)
 8002456:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	440b      	add	r3, r1
 8002464:	3318      	adds	r3, #24
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800246e:	491e      	ldr	r1, [pc, #120]	; (80024e8 <acis_gui_task+0x127c>)
 8002470:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	440b      	add	r3, r1
 800247e:	3310      	adds	r3, #16
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	d52b      	bpl.n	80024ec <acis_gui_task+0x1280>
                *DragConfig[menuitem].valuei = DragConfig[menuitem].min;
 8002494:	4914      	ldr	r1, [pc, #80]	; (80024e8 <acis_gui_task+0x127c>)
 8002496:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	440b      	add	r3, r1
 80024a4:	3308      	adds	r3, #8
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	480f      	ldr	r0, [pc, #60]	; (80024e8 <acis_gui_task+0x127c>)
 80024aa:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	4403      	add	r3, r0
 80024b8:	3310      	adds	r3, #16
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	600b      	str	r3, [r1, #0]
 80024be:	e040      	b.n	8002542 <acis_gui_task+0x12d6>
 80024c0:	200159e6 	.word	0x200159e6
 80024c4:	200159e7 	.word	0x200159e7
 80024c8:	200159e4 	.word	0x200159e4
 80024cc:	200159e5 	.word	0x200159e5
 80024d0:	200159e8 	.word	0x200159e8
 80024d4:	200159e9 	.word	0x200159e9
 80024d8:	200069a0 	.word	0x200069a0
 80024dc:	200159c4 	.word	0x200159c4
 80024e0:	200159cc 	.word	0x200159cc
 80024e4:	2000697e 	.word	0x2000697e
 80024e8:	080172cc 	.word	0x080172cc
              else *DragConfig[menuitem].valuei -= DragConfig[menuitem].step;
 80024ec:	4991      	ldr	r1, [pc, #580]	; (8002734 <acis_gui_task+0x14c8>)
 80024ee:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	440b      	add	r3, r1
 80024fc:	3308      	adds	r3, #8
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	498a      	ldr	r1, [pc, #552]	; (8002734 <acis_gui_task+0x14c8>)
 800250c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	440b      	add	r3, r1
 800251a:	3318      	adds	r3, #24
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002524:	4983      	ldr	r1, [pc, #524]	; (8002734 <acis_gui_task+0x14c8>)
 8002526:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	440b      	add	r3, r1
 8002534:	3308      	adds	r3, #8
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800253c:	ee17 2a90 	vmov	r2, s15
 8002540:	601a      	str	r2, [r3, #0]
            }

            select_timeout = now;
 8002542:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002546:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_LEFT = 0;
 800254a:	4b7b      	ldr	r3, [pc, #492]	; (8002738 <acis_gui_task+0x14cc>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8002550:	4b7a      	ldr	r3, [pc, #488]	; (800273c <acis_gui_task+0x14d0>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <acis_gui_task+0x1306>
 800255a:	4b79      	ldr	r3, [pc, #484]	; (8002740 <acis_gui_task+0x14d4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8125 	beq.w	80027b0 <acis_gui_task+0x1544>
 8002566:	4b77      	ldr	r3, [pc, #476]	; (8002744 <acis_gui_task+0x14d8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800256e:	f240 811f 	bls.w	80027b0 <acis_gui_task+0x1544>
        {
          display_timeout = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 8002578:	4b72      	ldr	r3, [pc, #456]	; (8002744 <acis_gui_task+0x14d8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b64      	cmp	r3, #100	; 0x64
 800257e:	d904      	bls.n	800258a <acis_gui_task+0x131e>
 8002580:	4b70      	ldr	r3, [pc, #448]	; (8002744 <acis_gui_task+0x14d8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3b64      	subs	r3, #100	; 0x64
 8002586:	4a6f      	ldr	r2, [pc, #444]	; (8002744 <acis_gui_task+0x14d8>)
 8002588:	6013      	str	r3, [r2, #0]
          if(menuselecting && StatusSynchronized)
 800258a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 810e 	beq.w	80027b0 <acis_gui_task+0x1544>
 8002594:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <acis_gui_task+0x14dc>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8108 	beq.w	80027b0 <acis_gui_task+0x1544>
          {
            if(DragConfig[menuitem].valuef)
 80025a0:	4964      	ldr	r1, [pc, #400]	; (8002734 <acis_gui_task+0x14c8>)
 80025a2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	440b      	add	r3, r1
 80025b0:	330c      	adds	r3, #12
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d06c      	beq.n	8002692 <acis_gui_task+0x1426>
            {
              if(*DragConfig[menuitem].valuef + DragConfig[menuitem].step > DragConfig[menuitem].max)
 80025b8:	495e      	ldr	r1, [pc, #376]	; (8002734 <acis_gui_task+0x14c8>)
 80025ba:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	440b      	add	r3, r1
 80025c8:	330c      	adds	r3, #12
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	ed93 7a00 	vldr	s14, [r3]
 80025d0:	4958      	ldr	r1, [pc, #352]	; (8002734 <acis_gui_task+0x14c8>)
 80025d2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	440b      	add	r3, r1
 80025e0:	3318      	adds	r3, #24
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ea:	4952      	ldr	r1, [pc, #328]	; (8002734 <acis_gui_task+0x14c8>)
 80025ec:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	440b      	add	r3, r1
 80025fa:	3314      	adds	r3, #20
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	dd1a      	ble.n	8002646 <acis_gui_task+0x13da>
                *DragConfig[menuitem].valuef = DragConfig[menuitem].max;
 8002610:	4948      	ldr	r1, [pc, #288]	; (8002734 <acis_gui_task+0x14c8>)
 8002612:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	440b      	add	r3, r1
 8002620:	3314      	adds	r3, #20
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	4943      	ldr	r1, [pc, #268]	; (8002734 <acis_gui_task+0x14c8>)
 8002626:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	440b      	add	r3, r1
 8002634:	330c      	adds	r3, #12
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	ee07 0a90 	vmov	s15, r0
 800263c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002640:	edc3 7a00 	vstr	s15, [r3]
 8002644:	e0ad      	b.n	80027a2 <acis_gui_task+0x1536>
              else *DragConfig[menuitem].valuef += DragConfig[menuitem].step;
 8002646:	493b      	ldr	r1, [pc, #236]	; (8002734 <acis_gui_task+0x14c8>)
 8002648:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	330c      	adds	r3, #12
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	ed93 7a00 	vldr	s14, [r3]
 800265e:	4935      	ldr	r1, [pc, #212]	; (8002734 <acis_gui_task+0x14c8>)
 8002660:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	440b      	add	r3, r1
 800266e:	3318      	adds	r3, #24
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	492f      	ldr	r1, [pc, #188]	; (8002734 <acis_gui_task+0x14c8>)
 8002676:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	440b      	add	r3, r1
 8002684:	330c      	adds	r3, #12
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268c:	edc3 7a00 	vstr	s15, [r3]
 8002690:	e087      	b.n	80027a2 <acis_gui_task+0x1536>
            }
            else if(DragConfig[menuitem].valuei)
 8002692:	4928      	ldr	r1, [pc, #160]	; (8002734 <acis_gui_task+0x14c8>)
 8002694:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	440b      	add	r3, r1
 80026a2:	3308      	adds	r3, #8
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d07b      	beq.n	80027a2 <acis_gui_task+0x1536>
            {
              if(*DragConfig[menuitem].valuei + DragConfig[menuitem].step > DragConfig[menuitem].max)
 80026aa:	4922      	ldr	r1, [pc, #136]	; (8002734 <acis_gui_task+0x14c8>)
 80026ac:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	440b      	add	r3, r1
 80026ba:	3308      	adds	r3, #8
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c8:	491a      	ldr	r1, [pc, #104]	; (8002734 <acis_gui_task+0x14c8>)
 80026ca:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	440b      	add	r3, r1
 80026d8:	3318      	adds	r3, #24
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e2:	4914      	ldr	r1, [pc, #80]	; (8002734 <acis_gui_task+0x14c8>)
 80026e4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	440b      	add	r3, r1
 80026f2:	3314      	adds	r3, #20
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	dd21      	ble.n	800274c <acis_gui_task+0x14e0>
                *DragConfig[menuitem].valuei = DragConfig[menuitem].max;
 8002708:	490a      	ldr	r1, [pc, #40]	; (8002734 <acis_gui_task+0x14c8>)
 800270a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	440b      	add	r3, r1
 8002718:	3308      	adds	r3, #8
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	4805      	ldr	r0, [pc, #20]	; (8002734 <acis_gui_task+0x14c8>)
 800271e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	4403      	add	r3, r0
 800272c:	3314      	adds	r3, #20
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	600b      	str	r3, [r1, #0]
 8002732:	e036      	b.n	80027a2 <acis_gui_task+0x1536>
 8002734:	080172cc 	.word	0x080172cc
 8002738:	200159e4 	.word	0x200159e4
 800273c:	200159e5 	.word	0x200159e5
 8002740:	200159c5 	.word	0x200159c5
 8002744:	200159d0 	.word	0x200159d0
 8002748:	2000697e 	.word	0x2000697e
              else *DragConfig[menuitem].valuei += DragConfig[menuitem].step;
 800274c:	49b4      	ldr	r1, [pc, #720]	; (8002a20 <acis_gui_task+0x17b4>)
 800274e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	440b      	add	r3, r1
 800275c:	3308      	adds	r3, #8
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800276a:	49ad      	ldr	r1, [pc, #692]	; (8002a20 <acis_gui_task+0x17b4>)
 800276c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	440b      	add	r3, r1
 800277a:	3318      	adds	r3, #24
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002784:	49a6      	ldr	r1, [pc, #664]	; (8002a20 <acis_gui_task+0x17b4>)
 8002786:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	440b      	add	r3, r1
 8002794:	3308      	adds	r3, #8
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 2a90 	vmov	r2, s15
 80027a0:	601a      	str	r2, [r3, #0]
            }

            select_timeout = now;
 80027a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_RIGHT = 0;
 80027aa:	4b9e      	ldr	r3, [pc, #632]	; (8002a24 <acis_gui_task+0x17b8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 80027b0:	4b9d      	ldr	r3, [pc, #628]	; (8002a28 <acis_gui_task+0x17bc>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d019      	beq.n	80027ee <acis_gui_task+0x1582>
        {
          display_timeout = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 80027c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00f      	beq.n	80027e8 <acis_gui_task+0x157c>
          {
            if(++menuitem >= sizeof(DragConfig) / sizeof(sConfigLinking)) menuitem = sizeof(DragConfig) / sizeof(sConfigLinking) - 1;
 80027c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027cc:	3301      	adds	r3, #1
 80027ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d902      	bls.n	80027e0 <acis_gui_task+0x1574>
 80027da:	2301      	movs	r3, #1
 80027dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            select_timeout = now;
 80027e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80027e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_DOWN = 0;
 80027e8:	4b8f      	ldr	r3, [pc, #572]	; (8002a28 <acis_gui_task+0x17bc>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 80027ee:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <acis_gui_task+0x17c0>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d019      	beq.n	800282c <acis_gui_task+0x15c0>
        {
          display_timeout = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 80027fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00f      	beq.n	8002826 <acis_gui_task+0x15ba>
          {
            if(--menuitem < 0) menuitem = 0;
 8002806:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800280a:	3b01      	subs	r3, #1
 800280c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002810:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002814:	2b00      	cmp	r3, #0
 8002816:	da02      	bge.n	800281e <acis_gui_task+0x15b2>
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            select_timeout = now;
 800281e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002822:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_UP = 0;
 8002826:	4b81      	ldr	r3, [pc, #516]	; (8002a2c <acis_gui_task+0x17c0>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
        }

        if(!BUT_ENTER_PRESS && BUT_CANCEL_PRESS && BUT_CANCEL_TIME > 300)
 800282c:	4b80      	ldr	r3, [pc, #512]	; (8002a30 <acis_gui_task+0x17c4>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d114      	bne.n	8002860 <acis_gui_task+0x15f4>
 8002836:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <acis_gui_task+0x17c8>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00f      	beq.n	8002860 <acis_gui_task+0x15f4>
 8002840:	4b7d      	ldr	r3, [pc, #500]	; (8002a38 <acis_gui_task+0x17cc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002848:	d90a      	bls.n	8002860 <acis_gui_task+0x15f4>
        {
          display_timeout = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(DragStatus > 0)
 8002850:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <acis_gui_task+0x17d0>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <acis_gui_task+0x15f4>
          {
            DragStatus = 0;
 800285a:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <acis_gui_task+0x17d0>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT && !menuselecting && (DragStatus == 0 || DragStatus == 3)) eMenuItem++;
 8002860:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <acis_gui_task+0x17b8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <acis_gui_task+0x162c>
 800286a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d112      	bne.n	8002898 <acis_gui_task+0x162c>
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <acis_gui_task+0x17d0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d004      	beq.n	8002886 <acis_gui_task+0x161a>
 800287c:	4b6f      	ldr	r3, [pc, #444]	; (8002a3c <acis_gui_task+0x17d0>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b03      	cmp	r3, #3
 8002884:	d108      	bne.n	8002898 <acis_gui_task+0x162c>
 8002886:	4b6e      	ldr	r3, [pc, #440]	; (8002a40 <acis_gui_task+0x17d4>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <acis_gui_task+0x17d4>)
 8002892:	701a      	strb	r2, [r3, #0]
        else if(BUT_LEFT && !menuselecting && (DragStatus == 0 || DragStatus == 3)) eMenuItem--;
        break;
 8002894:	f005 bb71 	b.w	8007f7a <acis_gui_task+0x6d0e>
        else if(BUT_LEFT && !menuselecting && (DragStatus == 0 || DragStatus == 3)) eMenuItem--;
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <acis_gui_task+0x17d8>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f005 836b 	beq.w	8007f7a <acis_gui_task+0x6d0e>
 80028a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f045 8366 	bne.w	8007f7a <acis_gui_task+0x6d0e>
 80028ae:	4b63      	ldr	r3, [pc, #396]	; (8002a3c <acis_gui_task+0x17d0>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <acis_gui_task+0x1658>
 80028b8:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <acis_gui_task+0x17d0>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	f045 835b 	bne.w	8007f7a <acis_gui_task+0x6d0e>
 80028c4:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <acis_gui_task+0x17d4>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <acis_gui_task+0x17d4>)
 80028d0:	701a      	strb	r2, [r3, #0]
        break;
 80028d2:	f005 bb52 	b.w	8007f7a <acis_gui_task+0x6d0e>
      }

      case MenuMainConfig :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 80028d6:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 80028da:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80028de:	f007 f9bd 	bl	8009c5c <DelayDiff>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <acis_gui_task+0x17dc>)
 80028e6:	429a      	cmp	r2, r3
 80028e8:	f240 827d 	bls.w	8002de6 <acis_gui_task+0x1b7a>
        {
          display_timeout = now;
 80028ec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80028f0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 80028f4:	f007 fae2 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80028f8:	2301      	movs	r3, #1
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2340      	movs	r3, #64	; 0x40
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	2100      	movs	r1, #0
 8002902:	2000      	movs	r0, #0
 8002904:	f007 fbc5 	bl	800a092 <lcd_rect>
          font_setFont(&rre_8x12);
 8002908:	4850      	ldr	r0, [pc, #320]	; (8002a4c <acis_gui_task+0x17e0>)
 800290a:	f00e ffb7 	bl	801187c <font_setFont>
          font_printf(0,2,"Configuration");
 800290e:	4a50      	ldr	r2, [pc, #320]	; (8002a50 <acis_gui_task+0x17e4>)
 8002910:	2102      	movs	r1, #2
 8002912:	2000      	movs	r0, #0
 8002914:	f010 f9d4 	bl	8012cc0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8002918:	2301      	movs	r3, #1
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2301      	movs	r3, #1
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	210f      	movs	r1, #15
 8002922:	2000      	movs	r0, #0
 8002924:	f007 fbb5 	bl	800a092 <lcd_rect>

          font_setFont(&rre_5x8);
 8002928:	484a      	ldr	r0, [pc, #296]	; (8002a54 <acis_gui_task+0x17e8>)
 800292a:	f00e ffa7 	bl	801187c <font_setFont>
          for(int i = 0; i < 6; i++)
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002934:	e250      	b.n	8002dd8 <acis_gui_task+0x1b6c>
          {
            menuselected = menufirst + i;
 8002936:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800293a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800293e:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8002942:	440a      	add	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
            if(menuselected < sizeof(CommonConfig) / sizeof(sConfigLinking))
 8002946:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b0e      	cmp	r3, #14
 800294e:	f200 823e 	bhi.w	8002dce <acis_gui_task+0x1b62>
            {
              font_printf(3,18 + font_getHeight()*i,"%s:", CommonConfig[menuselected].name);
 8002952:	f00e ff39 	bl	80117c8 <font_getHeight>
 8002956:	4602      	mov	r2, r0
 8002958:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800295c:	fb03 f302 	mul.w	r3, r3, r2
 8002960:	f103 0012 	add.w	r0, r3, #18
 8002964:	493c      	ldr	r1, [pc, #240]	; (8002a58 <acis_gui_task+0x17ec>)
 8002966:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	440b      	add	r3, r1
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a38      	ldr	r2, [pc, #224]	; (8002a5c <acis_gui_task+0x17f0>)
 800297a:	4601      	mov	r1, r0
 800297c:	2003      	movs	r0, #3
 800297e:	f010 f99f 	bl	8012cc0 <font_printf>
              if(CommonConfig[menuselected].valuef)
 8002982:	4935      	ldr	r1, [pc, #212]	; (8002a58 <acis_gui_task+0x17ec>)
 8002984:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	440b      	add	r3, r1
 8002994:	330c      	adds	r3, #12
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80ba 	beq.w	8002b12 <acis_gui_task+0x18a6>
              {
                if((!menuselecting || menuitem != menuselected))
 800299e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <acis_gui_task+0x1748>
 80029a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029aa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d057      	beq.n	8002a64 <acis_gui_task+0x17f8>
                  font_printf(-125,18 + font_getHeight()*i,"%.0f", *CommonConfig[menuselected].valuef + CommonConfig[menuselected].guicorrective);
 80029b4:	f00e ff08 	bl	80117c8 <font_getHeight>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80029be:	fb03 f302 	mul.w	r3, r3, r2
 80029c2:	f103 0512 	add.w	r5, r3, #18
 80029c6:	4924      	ldr	r1, [pc, #144]	; (8002a58 <acis_gui_task+0x17ec>)
 80029c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	440b      	add	r3, r1
 80029d8:	330c      	adds	r3, #12
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	491d      	ldr	r1, [pc, #116]	; (8002a58 <acis_gui_task+0x17ec>)
 80029e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	331c      	adds	r3, #28
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a02:	ee17 0a90 	vmov	r0, s15
 8002a06:	f7fd fdc7 	bl	8000598 <__aeabi_f2d>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	460c      	mov	r4, r1
 8002a0e:	e9cd 3400 	strd	r3, r4, [sp]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <acis_gui_task+0x17f4>)
 8002a14:	4629      	mov	r1, r5
 8002a16:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002a1a:	f010 f951 	bl	8012cc0 <font_printf>
 8002a1e:	e1d6      	b.n	8002dce <acis_gui_task+0x1b62>
 8002a20:	080172cc 	.word	0x080172cc
 8002a24:	200159e5 	.word	0x200159e5
 8002a28:	200159e7 	.word	0x200159e7
 8002a2c:	200159e6 	.word	0x200159e6
 8002a30:	200159c8 	.word	0x200159c8
 8002a34:	200159c9 	.word	0x200159c9
 8002a38:	200159e0 	.word	0x200159e0
 8002a3c:	200069a0 	.word	0x200069a0
 8002a40:	2000695c 	.word	0x2000695c
 8002a44:	200159e4 	.word	0x200159e4
 8002a48:	000249f0 	.word	0x000249f0
 8002a4c:	20002ce0 	.word	0x20002ce0
 8002a50:	08017150 	.word	0x08017150
 8002a54:	20002cd0 	.word	0x20002cd0
 8002a58:	0801732c 	.word	0x0801732c
 8002a5c:	080170ec 	.word	0x080170ec
 8002a60:	08017160 	.word	0x08017160
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8002a64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a68:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d13f      	bne.n	8002af2 <acis_gui_task+0x1886>
 8002a72:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002a76:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002a7a:	f007 f8ef 	bl	8009c5c <DelayDiff>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4bc8      	ldr	r3, [pc, #800]	; (8002da4 <acis_gui_task+0x1b38>)
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d835      	bhi.n	8002af2 <acis_gui_task+0x1886>
                  font_printf(-125,18 + font_getHeight()*i,"> %.0f", *CommonConfig[menuselected].valuef + CommonConfig[menuselected].guicorrective);
 8002a86:	f00e fe9f 	bl	80117c8 <font_getHeight>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002a90:	fb03 f302 	mul.w	r3, r3, r2
 8002a94:	f103 0512 	add.w	r5, r3, #18
 8002a98:	49c3      	ldr	r1, [pc, #780]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002a9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	440b      	add	r3, r1
 8002aaa:	330c      	adds	r3, #12
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	ed93 7a00 	vldr	s14, [r3]
 8002ab2:	49bd      	ldr	r1, [pc, #756]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002ab4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	440b      	add	r3, r1
 8002ac4:	331c      	adds	r3, #28
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad4:	ee17 0a90 	vmov	r0, s15
 8002ad8:	f7fd fd5e 	bl	8000598 <__aeabi_f2d>
 8002adc:	4603      	mov	r3, r0
 8002ade:	460c      	mov	r4, r1
 8002ae0:	e9cd 3400 	strd	r3, r4, [sp]
 8002ae4:	4ab1      	ldr	r2, [pc, #708]	; (8002dac <acis_gui_task+0x1b40>)
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002aec:	f010 f8e8 	bl	8012cc0 <font_printf>
 8002af0:	e16d      	b.n	8002dce <acis_gui_task+0x1b62>
                else if(DelayDiff(now, select_timeout) > 800000)
 8002af2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002af6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002afa:	f007 f8af 	bl	8009c5c <DelayDiff>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4bab      	ldr	r3, [pc, #684]	; (8002db0 <acis_gui_task+0x1b44>)
 8002b02:	429a      	cmp	r2, r3
 8002b04:	f240 8163 	bls.w	8002dce <acis_gui_task+0x1b62>
                  select_timeout = now;
 8002b08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b0c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002b10:	e15d      	b.n	8002dce <acis_gui_task+0x1b62>
              }
              else if(CommonConfig[menuselected].valuei)
 8002b12:	49a5      	ldr	r1, [pc, #660]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002b14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	440b      	add	r3, r1
 8002b24:	3308      	adds	r3, #8
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8150 	beq.w	8002dce <acis_gui_task+0x1b62>
              {
                if(CommonConfig[menuselected].min == 0 && CommonConfig[menuselected].max == 1 && CommonConfig[menuselected].step == 1 && CommonConfig[menuselected].guicorrective == 0 && CommonConfig[menuselected].guimultiplier == 1.0f)
 8002b2e:	499e      	ldr	r1, [pc, #632]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002b30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	440b      	add	r3, r1
 8002b40:	3310      	adds	r3, #16
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f040 80b2 	bne.w	8002cae <acis_gui_task+0x1a42>
 8002b4a:	4997      	ldr	r1, [pc, #604]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 80a4 	bne.w	8002cae <acis_gui_task+0x1a42>
 8002b66:	4990      	ldr	r1, [pc, #576]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	440b      	add	r3, r1
 8002b78:	3318      	adds	r3, #24
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b82:	eef4 7a47 	vcmp.f32	s15, s14
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	f040 8090 	bne.w	8002cae <acis_gui_task+0x1a42>
 8002b8e:	4986      	ldr	r1, [pc, #536]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	440b      	add	r3, r1
 8002ba0:	331c      	adds	r3, #28
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 8082 	bne.w	8002cae <acis_gui_task+0x1a42>
 8002baa:	497f      	ldr	r1, [pc, #508]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002bac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	440b      	add	r3, r1
 8002bbc:	3320      	adds	r3, #32
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bc6:	eef4 7a47 	vcmp.f32	s15, s14
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	d16e      	bne.n	8002cae <acis_gui_task+0x1a42>
                {
                  if((!menuselecting || menuitem != menuselected))
 8002bd0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <acis_gui_task+0x197a>
 8002bd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bdc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d020      	beq.n	8002c28 <acis_gui_task+0x19bc>
                    font_printf(-125,18 + font_getHeight()*i,"%s", *CommonConfig[menuselected].valuei ? "Y" : "N");
 8002be6:	f00e fdef 	bl	80117c8 <font_getHeight>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002bf0:	fb03 f302 	mul.w	r3, r3, r2
 8002bf4:	f103 0012 	add.w	r0, r3, #18
 8002bf8:	496b      	ldr	r1, [pc, #428]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002bfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	440b      	add	r3, r1
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <acis_gui_task+0x19ac>
 8002c14:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <acis_gui_task+0x1b48>)
 8002c16:	e000      	b.n	8002c1a <acis_gui_task+0x19ae>
 8002c18:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <acis_gui_task+0x1b4c>)
 8002c1a:	4a68      	ldr	r2, [pc, #416]	; (8002dbc <acis_gui_task+0x1b50>)
 8002c1c:	4601      	mov	r1, r0
 8002c1e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002c22:	f010 f84d 	bl	8012cc0 <font_printf>
 8002c26:	e041      	b.n	8002cac <acis_gui_task+0x1a40>
                  else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8002c28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c2c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d12a      	bne.n	8002c8c <acis_gui_task+0x1a20>
 8002c36:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002c3a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002c3e:	f007 f80d 	bl	8009c5c <DelayDiff>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <acis_gui_task+0x1b38>)
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d820      	bhi.n	8002c8c <acis_gui_task+0x1a20>
                    font_printf(-125,18 + font_getHeight()*i,"> %s", *CommonConfig[menuselected].valuei ? "Y" : "N");
 8002c4a:	f00e fdbd 	bl	80117c8 <font_getHeight>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002c54:	fb03 f302 	mul.w	r3, r3, r2
 8002c58:	f103 0012 	add.w	r0, r3, #18
 8002c5c:	4952      	ldr	r1, [pc, #328]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002c5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3308      	adds	r3, #8
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <acis_gui_task+0x1a10>
 8002c78:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <acis_gui_task+0x1b48>)
 8002c7a:	e000      	b.n	8002c7e <acis_gui_task+0x1a12>
 8002c7c:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <acis_gui_task+0x1b4c>)
 8002c7e:	4a50      	ldr	r2, [pc, #320]	; (8002dc0 <acis_gui_task+0x1b54>)
 8002c80:	4601      	mov	r1, r0
 8002c82:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002c86:	f010 f81b 	bl	8012cc0 <font_printf>
 8002c8a:	e00f      	b.n	8002cac <acis_gui_task+0x1a40>
                  else if(DelayDiff(now, select_timeout) > 800000)
 8002c8c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002c90:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002c94:	f006 ffe2 	bl	8009c5c <DelayDiff>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <acis_gui_task+0x1b44>)
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f240 8095 	bls.w	8002dcc <acis_gui_task+0x1b60>
                    select_timeout = now;
 8002ca2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ca6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                  if((!menuselecting || menuitem != menuselected))
 8002caa:	e08f      	b.n	8002dcc <acis_gui_task+0x1b60>
 8002cac:	e08e      	b.n	8002dcc <acis_gui_task+0x1b60>
                }
                else
                {
                  if((!menuselecting || menuitem != menuselected))
 8002cae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <acis_gui_task+0x1a58>
 8002cb6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002cba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d027      	beq.n	8002d14 <acis_gui_task+0x1aa8>
                    font_printf(-125,18 + font_getHeight()*i,"%d", *CommonConfig[menuselected].valuei + CommonConfig[menuselected].guicorrective);
 8002cc4:	f00e fd80 	bl	80117c8 <font_getHeight>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002cce:	fb03 f302 	mul.w	r3, r3, r2
 8002cd2:	f103 0412 	add.w	r4, r3, #18
 8002cd6:	4934      	ldr	r1, [pc, #208]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002cd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3308      	adds	r3, #8
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6819      	ldr	r1, [r3, #0]
 8002cee:	482e      	ldr	r0, [pc, #184]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002cf0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4403      	add	r3, r0
 8002d00:	331c      	adds	r3, #28
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	440b      	add	r3, r1
 8002d06:	4a2f      	ldr	r2, [pc, #188]	; (8002dc4 <acis_gui_task+0x1b58>)
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002d0e:	f00f ffd7 	bl	8012cc0 <font_printf>
 8002d12:	e05c      	b.n	8002dce <acis_gui_task+0x1b62>
                  else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8002d14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002d18:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d131      	bne.n	8002d86 <acis_gui_task+0x1b1a>
 8002d22:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002d26:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002d2a:	f006 ff97 	bl	8009c5c <DelayDiff>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <acis_gui_task+0x1b38>)
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d827      	bhi.n	8002d86 <acis_gui_task+0x1b1a>
                    font_printf(-125,18 + font_getHeight()*i,"> %d", *CommonConfig[menuselected].valuei + CommonConfig[menuselected].guicorrective);
 8002d36:	f00e fd47 	bl	80117c8 <font_getHeight>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002d40:	fb03 f302 	mul.w	r3, r3, r2
 8002d44:	f103 0412 	add.w	r4, r3, #18
 8002d48:	4917      	ldr	r1, [pc, #92]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002d4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	440b      	add	r3, r1
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	4811      	ldr	r0, [pc, #68]	; (8002da8 <acis_gui_task+0x1b3c>)
 8002d62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4403      	add	r3, r0
 8002d72:	331c      	adds	r3, #28
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	440b      	add	r3, r1
 8002d78:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <acis_gui_task+0x1b5c>)
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002d80:	f00f ff9e 	bl	8012cc0 <font_printf>
 8002d84:	e023      	b.n	8002dce <acis_gui_task+0x1b62>
                  else if(DelayDiff(now, select_timeout) > 800000)
 8002d86:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002d8a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8002d8e:	f006 ff65 	bl	8009c5c <DelayDiff>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <acis_gui_task+0x1b44>)
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d919      	bls.n	8002dce <acis_gui_task+0x1b62>
                    select_timeout = now;
 8002d9a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002d9e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002da2:	e014      	b.n	8002dce <acis_gui_task+0x1b62>
 8002da4:	0007a11f 	.word	0x0007a11f
 8002da8:	0801732c 	.word	0x0801732c
 8002dac:	08017168 	.word	0x08017168
 8002db0:	000c3500 	.word	0x000c3500
 8002db4:	08017170 	.word	0x08017170
 8002db8:	08017174 	.word	0x08017174
 8002dbc:	08017178 	.word	0x08017178
 8002dc0:	0801717c 	.word	0x0801717c
 8002dc4:	080170fc 	.word	0x080170fc
 8002dc8:	08017100 	.word	0x08017100
                  if((!menuselecting || menuitem != menuselected))
 8002dcc:	bf00      	nop
          for(int i = 0; i < 6; i++)
 8002dce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002dd8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	f77f adaa 	ble.w	8002936 <acis_gui_task+0x16ca>
                }
              }
            }
          }

          lcd_update();
 8002de2:	f006 ffdf 	bl	8009da4 <lcd_update>
        }
        if(BUT_ENTER)
 8002de6:	4ba2      	ldr	r3, [pc, #648]	; (8003070 <acis_gui_task+0x1e04>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <acis_gui_task+0x1bc6>
        {
          display_timeout = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(!menuselecting)
 8002df6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <acis_gui_task+0x1ba2>
          {
            menuselecting = 1;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            select_timeout = now;
 8002e04:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e08:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002e0c:	e002      	b.n	8002e14 <acis_gui_task+0x1ba8>

          }
          else
          {
            menuselecting = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 8002e14:	4b97      	ldr	r3, [pc, #604]	; (8003074 <acis_gui_task+0x1e08>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <acis_gui_task+0x1e0c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8002e20:	4b96      	ldr	r3, [pc, #600]	; (800307c <acis_gui_task+0x1e10>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8002e26:	4b96      	ldr	r3, [pc, #600]	; (8003080 <acis_gui_task+0x1e14>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8002e2c:	4b90      	ldr	r3, [pc, #576]	; (8003070 <acis_gui_task+0x1e04>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8002e32:	4b94      	ldr	r3, [pc, #592]	; (8003084 <acis_gui_task+0x1e18>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d018      	beq.n	8002e6e <acis_gui_task+0x1c02>
        {
          display_timeout = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 8002e42:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <acis_gui_task+0x1be4>
          {
            menuselecting = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <acis_gui_task+0x1e08>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <acis_gui_task+0x1e0c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8002e5c:	4b87      	ldr	r3, [pc, #540]	; (800307c <acis_gui_task+0x1e10>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8002e62:	4b87      	ldr	r3, [pc, #540]	; (8003080 <acis_gui_task+0x1e14>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8002e68:	4b86      	ldr	r3, [pc, #536]	; (8003084 <acis_gui_task+0x1e18>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 8002e6e:	4b83      	ldr	r3, [pc, #524]	; (800307c <acis_gui_task+0x1e10>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <acis_gui_task+0x1c24>
 8002e78:	4b83      	ldr	r3, [pc, #524]	; (8003088 <acis_gui_task+0x1e1c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 814a 	beq.w	8003118 <acis_gui_task+0x1eac>
 8002e84:	4b81      	ldr	r3, [pc, #516]	; (800308c <acis_gui_task+0x1e20>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002e8c:	f240 8144 	bls.w	8003118 <acis_gui_task+0x1eac>
        {
          display_timeout = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 8002e96:	4b7d      	ldr	r3, [pc, #500]	; (800308c <acis_gui_task+0x1e20>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d904      	bls.n	8002ea8 <acis_gui_task+0x1c3c>
 8002e9e:	4b7b      	ldr	r3, [pc, #492]	; (800308c <acis_gui_task+0x1e20>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3b64      	subs	r3, #100	; 0x64
 8002ea4:	4a79      	ldr	r2, [pc, #484]	; (800308c <acis_gui_task+0x1e20>)
 8002ea6:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8002ea8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8133 	beq.w	8003118 <acis_gui_task+0x1eac>
          {
            if(StatusSynchronized)
 8002eb2:	4b77      	ldr	r3, [pc, #476]	; (8003090 <acis_gui_task+0x1e24>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8126 	beq.w	800310a <acis_gui_task+0x1e9e>
            {
              if(CommonConfig[menuitem].valuef)
 8002ebe:	4975      	ldr	r1, [pc, #468]	; (8003094 <acis_gui_task+0x1e28>)
 8002ec0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	440b      	add	r3, r1
 8002ece:	330c      	adds	r3, #12
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d07a      	beq.n	8002fcc <acis_gui_task+0x1d60>
              {
                if(*CommonConfig[menuitem].valuef - CommonConfig[menuitem].step < CommonConfig[menuitem].min)
 8002ed6:	496f      	ldr	r1, [pc, #444]	; (8003094 <acis_gui_task+0x1e28>)
 8002ed8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	440b      	add	r3, r1
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	ed93 7a00 	vldr	s14, [r3]
 8002eee:	4969      	ldr	r1, [pc, #420]	; (8003094 <acis_gui_task+0x1e28>)
 8002ef0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	440b      	add	r3, r1
 8002efe:	3318      	adds	r3, #24
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f08:	4962      	ldr	r1, [pc, #392]	; (8003094 <acis_gui_task+0x1e28>)
 8002f0a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	440b      	add	r3, r1
 8002f18:	3310      	adds	r3, #16
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2c:	d51a      	bpl.n	8002f64 <acis_gui_task+0x1cf8>
                  *CommonConfig[menuitem].valuef = CommonConfig[menuitem].min;
 8002f2e:	4959      	ldr	r1, [pc, #356]	; (8003094 <acis_gui_task+0x1e28>)
 8002f30:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3310      	adds	r3, #16
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	4954      	ldr	r1, [pc, #336]	; (8003094 <acis_gui_task+0x1e28>)
 8002f44:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	440b      	add	r3, r1
 8002f52:	330c      	adds	r3, #12
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	ee07 0a90 	vmov	s15, r0
 8002f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
 8002f62:	e024      	b.n	8002fae <acis_gui_task+0x1d42>
                else *CommonConfig[menuitem].valuef -= CommonConfig[menuitem].step;
 8002f64:	494b      	ldr	r1, [pc, #300]	; (8003094 <acis_gui_task+0x1e28>)
 8002f66:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	440b      	add	r3, r1
 8002f74:	330c      	adds	r3, #12
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	ed93 7a00 	vldr	s14, [r3]
 8002f7c:	4945      	ldr	r1, [pc, #276]	; (8003094 <acis_gui_task+0x1e28>)
 8002f7e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3318      	adds	r3, #24
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	4940      	ldr	r1, [pc, #256]	; (8003094 <acis_gui_task+0x1e28>)
 8002f94:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	440b      	add	r3, r1
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002faa:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(CommonConfig[menuitem].valuef, sizeof(float));
 8002fae:	4939      	ldr	r1, [pc, #228]	; (8003094 <acis_gui_task+0x1e28>)
 8002fb0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	440b      	add	r3, r1
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2104      	movs	r1, #4
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe f853 	bl	8001070 <acis_apply_parameter>
 8002fca:	e09e      	b.n	800310a <acis_gui_task+0x1e9e>
              }
              else if(CommonConfig[menuitem].valuei)
 8002fcc:	4931      	ldr	r1, [pc, #196]	; (8003094 <acis_gui_task+0x1e28>)
 8002fce:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	440b      	add	r3, r1
 8002fdc:	3308      	adds	r3, #8
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8092 	beq.w	800310a <acis_gui_task+0x1e9e>
              {
                if(*CommonConfig[menuitem].valuei - CommonConfig[menuitem].step < CommonConfig[menuitem].min)
 8002fe6:	492b      	ldr	r1, [pc, #172]	; (8003094 <acis_gui_task+0x1e28>)
 8002fe8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	ee07 3a90 	vmov	s15, r3
 8003000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003004:	4923      	ldr	r1, [pc, #140]	; (8003094 <acis_gui_task+0x1e28>)
 8003006:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	440b      	add	r3, r1
 8003014:	3318      	adds	r3, #24
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800301e:	491d      	ldr	r1, [pc, #116]	; (8003094 <acis_gui_task+0x1e28>)
 8003020:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	440b      	add	r3, r1
 800302e:	3310      	adds	r3, #16
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	d529      	bpl.n	8003098 <acis_gui_task+0x1e2c>
                  *CommonConfig[menuitem].valuei = CommonConfig[menuitem].min;
 8003044:	4913      	ldr	r1, [pc, #76]	; (8003094 <acis_gui_task+0x1e28>)
 8003046:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	440b      	add	r3, r1
 8003054:	3308      	adds	r3, #8
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	480e      	ldr	r0, [pc, #56]	; (8003094 <acis_gui_task+0x1e28>)
 800305a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	4403      	add	r3, r0
 8003068:	3310      	adds	r3, #16
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	600b      	str	r3, [r1, #0]
 800306e:	e03e      	b.n	80030ee <acis_gui_task+0x1e82>
 8003070:	200159e8 	.word	0x200159e8
 8003074:	200159e6 	.word	0x200159e6
 8003078:	200159e7 	.word	0x200159e7
 800307c:	200159e4 	.word	0x200159e4
 8003080:	200159e5 	.word	0x200159e5
 8003084:	200159e9 	.word	0x200159e9
 8003088:	200159c4 	.word	0x200159c4
 800308c:	200159cc 	.word	0x200159cc
 8003090:	2000697e 	.word	0x2000697e
 8003094:	0801732c 	.word	0x0801732c
                else *CommonConfig[menuitem].valuei -= CommonConfig[menuitem].step;
 8003098:	49a0      	ldr	r1, [pc, #640]	; (800331c <acis_gui_task+0x20b0>)
 800309a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	440b      	add	r3, r1
 80030a8:	3308      	adds	r3, #8
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b6:	4999      	ldr	r1, [pc, #612]	; (800331c <acis_gui_task+0x20b0>)
 80030b8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	440b      	add	r3, r1
 80030c6:	3318      	adds	r3, #24
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d0:	4992      	ldr	r1, [pc, #584]	; (800331c <acis_gui_task+0x20b0>)
 80030d2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	440b      	add	r3, r1
 80030e0:	3308      	adds	r3, #8
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e8:	ee17 2a90 	vmov	r2, s15
 80030ec:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(CommonConfig[menuitem].valuei, sizeof(int32_t));
 80030ee:	498b      	ldr	r1, [pc, #556]	; (800331c <acis_gui_task+0x20b0>)
 80030f0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	440b      	add	r3, r1
 80030fe:	3308      	adds	r3, #8
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2104      	movs	r1, #4
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd ffb3 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 800310a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800310e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_LEFT = 0;
 8003112:	4b83      	ldr	r3, [pc, #524]	; (8003320 <acis_gui_task+0x20b4>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8003118:	4b82      	ldr	r3, [pc, #520]	; (8003324 <acis_gui_task+0x20b8>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <acis_gui_task+0x1ece>
 8003122:	4b81      	ldr	r3, [pc, #516]	; (8003328 <acis_gui_task+0x20bc>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8143 	beq.w	80033b4 <acis_gui_task+0x2148>
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <acis_gui_task+0x20c0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003136:	f240 813d 	bls.w	80033b4 <acis_gui_task+0x2148>
        {
          display_timeout = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 8003140:	4b7a      	ldr	r3, [pc, #488]	; (800332c <acis_gui_task+0x20c0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d904      	bls.n	8003152 <acis_gui_task+0x1ee6>
 8003148:	4b78      	ldr	r3, [pc, #480]	; (800332c <acis_gui_task+0x20c0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3b64      	subs	r3, #100	; 0x64
 800314e:	4a77      	ldr	r2, [pc, #476]	; (800332c <acis_gui_task+0x20c0>)
 8003150:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8003152:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 812c 	beq.w	80033b4 <acis_gui_task+0x2148>
          {
            if(StatusSynchronized)
 800315c:	4b74      	ldr	r3, [pc, #464]	; (8003330 <acis_gui_task+0x20c4>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 811f 	beq.w	80033a6 <acis_gui_task+0x213a>
            {
              if(CommonConfig[menuitem].valuef)
 8003168:	496c      	ldr	r1, [pc, #432]	; (800331c <acis_gui_task+0x20b0>)
 800316a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	440b      	add	r3, r1
 8003178:	330c      	adds	r3, #12
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d07a      	beq.n	8003276 <acis_gui_task+0x200a>
              {
                if(*CommonConfig[menuitem].valuef + CommonConfig[menuitem].step > CommonConfig[menuitem].max)
 8003180:	4966      	ldr	r1, [pc, #408]	; (800331c <acis_gui_task+0x20b0>)
 8003182:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	440b      	add	r3, r1
 8003190:	330c      	adds	r3, #12
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	ed93 7a00 	vldr	s14, [r3]
 8003198:	4960      	ldr	r1, [pc, #384]	; (800331c <acis_gui_task+0x20b0>)
 800319a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	440b      	add	r3, r1
 80031a8:	3318      	adds	r3, #24
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b2:	495a      	ldr	r1, [pc, #360]	; (800331c <acis_gui_task+0x20b0>)
 80031b4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	440b      	add	r3, r1
 80031c2:	3314      	adds	r3, #20
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	dd1a      	ble.n	800320e <acis_gui_task+0x1fa2>
                  *CommonConfig[menuitem].valuef = CommonConfig[menuitem].max;
 80031d8:	4950      	ldr	r1, [pc, #320]	; (800331c <acis_gui_task+0x20b0>)
 80031da:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	440b      	add	r3, r1
 80031e8:	3314      	adds	r3, #20
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	494b      	ldr	r1, [pc, #300]	; (800331c <acis_gui_task+0x20b0>)
 80031ee:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	440b      	add	r3, r1
 80031fc:	330c      	adds	r3, #12
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	ee07 0a90 	vmov	s15, r0
 8003204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003208:	edc3 7a00 	vstr	s15, [r3]
 800320c:	e024      	b.n	8003258 <acis_gui_task+0x1fec>
                else *CommonConfig[menuitem].valuef += CommonConfig[menuitem].step;
 800320e:	4943      	ldr	r1, [pc, #268]	; (800331c <acis_gui_task+0x20b0>)
 8003210:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	440b      	add	r3, r1
 800321e:	330c      	adds	r3, #12
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	ed93 7a00 	vldr	s14, [r3]
 8003226:	493d      	ldr	r1, [pc, #244]	; (800331c <acis_gui_task+0x20b0>)
 8003228:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	440b      	add	r3, r1
 8003236:	3318      	adds	r3, #24
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <acis_gui_task+0x20b0>)
 800323e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	440b      	add	r3, r1
 800324c:	330c      	adds	r3, #12
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003254:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(CommonConfig[menuitem].valuef, sizeof(float));
 8003258:	4930      	ldr	r1, [pc, #192]	; (800331c <acis_gui_task+0x20b0>)
 800325a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	440b      	add	r3, r1
 8003268:	330c      	adds	r3, #12
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2104      	movs	r1, #4
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd fefe 	bl	8001070 <acis_apply_parameter>
 8003274:	e097      	b.n	80033a6 <acis_gui_task+0x213a>
              }
              else if(CommonConfig[menuitem].valuei)
 8003276:	4929      	ldr	r1, [pc, #164]	; (800331c <acis_gui_task+0x20b0>)
 8003278:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	440b      	add	r3, r1
 8003286:	3308      	adds	r3, #8
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 808b 	beq.w	80033a6 <acis_gui_task+0x213a>
              {
                if(*CommonConfig[menuitem].valuei + CommonConfig[menuitem].step > CommonConfig[menuitem].max)
 8003290:	4922      	ldr	r1, [pc, #136]	; (800331c <acis_gui_task+0x20b0>)
 8003292:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	440b      	add	r3, r1
 80032a0:	3308      	adds	r3, #8
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ae:	491b      	ldr	r1, [pc, #108]	; (800331c <acis_gui_task+0x20b0>)
 80032b0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	440b      	add	r3, r1
 80032be:	3318      	adds	r3, #24
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c8:	4914      	ldr	r1, [pc, #80]	; (800331c <acis_gui_task+0x20b0>)
 80032ca:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	440b      	add	r3, r1
 80032d8:	3314      	adds	r3, #20
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	ee07 3a90 	vmov	s15, r3
 80032e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	dd22      	ble.n	8003334 <acis_gui_task+0x20c8>
                  *CommonConfig[menuitem].valuei = CommonConfig[menuitem].max;
 80032ee:	490b      	ldr	r1, [pc, #44]	; (800331c <acis_gui_task+0x20b0>)
 80032f0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	440b      	add	r3, r1
 80032fe:	3308      	adds	r3, #8
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	4806      	ldr	r0, [pc, #24]	; (800331c <acis_gui_task+0x20b0>)
 8003304:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4403      	add	r3, r0
 8003312:	3314      	adds	r3, #20
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	e037      	b.n	800338a <acis_gui_task+0x211e>
 800331a:	bf00      	nop
 800331c:	0801732c 	.word	0x0801732c
 8003320:	200159e4 	.word	0x200159e4
 8003324:	200159e5 	.word	0x200159e5
 8003328:	200159c5 	.word	0x200159c5
 800332c:	200159d0 	.word	0x200159d0
 8003330:	2000697e 	.word	0x2000697e
                else *CommonConfig[menuitem].valuei += CommonConfig[menuitem].step;
 8003334:	49b2      	ldr	r1, [pc, #712]	; (8003600 <acis_gui_task+0x2394>)
 8003336:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	440b      	add	r3, r1
 8003344:	3308      	adds	r3, #8
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003352:	49ab      	ldr	r1, [pc, #684]	; (8003600 <acis_gui_task+0x2394>)
 8003354:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	440b      	add	r3, r1
 8003362:	3318      	adds	r3, #24
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336c:	49a4      	ldr	r1, [pc, #656]	; (8003600 <acis_gui_task+0x2394>)
 800336e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	440b      	add	r3, r1
 800337c:	3308      	adds	r3, #8
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003384:	ee17 2a90 	vmov	r2, s15
 8003388:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(CommonConfig[menuitem].valuei, sizeof(int32_t));
 800338a:	499d      	ldr	r1, [pc, #628]	; (8003600 <acis_gui_task+0x2394>)
 800338c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	440b      	add	r3, r1
 800339a:	3308      	adds	r3, #8
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2104      	movs	r1, #4
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd fe65 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 80033a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_RIGHT = 0;
 80033ae:	4b95      	ldr	r3, [pc, #596]	; (8003604 <acis_gui_task+0x2398>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 80033b4:	4b94      	ldr	r3, [pc, #592]	; (8003608 <acis_gui_task+0x239c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d025      	beq.n	800340a <acis_gui_task+0x219e>
        {
          display_timeout = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 80033c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <acis_gui_task+0x2198>
          {
            if(++menuitem >= sizeof(CommonConfig) / sizeof(sConfigLinking)) menuitem = sizeof(CommonConfig) / sizeof(sConfigLinking) - 1;
 80033cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033d0:	3301      	adds	r3, #1
 80033d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033d6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033da:	2b0e      	cmp	r3, #14
 80033dc:	d902      	bls.n	80033e4 <acis_gui_task+0x2178>
 80033de:	230e      	movs	r3, #14
 80033e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 80033e4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80033e8:	1d1a      	adds	r2, r3, #4
 80033ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d204      	bcs.n	80033fc <acis_gui_task+0x2190>
 80033f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033f6:	3b04      	subs	r3, #4
 80033f8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 80033fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003400:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_DOWN = 0;
 8003404:	4b80      	ldr	r3, [pc, #512]	; (8003608 <acis_gui_task+0x239c>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 800340a:	4b80      	ldr	r3, [pc, #512]	; (800360c <acis_gui_task+0x23a0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d023      	beq.n	800345c <acis_gui_task+0x21f0>
        {
          display_timeout = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 800341a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d019      	beq.n	8003456 <acis_gui_task+0x21ea>
          {
            if(--menuitem < 0) menuitem = 0;
 8003422:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003426:	3b01      	subs	r3, #1
 8003428:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800342c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003430:	2b00      	cmp	r3, #0
 8003432:	da02      	bge.n	800343a <acis_gui_task+0x21ce>
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menuitem < menufirst) menufirst = menuitem;
 800343a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800343e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003442:	429a      	cmp	r2, r3
 8003444:	d903      	bls.n	800344e <acis_gui_task+0x21e2>
 8003446:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800344a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 800344e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003452:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_UP = 0;
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <acis_gui_task+0x23a0>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++;
 800345c:	4b69      	ldr	r3, [pc, #420]	; (8003604 <acis_gui_task+0x2398>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <acis_gui_task+0x221c>
 8003466:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <acis_gui_task+0x221c>
 800346e:	4b65      	ldr	r3, [pc, #404]	; (8003604 <acis_gui_task+0x2398>)
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	4b66      	ldr	r3, [pc, #408]	; (8003610 <acis_gui_task+0x23a4>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b64      	ldr	r3, [pc, #400]	; (8003610 <acis_gui_task+0x23a4>)
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
        break;
 8003484:	f004 bd7c 	b.w	8007f80 <acis_gui_task+0x6d14>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
 8003488:	4b62      	ldr	r3, [pc, #392]	; (8003614 <acis_gui_task+0x23a8>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f004 8576 	beq.w	8007f80 <acis_gui_task+0x6d14>
 8003494:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003498:	2b00      	cmp	r3, #0
 800349a:	f044 8571 	bne.w	8007f80 <acis_gui_task+0x6d14>
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <acis_gui_task+0x23a8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	4b5a      	ldr	r3, [pc, #360]	; (8003610 <acis_gui_task+0x23a4>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b58      	ldr	r3, [pc, #352]	; (8003610 <acis_gui_task+0x23a4>)
 80034b0:	701a      	strb	r2, [r3, #0]
        break;
 80034b2:	f004 bd65 	b.w	8007f80 <acis_gui_task+0x6d14>
      }

      case MenuTableSelect :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 80034b6:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 80034ba:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80034be:	f006 fbcd 	bl	8009c5c <DelayDiff>
 80034c2:	4602      	mov	r2, r0
 80034c4:	4b54      	ldr	r3, [pc, #336]	; (8003618 <acis_gui_task+0x23ac>)
 80034c6:	429a      	cmp	r2, r3
 80034c8:	f240 8222 	bls.w	8003910 <acis_gui_task+0x26a4>
        {
          display_timeout = now;
 80034cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80034d0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 80034d4:	f006 fcf2 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80034d8:	2301      	movs	r3, #1
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2340      	movs	r3, #64	; 0x40
 80034de:	2280      	movs	r2, #128	; 0x80
 80034e0:	2100      	movs	r1, #0
 80034e2:	2000      	movs	r0, #0
 80034e4:	f006 fdd5 	bl	800a092 <lcd_rect>
          font_setFont(&rre_8x12);
 80034e8:	484c      	ldr	r0, [pc, #304]	; (800361c <acis_gui_task+0x23b0>)
 80034ea:	f00e f9c7 	bl	801187c <font_setFont>
          font_printf(0,2,"Table Select");
 80034ee:	4a4c      	ldr	r2, [pc, #304]	; (8003620 <acis_gui_task+0x23b4>)
 80034f0:	2102      	movs	r1, #2
 80034f2:	2000      	movs	r0, #0
 80034f4:	f00f fbe4 	bl	8012cc0 <font_printf>
          lcd_rect(0,15,128,1,1);
 80034f8:	2301      	movs	r3, #1
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2301      	movs	r3, #1
 80034fe:	2280      	movs	r2, #128	; 0x80
 8003500:	210f      	movs	r1, #15
 8003502:	2000      	movs	r0, #0
 8003504:	f006 fdc5 	bl	800a092 <lcd_rect>

          font_setFont(&rre_5x8);
 8003508:	4846      	ldr	r0, [pc, #280]	; (8003624 <acis_gui_task+0x23b8>)
 800350a:	f00e f9b7 	bl	801187c <font_setFont>
          for(int i = 0; i < 6; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003514:	e1f5      	b.n	8003902 <acis_gui_task+0x2696>
          {
            menuselected = menufirst + i;
 8003516:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800351a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800351e:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8003522:	440a      	add	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
            if(menuselected < sizeof(TableInitial) / sizeof(sConfigLinking))
 8003526:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b04      	cmp	r3, #4
 800352e:	f200 81e3 	bhi.w	80038f8 <acis_gui_task+0x268c>
            {
              if(TableInitial[menuselected].valuef)
 8003532:	493d      	ldr	r1, [pc, #244]	; (8003628 <acis_gui_task+0x23bc>)
 8003534:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	440b      	add	r3, r1
 8003544:	330c      	adds	r3, #12
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80ca 	beq.w	80036e2 <acis_gui_task+0x2476>
              {
                font_printf(3,18 + font_getHeight()*i,"%s:", TableInitial[menuselected].name);
 800354e:	f00e f93b 	bl	80117c8 <font_getHeight>
 8003552:	4602      	mov	r2, r0
 8003554:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003558:	fb03 f302 	mul.w	r3, r3, r2
 800355c:	f103 0012 	add.w	r0, r3, #18
 8003560:	4931      	ldr	r1, [pc, #196]	; (8003628 <acis_gui_task+0x23bc>)
 8003562:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	440b      	add	r3, r1
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2d      	ldr	r2, [pc, #180]	; (800362c <acis_gui_task+0x23c0>)
 8003576:	4601      	mov	r1, r0
 8003578:	2003      	movs	r0, #3
 800357a:	f00f fba1 	bl	8012cc0 <font_printf>
                if((!menuselecting || menuitem != menuselected))
 800357e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <acis_gui_task+0x2328>
 8003586:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800358a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d04f      	beq.n	8003634 <acis_gui_task+0x23c8>
                  font_printf(-125,18 + font_getHeight()*i,"%.0f", *TableInitial[menuselected].valuef + TableInitial[menuselected].guicorrective);
 8003594:	f00e f918 	bl	80117c8 <font_getHeight>
 8003598:	4602      	mov	r2, r0
 800359a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800359e:	fb03 f302 	mul.w	r3, r3, r2
 80035a2:	f103 0512 	add.w	r5, r3, #18
 80035a6:	4920      	ldr	r1, [pc, #128]	; (8003628 <acis_gui_task+0x23bc>)
 80035a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	440b      	add	r3, r1
 80035b8:	330c      	adds	r3, #12
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	ed93 7a00 	vldr	s14, [r3]
 80035c0:	4919      	ldr	r1, [pc, #100]	; (8003628 <acis_gui_task+0x23bc>)
 80035c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	440b      	add	r3, r1
 80035d2:	331c      	adds	r3, #28
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e2:	ee17 0a90 	vmov	r0, s15
 80035e6:	f7fc ffd7 	bl	8000598 <__aeabi_f2d>
 80035ea:	4603      	mov	r3, r0
 80035ec:	460c      	mov	r4, r1
 80035ee:	e9cd 3400 	strd	r3, r4, [sp]
 80035f2:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <acis_gui_task+0x23c4>)
 80035f4:	4629      	mov	r1, r5
 80035f6:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80035fa:	f00f fb61 	bl	8012cc0 <font_printf>
 80035fe:	e17b      	b.n	80038f8 <acis_gui_task+0x268c>
 8003600:	0801732c 	.word	0x0801732c
 8003604:	200159e5 	.word	0x200159e5
 8003608:	200159e7 	.word	0x200159e7
 800360c:	200159e6 	.word	0x200159e6
 8003610:	2000695c 	.word	0x2000695c
 8003614:	200159e4 	.word	0x200159e4
 8003618:	000249f0 	.word	0x000249f0
 800361c:	20002ce0 	.word	0x20002ce0
 8003620:	08017184 	.word	0x08017184
 8003624:	20002cd0 	.word	0x20002cd0
 8003628:	080175fc 	.word	0x080175fc
 800362c:	080170ec 	.word	0x080170ec
 8003630:	08017160 	.word	0x08017160
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8003634:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003638:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d13f      	bne.n	80036c2 <acis_gui_task+0x2456>
 8003642:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8003646:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800364a:	f006 fb07 	bl	8009c5c <DelayDiff>
 800364e:	4602      	mov	r2, r0
 8003650:	4bb9      	ldr	r3, [pc, #740]	; (8003938 <acis_gui_task+0x26cc>)
 8003652:	429a      	cmp	r2, r3
 8003654:	d835      	bhi.n	80036c2 <acis_gui_task+0x2456>
                  font_printf(-125,18 + font_getHeight()*i,"> %.0f", *TableInitial[menuselected].valuef + TableInitial[menuselected].guicorrective);
 8003656:	f00e f8b7 	bl	80117c8 <font_getHeight>
 800365a:	4602      	mov	r2, r0
 800365c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003660:	fb03 f302 	mul.w	r3, r3, r2
 8003664:	f103 0512 	add.w	r5, r3, #18
 8003668:	49b4      	ldr	r1, [pc, #720]	; (800393c <acis_gui_task+0x26d0>)
 800366a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	440b      	add	r3, r1
 800367a:	330c      	adds	r3, #12
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	ed93 7a00 	vldr	s14, [r3]
 8003682:	49ae      	ldr	r1, [pc, #696]	; (800393c <acis_gui_task+0x26d0>)
 8003684:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	440b      	add	r3, r1
 8003694:	331c      	adds	r3, #28
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a4:	ee17 0a90 	vmov	r0, s15
 80036a8:	f7fc ff76 	bl	8000598 <__aeabi_f2d>
 80036ac:	4603      	mov	r3, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	e9cd 3400 	strd	r3, r4, [sp]
 80036b4:	4aa2      	ldr	r2, [pc, #648]	; (8003940 <acis_gui_task+0x26d4>)
 80036b6:	4629      	mov	r1, r5
 80036b8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80036bc:	f00f fb00 	bl	8012cc0 <font_printf>
 80036c0:	e11a      	b.n	80038f8 <acis_gui_task+0x268c>
                else if(DelayDiff(now, select_timeout) > 800000)
 80036c2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80036c6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80036ca:	f006 fac7 	bl	8009c5c <DelayDiff>
 80036ce:	4602      	mov	r2, r0
 80036d0:	4b9c      	ldr	r3, [pc, #624]	; (8003944 <acis_gui_task+0x26d8>)
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f240 8110 	bls.w	80038f8 <acis_gui_task+0x268c>
                  select_timeout = now;
 80036d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80036e0:	e10a      	b.n	80038f8 <acis_gui_task+0x268c>
              }
              else if(TableInitial[menuselected].valuei)
 80036e2:	4996      	ldr	r1, [pc, #600]	; (800393c <acis_gui_task+0x26d0>)
 80036e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	440b      	add	r3, r1
 80036f4:	3308      	adds	r3, #8
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8093 	beq.w	8003824 <acis_gui_task+0x25b8>
              {
                font_printf(3,18 + font_getHeight()*i,"%s:", TableInitial[menuselected].name);
 80036fe:	f00e f863 	bl	80117c8 <font_getHeight>
 8003702:	4602      	mov	r2, r0
 8003704:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003708:	fb03 f302 	mul.w	r3, r3, r2
 800370c:	f103 0012 	add.w	r0, r3, #18
 8003710:	498a      	ldr	r1, [pc, #552]	; (800393c <acis_gui_task+0x26d0>)
 8003712:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	440b      	add	r3, r1
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a88      	ldr	r2, [pc, #544]	; (8003948 <acis_gui_task+0x26dc>)
 8003726:	4601      	mov	r1, r0
 8003728:	2003      	movs	r0, #3
 800372a:	f00f fac9 	bl	8012cc0 <font_printf>
                if((!menuselecting || menuitem != menuselected))
 800372e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d006      	beq.n	8003744 <acis_gui_task+0x24d8>
 8003736:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800373a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d027      	beq.n	8003794 <acis_gui_task+0x2528>
                  font_printf(-125,18 + font_getHeight()*i,"%d", *TableInitial[menuselected].valuei + TableInitial[menuselected].guicorrective);
 8003744:	f00e f840 	bl	80117c8 <font_getHeight>
 8003748:	4602      	mov	r2, r0
 800374a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800374e:	fb03 f302 	mul.w	r3, r3, r2
 8003752:	f103 0412 	add.w	r4, r3, #18
 8003756:	4979      	ldr	r1, [pc, #484]	; (800393c <acis_gui_task+0x26d0>)
 8003758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	440b      	add	r3, r1
 8003768:	3308      	adds	r3, #8
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	4873      	ldr	r0, [pc, #460]	; (800393c <acis_gui_task+0x26d0>)
 8003770:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4403      	add	r3, r0
 8003780:	331c      	adds	r3, #28
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	440b      	add	r3, r1
 8003786:	4a71      	ldr	r2, [pc, #452]	; (800394c <acis_gui_task+0x26e0>)
 8003788:	4621      	mov	r1, r4
 800378a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800378e:	f00f fa97 	bl	8012cc0 <font_printf>
 8003792:	e0b1      	b.n	80038f8 <acis_gui_task+0x268c>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8003794:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003798:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d131      	bne.n	8003806 <acis_gui_task+0x259a>
 80037a2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80037a6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80037aa:	f006 fa57 	bl	8009c5c <DelayDiff>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b61      	ldr	r3, [pc, #388]	; (8003938 <acis_gui_task+0x26cc>)
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d827      	bhi.n	8003806 <acis_gui_task+0x259a>
                  font_printf(-125,18 + font_getHeight()*i,"> %d", *TableInitial[menuselected].valuei + TableInitial[menuselected].guicorrective);
 80037b6:	f00e f807 	bl	80117c8 <font_getHeight>
 80037ba:	4602      	mov	r2, r0
 80037bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80037c0:	fb03 f302 	mul.w	r3, r3, r2
 80037c4:	f103 0412 	add.w	r4, r3, #18
 80037c8:	495c      	ldr	r1, [pc, #368]	; (800393c <acis_gui_task+0x26d0>)
 80037ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	440b      	add	r3, r1
 80037da:	3308      	adds	r3, #8
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	4856      	ldr	r0, [pc, #344]	; (800393c <acis_gui_task+0x26d0>)
 80037e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4403      	add	r3, r0
 80037f2:	331c      	adds	r3, #28
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	440b      	add	r3, r1
 80037f8:	4a55      	ldr	r2, [pc, #340]	; (8003950 <acis_gui_task+0x26e4>)
 80037fa:	4621      	mov	r1, r4
 80037fc:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003800:	f00f fa5e 	bl	8012cc0 <font_printf>
 8003804:	e078      	b.n	80038f8 <acis_gui_task+0x268c>
                else if(DelayDiff(now, select_timeout) > 800000)
 8003806:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800380a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800380e:	f006 fa25 	bl	8009c5c <DelayDiff>
 8003812:	4602      	mov	r2, r0
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <acis_gui_task+0x26d8>)
 8003816:	429a      	cmp	r2, r3
 8003818:	d96e      	bls.n	80038f8 <acis_gui_task+0x268c>
                  select_timeout = now;
 800381a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800381e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003822:	e069      	b.n	80038f8 <acis_gui_task+0x268c>
              }
              else
              {
                if((!menuselecting || menuitem != menuselected))
 8003824:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <acis_gui_task+0x25ce>
 800382c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003830:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d018      	beq.n	800386c <acis_gui_task+0x2600>
                  font_printf(3,18 + font_getHeight()*i,"%s", TableInitial[menuselected].name);
 800383a:	f00d ffc5 	bl	80117c8 <font_getHeight>
 800383e:	4602      	mov	r2, r0
 8003840:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003844:	fb03 f302 	mul.w	r3, r3, r2
 8003848:	f103 0012 	add.w	r0, r3, #18
 800384c:	493b      	ldr	r1, [pc, #236]	; (800393c <acis_gui_task+0x26d0>)
 800384e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	440b      	add	r3, r1
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3c      	ldr	r2, [pc, #240]	; (8003954 <acis_gui_task+0x26e8>)
 8003862:	4601      	mov	r1, r0
 8003864:	2003      	movs	r0, #3
 8003866:	f00f fa2b 	bl	8012cc0 <font_printf>
 800386a:	e045      	b.n	80038f8 <acis_gui_task+0x268c>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 800386c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003870:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d130      	bne.n	80038dc <acis_gui_task+0x2670>
 800387a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800387e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8003882:	f006 f9eb 	bl	8009c5c <DelayDiff>
 8003886:	4602      	mov	r2, r0
 8003888:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <acis_gui_task+0x26cc>)
 800388a:	429a      	cmp	r2, r3
 800388c:	d826      	bhi.n	80038dc <acis_gui_task+0x2670>
                {
                  font_printf(3,18 + font_getHeight()*i,"%s", TableInitial[menuselected].name);
 800388e:	f00d ff9b 	bl	80117c8 <font_getHeight>
 8003892:	4602      	mov	r2, r0
 8003894:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003898:	fb03 f302 	mul.w	r3, r3, r2
 800389c:	f103 0012 	add.w	r0, r3, #18
 80038a0:	4926      	ldr	r1, [pc, #152]	; (800393c <acis_gui_task+0x26d0>)
 80038a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	440b      	add	r3, r1
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <acis_gui_task+0x26e8>)
 80038b6:	4601      	mov	r1, r0
 80038b8:	2003      	movs	r0, #3
 80038ba:	f00f fa01 	bl	8012cc0 <font_printf>
                  font_printf(-125,18 + font_getHeight()*i,"<");
 80038be:	f00d ff83 	bl	80117c8 <font_getHeight>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80038c8:	fb03 f302 	mul.w	r3, r3, r2
 80038cc:	3312      	adds	r3, #18
 80038ce:	4a22      	ldr	r2, [pc, #136]	; (8003958 <acis_gui_task+0x26ec>)
 80038d0:	4619      	mov	r1, r3
 80038d2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80038d6:	f00f f9f3 	bl	8012cc0 <font_printf>
 80038da:	e00d      	b.n	80038f8 <acis_gui_task+0x268c>
                }
                else if(DelayDiff(now, select_timeout) > 800000)
 80038dc:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80038e0:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80038e4:	f006 f9ba 	bl	8009c5c <DelayDiff>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <acis_gui_task+0x26d8>)
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d903      	bls.n	80038f8 <acis_gui_task+0x268c>
                  select_timeout = now;
 80038f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80038f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          for(int i = 0; i < 6; i++)
 80038f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003902:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003906:	2b05      	cmp	r3, #5
 8003908:	f77f ae05 	ble.w	8003516 <acis_gui_task+0x22aa>
              }
            }
          }

          lcd_update();
 800390c:	f006 fa4a 	bl	8009da4 <lcd_update>
        }
        if(BUT_ENTER)
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <acis_gui_task+0x26f0>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d067      	beq.n	80039ea <acis_gui_task+0x277e>
        {
          display_timeout = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(!menuselecting)
 8003920:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11b      	bne.n	8003960 <acis_gui_task+0x26f4>
          {
            menuselecting = 1;
 8003928:	2301      	movs	r3, #1
 800392a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            select_timeout = now;
 800392e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003932:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003936:	e046      	b.n	80039c6 <acis_gui_task+0x275a>
 8003938:	0007a11f 	.word	0x0007a11f
 800393c:	080175fc 	.word	0x080175fc
 8003940:	08017168 	.word	0x08017168
 8003944:	000c3500 	.word	0x000c3500
 8003948:	080170ec 	.word	0x080170ec
 800394c:	080170fc 	.word	0x080170fc
 8003950:	08017100 	.word	0x08017100
 8003954:	08017178 	.word	0x08017178
 8003958:	08017194 	.word	0x08017194
 800395c:	200159e8 	.word	0x200159e8

          }
          else
          {
            if(TableInitial[menuitem].valuef == NULL && TableInitial[menuitem].valuei == NULL &&  TableInitial[menuitem].menuitem > MenuUndefined)
 8003960:	49ba      	ldr	r1, [pc, #744]	; (8003c4c <acis_gui_task+0x29e0>)
 8003962:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	440b      	add	r3, r1
 8003970:	330c      	adds	r3, #12
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d123      	bne.n	80039c0 <acis_gui_task+0x2754>
 8003978:	49b4      	ldr	r1, [pc, #720]	; (8003c4c <acis_gui_task+0x29e0>)
 800397a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	440b      	add	r3, r1
 8003988:	3308      	adds	r3, #8
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d117      	bne.n	80039c0 <acis_gui_task+0x2754>
 8003990:	49ae      	ldr	r1, [pc, #696]	; (8003c4c <acis_gui_task+0x29e0>)
 8003992:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	440b      	add	r3, r1
 80039a0:	3324      	adds	r3, #36	; 0x24
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <acis_gui_task+0x2754>
            {
              eMenuItem = TableInitial[menuitem].menuitem;
 80039a8:	49a8      	ldr	r1, [pc, #672]	; (8003c4c <acis_gui_task+0x29e0>)
 80039aa:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	440b      	add	r3, r1
 80039b8:	3324      	adds	r3, #36	; 0x24
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	4ba4      	ldr	r3, [pc, #656]	; (8003c50 <acis_gui_task+0x29e4>)
 80039be:	701a      	strb	r2, [r3, #0]
            }
            menuselecting = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 80039c6:	4ba3      	ldr	r3, [pc, #652]	; (8003c54 <acis_gui_task+0x29e8>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 80039cc:	4ba2      	ldr	r3, [pc, #648]	; (8003c58 <acis_gui_task+0x29ec>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 80039d2:	4ba2      	ldr	r3, [pc, #648]	; (8003c5c <acis_gui_task+0x29f0>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 80039d8:	4ba1      	ldr	r3, [pc, #644]	; (8003c60 <acis_gui_task+0x29f4>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 80039de:	4ba1      	ldr	r3, [pc, #644]	; (8003c64 <acis_gui_task+0x29f8>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 80039e4:	4ba0      	ldr	r3, [pc, #640]	; (8003c68 <acis_gui_task+0x29fc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 80039ea:	4b9f      	ldr	r3, [pc, #636]	; (8003c68 <acis_gui_task+0x29fc>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d018      	beq.n	8003a26 <acis_gui_task+0x27ba>
        {
          display_timeout = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 80039fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <acis_gui_task+0x279c>
          {
            menuselecting = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 8003a08:	4b92      	ldr	r3, [pc, #584]	; (8003c54 <acis_gui_task+0x29e8>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8003a0e:	4b92      	ldr	r3, [pc, #584]	; (8003c58 <acis_gui_task+0x29ec>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8003a14:	4b91      	ldr	r3, [pc, #580]	; (8003c5c <acis_gui_task+0x29f0>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8003a1a:	4b91      	ldr	r3, [pc, #580]	; (8003c60 <acis_gui_task+0x29f4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8003a20:	4b91      	ldr	r3, [pc, #580]	; (8003c68 <acis_gui_task+0x29fc>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 8003a26:	4b8d      	ldr	r3, [pc, #564]	; (8003c5c <acis_gui_task+0x29f0>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <acis_gui_task+0x27dc>
 8003a30:	4b8e      	ldr	r3, [pc, #568]	; (8003c6c <acis_gui_task+0x2a00>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 815e 	beq.w	8003cf8 <acis_gui_task+0x2a8c>
 8003a3c:	4b8c      	ldr	r3, [pc, #560]	; (8003c70 <acis_gui_task+0x2a04>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003a44:	f240 8158 	bls.w	8003cf8 <acis_gui_task+0x2a8c>
        {
          display_timeout = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 8003a4e:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <acis_gui_task+0x2a04>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d904      	bls.n	8003a60 <acis_gui_task+0x27f4>
 8003a56:	4b86      	ldr	r3, [pc, #536]	; (8003c70 <acis_gui_task+0x2a04>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3b64      	subs	r3, #100	; 0x64
 8003a5c:	4a84      	ldr	r2, [pc, #528]	; (8003c70 <acis_gui_task+0x2a04>)
 8003a5e:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8003a60:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8147 	beq.w	8003cf8 <acis_gui_task+0x2a8c>
          {
            if(StatusSynchronized && TableInitial[menuitem].step > 0)
 8003a6a:	4b82      	ldr	r3, [pc, #520]	; (8003c74 <acis_gui_task+0x2a08>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 813a 	beq.w	8003cea <acis_gui_task+0x2a7e>
 8003a76:	4975      	ldr	r1, [pc, #468]	; (8003c4c <acis_gui_task+0x29e0>)
 8003a78:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	440b      	add	r3, r1
 8003a86:	3318      	adds	r3, #24
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	f340 8129 	ble.w	8003cea <acis_gui_task+0x2a7e>
            {
              if(TableInitial[menuitem].valuef)
 8003a98:	496c      	ldr	r1, [pc, #432]	; (8003c4c <acis_gui_task+0x29e0>)
 8003a9a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	440b      	add	r3, r1
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d07a      	beq.n	8003ba6 <acis_gui_task+0x293a>
              {
                if(*TableInitial[menuitem].valuef - TableInitial[menuitem].step < TableInitial[menuitem].min)
 8003ab0:	4966      	ldr	r1, [pc, #408]	; (8003c4c <acis_gui_task+0x29e0>)
 8003ab2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	440b      	add	r3, r1
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	ed93 7a00 	vldr	s14, [r3]
 8003ac8:	4960      	ldr	r1, [pc, #384]	; (8003c4c <acis_gui_task+0x29e0>)
 8003aca:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003ace:	4613      	mov	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	4413      	add	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3318      	adds	r3, #24
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ae2:	495a      	ldr	r1, [pc, #360]	; (8003c4c <acis_gui_task+0x29e0>)
 8003ae4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003ae8:	4613      	mov	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	4413      	add	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	440b      	add	r3, r1
 8003af2:	3310      	adds	r3, #16
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	d51a      	bpl.n	8003b3e <acis_gui_task+0x28d2>
                  *TableInitial[menuitem].valuef = TableInitial[menuitem].min;
 8003b08:	4950      	ldr	r1, [pc, #320]	; (8003c4c <acis_gui_task+0x29e0>)
 8003b0a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	440b      	add	r3, r1
 8003b18:	3310      	adds	r3, #16
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	494b      	ldr	r1, [pc, #300]	; (8003c4c <acis_gui_task+0x29e0>)
 8003b1e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	440b      	add	r3, r1
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	ee07 0a90 	vmov	s15, r0
 8003b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b38:	edc3 7a00 	vstr	s15, [r3]
 8003b3c:	e024      	b.n	8003b88 <acis_gui_task+0x291c>
                else *TableInitial[menuitem].valuef -= TableInitial[menuitem].step;
 8003b3e:	4943      	ldr	r1, [pc, #268]	; (8003c4c <acis_gui_task+0x29e0>)
 8003b40:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	440b      	add	r3, r1
 8003b4e:	330c      	adds	r3, #12
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	ed93 7a00 	vldr	s14, [r3]
 8003b56:	493d      	ldr	r1, [pc, #244]	; (8003c4c <acis_gui_task+0x29e0>)
 8003b58:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	440b      	add	r3, r1
 8003b66:	3318      	adds	r3, #24
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	4937      	ldr	r1, [pc, #220]	; (8003c4c <acis_gui_task+0x29e0>)
 8003b6e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003b72:	4613      	mov	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4413      	add	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	440b      	add	r3, r1
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b84:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(TableInitial[menuitem].valuef, sizeof(float));
 8003b88:	4930      	ldr	r1, [pc, #192]	; (8003c4c <acis_gui_task+0x29e0>)
 8003b8a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	440b      	add	r3, r1
 8003b98:	330c      	adds	r3, #12
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fa66 	bl	8001070 <acis_apply_parameter>
 8003ba4:	e0a1      	b.n	8003cea <acis_gui_task+0x2a7e>
              }
              else if(TableInitial[menuitem].valuei)
 8003ba6:	4929      	ldr	r1, [pc, #164]	; (8003c4c <acis_gui_task+0x29e0>)
 8003ba8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8095 	beq.w	8003cea <acis_gui_task+0x2a7e>
              {
                if(*TableInitial[menuitem].valuei - TableInitial[menuitem].step < TableInitial[menuitem].min)
 8003bc0:	4922      	ldr	r1, [pc, #136]	; (8003c4c <acis_gui_task+0x29e0>)
 8003bc2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	440b      	add	r3, r1
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bde:	491b      	ldr	r1, [pc, #108]	; (8003c4c <acis_gui_task+0x29e0>)
 8003be0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	440b      	add	r3, r1
 8003bee:	3318      	adds	r3, #24
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bf8:	4914      	ldr	r1, [pc, #80]	; (8003c4c <acis_gui_task+0x29e0>)
 8003bfa:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	440b      	add	r3, r1
 8003c08:	3310      	adds	r3, #16
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	d52c      	bpl.n	8003c78 <acis_gui_task+0x2a0c>
                  *TableInitial[menuitem].valuei = TableInitial[menuitem].min;
 8003c1e:	490b      	ldr	r1, [pc, #44]	; (8003c4c <acis_gui_task+0x29e0>)
 8003c20:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3308      	adds	r3, #8
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	4806      	ldr	r0, [pc, #24]	; (8003c4c <acis_gui_task+0x29e0>)
 8003c34:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4403      	add	r3, r0
 8003c42:	3310      	adds	r3, #16
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e041      	b.n	8003cce <acis_gui_task+0x2a62>
 8003c4a:	bf00      	nop
 8003c4c:	080175fc 	.word	0x080175fc
 8003c50:	2000695c 	.word	0x2000695c
 8003c54:	200159e6 	.word	0x200159e6
 8003c58:	200159e7 	.word	0x200159e7
 8003c5c:	200159e4 	.word	0x200159e4
 8003c60:	200159e5 	.word	0x200159e5
 8003c64:	200159e8 	.word	0x200159e8
 8003c68:	200159e9 	.word	0x200159e9
 8003c6c:	200159c4 	.word	0x200159c4
 8003c70:	200159cc 	.word	0x200159cc
 8003c74:	2000697e 	.word	0x2000697e
                else *TableInitial[menuitem].valuei -= TableInitial[menuitem].step;
 8003c78:	49a8      	ldr	r1, [pc, #672]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003c7a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	440b      	add	r3, r1
 8003c88:	3308      	adds	r3, #8
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c96:	49a1      	ldr	r1, [pc, #644]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003c98:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3318      	adds	r3, #24
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb0:	499a      	ldr	r1, [pc, #616]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003cb2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cc8:	ee17 2a90 	vmov	r2, s15
 8003ccc:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(TableInitial[menuitem].valuei, sizeof(int32_t));
 8003cce:	4993      	ldr	r1, [pc, #588]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003cd0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	440b      	add	r3, r1
 8003cde:	3308      	adds	r3, #8
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd f9c3 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 8003cea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003cee:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_LEFT = 0;
 8003cf2:	4b8b      	ldr	r3, [pc, #556]	; (8003f20 <acis_gui_task+0x2cb4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8003cf8:	4b8a      	ldr	r3, [pc, #552]	; (8003f24 <acis_gui_task+0x2cb8>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <acis_gui_task+0x2aae>
 8003d02:	4b89      	ldr	r3, [pc, #548]	; (8003f28 <acis_gui_task+0x2cbc>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8153 	beq.w	8003fb4 <acis_gui_task+0x2d48>
 8003d0e:	4b87      	ldr	r3, [pc, #540]	; (8003f2c <acis_gui_task+0x2cc0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003d16:	f240 814d 	bls.w	8003fb4 <acis_gui_task+0x2d48>
        {
          display_timeout = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 8003d20:	4b82      	ldr	r3, [pc, #520]	; (8003f2c <acis_gui_task+0x2cc0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b64      	cmp	r3, #100	; 0x64
 8003d26:	d904      	bls.n	8003d32 <acis_gui_task+0x2ac6>
 8003d28:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <acis_gui_task+0x2cc0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3b64      	subs	r3, #100	; 0x64
 8003d2e:	4a7f      	ldr	r2, [pc, #508]	; (8003f2c <acis_gui_task+0x2cc0>)
 8003d30:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8003d32:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 813c 	beq.w	8003fb4 <acis_gui_task+0x2d48>
          {
            if(StatusSynchronized && TableInitial[menuitem].step > 0)
 8003d3c:	4b7c      	ldr	r3, [pc, #496]	; (8003f30 <acis_gui_task+0x2cc4>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 812f 	beq.w	8003fa6 <acis_gui_task+0x2d3a>
 8003d48:	4974      	ldr	r1, [pc, #464]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003d4a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	440b      	add	r3, r1
 8003d58:	3318      	adds	r3, #24
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d66:	f340 811e 	ble.w	8003fa6 <acis_gui_task+0x2d3a>
            {
              if(TableInitial[menuitem].valuef)
 8003d6a:	496c      	ldr	r1, [pc, #432]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003d6c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	440b      	add	r3, r1
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d07a      	beq.n	8003e78 <acis_gui_task+0x2c0c>
              {
                if(*TableInitial[menuitem].valuef + TableInitial[menuitem].step > TableInitial[menuitem].max)
 8003d82:	4966      	ldr	r1, [pc, #408]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003d84:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	440b      	add	r3, r1
 8003d92:	330c      	adds	r3, #12
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	ed93 7a00 	vldr	s14, [r3]
 8003d9a:	4960      	ldr	r1, [pc, #384]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003d9c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	440b      	add	r3, r1
 8003daa:	3318      	adds	r3, #24
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003db4:	4959      	ldr	r1, [pc, #356]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003db6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	dd1a      	ble.n	8003e10 <acis_gui_task+0x2ba4>
                  *TableInitial[menuitem].valuef = TableInitial[menuitem].max;
 8003dda:	4950      	ldr	r1, [pc, #320]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003ddc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	440b      	add	r3, r1
 8003dea:	3314      	adds	r3, #20
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	494b      	ldr	r1, [pc, #300]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003df0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	440b      	add	r3, r1
 8003dfe:	330c      	adds	r3, #12
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	ee07 0a90 	vmov	s15, r0
 8003e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e0a:	edc3 7a00 	vstr	s15, [r3]
 8003e0e:	e024      	b.n	8003e5a <acis_gui_task+0x2bee>
                else *TableInitial[menuitem].valuef += TableInitial[menuitem].step;
 8003e10:	4942      	ldr	r1, [pc, #264]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003e12:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	440b      	add	r3, r1
 8003e20:	330c      	adds	r3, #12
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	ed93 7a00 	vldr	s14, [r3]
 8003e28:	493c      	ldr	r1, [pc, #240]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003e2a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	440b      	add	r3, r1
 8003e38:	3318      	adds	r3, #24
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	4937      	ldr	r1, [pc, #220]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003e40:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	440b      	add	r3, r1
 8003e4e:	330c      	adds	r3, #12
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e56:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(TableInitial[menuitem].valuef, sizeof(float));
 8003e5a:	4930      	ldr	r1, [pc, #192]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003e5c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	440b      	add	r3, r1
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2104      	movs	r1, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd f8fd 	bl	8001070 <acis_apply_parameter>
 8003e76:	e096      	b.n	8003fa6 <acis_gui_task+0x2d3a>
              }
              else if(TableInitial[menuitem].valuei)
 8003e78:	4928      	ldr	r1, [pc, #160]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003e7a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	440b      	add	r3, r1
 8003e88:	3308      	adds	r3, #8
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 808a 	beq.w	8003fa6 <acis_gui_task+0x2d3a>
              {
                if(*TableInitial[menuitem].valuei + TableInitial[menuitem].step > TableInitial[menuitem].max)
 8003e92:	4922      	ldr	r1, [pc, #136]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003e94:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb0:	491a      	ldr	r1, [pc, #104]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003eb2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3318      	adds	r3, #24
 8003ec2:	edd3 7a00 	vldr	s15, [r3]
 8003ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eca:	4914      	ldr	r1, [pc, #80]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003ecc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	440b      	add	r3, r1
 8003eda:	3314      	adds	r3, #20
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	dd21      	ble.n	8003f34 <acis_gui_task+0x2cc8>
                  *TableInitial[menuitem].valuei = TableInitial[menuitem].max;
 8003ef0:	490a      	ldr	r1, [pc, #40]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003ef2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	440b      	add	r3, r1
 8003f00:	3308      	adds	r3, #8
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	4805      	ldr	r0, [pc, #20]	; (8003f1c <acis_gui_task+0x2cb0>)
 8003f06:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	4403      	add	r3, r0
 8003f14:	3314      	adds	r3, #20
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	600b      	str	r3, [r1, #0]
 8003f1a:	e036      	b.n	8003f8a <acis_gui_task+0x2d1e>
 8003f1c:	080175fc 	.word	0x080175fc
 8003f20:	200159e4 	.word	0x200159e4
 8003f24:	200159e5 	.word	0x200159e5
 8003f28:	200159c5 	.word	0x200159c5
 8003f2c:	200159d0 	.word	0x200159d0
 8003f30:	2000697e 	.word	0x2000697e
                else *TableInitial[menuitem].valuei += TableInitial[menuitem].step;
 8003f34:	49be      	ldr	r1, [pc, #760]	; (8004230 <acis_gui_task+0x2fc4>)
 8003f36:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	440b      	add	r3, r1
 8003f44:	3308      	adds	r3, #8
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f52:	49b7      	ldr	r1, [pc, #732]	; (8004230 <acis_gui_task+0x2fc4>)
 8003f54:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	440b      	add	r3, r1
 8003f62:	3318      	adds	r3, #24
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6c:	49b0      	ldr	r1, [pc, #704]	; (8004230 <acis_gui_task+0x2fc4>)
 8003f6e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f84:	ee17 2a90 	vmov	r2, s15
 8003f88:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(TableInitial[menuitem].valuei, sizeof(int32_t));
 8003f8a:	49a9      	ldr	r1, [pc, #676]	; (8004230 <acis_gui_task+0x2fc4>)
 8003f8c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	440b      	add	r3, r1
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fd f865 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 8003fa6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003faa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_RIGHT = 0;
 8003fae:	4ba1      	ldr	r3, [pc, #644]	; (8004234 <acis_gui_task+0x2fc8>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 8003fb4:	4ba0      	ldr	r3, [pc, #640]	; (8004238 <acis_gui_task+0x2fcc>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d025      	beq.n	800400a <acis_gui_task+0x2d9e>
        {
          display_timeout = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 8003fc4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <acis_gui_task+0x2d98>
          {
            if(++menuitem >= sizeof(TableInitial) / sizeof(sConfigLinking)) menuitem = sizeof(TableInitial) / sizeof(sConfigLinking) - 1;
 8003fcc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003fd6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d902      	bls.n	8003fe4 <acis_gui_task+0x2d78>
 8003fde:	2304      	movs	r3, #4
 8003fe0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 8003fe4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d204      	bcs.n	8003ffc <acis_gui_task+0x2d90>
 8003ff2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003ff6:	3b04      	subs	r3, #4
 8003ff8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 8003ffc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004000:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_DOWN = 0;
 8004004:	4b8c      	ldr	r3, [pc, #560]	; (8004238 <acis_gui_task+0x2fcc>)
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 800400a:	4b8c      	ldr	r3, [pc, #560]	; (800423c <acis_gui_task+0x2fd0>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d023      	beq.n	800405c <acis_gui_task+0x2df0>
        {
          display_timeout = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 800401a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d019      	beq.n	8004056 <acis_gui_task+0x2dea>
          {
            if(--menuitem < 0) menuitem = 0;
 8004022:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004026:	3b01      	subs	r3, #1
 8004028:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800402c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004030:	2b00      	cmp	r3, #0
 8004032:	da02      	bge.n	800403a <acis_gui_task+0x2dce>
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menuitem < menufirst) menufirst = menuitem;
 800403a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800403e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004042:	429a      	cmp	r2, r3
 8004044:	d903      	bls.n	800404e <acis_gui_task+0x2de2>
 8004046:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800404a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 800404e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004052:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_UP = 0;
 8004056:	4b79      	ldr	r3, [pc, #484]	; (800423c <acis_gui_task+0x2fd0>)
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++;
 800405c:	4b75      	ldr	r3, [pc, #468]	; (8004234 <acis_gui_task+0x2fc8>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <acis_gui_task+0x2e1c>
 8004066:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10c      	bne.n	8004088 <acis_gui_task+0x2e1c>
 800406e:	4b71      	ldr	r3, [pc, #452]	; (8004234 <acis_gui_task+0x2fc8>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	4b72      	ldr	r3, [pc, #456]	; (8004240 <acis_gui_task+0x2fd4>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	3301      	adds	r3, #1
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b70      	ldr	r3, [pc, #448]	; (8004240 <acis_gui_task+0x2fd4>)
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;

        break;
 8004084:	f003 bf7f 	b.w	8007f86 <acis_gui_task+0x6d1a>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
 8004088:	4b6e      	ldr	r3, [pc, #440]	; (8004244 <acis_gui_task+0x2fd8>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	f003 8779 	beq.w	8007f86 <acis_gui_task+0x6d1a>
 8004094:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004098:	2b00      	cmp	r3, #0
 800409a:	f043 8774 	bne.w	8007f86 <acis_gui_task+0x6d1a>
 800409e:	4b69      	ldr	r3, [pc, #420]	; (8004244 <acis_gui_task+0x2fd8>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	4b66      	ldr	r3, [pc, #408]	; (8004240 <acis_gui_task+0x2fd4>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4b64      	ldr	r3, [pc, #400]	; (8004240 <acis_gui_task+0x2fd4>)
 80040b0:	701a      	strb	r2, [r3, #0]
        break;
 80040b2:	f003 bf68 	b.w	8007f86 <acis_gui_task+0x6d1a>
      }

      case MenuTableConfig :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 80040b6:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 80040ba:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80040be:	f005 fdcd 	bl	8009c5c <DelayDiff>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b60      	ldr	r3, [pc, #384]	; (8004248 <acis_gui_task+0x2fdc>)
 80040c6:	429a      	cmp	r2, r3
 80040c8:	f240 8378 	bls.w	80047bc <acis_gui_task+0x3550>
        {
          display_timeout = now;
 80040cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80040d0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 80040d4:	f005 fef2 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80040d8:	2301      	movs	r3, #1
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2340      	movs	r3, #64	; 0x40
 80040de:	2280      	movs	r2, #128	; 0x80
 80040e0:	2100      	movs	r1, #0
 80040e2:	2000      	movs	r0, #0
 80040e4:	f005 ffd5 	bl	800a092 <lcd_rect>
          font_setFont(&rre_8x12);
 80040e8:	4858      	ldr	r0, [pc, #352]	; (800424c <acis_gui_task+0x2fe0>)
 80040ea:	f00d fbc7 	bl	801187c <font_setFont>
          font_printf(0,2,"Table Config");
 80040ee:	4a58      	ldr	r2, [pc, #352]	; (8004250 <acis_gui_task+0x2fe4>)
 80040f0:	2102      	movs	r1, #2
 80040f2:	2000      	movs	r0, #0
 80040f4:	f00e fde4 	bl	8012cc0 <font_printf>
          lcd_rect(0,15,128,1,1);
 80040f8:	2301      	movs	r3, #1
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2301      	movs	r3, #1
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	210f      	movs	r1, #15
 8004102:	2000      	movs	r0, #0
 8004104:	f005 ffc5 	bl	800a092 <lcd_rect>

          font_setFont(&rre_5x8);
 8004108:	4852      	ldr	r0, [pc, #328]	; (8004254 <acis_gui_task+0x2fe8>)
 800410a:	f00d fbb7 	bl	801187c <font_setFont>
          for(int i = 0; i < 6; i++)
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004114:	e34b      	b.n	80047ae <acis_gui_task+0x3542>
          {
            menuselected = menufirst + i;
 8004116:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800411a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800411e:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8004122:	440a      	add	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
            if(menuselected < sizeof(TableConfig) / sizeof(sConfigLinking))
 8004126:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b08      	cmp	r3, #8
 800412e:	f200 8339 	bhi.w	80047a4 <acis_gui_task+0x3538>
            {
              font_printf(3,18 + font_getHeight()*i,"%s:", TableConfig[menuselected].name);
 8004132:	f00d fb49 	bl	80117c8 <font_getHeight>
 8004136:	4602      	mov	r2, r0
 8004138:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800413c:	fb03 f302 	mul.w	r3, r3, r2
 8004140:	f103 0012 	add.w	r0, r3, #18
 8004144:	4944      	ldr	r1, [pc, #272]	; (8004258 <acis_gui_task+0x2fec>)
 8004146:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	440b      	add	r3, r1
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a40      	ldr	r2, [pc, #256]	; (800425c <acis_gui_task+0x2ff0>)
 800415a:	4601      	mov	r1, r0
 800415c:	2003      	movs	r0, #3
 800415e:	f00e fdaf 	bl	8012cc0 <font_printf>
              if(TableConfig[menuselected].valuef)
 8004162:	493d      	ldr	r1, [pc, #244]	; (8004258 <acis_gui_task+0x2fec>)
 8004164:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	440b      	add	r3, r1
 8004174:	330c      	adds	r3, #12
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80e3 	beq.w	8004344 <acis_gui_task+0x30d8>
              {
                if((!menuselecting || menuitem != menuselected))
 800417e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <acis_gui_task+0x2f28>
 8004186:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800418a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d069      	beq.n	8004268 <acis_gui_task+0x2ffc>
                  font_printf(-125,18 + font_getHeight()*i,"%.1f", (TableOffset(TableConfig[menuselected].valuef, float) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier);
 8004194:	f00d fb18 	bl	80117c8 <font_getHeight>
 8004198:	4602      	mov	r2, r0
 800419a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800419e:	fb03 f302 	mul.w	r3, r3, r2
 80041a2:	f103 0512 	add.w	r5, r3, #18
 80041a6:	492c      	ldr	r1, [pc, #176]	; (8004258 <acis_gui_task+0x2fec>)
 80041a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	440b      	add	r3, r1
 80041b8:	330c      	adds	r3, #12
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	4b28      	ldr	r3, [pc, #160]	; (8004260 <acis_gui_task+0x2ff4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	f640 436c 	movw	r3, #3180	; 0xc6c
 80041c8:	fb03 f301 	mul.w	r3, r3, r1
 80041cc:	4413      	add	r3, r2
 80041ce:	ed93 7a00 	vldr	s14, [r3]
 80041d2:	4921      	ldr	r1, [pc, #132]	; (8004258 <acis_gui_task+0x2fec>)
 80041d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	440b      	add	r3, r1
 80041e4:	331c      	adds	r3, #28
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041f4:	4918      	ldr	r1, [pc, #96]	; (8004258 <acis_gui_task+0x2fec>)
 80041f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	440b      	add	r3, r1
 8004206:	3320      	adds	r3, #32
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004210:	ee17 0a90 	vmov	r0, s15
 8004214:	f7fc f9c0 	bl	8000598 <__aeabi_f2d>
 8004218:	4603      	mov	r3, r0
 800421a:	460c      	mov	r4, r1
 800421c:	e9cd 3400 	strd	r3, r4, [sp]
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <acis_gui_task+0x2ff8>)
 8004222:	4629      	mov	r1, r5
 8004224:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8004228:	f00e fd4a 	bl	8012cc0 <font_printf>
 800422c:	e2ba      	b.n	80047a4 <acis_gui_task+0x3538>
 800422e:	bf00      	nop
 8004230:	080175fc 	.word	0x080175fc
 8004234:	200159e5 	.word	0x200159e5
 8004238:	200159e7 	.word	0x200159e7
 800423c:	200159e6 	.word	0x200159e6
 8004240:	2000695c 	.word	0x2000695c
 8004244:	200159e4 	.word	0x200159e4
 8004248:	000249f0 	.word	0x000249f0
 800424c:	20002ce0 	.word	0x20002ce0
 8004250:	08017198 	.word	0x08017198
 8004254:	20002cd0 	.word	0x20002cd0
 8004258:	0801786c 	.word	0x0801786c
 800425c:	080170ec 	.word	0x080170ec
 8004260:	200159ac 	.word	0x200159ac
 8004264:	080171a8 	.word	0x080171a8
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8004268:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800426c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d156      	bne.n	8004324 <acis_gui_task+0x30b8>
 8004276:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800427a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800427e:	f005 fced 	bl	8009c5c <DelayDiff>
 8004282:	4602      	mov	r2, r0
 8004284:	4bcd      	ldr	r3, [pc, #820]	; (80045bc <acis_gui_task+0x3350>)
 8004286:	429a      	cmp	r2, r3
 8004288:	d84c      	bhi.n	8004324 <acis_gui_task+0x30b8>
                  font_printf(-125,18 + font_getHeight()*i,"> %.1f", (TableOffset(TableConfig[menuselected].valuef, float) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier);
 800428a:	f00d fa9d 	bl	80117c8 <font_getHeight>
 800428e:	4602      	mov	r2, r0
 8004290:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004294:	fb03 f302 	mul.w	r3, r3, r2
 8004298:	f103 0512 	add.w	r5, r3, #18
 800429c:	49c8      	ldr	r1, [pc, #800]	; (80045c0 <acis_gui_task+0x3354>)
 800429e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	440b      	add	r3, r1
 80042ae:	330c      	adds	r3, #12
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	4bc3      	ldr	r3, [pc, #780]	; (80045c4 <acis_gui_task+0x3358>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4619      	mov	r1, r3
 80042ba:	f640 436c 	movw	r3, #3180	; 0xc6c
 80042be:	fb03 f301 	mul.w	r3, r3, r1
 80042c2:	4413      	add	r3, r2
 80042c4:	ed93 7a00 	vldr	s14, [r3]
 80042c8:	49bd      	ldr	r1, [pc, #756]	; (80045c0 <acis_gui_task+0x3354>)
 80042ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	440b      	add	r3, r1
 80042da:	331c      	adds	r3, #28
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042ea:	49b5      	ldr	r1, [pc, #724]	; (80045c0 <acis_gui_task+0x3354>)
 80042ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	440b      	add	r3, r1
 80042fc:	3320      	adds	r3, #32
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004306:	ee17 0a90 	vmov	r0, s15
 800430a:	f7fc f945 	bl	8000598 <__aeabi_f2d>
 800430e:	4603      	mov	r3, r0
 8004310:	460c      	mov	r4, r1
 8004312:	e9cd 3400 	strd	r3, r4, [sp]
 8004316:	4aac      	ldr	r2, [pc, #688]	; (80045c8 <acis_gui_task+0x335c>)
 8004318:	4629      	mov	r1, r5
 800431a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800431e:	f00e fccf 	bl	8012cc0 <font_printf>
 8004322:	e23f      	b.n	80047a4 <acis_gui_task+0x3538>
                else if(DelayDiff(now, select_timeout) > 800000)
 8004324:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8004328:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800432c:	f005 fc96 	bl	8009c5c <DelayDiff>
 8004330:	4602      	mov	r2, r0
 8004332:	4ba6      	ldr	r3, [pc, #664]	; (80045cc <acis_gui_task+0x3360>)
 8004334:	429a      	cmp	r2, r3
 8004336:	f240 8235 	bls.w	80047a4 <acis_gui_task+0x3538>
                  select_timeout = now;
 800433a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800433e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004342:	e22f      	b.n	80047a4 <acis_gui_task+0x3538>
              }
              else if(TableConfig[menuselected].valuei)
 8004344:	499e      	ldr	r1, [pc, #632]	; (80045c0 <acis_gui_task+0x3354>)
 8004346:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	440b      	add	r3, r1
 8004356:	3308      	adds	r3, #8
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80c6 	beq.w	80044ec <acis_gui_task+0x3280>
              {
                if((!menuselecting || menuitem != menuselected))
 8004360:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <acis_gui_task+0x310a>
 8004368:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800436c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d04c      	beq.n	8004410 <acis_gui_task+0x31a4>
                  font_printf(-125,18 + font_getHeight()*i,"%d", (int32_t)roundf((TableOffset(TableConfig[menuselected].valuei, int32_t) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier));
 8004376:	f00d fa27 	bl	80117c8 <font_getHeight>
 800437a:	4602      	mov	r2, r0
 800437c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004380:	fb03 f302 	mul.w	r3, r3, r2
 8004384:	f103 0412 	add.w	r4, r3, #18
 8004388:	498d      	ldr	r1, [pc, #564]	; (80045c0 <acis_gui_task+0x3354>)
 800438a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	440b      	add	r3, r1
 800439a:	3308      	adds	r3, #8
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b88      	ldr	r3, [pc, #544]	; (80045c4 <acis_gui_task+0x3358>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4619      	mov	r1, r3
 80043a6:	f640 436c 	movw	r3, #3180	; 0xc6c
 80043aa:	fb03 f301 	mul.w	r3, r3, r1
 80043ae:	4413      	add	r3, r2
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	4883      	ldr	r0, [pc, #524]	; (80045c0 <acis_gui_task+0x3354>)
 80043b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4403      	add	r3, r0
 80043c4:	331c      	adds	r3, #28
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	440b      	add	r3, r1
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d2:	497b      	ldr	r1, [pc, #492]	; (80045c0 <acis_gui_task+0x3354>)
 80043d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	440b      	add	r3, r1
 80043e4:	3320      	adds	r3, #32
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ee:	eeb0 0a67 	vmov.f32	s0, s15
 80043f2:	f012 fab9 	bl	8016968 <roundf>
 80043f6:	eef0 7a40 	vmov.f32	s15, s0
 80043fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043fe:	ee17 3a90 	vmov	r3, s15
 8004402:	4a73      	ldr	r2, [pc, #460]	; (80045d0 <acis_gui_task+0x3364>)
 8004404:	4621      	mov	r1, r4
 8004406:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800440a:	f00e fc59 	bl	8012cc0 <font_printf>
 800440e:	e1c9      	b.n	80047a4 <acis_gui_task+0x3538>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8004410:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004414:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d156      	bne.n	80044cc <acis_gui_task+0x3260>
 800441e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8004422:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8004426:	f005 fc19 	bl	8009c5c <DelayDiff>
 800442a:	4602      	mov	r2, r0
 800442c:	4b63      	ldr	r3, [pc, #396]	; (80045bc <acis_gui_task+0x3350>)
 800442e:	429a      	cmp	r2, r3
 8004430:	d84c      	bhi.n	80044cc <acis_gui_task+0x3260>
                  font_printf(-125,18 + font_getHeight()*i,"> %d", (int32_t)roundf((TableOffset(TableConfig[menuselected].valuei, int32_t) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier));
 8004432:	f00d f9c9 	bl	80117c8 <font_getHeight>
 8004436:	4602      	mov	r2, r0
 8004438:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800443c:	fb03 f302 	mul.w	r3, r3, r2
 8004440:	f103 0412 	add.w	r4, r3, #18
 8004444:	495e      	ldr	r1, [pc, #376]	; (80045c0 <acis_gui_task+0x3354>)
 8004446:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	440b      	add	r3, r1
 8004456:	3308      	adds	r3, #8
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <acis_gui_task+0x3358>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004466:	fb03 f301 	mul.w	r3, r3, r1
 800446a:	4413      	add	r3, r2
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	4854      	ldr	r0, [pc, #336]	; (80045c0 <acis_gui_task+0x3354>)
 8004470:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4613      	mov	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4413      	add	r3, r2
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	4403      	add	r3, r0
 8004480:	331c      	adds	r3, #28
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	440b      	add	r3, r1
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800448e:	494c      	ldr	r1, [pc, #304]	; (80045c0 <acis_gui_task+0x3354>)
 8004490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	440b      	add	r3, r1
 80044a0:	3320      	adds	r3, #32
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044aa:	eeb0 0a67 	vmov.f32	s0, s15
 80044ae:	f012 fa5b 	bl	8016968 <roundf>
 80044b2:	eef0 7a40 	vmov.f32	s15, s0
 80044b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044ba:	ee17 3a90 	vmov	r3, s15
 80044be:	4a45      	ldr	r2, [pc, #276]	; (80045d4 <acis_gui_task+0x3368>)
 80044c0:	4621      	mov	r1, r4
 80044c2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80044c6:	f00e fbfb 	bl	8012cc0 <font_printf>
 80044ca:	e16b      	b.n	80047a4 <acis_gui_task+0x3538>
                else if(DelayDiff(now, select_timeout) > 800000)
 80044cc:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80044d0:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80044d4:	f005 fbc2 	bl	8009c5c <DelayDiff>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <acis_gui_task+0x3360>)
 80044dc:	429a      	cmp	r2, r3
 80044de:	f240 8161 	bls.w	80047a4 <acis_gui_task+0x3538>
                  select_timeout = now;
 80044e2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80044e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80044ea:	e15b      	b.n	80047a4 <acis_gui_task+0x3538>
              }
              else if(&TableConfig[menuselected].values)
              {
                if((menuselecting == 0 || menuitem != menuselected))
 80044ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <acis_gui_task+0x3296>
 80044f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80044f8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d023      	beq.n	800454a <acis_gui_task+0x32de>
                  font_printf(-125,18 + font_getHeight()*i,"%s", &TableOffset(TableConfig[menuselected].values, char));
 8004502:	f00d f961 	bl	80117c8 <font_getHeight>
 8004506:	4602      	mov	r2, r0
 8004508:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800450c:	fb03 f302 	mul.w	r3, r3, r2
 8004510:	f103 0012 	add.w	r0, r3, #18
 8004514:	492a      	ldr	r1, [pc, #168]	; (80045c0 <acis_gui_task+0x3354>)
 8004516:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	440b      	add	r3, r1
 8004526:	3304      	adds	r3, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <acis_gui_task+0x3358>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004536:	fb03 f301 	mul.w	r3, r3, r1
 800453a:	4413      	add	r3, r2
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <acis_gui_task+0x336c>)
 800453e:	4601      	mov	r1, r0
 8004540:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8004544:	f00e fbbc 	bl	8012cc0 <font_printf>
 8004548:	e12c      	b.n	80047a4 <acis_gui_task+0x3538>
                else if(menuselecting == 1 && menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 800454a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d146      	bne.n	80045e0 <acis_gui_task+0x3374>
 8004552:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004556:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d13f      	bne.n	80045e0 <acis_gui_task+0x3374>
 8004560:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8004564:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8004568:	f005 fb78 	bl	8009c5c <DelayDiff>
 800456c:	4602      	mov	r2, r0
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <acis_gui_task+0x3350>)
 8004570:	429a      	cmp	r2, r3
 8004572:	d835      	bhi.n	80045e0 <acis_gui_task+0x3374>
                  font_printf(-125,18 + font_getHeight()*i,"> %s", &TableOffset(TableConfig[menuselected].values, char));
 8004574:	f00d f928 	bl	80117c8 <font_getHeight>
 8004578:	4602      	mov	r2, r0
 800457a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800457e:	fb03 f302 	mul.w	r3, r3, r2
 8004582:	f103 0012 	add.w	r0, r3, #18
 8004586:	490e      	ldr	r1, [pc, #56]	; (80045c0 <acis_gui_task+0x3354>)
 8004588:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4613      	mov	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4413      	add	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	440b      	add	r3, r1
 8004598:	3304      	adds	r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <acis_gui_task+0x3358>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4619      	mov	r1, r3
 80045a4:	f640 436c 	movw	r3, #3180	; 0xc6c
 80045a8:	fb03 f301 	mul.w	r3, r3, r1
 80045ac:	4413      	add	r3, r2
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <acis_gui_task+0x3370>)
 80045b0:	4601      	mov	r1, r0
 80045b2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80045b6:	f00e fb83 	bl	8012cc0 <font_printf>
 80045ba:	e0f3      	b.n	80047a4 <acis_gui_task+0x3538>
 80045bc:	0007a11f 	.word	0x0007a11f
 80045c0:	0801786c 	.word	0x0801786c
 80045c4:	200159ac 	.word	0x200159ac
 80045c8:	080171b0 	.word	0x080171b0
 80045cc:	000c3500 	.word	0x000c3500
 80045d0:	080170fc 	.word	0x080170fc
 80045d4:	08017100 	.word	0x08017100
 80045d8:	08017178 	.word	0x08017178
 80045dc:	0801717c 	.word	0x0801717c
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 80045e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80045e4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d15f      	bne.n	80046ae <acis_gui_task+0x3442>
 80045ee:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80045f2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80045f6:	f005 fb31 	bl	8009c5c <DelayDiff>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4bcf      	ldr	r3, [pc, #828]	; (800493c <acis_gui_task+0x36d0>)
 80045fe:	429a      	cmp	r2, r3
 8004600:	d855      	bhi.n	80046ae <acis_gui_task+0x3442>
                {
                  int width = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
                  int widthbf = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                  for(int j = 0; j < TABLE_STRING_MAX; j++)
 800460e:	2300      	movs	r3, #0
 8004610:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004614:	e046      	b.n	80046a4 <acis_gui_task+0x3438>
                  {
                    char chr = tablestring[j];
 8004616:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800461a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800461e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004622:	440a      	add	r2, r1
 8004624:	7812      	ldrb	r2, [r2, #0]
 8004626:	701a      	strb	r2, [r3, #0]
                    width += font_printf(-125 + width,18 + font_getHeight()*i,"%c", chr);
 8004628:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800462c:	f1a3 047d 	sub.w	r4, r3, #125	; 0x7d
 8004630:	f00d f8ca 	bl	80117c8 <font_getHeight>
 8004634:	4602      	mov	r2, r0
 8004636:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800463a:	fb03 f302 	mul.w	r3, r3, r2
 800463e:	f103 0112 	add.w	r1, r3, #18
 8004642:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	4abd      	ldr	r2, [pc, #756]	; (8004940 <acis_gui_task+0x36d4>)
 800464a:	4620      	mov	r0, r4
 800464c:	f00e fb38 	bl	8012cc0 <font_printf>
 8004650:	4602      	mov	r2, r0
 8004652:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004656:	4413      	add	r3, r2
 8004658:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
                    if(j == stringchar)
 800465c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8004660:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004664:	429a      	cmp	r2, r3
 8004666:	d114      	bne.n	8004692 <acis_gui_task+0x3426>
                    {
                      lcd_rect_solid(125-width, 18 + font_getHeight() - 1, width - widthbf - 1, 1, 1);
 8004668:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800466c:	f1c3 047d 	rsb	r4, r3, #125	; 0x7d
 8004670:	f00d f8aa 	bl	80117c8 <font_getHeight>
 8004674:	4603      	mov	r3, r0
 8004676:	f103 0111 	add.w	r1, r3, #17
 800467a:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 800467e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	1e5a      	subs	r2, r3, #1
 8004686:	2301      	movs	r3, #1
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	2301      	movs	r3, #1
 800468c:	4620      	mov	r0, r4
 800468e:	f005 fca5 	bl	8009fdc <lcd_rect_solid>
                    }
                    widthbf = width;
 8004692:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004696:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                  for(int j = 0; j < TABLE_STRING_MAX; j++)
 800469a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800469e:	3301      	adds	r3, #1
 80046a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80046a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80046a8:	2b0b      	cmp	r3, #11
 80046aa:	ddb4      	ble.n	8004616 <acis_gui_task+0x33aa>
                {
 80046ac:	e07a      	b.n	80047a4 <acis_gui_task+0x3538>
                  }
                }
                else
                {
                  if(menuselecting == 2)
 80046ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d168      	bne.n	8004788 <acis_gui_task+0x351c>
                  {
                    int width = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                    int widthbf = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
                    for(int j = 0; j < TABLE_STRING_MAX; j++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80046c8:	e05a      	b.n	8004780 <acis_gui_task+0x3514>
                    {
                      char chr = tablestring[j];
 80046ca:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80046ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80046d2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80046d6:	440a      	add	r2, r1
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	701a      	strb	r2, [r3, #0]
                      width += font_printf(-125 + widthbf,18 + font_getHeight()*i,"%c", chr);
 80046dc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80046e0:	f1a3 047d 	sub.w	r4, r3, #125	; 0x7d
 80046e4:	f00d f870 	bl	80117c8 <font_getHeight>
 80046e8:	4602      	mov	r2, r0
 80046ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046ee:	fb03 f302 	mul.w	r3, r3, r2
 80046f2:	f103 0112 	add.w	r1, r3, #18
 80046f6:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	4a90      	ldr	r2, [pc, #576]	; (8004940 <acis_gui_task+0x36d4>)
 80046fe:	4620      	mov	r0, r4
 8004700:	f00e fade 	bl	8012cc0 <font_printf>
 8004704:	4602      	mov	r2, r0
 8004706:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800470a:	4413      	add	r3, r2
 800470c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                      if(j == stringchar)
 8004710:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004714:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004718:	429a      	cmp	r2, r3
 800471a:	d128      	bne.n	800476e <acis_gui_task+0x3502>
                      {
                        lcd_rect_solid(125-width, 18, width - widthbf, font_getHeight(), 0);
 800471c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004720:	f1c3 047d 	rsb	r4, r3, #125	; 0x7d
 8004724:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004728:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800472c:	1ad5      	subs	r5, r2, r3
 800472e:	f00d f84b 	bl	80117c8 <font_getHeight>
 8004732:	4602      	mov	r2, r0
 8004734:	2300      	movs	r3, #0
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	462a      	mov	r2, r5
 800473c:	2112      	movs	r1, #18
 800473e:	4620      	mov	r0, r4
 8004740:	f005 fc4c 	bl	8009fdc <lcd_rect_solid>
                        lcd_rect_solid(125-width, 18 + font_getHeight() - 1, width - widthbf - 1, 1, 1);
 8004744:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004748:	f1c3 047d 	rsb	r4, r3, #125	; 0x7d
 800474c:	f00d f83c 	bl	80117c8 <font_getHeight>
 8004750:	4603      	mov	r3, r0
 8004752:	f103 0111 	add.w	r1, r3, #17
 8004756:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800475a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	2301      	movs	r3, #1
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2301      	movs	r3, #1
 8004768:	4620      	mov	r0, r4
 800476a:	f005 fc37 	bl	8009fdc <lcd_rect_solid>
                      }
                      widthbf = width;
 800476e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004772:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
                    for(int j = 0; j < TABLE_STRING_MAX; j++)
 8004776:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800477a:	3301      	adds	r3, #1
 800477c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004780:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004784:	2b0b      	cmp	r3, #11
 8004786:	dda0      	ble.n	80046ca <acis_gui_task+0x345e>
                    }
                  }
                  if(DelayDiff(now, select_timeout) > 800000)
 8004788:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800478c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8004790:	f005 fa64 	bl	8009c5c <DelayDiff>
 8004794:	4602      	mov	r2, r0
 8004796:	4b6b      	ldr	r3, [pc, #428]	; (8004944 <acis_gui_task+0x36d8>)
 8004798:	429a      	cmp	r2, r3
 800479a:	d903      	bls.n	80047a4 <acis_gui_task+0x3538>
                  {
                    select_timeout = now;
 800479c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80047a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          for(int i = 0; i < 6; i++)
 80047a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80047a8:	3301      	adds	r3, #1
 80047aa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80047ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	f77f acaf 	ble.w	8004116 <acis_gui_task+0x2eaa>
                }
              }
            }
          }

          lcd_update();
 80047b8:	f005 faf4 	bl	8009da4 <lcd_update>
        }
        if(BUT_ENTER)
 80047bc:	4b62      	ldr	r3, [pc, #392]	; (8004948 <acis_gui_task+0x36dc>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80de 	beq.w	8004984 <acis_gui_task+0x3718>
        {
          display_timeout = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting == 0)
 80047ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d107      	bne.n	80047e6 <acis_gui_task+0x357a>
          {
            menuselecting = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            select_timeout = now;
 80047dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80047e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80047e4:	e0bf      	b.n	8004966 <acis_gui_task+0x36fa>

          }
          else if(menuselecting == 1)
 80047e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f040 80b4 	bne.w	8004958 <acis_gui_task+0x36ec>
          {
            select_timeout = now;
 80047f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80047f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            if(&TableConfig[menuitem].values)
            {
              menuselecting = 2;
 80047f8:	2302      	movs	r3, #2
 80047fa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
              memset(tablestring, ' ', sizeof(tablestring));
 80047fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004802:	220c      	movs	r2, #12
 8004804:	2120      	movs	r1, #32
 8004806:	4618      	mov	r0, r3
 8004808:	f00e fb37 	bl	8012e7a <memset>
              memset(tablechars, 0, sizeof(tablechars));
 800480c:	f107 030c 	add.w	r3, r7, #12
 8004810:	2218      	movs	r2, #24
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f00e fb30 	bl	8012e7a <memset>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004820:	e083      	b.n	800492a <acis_gui_task+0x36be>
              {
                if((&TableOffset(TableConfig[menuitem].values, char))[TABLE_STRING_MAX - i - 1] != 0)
 8004822:	494a      	ldr	r1, [pc, #296]	; (800494c <acis_gui_task+0x36e0>)
 8004824:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004828:	4613      	mov	r3, r2
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	440b      	add	r3, r1
 8004832:	3304      	adds	r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	4b45      	ldr	r3, [pc, #276]	; (8004950 <acis_gui_task+0x36e4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4619      	mov	r1, r3
 800483e:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004842:	fb03 f301 	mul.w	r3, r3, r1
 8004846:	441a      	add	r2, r3
 8004848:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	330b      	adds	r3, #11
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d064      	beq.n	8004920 <acis_gui_task+0x36b4>
                {
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 8004856:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800485a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800485e:	e05a      	b.n	8004916 <acis_gui_task+0x36aa>
                  {
                    char chr = (&TableOffset(TableConfig[menuitem].values, char))[TABLE_STRING_MAX - j - 1];
 8004860:	493a      	ldr	r1, [pc, #232]	; (800494c <acis_gui_task+0x36e0>)
 8004862:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004866:	4613      	mov	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	440b      	add	r3, r1
 8004870:	3304      	adds	r3, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <acis_gui_task+0x36e4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4619      	mov	r1, r3
 800487c:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004880:	fb03 f301 	mul.w	r3, r3, r1
 8004884:	441a      	add	r2, r3
 8004886:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	330b      	adds	r3, #11
 800488e:	461a      	mov	r2, r3
 8004890:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8004894:	7812      	ldrb	r2, [r2, #0]
 8004896:	701a      	strb	r2, [r3, #0]
                    uint8_t num = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
                    for(int k = 0; k < lcd_chars_len; k++)
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80048a4:	e014      	b.n	80048d0 <acis_gui_task+0x3664>
                    {
                      if(lcd_chars[k] == chr)
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <acis_gui_task+0x36e8>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	f107 0255 	add.w	r2, r7, #85	; 0x55
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d104      	bne.n	80048c6 <acis_gui_task+0x365a>
                      {
                        num = k;
 80048bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048c0:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
                        break;
 80048c4:	e00b      	b.n	80048de <acis_gui_task+0x3672>
                    for(int k = 0; k < lcd_chars_len; k++)
 80048c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048ca:	3301      	adds	r3, #1
 80048cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80048d0:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80048da:	429a      	cmp	r2, r3
 80048dc:	dbe3      	blt.n	80048a6 <acis_gui_task+0x363a>
                      }
                    }
                    tablestring[j - i] = chr;
 80048de:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80048e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80048ec:	f107 0155 	add.w	r1, r7, #85	; 0x55
 80048f0:	7809      	ldrb	r1, [r1, #0]
 80048f2:	54d1      	strb	r1, [r2, r3]
                    tablechars[j - i] = num;
 80048f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80048f8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8004902:	b219      	sxth	r1, r3
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 800490c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004910:	3301      	adds	r3, #1
 8004912:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800491a:	2b0b      	cmp	r3, #11
 800491c:	dda0      	ble.n	8004860 <acis_gui_task+0x35f4>
                  }
                  break;
 800491e:	e009      	b.n	8004934 <acis_gui_task+0x36c8>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 8004920:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004924:	3301      	adds	r3, #1
 8004926:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800492a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800492e:	2b0b      	cmp	r3, #11
 8004930:	f77f af77 	ble.w	8004822 <acis_gui_task+0x35b6>
                }
              }
              stringchar = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800493a:	e014      	b.n	8004966 <acis_gui_task+0x36fa>
 800493c:	0007a11f 	.word	0x0007a11f
 8004940:	080171b8 	.word	0x080171b8
 8004944:	000c3500 	.word	0x000c3500
 8004948:	200159e8 	.word	0x200159e8
 800494c:	0801786c 	.word	0x0801786c
 8004950:	200159ac 	.word	0x200159ac
 8004954:	200004d0 	.word	0x200004d0
            else
            {
              menuselecting = 0;
            }
          }
          else if(menuselecting == 2)
 8004958:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800495c:	2b02      	cmp	r3, #2
 800495e:	d102      	bne.n	8004966 <acis_gui_task+0x36fa>
          {
            menuselecting = 1;
 8004960:	2301      	movs	r3, #1
 8004962:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 8004966:	4bd0      	ldr	r3, [pc, #832]	; (8004ca8 <acis_gui_task+0x3a3c>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 800496c:	4bcf      	ldr	r3, [pc, #828]	; (8004cac <acis_gui_task+0x3a40>)
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8004972:	4bcf      	ldr	r3, [pc, #828]	; (8004cb0 <acis_gui_task+0x3a44>)
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8004978:	4bce      	ldr	r3, [pc, #824]	; (8004cb4 <acis_gui_task+0x3a48>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 800497e:	4bce      	ldr	r3, [pc, #824]	; (8004cb8 <acis_gui_task+0x3a4c>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8004984:	4bcd      	ldr	r3, [pc, #820]	; (8004cbc <acis_gui_task+0x3a50>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 809b 	beq.w	8004ac6 <acis_gui_task+0x385a>
        {
          display_timeout = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting > 0)
 8004996:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8084 	beq.w	8004aa8 <acis_gui_task+0x383c>
          {
            if(menuselecting == 2)
 80049a0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d176      	bne.n	8004a96 <acis_gui_task+0x382a>
            {
              memset(&TableOffset(TableConfig[menuitem].values, char), '\0', TABLE_STRING_MAX);
 80049a8:	49c5      	ldr	r1, [pc, #788]	; (8004cc0 <acis_gui_task+0x3a54>)
 80049aa:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80049ae:	4613      	mov	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	440b      	add	r3, r1
 80049b8:	3304      	adds	r3, #4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	4bc1      	ldr	r3, [pc, #772]	; (8004cc4 <acis_gui_task+0x3a58>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4619      	mov	r1, r3
 80049c4:	f640 436c 	movw	r3, #3180	; 0xc6c
 80049c8:	fb03 f301 	mul.w	r3, r3, r1
 80049cc:	4413      	add	r3, r2
 80049ce:	220c      	movs	r2, #12
 80049d0:	2100      	movs	r1, #0
 80049d2:	4618      	mov	r0, r3
 80049d4:	f00e fa51 	bl	8012e7a <memset>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 80049d8:	2300      	movs	r3, #0
 80049da:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80049de:	e03f      	b.n	8004a60 <acis_gui_task+0x37f4>
              {
                if(tablestring[TABLE_STRING_MAX - i - 1] != ' ')
 80049e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80049e4:	f1c3 030b 	rsb	r3, r3, #11
 80049e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80049ec:	5cd3      	ldrb	r3, [r2, r3]
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d031      	beq.n	8004a56 <acis_gui_task+0x37ea>
                {
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 80049f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80049f6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80049fa:	e027      	b.n	8004a4c <acis_gui_task+0x37e0>
                    (&TableOffset(TableConfig[menuitem].values, char))[j - i] = tablestring[TABLE_STRING_MAX - j - 1];
 80049fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004a00:	f1c3 010b 	rsb	r1, r3, #11
 8004a04:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8004a08:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	461c      	mov	r4, r3
 8004a10:	48ab      	ldr	r0, [pc, #684]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004a12:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004a16:	4613      	mov	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	4403      	add	r3, r0
 8004a20:	3304      	adds	r3, #4
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4ba7      	ldr	r3, [pc, #668]	; (8004cc4 <acis_gui_task+0x3a58>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004a30:	fb03 f300 	mul.w	r3, r3, r0
 8004a34:	4413      	add	r3, r2
 8004a36:	4423      	add	r3, r4
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a3e:	5c5b      	ldrb	r3, [r3, r1]
 8004a40:	7013      	strb	r3, [r2, #0]
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 8004a42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004a46:	3301      	adds	r3, #1
 8004a48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004a4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004a50:	2b0b      	cmp	r3, #11
 8004a52:	ddd3      	ble.n	80049fc <acis_gui_task+0x3790>
                  break;
 8004a54:	e008      	b.n	8004a68 <acis_gui_task+0x37fc>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 8004a56:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004a60:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004a64:	2b0b      	cmp	r3, #11
 8004a66:	ddbb      	ble.n	80049e0 <acis_gui_task+0x3774>
                }
              }
              acis_apply_parameter(&TableOffset(TableConfig[menuitem].values, char), TABLE_STRING_MAX);
 8004a68:	4995      	ldr	r1, [pc, #596]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004a6a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004a6e:	4613      	mov	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	4413      	add	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	440b      	add	r3, r1
 8004a78:	3304      	adds	r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b91      	ldr	r3, [pc, #580]	; (8004cc4 <acis_gui_task+0x3a58>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004a88:	fb03 f301 	mul.w	r3, r3, r1
 8004a8c:	4413      	add	r3, r2
 8004a8e:	210c      	movs	r1, #12
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fc faed 	bl	8001070 <acis_apply_parameter>
            }
            select_timeout = now;
 8004a96:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004a9a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            menuselecting--;
 8004a9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 8004aa8:	4b7f      	ldr	r3, [pc, #508]	; (8004ca8 <acis_gui_task+0x3a3c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8004aae:	4b7f      	ldr	r3, [pc, #508]	; (8004cac <acis_gui_task+0x3a40>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8004ab4:	4b7e      	ldr	r3, [pc, #504]	; (8004cb0 <acis_gui_task+0x3a44>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8004aba:	4b7e      	ldr	r3, [pc, #504]	; (8004cb4 <acis_gui_task+0x3a48>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8004ac0:	4b7e      	ldr	r3, [pc, #504]	; (8004cbc <acis_gui_task+0x3a50>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	; (8004cb0 <acis_gui_task+0x3a44>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <acis_gui_task+0x387c>
 8004ad0:	4b7d      	ldr	r3, [pc, #500]	; (8004cc8 <acis_gui_task+0x3a5c>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 81cb 	beq.w	8004e72 <acis_gui_task+0x3c06>
 8004adc:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <acis_gui_task+0x3a60>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004ae4:	f240 81c5 	bls.w	8004e72 <acis_gui_task+0x3c06>
        {
          display_timeout = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 8004aee:	4b77      	ldr	r3, [pc, #476]	; (8004ccc <acis_gui_task+0x3a60>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d904      	bls.n	8004b00 <acis_gui_task+0x3894>
 8004af6:	4b75      	ldr	r3, [pc, #468]	; (8004ccc <acis_gui_task+0x3a60>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3b64      	subs	r3, #100	; 0x64
 8004afc:	4a73      	ldr	r2, [pc, #460]	; (8004ccc <acis_gui_task+0x3a60>)
 8004afe:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8004b00:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 81b4 	beq.w	8004e72 <acis_gui_task+0x3c06>
          {
            if(menuselecting == 1)
 8004b0a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	f040 8198 	bne.w	8004e44 <acis_gui_task+0x3bd8>
            {
              if(StatusSynchronized && TableConfig[menuitem].step)
 8004b14:	4b6e      	ldr	r3, [pc, #440]	; (8004cd0 <acis_gui_task+0x3a64>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 81a2 	beq.w	8004e64 <acis_gui_task+0x3bf8>
 8004b20:	4967      	ldr	r1, [pc, #412]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004b22:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	440b      	add	r3, r1
 8004b30:	3318      	adds	r3, #24
 8004b32:	edd3 7a00 	vldr	s15, [r3]
 8004b36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3e:	f000 8191 	beq.w	8004e64 <acis_gui_task+0x3bf8>
              {
                if(TableConfig[menuitem].valuef)
 8004b42:	495f      	ldr	r1, [pc, #380]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004b44:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004b48:	4613      	mov	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4413      	add	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	440b      	add	r3, r1
 8004b52:	330c      	adds	r3, #12
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 80bc 	beq.w	8004cd4 <acis_gui_task+0x3a68>
                {
                  if(TableOffset(TableConfig[menuitem].valuef, float) - TableConfig[menuitem].step < TableConfig[menuitem].min)
 8004b5c:	4958      	ldr	r1, [pc, #352]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004b5e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004b62:	4613      	mov	r3, r2
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	4413      	add	r3, r2
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	440b      	add	r3, r1
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b54      	ldr	r3, [pc, #336]	; (8004cc4 <acis_gui_task+0x3a58>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4619      	mov	r1, r3
 8004b78:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004b7c:	fb03 f301 	mul.w	r3, r3, r1
 8004b80:	4413      	add	r3, r2
 8004b82:	ed93 7a00 	vldr	s14, [r3]
 8004b86:	494e      	ldr	r1, [pc, #312]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004b88:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	440b      	add	r3, r1
 8004b96:	3318      	adds	r3, #24
 8004b98:	edd3 7a00 	vldr	s15, [r3]
 8004b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ba0:	4947      	ldr	r1, [pc, #284]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004ba2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	440b      	add	r3, r1
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc4:	d523      	bpl.n	8004c0e <acis_gui_task+0x39a2>
                    TableOffset(TableConfig[menuitem].valuef, float) = TableConfig[menuitem].min;
 8004bc6:	493e      	ldr	r1, [pc, #248]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004bc8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004bcc:	4613      	mov	r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4413      	add	r3, r2
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3310      	adds	r3, #16
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	4939      	ldr	r1, [pc, #228]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004bdc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	440b      	add	r3, r1
 8004bea:	330c      	adds	r3, #12
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b34      	ldr	r3, [pc, #208]	; (8004cc4 <acis_gui_task+0x3a58>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004bfa:	fb03 f301 	mul.w	r3, r3, r1
 8004bfe:	4413      	add	r3, r2
 8004c00:	ee07 0a90 	vmov	s15, r0
 8004c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c08:	edc3 7a00 	vstr	s15, [r3]
 8004c0c:	e034      	b.n	8004c78 <acis_gui_task+0x3a0c>
                  else TableOffset(TableConfig[menuitem].valuef, float) -= TableConfig[menuitem].step;
 8004c0e:	492c      	ldr	r1, [pc, #176]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004c10:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	440b      	add	r3, r1
 8004c1e:	330c      	adds	r3, #12
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <acis_gui_task+0x3a58>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	4601      	mov	r1, r0
 8004c2a:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004c2e:	fb03 f301 	mul.w	r3, r3, r1
 8004c32:	4413      	add	r3, r2
 8004c34:	ed93 7a00 	vldr	s14, [r3]
 8004c38:	4921      	ldr	r1, [pc, #132]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004c3a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	440b      	add	r3, r1
 8004c48:	3318      	adds	r3, #24
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	491c      	ldr	r1, [pc, #112]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004c50:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004c54:	4613      	mov	r3, r2
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	4413      	add	r3, r2
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	440b      	add	r3, r1
 8004c5e:	330c      	adds	r3, #12
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	4601      	mov	r1, r0
 8004c66:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004c6a:	fb03 f301 	mul.w	r3, r3, r1
 8004c6e:	4413      	add	r3, r2
 8004c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c74:	edc3 7a00 	vstr	s15, [r3]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuef, float), sizeof(float));
 8004c78:	4911      	ldr	r1, [pc, #68]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004c7a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	440b      	add	r3, r1
 8004c88:	330c      	adds	r3, #12
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <acis_gui_task+0x3a58>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4619      	mov	r1, r3
 8004c94:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004c98:	fb03 f301 	mul.w	r3, r3, r1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	2104      	movs	r1, #4
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fc f9e5 	bl	8001070 <acis_apply_parameter>
 8004ca6:	e0dd      	b.n	8004e64 <acis_gui_task+0x3bf8>
 8004ca8:	200159e6 	.word	0x200159e6
 8004cac:	200159e7 	.word	0x200159e7
 8004cb0:	200159e4 	.word	0x200159e4
 8004cb4:	200159e5 	.word	0x200159e5
 8004cb8:	200159e8 	.word	0x200159e8
 8004cbc:	200159e9 	.word	0x200159e9
 8004cc0:	0801786c 	.word	0x0801786c
 8004cc4:	200159ac 	.word	0x200159ac
 8004cc8:	200159c4 	.word	0x200159c4
 8004ccc:	200159cc 	.word	0x200159cc
 8004cd0:	2000697e 	.word	0x2000697e
                }
                else if(TableConfig[menuitem].valuei)
 8004cd4:	49b9      	ldr	r1, [pc, #740]	; (8004fbc <acis_gui_task+0x3d50>)
 8004cd6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004cda:	4613      	mov	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80bb 	beq.w	8004e64 <acis_gui_task+0x3bf8>
                {
                  if(TableOffset(TableConfig[menuitem].valuei, int32_t) - TableConfig[menuitem].step < TableConfig[menuitem].min)
 8004cee:	49b3      	ldr	r1, [pc, #716]	; (8004fbc <acis_gui_task+0x3d50>)
 8004cf0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3308      	adds	r3, #8
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	4bae      	ldr	r3, [pc, #696]	; (8004fc0 <acis_gui_task+0x3d54>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004d0e:	fb03 f301 	mul.w	r3, r3, r1
 8004d12:	4413      	add	r3, r2
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d1e:	49a7      	ldr	r1, [pc, #668]	; (8004fbc <acis_gui_task+0x3d50>)
 8004d20:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3318      	adds	r3, #24
 8004d30:	edd3 7a00 	vldr	s15, [r3]
 8004d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d38:	49a0      	ldr	r1, [pc, #640]	; (8004fbc <acis_gui_task+0x3d50>)
 8004d3a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	440b      	add	r3, r1
 8004d48:	3310      	adds	r3, #16
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	ee07 3a90 	vmov	s15, r3
 8004d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	d51f      	bpl.n	8004d9e <acis_gui_task+0x3b32>
                    TableOffset(TableConfig[menuitem].valuei, int32_t) = TableConfig[menuitem].min;
 8004d5e:	4997      	ldr	r1, [pc, #604]	; (8004fbc <acis_gui_task+0x3d50>)
 8004d60:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004d64:	4613      	mov	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4413      	add	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3308      	adds	r3, #8
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	4b92      	ldr	r3, [pc, #584]	; (8004fc0 <acis_gui_task+0x3d54>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004d7e:	fb03 f301 	mul.w	r3, r3, r1
 8004d82:	4413      	add	r3, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	498d      	ldr	r1, [pc, #564]	; (8004fbc <acis_gui_task+0x3d50>)
 8004d88:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	440b      	add	r3, r1
 8004d96:	3310      	adds	r3, #16
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6003      	str	r3, [r0, #0]
 8004d9c:	e03a      	b.n	8004e14 <acis_gui_task+0x3ba8>
                  else TableOffset(TableConfig[menuitem].valuei, int32_t) -= TableConfig[menuitem].step;
 8004d9e:	4987      	ldr	r1, [pc, #540]	; (8004fbc <acis_gui_task+0x3d50>)
 8004da0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	440b      	add	r3, r1
 8004dae:	3308      	adds	r3, #8
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b82      	ldr	r3, [pc, #520]	; (8004fc0 <acis_gui_task+0x3d54>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	4601      	mov	r1, r0
 8004dba:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004dbe:	fb03 f301 	mul.w	r3, r3, r1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dce:	497b      	ldr	r1, [pc, #492]	; (8004fbc <acis_gui_task+0x3d50>)
 8004dd0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	440b      	add	r3, r1
 8004dde:	3318      	adds	r3, #24
 8004de0:	edd3 7a00 	vldr	s15, [r3]
 8004de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de8:	4974      	ldr	r1, [pc, #464]	; (8004fbc <acis_gui_task+0x3d50>)
 8004dea:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004dee:	4613      	mov	r3, r2
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	4413      	add	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	440b      	add	r3, r1
 8004df8:	3308      	adds	r3, #8
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4601      	mov	r1, r0
 8004e00:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004e04:	fb03 f301 	mul.w	r3, r3, r1
 8004e08:	4413      	add	r3, r2
 8004e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e0e:	ee17 2a90 	vmov	r2, s15
 8004e12:	601a      	str	r2, [r3, #0]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuei, int32_t), sizeof(int32_t));
 8004e14:	4969      	ldr	r1, [pc, #420]	; (8004fbc <acis_gui_task+0x3d50>)
 8004e16:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4413      	add	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	440b      	add	r3, r1
 8004e24:	3308      	adds	r3, #8
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <acis_gui_task+0x3d54>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004e34:	fb03 f301 	mul.w	r3, r3, r1
 8004e38:	4413      	add	r3, r2
 8004e3a:	2104      	movs	r1, #4
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fc f917 	bl	8001070 <acis_apply_parameter>
 8004e42:	e00f      	b.n	8004e64 <acis_gui_task+0x3bf8>
                }
              }
            }
            else if(menuselecting == 2)
 8004e44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d10b      	bne.n	8004e64 <acis_gui_task+0x3bf8>
            {
              if(++stringchar >= TABLE_STRING_MAX - 1) stringchar = TABLE_STRING_MAX - 2;
 8004e4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004e50:	3301      	adds	r3, #1
 8004e52:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e56:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004e5a:	2b0a      	cmp	r3, #10
 8004e5c:	dd02      	ble.n	8004e64 <acis_gui_task+0x3bf8>
 8004e5e:	230a      	movs	r3, #10
 8004e60:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
            }
            select_timeout = now;
 8004e64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004e68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_LEFT = 0;
 8004e6c:	4b55      	ldr	r3, [pc, #340]	; (8004fc4 <acis_gui_task+0x3d58>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8004e72:	4b55      	ldr	r3, [pc, #340]	; (8004fc8 <acis_gui_task+0x3d5c>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <acis_gui_task+0x3c28>
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <acis_gui_task+0x3d60>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 81c4 	beq.w	8005210 <acis_gui_task+0x3fa4>
 8004e88:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <acis_gui_task+0x3d64>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004e90:	f240 81be 	bls.w	8005210 <acis_gui_task+0x3fa4>
        {
          display_timeout = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <acis_gui_task+0x3d64>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d904      	bls.n	8004eac <acis_gui_task+0x3c40>
 8004ea2:	4b4b      	ldr	r3, [pc, #300]	; (8004fd0 <acis_gui_task+0x3d64>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3b64      	subs	r3, #100	; 0x64
 8004ea8:	4a49      	ldr	r2, [pc, #292]	; (8004fd0 <acis_gui_task+0x3d64>)
 8004eaa:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8004eac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 81ad 	beq.w	8005210 <acis_gui_task+0x3fa4>
          {
            if(menuselecting == 1)
 8004eb6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	f040 8191 	bne.w	80051e2 <acis_gui_task+0x3f76>
            {
              if(StatusSynchronized && TableConfig[menuitem].step)
 8004ec0:	4b44      	ldr	r3, [pc, #272]	; (8004fd4 <acis_gui_task+0x3d68>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 819b 	beq.w	8005202 <acis_gui_task+0x3f96>
 8004ecc:	493b      	ldr	r1, [pc, #236]	; (8004fbc <acis_gui_task+0x3d50>)
 8004ece:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	4413      	add	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	440b      	add	r3, r1
 8004edc:	3318      	adds	r3, #24
 8004ede:	edd3 7a00 	vldr	s15, [r3]
 8004ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	f000 818a 	beq.w	8005202 <acis_gui_task+0x3f96>
              {
                if(TableConfig[menuitem].valuef)
 8004eee:	4933      	ldr	r1, [pc, #204]	; (8004fbc <acis_gui_task+0x3d50>)
 8004ef0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	440b      	add	r3, r1
 8004efe:	330c      	adds	r3, #12
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80b5 	beq.w	8005072 <acis_gui_task+0x3e06>
                {
                  if(TableOffset(TableConfig[menuitem].valuef, float) + TableConfig[menuitem].step > TableConfig[menuitem].max)
 8004f08:	492c      	ldr	r1, [pc, #176]	; (8004fbc <acis_gui_task+0x3d50>)
 8004f0a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	440b      	add	r3, r1
 8004f18:	330c      	adds	r3, #12
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <acis_gui_task+0x3d54>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4619      	mov	r1, r3
 8004f24:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004f28:	fb03 f301 	mul.w	r3, r3, r1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	ed93 7a00 	vldr	s14, [r3]
 8004f32:	4922      	ldr	r1, [pc, #136]	; (8004fbc <acis_gui_task+0x3d50>)
 8004f34:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004f38:	4613      	mov	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4413      	add	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	440b      	add	r3, r1
 8004f42:	3318      	adds	r3, #24
 8004f44:	edd3 7a00 	vldr	s15, [r3]
 8004f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f4c:	491b      	ldr	r1, [pc, #108]	; (8004fbc <acis_gui_task+0x3d50>)
 8004f4e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	dd32      	ble.n	8004fd8 <acis_gui_task+0x3d6c>
                    TableOffset(TableConfig[menuitem].valuef, float) = TableConfig[menuitem].max;
 8004f72:	4912      	ldr	r1, [pc, #72]	; (8004fbc <acis_gui_task+0x3d50>)
 8004f74:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004f78:	4613      	mov	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	440b      	add	r3, r1
 8004f82:	3314      	adds	r3, #20
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	490d      	ldr	r1, [pc, #52]	; (8004fbc <acis_gui_task+0x3d50>)
 8004f88:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	440b      	add	r3, r1
 8004f96:	330c      	adds	r3, #12
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <acis_gui_task+0x3d54>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004fa6:	fb03 f301 	mul.w	r3, r3, r1
 8004faa:	4413      	add	r3, r2
 8004fac:	ee07 0a90 	vmov	s15, r0
 8004fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb4:	edc3 7a00 	vstr	s15, [r3]
 8004fb8:	e043      	b.n	8005042 <acis_gui_task+0x3dd6>
 8004fba:	bf00      	nop
 8004fbc:	0801786c 	.word	0x0801786c
 8004fc0:	200159ac 	.word	0x200159ac
 8004fc4:	200159e4 	.word	0x200159e4
 8004fc8:	200159e5 	.word	0x200159e5
 8004fcc:	200159c5 	.word	0x200159c5
 8004fd0:	200159d0 	.word	0x200159d0
 8004fd4:	2000697e 	.word	0x2000697e
                  else TableOffset(TableConfig[menuitem].valuef, float) += TableConfig[menuitem].step;
 8004fd8:	49d7      	ldr	r1, [pc, #860]	; (8005338 <acis_gui_task+0x40cc>)
 8004fda:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	440b      	add	r3, r1
 8004fe8:	330c      	adds	r3, #12
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	4bd3      	ldr	r3, [pc, #844]	; (800533c <acis_gui_task+0x40d0>)
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004ff8:	fb03 f301 	mul.w	r3, r3, r1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	ed93 7a00 	vldr	s14, [r3]
 8005002:	49cd      	ldr	r1, [pc, #820]	; (8005338 <acis_gui_task+0x40cc>)
 8005004:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005008:	4613      	mov	r3, r2
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	4413      	add	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	440b      	add	r3, r1
 8005012:	3318      	adds	r3, #24
 8005014:	edd3 7a00 	vldr	s15, [r3]
 8005018:	49c7      	ldr	r1, [pc, #796]	; (8005338 <acis_gui_task+0x40cc>)
 800501a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	440b      	add	r3, r1
 8005028:	330c      	adds	r3, #12
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	4601      	mov	r1, r0
 8005030:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005034:	fb03 f301 	mul.w	r3, r3, r1
 8005038:	4413      	add	r3, r2
 800503a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800503e:	edc3 7a00 	vstr	s15, [r3]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuef, float), sizeof(float));
 8005042:	49bd      	ldr	r1, [pc, #756]	; (8005338 <acis_gui_task+0x40cc>)
 8005044:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	440b      	add	r3, r1
 8005052:	330c      	adds	r3, #12
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	4bb8      	ldr	r3, [pc, #736]	; (800533c <acis_gui_task+0x40d0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4619      	mov	r1, r3
 800505e:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005062:	fb03 f301 	mul.w	r3, r3, r1
 8005066:	4413      	add	r3, r2
 8005068:	2104      	movs	r1, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7fc f800 	bl	8001070 <acis_apply_parameter>
 8005070:	e0c7      	b.n	8005202 <acis_gui_task+0x3f96>
                }
                else if(TableConfig[menuitem].valuei)
 8005072:	49b1      	ldr	r1, [pc, #708]	; (8005338 <acis_gui_task+0x40cc>)
 8005074:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	440b      	add	r3, r1
 8005082:	3308      	adds	r3, #8
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80bb 	beq.w	8005202 <acis_gui_task+0x3f96>
                {
                  if(TableOffset(TableConfig[menuitem].valuei, int32_t) + TableConfig[menuitem].step > TableConfig[menuitem].max)
 800508c:	49aa      	ldr	r1, [pc, #680]	; (8005338 <acis_gui_task+0x40cc>)
 800508e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	440b      	add	r3, r1
 800509c:	3308      	adds	r3, #8
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	4ba6      	ldr	r3, [pc, #664]	; (800533c <acis_gui_task+0x40d0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	f640 436c 	movw	r3, #3180	; 0xc6c
 80050ac:	fb03 f301 	mul.w	r3, r3, r1
 80050b0:	4413      	add	r3, r2
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050bc:	499e      	ldr	r1, [pc, #632]	; (8005338 <acis_gui_task+0x40cc>)
 80050be:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80050c2:	4613      	mov	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	4413      	add	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	440b      	add	r3, r1
 80050cc:	3318      	adds	r3, #24
 80050ce:	edd3 7a00 	vldr	s15, [r3]
 80050d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050d6:	4998      	ldr	r1, [pc, #608]	; (8005338 <acis_gui_task+0x40cc>)
 80050d8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	440b      	add	r3, r1
 80050e6:	3314      	adds	r3, #20
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fa:	dd1f      	ble.n	800513c <acis_gui_task+0x3ed0>
                    TableOffset(TableConfig[menuitem].valuei, int32_t) = TableConfig[menuitem].max;
 80050fc:	498e      	ldr	r1, [pc, #568]	; (8005338 <acis_gui_task+0x40cc>)
 80050fe:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	440b      	add	r3, r1
 800510c:	3308      	adds	r3, #8
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	4b8a      	ldr	r3, [pc, #552]	; (800533c <acis_gui_task+0x40d0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4619      	mov	r1, r3
 8005118:	f640 436c 	movw	r3, #3180	; 0xc6c
 800511c:	fb03 f301 	mul.w	r3, r3, r1
 8005120:	4413      	add	r3, r2
 8005122:	4618      	mov	r0, r3
 8005124:	4984      	ldr	r1, [pc, #528]	; (8005338 <acis_gui_task+0x40cc>)
 8005126:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	440b      	add	r3, r1
 8005134:	3314      	adds	r3, #20
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6003      	str	r3, [r0, #0]
 800513a:	e03a      	b.n	80051b2 <acis_gui_task+0x3f46>
                  else TableOffset(TableConfig[menuitem].valuei, int32_t) += TableConfig[menuitem].step;
 800513c:	497e      	ldr	r1, [pc, #504]	; (8005338 <acis_gui_task+0x40cc>)
 800513e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	440b      	add	r3, r1
 800514c:	3308      	adds	r3, #8
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	4b7a      	ldr	r3, [pc, #488]	; (800533c <acis_gui_task+0x40d0>)
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	4601      	mov	r1, r0
 8005158:	f640 436c 	movw	r3, #3180	; 0xc6c
 800515c:	fb03 f301 	mul.w	r3, r3, r1
 8005160:	4413      	add	r3, r2
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	ee07 3a90 	vmov	s15, r3
 8005168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800516c:	4972      	ldr	r1, [pc, #456]	; (8005338 <acis_gui_task+0x40cc>)
 800516e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	440b      	add	r3, r1
 800517c:	3318      	adds	r3, #24
 800517e:	edd3 7a00 	vldr	s15, [r3]
 8005182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005186:	496c      	ldr	r1, [pc, #432]	; (8005338 <acis_gui_task+0x40cc>)
 8005188:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	440b      	add	r3, r1
 8005196:	3308      	adds	r3, #8
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	4601      	mov	r1, r0
 800519e:	f640 436c 	movw	r3, #3180	; 0xc6c
 80051a2:	fb03 f301 	mul.w	r3, r3, r1
 80051a6:	4413      	add	r3, r2
 80051a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ac:	ee17 2a90 	vmov	r2, s15
 80051b0:	601a      	str	r2, [r3, #0]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuei, int32_t), sizeof(int32_t));
 80051b2:	4961      	ldr	r1, [pc, #388]	; (8005338 <acis_gui_task+0x40cc>)
 80051b4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80051b8:	4613      	mov	r3, r2
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	4413      	add	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	440b      	add	r3, r1
 80051c2:	3308      	adds	r3, #8
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	4b5c      	ldr	r3, [pc, #368]	; (800533c <acis_gui_task+0x40d0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4619      	mov	r1, r3
 80051ce:	f640 436c 	movw	r3, #3180	; 0xc6c
 80051d2:	fb03 f301 	mul.w	r3, r3, r1
 80051d6:	4413      	add	r3, r2
 80051d8:	2104      	movs	r1, #4
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb ff48 	bl	8001070 <acis_apply_parameter>
 80051e0:	e00f      	b.n	8005202 <acis_gui_task+0x3f96>
                }
              }
            }
            else if(menuselecting == 2)
 80051e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d10b      	bne.n	8005202 <acis_gui_task+0x3f96>
            {
              if(--stringchar < 0) stringchar = 0;
 80051ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051ee:	3b01      	subs	r3, #1
 80051f0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80051f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	da02      	bge.n	8005202 <acis_gui_task+0x3f96>
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
            }
            select_timeout = now;
 8005202:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005206:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            BUT_RIGHT = 0;
 800520a:	4b4d      	ldr	r3, [pc, #308]	; (8005340 <acis_gui_task+0x40d4>)
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 8005210:	4b4c      	ldr	r3, [pc, #304]	; (8005344 <acis_gui_task+0x40d8>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d067      	beq.n	80052ea <acis_gui_task+0x407e>
        {
          display_timeout = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting == 1)
 8005220:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d11c      	bne.n	8005262 <acis_gui_task+0x3ff6>
          {
            if(++menuitem >= sizeof(TableConfig) / sizeof(sConfigLinking)) menuitem = sizeof(TableConfig) / sizeof(sConfigLinking) - 1;
 8005228:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800522c:	3301      	adds	r3, #1
 800522e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005232:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005236:	2b08      	cmp	r3, #8
 8005238:	d902      	bls.n	8005240 <acis_gui_task+0x3fd4>
 800523a:	2308      	movs	r3, #8
 800523c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 8005240:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800524a:	429a      	cmp	r2, r3
 800524c:	d204      	bcs.n	8005258 <acis_gui_task+0x3fec>
 800524e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005252:	3b04      	subs	r3, #4
 8005254:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 8005258:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800525c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005260:	e040      	b.n	80052e4 <acis_gui_task+0x4078>
          }
          else if(menuselecting == 2)
 8005262:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005266:	2b02      	cmp	r3, #2
 8005268:	d13c      	bne.n	80052e4 <acis_gui_task+0x4078>
          {
            if(StatusSynchronized)
 800526a:	4b37      	ldr	r3, [pc, #220]	; (8005348 <acis_gui_task+0x40dc>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d033      	beq.n	80052dc <acis_gui_task+0x4070>
            {
              if(++tablechars[stringchar] >= lcd_chars_len) tablechars[stringchar] = 0;
 8005274:	f107 030c 	add.w	r3, r7, #12
 8005278:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800527c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005280:	b29b      	uxth	r3, r3
 8005282:	3301      	adds	r3, #1
 8005284:	b29b      	uxth	r3, r3
 8005286:	b219      	sxth	r1, r3
 8005288:	f107 030c 	add.w	r3, r7, #12
 800528c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8005290:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800529c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80052a0:	461a      	mov	r2, r3
 80052a2:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	db06      	blt.n	80052ba <acis_gui_task+0x404e>
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80052b4:	2100      	movs	r1, #0
 80052b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
              tablestring[stringchar] = lcd_chars[tablechars[stringchar]];
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <acis_gui_task+0x40e0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f107 020c 	add.w	r2, r7, #12
 80052c2:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80052c6:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80052ca:	4413      	add	r3, r2
 80052cc:	7819      	ldrb	r1, [r3, #0]
 80052ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80052d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80052d6:	4413      	add	r3, r2
 80052d8:	460a      	mov	r2, r1
 80052da:	701a      	strb	r2, [r3, #0]
            }
            select_timeout = now;
 80052dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80052e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_DOWN = 0;
 80052e4:	4b17      	ldr	r3, [pc, #92]	; (8005344 <acis_gui_task+0x40d8>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 80052ea:	4b19      	ldr	r3, [pc, #100]	; (8005350 <acis_gui_task+0x40e4>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d074      	beq.n	80053de <acis_gui_task+0x4172>
        {
          display_timeout = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting == 1)
 80052fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d128      	bne.n	8005354 <acis_gui_task+0x40e8>
          {
            if(--menuitem < 0) menuitem = 0;
 8005302:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005306:	3b01      	subs	r3, #1
 8005308:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800530c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005310:	2b00      	cmp	r3, #0
 8005312:	da02      	bge.n	800531a <acis_gui_task+0x40ae>
 8005314:	2300      	movs	r3, #0
 8005316:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menuitem < menufirst) menufirst = menuitem;
 800531a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800531e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005322:	429a      	cmp	r2, r3
 8005324:	d903      	bls.n	800532e <acis_gui_task+0x40c2>
 8005326:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800532a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 800532e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005332:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005336:	e04f      	b.n	80053d8 <acis_gui_task+0x416c>
 8005338:	0801786c 	.word	0x0801786c
 800533c:	200159ac 	.word	0x200159ac
 8005340:	200159e5 	.word	0x200159e5
 8005344:	200159e7 	.word	0x200159e7
 8005348:	2000697e 	.word	0x2000697e
 800534c:	200004d0 	.word	0x200004d0
 8005350:	200159e6 	.word	0x200159e6
          }
          else if(menuselecting == 2)
 8005354:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005358:	2b02      	cmp	r3, #2
 800535a:	d13d      	bne.n	80053d8 <acis_gui_task+0x416c>
          {
            if(StatusSynchronized)
 800535c:	4bc2      	ldr	r3, [pc, #776]	; (8005668 <acis_gui_task+0x43fc>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d034      	beq.n	80053d0 <acis_gui_task+0x4164>
            {
              if(--tablechars[stringchar] < 0) tablechars[stringchar] = lcd_chars_len - 1;
 8005366:	f107 030c 	add.w	r3, r7, #12
 800536a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800536e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	b219      	sxth	r1, r3
 800537a:	f107 030c 	add.w	r3, r7, #12
 800537e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8005382:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800538e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da0b      	bge.n	80053ae <acis_gui_task+0x4142>
 8005396:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	3b01      	subs	r3, #1
 800539e:	b29b      	uxth	r3, r3
 80053a0:	b219      	sxth	r1, r3
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80053aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
              tablestring[stringchar] = lcd_chars[tablechars[stringchar]];
 80053ae:	4baf      	ldr	r3, [pc, #700]	; (800566c <acis_gui_task+0x4400>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f107 020c 	add.w	r2, r7, #12
 80053b6:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80053ba:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80053be:	4413      	add	r3, r2
 80053c0:	7819      	ldrb	r1, [r3, #0]
 80053c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80053c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80053ca:	4413      	add	r3, r2
 80053cc:	460a      	mov	r2, r1
 80053ce:	701a      	strb	r2, [r3, #0]
            }
            select_timeout = now;
 80053d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80053d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_UP = 0;
 80053d8:	4ba5      	ldr	r3, [pc, #660]	; (8005670 <acis_gui_task+0x4404>)
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++, menuitem = 0;
 80053de:	4ba5      	ldr	r3, [pc, #660]	; (8005674 <acis_gui_task+0x4408>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d013      	beq.n	8005410 <acis_gui_task+0x41a4>
 80053e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <acis_gui_task+0x41a4>
 80053f0:	4ba0      	ldr	r3, [pc, #640]	; (8005674 <acis_gui_task+0x4408>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	4ba0      	ldr	r3, [pc, #640]	; (8005678 <acis_gui_task+0x440c>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	3301      	adds	r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	4b9d      	ldr	r3, [pc, #628]	; (8005678 <acis_gui_task+0x440c>)
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	2300      	movs	r3, #0
 8005406:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800540a:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--, menuitem = 0;

        break;
 800540c:	f002 bdbe 	b.w	8007f8c <acis_gui_task+0x6d20>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--, menuitem = 0;
 8005410:	4b9a      	ldr	r3, [pc, #616]	; (800567c <acis_gui_task+0x4410>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	f002 85b8 	beq.w	8007f8c <acis_gui_task+0x6d20>
 800541c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005420:	2b00      	cmp	r3, #0
 8005422:	f042 85b3 	bne.w	8007f8c <acis_gui_task+0x6d20>
 8005426:	4b95      	ldr	r3, [pc, #596]	; (800567c <acis_gui_task+0x4410>)
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	4b92      	ldr	r3, [pc, #584]	; (8005678 <acis_gui_task+0x440c>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b2da      	uxtb	r2, r3
 8005436:	4b90      	ldr	r3, [pc, #576]	; (8005678 <acis_gui_task+0x440c>)
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        break;
 8005440:	f002 bda4 	b.w	8007f8c <acis_gui_task+0x6d20>
      }
      case MenuTableSetup :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 8005444:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8005448:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800544c:	f004 fc06 	bl	8009c5c <DelayDiff>
 8005450:	4602      	mov	r2, r0
 8005452:	4b8b      	ldr	r3, [pc, #556]	; (8005680 <acis_gui_task+0x4414>)
 8005454:	429a      	cmp	r2, r3
 8005456:	f240 813d 	bls.w	80056d4 <acis_gui_task+0x4468>
        {
          display_timeout = now;
 800545a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800545e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 8005462:	f004 fd2b 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8005466:	2301      	movs	r3, #1
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	2340      	movs	r3, #64	; 0x40
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	2100      	movs	r1, #0
 8005470:	2000      	movs	r0, #0
 8005472:	f004 fe0e 	bl	800a092 <lcd_rect>
          font_setFont(&rre_8x12);
 8005476:	4883      	ldr	r0, [pc, #524]	; (8005684 <acis_gui_task+0x4418>)
 8005478:	f00c fa00 	bl	801187c <font_setFont>
          font_printf(0,2,"Table Setups");
 800547c:	4a82      	ldr	r2, [pc, #520]	; (8005688 <acis_gui_task+0x441c>)
 800547e:	2102      	movs	r1, #2
 8005480:	2000      	movs	r0, #0
 8005482:	f00d fc1d 	bl	8012cc0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8005486:	2301      	movs	r3, #1
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	2301      	movs	r3, #1
 800548c:	2280      	movs	r2, #128	; 0x80
 800548e:	210f      	movs	r1, #15
 8005490:	2000      	movs	r0, #0
 8005492:	f004 fdfe 	bl	800a092 <lcd_rect>

          font_setFont(&rre_5x8);
 8005496:	487d      	ldr	r0, [pc, #500]	; (800568c <acis_gui_task+0x4420>)
 8005498:	f00c f9f0 	bl	801187c <font_setFont>
          for(int i = 0; i < 6; i++)
 800549c:	2300      	movs	r3, #0
 800549e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80054a2:	e110      	b.n	80056c6 <acis_gui_task+0x445a>
          {
            menuselected = menufirst + i;
 80054a4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80054a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80054ac:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80054b0:	440a      	add	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]
            if(menuselected < sizeof(TableSetup) / sizeof(sConfigLinking))
 80054b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b07      	cmp	r3, #7
 80054bc:	f200 80fe 	bhi.w	80056bc <acis_gui_task+0x4450>
            {
              if((!menuselecting || menuitem != menuselected))
 80054c0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <acis_gui_task+0x426a>
 80054c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80054cc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d053      	beq.n	800557e <acis_gui_task+0x4312>
              {
                if(TableSetup[menuselected].valuei)
 80054d6:	496e      	ldr	r1, [pc, #440]	; (8005690 <acis_gui_task+0x4424>)
 80054d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4613      	mov	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	440b      	add	r3, r1
 80054e8:	3308      	adds	r3, #8
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02d      	beq.n	800554c <acis_gui_task+0x42e0>
                  font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name, TableOffset(TableSetup[menuselected].valuei, int32_t));
 80054f0:	f00c f96a 	bl	80117c8 <font_getHeight>
 80054f4:	4602      	mov	r2, r0
 80054f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054fa:	fb03 f302 	mul.w	r3, r3, r2
 80054fe:	f103 0012 	add.w	r0, r3, #18
 8005502:	4963      	ldr	r1, [pc, #396]	; (8005690 <acis_gui_task+0x4424>)
 8005504:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	4413      	add	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	440b      	add	r3, r1
 8005514:	681c      	ldr	r4, [r3, #0]
 8005516:	495e      	ldr	r1, [pc, #376]	; (8005690 <acis_gui_task+0x4424>)
 8005518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4613      	mov	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4413      	add	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	440b      	add	r3, r1
 8005528:	3308      	adds	r3, #8
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	4b59      	ldr	r3, [pc, #356]	; (8005694 <acis_gui_task+0x4428>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4619      	mov	r1, r3
 8005534:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005538:	fb03 f301 	mul.w	r3, r3, r1
 800553c:	4413      	add	r3, r2
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4622      	mov	r2, r4
 8005542:	4601      	mov	r1, r0
 8005544:	2003      	movs	r0, #3
 8005546:	f00d fbbb 	bl	8012cc0 <font_printf>
                if(TableSetup[menuselected].valuei)
 800554a:	e0b7      	b.n	80056bc <acis_gui_task+0x4450>
                else font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name);
 800554c:	f00c f93c 	bl	80117c8 <font_getHeight>
 8005550:	4602      	mov	r2, r0
 8005552:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005556:	fb03 f302 	mul.w	r3, r3, r2
 800555a:	f103 0012 	add.w	r0, r3, #18
 800555e:	494c      	ldr	r1, [pc, #304]	; (8005690 <acis_gui_task+0x4424>)
 8005560:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	440b      	add	r3, r1
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	4601      	mov	r1, r0
 8005576:	2003      	movs	r0, #3
 8005578:	f00d fba2 	bl	8012cc0 <font_printf>
                if(TableSetup[menuselected].valuei)
 800557c:	e09e      	b.n	80056bc <acis_gui_task+0x4450>
              }
              else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 800557e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005582:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	f040 8089 	bne.w	80056a0 <acis_gui_task+0x4434>
 800558e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8005592:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8005596:	f004 fb61 	bl	8009c5c <DelayDiff>
 800559a:	4602      	mov	r2, r0
 800559c:	4b3e      	ldr	r3, [pc, #248]	; (8005698 <acis_gui_task+0x442c>)
 800559e:	429a      	cmp	r2, r3
 80055a0:	d87e      	bhi.n	80056a0 <acis_gui_task+0x4434>
              {
                font_printf(-125,18 + font_getHeight()*i,"<");
 80055a2:	f00c f911 	bl	80117c8 <font_getHeight>
 80055a6:	4602      	mov	r2, r0
 80055a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055ac:	fb03 f302 	mul.w	r3, r3, r2
 80055b0:	3312      	adds	r3, #18
 80055b2:	4a3a      	ldr	r2, [pc, #232]	; (800569c <acis_gui_task+0x4430>)
 80055b4:	4619      	mov	r1, r3
 80055b6:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80055ba:	f00d fb81 	bl	8012cc0 <font_printf>
                if(TableSetup[menuselected].valuei)
 80055be:	4934      	ldr	r1, [pc, #208]	; (8005690 <acis_gui_task+0x4424>)
 80055c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	4413      	add	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	440b      	add	r3, r1
 80055d0:	3308      	adds	r3, #8
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d02d      	beq.n	8005634 <acis_gui_task+0x43c8>
                  font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name, TableOffset(TableSetup[menuselected].valuei, int32_t));
 80055d8:	f00c f8f6 	bl	80117c8 <font_getHeight>
 80055dc:	4602      	mov	r2, r0
 80055de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055e2:	fb03 f302 	mul.w	r3, r3, r2
 80055e6:	f103 0012 	add.w	r0, r3, #18
 80055ea:	4929      	ldr	r1, [pc, #164]	; (8005690 <acis_gui_task+0x4424>)
 80055ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	4413      	add	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	440b      	add	r3, r1
 80055fc:	681c      	ldr	r4, [r3, #0]
 80055fe:	4924      	ldr	r1, [pc, #144]	; (8005690 <acis_gui_task+0x4424>)
 8005600:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	440b      	add	r3, r1
 8005610:	3308      	adds	r3, #8
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <acis_gui_task+0x4428>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005620:	fb03 f301 	mul.w	r3, r3, r1
 8005624:	4413      	add	r3, r2
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4622      	mov	r2, r4
 800562a:	4601      	mov	r1, r0
 800562c:	2003      	movs	r0, #3
 800562e:	f00d fb47 	bl	8012cc0 <font_printf>
                if(TableSetup[menuselected].valuei)
 8005632:	e043      	b.n	80056bc <acis_gui_task+0x4450>
                else font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name);
 8005634:	f00c f8c8 	bl	80117c8 <font_getHeight>
 8005638:	4602      	mov	r2, r0
 800563a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800563e:	fb03 f302 	mul.w	r3, r3, r2
 8005642:	f103 0012 	add.w	r0, r3, #18
 8005646:	4912      	ldr	r1, [pc, #72]	; (8005690 <acis_gui_task+0x4424>)
 8005648:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	440b      	add	r3, r1
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	4601      	mov	r1, r0
 800565e:	2003      	movs	r0, #3
 8005660:	f00d fb2e 	bl	8012cc0 <font_printf>
                if(TableSetup[menuselected].valuei)
 8005664:	e02a      	b.n	80056bc <acis_gui_task+0x4450>
 8005666:	bf00      	nop
 8005668:	2000697e 	.word	0x2000697e
 800566c:	200004d0 	.word	0x200004d0
 8005670:	200159e6 	.word	0x200159e6
 8005674:	200159e5 	.word	0x200159e5
 8005678:	2000695c 	.word	0x2000695c
 800567c:	200159e4 	.word	0x200159e4
 8005680:	000249f0 	.word	0x000249f0
 8005684:	20002ce0 	.word	0x20002ce0
 8005688:	080171bc 	.word	0x080171bc
 800568c:	20002cd0 	.word	0x20002cd0
 8005690:	080176ec 	.word	0x080176ec
 8005694:	200159ac 	.word	0x200159ac
 8005698:	0007a11f 	.word	0x0007a11f
 800569c:	08017194 	.word	0x08017194
              }
              else if(DelayDiff(now, select_timeout) > 800000)
 80056a0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80056a4:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80056a8:	f004 fad8 	bl	8009c5c <DelayDiff>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4bc2      	ldr	r3, [pc, #776]	; (80059b8 <acis_gui_task+0x474c>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d903      	bls.n	80056bc <acis_gui_task+0x4450>
                select_timeout = now;
 80056b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80056b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          for(int i = 0; i < 6; i++)
 80056bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056c0:	3301      	adds	r3, #1
 80056c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80056c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056ca:	2b05      	cmp	r3, #5
 80056cc:	f77f aeea 	ble.w	80054a4 <acis_gui_task+0x4238>
            }
          }

          lcd_update();
 80056d0:	f004 fb68 	bl	8009da4 <lcd_update>
        }
        if(BUT_ENTER)
 80056d4:	4bb9      	ldr	r3, [pc, #740]	; (80059bc <acis_gui_task+0x4750>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d03c      	beq.n	8005758 <acis_gui_task+0x44ec>
        {
          display_timeout = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(!menuselecting)
 80056e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d107      	bne.n	80056fc <acis_gui_task+0x4490>
          {
            menuselecting = 1;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            select_timeout = now;
 80056f2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80056f6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80056fa:	e01e      	b.n	800573a <acis_gui_task+0x44ce>
          }
          else
          {
            select_timeout = now;
 80056fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005700:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
            tablesetupitem = &TableSetup[menuitem];
 8005704:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8005708:	4613      	mov	r3, r2
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	4413      	add	r3, r2
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	4aab      	ldr	r2, [pc, #684]	; (80059c0 <acis_gui_task+0x4754>)
 8005712:	4413      	add	r3, r2
 8005714:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
            eMenuItem = tablesetupitem->menuitem;
 8005718:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800571c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005720:	4ba8      	ldr	r3, [pc, #672]	; (80059c4 <acis_gui_task+0x4758>)
 8005722:	701a      	strb	r2, [r3, #0]
            tablesetuptitle = tablesetupitem->name;
 8005724:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
            menufirst2 = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
            menuitem2 = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
          }
          BUT_UP = 0;
 800573a:	4ba3      	ldr	r3, [pc, #652]	; (80059c8 <acis_gui_task+0x475c>)
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8005740:	4ba2      	ldr	r3, [pc, #648]	; (80059cc <acis_gui_task+0x4760>)
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8005746:	4ba2      	ldr	r3, [pc, #648]	; (80059d0 <acis_gui_task+0x4764>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 800574c:	4ba1      	ldr	r3, [pc, #644]	; (80059d4 <acis_gui_task+0x4768>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8005752:	4b9a      	ldr	r3, [pc, #616]	; (80059bc <acis_gui_task+0x4750>)
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8005758:	4b9f      	ldr	r3, [pc, #636]	; (80059d8 <acis_gui_task+0x476c>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <acis_gui_task+0x4528>
        {
          display_timeout = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 8005768:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <acis_gui_task+0x450a>
          {
            menuselecting = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
          }
          BUT_UP = 0;
 8005776:	4b94      	ldr	r3, [pc, #592]	; (80059c8 <acis_gui_task+0x475c>)
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 800577c:	4b93      	ldr	r3, [pc, #588]	; (80059cc <acis_gui_task+0x4760>)
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8005782:	4b93      	ldr	r3, [pc, #588]	; (80059d0 <acis_gui_task+0x4764>)
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8005788:	4b92      	ldr	r3, [pc, #584]	; (80059d4 <acis_gui_task+0x4768>)
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 800578e:	4b92      	ldr	r3, [pc, #584]	; (80059d8 <acis_gui_task+0x476c>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_DOWN)
 8005794:	4b8d      	ldr	r3, [pc, #564]	; (80059cc <acis_gui_task+0x4760>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d025      	beq.n	80057ea <acis_gui_task+0x457e>
        {
          display_timeout = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 80057a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <acis_gui_task+0x4578>
          {
            if(++menuitem >= sizeof(TableSetup) / sizeof(sConfigLinking)) menuitem = sizeof(TableSetup) / sizeof(sConfigLinking) - 1;
 80057ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80057b0:	3301      	adds	r3, #1
 80057b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80057b6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80057ba:	2b07      	cmp	r3, #7
 80057bc:	d902      	bls.n	80057c4 <acis_gui_task+0x4558>
 80057be:	2307      	movs	r3, #7
 80057c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 80057c4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80057c8:	1d1a      	adds	r2, r3, #4
 80057ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d204      	bcs.n	80057dc <acis_gui_task+0x4570>
 80057d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80057d6:	3b04      	subs	r3, #4
 80057d8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 80057dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80057e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_DOWN = 0;
 80057e4:	4b79      	ldr	r3, [pc, #484]	; (80059cc <acis_gui_task+0x4760>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 80057ea:	4b77      	ldr	r3, [pc, #476]	; (80059c8 <acis_gui_task+0x475c>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d023      	beq.n	800583c <acis_gui_task+0x45d0>
        {
          display_timeout = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(menuselecting)
 80057fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d019      	beq.n	8005836 <acis_gui_task+0x45ca>
          {
            if(--menuitem < 0) menuitem = 0;
 8005802:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005806:	3b01      	subs	r3, #1
 8005808:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800580c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005810:	2b00      	cmp	r3, #0
 8005812:	da02      	bge.n	800581a <acis_gui_task+0x45ae>
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
            if(menuitem < menufirst) menufirst = menuitem;
 800581a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800581e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005822:	429a      	cmp	r2, r3
 8005824:	d903      	bls.n	800582e <acis_gui_task+0x45c2>
 8005826:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800582a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            select_timeout = now;
 800582e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005832:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          }
          BUT_UP = 0;
 8005836:	4b64      	ldr	r3, [pc, #400]	; (80059c8 <acis_gui_task+0x475c>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++;
 800583c:	4b65      	ldr	r3, [pc, #404]	; (80059d4 <acis_gui_task+0x4768>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d010      	beq.n	8005868 <acis_gui_task+0x45fc>
 8005846:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10c      	bne.n	8005868 <acis_gui_task+0x45fc>
 800584e:	4b61      	ldr	r3, [pc, #388]	; (80059d4 <acis_gui_task+0x4768>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	4b5b      	ldr	r3, [pc, #364]	; (80059c4 <acis_gui_task+0x4758>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	3301      	adds	r3, #1
 800585c:	b2da      	uxtb	r2, r3
 800585e:	4b59      	ldr	r3, [pc, #356]	; (80059c4 <acis_gui_task+0x4758>)
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;

        break;
 8005864:	f002 bb95 	b.w	8007f92 <acis_gui_task+0x6d26>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
 8005868:	4b59      	ldr	r3, [pc, #356]	; (80059d0 <acis_gui_task+0x4764>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	f002 838f 	beq.w	8007f92 <acis_gui_task+0x6d26>
 8005874:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005878:	2b00      	cmp	r3, #0
 800587a:	f042 838a 	bne.w	8007f92 <acis_gui_task+0x6d26>
 800587e:	4b54      	ldr	r3, [pc, #336]	; (80059d0 <acis_gui_task+0x4764>)
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	4b4f      	ldr	r3, [pc, #316]	; (80059c4 <acis_gui_task+0x4758>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b2da      	uxtb	r2, r3
 800588e:	4b4d      	ldr	r3, [pc, #308]	; (80059c4 <acis_gui_task+0x4758>)
 8005890:	701a      	strb	r2, [r3, #0]
        break;
 8005892:	f002 bb7e 	b.w	8007f92 <acis_gui_task+0x6d26>
      case MenuTableSetupTemperatures :
      case MenuTableSetupServoAccel :
      case MenuTableSetupServoChoke:
      {

        if(DelayDiff(now, display_timeout) > 150000)
 8005896:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 800589a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800589e:	f004 f9dd 	bl	8009c5c <DelayDiff>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b4d      	ldr	r3, [pc, #308]	; (80059dc <acis_gui_task+0x4770>)
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f240 8401 	bls.w	80060ae <acis_gui_task+0x4e42>
        {
          display_timeout = now;
 80058ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80058b0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 80058b4:	f004 fb02 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80058b8:	2301      	movs	r3, #1
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	2100      	movs	r1, #0
 80058c2:	2000      	movs	r0, #0
 80058c4:	f004 fbe5 	bl	800a092 <lcd_rect>
          font_setFont(&rre_8x12);
 80058c8:	4845      	ldr	r0, [pc, #276]	; (80059e0 <acis_gui_task+0x4774>)
 80058ca:	f00b ffd7 	bl	801187c <font_setFont>
          font_printf(0,2,tablesetuptitle, TableOffset(tablesetupitem->valuei, int32_t));
 80058ce:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	461a      	mov	r2, r3
 80058d6:	4b43      	ldr	r3, [pc, #268]	; (80059e4 <acis_gui_task+0x4778>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4619      	mov	r1, r3
 80058dc:	f640 436c 	movw	r3, #3180	; 0xc6c
 80058e0:	fb03 f301 	mul.w	r3, r3, r1
 80058e4:	4413      	add	r3, r2
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80058ec:	2102      	movs	r1, #2
 80058ee:	2000      	movs	r0, #0
 80058f0:	f00d f9e6 	bl	8012cc0 <font_printf>
          lcd_rect(0,15,128,1,1);
 80058f4:	2301      	movs	r3, #1
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	2301      	movs	r3, #1
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	210f      	movs	r1, #15
 80058fe:	2000      	movs	r0, #0
 8005900:	f004 fbc7 	bl	800a092 <lcd_rect>

          font_setFont(&rre_5x8);
 8005904:	4838      	ldr	r0, [pc, #224]	; (80059e8 <acis_gui_task+0x477c>)
 8005906:	f00b ffb9 	bl	801187c <font_setFont>
          for(int i = 0; i < 2; i++)
 800590a:	2300      	movs	r3, #0
 800590c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005910:	e118      	b.n	8005b44 <acis_gui_task+0x48d8>
          {
            menuselected = menufirst2 + i;
 8005912:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005916:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800591a:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 800591e:	440a      	add	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
            if(menuselected < TableOffset(tablesetupitem->valuei, int32_t))
 8005922:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	461a      	mov	r2, r3
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <acis_gui_task+0x4778>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005934:	fb03 f301 	mul.w	r3, r3, r1
 8005938:	4413      	add	r3, r2
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4293      	cmp	r3, r2
 8005946:	f080 80f8 	bcs.w	8005b3a <acis_gui_task+0x48ce>
            {
              if(tablesetupitem->valuedep)
 800594a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d04b      	beq.n	80059ec <acis_gui_task+0x4780>
                font_printf(3,18 + font_getHeight()*i,tablesetupitem->title, menuselected + 1, ((&TableOffset(tablesetupitem->valuedep, float))[menuselected]));
 8005954:	f00b ff38 	bl	80117c8 <font_getHeight>
 8005958:	4602      	mov	r2, r0
 800595a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800595e:	fb03 f302 	mul.w	r3, r3, r2
 8005962:	f103 0512 	add.w	r5, r3, #18
 8005966:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800596a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800596c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f103 0801 	add.w	r8, r3, #1
 8005976:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4619      	mov	r1, r3
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <acis_gui_task+0x4778>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f240 331b 	movw	r3, #795	; 0x31b
 8005988:	fb03 f202 	mul.w	r2, r3, r2
 800598c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fdfc 	bl	8000598 <__aeabi_f2d>
 80059a0:	4603      	mov	r3, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	e9cd 3400 	strd	r3, r4, [sp]
 80059a8:	4643      	mov	r3, r8
 80059aa:	4632      	mov	r2, r6
 80059ac:	4629      	mov	r1, r5
 80059ae:	2003      	movs	r0, #3
 80059b0:	f00d f986 	bl	8012cc0 <font_printf>
 80059b4:	e02d      	b.n	8005a12 <acis_gui_task+0x47a6>
 80059b6:	bf00      	nop
 80059b8:	000c3500 	.word	0x000c3500
 80059bc:	200159e8 	.word	0x200159e8
 80059c0:	080176ec 	.word	0x080176ec
 80059c4:	2000695c 	.word	0x2000695c
 80059c8:	200159e6 	.word	0x200159e6
 80059cc:	200159e7 	.word	0x200159e7
 80059d0:	200159e4 	.word	0x200159e4
 80059d4:	200159e5 	.word	0x200159e5
 80059d8:	200159e9 	.word	0x200159e9
 80059dc:	000249f0 	.word	0x000249f0
 80059e0:	20002ce0 	.word	0x20002ce0
 80059e4:	200159ac 	.word	0x200159ac
 80059e8:	20002cd0 	.word	0x20002cd0
              else font_printf(3,18 + font_getHeight()*i,tablesetupitem->title, menuselected + 1);
 80059ec:	f00b feec 	bl	80117c8 <font_getHeight>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059f6:	fb03 f302 	mul.w	r3, r3, r2
 80059fa:	f103 0112 	add.w	r1, r3, #18
 80059fe:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	2003      	movs	r0, #3
 8005a0e:	f00d f957 	bl	8012cc0 <font_printf>

              if(menuitem2 != menuselected)
 8005a12:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8005a16:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d036      	beq.n	8005a8e <acis_gui_task+0x4822>
                font_printf(-125,18 + font_getHeight()*i,tablesetupitem->step >= 1.0f ? "%.0f" : "%.1f", ((&TableOffset(tablesetupitem->valuef, float))[menuselected]));
 8005a20:	f00b fed2 	bl	80117c8 <font_getHeight>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a2a:	fb03 f302 	mul.w	r3, r3, r2
 8005a2e:	f103 0512 	add.w	r5, r3, #18
 8005a32:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a46:	db01      	blt.n	8005a4c <acis_gui_task+0x47e0>
 8005a48:	4eaa      	ldr	r6, [pc, #680]	; (8005cf4 <acis_gui_task+0x4a88>)
 8005a4a:	e000      	b.n	8005a4e <acis_gui_task+0x47e2>
 8005a4c:	4eaa      	ldr	r6, [pc, #680]	; (8005cf8 <acis_gui_task+0x4a8c>)
 8005a4e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4619      	mov	r1, r3
 8005a56:	4ba9      	ldr	r3, [pc, #676]	; (8005cfc <acis_gui_task+0x4a90>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f240 331b 	movw	r3, #795	; 0x31b
 8005a60:	fb03 f202 	mul.w	r2, r3, r2
 8005a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa fd90 	bl	8000598 <__aeabi_f2d>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	e9cd 3400 	strd	r3, r4, [sp]
 8005a80:	4632      	mov	r2, r6
 8005a82:	4629      	mov	r1, r5
 8005a84:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8005a88:	f00d f91a 	bl	8012cc0 <font_printf>
 8005a8c:	e055      	b.n	8005b3a <acis_gui_task+0x48ce>
              else if(menuitem2 == menuselected && DelayDiff(now, select_timeout) < 500000)
 8005a8e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8005a92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d140      	bne.n	8005b1e <acis_gui_task+0x48b2>
 8005a9c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8005aa0:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8005aa4:	f004 f8da 	bl	8009c5c <DelayDiff>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b95      	ldr	r3, [pc, #596]	; (8005d00 <acis_gui_task+0x4a94>)
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d836      	bhi.n	8005b1e <acis_gui_task+0x48b2>
                font_printf(-125,18 + font_getHeight()*i,tablesetupitem->step >= 1.0f ? "> %.0f" : "> %.1f", ((&TableOffset(tablesetupitem->valuef, float))[menuselected]));
 8005ab0:	f00b fe8a 	bl	80117c8 <font_getHeight>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aba:	fb03 f302 	mul.w	r3, r3, r2
 8005abe:	f103 0512 	add.w	r5, r3, #18
 8005ac2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005ac6:	edd3 7a06 	vldr	s15, [r3, #24]
 8005aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad6:	db01      	blt.n	8005adc <acis_gui_task+0x4870>
 8005ad8:	4e8a      	ldr	r6, [pc, #552]	; (8005d04 <acis_gui_task+0x4a98>)
 8005ada:	e000      	b.n	8005ade <acis_gui_task+0x4872>
 8005adc:	4e8a      	ldr	r6, [pc, #552]	; (8005d08 <acis_gui_task+0x4a9c>)
 8005ade:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4b85      	ldr	r3, [pc, #532]	; (8005cfc <acis_gui_task+0x4a90>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f240 331b 	movw	r3, #795	; 0x31b
 8005af0:	fb03 f202 	mul.w	r2, r3, r2
 8005af4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fa fd48 	bl	8000598 <__aeabi_f2d>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	e9cd 3400 	strd	r3, r4, [sp]
 8005b10:	4632      	mov	r2, r6
 8005b12:	4629      	mov	r1, r5
 8005b14:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8005b18:	f00d f8d2 	bl	8012cc0 <font_printf>
 8005b1c:	e00d      	b.n	8005b3a <acis_gui_task+0x48ce>
              else if(DelayDiff(now, select_timeout) > 800000)
 8005b1e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8005b22:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8005b26:	f004 f899 	bl	8009c5c <DelayDiff>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b77      	ldr	r3, [pc, #476]	; (8005d0c <acis_gui_task+0x4aa0>)
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d903      	bls.n	8005b3a <acis_gui_task+0x48ce>
                select_timeout = now;
 8005b32:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005b36:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          for(int i = 0; i < 2; i++)
 8005b3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005b44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f77f aee2 	ble.w	8005912 <acis_gui_task+0x46a6>

            }
          }

          lcd_rect(1,30,126,1,1);
 8005b4e:	2301      	movs	r3, #1
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	2301      	movs	r3, #1
 8005b54:	227e      	movs	r2, #126	; 0x7e
 8005b56:	211e      	movs	r1, #30
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f004 fa9a 	bl	800a092 <lcd_rect>
          lcd_rect_solid(1,31,126,font_getHeight(),0);
 8005b5e:	f00b fe33 	bl	80117c8 <font_getHeight>
 8005b62:	4602      	mov	r2, r0
 8005b64:	2300      	movs	r3, #0
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	227e      	movs	r2, #126	; 0x7e
 8005b6c:	211f      	movs	r1, #31
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f004 fa34 	bl	8009fdc <lcd_rect_solid>

          int cnt = TableOffset(tablesetupitem->valuei, int32_t);
 8005b74:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4b5f      	ldr	r3, [pc, #380]	; (8005cfc <acis_gui_task+0x4a90>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005b86:	fb03 f301 	mul.w	r3, r3, r1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	601a      	str	r2, [r3, #0]
          float x = -1.0f ,y = -1.0f , prevx = -1.0f , prevy = -1.0f ;
 8005b96:	4b5e      	ldr	r3, [pc, #376]	; (8005d10 <acis_gui_task+0x4aa4>)
 8005b98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005b9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005ba0:	4a5b      	ldr	r2, [pc, #364]	; (8005d10 <acis_gui_task+0x4aa4>)
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	4b5a      	ldr	r3, [pc, #360]	; (8005d10 <acis_gui_task+0x4aa4>)
 8005ba6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005baa:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <acis_gui_task+0x4aa4>)
 8005bac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          float cx,cy;
          float max = -INFINITY;
 8005bb0:	4b58      	ldr	r3, [pc, #352]	; (8005d14 <acis_gui_task+0x4aa8>)
 8005bb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
          float min = 0;
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
          float depmin = INFINITY;
 8005bbe:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8005bc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
          float depmax = -INFINITY;
 8005bc6:	4b53      	ldr	r3, [pc, #332]	; (8005d14 <acis_gui_task+0x4aa8>)
 8005bc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
          float value, dep;
          for(int i = 0; i < cnt; i++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bd2:	e039      	b.n	8005c48 <acis_gui_task+0x49dc>
          {
            value = ((&TableOffset(tablesetupitem->valuef, float))[i]);
 8005bd4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <acis_gui_task+0x4a90>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	f240 331b 	movw	r3, #795	; 0x31b
 8005be6:	fb03 f202 	mul.w	r2, r3, r2
 8005bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	601a      	str	r2, [r3, #0]
            if(value > max)
 8005bfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c02:	ed93 7a00 	vldr	s14, [r3]
 8005c06:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8005c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c12:	dd04      	ble.n	8005c1e <acis_gui_task+0x49b2>
              max = value;
 8005c14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            if(value < min)
 8005c1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c22:	ed93 7a00 	vldr	s14, [r3]
 8005c26:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8005c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	d504      	bpl.n	8005c3e <acis_gui_task+0x49d2>
              min = value;
 8005c34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
          for(int i = 0; i < cnt; i++)
 8005c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005c4c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	dbbe      	blt.n	8005bd4 <acis_gui_task+0x4968>
          }
          if(tablesetupitem->valuedep)
 8005c56:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 814d 	beq.w	8005efc <acis_gui_task+0x4c90>
          {
            for(int i = 0; i < cnt; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c68:	e039      	b.n	8005cde <acis_gui_task+0x4a72>
            {
              dep = ((&TableOffset(tablesetupitem->valuedep, float))[i]);
 8005c6a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	4619      	mov	r1, r3
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <acis_gui_task+0x4a90>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f240 331b 	movw	r3, #795	; 0x31b
 8005c7c:	fb03 f202 	mul.w	r2, r3, r2
 8005c80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	601a      	str	r2, [r3, #0]
              if(dep > depmax)
 8005c94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c98:	ed93 7a00 	vldr	s14, [r3]
 8005c9c:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8005ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca8:	dd04      	ble.n	8005cb4 <acis_gui_task+0x4a48>
                depmax = dep;
 8005caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
              if(dep < depmin)
 8005cb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cb8:	ed93 7a00 	vldr	s14, [r3]
 8005cbc:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8005cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc8:	d504      	bpl.n	8005cd4 <acis_gui_task+0x4a68>
                depmin = dep;
 8005cca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
            for(int i = 0; i < cnt; i++)
 8005cd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ce2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	dbbe      	blt.n	8005c6a <acis_gui_task+0x49fe>
            }
            for(int i = 0; i < cnt; i++)
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cf2:	e0fa      	b.n	8005eea <acis_gui_task+0x4c7e>
 8005cf4:	08017160 	.word	0x08017160
 8005cf8:	080171a8 	.word	0x080171a8
 8005cfc:	200159ac 	.word	0x200159ac
 8005d00:	0007a11f 	.word	0x0007a11f
 8005d04:	08017168 	.word	0x08017168
 8005d08:	080171b0 	.word	0x080171b0
 8005d0c:	000c3500 	.word	0x000c3500
 8005d10:	bf800000 	.word	0xbf800000
 8005d14:	ff800000 	.word	0xff800000
            {
              dep = ((&TableOffset(tablesetupitem->valuedep, float))[i]);
 8005d18:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4b78      	ldr	r3, [pc, #480]	; (8005f04 <acis_gui_task+0x4c98>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	f240 331b 	movw	r3, #795	; 0x31b
 8005d2a:	fb03 f202 	mul.w	r2, r3, r2
 8005d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	601a      	str	r2, [r3, #0]
              value = ((&TableOffset(tablesetupitem->valuef, float))[i]);
 8005d42:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4b6e      	ldr	r3, [pc, #440]	; (8005f04 <acis_gui_task+0x4c98>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f240 331b 	movw	r3, #795	; 0x31b
 8005d54:	fb03 f202 	mul.w	r2, r3, r2
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	461a      	mov	r2, r3
 8005d64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	601a      	str	r2, [r3, #0]
              if(eMenuItem == MenuTableSetupIdleIgnitions)
 8005d6c:	4b66      	ldr	r3, [pc, #408]	; (8005f08 <acis_gui_task+0x4c9c>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b0e      	cmp	r3, #14
 8005d74:	d128      	bne.n	8005dc8 <acis_gui_task+0x4b5c>
                x = 126.0f * log10f(1.0f + ((dep - depmin) / (depmax-depmin) * 9.0f)) + 1.0f;
 8005d76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d7a:	ed93 7a00 	vldr	s14, [r3]
 8005d7e:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8005d82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005d86:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8005d8a:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8005d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d96:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005da6:	eeb0 0a67 	vmov.f32	s0, s15
 8005daa:	f010 fe03 	bl	80169b4 <log10f>
 8005dae:	eeb0 7a40 	vmov.f32	s14, s0
 8005db2:	eddf 7a56 	vldr	s15, [pc, #344]	; 8005f0c <acis_gui_task+0x4ca0>
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc2:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
 8005dc6:	e019      	b.n	8005dfc <acis_gui_task+0x4b90>
              else
                x = 126.0f * (dep - depmin) / (depmax-depmin) + 1.0f;
 8005dc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005dcc:	ed93 7a00 	vldr	s14, [r3]
 8005dd0:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8005dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005f0c <acis_gui_task+0x4ca0>
 8005ddc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8005de0:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8005de4:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8005de8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df8:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
              y = 63 - (value - min) / (max-min) * 32;
 8005dfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e00:	ed93 7a00 	vldr	s14, [r3]
 8005e04:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8005e08:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005e0c:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8005e10:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8005e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e1c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8005f10 <acis_gui_task+0x4ca4>
 8005e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e24:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e28:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005f14 <acis_gui_task+0x4ca8>
 8005e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e30:	edc3 7a00 	vstr	s15, [r3]

              if(prevx == -1.0f && prevy == -1.0f)
 8005e34:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8005e38:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005e3c:	eef4 7a47 	vcmp.f32	s15, s14
 8005e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e44:	d111      	bne.n	8005e6a <acis_gui_task+0x4bfe>
 8005e46:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8005e4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005e4e:	eef4 7a47 	vcmp.f32	s15, s14
 8005e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e56:	d108      	bne.n	8005e6a <acis_gui_task+0x4bfe>
                prevx = x, prevy = y;
 8005e58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005e60:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

              if(i == menuitem2)
 8005e6a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005e6e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d108      	bne.n	8005e88 <acis_gui_task+0x4c1c>
                cx = x, cy = y;
 8005e76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

              lcd_line(prevx, prevy, x, y, 1);
 8005e88:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8005e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e90:	ee17 3a90 	vmov	r3, s15
 8005e94:	b298      	uxth	r0, r3
 8005e96:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8005e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9e:	ee17 3a90 	vmov	r3, s15
 8005ea2:	b299      	uxth	r1, r3
 8005ea4:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8005ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eac:	ee17 3a90 	vmov	r3, s15
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005eb6:	edd3 7a00 	vldr	s15, [r3]
 8005eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ebe:	ee17 3a90 	vmov	r3, s15
 8005ec2:	b29c      	uxth	r4, r3
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4623      	mov	r3, r4
 8005eca:	f004 f98b 	bl	800a1e4 <lcd_line>

              prevx = x;
 8005ece:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ed2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              prevy = y;
 8005ed6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            for(int i = 0; i < cnt; i++)
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005eea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005eee:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	f6ff af0f 	blt.w	8005d18 <acis_gui_task+0x4aac>
 8005efa:	e0bb      	b.n	8006074 <acis_gui_task+0x4e08>
            }
          }
          else
          {
            for(int i = 0; i < cnt; i++)
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f02:	e0af      	b.n	8006064 <acis_gui_task+0x4df8>
 8005f04:	200159ac 	.word	0x200159ac
 8005f08:	2000695c 	.word	0x2000695c
 8005f0c:	42fc0000 	.word	0x42fc0000
 8005f10:	42000000 	.word	0x42000000
 8005f14:	427c0000 	.word	0x427c0000
            {
              value = ((&TableOffset(tablesetupitem->valuef, float))[i]);
 8005f18:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4bcb      	ldr	r3, [pc, #812]	; (8006250 <acis_gui_task+0x4fe4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	f240 331b 	movw	r3, #795	; 0x31b
 8005f2a:	fb03 f202 	mul.w	r2, r3, r2
 8005f2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	601a      	str	r2, [r3, #0]
              x = 126.0f * ((float)i / (float)(cnt-1)) + 1.0f;
 8005f42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f62:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8006254 <acis_gui_task+0x4fe8>
 8005f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f72:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
              y = 63 - (value - min) / (max-min) * 32;
 8005f76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f7a:	ed93 7a00 	vldr	s14, [r3]
 8005f7e:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8005f82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005f86:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8005f8a:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8005f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8006258 <acis_gui_task+0x4fec>
 8005f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005fa2:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800625c <acis_gui_task+0x4ff0>
 8005fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005faa:	edc3 7a00 	vstr	s15, [r3]

              if(prevx == -1.0f && prevy == -1.0f)
 8005fae:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8005fb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005fb6:	eef4 7a47 	vcmp.f32	s15, s14
 8005fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbe:	d111      	bne.n	8005fe4 <acis_gui_task+0x4d78>
 8005fc0:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8005fc4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005fc8:	eef4 7a47 	vcmp.f32	s15, s14
 8005fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd0:	d108      	bne.n	8005fe4 <acis_gui_task+0x4d78>
                prevx = x, prevy = y;
 8005fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005fda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

              lcd_line(prevx, prevy, x, y, 1);
 8005fe4:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8005fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fec:	ee17 3a90 	vmov	r3, s15
 8005ff0:	b298      	uxth	r0, r3
 8005ff2:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8005ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffa:	ee17 3a90 	vmov	r3, s15
 8005ffe:	b299      	uxth	r1, r3
 8006000:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8006004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006008:	ee17 3a90 	vmov	r3, s15
 800600c:	b29a      	uxth	r2, r3
 800600e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006012:	edd3 7a00 	vldr	s15, [r3]
 8006016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601a:	ee17 3a90 	vmov	r3, s15
 800601e:	b29c      	uxth	r4, r3
 8006020:	2301      	movs	r3, #1
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4623      	mov	r3, r4
 8006026:	f004 f8dd 	bl	800a1e4 <lcd_line>

              if(i == menuitem2)
 800602a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800602e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006032:	429a      	cmp	r2, r3
 8006034:	d108      	bne.n	8006048 <acis_gui_task+0x4ddc>
                cx = x, cy = y;
 8006036:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800603a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800603e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

              prevx = x;
 8006048:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800604c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              prevy = y;
 8006050:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            for(int i = 0; i < cnt; i++)
 800605a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800605e:	3301      	adds	r3, #1
 8006060:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006064:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006068:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	f6ff af52 	blt.w	8005f18 <acis_gui_task+0x4cac>
            }
          }
          if(cy > 28)
 8006074:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8006078:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 800607c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006084:	dd11      	ble.n	80060aa <acis_gui_task+0x4e3e>
            lcd_circle5x5(cx,cy);
 8006086:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800608a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800608e:	ee17 3a90 	vmov	r3, s15
 8006092:	b21b      	sxth	r3, r3
 8006094:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8006098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800609c:	ee17 2a90 	vmov	r2, s15
 80060a0:	b212      	sxth	r2, r2
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f004 fbbe 	bl	800a826 <lcd_circle5x5>

          lcd_update();
 80060aa:	f003 fe7b 	bl	8009da4 <lcd_update>
        }
        if(BUT_CANCEL)
 80060ae:	4b6c      	ldr	r3, [pc, #432]	; (8006260 <acis_gui_task+0x4ff4>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d017      	beq.n	80060e8 <acis_gui_task+0x4e7c>
        {
          display_timeout = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          eMenuItem = MenuTableSetup;
 80060be:	4b69      	ldr	r3, [pc, #420]	; (8006264 <acis_gui_task+0x4ff8>)
 80060c0:	2209      	movs	r2, #9
 80060c2:	701a      	strb	r2, [r3, #0]
          BUT_UP = 0;
 80060c4:	4b68      	ldr	r3, [pc, #416]	; (8006268 <acis_gui_task+0x4ffc>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 80060ca:	4b68      	ldr	r3, [pc, #416]	; (800626c <acis_gui_task+0x5000>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 80060d0:	4b67      	ldr	r3, [pc, #412]	; (8006270 <acis_gui_task+0x5004>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 80060d6:	4b67      	ldr	r3, [pc, #412]	; (8006274 <acis_gui_task+0x5008>)
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 80060dc:	4b60      	ldr	r3, [pc, #384]	; (8006260 <acis_gui_task+0x4ff4>)
 80060de:	2200      	movs	r2, #0
 80060e0:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 80060e2:	4b65      	ldr	r3, [pc, #404]	; (8006278 <acis_gui_task+0x500c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 80060e8:	4b61      	ldr	r3, [pc, #388]	; (8006270 <acis_gui_task+0x5004>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <acis_gui_task+0x4e9e>
 80060f2:	4b62      	ldr	r3, [pc, #392]	; (800627c <acis_gui_task+0x5010>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 81b4 	beq.w	8006466 <acis_gui_task+0x51fa>
 80060fe:	4b60      	ldr	r3, [pc, #384]	; (8006280 <acis_gui_task+0x5014>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006106:	f240 81ae 	bls.w	8006466 <acis_gui_task+0x51fa>
        {
          display_timeout = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 40;
 8006110:	4b5b      	ldr	r3, [pc, #364]	; (8006280 <acis_gui_task+0x5014>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b64      	cmp	r3, #100	; 0x64
 8006116:	d904      	bls.n	8006122 <acis_gui_task+0x4eb6>
 8006118:	4b59      	ldr	r3, [pc, #356]	; (8006280 <acis_gui_task+0x5014>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3b28      	subs	r3, #40	; 0x28
 800611e:	4a58      	ldr	r2, [pc, #352]	; (8006280 <acis_gui_task+0x5014>)
 8006120:	6013      	str	r3, [r2, #0]
          if(StatusSynchronized && tablesetupitem->step)
 8006122:	4b58      	ldr	r3, [pc, #352]	; (8006284 <acis_gui_task+0x5018>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8195 	beq.w	8006458 <acis_gui_task+0x51ec>
 800612e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006132:	edd3 7a06 	vldr	s15, [r3, #24]
 8006136:	eef5 7a40 	vcmp.f32	s15, #0.0
 800613a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613e:	f000 818b 	beq.w	8006458 <acis_gui_task+0x51ec>
          {
            if(tablesetupitem->valuedep)
 8006142:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 809d 	beq.w	8006288 <acis_gui_task+0x501c>
            {
              if(tablesetupitem->valuef)
 800614e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 817f 	beq.w	8006458 <acis_gui_task+0x51ec>
              {
                if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) - tablesetupitem->step < tablesetupitem->min)
 800615a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4619      	mov	r1, r3
 8006162:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <acis_gui_task+0x4fe4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	f240 331b 	movw	r3, #795	; 0x31b
 800616c:	fb03 f202 	mul.w	r2, r3, r2
 8006170:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	ed93 7a00 	vldr	s14, [r3]
 800617e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006182:	edd3 7a06 	vldr	s15, [r3, #24]
 8006186:	ee37 7a67 	vsub.f32	s14, s14, s15
 800618a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	ee07 3a90 	vmov	s15, r3
 8006194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a0:	d519      	bpl.n	80061d6 <acis_gui_task+0x4f6a>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->min;
 80061a2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80061a6:	6918      	ldr	r0, [r3, #16]
 80061a8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	4619      	mov	r1, r3
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <acis_gui_task+0x4fe4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	f240 331b 	movw	r3, #795	; 0x31b
 80061ba:	fb03 f202 	mul.w	r2, r3, r2
 80061be:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	ee07 0a90 	vmov	s15, r0
 80061cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d0:	edc3 7a00 	vstr	s15, [r3]
 80061d4:	e027      	b.n	8006226 <acis_gui_task+0x4fba>
                else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) -= tablesetupitem->step;
 80061d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4618      	mov	r0, r3
 80061de:	4b1c      	ldr	r3, [pc, #112]	; (8006250 <acis_gui_task+0x4fe4>)
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	460a      	mov	r2, r1
 80061e4:	f240 331b 	movw	r3, #795	; 0x31b
 80061e8:	fb03 f202 	mul.w	r2, r3, r2
 80061ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4403      	add	r3, r0
 80061f6:	ed93 7a00 	vldr	s14, [r3]
 80061fa:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80061fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8006202:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	4618      	mov	r0, r3
 800620a:	460a      	mov	r2, r1
 800620c:	f240 331b 	movw	r3, #795	; 0x31b
 8006210:	fb03 f202 	mul.w	r2, r3, r2
 8006214:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4403      	add	r3, r0
 800621e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006222:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 8006226:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4619      	mov	r1, r3
 800622e:	4b08      	ldr	r3, [pc, #32]	; (8006250 <acis_gui_task+0x4fe4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	f240 331b 	movw	r3, #795	; 0x31b
 8006238:	fb03 f202 	mul.w	r2, r3, r2
 800623c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	2104      	movs	r1, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7fa ff11 	bl	8001070 <acis_apply_parameter>
 800624e:	e103      	b.n	8006458 <acis_gui_task+0x51ec>
 8006250:	200159ac 	.word	0x200159ac
 8006254:	42fc0000 	.word	0x42fc0000
 8006258:	42000000 	.word	0x42000000
 800625c:	427c0000 	.word	0x427c0000
 8006260:	200159e9 	.word	0x200159e9
 8006264:	2000695c 	.word	0x2000695c
 8006268:	200159e6 	.word	0x200159e6
 800626c:	200159e7 	.word	0x200159e7
 8006270:	200159e4 	.word	0x200159e4
 8006274:	200159e5 	.word	0x200159e5
 8006278:	200159e8 	.word	0x200159e8
 800627c:	200159c4 	.word	0x200159c4
 8006280:	200159cc 	.word	0x200159cc
 8006284:	2000697e 	.word	0x2000697e
              }
            }
            else
            {
              if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) - tablesetupitem->step < tablesetupitem->min)
 8006288:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	4619      	mov	r1, r3
 8006290:	4bcf      	ldr	r3, [pc, #828]	; (80065d0 <acis_gui_task+0x5364>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	f240 331b 	movw	r3, #795	; 0x31b
 800629a:	fb03 f202 	mul.w	r2, r3, r2
 800629e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	ed93 7a00 	vldr	s14, [r3]
 80062ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80062b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80062b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062b8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ce:	d519      	bpl.n	8006304 <acis_gui_task+0x5098>
                ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->min;
 80062d0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80062d4:	6918      	ldr	r0, [r3, #16]
 80062d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4619      	mov	r1, r3
 80062de:	4bbc      	ldr	r3, [pc, #752]	; (80065d0 <acis_gui_task+0x5364>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f240 331b 	movw	r3, #795	; 0x31b
 80062e8:	fb03 f202 	mul.w	r2, r3, r2
 80062ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	ee07 0a90 	vmov	s15, r0
 80062fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062fe:	edc3 7a00 	vstr	s15, [r3]
 8006302:	e027      	b.n	8006354 <acis_gui_task+0x50e8>
              else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) -= tablesetupitem->step;
 8006304:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	4618      	mov	r0, r3
 800630c:	4bb0      	ldr	r3, [pc, #704]	; (80065d0 <acis_gui_task+0x5364>)
 800630e:	6819      	ldr	r1, [r3, #0]
 8006310:	460a      	mov	r2, r1
 8006312:	f240 331b 	movw	r3, #795	; 0x31b
 8006316:	fb03 f202 	mul.w	r2, r3, r2
 800631a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4403      	add	r3, r0
 8006324:	ed93 7a00 	vldr	s14, [r3]
 8006328:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800632c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006330:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4618      	mov	r0, r3
 8006338:	460a      	mov	r2, r1
 800633a:	f240 331b 	movw	r3, #795	; 0x31b
 800633e:	fb03 f202 	mul.w	r2, r3, r2
 8006342:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4403      	add	r3, r0
 800634c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006350:	edc3 7a00 	vstr	s15, [r3]

              if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 > 0 &&
 8006354:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	461a      	mov	r2, r3
 800635c:	4b9c      	ldr	r3, [pc, #624]	; (80065d0 <acis_gui_task+0x5364>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4619      	mov	r1, r3
 8006362:	f640 436c 	movw	r3, #3180	; 0xc6c
 8006366:	fb03 f301 	mul.w	r3, r3, r1
 800636a:	4413      	add	r3, r2
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b01      	cmp	r3, #1
 8006370:	dd5e      	ble.n	8006430 <acis_gui_task+0x51c4>
 8006372:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd5a      	ble.n	8006430 <acis_gui_task+0x51c4>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) - tablesetupitem->step <= ((&TableOffset(tablesetupitem->valuef, float))[menuitem2-1]))
 800637a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	4619      	mov	r1, r3
 8006382:	4b93      	ldr	r3, [pc, #588]	; (80065d0 <acis_gui_task+0x5364>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f240 331b 	movw	r3, #795	; 0x31b
 800638c:	fb03 f202 	mul.w	r2, r3, r2
 8006390:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	ed93 7a00 	vldr	s14, [r3]
 800639e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80063a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80063a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063aa:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4619      	mov	r1, r3
 80063b2:	4b87      	ldr	r3, [pc, #540]	; (80065d0 <acis_gui_task+0x5364>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f240 331b 	movw	r3, #795	; 0x31b
 80063bc:	fb03 f202 	mul.w	r2, r3, r2
 80063c0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	3b04      	subs	r3, #4
 80063cc:	edd3 7a00 	vldr	s15, [r3]
              if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 > 0 &&
 80063d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d8:	d82a      	bhi.n	8006430 <acis_gui_task+0x51c4>
                ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = ((&TableOffset(tablesetupitem->valuef, float))[menuitem2-1]) + tablesetupitem->step;
 80063da:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4619      	mov	r1, r3
 80063e2:	4b7b      	ldr	r3, [pc, #492]	; (80065d0 <acis_gui_task+0x5364>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f240 331b 	movw	r3, #795	; 0x31b
 80063ec:	fb03 f202 	mul.w	r2, r3, r2
 80063f0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	3b04      	subs	r3, #4
 80063fc:	ed93 7a00 	vldr	s14, [r3]
 8006400:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006404:	edd3 7a06 	vldr	s15, [r3, #24]
 8006408:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	4619      	mov	r1, r3
 8006410:	4b6f      	ldr	r3, [pc, #444]	; (80065d0 <acis_gui_task+0x5364>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	f240 331b 	movw	r3, #795	; 0x31b
 800641a:	fb03 f202 	mul.w	r2, r3, r2
 800641e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800642c:	edc3 7a00 	vstr	s15, [r3]


              acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 8006430:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	4619      	mov	r1, r3
 8006438:	4b65      	ldr	r3, [pc, #404]	; (80065d0 <acis_gui_task+0x5364>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	f240 331b 	movw	r3, #795	; 0x31b
 8006442:	fb03 f202 	mul.w	r2, r3, r2
 8006446:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	2104      	movs	r1, #4
 8006452:	4618      	mov	r0, r3
 8006454:	f7fa fe0c 	bl	8001070 <acis_apply_parameter>
            }
          }
          select_timeout = now;
 8006458:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800645c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_LEFT = 0;
 8006460:	4b5c      	ldr	r3, [pc, #368]	; (80065d4 <acis_gui_task+0x5368>)
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]

        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8006466:	4b5c      	ldr	r3, [pc, #368]	; (80065d8 <acis_gui_task+0x536c>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <acis_gui_task+0x521c>
 8006470:	4b5a      	ldr	r3, [pc, #360]	; (80065dc <acis_gui_task+0x5370>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 81b9 	beq.w	80067ee <acis_gui_task+0x5582>
 800647c:	4b58      	ldr	r3, [pc, #352]	; (80065e0 <acis_gui_task+0x5374>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006484:	f240 81b3 	bls.w	80067ee <acis_gui_task+0x5582>
        {
          display_timeout = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 40;
 800648e:	4b54      	ldr	r3, [pc, #336]	; (80065e0 <acis_gui_task+0x5374>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d904      	bls.n	80064a0 <acis_gui_task+0x5234>
 8006496:	4b52      	ldr	r3, [pc, #328]	; (80065e0 <acis_gui_task+0x5374>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3b28      	subs	r3, #40	; 0x28
 800649c:	4a50      	ldr	r2, [pc, #320]	; (80065e0 <acis_gui_task+0x5374>)
 800649e:	6013      	str	r3, [r2, #0]
          if(StatusSynchronized && tablesetupitem->step)
 80064a0:	4b50      	ldr	r3, [pc, #320]	; (80065e4 <acis_gui_task+0x5378>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 819a 	beq.w	80067e0 <acis_gui_task+0x5574>
 80064ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80064b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80064b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80064b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064bc:	f000 8190 	beq.w	80067e0 <acis_gui_task+0x5574>
          {
            if(tablesetupitem->valuedep)
 80064c0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 808e 	beq.w	80065e8 <acis_gui_task+0x537c>
            {
              if(tablesetupitem->valuef)
 80064cc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8184 	beq.w	80067e0 <acis_gui_task+0x5574>
              {
                if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) + tablesetupitem->step > tablesetupitem->max)
 80064d8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4619      	mov	r1, r3
 80064e0:	4b3b      	ldr	r3, [pc, #236]	; (80065d0 <acis_gui_task+0x5364>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	f240 331b 	movw	r3, #795	; 0x31b
 80064ea:	fb03 f202 	mul.w	r2, r3, r2
 80064ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	ed93 7a00 	vldr	s14, [r3]
 80064fc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006500:	edd3 7a06 	vldr	s15, [r3, #24]
 8006504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006508:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800651a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651e:	dd19      	ble.n	8006554 <acis_gui_task+0x52e8>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->max;
 8006520:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006524:	6958      	ldr	r0, [r3, #20]
 8006526:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4619      	mov	r1, r3
 800652e:	4b28      	ldr	r3, [pc, #160]	; (80065d0 <acis_gui_task+0x5364>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	f240 331b 	movw	r3, #795	; 0x31b
 8006538:	fb03 f202 	mul.w	r2, r3, r2
 800653c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	ee07 0a90 	vmov	s15, r0
 800654a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800654e:	edc3 7a00 	vstr	s15, [r3]
 8006552:	e027      	b.n	80065a4 <acis_gui_task+0x5338>
                else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) += tablesetupitem->step;
 8006554:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	4618      	mov	r0, r3
 800655c:	4b1c      	ldr	r3, [pc, #112]	; (80065d0 <acis_gui_task+0x5364>)
 800655e:	6819      	ldr	r1, [r3, #0]
 8006560:	460a      	mov	r2, r1
 8006562:	f240 331b 	movw	r3, #795	; 0x31b
 8006566:	fb03 f202 	mul.w	r2, r3, r2
 800656a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4403      	add	r3, r0
 8006574:	ed93 7a00 	vldr	s14, [r3]
 8006578:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800657c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006580:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	4618      	mov	r0, r3
 8006588:	460a      	mov	r2, r1
 800658a:	f240 331b 	movw	r3, #795	; 0x31b
 800658e:	fb03 f202 	mul.w	r2, r3, r2
 8006592:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4403      	add	r3, r0
 800659c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065a0:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 80065a4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	4619      	mov	r1, r3
 80065ac:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <acis_gui_task+0x5364>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	461a      	mov	r2, r3
 80065b2:	f240 331b 	movw	r3, #795	; 0x31b
 80065b6:	fb03 f202 	mul.w	r2, r3, r2
 80065ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	2104      	movs	r1, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fa fd52 	bl	8001070 <acis_apply_parameter>
 80065cc:	e108      	b.n	80067e0 <acis_gui_task+0x5574>
 80065ce:	bf00      	nop
 80065d0:	200159ac 	.word	0x200159ac
 80065d4:	200159e4 	.word	0x200159e4
 80065d8:	200159e5 	.word	0x200159e5
 80065dc:	200159c5 	.word	0x200159c5
 80065e0:	200159d0 	.word	0x200159d0
 80065e4:	2000697e 	.word	0x2000697e
              }
            }
            else
            {
              if(tablesetupitem->valuef)
 80065e8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80f6 	beq.w	80067e0 <acis_gui_task+0x5574>
              {
                if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) + tablesetupitem->step > tablesetupitem->max)
 80065f4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	4619      	mov	r1, r3
 80065fc:	4bd2      	ldr	r3, [pc, #840]	; (8006948 <acis_gui_task+0x56dc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	f240 331b 	movw	r3, #795	; 0x31b
 8006606:	fb03 f202 	mul.w	r2, r3, r2
 800660a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	ed93 7a00 	vldr	s14, [r3]
 8006618:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800661c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006624:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	dd19      	ble.n	8006670 <acis_gui_task+0x5404>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->max;
 800663c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006640:	6958      	ldr	r0, [r3, #20]
 8006642:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4619      	mov	r1, r3
 800664a:	4bbf      	ldr	r3, [pc, #764]	; (8006948 <acis_gui_task+0x56dc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	f240 331b 	movw	r3, #795	; 0x31b
 8006654:	fb03 f202 	mul.w	r2, r3, r2
 8006658:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	ee07 0a90 	vmov	s15, r0
 8006666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800666a:	edc3 7a00 	vstr	s15, [r3]
 800666e:	e027      	b.n	80066c0 <acis_gui_task+0x5454>
                else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) += tablesetupitem->step;
 8006670:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4618      	mov	r0, r3
 8006678:	4bb3      	ldr	r3, [pc, #716]	; (8006948 <acis_gui_task+0x56dc>)
 800667a:	6819      	ldr	r1, [r3, #0]
 800667c:	460a      	mov	r2, r1
 800667e:	f240 331b 	movw	r3, #795	; 0x31b
 8006682:	fb03 f202 	mul.w	r2, r3, r2
 8006686:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4403      	add	r3, r0
 8006690:	ed93 7a00 	vldr	s14, [r3]
 8006694:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006698:	edd3 7a06 	vldr	s15, [r3, #24]
 800669c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	4618      	mov	r0, r3
 80066a4:	460a      	mov	r2, r1
 80066a6:	f240 331b 	movw	r3, #795	; 0x31b
 80066aa:	fb03 f202 	mul.w	r2, r3, r2
 80066ae:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4403      	add	r3, r0
 80066b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066bc:	edc3 7a00 	vstr	s15, [r3]

                if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 < TableOffset(tablesetupitem->valuei, int32_t)-1 &&
 80066c0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	461a      	mov	r2, r3
 80066c8:	4b9f      	ldr	r3, [pc, #636]	; (8006948 <acis_gui_task+0x56dc>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4619      	mov	r1, r3
 80066ce:	f640 436c 	movw	r3, #3180	; 0xc6c
 80066d2:	fb03 f301 	mul.w	r3, r3, r1
 80066d6:	4413      	add	r3, r2
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	dd6c      	ble.n	80067b8 <acis_gui_task+0x554c>
 80066de:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b98      	ldr	r3, [pc, #608]	; (8006948 <acis_gui_task+0x56dc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4619      	mov	r1, r3
 80066ec:	f640 436c 	movw	r3, #3180	; 0xc6c
 80066f0:	fb03 f301 	mul.w	r3, r3, r1
 80066f4:	4413      	add	r3, r2
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80066fe:	429a      	cmp	r2, r3
 8006700:	da5a      	bge.n	80067b8 <acis_gui_task+0x554c>
                    ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) + tablesetupitem->step >= ((&TableOffset(tablesetupitem->valuef, float))[menuitem2+1]))
 8006702:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4619      	mov	r1, r3
 800670a:	4b8f      	ldr	r3, [pc, #572]	; (8006948 <acis_gui_task+0x56dc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f240 331b 	movw	r3, #795	; 0x31b
 8006714:	fb03 f202 	mul.w	r2, r3, r2
 8006718:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	ed93 7a00 	vldr	s14, [r3]
 8006726:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800672a:	edd3 7a06 	vldr	s15, [r3, #24]
 800672e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006732:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4619      	mov	r1, r3
 800673a:	4b83      	ldr	r3, [pc, #524]	; (8006948 <acis_gui_task+0x56dc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f240 331b 	movw	r3, #795	; 0x31b
 8006744:	fb03 f202 	mul.w	r2, r3, r2
 8006748:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	3304      	adds	r3, #4
 8006754:	edd3 7a00 	vldr	s15, [r3]
                if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 < TableOffset(tablesetupitem->valuei, int32_t)-1 &&
 8006758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800675c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006760:	db2a      	blt.n	80067b8 <acis_gui_task+0x554c>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = ((&TableOffset(tablesetupitem->valuef, float))[menuitem2+1]) - tablesetupitem->step;
 8006762:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4619      	mov	r1, r3
 800676a:	4b77      	ldr	r3, [pc, #476]	; (8006948 <acis_gui_task+0x56dc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f240 331b 	movw	r3, #795	; 0x31b
 8006774:	fb03 f202 	mul.w	r2, r3, r2
 8006778:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	3304      	adds	r3, #4
 8006784:	ed93 7a00 	vldr	s14, [r3]
 8006788:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800678c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006790:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	4619      	mov	r1, r3
 8006798:	4b6b      	ldr	r3, [pc, #428]	; (8006948 <acis_gui_task+0x56dc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	f240 331b 	movw	r3, #795	; 0x31b
 80067a2:	fb03 f202 	mul.w	r2, r3, r2
 80067a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067b4:	edc3 7a00 	vstr	s15, [r3]

                acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 80067b8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	4619      	mov	r1, r3
 80067c0:	4b61      	ldr	r3, [pc, #388]	; (8006948 <acis_gui_task+0x56dc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	f240 331b 	movw	r3, #795	; 0x31b
 80067ca:	fb03 f202 	mul.w	r2, r3, r2
 80067ce:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	2104      	movs	r1, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fa fc48 	bl	8001070 <acis_apply_parameter>
              }
            }
          }
          select_timeout = now;
 80067e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80067e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_RIGHT = 0;
 80067e8:	4b58      	ldr	r3, [pc, #352]	; (800694c <acis_gui_task+0x56e0>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]

        }

        if(BUT_DOWN)
 80067ee:	4b58      	ldr	r3, [pc, #352]	; (8006950 <acis_gui_task+0x56e4>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00e      	beq.n	8006816 <acis_gui_task+0x55aa>
        {
          display_timeout = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          menuitem2++;
 80067fe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006802:	3301      	adds	r3, #1
 8006804:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
          select_timeout = now;
 8006808:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800680c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_DOWN = 0;
 8006810:	4b4f      	ldr	r3, [pc, #316]	; (8006950 <acis_gui_task+0x56e4>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8006816:	4b4f      	ldr	r3, [pc, #316]	; (8006954 <acis_gui_task+0x56e8>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <acis_gui_task+0x55d2>
        {
          display_timeout = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          menuitem2--;
 8006826:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800682a:	3b01      	subs	r3, #1
 800682c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
          select_timeout = now;
 8006830:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006834:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_UP = 0;
 8006838:	4b46      	ldr	r3, [pc, #280]	; (8006954 <acis_gui_task+0x56e8>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
        }

        if(menuitem2 < 0) menuitem2 = 0, display_timeout = 0;
 800683e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8006842:	2b00      	cmp	r3, #0
 8006844:	da05      	bge.n	8006852 <acis_gui_task+0x55e6>
 8006846:	2300      	movs	r3, #0
 8006848:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800684c:	2300      	movs	r3, #0
 800684e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
        if(menuitem2 >= *tablesetupitem->valuei) menuitem2 = *tablesetupitem->valuei - 1, display_timeout = 0;;
 8006852:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800685e:	429a      	cmp	r2, r3
 8006860:	db09      	blt.n	8006876 <acis_gui_task+0x560a>
 8006862:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3b01      	subs	r3, #1
 800686c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006870:	2300      	movs	r3, #0
 8006872:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
        menufirst2 = menuitem2;
 8006876:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800687a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

        break;
 800687e:	f001 bb98 	b.w	8007fb2 <acis_gui_task+0x6d46>
      }
      case MenuTableSetupIgnitionsSelect :
      {
        table = &TableOffset(tablesetupitem->valuei, sAcisIgnTable);
 8006882:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	461a      	mov	r2, r3
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <acis_gui_task+0x56dc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	f640 436c 	movw	r3, #3180	; 0xc6c
 8006894:	fb03 f301 	mul.w	r3, r3, r1
 8006898:	4413      	add	r3, r2
 800689a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
        if(DelayDiff(now, display_timeout) > 30000)
 800689e:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 80068a2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80068a6:	f003 f9d9 	bl	8009c5c <DelayDiff>
 80068aa:	4602      	mov	r2, r0
 80068ac:	f247 5330 	movw	r3, #30000	; 0x7530
 80068b0:	429a      	cmp	r2, r3
 80068b2:	f240 8358 	bls.w	8006f66 <acis_gui_task+0x5cfa>
        {
          if(DelayDiff(now, value_timeout) > 150000)
 80068b6:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 80068ba:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80068be:	f003 f9cd 	bl	8009c5c <DelayDiff>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b24      	ldr	r3, [pc, #144]	; (8006958 <acis_gui_task+0x56ec>)
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d916      	bls.n	80068f8 <acis_gui_task+0x568c>
          {
            value_timeout = now;
 80068ca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80068ce:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            rpm = StatusRPM;
 80068d2:	4b22      	ldr	r3, [pc, #136]	; (800695c <acis_gui_task+0x56f0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            pres = StatusPressure;
 80068da:	4b21      	ldr	r3, [pc, #132]	; (8006960 <acis_gui_task+0x56f4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            ign = StatusIgnition-table->octane_corrector;
 80068e2:	4b20      	ldr	r3, [pc, #128]	; (8006964 <acis_gui_task+0x56f8>)
 80068e4:	ed93 7a00 	vldr	s14, [r3]
 80068e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80068ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80068f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068f4:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
          }
          lcd_clear();
 80068f8:	f003 fae0 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80068fc:	2301      	movs	r3, #1
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2340      	movs	r3, #64	; 0x40
 8006902:	2280      	movs	r2, #128	; 0x80
 8006904:	2100      	movs	r1, #0
 8006906:	2000      	movs	r0, #0
 8006908:	f003 fbc3 	bl	800a092 <lcd_rect>
          font_setFont(&rre_5x8);
 800690c:	4816      	ldr	r0, [pc, #88]	; (8006968 <acis_gui_task+0x56fc>)
 800690e:	f00a ffb5 	bl	801187c <font_setFont>
          font_printf(2,2,"Igns.%dx%d", table->pressures_count, table->rotates_count);
 8006912:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006916:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800691a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800691e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4613      	mov	r3, r2
 8006926:	4a11      	ldr	r2, [pc, #68]	; (800696c <acis_gui_task+0x5700>)
 8006928:	2102      	movs	r1, #2
 800692a:	2002      	movs	r0, #2
 800692c:	f00c f9c8 	bl	8012cc0 <font_printf>
          lcd_rect(0,11,128,1,1);
 8006930:	2301      	movs	r3, #1
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2301      	movs	r3, #1
 8006936:	2280      	movs	r2, #128	; 0x80
 8006938:	210b      	movs	r1, #11
 800693a:	2000      	movs	r0, #0
 800693c:	f003 fba9 	bl	800a092 <lcd_rect>

          for(int i = 0; i < 2; i++)
 8006940:	2300      	movs	r3, #0
 8006942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006946:	e09e      	b.n	8006a86 <acis_gui_task+0x581a>
 8006948:	200159ac 	.word	0x200159ac
 800694c:	200159e5 	.word	0x200159e5
 8006950:	200159e7 	.word	0x200159e7
 8006954:	200159e6 	.word	0x200159e6
 8006958:	000249f0 	.word	0x000249f0
 800695c:	20006960 	.word	0x20006960
 8006960:	20006968 	.word	0x20006968
 8006964:	2000696c 	.word	0x2000696c
 8006968:	20002cd0 	.word	0x20002cd0
 800696c:	080171cc 	.word	0x080171cc
          {
            menuselected = menufirst3 + i;
 8006970:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8006974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006978:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 800697c:	440a      	add	r2, r1
 800697e:	601a      	str	r2, [r3, #0]
            if(menuselected < table->pressures_count)
 8006980:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006988:	461a      	mov	r2, r3
 800698a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4293      	cmp	r3, r2
 8006992:	d273      	bcs.n	8006a7c <acis_gui_task+0x5810>
            {
              if(menuitem3 != menuselected)
 8006994:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006998:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d01f      	beq.n	80069e2 <acis_gui_task+0x5776>
              {
                font_printf(3,14 + font_getHeight()*i,"Pres.%04.0f", table->pressures[menuselected]);
 80069a2:	f00a ff11 	bl	80117c8 <font_getHeight>
 80069a6:	4602      	mov	r2, r0
 80069a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ac:	fb03 f302 	mul.w	r3, r3, r2
 80069b0:	f103 050e 	add.w	r5, r3, #14
 80069b4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80069b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3338      	adds	r3, #56	; 0x38
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	3304      	adds	r3, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7f9 fde5 	bl	8000598 <__aeabi_f2d>
 80069ce:	4603      	mov	r3, r0
 80069d0:	460c      	mov	r4, r1
 80069d2:	e9cd 3400 	strd	r3, r4, [sp]
 80069d6:	4a9e      	ldr	r2, [pc, #632]	; (8006c50 <acis_gui_task+0x59e4>)
 80069d8:	4629      	mov	r1, r5
 80069da:	2003      	movs	r0, #3
 80069dc:	f00c f970 	bl	8012cc0 <font_printf>
 80069e0:	e04c      	b.n	8006a7c <acis_gui_task+0x5810>
              }
              else if(menuitem3 == menuselected && DelayDiff(now, select_timeout) < 500000)
 80069e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80069e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d137      	bne.n	8006a60 <acis_gui_task+0x57f4>
 80069f0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80069f4:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80069f8:	f003 f930 	bl	8009c5c <DelayDiff>
 80069fc:	4602      	mov	r2, r0
 80069fe:	4b95      	ldr	r3, [pc, #596]	; (8006c54 <acis_gui_task+0x59e8>)
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d82d      	bhi.n	8006a60 <acis_gui_task+0x57f4>
              {
                font_printf(-125,14 + font_getHeight()*i,"<");
 8006a04:	f00a fee0 	bl	80117c8 <font_getHeight>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0e:	fb03 f302 	mul.w	r3, r3, r2
 8006a12:	330e      	adds	r3, #14
 8006a14:	4a90      	ldr	r2, [pc, #576]	; (8006c58 <acis_gui_task+0x59ec>)
 8006a16:	4619      	mov	r1, r3
 8006a18:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8006a1c:	f00c f950 	bl	8012cc0 <font_printf>
                font_printf(3,14 + font_getHeight()*i,"Pres.%04.0f", table->pressures[menuselected]);
 8006a20:	f00a fed2 	bl	80117c8 <font_getHeight>
 8006a24:	4602      	mov	r2, r0
 8006a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2a:	fb03 f302 	mul.w	r3, r3, r2
 8006a2e:	f103 050e 	add.w	r5, r3, #14
 8006a32:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8006a36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3338      	adds	r3, #56	; 0x38
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	3304      	adds	r3, #4
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7f9 fda6 	bl	8000598 <__aeabi_f2d>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	e9cd 3400 	strd	r3, r4, [sp]
 8006a54:	4a7e      	ldr	r2, [pc, #504]	; (8006c50 <acis_gui_task+0x59e4>)
 8006a56:	4629      	mov	r1, r5
 8006a58:	2003      	movs	r0, #3
 8006a5a:	f00c f931 	bl	8012cc0 <font_printf>
 8006a5e:	e00d      	b.n	8006a7c <acis_gui_task+0x5810>
              }
              else if(DelayDiff(now, select_timeout) > 800000)
 8006a60:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8006a64:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8006a68:	f003 f8f8 	bl	8009c5c <DelayDiff>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	4b7b      	ldr	r3, [pc, #492]	; (8006c5c <acis_gui_task+0x59f0>)
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d903      	bls.n	8006a7c <acis_gui_task+0x5810>
                select_timeout = now;
 8006a74:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006a78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          for(int i = 0; i < 2; i++)
 8006a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a80:	3301      	adds	r3, #1
 8006a82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	f77f af70 	ble.w	8006970 <acis_gui_task+0x5704>

            }
          }

          lcd_rect(1,24,126,1,1);
 8006a90:	2301      	movs	r3, #1
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2301      	movs	r3, #1
 8006a96:	227e      	movs	r2, #126	; 0x7e
 8006a98:	2118      	movs	r1, #24
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	f003 faf9 	bl	800a092 <lcd_rect>
          lcd_rect_solid(1,25,126,font_getHeight(),0);
 8006aa0:	f00a fe92 	bl	80117c8 <font_getHeight>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	227e      	movs	r2, #126	; 0x7e
 8006aae:	2119      	movs	r1, #25
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	f003 fa93 	bl	8009fdc <lcd_rect_solid>

          int cnt = table->rotates_count;
 8006ab6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006aba:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8006abe:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8006ac2:	601a      	str	r2, [r3, #0]
          float x = -1.0f ,y = -1.0f , prevx = -1.0f , prevy = -1.0f ;
 8006ac4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006ac8:	4a65      	ldr	r2, [pc, #404]	; (8006c60 <acis_gui_task+0x59f4>)
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ad0:	4a63      	ldr	r2, [pc, #396]	; (8006c60 <acis_gui_task+0x59f4>)
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	4b62      	ldr	r3, [pc, #392]	; (8006c60 <acis_gui_task+0x59f4>)
 8006ad6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ada:	4b61      	ldr	r3, [pc, #388]	; (8006c60 <acis_gui_task+0x59f4>)
 8006adc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          float max = -INFINITY;
 8006ae0:	4b60      	ldr	r3, [pc, #384]	; (8006c64 <acis_gui_task+0x59f8>)
 8006ae2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          float min = 0;
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
          float depmin = INFINITY;
 8006aee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006af2:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8006af6:	601a      	str	r2, [r3, #0]
          float depmax = -INFINITY;
 8006af8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006afc:	4a59      	ldr	r2, [pc, #356]	; (8006c64 <acis_gui_task+0x59f8>)
 8006afe:	601a      	str	r2, [r3, #0]
          float value, dep;
          float cx,cy;
          for(int j = 0; j < table->pressures_count; j++)
 8006b00:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	e04e      	b.n	8006ba8 <acis_gui_task+0x593c>
          {
            for(int i = 0; i < cnt; i++)
 8006b0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e03a      	b.n	8006b8a <acis_gui_task+0x591e>
            {
              value = table->ignitions[j][i];
 8006b14:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006b18:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8006b1c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	336a      	adds	r3, #106	; 0x6a
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4403      	add	r3, r0
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	600b      	str	r3, [r1, #0]
              if(value > max)
 8006b3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b40:	ed93 7a00 	vldr	s14, [r3]
 8006b44:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8006b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b50:	dd04      	ble.n	8006b5c <acis_gui_task+0x58f0>
                max = value;
 8006b52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
              if(value < min)
 8006b5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b60:	ed93 7a00 	vldr	s14, [r3]
 8006b64:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8006b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b70:	d504      	bpl.n	8006b7c <acis_gui_task+0x5910>
                min = value;
 8006b72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            for(int i = 0; i < cnt; i++)
 8006b7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006b80:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	3201      	adds	r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8006b8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	dbbc      	blt.n	8006b14 <acis_gui_task+0x58a8>
          for(int j = 0; j < table->pressures_count; j++)
 8006b9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006b9e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	3201      	adds	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bb0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	dba7      	blt.n	8006b0a <acis_gui_task+0x589e>
            }
          }

          for(int i = 0; i < cnt; i++)
 8006bba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e038      	b.n	8006c36 <acis_gui_task+0x59ca>
          {
            dep = table->rotates[i];
 8006bc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006bc8:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8006bcc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	3252      	adds	r2, #82	; 0x52
 8006bd4:	0092      	lsls	r2, r2, #2
 8006bd6:	440a      	add	r2, r1
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	601a      	str	r2, [r3, #0]
            if(dep > depmax)
 8006bdc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006be0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006be4:	ed92 7a00 	vldr	s14, [r2]
 8006be8:	edd3 7a00 	vldr	s15, [r3]
 8006bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	dd05      	ble.n	8006c02 <acis_gui_task+0x5996>
              depmax = dep;
 8006bf6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006bfa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006bfe:	6812      	ldr	r2, [r2, #0]
 8006c00:	601a      	str	r2, [r3, #0]
            if(dep < depmin)
 8006c02:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006c06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c0a:	ed92 7a00 	vldr	s14, [r2]
 8006c0e:	edd3 7a00 	vldr	s15, [r3]
 8006c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1a:	d505      	bpl.n	8006c28 <acis_gui_task+0x59bc>
              depmin = dep;
 8006c1c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006c20:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	601a      	str	r2, [r3, #0]
          for(int i = 0; i < cnt; i++)
 8006c28:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006c2c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	3201      	adds	r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8006c3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	dbbe      	blt.n	8006bc4 <acis_gui_task+0x5958>
          }
          for(int i = 0; i < cnt; i++)
 8006c46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e0ce      	b.n	8006dee <acis_gui_task+0x5b82>
 8006c50:	080171d8 	.word	0x080171d8
 8006c54:	0007a11f 	.word	0x0007a11f
 8006c58:	08017194 	.word	0x08017194
 8006c5c:	000c3500 	.word	0x000c3500
 8006c60:	bf800000 	.word	0xbf800000
 8006c64:	ff800000 	.word	0xff800000
 8006c68:	42fc0000 	.word	0x42fc0000
 8006c6c:	42140000 	.word	0x42140000
 8006c70:	427c0000 	.word	0x427c0000
          {
            dep = table->rotates[i];
 8006c74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006c78:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8006c7c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	3252      	adds	r2, #82	; 0x52
 8006c84:	0092      	lsls	r2, r2, #2
 8006c86:	440a      	add	r2, r1
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	601a      	str	r2, [r3, #0]
            value = table->ignitions[menuitem3][i];
 8006c8c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006c90:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8006c94:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8006c98:	4613      	mov	r3, r2
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	336a      	adds	r3, #106	; 0x6a
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4403      	add	r3, r0
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	600b      	str	r3, [r1, #0]
            //x = 126.0f * (dep - depmin) / (depmax-depmin) + 1.0f;
            x = (126.0f * log10f(1.0f + (dep - depmin) / (depmax-depmin) * 9.0f)) + 1.0f;
 8006cb2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006cb6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006cba:	ed92 7a00 	vldr	s14, [r2]
 8006cbe:	edd3 7a00 	vldr	s15, [r3]
 8006cc2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006cc6:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006cca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006cce:	ed92 7a00 	vldr	s14, [r2]
 8006cd2:	edd3 7a00 	vldr	s15, [r3]
 8006cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cde:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8006ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cee:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf2:	f00f fe5f 	bl	80169b4 <log10f>
 8006cf6:	eeb0 7a40 	vmov.f32	s14, s0
 8006cfa:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 8006c68 <acis_gui_task+0x59fc>
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d0e:	edc3 7a00 	vstr	s15, [r3]
            y = 63 - (value - min) / (max-min) * 37;
 8006d12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006d16:	ed93 7a00 	vldr	s14, [r3]
 8006d1a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8006d1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006d22:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 8006d26:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8006d2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d32:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8006c6c <acis_gui_task+0x5a00>
 8006d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d3e:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 8006c70 <acis_gui_task+0x5a04>
 8006d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d46:	edc3 7a00 	vstr	s15, [r3]

            if(prevx == -1.0f && prevy == -1.0f)
 8006d4a:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8006d4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006d52:	eef4 7a47 	vcmp.f32	s15, s14
 8006d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5a:	d112      	bne.n	8006d82 <acis_gui_task+0x5b16>
 8006d5c:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8006d60:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006d64:	eef4 7a47 	vcmp.f32	s15, s14
 8006d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6c:	d109      	bne.n	8006d82 <acis_gui_task+0x5b16>
              prevx = x, prevy = y;
 8006d6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

            lcd_line(prevx, prevy, x, y, 1);
 8006d82:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8006d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8a:	ee17 3a90 	vmov	r3, s15
 8006d8e:	b298      	uxth	r0, r3
 8006d90:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8006d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d98:	ee17 3a90 	vmov	r3, s15
 8006d9c:	b299      	uxth	r1, r3
 8006d9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006da2:	edd3 7a00 	vldr	s15, [r3]
 8006da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006daa:	ee17 3a90 	vmov	r3, s15
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006db4:	edd3 7a00 	vldr	s15, [r3]
 8006db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dbc:	ee17 3a90 	vmov	r3, s15
 8006dc0:	b29c      	uxth	r4, r3
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	4623      	mov	r3, r4
 8006dc8:	f003 fa0c 	bl	800a1e4 <lcd_line>

            prevx = x;
 8006dcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
            prevy = y;
 8006dd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          for(int i = 0; i < cnt; i++)
 8006de0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006de4:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8006de8:	6812      	ldr	r2, [r2, #0]
 8006dea:	3201      	adds	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8006df2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	f6ff af3a 	blt.w	8006c74 <acis_gui_task+0x5a08>
          }

          cx = (126.0f * log10f(1.0f + (StatusRPM - depmin) / (depmax-depmin) * 9.0f)) + 1.0f;
 8006e00:	4bc8      	ldr	r3, [pc, #800]	; (8007124 <acis_gui_task+0x5eb8>)
 8006e02:	ed93 7a00 	vldr	s14, [r3]
 8006e06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006e0a:	edd3 7a00 	vldr	s15, [r3]
 8006e0e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006e12:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006e16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006e1a:	ed92 7a00 	vldr	s14, [r2]
 8006e1e:	edd3 7a00 	vldr	s15, [r3]
 8006e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e2a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8006e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e3e:	f00f fdb9 	bl	80169b4 <log10f>
 8006e42:	eeb0 7a40 	vmov.f32	s14, s0
 8006e46:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8007128 <acis_gui_task+0x5ebc>
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e5a:	edc3 7a00 	vstr	s15, [r3]
          cy = 63 - (StatusIgnition - table->octane_corrector - min) / (max-min) * 37;
 8006e5e:	4bb3      	ldr	r3, [pc, #716]	; (800712c <acis_gui_task+0x5ec0>)
 8006e60:	ed93 7a00 	vldr	s14, [r3]
 8006e64:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006e68:	edd3 7a06 	vldr	s15, [r3, #24]
 8006e6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e70:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8006e74:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006e78:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 8006e7c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8006e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e88:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8007130 <acis_gui_task+0x5ec4>
 8006e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e94:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8007134 <acis_gui_task+0x5ec8>
 8006e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e9c:	edc3 7a00 	vstr	s15, [r3]

          if(cy > 22 && cx > 0 && cx < 128)
 8006ea0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006ea4:	edd3 7a00 	vldr	s15, [r3]
 8006ea8:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8006eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb4:	dd29      	ble.n	8006f0a <acis_gui_task+0x5c9e>
 8006eb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006eba:	edd3 7a00 	vldr	s15, [r3]
 8006ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec6:	dd20      	ble.n	8006f0a <acis_gui_task+0x5c9e>
 8006ec8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006ecc:	edd3 7a00 	vldr	s15, [r3]
 8006ed0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8007138 <acis_gui_task+0x5ecc>
 8006ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006edc:	d515      	bpl.n	8006f0a <acis_gui_task+0x5c9e>
            lcd_circle5x5fill(cx,cy);
 8006ede:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006ee2:	edd3 7a00 	vldr	s15, [r3]
 8006ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eea:	ee17 3a90 	vmov	r3, s15
 8006eee:	b21a      	sxth	r2, r3
 8006ef0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006ef4:	edd3 7a00 	vldr	s15, [r3]
 8006ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006efc:	ee17 3a90 	vmov	r3, s15
 8006f00:	b21b      	sxth	r3, r3
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f003 fd47 	bl	800a998 <lcd_circle5x5fill>

          font_printf(65,2,"%03.0f", rpm);
 8006f0a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8006f0e:	f7f9 fb43 	bl	8000598 <__aeabi_f2d>
 8006f12:	4603      	mov	r3, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	e9cd 3400 	strd	r3, r4, [sp]
 8006f1a:	4a88      	ldr	r2, [pc, #544]	; (800713c <acis_gui_task+0x5ed0>)
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	2041      	movs	r0, #65	; 0x41
 8006f20:	f00b fece 	bl	8012cc0 <font_printf>
          font_printf(93,2,"%04.0f", pres);
 8006f24:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8006f28:	f7f9 fb36 	bl	8000598 <__aeabi_f2d>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	e9cd 3400 	strd	r3, r4, [sp]
 8006f34:	4a82      	ldr	r2, [pc, #520]	; (8007140 <acis_gui_task+0x5ed4>)
 8006f36:	2102      	movs	r1, #2
 8006f38:	205d      	movs	r0, #93	; 0x5d
 8006f3a:	f00b fec1 	bl	8012cc0 <font_printf>
          font_printf(94,63 - font_getHeight(),"%5.1fd", ign);
 8006f3e:	f00a fc43 	bl	80117c8 <font_getHeight>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f1c3 053f 	rsb	r5, r3, #63	; 0x3f
 8006f48:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 8006f4c:	f7f9 fb24 	bl	8000598 <__aeabi_f2d>
 8006f50:	4603      	mov	r3, r0
 8006f52:	460c      	mov	r4, r1
 8006f54:	e9cd 3400 	strd	r3, r4, [sp]
 8006f58:	4a7a      	ldr	r2, [pc, #488]	; (8007144 <acis_gui_task+0x5ed8>)
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	205e      	movs	r0, #94	; 0x5e
 8006f5e:	f00b feaf 	bl	8012cc0 <font_printf>


          lcd_update();
 8006f62:	f002 ff1f 	bl	8009da4 <lcd_update>
        }

        if(BUT_CANCEL)
 8006f66:	4b78      	ldr	r3, [pc, #480]	; (8007148 <acis_gui_task+0x5edc>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d017      	beq.n	8006fa0 <acis_gui_task+0x5d34>
        {
          display_timeout = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          eMenuItem = MenuTableSetup;
 8006f76:	4b75      	ldr	r3, [pc, #468]	; (800714c <acis_gui_task+0x5ee0>)
 8006f78:	2209      	movs	r2, #9
 8006f7a:	701a      	strb	r2, [r3, #0]
          BUT_UP = 0;
 8006f7c:	4b74      	ldr	r3, [pc, #464]	; (8007150 <acis_gui_task+0x5ee4>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8006f82:	4b74      	ldr	r3, [pc, #464]	; (8007154 <acis_gui_task+0x5ee8>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8006f88:	4b73      	ldr	r3, [pc, #460]	; (8007158 <acis_gui_task+0x5eec>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8006f8e:	4b73      	ldr	r3, [pc, #460]	; (800715c <acis_gui_task+0x5ef0>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8006f94:	4b6c      	ldr	r3, [pc, #432]	; (8007148 <acis_gui_task+0x5edc>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8006f9a:	4b71      	ldr	r3, [pc, #452]	; (8007160 <acis_gui_task+0x5ef4>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_ENTER)
 8006fa0:	4b6f      	ldr	r3, [pc, #444]	; (8007160 <acis_gui_task+0x5ef4>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01e      	beq.n	8006fe8 <acis_gui_task+0x5d7c>
        {
          display_timeout = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          eMenuItem = MenuTableSetupIgnitions;
 8006fb0:	4b66      	ldr	r3, [pc, #408]	; (800714c <acis_gui_task+0x5ee0>)
 8006fb2:	2213      	movs	r2, #19
 8006fb4:	701a      	strb	r2, [r3, #0]
          select_timeout = now;
 8006fb6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006fba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          value_timeout = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          BUT_UP = 0;
 8006fc4:	4b62      	ldr	r3, [pc, #392]	; (8007150 <acis_gui_task+0x5ee4>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8006fca:	4b62      	ldr	r3, [pc, #392]	; (8007154 <acis_gui_task+0x5ee8>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8006fd0:	4b61      	ldr	r3, [pc, #388]	; (8007158 <acis_gui_task+0x5eec>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8006fd6:	4b61      	ldr	r3, [pc, #388]	; (800715c <acis_gui_task+0x5ef0>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8006fdc:	4b5a      	ldr	r3, [pc, #360]	; (8007148 <acis_gui_task+0x5edc>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8006fe2:	4b5f      	ldr	r3, [pc, #380]	; (8007160 <acis_gui_task+0x5ef4>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_DOWN)
 8006fe8:	4b5a      	ldr	r3, [pc, #360]	; (8007154 <acis_gui_task+0x5ee8>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00e      	beq.n	8007010 <acis_gui_task+0x5da4>
        {
          display_timeout = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          menuitem3++;
 8006ff8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
          select_timeout = now;
 8007002:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007006:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_DOWN = 0;
 800700a:	4b52      	ldr	r3, [pc, #328]	; (8007154 <acis_gui_task+0x5ee8>)
 800700c:	2200      	movs	r2, #0
 800700e:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8007010:	4b4f      	ldr	r3, [pc, #316]	; (8007150 <acis_gui_task+0x5ee4>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00e      	beq.n	8007038 <acis_gui_task+0x5dcc>
        {
          display_timeout = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          menuitem3--;
 8007020:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007024:	3b01      	subs	r3, #1
 8007026:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
          select_timeout = now;
 800702a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800702e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_UP = 0;
 8007032:	4b47      	ldr	r3, [pc, #284]	; (8007150 <acis_gui_task+0x5ee4>)
 8007034:	2200      	movs	r2, #0
 8007036:	701a      	strb	r2, [r3, #0]
        }

        if(menuitem3 >= table->pressures_count) menuitem3 = table->pressures_count - 1, display_timeout = 0;
 8007038:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800703c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007040:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007044:	429a      	cmp	r2, r3
 8007046:	db09      	blt.n	800705c <acis_gui_task+0x5df0>
 8007048:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800704c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007050:	3b01      	subs	r3, #1
 8007052:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007056:	2300      	movs	r3, #0
 8007058:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
        if(menuitem3 < 0) menuitem3 = 0, display_timeout = 0;
 800705c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007060:	2b00      	cmp	r3, #0
 8007062:	da05      	bge.n	8007070 <acis_gui_task+0x5e04>
 8007064:	2300      	movs	r3, #0
 8007066:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800706a:	2300      	movs	r3, #0
 800706c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
        menufirst3 = menuitem3;
 8007070:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007074:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

        break;
 8007078:	f000 bf9b 	b.w	8007fb2 <acis_gui_task+0x6d46>
      }
      case MenuTableSetupIgnitions :
      {
        if(DelayDiff(now, display_timeout) > 30000)
 800707c:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8007080:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007084:	f002 fdea 	bl	8009c5c <DelayDiff>
 8007088:	4602      	mov	r2, r0
 800708a:	f247 5330 	movw	r3, #30000	; 0x7530
 800708e:	429a      	cmp	r2, r3
 8007090:	f240 844d 	bls.w	800792e <acis_gui_task+0x66c2>
        {
          if(DelayDiff(now, value_timeout) > 150000)
 8007094:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8007098:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800709c:	f002 fdde 	bl	8009c5c <DelayDiff>
 80070a0:	4602      	mov	r2, r0
 80070a2:	4b30      	ldr	r3, [pc, #192]	; (8007164 <acis_gui_task+0x5ef8>)
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d916      	bls.n	80070d6 <acis_gui_task+0x5e6a>
          {
            value_timeout = now;
 80070a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80070ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            rpm = StatusRPM;
 80070b0:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <acis_gui_task+0x5eb8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            pres = StatusPressure;
 80070b8:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <acis_gui_task+0x5efc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            ign = StatusIgnition - table->octane_corrector;
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <acis_gui_task+0x5ec0>)
 80070c2:	ed93 7a00 	vldr	s14, [r3]
 80070c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80070ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80070ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070d2:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
          }
          lcd_clear();
 80070d6:	f002 fef1 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80070da:	2301      	movs	r3, #1
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	2280      	movs	r2, #128	; 0x80
 80070e2:	2100      	movs	r1, #0
 80070e4:	2000      	movs	r0, #0
 80070e6:	f002 ffd4 	bl	800a092 <lcd_rect>
          font_setFont(&rre_5x8);
 80070ea:	4820      	ldr	r0, [pc, #128]	; (800716c <acis_gui_task+0x5f00>)
 80070ec:	f00a fbc6 	bl	801187c <font_setFont>
          font_printf(2,2,"Igns.%dx%d", menuitem3, table->rotates_count);
 80070f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80070f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <acis_gui_task+0x5f04>)
 8007100:	2102      	movs	r1, #2
 8007102:	2002      	movs	r0, #2
 8007104:	f00b fddc 	bl	8012cc0 <font_printf>
          lcd_rect(0,11,128,1,1);
 8007108:	2301      	movs	r3, #1
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	2301      	movs	r3, #1
 800710e:	2280      	movs	r2, #128	; 0x80
 8007110:	210b      	movs	r1, #11
 8007112:	2000      	movs	r0, #0
 8007114:	f002 ffbd 	bl	800a092 <lcd_rect>

          for(int i = 0; i < 2; i++)
 8007118:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e0d8      	b.n	80072d4 <acis_gui_task+0x6068>
 8007122:	bf00      	nop
 8007124:	20006960 	.word	0x20006960
 8007128:	42fc0000 	.word	0x42fc0000
 800712c:	2000696c 	.word	0x2000696c
 8007130:	42140000 	.word	0x42140000
 8007134:	427c0000 	.word	0x427c0000
 8007138:	43000000 	.word	0x43000000
 800713c:	0801708c 	.word	0x0801708c
 8007140:	0801709c 	.word	0x0801709c
 8007144:	080171e4 	.word	0x080171e4
 8007148:	200159e9 	.word	0x200159e9
 800714c:	2000695c 	.word	0x2000695c
 8007150:	200159e6 	.word	0x200159e6
 8007154:	200159e7 	.word	0x200159e7
 8007158:	200159e4 	.word	0x200159e4
 800715c:	200159e5 	.word	0x200159e5
 8007160:	200159e8 	.word	0x200159e8
 8007164:	000249f0 	.word	0x000249f0
 8007168:	20006968 	.word	0x20006968
 800716c:	20002cd0 	.word	0x20002cd0
 8007170:	080171cc 	.word	0x080171cc
          {
            menuselected = menufirst4 + i;
 8007174:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800717e:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8007182:	440a      	add	r2, r1
 8007184:	601a      	str	r2, [r3, #0]
            if(menuselected < table->rotates_count)
 8007186:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800718a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800718e:	461a      	mov	r2, r3
 8007190:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4293      	cmp	r3, r2
 8007198:	f080 8095 	bcs.w	80072c6 <acis_gui_task+0x605a>
            {
              font_printf(3,14 + font_getHeight()*i,"RPM %03.0f", table->rotates[menuselected]);
 800719c:	f00a fb14 	bl	80117c8 <font_getHeight>
 80071a0:	4602      	mov	r2, r0
 80071a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	fb03 f302 	mul.w	r3, r3, r2
 80071ac:	f103 050e 	add.w	r5, r3, #14
 80071b0:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80071b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3352      	adds	r3, #82	; 0x52
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7f9 f9e8 	bl	8000598 <__aeabi_f2d>
 80071c8:	4603      	mov	r3, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	e9cd 3400 	strd	r3, r4, [sp]
 80071d0:	4ab8      	ldr	r2, [pc, #736]	; (80074b4 <acis_gui_task+0x6248>)
 80071d2:	4629      	mov	r1, r5
 80071d4:	2003      	movs	r0, #3
 80071d6:	f00b fd73 	bl	8012cc0 <font_printf>
              if(menuitem4 != menuselected)
 80071da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80071de:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d027      	beq.n	8007238 <acis_gui_task+0x5fcc>
              {
                font_printf(-125,14 + font_getHeight()*i,"%.1f", table->ignitions[menuitem3][menuselected]);
 80071e8:	f00a faee 	bl	80117c8 <font_getHeight>
 80071ec:	4602      	mov	r2, r0
 80071ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	fb03 f302 	mul.w	r3, r3, r2
 80071f8:	f103 050e 	add.w	r5, r3, #14
 80071fc:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007200:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007204:	4613      	mov	r3, r2
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	4413      	add	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	4413      	add	r3, r2
 8007214:	336a      	adds	r3, #106	; 0x6a
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f7f9 f9bb 	bl	8000598 <__aeabi_f2d>
 8007222:	4603      	mov	r3, r0
 8007224:	460c      	mov	r4, r1
 8007226:	e9cd 3400 	strd	r3, r4, [sp]
 800722a:	4aa3      	ldr	r2, [pc, #652]	; (80074b8 <acis_gui_task+0x624c>)
 800722c:	4629      	mov	r1, r5
 800722e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8007232:	f00b fd45 	bl	8012cc0 <font_printf>
 8007236:	e046      	b.n	80072c6 <acis_gui_task+0x605a>
              }
              else if(menuitem4 == menuselected && DelayDiff(now, select_timeout) < 500000)
 8007238:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800723c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d131      	bne.n	80072aa <acis_gui_task+0x603e>
 8007246:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 800724a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800724e:	f002 fd05 	bl	8009c5c <DelayDiff>
 8007252:	4602      	mov	r2, r0
 8007254:	4b99      	ldr	r3, [pc, #612]	; (80074bc <acis_gui_task+0x6250>)
 8007256:	429a      	cmp	r2, r3
 8007258:	d827      	bhi.n	80072aa <acis_gui_task+0x603e>
              {
                font_printf(-125,14 + font_getHeight()*i,"> %.1f", table->ignitions[menuitem3][menuselected]);
 800725a:	f00a fab5 	bl	80117c8 <font_getHeight>
 800725e:	4602      	mov	r2, r0
 8007260:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	fb03 f302 	mul.w	r3, r3, r2
 800726a:	f103 050e 	add.w	r5, r3, #14
 800726e:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007272:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007276:	4613      	mov	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4413      	add	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	4413      	add	r3, r2
 8007286:	336a      	adds	r3, #106	; 0x6a
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7f9 f982 	bl	8000598 <__aeabi_f2d>
 8007294:	4603      	mov	r3, r0
 8007296:	460c      	mov	r4, r1
 8007298:	e9cd 3400 	strd	r3, r4, [sp]
 800729c:	4a88      	ldr	r2, [pc, #544]	; (80074c0 <acis_gui_task+0x6254>)
 800729e:	4629      	mov	r1, r5
 80072a0:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80072a4:	f00b fd0c 	bl	8012cc0 <font_printf>
 80072a8:	e00d      	b.n	80072c6 <acis_gui_task+0x605a>
              }
              else if(DelayDiff(now, select_timeout) > 800000)
 80072aa:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80072ae:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80072b2:	f002 fcd3 	bl	8009c5c <DelayDiff>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b82      	ldr	r3, [pc, #520]	; (80074c4 <acis_gui_task+0x6258>)
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d903      	bls.n	80072c6 <acis_gui_task+0x605a>
                select_timeout = now;
 80072be:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80072c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          for(int i = 0; i < 2; i++)
 80072c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80072ca:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	3201      	adds	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	f77f af4a 	ble.w	8007174 <acis_gui_task+0x5f08>

            }
          }

          lcd_rect(1,24,126,1,1);
 80072e0:	2301      	movs	r3, #1
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	2301      	movs	r3, #1
 80072e6:	227e      	movs	r2, #126	; 0x7e
 80072e8:	2118      	movs	r1, #24
 80072ea:	2001      	movs	r0, #1
 80072ec:	f002 fed1 	bl	800a092 <lcd_rect>
          lcd_rect_solid(1,25,126,font_getHeight(),0);
 80072f0:	f00a fa6a 	bl	80117c8 <font_getHeight>
 80072f4:	4602      	mov	r2, r0
 80072f6:	2300      	movs	r3, #0
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	4613      	mov	r3, r2
 80072fc:	227e      	movs	r2, #126	; 0x7e
 80072fe:	2119      	movs	r1, #25
 8007300:	2001      	movs	r0, #1
 8007302:	f002 fe6b 	bl	8009fdc <lcd_rect_solid>

          int cnt = table->rotates_count;
 8007306:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800730a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800730e:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8007312:	601a      	str	r2, [r3, #0]
          float x = -1.0f ,y = -1.0f , prevx = -1.0f , prevy = -1.0f ;
 8007314:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007318:	4a6b      	ldr	r2, [pc, #428]	; (80074c8 <acis_gui_task+0x625c>)
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007320:	4a69      	ldr	r2, [pc, #420]	; (80074c8 <acis_gui_task+0x625c>)
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007328:	4a67      	ldr	r2, [pc, #412]	; (80074c8 <acis_gui_task+0x625c>)
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007330:	4a65      	ldr	r2, [pc, #404]	; (80074c8 <acis_gui_task+0x625c>)
 8007332:	601a      	str	r2, [r3, #0]
          float max = -INFINITY;
 8007334:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007338:	4a64      	ldr	r2, [pc, #400]	; (80074cc <acis_gui_task+0x6260>)
 800733a:	601a      	str	r2, [r3, #0]
          float min = 0;
 800733c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007340:	f04f 0200 	mov.w	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
          float depmin = INFINITY;
 8007346:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800734a:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 800734e:	601a      	str	r2, [r3, #0]
          float depmax = -INFINITY;
 8007350:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007354:	4a5d      	ldr	r2, [pc, #372]	; (80074cc <acis_gui_task+0x6260>)
 8007356:	601a      	str	r2, [r3, #0]
          float value, dep;
          float cx,cy;
          for(int j = 0; j < table->pressures_count; j++)
 8007358:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e054      	b.n	800740c <acis_gui_task+0x61a0>
          {
            for(int i = 0; i < cnt; i++)
 8007362:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e040      	b.n	80073ee <acis_gui_task+0x6182>
            {
              value = table->ignitions[j][i];
 800736c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8007370:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 8007374:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	4413      	add	r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	4413      	add	r3, r2
 800738a:	336a      	adds	r3, #106	; 0x6a
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4403      	add	r3, r0
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	600b      	str	r3, [r1, #0]
              if(value > max)
 8007394:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007398:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800739c:	ed92 7a00 	vldr	s14, [r2]
 80073a0:	edd3 7a00 	vldr	s15, [r3]
 80073a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ac:	dd05      	ble.n	80073ba <acis_gui_task+0x614e>
                max = value;
 80073ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80073b2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	601a      	str	r2, [r3, #0]
              if(value < min)
 80073ba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80073be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80073c2:	ed92 7a00 	vldr	s14, [r2]
 80073c6:	edd3 7a00 	vldr	s15, [r3]
 80073ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	d505      	bpl.n	80073e0 <acis_gui_task+0x6174>
                min = value;
 80073d4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80073d8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	601a      	str	r2, [r3, #0]
            for(int i = 0; i < cnt; i++)
 80073e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80073e4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80073e8:	6812      	ldr	r2, [r2, #0]
 80073ea:	3201      	adds	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80073f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80073f6:	6812      	ldr	r2, [r2, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	dbb6      	blt.n	800736c <acis_gui_task+0x6100>
          for(int j = 0; j < table->pressures_count; j++)
 80073fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007402:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	3201      	adds	r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007414:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	dba1      	blt.n	8007362 <acis_gui_task+0x60f6>
            }
          }

          for(int i = 0; i < cnt; i++)
 800741e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e038      	b.n	800749a <acis_gui_task+0x622e>
          {
            dep = table->rotates[i];
 8007428:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800742c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007430:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	3252      	adds	r2, #82	; 0x52
 8007438:	0092      	lsls	r2, r2, #2
 800743a:	440a      	add	r2, r1
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	601a      	str	r2, [r3, #0]
            if(dep > depmax)
 8007440:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007444:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007448:	ed92 7a00 	vldr	s14, [r2]
 800744c:	edd3 7a00 	vldr	s15, [r3]
 8007450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007458:	dd05      	ble.n	8007466 <acis_gui_task+0x61fa>
              depmax = dep;
 800745a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800745e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	601a      	str	r2, [r3, #0]
            if(dep < depmin)
 8007466:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800746a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800746e:	ed92 7a00 	vldr	s14, [r2]
 8007472:	edd3 7a00 	vldr	s15, [r3]
 8007476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	d505      	bpl.n	800748c <acis_gui_task+0x6220>
              depmin = dep;
 8007480:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007484:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	601a      	str	r2, [r3, #0]
          for(int i = 0; i < cnt; i++)
 800748c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007490:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	3201      	adds	r2, #1
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800749e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	dbbe      	blt.n	8007428 <acis_gui_task+0x61bc>
          }
          for(int i = 0; i < cnt; i++)
 80074aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e0e2      	b.n	800767a <acis_gui_task+0x640e>
 80074b4:	080171ec 	.word	0x080171ec
 80074b8:	080171a8 	.word	0x080171a8
 80074bc:	0007a11f 	.word	0x0007a11f
 80074c0:	080171b0 	.word	0x080171b0
 80074c4:	000c3500 	.word	0x000c3500
 80074c8:	bf800000 	.word	0xbf800000
 80074cc:	ff800000 	.word	0xff800000
 80074d0:	42fc0000 	.word	0x42fc0000
 80074d4:	42140000 	.word	0x42140000
 80074d8:	427c0000 	.word	0x427c0000
          {
            dep = table->rotates[i];
 80074dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80074e0:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 80074e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	3252      	adds	r2, #82	; 0x52
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	440a      	add	r2, r1
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	601a      	str	r2, [r3, #0]
            value = table->ignitions[menuitem3][i];
 80074f4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80074f8:	f8d7 01e4 	ldr.w	r0, [r7, #484]	; 0x1e4
 80074fc:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007500:	4613      	mov	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4413      	add	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	4413      	add	r3, r2
 8007510:	336a      	adds	r3, #106	; 0x6a
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4403      	add	r3, r0
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	600b      	str	r3, [r1, #0]
            x = (126.0f * log10f(1.0f + (dep - depmin) / (depmax-depmin) * 9.0f)) + 1.0f;
 800751a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800751e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007522:	ed92 7a00 	vldr	s14, [r2]
 8007526:	edd3 7a00 	vldr	s15, [r3]
 800752a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800752e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007532:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007536:	ed92 7a00 	vldr	s14, [r2]
 800753a:	edd3 7a00 	vldr	s15, [r3]
 800753e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007546:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800754a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800754e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007556:	eeb0 0a67 	vmov.f32	s0, s15
 800755a:	f00f fa2b 	bl	80169b4 <log10f>
 800755e:	eeb0 7a40 	vmov.f32	s14, s0
 8007562:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 80074d0 <acis_gui_task+0x6264>
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800756e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007576:	edc3 7a00 	vstr	s15, [r3]
            y = 63 - (value - min) / (max-min) * 37;
 800757a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800757e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007582:	ed92 7a00 	vldr	s14, [r2]
 8007586:	edd3 7a00 	vldr	s15, [r3]
 800758a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800758e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8007592:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007596:	ed92 7a00 	vldr	s14, [r2]
 800759a:	edd3 7a00 	vldr	s15, [r3]
 800759e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a6:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 80074d4 <acis_gui_task+0x6268>
 80075aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80075b2:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 80074d8 <acis_gui_task+0x626c>
 80075b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075ba:	edc3 7a00 	vstr	s15, [r3]

            if(prevx == -1.0f && prevy == -1.0f)
 80075be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80075c2:	edd3 7a00 	vldr	s15, [r3]
 80075c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80075ca:	eef4 7a47 	vcmp.f32	s15, s14
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	d116      	bne.n	8007602 <acis_gui_task+0x6396>
 80075d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80075d8:	edd3 7a00 	vldr	s15, [r3]
 80075dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80075e0:	eef4 7a47 	vcmp.f32	s15, s14
 80075e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e8:	d10b      	bne.n	8007602 <acis_gui_task+0x6396>
              prevx = x, prevy = y;
 80075ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80075ee:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80075fa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	601a      	str	r2, [r3, #0]

            lcd_line(prevx, prevy, x, y, 1);
 8007602:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007606:	edd3 7a00 	vldr	s15, [r3]
 800760a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760e:	ee17 3a90 	vmov	r3, s15
 8007612:	b298      	uxth	r0, r3
 8007614:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007618:	edd3 7a00 	vldr	s15, [r3]
 800761c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007620:	ee17 3a90 	vmov	r3, s15
 8007624:	b299      	uxth	r1, r3
 8007626:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800762a:	edd3 7a00 	vldr	s15, [r3]
 800762e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007632:	ee17 3a90 	vmov	r3, s15
 8007636:	b29a      	uxth	r2, r3
 8007638:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800763c:	edd3 7a00 	vldr	s15, [r3]
 8007640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007644:	ee17 3a90 	vmov	r3, s15
 8007648:	b29c      	uxth	r4, r3
 800764a:	2301      	movs	r3, #1
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	4623      	mov	r3, r4
 8007650:	f002 fdc8 	bl	800a1e4 <lcd_line>

            prevx = x;
 8007654:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007658:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	601a      	str	r2, [r3, #0]
            prevy = y;
 8007660:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007664:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	601a      	str	r2, [r3, #0]
          for(int i = 0; i < cnt; i++)
 800766c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007670:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007674:	6812      	ldr	r2, [r2, #0]
 8007676:	3201      	adds	r2, #1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800767e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	f6ff af28 	blt.w	80074dc <acis_gui_task+0x6270>
          }

          cx = (126.0f * log10f(1.0f + (StatusRPM - depmin) / (depmax-depmin) * 9.0f)) + 1.0f;
 800768c:	4bdb      	ldr	r3, [pc, #876]	; (80079fc <acis_gui_task+0x6790>)
 800768e:	ed93 7a00 	vldr	s14, [r3]
 8007692:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007696:	edd3 7a00 	vldr	s15, [r3]
 800769a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800769e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80076a2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80076a6:	ed92 7a00 	vldr	s14, [r2]
 80076aa:	edd3 7a00 	vldr	s15, [r3]
 80076ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80076ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076c6:	eeb0 0a67 	vmov.f32	s0, s15
 80076ca:	f00f f973 	bl	80169b4 <log10f>
 80076ce:	eeb0 7a40 	vmov.f32	s14, s0
 80076d2:	eddf 7acb 	vldr	s15, [pc, #812]	; 8007a00 <acis_gui_task+0x6794>
 80076d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80076de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076e6:	edc3 7a00 	vstr	s15, [r3]
          cy = 63 - (StatusIgnition - table->octane_corrector - min) / (max-min) * 37;
 80076ea:	4bc6      	ldr	r3, [pc, #792]	; (8007a04 <acis_gui_task+0x6798>)
 80076ec:	ed93 7a00 	vldr	s14, [r3]
 80076f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80076f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80076f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076fc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007700:	edd3 7a00 	vldr	s15, [r3]
 8007704:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007708:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800770c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007710:	ed92 7a00 	vldr	s14, [r2]
 8007714:	edd3 7a00 	vldr	s15, [r3]
 8007718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800771c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007720:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8007a08 <acis_gui_task+0x679c>
 8007724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007728:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800772c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007a0c <acis_gui_task+0x67a0>
 8007730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007734:	edc3 7a00 	vstr	s15, [r3]
          if(cy > 22 && cx > 0 && cx < 128)
 8007738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800773c:	edd3 7a00 	vldr	s15, [r3]
 8007740:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8007744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774c:	dd29      	ble.n	80077a2 <acis_gui_task+0x6536>
 800774e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007752:	edd3 7a00 	vldr	s15, [r3]
 8007756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800775a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775e:	dd20      	ble.n	80077a2 <acis_gui_task+0x6536>
 8007760:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007764:	edd3 7a00 	vldr	s15, [r3]
 8007768:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8007a10 <acis_gui_task+0x67a4>
 800776c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007774:	d515      	bpl.n	80077a2 <acis_gui_task+0x6536>
            lcd_circle5x5fill(cx,cy);
 8007776:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800777a:	edd3 7a00 	vldr	s15, [r3]
 800777e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007782:	ee17 3a90 	vmov	r3, s15
 8007786:	b21a      	sxth	r2, r3
 8007788:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800778c:	edd3 7a00 	vldr	s15, [r3]
 8007790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007794:	ee17 3a90 	vmov	r3, s15
 8007798:	b21b      	sxth	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f003 f8fb 	bl	800a998 <lcd_circle5x5fill>

          cx = (126.0f * log10f(1.0f + (table->rotates[menuitem4] - depmin) / (depmax-depmin) * 9.0f)) + 1.0f;
 80077a2:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80077a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80077aa:	3352      	adds	r3, #82	; 0x52
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	ed93 7a00 	vldr	s14, [r3]
 80077b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80077b8:	edd3 7a00 	vldr	s15, [r3]
 80077bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80077c0:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80077c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80077c8:	ed92 7a00 	vldr	s14, [r2]
 80077cc:	edd3 7a00 	vldr	s15, [r3]
 80077d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80077dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077e8:	eeb0 0a67 	vmov.f32	s0, s15
 80077ec:	f00f f8e2 	bl	80169b4 <log10f>
 80077f0:	eeb0 7a40 	vmov.f32	s14, s0
 80077f4:	eddf 7a82 	vldr	s15, [pc, #520]	; 8007a00 <acis_gui_task+0x6794>
 80077f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007808:	edc3 7a00 	vstr	s15, [r3]
          cy = 63 - (table->ignitions[menuitem3][menuitem4] - min) / (max-min) * 37;
 800780c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007810:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007814:	4613      	mov	r3, r2
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	4413      	add	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007820:	4413      	add	r3, r2
 8007822:	336a      	adds	r3, #106	; 0x6a
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	440b      	add	r3, r1
 8007828:	ed93 7a00 	vldr	s14, [r3]
 800782c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007830:	edd3 7a00 	vldr	s15, [r3]
 8007834:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007838:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800783c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007840:	ed92 7a00 	vldr	s14, [r2]
 8007844:	edd3 7a00 	vldr	s15, [r3]
 8007848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800784c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007850:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007a08 <acis_gui_task+0x679c>
 8007854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007858:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800785c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8007a0c <acis_gui_task+0x67a0>
 8007860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007864:	edc3 7a00 	vstr	s15, [r3]
          if(cy > 22 && cx > 0 && cx < 128)
 8007868:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800786c:	edd3 7a00 	vldr	s15, [r3]
 8007870:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8007874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787c:	dd29      	ble.n	80078d2 <acis_gui_task+0x6666>
 800787e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007882:	edd3 7a00 	vldr	s15, [r3]
 8007886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800788a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788e:	dd20      	ble.n	80078d2 <acis_gui_task+0x6666>
 8007890:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007894:	edd3 7a00 	vldr	s15, [r3]
 8007898:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8007a10 <acis_gui_task+0x67a4>
 800789c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a4:	d515      	bpl.n	80078d2 <acis_gui_task+0x6666>
            lcd_circle5x5(cx,cy);
 80078a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80078aa:	edd3 7a00 	vldr	s15, [r3]
 80078ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078b2:	ee17 3a90 	vmov	r3, s15
 80078b6:	b21a      	sxth	r2, r3
 80078b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80078bc:	edd3 7a00 	vldr	s15, [r3]
 80078c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078c4:	ee17 3a90 	vmov	r3, s15
 80078c8:	b21b      	sxth	r3, r3
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f002 ffaa 	bl	800a826 <lcd_circle5x5>

          font_printf(65,2,"%03.0f", rpm);
 80078d2:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80078d6:	f7f8 fe5f 	bl	8000598 <__aeabi_f2d>
 80078da:	4603      	mov	r3, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	e9cd 3400 	strd	r3, r4, [sp]
 80078e2:	4a4c      	ldr	r2, [pc, #304]	; (8007a14 <acis_gui_task+0x67a8>)
 80078e4:	2102      	movs	r1, #2
 80078e6:	2041      	movs	r0, #65	; 0x41
 80078e8:	f00b f9ea 	bl	8012cc0 <font_printf>
          font_printf(93,2,"%04.0f", pres);
 80078ec:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80078f0:	f7f8 fe52 	bl	8000598 <__aeabi_f2d>
 80078f4:	4603      	mov	r3, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	e9cd 3400 	strd	r3, r4, [sp]
 80078fc:	4a46      	ldr	r2, [pc, #280]	; (8007a18 <acis_gui_task+0x67ac>)
 80078fe:	2102      	movs	r1, #2
 8007900:	205d      	movs	r0, #93	; 0x5d
 8007902:	f00b f9dd 	bl	8012cc0 <font_printf>
          font_printf(94,63 - font_getHeight(),"%5.1fd", ign);
 8007906:	f009 ff5f 	bl	80117c8 <font_getHeight>
 800790a:	4603      	mov	r3, r0
 800790c:	f1c3 053f 	rsb	r5, r3, #63	; 0x3f
 8007910:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 8007914:	f7f8 fe40 	bl	8000598 <__aeabi_f2d>
 8007918:	4603      	mov	r3, r0
 800791a:	460c      	mov	r4, r1
 800791c:	e9cd 3400 	strd	r3, r4, [sp]
 8007920:	4a3e      	ldr	r2, [pc, #248]	; (8007a1c <acis_gui_task+0x67b0>)
 8007922:	4629      	mov	r1, r5
 8007924:	205e      	movs	r0, #94	; 0x5e
 8007926:	f00b f9cb 	bl	8012cc0 <font_printf>


          lcd_update();
 800792a:	f002 fa3b 	bl	8009da4 <lcd_update>
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 800792e:	4b3c      	ldr	r3, [pc, #240]	; (8007a20 <acis_gui_task+0x67b4>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <acis_gui_task+0x66e4>
 8007938:	4b3a      	ldr	r3, [pc, #232]	; (8007a24 <acis_gui_task+0x67b8>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80b5 	beq.w	8007aae <acis_gui_task+0x6842>
 8007944:	4b38      	ldr	r3, [pc, #224]	; (8007a28 <acis_gui_task+0x67bc>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800794c:	f240 80af 	bls.w	8007aae <acis_gui_task+0x6842>
        {
          display_timeout = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 40;
 8007956:	4b34      	ldr	r3, [pc, #208]	; (8007a28 <acis_gui_task+0x67bc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b64      	cmp	r3, #100	; 0x64
 800795c:	d904      	bls.n	8007968 <acis_gui_task+0x66fc>
 800795e:	4b32      	ldr	r3, [pc, #200]	; (8007a28 <acis_gui_task+0x67bc>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3b28      	subs	r3, #40	; 0x28
 8007964:	4a30      	ldr	r2, [pc, #192]	; (8007a28 <acis_gui_task+0x67bc>)
 8007966:	6013      	str	r3, [r2, #0]
          if(StatusSynchronized && tablesetupitem->step)
 8007968:	4b30      	ldr	r3, [pc, #192]	; (8007a2c <acis_gui_task+0x67c0>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 8096 	beq.w	8007aa0 <acis_gui_task+0x6834>
 8007974:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007978:	edd3 7a06 	vldr	s15, [r3, #24]
 800797c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	f000 808c 	beq.w	8007aa0 <acis_gui_task+0x6834>
          {
            if(table->ignitions[menuitem3][menuitem4] - tablesetupitem->step < tablesetupitem->min)
 8007988:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 800798c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007990:	4613      	mov	r3, r2
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	4413      	add	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800799c:	4413      	add	r3, r2
 800799e:	336a      	adds	r3, #106	; 0x6a
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	ed93 7a00 	vldr	s14, [r3]
 80079a8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80079ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80079b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80079b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ca:	d531      	bpl.n	8007a30 <acis_gui_task+0x67c4>
              table->ignitions[menuitem3][menuitem4] = tablesetupitem->min;
 80079cc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079da:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 80079de:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80079e2:	4613      	mov	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	4413      	add	r3, r2
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80079ee:	4413      	add	r3, r2
 80079f0:	336a      	adds	r3, #106	; 0x6a
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	440b      	add	r3, r1
 80079f6:	edc3 7a00 	vstr	s15, [r3]
 80079fa:	e03f      	b.n	8007a7c <acis_gui_task+0x6810>
 80079fc:	20006960 	.word	0x20006960
 8007a00:	42fc0000 	.word	0x42fc0000
 8007a04:	2000696c 	.word	0x2000696c
 8007a08:	42140000 	.word	0x42140000
 8007a0c:	427c0000 	.word	0x427c0000
 8007a10:	43000000 	.word	0x43000000
 8007a14:	0801708c 	.word	0x0801708c
 8007a18:	0801709c 	.word	0x0801709c
 8007a1c:	080171e4 	.word	0x080171e4
 8007a20:	200159e4 	.word	0x200159e4
 8007a24:	200159c4 	.word	0x200159c4
 8007a28:	200159cc 	.word	0x200159cc
 8007a2c:	2000697e 	.word	0x2000697e
            else table->ignitions[menuitem3][menuitem4] -= tablesetupitem->step;
 8007a30:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007a34:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007a38:	4613      	mov	r3, r2
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007a44:	4413      	add	r3, r2
 8007a46:	336a      	adds	r3, #106	; 0x6a
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	ed93 7a00 	vldr	s14, [r3]
 8007a50:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007a54:	edd3 7a06 	vldr	s15, [r3, #24]
 8007a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a5c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007a60:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007a64:	4613      	mov	r3, r2
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	4413      	add	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007a70:	4413      	add	r3, r2
 8007a72:	336a      	adds	r3, #106	; 0x6a
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	edc3 7a00 	vstr	s15, [r3]

            acis_apply_parameter(&table->ignitions[menuitem3][menuitem4], sizeof(float));
 8007a7c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007a80:	4613      	mov	r3, r2
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	4413      	add	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007a8c:	4413      	add	r3, r2
 8007a8e:	336a      	adds	r3, #106	; 0x6a
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8007a96:	4413      	add	r3, r2
 8007a98:	2104      	movs	r1, #4
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7f9 fae8 	bl	8001070 <acis_apply_parameter>
          }
          select_timeout = now;
 8007aa0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007aa4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_LEFT = 0;
 8007aa8:	4bda      	ldr	r3, [pc, #872]	; (8007e14 <acis_gui_task+0x6ba8>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	701a      	strb	r2, [r3, #0]

        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8007aae:	4bda      	ldr	r3, [pc, #872]	; (8007e18 <acis_gui_task+0x6bac>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10b      	bne.n	8007ad0 <acis_gui_task+0x6864>
 8007ab8:	4bd8      	ldr	r3, [pc, #864]	; (8007e1c <acis_gui_task+0x6bb0>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8099 	beq.w	8007bf6 <acis_gui_task+0x698a>
 8007ac4:	4bd6      	ldr	r3, [pc, #856]	; (8007e20 <acis_gui_task+0x6bb4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007acc:	f240 8093 	bls.w	8007bf6 <acis_gui_task+0x698a>
        {
          display_timeout = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 40;
 8007ad6:	4bd2      	ldr	r3, [pc, #840]	; (8007e20 <acis_gui_task+0x6bb4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b64      	cmp	r3, #100	; 0x64
 8007adc:	d904      	bls.n	8007ae8 <acis_gui_task+0x687c>
 8007ade:	4bd0      	ldr	r3, [pc, #832]	; (8007e20 <acis_gui_task+0x6bb4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3b28      	subs	r3, #40	; 0x28
 8007ae4:	4ace      	ldr	r2, [pc, #824]	; (8007e20 <acis_gui_task+0x6bb4>)
 8007ae6:	6013      	str	r3, [r2, #0]
          if(StatusSynchronized && tablesetupitem->step)
 8007ae8:	4bce      	ldr	r3, [pc, #824]	; (8007e24 <acis_gui_task+0x6bb8>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d07a      	beq.n	8007be8 <acis_gui_task+0x697c>
 8007af2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007af6:	edd3 7a06 	vldr	s15, [r3, #24]
 8007afa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	d071      	beq.n	8007be8 <acis_gui_task+0x697c>
          {
            if(table->ignitions[menuitem3][menuitem4] + tablesetupitem->step > tablesetupitem->max)
 8007b04:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007b08:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	4413      	add	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007b18:	4413      	add	r3, r2
 8007b1a:	336a      	adds	r3, #106	; 0x6a
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	ed93 7a00 	vldr	s14, [r3]
 8007b24:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007b28:	edd3 7a06 	vldr	s15, [r3, #24]
 8007b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b30:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b46:	dd17      	ble.n	8007b78 <acis_gui_task+0x690c>
              table->ignitions[menuitem3][menuitem4] = tablesetupitem->max;
 8007b48:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b56:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007b5a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007b5e:	4613      	mov	r3, r2
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	4413      	add	r3, r2
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007b6a:	4413      	add	r3, r2
 8007b6c:	336a      	adds	r3, #106	; 0x6a
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	440b      	add	r3, r1
 8007b72:	edc3 7a00 	vstr	s15, [r3]
 8007b76:	e025      	b.n	8007bc4 <acis_gui_task+0x6958>
            else table->ignitions[menuitem3][menuitem4] += tablesetupitem->step;
 8007b78:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007b7c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007b80:	4613      	mov	r3, r2
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	4413      	add	r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007b8c:	4413      	add	r3, r2
 8007b8e:	336a      	adds	r3, #106	; 0x6a
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	ed93 7a00 	vldr	s14, [r3]
 8007b98:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8007b9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ba4:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8007ba8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007bac:	4613      	mov	r3, r2
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	4413      	add	r3, r2
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007bb8:	4413      	add	r3, r2
 8007bba:	336a      	adds	r3, #106	; 0x6a
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	edc3 7a00 	vstr	s15, [r3]

            acis_apply_parameter(&table->ignitions[menuitem3][menuitem4], sizeof(float));
 8007bc4:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8007bc8:	4613      	mov	r3, r2
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	4413      	add	r3, r2
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007bd4:	4413      	add	r3, r2
 8007bd6:	336a      	adds	r3, #106	; 0x6a
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8007bde:	4413      	add	r3, r2
 8007be0:	2104      	movs	r1, #4
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7f9 fa44 	bl	8001070 <acis_apply_parameter>
          }
          select_timeout = now;
 8007be8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007bec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_RIGHT = 0;
 8007bf0:	4b89      	ldr	r3, [pc, #548]	; (8007e18 <acis_gui_task+0x6bac>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]

        }

        if(BUT_CANCEL)
 8007bf6:	4b8c      	ldr	r3, [pc, #560]	; (8007e28 <acis_gui_task+0x6bbc>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01e      	beq.n	8007c3e <acis_gui_task+0x69d2>
        {
          display_timeout = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          eMenuItem = MenuTableSetupIgnitionsSelect;
 8007c06:	4b89      	ldr	r3, [pc, #548]	; (8007e2c <acis_gui_task+0x6bc0>)
 8007c08:	2212      	movs	r2, #18
 8007c0a:	701a      	strb	r2, [r3, #0]
          value_timeout = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
          select_timeout = now;
 8007c12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c16:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_UP = 0;
 8007c1a:	4b85      	ldr	r3, [pc, #532]	; (8007e30 <acis_gui_task+0x6bc4>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8007c20:	4b84      	ldr	r3, [pc, #528]	; (8007e34 <acis_gui_task+0x6bc8>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8007c26:	4b7b      	ldr	r3, [pc, #492]	; (8007e14 <acis_gui_task+0x6ba8>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8007c2c:	4b7a      	ldr	r3, [pc, #488]	; (8007e18 <acis_gui_task+0x6bac>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8007c32:	4b7d      	ldr	r3, [pc, #500]	; (8007e28 <acis_gui_task+0x6bbc>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8007c38:	4b7f      	ldr	r3, [pc, #508]	; (8007e38 <acis_gui_task+0x6bcc>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_DOWN)
 8007c3e:	4b7d      	ldr	r3, [pc, #500]	; (8007e34 <acis_gui_task+0x6bc8>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00e      	beq.n	8007c66 <acis_gui_task+0x69fa>
        {
          display_timeout = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          menuitem4++;
 8007c4e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007c52:	3301      	adds	r3, #1
 8007c54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
          select_timeout = now;
 8007c58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c5c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_DOWN = 0;
 8007c60:	4b74      	ldr	r3, [pc, #464]	; (8007e34 <acis_gui_task+0x6bc8>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8007c66:	4b72      	ldr	r3, [pc, #456]	; (8007e30 <acis_gui_task+0x6bc4>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00e      	beq.n	8007c8e <acis_gui_task+0x6a22>
        {
          display_timeout = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          menuitem4--;
 8007c76:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
          select_timeout = now;
 8007c80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
          BUT_UP = 0;
 8007c88:	4b69      	ldr	r3, [pc, #420]	; (8007e30 <acis_gui_task+0x6bc4>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
        }

        if(menuitem4 >= table->rotates_count) menuitem4 = table->rotates_count - 1, display_timeout = 0;
 8007c8e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007c92:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007c96:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	db09      	blt.n	8007cb2 <acis_gui_task+0x6a46>
 8007c9e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8007ca2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007cac:	2300      	movs	r3, #0
 8007cae:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
        if(menuitem4 < 0) menuitem4 = 0, display_timeout = 0;
 8007cb2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	da05      	bge.n	8007cc6 <acis_gui_task+0x6a5a>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
        menufirst4 = menuitem4;
 8007cc6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007cca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

        break;
 8007cce:	e170      	b.n	8007fb2 <acis_gui_task+0x6d46>
      }
      case MenuPcConnected :
      {
        if(DelayDiff(now, display_timeout) > 500000)
 8007cd0:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8007cd4:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007cd8:	f001 ffc0 	bl	8009c5c <DelayDiff>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	4b57      	ldr	r3, [pc, #348]	; (8007e3c <acis_gui_task+0x6bd0>)
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	f240 8159 	bls.w	8007f98 <acis_gui_task+0x6d2c>
        {
          display_timeout = now;
 8007ce6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007cea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 8007cee:	f002 f8e5 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	2280      	movs	r2, #128	; 0x80
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	f002 f9c8 	bl	800a092 <lcd_rect>
          font_setFont(&rre_arialb_16);
 8007d02:	484f      	ldr	r0, [pc, #316]	; (8007e40 <acis_gui_task+0x6bd4>)
 8007d04:	f009 fdba 	bl	801187c <font_setFont>
          font_printf(10,18,"PC Connected");
 8007d08:	4a4e      	ldr	r2, [pc, #312]	; (8007e44 <acis_gui_task+0x6bd8>)
 8007d0a:	2112      	movs	r1, #18
 8007d0c:	200a      	movs	r0, #10
 8007d0e:	f00a ffd7 	bl	8012cc0 <font_printf>
          lcd_update();
 8007d12:	f002 f847 	bl	8009da4 <lcd_update>
        }
        break;
 8007d16:	e13f      	b.n	8007f98 <acis_gui_task+0x6d2c>
      }

      case MenuSynchronizing :
      {
        if(DelayDiff(now, display_timeout) > 50000)
 8007d18:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8007d1c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007d20:	f001 ff9c 	bl	8009c5c <DelayDiff>
 8007d24:	4602      	mov	r2, r0
 8007d26:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	f240 8137 	bls.w	8007f9e <acis_gui_task+0x6d32>
        {
          display_timeout = now;
 8007d30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007d34:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 8007d38:	f002 f8c0 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	2280      	movs	r2, #128	; 0x80
 8007d44:	2100      	movs	r1, #0
 8007d46:	2000      	movs	r0, #0
 8007d48:	f002 f9a3 	bl	800a092 <lcd_rect>
          font_setFont(&rre_arialb_16);
 8007d4c:	483c      	ldr	r0, [pc, #240]	; (8007e40 <acis_gui_task+0x6bd4>)
 8007d4e:	f009 fd95 	bl	801187c <font_setFont>
          font_printf(0,18,"Synchronizing");
 8007d52:	4a3d      	ldr	r2, [pc, #244]	; (8007e48 <acis_gui_task+0x6bdc>)
 8007d54:	2112      	movs	r1, #18
 8007d56:	2000      	movs	r0, #0
 8007d58:	f00a ffb2 	bl	8012cc0 <font_printf>

          font_printf(45 + cnt * 3,18+font_getHeight(),".");
 8007d5c:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8007d60:	4613      	mov	r3, r2
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	4413      	add	r3, r2
 8007d66:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8007d6a:	f009 fd2d 	bl	80117c8 <font_getHeight>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	3312      	adds	r3, #18
 8007d72:	4a36      	ldr	r2, [pc, #216]	; (8007e4c <acis_gui_task+0x6be0>)
 8007d74:	4619      	mov	r1, r3
 8007d76:	4620      	mov	r0, r4
 8007d78:	f00a ffa2 	bl	8012cc0 <font_printf>
          font_printf(45 + (((cnt + 1) % 12) * 3),18+font_getHeight(),".");
 8007d7c:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8007d80:	1c59      	adds	r1, r3, #1
 8007d82:	4b33      	ldr	r3, [pc, #204]	; (8007e50 <acis_gui_task+0x6be4>)
 8007d84:	fb83 2301 	smull	r2, r3, r3, r1
 8007d88:	105a      	asrs	r2, r3, #1
 8007d8a:	17cb      	asrs	r3, r1, #31
 8007d8c:	1ad2      	subs	r2, r2, r3
 8007d8e:	4613      	mov	r3, r2
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	1aca      	subs	r2, r1, r3
 8007d98:	4613      	mov	r3, r2
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8007da2:	f009 fd11 	bl	80117c8 <font_getHeight>
 8007da6:	4603      	mov	r3, r0
 8007da8:	3312      	adds	r3, #18
 8007daa:	4a28      	ldr	r2, [pc, #160]	; (8007e4c <acis_gui_task+0x6be0>)
 8007dac:	4619      	mov	r1, r3
 8007dae:	4620      	mov	r0, r4
 8007db0:	f00a ff86 	bl	8012cc0 <font_printf>
          font_printf(45 + (((cnt + 2) % 12) * 3),18+font_getHeight(),".");
 8007db4:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8007db8:	1c99      	adds	r1, r3, #2
 8007dba:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <acis_gui_task+0x6be4>)
 8007dbc:	fb83 2301 	smull	r2, r3, r3, r1
 8007dc0:	105a      	asrs	r2, r3, #1
 8007dc2:	17cb      	asrs	r3, r1, #31
 8007dc4:	1ad2      	subs	r2, r2, r3
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	1aca      	subs	r2, r1, r3
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8007dda:	f009 fcf5 	bl	80117c8 <font_getHeight>
 8007dde:	4603      	mov	r3, r0
 8007de0:	3312      	adds	r3, #18
 8007de2:	4a1a      	ldr	r2, [pc, #104]	; (8007e4c <acis_gui_task+0x6be0>)
 8007de4:	4619      	mov	r1, r3
 8007de6:	4620      	mov	r0, r4
 8007de8:	f00a ff6a 	bl	8012cc0 <font_printf>

          cnt = (cnt + 1) % 12;
 8007dec:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	4b17      	ldr	r3, [pc, #92]	; (8007e50 <acis_gui_task+0x6be4>)
 8007df4:	fb83 1302 	smull	r1, r3, r3, r2
 8007df8:	1059      	asrs	r1, r3, #1
 8007dfa:	17d3      	asrs	r3, r2, #31
 8007dfc:	1ac9      	subs	r1, r1, r3
 8007dfe:	460b      	mov	r3, r1
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	440b      	add	r3, r1
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	1ad1      	subs	r1, r2, r3
 8007e08:	460b      	mov	r3, r1
 8007e0a:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7

          lcd_update();
 8007e0e:	f001 ffc9 	bl	8009da4 <lcd_update>
        }
        break;
 8007e12:	e0c4      	b.n	8007f9e <acis_gui_task+0x6d32>
 8007e14:	200159e4 	.word	0x200159e4
 8007e18:	200159e5 	.word	0x200159e5
 8007e1c:	200159c5 	.word	0x200159c5
 8007e20:	200159d0 	.word	0x200159d0
 8007e24:	2000697e 	.word	0x2000697e
 8007e28:	200159e9 	.word	0x200159e9
 8007e2c:	2000695c 	.word	0x2000695c
 8007e30:	200159e6 	.word	0x200159e6
 8007e34:	200159e7 	.word	0x200159e7
 8007e38:	200159e8 	.word	0x200159e8
 8007e3c:	0007a120 	.word	0x0007a120
 8007e40:	20002cf0 	.word	0x20002cf0
 8007e44:	080171f8 	.word	0x080171f8
 8007e48:	08017208 	.word	0x08017208
 8007e4c:	08017218 	.word	0x08017218
 8007e50:	2aaaaaab 	.word	0x2aaaaaab
      }

      case MenuTableConfigSave :
      {
        if(DelayDiff(now, display_timeout) > 50000)
 8007e54:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8007e58:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007e5c:	f001 fefe 	bl	8009c5c <DelayDiff>
 8007e60:	4602      	mov	r2, r0
 8007e62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e66:	429a      	cmp	r2, r3
 8007e68:	f240 809c 	bls.w	8007fa4 <acis_gui_task+0x6d38>
        {
          lcd_clear();
 8007e6c:	f002 f826 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8007e70:	2301      	movs	r3, #1
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2340      	movs	r3, #64	; 0x40
 8007e76:	2280      	movs	r2, #128	; 0x80
 8007e78:	2100      	movs	r1, #0
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f002 f909 	bl	800a092 <lcd_rect>
          font_setFont(&rre_arialb_16);
 8007e80:	484d      	ldr	r0, [pc, #308]	; (8007fb8 <acis_gui_task+0x6d4c>)
 8007e82:	f009 fcfb 	bl	801187c <font_setFont>
          font_printf(0,18,"Saving...");
 8007e86:	4a4d      	ldr	r2, [pc, #308]	; (8007fbc <acis_gui_task+0x6d50>)
 8007e88:	2112      	movs	r1, #18
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	f00a ff18 	bl	8012cc0 <font_printf>
          eMenuItem = MenuSynchronizing;
 8007e90:	4b4b      	ldr	r3, [pc, #300]	; (8007fc0 <acis_gui_task+0x6d54>)
 8007e92:	2201      	movs	r2, #1
 8007e94:	701a      	strb	r2, [r3, #0]
          NeedSave = 1;
 8007e96:	4b4b      	ldr	r3, [pc, #300]	; (8007fc4 <acis_gui_task+0x6d58>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	701a      	strb	r2, [r3, #0]
          lcd_update();
 8007e9c:	f001 ff82 	bl	8009da4 <lcd_update>
        }
        break;
 8007ea0:	e080      	b.n	8007fa4 <acis_gui_task+0x6d38>
      }

      case MenuTableConfigRestore :
      {
        if(DelayDiff(now, display_timeout) > 50000)
 8007ea2:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8007ea6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007eaa:	f001 fed7 	bl	8009c5c <DelayDiff>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d978      	bls.n	8007faa <acis_gui_task+0x6d3e>
        {
          lcd_clear();
 8007eb8:	f002 f800 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	2340      	movs	r3, #64	; 0x40
 8007ec2:	2280      	movs	r2, #128	; 0x80
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f002 f8e3 	bl	800a092 <lcd_rect>
          font_setFont(&rre_arialb_16);
 8007ecc:	483a      	ldr	r0, [pc, #232]	; (8007fb8 <acis_gui_task+0x6d4c>)
 8007ece:	f009 fcd5 	bl	801187c <font_setFont>
          font_printf(0,18,"Restoring...");
 8007ed2:	4a3d      	ldr	r2, [pc, #244]	; (8007fc8 <acis_gui_task+0x6d5c>)
 8007ed4:	2112      	movs	r1, #18
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f00a fef2 	bl	8012cc0 <font_printf>
          eMenuItem = MenuSynchronizing;
 8007edc:	4b38      	ldr	r3, [pc, #224]	; (8007fc0 <acis_gui_task+0x6d54>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	701a      	strb	r2, [r3, #0]
          NeedLoad = 1;
 8007ee2:	4b3a      	ldr	r3, [pc, #232]	; (8007fcc <acis_gui_task+0x6d60>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	701a      	strb	r2, [r3, #0]
          lcd_update();
 8007ee8:	f001 ff5c 	bl	8009da4 <lcd_update>
        }
        break;
 8007eec:	e05d      	b.n	8007faa <acis_gui_task+0x6d3e>
      }

      case MenuSyncError :
      {
        if(DelayDiff(now, display_timeout) > 500000)
 8007eee:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8007ef2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007ef6:	f001 feb1 	bl	8009c5c <DelayDiff>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4b34      	ldr	r3, [pc, #208]	; (8007fd0 <acis_gui_task+0x6d64>)
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d923      	bls.n	8007f4a <acis_gui_task+0x6cde>
        {
          display_timeout = now;
 8007f02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007f06:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
          lcd_clear();
 8007f0a:	f001 ffd7 	bl	8009ebc <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8007f0e:	2301      	movs	r3, #1
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2340      	movs	r3, #64	; 0x40
 8007f14:	2280      	movs	r2, #128	; 0x80
 8007f16:	2100      	movs	r1, #0
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f002 f8ba 	bl	800a092 <lcd_rect>
          font_setFont(&rre_arialb_16);
 8007f1e:	4826      	ldr	r0, [pc, #152]	; (8007fb8 <acis_gui_task+0x6d4c>)
 8007f20:	f009 fcac 	bl	801187c <font_setFont>
          font_printf(0,18,"Synchronizing");
 8007f24:	4a2b      	ldr	r2, [pc, #172]	; (8007fd4 <acis_gui_task+0x6d68>)
 8007f26:	2112      	movs	r1, #18
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f00a fec9 	bl	8012cc0 <font_printf>
          font_printf(0,18+font_getHeight(),"ERROR (%d)",SyncError);
 8007f2e:	f009 fc4b 	bl	80117c8 <font_getHeight>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f103 0112 	add.w	r1, r3, #18
 8007f38:	4b27      	ldr	r3, [pc, #156]	; (8007fd8 <acis_gui_task+0x6d6c>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	4a27      	ldr	r2, [pc, #156]	; (8007fdc <acis_gui_task+0x6d70>)
 8007f40:	2000      	movs	r0, #0
 8007f42:	f00a febd 	bl	8012cc0 <font_printf>
          lcd_update();
 8007f46:	f001 ff2d 	bl	8009da4 <lcd_update>
        }
        if(DelayDiff(now, last_menu_switch) > 2000000)
 8007f4a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8007f4e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8007f52:	f001 fe83 	bl	8009c5c <DelayDiff>
 8007f56:	4602      	mov	r2, r0
 8007f58:	4b21      	ldr	r3, [pc, #132]	; (8007fe0 <acis_gui_task+0x6d74>)
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d928      	bls.n	8007fb0 <acis_gui_task+0x6d44>
        {
          SyncError = 0;
 8007f5e:	4b1e      	ldr	r3, [pc, #120]	; (8007fd8 <acis_gui_task+0x6d6c>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	701a      	strb	r2, [r3, #0]
          eMenuItem = MenuMain;
 8007f64:	4b16      	ldr	r3, [pc, #88]	; (8007fc0 <acis_gui_task+0x6d54>)
 8007f66:	2204      	movs	r2, #4
 8007f68:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007f6a:	e021      	b.n	8007fb0 <acis_gui_task+0x6d44>
      }
      default :
        eMenuItem = MenuMain;
 8007f6c:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <acis_gui_task+0x6d54>)
 8007f6e:	2204      	movs	r2, #4
 8007f70:	701a      	strb	r2, [r3, #0]
        break;
 8007f72:	e01e      	b.n	8007fb2 <acis_gui_task+0x6d46>
        break;
 8007f74:	bf00      	nop
 8007f76:	f7f9 b9d3 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007f7a:	bf00      	nop
 8007f7c:	f7f9 b9d0 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007f80:	bf00      	nop
 8007f82:	f7f9 b9cd 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007f86:	bf00      	nop
 8007f88:	f7f9 b9ca 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007f8c:	bf00      	nop
 8007f8e:	f7f9 b9c7 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007f92:	bf00      	nop
 8007f94:	f7f9 b9c4 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007f98:	bf00      	nop
 8007f9a:	f7f9 b9c1 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007f9e:	bf00      	nop
 8007fa0:	f7f9 b9be 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007fa4:	bf00      	nop
 8007fa6:	f7f9 b9bb 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007faa:	bf00      	nop
 8007fac:	f7f9 b9b8 	b.w	8001320 <acis_gui_task+0xb4>
        break;
 8007fb0:	bf00      	nop
    if(StatusValveNum == 1)
 8007fb2:	f7f9 b9b5 	b.w	8001320 <acis_gui_task+0xb4>
 8007fb6:	bf00      	nop
 8007fb8:	20002cf0 	.word	0x20002cf0
 8007fbc:	0801721c 	.word	0x0801721c
 8007fc0:	2000695c 	.word	0x2000695c
 8007fc4:	20006985 	.word	0x20006985
 8007fc8:	08017228 	.word	0x08017228
 8007fcc:	20006986 	.word	0x20006986
 8007fd0:	0007a120 	.word	0x0007a120
 8007fd4:	08017208 	.word	0x08017208
 8007fd8:	20006998 	.word	0x20006998
 8007fdc:	08017238 	.word	0x08017238
 8007fe0:	001e8480 	.word	0x001e8480

08007fe4 <acis_sender_task>:
  }

}

static void acis_sender_task(void * argument)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint8_t sending = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	75fb      	strb	r3, [r7, #23]
  uint8_t destination = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	72bb      	strb	r3, [r7, #10]
  uint8_t size = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	727b      	strb	r3, [r7, #9]

  while(1)
  {
    do
    {
      if(!sending && protGetSize(&fifoSendingQueue) > 4)
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d133      	bne.n	8008066 <acis_sender_task+0x82>
 8007ffe:	4824      	ldr	r0, [pc, #144]	; (8008090 <acis_sender_task+0xac>)
 8008000:	f004 fe8c 	bl	800cd1c <protGetSize>
 8008004:	4603      	mov	r3, r0
 8008006:	2b04      	cmp	r3, #4
 8008008:	d92d      	bls.n	8008066 <acis_sender_task+0x82>
      {
        protLook(&fifoSendingQueue,1,&size);
 800800a:	f107 0309 	add.w	r3, r7, #9
 800800e:	461a      	mov	r2, r3
 8008010:	2101      	movs	r1, #1
 8008012:	481f      	ldr	r0, [pc, #124]	; (8008090 <acis_sender_task+0xac>)
 8008014:	f004 ffd9 	bl	800cfca <protLook>
        protLook(&fifoSendingQueue,2,&destination);
 8008018:	f107 030a 	add.w	r3, r7, #10
 800801c:	461a      	mov	r2, r3
 800801e:	2102      	movs	r1, #2
 8008020:	481b      	ldr	r0, [pc, #108]	; (8008090 <acis_sender_task+0xac>)
 8008022:	f004 ffd2 	bl	800cfca <protLook>
        if(protGetSize(&fifoSendingQueue) >= size)
 8008026:	481a      	ldr	r0, [pc, #104]	; (8008090 <acis_sender_task+0xac>)
 8008028:	f004 fe78 	bl	800cd1c <protGetSize>
 800802c:	4602      	mov	r2, r0
 800802e:	7a7b      	ldrb	r3, [r7, #9]
 8008030:	429a      	cmp	r2, r3
 8008032:	d318      	bcc.n	8008066 <acis_sender_task+0x82>
        {
          pnt = buffSendingBuffer;
 8008034:	4b17      	ldr	r3, [pc, #92]	; (8008094 <acis_sender_task+0xb0>)
 8008036:	613b      	str	r3, [r7, #16]
          for(int i = 0; i < size; i++)
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e009      	b.n	8008052 <acis_sender_task+0x6e>
            protPull(&fifoSendingQueue, pnt++);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	613a      	str	r2, [r7, #16]
 8008044:	4619      	mov	r1, r3
 8008046:	4812      	ldr	r0, [pc, #72]	; (8008090 <acis_sender_task+0xac>)
 8008048:	f004 ffb0 	bl	800cfac <protPull>
          for(int i = 0; i < size; i++)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3301      	adds	r3, #1
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	7a7b      	ldrb	r3, [r7, #9]
 8008054:	461a      	mov	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4293      	cmp	r3, r2
 800805a:	dbf0      	blt.n	800803e <acis_sender_task+0x5a>
          if(destination)
 800805c:	7abb      	ldrb	r3, [r7, #10]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <acis_sender_task+0x82>
            sending = 1;
 8008062:	2301      	movs	r3, #1
 8008064:	75fb      	strb	r3, [r7, #23]
        }
      }
      if(sending)
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00d      	beq.n	8008088 <acis_sender_task+0xa4>
      {
        status = acis_send_command(destination, buffSendingBuffer, size);
 800806c:	7abb      	ldrb	r3, [r7, #10]
 800806e:	7a7a      	ldrb	r2, [r7, #9]
 8008070:	4908      	ldr	r1, [pc, #32]	; (8008094 <acis_sender_task+0xb0>)
 8008072:	4618      	mov	r0, r3
 8008074:	f001 f9f2 	bl	800945c <acis_send_command>
 8008078:	4603      	mov	r3, r0
 800807a:	72fb      	strb	r3, [r7, #11]
        if(status != HAL_BUSY)
 800807c:	7afb      	ldrb	r3, [r7, #11]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d002      	beq.n	8008088 <acis_sender_task+0xa4>
        {
          sending = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	75fb      	strb	r3, [r7, #23]
          continue;
 8008086:	bf00      	nop
        }
      }
    } while(0);
    osDelay(1);
 8008088:	2001      	movs	r0, #1
 800808a:	f007 fbe7 	bl	800f85c <osDelay>
      if(!sending && protGetSize(&fifoSendingQueue) > 4)
 800808e:	e7b3      	b.n	8007ff8 <acis_sender_task+0x14>
 8008090:	20006940 	.word	0x20006940
 8008094:	200061c0 	.word	0x200061c0

08008098 <acis_main_task>:
  }

}

void acis_main_task(void * argument)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08a      	sub	sp, #40	; 0x28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t DragStatusOld = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t LastPacket = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	623b      	str	r3, [r7, #32]
  uint32_t LastDragPacket = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
  uint32_t LastGeneralStatusPacket = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
  uint32_t LastFuelSwitchPacket = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
  uint8_t LastFuelSwitchPos = 0xFF;
 80080b4:	23ff      	movs	r3, #255	; 0xff
 80080b6:	74fb      	strb	r3, [r7, #19]
  uint8_t FuelSwitchPos = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	74bb      	strb	r3, [r7, #18]
  uint32_t now;
  protInit(&fifoSendingQueue, buffSendingQueue, 1, SENDING_QUEUE_SIZE);
 80080bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80080c0:	2201      	movs	r2, #1
 80080c2:	4999      	ldr	r1, [pc, #612]	; (8008328 <acis_main_task+0x290>)
 80080c4:	4899      	ldr	r0, [pc, #612]	; (800832c <acis_main_task+0x294>)
 80080c6:	f004 fe47 	bl	800cd58 <protInit>
  tGuiHandler = osThreadNew(acis_gui_task, NULL, &cTaskAttributes);
 80080ca:	4a99      	ldr	r2, [pc, #612]	; (8008330 <acis_main_task+0x298>)
 80080cc:	2100      	movs	r1, #0
 80080ce:	4899      	ldr	r0, [pc, #612]	; (8008334 <acis_main_task+0x29c>)
 80080d0:	f007 fb6c 	bl	800f7ac <osThreadNew>
 80080d4:	4602      	mov	r2, r0
 80080d6:	4b98      	ldr	r3, [pc, #608]	; (8008338 <acis_main_task+0x2a0>)
 80080d8:	601a      	str	r2, [r3, #0]
  tSenderHandler = osThreadNew(acis_sender_task, NULL, &cTaskAttributes);
 80080da:	4a95      	ldr	r2, [pc, #596]	; (8008330 <acis_main_task+0x298>)
 80080dc:	2100      	movs	r1, #0
 80080de:	4897      	ldr	r0, [pc, #604]	; (800833c <acis_main_task+0x2a4>)
 80080e0:	f007 fb64 	bl	800f7ac <osThreadNew>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b96      	ldr	r3, [pc, #600]	; (8008340 <acis_main_task+0x2a8>)
 80080e8:	601a      	str	r2, [r3, #0]
  memset(DragPointsRaw, 0, sizeof(DragPointsRaw));
 80080ea:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80080ee:	2100      	movs	r1, #0
 80080f0:	4894      	ldr	r0, [pc, #592]	; (8008344 <acis_main_task+0x2ac>)
 80080f2:	f00a fec2 	bl	8012e7a <memset>
  StatusSynchronizing = 1; //Read config
 80080f6:	4b94      	ldr	r3, [pc, #592]	; (8008348 <acis_main_task+0x2b0>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]
  while(1)
  {
    now = Delay_Tick;
 80080fc:	4b93      	ldr	r3, [pc, #588]	; (800834c <acis_main_task+0x2b4>)
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	60fb      	str	r3, [r7, #12]
    if(StatusSynchronizing == 0)
 8008102:	4b91      	ldr	r3, [pc, #580]	; (8008348 <acis_main_task+0x2b0>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d11c      	bne.n	8008146 <acis_main_task+0xae>
    {
      if(NeedLoad)
 800810c:	4b90      	ldr	r3, [pc, #576]	; (8008350 <acis_main_task+0x2b8>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <acis_main_task+0x92>
      {
        SyncSize = 0;
 8008116:	4b8f      	ldr	r3, [pc, #572]	; (8008354 <acis_main_task+0x2bc>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
        SyncStep = 0;
 800811c:	4b8e      	ldr	r3, [pc, #568]	; (8008358 <acis_main_task+0x2c0>)
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
        StatusSynchronizing = 1;
 8008122:	4b89      	ldr	r3, [pc, #548]	; (8008348 <acis_main_task+0x2b0>)
 8008124:	2201      	movs	r2, #1
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e00d      	b.n	8008146 <acis_main_task+0xae>
      }
      else if(NeedSave)
 800812a:	4b8c      	ldr	r3, [pc, #560]	; (800835c <acis_main_task+0x2c4>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d008      	beq.n	8008146 <acis_main_task+0xae>
      {
        SyncSize = 0;
 8008134:	4b87      	ldr	r3, [pc, #540]	; (8008354 <acis_main_task+0x2bc>)
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
        SyncStep = 0;
 800813a:	4b87      	ldr	r3, [pc, #540]	; (8008358 <acis_main_task+0x2c0>)
 800813c:	2200      	movs	r2, #0
 800813e:	701a      	strb	r2, [r3, #0]
        StatusSynchronizing = 2;
 8008140:	4b81      	ldr	r3, [pc, #516]	; (8008348 <acis_main_task+0x2b0>)
 8008142:	2202      	movs	r2, #2
 8008144:	701a      	strb	r2, [r3, #0]
      }
    }

    if(StatusSynchronizing == 1)
 8008146:	4b80      	ldr	r3, [pc, #512]	; (8008348 <acis_main_task+0x2b0>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	f040 8245 	bne.w	80085dc <acis_main_task+0x544>
    {
      StatusSynchronized = 0;
 8008152:	4b83      	ldr	r3, [pc, #524]	; (8008360 <acis_main_task+0x2c8>)
 8008154:	2200      	movs	r2, #0
 8008156:	701a      	strb	r2, [r3, #0]
      if(SyncStep == 0)
 8008158:	4b7f      	ldr	r3, [pc, #508]	; (8008358 <acis_main_task+0x2c0>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d161      	bne.n	8008226 <acis_main_task+0x18e>
      {
        if(NeedLoad)
 8008162:	4b7b      	ldr	r3, [pc, #492]	; (8008350 <acis_main_task+0x2b8>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d057      	beq.n	800821c <acis_main_task+0x184>
        {
          if(SyncSize == 0)
 800816c:	4b79      	ldr	r3, [pc, #484]	; (8008354 <acis_main_task+0x2bc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d114      	bne.n	800819e <acis_main_task+0x106>
          {
            SyncSize = 1;
 8008174:	4b77      	ldr	r3, [pc, #476]	; (8008354 <acis_main_task+0x2bc>)
 8008176:	2201      	movs	r2, #1
 8008178:	601a      	str	r2, [r3, #0]
            FlashRequestDone = 0;
 800817a:	4b7a      	ldr	r3, [pc, #488]	; (8008364 <acis_main_task+0x2cc>)
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
            SyncRequestDone = 0;
 8008180:	4b79      	ldr	r3, [pc, #484]	; (8008368 <acis_main_task+0x2d0>)
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
            PK_RestoreConfig.Destination = etrACIS;
 8008186:	4b79      	ldr	r3, [pc, #484]	; (800836c <acis_main_task+0x2d4>)
 8008188:	2202      	movs	r2, #2
 800818a:	709a      	strb	r2, [r3, #2]
            protPushSequence(&fifoSendingQueue, &PK_RestoreConfig, sizeof(PK_RestoreConfig));
 800818c:	2204      	movs	r2, #4
 800818e:	4977      	ldr	r1, [pc, #476]	; (800836c <acis_main_task+0x2d4>)
 8008190:	4866      	ldr	r0, [pc, #408]	; (800832c <acis_main_task+0x294>)
 8008192:	f004 fecf 	bl	800cf34 <protPushSequence>
            LastPacket = now;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	623b      	str	r3, [r7, #32]
 800819a:	f000 bceb 	b.w	8008b74 <acis_main_task+0xadc>
          }
          else
          {
            if(FlashRequestDone)
 800819e:	4b71      	ldr	r3, [pc, #452]	; (8008364 <acis_main_task+0x2cc>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d014      	beq.n	80081d2 <acis_main_task+0x13a>
            {
              FlashRequestDone = 0;
 80081a8:	4b6e      	ldr	r3, [pc, #440]	; (8008364 <acis_main_task+0x2cc>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
              SyncRequestDone = 0;
 80081ae:	4b6e      	ldr	r3, [pc, #440]	; (8008368 <acis_main_task+0x2d0>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
              SyncStep++;
 80081b4:	4b68      	ldr	r3, [pc, #416]	; (8008358 <acis_main_task+0x2c0>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	3301      	adds	r3, #1
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	4b66      	ldr	r3, [pc, #408]	; (8008358 <acis_main_task+0x2c0>)
 80081c0:	701a      	strb	r2, [r3, #0]
              NeedLoad = 0;
 80081c2:	4b63      	ldr	r3, [pc, #396]	; (8008350 <acis_main_task+0x2b8>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 80081c8:	4b62      	ldr	r3, [pc, #392]	; (8008354 <acis_main_task+0x2bc>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	f000 bcd1 	b.w	8008b74 <acis_main_task+0xadc>
            }
            else if(DelayDiff(now, LastPacket) > 3000000 || SyncError > 0)
 80081d2:	6a39      	ldr	r1, [r7, #32]
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f001 fd41 	bl	8009c5c <DelayDiff>
 80081da:	4602      	mov	r2, r0
 80081dc:	4b64      	ldr	r3, [pc, #400]	; (8008370 <acis_main_task+0x2d8>)
 80081de:	429a      	cmp	r2, r3
 80081e0:	d805      	bhi.n	80081ee <acis_main_task+0x156>
 80081e2:	4b64      	ldr	r3, [pc, #400]	; (8008374 <acis_main_task+0x2dc>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 84c3 	beq.w	8008b74 <acis_main_task+0xadc>
            {
              StatusSynchronizing = 0;
 80081ee:	4b56      	ldr	r3, [pc, #344]	; (8008348 <acis_main_task+0x2b0>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	701a      	strb	r2, [r3, #0]
              SyncStep = 0;
 80081f4:	4b58      	ldr	r3, [pc, #352]	; (8008358 <acis_main_task+0x2c0>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 80081fa:	4b56      	ldr	r3, [pc, #344]	; (8008354 <acis_main_task+0x2bc>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]
              NeedLoad = 0;
 8008200:	4b53      	ldr	r3, [pc, #332]	; (8008350 <acis_main_task+0x2b8>)
 8008202:	2200      	movs	r2, #0
 8008204:	701a      	strb	r2, [r3, #0]
              if(SyncError == 0)
 8008206:	4b5b      	ldr	r3, [pc, #364]	; (8008374 <acis_main_task+0x2dc>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 84b1 	bne.w	8008b74 <acis_main_task+0xadc>
                SyncError = 1;
 8008212:	4b58      	ldr	r3, [pc, #352]	; (8008374 <acis_main_task+0x2dc>)
 8008214:	2201      	movs	r2, #1
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	f000 bcac 	b.w	8008b74 <acis_main_task+0xadc>
            }
          }
        }
        else SyncStep = 1;
 800821c:	4b4e      	ldr	r3, [pc, #312]	; (8008358 <acis_main_task+0x2c0>)
 800821e:	2201      	movs	r2, #1
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	f000 bca7 	b.w	8008b74 <acis_main_task+0xadc>
      }
      else if(SyncStep == 1)
 8008226:	4b4c      	ldr	r3, [pc, #304]	; (8008358 <acis_main_task+0x2c0>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	f040 80e4 	bne.w	80083fa <acis_main_task+0x362>
      {
        if(SyncSize == 0)
 8008232:	4b48      	ldr	r3, [pc, #288]	; (8008354 <acis_main_task+0x2bc>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d148      	bne.n	80082cc <acis_main_task+0x234>
        {
          SyncSize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 800823a:	4b46      	ldr	r3, [pc, #280]	; (8008354 <acis_main_task+0x2bc>)
 800823c:	22c0      	movs	r2, #192	; 0xc0
 800823e:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 8008240:	4b44      	ldr	r3, [pc, #272]	; (8008354 <acis_main_task+0x2bc>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a4c      	ldr	r2, [pc, #304]	; (8008378 <acis_main_task+0x2e0>)
 8008246:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 8008248:	4b4c      	ldr	r3, [pc, #304]	; (800837c <acis_main_task+0x2e4>)
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 800824e:	4b46      	ldr	r3, [pc, #280]	; (8008368 <acis_main_task+0x2d0>)
 8008250:	2200      	movs	r2, #0
 8008252:	701a      	strb	r2, [r3, #0]
          PK_ConfigMemoryRequest.Destination = etrACIS;
 8008254:	4b4a      	ldr	r3, [pc, #296]	; (8008380 <acis_main_task+0x2e8>)
 8008256:	2202      	movs	r2, #2
 8008258:	709a      	strb	r2, [r3, #2]
          PK_ConfigMemoryRequest.configsize = SyncSize;
 800825a:	4b3e      	ldr	r3, [pc, #248]	; (8008354 <acis_main_task+0x2bc>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a48      	ldr	r2, [pc, #288]	; (8008380 <acis_main_task+0x2e8>)
 8008260:	6053      	str	r3, [r2, #4]
          PK_ConfigMemoryRequest.offset = SyncOffset;
 8008262:	4b46      	ldr	r3, [pc, #280]	; (800837c <acis_main_task+0x2e4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a46      	ldr	r2, [pc, #280]	; (8008380 <acis_main_task+0x2e8>)
 8008268:	6093      	str	r3, [r2, #8]

          if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 800826a:	4b43      	ldr	r3, [pc, #268]	; (8008378 <acis_main_task+0x2e0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2be0      	cmp	r3, #224	; 0xe0
 8008270:	d911      	bls.n	8008296 <acis_main_task+0x1fe>
          {
            PK_ConfigMemoryRequest.offset = SyncOffset;
 8008272:	4b42      	ldr	r3, [pc, #264]	; (800837c <acis_main_task+0x2e4>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a42      	ldr	r2, [pc, #264]	; (8008380 <acis_main_task+0x2e8>)
 8008278:	6093      	str	r3, [r2, #8]
            PK_ConfigMemoryRequest.size = PACKET_CONFIG_MAX_SIZE;
 800827a:	4b41      	ldr	r3, [pc, #260]	; (8008380 <acis_main_task+0x2e8>)
 800827c:	22e0      	movs	r2, #224	; 0xe0
 800827e:	60da      	str	r2, [r3, #12]
            SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 8008280:	4b3d      	ldr	r3, [pc, #244]	; (8008378 <acis_main_task+0x2e0>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3be0      	subs	r3, #224	; 0xe0
 8008286:	4a3c      	ldr	r2, [pc, #240]	; (8008378 <acis_main_task+0x2e0>)
 8008288:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_CONFIG_MAX_SIZE;
 800828a:	4b3c      	ldr	r3, [pc, #240]	; (800837c <acis_main_task+0x2e4>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	33e0      	adds	r3, #224	; 0xe0
 8008290:	4a3a      	ldr	r2, [pc, #232]	; (800837c <acis_main_task+0x2e4>)
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	e011      	b.n	80082ba <acis_main_task+0x222>
          }
          else
          {
            PK_ConfigMemoryRequest.offset = SyncOffset;
 8008296:	4b39      	ldr	r3, [pc, #228]	; (800837c <acis_main_task+0x2e4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a39      	ldr	r2, [pc, #228]	; (8008380 <acis_main_task+0x2e8>)
 800829c:	6093      	str	r3, [r2, #8]
            PK_ConfigMemoryRequest.size = SyncLeft;
 800829e:	4b36      	ldr	r3, [pc, #216]	; (8008378 <acis_main_task+0x2e0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a37      	ldr	r2, [pc, #220]	; (8008380 <acis_main_task+0x2e8>)
 80082a4:	60d3      	str	r3, [r2, #12]
            SyncOffset += SyncLeft;
 80082a6:	4b34      	ldr	r3, [pc, #208]	; (8008378 <acis_main_task+0x2e0>)
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	4b34      	ldr	r3, [pc, #208]	; (800837c <acis_main_task+0x2e4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4413      	add	r3, r2
 80082b0:	4a32      	ldr	r2, [pc, #200]	; (800837c <acis_main_task+0x2e4>)
 80082b2:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 80082b4:	4b30      	ldr	r3, [pc, #192]	; (8008378 <acis_main_task+0x2e0>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
          }
          protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryRequest, sizeof(PK_ConfigMemoryRequest));
 80082ba:	2210      	movs	r2, #16
 80082bc:	4930      	ldr	r1, [pc, #192]	; (8008380 <acis_main_task+0x2e8>)
 80082be:	481b      	ldr	r0, [pc, #108]	; (800832c <acis_main_task+0x294>)
 80082c0:	f004 fe38 	bl	800cf34 <protPushSequence>
          LastPacket = now;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	623b      	str	r3, [r7, #32]
 80082c8:	f000 bc54 	b.w	8008b74 <acis_main_task+0xadc>
        }
        else
        {
          if(SyncRequestDone)
 80082cc:	4b26      	ldr	r3, [pc, #152]	; (8008368 <acis_main_task+0x2d0>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d070      	beq.n	80083b8 <acis_main_task+0x320>
          {
            SyncRequestDone = 0;
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <acis_main_task+0x2d0>)
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 80082dc:	4b26      	ldr	r3, [pc, #152]	; (8008378 <acis_main_task+0x2e0>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <acis_main_task+0x264>
            {
              SyncStep++;
 80082e4:	4b1c      	ldr	r3, [pc, #112]	; (8008358 <acis_main_task+0x2c0>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	3301      	adds	r3, #1
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <acis_main_task+0x2c0>)
 80082f0:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 80082f2:	4b18      	ldr	r3, [pc, #96]	; (8008354 <acis_main_task+0x2bc>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f000 bc3c 	b.w	8008b74 <acis_main_task+0xadc>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 80082fc:	4b1e      	ldr	r3, [pc, #120]	; (8008378 <acis_main_task+0x2e0>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2be0      	cmp	r3, #224	; 0xe0
 8008302:	d93f      	bls.n	8008384 <acis_main_task+0x2ec>
              {
                PK_ConfigMemoryRequest.offset = SyncOffset;
 8008304:	4b1d      	ldr	r3, [pc, #116]	; (800837c <acis_main_task+0x2e4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1d      	ldr	r2, [pc, #116]	; (8008380 <acis_main_task+0x2e8>)
 800830a:	6093      	str	r3, [r2, #8]
                PK_ConfigMemoryRequest.size = PACKET_CONFIG_MAX_SIZE;
 800830c:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <acis_main_task+0x2e8>)
 800830e:	22e0      	movs	r2, #224	; 0xe0
 8008310:	60da      	str	r2, [r3, #12]
                SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 8008312:	4b19      	ldr	r3, [pc, #100]	; (8008378 <acis_main_task+0x2e0>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3be0      	subs	r3, #224	; 0xe0
 8008318:	4a17      	ldr	r2, [pc, #92]	; (8008378 <acis_main_task+0x2e0>)
 800831a:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_CONFIG_MAX_SIZE;
 800831c:	4b17      	ldr	r3, [pc, #92]	; (800837c <acis_main_task+0x2e4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	33e0      	adds	r3, #224	; 0xe0
 8008322:	4a16      	ldr	r2, [pc, #88]	; (800837c <acis_main_task+0x2e4>)
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	e03f      	b.n	80083a8 <acis_main_task+0x310>
 8008328:	20006340 	.word	0x20006340
 800832c:	20006940 	.word	0x20006940
 8008330:	080172a8 	.word	0x080172a8
 8008334:	0800126d 	.word	0x0800126d
 8008338:	2001efec 	.word	0x2001efec
 800833c:	08007fe5 	.word	0x08007fe5
 8008340:	2001efe8 	.word	0x2001efe8
 8008344:	200069ac 	.word	0x200069ac
 8008348:	2000697f 	.word	0x2000697f
 800834c:	40000c00 	.word	0x40000c00
 8008350:	20006986 	.word	0x20006986
 8008354:	2000698c 	.word	0x2000698c
 8008358:	20006987 	.word	0x20006987
 800835c:	20006985 	.word	0x20006985
 8008360:	2000697e 	.word	0x2000697e
 8008364:	20006989 	.word	0x20006989
 8008368:	20006988 	.word	0x20006988
 800836c:	20000340 	.word	0x20000340
 8008370:	002dc6c0 	.word	0x002dc6c0
 8008374:	20006998 	.word	0x20006998
 8008378:	20006990 	.word	0x20006990
 800837c:	20006994 	.word	0x20006994
 8008380:	200001e0 	.word	0x200001e0
              }
              else
              {
                PK_ConfigMemoryRequest.offset = SyncOffset;
 8008384:	4b89      	ldr	r3, [pc, #548]	; (80085ac <acis_main_task+0x514>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a89      	ldr	r2, [pc, #548]	; (80085b0 <acis_main_task+0x518>)
 800838a:	6093      	str	r3, [r2, #8]
                PK_ConfigMemoryRequest.size = SyncLeft;
 800838c:	4b89      	ldr	r3, [pc, #548]	; (80085b4 <acis_main_task+0x51c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a87      	ldr	r2, [pc, #540]	; (80085b0 <acis_main_task+0x518>)
 8008392:	60d3      	str	r3, [r2, #12]
                SyncOffset += SyncLeft;
 8008394:	4b87      	ldr	r3, [pc, #540]	; (80085b4 <acis_main_task+0x51c>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	4b84      	ldr	r3, [pc, #528]	; (80085ac <acis_main_task+0x514>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4413      	add	r3, r2
 800839e:	4a83      	ldr	r2, [pc, #524]	; (80085ac <acis_main_task+0x514>)
 80083a0:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 80083a2:	4b84      	ldr	r3, [pc, #528]	; (80085b4 <acis_main_task+0x51c>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
              }
              protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryRequest, sizeof(PK_ConfigMemoryRequest));
 80083a8:	2210      	movs	r2, #16
 80083aa:	4981      	ldr	r1, [pc, #516]	; (80085b0 <acis_main_task+0x518>)
 80083ac:	4882      	ldr	r0, [pc, #520]	; (80085b8 <acis_main_task+0x520>)
 80083ae:	f004 fdc1 	bl	800cf34 <protPushSequence>
              LastPacket = now;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	623b      	str	r3, [r7, #32]
 80083b6:	e3dd      	b.n	8008b74 <acis_main_task+0xadc>
            }

          }
          else if(DelayDiff(now, LastPacket) > 1000000 || SyncError > 0)
 80083b8:	6a39      	ldr	r1, [r7, #32]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f001 fc4e 	bl	8009c5c <DelayDiff>
 80083c0:	4602      	mov	r2, r0
 80083c2:	4b7e      	ldr	r3, [pc, #504]	; (80085bc <acis_main_task+0x524>)
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d805      	bhi.n	80083d4 <acis_main_task+0x33c>
 80083c8:	4b7d      	ldr	r3, [pc, #500]	; (80085c0 <acis_main_task+0x528>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 83d0 	beq.w	8008b74 <acis_main_task+0xadc>
          {
            StatusSynchronizing = 0;
 80083d4:	4b7b      	ldr	r3, [pc, #492]	; (80085c4 <acis_main_task+0x52c>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 80083da:	4b7b      	ldr	r3, [pc, #492]	; (80085c8 <acis_main_task+0x530>)
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 80083e0:	4b7a      	ldr	r3, [pc, #488]	; (80085cc <acis_main_task+0x534>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 80083e6:	4b76      	ldr	r3, [pc, #472]	; (80085c0 <acis_main_task+0x528>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f040 83c1 	bne.w	8008b74 <acis_main_task+0xadc>
              SyncError = 1;
 80083f2:	4b73      	ldr	r3, [pc, #460]	; (80085c0 <acis_main_task+0x528>)
 80083f4:	2201      	movs	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e3bc      	b.n	8008b74 <acis_main_task+0xadc>
          }
        }
      }
      else if(SyncStep > 1 && SyncStep <= TABLE_SETUPS_MAX + 1)
 80083fa:	4b73      	ldr	r3, [pc, #460]	; (80085c8 <acis_main_task+0x530>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b01      	cmp	r3, #1
 8008402:	f240 80c2 	bls.w	800858a <acis_main_task+0x4f2>
 8008406:	4b70      	ldr	r3, [pc, #448]	; (80085c8 <acis_main_task+0x530>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b05      	cmp	r3, #5
 800840e:	f200 80bc 	bhi.w	800858a <acis_main_task+0x4f2>
      {
        if(SyncSize == 0)
 8008412:	4b6e      	ldr	r3, [pc, #440]	; (80085cc <acis_main_task+0x534>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d14f      	bne.n	80084ba <acis_main_task+0x422>
        {
          SyncSize = sizeof(sAcisIgnTable);
 800841a:	4b6c      	ldr	r3, [pc, #432]	; (80085cc <acis_main_task+0x534>)
 800841c:	f640 426c 	movw	r2, #3180	; 0xc6c
 8008420:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 8008422:	4b6a      	ldr	r3, [pc, #424]	; (80085cc <acis_main_task+0x534>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a63      	ldr	r2, [pc, #396]	; (80085b4 <acis_main_task+0x51c>)
 8008428:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 800842a:	4b60      	ldr	r3, [pc, #384]	; (80085ac <acis_main_task+0x514>)
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 8008430:	4b67      	ldr	r3, [pc, #412]	; (80085d0 <acis_main_task+0x538>)
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]
          PK_TableMemoryRequest.Destination = etrACIS;
 8008436:	4b67      	ldr	r3, [pc, #412]	; (80085d4 <acis_main_task+0x53c>)
 8008438:	2202      	movs	r2, #2
 800843a:	709a      	strb	r2, [r3, #2]
          PK_TableMemoryRequest.tablesize = SyncSize;
 800843c:	4b63      	ldr	r3, [pc, #396]	; (80085cc <acis_main_task+0x534>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a64      	ldr	r2, [pc, #400]	; (80085d4 <acis_main_task+0x53c>)
 8008442:	6093      	str	r3, [r2, #8]
          PK_TableMemoryRequest.table = SyncStep - 2;
 8008444:	4b60      	ldr	r3, [pc, #384]	; (80085c8 <acis_main_task+0x530>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	b2db      	uxtb	r3, r3
 800844a:	3b02      	subs	r3, #2
 800844c:	461a      	mov	r2, r3
 800844e:	4b61      	ldr	r3, [pc, #388]	; (80085d4 <acis_main_task+0x53c>)
 8008450:	605a      	str	r2, [r3, #4]
          PK_TableMemoryRequest.offset = SyncOffset;
 8008452:	4b56      	ldr	r3, [pc, #344]	; (80085ac <acis_main_task+0x514>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a5f      	ldr	r2, [pc, #380]	; (80085d4 <acis_main_task+0x53c>)
 8008458:	60d3      	str	r3, [r2, #12]

          if(SyncLeft > PACKET_TABLE_MAX_SIZE)
 800845a:	4b56      	ldr	r3, [pc, #344]	; (80085b4 <acis_main_task+0x51c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2be0      	cmp	r3, #224	; 0xe0
 8008460:	d911      	bls.n	8008486 <acis_main_task+0x3ee>
          {
            PK_TableMemoryRequest.offset = SyncOffset;
 8008462:	4b52      	ldr	r3, [pc, #328]	; (80085ac <acis_main_task+0x514>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a5b      	ldr	r2, [pc, #364]	; (80085d4 <acis_main_task+0x53c>)
 8008468:	60d3      	str	r3, [r2, #12]
            PK_TableMemoryRequest.size = PACKET_TABLE_MAX_SIZE;
 800846a:	4b5a      	ldr	r3, [pc, #360]	; (80085d4 <acis_main_task+0x53c>)
 800846c:	22e0      	movs	r2, #224	; 0xe0
 800846e:	611a      	str	r2, [r3, #16]
            SyncLeft -= PACKET_TABLE_MAX_SIZE;
 8008470:	4b50      	ldr	r3, [pc, #320]	; (80085b4 <acis_main_task+0x51c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3be0      	subs	r3, #224	; 0xe0
 8008476:	4a4f      	ldr	r2, [pc, #316]	; (80085b4 <acis_main_task+0x51c>)
 8008478:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_TABLE_MAX_SIZE;
 800847a:	4b4c      	ldr	r3, [pc, #304]	; (80085ac <acis_main_task+0x514>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	33e0      	adds	r3, #224	; 0xe0
 8008480:	4a4a      	ldr	r2, [pc, #296]	; (80085ac <acis_main_task+0x514>)
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	e011      	b.n	80084aa <acis_main_task+0x412>
          }
          else
          {
            PK_TableMemoryRequest.offset = SyncOffset;
 8008486:	4b49      	ldr	r3, [pc, #292]	; (80085ac <acis_main_task+0x514>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a52      	ldr	r2, [pc, #328]	; (80085d4 <acis_main_task+0x53c>)
 800848c:	60d3      	str	r3, [r2, #12]
            PK_TableMemoryRequest.size = SyncLeft;
 800848e:	4b49      	ldr	r3, [pc, #292]	; (80085b4 <acis_main_task+0x51c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a50      	ldr	r2, [pc, #320]	; (80085d4 <acis_main_task+0x53c>)
 8008494:	6113      	str	r3, [r2, #16]
            SyncOffset += SyncLeft;
 8008496:	4b47      	ldr	r3, [pc, #284]	; (80085b4 <acis_main_task+0x51c>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b44      	ldr	r3, [pc, #272]	; (80085ac <acis_main_task+0x514>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4413      	add	r3, r2
 80084a0:	4a42      	ldr	r2, [pc, #264]	; (80085ac <acis_main_task+0x514>)
 80084a2:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 80084a4:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <acis_main_task+0x51c>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
          }
          protPushSequence(&fifoSendingQueue, &PK_TableMemoryRequest, sizeof(PK_TableMemoryRequest));
 80084aa:	2214      	movs	r2, #20
 80084ac:	4949      	ldr	r1, [pc, #292]	; (80085d4 <acis_main_task+0x53c>)
 80084ae:	4842      	ldr	r0, [pc, #264]	; (80085b8 <acis_main_task+0x520>)
 80084b0:	f004 fd40 	bl	800cf34 <protPushSequence>
          LastPacket = now;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	623b      	str	r3, [r7, #32]
        if(SyncSize == 0)
 80084b8:	e359      	b.n	8008b6e <acis_main_task+0xad6>
        }
        else
        {
          if(SyncRequestDone)
 80084ba:	4b45      	ldr	r3, [pc, #276]	; (80085d0 <acis_main_task+0x538>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d041      	beq.n	8008548 <acis_main_task+0x4b0>
          {
            SyncRequestDone = 0;
 80084c4:	4b42      	ldr	r3, [pc, #264]	; (80085d0 <acis_main_task+0x538>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 80084ca:	4b3a      	ldr	r3, [pc, #232]	; (80085b4 <acis_main_task+0x51c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <acis_main_task+0x450>
            {
              SyncStep++;
 80084d2:	4b3d      	ldr	r3, [pc, #244]	; (80085c8 <acis_main_task+0x530>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	3301      	adds	r3, #1
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	4b3a      	ldr	r3, [pc, #232]	; (80085c8 <acis_main_task+0x530>)
 80084de:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 80084e0:	4b3a      	ldr	r3, [pc, #232]	; (80085cc <acis_main_task+0x534>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
        if(SyncSize == 0)
 80084e6:	e342      	b.n	8008b6e <acis_main_task+0xad6>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 80084e8:	4b32      	ldr	r3, [pc, #200]	; (80085b4 <acis_main_task+0x51c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2be0      	cmp	r3, #224	; 0xe0
 80084ee:	d911      	bls.n	8008514 <acis_main_task+0x47c>
              {
                PK_TableMemoryRequest.offset = SyncOffset;
 80084f0:	4b2e      	ldr	r3, [pc, #184]	; (80085ac <acis_main_task+0x514>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a37      	ldr	r2, [pc, #220]	; (80085d4 <acis_main_task+0x53c>)
 80084f6:	60d3      	str	r3, [r2, #12]
                PK_TableMemoryRequest.size = PACKET_TABLE_MAX_SIZE;
 80084f8:	4b36      	ldr	r3, [pc, #216]	; (80085d4 <acis_main_task+0x53c>)
 80084fa:	22e0      	movs	r2, #224	; 0xe0
 80084fc:	611a      	str	r2, [r3, #16]
                SyncLeft -= PACKET_TABLE_MAX_SIZE;
 80084fe:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <acis_main_task+0x51c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3be0      	subs	r3, #224	; 0xe0
 8008504:	4a2b      	ldr	r2, [pc, #172]	; (80085b4 <acis_main_task+0x51c>)
 8008506:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_TABLE_MAX_SIZE;
 8008508:	4b28      	ldr	r3, [pc, #160]	; (80085ac <acis_main_task+0x514>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	33e0      	adds	r3, #224	; 0xe0
 800850e:	4a27      	ldr	r2, [pc, #156]	; (80085ac <acis_main_task+0x514>)
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	e011      	b.n	8008538 <acis_main_task+0x4a0>
              }
              else
              {
                PK_TableMemoryRequest.offset = SyncOffset;
 8008514:	4b25      	ldr	r3, [pc, #148]	; (80085ac <acis_main_task+0x514>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a2e      	ldr	r2, [pc, #184]	; (80085d4 <acis_main_task+0x53c>)
 800851a:	60d3      	str	r3, [r2, #12]
                PK_TableMemoryRequest.size = SyncLeft;
 800851c:	4b25      	ldr	r3, [pc, #148]	; (80085b4 <acis_main_task+0x51c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a2c      	ldr	r2, [pc, #176]	; (80085d4 <acis_main_task+0x53c>)
 8008522:	6113      	str	r3, [r2, #16]
                SyncOffset += SyncLeft;
 8008524:	4b23      	ldr	r3, [pc, #140]	; (80085b4 <acis_main_task+0x51c>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	4b20      	ldr	r3, [pc, #128]	; (80085ac <acis_main_task+0x514>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4413      	add	r3, r2
 800852e:	4a1f      	ldr	r2, [pc, #124]	; (80085ac <acis_main_task+0x514>)
 8008530:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 8008532:	4b20      	ldr	r3, [pc, #128]	; (80085b4 <acis_main_task+0x51c>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
              }
              protPushSequence(&fifoSendingQueue, &PK_TableMemoryRequest, sizeof(PK_TableMemoryRequest));
 8008538:	2214      	movs	r2, #20
 800853a:	4926      	ldr	r1, [pc, #152]	; (80085d4 <acis_main_task+0x53c>)
 800853c:	481e      	ldr	r0, [pc, #120]	; (80085b8 <acis_main_task+0x520>)
 800853e:	f004 fcf9 	bl	800cf34 <protPushSequence>
              LastPacket = now;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	623b      	str	r3, [r7, #32]
        if(SyncSize == 0)
 8008546:	e312      	b.n	8008b6e <acis_main_task+0xad6>
            }

          }
          else if(DelayDiff(now, LastPacket) > 1000000 || SyncError > 0)
 8008548:	6a39      	ldr	r1, [r7, #32]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f001 fb86 	bl	8009c5c <DelayDiff>
 8008550:	4602      	mov	r2, r0
 8008552:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <acis_main_task+0x524>)
 8008554:	429a      	cmp	r2, r3
 8008556:	d805      	bhi.n	8008564 <acis_main_task+0x4cc>
 8008558:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <acis_main_task+0x528>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 8305 	beq.w	8008b6e <acis_main_task+0xad6>
          {
            StatusSynchronizing = 0;
 8008564:	4b17      	ldr	r3, [pc, #92]	; (80085c4 <acis_main_task+0x52c>)
 8008566:	2200      	movs	r2, #0
 8008568:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 800856a:	4b17      	ldr	r3, [pc, #92]	; (80085c8 <acis_main_task+0x530>)
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 8008570:	4b16      	ldr	r3, [pc, #88]	; (80085cc <acis_main_task+0x534>)
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <acis_main_task+0x528>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 82f6 	bne.w	8008b6e <acis_main_task+0xad6>
              SyncError = 1;
 8008582:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <acis_main_task+0x528>)
 8008584:	2201      	movs	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
        if(SyncSize == 0)
 8008588:	e2f1      	b.n	8008b6e <acis_main_task+0xad6>
          }
        }
      }
      else
      {
        StatusSynchronizing = 0;
 800858a:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <acis_main_task+0x52c>)
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
        SyncStep = 0;
 8008590:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <acis_main_task+0x530>)
 8008592:	2200      	movs	r2, #0
 8008594:	701a      	strb	r2, [r3, #0]
        SyncSize = 0;
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <acis_main_task+0x534>)
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
        SyncError = 0;
 800859c:	4b08      	ldr	r3, [pc, #32]	; (80085c0 <acis_main_task+0x528>)
 800859e:	2200      	movs	r2, #0
 80085a0:	701a      	strb	r2, [r3, #0]
        StatusSynchronized = 1;
 80085a2:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <acis_main_task+0x540>)
 80085a4:	2201      	movs	r2, #1
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e2e4      	b.n	8008b74 <acis_main_task+0xadc>
 80085aa:	bf00      	nop
 80085ac:	20006994 	.word	0x20006994
 80085b0:	200001e0 	.word	0x200001e0
 80085b4:	20006990 	.word	0x20006990
 80085b8:	20006940 	.word	0x20006940
 80085bc:	000f4240 	.word	0x000f4240
 80085c0:	20006998 	.word	0x20006998
 80085c4:	2000697f 	.word	0x2000697f
 80085c8:	20006987 	.word	0x20006987
 80085cc:	2000698c 	.word	0x2000698c
 80085d0:	20006988 	.word	0x20006988
 80085d4:	200000a0 	.word	0x200000a0
 80085d8:	2000697e 	.word	0x2000697e
      }
    }
    else if(StatusSynchronizing == 2)
 80085dc:	4b81      	ldr	r3, [pc, #516]	; (80087e4 <acis_main_task+0x74c>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	f040 82c6 	bne.w	8008b74 <acis_main_task+0xadc>
    {
      StatusSynchronized = 0;
 80085e8:	4b7f      	ldr	r3, [pc, #508]	; (80087e8 <acis_main_task+0x750>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]
      if(SyncStep == 0)
 80085ee:	4b7f      	ldr	r3, [pc, #508]	; (80087ec <acis_main_task+0x754>)
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 810f 	bne.w	8008818 <acis_main_task+0x780>
      {
        if(SyncSize == 0)
 80085fa:	4b7d      	ldr	r3, [pc, #500]	; (80087f0 <acis_main_task+0x758>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d167      	bne.n	80086d2 <acis_main_task+0x63a>
        {
          SyncSize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 8008602:	4b7b      	ldr	r3, [pc, #492]	; (80087f0 <acis_main_task+0x758>)
 8008604:	22c0      	movs	r2, #192	; 0xc0
 8008606:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 8008608:	4b79      	ldr	r3, [pc, #484]	; (80087f0 <acis_main_task+0x758>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a79      	ldr	r2, [pc, #484]	; (80087f4 <acis_main_task+0x75c>)
 800860e:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 8008610:	4b79      	ldr	r3, [pc, #484]	; (80087f8 <acis_main_task+0x760>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 8008616:	4b79      	ldr	r3, [pc, #484]	; (80087fc <acis_main_task+0x764>)
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
          PK_ConfigMemoryData.Destination = etrACIS;
 800861c:	4b78      	ldr	r3, [pc, #480]	; (8008800 <acis_main_task+0x768>)
 800861e:	2202      	movs	r2, #2
 8008620:	709a      	strb	r2, [r3, #2]
          PK_ConfigMemoryData.configsize = SyncSize;
 8008622:	4b73      	ldr	r3, [pc, #460]	; (80087f0 <acis_main_task+0x758>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a76      	ldr	r2, [pc, #472]	; (8008800 <acis_main_task+0x768>)
 8008628:	6093      	str	r3, [r2, #8]
          PK_ConfigMemoryData.offset = SyncOffset;
 800862a:	4b73      	ldr	r3, [pc, #460]	; (80087f8 <acis_main_task+0x760>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a74      	ldr	r2, [pc, #464]	; (8008800 <acis_main_task+0x768>)
 8008630:	60d3      	str	r3, [r2, #12]

          if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 8008632:	4b70      	ldr	r3, [pc, #448]	; (80087f4 <acis_main_task+0x75c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2be0      	cmp	r3, #224	; 0xe0
 8008638:	d911      	bls.n	800865e <acis_main_task+0x5c6>
          {
            PK_ConfigMemoryData.offset = SyncOffset;
 800863a:	4b6f      	ldr	r3, [pc, #444]	; (80087f8 <acis_main_task+0x760>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a70      	ldr	r2, [pc, #448]	; (8008800 <acis_main_task+0x768>)
 8008640:	60d3      	str	r3, [r2, #12]
            PK_ConfigMemoryData.size = PACKET_CONFIG_MAX_SIZE;
 8008642:	4b6f      	ldr	r3, [pc, #444]	; (8008800 <acis_main_task+0x768>)
 8008644:	22e0      	movs	r2, #224	; 0xe0
 8008646:	611a      	str	r2, [r3, #16]
            SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 8008648:	4b6a      	ldr	r3, [pc, #424]	; (80087f4 <acis_main_task+0x75c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3be0      	subs	r3, #224	; 0xe0
 800864e:	4a69      	ldr	r2, [pc, #420]	; (80087f4 <acis_main_task+0x75c>)
 8008650:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_CONFIG_MAX_SIZE;
 8008652:	4b69      	ldr	r3, [pc, #420]	; (80087f8 <acis_main_task+0x760>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	33e0      	adds	r3, #224	; 0xe0
 8008658:	4a67      	ldr	r2, [pc, #412]	; (80087f8 <acis_main_task+0x760>)
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	e011      	b.n	8008682 <acis_main_task+0x5ea>
          }
          else
          {
            PK_ConfigMemoryData.offset = SyncOffset;
 800865e:	4b66      	ldr	r3, [pc, #408]	; (80087f8 <acis_main_task+0x760>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a67      	ldr	r2, [pc, #412]	; (8008800 <acis_main_task+0x768>)
 8008664:	60d3      	str	r3, [r2, #12]
            PK_ConfigMemoryData.size = SyncLeft;
 8008666:	4b63      	ldr	r3, [pc, #396]	; (80087f4 <acis_main_task+0x75c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a65      	ldr	r2, [pc, #404]	; (8008800 <acis_main_task+0x768>)
 800866c:	6113      	str	r3, [r2, #16]
            SyncOffset += SyncLeft;
 800866e:	4b61      	ldr	r3, [pc, #388]	; (80087f4 <acis_main_task+0x75c>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4b61      	ldr	r3, [pc, #388]	; (80087f8 <acis_main_task+0x760>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4413      	add	r3, r2
 8008678:	4a5f      	ldr	r2, [pc, #380]	; (80087f8 <acis_main_task+0x760>)
 800867a:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 800867c:	4b5d      	ldr	r3, [pc, #372]	; (80087f4 <acis_main_task+0x75c>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
          }

          memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[PK_ConfigMemoryData.offset], PK_ConfigMemoryData.size);
 8008682:	4b5f      	ldr	r3, [pc, #380]	; (8008800 <acis_main_task+0x768>)
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4a5f      	ldr	r2, [pc, #380]	; (8008804 <acis_main_task+0x76c>)
 8008688:	1899      	adds	r1, r3, r2
 800868a:	4b5d      	ldr	r3, [pc, #372]	; (8008800 <acis_main_task+0x768>)
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	461a      	mov	r2, r3
 8008690:	485d      	ldr	r0, [pc, #372]	; (8008808 <acis_main_task+0x770>)
 8008692:	f00a fbe7 	bl	8012e64 <memcpy>
          memset(&PK_ConfigMemoryData.data[PK_ConfigMemoryData.size], 0, sizeof(PK_ConfigMemoryData.data) - PK_ConfigMemoryData.size);
 8008696:	4b5a      	ldr	r3, [pc, #360]	; (8008800 <acis_main_task+0x768>)
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	3310      	adds	r3, #16
 800869c:	4a58      	ldr	r2, [pc, #352]	; (8008800 <acis_main_task+0x768>)
 800869e:	4413      	add	r3, r2
 80086a0:	1d98      	adds	r0, r3, #6
 80086a2:	4b57      	ldr	r3, [pc, #348]	; (8008800 <acis_main_task+0x768>)
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 80086aa:	461a      	mov	r2, r3
 80086ac:	2100      	movs	r1, #0
 80086ae:	f00a fbe4 	bl	8012e7a <memset>
          PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 80086b2:	21e0      	movs	r1, #224	; 0xe0
 80086b4:	4854      	ldr	r0, [pc, #336]	; (8008808 <acis_main_task+0x770>)
 80086b6:	f001 f9d7 	bl	8009a68 <CRC16_Generate>
 80086ba:	4603      	mov	r3, r0
 80086bc:	461a      	mov	r2, r3
 80086be:	4b50      	ldr	r3, [pc, #320]	; (8008800 <acis_main_task+0x768>)
 80086c0:	829a      	strh	r2, [r3, #20]

          protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 80086c2:	22f8      	movs	r2, #248	; 0xf8
 80086c4:	494e      	ldr	r1, [pc, #312]	; (8008800 <acis_main_task+0x768>)
 80086c6:	4851      	ldr	r0, [pc, #324]	; (800880c <acis_main_task+0x774>)
 80086c8:	f004 fc34 	bl	800cf34 <protPushSequence>
          LastPacket = now;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	623b      	str	r3, [r7, #32]
 80086d0:	e250      	b.n	8008b74 <acis_main_task+0xadc>
        }
        else
        {
          if(SyncRequestDone)
 80086d2:	4b4a      	ldr	r3, [pc, #296]	; (80087fc <acis_main_task+0x764>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d061      	beq.n	80087a0 <acis_main_task+0x708>
          {
            SyncRequestDone = 0;
 80086dc:	4b47      	ldr	r3, [pc, #284]	; (80087fc <acis_main_task+0x764>)
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 80086e2:	4b44      	ldr	r3, [pc, #272]	; (80087f4 <acis_main_task+0x75c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10a      	bne.n	8008700 <acis_main_task+0x668>
            {
              SyncStep++;
 80086ea:	4b40      	ldr	r3, [pc, #256]	; (80087ec <acis_main_task+0x754>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	3301      	adds	r3, #1
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	4b3d      	ldr	r3, [pc, #244]	; (80087ec <acis_main_task+0x754>)
 80086f6:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 80086f8:	4b3d      	ldr	r3, [pc, #244]	; (80087f0 <acis_main_task+0x758>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e239      	b.n	8008b74 <acis_main_task+0xadc>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 8008700:	4b3c      	ldr	r3, [pc, #240]	; (80087f4 <acis_main_task+0x75c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2be0      	cmp	r3, #224	; 0xe0
 8008706:	d911      	bls.n	800872c <acis_main_task+0x694>
              {
                PK_ConfigMemoryData.offset = SyncOffset;
 8008708:	4b3b      	ldr	r3, [pc, #236]	; (80087f8 <acis_main_task+0x760>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a3c      	ldr	r2, [pc, #240]	; (8008800 <acis_main_task+0x768>)
 800870e:	60d3      	str	r3, [r2, #12]
                PK_ConfigMemoryData.size = PACKET_CONFIG_MAX_SIZE;
 8008710:	4b3b      	ldr	r3, [pc, #236]	; (8008800 <acis_main_task+0x768>)
 8008712:	22e0      	movs	r2, #224	; 0xe0
 8008714:	611a      	str	r2, [r3, #16]
                SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 8008716:	4b37      	ldr	r3, [pc, #220]	; (80087f4 <acis_main_task+0x75c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3be0      	subs	r3, #224	; 0xe0
 800871c:	4a35      	ldr	r2, [pc, #212]	; (80087f4 <acis_main_task+0x75c>)
 800871e:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_CONFIG_MAX_SIZE;
 8008720:	4b35      	ldr	r3, [pc, #212]	; (80087f8 <acis_main_task+0x760>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	33e0      	adds	r3, #224	; 0xe0
 8008726:	4a34      	ldr	r2, [pc, #208]	; (80087f8 <acis_main_task+0x760>)
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	e011      	b.n	8008750 <acis_main_task+0x6b8>
              }
              else
              {
                PK_ConfigMemoryData.offset = SyncOffset;
 800872c:	4b32      	ldr	r3, [pc, #200]	; (80087f8 <acis_main_task+0x760>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a33      	ldr	r2, [pc, #204]	; (8008800 <acis_main_task+0x768>)
 8008732:	60d3      	str	r3, [r2, #12]
                PK_ConfigMemoryData.size = SyncLeft;
 8008734:	4b2f      	ldr	r3, [pc, #188]	; (80087f4 <acis_main_task+0x75c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a31      	ldr	r2, [pc, #196]	; (8008800 <acis_main_task+0x768>)
 800873a:	6113      	str	r3, [r2, #16]
                SyncOffset += SyncLeft;
 800873c:	4b2d      	ldr	r3, [pc, #180]	; (80087f4 <acis_main_task+0x75c>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	4b2d      	ldr	r3, [pc, #180]	; (80087f8 <acis_main_task+0x760>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4413      	add	r3, r2
 8008746:	4a2c      	ldr	r2, [pc, #176]	; (80087f8 <acis_main_task+0x760>)
 8008748:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 800874a:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <acis_main_task+0x75c>)
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
              }

              memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[PK_ConfigMemoryData.offset], PK_ConfigMemoryData.size);
 8008750:	4b2b      	ldr	r3, [pc, #172]	; (8008800 <acis_main_task+0x768>)
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	4a2b      	ldr	r2, [pc, #172]	; (8008804 <acis_main_task+0x76c>)
 8008756:	1899      	adds	r1, r3, r2
 8008758:	4b29      	ldr	r3, [pc, #164]	; (8008800 <acis_main_task+0x768>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	461a      	mov	r2, r3
 800875e:	482a      	ldr	r0, [pc, #168]	; (8008808 <acis_main_task+0x770>)
 8008760:	f00a fb80 	bl	8012e64 <memcpy>
              memset(&PK_ConfigMemoryData.data[PK_ConfigMemoryData.size], 0, sizeof(PK_ConfigMemoryData.data) - PK_ConfigMemoryData.size);
 8008764:	4b26      	ldr	r3, [pc, #152]	; (8008800 <acis_main_task+0x768>)
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	3310      	adds	r3, #16
 800876a:	4a25      	ldr	r2, [pc, #148]	; (8008800 <acis_main_task+0x768>)
 800876c:	4413      	add	r3, r2
 800876e:	1d98      	adds	r0, r3, #6
 8008770:	4b23      	ldr	r3, [pc, #140]	; (8008800 <acis_main_task+0x768>)
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8008778:	461a      	mov	r2, r3
 800877a:	2100      	movs	r1, #0
 800877c:	f00a fb7d 	bl	8012e7a <memset>
              PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 8008780:	21e0      	movs	r1, #224	; 0xe0
 8008782:	4821      	ldr	r0, [pc, #132]	; (8008808 <acis_main_task+0x770>)
 8008784:	f001 f970 	bl	8009a68 <CRC16_Generate>
 8008788:	4603      	mov	r3, r0
 800878a:	461a      	mov	r2, r3
 800878c:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <acis_main_task+0x768>)
 800878e:	829a      	strh	r2, [r3, #20]

              protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 8008790:	22f8      	movs	r2, #248	; 0xf8
 8008792:	491b      	ldr	r1, [pc, #108]	; (8008800 <acis_main_task+0x768>)
 8008794:	481d      	ldr	r0, [pc, #116]	; (800880c <acis_main_task+0x774>)
 8008796:	f004 fbcd 	bl	800cf34 <protPushSequence>
              LastPacket = now;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	623b      	str	r3, [r7, #32]
 800879e:	e1e9      	b.n	8008b74 <acis_main_task+0xadc>
            }

          }
          else if(DelayDiff(now, LastPacket) > 1000000 || SyncError > 0)
 80087a0:	6a39      	ldr	r1, [r7, #32]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f001 fa5a 	bl	8009c5c <DelayDiff>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4b19      	ldr	r3, [pc, #100]	; (8008810 <acis_main_task+0x778>)
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d805      	bhi.n	80087bc <acis_main_task+0x724>
 80087b0:	4b18      	ldr	r3, [pc, #96]	; (8008814 <acis_main_task+0x77c>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 81dc 	beq.w	8008b74 <acis_main_task+0xadc>
          {
            StatusSynchronizing = 0;
 80087bc:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <acis_main_task+0x74c>)
 80087be:	2200      	movs	r2, #0
 80087c0:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 80087c2:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <acis_main_task+0x754>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 80087c8:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <acis_main_task+0x758>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <acis_main_task+0x77c>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f040 81cd 	bne.w	8008b74 <acis_main_task+0xadc>
              SyncError = 1;
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <acis_main_task+0x77c>)
 80087dc:	2201      	movs	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	e1c8      	b.n	8008b74 <acis_main_task+0xadc>
 80087e2:	bf00      	nop
 80087e4:	2000697f 	.word	0x2000697f
 80087e8:	2000697e 	.word	0x2000697e
 80087ec:	20006987 	.word	0x20006987
 80087f0:	2000698c 	.word	0x2000698c
 80087f4:	20006990 	.word	0x20006990
 80087f8:	20006994 	.word	0x20006994
 80087fc:	20006988 	.word	0x20006988
 8008800:	20000200 	.word	0x20000200
 8008804:	20002f20 	.word	0x20002f20
 8008808:	20000216 	.word	0x20000216
 800880c:	20006940 	.word	0x20006940
 8008810:	000f4240 	.word	0x000f4240
 8008814:	20006998 	.word	0x20006998
          }
        }
      }
      else if(SyncStep > 0 && SyncStep <= TABLE_SETUPS_MAX)
 8008818:	4b9c      	ldr	r3, [pc, #624]	; (8008a8c <acis_main_task+0x9f4>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8112 	beq.w	8008a48 <acis_main_task+0x9b0>
 8008824:	4b99      	ldr	r3, [pc, #612]	; (8008a8c <acis_main_task+0x9f4>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b04      	cmp	r3, #4
 800882c:	f200 810c 	bhi.w	8008a48 <acis_main_task+0x9b0>
      {
        if(SyncSize == 0)
 8008830:	4b97      	ldr	r3, [pc, #604]	; (8008a90 <acis_main_task+0x9f8>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d177      	bne.n	8008928 <acis_main_task+0x890>
        {
          SyncSize = sizeof(sAcisIgnTable);
 8008838:	4b95      	ldr	r3, [pc, #596]	; (8008a90 <acis_main_task+0x9f8>)
 800883a:	f640 426c 	movw	r2, #3180	; 0xc6c
 800883e:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 8008840:	4b93      	ldr	r3, [pc, #588]	; (8008a90 <acis_main_task+0x9f8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a93      	ldr	r2, [pc, #588]	; (8008a94 <acis_main_task+0x9fc>)
 8008846:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 8008848:	4b93      	ldr	r3, [pc, #588]	; (8008a98 <acis_main_task+0xa00>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 800884e:	4b93      	ldr	r3, [pc, #588]	; (8008a9c <acis_main_task+0xa04>)
 8008850:	2200      	movs	r2, #0
 8008852:	701a      	strb	r2, [r3, #0]
          PK_TableMemoryData.Destination = etrACIS;
 8008854:	4b92      	ldr	r3, [pc, #584]	; (8008aa0 <acis_main_task+0xa08>)
 8008856:	2202      	movs	r2, #2
 8008858:	709a      	strb	r2, [r3, #2]
          PK_TableMemoryData.tablesize = SyncSize;
 800885a:	4b8d      	ldr	r3, [pc, #564]	; (8008a90 <acis_main_task+0x9f8>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a90      	ldr	r2, [pc, #576]	; (8008aa0 <acis_main_task+0xa08>)
 8008860:	60d3      	str	r3, [r2, #12]
          PK_TableMemoryData.table = SyncStep - 1;
 8008862:	4b8a      	ldr	r3, [pc, #552]	; (8008a8c <acis_main_task+0x9f4>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	461a      	mov	r2, r3
 800886c:	4b8c      	ldr	r3, [pc, #560]	; (8008aa0 <acis_main_task+0xa08>)
 800886e:	609a      	str	r2, [r3, #8]
          PK_TableMemoryData.offset = SyncOffset;
 8008870:	4b89      	ldr	r3, [pc, #548]	; (8008a98 <acis_main_task+0xa00>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a8a      	ldr	r2, [pc, #552]	; (8008aa0 <acis_main_task+0xa08>)
 8008876:	6113      	str	r3, [r2, #16]

          if(SyncLeft > PACKET_TABLE_MAX_SIZE)
 8008878:	4b86      	ldr	r3, [pc, #536]	; (8008a94 <acis_main_task+0x9fc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2be0      	cmp	r3, #224	; 0xe0
 800887e:	d911      	bls.n	80088a4 <acis_main_task+0x80c>
          {
            PK_TableMemoryData.offset = SyncOffset;
 8008880:	4b85      	ldr	r3, [pc, #532]	; (8008a98 <acis_main_task+0xa00>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a86      	ldr	r2, [pc, #536]	; (8008aa0 <acis_main_task+0xa08>)
 8008886:	6113      	str	r3, [r2, #16]
            PK_TableMemoryData.size = PACKET_TABLE_MAX_SIZE;
 8008888:	4b85      	ldr	r3, [pc, #532]	; (8008aa0 <acis_main_task+0xa08>)
 800888a:	22e0      	movs	r2, #224	; 0xe0
 800888c:	615a      	str	r2, [r3, #20]
            SyncLeft -= PACKET_TABLE_MAX_SIZE;
 800888e:	4b81      	ldr	r3, [pc, #516]	; (8008a94 <acis_main_task+0x9fc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3be0      	subs	r3, #224	; 0xe0
 8008894:	4a7f      	ldr	r2, [pc, #508]	; (8008a94 <acis_main_task+0x9fc>)
 8008896:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_TABLE_MAX_SIZE;
 8008898:	4b7f      	ldr	r3, [pc, #508]	; (8008a98 <acis_main_task+0xa00>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	33e0      	adds	r3, #224	; 0xe0
 800889e:	4a7e      	ldr	r2, [pc, #504]	; (8008a98 <acis_main_task+0xa00>)
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	e011      	b.n	80088c8 <acis_main_task+0x830>
          }
          else
          {
            PK_TableMemoryData.offset = SyncOffset;
 80088a4:	4b7c      	ldr	r3, [pc, #496]	; (8008a98 <acis_main_task+0xa00>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a7d      	ldr	r2, [pc, #500]	; (8008aa0 <acis_main_task+0xa08>)
 80088aa:	6113      	str	r3, [r2, #16]
            PK_TableMemoryData.size = SyncLeft;
 80088ac:	4b79      	ldr	r3, [pc, #484]	; (8008a94 <acis_main_task+0x9fc>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a7b      	ldr	r2, [pc, #492]	; (8008aa0 <acis_main_task+0xa08>)
 80088b2:	6153      	str	r3, [r2, #20]
            SyncOffset += SyncLeft;
 80088b4:	4b77      	ldr	r3, [pc, #476]	; (8008a94 <acis_main_task+0x9fc>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	4b77      	ldr	r3, [pc, #476]	; (8008a98 <acis_main_task+0xa00>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4413      	add	r3, r2
 80088be:	4a76      	ldr	r2, [pc, #472]	; (8008a98 <acis_main_task+0xa00>)
 80088c0:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 80088c2:	4b74      	ldr	r3, [pc, #464]	; (8008a94 <acis_main_task+0x9fc>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
          }

          memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[PK_TableMemoryData.table])[PK_TableMemoryData.offset], PK_TableMemoryData.size);
 80088c8:	4b75      	ldr	r3, [pc, #468]	; (8008aa0 <acis_main_task+0xa08>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f640 426c 	movw	r2, #3180	; 0xc6c
 80088d0:	fb02 f303 	mul.w	r3, r2, r3
 80088d4:	33c0      	adds	r3, #192	; 0xc0
 80088d6:	4a73      	ldr	r2, [pc, #460]	; (8008aa4 <acis_main_task+0xa0c>)
 80088d8:	441a      	add	r2, r3
 80088da:	4b71      	ldr	r3, [pc, #452]	; (8008aa0 <acis_main_task+0xa08>)
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	18d1      	adds	r1, r2, r3
 80088e0:	4b6f      	ldr	r3, [pc, #444]	; (8008aa0 <acis_main_task+0xa08>)
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	461a      	mov	r2, r3
 80088e6:	4870      	ldr	r0, [pc, #448]	; (8008aa8 <acis_main_task+0xa10>)
 80088e8:	f00a fabc 	bl	8012e64 <memcpy>
          memset(&PK_TableMemoryData.data[PK_TableMemoryData.size], 0, sizeof(PK_TableMemoryData.data) - PK_TableMemoryData.size);
 80088ec:	4b6c      	ldr	r3, [pc, #432]	; (8008aa0 <acis_main_task+0xa08>)
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	3318      	adds	r3, #24
 80088f2:	4a6b      	ldr	r2, [pc, #428]	; (8008aa0 <acis_main_task+0xa08>)
 80088f4:	4413      	add	r3, r2
 80088f6:	1c98      	adds	r0, r3, #2
 80088f8:	4b69      	ldr	r3, [pc, #420]	; (8008aa0 <acis_main_task+0xa08>)
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8008900:	461a      	mov	r2, r3
 8008902:	2100      	movs	r1, #0
 8008904:	f00a fab9 	bl	8012e7a <memset>
          PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 8008908:	21e0      	movs	r1, #224	; 0xe0
 800890a:	4867      	ldr	r0, [pc, #412]	; (8008aa8 <acis_main_task+0xa10>)
 800890c:	f001 f8ac 	bl	8009a68 <CRC16_Generate>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	4b62      	ldr	r3, [pc, #392]	; (8008aa0 <acis_main_task+0xa08>)
 8008916:	831a      	strh	r2, [r3, #24]

          protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 8008918:	22fc      	movs	r2, #252	; 0xfc
 800891a:	4961      	ldr	r1, [pc, #388]	; (8008aa0 <acis_main_task+0xa08>)
 800891c:	4863      	ldr	r0, [pc, #396]	; (8008aac <acis_main_task+0xa14>)
 800891e:	f004 fb09 	bl	800cf34 <protPushSequence>
          LastPacket = now;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	623b      	str	r3, [r7, #32]
        if(SyncSize == 0)
 8008926:	e124      	b.n	8008b72 <acis_main_task+0xada>
        }
        else
        {
          if(SyncRequestDone)
 8008928:	4b5c      	ldr	r3, [pc, #368]	; (8008a9c <acis_main_task+0xa04>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d069      	beq.n	8008a06 <acis_main_task+0x96e>
          {
            SyncRequestDone = 0;
 8008932:	4b5a      	ldr	r3, [pc, #360]	; (8008a9c <acis_main_task+0xa04>)
 8008934:	2200      	movs	r2, #0
 8008936:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 8008938:	4b56      	ldr	r3, [pc, #344]	; (8008a94 <acis_main_task+0x9fc>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <acis_main_task+0x8be>
            {
              SyncStep++;
 8008940:	4b52      	ldr	r3, [pc, #328]	; (8008a8c <acis_main_task+0x9f4>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	3301      	adds	r3, #1
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b50      	ldr	r3, [pc, #320]	; (8008a8c <acis_main_task+0x9f4>)
 800894c:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 800894e:	4b50      	ldr	r3, [pc, #320]	; (8008a90 <acis_main_task+0x9f8>)
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
        if(SyncSize == 0)
 8008954:	e10d      	b.n	8008b72 <acis_main_task+0xada>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 8008956:	4b4f      	ldr	r3, [pc, #316]	; (8008a94 <acis_main_task+0x9fc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2be0      	cmp	r3, #224	; 0xe0
 800895c:	d911      	bls.n	8008982 <acis_main_task+0x8ea>
              {
                PK_TableMemoryData.offset = SyncOffset;
 800895e:	4b4e      	ldr	r3, [pc, #312]	; (8008a98 <acis_main_task+0xa00>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a4f      	ldr	r2, [pc, #316]	; (8008aa0 <acis_main_task+0xa08>)
 8008964:	6113      	str	r3, [r2, #16]
                PK_TableMemoryData.size = PACKET_TABLE_MAX_SIZE;
 8008966:	4b4e      	ldr	r3, [pc, #312]	; (8008aa0 <acis_main_task+0xa08>)
 8008968:	22e0      	movs	r2, #224	; 0xe0
 800896a:	615a      	str	r2, [r3, #20]
                SyncLeft -= PACKET_TABLE_MAX_SIZE;
 800896c:	4b49      	ldr	r3, [pc, #292]	; (8008a94 <acis_main_task+0x9fc>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3be0      	subs	r3, #224	; 0xe0
 8008972:	4a48      	ldr	r2, [pc, #288]	; (8008a94 <acis_main_task+0x9fc>)
 8008974:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_TABLE_MAX_SIZE;
 8008976:	4b48      	ldr	r3, [pc, #288]	; (8008a98 <acis_main_task+0xa00>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	33e0      	adds	r3, #224	; 0xe0
 800897c:	4a46      	ldr	r2, [pc, #280]	; (8008a98 <acis_main_task+0xa00>)
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	e011      	b.n	80089a6 <acis_main_task+0x90e>
              }
              else
              {
                PK_TableMemoryData.offset = SyncOffset;
 8008982:	4b45      	ldr	r3, [pc, #276]	; (8008a98 <acis_main_task+0xa00>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a46      	ldr	r2, [pc, #280]	; (8008aa0 <acis_main_task+0xa08>)
 8008988:	6113      	str	r3, [r2, #16]
                PK_TableMemoryData.size = SyncLeft;
 800898a:	4b42      	ldr	r3, [pc, #264]	; (8008a94 <acis_main_task+0x9fc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a44      	ldr	r2, [pc, #272]	; (8008aa0 <acis_main_task+0xa08>)
 8008990:	6153      	str	r3, [r2, #20]
                SyncOffset += SyncLeft;
 8008992:	4b40      	ldr	r3, [pc, #256]	; (8008a94 <acis_main_task+0x9fc>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	4b40      	ldr	r3, [pc, #256]	; (8008a98 <acis_main_task+0xa00>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4413      	add	r3, r2
 800899c:	4a3e      	ldr	r2, [pc, #248]	; (8008a98 <acis_main_task+0xa00>)
 800899e:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 80089a0:	4b3c      	ldr	r3, [pc, #240]	; (8008a94 <acis_main_task+0x9fc>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
              }

              memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[PK_TableMemoryData.table])[PK_TableMemoryData.offset], PK_TableMemoryData.size);
 80089a6:	4b3e      	ldr	r3, [pc, #248]	; (8008aa0 <acis_main_task+0xa08>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f640 426c 	movw	r2, #3180	; 0xc6c
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
 80089b2:	33c0      	adds	r3, #192	; 0xc0
 80089b4:	4a3b      	ldr	r2, [pc, #236]	; (8008aa4 <acis_main_task+0xa0c>)
 80089b6:	441a      	add	r2, r3
 80089b8:	4b39      	ldr	r3, [pc, #228]	; (8008aa0 <acis_main_task+0xa08>)
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	18d1      	adds	r1, r2, r3
 80089be:	4b38      	ldr	r3, [pc, #224]	; (8008aa0 <acis_main_task+0xa08>)
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	461a      	mov	r2, r3
 80089c4:	4838      	ldr	r0, [pc, #224]	; (8008aa8 <acis_main_task+0xa10>)
 80089c6:	f00a fa4d 	bl	8012e64 <memcpy>
              memset(&PK_TableMemoryData.data[PK_TableMemoryData.size], 0, sizeof(PK_TableMemoryData.data) - PK_TableMemoryData.size);
 80089ca:	4b35      	ldr	r3, [pc, #212]	; (8008aa0 <acis_main_task+0xa08>)
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	3318      	adds	r3, #24
 80089d0:	4a33      	ldr	r2, [pc, #204]	; (8008aa0 <acis_main_task+0xa08>)
 80089d2:	4413      	add	r3, r2
 80089d4:	1c98      	adds	r0, r3, #2
 80089d6:	4b32      	ldr	r3, [pc, #200]	; (8008aa0 <acis_main_task+0xa08>)
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 80089de:	461a      	mov	r2, r3
 80089e0:	2100      	movs	r1, #0
 80089e2:	f00a fa4a 	bl	8012e7a <memset>
              PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 80089e6:	21e0      	movs	r1, #224	; 0xe0
 80089e8:	482f      	ldr	r0, [pc, #188]	; (8008aa8 <acis_main_task+0xa10>)
 80089ea:	f001 f83d 	bl	8009a68 <CRC16_Generate>
 80089ee:	4603      	mov	r3, r0
 80089f0:	461a      	mov	r2, r3
 80089f2:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <acis_main_task+0xa08>)
 80089f4:	831a      	strh	r2, [r3, #24]

              protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 80089f6:	22fc      	movs	r2, #252	; 0xfc
 80089f8:	4929      	ldr	r1, [pc, #164]	; (8008aa0 <acis_main_task+0xa08>)
 80089fa:	482c      	ldr	r0, [pc, #176]	; (8008aac <acis_main_task+0xa14>)
 80089fc:	f004 fa9a 	bl	800cf34 <protPushSequence>
              LastPacket = now;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	623b      	str	r3, [r7, #32]
        if(SyncSize == 0)
 8008a04:	e0b5      	b.n	8008b72 <acis_main_task+0xada>
            }

          }
          else if(DelayDiff(now, LastPacket) > 1000000 || SyncError > 0)
 8008a06:	6a39      	ldr	r1, [r7, #32]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f001 f927 	bl	8009c5c <DelayDiff>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	4b27      	ldr	r3, [pc, #156]	; (8008ab0 <acis_main_task+0xa18>)
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d805      	bhi.n	8008a22 <acis_main_task+0x98a>
 8008a16:	4b27      	ldr	r3, [pc, #156]	; (8008ab4 <acis_main_task+0xa1c>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80a8 	beq.w	8008b72 <acis_main_task+0xada>
          {
            StatusSynchronizing = 0;
 8008a22:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <acis_main_task+0xa20>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 8008a28:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <acis_main_task+0x9f4>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 8008a2e:	4b18      	ldr	r3, [pc, #96]	; (8008a90 <acis_main_task+0x9f8>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 8008a34:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <acis_main_task+0xa1c>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 8099 	bne.w	8008b72 <acis_main_task+0xada>
              SyncError = 1;
 8008a40:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <acis_main_task+0xa1c>)
 8008a42:	2201      	movs	r2, #1
 8008a44:	701a      	strb	r2, [r3, #0]
        if(SyncSize == 0)
 8008a46:	e094      	b.n	8008b72 <acis_main_task+0xada>
          }
        }
      }
      else if(SyncStep == TABLE_SETUPS_MAX + 1)
 8008a48:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <acis_main_task+0x9f4>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	d17d      	bne.n	8008b4e <acis_main_task+0xab6>
      {
        if(NeedSave)
 8008a52:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <acis_main_task+0xa24>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d070      	beq.n	8008b3e <acis_main_task+0xaa6>
        {
          if(SyncSize == 0)
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <acis_main_task+0x9f8>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d131      	bne.n	8008ac8 <acis_main_task+0xa30>
          {
            SyncSize = 1;
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <acis_main_task+0x9f8>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
            FlashRequestDone = 0;
 8008a6a:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <acis_main_task+0xa28>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
            SyncRequestDone = 0;
 8008a70:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <acis_main_task+0xa04>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	701a      	strb	r2, [r3, #0]
            PK_SaveConfig.Destination = etrACIS;
 8008a76:	4b13      	ldr	r3, [pc, #76]	; (8008ac4 <acis_main_task+0xa2c>)
 8008a78:	2202      	movs	r2, #2
 8008a7a:	709a      	strb	r2, [r3, #2]
            protPushSequence(&fifoSendingQueue, &PK_SaveConfig, sizeof(PK_SaveConfig));
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	4911      	ldr	r1, [pc, #68]	; (8008ac4 <acis_main_task+0xa2c>)
 8008a80:	480a      	ldr	r0, [pc, #40]	; (8008aac <acis_main_task+0xa14>)
 8008a82:	f004 fa57 	bl	800cf34 <protPushSequence>
            LastPacket = now;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	623b      	str	r3, [r7, #32]
 8008a8a:	e073      	b.n	8008b74 <acis_main_task+0xadc>
 8008a8c:	20006987 	.word	0x20006987
 8008a90:	2000698c 	.word	0x2000698c
 8008a94:	20006990 	.word	0x20006990
 8008a98:	20006994 	.word	0x20006994
 8008a9c:	20006988 	.word	0x20006988
 8008aa0:	200000c0 	.word	0x200000c0
 8008aa4:	20002f20 	.word	0x20002f20
 8008aa8:	200000da 	.word	0x200000da
 8008aac:	20006940 	.word	0x20006940
 8008ab0:	000f4240 	.word	0x000f4240
 8008ab4:	20006998 	.word	0x20006998
 8008ab8:	2000697f 	.word	0x2000697f
 8008abc:	20006985 	.word	0x20006985
 8008ac0:	20006989 	.word	0x20006989
 8008ac4:	20000320 	.word	0x20000320
          }
          else
          {
            if(FlashRequestDone)
 8008ac8:	4b89      	ldr	r3, [pc, #548]	; (8008cf0 <acis_main_task+0xc58>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d013      	beq.n	8008afa <acis_main_task+0xa62>
            {
              FlashRequestDone = 0;
 8008ad2:	4b87      	ldr	r3, [pc, #540]	; (8008cf0 <acis_main_task+0xc58>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
              SyncRequestDone = 0;
 8008ad8:	4b86      	ldr	r3, [pc, #536]	; (8008cf4 <acis_main_task+0xc5c>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
              SyncStep++;
 8008ade:	4b86      	ldr	r3, [pc, #536]	; (8008cf8 <acis_main_task+0xc60>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	4b83      	ldr	r3, [pc, #524]	; (8008cf8 <acis_main_task+0xc60>)
 8008aea:	701a      	strb	r2, [r3, #0]
              NeedSave = 0;
 8008aec:	4b83      	ldr	r3, [pc, #524]	; (8008cfc <acis_main_task+0xc64>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8008af2:	4b83      	ldr	r3, [pc, #524]	; (8008d00 <acis_main_task+0xc68>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	e03c      	b.n	8008b74 <acis_main_task+0xadc>
            }
            else if(DelayDiff(now, LastPacket) > 15000000 || SyncError > 0)
 8008afa:	6a39      	ldr	r1, [r7, #32]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 f8ad 	bl	8009c5c <DelayDiff>
 8008b02:	4602      	mov	r2, r0
 8008b04:	4b7f      	ldr	r3, [pc, #508]	; (8008d04 <acis_main_task+0xc6c>)
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d804      	bhi.n	8008b14 <acis_main_task+0xa7c>
 8008b0a:	4b7f      	ldr	r3, [pc, #508]	; (8008d08 <acis_main_task+0xc70>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d02f      	beq.n	8008b74 <acis_main_task+0xadc>
            {
              StatusSynchronizing = 0;
 8008b14:	4b7d      	ldr	r3, [pc, #500]	; (8008d0c <acis_main_task+0xc74>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
              SyncStep = 0;
 8008b1a:	4b77      	ldr	r3, [pc, #476]	; (8008cf8 <acis_main_task+0xc60>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8008b20:	4b77      	ldr	r3, [pc, #476]	; (8008d00 <acis_main_task+0xc68>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
              NeedSave = 0;
 8008b26:	4b75      	ldr	r3, [pc, #468]	; (8008cfc <acis_main_task+0xc64>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	701a      	strb	r2, [r3, #0]
              if(SyncError == 0)
 8008b2c:	4b76      	ldr	r3, [pc, #472]	; (8008d08 <acis_main_task+0xc70>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d11e      	bne.n	8008b74 <acis_main_task+0xadc>
                SyncError = 1;
 8008b36:	4b74      	ldr	r3, [pc, #464]	; (8008d08 <acis_main_task+0xc70>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	e01a      	b.n	8008b74 <acis_main_task+0xadc>
            }
          }
        }
        else SyncStep++;
 8008b3e:	4b6e      	ldr	r3, [pc, #440]	; (8008cf8 <acis_main_task+0xc60>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	3301      	adds	r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	4b6b      	ldr	r3, [pc, #428]	; (8008cf8 <acis_main_task+0xc60>)
 8008b4a:	701a      	strb	r2, [r3, #0]
 8008b4c:	e012      	b.n	8008b74 <acis_main_task+0xadc>
      }
      else
      {
        StatusSynchronizing = 0;
 8008b4e:	4b6f      	ldr	r3, [pc, #444]	; (8008d0c <acis_main_task+0xc74>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	701a      	strb	r2, [r3, #0]
        SyncStep = 0;
 8008b54:	4b68      	ldr	r3, [pc, #416]	; (8008cf8 <acis_main_task+0xc60>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]
        SyncSize = 0;
 8008b5a:	4b69      	ldr	r3, [pc, #420]	; (8008d00 <acis_main_task+0xc68>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
        SyncError = 0;
 8008b60:	4b69      	ldr	r3, [pc, #420]	; (8008d08 <acis_main_task+0xc70>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
        StatusSynchronized = 1;
 8008b66:	4b6a      	ldr	r3, [pc, #424]	; (8008d10 <acis_main_task+0xc78>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
 8008b6c:	e002      	b.n	8008b74 <acis_main_task+0xadc>
        if(SyncSize == 0)
 8008b6e:	bf00      	nop
 8008b70:	e000      	b.n	8008b74 <acis_main_task+0xadc>
        if(SyncSize == 0)
 8008b72:	bf00      	nop
    else
    {

    }

    if(DelayDiff(now, LastGeneralStatusPacket) > (eMenuItem >= MenuTableSetupIgnitionsSelect ? 30000 : 50000))
 8008b74:	69b9      	ldr	r1, [r7, #24]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f001 f870 	bl	8009c5c <DelayDiff>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	4b65      	ldr	r3, [pc, #404]	; (8008d14 <acis_main_task+0xc7c>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b11      	cmp	r3, #17
 8008b86:	d902      	bls.n	8008b8e <acis_main_task+0xaf6>
 8008b88:	f247 5330 	movw	r3, #30000	; 0x7530
 8008b8c:	e001      	b.n	8008b92 <acis_main_task+0xafa>
 8008b8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d209      	bcs.n	8008baa <acis_main_task+0xb12>
    {
      LastGeneralStatusPacket = now;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	61bb      	str	r3, [r7, #24]
      PK_GeneralStatusRequest.Destination = etrACIS;
 8008b9a:	4b5f      	ldr	r3, [pc, #380]	; (8008d18 <acis_main_task+0xc80>)
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	709a      	strb	r2, [r3, #2]
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest));
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	495d      	ldr	r1, [pc, #372]	; (8008d18 <acis_main_task+0xc80>)
 8008ba4:	485d      	ldr	r0, [pc, #372]	; (8008d1c <acis_main_task+0xc84>)
 8008ba6:	f004 f9c5 	bl	800cf34 <protPushSequence>
    }

    FuelSwitchPos = SW_FUEL1 ? 1 : SW_FUEL2 ? 2 : 0;
 8008baa:	4b5d      	ldr	r3, [pc, #372]	; (8008d20 <acis_main_task+0xc88>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d108      	bne.n	8008bc6 <acis_main_task+0xb2e>
 8008bb4:	4b5b      	ldr	r3, [pc, #364]	; (8008d24 <acis_main_task+0xc8c>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <acis_main_task+0xb2a>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e002      	b.n	8008bc8 <acis_main_task+0xb30>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e000      	b.n	8008bc8 <acis_main_task+0xb30>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	74bb      	strb	r3, [r7, #18]
    if(FuelSwitchPos != LastFuelSwitchPos || DelayDiff(now, LastFuelSwitchPacket) > 500000)
 8008bca:	7cba      	ldrb	r2, [r7, #18]
 8008bcc:	7cfb      	ldrb	r3, [r7, #19]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d107      	bne.n	8008be2 <acis_main_task+0xb4a>
 8008bd2:	6979      	ldr	r1, [r7, #20]
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f001 f841 	bl	8009c5c <DelayDiff>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	4b52      	ldr	r3, [pc, #328]	; (8008d28 <acis_main_task+0xc90>)
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d90e      	bls.n	8008c00 <acis_main_task+0xb68>
    {
      LastFuelSwitchPos = FuelSwitchPos;
 8008be2:	7cbb      	ldrb	r3, [r7, #18]
 8008be4:	74fb      	strb	r3, [r7, #19]
      LastFuelSwitchPacket = now;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	617b      	str	r3, [r7, #20]
      PK_FuelSwitch.Destination = etrACIS;
 8008bea:	4b50      	ldr	r3, [pc, #320]	; (8008d2c <acis_main_task+0xc94>)
 8008bec:	2202      	movs	r2, #2
 8008bee:	709a      	strb	r2, [r3, #2]
      PK_FuelSwitch.FuelSwitchPos = FuelSwitchPos;
 8008bf0:	4a4e      	ldr	r2, [pc, #312]	; (8008d2c <acis_main_task+0xc94>)
 8008bf2:	7cbb      	ldrb	r3, [r7, #18]
 8008bf4:	7113      	strb	r3, [r2, #4]
      protPushSequence(&fifoSendingQueue, &PK_FuelSwitch, sizeof(PK_FuelSwitch));
 8008bf6:	2205      	movs	r2, #5
 8008bf8:	494c      	ldr	r1, [pc, #304]	; (8008d2c <acis_main_task+0xc94>)
 8008bfa:	4848      	ldr	r0, [pc, #288]	; (8008d1c <acis_main_task+0xc84>)
 8008bfc:	f004 f99a 	bl	800cf34 <protPushSequence>

    }

    uint32_t drag = DragStatus;
 8008c00:	4b4b      	ldr	r3, [pc, #300]	; (8008d30 <acis_main_task+0xc98>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	60bb      	str	r3, [r7, #8]
    if(drag != DragStatusOld)
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d033      	beq.n	8008c78 <acis_main_task+0xbe0>
    {
      DragStatusOld = drag;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	627b      	str	r3, [r7, #36]	; 0x24
      switch(drag)
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <acis_main_task+0xb88>
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d016      	beq.n	8008c4c <acis_main_task+0xbb4>
          PK_DragStart.ToRPM = DragRpmTo;
          protPushSequence(&fifoSendingQueue, &PK_DragStart, sizeof(PK_DragStart));
          LastDragPacket = now;
          break;
        default :
          break;
 8008c1e:	e02c      	b.n	8008c7a <acis_main_task+0xbe2>
          DragGraphReady = 0;
 8008c20:	4b44      	ldr	r3, [pc, #272]	; (8008d34 <acis_main_task+0xc9c>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
          PK_DragStop.Destination = etrACIS;
 8008c26:	4b44      	ldr	r3, [pc, #272]	; (8008d38 <acis_main_task+0xca0>)
 8008c28:	2202      	movs	r2, #2
 8008c2a:	709a      	strb	r2, [r3, #2]
          PK_DragStop.FromRPM = DragRpmFrom;
 8008c2c:	4b43      	ldr	r3, [pc, #268]	; (8008d3c <acis_main_task+0xca4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a41      	ldr	r2, [pc, #260]	; (8008d38 <acis_main_task+0xca0>)
 8008c32:	6053      	str	r3, [r2, #4]
          PK_DragStop.ToRPM = DragRpmTo;
 8008c34:	4b42      	ldr	r3, [pc, #264]	; (8008d40 <acis_main_task+0xca8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a3f      	ldr	r2, [pc, #252]	; (8008d38 <acis_main_task+0xca0>)
 8008c3a:	6093      	str	r3, [r2, #8]
          protPushSequence(&fifoSendingQueue, &PK_DragStop, sizeof(PK_DragStop));
 8008c3c:	220c      	movs	r2, #12
 8008c3e:	493e      	ldr	r1, [pc, #248]	; (8008d38 <acis_main_task+0xca0>)
 8008c40:	4836      	ldr	r0, [pc, #216]	; (8008d1c <acis_main_task+0xc84>)
 8008c42:	f004 f977 	bl	800cf34 <protPushSequence>
          LastDragPacket = now;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	61fb      	str	r3, [r7, #28]
          break;
 8008c4a:	e016      	b.n	8008c7a <acis_main_task+0xbe2>
          DragGraphReady = 0;
 8008c4c:	4b39      	ldr	r3, [pc, #228]	; (8008d34 <acis_main_task+0xc9c>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
          PK_DragStart.Destination = etrACIS;
 8008c52:	4b3c      	ldr	r3, [pc, #240]	; (8008d44 <acis_main_task+0xcac>)
 8008c54:	2202      	movs	r2, #2
 8008c56:	709a      	strb	r2, [r3, #2]
          PK_DragStart.FromRPM = DragRpmFrom;
 8008c58:	4b38      	ldr	r3, [pc, #224]	; (8008d3c <acis_main_task+0xca4>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a39      	ldr	r2, [pc, #228]	; (8008d44 <acis_main_task+0xcac>)
 8008c5e:	6053      	str	r3, [r2, #4]
          PK_DragStart.ToRPM = DragRpmTo;
 8008c60:	4b37      	ldr	r3, [pc, #220]	; (8008d40 <acis_main_task+0xca8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a37      	ldr	r2, [pc, #220]	; (8008d44 <acis_main_task+0xcac>)
 8008c66:	6093      	str	r3, [r2, #8]
          protPushSequence(&fifoSendingQueue, &PK_DragStart, sizeof(PK_DragStart));
 8008c68:	220c      	movs	r2, #12
 8008c6a:	4936      	ldr	r1, [pc, #216]	; (8008d44 <acis_main_task+0xcac>)
 8008c6c:	482b      	ldr	r0, [pc, #172]	; (8008d1c <acis_main_task+0xc84>)
 8008c6e:	f004 f961 	bl	800cf34 <protPushSequence>
          LastDragPacket = now;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	61fb      	str	r3, [r7, #28]
          break;
 8008c76:	e000      	b.n	8008c7a <acis_main_task+0xbe2>
      }
    }
 8008c78:	bf00      	nop

    if(drag == 1 || drag == 2)
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d002      	beq.n	8008c86 <acis_main_task+0xbee>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d11a      	bne.n	8008cbc <acis_main_task+0xc24>
    {
      if(DelayDiff(now, LastDragPacket) > 30000)
 8008c86:	69f9      	ldr	r1, [r7, #28]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 ffe7 	bl	8009c5c <DelayDiff>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	f247 5330 	movw	r3, #30000	; 0x7530
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d911      	bls.n	8008cbc <acis_main_task+0xc24>
      {
        PK_DragUpdateRequest.Destination = etrACIS;
 8008c98:	4b2b      	ldr	r3, [pc, #172]	; (8008d48 <acis_main_task+0xcb0>)
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	709a      	strb	r2, [r3, #2]
        PK_DragUpdateRequest.FromRPM = DragRpmFrom;
 8008c9e:	4b27      	ldr	r3, [pc, #156]	; (8008d3c <acis_main_task+0xca4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a29      	ldr	r2, [pc, #164]	; (8008d48 <acis_main_task+0xcb0>)
 8008ca4:	6053      	str	r3, [r2, #4]
        PK_DragUpdateRequest.ToRPM = DragRpmTo;
 8008ca6:	4b26      	ldr	r3, [pc, #152]	; (8008d40 <acis_main_task+0xca8>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a27      	ldr	r2, [pc, #156]	; (8008d48 <acis_main_task+0xcb0>)
 8008cac:	6093      	str	r3, [r2, #8]
        protPushSequence(&fifoSendingQueue, &PK_DragUpdateRequest, sizeof(PK_DragUpdateRequest));
 8008cae:	220c      	movs	r2, #12
 8008cb0:	4925      	ldr	r1, [pc, #148]	; (8008d48 <acis_main_task+0xcb0>)
 8008cb2:	481a      	ldr	r0, [pc, #104]	; (8008d1c <acis_main_task+0xc84>)
 8008cb4:	f004 f93e 	bl	800cf34 <protPushSequence>
        LastDragPacket = now;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	61fb      	str	r3, [r7, #28]
      }
    }

    osDelay(1);
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	f006 fdcd 	bl	800f85c <osDelay>

    if(DelayDiff(now, StatusPcLast) >= 2000000)
 8008cc2:	4b22      	ldr	r3, [pc, #136]	; (8008d4c <acis_main_task+0xcb4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 ffc7 	bl	8009c5c <DelayDiff>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b1f      	ldr	r3, [pc, #124]	; (8008d50 <acis_main_task+0xcb8>)
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	f67f aa12 	bls.w	80080fc <acis_main_task+0x64>
    {
      StatusPcLast += 1000000;
 8008cd8:	4b1c      	ldr	r3, [pc, #112]	; (8008d4c <acis_main_task+0xcb4>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <acis_main_task+0xcbc>)
 8008cde:	4413      	add	r3, r2
 8008ce0:	4a1a      	ldr	r2, [pc, #104]	; (8008d4c <acis_main_task+0xcb4>)
 8008ce2:	6013      	str	r3, [r2, #0]
      StatusPcConnected = 0;
 8008ce4:	4b1c      	ldr	r3, [pc, #112]	; (8008d58 <acis_main_task+0xcc0>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	701a      	strb	r2, [r3, #0]
  {
 8008cea:	f7ff ba07 	b.w	80080fc <acis_main_task+0x64>
 8008cee:	bf00      	nop
 8008cf0:	20006989 	.word	0x20006989
 8008cf4:	20006988 	.word	0x20006988
 8008cf8:	20006987 	.word	0x20006987
 8008cfc:	20006985 	.word	0x20006985
 8008d00:	2000698c 	.word	0x2000698c
 8008d04:	00e4e1c0 	.word	0x00e4e1c0
 8008d08:	20006998 	.word	0x20006998
 8008d0c:	2000697f 	.word	0x2000697f
 8008d10:	2000697e 	.word	0x2000697e
 8008d14:	2000695c 	.word	0x2000695c
 8008d18:	20000040 	.word	0x20000040
 8008d1c:	20006940 	.word	0x20006940
 8008d20:	20015a08 	.word	0x20015a08
 8008d24:	20015a15 	.word	0x20015a15
 8008d28:	0007a120 	.word	0x0007a120
 8008d2c:	200004c0 	.word	0x200004c0
 8008d30:	200069a0 	.word	0x200069a0
 8008d34:	200069a1 	.word	0x200069a1
 8008d38:	20000420 	.word	0x20000420
 8008d3c:	200004c8 	.word	0x200004c8
 8008d40:	200004cc 	.word	0x200004cc
 8008d44:	200003a0 	.word	0x200003a0
 8008d48:	200003c0 	.word	0x200003c0
 8008d4c:	20006980 	.word	0x20006980
 8008d50:	001e847f 	.word	0x001e847f
 8008d54:	000f4240 	.word	0x000f4240
 8008d58:	20006984 	.word	0x20006984

08008d5c <acis_parse_command>:
  }

}

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 8008d5c:	b5b0      	push	{r4, r5, r7, lr}
 8008d5e:	b08c      	sub	sp, #48	; 0x30
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	73fb      	strb	r3, [r7, #15]
  uint16_t crc;
  uint32_t now = Delay_Tick;
 8008d6a:	4b70      	ldr	r3, [pc, #448]	; (8008f2c <acis_parse_command+0x1d0>)
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t offset,size, table, tablesize,configsize;
  uint32_t realconfigsize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 8008d70:	23c0      	movs	r3, #192	; 0xc0
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(msgBuf[0])
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d007      	beq.n	8008d8c <acis_parse_command+0x30>
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d01d      	beq.n	8008dbc <acis_parse_command+0x60>
      (void)PK_Pong.RandomPong;
      if(xChaSrc == etrPC)
        StatusPcLast = now;
      return;
    default :
      break;
 8008d80:	bf00      	nop
  }

  if(xChaSrc == etrACIS)
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	f040 833f 	bne.w	8009408 <acis_parse_command+0x6ac>
 8008d8a:	e023      	b.n	8008dd4 <acis_parse_command+0x78>
      PK_Copy(&PK_Ping, msgBuf);
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	4868      	ldr	r0, [pc, #416]	; (8008f30 <acis_parse_command+0x1d4>)
 8008d90:	f7f8 f922 	bl	8000fd8 <PK_Copy>
      PK_Pong.RandomPong = PK_Ping.RandomPing;
 8008d94:	4b66      	ldr	r3, [pc, #408]	; (8008f30 <acis_parse_command+0x1d4>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	4a66      	ldr	r2, [pc, #408]	; (8008f34 <acis_parse_command+0x1d8>)
 8008d9a:	6053      	str	r3, [r2, #4]
      PK_Pong.Destination = xChaSrc;
 8008d9c:	4a65      	ldr	r2, [pc, #404]	; (8008f34 <acis_parse_command+0x1d8>)
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	7093      	strb	r3, [r2, #2]
      protPushSequence(&fifoSendingQueue, &PK_Pong, sizeof(PK_Pong));
 8008da2:	2208      	movs	r2, #8
 8008da4:	4963      	ldr	r1, [pc, #396]	; (8008f34 <acis_parse_command+0x1d8>)
 8008da6:	4864      	ldr	r0, [pc, #400]	; (8008f38 <acis_parse_command+0x1dc>)
 8008da8:	f004 f8c4 	bl	800cf34 <protPushSequence>
      if(xChaSrc == etrPC)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	f040 8319 	bne.w	80093e6 <acis_parse_command+0x68a>
        StatusPcLast = now;
 8008db4:	4a61      	ldr	r2, [pc, #388]	; (8008f3c <acis_parse_command+0x1e0>)
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	6013      	str	r3, [r2, #0]
      return;
 8008dba:	e314      	b.n	80093e6 <acis_parse_command+0x68a>
      PK_Copy(&PK_Pong, msgBuf);
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	485d      	ldr	r0, [pc, #372]	; (8008f34 <acis_parse_command+0x1d8>)
 8008dc0:	f7f8 f90a 	bl	8000fd8 <PK_Copy>
      if(xChaSrc == etrPC)
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	f040 830f 	bne.w	80093ea <acis_parse_command+0x68e>
        StatusPcLast = now;
 8008dcc:	4a5b      	ldr	r2, [pc, #364]	; (8008f3c <acis_parse_command+0x1e0>)
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	6013      	str	r3, [r2, #0]
      return;
 8008dd2:	e30a      	b.n	80093ea <acis_parse_command+0x68e>
  {
    switch(msgBuf[0])
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	3b04      	subs	r3, #4
 8008dda:	2b13      	cmp	r3, #19
 8008ddc:	f200 8307 	bhi.w	80093ee <acis_parse_command+0x692>
 8008de0:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <acis_parse_command+0x8c>)
 8008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de6:	bf00      	nop
 8008de8:	08008e39 	.word	0x08008e39
 8008dec:	080093ef 	.word	0x080093ef
 8008df0:	08008f95 	.word	0x08008f95
 8008df4:	08009225 	.word	0x08009225
 8008df8:	080093ef 	.word	0x080093ef
 8008dfc:	0800909f 	.word	0x0800909f
 8008e00:	0800917b 	.word	0x0800917b
 8008e04:	080093ef 	.word	0x080093ef
 8008e08:	080093ef 	.word	0x080093ef
 8008e0c:	08008ed5 	.word	0x08008ed5
 8008e10:	08008e95 	.word	0x08008e95
 8008e14:	080093ef 	.word	0x080093ef
 8008e18:	080093ef 	.word	0x080093ef
 8008e1c:	08009299 	.word	0x08009299
 8008e20:	080093ef 	.word	0x080093ef
 8008e24:	080093ef 	.word	0x080093ef
 8008e28:	0800935b 	.word	0x0800935b
 8008e2c:	080093ef 	.word	0x080093ef
 8008e30:	080093ef 	.word	0x080093ef
 8008e34:	08008f15 	.word	0x08008f15
    {
      case PK_GeneralStatusResponseID :
        PK_Copy(&PK_GeneralStatusResponse, msgBuf);
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	4841      	ldr	r0, [pc, #260]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e3c:	f7f8 f8cc 	bl	8000fd8 <PK_Copy>
        StatusIgnition = PK_GeneralStatusResponse.IgnitionAngle;
 8008e40:	4b3f      	ldr	r3, [pc, #252]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	4a3f      	ldr	r2, [pc, #252]	; (8008f44 <acis_parse_command+0x1e8>)
 8008e46:	6013      	str	r3, [r2, #0]
        StatusLoad = PK_GeneralStatusResponse.Load;
 8008e48:	4b3d      	ldr	r3, [pc, #244]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	4a3e      	ldr	r2, [pc, #248]	; (8008f48 <acis_parse_command+0x1ec>)
 8008e4e:	6013      	str	r3, [r2, #0]
        StatusRPM = PK_GeneralStatusResponse.RPM ;
 8008e50:	4b3b      	ldr	r3, [pc, #236]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	4a3d      	ldr	r2, [pc, #244]	; (8008f4c <acis_parse_command+0x1f0>)
 8008e56:	6013      	str	r3, [r2, #0]
        StatusPressure = PK_GeneralStatusResponse.Pressure;
 8008e58:	4b39      	ldr	r3, [pc, #228]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	4a3c      	ldr	r2, [pc, #240]	; (8008f50 <acis_parse_command+0x1f4>)
 8008e5e:	6013      	str	r3, [r2, #0]
        StatusVoltage = PK_GeneralStatusResponse.Voltage;
 8008e60:	4b37      	ldr	r3, [pc, #220]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	4a3b      	ldr	r2, [pc, #236]	; (8008f54 <acis_parse_command+0x1f8>)
 8008e66:	6013      	str	r3, [r2, #0]
        StatusTemperature = PK_GeneralStatusResponse.Temperature;
 8008e68:	4b35      	ldr	r3, [pc, #212]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6c:	4a3a      	ldr	r2, [pc, #232]	; (8008f58 <acis_parse_command+0x1fc>)
 8008e6e:	6013      	str	r3, [r2, #0]
        StatusCheck = PK_GeneralStatusResponse.check;
 8008e70:	4b33      	ldr	r3, [pc, #204]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e72:	799a      	ldrb	r2, [r3, #6]
 8008e74:	4b39      	ldr	r3, [pc, #228]	; (8008f5c <acis_parse_command+0x200>)
 8008e76:	701a      	strb	r2, [r3, #0]
        StatusValveNum = PK_GeneralStatusResponse.valvenum;
 8008e78:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e7a:	795a      	ldrb	r2, [r3, #5]
 8008e7c:	4b38      	ldr	r3, [pc, #224]	; (8008f60 <acis_parse_command+0x204>)
 8008e7e:	701a      	strb	r2, [r3, #0]
        StatusTableNum = PK_GeneralStatusResponse.tablenum;
 8008e80:	4b2f      	ldr	r3, [pc, #188]	; (8008f40 <acis_parse_command+0x1e4>)
 8008e82:	791b      	ldrb	r3, [r3, #4]
 8008e84:	461a      	mov	r2, r3
 8008e86:	4b37      	ldr	r3, [pc, #220]	; (8008f64 <acis_parse_command+0x208>)
 8008e88:	601a      	str	r2, [r3, #0]
        strcpy(StatusTableName, PK_GeneralStatusResponse.tablename);
 8008e8a:	4937      	ldr	r1, [pc, #220]	; (8008f68 <acis_parse_command+0x20c>)
 8008e8c:	4837      	ldr	r0, [pc, #220]	; (8008f6c <acis_parse_command+0x210>)
 8008e8e:	f00a fe61 	bl	8013b54 <strcpy>
        break;
 8008e92:	e2b9      	b.n	8009408 <acis_parse_command+0x6ac>

      case PK_RestoreConfigAcknowledgeID :
        PK_Copy(&PK_RestoreConfigAcknowledge, msgBuf);
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	4836      	ldr	r0, [pc, #216]	; (8008f70 <acis_parse_command+0x214>)
 8008e98:	f7f8 f89e 	bl	8000fd8 <PK_Copy>
        if(PK_RestoreConfigAcknowledge.ErrorCode == 0)
 8008e9c:	4b34      	ldr	r3, [pc, #208]	; (8008f70 <acis_parse_command+0x214>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10f      	bne.n	8008ec4 <acis_parse_command+0x168>
        {
          if(StatusSynchronizing == 1 && NeedLoad)
 8008ea4:	4b33      	ldr	r3, [pc, #204]	; (8008f74 <acis_parse_command+0x218>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	f040 82a1 	bne.w	80093f2 <acis_parse_command+0x696>
 8008eb0:	4b31      	ldr	r3, [pc, #196]	; (8008f78 <acis_parse_command+0x21c>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 829b 	beq.w	80093f2 <acis_parse_command+0x696>
            FlashRequestDone = 1;
 8008ebc:	4b2f      	ldr	r3, [pc, #188]	; (8008f7c <acis_parse_command+0x220>)
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	701a      	strb	r2, [r3, #0]
        }
        else SyncError = PK_RestoreConfigAcknowledge.ErrorCode + 100;
        break;
 8008ec2:	e296      	b.n	80093f2 <acis_parse_command+0x696>
        else SyncError = PK_RestoreConfigAcknowledge.ErrorCode + 100;
 8008ec4:	4b2a      	ldr	r3, [pc, #168]	; (8008f70 <acis_parse_command+0x214>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	3364      	adds	r3, #100	; 0x64
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	4b2c      	ldr	r3, [pc, #176]	; (8008f80 <acis_parse_command+0x224>)
 8008ed0:	701a      	strb	r2, [r3, #0]
        break;
 8008ed2:	e28e      	b.n	80093f2 <acis_parse_command+0x696>

      case PK_SaveConfigAcknowledgeID :
        PK_Copy(&PK_SaveConfigAcknowledge, msgBuf);
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	482b      	ldr	r0, [pc, #172]	; (8008f84 <acis_parse_command+0x228>)
 8008ed8:	f7f8 f87e 	bl	8000fd8 <PK_Copy>
        if(PK_SaveConfigAcknowledge.ErrorCode == 0)
 8008edc:	4b29      	ldr	r3, [pc, #164]	; (8008f84 <acis_parse_command+0x228>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10f      	bne.n	8008f04 <acis_parse_command+0x1a8>
        {
          if(StatusSynchronizing == 2 && NeedSave)
 8008ee4:	4b23      	ldr	r3, [pc, #140]	; (8008f74 <acis_parse_command+0x218>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	f040 8283 	bne.w	80093f6 <acis_parse_command+0x69a>
 8008ef0:	4b25      	ldr	r3, [pc, #148]	; (8008f88 <acis_parse_command+0x22c>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 827d 	beq.w	80093f6 <acis_parse_command+0x69a>
            FlashRequestDone = 1;
 8008efc:	4b1f      	ldr	r3, [pc, #124]	; (8008f7c <acis_parse_command+0x220>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	701a      	strb	r2, [r3, #0]
        }
        else SyncError = PK_SaveConfigAcknowledge.ErrorCode + 120;
        break;
 8008f02:	e278      	b.n	80093f6 <acis_parse_command+0x69a>
        else SyncError = PK_SaveConfigAcknowledge.ErrorCode + 120;
 8008f04:	4b1f      	ldr	r3, [pc, #124]	; (8008f84 <acis_parse_command+0x228>)
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	3378      	adds	r3, #120	; 0x78
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	4b1c      	ldr	r3, [pc, #112]	; (8008f80 <acis_parse_command+0x224>)
 8008f10:	701a      	strb	r2, [r3, #0]
        break;
 8008f12:	e270      	b.n	80093f6 <acis_parse_command+0x69a>

      case PK_PcConnectedID :
        PK_Copy(&PK_PcConnected, msgBuf);
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	481d      	ldr	r0, [pc, #116]	; (8008f8c <acis_parse_command+0x230>)
 8008f18:	f7f8 f85e 	bl	8000fd8 <PK_Copy>
        StatusPcLast = Delay_Tick;
 8008f1c:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <acis_parse_command+0x1d0>)
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	4a06      	ldr	r2, [pc, #24]	; (8008f3c <acis_parse_command+0x1e0>)
 8008f22:	6013      	str	r3, [r2, #0]
        StatusPcConnected = 1;
 8008f24:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <acis_parse_command+0x234>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	701a      	strb	r2, [r3, #0]
        break;
 8008f2a:	e26d      	b.n	8009408 <acis_parse_command+0x6ac>
 8008f2c:	40000c00 	.word	0x40000c00
 8008f30:	20000000 	.word	0x20000000
 8008f34:	20000020 	.word	0x20000020
 8008f38:	20006940 	.word	0x20006940
 8008f3c:	20006980 	.word	0x20006980
 8008f40:	20000060 	.word	0x20000060
 8008f44:	2000696c 	.word	0x2000696c
 8008f48:	20006964 	.word	0x20006964
 8008f4c:	20006960 	.word	0x20006960
 8008f50:	20006968 	.word	0x20006968
 8008f54:	20006970 	.word	0x20006970
 8008f58:	20006974 	.word	0x20006974
 8008f5c:	2000697d 	.word	0x2000697d
 8008f60:	2000697c 	.word	0x2000697c
 8008f64:	20006978 	.word	0x20006978
 8008f68:	20000067 	.word	0x20000067
 8008f6c:	200159b0 	.word	0x200159b0
 8008f70:	20000380 	.word	0x20000380
 8008f74:	2000697f 	.word	0x2000697f
 8008f78:	20006986 	.word	0x20006986
 8008f7c:	20006989 	.word	0x20006989
 8008f80:	20006998 	.word	0x20006998
 8008f84:	20000360 	.word	0x20000360
 8008f88:	20006985 	.word	0x20006985
 8008f8c:	200004a0 	.word	0x200004a0
 8008f90:	20006984 	.word	0x20006984

      case PK_TableMemoryDataID :
        PK_Copy(&PK_TableMemoryData, msgBuf);
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	4896      	ldr	r0, [pc, #600]	; (80091f0 <acis_parse_command+0x494>)
 8008f98:	f7f8 f81e 	bl	8000fd8 <PK_Copy>

        if(PK_TableMemoryData.ErrorCode == 0)
 8008f9c:	4b94      	ldr	r3, [pc, #592]	; (80091f0 <acis_parse_command+0x494>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d174      	bne.n	800908e <acis_parse_command+0x332>
        {
          PK_TableMemoryAcknowledge.Destination = xChaSrc;
 8008fa4:	4a93      	ldr	r2, [pc, #588]	; (80091f4 <acis_parse_command+0x498>)
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	7093      	strb	r3, [r2, #2]
          offset = PK_TableMemoryAcknowledge.offset = PK_TableMemoryData.offset;
 8008faa:	4b91      	ldr	r3, [pc, #580]	; (80091f0 <acis_parse_command+0x494>)
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	4a91      	ldr	r2, [pc, #580]	; (80091f4 <acis_parse_command+0x498>)
 8008fb0:	6113      	str	r3, [r2, #16]
 8008fb2:	4b90      	ldr	r3, [pc, #576]	; (80091f4 <acis_parse_command+0x498>)
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
          size = PK_TableMemoryAcknowledge.size = PK_TableMemoryData.size;
 8008fb8:	4b8d      	ldr	r3, [pc, #564]	; (80091f0 <acis_parse_command+0x494>)
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	4a8d      	ldr	r2, [pc, #564]	; (80091f4 <acis_parse_command+0x498>)
 8008fbe:	6153      	str	r3, [r2, #20]
 8008fc0:	4b8c      	ldr	r3, [pc, #560]	; (80091f4 <acis_parse_command+0x498>)
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	623b      	str	r3, [r7, #32]
          table = PK_TableMemoryAcknowledge.table = PK_TableMemoryData.table;
 8008fc6:	4b8a      	ldr	r3, [pc, #552]	; (80091f0 <acis_parse_command+0x494>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	4a8a      	ldr	r2, [pc, #552]	; (80091f4 <acis_parse_command+0x498>)
 8008fcc:	6093      	str	r3, [r2, #8]
 8008fce:	4b89      	ldr	r3, [pc, #548]	; (80091f4 <acis_parse_command+0x498>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	617b      	str	r3, [r7, #20]
          tablesize = PK_TableMemoryAcknowledge.tablesize = PK_TableMemoryData.tablesize;
 8008fd4:	4b86      	ldr	r3, [pc, #536]	; (80091f0 <acis_parse_command+0x494>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	4a86      	ldr	r2, [pc, #536]	; (80091f4 <acis_parse_command+0x498>)
 8008fda:	60d3      	str	r3, [r2, #12]
 8008fdc:	4b85      	ldr	r3, [pc, #532]	; (80091f4 <acis_parse_command+0x498>)
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	613b      	str	r3, [r7, #16]
          PK_TableMemoryAcknowledge.ErrorCode = 0;
 8008fe2:	4b84      	ldr	r3, [pc, #528]	; (80091f4 <acis_parse_command+0x498>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	605a      	str	r2, [r3, #4]

          if(tablesize != sizeof(sAcisIgnTable))
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f640 426c 	movw	r2, #3180	; 0xc6c
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d002      	beq.n	8008ff8 <acis_parse_command+0x29c>
            PK_TableMemoryAcknowledge.ErrorCode = 1;
 8008ff2:	4b80      	ldr	r3, [pc, #512]	; (80091f4 <acis_parse_command+0x498>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	605a      	str	r2, [r3, #4]

          if(size + offset > sizeof(sAcisIgnTable))
 8008ff8:	6a3a      	ldr	r2, [r7, #32]
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f640 426c 	movw	r2, #3180	; 0xc6c
 8009002:	4293      	cmp	r3, r2
 8009004:	d902      	bls.n	800900c <acis_parse_command+0x2b0>
            PK_TableMemoryAcknowledge.ErrorCode = 2;
 8009006:	4b7b      	ldr	r3, [pc, #492]	; (80091f4 <acis_parse_command+0x498>)
 8009008:	2202      	movs	r2, #2
 800900a:	605a      	str	r2, [r3, #4]

          if(size > PACKET_TABLE_MAX_SIZE || size > sizeof(sAcisIgnTable))
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	2be0      	cmp	r3, #224	; 0xe0
 8009010:	d804      	bhi.n	800901c <acis_parse_command+0x2c0>
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	f640 426c 	movw	r2, #3180	; 0xc6c
 8009018:	4293      	cmp	r3, r2
 800901a:	d902      	bls.n	8009022 <acis_parse_command+0x2c6>
            PK_TableMemoryAcknowledge.ErrorCode = 3;
 800901c:	4b75      	ldr	r3, [pc, #468]	; (80091f4 <acis_parse_command+0x498>)
 800901e:	2203      	movs	r2, #3
 8009020:	605a      	str	r2, [r3, #4]

          if(table >= TABLE_SETUPS_MAX)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b03      	cmp	r3, #3
 8009026:	d902      	bls.n	800902e <acis_parse_command+0x2d2>
            PK_TableMemoryAcknowledge.ErrorCode = 4;
 8009028:	4b72      	ldr	r3, [pc, #456]	; (80091f4 <acis_parse_command+0x498>)
 800902a:	2204      	movs	r2, #4
 800902c:	605a      	str	r2, [r3, #4]

          if(PK_TableMemoryAcknowledge.ErrorCode == 0)
 800902e:	4b71      	ldr	r3, [pc, #452]	; (80091f4 <acis_parse_command+0x498>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d125      	bne.n	8009082 <acis_parse_command+0x326>
          {
            crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 8009036:	21e0      	movs	r1, #224	; 0xe0
 8009038:	486f      	ldr	r0, [pc, #444]	; (80091f8 <acis_parse_command+0x49c>)
 800903a:	f000 fd15 	bl	8009a68 <CRC16_Generate>
 800903e:	4603      	mov	r3, r0
 8009040:	837b      	strh	r3, [r7, #26]
            if(crc == PK_TableMemoryData.crc)
 8009042:	4b6b      	ldr	r3, [pc, #428]	; (80091f0 <acis_parse_command+0x494>)
 8009044:	8b1b      	ldrh	r3, [r3, #24]
 8009046:	8b7a      	ldrh	r2, [r7, #26]
 8009048:	429a      	cmp	r2, r3
 800904a:	d117      	bne.n	800907c <acis_parse_command+0x320>
            {
              memcpy(&((uint8_t*)&acis_config.tables[table])[offset], &PK_TableMemoryData.data[0], size);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f640 426c 	movw	r2, #3180	; 0xc6c
 8009052:	fb02 f303 	mul.w	r3, r2, r3
 8009056:	33c0      	adds	r3, #192	; 0xc0
 8009058:	4a68      	ldr	r2, [pc, #416]	; (80091fc <acis_parse_command+0x4a0>)
 800905a:	441a      	add	r2, r3
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	4413      	add	r3, r2
 8009060:	6a3a      	ldr	r2, [r7, #32]
 8009062:	4965      	ldr	r1, [pc, #404]	; (80091f8 <acis_parse_command+0x49c>)
 8009064:	4618      	mov	r0, r3
 8009066:	f009 fefd 	bl	8012e64 <memcpy>

              if(StatusSynchronizing == 1)
 800906a:	4b65      	ldr	r3, [pc, #404]	; (8009200 <acis_parse_command+0x4a4>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b01      	cmp	r3, #1
 8009072:	d106      	bne.n	8009082 <acis_parse_command+0x326>
                SyncRequestDone = 1;
 8009074:	4b63      	ldr	r3, [pc, #396]	; (8009204 <acis_parse_command+0x4a8>)
 8009076:	2201      	movs	r2, #1
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	e002      	b.n	8009082 <acis_parse_command+0x326>
            }
            else
              PK_TableMemoryAcknowledge.ErrorCode = 5;
 800907c:	4b5d      	ldr	r3, [pc, #372]	; (80091f4 <acis_parse_command+0x498>)
 800907e:	2205      	movs	r2, #5
 8009080:	605a      	str	r2, [r3, #4]
          }

          protPushSequence(&fifoSendingQueue, &PK_TableMemoryAcknowledge, sizeof(PK_TableMemoryAcknowledge));
 8009082:	2218      	movs	r2, #24
 8009084:	495b      	ldr	r1, [pc, #364]	; (80091f4 <acis_parse_command+0x498>)
 8009086:	4860      	ldr	r0, [pc, #384]	; (8009208 <acis_parse_command+0x4ac>)
 8009088:	f003 ff54 	bl	800cf34 <protPushSequence>
        }
        else SyncError = PK_TableMemoryData.ErrorCode + 20;
        break;
 800908c:	e1bc      	b.n	8009408 <acis_parse_command+0x6ac>
        else SyncError = PK_TableMemoryData.ErrorCode + 20;
 800908e:	4b58      	ldr	r3, [pc, #352]	; (80091f0 <acis_parse_command+0x494>)
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	3314      	adds	r3, #20
 8009096:	b2da      	uxtb	r2, r3
 8009098:	4b5c      	ldr	r3, [pc, #368]	; (800920c <acis_parse_command+0x4b0>)
 800909a:	701a      	strb	r2, [r3, #0]
        break;
 800909c:	e1b4      	b.n	8009408 <acis_parse_command+0x6ac>

      case PK_ConfigMemoryDataID :
        PK_Copy(&PK_ConfigMemoryData, msgBuf);
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	485b      	ldr	r0, [pc, #364]	; (8009210 <acis_parse_command+0x4b4>)
 80090a2:	f7f7 ff99 	bl	8000fd8 <PK_Copy>

        if(PK_ConfigMemoryData.ErrorCode == 0)
 80090a6:	4b5a      	ldr	r3, [pc, #360]	; (8009210 <acis_parse_command+0x4b4>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d15d      	bne.n	800916a <acis_parse_command+0x40e>
        {
          PK_ConfigMemoryAcknowledge.Destination = xChaSrc;
 80090ae:	4a59      	ldr	r2, [pc, #356]	; (8009214 <acis_parse_command+0x4b8>)
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	7093      	strb	r3, [r2, #2]
          offset = PK_ConfigMemoryAcknowledge.offset = PK_ConfigMemoryData.offset;
 80090b4:	4b56      	ldr	r3, [pc, #344]	; (8009210 <acis_parse_command+0x4b4>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4a56      	ldr	r2, [pc, #344]	; (8009214 <acis_parse_command+0x4b8>)
 80090ba:	60d3      	str	r3, [r2, #12]
 80090bc:	4b55      	ldr	r3, [pc, #340]	; (8009214 <acis_parse_command+0x4b8>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
          size = PK_ConfigMemoryAcknowledge.size = PK_ConfigMemoryData.size;
 80090c2:	4b53      	ldr	r3, [pc, #332]	; (8009210 <acis_parse_command+0x4b4>)
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	4a53      	ldr	r2, [pc, #332]	; (8009214 <acis_parse_command+0x4b8>)
 80090c8:	6113      	str	r3, [r2, #16]
 80090ca:	4b52      	ldr	r3, [pc, #328]	; (8009214 <acis_parse_command+0x4b8>)
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	623b      	str	r3, [r7, #32]
          configsize = PK_ConfigMemoryAcknowledge.configsize = PK_ConfigMemoryData.configsize;
 80090d0:	4b4f      	ldr	r3, [pc, #316]	; (8009210 <acis_parse_command+0x4b4>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4a4f      	ldr	r2, [pc, #316]	; (8009214 <acis_parse_command+0x4b8>)
 80090d6:	6093      	str	r3, [r2, #8]
 80090d8:	4b4e      	ldr	r3, [pc, #312]	; (8009214 <acis_parse_command+0x4b8>)
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	61fb      	str	r3, [r7, #28]
          PK_ConfigMemoryAcknowledge.ErrorCode = 0;
 80090de:	4b4d      	ldr	r3, [pc, #308]	; (8009214 <acis_parse_command+0x4b8>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	605a      	str	r2, [r3, #4]

          if(configsize != realconfigsize)
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d002      	beq.n	80090f2 <acis_parse_command+0x396>
            PK_ConfigMemoryData.ErrorCode = 1;
 80090ec:	4b48      	ldr	r3, [pc, #288]	; (8009210 <acis_parse_command+0x4b4>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	605a      	str	r2, [r3, #4]

          if(size + offset > realconfigsize)
 80090f2:	6a3a      	ldr	r2, [r7, #32]
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	4413      	add	r3, r2
 80090f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d202      	bcs.n	8009104 <acis_parse_command+0x3a8>
            PK_ConfigMemoryData.ErrorCode = 2;
 80090fe:	4b44      	ldr	r3, [pc, #272]	; (8009210 <acis_parse_command+0x4b4>)
 8009100:	2202      	movs	r2, #2
 8009102:	605a      	str	r2, [r3, #4]

          if(size > realconfigsize || size > PACKET_CONFIG_MAX_SIZE)
 8009104:	6a3a      	ldr	r2, [r7, #32]
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	429a      	cmp	r2, r3
 800910a:	d802      	bhi.n	8009112 <acis_parse_command+0x3b6>
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	2be0      	cmp	r3, #224	; 0xe0
 8009110:	d902      	bls.n	8009118 <acis_parse_command+0x3bc>
            PK_ConfigMemoryData.ErrorCode = 3;
 8009112:	4b3f      	ldr	r3, [pc, #252]	; (8009210 <acis_parse_command+0x4b4>)
 8009114:	2203      	movs	r2, #3
 8009116:	605a      	str	r2, [r3, #4]

          if(PK_ConfigMemoryAcknowledge.ErrorCode == 0)
 8009118:	4b3e      	ldr	r3, [pc, #248]	; (8009214 <acis_parse_command+0x4b8>)
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d11e      	bne.n	800915e <acis_parse_command+0x402>
          {
            crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 8009120:	21e0      	movs	r1, #224	; 0xe0
 8009122:	483d      	ldr	r0, [pc, #244]	; (8009218 <acis_parse_command+0x4bc>)
 8009124:	f000 fca0 	bl	8009a68 <CRC16_Generate>
 8009128:	4603      	mov	r3, r0
 800912a:	837b      	strh	r3, [r7, #26]
            if(crc == PK_ConfigMemoryData.crc)
 800912c:	4b38      	ldr	r3, [pc, #224]	; (8009210 <acis_parse_command+0x4b4>)
 800912e:	8a9b      	ldrh	r3, [r3, #20]
 8009130:	8b7a      	ldrh	r2, [r7, #26]
 8009132:	429a      	cmp	r2, r3
 8009134:	d110      	bne.n	8009158 <acis_parse_command+0x3fc>
            {
              memcpy(&((uint8_t*)&acis_config)[offset], &PK_ConfigMemoryData.data[0], size);
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	4a30      	ldr	r2, [pc, #192]	; (80091fc <acis_parse_command+0x4a0>)
 800913a:	4413      	add	r3, r2
 800913c:	6a3a      	ldr	r2, [r7, #32]
 800913e:	4936      	ldr	r1, [pc, #216]	; (8009218 <acis_parse_command+0x4bc>)
 8009140:	4618      	mov	r0, r3
 8009142:	f009 fe8f 	bl	8012e64 <memcpy>

              if(StatusSynchronizing == 1)
 8009146:	4b2e      	ldr	r3, [pc, #184]	; (8009200 <acis_parse_command+0x4a4>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b01      	cmp	r3, #1
 800914e:	d106      	bne.n	800915e <acis_parse_command+0x402>
                SyncRequestDone = 1;
 8009150:	4b2c      	ldr	r3, [pc, #176]	; (8009204 <acis_parse_command+0x4a8>)
 8009152:	2201      	movs	r2, #1
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	e002      	b.n	800915e <acis_parse_command+0x402>
            }
            else
              PK_ConfigMemoryAcknowledge.ErrorCode = 5;
 8009158:	4b2e      	ldr	r3, [pc, #184]	; (8009214 <acis_parse_command+0x4b8>)
 800915a:	2205      	movs	r2, #5
 800915c:	605a      	str	r2, [r3, #4]
          }

          protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryAcknowledge, sizeof(PK_ConfigMemoryAcknowledge));
 800915e:	2214      	movs	r2, #20
 8009160:	492c      	ldr	r1, [pc, #176]	; (8009214 <acis_parse_command+0x4b8>)
 8009162:	4829      	ldr	r0, [pc, #164]	; (8009208 <acis_parse_command+0x4ac>)
 8009164:	f003 fee6 	bl	800cf34 <protPushSequence>
        }
        else SyncError = PK_ConfigMemoryData.ErrorCode + 40;
        break;
 8009168:	e14e      	b.n	8009408 <acis_parse_command+0x6ac>
        else SyncError = PK_ConfigMemoryData.ErrorCode + 40;
 800916a:	4b29      	ldr	r3, [pc, #164]	; (8009210 <acis_parse_command+0x4b4>)
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	3328      	adds	r3, #40	; 0x28
 8009172:	b2da      	uxtb	r2, r3
 8009174:	4b25      	ldr	r3, [pc, #148]	; (800920c <acis_parse_command+0x4b0>)
 8009176:	701a      	strb	r2, [r3, #0]
        break;
 8009178:	e146      	b.n	8009408 <acis_parse_command+0x6ac>

      case PK_ConfigMemoryAcknowledgeID :
        PK_Copy(&PK_ConfigMemoryAcknowledge, msgBuf);
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	4825      	ldr	r0, [pc, #148]	; (8009214 <acis_parse_command+0x4b8>)
 800917e:	f7f7 ff2b 	bl	8000fd8 <PK_Copy>
        if(PK_ConfigMemoryAcknowledge.ErrorCode == 0)
 8009182:	4b24      	ldr	r3, [pc, #144]	; (8009214 <acis_parse_command+0x4b8>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d114      	bne.n	80091b4 <acis_parse_command+0x458>
        {
          if(StatusSynchronizing == 2)
 800918a:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <acis_parse_command+0x4a4>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b02      	cmp	r3, #2
 8009192:	d102      	bne.n	800919a <acis_parse_command+0x43e>
            SyncRequestDone = 1;
 8009194:	4b1b      	ldr	r3, [pc, #108]	; (8009204 <acis_parse_command+0x4a8>)
 8009196:	2201      	movs	r2, #1
 8009198:	701a      	strb	r2, [r3, #0]
          if(Applying)
 800919a:	4b20      	ldr	r3, [pc, #128]	; (800921c <acis_parse_command+0x4c0>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 812a 	beq.w	80093fa <acis_parse_command+0x69e>
          {
            Applying = 0;
 80091a6:	4b1d      	ldr	r3, [pc, #116]	; (800921c <acis_parse_command+0x4c0>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	701a      	strb	r2, [r3, #0]
            ApplyError = 0;
 80091ac:	4b1c      	ldr	r3, [pc, #112]	; (8009220 <acis_parse_command+0x4c4>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
        else
        {
          if(StatusSynchronizing == 2) SyncError = PK_ConfigMemoryAcknowledge.ErrorCode + 60;
          if(Applying) { Applying = 0; ApplyError = PK_ConfigMemoryAcknowledge.ErrorCode + 60; }
        }
        break;
 80091b2:	e122      	b.n	80093fa <acis_parse_command+0x69e>
          if(StatusSynchronizing == 2) SyncError = PK_ConfigMemoryAcknowledge.ErrorCode + 60;
 80091b4:	4b12      	ldr	r3, [pc, #72]	; (8009200 <acis_parse_command+0x4a4>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d106      	bne.n	80091cc <acis_parse_command+0x470>
 80091be:	4b15      	ldr	r3, [pc, #84]	; (8009214 <acis_parse_command+0x4b8>)
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	333c      	adds	r3, #60	; 0x3c
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	4b10      	ldr	r3, [pc, #64]	; (800920c <acis_parse_command+0x4b0>)
 80091ca:	701a      	strb	r2, [r3, #0]
          if(Applying) { Applying = 0; ApplyError = PK_ConfigMemoryAcknowledge.ErrorCode + 60; }
 80091cc:	4b13      	ldr	r3, [pc, #76]	; (800921c <acis_parse_command+0x4c0>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 8111 	beq.w	80093fa <acis_parse_command+0x69e>
 80091d8:	4b10      	ldr	r3, [pc, #64]	; (800921c <acis_parse_command+0x4c0>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	4b0d      	ldr	r3, [pc, #52]	; (8009214 <acis_parse_command+0x4b8>)
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	333c      	adds	r3, #60	; 0x3c
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	4b0d      	ldr	r3, [pc, #52]	; (8009220 <acis_parse_command+0x4c4>)
 80091ea:	701a      	strb	r2, [r3, #0]
        break;
 80091ec:	e105      	b.n	80093fa <acis_parse_command+0x69e>
 80091ee:	bf00      	nop
 80091f0:	200000c0 	.word	0x200000c0
 80091f4:	200001c0 	.word	0x200001c0
 80091f8:	200000da 	.word	0x200000da
 80091fc:	20002f20 	.word	0x20002f20
 8009200:	2000697f 	.word	0x2000697f
 8009204:	20006988 	.word	0x20006988
 8009208:	20006940 	.word	0x20006940
 800920c:	20006998 	.word	0x20006998
 8009210:	20000200 	.word	0x20000200
 8009214:	20000300 	.word	0x20000300
 8009218:	20000216 	.word	0x20000216
 800921c:	2000699a 	.word	0x2000699a
 8009220:	20006999 	.word	0x20006999
      case PK_TableMemoryAcknowledgeID :
        PK_Copy(&PK_TableMemoryAcknowledge, msgBuf);
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	487a      	ldr	r0, [pc, #488]	; (8009410 <acis_parse_command+0x6b4>)
 8009228:	f7f7 fed6 	bl	8000fd8 <PK_Copy>
        if(PK_TableMemoryAcknowledge.ErrorCode == 0)
 800922c:	4b78      	ldr	r3, [pc, #480]	; (8009410 <acis_parse_command+0x6b4>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d114      	bne.n	800925e <acis_parse_command+0x502>
        {
          if(StatusSynchronizing == 2)
 8009234:	4b77      	ldr	r3, [pc, #476]	; (8009414 <acis_parse_command+0x6b8>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d102      	bne.n	8009244 <acis_parse_command+0x4e8>
            SyncRequestDone = 1;
 800923e:	4b76      	ldr	r3, [pc, #472]	; (8009418 <acis_parse_command+0x6bc>)
 8009240:	2201      	movs	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]
          if(Applying)
 8009244:	4b75      	ldr	r3, [pc, #468]	; (800941c <acis_parse_command+0x6c0>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80d7 	beq.w	80093fe <acis_parse_command+0x6a2>
          {
            Applying = 0;
 8009250:	4b72      	ldr	r3, [pc, #456]	; (800941c <acis_parse_command+0x6c0>)
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
            ApplyError = 0;
 8009256:	4b72      	ldr	r3, [pc, #456]	; (8009420 <acis_parse_command+0x6c4>)
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
        else
        {
          if(StatusSynchronizing == 2) SyncError = PK_TableMemoryAcknowledge.ErrorCode + 80;
          if(Applying) { Applying = 0; ApplyError = PK_TableMemoryAcknowledge.ErrorCode + 80; }
        }
        break;
 800925c:	e0cf      	b.n	80093fe <acis_parse_command+0x6a2>
          if(StatusSynchronizing == 2) SyncError = PK_TableMemoryAcknowledge.ErrorCode + 80;
 800925e:	4b6d      	ldr	r3, [pc, #436]	; (8009414 <acis_parse_command+0x6b8>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d106      	bne.n	8009276 <acis_parse_command+0x51a>
 8009268:	4b69      	ldr	r3, [pc, #420]	; (8009410 <acis_parse_command+0x6b4>)
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	3350      	adds	r3, #80	; 0x50
 8009270:	b2da      	uxtb	r2, r3
 8009272:	4b6c      	ldr	r3, [pc, #432]	; (8009424 <acis_parse_command+0x6c8>)
 8009274:	701a      	strb	r2, [r3, #0]
          if(Applying) { Applying = 0; ApplyError = PK_TableMemoryAcknowledge.ErrorCode + 80; }
 8009276:	4b69      	ldr	r3, [pc, #420]	; (800941c <acis_parse_command+0x6c0>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 80be 	beq.w	80093fe <acis_parse_command+0x6a2>
 8009282:	4b66      	ldr	r3, [pc, #408]	; (800941c <acis_parse_command+0x6c0>)
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	4b61      	ldr	r3, [pc, #388]	; (8009410 <acis_parse_command+0x6b4>)
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	3350      	adds	r3, #80	; 0x50
 8009290:	b2da      	uxtb	r2, r3
 8009292:	4b63      	ldr	r3, [pc, #396]	; (8009420 <acis_parse_command+0x6c4>)
 8009294:	701a      	strb	r2, [r3, #0]
        break;
 8009296:	e0b2      	b.n	80093fe <acis_parse_command+0x6a2>

      case PK_DragUpdateResponseID :
        PK_Copy(&PK_DragUpdateResponse, msgBuf);
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	4863      	ldr	r0, [pc, #396]	; (8009428 <acis_parse_command+0x6cc>)
 800929c:	f7f7 fe9c 	bl	8000fd8 <PK_Copy>
        DragPointsRawCount = 0;
 80092a0:	4b62      	ldr	r3, [pc, #392]	; (800942c <acis_parse_command+0x6d0>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
        DragGraphReady = 0;
 80092a6:	4b62      	ldr	r3, [pc, #392]	; (8009430 <acis_parse_command+0x6d4>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]
        if(PK_DragUpdateResponse.ErrorCode > 0)
 80092ac:	4b5e      	ldr	r3, [pc, #376]	; (8009428 <acis_parse_command+0x6cc>)
 80092ae:	791b      	ldrb	r3, [r3, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <acis_parse_command+0x560>
          DragStatus = 4;
 80092b4:	4b5f      	ldr	r3, [pc, #380]	; (8009434 <acis_parse_command+0x6d8>)
 80092b6:	2204      	movs	r2, #4
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	e015      	b.n	80092e8 <acis_parse_command+0x58c>
        else if(DragStatus == 1 && PK_DragUpdateResponse.Started)
 80092bc:	4b5d      	ldr	r3, [pc, #372]	; (8009434 <acis_parse_command+0x6d8>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d108      	bne.n	80092d8 <acis_parse_command+0x57c>
 80092c6:	4b58      	ldr	r3, [pc, #352]	; (8009428 <acis_parse_command+0x6cc>)
 80092c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <acis_parse_command+0x57c>
          DragStatus = 2;
 80092d0:	4b58      	ldr	r3, [pc, #352]	; (8009434 <acis_parse_command+0x6d8>)
 80092d2:	2202      	movs	r2, #2
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e007      	b.n	80092e8 <acis_parse_command+0x58c>
        else if(PK_DragUpdateResponse.Completed)
 80092d8:	4b53      	ldr	r3, [pc, #332]	; (8009428 <acis_parse_command+0x6cc>)
 80092da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <acis_parse_command+0x58c>
          DragStatus = 3;
 80092e2:	4b54      	ldr	r3, [pc, #336]	; (8009434 <acis_parse_command+0x6d8>)
 80092e4:	2203      	movs	r2, #3
 80092e6:	701a      	strb	r2, [r3, #0]
        DragTime = PK_DragUpdateResponse.Time / 1000000.0f;
 80092e8:	4b4f      	ldr	r3, [pc, #316]	; (8009428 <acis_parse_command+0x6cc>)
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092f4:	eddf 6a50 	vldr	s13, [pc, #320]	; 8009438 <acis_parse_command+0x6dc>
 80092f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80092fc:	4b4f      	ldr	r3, [pc, #316]	; (800943c <acis_parse_command+0x6e0>)
 80092fe:	edc3 7a00 	vstr	s15, [r3]

        if(DragStatus == 3 || DragStatus == 4)
 8009302:	4b4c      	ldr	r3, [pc, #304]	; (8009434 <acis_parse_command+0x6d8>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b03      	cmp	r3, #3
 800930a:	d004      	beq.n	8009316 <acis_parse_command+0x5ba>
 800930c:	4b49      	ldr	r3, [pc, #292]	; (8009434 <acis_parse_command+0x6d8>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b04      	cmp	r3, #4
 8009314:	d175      	bne.n	8009402 <acis_parse_command+0x6a6>
        {
          DragPointsRawCount = PK_DragUpdateResponse.TotalPoints;
 8009316:	4b44      	ldr	r3, [pc, #272]	; (8009428 <acis_parse_command+0x6cc>)
 8009318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931a:	4a44      	ldr	r2, [pc, #272]	; (800942c <acis_parse_command+0x6d0>)
 800931c:	6013      	str	r3, [r2, #0]
          DragPointsRawCountPtr = 0;
 800931e:	4b48      	ldr	r3, [pc, #288]	; (8009440 <acis_parse_command+0x6e4>)
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]
          if(DragPointsRawCount - DragPointsRawCountPtr > 0)
 8009324:	4b41      	ldr	r3, [pc, #260]	; (800942c <acis_parse_command+0x6d0>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	4b45      	ldr	r3, [pc, #276]	; (8009440 <acis_parse_command+0x6e4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d068      	beq.n	8009402 <acis_parse_command+0x6a6>
          {
            PK_DragPointRequest.Destination = etrACIS;
 8009330:	4b44      	ldr	r3, [pc, #272]	; (8009444 <acis_parse_command+0x6e8>)
 8009332:	2202      	movs	r2, #2
 8009334:	709a      	strb	r2, [r3, #2]
            PK_DragPointRequest.FromRPM = DragRpmFrom;
 8009336:	4b44      	ldr	r3, [pc, #272]	; (8009448 <acis_parse_command+0x6ec>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a42      	ldr	r2, [pc, #264]	; (8009444 <acis_parse_command+0x6e8>)
 800933c:	6093      	str	r3, [r2, #8]
            PK_DragPointRequest.ToRPM = DragRpmTo;
 800933e:	4b43      	ldr	r3, [pc, #268]	; (800944c <acis_parse_command+0x6f0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a40      	ldr	r2, [pc, #256]	; (8009444 <acis_parse_command+0x6e8>)
 8009344:	60d3      	str	r3, [r2, #12]
            PK_DragPointRequest.PointNumber = DragPointsRawCountPtr;
 8009346:	4b3e      	ldr	r3, [pc, #248]	; (8009440 <acis_parse_command+0x6e4>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a3e      	ldr	r2, [pc, #248]	; (8009444 <acis_parse_command+0x6e8>)
 800934c:	6053      	str	r3, [r2, #4]
            protPushSequence(&fifoSendingQueue, &PK_DragPointRequest, sizeof(PK_DragPointRequest));
 800934e:	2210      	movs	r2, #16
 8009350:	493c      	ldr	r1, [pc, #240]	; (8009444 <acis_parse_command+0x6e8>)
 8009352:	483f      	ldr	r0, [pc, #252]	; (8009450 <acis_parse_command+0x6f4>)
 8009354:	f003 fdee 	bl	800cf34 <protPushSequence>
          }
        }
        break;
 8009358:	e053      	b.n	8009402 <acis_parse_command+0x6a6>

      case PK_DragPointResponseID :
        PK_Copy(&PK_DragPointResponse, msgBuf);
 800935a:	68b9      	ldr	r1, [r7, #8]
 800935c:	483d      	ldr	r0, [pc, #244]	; (8009454 <acis_parse_command+0x6f8>)
 800935e:	f7f7 fe3b 	bl	8000fd8 <PK_Copy>
        if(DragPointsRawCountPtr == PK_DragPointRequest.PointNumber && DragStatus > 2)
 8009362:	4b38      	ldr	r3, [pc, #224]	; (8009444 <acis_parse_command+0x6e8>)
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	4b36      	ldr	r3, [pc, #216]	; (8009440 <acis_parse_command+0x6e4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d14b      	bne.n	8009406 <acis_parse_command+0x6aa>
 800936e:	4b31      	ldr	r3, [pc, #196]	; (8009434 <acis_parse_command+0x6d8>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d946      	bls.n	8009406 <acis_parse_command+0x6aa>
        {
          DragPointsRaw[PK_DragPointResponse.PointNumber] = PK_DragPointResponse.Point;
 8009378:	4b36      	ldr	r3, [pc, #216]	; (8009454 <acis_parse_command+0x6f8>)
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	4936      	ldr	r1, [pc, #216]	; (8009458 <acis_parse_command+0x6fc>)
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	18ca      	adds	r2, r1, r3
 8009388:	4b32      	ldr	r3, [pc, #200]	; (8009454 <acis_parse_command+0x6f8>)
 800938a:	4615      	mov	r5, r2
 800938c:	f103 0414 	add.w	r4, r3, #20
 8009390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	602b      	str	r3, [r5, #0]
          DragPointsRawCountPtr++;
 8009398:	4b29      	ldr	r3, [pc, #164]	; (8009440 <acis_parse_command+0x6e4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3301      	adds	r3, #1
 800939e:	4a28      	ldr	r2, [pc, #160]	; (8009440 <acis_parse_command+0x6e4>)
 80093a0:	6013      	str	r3, [r2, #0]
          if(DragPointsRawCount - DragPointsRawCountPtr > 0)
 80093a2:	4b22      	ldr	r3, [pc, #136]	; (800942c <acis_parse_command+0x6d0>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	4b26      	ldr	r3, [pc, #152]	; (8009440 <acis_parse_command+0x6e4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d017      	beq.n	80093de <acis_parse_command+0x682>
          {
            DragGraphReady = 0;
 80093ae:	4b20      	ldr	r3, [pc, #128]	; (8009430 <acis_parse_command+0x6d4>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	701a      	strb	r2, [r3, #0]
            PK_DragPointRequest.Destination = etrACIS;
 80093b4:	4b23      	ldr	r3, [pc, #140]	; (8009444 <acis_parse_command+0x6e8>)
 80093b6:	2202      	movs	r2, #2
 80093b8:	709a      	strb	r2, [r3, #2]
            PK_DragPointRequest.FromRPM = DragRpmFrom;
 80093ba:	4b23      	ldr	r3, [pc, #140]	; (8009448 <acis_parse_command+0x6ec>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a21      	ldr	r2, [pc, #132]	; (8009444 <acis_parse_command+0x6e8>)
 80093c0:	6093      	str	r3, [r2, #8]
            PK_DragPointRequest.ToRPM = DragRpmTo;
 80093c2:	4b22      	ldr	r3, [pc, #136]	; (800944c <acis_parse_command+0x6f0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a1f      	ldr	r2, [pc, #124]	; (8009444 <acis_parse_command+0x6e8>)
 80093c8:	60d3      	str	r3, [r2, #12]
            PK_DragPointRequest.PointNumber = DragPointsRawCountPtr;
 80093ca:	4b1d      	ldr	r3, [pc, #116]	; (8009440 <acis_parse_command+0x6e4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a1d      	ldr	r2, [pc, #116]	; (8009444 <acis_parse_command+0x6e8>)
 80093d0:	6053      	str	r3, [r2, #4]
            protPushSequence(&fifoSendingQueue, &PK_DragPointRequest, sizeof(PK_DragPointRequest));
 80093d2:	2210      	movs	r2, #16
 80093d4:	491b      	ldr	r1, [pc, #108]	; (8009444 <acis_parse_command+0x6e8>)
 80093d6:	481e      	ldr	r0, [pc, #120]	; (8009450 <acis_parse_command+0x6f4>)
 80093d8:	f003 fdac 	bl	800cf34 <protPushSequence>
          else
          {
            DragGraphReady = 1;
          }
        }
        break;
 80093dc:	e013      	b.n	8009406 <acis_parse_command+0x6aa>
            DragGraphReady = 1;
 80093de:	4b14      	ldr	r3, [pc, #80]	; (8009430 <acis_parse_command+0x6d4>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	701a      	strb	r2, [r3, #0]
        break;
 80093e4:	e00f      	b.n	8009406 <acis_parse_command+0x6aa>
      return;
 80093e6:	bf00      	nop
 80093e8:	e00e      	b.n	8009408 <acis_parse_command+0x6ac>
      return;
 80093ea:	bf00      	nop
 80093ec:	e00c      	b.n	8009408 <acis_parse_command+0x6ac>

      default:
        break;
 80093ee:	bf00      	nop
 80093f0:	e00a      	b.n	8009408 <acis_parse_command+0x6ac>
        break;
 80093f2:	bf00      	nop
 80093f4:	e008      	b.n	8009408 <acis_parse_command+0x6ac>
        break;
 80093f6:	bf00      	nop
 80093f8:	e006      	b.n	8009408 <acis_parse_command+0x6ac>
        break;
 80093fa:	bf00      	nop
 80093fc:	e004      	b.n	8009408 <acis_parse_command+0x6ac>
        break;
 80093fe:	bf00      	nop
 8009400:	e002      	b.n	8009408 <acis_parse_command+0x6ac>
        break;
 8009402:	bf00      	nop
 8009404:	e000      	b.n	8009408 <acis_parse_command+0x6ac>
        break;
 8009406:	bf00      	nop
    }
  }
}
 8009408:	3730      	adds	r7, #48	; 0x30
 800940a:	46bd      	mov	sp, r7
 800940c:	bdb0      	pop	{r4, r5, r7, pc}
 800940e:	bf00      	nop
 8009410:	200001c0 	.word	0x200001c0
 8009414:	2000697f 	.word	0x2000697f
 8009418:	20006988 	.word	0x20006988
 800941c:	2000699a 	.word	0x2000699a
 8009420:	20006999 	.word	0x20006999
 8009424:	20006998 	.word	0x20006998
 8009428:	200003e0 	.word	0x200003e0
 800942c:	200069a8 	.word	0x200069a8
 8009430:	200069a1 	.word	0x200069a1
 8009434:	200069a0 	.word	0x200069a0
 8009438:	49742400 	.word	0x49742400
 800943c:	2000699c 	.word	0x2000699c
 8009440:	200069a4 	.word	0x200069a4
 8009444:	20000440 	.word	0x20000440
 8009448:	200004c8 	.word	0x200004c8
 800944c:	200004cc 	.word	0x200004cc
 8009450:	20006940 	.word	0x20006940
 8009454:	20000460 	.word	0x20000460
 8009458:	200069ac 	.word	0x200069ac

0800945c <acis_send_command>:

static inline HAL_StatusTypeDef acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef result = HAL_BUSY;
 800946a:	2302      	movs	r3, #2
 800946c:	75fb      	strb	r3, [r7, #23]
  int8_t status;

  status = xSender(xChaDst, (uint8_t*)msgBuf, length);
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	4618      	mov	r0, r3
 8009476:	f002 fded 	bl	800c054 <xSender>
 800947a:	4603      	mov	r3, r0
 800947c:	75bb      	strb	r3, [r7, #22]

  if(status == -1)
 800947e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009486:	d108      	bne.n	800949a <acis_send_command+0x3e>
  {
    StatusTimeout = 1;
 8009488:	4b0b      	ldr	r3, [pc, #44]	; (80094b8 <acis_send_command+0x5c>)
 800948a:	2201      	movs	r2, #1
 800948c:	701a      	strb	r2, [r3, #0]
    StatusCheck = 1;
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <acis_send_command+0x60>)
 8009490:	2201      	movs	r2, #1
 8009492:	701a      	strb	r2, [r3, #0]
    result = HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	75fb      	strb	r3, [r7, #23]
 8009498:	e008      	b.n	80094ac <acis_send_command+0x50>
  }
  else if(status == 1)
 800949a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d104      	bne.n	80094ac <acis_send_command+0x50>
  {
    StatusTimeout = 0;
 80094a2:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <acis_send_command+0x5c>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
    result = HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200159bc 	.word	0x200159bc
 80094bc:	2000697d 	.word	0x2000697d

080094c0 <controls_irq>:
static uint32_t sw_display_ftime = 0;
static uint8_t sw_display_delay = 0;


void controls_irq(void)
{
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
  TIM_CNT += TIM_STEP;
 80094c4:	4b8b      	ldr	r3, [pc, #556]	; (80096f4 <controls_irq+0x234>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	4a8a      	ldr	r2, [pc, #552]	; (80096f4 <controls_irq+0x234>)
 80094cc:	6013      	str	r3, [r2, #0]
  //Fuel1
  if(ISSWITCH(SW_CTRL(FUEL1)))
 80094ce:	4b8a      	ldr	r3, [pc, #552]	; (80096f8 <controls_irq+0x238>)
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d11d      	bne.n	8009516 <controls_irq+0x56>
  {
    if(sw_fuel1_delay > SW_PRESS_DELAY)
 80094da:	4b88      	ldr	r3, [pc, #544]	; (80096fc <controls_irq+0x23c>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b0a      	cmp	r3, #10
 80094e0:	d912      	bls.n	8009508 <controls_irq+0x48>
    {
      if(sw_fuel1_ftime == 0) sw_fuel1_ftime = TIM_CNT;
 80094e2:	4b87      	ldr	r3, [pc, #540]	; (8009700 <controls_irq+0x240>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d103      	bne.n	80094f2 <controls_irq+0x32>
 80094ea:	4b82      	ldr	r3, [pc, #520]	; (80096f4 <controls_irq+0x234>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a84      	ldr	r2, [pc, #528]	; (8009700 <controls_irq+0x240>)
 80094f0:	6013      	str	r3, [r2, #0]
      SW_FUEL1_TIME = TIM_CNT-sw_fuel1_ftime;
 80094f2:	4b80      	ldr	r3, [pc, #512]	; (80096f4 <controls_irq+0x234>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b82      	ldr	r3, [pc, #520]	; (8009700 <controls_irq+0x240>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	4a81      	ldr	r2, [pc, #516]	; (8009704 <controls_irq+0x244>)
 80094fe:	6013      	str	r3, [r2, #0]
      SW_FUEL1 = 1;
 8009500:	4b81      	ldr	r3, [pc, #516]	; (8009708 <controls_irq+0x248>)
 8009502:	2201      	movs	r2, #1
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	e010      	b.n	800952a <controls_irq+0x6a>
    } else sw_fuel1_delay+=TIM_STEP;
 8009508:	4b7c      	ldr	r3, [pc, #496]	; (80096fc <controls_irq+0x23c>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	b2da      	uxtb	r2, r3
 8009510:	4b7a      	ldr	r3, [pc, #488]	; (80096fc <controls_irq+0x23c>)
 8009512:	701a      	strb	r2, [r3, #0]
 8009514:	e009      	b.n	800952a <controls_irq+0x6a>
  } else SW_FUEL1 = sw_fuel1_delay = sw_fuel1_ftime = 0;
 8009516:	4b7a      	ldr	r3, [pc, #488]	; (8009700 <controls_irq+0x240>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	4b77      	ldr	r3, [pc, #476]	; (80096fc <controls_irq+0x23c>)
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
 8009522:	4b76      	ldr	r3, [pc, #472]	; (80096fc <controls_irq+0x23c>)
 8009524:	781a      	ldrb	r2, [r3, #0]
 8009526:	4b78      	ldr	r3, [pc, #480]	; (8009708 <controls_irq+0x248>)
 8009528:	701a      	strb	r2, [r3, #0]

  //Fuel2
  if(ISSWITCH(SW_CTRL(FUEL2)))
 800952a:	4b73      	ldr	r3, [pc, #460]	; (80096f8 <controls_irq+0x238>)
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009532:	2b00      	cmp	r3, #0
 8009534:	d11d      	bne.n	8009572 <controls_irq+0xb2>
  {
    if(sw_fuel2_delay > SW_PRESS_DELAY)
 8009536:	4b75      	ldr	r3, [pc, #468]	; (800970c <controls_irq+0x24c>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b0a      	cmp	r3, #10
 800953c:	d912      	bls.n	8009564 <controls_irq+0xa4>
    {
      if(sw_fuel2_ftime == 0) sw_fuel2_ftime = TIM_CNT;
 800953e:	4b74      	ldr	r3, [pc, #464]	; (8009710 <controls_irq+0x250>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d103      	bne.n	800954e <controls_irq+0x8e>
 8009546:	4b6b      	ldr	r3, [pc, #428]	; (80096f4 <controls_irq+0x234>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a71      	ldr	r2, [pc, #452]	; (8009710 <controls_irq+0x250>)
 800954c:	6013      	str	r3, [r2, #0]
      SW_FUEL2_TIME = TIM_CNT-sw_fuel2_ftime;
 800954e:	4b69      	ldr	r3, [pc, #420]	; (80096f4 <controls_irq+0x234>)
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	4b6f      	ldr	r3, [pc, #444]	; (8009710 <controls_irq+0x250>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	4a6e      	ldr	r2, [pc, #440]	; (8009714 <controls_irq+0x254>)
 800955a:	6013      	str	r3, [r2, #0]
      SW_FUEL2 = 1;
 800955c:	4b6e      	ldr	r3, [pc, #440]	; (8009718 <controls_irq+0x258>)
 800955e:	2201      	movs	r2, #1
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e010      	b.n	8009586 <controls_irq+0xc6>
    } else sw_fuel2_delay+=TIM_STEP;
 8009564:	4b69      	ldr	r3, [pc, #420]	; (800970c <controls_irq+0x24c>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	b2da      	uxtb	r2, r3
 800956c:	4b67      	ldr	r3, [pc, #412]	; (800970c <controls_irq+0x24c>)
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e009      	b.n	8009586 <controls_irq+0xc6>
  } else SW_FUEL2 = sw_fuel2_delay = sw_fuel2_ftime = 0;
 8009572:	4b67      	ldr	r3, [pc, #412]	; (8009710 <controls_irq+0x250>)
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	4b64      	ldr	r3, [pc, #400]	; (800970c <controls_irq+0x24c>)
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
 800957e:	4b63      	ldr	r3, [pc, #396]	; (800970c <controls_irq+0x24c>)
 8009580:	781a      	ldrb	r2, [r3, #0]
 8009582:	4b65      	ldr	r3, [pc, #404]	; (8009718 <controls_irq+0x258>)
 8009584:	701a      	strb	r2, [r3, #0]

  //Display
  if(ISSWITCH(SW_CTRL(DISPLAY)))
 8009586:	4b5c      	ldr	r3, [pc, #368]	; (80096f8 <controls_irq+0x238>)
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958e:	2b00      	cmp	r3, #0
 8009590:	d11d      	bne.n	80095ce <controls_irq+0x10e>
  {
    if(sw_display_delay > SW_PRESS_DELAY)
 8009592:	4b62      	ldr	r3, [pc, #392]	; (800971c <controls_irq+0x25c>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b0a      	cmp	r3, #10
 8009598:	d912      	bls.n	80095c0 <controls_irq+0x100>
    {
      if(sw_display_ftime == 0) sw_display_ftime = TIM_CNT;
 800959a:	4b61      	ldr	r3, [pc, #388]	; (8009720 <controls_irq+0x260>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <controls_irq+0xea>
 80095a2:	4b54      	ldr	r3, [pc, #336]	; (80096f4 <controls_irq+0x234>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a5e      	ldr	r2, [pc, #376]	; (8009720 <controls_irq+0x260>)
 80095a8:	6013      	str	r3, [r2, #0]
      SW_DISPLAY_TIME = TIM_CNT-sw_display_ftime;
 80095aa:	4b52      	ldr	r3, [pc, #328]	; (80096f4 <controls_irq+0x234>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b5c      	ldr	r3, [pc, #368]	; (8009720 <controls_irq+0x260>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	4a5b      	ldr	r2, [pc, #364]	; (8009724 <controls_irq+0x264>)
 80095b6:	6013      	str	r3, [r2, #0]
      SW_DISPLAY = 1;
 80095b8:	4b5b      	ldr	r3, [pc, #364]	; (8009728 <controls_irq+0x268>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	e010      	b.n	80095e2 <controls_irq+0x122>
    } else sw_display_delay+=TIM_STEP;
 80095c0:	4b56      	ldr	r3, [pc, #344]	; (800971c <controls_irq+0x25c>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	3301      	adds	r3, #1
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	4b54      	ldr	r3, [pc, #336]	; (800971c <controls_irq+0x25c>)
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	e009      	b.n	80095e2 <controls_irq+0x122>
  } else SW_DISPLAY = sw_display_delay = sw_display_ftime = 0;
 80095ce:	4b54      	ldr	r3, [pc, #336]	; (8009720 <controls_irq+0x260>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	4b51      	ldr	r3, [pc, #324]	; (800971c <controls_irq+0x25c>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
 80095da:	4b50      	ldr	r3, [pc, #320]	; (800971c <controls_irq+0x25c>)
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	4b52      	ldr	r3, [pc, #328]	; (8009728 <controls_irq+0x268>)
 80095e0:	701a      	strb	r2, [r3, #0]

  if(SW_DISPLAY)
 80095e2:	4b51      	ldr	r3, [pc, #324]	; (8009728 <controls_irq+0x268>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 81b8 	beq.w	800995e <controls_irq+0x49e>
  {
    //UP
    if(ISPRESS(BUT_CTRL(UP)))
 80095ee:	4b4f      	ldr	r3, [pc, #316]	; (800972c <controls_irq+0x26c>)
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d035      	beq.n	8009666 <controls_irq+0x1a6>
    {
      if(but_up_delay > BUT_PRESS_DELAY)
 80095fa:	4b4d      	ldr	r3, [pc, #308]	; (8009730 <controls_irq+0x270>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b32      	cmp	r3, #50	; 0x32
 8009600:	d92a      	bls.n	8009658 <controls_irq+0x198>
      {
        if(but_up_ftime == 0) but_up_ftime = TIM_CNT, BUT_UP_TIME = 0;
 8009602:	4b4c      	ldr	r3, [pc, #304]	; (8009734 <controls_irq+0x274>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <controls_irq+0x158>
 800960a:	4b3a      	ldr	r3, [pc, #232]	; (80096f4 <controls_irq+0x234>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a49      	ldr	r2, [pc, #292]	; (8009734 <controls_irq+0x274>)
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	4b49      	ldr	r3, [pc, #292]	; (8009738 <controls_irq+0x278>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
        BUT_UP_TIME += TIM_STEP;
 8009618:	4b47      	ldr	r3, [pc, #284]	; (8009738 <controls_irq+0x278>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3301      	adds	r3, #1
 800961e:	4a46      	ldr	r2, [pc, #280]	; (8009738 <controls_irq+0x278>)
 8009620:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8009622:	4b46      	ldr	r3, [pc, #280]	; (800973c <controls_irq+0x27c>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d111      	bne.n	8009650 <controls_irq+0x190>
 800962c:	4b44      	ldr	r3, [pc, #272]	; (8009740 <controls_irq+0x280>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10c      	bne.n	8009650 <controls_irq+0x190>
 8009636:	4b43      	ldr	r3, [pc, #268]	; (8009744 <controls_irq+0x284>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d107      	bne.n	8009650 <controls_irq+0x190>
 8009640:	4b41      	ldr	r3, [pc, #260]	; (8009748 <controls_irq+0x288>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <controls_irq+0x190>
          BUT_UP = 1;
 800964a:	4b40      	ldr	r3, [pc, #256]	; (800974c <controls_irq+0x28c>)
 800964c:	2201      	movs	r2, #1
 800964e:	701a      	strb	r2, [r3, #0]
        BUT_UP_PRESS = 1;
 8009650:	4b3c      	ldr	r3, [pc, #240]	; (8009744 <controls_irq+0x284>)
 8009652:	2201      	movs	r2, #1
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	e010      	b.n	800967a <controls_irq+0x1ba>
      } else but_up_delay+=TIM_STEP;
 8009658:	4b35      	ldr	r3, [pc, #212]	; (8009730 <controls_irq+0x270>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	4b33      	ldr	r3, [pc, #204]	; (8009730 <controls_irq+0x270>)
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	e009      	b.n	800967a <controls_irq+0x1ba>
    } else BUT_UP_PRESS = but_up_delay = but_up_ftime = 0;
 8009666:	4b33      	ldr	r3, [pc, #204]	; (8009734 <controls_irq+0x274>)
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	4b30      	ldr	r3, [pc, #192]	; (8009730 <controls_irq+0x270>)
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	4b2f      	ldr	r3, [pc, #188]	; (8009730 <controls_irq+0x270>)
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	4b33      	ldr	r3, [pc, #204]	; (8009744 <controls_irq+0x284>)
 8009678:	701a      	strb	r2, [r3, #0]

    //DOWN
    if(ISPRESS(BUT_CTRL(DOWN)))
 800967a:	4b2c      	ldr	r3, [pc, #176]	; (800972c <controls_irq+0x26c>)
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009682:	2b00      	cmp	r3, #0
 8009684:	d06c      	beq.n	8009760 <controls_irq+0x2a0>
    {
      if(but_down_delay > BUT_PRESS_DELAY)
 8009686:	4b32      	ldr	r3, [pc, #200]	; (8009750 <controls_irq+0x290>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	2b32      	cmp	r3, #50	; 0x32
 800968c:	d92a      	bls.n	80096e4 <controls_irq+0x224>
      {
        if(but_down_ftime == 0) but_down_ftime = TIM_CNT, BUT_DOWN_TIME = 0;
 800968e:	4b31      	ldr	r3, [pc, #196]	; (8009754 <controls_irq+0x294>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <controls_irq+0x1e4>
 8009696:	4b17      	ldr	r3, [pc, #92]	; (80096f4 <controls_irq+0x234>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a2e      	ldr	r2, [pc, #184]	; (8009754 <controls_irq+0x294>)
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	4b2e      	ldr	r3, [pc, #184]	; (8009758 <controls_irq+0x298>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
        BUT_DOWN_TIME += TIM_STEP;
 80096a4:	4b2c      	ldr	r3, [pc, #176]	; (8009758 <controls_irq+0x298>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3301      	adds	r3, #1
 80096aa:	4a2b      	ldr	r2, [pc, #172]	; (8009758 <controls_irq+0x298>)
 80096ac:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80096ae:	4b23      	ldr	r3, [pc, #140]	; (800973c <controls_irq+0x27c>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d111      	bne.n	80096dc <controls_irq+0x21c>
 80096b8:	4b21      	ldr	r3, [pc, #132]	; (8009740 <controls_irq+0x280>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10c      	bne.n	80096dc <controls_irq+0x21c>
 80096c2:	4b20      	ldr	r3, [pc, #128]	; (8009744 <controls_irq+0x284>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d107      	bne.n	80096dc <controls_irq+0x21c>
 80096cc:	4b1e      	ldr	r3, [pc, #120]	; (8009748 <controls_irq+0x288>)
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d102      	bne.n	80096dc <controls_irq+0x21c>
          BUT_DOWN = 1;
 80096d6:	4b21      	ldr	r3, [pc, #132]	; (800975c <controls_irq+0x29c>)
 80096d8:	2201      	movs	r2, #1
 80096da:	701a      	strb	r2, [r3, #0]
        BUT_DOWN_PRESS = 1;
 80096dc:	4b1a      	ldr	r3, [pc, #104]	; (8009748 <controls_irq+0x288>)
 80096de:	2201      	movs	r2, #1
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e047      	b.n	8009774 <controls_irq+0x2b4>
      } else but_down_delay+=TIM_STEP;
 80096e4:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <controls_irq+0x290>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	4b18      	ldr	r3, [pc, #96]	; (8009750 <controls_irq+0x290>)
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	e040      	b.n	8009774 <controls_irq+0x2b4>
 80096f2:	bf00      	nop
 80096f4:	200159c0 	.word	0x200159c0
 80096f8:	40020800 	.word	0x40020800
 80096fc:	20015a14 	.word	0x20015a14
 8009700:	20015a10 	.word	0x20015a10
 8009704:	20015a0c 	.word	0x20015a0c
 8009708:	20015a08 	.word	0x20015a08
 800970c:	20015a20 	.word	0x20015a20
 8009710:	20015a1c 	.word	0x20015a1c
 8009714:	20015a18 	.word	0x20015a18
 8009718:	20015a15 	.word	0x20015a15
 800971c:	20015a2c 	.word	0x20015a2c
 8009720:	20015a28 	.word	0x20015a28
 8009724:	20015a24 	.word	0x20015a24
 8009728:	20015a21 	.word	0x20015a21
 800972c:	40020400 	.word	0x40020400
 8009730:	200159ec 	.word	0x200159ec
 8009734:	200159f8 	.word	0x200159f8
 8009738:	200159d4 	.word	0x200159d4
 800973c:	200159c4 	.word	0x200159c4
 8009740:	200159c5 	.word	0x200159c5
 8009744:	200159c6 	.word	0x200159c6
 8009748:	200159c7 	.word	0x200159c7
 800974c:	200159e6 	.word	0x200159e6
 8009750:	200159ed 	.word	0x200159ed
 8009754:	200159fc 	.word	0x200159fc
 8009758:	200159d8 	.word	0x200159d8
 800975c:	200159e7 	.word	0x200159e7
    } else BUT_DOWN_PRESS = but_down_delay = but_down_ftime = 0;
 8009760:	4b95      	ldr	r3, [pc, #596]	; (80099b8 <controls_irq+0x4f8>)
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	4b95      	ldr	r3, [pc, #596]	; (80099bc <controls_irq+0x4fc>)
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	4b93      	ldr	r3, [pc, #588]	; (80099bc <controls_irq+0x4fc>)
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	4b93      	ldr	r3, [pc, #588]	; (80099c0 <controls_irq+0x500>)
 8009772:	701a      	strb	r2, [r3, #0]

    //LEFT
    if(ISPRESS(BUT_CTRL(LEFT)))
 8009774:	4b93      	ldr	r3, [pc, #588]	; (80099c4 <controls_irq+0x504>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f003 0310 	and.w	r3, r3, #16
 800977c:	2b00      	cmp	r3, #0
 800977e:	d035      	beq.n	80097ec <controls_irq+0x32c>
    {
      if(but_left_delay > BUT_PRESS_DELAY)
 8009780:	4b91      	ldr	r3, [pc, #580]	; (80099c8 <controls_irq+0x508>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b32      	cmp	r3, #50	; 0x32
 8009786:	d92a      	bls.n	80097de <controls_irq+0x31e>
      {
        if(but_left_ftime == 0) but_left_ftime = TIM_CNT, BUT_LEFT_TIME = 0;
 8009788:	4b90      	ldr	r3, [pc, #576]	; (80099cc <controls_irq+0x50c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <controls_irq+0x2de>
 8009790:	4b8f      	ldr	r3, [pc, #572]	; (80099d0 <controls_irq+0x510>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a8d      	ldr	r2, [pc, #564]	; (80099cc <controls_irq+0x50c>)
 8009796:	6013      	str	r3, [r2, #0]
 8009798:	4b8e      	ldr	r3, [pc, #568]	; (80099d4 <controls_irq+0x514>)
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
        BUT_LEFT_TIME += TIM_STEP;
 800979e:	4b8d      	ldr	r3, [pc, #564]	; (80099d4 <controls_irq+0x514>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	4a8b      	ldr	r2, [pc, #556]	; (80099d4 <controls_irq+0x514>)
 80097a6:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80097a8:	4b8b      	ldr	r3, [pc, #556]	; (80099d8 <controls_irq+0x518>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d111      	bne.n	80097d6 <controls_irq+0x316>
 80097b2:	4b8a      	ldr	r3, [pc, #552]	; (80099dc <controls_irq+0x51c>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10c      	bne.n	80097d6 <controls_irq+0x316>
 80097bc:	4b88      	ldr	r3, [pc, #544]	; (80099e0 <controls_irq+0x520>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d107      	bne.n	80097d6 <controls_irq+0x316>
 80097c6:	4b7e      	ldr	r3, [pc, #504]	; (80099c0 <controls_irq+0x500>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <controls_irq+0x316>
          BUT_LEFT = 1;
 80097d0:	4b84      	ldr	r3, [pc, #528]	; (80099e4 <controls_irq+0x524>)
 80097d2:	2201      	movs	r2, #1
 80097d4:	701a      	strb	r2, [r3, #0]
        BUT_LEFT_PRESS = 1;
 80097d6:	4b80      	ldr	r3, [pc, #512]	; (80099d8 <controls_irq+0x518>)
 80097d8:	2201      	movs	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e010      	b.n	8009800 <controls_irq+0x340>
      } else but_left_delay+=TIM_STEP;
 80097de:	4b7a      	ldr	r3, [pc, #488]	; (80099c8 <controls_irq+0x508>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	4b78      	ldr	r3, [pc, #480]	; (80099c8 <controls_irq+0x508>)
 80097e8:	701a      	strb	r2, [r3, #0]
 80097ea:	e009      	b.n	8009800 <controls_irq+0x340>
    } else BUT_LEFT_PRESS = but_left_delay = but_left_ftime = 0;
 80097ec:	4b77      	ldr	r3, [pc, #476]	; (80099cc <controls_irq+0x50c>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	4b75      	ldr	r3, [pc, #468]	; (80099c8 <controls_irq+0x508>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	4b73      	ldr	r3, [pc, #460]	; (80099c8 <controls_irq+0x508>)
 80097fa:	781a      	ldrb	r2, [r3, #0]
 80097fc:	4b76      	ldr	r3, [pc, #472]	; (80099d8 <controls_irq+0x518>)
 80097fe:	701a      	strb	r2, [r3, #0]

    //RIGHT
    if(ISPRESS(BUT_CTRL(RIGHT)))
 8009800:	4b70      	ldr	r3, [pc, #448]	; (80099c4 <controls_irq+0x504>)
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	f003 0320 	and.w	r3, r3, #32
 8009808:	2b00      	cmp	r3, #0
 800980a:	d035      	beq.n	8009878 <controls_irq+0x3b8>
    {
      if(but_right_delay > BUT_PRESS_DELAY)
 800980c:	4b76      	ldr	r3, [pc, #472]	; (80099e8 <controls_irq+0x528>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b32      	cmp	r3, #50	; 0x32
 8009812:	d92a      	bls.n	800986a <controls_irq+0x3aa>
      {
        if(but_right_ftime == 0) but_right_ftime = TIM_CNT, BUT_RIGHT_TIME = 0;
 8009814:	4b75      	ldr	r3, [pc, #468]	; (80099ec <controls_irq+0x52c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d106      	bne.n	800982a <controls_irq+0x36a>
 800981c:	4b6c      	ldr	r3, [pc, #432]	; (80099d0 <controls_irq+0x510>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a72      	ldr	r2, [pc, #456]	; (80099ec <controls_irq+0x52c>)
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	4b72      	ldr	r3, [pc, #456]	; (80099f0 <controls_irq+0x530>)
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]
        BUT_RIGHT_TIME += TIM_STEP;
 800982a:	4b71      	ldr	r3, [pc, #452]	; (80099f0 <controls_irq+0x530>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3301      	adds	r3, #1
 8009830:	4a6f      	ldr	r2, [pc, #444]	; (80099f0 <controls_irq+0x530>)
 8009832:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8009834:	4b68      	ldr	r3, [pc, #416]	; (80099d8 <controls_irq+0x518>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d111      	bne.n	8009862 <controls_irq+0x3a2>
 800983e:	4b67      	ldr	r3, [pc, #412]	; (80099dc <controls_irq+0x51c>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10c      	bne.n	8009862 <controls_irq+0x3a2>
 8009848:	4b65      	ldr	r3, [pc, #404]	; (80099e0 <controls_irq+0x520>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d107      	bne.n	8009862 <controls_irq+0x3a2>
 8009852:	4b5b      	ldr	r3, [pc, #364]	; (80099c0 <controls_irq+0x500>)
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d102      	bne.n	8009862 <controls_irq+0x3a2>
          BUT_RIGHT = 1;
 800985c:	4b65      	ldr	r3, [pc, #404]	; (80099f4 <controls_irq+0x534>)
 800985e:	2201      	movs	r2, #1
 8009860:	701a      	strb	r2, [r3, #0]
        BUT_RIGHT_PRESS = 1;
 8009862:	4b5e      	ldr	r3, [pc, #376]	; (80099dc <controls_irq+0x51c>)
 8009864:	2201      	movs	r2, #1
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e010      	b.n	800988c <controls_irq+0x3cc>
      } else but_right_delay+=TIM_STEP;
 800986a:	4b5f      	ldr	r3, [pc, #380]	; (80099e8 <controls_irq+0x528>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	3301      	adds	r3, #1
 8009870:	b2da      	uxtb	r2, r3
 8009872:	4b5d      	ldr	r3, [pc, #372]	; (80099e8 <controls_irq+0x528>)
 8009874:	701a      	strb	r2, [r3, #0]
 8009876:	e009      	b.n	800988c <controls_irq+0x3cc>
    } else BUT_RIGHT_PRESS = but_right_delay = but_right_ftime = 0;
 8009878:	4b5c      	ldr	r3, [pc, #368]	; (80099ec <controls_irq+0x52c>)
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	4b5a      	ldr	r3, [pc, #360]	; (80099e8 <controls_irq+0x528>)
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	4b58      	ldr	r3, [pc, #352]	; (80099e8 <controls_irq+0x528>)
 8009886:	781a      	ldrb	r2, [r3, #0]
 8009888:	4b54      	ldr	r3, [pc, #336]	; (80099dc <controls_irq+0x51c>)
 800988a:	701a      	strb	r2, [r3, #0]

    //CANCEL
    if(ISPRESS(BUT_CTRL(CANCEL)))
 800988c:	4b5a      	ldr	r3, [pc, #360]	; (80099f8 <controls_irq+0x538>)
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d021      	beq.n	80098dc <controls_irq+0x41c>
    {
      if(but_cancel_delay > BUT_PRESS_DELAY)
 8009898:	4b58      	ldr	r3, [pc, #352]	; (80099fc <controls_irq+0x53c>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b32      	cmp	r3, #50	; 0x32
 800989e:	d916      	bls.n	80098ce <controls_irq+0x40e>
      {
        if(but_cancel_ftime == 0) but_cancel_ftime = TIM_CNT, BUT_CANCEL_TIME = 0,BUT_CANCEL = 1;
 80098a0:	4b57      	ldr	r3, [pc, #348]	; (8009a00 <controls_irq+0x540>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <controls_irq+0x3fc>
 80098a8:	4b49      	ldr	r3, [pc, #292]	; (80099d0 <controls_irq+0x510>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a54      	ldr	r2, [pc, #336]	; (8009a00 <controls_irq+0x540>)
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	4b54      	ldr	r3, [pc, #336]	; (8009a04 <controls_irq+0x544>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	4b54      	ldr	r3, [pc, #336]	; (8009a08 <controls_irq+0x548>)
 80098b8:	2201      	movs	r2, #1
 80098ba:	701a      	strb	r2, [r3, #0]
        BUT_CANCEL_TIME += TIM_STEP;
 80098bc:	4b51      	ldr	r3, [pc, #324]	; (8009a04 <controls_irq+0x544>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	4a50      	ldr	r2, [pc, #320]	; (8009a04 <controls_irq+0x544>)
 80098c4:	6013      	str	r3, [r2, #0]

        BUT_CANCEL_PRESS = 1;
 80098c6:	4b51      	ldr	r3, [pc, #324]	; (8009a0c <controls_irq+0x54c>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	e010      	b.n	80098f0 <controls_irq+0x430>
      } else but_cancel_delay+=TIM_STEP;
 80098ce:	4b4b      	ldr	r3, [pc, #300]	; (80099fc <controls_irq+0x53c>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	4b49      	ldr	r3, [pc, #292]	; (80099fc <controls_irq+0x53c>)
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	e009      	b.n	80098f0 <controls_irq+0x430>
    } else BUT_CANCEL_PRESS = but_cancel_delay = but_cancel_ftime = 0;
 80098dc:	4b48      	ldr	r3, [pc, #288]	; (8009a00 <controls_irq+0x540>)
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	4b46      	ldr	r3, [pc, #280]	; (80099fc <controls_irq+0x53c>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	4b44      	ldr	r3, [pc, #272]	; (80099fc <controls_irq+0x53c>)
 80098ea:	781a      	ldrb	r2, [r3, #0]
 80098ec:	4b47      	ldr	r3, [pc, #284]	; (8009a0c <controls_irq+0x54c>)
 80098ee:	701a      	strb	r2, [r3, #0]

    //ENTER
    if(ISPRESS(BUT_CTRL(ENTER)))
 80098f0:	4b47      	ldr	r3, [pc, #284]	; (8009a10 <controls_irq+0x550>)
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d021      	beq.n	8009940 <controls_irq+0x480>
    {
      if(but_enter_delay > BUT_PRESS_DELAY)
 80098fc:	4b45      	ldr	r3, [pc, #276]	; (8009a14 <controls_irq+0x554>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b32      	cmp	r3, #50	; 0x32
 8009902:	d916      	bls.n	8009932 <controls_irq+0x472>
      {
        if(but_enter_ftime == 0) but_enter_ftime = TIM_CNT, BUT_ENTER_TIME = 0,BUT_ENTER = 1;
 8009904:	4b44      	ldr	r3, [pc, #272]	; (8009a18 <controls_irq+0x558>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d109      	bne.n	8009920 <controls_irq+0x460>
 800990c:	4b30      	ldr	r3, [pc, #192]	; (80099d0 <controls_irq+0x510>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a41      	ldr	r2, [pc, #260]	; (8009a18 <controls_irq+0x558>)
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	4b41      	ldr	r3, [pc, #260]	; (8009a1c <controls_irq+0x55c>)
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	4b41      	ldr	r3, [pc, #260]	; (8009a20 <controls_irq+0x560>)
 800991c:	2201      	movs	r2, #1
 800991e:	701a      	strb	r2, [r3, #0]
        BUT_ENTER_TIME += TIM_STEP;
 8009920:	4b3e      	ldr	r3, [pc, #248]	; (8009a1c <controls_irq+0x55c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	4a3d      	ldr	r2, [pc, #244]	; (8009a1c <controls_irq+0x55c>)
 8009928:	6013      	str	r3, [r2, #0]
        BUT_ENTER_PRESS = 1;
 800992a:	4b3e      	ldr	r3, [pc, #248]	; (8009a24 <controls_irq+0x564>)
 800992c:	2201      	movs	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	e010      	b.n	8009954 <controls_irq+0x494>
      } else but_enter_delay+=TIM_STEP;
 8009932:	4b38      	ldr	r3, [pc, #224]	; (8009a14 <controls_irq+0x554>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	3301      	adds	r3, #1
 8009938:	b2da      	uxtb	r2, r3
 800993a:	4b36      	ldr	r3, [pc, #216]	; (8009a14 <controls_irq+0x554>)
 800993c:	701a      	strb	r2, [r3, #0]
 800993e:	e009      	b.n	8009954 <controls_irq+0x494>
    } else BUT_ENTER_PRESS = but_enter_delay = but_enter_ftime = 0;
 8009940:	4b35      	ldr	r3, [pc, #212]	; (8009a18 <controls_irq+0x558>)
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	4b33      	ldr	r3, [pc, #204]	; (8009a14 <controls_irq+0x554>)
 8009948:	2200      	movs	r2, #0
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	4b31      	ldr	r3, [pc, #196]	; (8009a14 <controls_irq+0x554>)
 800994e:	781a      	ldrb	r2, [r3, #0]
 8009950:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <controls_irq+0x564>)
 8009952:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 255;
 8009954:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009958:	22ff      	movs	r2, #255	; 0xff
 800995a:	63da      	str	r2, [r3, #60]	; 0x3c
    BUT_RIGHT_PRESS = 0;
    BUT_UP_PRESS = 0;
    BUT_DOWN_PRESS = 0;
    TIM2->CCR3 = 0;
  }
}
 800995c:	e027      	b.n	80099ae <controls_irq+0x4ee>
    BUT_CANCEL = 0;
 800995e:	4b2a      	ldr	r3, [pc, #168]	; (8009a08 <controls_irq+0x548>)
 8009960:	2200      	movs	r2, #0
 8009962:	701a      	strb	r2, [r3, #0]
    BUT_ENTER = 0;
 8009964:	4b2e      	ldr	r3, [pc, #184]	; (8009a20 <controls_irq+0x560>)
 8009966:	2200      	movs	r2, #0
 8009968:	701a      	strb	r2, [r3, #0]
    BUT_LEFT = 0;
 800996a:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <controls_irq+0x524>)
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT = 0;
 8009970:	4b20      	ldr	r3, [pc, #128]	; (80099f4 <controls_irq+0x534>)
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
    BUT_UP = 0;
 8009976:	4b2c      	ldr	r3, [pc, #176]	; (8009a28 <controls_irq+0x568>)
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]
    BUT_DOWN = 0;
 800997c:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <controls_irq+0x56c>)
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
    BUT_CANCEL_PRESS = 0;
 8009982:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <controls_irq+0x54c>)
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
    BUT_ENTER_PRESS = 0;
 8009988:	4b26      	ldr	r3, [pc, #152]	; (8009a24 <controls_irq+0x564>)
 800998a:	2200      	movs	r2, #0
 800998c:	701a      	strb	r2, [r3, #0]
    BUT_LEFT_PRESS = 0;
 800998e:	4b12      	ldr	r3, [pc, #72]	; (80099d8 <controls_irq+0x518>)
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT_PRESS = 0;
 8009994:	4b11      	ldr	r3, [pc, #68]	; (80099dc <controls_irq+0x51c>)
 8009996:	2200      	movs	r2, #0
 8009998:	701a      	strb	r2, [r3, #0]
    BUT_UP_PRESS = 0;
 800999a:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <controls_irq+0x520>)
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
    BUT_DOWN_PRESS = 0;
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <controls_irq+0x500>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 0;
 80099a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099aa:	2200      	movs	r2, #0
 80099ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80099ae:	bf00      	nop
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	200159fc 	.word	0x200159fc
 80099bc:	200159ed 	.word	0x200159ed
 80099c0:	200159c7 	.word	0x200159c7
 80099c4:	40020400 	.word	0x40020400
 80099c8:	200159ea 	.word	0x200159ea
 80099cc:	200159f0 	.word	0x200159f0
 80099d0:	200159c0 	.word	0x200159c0
 80099d4:	200159cc 	.word	0x200159cc
 80099d8:	200159c4 	.word	0x200159c4
 80099dc:	200159c5 	.word	0x200159c5
 80099e0:	200159c6 	.word	0x200159c6
 80099e4:	200159e4 	.word	0x200159e4
 80099e8:	200159eb 	.word	0x200159eb
 80099ec:	200159f4 	.word	0x200159f4
 80099f0:	200159d0 	.word	0x200159d0
 80099f4:	200159e5 	.word	0x200159e5
 80099f8:	40020800 	.word	0x40020800
 80099fc:	200159ef 	.word	0x200159ef
 8009a00:	20015a04 	.word	0x20015a04
 8009a04:	200159e0 	.word	0x200159e0
 8009a08:	200159e9 	.word	0x200159e9
 8009a0c:	200159c9 	.word	0x200159c9
 8009a10:	40020c00 	.word	0x40020c00
 8009a14:	200159ee 	.word	0x200159ee
 8009a18:	20015a00 	.word	0x20015a00
 8009a1c:	200159dc 	.word	0x200159dc
 8009a20:	200159e8 	.word	0x200159e8
 8009a24:	200159c8 	.word	0x200159c8
 8009a28:	200159e6 	.word	0x200159e6
 8009a2c:	200159e7 	.word	0x200159e7

08009a30 <CRC16_RegisterHardware>:
  .cb_size = 0
};


void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  if(mutexCrc == NULL)
 8009a38:	4b08      	ldr	r3, [pc, #32]	; (8009a5c <CRC16_RegisterHardware+0x2c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <CRC16_RegisterHardware+0x1c>
    mutexCrc = osMutexNew(&mutexAttrs);
 8009a40:	4807      	ldr	r0, [pc, #28]	; (8009a60 <CRC16_RegisterHardware+0x30>)
 8009a42:	f005 ff25 	bl	800f890 <osMutexNew>
 8009a46:	4602      	mov	r2, r0
 8009a48:	4b04      	ldr	r3, [pc, #16]	; (8009a5c <CRC16_RegisterHardware+0x2c>)
 8009a4a:	601a      	str	r2, [r3, #0]
  handle_crc = hcrc;
 8009a4c:	4a05      	ldr	r2, [pc, #20]	; (8009a64 <CRC16_RegisterHardware+0x34>)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6013      	str	r3, [r2, #0]
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20015a34 	.word	0x20015a34
 8009a60:	08017a1c 	.word	0x08017a1c
 8009a64:	20015a30 	.word	0x20015a30

08009a68 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 8009a76:	4b15      	ldr	r3, [pc, #84]	; (8009acc <CRC16_Generate+0x64>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d105      	bne.n	8009a8a <CRC16_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 8009a7e:	4814      	ldr	r0, [pc, #80]	; (8009ad0 <CRC16_Generate+0x68>)
 8009a80:	f005 ff06 	bl	800f890 <osMutexNew>
 8009a84:	4602      	mov	r2, r0
 8009a86:	4b11      	ldr	r3, [pc, #68]	; (8009acc <CRC16_Generate+0x64>)
 8009a88:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 8009a8a:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <CRC16_Generate+0x6c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d017      	beq.n	8009ac2 <CRC16_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 8009a92:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <CRC16_Generate+0x64>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2100      	movs	r1, #0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f005 ff3b 	bl	800f914 <osMutexAcquire>
 8009a9e:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10d      	bne.n	8009ac2 <CRC16_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <CRC16_Generate+0x6c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f003 fe22 	bl	800d6f8 <HAL_CRC_Calculate>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 8009ab8:	4b04      	ldr	r3, [pc, #16]	; (8009acc <CRC16_Generate+0x64>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f005 ff59 	bl	800f974 <osMutexRelease>
    }
  }
  return result;
 8009ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20015a34 	.word	0x20015a34
 8009ad0:	08017a1c 	.word	0x08017a1c
 8009ad4:	20015a30 	.word	0x20015a30

08009ad8 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 8009ae6:	4b19      	ldr	r3, [pc, #100]	; (8009b4c <CRC8_Generate+0x74>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d105      	bne.n	8009afa <CRC8_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 8009aee:	4818      	ldr	r0, [pc, #96]	; (8009b50 <CRC8_Generate+0x78>)
 8009af0:	f005 fece 	bl	800f890 <osMutexNew>
 8009af4:	4602      	mov	r2, r0
 8009af6:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <CRC8_Generate+0x74>)
 8009af8:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 8009afa:	4b16      	ldr	r3, [pc, #88]	; (8009b54 <CRC8_Generate+0x7c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d017      	beq.n	8009b32 <CRC8_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <CRC8_Generate+0x74>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f005 ff03 	bl	800f914 <osMutexAcquire>
 8009b0e:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10d      	bne.n	8009b32 <CRC8_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8009b16:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <CRC8_Generate+0x7c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	6879      	ldr	r1, [r7, #4]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f003 fdea 	bl	800d6f8 <HAL_CRC_Calculate>
 8009b24:	4603      	mov	r3, r0
 8009b26:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <CRC8_Generate+0x74>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f005 ff21 	bl	800f974 <osMutexRelease>
    }
  }
  return (result & 0xFF) ^ (result >> 8);
 8009b32:	89fb      	ldrh	r3, [r7, #14]
 8009b34:	b25a      	sxtb	r2, r3
 8009b36:	89fb      	ldrh	r3, [r7, #14]
 8009b38:	0a1b      	lsrs	r3, r3, #8
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	b25b      	sxtb	r3, r3
 8009b3e:	4053      	eors	r3, r2
 8009b40:	b25b      	sxtb	r3, r3
 8009b42:	b2db      	uxtb	r3, r3
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20015a34 	.word	0x20015a34
 8009b50:	08017a1c 	.word	0x08017a1c
 8009b54:	20015a30 	.word	0x20015a30

08009b58 <DelayInit>:
volatile uint32_t DelStart[COUNTERS];
static volatile uint32_t divider = 0;
static volatile uint32_t prescaller = 0;

void DelayInit(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 8009b5e:	4b25      	ldr	r3, [pc, #148]	; (8009bf4 <DelayInit+0x9c>)
 8009b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b62:	4a24      	ldr	r2, [pc, #144]	; (8009bf4 <DelayInit+0x9c>)
 8009b64:	f043 0308 	orr.w	r3, r3, #8
 8009b68:	6413      	str	r3, [r2, #64]	; 0x40
 8009b6a:	4b22      	ldr	r3, [pc, #136]	; (8009bf4 <DelayInit+0x9c>)
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f003 0308 	and.w	r3, r3, #8
 8009b72:	603b      	str	r3, [r7, #0]
 8009b74:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 8009b76:	4b20      	ldr	r3, [pc, #128]	; (8009bf8 <DelayInit+0xa0>)
 8009b78:	4a20      	ldr	r2, [pc, #128]	; (8009bfc <DelayInit+0xa4>)
 8009b7a:	601a      	str	r2, [r3, #0]
    divider = 4;
 8009b7c:	4b20      	ldr	r3, [pc, #128]	; (8009c00 <DelayInit+0xa8>)
 8009b7e:	2204      	movs	r2, #4
 8009b80:	601a      	str	r2, [r3, #0]

    prescaller = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / divider;
 8009b82:	f004 fb43 	bl	800e20c <HAL_RCC_GetPCLK1Freq>
 8009b86:	4603      	mov	r3, r0
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4a1e      	ldr	r2, [pc, #120]	; (8009c04 <DelayInit+0xac>)
 8009b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b90:	0c9a      	lsrs	r2, r3, #18
 8009b92:	4b1b      	ldr	r3, [pc, #108]	; (8009c00 <DelayInit+0xa8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b9a:	4a1b      	ldr	r2, [pc, #108]	; (8009c08 <DelayInit+0xb0>)
 8009b9c:	6013      	str	r3, [r2, #0]
    htim_delay.Init.Prescaler = divider - 1;
 8009b9e:	4b18      	ldr	r3, [pc, #96]	; (8009c00 <DelayInit+0xa8>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	4a14      	ldr	r2, [pc, #80]	; (8009bf8 <DelayInit+0xa0>)
 8009ba6:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ba8:	4b13      	ldr	r3, [pc, #76]	; (8009bf8 <DelayInit+0xa0>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = DelayMask;
 8009bae:	4b12      	ldr	r3, [pc, #72]	; (8009bf8 <DelayInit+0xa0>)
 8009bb0:	f06f 4278 	mvn.w	r2, #4160749568	; 0xf8000000
 8009bb4:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bb6:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <DelayInit+0xa0>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 8009bbc:	480e      	ldr	r0, [pc, #56]	; (8009bf8 <DelayInit+0xa0>)
 8009bbe:	f004 ffa1 	bl	800eb04 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bc6:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 8009bc8:	f107 0310 	add.w	r3, r7, #16
 8009bcc:	4619      	mov	r1, r3
 8009bce:	480a      	ldr	r0, [pc, #40]	; (8009bf8 <DelayInit+0xa0>)
 8009bd0:	f005 f8b8 	bl	800ed44 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8009bdc:	1d3b      	adds	r3, r7, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4805      	ldr	r0, [pc, #20]	; (8009bf8 <DelayInit+0xa0>)
 8009be2:	f005 f977 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8009be6:	4804      	ldr	r0, [pc, #16]	; (8009bf8 <DelayInit+0xa0>)
 8009be8:	f004 fe42 	bl	800e870 <HAL_TIM_Base_Start>

}
 8009bec:	bf00      	nop
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	20015a38 	.word	0x20015a38
 8009bfc:	40000c00 	.word	0x40000c00
 8009c00:	20015a78 	.word	0x20015a78
 8009c04:	431bde83 	.word	0x431bde83
 8009c08:	20015a7c 	.word	0x20015a7c

08009c0c <DelayUs>:
  uint32_t tickstart = Delay_Tick * 1000;
  while(DelayDiff(Delay_Tick * 1000, tickstart) < val) {}
}

inline void DelayUs(uint32_t val)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = Delay_Tick;
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <DelayUs+0x2c>)
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	60fb      	str	r3, [r7, #12]
  while(DelayDiff(Delay_Tick, tickstart) < val) {}
 8009c1a:	bf00      	nop
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <DelayUs+0x2c>)
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	68f9      	ldr	r1, [r7, #12]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 f81a 	bl	8009c5c <DelayDiff>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d8f5      	bhi.n	8009c1c <DelayUs+0x10>
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40000c00 	.word	0x40000c00

08009c3c <DelayMs>:
 
inline void DelayMs(uint32_t val)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  DelayUs(val * 1000);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff ffdc 	bl	8009c0c <DelayUs>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <DelayDiff>:

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
	if(a >= b)
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d307      	bcc.n	8009c7e <DelayDiff+0x22>
		return (a - b) / prescaller;
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	1ad2      	subs	r2, r2, r3
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <DelayDiff+0x44>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c7c:	e009      	b.n	8009c92 <DelayDiff+0x36>
	return ((DelayMask - b) + a) / prescaller;
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	1ad2      	subs	r2, r2, r3
 8009c84:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8009c88:	4413      	add	r3, r2
 8009c8a:	4a05      	ldr	r2, [pc, #20]	; (8009ca0 <DelayDiff+0x44>)
 8009c8c:	6812      	ldr	r2, [r2, #0]
 8009c8e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20015a7c 	.word	0x20015a7c

08009ca4 <lcd_data>:
#include <stdlib.h>

uint8_t lcd_buffer[8][128];

static inline void lcd_data(uint8_t value)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8009cae:	79fa      	ldrb	r2, [r7, #7]
 8009cb0:	79fb      	ldrb	r3, [r7, #7]
 8009cb2:	43db      	mvns	r3, r3
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	041b      	lsls	r3, r3, #16
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2102      	movs	r1, #2
 8009cc0:	4815      	ldr	r0, [pc, #84]	; (8009d18 <lcd_data+0x74>)
 8009cc2:	f003 ffdd 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2104      	movs	r1, #4
 8009cca:	4814      	ldr	r0, [pc, #80]	; (8009d1c <lcd_data+0x78>)
 8009ccc:	f003 ffd8 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	2102      	movs	r1, #2
 8009cd4:	4811      	ldr	r0, [pc, #68]	; (8009d1c <lcd_data+0x78>)
 8009cd6:	f003 ffd3 	bl	800dc80 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8009cda:	4a11      	ldr	r2, [pc, #68]	; (8009d20 <lcd_data+0x7c>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8009ce0:	2002      	movs	r0, #2
 8009ce2:	f7ff ff93 	bl	8009c0c <DelayUs>
  taskENTER_CRITICAL();
 8009ce6:	f007 fb35 	bl	8011354 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8009cea:	2201      	movs	r2, #1
 8009cec:	2102      	movs	r1, #2
 8009cee:	480a      	ldr	r0, [pc, #40]	; (8009d18 <lcd_data+0x74>)
 8009cf0:	f003 ffc6 	bl	800dc80 <HAL_GPIO_WritePin>
  DelayUs(2);
 8009cf4:	2002      	movs	r0, #2
 8009cf6:	f7ff ff89 	bl	8009c0c <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2102      	movs	r1, #2
 8009cfe:	4806      	ldr	r0, [pc, #24]	; (8009d18 <lcd_data+0x74>)
 8009d00:	f003 ffbe 	bl	800dc80 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8009d04:	f007 fb4c 	bl	80113a0 <vPortExitCritical>
  DelayUs(1);
 8009d08:	2001      	movs	r0, #1
 8009d0a:	f7ff ff7f 	bl	8009c0c <DelayUs>
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	40020400 	.word	0x40020400
 8009d1c:	40020800 	.word	0x40020800
 8009d20:	40020000 	.word	0x40020000

08009d24 <lcd_command>:

static inline void lcd_command(uint8_t value)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8009d2e:	79fa      	ldrb	r2, [r7, #7]
 8009d30:	79fb      	ldrb	r3, [r7, #7]
 8009d32:	43db      	mvns	r3, r3
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	041b      	lsls	r3, r3, #16
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2102      	movs	r1, #2
 8009d40:	4815      	ldr	r0, [pc, #84]	; (8009d98 <lcd_command+0x74>)
 8009d42:	f003 ff9d 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8009d46:	2200      	movs	r2, #0
 8009d48:	2104      	movs	r1, #4
 8009d4a:	4814      	ldr	r0, [pc, #80]	; (8009d9c <lcd_command+0x78>)
 8009d4c:	f003 ff98 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8009d50:	2200      	movs	r2, #0
 8009d52:	2102      	movs	r1, #2
 8009d54:	4811      	ldr	r0, [pc, #68]	; (8009d9c <lcd_command+0x78>)
 8009d56:	f003 ff93 	bl	800dc80 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8009d5a:	4a11      	ldr	r2, [pc, #68]	; (8009da0 <lcd_command+0x7c>)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8009d60:	2002      	movs	r0, #2
 8009d62:	f7ff ff53 	bl	8009c0c <DelayUs>
  taskENTER_CRITICAL();
 8009d66:	f007 faf5 	bl	8011354 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	480a      	ldr	r0, [pc, #40]	; (8009d98 <lcd_command+0x74>)
 8009d70:	f003 ff86 	bl	800dc80 <HAL_GPIO_WritePin>
  DelayUs(2);
 8009d74:	2002      	movs	r0, #2
 8009d76:	f7ff ff49 	bl	8009c0c <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2102      	movs	r1, #2
 8009d7e:	4806      	ldr	r0, [pc, #24]	; (8009d98 <lcd_command+0x74>)
 8009d80:	f003 ff7e 	bl	800dc80 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8009d84:	f007 fb0c 	bl	80113a0 <vPortExitCritical>
  DelayUs(1);
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f7ff ff3f 	bl	8009c0c <DelayUs>
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	40020400 	.word	0x40020400
 8009d9c:	40020800 	.word	0x40020800
 8009da0:	40020000 	.word	0x40020000

08009da4 <lcd_update>:

inline void lcd_update(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0

  for(int j = 0; j < 8; j++)
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	e050      	b.n	8009e52 <lcd_update+0xae>
  {
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8009db0:	2201      	movs	r2, #1
 8009db2:	2110      	movs	r1, #16
 8009db4:	482a      	ldr	r0, [pc, #168]	; (8009e60 <lcd_update+0xbc>)
 8009db6:	f003 ff63 	bl	800dc80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8009dba:	2201      	movs	r2, #1
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	4829      	ldr	r0, [pc, #164]	; (8009e64 <lcd_update+0xc0>)
 8009dc0:	f003 ff5e 	bl	800dc80 <HAL_GPIO_WritePin>

    lcd_command(0x40);
 8009dc4:	2040      	movs	r0, #64	; 0x40
 8009dc6:	f7ff ffad 	bl	8009d24 <lcd_command>
    lcd_command(0xB8 + j);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	3b48      	subs	r3, #72	; 0x48
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff ffa6 	bl	8009d24 <lcd_command>

    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8009dd8:	2201      	movs	r2, #1
 8009dda:	2110      	movs	r1, #16
 8009ddc:	4820      	ldr	r0, [pc, #128]	; (8009e60 <lcd_update+0xbc>)
 8009dde:	f003 ff4f 	bl	800dc80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8009de2:	2200      	movs	r2, #0
 8009de4:	2101      	movs	r1, #1
 8009de6:	481f      	ldr	r0, [pc, #124]	; (8009e64 <lcd_update+0xc0>)
 8009de8:	f003 ff4a 	bl	800dc80 <HAL_GPIO_WritePin>
    for(int i = 0; i < 64; i++)
 8009dec:	2300      	movs	r3, #0
 8009dee:	60bb      	str	r3, [r7, #8]
 8009df0:	e00c      	b.n	8009e0c <lcd_update+0x68>
    {
      lcd_data(lcd_buffer[j][i]);
 8009df2:	4a1d      	ldr	r2, [pc, #116]	; (8009e68 <lcd_update+0xc4>)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	01db      	lsls	r3, r3, #7
 8009df8:	441a      	add	r2, r3
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff ff4f 	bl	8009ca4 <lcd_data>
    for(int i = 0; i < 64; i++)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	60bb      	str	r3, [r7, #8]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	2b3f      	cmp	r3, #63	; 0x3f
 8009e10:	ddef      	ble.n	8009df2 <lcd_update+0x4e>
    }
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8009e12:	2200      	movs	r2, #0
 8009e14:	2110      	movs	r1, #16
 8009e16:	4812      	ldr	r0, [pc, #72]	; (8009e60 <lcd_update+0xbc>)
 8009e18:	f003 ff32 	bl	800dc80 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	2101      	movs	r1, #1
 8009e20:	4810      	ldr	r0, [pc, #64]	; (8009e64 <lcd_update+0xc0>)
 8009e22:	f003 ff2d 	bl	800dc80 <HAL_GPIO_WritePin>
    for(int i = 64; i < 128; i++)
 8009e26:	2340      	movs	r3, #64	; 0x40
 8009e28:	607b      	str	r3, [r7, #4]
 8009e2a:	e00c      	b.n	8009e46 <lcd_update+0xa2>
    {
      lcd_data(lcd_buffer[j][i]);
 8009e2c:	4a0e      	ldr	r2, [pc, #56]	; (8009e68 <lcd_update+0xc4>)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	01db      	lsls	r3, r3, #7
 8009e32:	441a      	add	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4413      	add	r3, r2
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff ff32 	bl	8009ca4 <lcd_data>
    for(int i = 64; i < 128; i++)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3301      	adds	r3, #1
 8009e44:	607b      	str	r3, [r7, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b7f      	cmp	r3, #127	; 0x7f
 8009e4a:	ddef      	ble.n	8009e2c <lcd_update+0x88>
  for(int j = 0; j < 8; j++)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b07      	cmp	r3, #7
 8009e56:	ddab      	ble.n	8009db0 <lcd_update+0xc>
    }
  }
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	40020800 	.word	0x40020800
 8009e64:	40020400 	.word	0x40020400
 8009e68:	2001eff0 	.word	0x2001eff0

08009e6c <lcd_reset>:

inline void lcd_reset(void)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8009e70:	2201      	movs	r2, #1
 8009e72:	2110      	movs	r1, #16
 8009e74:	480f      	ldr	r0, [pc, #60]	; (8009eb4 <lcd_reset+0x48>)
 8009e76:	f003 ff03 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	480e      	ldr	r0, [pc, #56]	; (8009eb8 <lcd_reset+0x4c>)
 8009e80:	f003 fefe 	bl	800dc80 <HAL_GPIO_WritePin>
  lcd_command(0x3F); //Display ON
 8009e84:	203f      	movs	r0, #63	; 0x3f
 8009e86:	f7ff ff4d 	bl	8009d24 <lcd_command>
  lcd_command(0x40); //Set Y address = 0
 8009e8a:	2040      	movs	r0, #64	; 0x40
 8009e8c:	f7ff ff4a 	bl	8009d24 <lcd_command>
  lcd_command(0xB8); //Set X page = 0
 8009e90:	20b8      	movs	r0, #184	; 0xb8
 8009e92:	f7ff ff47 	bl	8009d24 <lcd_command>
  lcd_command(0xC0); //Set Z scrolling = 0
 8009e96:	20c0      	movs	r0, #192	; 0xc0
 8009e98:	f7ff ff44 	bl	8009d24 <lcd_command>
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2110      	movs	r1, #16
 8009ea0:	4804      	ldr	r0, [pc, #16]	; (8009eb4 <lcd_reset+0x48>)
 8009ea2:	f003 feed 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	4803      	ldr	r0, [pc, #12]	; (8009eb8 <lcd_reset+0x4c>)
 8009eac:	f003 fee8 	bl	800dc80 <HAL_GPIO_WritePin>
}
 8009eb0:	bf00      	nop
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	40020800 	.word	0x40020800
 8009eb8:	40020400 	.word	0x40020400

08009ebc <lcd_clear>:

inline void lcd_clear(void)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
  for(int i = 0; i < 8; i++)
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	607b      	str	r3, [r7, #4]
 8009ec6:	e013      	b.n	8009ef0 <lcd_clear+0x34>
    for(int j = 0; j < 128; j++)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	e00a      	b.n	8009ee4 <lcd_clear+0x28>
      lcd_buffer[i][j] = 0;
 8009ece:	4a0d      	ldr	r2, [pc, #52]	; (8009f04 <lcd_clear+0x48>)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	01db      	lsls	r3, r3, #7
 8009ed4:	441a      	add	r2, r3
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	4413      	add	r3, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 128; j++)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8009ee8:	ddf1      	ble.n	8009ece <lcd_clear+0x12>
  for(int i = 0; i < 8; i++)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3301      	adds	r3, #1
 8009eee:	607b      	str	r3, [r7, #4]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b07      	cmp	r3, #7
 8009ef4:	dde8      	ble.n	8009ec8 <lcd_clear+0xc>
}
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	2001eff0 	.word	0x2001eff0

08009f08 <lcd_drawpoint>:

inline void lcd_drawpoint(uint8_t x, uint8_t y)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	460a      	mov	r2, r1
 8009f12:	71fb      	strb	r3, [r7, #7]
 8009f14:	4613      	mov	r3, r2
 8009f16:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8009f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	db1f      	blt.n	8009f60 <lcd_drawpoint+0x58>
 8009f20:	79bb      	ldrb	r3, [r7, #6]
 8009f22:	2b3f      	cmp	r3, #63	; 0x3f
 8009f24:	d81c      	bhi.n	8009f60 <lcd_drawpoint+0x58>
    lcd_buffer[y / 8][x] |= 1 << (y % 8);
 8009f26:	79bb      	ldrb	r3, [r7, #6]
 8009f28:	08db      	lsrs	r3, r3, #3
 8009f2a:	b2d8      	uxtb	r0, r3
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	79fb      	ldrb	r3, [r7, #7]
 8009f30:	490e      	ldr	r1, [pc, #56]	; (8009f6c <lcd_drawpoint+0x64>)
 8009f32:	01d2      	lsls	r2, r2, #7
 8009f34:	440a      	add	r2, r1
 8009f36:	4413      	add	r3, r2
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	b25a      	sxtb	r2, r3
 8009f3c:	79bb      	ldrb	r3, [r7, #6]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	2101      	movs	r1, #1
 8009f44:	fa01 f303 	lsl.w	r3, r1, r3
 8009f48:	b25b      	sxtb	r3, r3
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	b259      	sxtb	r1, r3
 8009f4e:	4602      	mov	r2, r0
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	b2c8      	uxtb	r0, r1
 8009f54:	4905      	ldr	r1, [pc, #20]	; (8009f6c <lcd_drawpoint+0x64>)
 8009f56:	01d2      	lsls	r2, r2, #7
 8009f58:	440a      	add	r2, r1
 8009f5a:	4413      	add	r3, r2
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	701a      	strb	r2, [r3, #0]
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	2001eff0 	.word	0x2001eff0

08009f70 <lcd_clearpoint>:

inline void lcd_clearpoint(uint8_t x, uint8_t y)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	460a      	mov	r2, r1
 8009f7a:	71fb      	strb	r3, [r7, #7]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8009f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	db21      	blt.n	8009fcc <lcd_clearpoint+0x5c>
 8009f88:	79bb      	ldrb	r3, [r7, #6]
 8009f8a:	2b3f      	cmp	r3, #63	; 0x3f
 8009f8c:	d81e      	bhi.n	8009fcc <lcd_clearpoint+0x5c>
    lcd_buffer[y / 8][x] &= ~(1 << (y % 8));
 8009f8e:	79bb      	ldrb	r3, [r7, #6]
 8009f90:	08db      	lsrs	r3, r3, #3
 8009f92:	b2d8      	uxtb	r0, r3
 8009f94:	4602      	mov	r2, r0
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	490f      	ldr	r1, [pc, #60]	; (8009fd8 <lcd_clearpoint+0x68>)
 8009f9a:	01d2      	lsls	r2, r2, #7
 8009f9c:	440a      	add	r2, r1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	b25a      	sxtb	r2, r3
 8009fa4:	79bb      	ldrb	r3, [r7, #6]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2101      	movs	r1, #1
 8009fac:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb0:	b25b      	sxtb	r3, r3
 8009fb2:	43db      	mvns	r3, r3
 8009fb4:	b25b      	sxtb	r3, r3
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	b259      	sxtb	r1, r3
 8009fba:	4602      	mov	r2, r0
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	b2c8      	uxtb	r0, r1
 8009fc0:	4905      	ldr	r1, [pc, #20]	; (8009fd8 <lcd_clearpoint+0x68>)
 8009fc2:	01d2      	lsls	r2, r2, #7
 8009fc4:	440a      	add	r2, r1
 8009fc6:	4413      	add	r3, r2
 8009fc8:	4602      	mov	r2, r0
 8009fca:	701a      	strb	r2, [r3, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	2001eff0 	.word	0x2001eff0

08009fdc <lcd_rect_solid>:


void lcd_rect_solid(int x, int y, int w, int h, int c)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08c      	sub	sp, #48	; 0x30
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	603b      	str	r3, [r7, #0]
  if(c)
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d026      	beq.n	800a03e <lcd_rect_solid+0x62>
  {
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ff8:	e01c      	b.n	800a034 <lcd_rect_solid+0x58>
    {
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ffe:	2300      	movs	r3, #0
 800a000:	623b      	str	r3, [r7, #32]
 800a002:	e00d      	b.n	800a020 <lcd_rect_solid+0x44>
      {
          lcd_drawpoint(j,i);
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	b2db      	uxtb	r3, r3
 800a008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00a:	b2d2      	uxtb	r2, r2
 800a00c:	4611      	mov	r1, r2
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff ff7a 	bl	8009f08 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	3301      	adds	r3, #1
 800a018:	623b      	str	r3, [r7, #32]
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	3301      	adds	r3, #1
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
 800a020:	6a3a      	ldr	r2, [r7, #32]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	429a      	cmp	r2, r3
 800a026:	dbed      	blt.n	800a004 <lcd_rect_solid+0x28>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	3301      	adds	r3, #1
 800a02c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	3301      	adds	r3, #1
 800a032:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	dbde      	blt.n	8009ffa <lcd_rect_solid+0x1e>
      {
          lcd_clearpoint(j,i);
      }
    }
  }
}
 800a03c:	e025      	b.n	800a08a <lcd_rect_solid+0xae>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	e01c      	b.n	800a082 <lcd_rect_solid+0xa6>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	2300      	movs	r3, #0
 800a04e:	613b      	str	r3, [r7, #16]
 800a050:	e00d      	b.n	800a06e <lcd_rect_solid+0x92>
          lcd_clearpoint(j,i);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	b2db      	uxtb	r3, r3
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	b2d2      	uxtb	r2, r2
 800a05a:	4611      	mov	r1, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff ff87 	bl	8009f70 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3301      	adds	r3, #1
 800a066:	613b      	str	r3, [r7, #16]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	3301      	adds	r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	dbed      	blt.n	800a052 <lcd_rect_solid+0x76>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	3301      	adds	r3, #1
 800a07a:	61bb      	str	r3, [r7, #24]
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	3301      	adds	r3, #1
 800a080:	61fb      	str	r3, [r7, #28]
 800a082:	69ba      	ldr	r2, [r7, #24]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	429a      	cmp	r2, r3
 800a088:	dbde      	blt.n	800a048 <lcd_rect_solid+0x6c>
}
 800a08a:	bf00      	nop
 800a08c:	3730      	adds	r7, #48	; 0x30
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <lcd_rect>:


void lcd_rect(int x, int y, int w, int h, int c)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b08c      	sub	sp, #48	; 0x30
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
 800a09e:	603b      	str	r3, [r7, #0]
  if(w > 0 && h > 0)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f340 809a 	ble.w	800a1dc <lcd_rect+0x14a>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f340 8096 	ble.w	800a1dc <lcd_rect+0x14a>
  {
    if(c)
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d049      	beq.n	800a14a <lcd_rect+0xb8>
    {
      for(int i = y, ii = 0; ii < h; ii++, i++)
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0be:	e01b      	b.n	800a0f8 <lcd_rect+0x66>
      {
        lcd_drawpoint(x,i);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff ff1c 	bl	8009f08 <lcd_drawpoint>
        lcd_drawpoint(x+w-1,i);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	4413      	add	r3, r2
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0e2:	b2d2      	uxtb	r2, r2
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7ff ff0e 	bl	8009f08 <lcd_drawpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	dbdf      	blt.n	800a0c0 <lcd_rect+0x2e>
      }
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
 800a104:	2300      	movs	r3, #0
 800a106:	623b      	str	r3, [r7, #32]
 800a108:	e01a      	b.n	800a140 <lcd_rect+0xae>
      {
        lcd_drawpoint(j,y);
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff fef7 	bl	8009f08 <lcd_drawpoint>
        lcd_drawpoint(j,y+h-1);
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	b2d8      	uxtb	r0, r3
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	b2da      	uxtb	r2, r3
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	b2db      	uxtb	r3, r3
 800a126:	4413      	add	r3, r2
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	3b01      	subs	r3, #1
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	4619      	mov	r1, r3
 800a130:	f7ff feea 	bl	8009f08 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	3301      	adds	r3, #1
 800a138:	623b      	str	r3, [r7, #32]
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	3301      	adds	r3, #1
 800a13e:	627b      	str	r3, [r7, #36]	; 0x24
 800a140:	6a3a      	ldr	r2, [r7, #32]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	dbe0      	blt.n	800a10a <lcd_rect+0x78>
        lcd_clearpoint(j,y);
        lcd_clearpoint(j,y+h-1);
      }
    }
  }
}
 800a148:	e048      	b.n	800a1dc <lcd_rect+0x14a>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	2300      	movs	r3, #0
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	e01b      	b.n	800a18c <lcd_rect+0xfa>
        lcd_clearpoint(x,i);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff ff06 	bl	8009f70 <lcd_clearpoint>
        lcd_clearpoint(x+w-1,i);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	b2da      	uxtb	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	3b01      	subs	r3, #1
 800a172:	b2db      	uxtb	r3, r3
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	4611      	mov	r1, r2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff fef8 	bl	8009f70 <lcd_clearpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	3301      	adds	r3, #1
 800a184:	61bb      	str	r3, [r7, #24]
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	3301      	adds	r3, #1
 800a18a:	61fb      	str	r3, [r7, #28]
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	429a      	cmp	r2, r3
 800a192:	dbdf      	blt.n	800a154 <lcd_rect+0xc2>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	2300      	movs	r3, #0
 800a19a:	613b      	str	r3, [r7, #16]
 800a19c:	e01a      	b.n	800a1d4 <lcd_rect+0x142>
        lcd_clearpoint(j,y);
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	b2d2      	uxtb	r2, r2
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff fee1 	bl	8009f70 <lcd_clearpoint>
        lcd_clearpoint(j,y+h-1);
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	b2d8      	uxtb	r0, r3
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	4413      	add	r3, r2
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	f7ff fed4 	bl	8009f70 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	613b      	str	r3, [r7, #16]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	dbe0      	blt.n	800a19e <lcd_rect+0x10c>
}
 800a1dc:	bf00      	nop
 800a1de:	3730      	adds	r7, #48	; 0x30
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <lcd_line>:


void lcd_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b09b      	sub	sp, #108	; 0x6c
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	4608      	mov	r0, r1
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	80fb      	strh	r3, [r7, #6]
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	80bb      	strh	r3, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	807b      	strh	r3, [r7, #2]
 800a1fe:	4613      	mov	r3, r2
 800a200:	803b      	strh	r3, [r7, #0]
  if(x1>=x0 && y1>=y0)
 800a202:	887a      	ldrh	r2, [r7, #2]
 800a204:	88fb      	ldrh	r3, [r7, #6]
 800a206:	429a      	cmp	r2, r3
 800a208:	f0c0 80c3 	bcc.w	800a392 <lcd_line+0x1ae>
 800a20c:	883a      	ldrh	r2, [r7, #0]
 800a20e:	88bb      	ldrh	r3, [r7, #4]
 800a210:	429a      	cmp	r2, r3
 800a212:	f0c0 80be 	bcc.w	800a392 <lcd_line+0x1ae>
  {
    if(x1-x0 >= y1-y0)
 800a216:	887a      	ldrh	r2, [r7, #2]
 800a218:	88fb      	ldrh	r3, [r7, #6]
 800a21a:	1ad2      	subs	r2, r2, r3
 800a21c:	8839      	ldrh	r1, [r7, #0]
 800a21e:	88bb      	ldrh	r3, [r7, #4]
 800a220:	1acb      	subs	r3, r1, r3
 800a222:	429a      	cmp	r2, r3
 800a224:	db5a      	blt.n	800a2dc <lcd_line+0xf8>
    {
      int16_t deltax = abs(x1 - x0);
 800a226:	887a      	ldrh	r2, [r7, #2]
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bfb8      	it	lt
 800a230:	425b      	neglt	r3, r3
 800a232:	863b      	strh	r3, [r7, #48]	; 0x30
      int16_t deltay = abs(y1 - y0);
 800a234:	883a      	ldrh	r2, [r7, #0]
 800a236:	88bb      	ldrh	r3, [r7, #4]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bfb8      	it	lt
 800a23e:	425b      	neglt	r3, r3
 800a240:	85fb      	strh	r3, [r7, #46]	; 0x2e
      int16_t error = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      int16_t deltaerr = deltay;
 800a248:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a24a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      int16_t y = y0,x;
 800a24c:	88bb      	ldrh	r3, [r7, #4]
 800a24e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      for(x=x0;x<=x1;x++)
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a258:	e03a      	b.n	800a2d0 <lcd_line+0xec>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a25a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00a      	beq.n	800a278 <lcd_line+0x94>
 800a262:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800a26c:	b2d2      	uxtb	r2, r2
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7ff fe49 	bl	8009f08 <lcd_drawpoint>
 800a276:	e009      	b.n	800a28c <lcd_line+0xa8>
 800a278:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	4611      	mov	r1, r2
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff fe72 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a28c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800a290:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a292:	4413      	add	r3, r2
 800a294:	b29b      	uxth	r3, r3
 800a296:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
          if(2*error >= deltax)
 800a29a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800a29e:	005a      	lsls	r2, r3, #1
 800a2a0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	db0c      	blt.n	800a2c2 <lcd_line+0xde>
          {
              y = y + 1;
 800a2a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
              error = error - deltax;
 800a2b4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800a2b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      for(x=x0;x<=x1;x++)
 800a2c2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a2d0:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800a2d4:	887b      	ldrh	r3, [r7, #2]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	ddbf      	ble.n	800a25a <lcd_line+0x76>
    if(x1-x0 >= y1-y0)
 800a2da:	e2a0      	b.n	800a81e <lcd_line+0x63a>
          }
      }
    }
    else
    {
      int16_t deltax = abs(x1 - x0);
 800a2dc:	887a      	ldrh	r2, [r7, #2]
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bfb8      	it	lt
 800a2e6:	425b      	neglt	r3, r3
 800a2e8:	86fb      	strh	r3, [r7, #54]	; 0x36
      int16_t deltay = abs(y1 - y0);
 800a2ea:	883a      	ldrh	r2, [r7, #0]
 800a2ec:	88bb      	ldrh	r3, [r7, #4]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bfb8      	it	lt
 800a2f4:	425b      	neglt	r3, r3
 800a2f6:	86bb      	strh	r3, [r7, #52]	; 0x34
      int16_t error = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      int16_t deltaerr = deltax;
 800a2fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a300:	867b      	strh	r3, [r7, #50]	; 0x32
      int16_t x = x0,y;
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      for(y=y0;y<=y1;y++)
 800a308:	88bb      	ldrh	r3, [r7, #4]
 800a30a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800a30e:	e03a      	b.n	800a386 <lcd_line+0x1a2>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a310:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00a      	beq.n	800a32e <lcd_line+0x14a>
 800a318:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff fdee 	bl	8009f08 <lcd_drawpoint>
 800a32c:	e009      	b.n	800a342 <lcd_line+0x15e>
 800a32e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800a338:	b2d2      	uxtb	r2, r2
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fe17 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a342:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800a346:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a348:	4413      	add	r3, r2
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
          if(2*error >= deltay)
 800a350:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800a354:	005a      	lsls	r2, r3, #1
 800a356:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800a35a:	429a      	cmp	r2, r3
 800a35c:	db0c      	blt.n	800a378 <lcd_line+0x194>
          {
              x = x + 1;
 800a35e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800a362:	3301      	adds	r3, #1
 800a364:	b29b      	uxth	r3, r3
 800a366:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
              error = error - deltay;
 800a36a:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800a36e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	b29b      	uxth	r3, r3
 800a374:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      for(y=y0;y<=y1;y++)
 800a378:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	3301      	adds	r3, #1
 800a380:	b29b      	uxth	r3, r3
 800a382:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800a386:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800a38a:	883b      	ldrh	r3, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	ddbf      	ble.n	800a310 <lcd_line+0x12c>
    if(x1-x0 >= y1-y0)
 800a390:	e245      	b.n	800a81e <lcd_line+0x63a>
          }
      }
    }
  }
  else if(x0>=x1 && y0>=y1)
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	887b      	ldrh	r3, [r7, #2]
 800a396:	429a      	cmp	r2, r3
 800a398:	f0c0 80c3 	bcc.w	800a522 <lcd_line+0x33e>
 800a39c:	88ba      	ldrh	r2, [r7, #4]
 800a39e:	883b      	ldrh	r3, [r7, #0]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	f0c0 80be 	bcc.w	800a522 <lcd_line+0x33e>
  {
    if(x0-x1 >= y0-y1)
 800a3a6:	88fa      	ldrh	r2, [r7, #6]
 800a3a8:	887b      	ldrh	r3, [r7, #2]
 800a3aa:	1ad2      	subs	r2, r2, r3
 800a3ac:	88b9      	ldrh	r1, [r7, #4]
 800a3ae:	883b      	ldrh	r3, [r7, #0]
 800a3b0:	1acb      	subs	r3, r1, r3
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	db5a      	blt.n	800a46c <lcd_line+0x288>
    {
      int16_t deltax = abs(x0 - x1);
 800a3b6:	88fa      	ldrh	r2, [r7, #6]
 800a3b8:	887b      	ldrh	r3, [r7, #2]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bfb8      	it	lt
 800a3c0:	425b      	neglt	r3, r3
 800a3c2:	84bb      	strh	r3, [r7, #36]	; 0x24
      int16_t deltay = abs(y0 - y1);
 800a3c4:	88ba      	ldrh	r2, [r7, #4]
 800a3c6:	883b      	ldrh	r3, [r7, #0]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bfb8      	it	lt
 800a3ce:	425b      	neglt	r3, r3
 800a3d0:	847b      	strh	r3, [r7, #34]	; 0x22
      int16_t error = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      int16_t deltaerr = deltay;
 800a3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3da:	843b      	strh	r3, [r7, #32]
      int16_t y = y1,x;
 800a3dc:	883b      	ldrh	r3, [r7, #0]
 800a3de:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
      for(x=x1;x<=x0;x++)
 800a3e2:	887b      	ldrh	r3, [r7, #2]
 800a3e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a3e8:	e03a      	b.n	800a460 <lcd_line+0x27c>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a3ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <lcd_line+0x224>
 800a3f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800a3fc:	b2d2      	uxtb	r2, r2
 800a3fe:	4611      	mov	r1, r2
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff fd81 	bl	8009f08 <lcd_drawpoint>
 800a406:	e009      	b.n	800a41c <lcd_line+0x238>
 800a408:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fdaa 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a41c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800a420:	8c3b      	ldrh	r3, [r7, #32]
 800a422:	4413      	add	r3, r2
 800a424:	b29b      	uxth	r3, r3
 800a426:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
          if(2*error >= deltax)
 800a42a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800a42e:	005a      	lsls	r2, r3, #1
 800a430:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a434:	429a      	cmp	r2, r3
 800a436:	db0c      	blt.n	800a452 <lcd_line+0x26e>
          {
              y = y + 1;
 800a438:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800a43c:	3301      	adds	r3, #1
 800a43e:	b29b      	uxth	r3, r3
 800a440:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
              error = error - deltax;
 800a444:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800a448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      for(x=x1;x<=x0;x++)
 800a452:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800a456:	b29b      	uxth	r3, r3
 800a458:	3301      	adds	r3, #1
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a460:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800a464:	88fb      	ldrh	r3, [r7, #6]
 800a466:	429a      	cmp	r2, r3
 800a468:	ddbf      	ble.n	800a3ea <lcd_line+0x206>
    if(x0-x1 >= y0-y1)
 800a46a:	e1d8      	b.n	800a81e <lcd_line+0x63a>
          }
      }
    }
    else
    {
      int16_t deltax = abs(x0 - x1);
 800a46c:	88fa      	ldrh	r2, [r7, #6]
 800a46e:	887b      	ldrh	r3, [r7, #2]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	bfb8      	it	lt
 800a476:	425b      	neglt	r3, r3
 800a478:	857b      	strh	r3, [r7, #42]	; 0x2a
      int16_t deltay = abs(y0 - y1);
 800a47a:	88ba      	ldrh	r2, [r7, #4]
 800a47c:	883b      	ldrh	r3, [r7, #0]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	bfb8      	it	lt
 800a484:	425b      	neglt	r3, r3
 800a486:	853b      	strh	r3, [r7, #40]	; 0x28
      int16_t error = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      int16_t deltaerr = deltax;
 800a48e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a490:	84fb      	strh	r3, [r7, #38]	; 0x26
      int16_t x = x1,y;
 800a492:	887b      	ldrh	r3, [r7, #2]
 800a494:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
      for(y=y1;y<=y0;y++)
 800a498:	883b      	ldrh	r3, [r7, #0]
 800a49a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a49e:	e03a      	b.n	800a516 <lcd_line+0x332>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a4a0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <lcd_line+0x2da>
 800a4a8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a4b2:	b2d2      	uxtb	r2, r2
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fd26 	bl	8009f08 <lcd_drawpoint>
 800a4bc:	e009      	b.n	800a4d2 <lcd_line+0x2ee>
 800a4be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a4c8:	b2d2      	uxtb	r2, r2
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff fd4f 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a4d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a4d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4d8:	4413      	add	r3, r2
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
          if(2*error >= deltay)
 800a4e0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800a4e4:	005a      	lsls	r2, r3, #1
 800a4e6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	db0c      	blt.n	800a508 <lcd_line+0x324>
          {
              x = x + 1;
 800a4ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
              error = error - deltay;
 800a4fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a4fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	b29b      	uxth	r3, r3
 800a504:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      for(y=y1;y<=y0;y++)
 800a508:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3301      	adds	r3, #1
 800a510:	b29b      	uxth	r3, r3
 800a512:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a516:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 800a51a:	88bb      	ldrh	r3, [r7, #4]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	ddbf      	ble.n	800a4a0 <lcd_line+0x2bc>
    if(x0-x1 >= y0-y1)
 800a520:	e17d      	b.n	800a81e <lcd_line+0x63a>
          }
      }
    }
  }
  else if(x0>=x1 && y1>=y0)
 800a522:	88fa      	ldrh	r2, [r7, #6]
 800a524:	887b      	ldrh	r3, [r7, #2]
 800a526:	429a      	cmp	r2, r3
 800a528:	f0c0 80c3 	bcc.w	800a6b2 <lcd_line+0x4ce>
 800a52c:	883a      	ldrh	r2, [r7, #0]
 800a52e:	88bb      	ldrh	r3, [r7, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	f0c0 80be 	bcc.w	800a6b2 <lcd_line+0x4ce>
  {
    if(x0-x1 >= y1-y0)
 800a536:	88fa      	ldrh	r2, [r7, #6]
 800a538:	887b      	ldrh	r3, [r7, #2]
 800a53a:	1ad2      	subs	r2, r2, r3
 800a53c:	8839      	ldrh	r1, [r7, #0]
 800a53e:	88bb      	ldrh	r3, [r7, #4]
 800a540:	1acb      	subs	r3, r1, r3
 800a542:	429a      	cmp	r2, r3
 800a544:	db5a      	blt.n	800a5fc <lcd_line+0x418>
    {
      int16_t deltax = abs(x0 - x1);
 800a546:	88fa      	ldrh	r2, [r7, #6]
 800a548:	887b      	ldrh	r3, [r7, #2]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	bfb8      	it	lt
 800a550:	425b      	neglt	r3, r3
 800a552:	833b      	strh	r3, [r7, #24]
      int16_t deltay = abs(y1 - y0);
 800a554:	883a      	ldrh	r2, [r7, #0]
 800a556:	88bb      	ldrh	r3, [r7, #4]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfb8      	it	lt
 800a55e:	425b      	neglt	r3, r3
 800a560:	82fb      	strh	r3, [r7, #22]
      int16_t error = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      int16_t deltaerr = deltay;
 800a568:	8afb      	ldrh	r3, [r7, #22]
 800a56a:	82bb      	strh	r3, [r7, #20]
      int16_t y = y0,x;
 800a56c:	88bb      	ldrh	r3, [r7, #4]
 800a56e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
      for(x=x0;x>=x1;x--)
 800a572:	88fb      	ldrh	r3, [r7, #6]
 800a574:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a578:	e03a      	b.n	800a5f0 <lcd_line+0x40c>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a57a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <lcd_line+0x3b4>
 800a582:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a58c:	b2d2      	uxtb	r2, r2
 800a58e:	4611      	mov	r1, r2
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff fcb9 	bl	8009f08 <lcd_drawpoint>
 800a596:	e009      	b.n	800a5ac <lcd_line+0x3c8>
 800a598:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff fce2 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a5ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a5b0:	8abb      	ldrh	r3, [r7, #20]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
          if(2*error >= deltax)
 800a5ba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a5be:	005a      	lsls	r2, r3, #1
 800a5c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	db0c      	blt.n	800a5e2 <lcd_line+0x3fe>
          {
              y = y + 1;
 800a5c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
              error = error - deltax;
 800a5d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a5d8:	8b3b      	ldrh	r3, [r7, #24]
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      for(x=x0;x>=x1;x--)
 800a5e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a5f0:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800a5f4:	887b      	ldrh	r3, [r7, #2]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	dabf      	bge.n	800a57a <lcd_line+0x396>
    if(x0-x1 >= y1-y0)
 800a5fa:	e110      	b.n	800a81e <lcd_line+0x63a>
          }
      }
    }
    else
    {
      int16_t deltax = abs(x0 - x1);
 800a5fc:	88fa      	ldrh	r2, [r7, #6]
 800a5fe:	887b      	ldrh	r3, [r7, #2]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	bfb8      	it	lt
 800a606:	425b      	neglt	r3, r3
 800a608:	83fb      	strh	r3, [r7, #30]
      int16_t deltay = abs(y1 - y0);
 800a60a:	883a      	ldrh	r2, [r7, #0]
 800a60c:	88bb      	ldrh	r3, [r7, #4]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	bfb8      	it	lt
 800a614:	425b      	neglt	r3, r3
 800a616:	83bb      	strh	r3, [r7, #28]
      int16_t error = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      int16_t deltaerr = deltax;
 800a61e:	8bfb      	ldrh	r3, [r7, #30]
 800a620:	837b      	strh	r3, [r7, #26]
      int16_t x = x1,y;
 800a622:	887b      	ldrh	r3, [r7, #2]
 800a624:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      for(y=y1;y>=y0;y--)
 800a628:	883b      	ldrh	r3, [r7, #0]
 800a62a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a62e:	e03a      	b.n	800a6a6 <lcd_line+0x4c2>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a630:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00a      	beq.n	800a64e <lcd_line+0x46a>
 800a638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a642:	b2d2      	uxtb	r2, r2
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fc5e 	bl	8009f08 <lcd_drawpoint>
 800a64c:	e009      	b.n	800a662 <lcd_line+0x47e>
 800a64e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a658:	b2d2      	uxtb	r2, r2
 800a65a:	4611      	mov	r1, r2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7ff fc87 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a662:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a666:	8b7b      	ldrh	r3, [r7, #26]
 800a668:	4413      	add	r3, r2
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
          if(2*error >= deltay)
 800a670:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800a674:	005a      	lsls	r2, r3, #1
 800a676:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	db0c      	blt.n	800a698 <lcd_line+0x4b4>
          {
              x = x + 1;
 800a67e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a682:	3301      	adds	r3, #1
 800a684:	b29b      	uxth	r3, r3
 800a686:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
              error = error - deltay;
 800a68a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a68e:	8bbb      	ldrh	r3, [r7, #28]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	b29b      	uxth	r3, r3
 800a694:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      for(y=y1;y>=y0;y--)
 800a698:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a6a6:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800a6aa:	88bb      	ldrh	r3, [r7, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	dabf      	bge.n	800a630 <lcd_line+0x44c>
    if(x0-x1 >= y1-y0)
 800a6b0:	e0b5      	b.n	800a81e <lcd_line+0x63a>
          }
      }
    }
  }
  else if(x1>=x0 && y0>=y1)
 800a6b2:	887a      	ldrh	r2, [r7, #2]
 800a6b4:	88fb      	ldrh	r3, [r7, #6]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	f0c0 80b1 	bcc.w	800a81e <lcd_line+0x63a>
 800a6bc:	88ba      	ldrh	r2, [r7, #4]
 800a6be:	883b      	ldrh	r3, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	f0c0 80ac 	bcc.w	800a81e <lcd_line+0x63a>
  {
    if(x1-x0 >= y0-y1)
 800a6c6:	887a      	ldrh	r2, [r7, #2]
 800a6c8:	88fb      	ldrh	r3, [r7, #6]
 800a6ca:	1ad2      	subs	r2, r2, r3
 800a6cc:	88b9      	ldrh	r1, [r7, #4]
 800a6ce:	883b      	ldrh	r3, [r7, #0]
 800a6d0:	1acb      	subs	r3, r1, r3
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	db56      	blt.n	800a784 <lcd_line+0x5a0>
    {
      int16_t deltax = abs(x1 - x0);
 800a6d6:	887a      	ldrh	r2, [r7, #2]
 800a6d8:	88fb      	ldrh	r3, [r7, #6]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bfb8      	it	lt
 800a6e0:	425b      	neglt	r3, r3
 800a6e2:	81bb      	strh	r3, [r7, #12]
      int16_t deltay = abs(y0 - y1);
 800a6e4:	88ba      	ldrh	r2, [r7, #4]
 800a6e6:	883b      	ldrh	r3, [r7, #0]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfb8      	it	lt
 800a6ee:	425b      	neglt	r3, r3
 800a6f0:	817b      	strh	r3, [r7, #10]
      int16_t error = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      int16_t deltaerr = deltay;
 800a6f8:	897b      	ldrh	r3, [r7, #10]
 800a6fa:	813b      	strh	r3, [r7, #8]
      int16_t y = y1,x;
 800a6fc:	883b      	ldrh	r3, [r7, #0]
 800a6fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
      for(x=x1;x>=x0;x--)
 800a702:	887b      	ldrh	r3, [r7, #2]
 800a704:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a706:	e037      	b.n	800a778 <lcd_line+0x594>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a708:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d009      	beq.n	800a724 <lcd_line+0x540>
 800a710:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a718:	b2d2      	uxtb	r2, r2
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff fbf3 	bl	8009f08 <lcd_drawpoint>
 800a722:	e008      	b.n	800a736 <lcd_line+0x552>
 800a724:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a72c:	b2d2      	uxtb	r2, r2
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fc1d 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a736:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a73a:	893b      	ldrh	r3, [r7, #8]
 800a73c:	4413      	add	r3, r2
 800a73e:	b29b      	uxth	r3, r3
 800a740:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
          if(2*error >= deltax)
 800a744:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800a748:	005a      	lsls	r2, r3, #1
 800a74a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a74e:	429a      	cmp	r2, r3
 800a750:	db0c      	blt.n	800a76c <lcd_line+0x588>
          {
              y = y + 1;
 800a752:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a756:	3301      	adds	r3, #1
 800a758:	b29b      	uxth	r3, r3
 800a75a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
              error = error - deltax;
 800a75e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a762:	89bb      	ldrh	r3, [r7, #12]
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	b29b      	uxth	r3, r3
 800a768:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      for(x=x1;x>=x0;x--)
 800a76c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800a770:	b29b      	uxth	r3, r3
 800a772:	3b01      	subs	r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a778:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800a77c:	88fb      	ldrh	r3, [r7, #6]
 800a77e:	429a      	cmp	r2, r3
 800a780:	dac2      	bge.n	800a708 <lcd_line+0x524>
          }
      }
    }
  }

}
 800a782:	e04c      	b.n	800a81e <lcd_line+0x63a>
      int16_t deltax = abs(x1 - x0);
 800a784:	887a      	ldrh	r2, [r7, #2]
 800a786:	88fb      	ldrh	r3, [r7, #6]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bfb8      	it	lt
 800a78e:	425b      	neglt	r3, r3
 800a790:	827b      	strh	r3, [r7, #18]
      int16_t deltay = abs(y0 - y1);
 800a792:	88ba      	ldrh	r2, [r7, #4]
 800a794:	883b      	ldrh	r3, [r7, #0]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bfb8      	it	lt
 800a79c:	425b      	neglt	r3, r3
 800a79e:	823b      	strh	r3, [r7, #16]
      int16_t error = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
      int16_t deltaerr = deltax;
 800a7a4:	8a7b      	ldrh	r3, [r7, #18]
 800a7a6:	81fb      	strh	r3, [r7, #14]
      int16_t x = x0,y;
 800a7a8:	88fb      	ldrh	r3, [r7, #6]
 800a7aa:	877b      	strh	r3, [r7, #58]	; 0x3a
      for(y=y0;y>=y1;y--)
 800a7ac:	88bb      	ldrh	r3, [r7, #4]
 800a7ae:	873b      	strh	r3, [r7, #56]	; 0x38
 800a7b0:	e02f      	b.n	800a812 <lcd_line+0x62e>
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800a7b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d008      	beq.n	800a7cc <lcd_line+0x5e8>
 800a7ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a7c0:	b2d2      	uxtb	r2, r2
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff fb9f 	bl	8009f08 <lcd_drawpoint>
 800a7ca:	e007      	b.n	800a7dc <lcd_line+0x5f8>
 800a7cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800a7d2:	b2d2      	uxtb	r2, r2
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff fbca 	bl	8009f70 <lcd_clearpoint>
          error = error+deltaerr;
 800a7dc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800a7de:	89fb      	ldrh	r3, [r7, #14]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
          if(2*error >= deltay)
 800a7e6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800a7ea:	005a      	lsls	r2, r3, #1
 800a7ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	db08      	blt.n	800a806 <lcd_line+0x622>
              x = x + 1;
 800a7f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	877b      	strh	r3, [r7, #58]	; 0x3a
              error = error - deltay;
 800a7fc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800a7fe:	8a3b      	ldrh	r3, [r7, #16]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	b29b      	uxth	r3, r3
 800a804:	87bb      	strh	r3, [r7, #60]	; 0x3c
      for(y=y0;y>=y1;y--)
 800a806:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b01      	subs	r3, #1
 800a80e:	b29b      	uxth	r3, r3
 800a810:	873b      	strh	r3, [r7, #56]	; 0x38
 800a812:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800a816:	883b      	ldrh	r3, [r7, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	daca      	bge.n	800a7b2 <lcd_line+0x5ce>
}
 800a81c:	e7ff      	b.n	800a81e <lcd_line+0x63a>
 800a81e:	bf00      	nop
 800a820:	376c      	adds	r7, #108	; 0x6c
 800a822:	46bd      	mov	sp, r7
 800a824:	bd90      	pop	{r4, r7, pc}

0800a826 <lcd_circle5x5>:
    }
  }
}

void lcd_circle5x5(int16_t x, int16_t y)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	4603      	mov	r3, r0
 800a82e:	460a      	mov	r2, r1
 800a830:	80fb      	strh	r3, [r7, #6]
 800a832:	4613      	mov	r3, r2
 800a834:	80bb      	strh	r3, [r7, #4]
  lcd_drawpoint(x-2,y-1);
 800a836:	88fb      	ldrh	r3, [r7, #6]
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	3b02      	subs	r3, #2
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	88bb      	ldrh	r3, [r7, #4]
 800a840:	b2db      	uxtb	r3, r3
 800a842:	3b01      	subs	r3, #1
 800a844:	b2db      	uxtb	r3, r3
 800a846:	4619      	mov	r1, r3
 800a848:	4610      	mov	r0, r2
 800a84a:	f7ff fb5d 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-2,y);
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	3b02      	subs	r3, #2
 800a854:	b2db      	uxtb	r3, r3
 800a856:	88ba      	ldrh	r2, [r7, #4]
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff fb53 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-2,y+1);
 800a862:	88fb      	ldrh	r3, [r7, #6]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	3b02      	subs	r3, #2
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	88bb      	ldrh	r3, [r7, #4]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	3301      	adds	r3, #1
 800a870:	b2db      	uxtb	r3, r3
 800a872:	4619      	mov	r1, r3
 800a874:	4610      	mov	r0, r2
 800a876:	f7ff fb47 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+2,y+1);
 800a87a:	88fb      	ldrh	r3, [r7, #6]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	3302      	adds	r3, #2
 800a880:	b2da      	uxtb	r2, r3
 800a882:	88bb      	ldrh	r3, [r7, #4]
 800a884:	b2db      	uxtb	r3, r3
 800a886:	3301      	adds	r3, #1
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f7ff fb3b 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+2,y);
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	b2db      	uxtb	r3, r3
 800a896:	3302      	adds	r3, #2
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	88ba      	ldrh	r2, [r7, #4]
 800a89c:	b2d2      	uxtb	r2, r2
 800a89e:	4611      	mov	r1, r2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fb31 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+2,y-1);
 800a8a6:	88fb      	ldrh	r3, [r7, #6]
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	3302      	adds	r3, #2
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	88bb      	ldrh	r3, [r7, #4]
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	f7ff fb25 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-1,y-2);
 800a8be:	88fb      	ldrh	r3, [r7, #6]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	88bb      	ldrh	r3, [r7, #4]
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	3b02      	subs	r3, #2
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	f7ff fb19 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x,y-2);
 800a8d6:	88fb      	ldrh	r3, [r7, #6]
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	88bb      	ldrh	r3, [r7, #4]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	3b02      	subs	r3, #2
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f7ff fb0f 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+1,y-2);
 800a8ea:	88fb      	ldrh	r3, [r7, #6]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	88bb      	ldrh	r3, [r7, #4]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	3b02      	subs	r3, #2
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7ff fb03 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-1,y+2);
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	88bb      	ldrh	r3, [r7, #4]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	3302      	adds	r3, #2
 800a910:	b2db      	uxtb	r3, r3
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f7ff faf7 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x,y+2);
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	88bb      	ldrh	r3, [r7, #4]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	3302      	adds	r3, #2
 800a924:	b2db      	uxtb	r3, r3
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f7ff faed 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+1,y+2);
 800a92e:	88fb      	ldrh	r3, [r7, #6]
 800a930:	b2db      	uxtb	r3, r3
 800a932:	3301      	adds	r3, #1
 800a934:	b2da      	uxtb	r2, r3
 800a936:	88bb      	ldrh	r3, [r7, #4]
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	3302      	adds	r3, #2
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f7ff fae1 	bl	8009f08 <lcd_drawpoint>
  for(int i = 0; i < 3; i++)
 800a946:	2300      	movs	r3, #0
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e01e      	b.n	800a98a <lcd_circle5x5+0x164>
    for(int j = 0; j < 3; j++)
 800a94c:	2300      	movs	r3, #0
 800a94e:	60bb      	str	r3, [r7, #8]
 800a950:	e015      	b.n	800a97e <lcd_circle5x5+0x158>
      lcd_clearpoint(x+i-1,y+j-1);
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	b2da      	uxtb	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	4413      	add	r3, r2
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	3b01      	subs	r3, #1
 800a960:	b2d8      	uxtb	r0, r3
 800a962:	88bb      	ldrh	r3, [r7, #4]
 800a964:	b2da      	uxtb	r2, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	4413      	add	r3, r2
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	3b01      	subs	r3, #1
 800a970:	b2db      	uxtb	r3, r3
 800a972:	4619      	mov	r1, r3
 800a974:	f7ff fafc 	bl	8009f70 <lcd_clearpoint>
    for(int j = 0; j < 3; j++)
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	3301      	adds	r3, #1
 800a97c:	60bb      	str	r3, [r7, #8]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b02      	cmp	r3, #2
 800a982:	dde6      	ble.n	800a952 <lcd_circle5x5+0x12c>
  for(int i = 0; i < 3; i++)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3301      	adds	r3, #1
 800a988:	60fb      	str	r3, [r7, #12]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	dddd      	ble.n	800a94c <lcd_circle5x5+0x126>
}
 800a990:	bf00      	nop
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <lcd_circle5x5fill>:

void lcd_circle5x5fill(int16_t x, int16_t y)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	460a      	mov	r2, r1
 800a9a2:	80fb      	strh	r3, [r7, #6]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	80bb      	strh	r3, [r7, #4]
  lcd_drawpoint(x-2,y-1);
 800a9a8:	88fb      	ldrh	r3, [r7, #6]
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	3b02      	subs	r3, #2
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	88bb      	ldrh	r3, [r7, #4]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7ff faa4 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-2,y);
 800a9c0:	88fb      	ldrh	r3, [r7, #6]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	3b02      	subs	r3, #2
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	88ba      	ldrh	r2, [r7, #4]
 800a9ca:	b2d2      	uxtb	r2, r2
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff fa9a 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-2,y+1);
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	3b02      	subs	r3, #2
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	88bb      	ldrh	r3, [r7, #4]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f7ff fa8e 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+2,y+1);
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	88bb      	ldrh	r3, [r7, #4]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4610      	mov	r0, r2
 800aa00:	f7ff fa82 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+2,y);
 800aa04:	88fb      	ldrh	r3, [r7, #6]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	3302      	adds	r3, #2
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	88ba      	ldrh	r2, [r7, #4]
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff fa78 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+2,y-1);
 800aa18:	88fb      	ldrh	r3, [r7, #6]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	3302      	adds	r3, #2
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	88bb      	ldrh	r3, [r7, #4]
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	3b01      	subs	r3, #1
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7ff fa6c 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-1,y-2);
 800aa30:	88fb      	ldrh	r3, [r7, #6]
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	3b01      	subs	r3, #1
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	88bb      	ldrh	r3, [r7, #4]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	3b02      	subs	r3, #2
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7ff fa60 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x,y-2);
 800aa48:	88fb      	ldrh	r3, [r7, #6]
 800aa4a:	b2da      	uxtb	r2, r3
 800aa4c:	88bb      	ldrh	r3, [r7, #4]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	3b02      	subs	r3, #2
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	4619      	mov	r1, r3
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7ff fa56 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+1,y-2);
 800aa5c:	88fb      	ldrh	r3, [r7, #6]
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	3301      	adds	r3, #1
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	88bb      	ldrh	r3, [r7, #4]
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	3b02      	subs	r3, #2
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4610      	mov	r0, r2
 800aa70:	f7ff fa4a 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x-1,y+2);
 800aa74:	88fb      	ldrh	r3, [r7, #6]
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	88bb      	ldrh	r3, [r7, #4]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	3302      	adds	r3, #2
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	4610      	mov	r0, r2
 800aa88:	f7ff fa3e 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x,y+2);
 800aa8c:	88fb      	ldrh	r3, [r7, #6]
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	88bb      	ldrh	r3, [r7, #4]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	3302      	adds	r3, #2
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f7ff fa34 	bl	8009f08 <lcd_drawpoint>
  lcd_drawpoint(x+1,y+2);
 800aaa0:	88fb      	ldrh	r3, [r7, #6]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	88bb      	ldrh	r3, [r7, #4]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	3302      	adds	r3, #2
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	4619      	mov	r1, r3
 800aab2:	4610      	mov	r0, r2
 800aab4:	f7ff fa28 	bl	8009f08 <lcd_drawpoint>
  for(int i = 0; i < 3; i++)
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	e01e      	b.n	800aafc <lcd_circle5x5fill+0x164>
    for(int j = 0; j < 3; j++)
 800aabe:	2300      	movs	r3, #0
 800aac0:	60bb      	str	r3, [r7, #8]
 800aac2:	e015      	b.n	800aaf0 <lcd_circle5x5fill+0x158>
      lcd_drawpoint(x+i-1,y+j-1);
 800aac4:	88fb      	ldrh	r3, [r7, #6]
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	4413      	add	r3, r2
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	3b01      	subs	r3, #1
 800aad2:	b2d8      	uxtb	r0, r3
 800aad4:	88bb      	ldrh	r3, [r7, #4]
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	4413      	add	r3, r2
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	3b01      	subs	r3, #1
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	4619      	mov	r1, r3
 800aae6:	f7ff fa0f 	bl	8009f08 <lcd_drawpoint>
    for(int j = 0; j < 3; j++)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	3301      	adds	r3, #1
 800aaee:	60bb      	str	r3, [r7, #8]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	dde6      	ble.n	800aac4 <lcd_circle5x5fill+0x12c>
  for(int i = 0; i < 3; i++)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	dddd      	ble.n	800aabe <lcd_circle5x5fill+0x126>
}
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <lcd_init>:
  DelayMs(3000);
  TIM2->CCR3 = 0;
}

void lcd_init(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800ab10:	2200      	movs	r2, #0
 800ab12:	2104      	movs	r1, #4
 800ab14:	480f      	ldr	r0, [pc, #60]	; (800ab54 <lcd_init+0x48>)
 800ab16:	f003 f8b3 	bl	800dc80 <HAL_GPIO_WritePin>
  DelayUs(500);
 800ab1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ab1e:	f7ff f875 	bl	8009c0c <DelayUs>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800ab22:	2201      	movs	r2, #1
 800ab24:	2104      	movs	r1, #4
 800ab26:	480b      	ldr	r0, [pc, #44]	; (800ab54 <lcd_init+0x48>)
 800ab28:	f003 f8aa 	bl	800dc80 <HAL_GPIO_WritePin>
  DelayMs(2);
 800ab2c:	2002      	movs	r0, #2
 800ab2e:	f7ff f885 	bl	8009c3c <DelayMs>

  lcd_reset();
 800ab32:	f7ff f99b 	bl	8009e6c <lcd_reset>
  lcd_clear();
 800ab36:	f7ff f9c1 	bl	8009ebc <lcd_clear>
  lcd_update();
 800ab3a:	f7ff f933 	bl	8009da4 <lcd_update>

  font_init(lcd_rect_solid, 128, 64);
 800ab3e:	2240      	movs	r2, #64	; 0x40
 800ab40:	2180      	movs	r1, #128	; 0x80
 800ab42:	4805      	ldr	r0, [pc, #20]	; (800ab58 <lcd_init+0x4c>)
 800ab44:	f006 fe52 	bl	80117ec <font_init>
  font_setCR(0);
 800ab48:	2000      	movs	r0, #0
 800ab4a:	f006 fe2d 	bl	80117a8 <font_setCR>

  //font_setFont(&rre_arialb_16); showFont("[rre_arialb_16]"); lcd_clear();
}
 800ab4e:	bf00      	nop
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	40020400 	.word	0x40020400
 800ab58:	08009fdd 	.word	0x08009fdd

0800ab5c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ab60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab64:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ab68:	4b0b      	ldr	r3, [pc, #44]	; (800ab98 <SCB_EnableICache+0x3c>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ab70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab74:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ab78:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <SCB_EnableICache+0x3c>)
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	4a06      	ldr	r2, [pc, #24]	; (800ab98 <SCB_EnableICache+0x3c>)
 800ab7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab82:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ab84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ab88:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800ab8c:	bf00      	nop
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	e000ed00 	.word	0xe000ed00

0800ab9c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800aba2:	4b1d      	ldr	r3, [pc, #116]	; (800ac18 <SCB_EnableDCache+0x7c>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800abaa:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800abae:	4b1a      	ldr	r3, [pc, #104]	; (800ac18 <SCB_EnableDCache+0x7c>)
 800abb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abb4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	0b5b      	lsrs	r3, r3, #13
 800abba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800abbe:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	08db      	lsrs	r3, r3, #3
 800abc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800abd2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800abd8:	490f      	ldr	r1, [pc, #60]	; (800ac18 <SCB_EnableDCache+0x7c>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	1e5a      	subs	r2, r3, #1
 800abe4:	60ba      	str	r2, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1ef      	bne.n	800abca <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	1e5a      	subs	r2, r3, #1
 800abee:	60fa      	str	r2, [r7, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1e5      	bne.n	800abc0 <SCB_EnableDCache+0x24>
 800abf4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800abf8:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <SCB_EnableDCache+0x7c>)
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	4a06      	ldr	r2, [pc, #24]	; (800ac18 <SCB_EnableDCache+0x7c>)
 800abfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac02:	6153      	str	r3, [r2, #20]
 800ac04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ac08:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 800ac0c:	bf00      	nop
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	e000ed00 	.word	0xe000ed00

0800ac1c <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM7_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a04      	ldr	r2, [pc, #16]	; (800ac38 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d101      	bne.n	800ac30 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    controls_irq();
 800ac2c:	f7fe fc48 	bl	80094c0 <controls_irq>
  }
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	2001f764 	.word	0x2001f764

0800ac3c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 fd7b 	bl	800c740 <xDmaTxIrqHandler>
}
 800ac4a:	bf00      	nop
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f001 fdd6 	bl	800c80c <xDmaErIrqHandler>
}
 800ac60:	bf00      	nop
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <showlogo>:

static void showlogo(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
  font_setFont(&rre_ubuntu_32);
 800ac6c:	480e      	ldr	r0, [pc, #56]	; (800aca8 <showlogo+0x40>)
 800ac6e:	f006 fe05 	bl	801187c <font_setFont>
  font_printStr(30,4,"ACIS");
 800ac72:	4a0e      	ldr	r2, [pc, #56]	; (800acac <showlogo+0x44>)
 800ac74:	2104      	movs	r1, #4
 800ac76:	201e      	movs	r0, #30
 800ac78:	f008 f842 	bl	8012d00 <font_printStr>
  font_setFont(&rre_arialb_16);
 800ac7c:	480c      	ldr	r0, [pc, #48]	; (800acb0 <showlogo+0x48>)
 800ac7e:	f006 fdfd 	bl	801187c <font_setFont>
  font_printStr(2,32,"Advanced Car");
 800ac82:	4a0c      	ldr	r2, [pc, #48]	; (800acb4 <showlogo+0x4c>)
 800ac84:	2120      	movs	r1, #32
 800ac86:	2002      	movs	r0, #2
 800ac88:	f008 f83a 	bl	8012d00 <font_printStr>
  font_printStr(12,46,"Ignition System");
 800ac8c:	4a0a      	ldr	r2, [pc, #40]	; (800acb8 <showlogo+0x50>)
 800ac8e:	212e      	movs	r1, #46	; 0x2e
 800ac90:	200c      	movs	r0, #12
 800ac92:	f008 f835 	bl	8012d00 <font_printStr>
  lcd_update();
 800ac96:	f7ff f885 	bl	8009da4 <lcd_update>
  DelayMs(1000);
 800ac9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac9e:	f7fe ffcd 	bl	8009c3c <DelayMs>
}
 800aca2:	bf00      	nop
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	20002d10 	.word	0x20002d10
 800acac:	08017280 	.word	0x08017280
 800acb0:	20002cf0 	.word	0x20002cf0
 800acb4:	08017288 	.word	0x08017288
 800acb8:	08017298 	.word	0x08017298

0800acbc <main>:

int main(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 800acc0:	f7ff ff4c 	bl	800ab5c <SCB_EnableICache>
  SCB_EnableDCache();
 800acc4:	f7ff ff6a 	bl	800ab9c <SCB_EnableDCache>

  HAL_Init();
 800acc8:	f002 fa0a 	bl	800d0e0 <HAL_Init>

  SystemClock_Config();
 800accc:	f000 f85c 	bl	800ad88 <SystemClock_Config>

  MX_GPIO_Init();
 800acd0:	f000 fb0c 	bl	800b2ec <MX_GPIO_Init>
  MX_DMA_Init();
 800acd4:	f000 fac8 	bl	800b268 <MX_DMA_Init>
  MX_TIM2_Init();
 800acd8:	f000 f97e 	bl	800afd8 <MX_TIM2_Init>
  MX_ADC1_Init();
 800acdc:	f000 f928 	bl	800af30 <MX_ADC1_Init>
  MX_TIM10_Init();
 800ace0:	f000 fa0a 	bl	800b0f8 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800ace4:	f000 fa60 	bl	800b1a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800ace8:	f000 fa8e 	bl	800b208 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800acec:	f000 f8e2 	bl	800aeb4 <MX_CRC_Init>
  MX_TIM7_Init();
 800acf0:	f000 f9cc 	bl	800b08c <MX_TIM7_Init>
  xFifosInit();
 800acf4:	f001 fdc4 	bl	800c880 <xFifosInit>

  __HAL_DBGMCU_FREEZE_TIM5();
 800acf8:	4b18      	ldr	r3, [pc, #96]	; (800ad5c <main+0xa0>)
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	4a17      	ldr	r2, [pc, #92]	; (800ad5c <main+0xa0>)
 800acfe:	f043 0308 	orr.w	r3, r3, #8
 800ad02:	6093      	str	r3, [r2, #8]

  CRC16_RegisterHardware(&hcrc);
 800ad04:	4816      	ldr	r0, [pc, #88]	; (800ad60 <main+0xa4>)
 800ad06:	f7fe fe93 	bl	8009a30 <CRC16_RegisterHardware>

  HAL_GPIO_WritePin(USB_RST_GPIO_Port, USB_RST_Pin, GPIO_PIN_SET);
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad10:	4814      	ldr	r0, [pc, #80]	; (800ad64 <main+0xa8>)
 800ad12:	f002 ffb5 	bl	800dc80 <HAL_GPIO_WritePin>

  DelayInit();
 800ad16:	f7fe ff1f 	bl	8009b58 <DelayInit>

  HAL_TIM_Base_Start_IT(&htim7);
 800ad1a:	4813      	ldr	r0, [pc, #76]	; (800ad68 <main+0xac>)
 800ad1c:	f003 fdc0 	bl	800e8a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800ad20:	2108      	movs	r1, #8
 800ad22:	4812      	ldr	r0, [pc, #72]	; (800ad6c <main+0xb0>)
 800ad24:	f004 f8d4 	bl	800eed0 <HAL_TIM_PWM_Start>
  lcd_init();
 800ad28:	f7ff fef0 	bl	800ab0c <lcd_init>

  showlogo();
 800ad2c:	f7ff ff9c 	bl	800ac68 <showlogo>

  osKernelInitialize();
 800ad30:	f004 fd02 	bl	800f738 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(acis_main_task, NULL, &defaultTask_attributes);
 800ad34:	4a0e      	ldr	r2, [pc, #56]	; (800ad70 <main+0xb4>)
 800ad36:	2100      	movs	r1, #0
 800ad38:	480e      	ldr	r0, [pc, #56]	; (800ad74 <main+0xb8>)
 800ad3a:	f004 fd37 	bl	800f7ac <osThreadNew>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <main+0xbc>)
 800ad42:	601a      	str	r2, [r3, #0]
  getterTaskHandle = osThreadNew(xGetterTask, NULL, &getterTask_attributes);
 800ad44:	4a0d      	ldr	r2, [pc, #52]	; (800ad7c <main+0xc0>)
 800ad46:	2100      	movs	r1, #0
 800ad48:	480d      	ldr	r0, [pc, #52]	; (800ad80 <main+0xc4>)
 800ad4a:	f004 fd2f 	bl	800f7ac <osThreadNew>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	4b0c      	ldr	r3, [pc, #48]	; (800ad84 <main+0xc8>)
 800ad52:	601a      	str	r2, [r3, #0]
  osKernelStart();
 800ad54:	f004 fd0a 	bl	800f76c <osKernelStart>

  while (1)
 800ad58:	e7fe      	b.n	800ad58 <main+0x9c>
 800ad5a:	bf00      	nop
 800ad5c:	e0042000 	.word	0xe0042000
 800ad60:	2001f514 	.word	0x2001f514
 800ad64:	40020000 	.word	0x40020000
 800ad68:	2001f764 	.word	0x2001f764
 800ad6c:	2001f724 	.word	0x2001f724
 800ad70:	08017a2c 	.word	0x08017a2c
 800ad74:	08008099 	.word	0x08008099
 800ad78:	2001f3f0 	.word	0x2001f3f0
 800ad7c:	08017a50 	.word	0x08017a50
 800ad80:	0800cbf9 	.word	0x0800cbf9
 800ad84:	2001f720 	.word	0x2001f720

0800ad88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b0b4      	sub	sp, #208	; 0xd0
 800ad8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ad8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ad92:	2230      	movs	r2, #48	; 0x30
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f008 f86f 	bl	8012e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ad9c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	605a      	str	r2, [r3, #4]
 800ada6:	609a      	str	r2, [r3, #8]
 800ada8:	60da      	str	r2, [r3, #12]
 800adaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800adac:	f107 030c 	add.w	r3, r7, #12
 800adb0:	2280      	movs	r2, #128	; 0x80
 800adb2:	2100      	movs	r1, #0
 800adb4:	4618      	mov	r0, r3
 800adb6:	f008 f860 	bl	8012e7a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800adba:	4b3c      	ldr	r3, [pc, #240]	; (800aeac <SystemClock_Config+0x124>)
 800adbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbe:	4a3b      	ldr	r2, [pc, #236]	; (800aeac <SystemClock_Config+0x124>)
 800adc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adc4:	6413      	str	r3, [r2, #64]	; 0x40
 800adc6:	4b39      	ldr	r3, [pc, #228]	; (800aeac <SystemClock_Config+0x124>)
 800adc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800add2:	4b37      	ldr	r3, [pc, #220]	; (800aeb0 <SystemClock_Config+0x128>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a36      	ldr	r2, [pc, #216]	; (800aeb0 <SystemClock_Config+0x128>)
 800add8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	4b34      	ldr	r3, [pc, #208]	; (800aeb0 <SystemClock_Config+0x128>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ade6:	607b      	str	r3, [r7, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800adea:	2302      	movs	r3, #2
 800adec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800adf0:	2301      	movs	r3, #1
 800adf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800adf6:	2310      	movs	r3, #16
 800adf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800adfc:	2302      	movs	r3, #2
 800adfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ae02:	2300      	movs	r3, #0
 800ae04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800ae08:	2308      	movs	r3, #8
 800ae0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800ae0e:	23d8      	movs	r3, #216	; 0xd8
 800ae10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ae14:	2302      	movs	r3, #2
 800ae16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ae20:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ae24:	4618      	mov	r0, r3
 800ae26:	f002 ff69 	bl	800dcfc <HAL_RCC_OscConfig>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800ae30:	f000 fb68 	bl	800b504 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800ae34:	f002 ff2a 	bl	800dc8c <HAL_PWREx_EnableOverDrive>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800ae3e:	f000 fb61 	bl	800b504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ae42:	230f      	movs	r3, #15
 800ae44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ae54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ae58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ae5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800ae64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ae68:	2107      	movs	r1, #7
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f003 f930 	bl	800e0d0 <HAL_RCC_ClockConfig>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800ae76:	f000 fb45 	bl	800b504 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 800ae7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800ae7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ae80:	2300      	movs	r3, #0
 800ae82:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ae84:	2300      	movs	r3, #0
 800ae86:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ae88:	f107 030c 	add.w	r3, r7, #12
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f003 f9dd 	bl	800e24c <HAL_RCCEx_PeriphCLKConfig>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <SystemClock_Config+0x114>
  {
    Error_Handler();
 800ae98:	f000 fb34 	bl	800b504 <Error_Handler>
  }

  HAL_SetTickFreq(HAL_TICK_FREQ_10KHZ);
 800ae9c:	2001      	movs	r0, #1
 800ae9e:	f002 f943 	bl	800d128 <HAL_SetTickFreq>
}
 800aea2:	bf00      	nop
 800aea4:	37d0      	adds	r7, #208	; 0xd0
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	40023800 	.word	0x40023800
 800aeb0:	40007000 	.word	0x40007000

0800aeb4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  __HAL_RCC_CRC_CLK_ENABLE();
 800aeba:	4b1a      	ldr	r3, [pc, #104]	; (800af24 <MX_CRC_Init+0x70>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	4a19      	ldr	r2, [pc, #100]	; (800af24 <MX_CRC_Init+0x70>)
 800aec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aec4:	6313      	str	r3, [r2, #48]	; 0x30
 800aec6:	4b17      	ldr	r3, [pc, #92]	; (800af24 <MX_CRC_Init+0x70>)
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aece:	607b      	str	r3, [r7, #4]
 800aed0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800aed2:	4b15      	ldr	r3, [pc, #84]	; (800af28 <MX_CRC_Init+0x74>)
 800aed4:	4a15      	ldr	r2, [pc, #84]	; (800af2c <MX_CRC_Init+0x78>)
 800aed6:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800aed8:	4b13      	ldr	r3, [pc, #76]	; (800af28 <MX_CRC_Init+0x74>)
 800aeda:	2201      	movs	r2, #1
 800aedc:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800aede:	4b12      	ldr	r3, [pc, #72]	; (800af28 <MX_CRC_Init+0x74>)
 800aee0:	2201      	movs	r2, #1
 800aee2:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 800aee4:	4b10      	ldr	r3, [pc, #64]	; (800af28 <MX_CRC_Init+0x74>)
 800aee6:	f24a 0201 	movw	r2, #40961	; 0xa001
 800aeea:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800aeec:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <MX_CRC_Init+0x74>)
 800aeee:	2208      	movs	r2, #8
 800aef0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 800aef2:	4b0d      	ldr	r3, [pc, #52]	; (800af28 <MX_CRC_Init+0x74>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800aef8:	4b0b      	ldr	r3, [pc, #44]	; (800af28 <MX_CRC_Init+0x74>)
 800aefa:	2220      	movs	r2, #32
 800aefc:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800aefe:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <MX_CRC_Init+0x74>)
 800af00:	2280      	movs	r2, #128	; 0x80
 800af02:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800af04:	4b08      	ldr	r3, [pc, #32]	; (800af28 <MX_CRC_Init+0x74>)
 800af06:	2201      	movs	r2, #1
 800af08:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800af0a:	4807      	ldr	r0, [pc, #28]	; (800af28 <MX_CRC_Init+0x74>)
 800af0c:	f002 fbba 	bl	800d684 <HAL_CRC_Init>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <MX_CRC_Init+0x66>
  {
    Error_Handler();
 800af16:	f000 faf5 	bl	800b504 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800af1a:	bf00      	nop
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	40023800 	.word	0x40023800
 800af28:	2001f514 	.word	0x2001f514
 800af2c:	40023000 	.word	0x40023000

0800af30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800af36:	463b      	mov	r3, r7
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	605a      	str	r2, [r3, #4]
 800af3e:	609a      	str	r2, [r3, #8]
 800af40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800af42:	4b21      	ldr	r3, [pc, #132]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af44:	4a21      	ldr	r2, [pc, #132]	; (800afcc <MX_ADC1_Init+0x9c>)
 800af46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800af48:	4b1f      	ldr	r3, [pc, #124]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800af50:	4b1d      	ldr	r3, [pc, #116]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af52:	2200      	movs	r2, #0
 800af54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800af56:	4b1c      	ldr	r3, [pc, #112]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af58:	2200      	movs	r2, #0
 800af5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800af5c:	4b1a      	ldr	r3, [pc, #104]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af5e:	2200      	movs	r2, #0
 800af60:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800af62:	4b19      	ldr	r3, [pc, #100]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800af6a:	4b17      	ldr	r3, [pc, #92]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800af70:	4b15      	ldr	r3, [pc, #84]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af72:	4a17      	ldr	r2, [pc, #92]	; (800afd0 <MX_ADC1_Init+0xa0>)
 800af74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800af76:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af78:	2200      	movs	r2, #0
 800af7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800af7c:	4b12      	ldr	r3, [pc, #72]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af7e:	2201      	movs	r2, #1
 800af80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800af82:	4b11      	ldr	r3, [pc, #68]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800af8a:	4b0f      	ldr	r3, [pc, #60]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800af90:	480d      	ldr	r0, [pc, #52]	; (800afc8 <MX_ADC1_Init+0x98>)
 800af92:	f002 f8dd 	bl	800d150 <HAL_ADC_Init>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800af9c:	f000 fab2 	bl	800b504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <MX_ADC1_Init+0xa4>)
 800afa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800afa4:	2301      	movs	r3, #1
 800afa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800afa8:	2300      	movs	r3, #0
 800afaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800afac:	463b      	mov	r3, r7
 800afae:	4619      	mov	r1, r3
 800afb0:	4805      	ldr	r0, [pc, #20]	; (800afc8 <MX_ADC1_Init+0x98>)
 800afb2:	f002 fa0b 	bl	800d3cc <HAL_ADC_ConfigChannel>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800afbc:	f000 faa2 	bl	800b504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	2001f5f8 	.word	0x2001f5f8
 800afcc:	40012000 	.word	0x40012000
 800afd0:	0f000001 	.word	0x0f000001
 800afd4:	10000012 	.word	0x10000012

0800afd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	; 0x28
 800afdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800afde:	f107 031c 	add.w	r3, r7, #28
 800afe2:	2200      	movs	r2, #0
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	605a      	str	r2, [r3, #4]
 800afe8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800afea:	463b      	mov	r3, r7
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	605a      	str	r2, [r3, #4]
 800aff2:	609a      	str	r2, [r3, #8]
 800aff4:	60da      	str	r2, [r3, #12]
 800aff6:	611a      	str	r2, [r3, #16]
 800aff8:	615a      	str	r2, [r3, #20]
 800affa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800affc:	4b22      	ldr	r3, [pc, #136]	; (800b088 <MX_TIM2_Init+0xb0>)
 800affe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b002:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 422;
 800b004:	4b20      	ldr	r3, [pc, #128]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b006:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800b00a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b00c:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b00e:	2200      	movs	r2, #0
 800b010:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800b012:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b014:	22ff      	movs	r2, #255	; 0xff
 800b016:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b018:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b01e:	4b1a      	ldr	r3, [pc, #104]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b020:	2200      	movs	r2, #0
 800b022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b024:	4818      	ldr	r0, [pc, #96]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b026:	f003 fd87 	bl	800eb38 <HAL_TIM_PWM_Init>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800b030:	f000 fa68 	bl	800b504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b034:	2300      	movs	r3, #0
 800b036:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b038:	2300      	movs	r3, #0
 800b03a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b03c:	f107 031c 	add.w	r3, r7, #28
 800b040:	4619      	mov	r1, r3
 800b042:	4811      	ldr	r0, [pc, #68]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b044:	f003 ff46 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800b04e:	f000 fa59 	bl	800b504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b052:	2360      	movs	r3, #96	; 0x60
 800b054:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b05e:	2300      	movs	r3, #0
 800b060:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b062:	463b      	mov	r3, r7
 800b064:	2208      	movs	r2, #8
 800b066:	4619      	mov	r1, r3
 800b068:	4807      	ldr	r0, [pc, #28]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b06a:	f003 fddb 	bl	800ec24 <HAL_TIM_PWM_ConfigChannel>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800b074:	f000 fa46 	bl	800b504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b078:	4803      	ldr	r0, [pc, #12]	; (800b088 <MX_TIM2_Init+0xb0>)
 800b07a:	f000 faed 	bl	800b658 <HAL_TIM_MspPostInit>

}
 800b07e:	bf00      	nop
 800b080:	3728      	adds	r7, #40	; 0x28
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	2001f724 	.word	0x2001f724

0800b08c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b092:	1d3b      	adds	r3, r7, #4
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	605a      	str	r2, [r3, #4]
 800b09a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800b09c:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <MX_TIM7_Init+0x64>)
 800b09e:	4a15      	ldr	r2, [pc, #84]	; (800b0f4 <MX_TIM7_Init+0x68>)
 800b0a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800b0a2:	4b13      	ldr	r3, [pc, #76]	; (800b0f0 <MX_TIM7_Init+0x64>)
 800b0a4:	226b      	movs	r2, #107	; 0x6b
 800b0a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0a8:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <MX_TIM7_Init+0x64>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800b0ae:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <MX_TIM7_Init+0x64>)
 800b0b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b0b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0b6:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <MX_TIM7_Init+0x64>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b0bc:	480c      	ldr	r0, [pc, #48]	; (800b0f0 <MX_TIM7_Init+0x64>)
 800b0be:	f003 fd21 	bl	800eb04 <HAL_TIM_Base_Init>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800b0c8:	f000 fa1c 	bl	800b504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b0d4:	1d3b      	adds	r3, r7, #4
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4805      	ldr	r0, [pc, #20]	; (800b0f0 <MX_TIM7_Init+0x64>)
 800b0da:	f003 fefb 	bl	800eed4 <HAL_TIMEx_MasterConfigSynchronization>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800b0e4:	f000 fa0e 	bl	800b504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800b0e8:	bf00      	nop
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	2001f764 	.word	0x2001f764
 800b0f4:	40001400 	.word	0x40001400

0800b0f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800b0fe:	1d3b      	adds	r3, r7, #4
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	605a      	str	r2, [r3, #4]
 800b106:	609a      	str	r2, [r3, #8]
 800b108:	60da      	str	r2, [r3, #12]
 800b10a:	611a      	str	r2, [r3, #16]
 800b10c:	615a      	str	r2, [r3, #20]
 800b10e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800b110:	4b23      	ldr	r3, [pc, #140]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b112:	4a24      	ldr	r2, [pc, #144]	; (800b1a4 <MX_TIM10_Init+0xac>)
 800b114:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10799;
 800b116:	4b22      	ldr	r3, [pc, #136]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b118:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800b11c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b11e:	4b20      	ldr	r3, [pc, #128]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b120:	2200      	movs	r2, #0
 800b122:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 800b124:	4b1e      	ldr	r3, [pc, #120]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b126:	f242 720f 	movw	r2, #9999	; 0x270f
 800b12a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b12c:	4b1c      	ldr	r3, [pc, #112]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b12e:	2200      	movs	r2, #0
 800b130:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b132:	4b1b      	ldr	r3, [pc, #108]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b134:	2200      	movs	r2, #0
 800b136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800b138:	4819      	ldr	r0, [pc, #100]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b13a:	f003 fce3 	bl	800eb04 <HAL_TIM_Base_Init>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 800b144:	f000 f9de 	bl	800b504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800b148:	4815      	ldr	r0, [pc, #84]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b14a:	f003 fcf5 	bl	800eb38 <HAL_TIM_PWM_Init>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 800b154:	f000 f9d6 	bl	800b504 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 800b158:	2108      	movs	r1, #8
 800b15a:	4811      	ldr	r0, [pc, #68]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b15c:	f003 fd06 	bl	800eb6c <HAL_TIM_OnePulse_Init>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <MX_TIM10_Init+0x72>
  {
    Error_Handler();
 800b166:	f000 f9cd 	bl	800b504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b16a:	2360      	movs	r3, #96	; 0x60
 800b16c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000;
 800b16e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b172:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b178:	2300      	movs	r3, #0
 800b17a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b17c:	1d3b      	adds	r3, r7, #4
 800b17e:	2200      	movs	r2, #0
 800b180:	4619      	mov	r1, r3
 800b182:	4807      	ldr	r0, [pc, #28]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b184:	f003 fd4e 	bl	800ec24 <HAL_TIM_PWM_ConfigChannel>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <MX_TIM10_Init+0x9a>
  {
    Error_Handler();
 800b18e:	f000 f9b9 	bl	800b504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800b192:	4803      	ldr	r0, [pc, #12]	; (800b1a0 <MX_TIM10_Init+0xa8>)
 800b194:	f000 fa60 	bl	800b658 <HAL_TIM_MspPostInit>

}
 800b198:	bf00      	nop
 800b19a:	3720      	adds	r7, #32
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	2001f4d4 	.word	0x2001f4d4
 800b1a4:	40014400 	.word	0x40014400

0800b1a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b1ac:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1ae:	4a14      	ldr	r2, [pc, #80]	; (800b200 <MX_USART1_UART_Init+0x58>)
 800b1b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 800b1b2:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1b4:	4a13      	ldr	r2, [pc, #76]	; (800b204 <MX_USART1_UART_Init+0x5c>)
 800b1b6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b1b8:	4b10      	ldr	r3, [pc, #64]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b1c4:	4b0d      	ldr	r3, [pc, #52]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b1ca:	4b0c      	ldr	r3, [pc, #48]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1cc:	220c      	movs	r2, #12
 800b1ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b1d0:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b1d6:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b1dc:	4b07      	ldr	r3, [pc, #28]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b1e2:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b1e8:	4804      	ldr	r0, [pc, #16]	; (800b1fc <MX_USART1_UART_Init+0x54>)
 800b1ea:	f004 fa76 	bl	800f6da <HAL_UART_Init>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800b1f4:	f000 f986 	bl	800b504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b1f8:	bf00      	nop
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	2001f6a0 	.word	0x2001f6a0
 800b200:	40011000 	.word	0x40011000
 800b204:	00337f98 	.word	0x00337f98

0800b208 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b20c:	4b13      	ldr	r3, [pc, #76]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b20e:	4a14      	ldr	r2, [pc, #80]	; (800b260 <MX_USART3_UART_Init+0x58>)
 800b210:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 960000;
 800b212:	4b12      	ldr	r3, [pc, #72]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b214:	4a13      	ldr	r2, [pc, #76]	; (800b264 <MX_USART3_UART_Init+0x5c>)
 800b216:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b218:	4b10      	ldr	r3, [pc, #64]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b21e:	4b0f      	ldr	r3, [pc, #60]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b220:	2200      	movs	r2, #0
 800b222:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b224:	4b0d      	ldr	r3, [pc, #52]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b226:	2200      	movs	r2, #0
 800b228:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b22a:	4b0c      	ldr	r3, [pc, #48]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b22c:	220c      	movs	r2, #12
 800b22e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b232:	2200      	movs	r2, #0
 800b234:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b236:	4b09      	ldr	r3, [pc, #36]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b238:	2200      	movs	r2, #0
 800b23a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b23c:	4b07      	ldr	r3, [pc, #28]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b23e:	2200      	movs	r2, #0
 800b240:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b242:	4b06      	ldr	r3, [pc, #24]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b244:	2200      	movs	r2, #0
 800b246:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b248:	4804      	ldr	r0, [pc, #16]	; (800b25c <MX_USART3_UART_Init+0x54>)
 800b24a:	f004 fa46 	bl	800f6da <HAL_UART_Init>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 800b254:	f000 f956 	bl	800b504 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b258:	bf00      	nop
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	2001f454 	.word	0x2001f454
 800b260:	40004800 	.word	0x40004800
 800b264:	000ea600 	.word	0x000ea600

0800b268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b26e:	4b1e      	ldr	r3, [pc, #120]	; (800b2e8 <MX_DMA_Init+0x80>)
 800b270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b272:	4a1d      	ldr	r2, [pc, #116]	; (800b2e8 <MX_DMA_Init+0x80>)
 800b274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b278:	6313      	str	r3, [r2, #48]	; 0x30
 800b27a:	4b1b      	ldr	r3, [pc, #108]	; (800b2e8 <MX_DMA_Init+0x80>)
 800b27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b27e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b282:	607b      	str	r3, [r7, #4]
 800b284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b286:	4b18      	ldr	r3, [pc, #96]	; (800b2e8 <MX_DMA_Init+0x80>)
 800b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28a:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <MX_DMA_Init+0x80>)
 800b28c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b290:	6313      	str	r3, [r2, #48]	; 0x30
 800b292:	4b15      	ldr	r3, [pc, #84]	; (800b2e8 <MX_DMA_Init+0x80>)
 800b294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b29a:	603b      	str	r3, [r7, #0]
 800b29c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 9, 0); //PC
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2109      	movs	r1, #9
 800b2a2:	200c      	movs	r0, #12
 800b2a4:	f002 f94a 	bl	800d53c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800b2a8:	200c      	movs	r0, #12
 800b2aa:	f002 f979 	bl	800d5a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 9, 0); //PC
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2109      	movs	r1, #9
 800b2b2:	200e      	movs	r0, #14
 800b2b4:	f002 f942 	bl	800d53c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800b2b8:	200e      	movs	r0, #14
 800b2ba:	f002 f971 	bl	800d5a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //ACIS
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2108      	movs	r1, #8
 800b2c2:	203a      	movs	r0, #58	; 0x3a
 800b2c4:	f002 f93a 	bl	800d53c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800b2c8:	203a      	movs	r0, #58	; 0x3a
 800b2ca:	f002 f969 	bl	800d5a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //ACIS
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2108      	movs	r1, #8
 800b2d2:	2046      	movs	r0, #70	; 0x46
 800b2d4:	f002 f932 	bl	800d53c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800b2d8:	2046      	movs	r0, #70	; 0x46
 800b2da:	f002 f961 	bl	800d5a0 <HAL_NVIC_EnableIRQ>

}
 800b2de:	bf00      	nop
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	40023800 	.word	0x40023800

0800b2ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	; 0x28
 800b2f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2f2:	f107 0314 	add.w	r3, r7, #20
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	605a      	str	r2, [r3, #4]
 800b2fc:	609a      	str	r2, [r3, #8]
 800b2fe:	60da      	str	r2, [r3, #12]
 800b300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b302:	4b7b      	ldr	r3, [pc, #492]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b306:	4a7a      	ldr	r2, [pc, #488]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b308:	f043 0301 	orr.w	r3, r3, #1
 800b30c:	6313      	str	r3, [r2, #48]	; 0x30
 800b30e:	4b78      	ldr	r3, [pc, #480]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	613b      	str	r3, [r7, #16]
 800b318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b31a:	4b75      	ldr	r3, [pc, #468]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31e:	4a74      	ldr	r2, [pc, #464]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b320:	f043 0302 	orr.w	r3, r3, #2
 800b324:	6313      	str	r3, [r2, #48]	; 0x30
 800b326:	4b72      	ldr	r3, [pc, #456]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	60fb      	str	r3, [r7, #12]
 800b330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b332:	4b6f      	ldr	r3, [pc, #444]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b336:	4a6e      	ldr	r2, [pc, #440]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b338:	f043 0304 	orr.w	r3, r3, #4
 800b33c:	6313      	str	r3, [r2, #48]	; 0x30
 800b33e:	4b6c      	ldr	r3, [pc, #432]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b342:	f003 0304 	and.w	r3, r3, #4
 800b346:	60bb      	str	r3, [r7, #8]
 800b348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b34a:	4b69      	ldr	r3, [pc, #420]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34e:	4a68      	ldr	r2, [pc, #416]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b350:	f043 0308 	orr.w	r3, r3, #8
 800b354:	6313      	str	r3, [r2, #48]	; 0x30
 800b356:	4b66      	ldr	r3, [pc, #408]	; (800b4f0 <MX_GPIO_Init+0x204>)
 800b358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35a:	f003 0308 	and.w	r3, r3, #8
 800b35e:	607b      	str	r3, [r7, #4]
 800b360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin|LCD_CS1_Pin, GPIO_PIN_RESET);
 800b362:	2200      	movs	r2, #0
 800b364:	2116      	movs	r1, #22
 800b366:	4863      	ldr	r0, [pc, #396]	; (800b4f4 <MX_GPIO_Init+0x208>)
 800b368:	f002 fc8a 	bl	800dc80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 800b36c:	2200      	movs	r2, #0
 800b36e:	f248 01ff 	movw	r1, #33023	; 0x80ff
 800b372:	4861      	ldr	r0, [pc, #388]	; (800b4f8 <MX_GPIO_Init+0x20c>)
 800b374:	f002 fc84 	bl	800dc80 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
                          |USB_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 800b378:	2201      	movs	r2, #1
 800b37a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b37e:	485f      	ldr	r0, [pc, #380]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b380:	f002 fc7e 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 800b384:	2201      	movs	r2, #1
 800b386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b38a:	485c      	ldr	r0, [pc, #368]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b38c:	f002 fc78 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 800b390:	2201      	movs	r2, #1
 800b392:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b396:	4859      	ldr	r0, [pc, #356]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b398:	f002 fc72 	bl	800dc80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 800b39c:	2201      	movs	r2, #1
 800b39e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b3a2:	4856      	ldr	r0, [pc, #344]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b3a4:	f002 fc6c 	bl	800dc80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin|LCD_EN_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2107      	movs	r1, #7
 800b3ac:	4853      	ldr	r0, [pc, #332]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b3ae:	f002 fc67 	bl	800dc80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 800b3b2:	2306      	movs	r3, #6
 800b3b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3c2:	f107 0314 	add.w	r3, r7, #20
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	484a      	ldr	r0, [pc, #296]	; (800b4f4 <MX_GPIO_Init+0x208>)
 800b3ca:	f002 fb7d 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b3de:	f107 0314 	add.w	r3, r7, #20
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4845      	ldr	r0, [pc, #276]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b3e6:	f002 fb6f 	bl	800dac8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1G_Pin|LED2G_Pin|LED2R_Pin|LED1R_Pin;
 800b3ea:	f44f 4331 	mov.w	r3, #45312	; 0xb100
 800b3ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800b3f0:	2311      	movs	r3, #17
 800b3f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b3fc:	f107 0314 	add.w	r3, r7, #20
 800b400:	4619      	mov	r1, r3
 800b402:	483e      	ldr	r0, [pc, #248]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b404:	f002 fb60 	bl	800dac8 <HAL_GPIO_Init>


  /*Configure GPIO pins : LCD_DB0_LED1R_Pin LCD_DB1_LED1G_Pin LCD_DB2_LED2R_Pin LCD_DB3_LED2G_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 800b408:	23ff      	movs	r3, #255	; 0xff
 800b40a:	617b      	str	r3, [r7, #20]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b40c:	2301      	movs	r3, #1
 800b40e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b410:	2300      	movs	r3, #0
 800b412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b414:	2303      	movs	r3, #3
 800b416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b418:	f107 0314 	add.w	r3, r7, #20
 800b41c:	4619      	mov	r1, r3
 800b41e:	4836      	ldr	r0, [pc, #216]	; (800b4f8 <MX_GPIO_Init+0x20c>)
 800b420:	f002 fb52 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS1_Pin */
  GPIO_InitStruct.Pin = LCD_CS1_Pin;
 800b424:	2310      	movs	r3, #16
 800b426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b428:	2301      	movs	r3, #1
 800b42a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b430:	2303      	movs	r3, #3
 800b432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS1_GPIO_Port, &GPIO_InitStruct);
 800b434:	f107 0314 	add.w	r3, r7, #20
 800b438:	4619      	mov	r1, r3
 800b43a:	482e      	ldr	r0, [pc, #184]	; (800b4f4 <MX_GPIO_Init+0x208>)
 800b43c:	f002 fb44 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS2_Pin|LCD_RST_Pin;
 800b440:	2305      	movs	r3, #5
 800b442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b444:	2301      	movs	r3, #1
 800b446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b44c:	2303      	movs	r3, #3
 800b44e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b450:	f107 0314 	add.w	r3, r7, #20
 800b454:	4619      	mov	r1, r3
 800b456:	4829      	ldr	r0, [pc, #164]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b458:	f002 fb36 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_DISPLAY_Pin SW_FUEL2_Pin SW_FUEL1_Pin BUT_CANCEL_Pin */
  GPIO_InitStruct.Pin = SW_DISPLAY_Pin|SW_FUEL2_Pin|SW_FUEL1_Pin|BUT_CANCEL_Pin;
 800b45c:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
 800b460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b462:	2300      	movs	r3, #0
 800b464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b466:	2301      	movs	r3, #1
 800b468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b46a:	f107 0314 	add.w	r3, r7, #20
 800b46e:	4619      	mov	r1, r3
 800b470:	4820      	ldr	r0, [pc, #128]	; (800b4f4 <MX_GPIO_Init+0x208>)
 800b472:	f002 fb29 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b476:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b47a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47c:	2302      	movs	r3, #2
 800b47e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b484:	2303      	movs	r3, #3
 800b486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b488:	230a      	movs	r3, #10
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b48c:	f107 0314 	add.w	r3, r7, #20
 800b490:	4619      	mov	r1, r3
 800b492:	4819      	ldr	r0, [pc, #100]	; (800b4f8 <MX_GPIO_Init+0x20c>)
 800b494:	f002 fb18 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_RST_Pin */
  GPIO_InitStruct.Pin = USB_RST_Pin;
 800b498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b49c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RST_GPIO_Port, &GPIO_InitStruct);
 800b4aa:	f107 0314 	add.w	r3, r7, #20
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4811      	ldr	r0, [pc, #68]	; (800b4f8 <MX_GPIO_Init+0x20c>)
 800b4b2:	f002 fb09 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_ENTER_Pin */
  GPIO_InitStruct.Pin = BUT_ENTER_Pin;
 800b4b6:	2304      	movs	r3, #4
 800b4b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_ENTER_GPIO_Port, &GPIO_InitStruct);
 800b4c2:	f107 0314 	add.w	r3, r7, #20
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	480d      	ldr	r0, [pc, #52]	; (800b500 <MX_GPIO_Init+0x214>)
 800b4ca:	f002 fafd 	bl	800dac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_UP_Pin BUT_DOWN_Pin */
  GPIO_InitStruct.Pin = BUT_LEFT_Pin|BUT_RIGHT_Pin|BUT_UP_Pin|BUT_DOWN_Pin;
 800b4ce:	23f0      	movs	r3, #240	; 0xf0
 800b4d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b4da:	f107 0314 	add.w	r3, r7, #20
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4806      	ldr	r0, [pc, #24]	; (800b4fc <MX_GPIO_Init+0x210>)
 800b4e2:	f002 faf1 	bl	800dac8 <HAL_GPIO_Init>

}
 800b4e6:	bf00      	nop
 800b4e8:	3728      	adds	r7, #40	; 0x28
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	40020800 	.word	0x40020800
 800b4f8:	40020000 	.word	0x40020000
 800b4fc:	40020400 	.word	0x40020400
 800b500:	40020c00 	.word	0x40020c00

0800b504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b508:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b50a:	e7fe      	b.n	800b50a <Error_Handler+0x6>

0800b50c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b512:	4b11      	ldr	r3, [pc, #68]	; (800b558 <HAL_MspInit+0x4c>)
 800b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b516:	4a10      	ldr	r2, [pc, #64]	; (800b558 <HAL_MspInit+0x4c>)
 800b518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b51c:	6413      	str	r3, [r2, #64]	; 0x40
 800b51e:	4b0e      	ldr	r3, [pc, #56]	; (800b558 <HAL_MspInit+0x4c>)
 800b520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b526:	607b      	str	r3, [r7, #4]
 800b528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b52a:	4b0b      	ldr	r3, [pc, #44]	; (800b558 <HAL_MspInit+0x4c>)
 800b52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52e:	4a0a      	ldr	r2, [pc, #40]	; (800b558 <HAL_MspInit+0x4c>)
 800b530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b534:	6453      	str	r3, [r2, #68]	; 0x44
 800b536:	4b08      	ldr	r3, [pc, #32]	; (800b558 <HAL_MspInit+0x4c>)
 800b538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b53a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b542:	2200      	movs	r2, #0
 800b544:	210f      	movs	r1, #15
 800b546:	f06f 0001 	mvn.w	r0, #1
 800b54a:	f001 fff7 	bl	800d53c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b54e:	bf00      	nop
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	40023800 	.word	0x40023800

0800b55c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a0d      	ldr	r2, [pc, #52]	; (800b5a0 <HAL_ADC_MspInit+0x44>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d113      	bne.n	800b596 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b56e:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <HAL_ADC_MspInit+0x48>)
 800b570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b572:	4a0c      	ldr	r2, [pc, #48]	; (800b5a4 <HAL_ADC_MspInit+0x48>)
 800b574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b578:	6453      	str	r3, [r2, #68]	; 0x44
 800b57a:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <HAL_ADC_MspInit+0x48>)
 800b57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b57e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800b586:	2200      	movs	r2, #0
 800b588:	2105      	movs	r1, #5
 800b58a:	2012      	movs	r0, #18
 800b58c:	f001 ffd6 	bl	800d53c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800b590:	2012      	movs	r0, #18
 800b592:	f002 f805 	bl	800d5a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800b596:	bf00      	nop
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	40012000 	.word	0x40012000
 800b5a4:	40023800 	.word	0x40023800

0800b5a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5b8:	d10b      	bne.n	800b5d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b5ba:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <HAL_TIM_PWM_MspInit+0x38>)
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5be:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <HAL_TIM_PWM_MspInit+0x38>)
 800b5c0:	f043 0301 	orr.w	r3, r3, #1
 800b5c4:	6413      	str	r3, [r2, #64]	; 0x40
 800b5c6:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <HAL_TIM_PWM_MspInit+0x38>)
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800b5d2:	bf00      	nop
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	40023800 	.word	0x40023800

0800b5e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a16      	ldr	r2, [pc, #88]	; (800b64c <HAL_TIM_Base_MspInit+0x68>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d114      	bne.n	800b620 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b5f6:	4b16      	ldr	r3, [pc, #88]	; (800b650 <HAL_TIM_Base_MspInit+0x6c>)
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	4a15      	ldr	r2, [pc, #84]	; (800b650 <HAL_TIM_Base_MspInit+0x6c>)
 800b5fc:	f043 0320 	orr.w	r3, r3, #32
 800b600:	6413      	str	r3, [r2, #64]	; 0x40
 800b602:	4b13      	ldr	r3, [pc, #76]	; (800b650 <HAL_TIM_Base_MspInit+0x6c>)
 800b604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b606:	f003 0320 	and.w	r3, r3, #32
 800b60a:	60fb      	str	r3, [r7, #12]
 800b60c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800b60e:	2200      	movs	r2, #0
 800b610:	2102      	movs	r1, #2
 800b612:	2037      	movs	r0, #55	; 0x37
 800b614:	f001 ff92 	bl	800d53c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b618:	2037      	movs	r0, #55	; 0x37
 800b61a:	f001 ffc1 	bl	800d5a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800b61e:	e010      	b.n	800b642 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a0b      	ldr	r2, [pc, #44]	; (800b654 <HAL_TIM_Base_MspInit+0x70>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d10b      	bne.n	800b642 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800b62a:	4b09      	ldr	r3, [pc, #36]	; (800b650 <HAL_TIM_Base_MspInit+0x6c>)
 800b62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62e:	4a08      	ldr	r2, [pc, #32]	; (800b650 <HAL_TIM_Base_MspInit+0x6c>)
 800b630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b634:	6453      	str	r3, [r2, #68]	; 0x44
 800b636:	4b06      	ldr	r3, [pc, #24]	; (800b650 <HAL_TIM_Base_MspInit+0x6c>)
 800b638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b63e:	60bb      	str	r3, [r7, #8]
 800b640:	68bb      	ldr	r3, [r7, #8]
}
 800b642:	bf00      	nop
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	40001400 	.word	0x40001400
 800b650:	40023800 	.word	0x40023800
 800b654:	40014400 	.word	0x40014400

0800b658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b660:	f107 0314 	add.w	r3, r7, #20
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	605a      	str	r2, [r3, #4]
 800b66a:	609a      	str	r2, [r3, #8]
 800b66c:	60da      	str	r2, [r3, #12]
 800b66e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b678:	d11d      	bne.n	800b6b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b67a:	4b19      	ldr	r3, [pc, #100]	; (800b6e0 <HAL_TIM_MspPostInit+0x88>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	4a18      	ldr	r2, [pc, #96]	; (800b6e0 <HAL_TIM_MspPostInit+0x88>)
 800b680:	f043 0302 	orr.w	r3, r3, #2
 800b684:	6313      	str	r3, [r2, #48]	; 0x30
 800b686:	4b16      	ldr	r3, [pc, #88]	; (800b6e0 <HAL_TIM_MspPostInit+0x88>)
 800b688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68a:	f003 0302 	and.w	r3, r3, #2
 800b68e:	613b      	str	r3, [r7, #16]
 800b690:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LCD_LED_TIM2_CH3_Pin;
 800b692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b698:	2302      	movs	r3, #2
 800b69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LED_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 800b6a8:	f107 0314 	add.w	r3, r7, #20
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	480d      	ldr	r0, [pc, #52]	; (800b6e4 <HAL_TIM_MspPostInit+0x8c>)
 800b6b0:	f002 fa0a 	bl	800dac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800b6b4:	e010      	b.n	800b6d8 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM10)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a0b      	ldr	r2, [pc, #44]	; (800b6e8 <HAL_TIM_MspPostInit+0x90>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d10b      	bne.n	800b6d8 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <HAL_TIM_MspPostInit+0x88>)
 800b6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c4:	4a06      	ldr	r2, [pc, #24]	; (800b6e0 <HAL_TIM_MspPostInit+0x88>)
 800b6c6:	f043 0302 	orr.w	r3, r3, #2
 800b6ca:	6313      	str	r3, [r2, #48]	; 0x30
 800b6cc:	4b04      	ldr	r3, [pc, #16]	; (800b6e0 <HAL_TIM_MspPostInit+0x88>)
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d0:	f003 0302 	and.w	r3, r3, #2
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
}
 800b6d8:	bf00      	nop
 800b6da:	3728      	adds	r7, #40	; 0x28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	40020400 	.word	0x40020400
 800b6e8:	40014400 	.word	0x40014400

0800b6ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b08c      	sub	sp, #48	; 0x30
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6f4:	f107 031c 	add.w	r3, r7, #28
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]
 800b6fc:	605a      	str	r2, [r3, #4]
 800b6fe:	609a      	str	r2, [r3, #8]
 800b700:	60da      	str	r2, [r3, #12]
 800b702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a96      	ldr	r2, [pc, #600]	; (800b964 <HAL_UART_MspInit+0x278>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	f040 8091 	bne.w	800b832 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b710:	4b95      	ldr	r3, [pc, #596]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b714:	4a94      	ldr	r2, [pc, #592]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b716:	f043 0310 	orr.w	r3, r3, #16
 800b71a:	6453      	str	r3, [r2, #68]	; 0x44
 800b71c:	4b92      	ldr	r3, [pc, #584]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b720:	f003 0310 	and.w	r3, r3, #16
 800b724:	61bb      	str	r3, [r7, #24]
 800b726:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b728:	4b8f      	ldr	r3, [pc, #572]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b72c:	4a8e      	ldr	r2, [pc, #568]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	6313      	str	r3, [r2, #48]	; 0x30
 800b734:	4b8c      	ldr	r3, [pc, #560]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b738:	f003 0301 	and.w	r3, r3, #1
 800b73c:	617b      	str	r3, [r7, #20]
 800b73e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b740:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b746:	2302      	movs	r3, #2
 800b748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b74a:	2301      	movs	r3, #1
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b74e:	2303      	movs	r3, #3
 800b750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b752:	2307      	movs	r3, #7
 800b754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b756:	f107 031c 	add.w	r3, r7, #28
 800b75a:	4619      	mov	r1, r3
 800b75c:	4883      	ldr	r0, [pc, #524]	; (800b96c <HAL_UART_MspInit+0x280>)
 800b75e:	f002 f9b3 	bl	800dac8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800b762:	4b83      	ldr	r3, [pc, #524]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b764:	4a83      	ldr	r2, [pc, #524]	; (800b974 <HAL_UART_MspInit+0x288>)
 800b766:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800b768:	4b81      	ldr	r3, [pc, #516]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b76a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b76e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b770:	4b7f      	ldr	r3, [pc, #508]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b772:	2200      	movs	r2, #0
 800b774:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b776:	4b7e      	ldr	r3, [pc, #504]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b778:	2200      	movs	r2, #0
 800b77a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b77c:	4b7c      	ldr	r3, [pc, #496]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b77e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b782:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b784:	4b7a      	ldr	r3, [pc, #488]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b786:	2200      	movs	r2, #0
 800b788:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b78a:	4b79      	ldr	r3, [pc, #484]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800b790:	4b77      	ldr	r3, [pc, #476]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b792:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b796:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800b798:	4b75      	ldr	r3, [pc, #468]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b79a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b79e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b7a0:	4b73      	ldr	r3, [pc, #460]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b7a6:	4872      	ldr	r0, [pc, #456]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b7a8:	f002 f802 	bl	800d7b0 <HAL_DMA_Init>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800b7b2:	f7ff fea7 	bl	800b504 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a6d      	ldr	r2, [pc, #436]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b7ba:	66da      	str	r2, [r3, #108]	; 0x6c
 800b7bc:	4a6c      	ldr	r2, [pc, #432]	; (800b970 <HAL_UART_MspInit+0x284>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800b7c2:	4b6d      	ldr	r3, [pc, #436]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7c4:	4a6d      	ldr	r2, [pc, #436]	; (800b97c <HAL_UART_MspInit+0x290>)
 800b7c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800b7c8:	4b6b      	ldr	r3, [pc, #428]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b7ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b7d0:	4b69      	ldr	r3, [pc, #420]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7d2:	2240      	movs	r2, #64	; 0x40
 800b7d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7d6:	4b68      	ldr	r3, [pc, #416]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b7dc:	4b66      	ldr	r3, [pc, #408]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7e4:	4b64      	ldr	r3, [pc, #400]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7ea:	4b63      	ldr	r3, [pc, #396]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b7f0:	4b61      	ldr	r3, [pc, #388]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800b7f6:	4b60      	ldr	r3, [pc, #384]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b7f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800b7fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b7fe:	4b5e      	ldr	r3, [pc, #376]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b800:	2200      	movs	r2, #0
 800b802:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800b804:	485c      	ldr	r0, [pc, #368]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b806:	f001 ffd3 	bl	800d7b0 <HAL_DMA_Init>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800b810:	f7ff fe78 	bl	800b504 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a58      	ldr	r2, [pc, #352]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b818:	669a      	str	r2, [r3, #104]	; 0x68
 800b81a:	4a57      	ldr	r2, [pc, #348]	; (800b978 <HAL_UART_MspInit+0x28c>)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800b820:	2200      	movs	r2, #0
 800b822:	2105      	movs	r1, #5
 800b824:	2025      	movs	r0, #37	; 0x25
 800b826:	f001 fe89 	bl	800d53c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b82a:	2025      	movs	r0, #37	; 0x25
 800b82c:	f001 feb8 	bl	800d5a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b830:	e093      	b.n	800b95a <HAL_UART_MspInit+0x26e>
  else if(huart->Instance==USART3)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a52      	ldr	r2, [pc, #328]	; (800b980 <HAL_UART_MspInit+0x294>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	f040 808e 	bne.w	800b95a <HAL_UART_MspInit+0x26e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800b83e:	4b4a      	ldr	r3, [pc, #296]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b842:	4a49      	ldr	r2, [pc, #292]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b848:	6413      	str	r3, [r2, #64]	; 0x40
 800b84a:	4b47      	ldr	r3, [pc, #284]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b84e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b856:	4b44      	ldr	r3, [pc, #272]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85a:	4a43      	ldr	r2, [pc, #268]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b85c:	f043 0304 	orr.w	r3, r3, #4
 800b860:	6313      	str	r3, [r2, #48]	; 0x30
 800b862:	4b41      	ldr	r3, [pc, #260]	; (800b968 <HAL_UART_MspInit+0x27c>)
 800b864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b866:	f003 0304 	and.w	r3, r3, #4
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b86e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b874:	2302      	movs	r3, #2
 800b876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b878:	2301      	movs	r3, #1
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b87c:	2303      	movs	r3, #3
 800b87e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b880:	2307      	movs	r3, #7
 800b882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b884:	f107 031c 	add.w	r3, r7, #28
 800b888:	4619      	mov	r1, r3
 800b88a:	483e      	ldr	r0, [pc, #248]	; (800b984 <HAL_UART_MspInit+0x298>)
 800b88c:	f002 f91c 	bl	800dac8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800b890:	4b3d      	ldr	r3, [pc, #244]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b892:	4a3e      	ldr	r2, [pc, #248]	; (800b98c <HAL_UART_MspInit+0x2a0>)
 800b894:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800b896:	4b3c      	ldr	r3, [pc, #240]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b89c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b89e:	4b3a      	ldr	r3, [pc, #232]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b8a4:	4b38      	ldr	r3, [pc, #224]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b8aa:	4b37      	ldr	r3, [pc, #220]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b8b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b8b2:	4b35      	ldr	r3, [pc, #212]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8b8:	4b33      	ldr	r3, [pc, #204]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800b8be:	4b32      	ldr	r3, [pc, #200]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b8c6:	4b30      	ldr	r3, [pc, #192]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b8cc:	4b2e      	ldr	r3, [pc, #184]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800b8d2:	482d      	ldr	r0, [pc, #180]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8d4:	f001 ff6c 	bl	800d7b0 <HAL_DMA_Init>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 800b8de:	f7ff fe11 	bl	800b504 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a28      	ldr	r2, [pc, #160]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8e6:	66da      	str	r2, [r3, #108]	; 0x6c
 800b8e8:	4a27      	ldr	r2, [pc, #156]	; (800b988 <HAL_UART_MspInit+0x29c>)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800b8ee:	4b28      	ldr	r3, [pc, #160]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b8f0:	4a28      	ldr	r2, [pc, #160]	; (800b994 <HAL_UART_MspInit+0x2a8>)
 800b8f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800b8f4:	4b26      	ldr	r3, [pc, #152]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b8f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b8fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b8fc:	4b24      	ldr	r3, [pc, #144]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b8fe:	2240      	movs	r2, #64	; 0x40
 800b900:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b902:	4b23      	ldr	r3, [pc, #140]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b904:	2200      	movs	r2, #0
 800b906:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b908:	4b21      	ldr	r3, [pc, #132]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b90a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b90e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b910:	4b1f      	ldr	r3, [pc, #124]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b912:	2200      	movs	r2, #0
 800b914:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b916:	4b1e      	ldr	r3, [pc, #120]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b918:	2200      	movs	r2, #0
 800b91a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800b91c:	4b1c      	ldr	r3, [pc, #112]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b91e:	2200      	movs	r2, #0
 800b920:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b922:	4b1b      	ldr	r3, [pc, #108]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b924:	2200      	movs	r2, #0
 800b926:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b928:	4b19      	ldr	r3, [pc, #100]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800b92e:	4818      	ldr	r0, [pc, #96]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b930:	f001 ff3e 	bl	800d7b0 <HAL_DMA_Init>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <HAL_UART_MspInit+0x252>
      Error_Handler();
 800b93a:	f7ff fde3 	bl	800b504 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a13      	ldr	r2, [pc, #76]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b942:	669a      	str	r2, [r3, #104]	; 0x68
 800b944:	4a12      	ldr	r2, [pc, #72]	; (800b990 <HAL_UART_MspInit+0x2a4>)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800b94a:	2200      	movs	r2, #0
 800b94c:	2105      	movs	r1, #5
 800b94e:	2027      	movs	r0, #39	; 0x27
 800b950:	f001 fdf4 	bl	800d53c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800b954:	2027      	movs	r0, #39	; 0x27
 800b956:	f001 fe23 	bl	800d5a0 <HAL_NVIC_EnableIRQ>
}
 800b95a:	bf00      	nop
 800b95c:	3730      	adds	r7, #48	; 0x30
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	40011000 	.word	0x40011000
 800b968:	40023800 	.word	0x40023800
 800b96c:	40020000 	.word	0x40020000
 800b970:	2001f640 	.word	0x2001f640
 800b974:	40026440 	.word	0x40026440
 800b978:	2001f598 	.word	0x2001f598
 800b97c:	400264b8 	.word	0x400264b8
 800b980:	40004800 	.word	0x40004800
 800b984:	40020800 	.word	0x40020800
 800b988:	2001f3f4 	.word	0x2001f3f4
 800b98c:	40026028 	.word	0x40026028
 800b990:	2001f538 	.word	0x2001f538
 800b994:	40026058 	.word	0x40026058

0800b998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b998:	b480      	push	{r7}
 800b99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b99c:	e7fe      	b.n	800b99c <NMI_Handler+0x4>

0800b99e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b9a2:	e7fe      	b.n	800b9a2 <HardFault_Handler+0x4>

0800b9a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b9a8:	e7fe      	b.n	800b9a8 <MemManage_Handler+0x4>

0800b9aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b9ae:	e7fe      	b.n	800b9ae <BusFault_Handler+0x4>

0800b9b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b9b4:	e7fe      	b.n	800b9b4 <UsageFault_Handler+0x4>

0800b9b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b9ba:	bf00      	nop
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b9c8:	f001 fb9c 	bl	800d104 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800b9cc:	f005 f95a 	bl	8010c84 <xTaskGetSchedulerState>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d001      	beq.n	800b9da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800b9d6:	f005 fd2d 	bl	8011434 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b9da:	bf00      	nop
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800b9e4:	4802      	ldr	r0, [pc, #8]	; (800b9f0 <DMA1_Stream1_IRQHandler+0x10>)
 800b9e6:	f001 ffb1 	bl	800d94c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800b9ea:	bf00      	nop
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	2001f3f4 	.word	0x2001f3f4

0800b9f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800b9f8:	4802      	ldr	r0, [pc, #8]	; (800ba04 <DMA1_Stream3_IRQHandler+0x10>)
 800b9fa:	f001 ffa7 	bl	800d94c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800b9fe:	bf00      	nop
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	2001f538 	.word	0x2001f538

0800ba08 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ba0c:	4802      	ldr	r0, [pc, #8]	; (800ba18 <ADC_IRQHandler+0x10>)
 800ba0e:	f001 fc48 	bl	800d2a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800ba12:	bf00      	nop
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	2001f5f8 	.word	0x2001f5f8

0800ba1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ba20:	4802      	ldr	r0, [pc, #8]	; (800ba2c <USART1_IRQHandler+0x10>)
 800ba22:	f003 fbab 	bl	800f17c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ba26:	bf00      	nop
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2001f6a0 	.word	0x2001f6a0

0800ba30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ba34:	4802      	ldr	r0, [pc, #8]	; (800ba40 <USART3_IRQHandler+0x10>)
 800ba36:	f003 fba1 	bl	800f17c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ba3a:	bf00      	nop
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	2001f454 	.word	0x2001f454

0800ba44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ba48:	4802      	ldr	r0, [pc, #8]	; (800ba54 <TIM7_IRQHandler+0x10>)
 800ba4a:	f002 ff44 	bl	800e8d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ba4e:	bf00      	nop
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	2001f764 	.word	0x2001f764

0800ba58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800ba5c:	4802      	ldr	r0, [pc, #8]	; (800ba68 <DMA2_Stream2_IRQHandler+0x10>)
 800ba5e:	f001 ff75 	bl	800d94c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ba62:	bf00      	nop
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	2001f640 	.word	0x2001f640

0800ba6c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800ba70:	4802      	ldr	r0, [pc, #8]	; (800ba7c <DMA2_Stream7_IRQHandler+0x10>)
 800ba72:	f001 ff6b 	bl	800d94c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800ba76:	bf00      	nop
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	2001f598 	.word	0x2001f598

0800ba80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ba88:	4a14      	ldr	r2, [pc, #80]	; (800badc <_sbrk+0x5c>)
 800ba8a:	4b15      	ldr	r3, [pc, #84]	; (800bae0 <_sbrk+0x60>)
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ba94:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <_sbrk+0x64>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ba9c:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <_sbrk+0x64>)
 800ba9e:	4a12      	ldr	r2, [pc, #72]	; (800bae8 <_sbrk+0x68>)
 800baa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800baa2:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <_sbrk+0x64>)
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4413      	add	r3, r2
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	429a      	cmp	r2, r3
 800baae:	d207      	bcs.n	800bac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bab0:	f007 f9ae 	bl	8012e10 <__errno>
 800bab4:	4602      	mov	r2, r0
 800bab6:	230c      	movs	r3, #12
 800bab8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800baba:	f04f 33ff 	mov.w	r3, #4294967295
 800babe:	e009      	b.n	800bad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bac0:	4b08      	ldr	r3, [pc, #32]	; (800bae4 <_sbrk+0x64>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bac6:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <_sbrk+0x64>)
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4413      	add	r3, r2
 800bace:	4a05      	ldr	r2, [pc, #20]	; (800bae4 <_sbrk+0x64>)
 800bad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bad2:	68fb      	ldr	r3, [r7, #12]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3718      	adds	r7, #24
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20040000 	.word	0x20040000
 800bae0:	00000800 	.word	0x00000800
 800bae4:	20015a80 	.word	0x20015a80
 800bae8:	2001f7f0 	.word	0x2001f7f0

0800baec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800baf0:	4b08      	ldr	r3, [pc, #32]	; (800bb14 <SystemInit+0x28>)
 800baf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf6:	4a07      	ldr	r2, [pc, #28]	; (800bb14 <SystemInit+0x28>)
 800baf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bafc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bb00:	4b04      	ldr	r3, [pc, #16]	; (800bb14 <SystemInit+0x28>)
 800bb02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bb06:	609a      	str	r2, [r3, #8]
#endif
}
 800bb08:	bf00      	nop
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	e000ed00 	.word	0xe000ed00

0800bb18 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b087      	sub	sp, #28
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bb2a:	2320      	movs	r3, #32
 800bb2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb2e:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800bb32:	e00b      	b.n	800bb4c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800bb34:	4a0c      	ldr	r2, [pc, #48]	; (800bb68 <SCB_InvalidateDCache_by_Addr+0x50>)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	4413      	add	r3, r2
 800bb42:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	dcf0      	bgt.n	800bb34 <SCB_InvalidateDCache_by_Addr+0x1c>
 800bb52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bb56:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800bb5a:	bf00      	nop
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	e000ed00 	.word	0xe000ed00

0800bb6c <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bb7e:	2320      	movs	r3, #32
 800bb80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb82:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800bb86:	e00b      	b.n	800bba0 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 800bb88:	4a0c      	ldr	r2, [pc, #48]	; (800bbbc <SCB_CleanDCache_by_Addr+0x50>)
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	4413      	add	r3, r2
 800bb96:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	dcf0      	bgt.n	800bb88 <SCB_CleanDCache_by_Addr+0x1c>
 800bba6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bbaa:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800bbae:	bf00      	nop
 800bbb0:	371c      	adds	r7, #28
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	e000ed00 	.word	0xe000ed00

0800bbc0 <Msg_GetSrc>:
static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, etrACIS },
    {{0},{0},{0},{0},{0},{0}, &huart3, etrPC },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	71fb      	strb	r3, [r7, #7]
 800bbca:	79fb      	ldrb	r3, [r7, #7]
 800bbcc:	f003 0307 	and.w	r3, r3, #7
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	71fb      	strb	r3, [r7, #7]
 800bbe6:	79fb      	ldrb	r3, [r7, #7]
 800bbe8:	08db      	lsrs	r3, r3, #3
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	f003 0307 	and.w	r3, r3, #7
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f003 031f 	and.w	r3, r3, #31
 800bc0c:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d105      	bne.n	800bc20 <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff ff7d 	bl	800bb18 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800bc1e:	e009      	b.n	800bc34 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	4618      	mov	r0, r3
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	4619      	mov	r1, r3
 800bc30:	f7ff ff72 	bl	800bb18 <SCB_InvalidateDCache_by_Addr>
}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f003 031f 	and.w	r3, r3, #31
 800bc4c:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d105      	bne.n	800bc60 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff ff87 	bl	800bb6c <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 800bc5e:	e009      	b.n	800bc74 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	4618      	mov	r0, r3
 800bc68:	683a      	ldr	r2, [r7, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	4619      	mov	r1, r3
 800bc70:	f7ff ff7c 	bl	800bb6c <SCB_CleanDCache_by_Addr>
}
 800bc74:	bf00      	nop
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 800bc82:	4b19      	ldr	r3, [pc, #100]	; (800bce8 <calculatePacketId+0x6c>)
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	3301      	adds	r3, #1
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	4b17      	ldr	r3, [pc, #92]	; (800bce8 <calculatePacketId+0x6c>)
 800bc8c:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 800bc8e:	4b16      	ldr	r3, [pc, #88]	; (800bce8 <calculatePacketId+0x6c>)
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 800bc94:	4b15      	ldr	r3, [pc, #84]	; (800bcec <calculatePacketId+0x70>)
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 800bc9a:	89fb      	ldrh	r3, [r7, #14]
 800bc9c:	0a1b      	lsrs	r3, r3, #8
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	703b      	strb	r3, [r7, #0]
 800bca4:	89fb      	ldrh	r3, [r7, #14]
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	707b      	strb	r3, [r7, #1]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	0e1b      	lsrs	r3, r3, #24
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	70bb      	strb	r3, [r7, #2]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	0c1b      	lsrs	r3, r3, #16
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	70fb      	strb	r3, [r7, #3]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	0a1b      	lsrs	r3, r3, #8
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	713b      	strb	r3, [r7, #4]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 800bcc8:	463b      	mov	r3, r7
 800bcca:	2106      	movs	r1, #6
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fd fecb 	bl	8009a68 <CRC16_Generate>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 800bcd6:	88fb      	ldrh	r3, [r7, #6]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0d2      	beq.n	800bc82 <calculatePacketId+0x6>
  return returnvalue;
 800bcdc:	88fb      	ldrh	r3, [r7, #6]

}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20015a90 	.word	0x20015a90
 800bcec:	40000c00 	.word	0x40000c00

0800bcf0 <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	460b      	mov	r3, r1
 800bd00:	80fb      	strh	r3, [r7, #6]
 800bd02:	4613      	mov	r3, r2
 800bd04:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 8106 	beq.w	800bf1a <packager+0x22a>
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800bd14:	f080 8101 	bcs.w	800bf1a <packager+0x22a>
    {
        uint16_t aCrc15 = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <packager+0x3a>
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	330a      	adds	r3, #10
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	e000      	b.n	800bd2c <packager+0x3c>
 800bd2a:	2308      	movs	r3, #8
 800bd2c:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = ( etrCTRL | ( xChaDest << 3 ) ) & HEADER_MASK_BITS;
 800bd2e:	797b      	ldrb	r3, [r7, #5]
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	b25b      	sxtb	r3, r3
 800bd34:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800bd38:	b25b      	sxtb	r3, r3
 800bd3a:	f043 0303 	orr.w	r3, r3, #3
 800bd3e:	b25b      	sxtb	r3, r3
 800bd40:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800bd48:	2255      	movs	r2, #85	; 0x55
 800bd4a:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	f241 0381 	movw	r3, #4225	; 0x1081
 800bd52:	4413      	add	r3, r2
 800bd54:	2255      	movs	r2, #85	; 0x55
 800bd56:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	f241 0382 	movw	r3, #4226	; 0x1082
 800bd5e:	4413      	add	r3, r2
 800bd60:	7cfa      	ldrb	r2, [r7, #19]
 800bd62:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 800bd64:	8abb      	ldrh	r3, [r7, #20]
 800bd66:	b2d9      	uxtb	r1, r3
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	f241 0383 	movw	r3, #4227	; 0x1083
 800bd6e:	4413      	add	r3, r2
 800bd70:	460a      	mov	r2, r1
 800bd72:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 800bd74:	8abb      	ldrh	r3, [r7, #20]
 800bd76:	0a1b      	lsrs	r3, r3, #8
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	b2d9      	uxtb	r1, r3
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	f241 0384 	movw	r3, #4228	; 0x1084
 800bd82:	4413      	add	r3, r2
 800bd84:	460a      	mov	r2, r1
 800bd86:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 800bd88:	8c3b      	ldrh	r3, [r7, #32]
 800bd8a:	b2d9      	uxtb	r1, r3
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	f241 0385 	movw	r3, #4229	; 0x1085
 800bd92:	4413      	add	r3, r2
 800bd94:	460a      	mov	r2, r1
 800bd96:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 800bd98:	8c3b      	ldrh	r3, [r7, #32]
 800bd9a:	0a1b      	lsrs	r3, r3, #8
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	b2d9      	uxtb	r1, r3
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	f241 0386 	movw	r3, #4230	; 0x1086
 800bda6:	4413      	add	r3, r2
 800bda8:	460a      	mov	r2, r1
 800bdaa:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800bdb2:	2107      	movs	r1, #7
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fd fe8f 	bl	8009ad8 <CRC8_Generate>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	f241 0387 	movw	r3, #4231	; 0x1087
 800bdc4:	4413      	add	r3, r2
 800bdc6:	460a      	mov	r2, r1
 800bdc8:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 800bdca:	88fb      	ldrh	r3, [r7, #6]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d013      	beq.n	800bdf8 <packager+0x108>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	f241 0388 	movw	r3, #4232	; 0x1088
 800bdd6:	4413      	add	r3, r2
 800bdd8:	88fa      	ldrh	r2, [r7, #6]
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f007 f841 	bl	8012e64 <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 800bde8:	88fb      	ldrh	r3, [r7, #6]
 800bdea:	3308      	adds	r3, #8
 800bdec:	4619      	mov	r1, r3
 800bdee:	4610      	mov	r0, r2
 800bdf0:	f7fd fe3a 	bl	8009a68 <CRC16_Generate>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	f241 3388 	movw	r3, #5000	; 0x1388
 800be02:	4413      	add	r3, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f001 f909 	bl	800d01c <protIsSome>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d149      	bne.n	800bea4 <packager+0x1b4>
        {
          taskENTER_CRITICAL();
 800be10:	f005 faa0 	bl	8011354 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800be1a:	4413      	add	r3, r2
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d13d      	bne.n	800bea0 <packager+0x1b0>
          {
            xHandle->TxBusy = 1;
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800be2a:	4413      	add	r3, r2
 800be2c:	2201      	movs	r2, #1
 800be2e:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800be30:	2301      	movs	r3, #1
 800be32:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800be34:	f005 fab4 	bl	80113a0 <vPortExitCritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 7040 	add.w	r0, r3, #768	; 0x300
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800be44:	2208      	movs	r2, #8
 800be46:	4619      	mov	r1, r3
 800be48:	f007 f80c 	bl	8012e64 <memcpy>
            if (xMsgLen) {
 800be4c:	88fb      	ldrh	r3, [r7, #6]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d012      	beq.n	800be78 <packager+0x188>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f503 7042 	add.w	r0, r3, #776	; 0x308
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	f241 0388 	movw	r3, #4232	; 0x1088
 800be5e:	4413      	add	r3, r2
 800be60:	88fa      	ldrh	r2, [r7, #6]
 800be62:	4619      	mov	r1, r3
 800be64:	f006 fffe 	bl	8012e64 <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 800be68:	88fb      	ldrh	r3, [r7, #6]
 800be6a:	3308      	adds	r3, #8
 800be6c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	4413      	add	r3, r2
 800be74:	8a3a      	ldrh	r2, [r7, #16]
 800be76:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800be7e:	8aba      	ldrh	r2, [r7, #20]
 800be80:	4611      	mov	r1, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff feda 	bl	800bc3c <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800be8e:	6818      	ldr	r0, [r3, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800be96:	8aba      	ldrh	r2, [r7, #20]
 800be98:	4619      	mov	r1, r3
 800be9a:	f003 f87b 	bl	800ef94 <HAL_UART_Transmit_DMA>
 800be9e:	e001      	b.n	800bea4 <packager+0x1b4>
          }
          else taskEXIT_CRITICAL();
 800bea0:	f005 fa7e 	bl	80113a0 <vPortExitCritical>
        }

        if(!handled)
 800bea4:	7dfb      	ldrb	r3, [r7, #23]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d137      	bne.n	800bf1a <packager+0x22a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	f241 339c 	movw	r3, #5020	; 0x139c
 800beb0:	4413      	add	r3, r2
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f04f 31ff 	mov.w	r1, #4294967295
 800beb8:	4618      	mov	r0, r3
 800beba:	f004 f93f 	bl	801013c <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	f241 3388 	movw	r3, #5000	; 0x1388
 800bec4:	4413      	add	r3, r2
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 800becc:	2208      	movs	r2, #8
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 f830 	bl	800cf34 <protPushSequence>
          if (xMsgLen) {
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d015      	beq.n	800bf06 <packager+0x216>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	f241 3388 	movw	r3, #5000	; 0x1388
 800bee0:	4413      	add	r3, r2
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	f241 0188 	movw	r1, #4232	; 0x1088
 800bee8:	4411      	add	r1, r2
 800beea:	88fa      	ldrh	r2, [r7, #6]
 800beec:	4618      	mov	r0, r3
 800beee:	f001 f821 	bl	800cf34 <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	f241 3388 	movw	r3, #5000	; 0x1388
 800bef8:	4413      	add	r3, r2
 800befa:	f107 0110 	add.w	r1, r7, #16
 800befe:	2202      	movs	r2, #2
 800bf00:	4618      	mov	r0, r3
 800bf02:	f001 f817 	bl	800cf34 <protPushSequence>
          }
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	f241 339c 	movw	r3, #5020	; 0x139c
 800bf0c:	4413      	add	r3, r2
 800bf0e:	6818      	ldr	r0, [r3, #0]
 800bf10:	2300      	movs	r3, #0
 800bf12:	2200      	movs	r2, #0
 800bf14:	2100      	movs	r1, #0
 800bf16:	f003 ff01 	bl	800fd1c <xQueueGenericSend>
        }
    }
}
 800bf1a:	bf00      	nop
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	807b      	strh	r3, [r7, #2]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 8089 	beq.w	800c04c <acker+0x12a>
    {
        uint16_t aTotLen = 8;
 800bf3a:	2308      	movs	r3, #8
 800bf3c:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrCTRL | ( xChaDest << 3 ) ) | HEADER_ACK_BIT) & HEADER_MASK_BITS;
 800bf3e:	787b      	ldrb	r3, [r7, #1]
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	b25b      	sxtb	r3, r3
 800bf44:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	f043 0303 	orr.w	r3, r3, #3
 800bf4e:	b25b      	sxtb	r3, r3
 800bf50:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 800bf52:	2355      	movs	r3, #85	; 0x55
 800bf54:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 800bf56:	2355      	movs	r3, #85	; 0x55
 800bf58:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 800bf5a:	7cfb      	ldrb	r3, [r7, #19]
 800bf5c:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 800bf5e:	8abb      	ldrh	r3, [r7, #20]
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 800bf64:	8abb      	ldrh	r3, [r7, #20]
 800bf66:	0a1b      	lsrs	r3, r3, #8
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 800bf6e:	887b      	ldrh	r3, [r7, #2]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 800bf74:	887b      	ldrh	r3, [r7, #2]
 800bf76:	0a1b      	lsrs	r3, r3, #8
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 800bf7e:	f107 0308 	add.w	r3, r7, #8
 800bf82:	2107      	movs	r1, #7
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fd fda7 	bl	8009ad8 <CRC8_Generate>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	f241 3388 	movw	r3, #5000	; 0x1388
 800bf98:	4413      	add	r3, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f001 f83e 	bl	800d01c <protIsSome>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d131      	bne.n	800c00a <acker+0xe8>
        {
          taskENTER_CRITICAL();
 800bfa6:	f005 f9d5 	bl	8011354 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800bfb0:	4413      	add	r3, r2
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d125      	bne.n	800c006 <acker+0xe4>
          {
            xHandle->TxBusy = 1;
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800bfc0:	4413      	add	r3, r2
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	701a      	strb	r2, [r3, #0]
            handled = 1;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 800bfca:	f005 f9e9 	bl	80113a0 <vPortExitCritical>
            memcpy(xHandle->BufTx,header,8);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	cb03      	ldmia	r3!, {r0, r1}
 800bfdc:	6010      	str	r0, [r2, #0]
 800bfde:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bfe6:	2108      	movs	r1, #8
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7ff fe27 	bl	800bc3c <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800bff4:	6818      	ldr	r0, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bffc:	2208      	movs	r2, #8
 800bffe:	4619      	mov	r1, r3
 800c000:	f002 ffc8 	bl	800ef94 <HAL_UART_Transmit_DMA>
 800c004:	e001      	b.n	800c00a <acker+0xe8>
          }
          else taskEXIT_CRITICAL();
 800c006:	f005 f9cb 	bl	80113a0 <vPortExitCritical>
        }

        if(!handled)
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d11d      	bne.n	800c04c <acker+0x12a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	f241 339c 	movw	r3, #5020	; 0x139c
 800c016:	4413      	add	r3, r2
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f04f 31ff 	mov.w	r1, #4294967295
 800c01e:	4618      	mov	r0, r3
 800c020:	f004 f88c 	bl	801013c <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,header,8);
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	f241 3388 	movw	r3, #5000	; 0x1388
 800c02a:	4413      	add	r3, r2
 800c02c:	f107 0108 	add.w	r1, r7, #8
 800c030:	2208      	movs	r2, #8
 800c032:	4618      	mov	r0, r3
 800c034:	f000 ff7e 	bl	800cf34 <protPushSequence>
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	f241 339c 	movw	r3, #5020	; 0x139c
 800c03e:	4413      	add	r3, r2
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	2300      	movs	r3, #0
 800c044:	2200      	movs	r2, #0
 800c046:	2100      	movs	r1, #0
 800c048:	f003 fe68 	bl	800fd1c <xQueueGenericSend>
        }
    }
}
 800c04c:	bf00      	nop
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b08a      	sub	sp, #40	; 0x28
 800c058:	af02      	add	r7, sp, #8
 800c05a:	4603      	mov	r3, r0
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 800c062:	4b4d      	ldr	r3, [pc, #308]	; (800c198 <xSender+0x144>)
 800c064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c066:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = NULL;
 800c068:	2300      	movs	r3, #0
 800c06a:	61fb      	str	r3, [r7, #28]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c06c:	2300      	movs	r3, #0
 800c06e:	61bb      	str	r3, [r7, #24]
 800c070:	e019      	b.n	800c0a6 <xSender+0x52>
  {
    if(xHandles[i].xChannel == xChaDest)
 800c072:	4a4a      	ldr	r2, [pc, #296]	; (800c19c <xSender+0x148>)
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	f241 31d4 	movw	r1, #5076	; 0x13d4
 800c07a:	fb01 f303 	mul.w	r3, r1, r3
 800c07e:	441a      	add	r2, r3
 800c080:	f241 3384 	movw	r3, #4996	; 0x1384
 800c084:	4413      	add	r3, r2
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	7bfa      	ldrb	r2, [r7, #15]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d108      	bne.n	800c0a0 <xSender+0x4c>
    {
      handle = &xHandles[i];
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c094:	fb02 f303 	mul.w	r3, r2, r3
 800c098:	4a40      	ldr	r2, [pc, #256]	; (800c19c <xSender+0x148>)
 800c09a:	4413      	add	r3, r2
 800c09c:	61fb      	str	r3, [r7, #28]
      break;
 800c09e:	e005      	b.n	800c0ac <xSender+0x58>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	61bb      	str	r3, [r7, #24]
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d9e2      	bls.n	800c072 <xSender+0x1e>
    }
  }

  if(handle)
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d06c      	beq.n	800c18c <xSender+0x138>
  {
    taskENTER_CRITICAL();
 800c0b2:	f005 f94f 	bl	8011354 <vPortEnterCritical>
    if(NeedAckPacket)
 800c0b6:	4b3a      	ldr	r3, [pc, #232]	; (800c1a0 <xSender+0x14c>)
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d045      	beq.n	800c14c <xSender+0xf8>
    {
      if(ReceivedAckPacket)
 800c0c0:	4b38      	ldr	r3, [pc, #224]	; (800c1a4 <xSender+0x150>)
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d009      	beq.n	800c0de <xSender+0x8a>
      {
        NeedAckPacket = 0;
 800c0ca:	4b35      	ldr	r3, [pc, #212]	; (800c1a0 <xSender+0x14c>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 800c0d0:	4b35      	ldr	r3, [pc, #212]	; (800c1a8 <xSender+0x154>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 800c0d6:	f005 f963 	bl	80113a0 <vPortExitCritical>
        return 1;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e057      	b.n	800c18e <xSender+0x13a>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 800c0de:	4b33      	ldr	r3, [pc, #204]	; (800c1ac <xSender+0x158>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6978      	ldr	r0, [r7, #20]
 800c0e6:	f7fd fdb9 	bl	8009c5c <DelayDiff>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	f241 3388 	movw	r3, #5000	; 0x1388
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d928      	bls.n	800c146 <xSender+0xf2>
        {
          if(RetriesPacket > RETRIES_MAX)
 800c0f4:	4b2e      	ldr	r3, [pc, #184]	; (800c1b0 <xSender+0x15c>)
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	2b14      	cmp	r3, #20
 800c0fc:	d90a      	bls.n	800c114 <xSender+0xc0>
          {
            NeedAckPacket = 0;
 800c0fe:	4b28      	ldr	r3, [pc, #160]	; (800c1a0 <xSender+0x14c>)
 800c100:	2200      	movs	r2, #0
 800c102:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 800c104:	4b28      	ldr	r3, [pc, #160]	; (800c1a8 <xSender+0x154>)
 800c106:	2200      	movs	r2, #0
 800c108:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 800c10a:	f005 f949 	bl	80113a0 <vPortExitCritical>
            return -1;
 800c10e:	f04f 33ff 	mov.w	r3, #4294967295
 800c112:	e03c      	b.n	800c18e <xSender+0x13a>
          }
          LastNotAckedTime = now;
 800c114:	4a25      	ldr	r2, [pc, #148]	; (800c1ac <xSender+0x158>)
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 800c11a:	4b25      	ldr	r3, [pc, #148]	; (800c1b0 <xSender+0x15c>)
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	b29b      	uxth	r3, r3
 800c120:	3301      	adds	r3, #1
 800c122:	b29a      	uxth	r2, r3
 800c124:	4b22      	ldr	r3, [pc, #136]	; (800c1b0 <xSender+0x15c>)
 800c126:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 800c128:	f005 f93a 	bl	80113a0 <vPortExitCritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	b29a      	uxth	r2, r3
 800c130:	4b1d      	ldr	r3, [pc, #116]	; (800c1a8 <xSender+0x154>)
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	b29b      	uxth	r3, r3
 800c136:	7bf9      	ldrb	r1, [r7, #15]
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	460b      	mov	r3, r1
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	69f8      	ldr	r0, [r7, #28]
 800c140:	f7ff fdd6 	bl	800bcf0 <packager>
 800c144:	e022      	b.n	800c18c <xSender+0x138>
        }
        else taskEXIT_CRITICAL();
 800c146:	f005 f92b 	bl	80113a0 <vPortExitCritical>
 800c14a:	e01f      	b.n	800c18c <xSender+0x138>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 800c14c:	4b15      	ldr	r3, [pc, #84]	; (800c1a4 <xSender+0x150>)
 800c14e:	2200      	movs	r2, #0
 800c150:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 800c152:	4b13      	ldr	r3, [pc, #76]	; (800c1a0 <xSender+0x14c>)
 800c154:	2201      	movs	r2, #1
 800c156:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 800c158:	4a14      	ldr	r2, [pc, #80]	; (800c1ac <xSender+0x158>)
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 800c15e:	4b14      	ldr	r3, [pc, #80]	; (800c1b0 <xSender+0x15c>)
 800c160:	2200      	movs	r2, #0
 800c162:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800c164:	f005 f91c 	bl	80113a0 <vPortExitCritical>
      NeededAckPacketId = calculatePacketId();
 800c168:	f7ff fd88 	bl	800bc7c <calculatePacketId>
 800c16c:	4603      	mov	r3, r0
 800c16e:	461a      	mov	r2, r3
 800c170:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <xSender+0x154>)
 800c172:	801a      	strh	r2, [r3, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	b29a      	uxth	r2, r3
 800c178:	4b0b      	ldr	r3, [pc, #44]	; (800c1a8 <xSender+0x154>)
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	7bf9      	ldrb	r1, [r7, #15]
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	460b      	mov	r3, r1
 800c184:	68b9      	ldr	r1, [r7, #8]
 800c186:	69f8      	ldr	r0, [r7, #28]
 800c188:	f7ff fdb2 	bl	800bcf0 <packager>
    }
  }
  return 0;
 800c18c:	2300      	movs	r3, #0

}
 800c18e:	4618      	mov	r0, r3
 800c190:	3720      	adds	r7, #32
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	40000c00 	.word	0x40000c00
 800c19c:	200004e0 	.word	0x200004e0
 800c1a0:	20015a86 	.word	0x20015a86
 800c1a4:	200004d8 	.word	0x200004d8
 800c1a8:	20015a88 	.word	0x20015a88
 800c1ac:	20015a8c 	.word	0x20015a8c
 800c1b0:	20015a84 	.word	0x20015a84

0800c1b4 <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08c      	sub	sp, #48	; 0x30
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	70fb      	strb	r3, [r7, #3]

	uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
	sGetterHandle * hDest = NULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ca:	e019      	b.n	800c200 <parser+0x4c>
  {
    if(xHandles[i].xChannel == xChaSrc)
 800c1cc:	4aa8      	ldr	r2, [pc, #672]	; (800c470 <parser+0x2bc>)
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	f241 31d4 	movw	r1, #5076	; 0x13d4
 800c1d4:	fb01 f303 	mul.w	r3, r1, r3
 800c1d8:	441a      	add	r2, r3
 800c1da:	f241 3384 	movw	r3, #4996	; 0x1384
 800c1de:	4413      	add	r3, r2
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	78fa      	ldrb	r2, [r7, #3]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d108      	bne.n	800c1fa <parser+0x46>
    {
      hDest = &xHandles[i];
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c1ee:	fb02 f303 	mul.w	r3, r2, r3
 800c1f2:	4a9f      	ldr	r2, [pc, #636]	; (800c470 <parser+0x2bc>)
 800c1f4:	4413      	add	r3, r2
 800c1f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800c1f8:	e005      	b.n	800c206 <parser+0x52>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	2b01      	cmp	r3, #1
 800c204:	d9e2      	bls.n	800c1cc <parser+0x18>
    }
  }


    switch (xChaDest) {
 800c206:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	f2c0 8112 	blt.w	800c434 <parser+0x280>
 800c210:	2b02      	cmp	r3, #2
 800c212:	f340 808e 	ble.w	800c332 <parser+0x17e>
 800c216:	2b03      	cmp	r3, #3
 800c218:	f040 810c 	bne.w	800c434 <parser+0x280>

        case etrCTRL:
        {
            if (xDataLen)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d04f      	beq.n	800c2c2 <parser+0x10e>
            {
                for(int i = 0; i < 8; i++)
 800c222:	2300      	movs	r3, #0
 800c224:	623b      	str	r3, [r7, #32]
 800c226:	e00a      	b.n	800c23e <parser+0x8a>
                  protPull(xFifo, &header[i]);
 800c228:	f107 0210 	add.w	r2, r7, #16
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	4413      	add	r3, r2
 800c230:	4619      	mov	r1, r3
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 feba 	bl	800cfac <protPull>
                for(int i = 0; i < 8; i++)
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	3301      	adds	r3, #1
 800c23c:	623b      	str	r3, [r7, #32]
 800c23e:	6a3b      	ldr	r3, [r7, #32]
 800c240:	2b07      	cmp	r3, #7
 800c242:	ddf1      	ble.n	800c228 <parser+0x74>

                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800c244:	2300      	movs	r3, #0
 800c246:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c248:	e010      	b.n	800c26c <parser+0xb8>
                {
                  protPull(xFifo, &data);
 800c24a:	f107 0319 	add.w	r3, r7, #25
 800c24e:	4619      	mov	r1, r3
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f000 feab 	bl	800cfac <protPull>
                  hDest->BufParser[aCount]=data;
 800c256:	7e79      	ldrb	r1, [r7, #25]
 800c258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800c262:	460a      	mov	r2, r1
 800c264:	701a      	strb	r2, [r3, #0]
                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	3301      	adds	r3, #1
 800c26a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3b0a      	subs	r3, #10
 800c270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c272:	429a      	cmp	r2, r3
 800c274:	d3e9      	bcc.n	800c24a <parser+0x96>
                }
                protPull(xFifo, &data);
 800c276:	f107 0319 	add.w	r3, r7, #25
 800c27a:	4619      	mov	r1, r3
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f000 fe95 	bl	800cfac <protPull>
                protPull(xFifo, &data);
 800c282:	f107 0319 	add.w	r3, r7, #25
 800c286:	4619      	mov	r1, r3
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f000 fe8f 	bl	800cfac <protPull>

                hDest->BufParser[aCount]=0;
 800c28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	4413      	add	r3, r2
 800c294:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]

                if(hDest) acker(hDest,xPacketId,xChaSrc);
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d006      	beq.n	800c2b0 <parser+0xfc>
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	78fa      	ldrb	r2, [r7, #3]
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ac:	f7ff fe39 	bl	800bf22 <acker>

                acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 800c2b6:	78fb      	ldrb	r3, [r7, #3]
 800c2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fc fd4e 	bl	8008d5c <acis_parse_command>
                }
                taskEXIT_CRITICAL();

            }

            break;
 800c2c0:	e0d2      	b.n	800c468 <parser+0x2b4>
                for (aCount = 0; aCount < 8; aCount++)
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2c6:	e013      	b.n	800c2f0 <parser+0x13c>
                  for(int i = 0; i < 8; i++)
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e00a      	b.n	800c2e4 <parser+0x130>
                    protPull(xFifo, &header[i]);
 800c2ce:	f107 0210 	add.w	r2, r7, #16
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 fe67 	bl	800cfac <protPull>
                  for(int i = 0; i < 8; i++)
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	61fb      	str	r3, [r7, #28]
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2b07      	cmp	r3, #7
 800c2e8:	ddf1      	ble.n	800c2ce <parser+0x11a>
                for (aCount = 0; aCount < 8; aCount++)
 800c2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	2b07      	cmp	r3, #7
 800c2f4:	d9e8      	bls.n	800c2c8 <parser+0x114>
                taskENTER_CRITICAL();
 800c2f6:	f005 f82d 	bl	8011354 <vPortEnterCritical>
                if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 800c2fa:	4b5e      	ldr	r3, [pc, #376]	; (800c474 <parser+0x2c0>)
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	2b00      	cmp	r3, #0
 800c302:	d013      	beq.n	800c32c <parser+0x178>
 800c304:	4b5c      	ldr	r3, [pc, #368]	; (800c478 <parser+0x2c4>)
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00e      	beq.n	800c32c <parser+0x178>
 800c30e:	4b5a      	ldr	r3, [pc, #360]	; (800c478 <parser+0x2c4>)
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	b29b      	uxth	r3, r3
 800c314:	461a      	mov	r2, r3
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	4293      	cmp	r3, r2
 800c31a:	d107      	bne.n	800c32c <parser+0x178>
 800c31c:	4b57      	ldr	r3, [pc, #348]	; (800c47c <parser+0x2c8>)
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	b29b      	uxth	r3, r3
 800c322:	2b00      	cmp	r3, #0
 800c324:	d102      	bne.n	800c32c <parser+0x178>
                  ReceivedAckPacket = 1;
 800c326:	4b55      	ldr	r3, [pc, #340]	; (800c47c <parser+0x2c8>)
 800c328:	2201      	movs	r2, #1
 800c32a:	801a      	strh	r2, [r3, #0]
                taskEXIT_CRITICAL();
 800c32c:	f005 f838 	bl	80113a0 <vPortExitCritical>
            break;
 800c330:	e09a      	b.n	800c468 <parser+0x2b4>
        }

        case etrACIS:
        case etrPC:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b0a      	cmp	r3, #10
 800c336:	d902      	bls.n	800c33e <parser+0x18a>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	e000      	b.n	800c340 <parser+0x18c>
 800c33e:	2308      	movs	r3, #8
 800c340:	76bb      	strb	r3, [r7, #26]

          if(hDest)
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	2b00      	cmp	r3, #0
 800c346:	d075      	beq.n	800c434 <parser+0x280>
          {

            uint8_t handled = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	76fb      	strb	r3, [r7, #27]
            if(!protIsSome(&hDest->xTxFifo))
 800c34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c34e:	f241 3388 	movw	r3, #5000	; 0x1388
 800c352:	4413      	add	r3, r2
 800c354:	4618      	mov	r0, r3
 800c356:	f000 fe61 	bl	800d01c <protIsSome>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d13d      	bne.n	800c3dc <parser+0x228>
            {
              taskENTER_CRITICAL();
 800c360:	f004 fff8 	bl	8011354 <vPortEnterCritical>
              if(!hDest->TxBusy)
 800c364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c366:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800c36a:	4413      	add	r3, r2
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	d131      	bne.n	800c3d8 <parser+0x224>
              {
                hDest->TxBusy = 1;
 800c374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c376:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800c37a:	4413      	add	r3, r2
 800c37c:	2201      	movs	r2, #1
 800c37e:	701a      	strb	r2, [r3, #0]
                handled = 1;
 800c380:	2301      	movs	r3, #1
 800c382:	76fb      	strb	r3, [r7, #27]
                taskEXIT_CRITICAL();
 800c384:	f005 f80c 	bl	80113a0 <vPortExitCritical>

                for (aCount = 0; aCount < sCount; aCount++)
 800c388:	2300      	movs	r3, #0
 800c38a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c38c:	e00b      	b.n	800c3a6 <parser+0x1f2>
                {
                  protPull(xFifo, &hDest->BufTx[aCount]);
 800c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c390:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c396:	4413      	add	r3, r2
 800c398:	4619      	mov	r1, r3
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 fe06 	bl	800cfac <protPull>
                for (aCount = 0; aCount < sCount; aCount++)
 800c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3a6:	7ebb      	ldrb	r3, [r7, #26]
 800c3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d3ef      	bcc.n	800c38e <parser+0x1da>
                }

                CacheClean(hDest->BufTx, sCount);
 800c3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c3b4:	7eba      	ldrb	r2, [r7, #26]
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fc3f 	bl	800bc3c <CacheClean>
                HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 800c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c3c4:	6818      	ldr	r0, [r3, #0]
 800c3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c3cc:	7eba      	ldrb	r2, [r7, #26]
 800c3ce:	b292      	uxth	r2, r2
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	f002 fddf 	bl	800ef94 <HAL_UART_Transmit_DMA>
 800c3d6:	e001      	b.n	800c3dc <parser+0x228>
              }
              else taskEXIT_CRITICAL();
 800c3d8:	f004 ffe2 	bl	80113a0 <vPortExitCritical>
            }

            if(!handled)
 800c3dc:	7efb      	ldrb	r3, [r7, #27]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d141      	bne.n	800c466 <parser+0x2b2>
            {
              xSemaphoreTake(xFifo->info.globallock, portMAX_DELAY);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f003 fea6 	bl	801013c <xQueueSemaphoreTake>
              for (aCount = 0; aCount < sCount; aCount++)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3f4:	e012      	b.n	800c41c <parser+0x268>
              {
                protPull(xFifo, &data);
 800c3f6:	f107 0319 	add.w	r3, r7, #25
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f000 fdd5 	bl	800cfac <protPull>
                protPush(&hDest->xTxFifo, &data);
 800c402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c404:	f241 3388 	movw	r3, #5000	; 0x1388
 800c408:	4413      	add	r3, r2
 800c40a:	f107 0219 	add.w	r2, r7, #25
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f000 fdae 	bl	800cf72 <protPush>
              for (aCount = 0; aCount < sCount; aCount++)
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	3301      	adds	r3, #1
 800c41a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c41c:	7ebb      	ldrb	r3, [r7, #26]
 800c41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c420:	429a      	cmp	r2, r3
 800c422:	d3e8      	bcc.n	800c3f6 <parser+0x242>
              }
              xSemaphoreGive(xFifo->info.globallock);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6958      	ldr	r0, [r3, #20]
 800c428:	2300      	movs	r3, #0
 800c42a:	2200      	movs	r2, #0
 800c42c:	2100      	movs	r1, #0
 800c42e:	f003 fc75 	bl	800fd1c <xQueueGenericSend>
            }

            break;
 800c432:	e018      	b.n	800c466 <parser+0x2b2>
        }
        /* no break */

        default:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b0a      	cmp	r3, #10
 800c438:	d902      	bls.n	800c440 <parser+0x28c>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	e000      	b.n	800c442 <parser+0x28e>
 800c440:	2308      	movs	r3, #8
 800c442:	76bb      	strb	r3, [r7, #26]
          for (aCount = 0; aCount < sCount; aCount++)
 800c444:	2300      	movs	r3, #0
 800c446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c448:	e008      	b.n	800c45c <parser+0x2a8>
          {
            protPull(xFifo, &data);
 800c44a:	f107 0319 	add.w	r3, r7, #25
 800c44e:	4619      	mov	r1, r3
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f000 fdab 	bl	800cfac <protPull>
          for (aCount = 0; aCount < sCount; aCount++)
 800c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c458:	3301      	adds	r3, #1
 800c45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c45c:	7ebb      	ldrb	r3, [r7, #26]
 800c45e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c460:	429a      	cmp	r2, r3
 800c462:	d3f2      	bcc.n	800c44a <parser+0x296>
          }
          break;
 800c464:	e000      	b.n	800c468 <parser+0x2b4>
            break;
 800c466:	bf00      	nop
        }
    }
}
 800c468:	bf00      	nop
 800c46a:	3730      	adds	r7, #48	; 0x30
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	200004e0 	.word	0x200004e0
 800c474:	20015a86 	.word	0x20015a86
 800c478:	20015a88 	.word	0x20015a88
 800c47c:	200004d8 	.word	0x200004d8

0800c480 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	f107 030f 	add.w	r3, r7, #15
 800c48e:	461a      	mov	r2, r3
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fd99 	bl	800cfca <protLook>
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	e013      	b.n	800c4dc <countCRC8+0x3a>
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800c4ba:	4413      	add	r3, r2
 800c4bc:	68f9      	ldr	r1, [r7, #12]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7ff ffde 	bl	800c480 <lookByte>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800c4d2:	460a      	mov	r2, r1
 800c4d4:	701a      	strb	r2, [r3, #0]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b06      	cmp	r3, #6
 800c4e0:	d9e8      	bls.n	800c4b4 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800c4e8:	2107      	movs	r1, #7
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd faf4 	bl	8009ad8 <CRC8_Generate>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 800c4f4:	7afb      	ldrb	r3, [r7, #11]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	e013      	b.n	800c53a <countCRC16+0x3c>
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800c518:	4413      	add	r3, r2
 800c51a:	68f9      	ldr	r1, [r7, #12]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7ff ffaf 	bl	800c480 <lookByte>
 800c522:	4603      	mov	r3, r0
 800c524:	4619      	mov	r1, r3
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800c530:	460a      	mov	r2, r1
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	3b02      	subs	r3, #2
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	429a      	cmp	r2, r3
 800c542:	d3e6      	bcc.n	800c512 <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	3b02      	subs	r3, #2
 800c54e:	4619      	mov	r1, r3
 800c550:	4610      	mov	r0, r2
 800c552:	f7fd fa89 	bl	8009a68 <CRC16_Generate>
 800c556:	4603      	mov	r3, r0
 800c558:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 800c55a:	68bb      	ldr	r3, [r7, #8]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <Getter>:

static void Getter(sGetterHandle * handle)
{
 800c564:	b5b0      	push	{r4, r5, r7, lr}
 800c566:	b08c      	sub	sp, #48	; 0x30
 800c568:	af02      	add	r7, sp, #8
 800c56a:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800c576:	4413      	add	r3, r2
 800c578:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800c580:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	f241 33c4 	movw	r3, #5060	; 0x13c4
 800c588:	4413      	add	r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800c592:	4413      	add	r3, r2
 800c594:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d043      	beq.n	800c636 <Getter+0xd2>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 800c5ae:	6978      	ldr	r0, [r7, #20]
 800c5b0:	f000 fbb4 	bl	800cd1c <protGetSize>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	f200 80ad 	bhi.w	800c718 <Getter+0x1b4>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 800c5be:	69f9      	ldr	r1, [r7, #28]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff ff9c 	bl	800c4fe <countCRC16>
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	3b02      	subs	r3, #2
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6978      	ldr	r0, [r7, #20]
 800c5d0:	f7ff ff56 	bl	800c480 <lookByte>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	461d      	mov	r5, r3
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	4619      	mov	r1, r3
 800c5de:	6978      	ldr	r0, [r7, #20]
 800c5e0:	f7ff ff4e 	bl	800c480 <lookByte>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	021b      	lsls	r3, r3, #8
 800c5e8:	442b      	add	r3, r5
 800c5ea:	429c      	cmp	r4, r3
 800c5ec:	d11c      	bne.n	800c628 <Getter+0xc4>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800c5ee:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800c5f0:	2102      	movs	r1, #2
 800c5f2:	6978      	ldr	r0, [r7, #20]
 800c5f4:	f7ff ff44 	bl	800c480 <lookByte>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7ff fae0 	bl	800bbc0 <Msg_GetSrc>
 800c600:	4603      	mov	r3, r0
 800c602:	b2dd      	uxtb	r5, r3
 800c604:	2102      	movs	r1, #2
 800c606:	6978      	ldr	r0, [r7, #20]
 800c608:	f7ff ff3a 	bl	800c480 <lookByte>
 800c60c:	4603      	mov	r3, r0
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff fae4 	bl	800bbdc <Msg_GetDest>
 800c614:	4603      	mov	r3, r0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	462b      	mov	r3, r5
 800c61c:	69fa      	ldr	r2, [r7, #28]
 800c61e:	4621      	mov	r1, r4
 800c620:	6978      	ldr	r0, [r7, #20]
 800c622:	f7ff fdc7 	bl	800c1b4 <parser>
 800c626:	e001      	b.n	800c62c <Getter+0xc8>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 800c628:	2301      	movs	r3, #1
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 800c630:	2300      	movs	r3, #0
 800c632:	61fb      	str	r3, [r7, #28]
 800c634:	e070      	b.n	800c718 <Getter+0x1b4>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 800c636:	6978      	ldr	r0, [r7, #20]
 800c638:	f000 fb70 	bl	800cd1c <protGetSize>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b07      	cmp	r3, #7
 800c640:	d96a      	bls.n	800c718 <Getter+0x1b4>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 800c642:	2100      	movs	r1, #0
 800c644:	6978      	ldr	r0, [r7, #20]
 800c646:	f7ff ff1b 	bl	800c480 <lookByte>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b55      	cmp	r3, #85	; 0x55
 800c64e:	d161      	bne.n	800c714 <Getter+0x1b0>
 800c650:	2101      	movs	r1, #1
 800c652:	6978      	ldr	r0, [r7, #20]
 800c654:	f7ff ff14 	bl	800c480 <lookByte>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b55      	cmp	r3, #85	; 0x55
 800c65c:	d15a      	bne.n	800c714 <Getter+0x1b0>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7ff ff1f 	bl	800c4a2 <countCRC8>
 800c664:	4603      	mov	r3, r0
 800c666:	461c      	mov	r4, r3
 800c668:	2107      	movs	r1, #7
 800c66a:	6978      	ldr	r0, [r7, #20]
 800c66c:	f7ff ff08 	bl	800c480 <lookByte>
 800c670:	4603      	mov	r3, r0
 800c672:	429c      	cmp	r4, r3
 800c674:	d14a      	bne.n	800c70c <Getter+0x1a8>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 800c676:	2103      	movs	r1, #3
 800c678:	6978      	ldr	r0, [r7, #20]
 800c67a:	f7ff ff01 	bl	800c480 <lookByte>
 800c67e:	4603      	mov	r3, r0
 800c680:	461c      	mov	r4, r3
 800c682:	2104      	movs	r1, #4
 800c684:	6978      	ldr	r0, [r7, #20]
 800c686:	f7ff fefb 	bl	800c480 <lookByte>
 800c68a:	4603      	mov	r3, r0
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	4423      	add	r3, r4
 800c690:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 800c692:	2105      	movs	r1, #5
 800c694:	6978      	ldr	r0, [r7, #20]
 800c696:	f7ff fef3 	bl	800c480 <lookByte>
 800c69a:	4603      	mov	r3, r0
 800c69c:	b29c      	uxth	r4, r3
 800c69e:	2106      	movs	r1, #6
 800c6a0:	6978      	ldr	r0, [r7, #20]
 800c6a2:	f7ff feed 	bl	800c480 <lookByte>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	4423      	add	r3, r4
 800c6b0:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 800c6b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d026      	beq.n	800c706 <Getter+0x1a2>
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800c6be:	d222      	bcs.n	800c706 <Getter+0x1a2>
          {
              if (dataLen>10)
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	2b0a      	cmp	r3, #10
 800c6c4:	d902      	bls.n	800c6cc <Getter+0x168>
              {
                dataReceiving = 1;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 800c6ca:	e022      	b.n	800c712 <Getter+0x1ae>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800c6cc:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800c6ce:	2102      	movs	r1, #2
 800c6d0:	6978      	ldr	r0, [r7, #20]
 800c6d2:	f7ff fed5 	bl	800c480 <lookByte>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff fa71 	bl	800bbc0 <Msg_GetSrc>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	b2dd      	uxtb	r5, r3
 800c6e2:	2102      	movs	r1, #2
 800c6e4:	6978      	ldr	r0, [r7, #20]
 800c6e6:	f7ff fecb 	bl	800c480 <lookByte>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff fa75 	bl	800bbdc <Msg_GetDest>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	6978      	ldr	r0, [r7, #20]
 800c700:	f7ff fd58 	bl	800c1b4 <parser>
              if (dataLen>10)
 800c704:	e005      	b.n	800c712 <Getter+0x1ae>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 800c706:	2301      	movs	r3, #1
 800c708:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800c70a:	e005      	b.n	800c718 <Getter+0x1b4>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 800c70c:	2301      	movs	r3, #1
 800c70e:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800c710:	e002      	b.n	800c718 <Getter+0x1b4>
 800c712:	e001      	b.n	800c718 <Getter+0x1b4>
      }
      else { dataSkip=1; } // Wrong sync bytes
 800c714:	2301      	movs	r3, #1
 800c716:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <Getter+0x1c2>
  {
    protMoveRead(xFifo,dataSkip);
 800c71e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c720:	6978      	ldr	r0, [r7, #20]
 800c722:	f000 fc6a 	bl	800cffa <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	69ba      	ldr	r2, [r7, #24]
 800c72a:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	69fa      	ldr	r2, [r7, #28]
 800c730:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c736:	801a      	strh	r2, [r3, #0]
}
 800c738:	bf00      	nop
 800c73a:	3728      	adds	r7, #40	; 0x28
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bdb0      	pop	{r4, r5, r7, pc}

0800c740 <xDmaTxIrqHandler>:



void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  uint32_t length = 0;;
 800c748:	2300      	movs	r3, #0
 800c74a:	617b      	str	r3, [r7, #20]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c74c:	2300      	movs	r3, #0
 800c74e:	613b      	str	r3, [r7, #16]
 800c750:	e053      	b.n	800c7fa <xDmaTxIrqHandler+0xba>
  {
    handle = &xHandles[i];
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c758:	fb02 f303 	mul.w	r3, r2, r3
 800c75c:	4a2a      	ldr	r2, [pc, #168]	; (800c808 <xDmaTxIrqHandler+0xc8>)
 800c75e:	4413      	add	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]
    if(huart == handle->xUart)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d141      	bne.n	800c7f4 <xDmaTxIrqHandler+0xb4>
    {
      if(protIsSome(&handle->xTxFifo))
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	f241 3388 	movw	r3, #5000	; 0x1388
 800c776:	4413      	add	r3, r2
 800c778:	4618      	mov	r0, r3
 800c77a:	f000 fc4f 	bl	800d01c <protIsSome>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d030      	beq.n	800c7e6 <xDmaTxIrqHandler+0xa6>
      {
        handle->TxBusy = 1;
 800c784:	68fa      	ldr	r2, [r7, #12]
 800c786:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800c78a:	4413      	add	r3, r2
 800c78c:	2201      	movs	r2, #1
 800c78e:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800c790:	bf00      	nop
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	f241 3388 	movw	r3, #5000	; 0x1388
 800c798:	4413      	add	r3, r2
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	1c51      	adds	r1, r2, #1
 800c79e:	6179      	str	r1, [r7, #20]
 800c7a0:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800c7a4:	68f9      	ldr	r1, [r7, #12]
 800c7a6:	440a      	add	r2, r1
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 fbfe 	bl	800cfac <protPull>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d003      	beq.n	800c7be <xDmaTxIrqHandler+0x7e>
            && length < MAX_PACK_LEN);
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800c7bc:	d3e9      	bcc.n	800c792 <xDmaTxIrqHandler+0x52>
        CacheClean(handle->BufTx, length);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c7c4:	6979      	ldr	r1, [r7, #20]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff fa38 	bl	800bc3c <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	b292      	uxth	r2, r2
 800c7de:	4619      	mov	r1, r3
 800c7e0:	f002 fbd8 	bl	800ef94 <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 800c7e4:	e00c      	b.n	800c800 <xDmaTxIrqHandler+0xc0>
      else handle->TxBusy = 0;
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800c7ec:	4413      	add	r3, r2
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	701a      	strb	r2, [r3, #0]
      break;
 800c7f2:	e005      	b.n	800c800 <xDmaTxIrqHandler+0xc0>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	613b      	str	r3, [r7, #16]
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d9a8      	bls.n	800c752 <xDmaTxIrqHandler+0x12>
    }
  }
}
 800c800:	bf00      	nop
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	200004e0 	.word	0x200004e0

0800c80c <xDmaErIrqHandler>:

void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	e028      	b.n	800c86c <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c820:	fb02 f303 	mul.w	r3, r2, r3
 800c824:	4a15      	ldr	r2, [pc, #84]	; (800c87c <xDmaErIrqHandler+0x70>)
 800c826:	4413      	add	r3, r2
 800c828:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	429a      	cmp	r2, r3
 800c836:	d116      	bne.n	800c866 <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68b9      	ldr	r1, [r7, #8]
 800c842:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c846:	4618      	mov	r0, r3
 800c848:	f002 fbea 	bl	800f020 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c858:	4619      	mov	r1, r3
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800c860:	4413      	add	r3, r2
 800c862:	6019      	str	r1, [r3, #0]
      break;
 800c864:	e005      	b.n	800c872 <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d9d3      	bls.n	800c81a <xDmaErIrqHandler+0xe>
    }
  }
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	200004e0 	.word	0x200004e0

0800c880 <xFifosInit>:


void xFifosInit(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c886:	2300      	movs	r3, #0
 800c888:	607b      	str	r3, [r7, #4]
 800c88a:	e03f      	b.n	800c90c <xFifosInit+0x8c>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c892:	fb02 f203 	mul.w	r2, r2, r3
 800c896:	f241 3388 	movw	r3, #5000	; 0x1388
 800c89a:	4413      	add	r3, r2
 800c89c:	4a1f      	ldr	r2, [pc, #124]	; (800c91c <xFifosInit+0x9c>)
 800c89e:	1898      	adds	r0, r3, r2
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c8a6:	fb02 f303 	mul.w	r3, r2, r3
 800c8aa:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 800c8ae:	4a1b      	ldr	r2, [pc, #108]	; (800c91c <xFifosInit+0x9c>)
 800c8b0:	1899      	adds	r1, r3, r2
 800c8b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f000 fa4e 	bl	800cd58 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c8c2:	fb02 f303 	mul.w	r3, r2, r3
 800c8c6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800c8ca:	4a14      	ldr	r2, [pc, #80]	; (800c91c <xFifosInit+0x9c>)
 800c8cc:	4413      	add	r3, r2
 800c8ce:	1d18      	adds	r0, r3, #4
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c8d6:	fb02 f303 	mul.w	r3, r2, r3
 800c8da:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800c8de:	4a0f      	ldr	r2, [pc, #60]	; (800c91c <xFifosInit+0x9c>)
 800c8e0:	1899      	adds	r1, r3, r2
 800c8e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f000 fa36 	bl	800cd58 <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 800c8ec:	4a0b      	ldr	r2, [pc, #44]	; (800c91c <xFifosInit+0x9c>)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f241 31d4 	movw	r1, #5076	; 0x13d4
 800c8f4:	fb01 f303 	mul.w	r3, r1, r3
 800c8f8:	441a      	add	r2, r3
 800c8fa:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800c8fe:	4413      	add	r3, r2
 800c900:	f04f 32ff 	mov.w	r2, #4294967295
 800c904:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3301      	adds	r3, #1
 800c90a:	607b      	str	r3, [r7, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d9bc      	bls.n	800c88c <xFifosInit+0xc>
  }
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	200004e0 	.word	0x200004e0

0800c920 <xGetterInit>:

void xGetterInit(void)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c926:	2300      	movs	r3, #0
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	e026      	b.n	800c97a <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c932:	fb02 f303 	mul.w	r3, r2, r3
 800c936:	4a14      	ldr	r2, [pc, #80]	; (800c988 <xGetterInit+0x68>)
 800c938:	4413      	add	r3, r2
 800c93a:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	f44f 7140 	mov.w	r1, #768	; 0x300
 800c942:	4618      	mov	r0, r3
 800c944:	f7ff f97a 	bl	800bc3c <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	f44f 7240 	mov.w	r2, #768	; 0x300
 800c956:	4618      	mov	r0, r3
 800c958:	f002 fb62 	bl	800f020 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c968:	4619      	mov	r1, r3
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800c970:	4413      	add	r3, r2
 800c972:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	3301      	adds	r3, #1
 800c978:	607b      	str	r3, [r7, #4]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d9d5      	bls.n	800c92c <xGetterInit+0xc>
  }
}
 800c980:	bf00      	nop
 800c982:	3708      	adds	r7, #8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	200004e0 	.word	0x200004e0

0800c98c <xGetterLoop>:

void xGetterLoop(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b0e6      	sub	sp, #408	; 0x198
 800c990:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800c992:	2300      	movs	r3, #0
 800c994:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800c998:	e121      	b.n	800cbde <xGetterLoop+0x252>
  {
    handle = &xHandles[i];
 800c99a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800c99e:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800c9a2:	fb02 f303 	mul.w	r3, r2, r3
 800c9a6:	4a93      	ldr	r2, [pc, #588]	; (800cbf4 <xGetterLoop+0x268>)
 800c9a8:	4413      	add	r3, r2
 800c9aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 800c9ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c9b2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 800c9c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800c9c6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c9d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 800c9d4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800c9d8:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800c9dc:	4413      	add	r3, r2
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e4:	d107      	bne.n	800c9f6 <xGetterLoop+0x6a>
 800c9e6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800c9ea:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800c9f4:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 800c9f6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800c9fa:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800c9fe:	4413      	add	r3, r2
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d90e      	bls.n	800ca28 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 800ca0a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800ca0e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ca12:	1ad2      	subs	r2, r2, r3
 800ca14:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800ca18:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800ca1c:	440b      	add	r3, r1
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4413      	add	r3, r2
 800ca22:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800ca26:	e00a      	b.n	800ca3e <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 800ca28:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ca2c:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800ca30:	4413      	add	r3, r2
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 800ca3e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ca42:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800ca46:	d903      	bls.n	800ca50 <xGetterLoop+0xc4>
 800ca48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ca4c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 800ca50:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d050      	beq.n	800cafa <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 800ca58:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ca5c:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7ff f8cb 	bl	800bbfc <CacheInvalidate>
        for(i=0;i<length;i++)
 800ca66:	2300      	movs	r3, #0
 800ca68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800ca6c:	e034      	b.n	800cad8 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 800ca6e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ca72:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800ca76:	4413      	add	r3, r2
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ca84:	5cd1      	ldrb	r1, [r2, r3]
 800ca86:	1d3a      	adds	r2, r7, #4
 800ca88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800ca8c:	4413      	add	r3, r2
 800ca8e:	460a      	mov	r2, r1
 800ca90:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 800ca92:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800ca96:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800ca9a:	4413      	add	r3, r2
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d108      	bne.n	800cab4 <xGetterLoop+0x128>
 800caa2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800caa6:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800caaa:	4413      	add	r3, r2
 800caac:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	e00c      	b.n	800cace <xGetterLoop+0x142>
          else handle->RxPointer--;
 800cab4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800cab8:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800cabc:	4413      	add	r3, r2
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800cac6:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800caca:	440b      	add	r3, r1
 800cacc:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 800cace:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cad2:	3301      	adds	r3, #1
 800cad4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800cad8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cadc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d8c4      	bhi.n	800ca6e <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 800cae4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800cae8:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800caec:	4413      	add	r3, r2
 800caee:	1d39      	adds	r1, r7, #4
 800caf0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 fa1d 	bl	800cf34 <protPushSequence>
      }
    } while(length > 0);
 800cafa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f47f af55 	bne.w	800c9ae <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 800cb04:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800cb08:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800cb0c:	4413      	add	r3, r2
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 fa84 	bl	800d01c <protIsSome>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <xGetterLoop+0x196>
    {
      Getter(handle);
 800cb1a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800cb1e:	f7ff fd21 	bl	800c564 <Getter>
    }

    taskENTER_CRITICAL();
 800cb22:	f004 fc17 	bl	8011354 <vPortEnterCritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 800cb26:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800cb2a:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800cb2e:	4413      	add	r3, r2
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d14b      	bne.n	800cbd0 <xGetterLoop+0x244>
 800cb38:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800cb3c:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb40:	4413      	add	r3, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fa6a 	bl	800d01c <protIsSome>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d040      	beq.n	800cbd0 <xGetterLoop+0x244>
    {
      length = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 800cb54:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800cb58:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800cb5c:	4413      	add	r3, r2
 800cb5e:	2201      	movs	r2, #1
 800cb60:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800cb62:	f004 fc1d 	bl	80113a0 <vPortExitCritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800cb66:	bf00      	nop
 800cb68:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800cb6c:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb70:	4413      	add	r3, r2
 800cb72:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800cb76:	1c51      	adds	r1, r2, #1
 800cb78:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 800cb7c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800cb80:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800cb84:	440a      	add	r2, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fa0f 	bl	800cfac <protPull>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <xGetterLoop+0x212>
          && length < MAX_PACK_LEN);
 800cb94:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800cb98:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800cb9c:	d3e4      	bcc.n	800cb68 <xGetterLoop+0x1dc>
      CacheClean(handle->BufTx, length);
 800cb9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cba2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800cba6:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff f846 	bl	800bc3c <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800cbb0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cbb4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cbbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800cbc2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800cbc6:	b292      	uxth	r2, r2
 800cbc8:	4619      	mov	r1, r3
 800cbca:	f002 f9e3 	bl	800ef94 <HAL_UART_Transmit_DMA>
 800cbce:	e001      	b.n	800cbd4 <xGetterLoop+0x248>
    }
    else taskEXIT_CRITICAL();
 800cbd0:	f004 fbe6 	bl	80113a0 <vPortExitCritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800cbd4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cbd8:	3301      	adds	r3, #1
 800cbda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800cbde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	f67f aed9 	bls.w	800c99a <xGetterLoop+0xe>
  }
}
 800cbe8:	bf00      	nop
 800cbea:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	200004e0 	.word	0x200004e0

0800cbf8 <xGetterTask>:

void xGetterTask(void * arg)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  xGetterInit();
 800cc00:	f7ff fe8e 	bl	800c920 <xGetterInit>
  for (;;)
  {
    xGetterLoop();
 800cc04:	f7ff fec2 	bl	800c98c <xGetterLoop>
    TASK_SLEEP;
 800cc08:	2001      	movs	r0, #1
 800cc0a:	f002 fe27 	bl	800f85c <osDelay>
    xGetterLoop();
 800cc0e:	e7f9      	b.n	800cc04 <xGetterTask+0xc>

0800cc10 <infoGetSize>:
#include "cmsis_os.h"
#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	689a      	ldr	r2, [r3, #8]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d305      	bcc.n	800cc30 <infoGetSize+0x20>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	689a      	ldr	r2, [r3, #8]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	e007      	b.n	800cc40 <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	1ad2      	subs	r2, r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	4413      	add	r3, r2
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 800cc4c:	b590      	push	{r4, r7, lr}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681c      	ldr	r4, [r3, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff ffd9 	bl	800cc10 <infoGetSize>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	1ae3      	subs	r3, r4, r3
 800cc62:	4618      	mov	r0, r3
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd90      	pop	{r4, r7, pc}

0800cc6a <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 800cc6a:	b480      	push	{r7}
 800cc6c:	b085      	sub	sp, #20
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	60b9      	str	r1, [r7, #8]
 800cc74:	607a      	str	r2, [r7, #4]
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	6812      	ldr	r2, [r2, #0]
 800cc82:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc86:	fb02 f201 	mul.w	r2, r2, r1
 800cc8a:	1a9b      	subs	r3, r3, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3714      	adds	r7, #20
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	68b9      	ldr	r1, [r7, #8]
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7ff ffde 	bl	800cc6a <infoCorrect>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	601a      	str	r2, [r3, #0]
 800ccb4:	bf00      	nop
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	bf14      	ite	ne
 800ccd0:	2301      	movne	r3, #1
 800ccd2:	2300      	moveq	r3, #0
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	60b9      	str	r1, [r7, #8]
 800ccec:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(info->lock, portMAX_DELAY);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	f04f 31ff 	mov.w	r1, #4294967295
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f003 fa20 	bl	801013c <xQueueSemaphoreTake>
        infoMovePar(info,param,move);
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	68b9      	ldr	r1, [r7, #8]
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f7ff ffc9 	bl	800cc98 <infoMovePar>
    xSemaphoreGive(info->lock);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	68d8      	ldr	r0, [r3, #12]
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	2100      	movs	r1, #0
 800cd10:	f003 f804 	bl	800fd1c <xQueueGenericSend>
}
 800cd14:	bf00      	nop
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
    uint32_t value;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	f04f 31ff 	mov.w	r1, #4294967295
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f003 fa05 	bl	801013c <xQueueSemaphoreTake>
        value = infoGetSize(&fifo->info);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	3304      	adds	r3, #4
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff ff6a 	bl	800cc10 <infoGetSize>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	60fb      	str	r3, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6918      	ldr	r0, [r3, #16]
 800cd44:	2300      	movs	r3, #0
 800cd46:	2200      	movs	r2, #0
 800cd48:	2100      	movs	r1, #0
 800cd4a:	f002 ffe7 	bl	800fd1c <xQueueGenericSend>
    return value;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <protInit>:
        value = infoGetAvail(&fifo->info);
    xSemaphoreGive(fifo->info.lock);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	603b      	str	r3, [r7, #0]
 800cd64:	4613      	mov	r3, r2
 800cd66:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	605a      	str	r2, [r3, #4]
    fifo->info.lock = xSemaphoreCreateMutex();
 800cd74:	2001      	movs	r0, #1
 800cd76:	f003 f8c0 	bl	800fefa <xQueueCreateMutex>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	611a      	str	r2, [r3, #16]
    fifo->info.globallock = xSemaphoreCreateMutex();
 800cd80:	2001      	movs	r0, #1
 800cd82:	f003 f8ba 	bl	800fefa <xQueueCreateMutex>
 800cd86:	4602      	mov	r2, r0
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	615a      	str	r2, [r3, #20]
    fifo->info.read = 0;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2200      	movs	r2, #0
 800cd96:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	765a      	strb	r2, [r3, #25]
    fifo->info.elemsize = xElemSize;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	79fa      	ldrb	r2, [r7, #7]
 800cda2:	761a      	strb	r2, [r3, #24]
}
 800cda4:	bf00      	nop
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <interPut>:
        fifo->info.write = 0;
        fifo->info.overflow = 0;
    xSemaphoreGive(fifo->info.lock);
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	7e12      	ldrb	r2, [r2, #24]
 800cdc4:	fb02 f303 	mul.w	r3, r2, r3
 800cdc8:	440b      	add	r3, r1
 800cdca:	4618      	mov	r0, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	7e1b      	ldrb	r3, [r3, #24]
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	f006 f846 	bl	8012e64 <memcpy>
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4619      	mov	r1, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	7e12      	ldrb	r2, [r2, #24]
 800cdf8:	fb02 f303 	mul.w	r3, r2, r3
 800cdfc:	440b      	add	r3, r1
 800cdfe:	4619      	mov	r1, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	7e1b      	ldrb	r3, [r3, #24]
 800ce04:	461a      	mov	r2, r3
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	f006 f82c 	bl	8012e64 <memcpy>
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	461a      	mov	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	7e1b      	ldrb	r3, [r3, #24]
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	fb03 f301 	mul.w	r3, r3, r1
 800ce32:	4413      	add	r3, r2
 800ce34:	4619      	mov	r1, r3
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	7e1b      	ldrb	r3, [r3, #24]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f006 f811 	bl	8012e64 <memcpy>
}
 800ce42:	bf00      	nop
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3304      	adds	r3, #4
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7ff fef7 	bl	800cc4c <infoGetAvail>
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00c      	beq.n	800ce80 <interPush+0x36>
        interPut(fifo,xData);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7ff ff9f 	bl	800cdac <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	1d18      	adds	r0, r3, #4
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	330c      	adds	r3, #12
 800ce76:	2201      	movs	r2, #1
 800ce78:	4619      	mov	r1, r3
 800ce7a:	f7ff ff0d 	bl	800cc98 <infoMovePar>
 800ce7e:	e002      	b.n	800ce86 <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	765a      	strb	r2, [r3, #25]
    return retval;
 800ce86:	68fb      	ldr	r3, [r7, #12]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff ff0c 	bl	800ccbc <infoIsSome>
 800cea4:	4603      	mov	r3, r0
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00b      	beq.n	800cec6 <interPull+0x36>
        interGet(fifo,xDest);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7ff ff95 	bl	800cde0 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	1d18      	adds	r0, r3, #4
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	3308      	adds	r3, #8
 800cebe:	2201      	movs	r2, #1
 800cec0:	4619      	mov	r1, r3
 800cec2:	f7ff fee9 	bl	800cc98 <infoMovePar>
    }
    return retval;
 800cec6:	68fb      	ldr	r3, [r7, #12]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
    uint32_t retval = 0; uint32_t i;
 800cedc:	2300      	movs	r3, #0
 800cede:	617b      	str	r3, [r7, #20]
    if(infoGetAvail(&fifo->info) >= xCount)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	3304      	adds	r3, #4
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7ff feb1 	bl	800cc4c <infoGetAvail>
 800ceea:	4602      	mov	r2, r0
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d81b      	bhi.n	800cf2a <interPushSequence+0x5a>
    {
      for (i=0; i<xCount; i++) {
 800cef2:	2300      	movs	r3, #0
 800cef4:	613b      	str	r3, [r7, #16]
 800cef6:	e012      	b.n	800cf1e <interPushSequence+0x4e>
          if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	7e1b      	ldrb	r3, [r3, #24]
 800cefc:	461a      	mov	r2, r3
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	fb03 f202 	mul.w	r2, r3, r2
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	4413      	add	r3, r2
 800cf08:	4619      	mov	r1, r3
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f7ff ff9d 	bl	800ce4a <interPush>
 800cf10:	6178      	str	r0, [r7, #20]
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d007      	beq.n	800cf28 <interPushSequence+0x58>
      for (i=0; i<xCount; i++) {
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	613b      	str	r3, [r7, #16]
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d3e8      	bcc.n	800cef8 <interPushSequence+0x28>
 800cf26:	e000      	b.n	800cf2a <interPushSequence+0x5a>
          if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800cf28:	bf00      	nop
      }
    }
    return retval;
 800cf2a:	697b      	ldr	r3, [r7, #20]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	f04f 31ff 	mov.w	r1, #4294967295
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f003 f8f7 	bl	801013c <xQueueSemaphoreTake>
        retval=interPushSequence(fifo,xData,xCount);
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	68b9      	ldr	r1, [r7, #8]
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	f7ff ffbc 	bl	800ced0 <interPushSequence>
 800cf58:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(fifo->info.lock);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	6918      	ldr	r0, [r3, #16]
 800cf5e:	2300      	movs	r3, #0
 800cf60:	2200      	movs	r2, #0
 800cf62:	2100      	movs	r1, #0
 800cf64:	f002 feda 	bl	800fd1c <xQueueGenericSend>
    return retval;
 800cf68:	697b      	ldr	r3, [r7, #20]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	f04f 31ff 	mov.w	r1, #4294967295
 800cf84:	4618      	mov	r0, r3
 800cf86:	f003 f8d9 	bl	801013c <xQueueSemaphoreTake>
        retval=interPush(fifo,xData);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff ff5c 	bl	800ce4a <interPush>
 800cf92:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6918      	ldr	r0, [r3, #16]
 800cf98:	2300      	movs	r3, #0
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	f002 febd 	bl	800fd1c <xQueueGenericSend>
    return retval;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7ff ff69 	bl	800ce90 <interPull>
 800cfbe:	60f8      	str	r0, [r7, #12]
    return retval;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	60b9      	str	r1, [r7, #8]
 800cfd4:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	1d18      	adds	r0, r3, #4
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	3308      	adds	r3, #8
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	f7ff fe42 	bl	800cc6a <infoCorrect>
 800cfe6:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	6979      	ldr	r1, [r7, #20]
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f7ff ff11 	bl	800ce14 <interLook>
}
 800cff2:	bf00      	nop
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	1d18      	adds	r0, r3, #4
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	3308      	adds	r3, #8
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	4619      	mov	r1, r3
 800d010:	f7ff fe67 	bl	800cce2 <protMovePar>
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	689a      	ldr	r2, [r3, #8]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	bf14      	ite	ne
 800d030:	2301      	movne	r3, #1
 800d032:	2300      	moveq	r3, #0
 800d034:	b2db      	uxtb	r3, r3
 800d036:	4618      	mov	r0, r3
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
	...

0800d044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d07c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d048:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d04a:	e003      	b.n	800d054 <LoopCopyDataInit>

0800d04c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d04c:	4b0c      	ldr	r3, [pc, #48]	; (800d080 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d04e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d050:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d052:	3104      	adds	r1, #4

0800d054 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d054:	480b      	ldr	r0, [pc, #44]	; (800d084 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d056:	4b0c      	ldr	r3, [pc, #48]	; (800d088 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d058:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d05a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d05c:	d3f6      	bcc.n	800d04c <CopyDataInit>
  ldr  r2, =_sbss
 800d05e:	4a0b      	ldr	r2, [pc, #44]	; (800d08c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d060:	e002      	b.n	800d068 <LoopFillZerobss>

0800d062 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d062:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d064:	f842 3b04 	str.w	r3, [r2], #4

0800d068 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d068:	4b09      	ldr	r3, [pc, #36]	; (800d090 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d06a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d06c:	d3f9      	bcc.n	800d062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d06e:	f7fe fd3d 	bl	800baec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d072:	f005 fed3 	bl	8012e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d076:	f7fd fe21 	bl	800acbc <main>
  bx  lr    
 800d07a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d07c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800d080:	0801a538 	.word	0x0801a538
  ldr  r0, =_sdata
 800d084:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d088:	20002ef4 	.word	0x20002ef4
  ldr  r2, =_sbss
 800d08c:	20002f00 	.word	0x20002f00
  ldr  r3, = _ebss
 800d090:	2001f7ec 	.word	0x2001f7ec

0800d094 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d094:	e7fe      	b.n	800d094 <CAN1_RX0_IRQHandler>
	...

0800d098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d098:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 0.1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 800d09a:	4b0e      	ldr	r3, [pc, #56]	; (800d0d4 <HAL_InitTick+0x3c>)
{
 800d09c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 800d09e:	4a0e      	ldr	r2, [pc, #56]	; (800d0d8 <HAL_InitTick+0x40>)
 800d0a0:	8818      	ldrh	r0, [r3, #0]
 800d0a2:	f242 7310 	movw	r3, #10000	; 0x2710
 800d0a6:	fbb3 f3f0 	udiv	r3, r3, r0
 800d0aa:	6810      	ldr	r0, [r2, #0]
 800d0ac:	fbb0 f0f3 	udiv	r0, r0, r3
 800d0b0:	f000 fa84 	bl	800d5bc <HAL_SYSTICK_Config>
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	b958      	cbnz	r0, 800d0d0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d0b8:	2d0f      	cmp	r5, #15
 800d0ba:	d809      	bhi.n	800d0d0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d0bc:	4602      	mov	r2, r0
 800d0be:	4629      	mov	r1, r5
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	f000 fa3a 	bl	800d53c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d0c8:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <HAL_InitTick+0x44>)
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	e7fc      	b.n	800d0ce <HAL_InitTick+0x36>
 800d0d4:	20002ca0 	.word	0x20002ca0
 800d0d8:	200004d4 	.word	0x200004d4
 800d0dc:	20002ca4 	.word	0x20002ca4

0800d0e0 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 800d0e0:	4a07      	ldr	r2, [pc, #28]	; (800d100 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d0e2:	2003      	movs	r0, #3
{
 800d0e4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800d0e6:	6813      	ldr	r3, [r2, #0]
 800d0e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0ec:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d0ee:	f000 fa13 	bl	800d518 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800d0f2:	200f      	movs	r0, #15
 800d0f4:	f7ff ffd0 	bl	800d098 <HAL_InitTick>
  HAL_MspInit();
 800d0f8:	f7fe fa08 	bl	800b50c <HAL_MspInit>
}
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	bd08      	pop	{r3, pc}
 800d100:	40023c00 	.word	0x40023c00

0800d104 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800d104:	4a03      	ldr	r2, [pc, #12]	; (800d114 <HAL_IncTick+0x10>)
 800d106:	4b04      	ldr	r3, [pc, #16]	; (800d118 <HAL_IncTick+0x14>)
 800d108:	6811      	ldr	r1, [r2, #0]
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	440b      	add	r3, r1
 800d10e:	6013      	str	r3, [r2, #0]
}
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	2001f7a4 	.word	0x2001f7a4
 800d118:	20002ca0 	.word	0x20002ca0

0800d11c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800d11c:	4b01      	ldr	r3, [pc, #4]	; (800d124 <HAL_GetTick+0x8>)
 800d11e:	6818      	ldr	r0, [r3, #0]
}
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	2001f7a4 	.word	0x2001f7a4

0800d128 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800d128:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800d12a:	4c07      	ldr	r4, [pc, #28]	; (800d148 <HAL_SetTickFreq+0x20>)
 800d12c:	8825      	ldrh	r5, [r4, #0]
 800d12e:	4285      	cmp	r5, r0
 800d130:	d007      	beq.n	800d142 <HAL_SetTickFreq+0x1a>

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800d132:	4b06      	ldr	r3, [pc, #24]	; (800d14c <HAL_SetTickFreq+0x24>)
    uwTickFreq = Freq;
 800d134:	8020      	strh	r0, [r4, #0]
    status = HAL_InitTick(uwTickPrio);
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	f7ff ffae 	bl	800d098 <HAL_InitTick>

    if (status != HAL_OK)
 800d13c:	b100      	cbz	r0, 800d140 <HAL_SetTickFreq+0x18>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 800d13e:	8025      	strh	r5, [r4, #0]
    }
  }

  return status;
}
 800d140:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 800d142:	2000      	movs	r0, #0
 800d144:	e7fc      	b.n	800d140 <HAL_SetTickFreq+0x18>
 800d146:	bf00      	nop
 800d148:	20002ca0 	.word	0x20002ca0
 800d14c:	20002ca4 	.word	0x20002ca4

0800d150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d150:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d152:	4604      	mov	r4, r0
 800d154:	2800      	cmp	r0, #0
 800d156:	f000 809b 	beq.w	800d290 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800d15a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800d15c:	b925      	cbnz	r5, 800d168 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d15e:	f7fe f9fd 	bl	800b55c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d162:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d164:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d16a:	06db      	lsls	r3, r3, #27
 800d16c:	f100 808e 	bmi.w	800d28c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d176:	f023 0302 	bic.w	r3, r3, #2
 800d17a:	f043 0302 	orr.w	r3, r3, #2
 800d17e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800d180:	4b44      	ldr	r3, [pc, #272]	; (800d294 <HAL_ADC_Init+0x144>)
 800d182:	685a      	ldr	r2, [r3, #4]
 800d184:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800d188:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	6861      	ldr	r1, [r4, #4]
 800d18e:	430a      	orrs	r2, r1
 800d190:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800d192:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800d194:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d19c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800d19e:	685a      	ldr	r2, [r3, #4]
 800d1a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800d1a4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800d1a6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800d1a8:	685a      	ldr	r2, [r3, #4]
 800d1aa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800d1ae:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800d1b4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800d1b6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800d1b8:	689a      	ldr	r2, [r3, #8]
 800d1ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800d1c0:	689a      	ldr	r2, [r3, #8]
 800d1c2:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d1c4:	4934      	ldr	r1, [pc, #208]	; (800d298 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800d1c6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d1c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d1ca:	428a      	cmp	r2, r1
 800d1cc:	d052      	beq.n	800d274 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d1ce:	6899      	ldr	r1, [r3, #8]
 800d1d0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800d1d4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800d1d6:	6899      	ldr	r1, [r3, #8]
 800d1d8:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800d1da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800d1dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d1de:	689a      	ldr	r2, [r3, #8]
 800d1e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d1e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800d1e6:	689a      	ldr	r2, [r3, #8]
 800d1e8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d1ea:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800d1ec:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800d1ee:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800d1f0:	f022 0202 	bic.w	r2, r2, #2
 800d1f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800d1f6:	689a      	ldr	r2, [r3, #8]
 800d1f8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d1fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800d1fe:	f894 2020 	ldrb.w	r2, [r4, #32]
 800d202:	2a00      	cmp	r2, #0
 800d204:	d03e      	beq.n	800d284 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800d206:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800d208:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800d20a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800d20e:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800d210:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800d218:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800d220:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 800d222:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800d226:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800d228:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800d22c:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800d22e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800d230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d232:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800d236:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800d23a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800d23c:	689a      	ldr	r2, [r3, #8]
 800d23e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800d244:	689a      	ldr	r2, [r3, #8]
 800d246:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800d24a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800d24c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800d256:	689a      	ldr	r2, [r3, #8]
 800d258:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800d25c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800d25e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800d260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d262:	f023 0303 	bic.w	r3, r3, #3
 800d266:	f043 0301 	orr.w	r3, r3, #1
 800d26a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800d26c:	2300      	movs	r3, #0
 800d26e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d272:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800d274:	689a      	ldr	r2, [r3, #8]
 800d276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d27a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800d27c:	689a      	ldr	r2, [r3, #8]
 800d27e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d282:	e7b2      	b.n	800d1ea <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d28a:	e7c9      	b.n	800d220 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800d28c:	2001      	movs	r0, #1
 800d28e:	e7ed      	b.n	800d26c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 800d290:	2001      	movs	r0, #1
 800d292:	e7ee      	b.n	800d272 <HAL_ADC_Init+0x122>
 800d294:	40012300 	.word	0x40012300
 800d298:	0f000001 	.word	0x0f000001

0800d29c <HAL_ADC_ConvCpltCallback>:
 800d29c:	4770      	bx	lr

0800d29e <HAL_ADC_LevelOutOfWindowCallback>:
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_ADC_ErrorCallback>:
 800d2a0:	4770      	bx	lr

0800d2a2 <HAL_ADC_IRQHandler>:
{
 800d2a2:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800d2a4:	6803      	ldr	r3, [r0, #0]
{
 800d2a6:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800d2a8:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800d2aa:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800d2ac:	078d      	lsls	r5, r1, #30
 800d2ae:	d52b      	bpl.n	800d308 <HAL_ADC_IRQHandler+0x66>
 800d2b0:	0690      	lsls	r0, r2, #26
 800d2b2:	d529      	bpl.n	800d308 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d2b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d2b6:	06d1      	lsls	r1, r2, #27
 800d2b8:	d403      	bmi.n	800d2c2 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d2ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d2bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2c0:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d2c2:	689a      	ldr	r2, [r3, #8]
 800d2c4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800d2c8:	d117      	bne.n	800d2fa <HAL_ADC_IRQHandler+0x58>
 800d2ca:	69a2      	ldr	r2, [r4, #24]
 800d2cc:	b9aa      	cbnz	r2, 800d2fa <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d2d0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800d2d4:	d002      	beq.n	800d2dc <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800d2d6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d2d8:	0552      	lsls	r2, r2, #21
 800d2da:	d40e      	bmi.n	800d2fa <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	f022 0220 	bic.w	r2, r2, #32
 800d2e2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d2e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2ea:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d2ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2ee:	04db      	lsls	r3, r3, #19
 800d2f0:	d403      	bmi.n	800d2fa <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d2f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2f4:	f043 0301 	orr.w	r3, r3, #1
 800d2f8:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f7ff ffce 	bl	800d29c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	f06f 0212 	mvn.w	r2, #18
 800d306:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800d30c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800d30e:	074d      	lsls	r5, r1, #29
 800d310:	d532      	bpl.n	800d378 <HAL_ADC_IRQHandler+0xd6>
 800d312:	0610      	lsls	r0, r2, #24
 800d314:	d530      	bpl.n	800d378 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d316:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d318:	06d1      	lsls	r1, r2, #27
 800d31a:	d403      	bmi.n	800d324 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d31c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d31e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d322:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d324:	689a      	ldr	r2, [r3, #8]
 800d326:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800d32a:	d11e      	bne.n	800d36a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800d32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d32e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800d332:	d002      	beq.n	800d33a <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800d334:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800d336:	0552      	lsls	r2, r2, #21
 800d338:	d417      	bmi.n	800d36a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d33a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800d33c:	0555      	lsls	r5, r2, #21
 800d33e:	d414      	bmi.n	800d36a <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800d340:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d342:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800d346:	d110      	bne.n	800d36a <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800d348:	69a2      	ldr	r2, [r4, #24]
 800d34a:	b972      	cbnz	r2, 800d36a <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d352:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800d354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d35a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800d35c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d35e:	05d8      	lsls	r0, r3, #23
 800d360:	d403      	bmi.n	800d36a <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d364:	f043 0301 	orr.w	r3, r3, #1
 800d368:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 f8d2 	bl	800d514 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800d370:	6823      	ldr	r3, [r4, #0]
 800d372:	f06f 020c 	mvn.w	r2, #12
 800d376:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800d37c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800d37e:	07c9      	lsls	r1, r1, #31
 800d380:	d50f      	bpl.n	800d3a2 <HAL_ADC_IRQHandler+0x100>
 800d382:	0655      	lsls	r5, r2, #25
 800d384:	d50d      	bpl.n	800d3a2 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	07d8      	lsls	r0, r3, #31
 800d38a:	d50a      	bpl.n	800d3a2 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d38c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d38e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d394:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d396:	f7ff ff82 	bl	800d29e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	f06f 0201 	mvn.w	r2, #1
 800d3a0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800d3a6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800d3a8:	0689      	lsls	r1, r1, #26
 800d3aa:	d50d      	bpl.n	800d3c8 <HAL_ADC_IRQHandler+0x126>
 800d3ac:	0152      	lsls	r2, r2, #5
 800d3ae:	d50b      	bpl.n	800d3c8 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d3b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d3b2:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 800d3b6:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d3b8:	f042 0202 	orr.w	r2, r2, #2
 800d3bc:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d3be:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800d3c0:	f7ff ff6e 	bl	800d2a0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	601d      	str	r5, [r3, #0]
}
 800d3c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d3cc <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800d3cc:	2300      	movs	r3, #0
{
 800d3ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800d3d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800d3d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d074      	beq.n	800d4c4 <HAL_ADC_ConfigChannel+0xf8>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800d3da:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800d3dc:	2301      	movs	r3, #1
 800d3de:	688a      	ldr	r2, [r1, #8]
 800d3e0:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800d3e2:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800d3e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800d3e8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 800d3ec:	6803      	ldr	r3, [r0, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800d3ee:	d931      	bls.n	800d454 <HAL_ADC_ConfigChannel+0x88>
 800d3f0:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800d3f4:	d02e      	beq.n	800d454 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800d3f6:	3c1e      	subs	r4, #30
 800d3f8:	f04f 0c07 	mov.w	ip, #7
 800d3fc:	68df      	ldr	r7, [r3, #12]
 800d3fe:	fa0c fc04 	lsl.w	ip, ip, r4
 800d402:	ea27 070c 	bic.w	r7, r7, ip
 800d406:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d408:	4f3d      	ldr	r7, [pc, #244]	; (800d500 <HAL_ADC_ConfigChannel+0x134>)
 800d40a:	42bd      	cmp	r5, r7
 800d40c:	d11d      	bne.n	800d44a <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800d40e:	68dc      	ldr	r4, [r3, #12]
 800d410:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d414:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 800d416:	6849      	ldr	r1, [r1, #4]
 800d418:	2906      	cmp	r1, #6
 800d41a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800d41e:	d827      	bhi.n	800d470 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d420:	3a05      	subs	r2, #5
 800d422:	241f      	movs	r4, #31
 800d424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d426:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d428:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d42c:	ea21 0104 	bic.w	r1, r1, r4
 800d430:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d432:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d434:	430a      	orrs	r2, r1
 800d436:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800d438:	4a32      	ldr	r2, [pc, #200]	; (800d504 <HAL_ADC_ConfigChannel+0x138>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d034      	beq.n	800d4a8 <HAL_ADC_ConfigChannel+0xdc>
  __HAL_UNLOCK(hadc);
 800d43e:	2300      	movs	r3, #0
 800d440:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800d444:	4618      	mov	r0, r3
}
 800d446:	b003      	add	sp, #12
 800d448:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d44a:	68df      	ldr	r7, [r3, #12]
 800d44c:	fa02 f404 	lsl.w	r4, r2, r4
 800d450:	433c      	orrs	r4, r7
 800d452:	e7df      	b.n	800d414 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d454:	f04f 0c07 	mov.w	ip, #7
 800d458:	691f      	ldr	r7, [r3, #16]
 800d45a:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d45e:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d462:	ea27 070c 	bic.w	r7, r7, ip
 800d466:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d468:	691f      	ldr	r7, [r3, #16]
 800d46a:	433c      	orrs	r4, r7
 800d46c:	611c      	str	r4, [r3, #16]
 800d46e:	e7d2      	b.n	800d416 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 800d470:	290c      	cmp	r1, #12
 800d472:	f04f 011f 	mov.w	r1, #31
 800d476:	d80b      	bhi.n	800d490 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d478:	3a23      	subs	r2, #35	; 0x23
 800d47a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800d47c:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d47e:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d482:	ea24 0101 	bic.w	r1, r4, r1
 800d486:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d488:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d48a:	430a      	orrs	r2, r1
 800d48c:	631a      	str	r2, [r3, #48]	; 0x30
 800d48e:	e7d3      	b.n	800d438 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d490:	3a41      	subs	r2, #65	; 0x41
 800d492:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d494:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800d496:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d49a:	ea24 0101 	bic.w	r1, r4, r1
 800d49e:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800d4a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800d4a6:	e7c7      	b.n	800d438 <HAL_ADC_ConfigChannel+0x6c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800d4a8:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800d4ac:	d10c      	bne.n	800d4c8 <HAL_ADC_ConfigChannel+0xfc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800d4ae:	4a16      	ldr	r2, [pc, #88]	; (800d508 <HAL_ADC_ConfigChannel+0x13c>)
 800d4b0:	6853      	ldr	r3, [r2, #4]
 800d4b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    ADC->CCR |= ADC_CCR_VBATE;
 800d4b6:	6053      	str	r3, [r2, #4]
 800d4b8:	e7c1      	b.n	800d43e <HAL_ADC_ConfigChannel+0x72>
 800d4ba:	4a13      	ldr	r2, [pc, #76]	; (800d508 <HAL_ADC_ConfigChannel+0x13c>)
 800d4bc:	6853      	ldr	r3, [r2, #4]
 800d4be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d4c2:	e7f8      	b.n	800d4b6 <HAL_ADC_ConfigChannel+0xea>
  __HAL_LOCK(hadc);
 800d4c4:	2002      	movs	r0, #2
 800d4c6:	e7be      	b.n	800d446 <HAL_ADC_ConfigChannel+0x7a>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800d4c8:	2d12      	cmp	r5, #18
 800d4ca:	d0f6      	beq.n	800d4ba <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800d4cc:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <HAL_ADC_ConfigChannel+0x134>)
 800d4ce:	429d      	cmp	r5, r3
 800d4d0:	d001      	beq.n	800d4d6 <HAL_ADC_ConfigChannel+0x10a>
 800d4d2:	2d11      	cmp	r5, #17
 800d4d4:	d1b3      	bne.n	800d43e <HAL_ADC_ConfigChannel+0x72>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800d4d6:	490c      	ldr	r1, [pc, #48]	; (800d508 <HAL_ADC_ConfigChannel+0x13c>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d4d8:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 800d4da:	684a      	ldr	r2, [r1, #4]
 800d4dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d4e0:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d4e2:	d1ac      	bne.n	800d43e <HAL_ADC_ConfigChannel+0x72>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800d4e4:	4b09      	ldr	r3, [pc, #36]	; (800d50c <HAL_ADC_ConfigChannel+0x140>)
 800d4e6:	4a0a      	ldr	r2, [pc, #40]	; (800d510 <HAL_ADC_ConfigChannel+0x144>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4ee:	230a      	movs	r3, #10
 800d4f0:	4353      	muls	r3, r2
        counter--;
 800d4f2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d0a1      	beq.n	800d43e <HAL_ADC_ConfigChannel+0x72>
        counter--;
 800d4fa:	9b01      	ldr	r3, [sp, #4]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	e7f8      	b.n	800d4f2 <HAL_ADC_ConfigChannel+0x126>
 800d500:	10000012 	.word	0x10000012
 800d504:	40012000 	.word	0x40012000
 800d508:	40012300 	.word	0x40012300
 800d50c:	200004d4 	.word	0x200004d4
 800d510:	000f4240 	.word	0x000f4240

0800d514 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800d514:	4770      	bx	lr
	...

0800d518 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d518:	4a07      	ldr	r2, [pc, #28]	; (800d538 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d51a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d51c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d51e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d522:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d526:	041b      	lsls	r3, r3, #16
 800d528:	0c1b      	lsrs	r3, r3, #16
 800d52a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d52e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800d532:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800d534:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800d536:	4770      	bx	lr
 800d538:	e000ed00 	.word	0xe000ed00

0800d53c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d53c:	4b16      	ldr	r3, [pc, #88]	; (800d598 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d53e:	b570      	push	{r4, r5, r6, lr}
 800d540:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d542:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d546:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d54a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d54e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d550:	2d04      	cmp	r5, #4
 800d552:	bf28      	it	cs
 800d554:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d556:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d558:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d55c:	bf8c      	ite	hi
 800d55e:	3c03      	subhi	r4, #3
 800d560:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 800d562:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d564:	ea21 0303 	bic.w	r3, r1, r3
 800d568:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d56c:	fa06 f404 	lsl.w	r4, r6, r4
 800d570:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d574:	ea43 0304 	orr.w	r3, r3, r4
 800d578:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d57c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800d57e:	db06      	blt.n	800d58e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d580:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800d584:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800d588:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800d58c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d58e:	f000 000f 	and.w	r0, r0, #15
 800d592:	4a02      	ldr	r2, [pc, #8]	; (800d59c <HAL_NVIC_SetPriority+0x60>)
 800d594:	5413      	strb	r3, [r2, r0]
 800d596:	e7f9      	b.n	800d58c <HAL_NVIC_SetPriority+0x50>
 800d598:	e000ed00 	.word	0xe000ed00
 800d59c:	e000ed14 	.word	0xe000ed14

0800d5a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	db08      	blt.n	800d5b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d5a4:	0942      	lsrs	r2, r0, #5
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	f000 001f 	and.w	r0, r0, #31
 800d5ac:	fa03 f000 	lsl.w	r0, r3, r0
 800d5b0:	4b01      	ldr	r3, [pc, #4]	; (800d5b8 <HAL_NVIC_EnableIRQ+0x18>)
 800d5b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800d5b6:	4770      	bx	lr
 800d5b8:	e000e100 	.word	0xe000e100

0800d5bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d5bc:	3801      	subs	r0, #1
 800d5be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800d5c2:	d20a      	bcs.n	800d5da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d5c4:	4b06      	ldr	r3, [pc, #24]	; (800d5e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5c6:	21f0      	movs	r1, #240	; 0xf0
 800d5c8:	4a06      	ldr	r2, [pc, #24]	; (800d5e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d5ca:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d5cc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d5ce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d5d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d5d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d5d6:	601a      	str	r2, [r3, #0]
 800d5d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800d5da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	e000e010 	.word	0xe000e010
 800d5e4:	e000ed00 	.word	0xe000ed00

0800d5e8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800d5ea:	0896      	lsrs	r6, r2, #2
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	6805      	ldr	r5, [r0, #0]
 800d5f0:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 800d5f4:	42bb      	cmp	r3, r7
 800d5f6:	d108      	bne.n	800d60a <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800d5f8:	f012 0203 	ands.w	r2, r2, #3
 800d5fc:	d01e      	beq.n	800d63c <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 800d5fe:	2a01      	cmp	r2, #1
 800d600:	d114      	bne.n	800d62c <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800d602:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800d606:	702b      	strb	r3, [r5, #0]
 800d608:	e018      	b.n	800d63c <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800d60a:	785c      	ldrb	r4, [r3, #1]
 800d60c:	3304      	adds	r3, #4
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800d60e:	f813 cc04 	ldrb.w	ip, [r3, #-4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800d612:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800d614:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800d618:	f813 cc01 	ldrb.w	ip, [r3, #-1]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800d61c:	ea44 040c 	orr.w	r4, r4, ip
 800d620:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 800d624:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800d628:	602c      	str	r4, [r5, #0]
 800d62a:	e7e3      	b.n	800d5f4 <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 800d62c:	2a02      	cmp	r2, #2
 800d62e:	d108      	bne.n	800d642 <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800d630:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 800d634:	785b      	ldrb	r3, [r3, #1]
 800d636:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 800d63a:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800d63c:	6803      	ldr	r3, [r0, #0]
 800d63e:	6818      	ldr	r0, [r3, #0]
}
 800d640:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800d642:	785a      	ldrb	r2, [r3, #1]
 800d644:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 800d648:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 800d64c:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800d64e:	789b      	ldrb	r3, [r3, #2]
 800d650:	e7d9      	b.n	800d606 <CRC_Handle_8+0x1e>

0800d652 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800d652:	b570      	push	{r4, r5, r6, lr}
 800d654:	6800      	ldr	r0, [r0, #0]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800d656:	0855      	lsrs	r5, r2, #1
 800d658:	2300      	movs	r3, #0
 800d65a:	429d      	cmp	r5, r3
 800d65c:	d106      	bne.n	800d66c <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 800d65e:	07d3      	lsls	r3, r2, #31
 800d660:	d502      	bpl.n	800d668 <CRC_Handle_16+0x16>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 800d662:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 800d666:	8003      	strh	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800d668:	6800      	ldr	r0, [r0, #0]
}
 800d66a:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800d66c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800d670:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800d674:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800d676:	8864      	ldrh	r4, [r4, #2]
 800d678:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800d67c:	6004      	str	r4, [r0, #0]
 800d67e:	e7ec      	b.n	800d65a <CRC_Handle_16+0x8>

0800d680 <HAL_CRC_MspInit>:
}
 800d680:	4770      	bx	lr
	...

0800d684 <HAL_CRC_Init>:
{
 800d684:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 800d686:	4604      	mov	r4, r0
 800d688:	b908      	cbnz	r0, 800d68e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800d68a:	2001      	movs	r0, #1
}
 800d68c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d68e:	7f43      	ldrb	r3, [r0, #29]
 800d690:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d694:	b913      	cbnz	r3, 800d69c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800d696:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800d698:	f7ff fff2 	bl	800d680 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d69c:	2302      	movs	r3, #2
 800d69e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d6a0:	7923      	ldrb	r3, [r4, #4]
 800d6a2:	b9e3      	cbnz	r3, 800d6de <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	4a13      	ldr	r2, [pc, #76]	; (800d6f4 <HAL_CRC_Init+0x70>)
 800d6a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d6aa:	689a      	ldr	r2, [r3, #8]
 800d6ac:	f022 0218 	bic.w	r2, r2, #24
 800d6b0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d6b2:	7962      	ldrb	r2, [r4, #5]
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	b9d2      	cbnz	r2, 800d6ee <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d6b8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d6bc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800d6be:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d6c0:	689a      	ldr	r2, [r3, #8]
 800d6c2:	6961      	ldr	r1, [r4, #20]
 800d6c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d6c8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d6ca:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d6cc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d6ce:	689a      	ldr	r2, [r3, #8]
 800d6d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6d4:	430a      	orrs	r2, r1
 800d6d6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800d6dc:	e7d6      	b.n	800d68c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d6de:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f000 f82c 	bl	800d740 <HAL_CRCEx_Polynomial_Set>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d0e2      	beq.n	800d6b2 <HAL_CRC_Init+0x2e>
 800d6ec:	e7cd      	b.n	800d68a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d6ee:	6922      	ldr	r2, [r4, #16]
 800d6f0:	e7e4      	b.n	800d6bc <HAL_CRC_Init+0x38>
 800d6f2:	bf00      	nop
 800d6f4:	04c11db7 	.word	0x04c11db7

0800d6f8 <HAL_CRC_Calculate>:
{
 800d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d6fa:	2502      	movs	r5, #2
{
 800d6fc:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 800d6fe:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800d700:	6805      	ldr	r5, [r0, #0]
 800d702:	68af      	ldr	r7, [r5, #8]
 800d704:	f047 0701 	orr.w	r7, r7, #1
 800d708:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 800d70a:	6a07      	ldr	r7, [r0, #32]
 800d70c:	2f02      	cmp	r7, #2
 800d70e:	d012      	beq.n	800d736 <HAL_CRC_Calculate+0x3e>
 800d710:	2f03      	cmp	r7, #3
 800d712:	d004      	beq.n	800d71e <HAL_CRC_Calculate+0x26>
 800d714:	2f01      	cmp	r7, #1
 800d716:	d111      	bne.n	800d73c <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800d718:	f7ff ff66 	bl	800d5e8 <CRC_Handle_8>
      break;
 800d71c:	e004      	b.n	800d728 <HAL_CRC_Calculate+0x30>
 800d71e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 800d722:	42b1      	cmp	r1, r6
 800d724:	d103      	bne.n	800d72e <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 800d726:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800d728:	2301      	movs	r3, #1
 800d72a:	7763      	strb	r3, [r4, #29]
}
 800d72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 800d72e:	f851 3b04 	ldr.w	r3, [r1], #4
 800d732:	602b      	str	r3, [r5, #0]
 800d734:	e7f5      	b.n	800d722 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800d736:	f7ff ff8c 	bl	800d652 <CRC_Handle_16>
      break;
 800d73a:	e7f5      	b.n	800d728 <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800d73c:	2000      	movs	r0, #0
 800d73e:	e7f3      	b.n	800d728 <HAL_CRC_Calculate+0x30>

0800d740 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d740:	231f      	movs	r3, #31
{
 800d742:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d744:	f113 33ff 	adds.w	r3, r3, #4294967295
 800d748:	d306      	bcc.n	800d758 <HAL_CRCEx_Polynomial_Set+0x18>
 800d74a:	fa21 f403 	lsr.w	r4, r1, r3
 800d74e:	07e4      	lsls	r4, r4, #31
 800d750:	d5f8      	bpl.n	800d744 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800d752:	2a08      	cmp	r2, #8
 800d754:	d014      	beq.n	800d780 <HAL_CRCEx_Polynomial_Set+0x40>
 800d756:	d802      	bhi.n	800d75e <HAL_CRCEx_Polynomial_Set+0x1e>
 800d758:	b13a      	cbz	r2, 800d76a <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800d75a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800d75c:	e00d      	b.n	800d77a <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 800d75e:	2a10      	cmp	r2, #16
 800d760:	d00c      	beq.n	800d77c <HAL_CRCEx_Polynomial_Set+0x3c>
 800d762:	2a18      	cmp	r2, #24
 800d764:	d1f9      	bne.n	800d75a <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 800d766:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800d768:	d8f7      	bhi.n	800d75a <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d76a:	6800      	ldr	r0, [r0, #0]
 800d76c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d76e:	6883      	ldr	r3, [r0, #8]
 800d770:	f023 0318 	bic.w	r3, r3, #24
 800d774:	431a      	orrs	r2, r3
 800d776:	6082      	str	r2, [r0, #8]
 800d778:	2000      	movs	r0, #0
}
 800d77a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800d77c:	2b07      	cmp	r3, #7
 800d77e:	e7f3      	b.n	800d768 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 800d780:	2b0f      	cmp	r3, #15
 800d782:	e7f1      	b.n	800d768 <HAL_CRCEx_Polynomial_Set+0x28>

0800d784 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d784:	6803      	ldr	r3, [r0, #0]
 800d786:	2118      	movs	r1, #24
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d78e:	3a10      	subs	r2, #16
 800d790:	f023 0303 	bic.w	r3, r3, #3
 800d794:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d798:	4904      	ldr	r1, [pc, #16]	; (800d7ac <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800d79a:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d79c:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d79e:	bf88      	it	hi
 800d7a0:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d7a2:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d7a4:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800d7a6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	08017a8c 	.word	0x08017a8c

0800d7b0 <HAL_DMA_Init>:
{
 800d7b0:	b570      	push	{r4, r5, r6, lr}
 800d7b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d7b4:	f7ff fcb2 	bl	800d11c <HAL_GetTick>
 800d7b8:	4605      	mov	r5, r0
  if(hdma == NULL)
 800d7ba:	2c00      	cmp	r4, #0
 800d7bc:	d071      	beq.n	800d8a2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800d7be:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 800d7c0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800d7c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800d7cc:	6813      	ldr	r3, [r2, #0]
 800d7ce:	f023 0301 	bic.w	r3, r3, #1
 800d7d2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d7d4:	6821      	ldr	r1, [r4, #0]
 800d7d6:	680b      	ldr	r3, [r1, #0]
 800d7d8:	07d8      	lsls	r0, r3, #31
 800d7da:	d43c      	bmi.n	800d856 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800d7dc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d7de:	4d32      	ldr	r5, [pc, #200]	; (800d8a8 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d7e0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d7e2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d7e4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	68e2      	ldr	r2, [r4, #12]
 800d7ec:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d7ee:	6922      	ldr	r2, [r4, #16]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	6962      	ldr	r2, [r4, #20]
 800d7f4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d7f6:	69e2      	ldr	r2, [r4, #28]
 800d7f8:	4303      	orrs	r3, r0
 800d7fa:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800d7fc:	6a22      	ldr	r2, [r4, #32]
 800d7fe:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d800:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d802:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d804:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d808:	bf02      	ittt	eq
 800d80a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800d80e:	4335      	orreq	r5, r6
 800d810:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d812:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800d814:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800d816:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d818:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800d81c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d820:	d10b      	bne.n	800d83a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800d822:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d824:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800d826:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d828:	b13d      	cbz	r5, 800d83a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d82a:	b9f8      	cbnz	r0, 800d86c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800d82c:	2a01      	cmp	r2, #1
 800d82e:	d02d      	beq.n	800d88c <HAL_DMA_Init+0xdc>
 800d830:	d301      	bcc.n	800d836 <HAL_DMA_Init+0x86>
 800d832:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d834:	d101      	bne.n	800d83a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d836:	01ea      	lsls	r2, r5, #7
 800d838:	d42b      	bmi.n	800d892 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800d83a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d83c:	4620      	mov	r0, r4
 800d83e:	f7ff ffa1 	bl	800d784 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d842:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d844:	233f      	movs	r3, #63	; 0x3f
 800d846:	4093      	lsls	r3, r2
 800d848:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d84a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800d84c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d84e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800d850:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800d854:	e009      	b.n	800d86a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d856:	f7ff fc61 	bl	800d11c <HAL_GetTick>
 800d85a:	1b40      	subs	r0, r0, r5
 800d85c:	2805      	cmp	r0, #5
 800d85e:	d9b9      	bls.n	800d7d4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d860:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d862:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d864:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800d866:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800d86a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d86c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800d870:	d113      	bne.n	800d89a <HAL_DMA_Init+0xea>
    switch (tmp)
 800d872:	2a03      	cmp	r2, #3
 800d874:	d8e1      	bhi.n	800d83a <HAL_DMA_Init+0x8a>
 800d876:	a001      	add	r0, pc, #4	; (adr r0, 800d87c <HAL_DMA_Init+0xcc>)
 800d878:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800d87c:	0800d893 	.word	0x0800d893
 800d880:	0800d837 	.word	0x0800d837
 800d884:	0800d893 	.word	0x0800d893
 800d888:	0800d88d 	.word	0x0800d88d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d88c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800d890:	d1d3      	bne.n	800d83a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d892:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800d894:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d896:	6563      	str	r3, [r4, #84]	; 0x54
 800d898:	e7e5      	b.n	800d866 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800d89a:	2a02      	cmp	r2, #2
 800d89c:	d9f9      	bls.n	800d892 <HAL_DMA_Init+0xe2>
 800d89e:	2a03      	cmp	r2, #3
 800d8a0:	e7c8      	b.n	800d834 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	e7e1      	b.n	800d86a <HAL_DMA_Init+0xba>
 800d8a6:	bf00      	nop
 800d8a8:	e010803f 	.word	0xe010803f

0800d8ac <HAL_DMA_Start_IT>:
{
 800d8ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800d8ae:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800d8b2:	2c01      	cmp	r4, #1
 800d8b4:	d035      	beq.n	800d922 <HAL_DMA_Start_IT+0x76>
 800d8b6:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d8b8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800d8ba:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 800d8bc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800d8c0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800d8c4:	2c01      	cmp	r4, #1
 800d8c6:	f04f 0402 	mov.w	r4, #2
 800d8ca:	d128      	bne.n	800d91e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 800d8cc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d8d0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d8d2:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d8d4:	6825      	ldr	r5, [r4, #0]
 800d8d6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800d8da:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800d8dc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d8de:	6883      	ldr	r3, [r0, #8]
 800d8e0:	2b40      	cmp	r3, #64	; 0x40
 800d8e2:	d119      	bne.n	800d918 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800d8e4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800d8e6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d8e8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800d8ea:	233f      	movs	r3, #63	; 0x3f
 800d8ec:	4093      	lsls	r3, r2
 800d8ee:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d8f0:	6823      	ldr	r3, [r4, #0]
 800d8f2:	f043 0316 	orr.w	r3, r3, #22
 800d8f6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800d8f8:	6963      	ldr	r3, [r4, #20]
 800d8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8fe:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800d900:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d902:	b11b      	cbz	r3, 800d90c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	f043 0308 	orr.w	r3, r3, #8
 800d90a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800d90c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d90e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800d910:	f043 0301 	orr.w	r3, r3, #1
 800d914:	6023      	str	r3, [r4, #0]
}
 800d916:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800d918:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800d91a:	60e2      	str	r2, [r4, #12]
 800d91c:	e7e4      	b.n	800d8e8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800d91e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800d922:	2002      	movs	r0, #2
 800d924:	e7f7      	b.n	800d916 <HAL_DMA_Start_IT+0x6a>

0800d926 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d926:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d003      	beq.n	800d936 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d92e:	2380      	movs	r3, #128	; 0x80
 800d930:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800d932:	2001      	movs	r0, #1
 800d934:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800d936:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800d938:	2305      	movs	r3, #5
 800d93a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 800d93e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800d940:	6813      	ldr	r3, [r2, #0]
 800d942:	f023 0301 	bic.w	r3, r3, #1
 800d946:	6013      	str	r3, [r2, #0]
}
 800d948:	4770      	bx	lr
	...

0800d94c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800d94c:	2300      	movs	r3, #0
{
 800d94e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800d950:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d952:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800d954:	4b5b      	ldr	r3, [pc, #364]	; (800dac4 <HAL_DMA_IRQHandler+0x178>)
{
 800d956:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d958:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800d95a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d95c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800d95e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d960:	409a      	lsls	r2, r3
 800d962:	4232      	tst	r2, r6
 800d964:	d00c      	beq.n	800d980 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d966:	6801      	ldr	r1, [r0, #0]
 800d968:	6808      	ldr	r0, [r1, #0]
 800d96a:	0740      	lsls	r0, r0, #29
 800d96c:	d508      	bpl.n	800d980 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d96e:	6808      	ldr	r0, [r1, #0]
 800d970:	f020 0004 	bic.w	r0, r0, #4
 800d974:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d976:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d978:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d97a:	f042 0201 	orr.w	r2, r2, #1
 800d97e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d980:	2201      	movs	r2, #1
 800d982:	409a      	lsls	r2, r3
 800d984:	4232      	tst	r2, r6
 800d986:	d008      	beq.n	800d99a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d988:	6821      	ldr	r1, [r4, #0]
 800d98a:	6949      	ldr	r1, [r1, #20]
 800d98c:	0609      	lsls	r1, r1, #24
 800d98e:	d504      	bpl.n	800d99a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d990:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d992:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d994:	f042 0202 	orr.w	r2, r2, #2
 800d998:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d99a:	2204      	movs	r2, #4
 800d99c:	409a      	lsls	r2, r3
 800d99e:	4232      	tst	r2, r6
 800d9a0:	d008      	beq.n	800d9b4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d9a2:	6821      	ldr	r1, [r4, #0]
 800d9a4:	6809      	ldr	r1, [r1, #0]
 800d9a6:	0788      	lsls	r0, r1, #30
 800d9a8:	d504      	bpl.n	800d9b4 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d9aa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d9ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d9ae:	f042 0204 	orr.w	r2, r2, #4
 800d9b2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d9b4:	2210      	movs	r2, #16
 800d9b6:	409a      	lsls	r2, r3
 800d9b8:	4232      	tst	r2, r6
 800d9ba:	d010      	beq.n	800d9de <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	6819      	ldr	r1, [r3, #0]
 800d9c0:	0709      	lsls	r1, r1, #28
 800d9c2:	d50c      	bpl.n	800d9de <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d9c4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	0350      	lsls	r0, r2, #13
 800d9ca:	d537      	bpl.n	800da3c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	0319      	lsls	r1, r3, #12
 800d9d0:	d401      	bmi.n	800d9d6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800d9d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9d4:	e000      	b.n	800d9d8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d9d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800d9d8:	b10b      	cbz	r3, 800d9de <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800d9da:	4620      	mov	r0, r4
 800d9dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d9de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d9e0:	2220      	movs	r2, #32
 800d9e2:	408a      	lsls	r2, r1
 800d9e4:	4232      	tst	r2, r6
 800d9e6:	d03a      	beq.n	800da5e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	06c6      	lsls	r6, r0, #27
 800d9ee:	d536      	bpl.n	800da5e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d9f0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d9f2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800d9f6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d9f8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d9fa:	d127      	bne.n	800da4c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d9fc:	f022 0216 	bic.w	r2, r2, #22
 800da00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800da02:	695a      	ldr	r2, [r3, #20]
 800da04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da08:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800da0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800da0c:	b90a      	cbnz	r2, 800da12 <HAL_DMA_IRQHandler+0xc6>
 800da0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800da10:	b11a      	cbz	r2, 800da1a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	f022 0208 	bic.w	r2, r2, #8
 800da18:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800da1a:	233f      	movs	r3, #63	; 0x3f
 800da1c:	408b      	lsls	r3, r1
 800da1e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800da20:	2300      	movs	r3, #0
 800da22:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800da26:	2301      	movs	r3, #1
 800da28:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800da2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d045      	beq.n	800dabe <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800da32:	4620      	mov	r0, r4
}
 800da34:	b003      	add	sp, #12
 800da36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800da3a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	05d2      	lsls	r2, r2, #23
 800da40:	d4c7      	bmi.n	800d9d2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	f022 0208 	bic.w	r2, r2, #8
 800da48:	601a      	str	r2, [r3, #0]
 800da4a:	e7c2      	b.n	800d9d2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800da4c:	0350      	lsls	r0, r2, #13
 800da4e:	d527      	bpl.n	800daa0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	0319      	lsls	r1, r3, #12
 800da54:	d431      	bmi.n	800daba <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800da56:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800da58:	b10b      	cbz	r3, 800da5e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800da5a:	4620      	mov	r0, r4
 800da5c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800da5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800da60:	b36b      	cbz	r3, 800dabe <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800da62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800da64:	07da      	lsls	r2, r3, #31
 800da66:	d519      	bpl.n	800da9c <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 800da68:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800da6a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800da6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800da70:	6813      	ldr	r3, [r2, #0]
 800da72:	f023 0301 	bic.w	r3, r3, #1
 800da76:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800da78:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800da7c:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800da80:	9b01      	ldr	r3, [sp, #4]
 800da82:	3301      	adds	r3, #1
 800da84:	42bb      	cmp	r3, r7
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	d802      	bhi.n	800da90 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800da8a:	6813      	ldr	r3, [r2, #0]
 800da8c:	07db      	lsls	r3, r3, #31
 800da8e:	d4f7      	bmi.n	800da80 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800da90:	2300      	movs	r3, #0
 800da92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800da96:	2301      	movs	r3, #1
 800da98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800da9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800da9e:	e7c6      	b.n	800da2e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800daa6:	d108      	bne.n	800daba <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800daa8:	6819      	ldr	r1, [r3, #0]
 800daaa:	f021 0110 	bic.w	r1, r1, #16
 800daae:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800dab0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800dab2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800dab6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800daba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dabc:	e7cc      	b.n	800da58 <HAL_DMA_IRQHandler+0x10c>
}
 800dabe:	b003      	add	sp, #12
 800dac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac2:	bf00      	nop
 800dac4:	200004d4 	.word	0x200004d4

0800dac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dacc:	680b      	ldr	r3, [r1, #0]
{
 800dace:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dad0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dc78 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dad4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800dad6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800dad8:	4a65      	ldr	r2, [pc, #404]	; (800dc70 <HAL_GPIO_Init+0x1a8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800dada:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800dc7c <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 800dade:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dae0:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800dae2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800dae4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800dae6:	42ac      	cmp	r4, r5
 800dae8:	f040 80ac 	bne.w	800dc44 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800daec:	684c      	ldr	r4, [r1, #4]
 800daee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800daf2:	2603      	movs	r6, #3
 800daf4:	f024 0c10 	bic.w	ip, r4, #16
 800daf8:	fa06 f60e 	lsl.w	r6, r6, lr
 800dafc:	f10c 37ff 	add.w	r7, ip, #4294967295
 800db00:	43f6      	mvns	r6, r6
 800db02:	2f01      	cmp	r7, #1
 800db04:	d811      	bhi.n	800db2a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 800db06:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800db08:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800db0c:	68cf      	ldr	r7, [r1, #12]
 800db0e:	fa07 f70e 	lsl.w	r7, r7, lr
 800db12:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800db16:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800db18:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800db1a:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800db1e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800db22:	409f      	lsls	r7, r3
 800db24:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800db28:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800db2a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800db2c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800db30:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800db34:	688f      	ldr	r7, [r1, #8]
 800db36:	fa07 f70e 	lsl.w	r7, r7, lr
 800db3a:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 800db3e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800db40:	d116      	bne.n	800db70 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 800db42:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800db46:	f003 0b07 	and.w	fp, r3, #7
 800db4a:	f04f 0c0f 	mov.w	ip, #15
 800db4e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800db52:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800db56:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800db5a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800db5e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800db62:	690f      	ldr	r7, [r1, #16]
 800db64:	fa07 f70b 	lsl.w	r7, r7, fp
 800db68:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 800db6c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800db70:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800db72:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800db74:	f004 0703 	and.w	r7, r4, #3
 800db78:	fa07 fe0e 	lsl.w	lr, r7, lr
 800db7c:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800db80:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800db82:	00e6      	lsls	r6, r4, #3
 800db84:	d55e      	bpl.n	800dc44 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db86:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800db8a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800db8e:	f003 0c03 	and.w	ip, r3, #3
 800db92:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800db96:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800db9a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800db9e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dba2:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 800dba6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800dbaa:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800dbae:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800dbb2:	9603      	str	r6, [sp, #12]
 800dbb4:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800dbb6:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 800dbba:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800dbbe:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800dbc2:	4e2c      	ldr	r6, [pc, #176]	; (800dc74 <HAL_GPIO_Init+0x1ac>)
 800dbc4:	42b0      	cmp	r0, r6
 800dbc6:	d044      	beq.n	800dc52 <HAL_GPIO_Init+0x18a>
 800dbc8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800dbcc:	42b0      	cmp	r0, r6
 800dbce:	d042      	beq.n	800dc56 <HAL_GPIO_Init+0x18e>
 800dbd0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800dbd4:	42b0      	cmp	r0, r6
 800dbd6:	d040      	beq.n	800dc5a <HAL_GPIO_Init+0x192>
 800dbd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800dbdc:	42b0      	cmp	r0, r6
 800dbde:	d03e      	beq.n	800dc5e <HAL_GPIO_Init+0x196>
 800dbe0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800dbe4:	42b0      	cmp	r0, r6
 800dbe6:	d03c      	beq.n	800dc62 <HAL_GPIO_Init+0x19a>
 800dbe8:	4548      	cmp	r0, r9
 800dbea:	d03c      	beq.n	800dc66 <HAL_GPIO_Init+0x19e>
 800dbec:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800dbf0:	42b0      	cmp	r0, r6
 800dbf2:	d03a      	beq.n	800dc6a <HAL_GPIO_Init+0x1a2>
 800dbf4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800dbf8:	42b0      	cmp	r0, r6
 800dbfa:	bf14      	ite	ne
 800dbfc:	2608      	movne	r6, #8
 800dbfe:	2607      	moveq	r6, #7
 800dc00:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800dc04:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800dc08:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800dc0c:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800dc0e:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 800dc12:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800dc14:	bf0c      	ite	eq
 800dc16:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800dc18:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800dc1a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800dc1e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800dc20:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800dc22:	bf0c      	ite	eq
 800dc24:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800dc26:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800dc28:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800dc2c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800dc2e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800dc30:	bf0c      	ite	eq
 800dc32:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800dc34:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800dc36:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800dc38:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800dc3a:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800dc3c:	bf54      	ite	pl
 800dc3e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800dc40:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800dc42:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800dc44:	3301      	adds	r3, #1
 800dc46:	2b10      	cmp	r3, #16
 800dc48:	f47f af49 	bne.w	800dade <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800dc4c:	b005      	add	sp, #20
 800dc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800dc52:	2600      	movs	r6, #0
 800dc54:	e7d4      	b.n	800dc00 <HAL_GPIO_Init+0x138>
 800dc56:	2601      	movs	r6, #1
 800dc58:	e7d2      	b.n	800dc00 <HAL_GPIO_Init+0x138>
 800dc5a:	2602      	movs	r6, #2
 800dc5c:	e7d0      	b.n	800dc00 <HAL_GPIO_Init+0x138>
 800dc5e:	2603      	movs	r6, #3
 800dc60:	e7ce      	b.n	800dc00 <HAL_GPIO_Init+0x138>
 800dc62:	2604      	movs	r6, #4
 800dc64:	e7cc      	b.n	800dc00 <HAL_GPIO_Init+0x138>
 800dc66:	2605      	movs	r6, #5
 800dc68:	e7ca      	b.n	800dc00 <HAL_GPIO_Init+0x138>
 800dc6a:	2606      	movs	r6, #6
 800dc6c:	e7c8      	b.n	800dc00 <HAL_GPIO_Init+0x138>
 800dc6e:	bf00      	nop
 800dc70:	40013c00 	.word	0x40013c00
 800dc74:	40020000 	.word	0x40020000
 800dc78:	40023800 	.word	0x40023800
 800dc7c:	40021400 	.word	0x40021400

0800dc80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800dc80:	b10a      	cbz	r2, 800dc86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800dc82:	6181      	str	r1, [r0, #24]
  }
}
 800dc84:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800dc86:	0409      	lsls	r1, r1, #16
 800dc88:	e7fb      	b.n	800dc82 <HAL_GPIO_WritePin+0x2>
	...

0800dc8c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800dc8c:	4b19      	ldr	r3, [pc, #100]	; (800dcf4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800dc8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800dc90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800dc92:	4c19      	ldr	r4, [pc, #100]	; (800dcf8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800dc94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800dc98:	641a      	str	r2, [r3, #64]	; 0x40
 800dc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dcaa:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dcac:	f7ff fa36 	bl	800d11c <HAL_GetTick>
 800dcb0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dcb2:	6863      	ldr	r3, [r4, #4]
 800dcb4:	03da      	lsls	r2, r3, #15
 800dcb6:	d50c      	bpl.n	800dcd2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcbe:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dcc0:	f7ff fa2c 	bl	800d11c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dcc4:	4c0c      	ldr	r4, [pc, #48]	; (800dcf8 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800dcc6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dcc8:	6863      	ldr	r3, [r4, #4]
 800dcca:	039b      	lsls	r3, r3, #14
 800dccc:	d50a      	bpl.n	800dce4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800dcce:	2000      	movs	r0, #0
 800dcd0:	e006      	b.n	800dce0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dcd2:	f7ff fa23 	bl	800d11c <HAL_GetTick>
 800dcd6:	1b40      	subs	r0, r0, r5
 800dcd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800dcdc:	d9e9      	bls.n	800dcb2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800dcde:	2003      	movs	r0, #3
}
 800dce0:	b003      	add	sp, #12
 800dce2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dce4:	f7ff fa1a 	bl	800d11c <HAL_GetTick>
 800dce8:	1b40      	subs	r0, r0, r5
 800dcea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800dcee:	d9eb      	bls.n	800dcc8 <HAL_PWREx_EnableOverDrive+0x3c>
 800dcf0:	e7f5      	b.n	800dcde <HAL_PWREx_EnableOverDrive+0x52>
 800dcf2:	bf00      	nop
 800dcf4:	40023800 	.word	0x40023800
 800dcf8:	40007000 	.word	0x40007000

0800dcfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dcfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dd00:	4604      	mov	r4, r0
 800dd02:	b908      	cbnz	r0, 800dd08 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800dd04:	2001      	movs	r0, #1
 800dd06:	e03f      	b.n	800dd88 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dd08:	6803      	ldr	r3, [r0, #0]
 800dd0a:	07d8      	lsls	r0, r3, #31
 800dd0c:	d410      	bmi.n	800dd30 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	0799      	lsls	r1, r3, #30
 800dd12:	d460      	bmi.n	800ddd6 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	0719      	lsls	r1, r3, #28
 800dd18:	f100 80a5 	bmi.w	800de66 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd1c:	6823      	ldr	r3, [r4, #0]
 800dd1e:	075a      	lsls	r2, r3, #29
 800dd20:	f100 80c6 	bmi.w	800deb0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dd24:	69a0      	ldr	r0, [r4, #24]
 800dd26:	2800      	cmp	r0, #0
 800dd28:	f040 8130 	bne.w	800df8c <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	e02b      	b.n	800dd88 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dd30:	4b94      	ldr	r3, [pc, #592]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800dd32:	689a      	ldr	r2, [r3, #8]
 800dd34:	f002 020c 	and.w	r2, r2, #12
 800dd38:	2a04      	cmp	r2, #4
 800dd3a:	d007      	beq.n	800dd4c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dd3c:	689a      	ldr	r2, [r3, #8]
 800dd3e:	f002 020c 	and.w	r2, r2, #12
 800dd42:	2a08      	cmp	r2, #8
 800dd44:	d10a      	bne.n	800dd5c <HAL_RCC_OscConfig+0x60>
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	025a      	lsls	r2, r3, #9
 800dd4a:	d507      	bpl.n	800dd5c <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd4c:	4b8d      	ldr	r3, [pc, #564]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	039b      	lsls	r3, r3, #14
 800dd52:	d5dc      	bpl.n	800dd0e <HAL_RCC_OscConfig+0x12>
 800dd54:	6863      	ldr	r3, [r4, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1d9      	bne.n	800dd0e <HAL_RCC_OscConfig+0x12>
 800dd5a:	e7d3      	b.n	800dd04 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd5c:	6863      	ldr	r3, [r4, #4]
 800dd5e:	4d89      	ldr	r5, [pc, #548]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800dd60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd64:	d113      	bne.n	800dd8e <HAL_RCC_OscConfig+0x92>
 800dd66:	682b      	ldr	r3, [r5, #0]
 800dd68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd6c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dd6e:	f7ff f9d5 	bl	800d11c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd72:	4d84      	ldr	r5, [pc, #528]	; (800df84 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800dd74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd76:	682b      	ldr	r3, [r5, #0]
 800dd78:	039f      	lsls	r7, r3, #14
 800dd7a:	d4c8      	bmi.n	800dd0e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd7c:	f7ff f9ce 	bl	800d11c <HAL_GetTick>
 800dd80:	1b80      	subs	r0, r0, r6
 800dd82:	2864      	cmp	r0, #100	; 0x64
 800dd84:	d9f7      	bls.n	800dd76 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800dd86:	2003      	movs	r0, #3
}
 800dd88:	b002      	add	sp, #8
 800dd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd8e:	b99b      	cbnz	r3, 800ddb8 <HAL_RCC_OscConfig+0xbc>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd96:	602b      	str	r3, [r5, #0]
 800dd98:	682b      	ldr	r3, [r5, #0]
 800dd9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd9e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dda0:	f7ff f9bc 	bl	800d11c <HAL_GetTick>
 800dda4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dda6:	682b      	ldr	r3, [r5, #0]
 800dda8:	0398      	lsls	r0, r3, #14
 800ddaa:	d5b0      	bpl.n	800dd0e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ddac:	f7ff f9b6 	bl	800d11c <HAL_GetTick>
 800ddb0:	1b80      	subs	r0, r0, r6
 800ddb2:	2864      	cmp	r0, #100	; 0x64
 800ddb4:	d9f7      	bls.n	800dda6 <HAL_RCC_OscConfig+0xaa>
 800ddb6:	e7e6      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ddb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	d103      	bne.n	800ddc8 <HAL_RCC_OscConfig+0xcc>
 800ddc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ddc4:	602b      	str	r3, [r5, #0]
 800ddc6:	e7ce      	b.n	800dd66 <HAL_RCC_OscConfig+0x6a>
 800ddc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddcc:	602b      	str	r3, [r5, #0]
 800ddce:	682b      	ldr	r3, [r5, #0]
 800ddd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ddd4:	e7ca      	b.n	800dd6c <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ddd6:	4b6b      	ldr	r3, [pc, #428]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800ddd8:	689a      	ldr	r2, [r3, #8]
 800ddda:	f012 0f0c 	tst.w	r2, #12
 800ddde:	d007      	beq.n	800ddf0 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dde0:	689a      	ldr	r2, [r3, #8]
 800dde2:	f002 020c 	and.w	r2, r2, #12
 800dde6:	2a08      	cmp	r2, #8
 800dde8:	d111      	bne.n	800de0e <HAL_RCC_OscConfig+0x112>
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	0259      	lsls	r1, r3, #9
 800ddee:	d40e      	bmi.n	800de0e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ddf0:	4b64      	ldr	r3, [pc, #400]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	0792      	lsls	r2, r2, #30
 800ddf6:	d502      	bpl.n	800ddfe <HAL_RCC_OscConfig+0x102>
 800ddf8:	68e2      	ldr	r2, [r4, #12]
 800ddfa:	2a01      	cmp	r2, #1
 800ddfc:	d182      	bne.n	800dd04 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	6921      	ldr	r1, [r4, #16]
 800de02:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800de06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800de0a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800de0c:	e782      	b.n	800dd14 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800de0e:	68e3      	ldr	r3, [r4, #12]
 800de10:	4d5c      	ldr	r5, [pc, #368]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800de12:	b1bb      	cbz	r3, 800de44 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800de14:	682b      	ldr	r3, [r5, #0]
 800de16:	f043 0301 	orr.w	r3, r3, #1
 800de1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800de1c:	f7ff f97e 	bl	800d11c <HAL_GetTick>
 800de20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de22:	682b      	ldr	r3, [r5, #0]
 800de24:	079f      	lsls	r7, r3, #30
 800de26:	d507      	bpl.n	800de38 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	6922      	ldr	r2, [r4, #16]
 800de2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800de30:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800de34:	602b      	str	r3, [r5, #0]
 800de36:	e76d      	b.n	800dd14 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de38:	f7ff f970 	bl	800d11c <HAL_GetTick>
 800de3c:	1b80      	subs	r0, r0, r6
 800de3e:	2802      	cmp	r0, #2
 800de40:	d9ef      	bls.n	800de22 <HAL_RCC_OscConfig+0x126>
 800de42:	e7a0      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800de44:	682b      	ldr	r3, [r5, #0]
 800de46:	f023 0301 	bic.w	r3, r3, #1
 800de4a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800de4c:	f7ff f966 	bl	800d11c <HAL_GetTick>
 800de50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de52:	682b      	ldr	r3, [r5, #0]
 800de54:	0798      	lsls	r0, r3, #30
 800de56:	f57f af5d 	bpl.w	800dd14 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de5a:	f7ff f95f 	bl	800d11c <HAL_GetTick>
 800de5e:	1b80      	subs	r0, r0, r6
 800de60:	2802      	cmp	r0, #2
 800de62:	d9f6      	bls.n	800de52 <HAL_RCC_OscConfig+0x156>
 800de64:	e78f      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800de66:	6963      	ldr	r3, [r4, #20]
 800de68:	4d46      	ldr	r5, [pc, #280]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800de6a:	b183      	cbz	r3, 800de8e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800de6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800de6e:	f043 0301 	orr.w	r3, r3, #1
 800de72:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800de74:	f7ff f952 	bl	800d11c <HAL_GetTick>
 800de78:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800de7c:	079b      	lsls	r3, r3, #30
 800de7e:	f53f af4d 	bmi.w	800dd1c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800de82:	f7ff f94b 	bl	800d11c <HAL_GetTick>
 800de86:	1b80      	subs	r0, r0, r6
 800de88:	2802      	cmp	r0, #2
 800de8a:	d9f6      	bls.n	800de7a <HAL_RCC_OscConfig+0x17e>
 800de8c:	e77b      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800de8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800de90:	f023 0301 	bic.w	r3, r3, #1
 800de94:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800de96:	f7ff f941 	bl	800d11c <HAL_GetTick>
 800de9a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800de9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800de9e:	079f      	lsls	r7, r3, #30
 800dea0:	f57f af3c 	bpl.w	800dd1c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dea4:	f7ff f93a 	bl	800d11c <HAL_GetTick>
 800dea8:	1b80      	subs	r0, r0, r6
 800deaa:	2802      	cmp	r0, #2
 800deac:	d9f6      	bls.n	800de9c <HAL_RCC_OscConfig+0x1a0>
 800deae:	e76a      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800deb0:	4b34      	ldr	r3, [pc, #208]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800deb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800deb4:	00d0      	lsls	r0, r2, #3
 800deb6:	d427      	bmi.n	800df08 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800deb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800deba:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800debc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800dec0:	641a      	str	r2, [r3, #64]	; 0x40
 800dec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800decc:	4d2e      	ldr	r5, [pc, #184]	; (800df88 <HAL_RCC_OscConfig+0x28c>)
 800dece:	682b      	ldr	r3, [r5, #0]
 800ded0:	05d9      	lsls	r1, r3, #23
 800ded2:	d51b      	bpl.n	800df0c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ded4:	68a3      	ldr	r3, [r4, #8]
 800ded6:	4d2b      	ldr	r5, [pc, #172]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d127      	bne.n	800df2c <HAL_RCC_OscConfig+0x230>
 800dedc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800dede:	f043 0301 	orr.w	r3, r3, #1
 800dee2:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dee4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800dee8:	f7ff f918 	bl	800d11c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800deec:	4f25      	ldr	r7, [pc, #148]	; (800df84 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800deee:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800def0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800def2:	079b      	lsls	r3, r3, #30
 800def4:	d53f      	bpl.n	800df76 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800def6:	2e00      	cmp	r6, #0
 800def8:	f43f af14 	beq.w	800dd24 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800defc:	4a21      	ldr	r2, [pc, #132]	; (800df84 <HAL_RCC_OscConfig+0x288>)
 800defe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800df00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800df04:	6413      	str	r3, [r2, #64]	; 0x40
 800df06:	e70d      	b.n	800dd24 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 800df08:	2600      	movs	r6, #0
 800df0a:	e7df      	b.n	800decc <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800df0c:	682b      	ldr	r3, [r5, #0]
 800df0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800df14:	f7ff f902 	bl	800d11c <HAL_GetTick>
 800df18:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800df1a:	682b      	ldr	r3, [r5, #0]
 800df1c:	05da      	lsls	r2, r3, #23
 800df1e:	d4d9      	bmi.n	800ded4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df20:	f7ff f8fc 	bl	800d11c <HAL_GetTick>
 800df24:	1bc0      	subs	r0, r0, r7
 800df26:	2864      	cmp	r0, #100	; 0x64
 800df28:	d9f7      	bls.n	800df1a <HAL_RCC_OscConfig+0x21e>
 800df2a:	e72c      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df2c:	b9ab      	cbnz	r3, 800df5a <HAL_RCC_OscConfig+0x25e>
 800df2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df30:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df34:	f023 0301 	bic.w	r3, r3, #1
 800df38:	672b      	str	r3, [r5, #112]	; 0x70
 800df3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800df3c:	f023 0304 	bic.w	r3, r3, #4
 800df40:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800df42:	f7ff f8eb 	bl	800d11c <HAL_GetTick>
 800df46:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800df48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800df4a:	0798      	lsls	r0, r3, #30
 800df4c:	d5d3      	bpl.n	800def6 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df4e:	f7ff f8e5 	bl	800d11c <HAL_GetTick>
 800df52:	1bc0      	subs	r0, r0, r7
 800df54:	4540      	cmp	r0, r8
 800df56:	d9f7      	bls.n	800df48 <HAL_RCC_OscConfig+0x24c>
 800df58:	e715      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df5a:	2b05      	cmp	r3, #5
 800df5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800df5e:	d103      	bne.n	800df68 <HAL_RCC_OscConfig+0x26c>
 800df60:	f043 0304 	orr.w	r3, r3, #4
 800df64:	672b      	str	r3, [r5, #112]	; 0x70
 800df66:	e7b9      	b.n	800dedc <HAL_RCC_OscConfig+0x1e0>
 800df68:	f023 0301 	bic.w	r3, r3, #1
 800df6c:	672b      	str	r3, [r5, #112]	; 0x70
 800df6e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800df70:	f023 0304 	bic.w	r3, r3, #4
 800df74:	e7b5      	b.n	800dee2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df76:	f7ff f8d1 	bl	800d11c <HAL_GetTick>
 800df7a:	eba0 0008 	sub.w	r0, r0, r8
 800df7e:	42a8      	cmp	r0, r5
 800df80:	d9b6      	bls.n	800def0 <HAL_RCC_OscConfig+0x1f4>
 800df82:	e700      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
 800df84:	40023800 	.word	0x40023800
 800df88:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800df8c:	4d38      	ldr	r5, [pc, #224]	; (800e070 <HAL_RCC_OscConfig+0x374>)
 800df8e:	68ab      	ldr	r3, [r5, #8]
 800df90:	f003 030c 	and.w	r3, r3, #12
 800df94:	2b08      	cmp	r3, #8
 800df96:	d041      	beq.n	800e01c <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 800df98:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800df9a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800df9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dfa0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dfa2:	d12e      	bne.n	800e002 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 800dfa4:	f7ff f8ba 	bl	800d11c <HAL_GetTick>
 800dfa8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dfaa:	682b      	ldr	r3, [r5, #0]
 800dfac:	0199      	lsls	r1, r3, #6
 800dfae:	d422      	bmi.n	800dff6 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dfb0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dfb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dfbc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800dfc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dfc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dfc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfc8:	4c29      	ldr	r4, [pc, #164]	; (800e070 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dfca:	0852      	lsrs	r2, r2, #1
 800dfcc:	3a01      	subs	r2, #1
 800dfce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfd2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800dfd4:	682b      	ldr	r3, [r5, #0]
 800dfd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dfda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800dfdc:	f7ff f89e 	bl	800d11c <HAL_GetTick>
 800dfe0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	019a      	lsls	r2, r3, #6
 800dfe6:	f53f aea1 	bmi.w	800dd2c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfea:	f7ff f897 	bl	800d11c <HAL_GetTick>
 800dfee:	1b40      	subs	r0, r0, r5
 800dff0:	2802      	cmp	r0, #2
 800dff2:	d9f6      	bls.n	800dfe2 <HAL_RCC_OscConfig+0x2e6>
 800dff4:	e6c7      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dff6:	f7ff f891 	bl	800d11c <HAL_GetTick>
 800dffa:	1b80      	subs	r0, r0, r6
 800dffc:	2802      	cmp	r0, #2
 800dffe:	d9d4      	bls.n	800dfaa <HAL_RCC_OscConfig+0x2ae>
 800e000:	e6c1      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 800e002:	f7ff f88b 	bl	800d11c <HAL_GetTick>
 800e006:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	019b      	lsls	r3, r3, #6
 800e00c:	f57f ae8e 	bpl.w	800dd2c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e010:	f7ff f884 	bl	800d11c <HAL_GetTick>
 800e014:	1b00      	subs	r0, r0, r4
 800e016:	2802      	cmp	r0, #2
 800e018:	d9f6      	bls.n	800e008 <HAL_RCC_OscConfig+0x30c>
 800e01a:	e6b4      	b.n	800dd86 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e01c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800e01e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e020:	f43f aeb2 	beq.w	800dd88 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e028:	69e1      	ldr	r1, [r4, #28]
 800e02a:	428a      	cmp	r2, r1
 800e02c:	f47f ae6a 	bne.w	800dd04 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e034:	6a21      	ldr	r1, [r4, #32]
 800e036:	428a      	cmp	r2, r1
 800e038:	f47f ae64 	bne.w	800dd04 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e03c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e040:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e042:	401a      	ands	r2, r3
 800e044:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800e048:	f47f ae5c 	bne.w	800dd04 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e04c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e04e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800e052:	0852      	lsrs	r2, r2, #1
 800e054:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e056:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800e05a:	f47f ae53 	bne.w	800dd04 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e05e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e060:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e064:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 800e068:	bf14      	ite	ne
 800e06a:	2001      	movne	r0, #1
 800e06c:	2000      	moveq	r0, #0
 800e06e:	e68b      	b.n	800dd88 <HAL_RCC_OscConfig+0x8c>
 800e070:	40023800 	.word	0x40023800

0800e074 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e074:	4913      	ldr	r1, [pc, #76]	; (800e0c4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800e076:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e078:	688b      	ldr	r3, [r1, #8]
 800e07a:	f003 030c 	and.w	r3, r3, #12
 800e07e:	2b04      	cmp	r3, #4
 800e080:	d003      	beq.n	800e08a <HAL_RCC_GetSysClockFreq+0x16>
 800e082:	2b08      	cmp	r3, #8
 800e084:	d003      	beq.n	800e08e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e086:	4810      	ldr	r0, [pc, #64]	; (800e0c8 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800e088:	e000      	b.n	800e08c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800e08a:	4810      	ldr	r0, [pc, #64]	; (800e0cc <HAL_RCC_GetSysClockFreq+0x58>)
}
 800e08c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e08e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e090:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e092:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e094:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e098:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e09c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800e0a0:	bf1a      	itte	ne
 800e0a2:	480a      	ldrne	r0, [pc, #40]	; (800e0cc <HAL_RCC_GetSysClockFreq+0x58>)
 800e0a4:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e0a6:	4808      	ldreq	r0, [pc, #32]	; (800e0c8 <HAL_RCC_GetSysClockFreq+0x54>)
 800e0a8:	fba1 0100 	umull	r0, r1, r1, r0
 800e0ac:	f7f2 fe14 	bl	8000cd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e0b0:	4b04      	ldr	r3, [pc, #16]	; (800e0c4 <HAL_RCC_GetSysClockFreq+0x50>)
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800e0bc:	fbb0 f0f3 	udiv	r0, r0, r3
 800e0c0:	e7e4      	b.n	800e08c <HAL_RCC_GetSysClockFreq+0x18>
 800e0c2:	bf00      	nop
 800e0c4:	40023800 	.word	0x40023800
 800e0c8:	00f42400 	.word	0x00f42400
 800e0cc:	017d7840 	.word	0x017d7840

0800e0d0 <HAL_RCC_ClockConfig>:
{
 800e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	b910      	cbnz	r0, 800e0e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800e0da:	2001      	movs	r0, #1
}
 800e0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e0e0:	4a45      	ldr	r2, [pc, #276]	; (800e1f8 <HAL_RCC_ClockConfig+0x128>)
 800e0e2:	6813      	ldr	r3, [r2, #0]
 800e0e4:	f003 030f 	and.w	r3, r3, #15
 800e0e8:	428b      	cmp	r3, r1
 800e0ea:	d328      	bcc.n	800e13e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e0ec:	6821      	ldr	r1, [r4, #0]
 800e0ee:	078f      	lsls	r7, r1, #30
 800e0f0:	d430      	bmi.n	800e154 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e0f2:	07c8      	lsls	r0, r1, #31
 800e0f4:	d443      	bmi.n	800e17e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e0f6:	4a40      	ldr	r2, [pc, #256]	; (800e1f8 <HAL_RCC_ClockConfig+0x128>)
 800e0f8:	6813      	ldr	r3, [r2, #0]
 800e0fa:	f003 030f 	and.w	r3, r3, #15
 800e0fe:	42ab      	cmp	r3, r5
 800e100:	d866      	bhi.n	800e1d0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e102:	6822      	ldr	r2, [r4, #0]
 800e104:	0751      	lsls	r1, r2, #29
 800e106:	d46f      	bmi.n	800e1e8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e108:	0713      	lsls	r3, r2, #28
 800e10a:	d507      	bpl.n	800e11c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e10c:	4a3b      	ldr	r2, [pc, #236]	; (800e1fc <HAL_RCC_ClockConfig+0x12c>)
 800e10e:	6921      	ldr	r1, [r4, #16]
 800e110:	6893      	ldr	r3, [r2, #8]
 800e112:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e116:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e11a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e11c:	f7ff ffaa 	bl	800e074 <HAL_RCC_GetSysClockFreq>
 800e120:	4b36      	ldr	r3, [pc, #216]	; (800e1fc <HAL_RCC_ClockConfig+0x12c>)
 800e122:	4a37      	ldr	r2, [pc, #220]	; (800e200 <HAL_RCC_ClockConfig+0x130>)
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e12a:	5cd3      	ldrb	r3, [r2, r3]
 800e12c:	40d8      	lsrs	r0, r3
 800e12e:	4b35      	ldr	r3, [pc, #212]	; (800e204 <HAL_RCC_ClockConfig+0x134>)
 800e130:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800e132:	4b35      	ldr	r3, [pc, #212]	; (800e208 <HAL_RCC_ClockConfig+0x138>)
 800e134:	6818      	ldr	r0, [r3, #0]
 800e136:	f7fe ffaf 	bl	800d098 <HAL_InitTick>
  return HAL_OK;
 800e13a:	2000      	movs	r0, #0
 800e13c:	e7ce      	b.n	800e0dc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e13e:	6813      	ldr	r3, [r2, #0]
 800e140:	f023 030f 	bic.w	r3, r3, #15
 800e144:	430b      	orrs	r3, r1
 800e146:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e148:	6813      	ldr	r3, [r2, #0]
 800e14a:	f003 030f 	and.w	r3, r3, #15
 800e14e:	428b      	cmp	r3, r1
 800e150:	d1c3      	bne.n	800e0da <HAL_RCC_ClockConfig+0xa>
 800e152:	e7cb      	b.n	800e0ec <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e154:	f011 0f04 	tst.w	r1, #4
 800e158:	4b28      	ldr	r3, [pc, #160]	; (800e1fc <HAL_RCC_ClockConfig+0x12c>)
 800e15a:	d003      	beq.n	800e164 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e15c:	689a      	ldr	r2, [r3, #8]
 800e15e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800e162:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e164:	070e      	lsls	r6, r1, #28
 800e166:	d503      	bpl.n	800e170 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e168:	689a      	ldr	r2, [r3, #8]
 800e16a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800e16e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e170:	689a      	ldr	r2, [r3, #8]
 800e172:	68a0      	ldr	r0, [r4, #8]
 800e174:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800e178:	4302      	orrs	r2, r0
 800e17a:	609a      	str	r2, [r3, #8]
 800e17c:	e7b9      	b.n	800e0f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e17e:	6861      	ldr	r1, [r4, #4]
 800e180:	4b1e      	ldr	r3, [pc, #120]	; (800e1fc <HAL_RCC_ClockConfig+0x12c>)
 800e182:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e184:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e186:	d11b      	bne.n	800e1c0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e188:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e18c:	d0a5      	beq.n	800e0da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e18e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e190:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e194:	4e19      	ldr	r6, [pc, #100]	; (800e1fc <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e196:	f022 0203 	bic.w	r2, r2, #3
 800e19a:	430a      	orrs	r2, r1
 800e19c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800e19e:	f7fe ffbd 	bl	800d11c <HAL_GetTick>
 800e1a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e1a4:	68b3      	ldr	r3, [r6, #8]
 800e1a6:	6862      	ldr	r2, [r4, #4]
 800e1a8:	f003 030c 	and.w	r3, r3, #12
 800e1ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800e1b0:	d0a1      	beq.n	800e0f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e1b2:	f7fe ffb3 	bl	800d11c <HAL_GetTick>
 800e1b6:	1bc0      	subs	r0, r0, r7
 800e1b8:	4540      	cmp	r0, r8
 800e1ba:	d9f3      	bls.n	800e1a4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800e1bc:	2003      	movs	r0, #3
 800e1be:	e78d      	b.n	800e0dc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e1c0:	2902      	cmp	r1, #2
 800e1c2:	d102      	bne.n	800e1ca <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e1c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800e1c8:	e7e0      	b.n	800e18c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e1ca:	f012 0f02 	tst.w	r2, #2
 800e1ce:	e7dd      	b.n	800e18c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e1d0:	6813      	ldr	r3, [r2, #0]
 800e1d2:	f023 030f 	bic.w	r3, r3, #15
 800e1d6:	432b      	orrs	r3, r5
 800e1d8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1da:	6813      	ldr	r3, [r2, #0]
 800e1dc:	f003 030f 	and.w	r3, r3, #15
 800e1e0:	42ab      	cmp	r3, r5
 800e1e2:	f47f af7a 	bne.w	800e0da <HAL_RCC_ClockConfig+0xa>
 800e1e6:	e78c      	b.n	800e102 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e1e8:	4904      	ldr	r1, [pc, #16]	; (800e1fc <HAL_RCC_ClockConfig+0x12c>)
 800e1ea:	68e0      	ldr	r0, [r4, #12]
 800e1ec:	688b      	ldr	r3, [r1, #8]
 800e1ee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800e1f2:	4303      	orrs	r3, r0
 800e1f4:	608b      	str	r3, [r1, #8]
 800e1f6:	e787      	b.n	800e108 <HAL_RCC_ClockConfig+0x38>
 800e1f8:	40023c00 	.word	0x40023c00
 800e1fc:	40023800 	.word	0x40023800
 800e200:	08017a74 	.word	0x08017a74
 800e204:	200004d4 	.word	0x200004d4
 800e208:	20002ca4 	.word	0x20002ca4

0800e20c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e20c:	4b04      	ldr	r3, [pc, #16]	; (800e220 <HAL_RCC_GetPCLK1Freq+0x14>)
 800e20e:	4a05      	ldr	r2, [pc, #20]	; (800e224 <HAL_RCC_GetPCLK1Freq+0x18>)
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800e216:	5cd3      	ldrb	r3, [r2, r3]
 800e218:	4a03      	ldr	r2, [pc, #12]	; (800e228 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e21a:	6810      	ldr	r0, [r2, #0]
}
 800e21c:	40d8      	lsrs	r0, r3
 800e21e:	4770      	bx	lr
 800e220:	40023800 	.word	0x40023800
 800e224:	08017a84 	.word	0x08017a84
 800e228:	200004d4 	.word	0x200004d4

0800e22c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e22c:	4b04      	ldr	r3, [pc, #16]	; (800e240 <HAL_RCC_GetPCLK2Freq+0x14>)
 800e22e:	4a05      	ldr	r2, [pc, #20]	; (800e244 <HAL_RCC_GetPCLK2Freq+0x18>)
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800e236:	5cd3      	ldrb	r3, [r2, r3]
 800e238:	4a03      	ldr	r2, [pc, #12]	; (800e248 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800e23a:	6810      	ldr	r0, [r2, #0]
}
 800e23c:	40d8      	lsrs	r0, r3
 800e23e:	4770      	bx	lr
 800e240:	40023800 	.word	0x40023800
 800e244:	08017a84 	.word	0x08017a84
 800e248:	200004d4 	.word	0x200004d4

0800e24c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e24c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e250:	6802      	ldr	r2, [r0, #0]
{
 800e252:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e254:	f012 0601 	ands.w	r6, r2, #1
 800e258:	d00b      	beq.n	800e272 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e25a:	4bb9      	ldr	r3, [pc, #740]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e25c:	6899      	ldr	r1, [r3, #8]
 800e25e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800e262:	6099      	str	r1, [r3, #8]
 800e264:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800e266:	6899      	ldr	r1, [r3, #8]
 800e268:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e26a:	fab6 f686 	clz	r6, r6
 800e26e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e270:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e272:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800e276:	d012      	beq.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e278:	49b1      	ldr	r1, [pc, #708]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e27a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800e27c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e280:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e284:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800e288:	bf08      	it	eq
 800e28a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e28c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e290:	bf16      	itet	ne
 800e292:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800e296:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e298:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e29a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e29e:	02d7      	lsls	r7, r2, #11
 800e2a0:	d510      	bpl.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e2a2:	48a7      	ldr	r0, [pc, #668]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e2a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e2a6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e2aa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e2ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e2b2:	ea43 0301 	orr.w	r3, r3, r1
 800e2b6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e2ba:	f000 814b 	beq.w	800e554 <HAL_RCCEx_PeriphCLKConfig+0x308>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800e2be:	2900      	cmp	r1, #0
 800e2c0:	bf08      	it	eq
 800e2c2:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e2c4:	0690      	lsls	r0, r2, #26
 800e2c6:	d531      	bpl.n	800e32c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e2c8:	4b9d      	ldr	r3, [pc, #628]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e2ca:	4f9e      	ldr	r7, [pc, #632]	; (800e544 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800e2cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e2d2:	641a      	str	r2, [r3, #64]	; 0x40
 800e2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2da:	9301      	str	r3, [sp, #4]
 800e2dc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2e4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2e6:	f7fe ff19 	bl	800d11c <HAL_GetTick>
 800e2ea:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	05d9      	lsls	r1, r3, #23
 800e2f0:	f140 8132 	bpl.w	800e558 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e2f4:	4f92      	ldr	r7, [pc, #584]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e2f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e2f8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800e2fc:	f040 8137 	bne.w	800e56e <HAL_RCCEx_PeriphCLKConfig+0x322>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e302:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800e306:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e30a:	4a8d      	ldr	r2, [pc, #564]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e30c:	f040 8155 	bne.w	800e5ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e310:	6891      	ldr	r1, [r2, #8]
 800e312:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800e316:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800e31a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800e31e:	4301      	orrs	r1, r0
 800e320:	6091      	str	r1, [r2, #8]
 800e322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e326:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e328:	430b      	orrs	r3, r1
 800e32a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e32c:	6823      	ldr	r3, [r4, #0]
 800e32e:	06df      	lsls	r7, r3, #27
 800e330:	d50c      	bpl.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e332:	4a83      	ldr	r2, [pc, #524]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e334:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800e338:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800e33c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800e340:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800e344:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e346:	4301      	orrs	r1, r0
 800e348:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e34c:	0458      	lsls	r0, r3, #17
 800e34e:	d508      	bpl.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e350:	497b      	ldr	r1, [pc, #492]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e352:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e354:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e358:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800e35c:	4302      	orrs	r2, r0
 800e35e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e362:	0419      	lsls	r1, r3, #16
 800e364:	d508      	bpl.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e366:	4976      	ldr	r1, [pc, #472]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e368:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800e36a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e36e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800e372:	4302      	orrs	r2, r0
 800e374:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e378:	03da      	lsls	r2, r3, #15
 800e37a:	d508      	bpl.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e37c:	4970      	ldr	r1, [pc, #448]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e37e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800e380:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e384:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800e388:	4302      	orrs	r2, r0
 800e38a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e38e:	065f      	lsls	r7, r3, #25
 800e390:	d508      	bpl.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e392:	496b      	ldr	r1, [pc, #428]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e394:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e396:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e39a:	f022 0203 	bic.w	r2, r2, #3
 800e39e:	4302      	orrs	r2, r0
 800e3a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e3a4:	0618      	lsls	r0, r3, #24
 800e3a6:	d508      	bpl.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e3a8:	4965      	ldr	r1, [pc, #404]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e3aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e3ac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e3b0:	f022 020c 	bic.w	r2, r2, #12
 800e3b4:	4302      	orrs	r2, r0
 800e3b6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e3ba:	05d9      	lsls	r1, r3, #23
 800e3bc:	d508      	bpl.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e3be:	4960      	ldr	r1, [pc, #384]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e3c0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e3c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e3c6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800e3ca:	4302      	orrs	r2, r0
 800e3cc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e3d0:	059a      	lsls	r2, r3, #22
 800e3d2:	d508      	bpl.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e3d4:	495a      	ldr	r1, [pc, #360]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e3d6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e3d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e3dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e3e0:	4302      	orrs	r2, r0
 800e3e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e3e6:	055f      	lsls	r7, r3, #21
 800e3e8:	d508      	bpl.n	800e3fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e3ea:	4955      	ldr	r1, [pc, #340]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e3ec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e3ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e3f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e3f6:	4302      	orrs	r2, r0
 800e3f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e3fc:	0518      	lsls	r0, r3, #20
 800e3fe:	d508      	bpl.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e400:	494f      	ldr	r1, [pc, #316]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e402:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e404:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e408:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e40c:	4302      	orrs	r2, r0
 800e40e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e412:	04d9      	lsls	r1, r3, #19
 800e414:	d508      	bpl.n	800e428 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e416:	494a      	ldr	r1, [pc, #296]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e418:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e41a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e41e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e422:	4302      	orrs	r2, r0
 800e424:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e428:	049a      	lsls	r2, r3, #18
 800e42a:	d508      	bpl.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e42c:	4944      	ldr	r1, [pc, #272]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e42e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e430:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e434:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e438:	4302      	orrs	r2, r0
 800e43a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e43e:	029f      	lsls	r7, r3, #10
 800e440:	d50c      	bpl.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e442:	483f      	ldr	r0, [pc, #252]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e444:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800e446:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800e44a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e44e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800e452:	bf08      	it	eq
 800e454:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e456:	430a      	orrs	r2, r1
 800e458:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e45c:	0358      	lsls	r0, r3, #13
 800e45e:	d508      	bpl.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e460:	4937      	ldr	r1, [pc, #220]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e462:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800e464:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e468:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e46c:	4302      	orrs	r2, r0
 800e46e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e472:	0219      	lsls	r1, r3, #8
 800e474:	d508      	bpl.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e476:	4932      	ldr	r1, [pc, #200]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e478:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800e47a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e47e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e482:	4302      	orrs	r2, r0
 800e484:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e488:	015a      	lsls	r2, r3, #5
 800e48a:	d508      	bpl.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e48c:	492c      	ldr	r1, [pc, #176]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e48e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e490:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800e494:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800e498:	4302      	orrs	r2, r0
 800e49a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800e49e:	2e00      	cmp	r6, #0
 800e4a0:	f040 808f 	bne.w	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800e4a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4a8:	f000 808b 	beq.w	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e4ac:	2d01      	cmp	r5, #1
 800e4ae:	d14f      	bne.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e4b0:	4d23      	ldr	r5, [pc, #140]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e4b2:	682b      	ldr	r3, [r5, #0]
 800e4b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e4b8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4ba:	f7fe fe2f 	bl	800d11c <HAL_GetTick>
 800e4be:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e4c0:	682b      	ldr	r3, [r5, #0]
 800e4c2:	009f      	lsls	r7, r3, #2
 800e4c4:	f100 80e0 	bmi.w	800e688 <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e4c8:	6820      	ldr	r0, [r4, #0]
 800e4ca:	0305      	lsls	r5, r0, #12
 800e4cc:	d501      	bpl.n	800e4d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800e4ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4d0:	b11b      	cbz	r3, 800e4da <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800e4d2:	02c1      	lsls	r1, r0, #11
 800e4d4:	d518      	bpl.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e4d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4d8:	b9b3      	cbnz	r3, 800e508 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e4da:	4919      	ldr	r1, [pc, #100]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800e4dc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e4e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800e4e4:	061b      	lsls	r3, r3, #24
 800e4e6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800e4ea:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e4f4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800e4f8:	6a22      	ldr	r2, [r4, #32]
 800e4fa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800e4fe:	3a01      	subs	r2, #1
 800e500:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e508:	0282      	lsls	r2, r0, #10
 800e50a:	d510      	bpl.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800e50c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e50e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e512:	d10c      	bne.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e514:	490a      	ldr	r1, [pc, #40]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800e516:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e518:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800e51c:	6920      	ldr	r0, [r4, #16]
 800e51e:	041b      	lsls	r3, r3, #16
 800e520:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800e524:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e528:	4313      	orrs	r3, r2
 800e52a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e52e:	4c04      	ldr	r4, [pc, #16]	; (800e540 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e536:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e538:	f7fe fdf0 	bl	800d11c <HAL_GetTick>
 800e53c:	4605      	mov	r5, r0
 800e53e:	e003      	b.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800e540:	40023800 	.word	0x40023800
 800e544:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e548:	6823      	ldr	r3, [r4, #0]
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	f140 80a3 	bpl.w	800e696 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800e550:	2000      	movs	r0, #0
 800e552:	e009      	b.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      plli2sused = 1;
 800e554:	2601      	movs	r6, #1
 800e556:	e6b5      	b.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e558:	f7fe fde0 	bl	800d11c <HAL_GetTick>
 800e55c:	eba0 0008 	sub.w	r0, r0, r8
 800e560:	2864      	cmp	r0, #100	; 0x64
 800e562:	f67f aec3 	bls.w	800e2ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 800e566:	2003      	movs	r0, #3
}
 800e568:	b003      	add	sp, #12
 800e56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e56e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e570:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800e574:	4293      	cmp	r3, r2
 800e576:	f43f aec3 	beq.w	800e300 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e57a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800e57c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e57e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800e582:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e586:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e588:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e58a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e58e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800e590:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e594:	07da      	lsls	r2, r3, #31
 800e596:	f57f aeb3 	bpl.w	800e300 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 800e59a:	f7fe fdbf 	bl	800d11c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e59e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e5a2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e5a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5a6:	079b      	lsls	r3, r3, #30
 800e5a8:	f53f aeaa 	bmi.w	800e300 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5ac:	f7fe fdb6 	bl	800d11c <HAL_GetTick>
 800e5b0:	eba0 0008 	sub.w	r0, r0, r8
 800e5b4:	4548      	cmp	r0, r9
 800e5b6:	d9f5      	bls.n	800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 800e5b8:	e7d5      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e5ba:	6891      	ldr	r1, [r2, #8]
 800e5bc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800e5c0:	e6ae      	b.n	800e320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 800e5c2:	4e38      	ldr	r6, [pc, #224]	; (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e5c4:	6833      	ldr	r3, [r6, #0]
 800e5c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e5ca:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800e5cc:	f7fe fda6 	bl	800d11c <HAL_GetTick>
 800e5d0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e5d2:	6833      	ldr	r3, [r6, #0]
 800e5d4:	011b      	lsls	r3, r3, #4
 800e5d6:	d451      	bmi.n	800e67c <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e5d8:	6822      	ldr	r2, [r4, #0]
 800e5da:	07d7      	lsls	r7, r2, #31
 800e5dc:	d50d      	bpl.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800e5de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e5e0:	b95b      	cbnz	r3, 800e5fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e5e2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800e5e6:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800e5ea:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800e5ee:	071b      	lsls	r3, r3, #28
 800e5f0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e5f4:	430b      	orrs	r3, r1
 800e5f6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e5fa:	0310      	lsls	r0, r2, #12
 800e5fc:	d503      	bpl.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800e5fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e604:	d005      	beq.n	800e612 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800e606:	02d1      	lsls	r1, r2, #11
 800e608:	d519      	bpl.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e60a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e60c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e610:	d115      	bne.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e612:	4924      	ldr	r1, [pc, #144]	; (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800e614:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e616:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800e61a:	6866      	ldr	r6, [r4, #4]
 800e61c:	061b      	lsls	r3, r3, #24
 800e61e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800e622:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800e626:	4303      	orrs	r3, r0
 800e628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e62c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800e630:	69e3      	ldr	r3, [r4, #28]
 800e632:	f020 001f 	bic.w	r0, r0, #31
 800e636:	3b01      	subs	r3, #1
 800e638:	4303      	orrs	r3, r0
 800e63a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e63e:	0192      	lsls	r2, r2, #6
 800e640:	d50a      	bpl.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e642:	68e3      	ldr	r3, [r4, #12]
 800e644:	6862      	ldr	r2, [r4, #4]
 800e646:	061b      	lsls	r3, r3, #24
 800e648:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800e64c:	68a2      	ldr	r2, [r4, #8]
 800e64e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800e652:	4a14      	ldr	r2, [pc, #80]	; (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e654:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800e658:	4e12      	ldr	r6, [pc, #72]	; (800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e65a:	6833      	ldr	r3, [r6, #0]
 800e65c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e660:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800e662:	f7fe fd5b 	bl	800d11c <HAL_GetTick>
 800e666:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e668:	6833      	ldr	r3, [r6, #0]
 800e66a:	011b      	lsls	r3, r3, #4
 800e66c:	f53f af1e 	bmi.w	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e670:	f7fe fd54 	bl	800d11c <HAL_GetTick>
 800e674:	1bc0      	subs	r0, r0, r7
 800e676:	2864      	cmp	r0, #100	; 0x64
 800e678:	d9f6      	bls.n	800e668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e67a:	e774      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e67c:	f7fe fd4e 	bl	800d11c <HAL_GetTick>
 800e680:	1bc0      	subs	r0, r0, r7
 800e682:	2864      	cmp	r0, #100	; 0x64
 800e684:	d9a5      	bls.n	800e5d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800e686:	e76e      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e688:	f7fe fd48 	bl	800d11c <HAL_GetTick>
 800e68c:	1b80      	subs	r0, r0, r6
 800e68e:	2864      	cmp	r0, #100	; 0x64
 800e690:	f67f af16 	bls.w	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800e694:	e767      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e696:	f7fe fd41 	bl	800d11c <HAL_GetTick>
 800e69a:	1b40      	subs	r0, r0, r5
 800e69c:	2864      	cmp	r0, #100	; 0x64
 800e69e:	f67f af53 	bls.w	800e548 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800e6a2:	e760      	b.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800e6a4:	40023800 	.word	0x40023800

0800e6a8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6a8:	6a03      	ldr	r3, [r0, #32]
 800e6aa:	f023 0301 	bic.w	r3, r3, #1
{
 800e6ae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6b4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6b6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e6b8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800e6bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6be:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800e6c2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800e6c6:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e6c8:	688d      	ldr	r5, [r1, #8]
 800e6ca:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e6cc:	4d0e      	ldr	r5, [pc, #56]	; (800e708 <TIM_OC1_SetConfig+0x60>)
 800e6ce:	42a8      	cmp	r0, r5
 800e6d0:	d002      	beq.n	800e6d8 <TIM_OC1_SetConfig+0x30>
 800e6d2:	4e0e      	ldr	r6, [pc, #56]	; (800e70c <TIM_OC1_SetConfig+0x64>)
 800e6d4:	42b0      	cmp	r0, r6
 800e6d6:	d111      	bne.n	800e6fc <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e6d8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e6dc:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6de:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800e6e0:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800e6e4:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6e8:	d002      	beq.n	800e6f0 <TIM_OC1_SetConfig+0x48>
 800e6ea:	4d08      	ldr	r5, [pc, #32]	; (800e70c <TIM_OC1_SetConfig+0x64>)
 800e6ec:	42a8      	cmp	r0, r5
 800e6ee:	d105      	bne.n	800e6fc <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e6f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e6f4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800e6f8:	4335      	orrs	r5, r6
 800e6fa:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6fc:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6fe:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800e700:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800e702:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e704:	6203      	str	r3, [r0, #32]
}
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	40010000 	.word	0x40010000
 800e70c:	40010400 	.word	0x40010400

0800e710 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e710:	6a03      	ldr	r3, [r0, #32]
 800e712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800e716:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e718:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e71a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e71c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e71e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800e724:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e726:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800e72a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800e72e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e730:	688d      	ldr	r5, [r1, #8]
 800e732:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e736:	4d11      	ldr	r5, [pc, #68]	; (800e77c <TIM_OC3_SetConfig+0x6c>)
 800e738:	42a8      	cmp	r0, r5
 800e73a:	d003      	beq.n	800e744 <TIM_OC3_SetConfig+0x34>
 800e73c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e740:	42a8      	cmp	r0, r5
 800e742:	d114      	bne.n	800e76e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e744:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800e746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e74a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e74e:	4d0b      	ldr	r5, [pc, #44]	; (800e77c <TIM_OC3_SetConfig+0x6c>)
 800e750:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800e752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e756:	d003      	beq.n	800e760 <TIM_OC3_SetConfig+0x50>
 800e758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e75c:	42a8      	cmp	r0, r5
 800e75e:	d106      	bne.n	800e76e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e760:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e764:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800e768:	4335      	orrs	r5, r6
 800e76a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e76e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e770:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800e772:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800e774:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e776:	6203      	str	r3, [r0, #32]
}
 800e778:	bd70      	pop	{r4, r5, r6, pc}
 800e77a:	bf00      	nop
 800e77c:	40010000 	.word	0x40010000

0800e780 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e780:	6a03      	ldr	r3, [r0, #32]
 800e782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800e786:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e788:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e78a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e78c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e78e:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e794:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e79a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e79e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e7a2:	688d      	ldr	r5, [r1, #8]
 800e7a4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7a8:	4d08      	ldr	r5, [pc, #32]	; (800e7cc <TIM_OC4_SetConfig+0x4c>)
 800e7aa:	42a8      	cmp	r0, r5
 800e7ac:	d003      	beq.n	800e7b6 <TIM_OC4_SetConfig+0x36>
 800e7ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e7b2:	42a8      	cmp	r0, r5
 800e7b4:	d104      	bne.n	800e7c0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e7b6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e7ba:	694d      	ldr	r5, [r1, #20]
 800e7bc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7c0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7c2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e7c4:	684b      	ldr	r3, [r1, #4]
 800e7c6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7c8:	6202      	str	r2, [r0, #32]
}
 800e7ca:	bd30      	pop	{r4, r5, pc}
 800e7cc:	40010000 	.word	0x40010000

0800e7d0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e7d0:	6a03      	ldr	r3, [r0, #32]
 800e7d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800e7d6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e7d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7da:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7dc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7de:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e7e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800e7e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e7e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800e7ee:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e7f0:	688d      	ldr	r5, [r1, #8]
 800e7f2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7f6:	4d09      	ldr	r5, [pc, #36]	; (800e81c <TIM_OC5_SetConfig+0x4c>)
 800e7f8:	42a8      	cmp	r0, r5
 800e7fa:	d003      	beq.n	800e804 <TIM_OC5_SetConfig+0x34>
 800e7fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e800:	42a8      	cmp	r0, r5
 800e802:	d104      	bne.n	800e80e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e804:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e808:	694d      	ldr	r5, [r1, #20]
 800e80a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e80e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e810:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e812:	684b      	ldr	r3, [r1, #4]
 800e814:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e816:	6202      	str	r2, [r0, #32]
}
 800e818:	bd30      	pop	{r4, r5, pc}
 800e81a:	bf00      	nop
 800e81c:	40010000 	.word	0x40010000

0800e820 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e820:	6a03      	ldr	r3, [r0, #32]
 800e822:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800e826:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e828:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e82a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e82c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e82e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e830:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e834:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e83a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e83e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e842:	688d      	ldr	r5, [r1, #8]
 800e844:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e848:	4d08      	ldr	r5, [pc, #32]	; (800e86c <TIM_OC6_SetConfig+0x4c>)
 800e84a:	42a8      	cmp	r0, r5
 800e84c:	d003      	beq.n	800e856 <TIM_OC6_SetConfig+0x36>
 800e84e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e852:	42a8      	cmp	r0, r5
 800e854:	d104      	bne.n	800e860 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e856:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e85a:	694d      	ldr	r5, [r1, #20]
 800e85c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e860:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e862:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e864:	684b      	ldr	r3, [r1, #4]
 800e866:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e868:	6202      	str	r2, [r0, #32]
}
 800e86a:	bd30      	pop	{r4, r5, pc}
 800e86c:	40010000 	.word	0x40010000

0800e870 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800e870:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e872:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800e874:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e878:	4b08      	ldr	r3, [pc, #32]	; (800e89c <HAL_TIM_Base_Start+0x2c>)
 800e87a:	6891      	ldr	r1, [r2, #8]
 800e87c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e87e:	2b06      	cmp	r3, #6
 800e880:	d006      	beq.n	800e890 <HAL_TIM_Base_Start+0x20>
 800e882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e886:	d003      	beq.n	800e890 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800e888:	6813      	ldr	r3, [r2, #0]
 800e88a:	f043 0301 	orr.w	r3, r3, #1
 800e88e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800e890:	2301      	movs	r3, #1
 800e892:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800e896:	2000      	movs	r0, #0
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop
 800e89c:	00010007 	.word	0x00010007

0800e8a0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e8a0:	6803      	ldr	r3, [r0, #0]
 800e8a2:	68da      	ldr	r2, [r3, #12]
 800e8a4:	f042 0201 	orr.w	r2, r2, #1
 800e8a8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8aa:	4a07      	ldr	r2, [pc, #28]	; (800e8c8 <HAL_TIM_Base_Start_IT+0x28>)
 800e8ac:	6899      	ldr	r1, [r3, #8]
 800e8ae:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8b0:	2a06      	cmp	r2, #6
 800e8b2:	d006      	beq.n	800e8c2 <HAL_TIM_Base_Start_IT+0x22>
 800e8b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e8b8:	d003      	beq.n	800e8c2 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	f042 0201 	orr.w	r2, r2, #1
 800e8c0:	601a      	str	r2, [r3, #0]
}
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	00010007 	.word	0x00010007

0800e8cc <HAL_TIM_OnePulse_MspInit>:
 800e8cc:	4770      	bx	lr

0800e8ce <HAL_TIM_OC_DelayElapsedCallback>:
 800e8ce:	4770      	bx	lr

0800e8d0 <HAL_TIM_IC_CaptureCallback>:
 800e8d0:	4770      	bx	lr

0800e8d2 <HAL_TIM_PWM_PulseFinishedCallback>:
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_TIM_TriggerCallback>:
 800e8d4:	4770      	bx	lr

0800e8d6 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e8d6:	6803      	ldr	r3, [r0, #0]
 800e8d8:	691a      	ldr	r2, [r3, #16]
 800e8da:	0791      	lsls	r1, r2, #30
{
 800e8dc:	b510      	push	{r4, lr}
 800e8de:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e8e0:	d50f      	bpl.n	800e902 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e8e2:	68da      	ldr	r2, [r3, #12]
 800e8e4:	0792      	lsls	r2, r2, #30
 800e8e6:	d50c      	bpl.n	800e902 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e8e8:	f06f 0202 	mvn.w	r2, #2
 800e8ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8ee:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e8f0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8f2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e8f4:	0799      	lsls	r1, r3, #30
 800e8f6:	f000 8085 	beq.w	800ea04 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800e8fa:	f7ff ffe9 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8fe:	2300      	movs	r3, #0
 800e900:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	691a      	ldr	r2, [r3, #16]
 800e906:	0752      	lsls	r2, r2, #29
 800e908:	d510      	bpl.n	800e92c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e90a:	68da      	ldr	r2, [r3, #12]
 800e90c:	0750      	lsls	r0, r2, #29
 800e90e:	d50d      	bpl.n	800e92c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e910:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800e914:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e918:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e91a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e91c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e91e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e922:	d075      	beq.n	800ea10 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800e924:	f7ff ffd4 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e928:	2300      	movs	r3, #0
 800e92a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	691a      	ldr	r2, [r3, #16]
 800e930:	0711      	lsls	r1, r2, #28
 800e932:	d50f      	bpl.n	800e954 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	0712      	lsls	r2, r2, #28
 800e938:	d50c      	bpl.n	800e954 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e93a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800e93e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e942:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e944:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e946:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e948:	079b      	lsls	r3, r3, #30
 800e94a:	d067      	beq.n	800ea1c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800e94c:	f7ff ffc0 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e950:	2300      	movs	r3, #0
 800e952:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	691a      	ldr	r2, [r3, #16]
 800e958:	06d0      	lsls	r0, r2, #27
 800e95a:	d510      	bpl.n	800e97e <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e95c:	68da      	ldr	r2, [r3, #12]
 800e95e:	06d1      	lsls	r1, r2, #27
 800e960:	d50d      	bpl.n	800e97e <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e962:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800e966:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e96a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e96c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e96e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e970:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e974:	d058      	beq.n	800ea28 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800e976:	f7ff ffab 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e97a:	2300      	movs	r3, #0
 800e97c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e97e:	6823      	ldr	r3, [r4, #0]
 800e980:	691a      	ldr	r2, [r3, #16]
 800e982:	07d2      	lsls	r2, r2, #31
 800e984:	d508      	bpl.n	800e998 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e986:	68da      	ldr	r2, [r3, #12]
 800e988:	07d0      	lsls	r0, r2, #31
 800e98a:	d505      	bpl.n	800e998 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e98c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800e990:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e992:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800e994:	f7fc f942 	bl	800ac1c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	691a      	ldr	r2, [r3, #16]
 800e99c:	0611      	lsls	r1, r2, #24
 800e99e:	d508      	bpl.n	800e9b2 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e9a0:	68da      	ldr	r2, [r3, #12]
 800e9a2:	0612      	lsls	r2, r2, #24
 800e9a4:	d505      	bpl.n	800e9b2 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e9a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800e9aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e9ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800e9ae:	f000 fae0 	bl	800ef72 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	691a      	ldr	r2, [r3, #16]
 800e9b6:	05d0      	lsls	r0, r2, #23
 800e9b8:	d508      	bpl.n	800e9cc <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e9ba:	68da      	ldr	r2, [r3, #12]
 800e9bc:	0611      	lsls	r1, r2, #24
 800e9be:	d505      	bpl.n	800e9cc <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800e9c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800e9c8:	f000 fad4 	bl	800ef74 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	691a      	ldr	r2, [r3, #16]
 800e9d0:	0652      	lsls	r2, r2, #25
 800e9d2:	d508      	bpl.n	800e9e6 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e9d4:	68da      	ldr	r2, [r3, #12]
 800e9d6:	0650      	lsls	r0, r2, #25
 800e9d8:	d505      	bpl.n	800e9e6 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e9da:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800e9de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e9e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800e9e2:	f7ff ff77 	bl	800e8d4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	691a      	ldr	r2, [r3, #16]
 800e9ea:	0691      	lsls	r1, r2, #26
 800e9ec:	d522      	bpl.n	800ea34 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	0692      	lsls	r2, r2, #26
 800e9f2:	d51f      	bpl.n	800ea34 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e9f4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800e9f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e9fa:	611a      	str	r2, [r3, #16]
}
 800e9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ea00:	f000 bab6 	b.w	800ef70 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea04:	f7ff ff63 	bl	800e8ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f7ff ff62 	bl	800e8d2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea0e:	e776      	b.n	800e8fe <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea10:	f7ff ff5d 	bl	800e8ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea14:	4620      	mov	r0, r4
 800ea16:	f7ff ff5c 	bl	800e8d2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea1a:	e785      	b.n	800e928 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea1c:	f7ff ff57 	bl	800e8ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea20:	4620      	mov	r0, r4
 800ea22:	f7ff ff56 	bl	800e8d2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea26:	e793      	b.n	800e950 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea28:	f7ff ff51 	bl	800e8ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f7ff ff50 	bl	800e8d2 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea32:	e7a2      	b.n	800e97a <HAL_TIM_IRQHandler+0xa4>
}
 800ea34:	bd10      	pop	{r4, pc}
	...

0800ea38 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea38:	4a30      	ldr	r2, [pc, #192]	; (800eafc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800ea3a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea3c:	4290      	cmp	r0, r2
 800ea3e:	d012      	beq.n	800ea66 <TIM_Base_SetConfig+0x2e>
 800ea40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ea44:	d00f      	beq.n	800ea66 <TIM_Base_SetConfig+0x2e>
 800ea46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ea4a:	4290      	cmp	r0, r2
 800ea4c:	d00b      	beq.n	800ea66 <TIM_Base_SetConfig+0x2e>
 800ea4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea52:	4290      	cmp	r0, r2
 800ea54:	d007      	beq.n	800ea66 <TIM_Base_SetConfig+0x2e>
 800ea56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea5a:	4290      	cmp	r0, r2
 800ea5c:	d003      	beq.n	800ea66 <TIM_Base_SetConfig+0x2e>
 800ea5e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ea62:	4290      	cmp	r0, r2
 800ea64:	d119      	bne.n	800ea9a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800ea66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ea6c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea6e:	4a23      	ldr	r2, [pc, #140]	; (800eafc <TIM_Base_SetConfig+0xc4>)
 800ea70:	4290      	cmp	r0, r2
 800ea72:	d029      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800ea74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ea78:	d026      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800ea7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ea7e:	4290      	cmp	r0, r2
 800ea80:	d022      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800ea82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea86:	4290      	cmp	r0, r2
 800ea88:	d01e      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800ea8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea8e:	4290      	cmp	r0, r2
 800ea90:	d01a      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800ea92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ea96:	4290      	cmp	r0, r2
 800ea98:	d016      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800ea9a:	4a19      	ldr	r2, [pc, #100]	; (800eb00 <TIM_Base_SetConfig+0xc8>)
 800ea9c:	4290      	cmp	r0, r2
 800ea9e:	d013      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800eaa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eaa4:	4290      	cmp	r0, r2
 800eaa6:	d00f      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800eaa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eaac:	4290      	cmp	r0, r2
 800eaae:	d00b      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800eab0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800eab4:	4290      	cmp	r0, r2
 800eab6:	d007      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800eab8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eabc:	4290      	cmp	r0, r2
 800eabe:	d003      	beq.n	800eac8 <TIM_Base_SetConfig+0x90>
 800eac0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eac4:	4290      	cmp	r0, r2
 800eac6:	d103      	bne.n	800ead0 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800eac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eacc:	68ca      	ldr	r2, [r1, #12]
 800eace:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ead0:	694a      	ldr	r2, [r1, #20]
 800ead2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ead6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800ead8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eada:	688b      	ldr	r3, [r1, #8]
 800eadc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800eade:	680b      	ldr	r3, [r1, #0]
 800eae0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eae2:	4b06      	ldr	r3, [pc, #24]	; (800eafc <TIM_Base_SetConfig+0xc4>)
 800eae4:	4298      	cmp	r0, r3
 800eae6:	d003      	beq.n	800eaf0 <TIM_Base_SetConfig+0xb8>
 800eae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eaec:	4298      	cmp	r0, r3
 800eaee:	d101      	bne.n	800eaf4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800eaf0:	690b      	ldr	r3, [r1, #16]
 800eaf2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	6143      	str	r3, [r0, #20]
}
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop
 800eafc:	40010000 	.word	0x40010000
 800eb00:	40014000 	.word	0x40014000

0800eb04 <HAL_TIM_Base_Init>:
{
 800eb04:	b510      	push	{r4, lr}
  if (htim == NULL)
 800eb06:	4604      	mov	r4, r0
 800eb08:	b1a0      	cbz	r0, 800eb34 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800eb0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800eb0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eb12:	b91b      	cbnz	r3, 800eb1c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800eb14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800eb18:	f7fc fd64 	bl	800b5e4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800eb1c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb1e:	6820      	ldr	r0, [r4, #0]
 800eb20:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800eb22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb26:	f7ff ff87 	bl	800ea38 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800eb2a:	2301      	movs	r3, #1
  return HAL_OK;
 800eb2c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800eb2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800eb32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800eb34:	2001      	movs	r0, #1
 800eb36:	e7fc      	b.n	800eb32 <HAL_TIM_Base_Init+0x2e>

0800eb38 <HAL_TIM_PWM_Init>:
{
 800eb38:	b510      	push	{r4, lr}
  if (htim == NULL)
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	b1a0      	cbz	r0, 800eb68 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800eb3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800eb42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eb46:	b91b      	cbnz	r3, 800eb50 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800eb48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800eb4c:	f7fc fd2c 	bl	800b5a8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800eb50:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb52:	6820      	ldr	r0, [r4, #0]
 800eb54:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800eb56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb5a:	f7ff ff6d 	bl	800ea38 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800eb5e:	2301      	movs	r3, #1
  return HAL_OK;
 800eb60:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800eb62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800eb66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800eb68:	2001      	movs	r0, #1
 800eb6a:	e7fc      	b.n	800eb66 <HAL_TIM_PWM_Init+0x2e>

0800eb6c <HAL_TIM_OnePulse_Init>:
{
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	460d      	mov	r5, r1
  if (htim == NULL)
 800eb70:	4604      	mov	r4, r0
 800eb72:	b1e0      	cbz	r0, 800ebae <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 800eb74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800eb78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eb7c:	b91b      	cbnz	r3, 800eb86 <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 800eb7e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800eb82:	f7ff fea3 	bl	800e8cc <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800eb86:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb88:	1d21      	adds	r1, r4, #4
 800eb8a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800eb8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb90:	f7ff ff52 	bl	800ea38 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800eb94:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800eb96:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	f022 0208 	bic.w	r2, r2, #8
 800eb9e:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800eba0:	6819      	ldr	r1, [r3, #0]
 800eba2:	4329      	orrs	r1, r5
 800eba4:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800eba6:	2301      	movs	r3, #1
 800eba8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ebac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ebae:	2001      	movs	r0, #1
 800ebb0:	e7fc      	b.n	800ebac <HAL_TIM_OnePulse_Init+0x40>
	...

0800ebb4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ebb4:	6a03      	ldr	r3, [r0, #32]
 800ebb6:	f023 0310 	bic.w	r3, r3, #16
{
 800ebba:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ebbc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800ebbe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800ebc0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800ebc2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800ebc4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ebca:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800ebce:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebd2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ebd6:	688d      	ldr	r5, [r1, #8]
 800ebd8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ebdc:	4d10      	ldr	r5, [pc, #64]	; (800ec20 <TIM_OC2_SetConfig+0x6c>)
 800ebde:	42a8      	cmp	r0, r5
 800ebe0:	d003      	beq.n	800ebea <TIM_OC2_SetConfig+0x36>
 800ebe2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ebe6:	42a8      	cmp	r0, r5
 800ebe8:	d114      	bne.n	800ec14 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ebea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800ebec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ebf0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebf4:	4d0a      	ldr	r5, [pc, #40]	; (800ec20 <TIM_OC2_SetConfig+0x6c>)
 800ebf6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800ebf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebfc:	d003      	beq.n	800ec06 <TIM_OC2_SetConfig+0x52>
 800ebfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ec02:	42a8      	cmp	r0, r5
 800ec04:	d106      	bne.n	800ec14 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ec06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ec0a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800ec0e:	4335      	orrs	r5, r6
 800ec10:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800ec14:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800ec16:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ec18:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ec1a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800ec1c:	6203      	str	r3, [r0, #32]
}
 800ec1e:	bd70      	pop	{r4, r5, r6, pc}
 800ec20:	40010000 	.word	0x40010000

0800ec24 <HAL_TIM_PWM_ConfigChannel>:
{
 800ec24:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800ec26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800ec2e:	2b01      	cmp	r3, #1
 800ec30:	d010      	beq.n	800ec54 <HAL_TIM_PWM_ConfigChannel+0x30>
 800ec32:	2301      	movs	r3, #1
  switch (Channel)
 800ec34:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800ec36:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800ec3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800ec3e:	d043      	beq.n	800ecc8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800ec40:	d809      	bhi.n	800ec56 <HAL_TIM_PWM_ConfigChannel+0x32>
 800ec42:	b1fa      	cbz	r2, 800ec84 <HAL_TIM_PWM_ConfigChannel+0x60>
 800ec44:	2a04      	cmp	r2, #4
 800ec46:	d02e      	beq.n	800eca6 <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 800ec48:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800ec4a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ec4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ec50:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ec54:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800ec56:	2a10      	cmp	r2, #16
 800ec58:	d047      	beq.n	800ecea <HAL_TIM_PWM_ConfigChannel+0xc6>
 800ec5a:	2a14      	cmp	r2, #20
 800ec5c:	d056      	beq.n	800ed0c <HAL_TIM_PWM_ConfigChannel+0xe8>
 800ec5e:	2a0c      	cmp	r2, #12
 800ec60:	d1f2      	bne.n	800ec48 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec62:	6820      	ldr	r0, [r4, #0]
 800ec64:	f7ff fd8c 	bl	800e780 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec68:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec6a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec6c:	69da      	ldr	r2, [r3, #28]
 800ec6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec74:	69da      	ldr	r2, [r3, #28]
 800ec76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec7c:	69da      	ldr	r2, [r3, #28]
 800ec7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ec82:	e030      	b.n	800ece6 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec84:	6820      	ldr	r0, [r4, #0]
 800ec86:	f7ff fd0f 	bl	800e6a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec8a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec8c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec8e:	699a      	ldr	r2, [r3, #24]
 800ec90:	f042 0208 	orr.w	r2, r2, #8
 800ec94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec96:	699a      	ldr	r2, [r3, #24]
 800ec98:	f022 0204 	bic.w	r2, r2, #4
 800ec9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec9e:	699a      	ldr	r2, [r3, #24]
 800eca0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eca2:	619a      	str	r2, [r3, #24]
      break;
 800eca4:	e7d0      	b.n	800ec48 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eca6:	6820      	ldr	r0, [r4, #0]
 800eca8:	f7ff ff84 	bl	800ebb4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ecac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ecae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ecb0:	699a      	ldr	r2, [r3, #24]
 800ecb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ecb8:	699a      	ldr	r2, [r3, #24]
 800ecba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ecbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ecc0:	699a      	ldr	r2, [r3, #24]
 800ecc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ecc6:	e7ec      	b.n	800eca2 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ecc8:	6820      	ldr	r0, [r4, #0]
 800ecca:	f7ff fd21 	bl	800e710 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ecce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ecd0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ecd2:	69da      	ldr	r2, [r3, #28]
 800ecd4:	f042 0208 	orr.w	r2, r2, #8
 800ecd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ecda:	69da      	ldr	r2, [r3, #28]
 800ecdc:	f022 0204 	bic.w	r2, r2, #4
 800ece0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ece2:	69da      	ldr	r2, [r3, #28]
 800ece4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ece6:	61da      	str	r2, [r3, #28]
      break;
 800ece8:	e7ae      	b.n	800ec48 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ecea:	6820      	ldr	r0, [r4, #0]
 800ecec:	f7ff fd70 	bl	800e7d0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ecf0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ecf2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ecf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecf6:	f042 0208 	orr.w	r2, r2, #8
 800ecfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ecfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecfe:	f022 0204 	bic.w	r2, r2, #4
 800ed02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed06:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed0a:	e79d      	b.n	800ec48 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed0c:	6820      	ldr	r0, [r4, #0]
 800ed0e:	f7ff fd87 	bl	800e820 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed12:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed14:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed1c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed24:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ed2c:	e7ec      	b.n	800ed08 <HAL_TIM_PWM_ConfigChannel+0xe4>

0800ed2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed2e:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed30:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800ed32:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed34:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed38:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed3c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed3e:	6083      	str	r3, [r0, #8]
}
 800ed40:	bd10      	pop	{r4, pc}
	...

0800ed44 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800ed44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ed48:	2b01      	cmp	r3, #1
{
 800ed4a:	b570      	push	{r4, r5, r6, lr}
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800ed52:	d017      	beq.n	800ed84 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 800ed54:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800ed58:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800ed5a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800ed5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800ed60:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed62:	4b41      	ldr	r3, [pc, #260]	; (800ee68 <HAL_TIM_ConfigClockSource+0x124>)
 800ed64:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800ed66:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800ed68:	680b      	ldr	r3, [r1, #0]
 800ed6a:	2b40      	cmp	r3, #64	; 0x40
 800ed6c:	d065      	beq.n	800ee3a <HAL_TIM_ConfigClockSource+0xf6>
 800ed6e:	d815      	bhi.n	800ed9c <HAL_TIM_ConfigClockSource+0x58>
 800ed70:	2b10      	cmp	r3, #16
 800ed72:	d00c      	beq.n	800ed8e <HAL_TIM_ConfigClockSource+0x4a>
 800ed74:	d807      	bhi.n	800ed86 <HAL_TIM_ConfigClockSource+0x42>
 800ed76:	b153      	cbz	r3, 800ed8e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 800ed78:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800ed7a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ed7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ed80:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800ed84:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800ed86:	2b20      	cmp	r3, #32
 800ed88:	d001      	beq.n	800ed8e <HAL_TIM_ConfigClockSource+0x4a>
 800ed8a:	2b30      	cmp	r3, #48	; 0x30
 800ed8c:	d1f4      	bne.n	800ed78 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800ed8e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed90:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	e01a      	b.n	800edd2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800ed9c:	2b60      	cmp	r3, #96	; 0x60
 800ed9e:	d034      	beq.n	800ee0a <HAL_TIM_ConfigClockSource+0xc6>
 800eda0:	d819      	bhi.n	800edd6 <HAL_TIM_ConfigClockSource+0x92>
 800eda2:	2b50      	cmp	r3, #80	; 0x50
 800eda4:	d1e8      	bne.n	800ed78 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eda6:	684a      	ldr	r2, [r1, #4]
 800eda8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800edaa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edac:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edae:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edb2:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800edb6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edb8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edba:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edc0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800edc4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800edc6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800edc8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800edca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800edce:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800edd2:	6083      	str	r3, [r0, #8]
 800edd4:	e7d0      	b.n	800ed78 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 800edd6:	2b70      	cmp	r3, #112	; 0x70
 800edd8:	d00c      	beq.n	800edf4 <HAL_TIM_ConfigClockSource+0xb0>
 800edda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edde:	d1cb      	bne.n	800ed78 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800ede0:	68cb      	ldr	r3, [r1, #12]
 800ede2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ede6:	f7ff ffa2 	bl	800ed2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800edea:	6822      	ldr	r2, [r4, #0]
 800edec:	6893      	ldr	r3, [r2, #8]
 800edee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edf2:	e008      	b.n	800ee06 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800edf4:	68cb      	ldr	r3, [r1, #12]
 800edf6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800edfa:	f7ff ff98 	bl	800ed2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800edfe:	6822      	ldr	r2, [r4, #0]
 800ee00:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ee02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee06:	6093      	str	r3, [r2, #8]
      break;
 800ee08:	e7b6      	b.n	800ed78 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee0a:	684d      	ldr	r5, [r1, #4]
 800ee0c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee0e:	6a01      	ldr	r1, [r0, #32]
 800ee10:	f021 0110 	bic.w	r1, r1, #16
 800ee14:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee16:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800ee18:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee1a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee22:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ee2a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ee2c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ee2e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee34:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800ee38:	e7cb      	b.n	800edd2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee3a:	684a      	ldr	r2, [r1, #4]
 800ee3c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800ee3e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee40:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee42:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee46:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800ee4a:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee4c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee4e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee54:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ee58:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800ee5a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ee5c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee62:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800ee66:	e7b4      	b.n	800edd2 <HAL_TIM_ConfigClockSource+0x8e>
 800ee68:	fffe0088 	.word	0xfffe0088

0800ee6c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee6c:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ee70:	6a03      	ldr	r3, [r0, #32]
{
 800ee72:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee74:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee76:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee78:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800ee7a:	ea23 0304 	bic.w	r3, r3, r4
 800ee7e:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee80:	6a03      	ldr	r3, [r0, #32]
 800ee82:	431a      	orrs	r2, r3
 800ee84:	6202      	str	r2, [r0, #32]
}
 800ee86:	bd10      	pop	{r4, pc}

0800ee88 <HAL_TIM_OC_Start>:
{
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	6800      	ldr	r0, [r0, #0]
 800ee90:	f7ff ffec 	bl	800ee6c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	4a0c      	ldr	r2, [pc, #48]	; (800eec8 <HAL_TIM_OC_Start+0x40>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d003      	beq.n	800eea4 <HAL_TIM_OC_Start+0x1c>
 800ee9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d103      	bne.n	800eeac <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800eea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eeaa:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eeac:	6899      	ldr	r1, [r3, #8]
 800eeae:	4a07      	ldr	r2, [pc, #28]	; (800eecc <HAL_TIM_OC_Start+0x44>)
 800eeb0:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eeb2:	2a06      	cmp	r2, #6
 800eeb4:	d006      	beq.n	800eec4 <HAL_TIM_OC_Start+0x3c>
 800eeb6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800eeba:	d003      	beq.n	800eec4 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	f042 0201 	orr.w	r2, r2, #1
 800eec2:	601a      	str	r2, [r3, #0]
}
 800eec4:	2000      	movs	r0, #0
 800eec6:	bd10      	pop	{r4, pc}
 800eec8:	40010000 	.word	0x40010000
 800eecc:	00010007 	.word	0x00010007

0800eed0 <HAL_TIM_PWM_Start>:
 800eed0:	f7ff bfda 	b.w	800ee88 <HAL_TIM_OC_Start>

0800eed4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eed4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	f04f 0302 	mov.w	r3, #2
{
 800eede:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800eee0:	d03e      	beq.n	800ef60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eee2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800eee6:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eee8:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eeea:	4d1e      	ldr	r5, [pc, #120]	; (800ef64 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 800eeec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eef0:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800eef2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800eef4:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eef6:	d002      	beq.n	800eefe <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 800eef8:	4e1b      	ldr	r6, [pc, #108]	; (800ef68 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800eefa:	42b3      	cmp	r3, r6
 800eefc:	d103      	bne.n	800ef06 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eefe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef02:	684e      	ldr	r6, [r1, #4]
 800ef04:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef06:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef08:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef0c:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef0e:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800ef12:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef14:	d019      	beq.n	800ef4a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800ef16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef1a:	d016      	beq.n	800ef4a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800ef1c:	4a13      	ldr	r2, [pc, #76]	; (800ef6c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d013      	beq.n	800ef4a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800ef22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d00f      	beq.n	800ef4a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800ef2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d00b      	beq.n	800ef4a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800ef32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d007      	beq.n	800ef4a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800ef3a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d003      	beq.n	800ef4a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800ef42:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d104      	bne.n	800ef54 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef4a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ef4c:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ef50:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ef52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ef54:	2301      	movs	r3, #1
 800ef56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800ef60:	4618      	mov	r0, r3

  return HAL_OK;
}
 800ef62:	bd70      	pop	{r4, r5, r6, pc}
 800ef64:	40010000 	.word	0x40010000
 800ef68:	40010400 	.word	0x40010400
 800ef6c:	40000400 	.word	0x40000400

0800ef70 <HAL_TIMEx_CommutCallback>:
 800ef70:	4770      	bx	lr

0800ef72 <HAL_TIMEx_BreakCallback>:
 800ef72:	4770      	bx	lr

0800ef74 <HAL_TIMEx_Break2Callback>:
 800ef74:	4770      	bx	lr

0800ef76 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef76:	6803      	ldr	r3, [r0, #0]
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ef7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef80:	689a      	ldr	r2, [r3, #8]
 800ef82:	f022 0201 	bic.w	r2, r2, #1
 800ef86:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef88:	2320      	movs	r3, #32
 800ef8a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	6603      	str	r3, [r0, #96]	; 0x60
}
 800ef90:	4770      	bx	lr
	...

0800ef94 <HAL_UART_Transmit_DMA>:
{
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	4604      	mov	r4, r0
 800ef98:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800ef9a:	6f67      	ldr	r7, [r4, #116]	; 0x74
 800ef9c:	2f20      	cmp	r7, #32
 800ef9e:	d136      	bne.n	800f00e <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 800efa0:	b341      	cbz	r1, 800eff4 <HAL_UART_Transmit_DMA+0x60>
 800efa2:	b33a      	cbz	r2, 800eff4 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800efa4:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800efa8:	2a01      	cmp	r2, #1
 800efaa:	d030      	beq.n	800f00e <HAL_UART_Transmit_DMA+0x7a>
 800efac:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efae:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efb0:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800efb2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 800efb4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 800efb8:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efbc:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 800efbe:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800efc0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efc4:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800efc6:	b1b8      	cbz	r0, 800eff8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800efc8:	f8df c048 	ldr.w	ip, [pc, #72]	; 800f014 <HAL_UART_Transmit_DMA+0x80>
 800efcc:	6822      	ldr	r2, [r4, #0]
 800efce:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800efd2:	f8df c044 	ldr.w	ip, [pc, #68]	; 800f018 <HAL_UART_Transmit_DMA+0x84>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800efd6:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800efd8:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800efdc:	f8df c03c 	ldr.w	ip, [pc, #60]	; 800f01c <HAL_UART_Transmit_DMA+0x88>
      huart->hdmatx->XferAbortCallback = NULL;
 800efe0:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800efe4:	f7fe fc62 	bl	800d8ac <HAL_DMA_Start_IT>
 800efe8:	b130      	cbz	r0, 800eff8 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800efea:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800efec:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eff0:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800eff2:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 800eff4:	2001      	movs	r0, #1
 800eff6:	e009      	b.n	800f00c <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800effc:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800effe:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f000:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800f002:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f006:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f00a:	609a      	str	r2, [r3, #8]
}
 800f00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800f00e:	2002      	movs	r0, #2
 800f010:	e7fc      	b.n	800f00c <HAL_UART_Transmit_DMA+0x78>
 800f012:	bf00      	nop
 800f014:	0800f0b1 	.word	0x0800f0b1
 800f018:	0800f0e1 	.word	0x0800f0e1
 800f01c:	0800f131 	.word	0x0800f131

0800f020 <HAL_UART_Receive_DMA>:
{
 800f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800f022:	6f87      	ldr	r7, [r0, #120]	; 0x78
{
 800f024:	4604      	mov	r4, r0
 800f026:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800f028:	2f20      	cmp	r7, #32
 800f02a:	d138      	bne.n	800f09e <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800f02c:	b321      	cbz	r1, 800f078 <HAL_UART_Receive_DMA+0x58>
 800f02e:	b31a      	cbz	r2, 800f078 <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 800f030:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 800f034:	2a01      	cmp	r2, #1
 800f036:	d032      	beq.n	800f09e <HAL_UART_Receive_DMA+0x7e>
 800f038:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f03a:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f03c:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800f03e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f040:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800f042:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    huart->RxXferSize = Size;
 800f046:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f04a:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800f04c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800f04e:	b1a8      	cbz	r0, 800f07c <HAL_UART_Receive_DMA+0x5c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f050:	4a14      	ldr	r2, [pc, #80]	; (800f0a4 <HAL_UART_Receive_DMA+0x84>)
 800f052:	f8d4 c000 	ldr.w	ip, [r4]
 800f056:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f058:	4a13      	ldr	r2, [pc, #76]	; (800f0a8 <HAL_UART_Receive_DMA+0x88>)
 800f05a:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f05c:	4a13      	ldr	r2, [pc, #76]	; (800f0ac <HAL_UART_Receive_DMA+0x8c>)
      huart->hdmarx->XferAbortCallback = NULL;
 800f05e:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f062:	460a      	mov	r2, r1
 800f064:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800f068:	f7fe fc20 	bl	800d8ac <HAL_DMA_Start_IT>
 800f06c:	b130      	cbz	r0, 800f07c <HAL_UART_Receive_DMA+0x5c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f06e:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800f070:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f074:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800f076:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 800f078:	2001      	movs	r0, #1
 800f07a:	e00f      	b.n	800f09c <HAL_UART_Receive_DMA+0x7c>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f07c:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800f07e:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f080:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800f082:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f08a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f08c:	689a      	ldr	r2, [r3, #8]
 800f08e:	f042 0201 	orr.w	r2, r2, #1
 800f092:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f094:	689a      	ldr	r2, [r3, #8]
 800f096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f09a:	609a      	str	r2, [r3, #8]
}
 800f09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800f09e:	2002      	movs	r0, #2
 800f0a0:	e7fc      	b.n	800f09c <HAL_UART_Receive_DMA+0x7c>
 800f0a2:	bf00      	nop
 800f0a4:	0800f0ed 	.word	0x0800f0ed
 800f0a8:	0800f127 	.word	0x0800f127
 800f0ac:	0800f131 	.word	0x0800f131

0800f0b0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f0b0:	69c2      	ldr	r2, [r0, #28]
 800f0b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 800f0b6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f0ba:	d00c      	beq.n	800f0d6 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	689a      	ldr	r2, [r3, #8]
 800f0c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f0ca:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f0d2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f0d4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fb fdb0 	bl	800ac3c <HAL_UART_TxCpltCallback>
}
 800f0dc:	e7fa      	b.n	800f0d4 <UART_DMATransmitCplt+0x24>

0800f0de <HAL_UART_TxHalfCpltCallback>:
 800f0de:	4770      	bx	lr

0800f0e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f0e0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f0e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f0e4:	f7ff fffb 	bl	800f0de <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0e8:	bd08      	pop	{r3, pc}

0800f0ea <HAL_UART_RxCpltCallback>:
 800f0ea:	4770      	bx	lr

0800f0ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f0ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f0ee:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0f6:	d011      	beq.n	800f11c <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0fe:	6813      	ldr	r3, [r2, #0]
 800f100:	6819      	ldr	r1, [r3, #0]
 800f102:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800f106:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f108:	6899      	ldr	r1, [r3, #8]
 800f10a:	f021 0101 	bic.w	r1, r1, #1
 800f10e:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f110:	6899      	ldr	r1, [r3, #8]
 800f112:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800f116:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f118:	2320      	movs	r3, #32
 800f11a:	6793      	str	r3, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f11c:	4610      	mov	r0, r2
 800f11e:	f7ff ffe4 	bl	800f0ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f122:	bd08      	pop	{r3, pc}

0800f124 <HAL_UART_RxHalfCpltCallback>:
 800f124:	4770      	bx	lr

0800f126 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f126:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f128:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800f12a:	f7ff fffb 	bl	800f124 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f12e:	bd08      	pop	{r3, pc}

0800f130 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f130:	6b81      	ldr	r1, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f132:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f134:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f136:	6f88      	ldr	r0, [r1, #120]	; 0x78
{
 800f138:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f13a:	689c      	ldr	r4, [r3, #8]
 800f13c:	0624      	lsls	r4, r4, #24
 800f13e:	d50a      	bpl.n	800f156 <UART_DMAError+0x26>
 800f140:	2a21      	cmp	r2, #33	; 0x21
 800f142:	d108      	bne.n	800f156 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f144:	2200      	movs	r2, #0
 800f146:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f150:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f152:	2220      	movs	r2, #32
 800f154:	674a      	str	r2, [r1, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f156:	689b      	ldr	r3, [r3, #8]
 800f158:	065b      	lsls	r3, r3, #25
 800f15a:	d507      	bpl.n	800f16c <UART_DMAError+0x3c>
 800f15c:	2822      	cmp	r0, #34	; 0x22
 800f15e:	d105      	bne.n	800f16c <UART_DMAError+0x3c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f160:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800f162:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800f164:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f168:	f7ff ff05 	bl	800ef76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f16c:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f16e:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f170:	f043 0310 	orr.w	r3, r3, #16
 800f174:	67cb      	str	r3, [r1, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800f176:	f7fb fd6c 	bl	800ac52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f17a:	bd10      	pop	{r4, pc}

0800f17c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f17c:	6803      	ldr	r3, [r0, #0]
{
 800f17e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f180:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800f182:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f186:	6819      	ldr	r1, [r3, #0]
{
 800f188:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800f18a:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f18c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800f18e:	d109      	bne.n	800f1a4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f190:	0696      	lsls	r6, r2, #26
 800f192:	d56e      	bpl.n	800f272 <HAL_UART_IRQHandler+0xf6>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f194:	068d      	lsls	r5, r1, #26
 800f196:	d56c      	bpl.n	800f272 <HAL_UART_IRQHandler+0xf6>
      if (huart->RxISR != NULL)
 800f198:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d064      	beq.n	800f268 <HAL_UART_IRQHandler+0xec>
}
 800f19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800f1a2:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f1a4:	f015 0001 	ands.w	r0, r5, #1
 800f1a8:	d102      	bne.n	800f1b0 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800f1aa:	f411 7f90 	tst.w	r1, #288	; 0x120
 800f1ae:	d060      	beq.n	800f272 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1b0:	07d6      	lsls	r6, r2, #31
 800f1b2:	d507      	bpl.n	800f1c4 <HAL_UART_IRQHandler+0x48>
 800f1b4:	05cd      	lsls	r5, r1, #23
 800f1b6:	d505      	bpl.n	800f1c4 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1b8:	2501      	movs	r5, #1
 800f1ba:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1bc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800f1be:	f045 0501 	orr.w	r5, r5, #1
 800f1c2:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1c4:	0796      	lsls	r6, r2, #30
 800f1c6:	d506      	bpl.n	800f1d6 <HAL_UART_IRQHandler+0x5a>
 800f1c8:	b128      	cbz	r0, 800f1d6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1ca:	2502      	movs	r5, #2
 800f1cc:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f1ce:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800f1d0:	f045 0504 	orr.w	r5, r5, #4
 800f1d4:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1d6:	0755      	lsls	r5, r2, #29
 800f1d8:	d506      	bpl.n	800f1e8 <HAL_UART_IRQHandler+0x6c>
 800f1da:	b128      	cbz	r0, 800f1e8 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f1dc:	2504      	movs	r5, #4
 800f1de:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f1e0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800f1e2:	f045 0502 	orr.w	r5, r5, #2
 800f1e6:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f1e8:	0716      	lsls	r6, r2, #28
 800f1ea:	d508      	bpl.n	800f1fe <HAL_UART_IRQHandler+0x82>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f1ec:	068d      	lsls	r5, r1, #26
 800f1ee:	d400      	bmi.n	800f1f2 <HAL_UART_IRQHandler+0x76>
 800f1f0:	b128      	cbz	r0, 800f1fe <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f1f2:	2008      	movs	r0, #8
 800f1f4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f1f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f1f8:	f040 0008 	orr.w	r0, r0, #8
 800f1fc:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f1fe:	0510      	lsls	r0, r2, #20
 800f200:	d508      	bpl.n	800f214 <HAL_UART_IRQHandler+0x98>
 800f202:	014e      	lsls	r6, r1, #5
 800f204:	d506      	bpl.n	800f214 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f206:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f20a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f20c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f20e:	f043 0320 	orr.w	r3, r3, #32
 800f212:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f214:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f216:	b33b      	cbz	r3, 800f268 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f218:	0695      	lsls	r5, r2, #26
 800f21a:	d505      	bpl.n	800f228 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f21c:	0688      	lsls	r0, r1, #26
 800f21e:	d503      	bpl.n	800f228 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 800f220:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f222:	b10b      	cbz	r3, 800f228 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 800f224:	4620      	mov	r0, r4
 800f226:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f228:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 800f22a:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800f22c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f22e:	6892      	ldr	r2, [r2, #8]
 800f230:	0651      	lsls	r1, r2, #25
 800f232:	d402      	bmi.n	800f23a <HAL_UART_IRQHandler+0xbe>
 800f234:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800f238:	d017      	beq.n	800f26a <HAL_UART_IRQHandler+0xee>
        UART_EndRxTransfer(huart);
 800f23a:	f7ff fe9c 	bl	800ef76 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f23e:	6823      	ldr	r3, [r4, #0]
 800f240:	689a      	ldr	r2, [r3, #8]
 800f242:	0652      	lsls	r2, r2, #25
 800f244:	d50d      	bpl.n	800f262 <HAL_UART_IRQHandler+0xe6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f246:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800f248:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f24a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f24e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800f250:	b138      	cbz	r0, 800f262 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f252:	4b14      	ldr	r3, [pc, #80]	; (800f2a4 <HAL_UART_IRQHandler+0x128>)
 800f254:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f256:	f7fe fb66 	bl	800d926 <HAL_DMA_Abort_IT>
 800f25a:	b128      	cbz	r0, 800f268 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f25c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f25e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f260:	e79d      	b.n	800f19e <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 800f262:	4620      	mov	r0, r4
 800f264:	f7fb fcf5 	bl	800ac52 <HAL_UART_ErrorCallback>
}
 800f268:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800f26a:	f7fb fcf2 	bl	800ac52 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f26e:	67e5      	str	r5, [r4, #124]	; 0x7c
 800f270:	e7fa      	b.n	800f268 <HAL_UART_IRQHandler+0xec>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f272:	0616      	lsls	r6, r2, #24
 800f274:	d506      	bpl.n	800f284 <HAL_UART_IRQHandler+0x108>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f276:	060d      	lsls	r5, r1, #24
 800f278:	d504      	bpl.n	800f284 <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 800f27a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d0f3      	beq.n	800f268 <HAL_UART_IRQHandler+0xec>
      huart->TxISR(huart);
 800f280:	4620      	mov	r0, r4
 800f282:	e78c      	b.n	800f19e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f284:	0650      	lsls	r0, r2, #25
 800f286:	d5ef      	bpl.n	800f268 <HAL_UART_IRQHandler+0xec>
 800f288:	064a      	lsls	r2, r1, #25
 800f28a:	d5ed      	bpl.n	800f268 <HAL_UART_IRQHandler+0xec>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f28c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f28e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f294:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f296:	2320      	movs	r3, #32
 800f298:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800f29a:	2300      	movs	r3, #0
 800f29c:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800f29e:	f7fb fccd 	bl	800ac3c <HAL_UART_TxCpltCallback>
 800f2a2:	e7e1      	b.n	800f268 <HAL_UART_IRQHandler+0xec>
 800f2a4:	0800f2a9 	.word	0x0800f2a9

0800f2a8 <UART_DMAAbortOnError>:
{
 800f2a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f2b2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800f2b6:	f7fb fccc 	bl	800ac52 <HAL_UART_ErrorCallback>
}
 800f2ba:	bd08      	pop	{r3, pc}

0800f2bc <UART_SetConfig>:
{
 800f2bc:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2be:	69c2      	ldr	r2, [r0, #28]
{
 800f2c0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2c2:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2c4:	6881      	ldr	r1, [r0, #8]
 800f2c6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2c8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2ca:	4301      	orrs	r1, r0
 800f2cc:	6960      	ldr	r0, [r4, #20]
 800f2ce:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2d0:	489a      	ldr	r0, [pc, #616]	; (800f53c <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2d2:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2d4:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 800f2d6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2d8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2da:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2dc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2de:	6859      	ldr	r1, [r3, #4]
 800f2e0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800f2e4:	4301      	orrs	r1, r0
 800f2e6:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2e8:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2ea:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800f2ec:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f2ee:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800f2f2:	4301      	orrs	r1, r0
 800f2f4:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f2f6:	4992      	ldr	r1, [pc, #584]	; (800f540 <UART_SetConfig+0x284>)
 800f2f8:	428b      	cmp	r3, r1
 800f2fa:	d118      	bne.n	800f32e <UART_SetConfig+0x72>
 800f2fc:	4b91      	ldr	r3, [pc, #580]	; (800f544 <UART_SetConfig+0x288>)
 800f2fe:	4992      	ldr	r1, [pc, #584]	; (800f548 <UART_SetConfig+0x28c>)
 800f300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f304:	f003 0303 	and.w	r3, r3, #3
 800f308:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f30a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f30e:	f040 80bd 	bne.w	800f48c <UART_SetConfig+0x1d0>
    switch (clocksource)
 800f312:	2b08      	cmp	r3, #8
 800f314:	f200 80af 	bhi.w	800f476 <UART_SetConfig+0x1ba>
 800f318:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f31c:	00aa0095 	.word	0x00aa0095
 800f320:	00ad00f9 	.word	0x00ad00f9
 800f324:	00ad0105 	.word	0x00ad0105
 800f328:	00ad00ad 	.word	0x00ad00ad
 800f32c:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f32e:	4987      	ldr	r1, [pc, #540]	; (800f54c <UART_SetConfig+0x290>)
 800f330:	428b      	cmp	r3, r1
 800f332:	d106      	bne.n	800f342 <UART_SetConfig+0x86>
 800f334:	4b83      	ldr	r3, [pc, #524]	; (800f544 <UART_SetConfig+0x288>)
 800f336:	4986      	ldr	r1, [pc, #536]	; (800f550 <UART_SetConfig+0x294>)
 800f338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f33c:	f003 030c 	and.w	r3, r3, #12
 800f340:	e7e2      	b.n	800f308 <UART_SetConfig+0x4c>
 800f342:	4984      	ldr	r1, [pc, #528]	; (800f554 <UART_SetConfig+0x298>)
 800f344:	428b      	cmp	r3, r1
 800f346:	d118      	bne.n	800f37a <UART_SetConfig+0xbe>
 800f348:	4b7e      	ldr	r3, [pc, #504]	; (800f544 <UART_SetConfig+0x288>)
 800f34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f34e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f352:	2b10      	cmp	r3, #16
 800f354:	f000 80e4 	beq.w	800f520 <UART_SetConfig+0x264>
 800f358:	d802      	bhi.n	800f360 <UART_SetConfig+0xa4>
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d0d5      	beq.n	800f30a <UART_SetConfig+0x4e>
 800f35e:	e005      	b.n	800f36c <UART_SetConfig+0xb0>
 800f360:	2b20      	cmp	r3, #32
 800f362:	f000 80d1 	beq.w	800f508 <UART_SetConfig+0x24c>
 800f366:	2b30      	cmp	r3, #48	; 0x30
 800f368:	f000 80e0 	beq.w	800f52c <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f36c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f370:	f000 8081 	beq.w	800f476 <UART_SetConfig+0x1ba>
        ret = HAL_ERROR;
 800f374:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800f376:	2300      	movs	r3, #0
 800f378:	e0a9      	b.n	800f4ce <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f37a:	4977      	ldr	r1, [pc, #476]	; (800f558 <UART_SetConfig+0x29c>)
 800f37c:	428b      	cmp	r3, r1
 800f37e:	d10d      	bne.n	800f39c <UART_SetConfig+0xe0>
 800f380:	4b70      	ldr	r3, [pc, #448]	; (800f544 <UART_SetConfig+0x288>)
 800f382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f38a:	2b40      	cmp	r3, #64	; 0x40
 800f38c:	f000 80c8 	beq.w	800f520 <UART_SetConfig+0x264>
 800f390:	d9e3      	bls.n	800f35a <UART_SetConfig+0x9e>
 800f392:	2b80      	cmp	r3, #128	; 0x80
 800f394:	f000 80b8 	beq.w	800f508 <UART_SetConfig+0x24c>
 800f398:	2bc0      	cmp	r3, #192	; 0xc0
 800f39a:	e7e5      	b.n	800f368 <UART_SetConfig+0xac>
 800f39c:	496f      	ldr	r1, [pc, #444]	; (800f55c <UART_SetConfig+0x2a0>)
 800f39e:	428b      	cmp	r3, r1
 800f3a0:	d110      	bne.n	800f3c4 <UART_SetConfig+0x108>
 800f3a2:	4b68      	ldr	r3, [pc, #416]	; (800f544 <UART_SetConfig+0x288>)
 800f3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3b0:	f000 80b6 	beq.w	800f520 <UART_SetConfig+0x264>
 800f3b4:	d9d1      	bls.n	800f35a <UART_SetConfig+0x9e>
 800f3b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3ba:	f000 80a5 	beq.w	800f508 <UART_SetConfig+0x24c>
 800f3be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3c2:	e7d1      	b.n	800f368 <UART_SetConfig+0xac>
 800f3c4:	4966      	ldr	r1, [pc, #408]	; (800f560 <UART_SetConfig+0x2a4>)
 800f3c6:	428b      	cmp	r3, r1
 800f3c8:	d114      	bne.n	800f3f4 <UART_SetConfig+0x138>
 800f3ca:	4b5e      	ldr	r3, [pc, #376]	; (800f544 <UART_SetConfig+0x288>)
 800f3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f3d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3d8:	f000 80a2 	beq.w	800f520 <UART_SetConfig+0x264>
 800f3dc:	d803      	bhi.n	800f3e6 <UART_SetConfig+0x12a>
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1c4      	bne.n	800f36c <UART_SetConfig+0xb0>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e791      	b.n	800f30a <UART_SetConfig+0x4e>
 800f3e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3ea:	f000 808d 	beq.w	800f508 <UART_SetConfig+0x24c>
 800f3ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f3f2:	e7b9      	b.n	800f368 <UART_SetConfig+0xac>
 800f3f4:	495b      	ldr	r1, [pc, #364]	; (800f564 <UART_SetConfig+0x2a8>)
 800f3f6:	428b      	cmp	r3, r1
 800f3f8:	d113      	bne.n	800f422 <UART_SetConfig+0x166>
 800f3fa:	4b52      	ldr	r3, [pc, #328]	; (800f544 <UART_SetConfig+0x288>)
 800f3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f400:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f408:	f000 808a 	beq.w	800f520 <UART_SetConfig+0x264>
 800f40c:	d803      	bhi.n	800f416 <UART_SetConfig+0x15a>
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1ac      	bne.n	800f36c <UART_SetConfig+0xb0>
 800f412:	2300      	movs	r3, #0
 800f414:	e779      	b.n	800f30a <UART_SetConfig+0x4e>
 800f416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f41a:	d075      	beq.n	800f508 <UART_SetConfig+0x24c>
 800f41c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f420:	e7a2      	b.n	800f368 <UART_SetConfig+0xac>
 800f422:	4951      	ldr	r1, [pc, #324]	; (800f568 <UART_SetConfig+0x2ac>)
 800f424:	428b      	cmp	r3, r1
 800f426:	d1a1      	bne.n	800f36c <UART_SetConfig+0xb0>
 800f428:	4b46      	ldr	r3, [pc, #280]	; (800f544 <UART_SetConfig+0x288>)
 800f42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f42e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f436:	d073      	beq.n	800f520 <UART_SetConfig+0x264>
 800f438:	d98f      	bls.n	800f35a <UART_SetConfig+0x9e>
 800f43a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f43e:	d063      	beq.n	800f508 <UART_SetConfig+0x24c>
 800f440:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f444:	e790      	b.n	800f368 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 800f446:	f7fe fee1 	bl	800e20c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f44a:	6861      	ldr	r1, [r4, #4]
 800f44c:	084a      	lsrs	r2, r1, #1
 800f44e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800f452:	fbb3 f3f1 	udiv	r3, r3, r1
 800f456:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800f458:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f45a:	f1a3 0110 	sub.w	r1, r3, #16
 800f45e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800f462:	4291      	cmp	r1, r2
 800f464:	d90a      	bls.n	800f47c <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 800f466:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800f468:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800f46a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800f470:	f7fe fedc 	bl	800e22c <HAL_RCC_GetPCLK2Freq>
 800f474:	e7e9      	b.n	800f44a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800f476:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800f478:	2300      	movs	r3, #0
 800f47a:	e7ee      	b.n	800f45a <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f47c:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f480:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800f484:	6821      	ldr	r1, [r4, #0]
 800f486:	4313      	orrs	r3, r2
 800f488:	60cb      	str	r3, [r1, #12]
 800f48a:	e7ed      	b.n	800f468 <UART_SetConfig+0x1ac>
    switch (clocksource)
 800f48c:	2b08      	cmp	r3, #8
 800f48e:	f63f af71 	bhi.w	800f374 <UART_SetConfig+0xb8>
 800f492:	a201      	add	r2, pc, #4	; (adr r2, 800f498 <UART_SetConfig+0x1dc>)
 800f494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f498:	0800f4bd 	.word	0x0800f4bd
 800f49c:	0800f4e1 	.word	0x0800f4e1
 800f4a0:	0800f4e7 	.word	0x0800f4e7
 800f4a4:	0800f375 	.word	0x0800f375
 800f4a8:	0800f4f9 	.word	0x0800f4f9
 800f4ac:	0800f375 	.word	0x0800f375
 800f4b0:	0800f375 	.word	0x0800f375
 800f4b4:	0800f375 	.word	0x0800f375
 800f4b8:	0800f4ff 	.word	0x0800f4ff
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4bc:	f7fe fea6 	bl	800e20c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f4c0:	6862      	ldr	r2, [r4, #4]
 800f4c2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800f4c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4ca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4cc:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4ce:	f1a3 0110 	sub.w	r1, r3, #16
 800f4d2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800f4d6:	4291      	cmp	r1, r2
 800f4d8:	d8c5      	bhi.n	800f466 <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 800f4da:	6822      	ldr	r2, [r4, #0]
 800f4dc:	60d3      	str	r3, [r2, #12]
 800f4de:	e7c3      	b.n	800f468 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4e0:	f7fe fea4 	bl	800e22c <HAL_RCC_GetPCLK2Freq>
 800f4e4:	e7ec      	b.n	800f4c0 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f4e6:	6860      	ldr	r0, [r4, #4]
 800f4e8:	0843      	lsrs	r3, r0, #1
 800f4ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800f4ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f4f2:	fbb3 f3f0 	udiv	r3, r3, r0
 800f4f6:	e7e8      	b.n	800f4ca <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 800f4f8:	f7fe fdbc 	bl	800e074 <HAL_RCC_GetSysClockFreq>
 800f4fc:	e7e0      	b.n	800f4c0 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f4fe:	6860      	ldr	r0, [r4, #4]
 800f500:	0843      	lsrs	r3, r0, #1
 800f502:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f506:	e7f4      	b.n	800f4f2 <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f508:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f50c:	d1eb      	bne.n	800f4e6 <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f50e:	6860      	ldr	r0, [r4, #4]
 800f510:	0843      	lsrs	r3, r0, #1
 800f512:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800f516:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f51a:	fbb3 f3f0 	udiv	r3, r3, r0
 800f51e:	e79a      	b.n	800f456 <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f520:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f524:	d1e8      	bne.n	800f4f8 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 800f526:	f7fe fda5 	bl	800e074 <HAL_RCC_GetSysClockFreq>
 800f52a:	e78e      	b.n	800f44a <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f52c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800f530:	d1e5      	bne.n	800f4fe <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f532:	6860      	ldr	r0, [r4, #4]
 800f534:	0843      	lsrs	r3, r0, #1
 800f536:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f53a:	e7ee      	b.n	800f51a <UART_SetConfig+0x25e>
 800f53c:	efff69f3 	.word	0xefff69f3
 800f540:	40011000 	.word	0x40011000
 800f544:	40023800 	.word	0x40023800
 800f548:	08017a94 	.word	0x08017a94
 800f54c:	40004400 	.word	0x40004400
 800f550:	08017a98 	.word	0x08017a98
 800f554:	40004800 	.word	0x40004800
 800f558:	40004c00 	.word	0x40004c00
 800f55c:	40005000 	.word	0x40005000
 800f560:	40011400 	.word	0x40011400
 800f564:	40007800 	.word	0x40007800
 800f568:	40007c00 	.word	0x40007c00

0800f56c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f56c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f56e:	07da      	lsls	r2, r3, #31
{
 800f570:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f572:	d506      	bpl.n	800f582 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f574:	6801      	ldr	r1, [r0, #0]
 800f576:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800f578:	684a      	ldr	r2, [r1, #4]
 800f57a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f57e:	4322      	orrs	r2, r4
 800f580:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f582:	079c      	lsls	r4, r3, #30
 800f584:	d506      	bpl.n	800f594 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f586:	6801      	ldr	r1, [r0, #0]
 800f588:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800f58a:	684a      	ldr	r2, [r1, #4]
 800f58c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f590:	4322      	orrs	r2, r4
 800f592:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f594:	0759      	lsls	r1, r3, #29
 800f596:	d506      	bpl.n	800f5a6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f598:	6801      	ldr	r1, [r0, #0]
 800f59a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800f59c:	684a      	ldr	r2, [r1, #4]
 800f59e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f5a2:	4322      	orrs	r2, r4
 800f5a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f5a6:	071a      	lsls	r2, r3, #28
 800f5a8:	d506      	bpl.n	800f5b8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f5aa:	6801      	ldr	r1, [r0, #0]
 800f5ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800f5ae:	684a      	ldr	r2, [r1, #4]
 800f5b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f5b4:	4322      	orrs	r2, r4
 800f5b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f5b8:	06dc      	lsls	r4, r3, #27
 800f5ba:	d506      	bpl.n	800f5ca <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f5bc:	6801      	ldr	r1, [r0, #0]
 800f5be:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800f5c0:	688a      	ldr	r2, [r1, #8]
 800f5c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f5c6:	4322      	orrs	r2, r4
 800f5c8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5ca:	0699      	lsls	r1, r3, #26
 800f5cc:	d506      	bpl.n	800f5dc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5ce:	6801      	ldr	r1, [r0, #0]
 800f5d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800f5d2:	688a      	ldr	r2, [r1, #8]
 800f5d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f5d8:	4322      	orrs	r2, r4
 800f5da:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f5dc:	065a      	lsls	r2, r3, #25
 800f5de:	d510      	bpl.n	800f602 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5e0:	6801      	ldr	r1, [r0, #0]
 800f5e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800f5e4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5e6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5ea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800f5ee:	ea42 0204 	orr.w	r2, r2, r4
 800f5f2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5f4:	d105      	bne.n	800f602 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f5f6:	684a      	ldr	r2, [r1, #4]
 800f5f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800f5fa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800f5fe:	4322      	orrs	r2, r4
 800f600:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f602:	061b      	lsls	r3, r3, #24
 800f604:	d506      	bpl.n	800f614 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f606:	6802      	ldr	r2, [r0, #0]
 800f608:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800f60a:	6853      	ldr	r3, [r2, #4]
 800f60c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800f610:	430b      	orrs	r3, r1
 800f612:	6053      	str	r3, [r2, #4]
}
 800f614:	bd10      	pop	{r4, pc}

0800f616 <UART_WaitOnFlagUntilTimeout>:
{
 800f616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f61a:	9d06      	ldr	r5, [sp, #24]
 800f61c:	4604      	mov	r4, r0
 800f61e:	460f      	mov	r7, r1
 800f620:	4616      	mov	r6, r2
 800f622:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f624:	6821      	ldr	r1, [r4, #0]
 800f626:	69ca      	ldr	r2, [r1, #28]
 800f628:	ea37 0302 	bics.w	r3, r7, r2
 800f62c:	bf0c      	ite	eq
 800f62e:	2201      	moveq	r2, #1
 800f630:	2200      	movne	r2, #0
 800f632:	42b2      	cmp	r2, r6
 800f634:	d001      	beq.n	800f63a <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800f636:	2000      	movs	r0, #0
 800f638:	e018      	b.n	800f66c <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800f63a:	1c68      	adds	r0, r5, #1
 800f63c:	d0f3      	beq.n	800f626 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f63e:	f7fd fd6d 	bl	800d11c <HAL_GetTick>
 800f642:	eba0 0008 	sub.w	r0, r0, r8
 800f646:	42a8      	cmp	r0, r5
 800f648:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f64a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f64c:	d800      	bhi.n	800f650 <UART_WaitOnFlagUntilTimeout+0x3a>
 800f64e:	b97d      	cbnz	r5, 800f670 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f654:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f656:	6883      	ldr	r3, [r0, #8]
 800f658:	f023 0301 	bic.w	r3, r3, #1
 800f65c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800f65e:	2320      	movs	r3, #32
 800f660:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f662:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800f664:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800f666:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800f668:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 800f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f670:	075a      	lsls	r2, r3, #29
 800f672:	d5d7      	bpl.n	800f624 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f674:	69c3      	ldr	r3, [r0, #28]
 800f676:	051b      	lsls	r3, r3, #20
 800f678:	d5d4      	bpl.n	800f624 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f67a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f67e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f680:	6803      	ldr	r3, [r0, #0]
 800f682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f686:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f688:	6883      	ldr	r3, [r0, #8]
 800f68a:	f023 0301 	bic.w	r3, r3, #1
 800f68e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800f690:	2320      	movs	r3, #32
 800f692:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800f694:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f696:	67e3      	str	r3, [r4, #124]	; 0x7c
 800f698:	e7e4      	b.n	800f664 <UART_WaitOnFlagUntilTimeout+0x4e>

0800f69a <UART_CheckIdleState>:
{
 800f69a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f69c:	2500      	movs	r5, #0
{
 800f69e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6a0:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800f6a2:	f7fd fd3b 	bl	800d11c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f6a6:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800f6a8:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f6aa:	6812      	ldr	r2, [r2, #0]
 800f6ac:	0712      	lsls	r2, r2, #28
 800f6ae:	d407      	bmi.n	800f6c0 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 800f6b0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800f6b2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800f6b4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800f6b6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800f6ba:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800f6bc:	b003      	add	sp, #12
 800f6be:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f6c0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800f6c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	9200      	str	r2, [sp, #0]
 800f6cc:	462a      	mov	r2, r5
 800f6ce:	f7ff ffa2 	bl	800f616 <UART_WaitOnFlagUntilTimeout>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d0ec      	beq.n	800f6b0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800f6d6:	2003      	movs	r0, #3
 800f6d8:	e7f0      	b.n	800f6bc <UART_CheckIdleState+0x22>

0800f6da <HAL_UART_Init>:
{
 800f6da:	b510      	push	{r4, lr}
  if (huart == NULL)
 800f6dc:	4604      	mov	r4, r0
 800f6de:	b340      	cbz	r0, 800f732 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800f6e0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800f6e2:	b91b      	cbnz	r3, 800f6ec <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800f6e4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800f6e8:	f7fc f800 	bl	800b6ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800f6ec:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800f6ee:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f6f0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800f6f2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800f6f4:	6813      	ldr	r3, [r2, #0]
 800f6f6:	f023 0301 	bic.w	r3, r3, #1
 800f6fa:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f6fc:	f7ff fdde 	bl	800f2bc <UART_SetConfig>
 800f700:	2801      	cmp	r0, #1
 800f702:	d016      	beq.n	800f732 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f706:	b113      	cbz	r3, 800f70e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800f708:	4620      	mov	r0, r4
 800f70a:	f7ff ff2f 	bl	800f56c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f70e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800f710:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f712:	685a      	ldr	r2, [r3, #4]
 800f714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f718:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f71a:	689a      	ldr	r2, [r3, #8]
 800f71c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f720:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	f042 0201 	orr.w	r2, r2, #1
}
 800f728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800f72c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800f72e:	f7ff bfb4 	b.w	800f69a <UART_CheckIdleState>
}
 800f732:	2001      	movs	r0, #1
 800f734:	bd10      	pop	{r4, pc}
	...

0800f738 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f738:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f73c:	b113      	cbz	r3, 800f744 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800f73e:	f06f 0005 	mvn.w	r0, #5
 800f742:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f744:	f3ef 8210 	mrs	r2, PRIMASK
 800f748:	4b07      	ldr	r3, [pc, #28]	; (800f768 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800f74a:	b912      	cbnz	r2, 800f752 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f74c:	f3ef 8211 	mrs	r2, BASEPRI
 800f750:	b112      	cbz	r2, 800f758 <osKernelInitialize+0x20>
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	2a02      	cmp	r2, #2
 800f756:	d0f2      	beq.n	800f73e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f758:	6818      	ldr	r0, [r3, #0]
 800f75a:	b910      	cbnz	r0, 800f762 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f75c:	2201      	movs	r2, #1
 800f75e:	601a      	str	r2, [r3, #0]
 800f760:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 800f762:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f766:	4770      	bx	lr
 800f768:	20015ef8 	.word	0x20015ef8

0800f76c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f76c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f76e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f772:	b113      	cbz	r3, 800f77a <osKernelStart+0xe>
    stat = osErrorISR;
 800f774:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800f778:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f77a:	f3ef 8210 	mrs	r2, PRIMASK
 800f77e:	4b0a      	ldr	r3, [pc, #40]	; (800f7a8 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800f780:	b912      	cbnz	r2, 800f788 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f782:	f3ef 8211 	mrs	r2, BASEPRI
 800f786:	b112      	cbz	r2, 800f78e <osKernelStart+0x22>
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	2a02      	cmp	r2, #2
 800f78c:	d0f2      	beq.n	800f774 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	2a01      	cmp	r2, #1
 800f792:	d105      	bne.n	800f7a0 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800f794:	2202      	movs	r2, #2
 800f796:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800f798:	f000 ffc6 	bl	8010728 <vTaskStartScheduler>
      stat = osOK;
 800f79c:	2000      	movs	r0, #0
 800f79e:	e7eb      	b.n	800f778 <osKernelStart+0xc>
      stat = osError;
 800f7a0:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800f7a4:	e7e8      	b.n	800f778 <osKernelStart+0xc>
 800f7a6:	bf00      	nop
 800f7a8:	20015ef8 	.word	0x20015ef8

0800f7ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ae:	4614      	mov	r4, r2
 800f7b0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f7b2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f7b4:	460b      	mov	r3, r1
  hTask = NULL;
 800f7b6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7b8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f7bc:	bb32      	cbnz	r2, 800f80c <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7be:	f3ef 8210 	mrs	r2, PRIMASK
 800f7c2:	b912      	cbnz	r2, 800f7ca <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f7c4:	f3ef 8211 	mrs	r2, BASEPRI
 800f7c8:	b11a      	cbz	r2, 800f7d2 <osThreadNew+0x26>
 800f7ca:	4a23      	ldr	r2, [pc, #140]	; (800f858 <osThreadNew+0xac>)
 800f7cc:	6812      	ldr	r2, [r2, #0]
 800f7ce:	2a02      	cmp	r2, #2
 800f7d0:	d01c      	beq.n	800f80c <osThreadNew+0x60>
 800f7d2:	b1d8      	cbz	r0, 800f80c <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f7d4:	2c00      	cmp	r4, #0
 800f7d6:	d037      	beq.n	800f848 <osThreadNew+0x9c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f7d8:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 800f7da:	6821      	ldr	r1, [r4, #0]
 800f7dc:	2d00      	cmp	r5, #0
 800f7de:	bf08      	it	eq
 800f7e0:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f7e2:	1e6a      	subs	r2, r5, #1
 800f7e4:	462f      	mov	r7, r5
 800f7e6:	2a37      	cmp	r2, #55	; 0x37
 800f7e8:	d833      	bhi.n	800f852 <osThreadNew+0xa6>
 800f7ea:	6862      	ldr	r2, [r4, #4]
 800f7ec:	07d2      	lsls	r2, r2, #31
 800f7ee:	d430      	bmi.n	800f852 <osThreadNew+0xa6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f7f0:	6966      	ldr	r6, [r4, #20]
 800f7f2:	b176      	cbz	r6, 800f812 <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f7f4:	08b2      	lsrs	r2, r6, #2
 800f7f6:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f7fa:	f1bc 0f00 	cmp.w	ip, #0
 800f7fe:	d00b      	beq.n	800f818 <osThreadNew+0x6c>
 800f800:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 800f804:	d902      	bls.n	800f80c <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f806:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f808:	b104      	cbz	r4, 800f80c <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f80a:	b9b6      	cbnz	r6, 800f83a <osThreadNew+0x8e>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f80c:	9805      	ldr	r0, [sp, #20]
}
 800f80e:	b007      	add	sp, #28
 800f810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800f812:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f816:	e7ee      	b.n	800f7f6 <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f818:	f1be 0f00 	cmp.w	lr, #0
 800f81c:	d1f6      	bne.n	800f80c <osThreadNew+0x60>
      if (mem == 0) {
 800f81e:	6924      	ldr	r4, [r4, #16]
 800f820:	2c00      	cmp	r4, #0
 800f822:	d1f3      	bne.n	800f80c <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f824:	ac05      	add	r4, sp, #20
 800f826:	b292      	uxth	r2, r2
 800f828:	e9cd 7400 	strd	r7, r4, [sp]
 800f82c:	f000 ff4e 	bl	80106cc <xTaskCreate>
 800f830:	2801      	cmp	r0, #1
          hTask = NULL;
 800f832:	bf1c      	itt	ne
 800f834:	2300      	movne	r3, #0
 800f836:	9305      	strne	r3, [sp, #20]
 800f838:	e7e8      	b.n	800f80c <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f83a:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 800f83e:	9500      	str	r5, [sp, #0]
 800f840:	f000 ff06 	bl	8010650 <xTaskCreateStatic>
 800f844:	9005      	str	r0, [sp, #20]
 800f846:	e7e1      	b.n	800f80c <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 800f848:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800f84a:	f44f 7280 	mov.w	r2, #256	; 0x100
    name = NULL;
 800f84e:	4621      	mov	r1, r4
 800f850:	e7e8      	b.n	800f824 <osThreadNew+0x78>
        return (NULL);
 800f852:	2000      	movs	r0, #0
 800f854:	e7db      	b.n	800f80e <osThreadNew+0x62>
 800f856:	bf00      	nop
 800f858:	20015ef8 	.word	0x20015ef8

0800f85c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f85c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f85e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800f862:	b113      	cbz	r3, 800f86a <osDelay+0xe>
    stat = osErrorISR;
 800f864:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800f868:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f86a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800f86e:	b913      	cbnz	r3, 800f876 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f870:	f3ef 8311 	mrs	r3, BASEPRI
 800f874:	b11b      	cbz	r3, 800f87e <osDelay+0x22>
 800f876:	4b05      	ldr	r3, [pc, #20]	; (800f88c <osDelay+0x30>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d0f2      	beq.n	800f864 <osDelay+0x8>
    if (ticks != 0U) {
 800f87e:	2800      	cmp	r0, #0
 800f880:	d0f2      	beq.n	800f868 <osDelay+0xc>
      vTaskDelay(ticks);
 800f882:	f001 f8af 	bl	80109e4 <vTaskDelay>
    stat = osOK;
 800f886:	2000      	movs	r0, #0
 800f888:	e7ee      	b.n	800f868 <osDelay+0xc>
 800f88a:	bf00      	nop
 800f88c:	20015ef8 	.word	0x20015ef8

0800f890 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f894:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800f898:	b113      	cbz	r3, 800f8a0 <osMutexNew+0x10>
  hMutex = NULL;
 800f89a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800f89c:	4628      	mov	r0, r5
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8a0:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800f8a4:	b912      	cbnz	r2, 800f8ac <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f8aa:	b11a      	cbz	r2, 800f8b4 <osMutexNew+0x24>
 800f8ac:	4a18      	ldr	r2, [pc, #96]	; (800f910 <osMutexNew+0x80>)
 800f8ae:	6812      	ldr	r2, [r2, #0]
 800f8b0:	2a02      	cmp	r2, #2
 800f8b2:	d0f2      	beq.n	800f89a <osMutexNew+0xa>
    if (attr != NULL) {
 800f8b4:	b104      	cbz	r4, 800f8b8 <osMutexNew+0x28>
      type = attr->attr_bits;
 800f8b6:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f8b8:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 800f8bc:	071b      	lsls	r3, r3, #28
 800f8be:	d4ec      	bmi.n	800f89a <osMutexNew+0xa>
      if (attr != NULL) {
 800f8c0:	b1b4      	cbz	r4, 800f8f0 <osMutexNew+0x60>
 800f8c2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f8c6:	b189      	cbz	r1, 800f8ec <osMutexNew+0x5c>
 800f8c8:	2b4f      	cmp	r3, #79	; 0x4f
 800f8ca:	d9e6      	bls.n	800f89a <osMutexNew+0xa>
        if (rmtx != 0U) {
 800f8cc:	b1de      	cbz	r6, 800f906 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f8ce:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f8d0:	f000 fade 	bl	800fe90 <xQueueCreateMutexStatic>
 800f8d4:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	d0df      	beq.n	800f89a <osMutexNew+0xa>
          name = attr->name;
 800f8da:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f000 fd1b 	bl	8010318 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f8e2:	2e00      	cmp	r6, #0
 800f8e4:	d0da      	beq.n	800f89c <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f8e6:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 800f8ea:	e7d7      	b.n	800f89c <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d1d4      	bne.n	800f89a <osMutexNew+0xa>
          if (rmtx != 0U) {
 800f8f0:	b15e      	cbz	r6, 800f90a <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f8f2:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800f8f4:	f000 fb01 	bl	800fefa <xQueueCreateMutex>
 800f8f8:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d0cd      	beq.n	800f89a <osMutexNew+0xa>
        if (attr != NULL) {
 800f8fe:	2c00      	cmp	r4, #0
 800f900:	d1eb      	bne.n	800f8da <osMutexNew+0x4a>
          name = NULL;
 800f902:	4621      	mov	r1, r4
 800f904:	e7ea      	b.n	800f8dc <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f906:	2001      	movs	r0, #1
 800f908:	e7e2      	b.n	800f8d0 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800f90a:	2001      	movs	r0, #1
 800f90c:	e7f2      	b.n	800f8f4 <osMutexNew+0x64>
 800f90e:	bf00      	nop
 800f910:	20015ef8 	.word	0x20015ef8

0800f914 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f914:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f916:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f91a:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800f91c:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f920:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f922:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f926:	b112      	cbz	r2, 800f92e <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800f928:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800f92c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f92e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800f932:	b912      	cbnz	r2, 800f93a <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f934:	f3ef 8211 	mrs	r2, BASEPRI
 800f938:	b11a      	cbz	r2, 800f942 <osMutexAcquire+0x2e>
 800f93a:	4a0d      	ldr	r2, [pc, #52]	; (800f970 <osMutexAcquire+0x5c>)
 800f93c:	6812      	ldr	r2, [r2, #0]
 800f93e:	2a02      	cmp	r2, #2
 800f940:	d0f2      	beq.n	800f928 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800f942:	b188      	cbz	r0, 800f968 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f944:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800f946:	b163      	cbz	r3, 800f962 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f948:	f000 fcc2 	bl	80102d0 <xQueueTakeMutexRecursive>
 800f94c:	2801      	cmp	r0, #1
 800f94e:	d101      	bne.n	800f954 <osMutexAcquire+0x40>
  stat = osOK;
 800f950:	2000      	movs	r0, #0
 800f952:	e7eb      	b.n	800f92c <osMutexAcquire+0x18>
          stat = osErrorResource;
 800f954:	2c00      	cmp	r4, #0
 800f956:	bf14      	ite	ne
 800f958:	f06f 0001 	mvnne.w	r0, #1
 800f95c:	f06f 0002 	mvneq.w	r0, #2
 800f960:	e7e4      	b.n	800f92c <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f962:	f000 fbeb 	bl	801013c <xQueueSemaphoreTake>
 800f966:	e7f1      	b.n	800f94c <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800f968:	f06f 0003 	mvn.w	r0, #3
 800f96c:	e7de      	b.n	800f92c <osMutexAcquire+0x18>
 800f96e:	bf00      	nop
 800f970:	20015ef8 	.word	0x20015ef8

0800f974 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f974:	b508      	push	{r3, lr}
 800f976:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f978:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800f97c:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f980:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800f984:	b112      	cbz	r2, 800f98c <osMutexRelease+0x18>
    stat = osErrorISR;
 800f986:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800f98a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f98c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800f990:	b912      	cbnz	r2, 800f998 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f992:	f3ef 8211 	mrs	r2, BASEPRI
 800f996:	b11a      	cbz	r2, 800f9a0 <osMutexRelease+0x2c>
 800f998:	4a0a      	ldr	r2, [pc, #40]	; (800f9c4 <osMutexRelease+0x50>)
 800f99a:	6812      	ldr	r2, [r2, #0]
 800f99c:	2a02      	cmp	r2, #2
 800f99e:	d0f2      	beq.n	800f986 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800f9a0:	b168      	cbz	r0, 800f9be <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800f9a2:	b13b      	cbz	r3, 800f9b4 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f9a4:	f000 fa89 	bl	800feba <xQueueGiveMutexRecursive>
 800f9a8:	2801      	cmp	r0, #1
  stat = osOK;
 800f9aa:	bf0c      	ite	eq
 800f9ac:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800f9ae:	f06f 0002 	mvnne.w	r0, #2
 800f9b2:	e7ea      	b.n	800f98a <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	f000 f9b0 	bl	800fd1c <xQueueGenericSend>
 800f9bc:	e7f4      	b.n	800f9a8 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800f9be:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f9c2:	e7e2      	b.n	800f98a <osMutexRelease+0x16>
 800f9c4:	20015ef8 	.word	0x20015ef8

0800f9c8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f9c8:	4b03      	ldr	r3, [pc, #12]	; (800f9d8 <vApplicationGetIdleTaskMemory+0x10>)
 800f9ca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f9cc:	4b03      	ldr	r3, [pc, #12]	; (800f9dc <vApplicationGetIdleTaskMemory+0x14>)
 800f9ce:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f9d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9d4:	6013      	str	r3, [r2, #0]
}
 800f9d6:	4770      	bx	lr
 800f9d8:	20015e94 	.word	0x20015e94
 800f9dc:	20015a94 	.word	0x20015a94

0800f9e0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f9e0:	4b03      	ldr	r3, [pc, #12]	; (800f9f0 <vApplicationGetTimerTaskMemory+0x10>)
 800f9e2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f9e4:	4b03      	ldr	r3, [pc, #12]	; (800f9f4 <vApplicationGetTimerTaskMemory+0x14>)
 800f9e6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f9e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9ec:	6013      	str	r3, [r2, #0]
}
 800f9ee:	4770      	bx	lr
 800f9f0:	200166fc 	.word	0x200166fc
 800f9f4:	20015efc 	.word	0x20015efc

0800f9f8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f9f8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f9fc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa00:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa02:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa04:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa0c:	4770      	bx	lr

0800fa0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa12:	4770      	bx	lr

0800fa14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa14:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa16:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800fa18:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa1a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa1c:	689a      	ldr	r2, [r3, #8]
 800fa1e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa20:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fa22:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fa24:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fa26:	3301      	adds	r3, #1
 800fa28:	6003      	str	r3, [r0, #0]
}
 800fa2a:	4770      	bx	lr

0800fa2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa2c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa2e:	1c53      	adds	r3, r2, #1
{
 800fa30:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800fa32:	d10a      	bne.n	800fa4a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa34:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa3a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa3c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa3e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800fa40:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800fa42:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800fa44:	3301      	adds	r3, #1
 800fa46:	6003      	str	r3, [r0, #0]
}
 800fa48:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa4a:	f100 0308 	add.w	r3, r0, #8
 800fa4e:	685c      	ldr	r4, [r3, #4]
 800fa50:	6825      	ldr	r5, [r4, #0]
 800fa52:	4295      	cmp	r5, r2
 800fa54:	d8ef      	bhi.n	800fa36 <vListInsert+0xa>
 800fa56:	4623      	mov	r3, r4
 800fa58:	e7f9      	b.n	800fa4e <vListInsert+0x22>

0800fa5a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa5a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800fa5e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa60:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fa62:	6882      	ldr	r2, [r0, #8]
 800fa64:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fa66:	6859      	ldr	r1, [r3, #4]
 800fa68:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa6a:	bf08      	it	eq
 800fa6c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fa6e:	2200      	movs	r2, #0
 800fa70:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	3a01      	subs	r2, #1
 800fa76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fa78:	6818      	ldr	r0, [r3, #0]
}
 800fa7a:	4770      	bx	lr

0800fa7c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa80:	f001 fc68 	bl	8011354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa84:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800fa86:	f001 fc8b 	bl	80113a0 <vPortExitCritical>

	return xReturn;
}
 800fa8a:	fab4 f084 	clz	r0, r4
 800fa8e:	0940      	lsrs	r0, r0, #5
 800fa90:	bd10      	pop	{r4, pc}

0800fa92 <prvCopyDataToQueue>:
{
 800fa92:	b570      	push	{r4, r5, r6, lr}
 800fa94:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa96:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800fa98:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa9a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa9c:	b942      	cbnz	r2, 800fab0 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa9e:	6805      	ldr	r5, [r0, #0]
 800faa0:	b99d      	cbnz	r5, 800faca <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800faa2:	6880      	ldr	r0, [r0, #8]
 800faa4:	f001 f93e 	bl	8010d24 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800faa8:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800faaa:	3601      	adds	r6, #1
 800faac:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800faae:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800fab0:	b96d      	cbnz	r5, 800face <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fab2:	6840      	ldr	r0, [r0, #4]
 800fab4:	f003 f9d6 	bl	8012e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fab8:	6863      	ldr	r3, [r4, #4]
 800faba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fabc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fabe:	68a2      	ldr	r2, [r4, #8]
 800fac0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fac2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fac4:	d301      	bcc.n	800faca <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800faca:	2000      	movs	r0, #0
 800facc:	e7ed      	b.n	800faaa <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800face:	68c0      	ldr	r0, [r0, #12]
 800fad0:	f003 f9c8 	bl	8012e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fad6:	68e2      	ldr	r2, [r4, #12]
 800fad8:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fada:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fadc:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fade:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fae0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fae2:	bf3e      	ittt	cc
 800fae4:	68a2      	ldrcc	r2, [r4, #8]
 800fae6:	189b      	addcc	r3, r3, r2
 800fae8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800faea:	2d02      	cmp	r5, #2
 800faec:	d1ed      	bne.n	800faca <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faee:	b10e      	cbz	r6, 800faf4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800faf0:	3e01      	subs	r6, #1
 800faf2:	e7ea      	b.n	800faca <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800faf4:	4630      	mov	r0, r6
 800faf6:	e7d8      	b.n	800faaa <prvCopyDataToQueue+0x18>

0800faf8 <prvCopyDataFromQueue>:
{
 800faf8:	4603      	mov	r3, r0
 800fafa:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fafc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800fafe:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb00:	b162      	cbz	r2, 800fb1c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb02:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb04:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb06:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb08:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb0a:	60d9      	str	r1, [r3, #12]
}
 800fb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fb10:	bf24      	itt	cs
 800fb12:	6819      	ldrcs	r1, [r3, #0]
 800fb14:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb16:	68d9      	ldr	r1, [r3, #12]
 800fb18:	f003 b9a4 	b.w	8012e64 <memcpy>
}
 800fb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <prvUnlockQueue>:
{
 800fb22:	b570      	push	{r4, r5, r6, lr}
 800fb24:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800fb26:	f001 fc15 	bl	8011354 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800fb2a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb2e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800fb32:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb34:	2d00      	cmp	r5, #0
 800fb36:	dc14      	bgt.n	800fb62 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800fb38:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb3a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800fb3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800fb42:	f001 fc2d 	bl	80113a0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800fb46:	f001 fc05 	bl	8011354 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800fb4a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800fb4e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb50:	2d00      	cmp	r5, #0
 800fb52:	dc12      	bgt.n	800fb7a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800fb54:	23ff      	movs	r3, #255	; 0xff
 800fb56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800fb5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800fb5e:	f001 bc1f 	b.w	80113a0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d0e7      	beq.n	800fb38 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb68:	4630      	mov	r0, r6
 800fb6a:	f000 ffef 	bl	8010b4c <xTaskRemoveFromEventList>
 800fb6e:	b108      	cbz	r0, 800fb74 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800fb70:	f001 f87c 	bl	8010c6c <vTaskMissedYield>
 800fb74:	3d01      	subs	r5, #1
 800fb76:	b26d      	sxtb	r5, r5
 800fb78:	e7dc      	b.n	800fb34 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb7a:	6923      	ldr	r3, [r4, #16]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d0e9      	beq.n	800fb54 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb80:	4630      	mov	r0, r6
 800fb82:	f000 ffe3 	bl	8010b4c <xTaskRemoveFromEventList>
 800fb86:	b108      	cbz	r0, 800fb8c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800fb88:	f001 f870 	bl	8010c6c <vTaskMissedYield>
 800fb8c:	3d01      	subs	r5, #1
 800fb8e:	b26d      	sxtb	r5, r5
 800fb90:	e7de      	b.n	800fb50 <prvUnlockQueue+0x2e>
	...

0800fb94 <xQueueGenericReset>:
{
 800fb94:	b538      	push	{r3, r4, r5, lr}
 800fb96:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800fb98:	4604      	mov	r4, r0
 800fb9a:	b950      	cbnz	r0, 800fbb2 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba0:	b672      	cpsid	i
 800fba2:	f383 8811 	msr	BASEPRI, r3
 800fba6:	f3bf 8f6f 	isb	sy
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	b662      	cpsie	i
 800fbb0:	e7fe      	b.n	800fbb0 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800fbb2:	f001 fbcf 	bl	8011354 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbb6:	6822      	ldr	r2, [r4, #0]
 800fbb8:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fbbc:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbbe:	4343      	muls	r3, r0
 800fbc0:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbc2:	1a1b      	subs	r3, r3, r0
 800fbc4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbc6:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fbc8:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbca:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fbcc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fbce:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800fbd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fbd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800fbd8:	b995      	cbnz	r5, 800fc00 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbda:	6923      	ldr	r3, [r4, #16]
 800fbdc:	b163      	cbz	r3, 800fbf8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbde:	f104 0010 	add.w	r0, r4, #16
 800fbe2:	f000 ffb3 	bl	8010b4c <xTaskRemoveFromEventList>
 800fbe6:	b138      	cbz	r0, 800fbf8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800fbe8:	4b0a      	ldr	r3, [pc, #40]	; (800fc14 <xQueueGenericReset+0x80>)
 800fbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbee:	601a      	str	r2, [r3, #0]
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800fbf8:	f001 fbd2 	bl	80113a0 <vPortExitCritical>
}
 800fbfc:	2001      	movs	r0, #1
 800fbfe:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fc00:	f104 0010 	add.w	r0, r4, #16
 800fc04:	f7ff fef8 	bl	800f9f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fc08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fc0c:	f7ff fef4 	bl	800f9f8 <vListInitialise>
 800fc10:	e7f2      	b.n	800fbf8 <xQueueGenericReset+0x64>
 800fc12:	bf00      	nop
 800fc14:	e000ed04 	.word	0xe000ed04

0800fc18 <xQueueGenericCreateStatic>:
	{
 800fc18:	b513      	push	{r0, r1, r4, lr}
 800fc1a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc1c:	b950      	cbnz	r0, 800fc34 <xQueueGenericCreateStatic+0x1c>
 800fc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc22:	b672      	cpsid	i
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	b662      	cpsie	i
 800fc32:	e7fe      	b.n	800fc32 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800fc34:	b953      	cbnz	r3, 800fc4c <xQueueGenericCreateStatic+0x34>
 800fc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3a:	b672      	cpsid	i
 800fc3c:	f383 8811 	msr	BASEPRI, r3
 800fc40:	f3bf 8f6f 	isb	sy
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	b662      	cpsie	i
 800fc4a:	e7fe      	b.n	800fc4a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fc4c:	b15a      	cbz	r2, 800fc66 <xQueueGenericCreateStatic+0x4e>
 800fc4e:	b9b1      	cbnz	r1, 800fc7e <xQueueGenericCreateStatic+0x66>
 800fc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc54:	b672      	cpsid	i
 800fc56:	f383 8811 	msr	BASEPRI, r3
 800fc5a:	f3bf 8f6f 	isb	sy
 800fc5e:	f3bf 8f4f 	dsb	sy
 800fc62:	b662      	cpsie	i
 800fc64:	e7fe      	b.n	800fc64 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fc66:	b151      	cbz	r1, 800fc7e <xQueueGenericCreateStatic+0x66>
 800fc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6c:	b672      	cpsid	i
 800fc6e:	f383 8811 	msr	BASEPRI, r3
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	f3bf 8f4f 	dsb	sy
 800fc7a:	b662      	cpsie	i
 800fc7c:	e7fe      	b.n	800fc7c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fc7e:	2350      	movs	r3, #80	; 0x50
 800fc80:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fc82:	9b01      	ldr	r3, [sp, #4]
 800fc84:	2b50      	cmp	r3, #80	; 0x50
 800fc86:	d00a      	beq.n	800fc9e <xQueueGenericCreateStatic+0x86>
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	b672      	cpsid	i
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	b662      	cpsie	i
 800fc9c:	e7fe      	b.n	800fc9c <xQueueGenericCreateStatic+0x84>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fc9e:	2900      	cmp	r1, #0
 800fca0:	bf08      	it	eq
 800fca2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fca4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fca6:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fca8:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fcaa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800fcae:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f7ff ff6d 	bl	800fb94 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800fcba:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800fcbe:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800fcc0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800fcc4:	b002      	add	sp, #8
 800fcc6:	bd10      	pop	{r4, pc}

0800fcc8 <xQueueGenericCreate>:
	{
 800fcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcca:	460d      	mov	r5, r1
 800fccc:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fcce:	4606      	mov	r6, r0
 800fcd0:	b950      	cbnz	r0, 800fce8 <xQueueGenericCreate+0x20>
 800fcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd6:	b672      	cpsid	i
 800fcd8:	f383 8811 	msr	BASEPRI, r3
 800fcdc:	f3bf 8f6f 	isb	sy
 800fce0:	f3bf 8f4f 	dsb	sy
 800fce4:	b662      	cpsie	i
 800fce6:	e7fe      	b.n	800fce6 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fce8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fcea:	3050      	adds	r0, #80	; 0x50
 800fcec:	f001 fc90 	bl	8011610 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	b160      	cbz	r0, 800fd0e <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800fcfa:	b955      	cbnz	r5, 800fd12 <xQueueGenericCreate+0x4a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fcfc:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fcfe:	2101      	movs	r1, #1
 800fd00:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800fd02:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fd06:	f7ff ff45 	bl	800fb94 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800fd0a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800fd0e:	4620      	mov	r0, r4
 800fd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd12:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fd16:	6003      	str	r3, [r0, #0]
 800fd18:	e7f1      	b.n	800fcfe <xQueueGenericCreate+0x36>
	...

0800fd1c <xQueueGenericSend>:
{
 800fd1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd20:	4688      	mov	r8, r1
 800fd22:	9201      	str	r2, [sp, #4]
 800fd24:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800fd26:	4604      	mov	r4, r0
 800fd28:	b950      	cbnz	r0, 800fd40 <xQueueGenericSend+0x24>
 800fd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2e:	b672      	cpsid	i
 800fd30:	f383 8811 	msr	BASEPRI, r3
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	b662      	cpsie	i
 800fd3e:	e7fe      	b.n	800fd3e <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd40:	b961      	cbnz	r1, 800fd5c <xQueueGenericSend+0x40>
 800fd42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fd44:	b153      	cbz	r3, 800fd5c <xQueueGenericSend+0x40>
 800fd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4a:	b672      	cpsid	i
 800fd4c:	f383 8811 	msr	BASEPRI, r3
 800fd50:	f3bf 8f6f 	isb	sy
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	b662      	cpsie	i
 800fd5a:	e7fe      	b.n	800fd5a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd5c:	2f02      	cmp	r7, #2
 800fd5e:	d10d      	bne.n	800fd7c <xQueueGenericSend+0x60>
 800fd60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d00a      	beq.n	800fd7c <xQueueGenericSend+0x60>
 800fd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6a:	b672      	cpsid	i
 800fd6c:	f383 8811 	msr	BASEPRI, r3
 800fd70:	f3bf 8f6f 	isb	sy
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	b662      	cpsie	i
 800fd7a:	e7fe      	b.n	800fd7a <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd7c:	f000 ff82 	bl	8010c84 <xTaskGetSchedulerState>
 800fd80:	b960      	cbnz	r0, 800fd9c <xQueueGenericSend+0x80>
 800fd82:	9e01      	ldr	r6, [sp, #4]
 800fd84:	b15e      	cbz	r6, 800fd9e <xQueueGenericSend+0x82>
 800fd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8a:	b672      	cpsid	i
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	b662      	cpsie	i
 800fd9a:	e7fe      	b.n	800fd9a <xQueueGenericSend+0x7e>
 800fd9c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800fd9e:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800fda2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800fe8c <xQueueGenericSend+0x170>
 800fda6:	e037      	b.n	800fe18 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fda8:	9d01      	ldr	r5, [sp, #4]
 800fdaa:	b91d      	cbnz	r5, 800fdb4 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800fdac:	f001 faf8 	bl	80113a0 <vPortExitCritical>
			return errQUEUE_FULL;
 800fdb0:	2000      	movs	r0, #0
 800fdb2:	e050      	b.n	800fe56 <xQueueGenericSend+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800fdb4:	b916      	cbnz	r6, 800fdbc <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fdb6:	a802      	add	r0, sp, #8
 800fdb8:	f000 ff0c 	bl	8010bd4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fdbc:	f001 faf0 	bl	80113a0 <vPortExitCritical>
		vTaskSuspendAll();
 800fdc0:	f000 fcfa 	bl	80107b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdc4:	f001 fac6 	bl	8011354 <vPortEnterCritical>
 800fdc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fdcc:	2bff      	cmp	r3, #255	; 0xff
 800fdce:	d101      	bne.n	800fdd4 <xQueueGenericSend+0xb8>
 800fdd0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800fdd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fdd8:	2bff      	cmp	r3, #255	; 0xff
 800fdda:	d101      	bne.n	800fde0 <xQueueGenericSend+0xc4>
 800fddc:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800fde0:	f001 fade 	bl	80113a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fde4:	a901      	add	r1, sp, #4
 800fde6:	a802      	add	r0, sp, #8
 800fde8:	f000 ff00 	bl	8010bec <xTaskCheckForTimeOut>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d146      	bne.n	800fe7e <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fdf0:	f001 fab0 	bl	8011354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fdf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fdf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d12f      	bne.n	800fe5c <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800fdfc:	f001 fad0 	bl	80113a0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fe00:	9901      	ldr	r1, [sp, #4]
 800fe02:	f104 0010 	add.w	r0, r4, #16
 800fe06:	f000 fe65 	bl	8010ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f7ff fe89 	bl	800fb22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe10:	f000 fd72 	bl	80108f8 <xTaskResumeAll>
 800fe14:	b350      	cbz	r0, 800fe6c <xQueueGenericSend+0x150>
 800fe16:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fe18:	f001 fa9c 	bl	8011354 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fe1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d301      	bcc.n	800fe28 <xQueueGenericSend+0x10c>
 800fe24:	2f02      	cmp	r7, #2
 800fe26:	d1bf      	bne.n	800fda8 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe28:	463a      	mov	r2, r7
 800fe2a:	4641      	mov	r1, r8
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f7ff fe30 	bl	800fa92 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe34:	b11b      	cbz	r3, 800fe3e <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fe3a:	f000 fe87 	bl	8010b4c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800fe3e:	b138      	cbz	r0, 800fe50 <xQueueGenericSend+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800fe40:	4b12      	ldr	r3, [pc, #72]	; (800fe8c <xQueueGenericSend+0x170>)
 800fe42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe46:	601a      	str	r2, [r3, #0]
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fe50:	f001 faa6 	bl	80113a0 <vPortExitCritical>
				return pdPASS;
 800fe54:	2001      	movs	r0, #1
}
 800fe56:	b004      	add	sp, #16
 800fe58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800fe5c:	f001 faa0 	bl	80113a0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800fe60:	4620      	mov	r0, r4
 800fe62:	f7ff fe5e 	bl	800fb22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe66:	f000 fd47 	bl	80108f8 <xTaskResumeAll>
 800fe6a:	e7d4      	b.n	800fe16 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800fe6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fe70:	f8ca 3000 	str.w	r3, [sl]
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	f3bf 8f6f 	isb	sy
 800fe7c:	e7cb      	b.n	800fe16 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f7ff fe4f 	bl	800fb22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe84:	f000 fd38 	bl	80108f8 <xTaskResumeAll>
 800fe88:	e792      	b.n	800fdb0 <xQueueGenericSend+0x94>
 800fe8a:	bf00      	nop
 800fe8c:	e000ed04 	.word	0xe000ed04

0800fe90 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fe90:	2200      	movs	r2, #0
 800fe92:	460b      	mov	r3, r1
	{
 800fe94:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fe96:	4611      	mov	r1, r2
 800fe98:	9000      	str	r0, [sp, #0]
 800fe9a:	2001      	movs	r0, #1
 800fe9c:	f7ff febc 	bl	800fc18 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800fea0:	4604      	mov	r4, r0
 800fea2:	b138      	cbz	r0, 800feb4 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fea4:	2300      	movs	r3, #0
 800fea6:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fea8:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800feaa:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800feac:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800feae:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800feb0:	f7ff ff34 	bl	800fd1c <xQueueGenericSend>
	}
 800feb4:	4620      	mov	r0, r4
 800feb6:	b002      	add	sp, #8
 800feb8:	bd10      	pop	{r4, pc}

0800feba <xQueueGiveMutexRecursive>:
	{
 800feba:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800febc:	4604      	mov	r4, r0
 800febe:	b950      	cbnz	r0, 800fed6 <xQueueGiveMutexRecursive+0x1c>
 800fec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec4:	b672      	cpsid	i
 800fec6:	f383 8811 	msr	BASEPRI, r3
 800feca:	f3bf 8f6f 	isb	sy
 800fece:	f3bf 8f4f 	dsb	sy
 800fed2:	b662      	cpsie	i
 800fed4:	e7fe      	b.n	800fed4 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fed6:	6885      	ldr	r5, [r0, #8]
 800fed8:	f000 fece 	bl	8010c78 <xTaskGetCurrentTaskHandle>
 800fedc:	4285      	cmp	r5, r0
 800fede:	d10a      	bne.n	800fef6 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fee0:	68e3      	ldr	r3, [r4, #12]
 800fee2:	3b01      	subs	r3, #1
 800fee4:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fee6:	b923      	cbnz	r3, 800fef2 <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fee8:	461a      	mov	r2, r3
 800feea:	4619      	mov	r1, r3
 800feec:	4620      	mov	r0, r4
 800feee:	f7ff ff15 	bl	800fd1c <xQueueGenericSend>
			xReturn = pdPASS;
 800fef2:	2001      	movs	r0, #1
		return xReturn;
 800fef4:	e000      	b.n	800fef8 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800fef6:	2000      	movs	r0, #0
	}
 800fef8:	bd38      	pop	{r3, r4, r5, pc}

0800fefa <xQueueCreateMutex>:
	{
 800fefa:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fefc:	4602      	mov	r2, r0
 800fefe:	2100      	movs	r1, #0
 800ff00:	2001      	movs	r0, #1
 800ff02:	f7ff fee1 	bl	800fcc8 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800ff06:	4604      	mov	r4, r0
 800ff08:	b138      	cbz	r0, 800ff1a <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ff0e:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ff10:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ff12:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ff14:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ff16:	f7ff ff01 	bl	800fd1c <xQueueGenericSend>
	}
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	bd10      	pop	{r4, pc}

0800ff1e <xQueueGenericSendFromISR>:
{
 800ff1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff22:	4689      	mov	r9, r1
 800ff24:	4690      	mov	r8, r2
 800ff26:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800ff28:	4604      	mov	r4, r0
 800ff2a:	b950      	cbnz	r0, 800ff42 <xQueueGenericSendFromISR+0x24>
 800ff2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff30:	b672      	cpsid	i
 800ff32:	f383 8811 	msr	BASEPRI, r3
 800ff36:	f3bf 8f6f 	isb	sy
 800ff3a:	f3bf 8f4f 	dsb	sy
 800ff3e:	b662      	cpsie	i
 800ff40:	e7fe      	b.n	800ff40 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff42:	b961      	cbnz	r1, 800ff5e <xQueueGenericSendFromISR+0x40>
 800ff44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ff46:	b153      	cbz	r3, 800ff5e <xQueueGenericSendFromISR+0x40>
 800ff48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff4c:	b672      	cpsid	i
 800ff4e:	f383 8811 	msr	BASEPRI, r3
 800ff52:	f3bf 8f6f 	isb	sy
 800ff56:	f3bf 8f4f 	dsb	sy
 800ff5a:	b662      	cpsie	i
 800ff5c:	e7fe      	b.n	800ff5c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff5e:	2f02      	cmp	r7, #2
 800ff60:	d10d      	bne.n	800ff7e <xQueueGenericSendFromISR+0x60>
 800ff62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d00a      	beq.n	800ff7e <xQueueGenericSendFromISR+0x60>
 800ff68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6c:	b672      	cpsid	i
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	b662      	cpsie	i
 800ff7c:	e7fe      	b.n	800ff7c <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff7e:	f001 faf1 	bl	8011564 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ff82:	f3ef 8611 	mrs	r6, BASEPRI
 800ff86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8a:	b672      	cpsid	i
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d301      	bcc.n	800ffa6 <xQueueGenericSendFromISR+0x88>
 800ffa2:	2f02      	cmp	r7, #2
 800ffa4:	d122      	bne.n	800ffec <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ffa6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffaa:	463a      	mov	r2, r7
 800ffac:	4649      	mov	r1, r9
 800ffae:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800ffb0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffb2:	f7ff fd6e 	bl	800fa92 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ffb6:	1c6b      	adds	r3, r5, #1
 800ffb8:	d113      	bne.n	800ffe2 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffbc:	b90b      	cbnz	r3, 800ffc2 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800ffbe:	2001      	movs	r0, #1
 800ffc0:	e00b      	b.n	800ffda <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ffc6:	f000 fdc1 	bl	8010b4c <xTaskRemoveFromEventList>
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	d0f7      	beq.n	800ffbe <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800ffce:	f1b8 0f00 	cmp.w	r8, #0
 800ffd2:	d0f4      	beq.n	800ffbe <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ffd4:	2001      	movs	r0, #1
 800ffd6:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ffda:	f386 8811 	msr	BASEPRI, r6
}
 800ffde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ffe2:	3501      	adds	r5, #1
 800ffe4:	b26d      	sxtb	r5, r5
 800ffe6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800ffea:	e7e8      	b.n	800ffbe <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800ffec:	2000      	movs	r0, #0
 800ffee:	e7f4      	b.n	800ffda <xQueueGenericSendFromISR+0xbc>

0800fff0 <xQueueReceive>:
{
 800fff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fff4:	b085      	sub	sp, #20
 800fff6:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800fff8:	4604      	mov	r4, r0
{
 800fffa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fffc:	b950      	cbnz	r0, 8010014 <xQueueReceive+0x24>
	__asm volatile
 800fffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010002:	b672      	cpsid	i
 8010004:	f383 8811 	msr	BASEPRI, r3
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	b662      	cpsie	i
 8010012:	e7fe      	b.n	8010012 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010014:	b961      	cbnz	r1, 8010030 <xQueueReceive+0x40>
 8010016:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010018:	b153      	cbz	r3, 8010030 <xQueueReceive+0x40>
 801001a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001e:	b672      	cpsid	i
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	b662      	cpsie	i
 801002e:	e7fe      	b.n	801002e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010030:	f000 fe28 	bl	8010c84 <xTaskGetSchedulerState>
 8010034:	b960      	cbnz	r0, 8010050 <xQueueReceive+0x60>
 8010036:	9e01      	ldr	r6, [sp, #4]
 8010038:	b15e      	cbz	r6, 8010052 <xQueueReceive+0x62>
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	b672      	cpsid	i
 8010040:	f383 8811 	msr	BASEPRI, r3
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	f3bf 8f4f 	dsb	sy
 801004c:	b662      	cpsie	i
 801004e:	e7fe      	b.n	801004e <xQueueReceive+0x5e>
 8010050:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8010052:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8010056:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8010138 <xQueueReceive+0x148>
 801005a:	e03b      	b.n	80100d4 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 801005c:	9d01      	ldr	r5, [sp, #4]
 801005e:	b91d      	cbnz	r5, 8010068 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8010060:	f001 f99e 	bl	80113a0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8010064:	2000      	movs	r0, #0
 8010066:	e052      	b.n	801010e <xQueueReceive+0x11e>
				else if( xEntryTimeSet == pdFALSE )
 8010068:	b916      	cbnz	r6, 8010070 <xQueueReceive+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801006a:	a802      	add	r0, sp, #8
 801006c:	f000 fdb2 	bl	8010bd4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8010070:	f001 f996 	bl	80113a0 <vPortExitCritical>
		vTaskSuspendAll();
 8010074:	f000 fba0 	bl	80107b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010078:	f001 f96c 	bl	8011354 <vPortEnterCritical>
 801007c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010080:	2bff      	cmp	r3, #255	; 0xff
 8010082:	d101      	bne.n	8010088 <xQueueReceive+0x98>
 8010084:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8010088:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801008c:	2bff      	cmp	r3, #255	; 0xff
 801008e:	d101      	bne.n	8010094 <xQueueReceive+0xa4>
 8010090:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8010094:	f001 f984 	bl	80113a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010098:	a901      	add	r1, sp, #4
 801009a:	a802      	add	r0, sp, #8
 801009c:	f000 fda6 	bl	8010bec <xTaskCheckForTimeOut>
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d13d      	bne.n	8010120 <xQueueReceive+0x130>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100a4:	4620      	mov	r0, r4
 80100a6:	f7ff fce9 	bl	800fa7c <prvIsQueueEmpty>
 80100aa:	b398      	cbz	r0, 8010114 <xQueueReceive+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80100ac:	9901      	ldr	r1, [sp, #4]
 80100ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80100b2:	f000 fd0f 	bl	8010ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80100b6:	4620      	mov	r0, r4
 80100b8:	f7ff fd33 	bl	800fb22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100bc:	f000 fc1c 	bl	80108f8 <xTaskResumeAll>
 80100c0:	b938      	cbnz	r0, 80100d2 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 80100c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80100c6:	f8c9 3000 	str.w	r3, [r9]
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	f3bf 8f6f 	isb	sy
 80100d2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80100d4:	f001 f93e 	bl	8011354 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100d8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100da:	2d00      	cmp	r5, #0
 80100dc:	d0be      	beq.n	801005c <xQueueReceive+0x6c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80100de:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80100e0:	4639      	mov	r1, r7
 80100e2:	4620      	mov	r0, r4
 80100e4:	f7ff fd08 	bl	800faf8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80100e8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100ea:	6923      	ldr	r3, [r4, #16]
 80100ec:	b163      	cbz	r3, 8010108 <xQueueReceive+0x118>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100ee:	f104 0010 	add.w	r0, r4, #16
 80100f2:	f000 fd2b 	bl	8010b4c <xTaskRemoveFromEventList>
 80100f6:	b138      	cbz	r0, 8010108 <xQueueReceive+0x118>
						queueYIELD_IF_USING_PREEMPTION();
 80100f8:	4b0f      	ldr	r3, [pc, #60]	; (8010138 <xQueueReceive+0x148>)
 80100fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100fe:	601a      	str	r2, [r3, #0]
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010108:	f001 f94a 	bl	80113a0 <vPortExitCritical>
				return pdPASS;
 801010c:	2001      	movs	r0, #1
}
 801010e:	b005      	add	sp, #20
 8010110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8010114:	4620      	mov	r0, r4
 8010116:	f7ff fd04 	bl	800fb22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801011a:	f000 fbed 	bl	80108f8 <xTaskResumeAll>
 801011e:	e7d8      	b.n	80100d2 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8010120:	4620      	mov	r0, r4
 8010122:	f7ff fcfe 	bl	800fb22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010126:	f000 fbe7 	bl	80108f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801012a:	4620      	mov	r0, r4
 801012c:	f7ff fca6 	bl	800fa7c <prvIsQueueEmpty>
 8010130:	2800      	cmp	r0, #0
 8010132:	d0ce      	beq.n	80100d2 <xQueueReceive+0xe2>
 8010134:	e796      	b.n	8010064 <xQueueReceive+0x74>
 8010136:	bf00      	nop
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <xQueueSemaphoreTake>:
{
 801013c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8010140:	4604      	mov	r4, r0
{
 8010142:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010144:	b950      	cbnz	r0, 801015c <xQueueSemaphoreTake+0x20>
 8010146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014a:	b672      	cpsid	i
 801014c:	f383 8811 	msr	BASEPRI, r3
 8010150:	f3bf 8f6f 	isb	sy
 8010154:	f3bf 8f4f 	dsb	sy
 8010158:	b662      	cpsie	i
 801015a:	e7fe      	b.n	801015a <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 801015c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 801015e:	b155      	cbz	r5, 8010176 <xQueueSemaphoreTake+0x3a>
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	b672      	cpsid	i
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	b662      	cpsie	i
 8010174:	e7fe      	b.n	8010174 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010176:	f000 fd85 	bl	8010c84 <xTaskGetSchedulerState>
 801017a:	b960      	cbnz	r0, 8010196 <xQueueSemaphoreTake+0x5a>
 801017c:	9d01      	ldr	r5, [sp, #4]
 801017e:	b155      	cbz	r5, 8010196 <xQueueSemaphoreTake+0x5a>
 8010180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010184:	b672      	cpsid	i
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	b662      	cpsie	i
 8010194:	e7fe      	b.n	8010194 <xQueueSemaphoreTake+0x58>
 8010196:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8010198:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 801019a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80102cc <xQueueSemaphoreTake+0x190>
 801019e:	e051      	b.n	8010244 <xQueueSemaphoreTake+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 80101a0:	9b01      	ldr	r3, [sp, #4]
 80101a2:	b973      	cbnz	r3, 80101c2 <xQueueSemaphoreTake+0x86>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80101a4:	b155      	cbz	r5, 80101bc <xQueueSemaphoreTake+0x80>
 80101a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101aa:	b672      	cpsid	i
 80101ac:	f383 8811 	msr	BASEPRI, r3
 80101b0:	f3bf 8f6f 	isb	sy
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	b662      	cpsie	i
 80101ba:	e7fe      	b.n	80101ba <xQueueSemaphoreTake+0x7e>
					taskEXIT_CRITICAL();
 80101bc:	f001 f8f0 	bl	80113a0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80101c0:	e05e      	b.n	8010280 <xQueueSemaphoreTake+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80101c2:	b916      	cbnz	r6, 80101ca <xQueueSemaphoreTake+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101c4:	a802      	add	r0, sp, #8
 80101c6:	f000 fd05 	bl	8010bd4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80101ca:	f001 f8e9 	bl	80113a0 <vPortExitCritical>
		vTaskSuspendAll();
 80101ce:	f000 faf3 	bl	80107b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101d2:	f001 f8bf 	bl	8011354 <vPortEnterCritical>
 80101d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80101da:	2bff      	cmp	r3, #255	; 0xff
 80101dc:	d101      	bne.n	80101e2 <xQueueSemaphoreTake+0xa6>
 80101de:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80101e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80101e6:	2bff      	cmp	r3, #255	; 0xff
 80101e8:	d101      	bne.n	80101ee <xQueueSemaphoreTake+0xb2>
 80101ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80101ee:	f001 f8d7 	bl	80113a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101f2:	a901      	add	r1, sp, #4
 80101f4:	a802      	add	r0, sp, #8
 80101f6:	f000 fcf9 	bl	8010bec <xTaskCheckForTimeOut>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d14a      	bne.n	8010294 <xQueueSemaphoreTake+0x158>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101fe:	4620      	mov	r0, r4
 8010200:	f7ff fc3c 	bl	800fa7c <prvIsQueueEmpty>
 8010204:	2800      	cmp	r0, #0
 8010206:	d03f      	beq.n	8010288 <xQueueSemaphoreTake+0x14c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010208:	6823      	ldr	r3, [r4, #0]
 801020a:	b93b      	cbnz	r3, 801021c <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 801020c:	f001 f8a2 	bl	8011354 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010210:	68a0      	ldr	r0, [r4, #8]
 8010212:	f000 fd47 	bl	8010ca4 <xTaskPriorityInherit>
 8010216:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8010218:	f001 f8c2 	bl	80113a0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801021c:	9901      	ldr	r1, [sp, #4]
 801021e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010222:	f000 fc57 	bl	8010ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010226:	4620      	mov	r0, r4
 8010228:	f7ff fc7b 	bl	800fb22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801022c:	f000 fb64 	bl	80108f8 <xTaskResumeAll>
 8010230:	b938      	cbnz	r0, 8010242 <xQueueSemaphoreTake+0x106>
					portYIELD_WITHIN_API();
 8010232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010236:	f8c8 3000 	str.w	r3, [r8]
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	f3bf 8f6f 	isb	sy
 8010242:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8010244:	f001 f886 	bl	8011354 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801024a:	2b00      	cmp	r3, #0
 801024c:	d0a8      	beq.n	80101a0 <xQueueSemaphoreTake+0x64>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801024e:	3b01      	subs	r3, #1
 8010250:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010252:	6823      	ldr	r3, [r4, #0]
 8010254:	b913      	cbnz	r3, 801025c <xQueueSemaphoreTake+0x120>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010256:	f000 fdfd 	bl	8010e54 <pvTaskIncrementMutexHeldCount>
 801025a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801025c:	6923      	ldr	r3, [r4, #16]
 801025e:	b163      	cbz	r3, 801027a <xQueueSemaphoreTake+0x13e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010260:	f104 0010 	add.w	r0, r4, #16
 8010264:	f000 fc72 	bl	8010b4c <xTaskRemoveFromEventList>
 8010268:	b138      	cbz	r0, 801027a <xQueueSemaphoreTake+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 801026a:	4b18      	ldr	r3, [pc, #96]	; (80102cc <xQueueSemaphoreTake+0x190>)
 801026c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010270:	601a      	str	r2, [r3, #0]
 8010272:	f3bf 8f4f 	dsb	sy
 8010276:	f3bf 8f6f 	isb	sy
				return pdPASS;
 801027a:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 801027c:	f001 f890 	bl	80113a0 <vPortExitCritical>
}
 8010280:	4628      	mov	r0, r5
 8010282:	b004      	add	sp, #16
 8010284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8010288:	4620      	mov	r0, r4
 801028a:	f7ff fc4a 	bl	800fb22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801028e:	f000 fb33 	bl	80108f8 <xTaskResumeAll>
 8010292:	e7d6      	b.n	8010242 <xQueueSemaphoreTake+0x106>
			prvUnlockQueue( pxQueue );
 8010294:	4620      	mov	r0, r4
 8010296:	f7ff fc44 	bl	800fb22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801029a:	f000 fb2d 	bl	80108f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801029e:	4620      	mov	r0, r4
 80102a0:	f7ff fbec 	bl	800fa7c <prvIsQueueEmpty>
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d0cc      	beq.n	8010242 <xQueueSemaphoreTake+0x106>
					if( xInheritanceOccurred != pdFALSE )
 80102a8:	2d00      	cmp	r5, #0
 80102aa:	d0e9      	beq.n	8010280 <xQueueSemaphoreTake+0x144>
						taskENTER_CRITICAL();
 80102ac:	f001 f852 	bl	8011354 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80102b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80102b2:	b119      	cbz	r1, 80102bc <xQueueSemaphoreTake+0x180>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80102b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80102b6:	6819      	ldr	r1, [r3, #0]
 80102b8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80102bc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80102be:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80102c0:	f000 fd76 	bl	8010db0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80102c4:	f001 f86c 	bl	80113a0 <vPortExitCritical>
 80102c8:	e7da      	b.n	8010280 <xQueueSemaphoreTake+0x144>
 80102ca:	bf00      	nop
 80102cc:	e000ed04 	.word	0xe000ed04

080102d0 <xQueueTakeMutexRecursive>:
	{
 80102d0:	b570      	push	{r4, r5, r6, lr}
 80102d2:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 80102d4:	4604      	mov	r4, r0
 80102d6:	b950      	cbnz	r0, 80102ee <xQueueTakeMutexRecursive+0x1e>
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	b672      	cpsid	i
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	b662      	cpsie	i
 80102ec:	e7fe      	b.n	80102ec <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80102ee:	6886      	ldr	r6, [r0, #8]
 80102f0:	f000 fcc2 	bl	8010c78 <xTaskGetCurrentTaskHandle>
 80102f4:	4286      	cmp	r6, r0
 80102f6:	d104      	bne.n	8010302 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80102f8:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80102fa:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80102fc:	3301      	adds	r3, #1
 80102fe:	60e3      	str	r3, [r4, #12]
	}
 8010300:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010302:	4629      	mov	r1, r5
 8010304:	4620      	mov	r0, r4
 8010306:	f7ff ff19 	bl	801013c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 801030a:	2800      	cmp	r0, #0
 801030c:	d0f8      	beq.n	8010300 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 801030e:	68e3      	ldr	r3, [r4, #12]
 8010310:	3301      	adds	r3, #1
 8010312:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8010314:	e7f4      	b.n	8010300 <xQueueTakeMutexRecursive+0x30>
	...

08010318 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010318:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801031a:	4a07      	ldr	r2, [pc, #28]	; (8010338 <vQueueAddToRegistry+0x20>)
	{
 801031c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801031e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010322:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8010326:	b91d      	cbnz	r5, 8010330 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010328:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801032c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801032e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010330:	3301      	adds	r3, #1
 8010332:	2b08      	cmp	r3, #8
 8010334:	d1f3      	bne.n	801031e <vQueueAddToRegistry+0x6>
 8010336:	e7fa      	b.n	801032e <vQueueAddToRegistry+0x16>
 8010338:	2001f7a8 	.word	0x2001f7a8

0801033c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801033c:	b570      	push	{r4, r5, r6, lr}
 801033e:	4604      	mov	r4, r0
 8010340:	460d      	mov	r5, r1
 8010342:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010344:	f001 f806 	bl	8011354 <vPortEnterCritical>
 8010348:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801034c:	2bff      	cmp	r3, #255	; 0xff
 801034e:	d102      	bne.n	8010356 <vQueueWaitForMessageRestricted+0x1a>
 8010350:	2300      	movs	r3, #0
 8010352:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010356:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801035a:	2bff      	cmp	r3, #255	; 0xff
 801035c:	d102      	bne.n	8010364 <vQueueWaitForMessageRestricted+0x28>
 801035e:	2300      	movs	r3, #0
 8010360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010364:	f001 f81c 	bl	80113a0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010368:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801036a:	b92b      	cbnz	r3, 8010378 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801036c:	4632      	mov	r2, r6
 801036e:	4629      	mov	r1, r5
 8010370:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010374:	f000 fbca 	bl	8010b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010378:	4620      	mov	r0, r4
	}
 801037a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 801037e:	f7ff bbd0 	b.w	800fb22 <prvUnlockQueue>
	...

08010384 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010388:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801038a:	f000 ffe3 	bl	8011354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801038e:	4b2e      	ldr	r3, [pc, #184]	; (8010448 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8010390:	4d2e      	ldr	r5, [pc, #184]	; (801044c <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	4f2e      	ldr	r7, [pc, #184]	; (8010450 <prvAddNewTaskToReadyList+0xcc>)
 8010396:	3201      	adds	r2, #1
 8010398:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801039a:	682e      	ldr	r6, [r5, #0]
 801039c:	2e00      	cmp	r6, #0
 801039e:	d148      	bne.n	8010432 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80103a0:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d11f      	bne.n	80103e8 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80103a8:	f04f 0814 	mov.w	r8, #20
 80103ac:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103b0:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80103b2:	f7ff fb21 	bl	800f9f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103b6:	2e38      	cmp	r6, #56	; 0x38
 80103b8:	d1f8      	bne.n	80103ac <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 80103ba:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801047c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80103be:	4e25      	ldr	r6, [pc, #148]	; (8010454 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 80103c0:	4640      	mov	r0, r8
 80103c2:	f7ff fb19 	bl	800f9f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80103c6:	4630      	mov	r0, r6
 80103c8:	f7ff fb16 	bl	800f9f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80103cc:	4822      	ldr	r0, [pc, #136]	; (8010458 <prvAddNewTaskToReadyList+0xd4>)
 80103ce:	f7ff fb13 	bl	800f9f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80103d2:	4822      	ldr	r0, [pc, #136]	; (801045c <prvAddNewTaskToReadyList+0xd8>)
 80103d4:	f7ff fb10 	bl	800f9f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80103d8:	4821      	ldr	r0, [pc, #132]	; (8010460 <prvAddNewTaskToReadyList+0xdc>)
 80103da:	f7ff fb0d 	bl	800f9f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80103de:	4b21      	ldr	r3, [pc, #132]	; (8010464 <prvAddNewTaskToReadyList+0xe0>)
 80103e0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80103e4:	4b20      	ldr	r3, [pc, #128]	; (8010468 <prvAddNewTaskToReadyList+0xe4>)
 80103e6:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 80103e8:	4a20      	ldr	r2, [pc, #128]	; (801046c <prvAddNewTaskToReadyList+0xe8>)
 80103ea:	6813      	ldr	r3, [r2, #0]
 80103ec:	3301      	adds	r3, #1
 80103ee:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80103f0:	4a1f      	ldr	r2, [pc, #124]	; (8010470 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80103f2:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 80103f4:	6811      	ldr	r1, [r2, #0]
 80103f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80103f8:	428b      	cmp	r3, r1
 80103fa:	d900      	bls.n	80103fe <prvAddNewTaskToReadyList+0x7a>
 80103fc:	6013      	str	r3, [r2, #0]
 80103fe:	2014      	movs	r0, #20
 8010400:	1d21      	adds	r1, r4, #4
 8010402:	fb00 7003 	mla	r0, r0, r3, r7
 8010406:	f7ff fb05 	bl	800fa14 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801040a:	f000 ffc9 	bl	80113a0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801040e:	4b19      	ldr	r3, [pc, #100]	; (8010474 <prvAddNewTaskToReadyList+0xf0>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	b163      	cbz	r3, 801042e <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010414:	682b      	ldr	r3, [r5, #0]
 8010416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010418:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801041a:	429a      	cmp	r2, r3
 801041c:	d207      	bcs.n	801042e <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 801041e:	4b16      	ldr	r3, [pc, #88]	; (8010478 <prvAddNewTaskToReadyList+0xf4>)
 8010420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010424:	601a      	str	r2, [r3, #0]
 8010426:	f3bf 8f4f 	dsb	sy
 801042a:	f3bf 8f6f 	isb	sy
}
 801042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8010432:	4b10      	ldr	r3, [pc, #64]	; (8010474 <prvAddNewTaskToReadyList+0xf0>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1d6      	bne.n	80103e8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801043a:	682b      	ldr	r3, [r5, #0]
 801043c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801043e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010440:	429a      	cmp	r2, r3
 8010442:	d8d1      	bhi.n	80103e8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8010444:	602c      	str	r4, [r5, #0]
 8010446:	e7cf      	b.n	80103e8 <prvAddNewTaskToReadyList+0x64>
 8010448:	20016bd0 	.word	0x20016bd0
 801044c:	20016760 	.word	0x20016760
 8010450:	2001676c 	.word	0x2001676c
 8010454:	20016bfc 	.word	0x20016bfc
 8010458:	20016c18 	.word	0x20016c18
 801045c:	20016c44 	.word	0x20016c44
 8010460:	20016c30 	.word	0x20016c30
 8010464:	20016764 	.word	0x20016764
 8010468:	20016768 	.word	0x20016768
 801046c:	20016be0 	.word	0x20016be0
 8010470:	20016be4 	.word	0x20016be4
 8010474:	20016c2c 	.word	0x20016c2c
 8010478:	e000ed04 	.word	0xe000ed04
 801047c:	20016be8 	.word	0x20016be8

08010480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010480:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010482:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 8010486:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010488:	b93b      	cbnz	r3, 801049a <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801048a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801048c:	f001 f950 	bl	8011730 <vPortFree>
				vPortFree( pxTCB );
 8010490:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8010496:	f001 b94b 	b.w	8011730 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801049a:	2b01      	cmp	r3, #1
 801049c:	d0f9      	beq.n	8010492 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d00a      	beq.n	80104b8 <prvDeleteTCB+0x38>
 80104a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a6:	b672      	cpsid	i
 80104a8:	f383 8811 	msr	BASEPRI, r3
 80104ac:	f3bf 8f6f 	isb	sy
 80104b0:	f3bf 8f4f 	dsb	sy
 80104b4:	b662      	cpsie	i
 80104b6:	e7fe      	b.n	80104b6 <prvDeleteTCB+0x36>
	}
 80104b8:	bd10      	pop	{r4, pc}
	...

080104bc <prvIdleTask>:
{
 80104bc:	b580      	push	{r7, lr}
				taskYIELD();
 80104be:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801051c <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104c2:	4f12      	ldr	r7, [pc, #72]	; (801050c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104c4:	4c12      	ldr	r4, [pc, #72]	; (8010510 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80104c6:	4d13      	ldr	r5, [pc, #76]	; (8010514 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	b963      	cbnz	r3, 80104e6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104cc:	4b12      	ldr	r3, [pc, #72]	; (8010518 <prvIdleTask+0x5c>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d9f8      	bls.n	80104c6 <prvIdleTask+0xa>
				taskYIELD();
 80104d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80104d8:	f8c8 3000 	str.w	r3, [r8]
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	e7ee      	b.n	80104c4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80104e6:	f000 ff35 	bl	8011354 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80104ee:	1d30      	adds	r0, r6, #4
 80104f0:	f7ff fab3 	bl	800fa5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80104f4:	682b      	ldr	r3, [r5, #0]
 80104f6:	3b01      	subs	r3, #1
 80104f8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	3b01      	subs	r3, #1
 80104fe:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010500:	f000 ff4e 	bl	80113a0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010504:	4630      	mov	r0, r6
 8010506:	f7ff ffbb 	bl	8010480 <prvDeleteTCB>
 801050a:	e7dd      	b.n	80104c8 <prvIdleTask+0xc>
 801050c:	20016c44 	.word	0x20016c44
 8010510:	20016bd4 	.word	0x20016bd4
 8010514:	20016bd0 	.word	0x20016bd0
 8010518:	2001676c 	.word	0x2001676c
 801051c:	e000ed04 	.word	0xe000ed04

08010520 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010520:	4a06      	ldr	r2, [pc, #24]	; (801053c <prvResetNextTaskUnblockTime+0x1c>)
 8010522:	6813      	ldr	r3, [r2, #0]
 8010524:	6819      	ldr	r1, [r3, #0]
 8010526:	4b06      	ldr	r3, [pc, #24]	; (8010540 <prvResetNextTaskUnblockTime+0x20>)
 8010528:	b919      	cbnz	r1, 8010532 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801052a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801052e:	601a      	str	r2, [r3, #0]
	}
}
 8010530:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010532:	6812      	ldr	r2, [r2, #0]
 8010534:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010536:	68d2      	ldr	r2, [r2, #12]
 8010538:	6852      	ldr	r2, [r2, #4]
 801053a:	e7f8      	b.n	801052e <prvResetNextTaskUnblockTime+0xe>
 801053c:	20016764 	.word	0x20016764
 8010540:	20016c10 	.word	0x20016c10

08010544 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010548:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801054a:	4680      	mov	r8, r0
 801054c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801054e:	21a5      	movs	r1, #165	; 0xa5
 8010550:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010552:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010554:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010556:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801055a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801055c:	f002 fc8d 	bl	8012e7a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010560:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010562:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010564:	f026 0607 	bic.w	r6, r6, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8010568:	6466      	str	r6, [r4, #68]	; 0x44
	if( pcName != NULL )
 801056a:	b3a5      	cbz	r5, 80105d6 <prvInitialiseNewTask.isra.2+0x92>
 801056c:	1e6b      	subs	r3, r5, #1
 801056e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8010572:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010574:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010578:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 801057c:	7819      	ldrb	r1, [r3, #0]
 801057e:	b109      	cbz	r1, 8010584 <prvInitialiseNewTask.isra.2+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010580:	42ab      	cmp	r3, r5
 8010582:	d1f7      	bne.n	8010574 <prvInitialiseNewTask.isra.2+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010584:	2300      	movs	r3, #0
 8010586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801058a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 801058c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010590:	1d20      	adds	r0, r4, #4
 8010592:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8010594:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 8010598:	bf28      	it	cs
 801059a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 801059c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801059e:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105a0:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80105a4:	f7ff fa33 	bl	800fa0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80105a8:	f104 0018 	add.w	r0, r4, #24
 80105ac:	f7ff fa2f 	bl	800fa0e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80105b0:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80105b4:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105b6:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105b8:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105ba:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80105bc:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105be:	4630      	mov	r0, r6
		pxNewTCB->ulRunTimeCounter = 0UL;
 80105c0:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105c4:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105c8:	f000 fe9e 	bl	8011308 <pxPortInitialiseStack>
 80105cc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80105ce:	b107      	cbz	r7, 80105d2 <prvInitialiseNewTask.isra.2+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80105d0:	603c      	str	r4, [r7, #0]
}
 80105d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80105d6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80105da:	e7d6      	b.n	801058a <prvInitialiseNewTask.isra.2+0x46>

080105dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105de:	4b16      	ldr	r3, [pc, #88]	; (8010638 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80105e0:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105e2:	4e16      	ldr	r6, [pc, #88]	; (801063c <prvAddCurrentTaskToDelayedList+0x60>)
{
 80105e4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80105e6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105e8:	6830      	ldr	r0, [r6, #0]
 80105ea:	3004      	adds	r0, #4
 80105ec:	f7ff fa35 	bl	800fa5a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105f0:	1c6b      	adds	r3, r5, #1
 80105f2:	4633      	mov	r3, r6
 80105f4:	d107      	bne.n	8010606 <prvAddCurrentTaskToDelayedList+0x2a>
 80105f6:	b137      	cbz	r7, 8010606 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105f8:	6831      	ldr	r1, [r6, #0]
 80105fa:	4811      	ldr	r0, [pc, #68]	; (8010640 <prvAddCurrentTaskToDelayedList+0x64>)
 80105fc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80105fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010602:	f7ff ba07 	b.w	800fa14 <vListInsertEnd>
 8010606:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 801060c:	d307      	bcc.n	801061e <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801060e:	4a0d      	ldr	r2, [pc, #52]	; (8010644 <prvAddCurrentTaskToDelayedList+0x68>)
 8010610:	6810      	ldr	r0, [r2, #0]
 8010612:	6819      	ldr	r1, [r3, #0]
}
 8010614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010618:	3104      	adds	r1, #4
 801061a:	f7ff ba07 	b.w	800fa2c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801061e:	4a0a      	ldr	r2, [pc, #40]	; (8010648 <prvAddCurrentTaskToDelayedList+0x6c>)
 8010620:	6810      	ldr	r0, [r2, #0]
 8010622:	6819      	ldr	r1, [r3, #0]
 8010624:	3104      	adds	r1, #4
 8010626:	f7ff fa01 	bl	800fa2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801062a:	4b08      	ldr	r3, [pc, #32]	; (801064c <prvAddCurrentTaskToDelayedList+0x70>)
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	42a2      	cmp	r2, r4
 8010630:	d900      	bls.n	8010634 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8010632:	601c      	str	r4, [r3, #0]
}
 8010634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010636:	bf00      	nop
 8010638:	20016c58 	.word	0x20016c58
 801063c:	20016760 	.word	0x20016760
 8010640:	20016c30 	.word	0x20016c30
 8010644:	20016768 	.word	0x20016768
 8010648:	20016764 	.word	0x20016764
 801064c:	20016c10 	.word	0x20016c10

08010650 <xTaskCreateStatic>:
	{
 8010650:	b570      	push	{r4, r5, r6, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010658:	b955      	cbnz	r5, 8010670 <xTaskCreateStatic+0x20>
 801065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065e:	b672      	cpsid	i
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	b662      	cpsie	i
 801066e:	e7fe      	b.n	801066e <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8010670:	b954      	cbnz	r4, 8010688 <xTaskCreateStatic+0x38>
 8010672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010676:	b672      	cpsid	i
 8010678:	f383 8811 	msr	BASEPRI, r3
 801067c:	f3bf 8f6f 	isb	sy
 8010680:	f3bf 8f4f 	dsb	sy
 8010684:	b662      	cpsie	i
 8010686:	e7fe      	b.n	8010686 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010688:	2664      	movs	r6, #100	; 0x64
 801068a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801068c:	9e05      	ldr	r6, [sp, #20]
 801068e:	2e64      	cmp	r6, #100	; 0x64
 8010690:	d00a      	beq.n	80106a8 <xTaskCreateStatic+0x58>
 8010692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010696:	b672      	cpsid	i
 8010698:	f383 8811 	msr	BASEPRI, r3
 801069c:	f3bf 8f6f 	isb	sy
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	b662      	cpsie	i
 80106a6:	e7fe      	b.n	80106a6 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80106a8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80106aa:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80106ac:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80106ae:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80106b2:	ad04      	add	r5, sp, #16
 80106b4:	9402      	str	r4, [sp, #8]
 80106b6:	9501      	str	r5, [sp, #4]
 80106b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80106ba:	9500      	str	r5, [sp, #0]
 80106bc:	f7ff ff42 	bl	8010544 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80106c0:	4620      	mov	r0, r4
 80106c2:	f7ff fe5f 	bl	8010384 <prvAddNewTaskToReadyList>
	}
 80106c6:	9804      	ldr	r0, [sp, #16]
 80106c8:	b006      	add	sp, #24
 80106ca:	bd70      	pop	{r4, r5, r6, pc}

080106cc <xTaskCreate>:
	{
 80106cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106d0:	4607      	mov	r7, r0
 80106d2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80106d4:	0090      	lsls	r0, r2, #2
	{
 80106d6:	4688      	mov	r8, r1
 80106d8:	4616      	mov	r6, r2
 80106da:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80106dc:	f000 ff98 	bl	8011610 <pvPortMalloc>
			if( pxStack != NULL )
 80106e0:	4605      	mov	r5, r0
 80106e2:	b1e8      	cbz	r0, 8010720 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80106e4:	2064      	movs	r0, #100	; 0x64
 80106e6:	f000 ff93 	bl	8011610 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80106ea:	4604      	mov	r4, r0
 80106ec:	b1a8      	cbz	r0, 801071a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80106ee:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80106f0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106f2:	4632      	mov	r2, r6
 80106f4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80106f6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106fc:	9002      	str	r0, [sp, #8]
 80106fe:	4638      	mov	r0, r7
 8010700:	9301      	str	r3, [sp, #4]
 8010702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	464b      	mov	r3, r9
 8010708:	f7ff ff1c 	bl	8010544 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 801070c:	4620      	mov	r0, r4
 801070e:	f7ff fe39 	bl	8010384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010712:	2001      	movs	r0, #1
	}
 8010714:	b005      	add	sp, #20
 8010716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 801071a:	4628      	mov	r0, r5
 801071c:	f001 f808 	bl	8011730 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010720:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8010724:	e7f6      	b.n	8010714 <xTaskCreate+0x48>
	...

08010728 <vTaskStartScheduler>:
{
 8010728:	b510      	push	{r4, lr}
 801072a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801072c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801072e:	aa07      	add	r2, sp, #28
 8010730:	a906      	add	r1, sp, #24
 8010732:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010734:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010738:	f7ff f946 	bl	800f9c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801073c:	9b05      	ldr	r3, [sp, #20]
 801073e:	9a07      	ldr	r2, [sp, #28]
 8010740:	9302      	str	r3, [sp, #8]
 8010742:	9b06      	ldr	r3, [sp, #24]
 8010744:	4917      	ldr	r1, [pc, #92]	; (80107a4 <vTaskStartScheduler+0x7c>)
 8010746:	4818      	ldr	r0, [pc, #96]	; (80107a8 <vTaskStartScheduler+0x80>)
 8010748:	e9cd 4300 	strd	r4, r3, [sp]
 801074c:	4623      	mov	r3, r4
 801074e:	f7ff ff7f 	bl	8010650 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8010752:	b1b8      	cbz	r0, 8010784 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8010754:	f000 fbdc 	bl	8010f10 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010758:	2801      	cmp	r0, #1
 801075a:	d115      	bne.n	8010788 <vTaskStartScheduler+0x60>
 801075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010760:	b672      	cpsid	i
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8010770:	4b0e      	ldr	r3, [pc, #56]	; (80107ac <vTaskStartScheduler+0x84>)
 8010772:	f04f 32ff 	mov.w	r2, #4294967295
 8010776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010778:	4b0d      	ldr	r3, [pc, #52]	; (80107b0 <vTaskStartScheduler+0x88>)
 801077a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801077c:	4b0d      	ldr	r3, [pc, #52]	; (80107b4 <vTaskStartScheduler+0x8c>)
 801077e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8010780:	f000 fe8a 	bl	8011498 <xPortStartScheduler>
}
 8010784:	b008      	add	sp, #32
 8010786:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010788:	3001      	adds	r0, #1
 801078a:	d1fb      	bne.n	8010784 <vTaskStartScheduler+0x5c>
 801078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010790:	b672      	cpsid	i
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	b662      	cpsie	i
 80107a0:	e7fe      	b.n	80107a0 <vTaskStartScheduler+0x78>
 80107a2:	bf00      	nop
 80107a4:	08017aa5 	.word	0x08017aa5
 80107a8:	080104bd 	.word	0x080104bd
 80107ac:	20016c10 	.word	0x20016c10
 80107b0:	20016c2c 	.word	0x20016c2c
 80107b4:	20016c58 	.word	0x20016c58

080107b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80107b8:	4a02      	ldr	r2, [pc, #8]	; (80107c4 <vTaskSuspendAll+0xc>)
 80107ba:	6813      	ldr	r3, [r2, #0]
 80107bc:	3301      	adds	r3, #1
 80107be:	6013      	str	r3, [r2, #0]
}
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	20016bdc 	.word	0x20016bdc

080107c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80107c8:	4b01      	ldr	r3, [pc, #4]	; (80107d0 <xTaskGetTickCount+0x8>)
 80107ca:	6818      	ldr	r0, [r3, #0]
}
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	20016c58 	.word	0x20016c58

080107d4 <xTaskIncrementTick>:
{
 80107d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107d8:	4b3c      	ldr	r3, [pc, #240]	; (80108cc <xTaskIncrementTick+0xf8>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d16d      	bne.n	80108bc <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80107e0:	4b3b      	ldr	r3, [pc, #236]	; (80108d0 <xTaskIncrementTick+0xfc>)
 80107e2:	681c      	ldr	r4, [r3, #0]
 80107e4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80107e6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80107e8:	b9cc      	cbnz	r4, 801081e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80107ea:	4b3a      	ldr	r3, [pc, #232]	; (80108d4 <xTaskIncrementTick+0x100>)
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	6812      	ldr	r2, [r2, #0]
 80107f0:	b152      	cbz	r2, 8010808 <xTaskIncrementTick+0x34>
 80107f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f6:	b672      	cpsid	i
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	b662      	cpsie	i
 8010806:	e7fe      	b.n	8010806 <xTaskIncrementTick+0x32>
 8010808:	4a33      	ldr	r2, [pc, #204]	; (80108d8 <xTaskIncrementTick+0x104>)
 801080a:	6819      	ldr	r1, [r3, #0]
 801080c:	6810      	ldr	r0, [r2, #0]
 801080e:	6018      	str	r0, [r3, #0]
 8010810:	6011      	str	r1, [r2, #0]
 8010812:	4a32      	ldr	r2, [pc, #200]	; (80108dc <xTaskIncrementTick+0x108>)
 8010814:	6813      	ldr	r3, [r2, #0]
 8010816:	3301      	adds	r3, #1
 8010818:	6013      	str	r3, [r2, #0]
 801081a:	f7ff fe81 	bl	8010520 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801081e:	4d30      	ldr	r5, [pc, #192]	; (80108e0 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8010820:	f04f 0b00 	mov.w	fp, #0
 8010824:	4f2f      	ldr	r7, [pc, #188]	; (80108e4 <xTaskIncrementTick+0x110>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010826:	682b      	ldr	r3, [r5, #0]
 8010828:	42a3      	cmp	r3, r4
 801082a:	d911      	bls.n	8010850 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801082c:	683a      	ldr	r2, [r7, #0]
 801082e:	4b2e      	ldr	r3, [pc, #184]	; (80108e8 <xTaskIncrementTick+0x114>)
 8010830:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010832:	2214      	movs	r2, #20
 8010834:	434a      	muls	r2, r1
 8010836:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8010838:	2a02      	cmp	r2, #2
 801083a:	bf28      	it	cs
 801083c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8010840:	4a2a      	ldr	r2, [pc, #168]	; (80108ec <xTaskIncrementTick+0x118>)
 8010842:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8010844:	2a00      	cmp	r2, #0
}
 8010846:	bf0c      	ite	eq
 8010848:	4658      	moveq	r0, fp
 801084a:	2001      	movne	r0, #1
 801084c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010850:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80108d4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8010854:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80108f4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010858:	f8d9 2000 	ldr.w	r2, [r9]
 801085c:	6812      	ldr	r2, [r2, #0]
 801085e:	b91a      	cbnz	r2, 8010868 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010860:	f04f 32ff 	mov.w	r2, #4294967295
 8010864:	602a      	str	r2, [r5, #0]
					break;
 8010866:	e7e1      	b.n	801082c <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010868:	f8d9 2000 	ldr.w	r2, [r9]
 801086c:	68d2      	ldr	r2, [r2, #12]
 801086e:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010870:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8010872:	428c      	cmp	r4, r1
 8010874:	d201      	bcs.n	801087a <xTaskIncrementTick+0xa6>
						xNextTaskUnblockTime = xItemValue;
 8010876:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010878:	e7d8      	b.n	801082c <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801087a:	f106 0804 	add.w	r8, r6, #4
 801087e:	4640      	mov	r0, r8
 8010880:	f7ff f8eb 	bl	800fa5a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010884:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8010886:	b119      	cbz	r1, 8010890 <xTaskIncrementTick+0xbc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010888:	f106 0018 	add.w	r0, r6, #24
 801088c:	f7ff f8e5 	bl	800fa5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010890:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8010892:	f8da 1000 	ldr.w	r1, [sl]
 8010896:	4288      	cmp	r0, r1
 8010898:	d901      	bls.n	801089e <xTaskIncrementTick+0xca>
 801089a:	f8ca 0000 	str.w	r0, [sl]
 801089e:	2214      	movs	r2, #20
 80108a0:	4b11      	ldr	r3, [pc, #68]	; (80108e8 <xTaskIncrementTick+0x114>)
 80108a2:	4641      	mov	r1, r8
 80108a4:	fb02 3000 	mla	r0, r2, r0, r3
 80108a8:	f7ff f8b4 	bl	800fa14 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80108ac:	6838      	ldr	r0, [r7, #0]
 80108ae:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80108b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80108b2:	4291      	cmp	r1, r2
 80108b4:	bf28      	it	cs
 80108b6:	f04f 0b01 	movcs.w	fp, #1
 80108ba:	e7cd      	b.n	8010858 <xTaskIncrementTick+0x84>
		++uxPendedTicks;
 80108bc:	4a0c      	ldr	r2, [pc, #48]	; (80108f0 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80108be:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80108c2:	6813      	ldr	r3, [r2, #0]
 80108c4:	3301      	adds	r3, #1
 80108c6:	6013      	str	r3, [r2, #0]
 80108c8:	e7ba      	b.n	8010840 <xTaskIncrementTick+0x6c>
 80108ca:	bf00      	nop
 80108cc:	20016bdc 	.word	0x20016bdc
 80108d0:	20016c58 	.word	0x20016c58
 80108d4:	20016764 	.word	0x20016764
 80108d8:	20016768 	.word	0x20016768
 80108dc:	20016c14 	.word	0x20016c14
 80108e0:	20016c10 	.word	0x20016c10
 80108e4:	20016760 	.word	0x20016760
 80108e8:	2001676c 	.word	0x2001676c
 80108ec:	20016c5c 	.word	0x20016c5c
 80108f0:	20016bd8 	.word	0x20016bd8
 80108f4:	20016be4 	.word	0x20016be4

080108f8 <xTaskResumeAll>:
{
 80108f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80108fc:	4c30      	ldr	r4, [pc, #192]	; (80109c0 <xTaskResumeAll+0xc8>)
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	b953      	cbnz	r3, 8010918 <xTaskResumeAll+0x20>
 8010902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010906:	b672      	cpsid	i
 8010908:	f383 8811 	msr	BASEPRI, r3
 801090c:	f3bf 8f6f 	isb	sy
 8010910:	f3bf 8f4f 	dsb	sy
 8010914:	b662      	cpsie	i
 8010916:	e7fe      	b.n	8010916 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8010918:	f000 fd1c 	bl	8011354 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	3b01      	subs	r3, #1
 8010920:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010922:	6824      	ldr	r4, [r4, #0]
 8010924:	b12c      	cbz	r4, 8010932 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8010926:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010928:	f000 fd3a 	bl	80113a0 <vPortExitCritical>
}
 801092c:	4620      	mov	r0, r4
 801092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010932:	4b24      	ldr	r3, [pc, #144]	; (80109c4 <xTaskResumeAll+0xcc>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d0f5      	beq.n	8010926 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801093a:	4d23      	ldr	r5, [pc, #140]	; (80109c8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 801093c:	4e23      	ldr	r6, [pc, #140]	; (80109cc <xTaskResumeAll+0xd4>)
 801093e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80109e0 <xTaskResumeAll+0xe8>
 8010942:	e01d      	b.n	8010980 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010944:	68eb      	ldr	r3, [r5, #12]
 8010946:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010948:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801094a:	f104 0018 	add.w	r0, r4, #24
 801094e:	f7ff f884 	bl	800fa5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010952:	4638      	mov	r0, r7
 8010954:	f7ff f881 	bl	800fa5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801095a:	6832      	ldr	r2, [r6, #0]
 801095c:	4293      	cmp	r3, r2
 801095e:	d900      	bls.n	8010962 <xTaskResumeAll+0x6a>
 8010960:	6033      	str	r3, [r6, #0]
 8010962:	2014      	movs	r0, #20
 8010964:	4639      	mov	r1, r7
 8010966:	fb00 8003 	mla	r0, r0, r3, r8
 801096a:	f7ff f853 	bl	800fa14 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801096e:	4b18      	ldr	r3, [pc, #96]	; (80109d0 <xTaskResumeAll+0xd8>)
 8010970:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010976:	429a      	cmp	r2, r3
 8010978:	d302      	bcc.n	8010980 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 801097a:	4b16      	ldr	r3, [pc, #88]	; (80109d4 <xTaskResumeAll+0xdc>)
 801097c:	2201      	movs	r2, #1
 801097e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010980:	682b      	ldr	r3, [r5, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d1de      	bne.n	8010944 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 8010986:	b10c      	cbz	r4, 801098c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8010988:	f7ff fdca 	bl	8010520 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801098c:	4d12      	ldr	r5, [pc, #72]	; (80109d8 <xTaskResumeAll+0xe0>)
 801098e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010990:	b144      	cbz	r4, 80109a4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8010992:	4e10      	ldr	r6, [pc, #64]	; (80109d4 <xTaskResumeAll+0xdc>)
 8010994:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8010996:	f7ff ff1d 	bl	80107d4 <xTaskIncrementTick>
 801099a:	b100      	cbz	r0, 801099e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 801099c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801099e:	3c01      	subs	r4, #1
 80109a0:	d1f9      	bne.n	8010996 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80109a2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80109a4:	4b0b      	ldr	r3, [pc, #44]	; (80109d4 <xTaskResumeAll+0xdc>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d0bc      	beq.n	8010926 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80109ac:	4b0b      	ldr	r3, [pc, #44]	; (80109dc <xTaskResumeAll+0xe4>)
 80109ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80109bc:	2401      	movs	r4, #1
 80109be:	e7b3      	b.n	8010928 <xTaskResumeAll+0x30>
 80109c0:	20016bdc 	.word	0x20016bdc
 80109c4:	20016bd0 	.word	0x20016bd0
 80109c8:	20016c18 	.word	0x20016c18
 80109cc:	20016be4 	.word	0x20016be4
 80109d0:	20016760 	.word	0x20016760
 80109d4:	20016c5c 	.word	0x20016c5c
 80109d8:	20016bd8 	.word	0x20016bd8
 80109dc:	e000ed04 	.word	0xe000ed04
 80109e0:	2001676c 	.word	0x2001676c

080109e4 <vTaskDelay>:
	{
 80109e4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80109e6:	b940      	cbnz	r0, 80109fa <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80109e8:	4b0f      	ldr	r3, [pc, #60]	; (8010a28 <vTaskDelay+0x44>)
 80109ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ee:	601a      	str	r2, [r3, #0]
 80109f0:	f3bf 8f4f 	dsb	sy
 80109f4:	f3bf 8f6f 	isb	sy
	}
 80109f8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80109fa:	4b0c      	ldr	r3, [pc, #48]	; (8010a2c <vTaskDelay+0x48>)
 80109fc:	6819      	ldr	r1, [r3, #0]
 80109fe:	b151      	cbz	r1, 8010a16 <vTaskDelay+0x32>
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	b672      	cpsid	i
 8010a06:	f383 8811 	msr	BASEPRI, r3
 8010a0a:	f3bf 8f6f 	isb	sy
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	b662      	cpsie	i
 8010a14:	e7fe      	b.n	8010a14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8010a16:	f7ff fecf 	bl	80107b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010a1a:	f7ff fddf 	bl	80105dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8010a1e:	f7ff ff6b 	bl	80108f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8010a22:	2800      	cmp	r0, #0
 8010a24:	d0e0      	beq.n	80109e8 <vTaskDelay+0x4>
 8010a26:	e7e7      	b.n	80109f8 <vTaskDelay+0x14>
 8010a28:	e000ed04 	.word	0xe000ed04
 8010a2c:	20016bdc 	.word	0x20016bdc

08010a30 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a30:	4b21      	ldr	r3, [pc, #132]	; (8010ab8 <vTaskSwitchContext+0x88>)
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	4b21      	ldr	r3, [pc, #132]	; (8010abc <vTaskSwitchContext+0x8c>)
{
 8010a36:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a38:	b112      	cbz	r2, 8010a40 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	601a      	str	r2, [r3, #0]
}
 8010a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8010a40:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010a42:	221b      	movs	r2, #27
 8010a44:	4b1e      	ldr	r3, [pc, #120]	; (8010ac0 <vTaskSwitchContext+0x90>)
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010a46:	491f      	ldr	r1, [pc, #124]	; (8010ac4 <vTaskSwitchContext+0x94>)
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010a4a:	680c      	ldr	r4, [r1, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8010a4c:	fbb3 f3f2 	udiv	r3, r3, r2
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8010a50:	42a3      	cmp	r3, r4
 8010a52:	d905      	bls.n	8010a60 <vTaskSwitchContext+0x30>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8010a54:	4a1c      	ldr	r2, [pc, #112]	; (8010ac8 <vTaskSwitchContext+0x98>)
 8010a56:	6810      	ldr	r0, [r2, #0]
 8010a58:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8010a5a:	441a      	add	r2, r3
 8010a5c:	1b12      	subs	r2, r2, r4
 8010a5e:	6582      	str	r2, [r0, #88]	; 0x58
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a60:	4d1a      	ldr	r5, [pc, #104]	; (8010acc <vTaskSwitchContext+0x9c>)
 8010a62:	2714      	movs	r7, #20
 8010a64:	4a1a      	ldr	r2, [pc, #104]	; (8010ad0 <vTaskSwitchContext+0xa0>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 8010a66:	600b      	str	r3, [r1, #0]
 8010a68:	4616      	mov	r6, r2
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a6a:	682b      	ldr	r3, [r5, #0]
 8010a6c:	fb07 f103 	mul.w	r1, r7, r3
 8010a70:	5854      	ldr	r4, [r2, r1]
 8010a72:	1850      	adds	r0, r2, r1
 8010a74:	b18c      	cbz	r4, 8010a9a <vTaskSwitchContext+0x6a>
 8010a76:	6844      	ldr	r4, [r0, #4]
 8010a78:	3108      	adds	r1, #8
 8010a7a:	6864      	ldr	r4, [r4, #4]
 8010a7c:	440a      	add	r2, r1
 8010a7e:	4294      	cmp	r4, r2
 8010a80:	6044      	str	r4, [r0, #4]
 8010a82:	bf04      	itt	eq
 8010a84:	6862      	ldreq	r2, [r4, #4]
 8010a86:	6042      	streq	r2, [r0, #4]
 8010a88:	2214      	movs	r2, #20
 8010a8a:	fb02 6203 	mla	r2, r2, r3, r6
 8010a8e:	6852      	ldr	r2, [r2, #4]
 8010a90:	68d1      	ldr	r1, [r2, #12]
 8010a92:	4a0d      	ldr	r2, [pc, #52]	; (8010ac8 <vTaskSwitchContext+0x98>)
 8010a94:	6011      	str	r1, [r2, #0]
 8010a96:	602b      	str	r3, [r5, #0]
}
 8010a98:	e7d1      	b.n	8010a3e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a9a:	b953      	cbnz	r3, 8010ab2 <vTaskSwitchContext+0x82>
 8010a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa0:	b672      	cpsid	i
 8010aa2:	f383 8811 	msr	BASEPRI, r3
 8010aa6:	f3bf 8f6f 	isb	sy
 8010aaa:	f3bf 8f4f 	dsb	sy
 8010aae:	b662      	cpsie	i
 8010ab0:	e7fe      	b.n	8010ab0 <vTaskSwitchContext+0x80>
 8010ab2:	3b01      	subs	r3, #1
 8010ab4:	e7da      	b.n	8010a6c <vTaskSwitchContext+0x3c>
 8010ab6:	bf00      	nop
 8010ab8:	20016bdc 	.word	0x20016bdc
 8010abc:	20016c5c 	.word	0x20016c5c
 8010ac0:	40000c00 	.word	0x40000c00
 8010ac4:	20016bcc 	.word	0x20016bcc
 8010ac8:	20016760 	.word	0x20016760
 8010acc:	20016be4 	.word	0x20016be4
 8010ad0:	2001676c 	.word	0x2001676c

08010ad4 <vTaskPlaceOnEventList>:
{
 8010ad4:	b510      	push	{r4, lr}
 8010ad6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8010ad8:	b950      	cbnz	r0, 8010af0 <vTaskPlaceOnEventList+0x1c>
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	b672      	cpsid	i
 8010ae0:	f383 8811 	msr	BASEPRI, r3
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	b662      	cpsie	i
 8010aee:	e7fe      	b.n	8010aee <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010af0:	4b05      	ldr	r3, [pc, #20]	; (8010b08 <vTaskPlaceOnEventList+0x34>)
 8010af2:	6819      	ldr	r1, [r3, #0]
 8010af4:	3118      	adds	r1, #24
 8010af6:	f7fe ff99 	bl	800fa2c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010afa:	4620      	mov	r0, r4
 8010afc:	2101      	movs	r1, #1
}
 8010afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b02:	f7ff bd6b 	b.w	80105dc <prvAddCurrentTaskToDelayedList>
 8010b06:	bf00      	nop
 8010b08:	20016760 	.word	0x20016760

08010b0c <vTaskPlaceOnEventListRestricted>:
	{
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	460d      	mov	r5, r1
 8010b10:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8010b12:	b950      	cbnz	r0, 8010b2a <vTaskPlaceOnEventListRestricted+0x1e>
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	b672      	cpsid	i
 8010b1a:	f383 8811 	msr	BASEPRI, r3
 8010b1e:	f3bf 8f6f 	isb	sy
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	b662      	cpsie	i
 8010b28:	e7fe      	b.n	8010b28 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b2a:	4b07      	ldr	r3, [pc, #28]	; (8010b48 <vTaskPlaceOnEventListRestricted+0x3c>)
 8010b2c:	6819      	ldr	r1, [r3, #0]
 8010b2e:	3118      	adds	r1, #24
 8010b30:	f7fe ff70 	bl	800fa14 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8010b34:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b36:	4621      	mov	r1, r4
 8010b38:	bf0c      	ite	eq
 8010b3a:	4628      	moveq	r0, r5
 8010b3c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8010b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010b44:	f7ff bd4a 	b.w	80105dc <prvAddCurrentTaskToDelayedList>
 8010b48:	20016760 	.word	0x20016760

08010b4c <xTaskRemoveFromEventList>:
{
 8010b4c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b4e:	68c3      	ldr	r3, [r0, #12]
 8010b50:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010b52:	b954      	cbnz	r4, 8010b6a <xTaskRemoveFromEventList+0x1e>
 8010b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b58:	b672      	cpsid	i
 8010b5a:	f383 8811 	msr	BASEPRI, r3
 8010b5e:	f3bf 8f6f 	isb	sy
 8010b62:	f3bf 8f4f 	dsb	sy
 8010b66:	b662      	cpsie	i
 8010b68:	e7fe      	b.n	8010b68 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010b6a:	f104 0518 	add.w	r5, r4, #24
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f7fe ff73 	bl	800fa5a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b74:	4b11      	ldr	r3, [pc, #68]	; (8010bbc <xTaskRemoveFromEventList+0x70>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	b9d3      	cbnz	r3, 8010bb0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010b7a:	1d25      	adds	r5, r4, #4
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f7fe ff6c 	bl	800fa5a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010b82:	4a0f      	ldr	r2, [pc, #60]	; (8010bc0 <xTaskRemoveFromEventList+0x74>)
 8010b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010b86:	6811      	ldr	r1, [r2, #0]
 8010b88:	428b      	cmp	r3, r1
 8010b8a:	d900      	bls.n	8010b8e <xTaskRemoveFromEventList+0x42>
 8010b8c:	6013      	str	r3, [r2, #0]
 8010b8e:	4a0d      	ldr	r2, [pc, #52]	; (8010bc4 <xTaskRemoveFromEventList+0x78>)
 8010b90:	2014      	movs	r0, #20
 8010b92:	4629      	mov	r1, r5
 8010b94:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010b98:	f7fe ff3c 	bl	800fa14 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010b9c:	4b0a      	ldr	r3, [pc, #40]	; (8010bc8 <xTaskRemoveFromEventList+0x7c>)
 8010b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d906      	bls.n	8010bb6 <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 8010ba8:	2001      	movs	r0, #1
 8010baa:	4b08      	ldr	r3, [pc, #32]	; (8010bcc <xTaskRemoveFromEventList+0x80>)
 8010bac:	6018      	str	r0, [r3, #0]
}
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010bb0:	4629      	mov	r1, r5
 8010bb2:	4807      	ldr	r0, [pc, #28]	; (8010bd0 <xTaskRemoveFromEventList+0x84>)
 8010bb4:	e7f0      	b.n	8010b98 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 8010bb6:	2000      	movs	r0, #0
	return xReturn;
 8010bb8:	e7f9      	b.n	8010bae <xTaskRemoveFromEventList+0x62>
 8010bba:	bf00      	nop
 8010bbc:	20016bdc 	.word	0x20016bdc
 8010bc0:	20016be4 	.word	0x20016be4
 8010bc4:	2001676c 	.word	0x2001676c
 8010bc8:	20016760 	.word	0x20016760
 8010bcc:	20016c5c 	.word	0x20016c5c
 8010bd0:	20016c18 	.word	0x20016c18

08010bd4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010bd4:	4b03      	ldr	r3, [pc, #12]	; (8010be4 <vTaskInternalSetTimeOutState+0x10>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010bda:	4b03      	ldr	r3, [pc, #12]	; (8010be8 <vTaskInternalSetTimeOutState+0x14>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	6043      	str	r3, [r0, #4]
}
 8010be0:	4770      	bx	lr
 8010be2:	bf00      	nop
 8010be4:	20016c14 	.word	0x20016c14
 8010be8:	20016c58 	.word	0x20016c58

08010bec <xTaskCheckForTimeOut>:
{
 8010bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bee:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8010bf0:	4605      	mov	r5, r0
 8010bf2:	b950      	cbnz	r0, 8010c0a <xTaskCheckForTimeOut+0x1e>
 8010bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf8:	b672      	cpsid	i
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	b662      	cpsie	i
 8010c08:	e7fe      	b.n	8010c08 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8010c0a:	b951      	cbnz	r1, 8010c22 <xTaskCheckForTimeOut+0x36>
 8010c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c10:	b672      	cpsid	i
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	b662      	cpsie	i
 8010c20:	e7fe      	b.n	8010c20 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8010c22:	f000 fb97 	bl	8011354 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010c26:	4b0f      	ldr	r3, [pc, #60]	; (8010c64 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c28:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8010c2a:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8010c2c:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010c2e:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8010c30:	1c5e      	adds	r6, r3, #1
 8010c32:	d00d      	beq.n	8010c50 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c34:	4e0c      	ldr	r6, [pc, #48]	; (8010c68 <xTaskCheckForTimeOut+0x7c>)
 8010c36:	682f      	ldr	r7, [r5, #0]
 8010c38:	6836      	ldr	r6, [r6, #0]
 8010c3a:	42b7      	cmp	r7, r6
 8010c3c:	d001      	beq.n	8010c42 <xTaskCheckForTimeOut+0x56>
 8010c3e:	4288      	cmp	r0, r1
 8010c40:	d90d      	bls.n	8010c5e <xTaskCheckForTimeOut+0x72>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d909      	bls.n	8010c5a <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 8010c46:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c48:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8010c4a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c4c:	f7ff ffc2 	bl	8010bd4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8010c50:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010c52:	f000 fba5 	bl	80113a0 <vPortExitCritical>
}
 8010c56:	4620      	mov	r0, r4
 8010c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8010c5e:	2401      	movs	r4, #1
 8010c60:	e7f7      	b.n	8010c52 <xTaskCheckForTimeOut+0x66>
 8010c62:	bf00      	nop
 8010c64:	20016c58 	.word	0x20016c58
 8010c68:	20016c14 	.word	0x20016c14

08010c6c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010c6c:	4b01      	ldr	r3, [pc, #4]	; (8010c74 <vTaskMissedYield+0x8>)
 8010c6e:	2201      	movs	r2, #1
 8010c70:	601a      	str	r2, [r3, #0]
}
 8010c72:	4770      	bx	lr
 8010c74:	20016c5c 	.word	0x20016c5c

08010c78 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8010c78:	4b01      	ldr	r3, [pc, #4]	; (8010c80 <xTaskGetCurrentTaskHandle+0x8>)
 8010c7a:	6818      	ldr	r0, [r3, #0]
	}
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	20016760 	.word	0x20016760

08010c84 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010c84:	4b05      	ldr	r3, [pc, #20]	; (8010c9c <xTaskGetSchedulerState+0x18>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	b133      	cbz	r3, 8010c98 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c8a:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <xTaskGetSchedulerState+0x1c>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8010c90:	bf0c      	ite	eq
 8010c92:	2002      	moveq	r0, #2
 8010c94:	2000      	movne	r0, #0
 8010c96:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010c98:	2001      	movs	r0, #1
	}
 8010c9a:	4770      	bx	lr
 8010c9c:	20016c2c 	.word	0x20016c2c
 8010ca0:	20016bdc 	.word	0x20016bdc

08010ca4 <xTaskPriorityInherit>:
	{
 8010ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	b340      	cbz	r0, 8010cfc <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010caa:	4a1b      	ldr	r2, [pc, #108]	; (8010d18 <xTaskPriorityInherit+0x74>)
 8010cac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010cae:	6811      	ldr	r1, [r2, #0]
 8010cb0:	4616      	mov	r6, r2
 8010cb2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8010cb4:	428b      	cmp	r3, r1
 8010cb6:	d226      	bcs.n	8010d06 <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010cb8:	6982      	ldr	r2, [r0, #24]
 8010cba:	2a00      	cmp	r2, #0
 8010cbc:	db04      	blt.n	8010cc8 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cbe:	6832      	ldr	r2, [r6, #0]
 8010cc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010cc2:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010cc6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010cc8:	2214      	movs	r2, #20
 8010cca:	4d14      	ldr	r5, [pc, #80]	; (8010d1c <xTaskPriorityInherit+0x78>)
 8010ccc:	fb02 5303 	mla	r3, r2, r3, r5
 8010cd0:	6962      	ldr	r2, [r4, #20]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d113      	bne.n	8010cfe <xTaskPriorityInherit+0x5a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cd6:	1d27      	adds	r7, r4, #4
 8010cd8:	4638      	mov	r0, r7
 8010cda:	f7fe febe 	bl	800fa5a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010cde:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010ce0:	4a0f      	ldr	r2, [pc, #60]	; (8010d20 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010ce4:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ce6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010ce8:	428b      	cmp	r3, r1
 8010cea:	d900      	bls.n	8010cee <xTaskPriorityInherit+0x4a>
 8010cec:	6013      	str	r3, [r2, #0]
 8010cee:	2014      	movs	r0, #20
 8010cf0:	4639      	mov	r1, r7
 8010cf2:	fb00 5003 	mla	r0, r0, r3, r5
 8010cf6:	f7fe fe8d 	bl	800fa14 <vListInsertEnd>
				xReturn = pdTRUE;
 8010cfa:	2001      	movs	r0, #1
	}
 8010cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010cfe:	6833      	ldr	r3, [r6, #0]
 8010d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d04:	e7f9      	b.n	8010cfa <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010d06:	6813      	ldr	r3, [r2, #0]
 8010d08:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8010d0a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010d0c:	42a0      	cmp	r0, r4
 8010d0e:	bf2c      	ite	cs
 8010d10:	2000      	movcs	r0, #0
 8010d12:	2001      	movcc	r0, #1
 8010d14:	e7f2      	b.n	8010cfc <xTaskPriorityInherit+0x58>
 8010d16:	bf00      	nop
 8010d18:	20016760 	.word	0x20016760
 8010d1c:	2001676c 	.word	0x2001676c
 8010d20:	20016be4 	.word	0x20016be4

08010d24 <xTaskPriorityDisinherit>:
	{
 8010d24:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8010d26:	b908      	cbnz	r0, 8010d2c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8010d28:	2000      	movs	r0, #0
	}
 8010d2a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8010d2c:	4b1d      	ldr	r3, [pc, #116]	; (8010da4 <xTaskPriorityDisinherit+0x80>)
 8010d2e:	681c      	ldr	r4, [r3, #0]
 8010d30:	4284      	cmp	r4, r0
 8010d32:	d00a      	beq.n	8010d4a <xTaskPriorityDisinherit+0x26>
 8010d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d38:	b672      	cpsid	i
 8010d3a:	f383 8811 	msr	BASEPRI, r3
 8010d3e:	f3bf 8f6f 	isb	sy
 8010d42:	f3bf 8f4f 	dsb	sy
 8010d46:	b662      	cpsie	i
 8010d48:	e7fe      	b.n	8010d48 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8010d4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010d4c:	b953      	cbnz	r3, 8010d64 <xTaskPriorityDisinherit+0x40>
 8010d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d52:	b672      	cpsid	i
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	b662      	cpsie	i
 8010d62:	e7fe      	b.n	8010d62 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8010d66:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d68:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8010d6a:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010d6c:	4291      	cmp	r1, r2
 8010d6e:	d0db      	beq.n	8010d28 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1d9      	bne.n	8010d28 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d74:	1d25      	adds	r5, r4, #4
 8010d76:	4628      	mov	r0, r5
 8010d78:	f7fe fe6f 	bl	800fa5a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010d7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010d82:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d84:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010d86:	4a08      	ldr	r2, [pc, #32]	; (8010da8 <xTaskPriorityDisinherit+0x84>)
 8010d88:	6811      	ldr	r1, [r2, #0]
 8010d8a:	428b      	cmp	r3, r1
 8010d8c:	d900      	bls.n	8010d90 <xTaskPriorityDisinherit+0x6c>
 8010d8e:	6013      	str	r3, [r2, #0]
 8010d90:	4a06      	ldr	r2, [pc, #24]	; (8010dac <xTaskPriorityDisinherit+0x88>)
 8010d92:	2014      	movs	r0, #20
 8010d94:	4629      	mov	r1, r5
 8010d96:	fb00 2003 	mla	r0, r0, r3, r2
 8010d9a:	f7fe fe3b 	bl	800fa14 <vListInsertEnd>
					xReturn = pdTRUE;
 8010d9e:	2001      	movs	r0, #1
		return xReturn;
 8010da0:	e7c3      	b.n	8010d2a <xTaskPriorityDisinherit+0x6>
 8010da2:	bf00      	nop
 8010da4:	20016760 	.word	0x20016760
 8010da8:	20016be4 	.word	0x20016be4
 8010dac:	2001676c 	.word	0x2001676c

08010db0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8010db0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8010db2:	4604      	mov	r4, r0
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d046      	beq.n	8010e46 <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 8010db8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8010dba:	b952      	cbnz	r2, 8010dd2 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8010dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc0:	b672      	cpsid	i
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	b662      	cpsie	i
 8010dd0:	e7fe      	b.n	8010dd0 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8010dd2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010dd4:	4299      	cmp	r1, r3
 8010dd6:	bf38      	it	cc
 8010dd8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010dda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010ddc:	428b      	cmp	r3, r1
 8010dde:	d032      	beq.n	8010e46 <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010de0:	2a01      	cmp	r2, #1
 8010de2:	d130      	bne.n	8010e46 <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 8010de4:	4a18      	ldr	r2, [pc, #96]	; (8010e48 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8010de6:	6812      	ldr	r2, [r2, #0]
 8010de8:	4282      	cmp	r2, r0
 8010dea:	d10a      	bne.n	8010e02 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8010dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df0:	b672      	cpsid	i
 8010df2:	f383 8811 	msr	BASEPRI, r3
 8010df6:	f3bf 8f6f 	isb	sy
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	b662      	cpsie	i
 8010e00:	e7fe      	b.n	8010e00 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010e02:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e04:	4d11      	ldr	r5, [pc, #68]	; (8010e4c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010e06:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e08:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8010e0c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e0e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e12:	bfa8      	it	ge
 8010e14:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e18:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e1a:	bfa8      	it	ge
 8010e1c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d111      	bne.n	8010e46 <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e22:	1d06      	adds	r6, r0, #4
 8010e24:	4630      	mov	r0, r6
 8010e26:	f7fe fe18 	bl	800fa5a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010e2a:	4a09      	ldr	r2, [pc, #36]	; (8010e50 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8010e2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010e2e:	6811      	ldr	r1, [r2, #0]
 8010e30:	428b      	cmp	r3, r1
 8010e32:	d900      	bls.n	8010e36 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8010e34:	6013      	str	r3, [r2, #0]
 8010e36:	2014      	movs	r0, #20
 8010e38:	4631      	mov	r1, r6
 8010e3a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8010e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8010e42:	f7fe bde7 	b.w	800fa14 <vListInsertEnd>
	}
 8010e46:	bd70      	pop	{r4, r5, r6, pc}
 8010e48:	20016760 	.word	0x20016760
 8010e4c:	2001676c 	.word	0x2001676c
 8010e50:	20016be4 	.word	0x20016be4

08010e54 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8010e54:	4b04      	ldr	r3, [pc, #16]	; (8010e68 <pvTaskIncrementMutexHeldCount+0x14>)
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	b11a      	cbz	r2, 8010e62 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e5a:	6819      	ldr	r1, [r3, #0]
 8010e5c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8010e5e:	3201      	adds	r2, #1
 8010e60:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 8010e62:	6818      	ldr	r0, [r3, #0]
	}
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop
 8010e68:	20016760 	.word	0x20016760

08010e6c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8010e6e:	4c11      	ldr	r4, [pc, #68]	; (8010eb4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8010e70:	f000 fa70 	bl	8011354 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8010e74:	6825      	ldr	r5, [r4, #0]
 8010e76:	b9bd      	cbnz	r5, 8010ea8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e78:	4f0f      	ldr	r7, [pc, #60]	; (8010eb8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8010e7a:	4e10      	ldr	r6, [pc, #64]	; (8010ebc <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8010e7c:	4638      	mov	r0, r7
 8010e7e:	f7fe fdbb 	bl	800f9f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e82:	4630      	mov	r0, r6
 8010e84:	f7fe fdb8 	bl	800f9f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e88:	4b0d      	ldr	r3, [pc, #52]	; (8010ec0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e8a:	4a0e      	ldr	r2, [pc, #56]	; (8010ec4 <prvCheckForValidListAndQueue+0x58>)
 8010e8c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8010e8e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e90:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8010e92:	4b0d      	ldr	r3, [pc, #52]	; (8010ec8 <prvCheckForValidListAndQueue+0x5c>)
 8010e94:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e96:	9500      	str	r5, [sp, #0]
 8010e98:	4b0c      	ldr	r3, [pc, #48]	; (8010ecc <prvCheckForValidListAndQueue+0x60>)
 8010e9a:	f7fe febd 	bl	800fc18 <xQueueGenericCreateStatic>
 8010e9e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ea0:	b110      	cbz	r0, 8010ea8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ea2:	490b      	ldr	r1, [pc, #44]	; (8010ed0 <prvCheckForValidListAndQueue+0x64>)
 8010ea4:	f7ff fa38 	bl	8010318 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8010ea8:	b003      	add	sp, #12
 8010eaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8010eae:	f000 ba77 	b.w	80113a0 <vPortExitCritical>
 8010eb2:	bf00      	nop
 8010eb4:	20016d84 	.word	0x20016d84
 8010eb8:	20016d08 	.word	0x20016d08
 8010ebc:	20016d1c 	.word	0x20016d1c
 8010ec0:	20016c60 	.word	0x20016c60
 8010ec4:	20016c68 	.word	0x20016c68
 8010ec8:	20016c64 	.word	0x20016c64
 8010ecc:	20016d34 	.word	0x20016d34
 8010ed0:	08017aaa 	.word	0x08017aaa

08010ed4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8010ed4:	4291      	cmp	r1, r2
{
 8010ed6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010ed8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010eda:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8010edc:	d80a      	bhi.n	8010ef4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ede:	1ad2      	subs	r2, r2, r3
 8010ee0:	6983      	ldr	r3, [r0, #24]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d20d      	bcs.n	8010f02 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010ee6:	1d01      	adds	r1, r0, #4
 8010ee8:	4b07      	ldr	r3, [pc, #28]	; (8010f08 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010eea:	6818      	ldr	r0, [r3, #0]
 8010eec:	f7fe fd9e 	bl	800fa2c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010ef0:	2000      	movs	r0, #0
}
 8010ef2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d201      	bcs.n	8010efc <prvInsertTimerInActiveList+0x28>
 8010ef8:	4299      	cmp	r1, r3
 8010efa:	d202      	bcs.n	8010f02 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010efc:	1d01      	adds	r1, r0, #4
 8010efe:	4b03      	ldr	r3, [pc, #12]	; (8010f0c <prvInsertTimerInActiveList+0x38>)
 8010f00:	e7f3      	b.n	8010eea <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8010f02:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010f04:	e7f5      	b.n	8010ef2 <prvInsertTimerInActiveList+0x1e>
 8010f06:	bf00      	nop
 8010f08:	20016c64 	.word	0x20016c64
 8010f0c:	20016c60 	.word	0x20016c60

08010f10 <xTimerCreateTimerTask>:
{
 8010f10:	b510      	push	{r4, lr}
 8010f12:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8010f14:	f7ff ffaa 	bl	8010e6c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010f18:	4b13      	ldr	r3, [pc, #76]	; (8010f68 <xTimerCreateTimerTask+0x58>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	b1b3      	cbz	r3, 8010f4c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010f1e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f20:	aa07      	add	r2, sp, #28
 8010f22:	a906      	add	r1, sp, #24
 8010f24:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010f26:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f2a:	f7fe fd59 	bl	800f9e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010f2e:	9b05      	ldr	r3, [sp, #20]
 8010f30:	9a07      	ldr	r2, [sp, #28]
 8010f32:	9302      	str	r3, [sp, #8]
 8010f34:	9b06      	ldr	r3, [sp, #24]
 8010f36:	490d      	ldr	r1, [pc, #52]	; (8010f6c <xTimerCreateTimerTask+0x5c>)
 8010f38:	9301      	str	r3, [sp, #4]
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	480c      	ldr	r0, [pc, #48]	; (8010f70 <xTimerCreateTimerTask+0x60>)
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	4623      	mov	r3, r4
 8010f42:	f7ff fb85 	bl	8010650 <xTaskCreateStatic>
 8010f46:	4b0b      	ldr	r3, [pc, #44]	; (8010f74 <xTimerCreateTimerTask+0x64>)
 8010f48:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010f4a:	b950      	cbnz	r0, 8010f62 <xTimerCreateTimerTask+0x52>
 8010f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f50:	b672      	cpsid	i
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	b662      	cpsie	i
 8010f60:	e7fe      	b.n	8010f60 <xTimerCreateTimerTask+0x50>
}
 8010f62:	2001      	movs	r0, #1
 8010f64:	b008      	add	sp, #32
 8010f66:	bd10      	pop	{r4, pc}
 8010f68:	20016d84 	.word	0x20016d84
 8010f6c:	08017aaf 	.word	0x08017aaf
 8010f70:	08011059 	.word	0x08011059
 8010f74:	20016d88 	.word	0x20016d88

08010f78 <xTimerGenericCommand>:
{
 8010f78:	b530      	push	{r4, r5, lr}
 8010f7a:	4615      	mov	r5, r2
 8010f7c:	b085      	sub	sp, #20
 8010f7e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8010f80:	4603      	mov	r3, r0
 8010f82:	b950      	cbnz	r0, 8010f9a <xTimerGenericCommand+0x22>
 8010f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f88:	b672      	cpsid	i
 8010f8a:	f383 8811 	msr	BASEPRI, r3
 8010f8e:	f3bf 8f6f 	isb	sy
 8010f92:	f3bf 8f4f 	dsb	sy
 8010f96:	b662      	cpsie	i
 8010f98:	e7fe      	b.n	8010f98 <xTimerGenericCommand+0x20>
	if( xTimerQueue != NULL )
 8010f9a:	4c0d      	ldr	r4, [pc, #52]	; (8010fd0 <xTimerGenericCommand+0x58>)
 8010f9c:	6820      	ldr	r0, [r4, #0]
 8010f9e:	b178      	cbz	r0, 8010fc0 <xTimerGenericCommand+0x48>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010fa0:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010fa2:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010fa4:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010fa8:	dc0c      	bgt.n	8010fc4 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010faa:	f7ff fe6b 	bl	8010c84 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010fae:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010fb0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010fb2:	4669      	mov	r1, sp
 8010fb4:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010fb6:	bf0c      	ite	eq
 8010fb8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010fba:	461a      	movne	r2, r3
 8010fbc:	f7fe feae 	bl	800fd1c <xQueueGenericSend>
}
 8010fc0:	b005      	add	sp, #20
 8010fc2:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4669      	mov	r1, sp
 8010fc8:	f7fe ffa9 	bl	800ff1e <xQueueGenericSendFromISR>
 8010fcc:	e7f8      	b.n	8010fc0 <xTimerGenericCommand+0x48>
 8010fce:	bf00      	nop
 8010fd0:	20016d84 	.word	0x20016d84

08010fd4 <prvSwitchTimerLists>:
{
 8010fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010fd8:	4d1d      	ldr	r5, [pc, #116]	; (8011050 <prvSwitchTimerLists+0x7c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010fda:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010fde:	682b      	ldr	r3, [r5, #0]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	b932      	cbnz	r2, 8010ff2 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8010fe4:	4a1b      	ldr	r2, [pc, #108]	; (8011054 <prvSwitchTimerLists+0x80>)
 8010fe6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010fe8:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8010fea:	6029      	str	r1, [r5, #0]
}
 8010fec:	b002      	add	sp, #8
 8010fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ff2:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ff4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ff6:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ff8:	1d27      	adds	r7, r4, #4
 8010ffa:	4638      	mov	r0, r7
 8010ffc:	f7fe fd2d 	bl	800fa5a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011000:	6a23      	ldr	r3, [r4, #32]
 8011002:	4620      	mov	r0, r4
 8011004:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011006:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801100a:	075b      	lsls	r3, r3, #29
 801100c:	d5e7      	bpl.n	8010fde <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801100e:	69a3      	ldr	r3, [r4, #24]
 8011010:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8011012:	429e      	cmp	r6, r3
 8011014:	d206      	bcs.n	8011024 <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011016:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011018:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801101a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801101c:	6828      	ldr	r0, [r5, #0]
 801101e:	f7fe fd05 	bl	800fa2c <vListInsert>
 8011022:	e7dc      	b.n	8010fde <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011024:	2300      	movs	r3, #0
 8011026:	f8cd 8000 	str.w	r8, [sp]
 801102a:	4632      	mov	r2, r6
 801102c:	4620      	mov	r0, r4
 801102e:	4619      	mov	r1, r3
 8011030:	f7ff ffa2 	bl	8010f78 <xTimerGenericCommand>
				configASSERT( xResult );
 8011034:	2800      	cmp	r0, #0
 8011036:	d1d2      	bne.n	8010fde <prvSwitchTimerLists+0xa>
 8011038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103c:	b672      	cpsid	i
 801103e:	f383 8811 	msr	BASEPRI, r3
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	b662      	cpsie	i
 801104c:	e7fe      	b.n	801104c <prvSwitchTimerLists+0x78>
 801104e:	bf00      	nop
 8011050:	20016c60 	.word	0x20016c60
 8011054:	20016c64 	.word	0x20016c64

08011058 <prvTimerTask>:
{
 8011058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801105c:	4d84      	ldr	r5, [pc, #528]	; (8011270 <prvTimerTask+0x218>)
{
 801105e:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8011060:	f8df 8218 	ldr.w	r8, [pc, #536]	; 801127c <prvTimerTask+0x224>
 8011064:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011066:	682a      	ldr	r2, [r5, #0]
 8011068:	6813      	ldr	r3, [r2, #0]
 801106a:	b353      	cbz	r3, 80110c2 <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801106c:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801106e:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011070:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 8011074:	f8df b208 	ldr.w	fp, [pc, #520]	; 8011280 <prvTimerTask+0x228>
	vTaskSuspendAll();
 8011078:	f7ff fb9e 	bl	80107b8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801107c:	f7ff fba4 	bl	80107c8 <xTaskGetTickCount>
 8011080:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8011082:	f8db 3000 	ldr.w	r3, [fp]
 8011086:	465e      	mov	r6, fp
 8011088:	4298      	cmp	r0, r3
 801108a:	d31d      	bcc.n	80110c8 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 801108c:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011090:	b32c      	cbz	r4, 80110de <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011092:	4b78      	ldr	r3, [pc, #480]	; (8011274 <prvTimerTask+0x21c>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	fab2 f282 	clz	r2, r2
 801109c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801109e:	4b76      	ldr	r3, [pc, #472]	; (8011278 <prvTimerTask+0x220>)
 80110a0:	eba9 010a 	sub.w	r1, r9, sl
 80110a4:	6818      	ldr	r0, [r3, #0]
 80110a6:	f7ff f949 	bl	801033c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80110aa:	f7ff fc25 	bl	80108f8 <xTaskResumeAll>
 80110ae:	b988      	cbnz	r0, 80110d4 <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 80110b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80110b4:	f8c8 3000 	str.w	r3, [r8]
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	e008      	b.n	80110d4 <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80110c2:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 80110c4:	4699      	mov	r9, r3
 80110c6:	e7d5      	b.n	8011074 <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 80110c8:	f7ff ff84 	bl	8010fd4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80110cc:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 80110d0:	f7ff fc12 	bl	80108f8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80110d4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8011278 <prvTimerTask+0x220>
 80110d8:	f04f 0a00 	mov.w	sl, #0
 80110dc:	e083      	b.n	80111e6 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80110de:	4581      	cmp	r9, r0
 80110e0:	d832      	bhi.n	8011148 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 80110e2:	f7ff fc09 	bl	80108f8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80110ee:	f10b 0004 	add.w	r0, fp, #4
 80110f2:	f7fe fcb2 	bl	800fa5a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80110f6:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 80110fa:	0758      	lsls	r0, r3, #29
 80110fc:	d51b      	bpl.n	8011136 <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80110fe:	f8db 1018 	ldr.w	r1, [fp, #24]
 8011102:	464b      	mov	r3, r9
 8011104:	4652      	mov	r2, sl
 8011106:	4658      	mov	r0, fp
 8011108:	4449      	add	r1, r9
 801110a:	f7ff fee3 	bl	8010ed4 <prvInsertTimerInActiveList>
 801110e:	b1b0      	cbz	r0, 801113e <prvTimerTask+0xe6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011110:	9400      	str	r4, [sp, #0]
 8011112:	4623      	mov	r3, r4
 8011114:	464a      	mov	r2, r9
 8011116:	4621      	mov	r1, r4
 8011118:	4658      	mov	r0, fp
 801111a:	f7ff ff2d 	bl	8010f78 <xTimerGenericCommand>
			configASSERT( xResult );
 801111e:	b970      	cbnz	r0, 801113e <prvTimerTask+0xe6>
 8011120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011124:	b672      	cpsid	i
 8011126:	f383 8811 	msr	BASEPRI, r3
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	f3bf 8f4f 	dsb	sy
 8011132:	b662      	cpsie	i
 8011134:	e7fe      	b.n	8011134 <prvTimerTask+0xdc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011136:	f023 0301 	bic.w	r3, r3, #1
 801113a:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801113e:	f8db 3020 	ldr.w	r3, [fp, #32]
 8011142:	4658      	mov	r0, fp
 8011144:	4798      	blx	r3
 8011146:	e7c5      	b.n	80110d4 <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011148:	4622      	mov	r2, r4
 801114a:	e7a8      	b.n	801109e <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801114c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011150:	465a      	mov	r2, fp
 8011152:	69a1      	ldr	r1, [r4, #24]
 8011154:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011156:	f043 0301 	orr.w	r3, r3, #1
 801115a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801115e:	9b03      	ldr	r3, [sp, #12]
 8011160:	4419      	add	r1, r3
 8011162:	f7ff feb7 	bl	8010ed4 <prvInsertTimerInActiveList>
 8011166:	2800      	cmp	r0, #0
 8011168:	d03d      	beq.n	80111e6 <prvTimerTask+0x18e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801116a:	6a23      	ldr	r3, [r4, #32]
 801116c:	4620      	mov	r0, r4
 801116e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011170:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011174:	0759      	lsls	r1, r3, #29
 8011176:	d536      	bpl.n	80111e6 <prvTimerTask+0x18e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011178:	69a2      	ldr	r2, [r4, #24]
 801117a:	2300      	movs	r3, #0
 801117c:	9903      	ldr	r1, [sp, #12]
 801117e:	4620      	mov	r0, r4
 8011180:	f8cd a000 	str.w	sl, [sp]
 8011184:	440a      	add	r2, r1
 8011186:	4619      	mov	r1, r3
 8011188:	f7ff fef6 	bl	8010f78 <xTimerGenericCommand>
							configASSERT( xResult );
 801118c:	bb58      	cbnz	r0, 80111e6 <prvTimerTask+0x18e>
 801118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011192:	b672      	cpsid	i
 8011194:	f383 8811 	msr	BASEPRI, r3
 8011198:	f3bf 8f6f 	isb	sy
 801119c:	f3bf 8f4f 	dsb	sy
 80111a0:	b662      	cpsie	i
 80111a2:	e7fe      	b.n	80111a2 <prvTimerTask+0x14a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80111a8:	f023 0301 	bic.w	r3, r3, #1
 80111ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80111b0:	e019      	b.n	80111e6 <prvTimerTask+0x18e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80111b6:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111b8:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80111bc:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80111be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80111c2:	b951      	cbnz	r1, 80111da <prvTimerTask+0x182>
 80111c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c8:	b672      	cpsid	i
 80111ca:	f383 8811 	msr	BASEPRI, r3
 80111ce:	f3bf 8f6f 	isb	sy
 80111d2:	f3bf 8f4f 	dsb	sy
 80111d6:	b662      	cpsie	i
 80111d8:	e7fe      	b.n	80111d8 <prvTimerTask+0x180>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80111da:	465b      	mov	r3, fp
 80111dc:	465a      	mov	r2, fp
 80111de:	4459      	add	r1, fp
 80111e0:	4620      	mov	r0, r4
 80111e2:	f7ff fe77 	bl	8010ed4 <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80111e6:	2200      	movs	r2, #0
 80111e8:	a902      	add	r1, sp, #8
 80111ea:	f8d9 0000 	ldr.w	r0, [r9]
 80111ee:	f7fe feff 	bl	800fff0 <xQueueReceive>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	f43f af37 	beq.w	8011066 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80111f8:	9b02      	ldr	r3, [sp, #8]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	da03      	bge.n	8011206 <prvTimerTask+0x1ae>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80111fe:	9b03      	ldr	r3, [sp, #12]
 8011200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011204:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011206:	9b02      	ldr	r3, [sp, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	dbec      	blt.n	80111e6 <prvTimerTask+0x18e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801120c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801120e:	6963      	ldr	r3, [r4, #20]
 8011210:	b113      	cbz	r3, 8011218 <prvTimerTask+0x1c0>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011212:	1d20      	adds	r0, r4, #4
 8011214:	f7fe fc21 	bl	800fa5a <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8011218:	f7ff fad6 	bl	80107c8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801121c:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 801121e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8011220:	4298      	cmp	r0, r3
 8011222:	d201      	bcs.n	8011228 <prvTimerTask+0x1d0>
		prvSwitchTimerLists();
 8011224:	f7ff fed6 	bl	8010fd4 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8011228:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 801122a:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 801122e:	2b09      	cmp	r3, #9
 8011230:	d8d9      	bhi.n	80111e6 <prvTimerTask+0x18e>
 8011232:	a201      	add	r2, pc, #4	; (adr r2, 8011238 <prvTimerTask+0x1e0>)
 8011234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011238:	0801114d 	.word	0x0801114d
 801123c:	0801114d 	.word	0x0801114d
 8011240:	0801114d 	.word	0x0801114d
 8011244:	080111a5 	.word	0x080111a5
 8011248:	080111b3 	.word	0x080111b3
 801124c:	08011261 	.word	0x08011261
 8011250:	0801114d 	.word	0x0801114d
 8011254:	0801114d 	.word	0x0801114d
 8011258:	080111a5 	.word	0x080111a5
 801125c:	080111b3 	.word	0x080111b3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011260:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011264:	079a      	lsls	r2, r3, #30
 8011266:	d49f      	bmi.n	80111a8 <prvTimerTask+0x150>
							vPortFree( pxTimer );
 8011268:	4620      	mov	r0, r4
 801126a:	f000 fa61 	bl	8011730 <vPortFree>
 801126e:	e7ba      	b.n	80111e6 <prvTimerTask+0x18e>
 8011270:	20016c60 	.word	0x20016c60
 8011274:	20016c64 	.word	0x20016c64
 8011278:	20016d84 	.word	0x20016d84
 801127c:	e000ed04 	.word	0xe000ed04
 8011280:	20016d30 	.word	0x20016d30

08011284 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8011284:	2300      	movs	r3, #0
{
 8011286:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8011288:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801128a:	4b0f      	ldr	r3, [pc, #60]	; (80112c8 <prvTaskExitError+0x44>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	3301      	adds	r3, #1
 8011290:	d00a      	beq.n	80112a8 <prvTaskExitError+0x24>
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	b672      	cpsid	i
 8011298:	f383 8811 	msr	BASEPRI, r3
 801129c:	f3bf 8f6f 	isb	sy
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	b662      	cpsie	i
 80112a6:	e7fe      	b.n	80112a6 <prvTaskExitError+0x22>
 80112a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ac:	b672      	cpsid	i
 80112ae:	f383 8811 	msr	BASEPRI, r3
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	f3bf 8f4f 	dsb	sy
 80112ba:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80112bc:	9b01      	ldr	r3, [sp, #4]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d0fc      	beq.n	80112bc <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80112c2:	b002      	add	sp, #8
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	20002ca8 	.word	0x20002ca8

080112cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112cc:	4808      	ldr	r0, [pc, #32]	; (80112f0 <prvPortStartFirstTask+0x24>)
 80112ce:	6800      	ldr	r0, [r0, #0]
 80112d0:	6800      	ldr	r0, [r0, #0]
 80112d2:	f380 8808 	msr	MSP, r0
 80112d6:	f04f 0000 	mov.w	r0, #0
 80112da:	f380 8814 	msr	CONTROL, r0
 80112de:	b662      	cpsie	i
 80112e0:	b661      	cpsie	f
 80112e2:	f3bf 8f4f 	dsb	sy
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	df00      	svc	0
 80112ec:	bf00      	nop
 80112ee:	0000      	.short	0x0000
 80112f0:	e000ed08 	.word	0xe000ed08

080112f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80112f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011304 <vPortEnableVFP+0x10>
 80112f8:	6801      	ldr	r1, [r0, #0]
 80112fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80112fe:	6001      	str	r1, [r0, #0]
 8011300:	4770      	bx	lr
 8011302:	0000      	.short	0x0000
 8011304:	e000ed88 	.word	0xe000ed88

08011308 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801130c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011310:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8011314:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011316:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011318:	4b03      	ldr	r3, [pc, #12]	; (8011328 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801131a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801131c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801131e:	f06f 0302 	mvn.w	r3, #2
 8011322:	6203      	str	r3, [r0, #32]
}
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop
 8011328:	08011285 	.word	0x08011285
 801132c:	00000000 	.word	0x00000000

08011330 <SVC_Handler>:
	__asm volatile (
 8011330:	4b07      	ldr	r3, [pc, #28]	; (8011350 <pxCurrentTCBConst2>)
 8011332:	6819      	ldr	r1, [r3, #0]
 8011334:	6808      	ldr	r0, [r1, #0]
 8011336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801133a:	f380 8809 	msr	PSP, r0
 801133e:	f3bf 8f6f 	isb	sy
 8011342:	f04f 0000 	mov.w	r0, #0
 8011346:	f380 8811 	msr	BASEPRI, r0
 801134a:	4770      	bx	lr
 801134c:	f3af 8000 	nop.w

08011350 <pxCurrentTCBConst2>:
 8011350:	20016760 	.word	0x20016760

08011354 <vPortEnterCritical>:
 8011354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011358:	b672      	cpsid	i
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
 8011366:	b662      	cpsie	i
	uxCriticalNesting++;
 8011368:	4a0b      	ldr	r2, [pc, #44]	; (8011398 <vPortEnterCritical+0x44>)
 801136a:	6813      	ldr	r3, [r2, #0]
 801136c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801136e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8011370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8011372:	d10f      	bne.n	8011394 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011374:	4b09      	ldr	r3, [pc, #36]	; (801139c <vPortEnterCritical+0x48>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f013 0fff 	tst.w	r3, #255	; 0xff
 801137c:	d00a      	beq.n	8011394 <vPortEnterCritical+0x40>
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	b672      	cpsid	i
 8011384:	f383 8811 	msr	BASEPRI, r3
 8011388:	f3bf 8f6f 	isb	sy
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	b662      	cpsie	i
 8011392:	e7fe      	b.n	8011392 <vPortEnterCritical+0x3e>
}
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop
 8011398:	20002ca8 	.word	0x20002ca8
 801139c:	e000ed04 	.word	0xe000ed04

080113a0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80113a0:	4a09      	ldr	r2, [pc, #36]	; (80113c8 <vPortExitCritical+0x28>)
 80113a2:	6813      	ldr	r3, [r2, #0]
 80113a4:	b953      	cbnz	r3, 80113bc <vPortExitCritical+0x1c>
 80113a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113aa:	b672      	cpsid	i
 80113ac:	f383 8811 	msr	BASEPRI, r3
 80113b0:	f3bf 8f6f 	isb	sy
 80113b4:	f3bf 8f4f 	dsb	sy
 80113b8:	b662      	cpsie	i
 80113ba:	e7fe      	b.n	80113ba <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80113bc:	3b01      	subs	r3, #1
 80113be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80113c0:	b90b      	cbnz	r3, 80113c6 <vPortExitCritical+0x26>
	__asm volatile
 80113c2:	f383 8811 	msr	BASEPRI, r3
}
 80113c6:	4770      	bx	lr
 80113c8:	20002ca8 	.word	0x20002ca8
 80113cc:	00000000 	.word	0x00000000

080113d0 <PendSV_Handler>:
	__asm volatile
 80113d0:	f3ef 8009 	mrs	r0, PSP
 80113d4:	f3bf 8f6f 	isb	sy
 80113d8:	4b15      	ldr	r3, [pc, #84]	; (8011430 <pxCurrentTCBConst>)
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	f01e 0f10 	tst.w	lr, #16
 80113e0:	bf08      	it	eq
 80113e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80113e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ea:	6010      	str	r0, [r2, #0]
 80113ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80113f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80113f4:	b672      	cpsid	i
 80113f6:	f380 8811 	msr	BASEPRI, r0
 80113fa:	f3bf 8f4f 	dsb	sy
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	b662      	cpsie	i
 8011404:	f7ff fb14 	bl	8010a30 <vTaskSwitchContext>
 8011408:	f04f 0000 	mov.w	r0, #0
 801140c:	f380 8811 	msr	BASEPRI, r0
 8011410:	bc09      	pop	{r0, r3}
 8011412:	6819      	ldr	r1, [r3, #0]
 8011414:	6808      	ldr	r0, [r1, #0]
 8011416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141a:	f01e 0f10 	tst.w	lr, #16
 801141e:	bf08      	it	eq
 8011420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011424:	f380 8809 	msr	PSP, r0
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop

08011430 <pxCurrentTCBConst>:
 8011430:	20016760 	.word	0x20016760

08011434 <xPortSysTickHandler>:
{
 8011434:	b508      	push	{r3, lr}
	__asm volatile
 8011436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801143a:	b672      	cpsid	i
 801143c:	f383 8811 	msr	BASEPRI, r3
 8011440:	f3bf 8f6f 	isb	sy
 8011444:	f3bf 8f4f 	dsb	sy
 8011448:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801144a:	f7ff f9c3 	bl	80107d4 <xTaskIncrementTick>
 801144e:	b118      	cbz	r0, 8011458 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011450:	4b03      	ldr	r3, [pc, #12]	; (8011460 <xPortSysTickHandler+0x2c>)
 8011452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011456:	601a      	str	r2, [r3, #0]
	__asm volatile
 8011458:	2300      	movs	r3, #0
 801145a:	f383 8811 	msr	BASEPRI, r3
}
 801145e:	bd08      	pop	{r3, pc}
 8011460:	e000ed04 	.word	0xe000ed04

08011464 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011464:	2300      	movs	r3, #0
 8011466:	4a08      	ldr	r2, [pc, #32]	; (8011488 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011468:	4908      	ldr	r1, [pc, #32]	; (801148c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801146a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801146c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801146e:	f242 7110 	movw	r1, #10000	; 0x2710
 8011472:	4b07      	ldr	r3, [pc, #28]	; (8011490 <vPortSetupTimerInterrupt+0x2c>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	fbb3 f3f1 	udiv	r3, r3, r1
 801147a:	4906      	ldr	r1, [pc, #24]	; (8011494 <vPortSetupTimerInterrupt+0x30>)
 801147c:	3b01      	subs	r3, #1
 801147e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011480:	2307      	movs	r3, #7
 8011482:	6013      	str	r3, [r2, #0]
}
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop
 8011488:	e000e010 	.word	0xe000e010
 801148c:	e000e018 	.word	0xe000e018
 8011490:	200004d4 	.word	0x200004d4
 8011494:	e000e014 	.word	0xe000e014

08011498 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011498:	4b2c      	ldr	r3, [pc, #176]	; (801154c <xPortStartScheduler+0xb4>)
{
 801149a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801149c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801149e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80114a0:	b2d2      	uxtb	r2, r2
 80114a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80114a4:	22ff      	movs	r2, #255	; 0xff
 80114a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80114a8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80114aa:	4a29      	ldr	r2, [pc, #164]	; (8011550 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80114b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80114b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80114ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80114bc:	2207      	movs	r2, #7
 80114be:	4b25      	ldr	r3, [pc, #148]	; (8011554 <xPortStartScheduler+0xbc>)
 80114c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80114c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80114c6:	1e54      	subs	r4, r2, #1
 80114c8:	0600      	lsls	r0, r0, #24
 80114ca:	d40f      	bmi.n	80114ec <xPortStartScheduler+0x54>
 80114cc:	b101      	cbz	r1, 80114d0 <xPortStartScheduler+0x38>
 80114ce:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	2a03      	cmp	r2, #3
 80114d4:	d013      	beq.n	80114fe <xPortStartScheduler+0x66>
	__asm volatile
 80114d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114da:	b672      	cpsid	i
 80114dc:	f383 8811 	msr	BASEPRI, r3
 80114e0:	f3bf 8f6f 	isb	sy
 80114e4:	f3bf 8f4f 	dsb	sy
 80114e8:	b662      	cpsie	i
 80114ea:	e7fe      	b.n	80114ea <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80114ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80114f0:	2101      	movs	r1, #1
 80114f2:	0052      	lsls	r2, r2, #1
 80114f4:	b2d2      	uxtb	r2, r2
 80114f6:	f88d 2003 	strb.w	r2, [sp, #3]
 80114fa:	4622      	mov	r2, r4
 80114fc:	e7e1      	b.n	80114c2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80114fe:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8011500:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011502:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8011506:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011508:	9b01      	ldr	r3, [sp, #4]
 801150a:	4a10      	ldr	r2, [pc, #64]	; (801154c <xPortStartScheduler+0xb4>)
 801150c:	b2db      	uxtb	r3, r3
 801150e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011510:	4b11      	ldr	r3, [pc, #68]	; (8011558 <xPortStartScheduler+0xc0>)
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8011518:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8011520:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8011522:	f7ff ff9f 	bl	8011464 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8011526:	4b0d      	ldr	r3, [pc, #52]	; (801155c <xPortStartScheduler+0xc4>)
 8011528:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 801152a:	f7ff fee3 	bl	80112f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801152e:	4a0c      	ldr	r2, [pc, #48]	; (8011560 <xPortStartScheduler+0xc8>)
 8011530:	6813      	ldr	r3, [r2, #0]
 8011532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011536:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8011538:	f7ff fec8 	bl	80112cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 801153c:	f7ff fa78 	bl	8010a30 <vTaskSwitchContext>
	prvTaskExitError();
 8011540:	f7ff fea0 	bl	8011284 <prvTaskExitError>
}
 8011544:	4620      	mov	r0, r4
 8011546:	b002      	add	sp, #8
 8011548:	bd10      	pop	{r4, pc}
 801154a:	bf00      	nop
 801154c:	e000e400 	.word	0xe000e400
 8011550:	20016d8c 	.word	0x20016d8c
 8011554:	20016d90 	.word	0x20016d90
 8011558:	e000ed20 	.word	0xe000ed20
 801155c:	20002ca8 	.word	0x20002ca8
 8011560:	e000ef34 	.word	0xe000ef34

08011564 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011564:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011568:	2b0f      	cmp	r3, #15
 801156a:	d910      	bls.n	801158e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801156c:	4a12      	ldr	r2, [pc, #72]	; (80115b8 <vPortValidateInterruptPriority+0x54>)
 801156e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011570:	4a12      	ldr	r2, [pc, #72]	; (80115bc <vPortValidateInterruptPriority+0x58>)
 8011572:	7812      	ldrb	r2, [r2, #0]
 8011574:	429a      	cmp	r2, r3
 8011576:	d90a      	bls.n	801158e <vPortValidateInterruptPriority+0x2a>
 8011578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157c:	b672      	cpsid	i
 801157e:	f383 8811 	msr	BASEPRI, r3
 8011582:	f3bf 8f6f 	isb	sy
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	b662      	cpsie	i
 801158c:	e7fe      	b.n	801158c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801158e:	4b0c      	ldr	r3, [pc, #48]	; (80115c0 <vPortValidateInterruptPriority+0x5c>)
 8011590:	4a0c      	ldr	r2, [pc, #48]	; (80115c4 <vPortValidateInterruptPriority+0x60>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6812      	ldr	r2, [r2, #0]
 8011596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801159a:	4293      	cmp	r3, r2
 801159c:	d90a      	bls.n	80115b4 <vPortValidateInterruptPriority+0x50>
 801159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a2:	b672      	cpsid	i
 80115a4:	f383 8811 	msr	BASEPRI, r3
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	b662      	cpsie	i
 80115b2:	e7fe      	b.n	80115b2 <vPortValidateInterruptPriority+0x4e>
	}
 80115b4:	4770      	bx	lr
 80115b6:	bf00      	nop
 80115b8:	e000e3f0 	.word	0xe000e3f0
 80115bc:	20016d8c 	.word	0x20016d8c
 80115c0:	e000ed0c 	.word	0xe000ed0c
 80115c4:	20016d90 	.word	0x20016d90

080115c8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80115c8:	4b0f      	ldr	r3, [pc, #60]	; (8011608 <prvInsertBlockIntoFreeList+0x40>)
{
 80115ca:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80115cc:	681a      	ldr	r2, [r3, #0]
 80115ce:	4282      	cmp	r2, r0
 80115d0:	d318      	bcc.n	8011604 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80115d2:	685c      	ldr	r4, [r3, #4]
 80115d4:	1919      	adds	r1, r3, r4
 80115d6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80115d8:	bf01      	itttt	eq
 80115da:	6841      	ldreq	r1, [r0, #4]
 80115dc:	4618      	moveq	r0, r3
 80115de:	1909      	addeq	r1, r1, r4
 80115e0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80115e2:	6844      	ldr	r4, [r0, #4]
 80115e4:	1901      	adds	r1, r0, r4
 80115e6:	428a      	cmp	r2, r1
 80115e8:	d107      	bne.n	80115fa <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80115ea:	4908      	ldr	r1, [pc, #32]	; (801160c <prvInsertBlockIntoFreeList+0x44>)
 80115ec:	6809      	ldr	r1, [r1, #0]
 80115ee:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80115f0:	bf1f      	itttt	ne
 80115f2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80115f4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80115f6:	1909      	addne	r1, r1, r4
 80115f8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80115fa:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80115fc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80115fe:	bf18      	it	ne
 8011600:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011602:	bd10      	pop	{r4, pc}
 8011604:	4613      	mov	r3, r2
 8011606:	e7e1      	b.n	80115cc <prvInsertBlockIntoFreeList+0x4>
 8011608:	2001eda4 	.word	0x2001eda4
 801160c:	20016d94 	.word	0x20016d94

08011610 <pvPortMalloc>:
{
 8011610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011614:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8011616:	f7ff f8cf 	bl	80107b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801161a:	493f      	ldr	r1, [pc, #252]	; (8011718 <pvPortMalloc+0x108>)
 801161c:	4d3f      	ldr	r5, [pc, #252]	; (801171c <pvPortMalloc+0x10c>)
 801161e:	680b      	ldr	r3, [r1, #0]
 8011620:	bb03      	cbnz	r3, 8011664 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8011622:	4a3f      	ldr	r2, [pc, #252]	; (8011720 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;
 8011624:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011626:	0756      	lsls	r6, r2, #29
 8011628:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801162c:	4e3d      	ldr	r6, [pc, #244]	; (8011724 <pvPortMalloc+0x114>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801162e:	bf14      	ite	ne
 8011630:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011632:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	xStart.xBlockSize = ( size_t ) 0;
 8011636:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011638:	bf1c      	itt	ne
 801163a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801163e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011640:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011642:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8011644:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011646:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 801164a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801164e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8011650:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011652:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011656:	4b34      	ldr	r3, [pc, #208]	; (8011728 <pvPortMalloc+0x118>)
 8011658:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801165a:	4b34      	ldr	r3, [pc, #208]	; (801172c <pvPortMalloc+0x11c>)
 801165c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801165e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011662:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011664:	682f      	ldr	r7, [r5, #0]
 8011666:	4227      	tst	r7, r4
 8011668:	d151      	bne.n	801170e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 801166a:	2c00      	cmp	r4, #0
 801166c:	d040      	beq.n	80116f0 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 801166e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011672:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011674:	bf1c      	itt	ne
 8011676:	f023 0307 	bicne.w	r3, r3, #7
 801167a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801167c:	2b00      	cmp	r3, #0
 801167e:	d046      	beq.n	801170e <pvPortMalloc+0xfe>
 8011680:	4a2a      	ldr	r2, [pc, #168]	; (801172c <pvPortMalloc+0x11c>)
 8011682:	6816      	ldr	r6, [r2, #0]
 8011684:	4690      	mov	r8, r2
 8011686:	429e      	cmp	r6, r3
 8011688:	d341      	bcc.n	801170e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 801168a:	4a26      	ldr	r2, [pc, #152]	; (8011724 <pvPortMalloc+0x114>)
 801168c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801168e:	6868      	ldr	r0, [r5, #4]
 8011690:	4298      	cmp	r0, r3
 8011692:	d201      	bcs.n	8011698 <pvPortMalloc+0x88>
 8011694:	682c      	ldr	r4, [r5, #0]
 8011696:	b9b4      	cbnz	r4, 80116c6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8011698:	6809      	ldr	r1, [r1, #0]
 801169a:	42a9      	cmp	r1, r5
 801169c:	d037      	beq.n	801170e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801169e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116a0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80116a2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80116a4:	1ac2      	subs	r2, r0, r3
 80116a6:	2a10      	cmp	r2, #16
 80116a8:	d914      	bls.n	80116d4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80116aa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116ac:	0741      	lsls	r1, r0, #29
 80116ae:	d00d      	beq.n	80116cc <pvPortMalloc+0xbc>
 80116b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b4:	b672      	cpsid	i
 80116b6:	f383 8811 	msr	BASEPRI, r3
 80116ba:	f3bf 8f6f 	isb	sy
 80116be:	f3bf 8f4f 	dsb	sy
 80116c2:	b662      	cpsie	i
 80116c4:	e7fe      	b.n	80116c4 <pvPortMalloc+0xb4>
 80116c6:	462a      	mov	r2, r5
 80116c8:	4625      	mov	r5, r4
 80116ca:	e7e0      	b.n	801168e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116cc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116ce:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116d0:	f7ff ff7a 	bl	80115c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116d4:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116d6:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116d8:	4913      	ldr	r1, [pc, #76]	; (8011728 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116da:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116dc:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116de:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80116e0:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116e2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116e6:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116e8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116ea:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116ec:	bf38      	it	cc
 80116ee:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80116f0:	f7ff f902 	bl	80108f8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80116f4:	0763      	lsls	r3, r4, #29
 80116f6:	d00c      	beq.n	8011712 <pvPortMalloc+0x102>
 80116f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116fc:	b672      	cpsid	i
 80116fe:	f383 8811 	msr	BASEPRI, r3
 8011702:	f3bf 8f6f 	isb	sy
 8011706:	f3bf 8f4f 	dsb	sy
 801170a:	b662      	cpsie	i
 801170c:	e7fe      	b.n	801170c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 801170e:	2400      	movs	r4, #0
 8011710:	e7ee      	b.n	80116f0 <pvPortMalloc+0xe0>
}
 8011712:	4620      	mov	r0, r4
 8011714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011718:	20016d94 	.word	0x20016d94
 801171c:	2001ed98 	.word	0x2001ed98
 8011720:	20016d98 	.word	0x20016d98
 8011724:	2001eda4 	.word	0x2001eda4
 8011728:	2001eda0 	.word	0x2001eda0
 801172c:	2001ed9c 	.word	0x2001ed9c

08011730 <vPortFree>:
{
 8011730:	b510      	push	{r4, lr}
	if( pv != NULL )
 8011732:	4604      	mov	r4, r0
 8011734:	2800      	cmp	r0, #0
 8011736:	d032      	beq.n	801179e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011738:	4a19      	ldr	r2, [pc, #100]	; (80117a0 <vPortFree+0x70>)
 801173a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801173e:	6812      	ldr	r2, [r2, #0]
 8011740:	4213      	tst	r3, r2
 8011742:	d10a      	bne.n	801175a <vPortFree+0x2a>
 8011744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011748:	b672      	cpsid	i
 801174a:	f383 8811 	msr	BASEPRI, r3
 801174e:	f3bf 8f6f 	isb	sy
 8011752:	f3bf 8f4f 	dsb	sy
 8011756:	b662      	cpsie	i
 8011758:	e7fe      	b.n	8011758 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801175a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801175e:	b151      	cbz	r1, 8011776 <vPortFree+0x46>
 8011760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011764:	b672      	cpsid	i
 8011766:	f383 8811 	msr	BASEPRI, r3
 801176a:	f3bf 8f6f 	isb	sy
 801176e:	f3bf 8f4f 	dsb	sy
 8011772:	b662      	cpsie	i
 8011774:	e7fe      	b.n	8011774 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011776:	ea23 0302 	bic.w	r3, r3, r2
 801177a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801177e:	f7ff f81b 	bl	80107b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011782:	4a08      	ldr	r2, [pc, #32]	; (80117a4 <vPortFree+0x74>)
 8011784:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011788:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 801178c:	6811      	ldr	r1, [r2, #0]
 801178e:	440b      	add	r3, r1
 8011790:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011792:	f7ff ff19 	bl	80115c8 <prvInsertBlockIntoFreeList>
}
 8011796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 801179a:	f7ff b8ad 	b.w	80108f8 <xTaskResumeAll>
}
 801179e:	bd10      	pop	{r4, pc}
 80117a0:	2001ed98 	.word	0x2001ed98
 80117a4:	2001ed9c 	.word	0x2001ed9c

080117a8 <font_setCR>:
static unsigned char minDigitWd;
static unsigned char dualChar;

void font_setScale2(unsigned char _sx, unsigned char _sy) { sx = _sx; sy = _sy; }
void font_setScale1(unsigned char s) { sx = sy = s; }
void font_setCR(unsigned char _cr) { cr = _cr; }
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	4603      	mov	r3, r0
 80117b0:	71fb      	strb	r3, [r7, #7]
 80117b2:	79fb      	ldrb	r3, [r7, #7]
 80117b4:	4a03      	ldr	r2, [pc, #12]	; (80117c4 <font_setCR+0x1c>)
 80117b6:	6013      	str	r3, [r2, #0]
 80117b8:	bf00      	nop
 80117ba:	370c      	adds	r7, #12
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	2001edd8 	.word	0x2001edd8

080117c8 <font_getHeight>:
void font_setSpacingY(unsigned char sp) { spacingY = sp; }
void font_setFontMinWd(unsigned char wd) { minCharWd = wd; }
void font_setCharMinWd(unsigned char wd) { minCharWd = wd; }
void font_setDigitMinWd(unsigned char wd) { minDigitWd = wd; }
int font_getWidth() { return rFont ? rFont->wd : 0; }
int font_getHeight() { return rFont ? rFont->ht : 0; }
 80117c8:	b480      	push	{r7}
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	4b06      	ldr	r3, [pc, #24]	; (80117e8 <font_getHeight+0x20>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d003      	beq.n	80117dc <font_getHeight+0x14>
 80117d4:	4b04      	ldr	r3, [pc, #16]	; (80117e8 <font_getHeight+0x20>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	789b      	ldrb	r3, [r3, #2]
 80117da:	e000      	b.n	80117de <font_getHeight+0x16>
 80117dc:	2300      	movs	r3, #0
 80117de:	4618      	mov	r0, r3
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	2001edb4 	.word	0x2001edb4

080117ec <font_init>:
void font_setFillRectFun(void (*fun)(int x, int y, int w, int h, int c)) { fillRectFun=fun; }

// ----------------------------------------------------------------
// fillRect function callback and screen width and height is necessary to initialize the library
void font_init(void (*rectFun)(int x, int y, int w, int h, int c), int swd, int sht)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b085      	sub	sp, #20
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
  fillRectFun = rectFun;
 80117f8:	4a14      	ldr	r2, [pc, #80]	; (801184c <font_init+0x60>)
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	6013      	str	r3, [r2, #0]
  scrWd = swd;
 80117fe:	4a14      	ldr	r2, [pc, #80]	; (8011850 <font_init+0x64>)
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	6013      	str	r3, [r2, #0]
  scrHt = sht;
 8011804:	4a13      	ldr	r2, [pc, #76]	; (8011854 <font_init+0x68>)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6013      	str	r3, [r2, #0]
  cr = bold = dualChar = 0;
 801180a:	4b13      	ldr	r3, [pc, #76]	; (8011858 <font_init+0x6c>)
 801180c:	2200      	movs	r2, #0
 801180e:	701a      	strb	r2, [r3, #0]
 8011810:	4b12      	ldr	r3, [pc, #72]	; (801185c <font_init+0x70>)
 8011812:	2200      	movs	r2, #0
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	4b11      	ldr	r3, [pc, #68]	; (801185c <font_init+0x70>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	4a11      	ldr	r2, [pc, #68]	; (8011860 <font_init+0x74>)
 801181c:	6013      	str	r3, [r2, #0]
  isNumberFun = &font_isNumber;
 801181e:	4b11      	ldr	r3, [pc, #68]	; (8011864 <font_init+0x78>)
 8011820:	4a11      	ldr	r2, [pc, #68]	; (8011868 <font_init+0x7c>)
 8011822:	601a      	str	r2, [r3, #0]
  sx = sy = 1;
 8011824:	4b11      	ldr	r3, [pc, #68]	; (801186c <font_init+0x80>)
 8011826:	2201      	movs	r2, #1
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	4b10      	ldr	r3, [pc, #64]	; (801186c <font_init+0x80>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	4a10      	ldr	r2, [pc, #64]	; (8011870 <font_init+0x84>)
 8011830:	6013      	str	r3, [r2, #0]
  fg = bg = 1;
 8011832:	4b10      	ldr	r3, [pc, #64]	; (8011874 <font_init+0x88>)
 8011834:	2201      	movs	r2, #1
 8011836:	601a      	str	r2, [r3, #0]
 8011838:	4b0e      	ldr	r3, [pc, #56]	; (8011874 <font_init+0x88>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a0e      	ldr	r2, [pc, #56]	; (8011878 <font_init+0x8c>)
 801183e:	6013      	str	r3, [r2, #0]
}
 8011840:	bf00      	nop
 8011842:	3714      	adds	r7, #20
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr
 801184c:	2001edb0 	.word	0x2001edb0
 8011850:	2001edc8 	.word	0x2001edc8
 8011854:	2001edcc 	.word	0x2001edcc
 8011858:	2001edde 	.word	0x2001edde
 801185c:	2001edd4 	.word	0x2001edd4
 8011860:	2001edd8 	.word	0x2001edd8
 8011864:	2001edac 	.word	0x2001edac
 8011868:	08012ddd 	.word	0x08012ddd
 801186c:	20002cb4 	.word	0x20002cb4
 8011870:	20002cb0 	.word	0x20002cb0
 8011874:	20002cbc 	.word	0x20002cbc
 8011878:	20002cb8 	.word	0x20002cb8

0801187c <font_setFont>:

// ---------------------------------
void font_setFont(RRE_Font *f)
{
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  rFont = f;
 8011884:	4a0a      	ldr	r2, [pc, #40]	; (80118b0 <font_setFont+0x34>)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6013      	str	r3, [r2, #0]
  minCharWd = minDigitWd = 0;
 801188a:	4b0a      	ldr	r3, [pc, #40]	; (80118b4 <font_setFont+0x38>)
 801188c:	2200      	movs	r2, #0
 801188e:	701a      	strb	r2, [r3, #0]
 8011890:	4b08      	ldr	r3, [pc, #32]	; (80118b4 <font_setFont+0x38>)
 8011892:	781a      	ldrb	r2, [r3, #0]
 8011894:	4b08      	ldr	r3, [pc, #32]	; (80118b8 <font_setFont+0x3c>)
 8011896:	701a      	strb	r2, [r3, #0]
  spacing = 1;
 8011898:	4b08      	ldr	r3, [pc, #32]	; (80118bc <font_setFont+0x40>)
 801189a:	2201      	movs	r2, #1
 801189c:	601a      	str	r2, [r3, #0]
  spacingY = 0;
 801189e:	4b08      	ldr	r3, [pc, #32]	; (80118c0 <font_setFont+0x44>)
 80118a0:	2200      	movs	r2, #0
 80118a2:	601a      	str	r2, [r3, #0]
}
 80118a4:	bf00      	nop
 80118a6:	370c      	adds	r7, #12
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr
 80118b0:	2001edb4 	.word	0x2001edb4
 80118b4:	2001eddd 	.word	0x2001eddd
 80118b8:	2001eddc 	.word	0x2001eddc
 80118bc:	20002cac 	.word	0x20002cac
 80118c0:	2001edd0 	.word	0x2001edd0

080118c4 <font_charWidthOptim>:
  return xmax-xmin;
}

// ----------------------------------------------------------------
int font_charWidthOptim(unsigned char c, int *_xmin)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b08f      	sub	sp, #60	; 0x3c
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	4603      	mov	r3, r0
 80118cc:	6039      	str	r1, [r7, #0]
 80118ce:	71fb      	strb	r3, [r7, #7]
  if(c<rFont->firstCh || c>rFont->lastCh) return c==' '? rFont->wd/2 : 0;
 80118d0:	4b7e      	ldr	r3, [pc, #504]	; (8011acc <font_charWidthOptim+0x208>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	78db      	ldrb	r3, [r3, #3]
 80118d6:	79fa      	ldrb	r2, [r7, #7]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d305      	bcc.n	80118e8 <font_charWidthOptim+0x24>
 80118dc:	4b7b      	ldr	r3, [pc, #492]	; (8011acc <font_charWidthOptim+0x208>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	791b      	ldrb	r3, [r3, #4]
 80118e2:	79fa      	ldrb	r2, [r7, #7]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d90a      	bls.n	80118fe <font_charWidthOptim+0x3a>
 80118e8:	79fb      	ldrb	r3, [r7, #7]
 80118ea:	2b20      	cmp	r3, #32
 80118ec:	d105      	bne.n	80118fa <font_charWidthOptim+0x36>
 80118ee:	4b77      	ldr	r3, [pc, #476]	; (8011acc <font_charWidthOptim+0x208>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	785b      	ldrb	r3, [r3, #1]
 80118f4:	085b      	lsrs	r3, r3, #1
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	e0e2      	b.n	8011ac0 <font_charWidthOptim+0x1fc>
 80118fa:	2300      	movs	r3, #0
 80118fc:	e0e0      	b.n	8011ac0 <font_charWidthOptim+0x1fc>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 80118fe:	4b73      	ldr	r3, [pc, #460]	; (8011acc <font_charWidthOptim+0x208>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	68da      	ldr	r2, [r3, #12]
 8011904:	79fb      	ldrb	r3, [r7, #7]
 8011906:	4971      	ldr	r1, [pc, #452]	; (8011acc <font_charWidthOptim+0x208>)
 8011908:	6809      	ldr	r1, [r1, #0]
 801190a:	78c9      	ldrb	r1, [r1, #3]
 801190c:	1a5b      	subs	r3, r3, r1
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	4413      	add	r3, r2
 8011912:	881b      	ldrh	r3, [r3, #0]
 8011914:	867b      	strh	r3, [r7, #50]	; 0x32
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 8011916:	4b6d      	ldr	r3, [pc, #436]	; (8011acc <font_charWidthOptim+0x208>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	68da      	ldr	r2, [r3, #12]
 801191c:	79fb      	ldrb	r3, [r7, #7]
 801191e:	496b      	ldr	r1, [pc, #428]	; (8011acc <font_charWidthOptim+0x208>)
 8011920:	6809      	ldr	r1, [r1, #0]
 8011922:	78c9      	ldrb	r1, [r1, #3]
 8011924:	1a5b      	subs	r3, r3, r1
 8011926:	3301      	adds	r3, #1
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	4413      	add	r3, r2
 801192c:	881a      	ldrh	r2, [r3, #0]
 801192e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011930:	1ad3      	subs	r3, r2, r3
 8011932:	863b      	strh	r3, [r7, #48]	; 0x30
  if(!recNum) return rFont->wd/2;
 8011934:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011936:	2b00      	cmp	r3, #0
 8011938:	d105      	bne.n	8011946 <font_charWidthOptim+0x82>
 801193a:	4b64      	ldr	r3, [pc, #400]	; (8011acc <font_charWidthOptim+0x208>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	785b      	ldrb	r3, [r3, #1]
 8011940:	085b      	lsrs	r3, r3, #1
 8011942:	b2db      	uxtb	r3, r3
 8011944:	e0bc      	b.n	8011ac0 <font_charWidthOptim+0x1fc>
  if(_xmin) *_xmin=0;
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d002      	beq.n	8011952 <font_charWidthOptim+0x8e>
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	2200      	movs	r2, #0
 8011950:	601a      	str	r2, [r3, #0]
  int chWd = rFont->wd;
 8011952:	4b5e      	ldr	r3, [pc, #376]	; (8011acc <font_charWidthOptim+0x208>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	785b      	ldrb	r3, [r3, #1]
 8011958:	637b      	str	r3, [r7, #52]	; 0x34
  switch(rFont->type & 7) {
 801195a:	4b5c      	ldr	r3, [pc, #368]	; (8011acc <font_charWidthOptim+0x208>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	f003 0307 	and.w	r3, r3, #7
 8011964:	2b06      	cmp	r3, #6
 8011966:	f200 80a9 	bhi.w	8011abc <font_charWidthOptim+0x1f8>
 801196a:	a201      	add	r2, pc, #4	; (adr r2, 8011970 <font_charWidthOptim+0xac>)
 801196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011970:	0801198d 	.word	0x0801198d
 8011974:	08011a17 	.word	0x08011a17
 8011978:	08011a3d 	.word	0x08011a3d
 801197c:	080119bd 	.word	0x080119bd
 8011980:	08011a6f 	.word	0x08011a6f
 8011984:	08011a91 	.word	0x08011a91
 8011988:	080119ef 	.word	0x080119ef
#if ENABLE_RRE_16B==1
    case RRE_16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 801198c:	4b4f      	ldr	r3, [pc, #316]	; (8011acc <font_charWidthOptim+0x208>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	60fb      	str	r3, [r7, #12]
      unsigned short v = (rects[recNum-1+recIdx]);
 8011994:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011996:	1e5a      	subs	r2, r3, #1
 8011998:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801199a:	4413      	add	r3, r2
 801199c:	005b      	lsls	r3, r3, #1
 801199e:	68fa      	ldr	r2, [r7, #12]
 80119a0:	4413      	add	r3, r2
 80119a2:	881b      	ldrh	r3, [r3, #0]
 80119a4:	817b      	strh	r3, [r7, #10]
      chWd = (v & 0x000f)+1+((v & 0x0f00)>>8);
 80119a6:	897b      	ldrh	r3, [r7, #10]
 80119a8:	f003 030f 	and.w	r3, r3, #15
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	897b      	ldrh	r3, [r7, #10]
 80119b0:	121b      	asrs	r3, r3, #8
 80119b2:	f003 030f 	and.w	r3, r3, #15
 80119b6:	4413      	add	r3, r2
 80119b8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 80119ba:	e080      	b.n	8011abe <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 80119bc:	4b43      	ldr	r3, [pc, #268]	; (8011acc <font_charWidthOptim+0x208>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	6899      	ldr	r1, [r3, #8]
 80119c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80119c4:	1e5a      	subs	r2, r3, #1
 80119c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80119c8:	441a      	add	r2, r3
 80119ca:	4613      	mov	r3, r2
 80119cc:	005b      	lsls	r3, r3, #1
 80119ce:	4413      	add	r3, r2
 80119d0:	440b      	add	r3, r1
 80119d2:	623b      	str	r3, [r7, #32]
      chWd = ((rects[0]) & 0x3f)+((rects[2]) & 0x3f)+1;
 80119d4:	6a3b      	ldr	r3, [r7, #32]
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80119dc:	6a3b      	ldr	r3, [r7, #32]
 80119de:	3302      	adds	r3, #2
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119e6:	4413      	add	r3, r2
 80119e8:	3301      	adds	r3, #1
 80119ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 80119ec:	e067      	b.n	8011abe <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*4;
 80119ee:	4b37      	ldr	r3, [pc, #220]	; (8011acc <font_charWidthOptim+0x208>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80119f6:	1e51      	subs	r1, r2, #1
 80119f8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80119fa:	440a      	add	r2, r1
 80119fc:	0092      	lsls	r2, r2, #2
 80119fe:	4413      	add	r3, r2
 8011a00:	62fb      	str	r3, [r7, #44]	; 0x2c
      chWd = (rects[0])+(rects[2])+1;
 8011a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	461a      	mov	r2, r3
 8011a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0a:	3302      	adds	r3, #2
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	4413      	add	r3, r2
 8011a10:	3301      	adds	r3, #1
 8011a12:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8011a14:	e053      	b.n	8011abe <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8011a16:	4b2d      	ldr	r3, [pc, #180]	; (8011acc <font_charWidthOptim+0x208>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	617b      	str	r3, [r7, #20]
      unsigned short v = (rects[recNum-1+recIdx]);
 8011a1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011a20:	1e5a      	subs	r2, r3, #1
 8011a22:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011a24:	4413      	add	r3, r2
 8011a26:	005b      	lsls	r3, r3, #1
 8011a28:	697a      	ldr	r2, [r7, #20]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	827b      	strh	r3, [r7, #18]
      chWd = (v & 0x3f)+1;
 8011a30:	8a7b      	ldrh	r3, [r7, #18]
 8011a32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011a36:	3301      	adds	r3, #1
 8011a38:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8011a3a:	e040      	b.n	8011abe <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8011a3c:	4b23      	ldr	r3, [pc, #140]	; (8011acc <font_charWidthOptim+0x208>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	689b      	ldr	r3, [r3, #8]
 8011a42:	61fb      	str	r3, [r7, #28]
      unsigned short v = (rects[recNum-1+recIdx]);
 8011a44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011a46:	1e5a      	subs	r2, r3, #1
 8011a48:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011a4a:	4413      	add	r3, r2
 8011a4c:	005b      	lsls	r3, r3, #1
 8011a4e:	69fa      	ldr	r2, [r7, #28]
 8011a50:	4413      	add	r3, r2
 8011a52:	881b      	ldrh	r3, [r3, #0]
 8011a54:	837b      	strh	r3, [r7, #26]
      chWd = (v & 0x1f)+((v>>11) & 0x1f)+1;
 8011a56:	8b7b      	ldrh	r3, [r7, #26]
 8011a58:	f003 021f 	and.w	r2, r3, #31
 8011a5c:	8b7b      	ldrh	r3, [r7, #26]
 8011a5e:	0adb      	lsrs	r3, r3, #11
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	f003 031f 	and.w	r3, r3, #31
 8011a66:	4413      	add	r3, r2
 8011a68:	3301      	adds	r3, #1
 8011a6a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8011a6c:	e027      	b.n	8011abe <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8011a6e:	4b17      	ldr	r3, [pc, #92]	; (8011acc <font_charWidthOptim+0x208>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	6899      	ldr	r1, [r3, #8]
 8011a74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011a76:	1e5a      	subs	r2, r3, #1
 8011a78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011a7a:	441a      	add	r2, r3
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	005b      	lsls	r3, r3, #1
 8011a80:	4413      	add	r3, r2
 8011a82:	440b      	add	r3, r1
 8011a84:	627b      	str	r3, [r7, #36]	; 0x24
      chWd = (rects[0])+1;
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8011a8e:	e016      	b.n	8011abe <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8011a90:	4b0e      	ldr	r3, [pc, #56]	; (8011acc <font_charWidthOptim+0x208>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	6899      	ldr	r1, [r3, #8]
 8011a96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011a98:	1e5a      	subs	r2, r3, #1
 8011a9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011a9c:	441a      	add	r2, r3
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	4413      	add	r3, r2
 8011aa4:	440b      	add	r3, r1
 8011aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      chWd = (rects[0])+(rects[2])+1;
 8011aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	461a      	mov	r2, r3
 8011aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab0:	3302      	adds	r3, #2
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8011aba:	e000      	b.n	8011abe <font_charWidthOptim+0x1fa>
#endif
    default: break;
 8011abc:	bf00      	nop
  }
  return chWd;
 8011abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	373c      	adds	r7, #60	; 0x3c
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	2001edb4 	.word	0x2001edb4

08011ad0 <font_charWidth>:

// ----------------------------------------------------------------
int font_charWidth(unsigned char c)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b086      	sub	sp, #24
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	71fb      	strb	r3, [r7, #7]
  c = convertPolish(c);
#endif
#if ENABLE_NOSORT==1
  int wd = (rFont->type & RRE_NO_SORT) ? charWidthNoSort(c,_xmin) : charWidthOptim(c,_xmin);
#else
  int wd = font_charWidthOptim(c, 0);
 8011ada:	79fb      	ldrb	r3, [r7, #7]
 8011adc:	2100      	movs	r1, #0
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7ff fef0 	bl	80118c4 <font_charWidthOptim>
 8011ae4:	60f8      	str	r0, [r7, #12]
#endif
  int wdL = 0, wdR = spacing; // default spacing before and behind char
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	617b      	str	r3, [r7, #20]
 8011aea:	4b2a      	ldr	r3, [pc, #168]	; (8011b94 <font_charWidth+0xc4>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	613b      	str	r3, [r7, #16]
  if((*isNumberFun)(c) && minDigitWd>0) {
 8011af0:	4b29      	ldr	r3, [pc, #164]	; (8011b98 <font_charWidth+0xc8>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	79fa      	ldrb	r2, [r7, #7]
 8011af6:	4610      	mov	r0, r2
 8011af8:	4798      	blx	r3
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d01e      	beq.n	8011b3e <font_charWidth+0x6e>
 8011b00:	4b26      	ldr	r3, [pc, #152]	; (8011b9c <font_charWidth+0xcc>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d01a      	beq.n	8011b3e <font_charWidth+0x6e>
    if(minDigitWd>wd) {
 8011b08:	4b24      	ldr	r3, [pc, #144]	; (8011b9c <font_charWidth+0xcc>)
 8011b0a:	781b      	ldrb	r3, [r3, #0]
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	4293      	cmp	r3, r2
 8011b12:	da2e      	bge.n	8011b72 <font_charWidth+0xa2>
      wdL = (minDigitWd-wd)/2;
 8011b14:	4b21      	ldr	r3, [pc, #132]	; (8011b9c <font_charWidth+0xcc>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	461a      	mov	r2, r3
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	da00      	bge.n	8011b24 <font_charWidth+0x54>
 8011b22:	3301      	adds	r3, #1
 8011b24:	105b      	asrs	r3, r3, #1
 8011b26:	617b      	str	r3, [r7, #20]
      wdR += (minDigitWd-wd-wdL);
 8011b28:	4b1c      	ldr	r3, [pc, #112]	; (8011b9c <font_charWidth+0xcc>)
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	1ad2      	subs	r2, r2, r3
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	1ad3      	subs	r3, r2, r3
 8011b36:	693a      	ldr	r2, [r7, #16]
 8011b38:	4413      	add	r3, r2
 8011b3a:	613b      	str	r3, [r7, #16]
    if(minDigitWd>wd) {
 8011b3c:	e019      	b.n	8011b72 <font_charWidth+0xa2>
    }
  } else if(minCharWd>wd) {
 8011b3e:	4b18      	ldr	r3, [pc, #96]	; (8011ba0 <font_charWidth+0xd0>)
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	461a      	mov	r2, r3
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	4293      	cmp	r3, r2
 8011b48:	da13      	bge.n	8011b72 <font_charWidth+0xa2>
    wdL = (minCharWd-wd)/2;
 8011b4a:	4b15      	ldr	r3, [pc, #84]	; (8011ba0 <font_charWidth+0xd0>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	da00      	bge.n	8011b5a <font_charWidth+0x8a>
 8011b58:	3301      	adds	r3, #1
 8011b5a:	105b      	asrs	r3, r3, #1
 8011b5c:	617b      	str	r3, [r7, #20]
    wdR += (minCharWd-wd-wdL);
 8011b5e:	4b10      	ldr	r3, [pc, #64]	; (8011ba0 <font_charWidth+0xd0>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	461a      	mov	r2, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	1ad2      	subs	r2, r2, r3
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	693a      	ldr	r2, [r7, #16]
 8011b6e:	4413      	add	r3, r2
 8011b70:	613b      	str	r3, [r7, #16]
  }
  return (wd+wdL+wdR+bold)*sx;
 8011b72:	68fa      	ldr	r2, [r7, #12]
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	441a      	add	r2, r3
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	441a      	add	r2, r3
 8011b7c:	4b09      	ldr	r3, [pc, #36]	; (8011ba4 <font_charWidth+0xd4>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4413      	add	r3, r2
 8011b82:	4a09      	ldr	r2, [pc, #36]	; (8011ba8 <font_charWidth+0xd8>)
 8011b84:	6812      	ldr	r2, [r2, #0]
 8011b86:	fb02 f303 	mul.w	r3, r2, r3
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3718      	adds	r7, #24
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	bf00      	nop
 8011b94:	20002cac 	.word	0x20002cac
 8011b98:	2001edac 	.word	0x2001edac
 8011b9c:	2001eddd 	.word	0x2001eddd
 8011ba0:	2001eddc 	.word	0x2001eddc
 8011ba4:	2001edd4 	.word	0x2001edd4
 8011ba8:	20002cb0 	.word	0x20002cb0

08011bac <font_drawChar>:

// ----------------------------------------------------------------
int font_drawChar(int x, int y, unsigned char c)
{
 8011bac:	b5b0      	push	{r4, r5, r7, lr}
 8011bae:	b0ac      	sub	sp, #176	; 0xb0
 8011bb0:	af02      	add	r7, sp, #8
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	4613      	mov	r3, r2
 8011bb8:	71fb      	strb	r3, [r7, #7]
#if CONVERT_PL_CHARS==1
  c = convertPolish(c);
#endif
  if(x>=scrWd || y>=scrHt || x+rFont->wd*sx-1<0 || y+rFont->ht*sy-1<0) return 0;
 8011bba:	4bac      	ldr	r3, [pc, #688]	; (8011e6c <font_drawChar+0x2c0>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	68fa      	ldr	r2, [r7, #12]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	da1e      	bge.n	8011c02 <font_drawChar+0x56>
 8011bc4:	4baa      	ldr	r3, [pc, #680]	; (8011e70 <font_drawChar+0x2c4>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	68ba      	ldr	r2, [r7, #8]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	da19      	bge.n	8011c02 <font_drawChar+0x56>
 8011bce:	4ba9      	ldr	r3, [pc, #676]	; (8011e74 <font_drawChar+0x2c8>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	785b      	ldrb	r3, [r3, #1]
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	4ba8      	ldr	r3, [pc, #672]	; (8011e78 <font_drawChar+0x2cc>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	fb03 f202 	mul.w	r2, r3, r2
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	4413      	add	r3, r2
 8011be2:	3b01      	subs	r3, #1
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	db0c      	blt.n	8011c02 <font_drawChar+0x56>
 8011be8:	4ba2      	ldr	r3, [pc, #648]	; (8011e74 <font_drawChar+0x2c8>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	789b      	ldrb	r3, [r3, #2]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	4ba2      	ldr	r3, [pc, #648]	; (8011e7c <font_drawChar+0x2d0>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	fb03 f202 	mul.w	r2, r3, r2
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	4413      	add	r3, r2
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	da02      	bge.n	8011c08 <font_drawChar+0x5c>
 8011c02:	2300      	movs	r3, #0
 8011c04:	f001 b828 	b.w	8012c58 <font_drawChar+0x10ac>
  if(c<rFont->firstCh || c>rFont->lastCh) return font_charWidth(c);
 8011c08:	4b9a      	ldr	r3, [pc, #616]	; (8011e74 <font_drawChar+0x2c8>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	78db      	ldrb	r3, [r3, #3]
 8011c0e:	79fa      	ldrb	r2, [r7, #7]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d305      	bcc.n	8011c20 <font_drawChar+0x74>
 8011c14:	4b97      	ldr	r3, [pc, #604]	; (8011e74 <font_drawChar+0x2c8>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	791b      	ldrb	r3, [r3, #4]
 8011c1a:	79fa      	ldrb	r2, [r7, #7]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d906      	bls.n	8011c2e <font_drawChar+0x82>
 8011c20:	79fb      	ldrb	r3, [r7, #7]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7ff ff54 	bl	8011ad0 <font_charWidth>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	f001 b815 	b.w	8012c58 <font_drawChar+0x10ac>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 8011c2e:	4b91      	ldr	r3, [pc, #580]	; (8011e74 <font_drawChar+0x2c8>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	68da      	ldr	r2, [r3, #12]
 8011c34:	79fb      	ldrb	r3, [r7, #7]
 8011c36:	498f      	ldr	r1, [pc, #572]	; (8011e74 <font_drawChar+0x2c8>)
 8011c38:	6809      	ldr	r1, [r1, #0]
 8011c3a:	78c9      	ldrb	r1, [r1, #3]
 8011c3c:	1a5b      	subs	r3, r3, r1
 8011c3e:	005b      	lsls	r3, r3, #1
 8011c40:	4413      	add	r3, r2
 8011c42:	881b      	ldrh	r3, [r3, #0]
 8011c44:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 8011c48:	4b8a      	ldr	r3, [pc, #552]	; (8011e74 <font_drawChar+0x2c8>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	68da      	ldr	r2, [r3, #12]
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	4988      	ldr	r1, [pc, #544]	; (8011e74 <font_drawChar+0x2c8>)
 8011c52:	6809      	ldr	r1, [r1, #0]
 8011c54:	78c9      	ldrb	r1, [r1, #3]
 8011c56:	1a5b      	subs	r3, r3, r1
 8011c58:	3301      	adds	r3, #1
 8011c5a:	005b      	lsls	r3, r3, #1
 8011c5c:	4413      	add	r3, r2
 8011c5e:	881a      	ldrh	r2, [r3, #0]
 8011c60:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if ENABLE_NOSORT==1
  int xmin, chWd = (rFont->type & RRE_NO_SORT) ? font_charWidthNoSort(c,&xmin) : font_charWidthOptim(c,&xmin);
#else
  int xmin, chWd = font_charWidthOptim(c,&xmin);
 8011c6a:	f107 0210 	add.w	r2, r7, #16
 8011c6e:	79fb      	ldrb	r3, [r7, #7]
 8011c70:	4611      	mov	r1, r2
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff fe26 	bl	80118c4 <font_charWidthOptim>
 8011c78:	65b8      	str	r0, [r7, #88]	; 0x58
#endif
  int wd=chWd, wdL = 0, wdR = spacing;
 8011c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011c80:	2300      	movs	r3, #0
 8011c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011c86:	4b7e      	ldr	r3, [pc, #504]	; (8011e80 <font_drawChar+0x2d4>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if((*isNumberFun)(c) && minDigitWd>0) {
 8011c8e:	4b7d      	ldr	r3, [pc, #500]	; (8011e84 <font_drawChar+0x2d8>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	79fa      	ldrb	r2, [r7, #7]
 8011c94:	4610      	mov	r0, r2
 8011c96:	4798      	blx	r3
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d025      	beq.n	8011cea <font_drawChar+0x13e>
 8011c9e:	4b7a      	ldr	r3, [pc, #488]	; (8011e88 <font_drawChar+0x2dc>)
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d021      	beq.n	8011cea <font_drawChar+0x13e>
    if(minDigitWd>wd) {
 8011ca6:	4b78      	ldr	r3, [pc, #480]	; (8011e88 <font_drawChar+0x2dc>)
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	461a      	mov	r2, r3
 8011cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	da3b      	bge.n	8011d2c <font_drawChar+0x180>
      wdL = (minDigitWd-wd)/2;
 8011cb4:	4b74      	ldr	r3, [pc, #464]	; (8011e88 <font_drawChar+0x2dc>)
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	461a      	mov	r2, r3
 8011cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	da00      	bge.n	8011cc6 <font_drawChar+0x11a>
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	105b      	asrs	r3, r3, #1
 8011cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      wdR += (minDigitWd-wd-wdL);
 8011ccc:	4b6e      	ldr	r3, [pc, #440]	; (8011e88 <font_drawChar+0x2dc>)
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011cd6:	1ad2      	subs	r2, r2, r3
 8011cd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011cdc:	1ad3      	subs	r3, r2, r3
 8011cde:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011ce2:	4413      	add	r3, r2
 8011ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(minDigitWd>wd) {
 8011ce8:	e020      	b.n	8011d2c <font_drawChar+0x180>
    }
  } else if(minCharWd>wd) {
 8011cea:	4b68      	ldr	r3, [pc, #416]	; (8011e8c <font_drawChar+0x2e0>)
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	da19      	bge.n	8011d2c <font_drawChar+0x180>
    wdL = (minCharWd-wd)/2;
 8011cf8:	4b64      	ldr	r3, [pc, #400]	; (8011e8c <font_drawChar+0x2e0>)
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d02:	1ad3      	subs	r3, r2, r3
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	da00      	bge.n	8011d0a <font_drawChar+0x15e>
 8011d08:	3301      	adds	r3, #1
 8011d0a:	105b      	asrs	r3, r3, #1
 8011d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    wdR += (minCharWd-wd-wdL);
 8011d10:	4b5e      	ldr	r3, [pc, #376]	; (8011e8c <font_drawChar+0x2e0>)
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	461a      	mov	r2, r3
 8011d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d1a:	1ad2      	subs	r2, r2, r3
 8011d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011d26:	4413      	add	r3, r2
 8011d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  if(x+wd+wdL+wdR>scrWd) wdR = max(scrWd-x-wdL-wd, 0);
 8011d2c:	68fa      	ldr	r2, [r7, #12]
 8011d2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d32:	441a      	add	r2, r3
 8011d34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d38:	441a      	add	r2, r3
 8011d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011d3e:	441a      	add	r2, r3
 8011d40:	4b4a      	ldr	r3, [pc, #296]	; (8011e6c <font_drawChar+0x2c0>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	dd0d      	ble.n	8011d64 <font_drawChar+0x1b8>
 8011d48:	4b48      	ldr	r3, [pc, #288]	; (8011e6c <font_drawChar+0x2c0>)
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	1ad2      	subs	r2, r2, r3
 8011d50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d54:	1ad2      	subs	r2, r2, r3
 8011d56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if(x+wd+wdL+wdR>scrWd) wd  = max(scrWd-x-wdL, 0);
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d6a:	441a      	add	r2, r3
 8011d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d70:	441a      	add	r2, r3
 8011d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011d76:	441a      	add	r2, r3
 8011d78:	4b3c      	ldr	r3, [pc, #240]	; (8011e6c <font_drawChar+0x2c0>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	dd0a      	ble.n	8011d96 <font_drawChar+0x1ea>
 8011d80:	4b3a      	ldr	r3, [pc, #232]	; (8011e6c <font_drawChar+0x2c0>)
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	1ad2      	subs	r2, r2, r3
 8011d88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011d8c:	1ad3      	subs	r3, r2, r3
 8011d8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if(x+wd+wdL+wdR>scrWd) wdL = max(scrWd-x, 0);
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011d9c:	441a      	add	r2, r3
 8011d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011da2:	441a      	add	r2, r3
 8011da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011da8:	441a      	add	r2, r3
 8011daa:	4b30      	ldr	r3, [pc, #192]	; (8011e6c <font_drawChar+0x2c0>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	dd07      	ble.n	8011dc2 <font_drawChar+0x216>
 8011db2:	4b2e      	ldr	r3, [pc, #184]	; (8011e6c <font_drawChar+0x2c0>)
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	1ad3      	subs	r3, r2, r3
 8011dba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  wd+=wdR+wdL;
 8011dc2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011dca:	4413      	add	r3, r2
 8011dcc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011dd0:	4413      	add	r3, r2
 8011dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int type=rFont->type & 7;
 8011dd6:	4b27      	ldr	r3, [pc, #156]	; (8011e74 <font_drawChar+0x2c8>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	f003 0307 	and.w	r3, r3, #7
 8011de0:	657b      	str	r3, [r7, #84]	; 0x54
  if(bg!=fg && (type==RRE_16B ||type==RRE_24B ||type==RRE_32B || !recNum)) (*fillRectFun)(x, y, (wd+bold)*sx, rFont->ht*sy, bg);
 8011de2:	4b2b      	ldr	r3, [pc, #172]	; (8011e90 <font_drawChar+0x2e4>)
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	4b2b      	ldr	r3, [pc, #172]	; (8011e94 <font_drawChar+0x2e8>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d026      	beq.n	8011e3c <font_drawChar+0x290>
 8011dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d009      	beq.n	8011e08 <font_drawChar+0x25c>
 8011df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011df6:	2b03      	cmp	r3, #3
 8011df8:	d006      	beq.n	8011e08 <font_drawChar+0x25c>
 8011dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dfc:	2b06      	cmp	r3, #6
 8011dfe:	d003      	beq.n	8011e08 <font_drawChar+0x25c>
 8011e00:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d119      	bne.n	8011e3c <font_drawChar+0x290>
 8011e08:	4b23      	ldr	r3, [pc, #140]	; (8011e98 <font_drawChar+0x2ec>)
 8011e0a:	681c      	ldr	r4, [r3, #0]
 8011e0c:	4b23      	ldr	r3, [pc, #140]	; (8011e9c <font_drawChar+0x2f0>)
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011e14:	4413      	add	r3, r2
 8011e16:	4a18      	ldr	r2, [pc, #96]	; (8011e78 <font_drawChar+0x2cc>)
 8011e18:	6812      	ldr	r2, [r2, #0]
 8011e1a:	fb02 f203 	mul.w	r2, r2, r3
 8011e1e:	4b15      	ldr	r3, [pc, #84]	; (8011e74 <font_drawChar+0x2c8>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	789b      	ldrb	r3, [r3, #2]
 8011e24:	4619      	mov	r1, r3
 8011e26:	4b15      	ldr	r3, [pc, #84]	; (8011e7c <font_drawChar+0x2d0>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	fb03 f101 	mul.w	r1, r3, r1
 8011e2e:	4b18      	ldr	r3, [pc, #96]	; (8011e90 <font_drawChar+0x2e4>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	9300      	str	r3, [sp, #0]
 8011e34:	460b      	mov	r3, r1
 8011e36:	68b9      	ldr	r1, [r7, #8]
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	47a0      	blx	r4
  x+=wdL*sx;
 8011e3c:	4b0e      	ldr	r3, [pc, #56]	; (8011e78 <font_drawChar+0x2cc>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8011e44:	fb02 f303 	mul.w	r3, r2, r3
 8011e48:	68fa      	ldr	r2, [r7, #12]
 8011e4a:	4413      	add	r3, r2
 8011e4c:	60fb      	str	r3, [r7, #12]
  if(!recNum) return (wd+bold)*sx;
 8011e4e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d124      	bne.n	8011ea0 <font_drawChar+0x2f4>
 8011e56:	4b11      	ldr	r3, [pc, #68]	; (8011e9c <font_drawChar+0x2f0>)
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011e5e:	4413      	add	r3, r2
 8011e60:	4a05      	ldr	r2, [pc, #20]	; (8011e78 <font_drawChar+0x2cc>)
 8011e62:	6812      	ldr	r2, [r2, #0]
 8011e64:	fb02 f303 	mul.w	r3, r2, r3
 8011e68:	f000 bef6 	b.w	8012c58 <font_drawChar+0x10ac>
 8011e6c:	2001edc8 	.word	0x2001edc8
 8011e70:	2001edcc 	.word	0x2001edcc
 8011e74:	2001edb4 	.word	0x2001edb4
 8011e78:	20002cb0 	.word	0x20002cb0
 8011e7c:	20002cb4 	.word	0x20002cb4
 8011e80:	20002cac 	.word	0x20002cac
 8011e84:	2001edac 	.word	0x2001edac
 8011e88:	2001eddd 	.word	0x2001eddd
 8011e8c:	2001eddc 	.word	0x2001eddc
 8011e90:	20002cbc 	.word	0x20002cbc
 8011e94:	20002cb8 	.word	0x20002cb8
 8011e98:	2001edb0 	.word	0x2001edb0
 8011e9c:	2001edd4 	.word	0x2001edd4
  switch(type) {
 8011ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea2:	2b06      	cmp	r3, #6
 8011ea4:	f200 86c8 	bhi.w	8012c38 <font_drawChar+0x108c>
 8011ea8:	a201      	add	r2, pc, #4	; (adr r2, 8011eb0 <font_drawChar+0x304>)
 8011eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eae:	bf00      	nop
 8011eb0:	08011ecd 	.word	0x08011ecd
 8011eb4:	08012151 	.word	0x08012151
 8011eb8:	08012489 	.word	0x08012489
 8011ebc:	08011f8d 	.word	0x08011f8d
 8011ec0:	0801286d 	.word	0x0801286d
 8011ec4:	08012b63 	.word	0x08012b63
 8011ec8:	08012071 	.word	0x08012071
#if ENABLE_RRE_16B==1
    case RRE_16B:
      for(int i=0; i<recNum; i++) {
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011ed2:	e053      	b.n	8011f7c <font_drawChar+0x3d0>
        unsigned short *rects = (unsigned short*)rFont->rects;
 8011ed4:	4b94      	ldr	r3, [pc, #592]	; (8012128 <font_drawChar+0x57c>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	61bb      	str	r3, [r7, #24]
        unsigned short v = (rects[i+recIdx]);
 8011edc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8011ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ee4:	4413      	add	r3, r2
 8011ee6:	005b      	lsls	r3, r3, #1
 8011ee8:	69ba      	ldr	r2, [r7, #24]
 8011eea:	4413      	add	r3, r2
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	82fb      	strh	r3, [r7, #22]
        xf = (v & 0x000f)-xmin;
 8011ef0:	8afb      	ldrh	r3, [r7, #22]
 8011ef2:	f003 020f 	and.w	r2, r3, #15
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	1ad3      	subs	r3, r2, r3
 8011efa:	4a8c      	ldr	r2, [pc, #560]	; (801212c <font_drawChar+0x580>)
 8011efc:	6013      	str	r3, [r2, #0]
        yf = (v & 0x00f0)>>4;
 8011efe:	8afb      	ldrh	r3, [r7, #22]
 8011f00:	111b      	asrs	r3, r3, #4
 8011f02:	f003 030f 	and.w	r3, r3, #15
 8011f06:	4a8a      	ldr	r2, [pc, #552]	; (8012130 <font_drawChar+0x584>)
 8011f08:	6013      	str	r3, [r2, #0]
        wf = ((v & 0x0f00)>>8)+1;
 8011f0a:	8afb      	ldrh	r3, [r7, #22]
 8011f0c:	121b      	asrs	r3, r3, #8
 8011f0e:	f003 030f 	and.w	r3, r3, #15
 8011f12:	3301      	adds	r3, #1
 8011f14:	4a87      	ldr	r2, [pc, #540]	; (8012134 <font_drawChar+0x588>)
 8011f16:	6013      	str	r3, [r2, #0]
        hf = ((v & 0xf000)>>12)+1;
 8011f18:	8afb      	ldrh	r3, [r7, #22]
 8011f1a:	0b1b      	lsrs	r3, r3, #12
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	3301      	adds	r3, #1
 8011f20:	4a85      	ldr	r2, [pc, #532]	; (8012138 <font_drawChar+0x58c>)
 8011f22:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8011f24:	4b85      	ldr	r3, [pc, #532]	; (801213c <font_drawChar+0x590>)
 8011f26:	681c      	ldr	r4, [r3, #0]
 8011f28:	4b80      	ldr	r3, [pc, #512]	; (801212c <font_drawChar+0x580>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4a84      	ldr	r2, [pc, #528]	; (8012140 <font_drawChar+0x594>)
 8011f2e:	6812      	ldr	r2, [r2, #0]
 8011f30:	fb02 f203 	mul.w	r2, r2, r3
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	18d0      	adds	r0, r2, r3
 8011f38:	4b7d      	ldr	r3, [pc, #500]	; (8012130 <font_drawChar+0x584>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4a81      	ldr	r2, [pc, #516]	; (8012144 <font_drawChar+0x598>)
 8011f3e:	6812      	ldr	r2, [r2, #0]
 8011f40:	fb02 f203 	mul.w	r2, r2, r3
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	18d1      	adds	r1, r2, r3
 8011f48:	4b7a      	ldr	r3, [pc, #488]	; (8012134 <font_drawChar+0x588>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4a7c      	ldr	r2, [pc, #496]	; (8012140 <font_drawChar+0x594>)
 8011f4e:	6812      	ldr	r2, [r2, #0]
 8011f50:	fb02 f203 	mul.w	r2, r2, r3
 8011f54:	4b7c      	ldr	r3, [pc, #496]	; (8012148 <font_drawChar+0x59c>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	18d5      	adds	r5, r2, r3
 8011f5a:	4b77      	ldr	r3, [pc, #476]	; (8012138 <font_drawChar+0x58c>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	4a79      	ldr	r2, [pc, #484]	; (8012144 <font_drawChar+0x598>)
 8011f60:	6812      	ldr	r2, [r2, #0]
 8011f62:	fb02 f203 	mul.w	r2, r2, r3
 8011f66:	4b79      	ldr	r3, [pc, #484]	; (801214c <font_drawChar+0x5a0>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	462a      	mov	r2, r5
 8011f70:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8011f72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f76:	3301      	adds	r3, #1
 8011f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011f80:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011f84:	429a      	cmp	r2, r3
 8011f86:	dba5      	blt.n	8011ed4 <font_drawChar+0x328>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8011f88:	f000 be5d 	b.w	8012c46 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B:
      for(int i=0; i<recNum; i++) {
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011f92:	e065      	b.n	8012060 <font_drawChar+0x4b4>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8011f94:	4b64      	ldr	r3, [pc, #400]	; (8012128 <font_drawChar+0x57c>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	6899      	ldr	r1, [r3, #8]
 8011f9a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8011f9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011fa2:	441a      	add	r2, r3
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	4413      	add	r3, r2
 8011faa:	440b      	add	r3, r1
 8011fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        xf = ((rects[0]) & 0x3f)-xmin;
 8011fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	4a5c      	ldr	r2, [pc, #368]	; (801212c <font_drawChar+0x580>)
 8011fbc:	6013      	str	r3, [r2, #0]
        yf = ((rects[1]) & 0x3f);
 8011fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fc0:	3301      	adds	r3, #1
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fc8:	4a59      	ldr	r2, [pc, #356]	; (8012130 <font_drawChar+0x584>)
 8011fca:	6013      	str	r3, [r2, #0]
        wf = ((rects[2]) & 0x3f)+1;
 8011fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fce:	3302      	adds	r3, #2
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	4a56      	ldr	r2, [pc, #344]	; (8012134 <font_drawChar+0x588>)
 8011fda:	6013      	str	r3, [r2, #0]
        hf = 1+((((rects[0]) & 0xc0)>>6) | (((rects[1]) & 0xc0)>>4) | (((rects[2]) & 0xc0)>>2));
 8011fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	099b      	lsrs	r3, r3, #6
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fe8:	3301      	adds	r3, #1
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	111b      	asrs	r3, r3, #4
 8011fee:	f003 030c 	and.w	r3, r3, #12
 8011ff2:	431a      	orrs	r2, r3
 8011ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ff6:	3302      	adds	r3, #2
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	109b      	asrs	r3, r3, #2
 8011ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012000:	4313      	orrs	r3, r2
 8012002:	3301      	adds	r3, #1
 8012004:	4a4c      	ldr	r2, [pc, #304]	; (8012138 <font_drawChar+0x58c>)
 8012006:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8012008:	4b4c      	ldr	r3, [pc, #304]	; (801213c <font_drawChar+0x590>)
 801200a:	681c      	ldr	r4, [r3, #0]
 801200c:	4b47      	ldr	r3, [pc, #284]	; (801212c <font_drawChar+0x580>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a4b      	ldr	r2, [pc, #300]	; (8012140 <font_drawChar+0x594>)
 8012012:	6812      	ldr	r2, [r2, #0]
 8012014:	fb02 f203 	mul.w	r2, r2, r3
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	18d0      	adds	r0, r2, r3
 801201c:	4b44      	ldr	r3, [pc, #272]	; (8012130 <font_drawChar+0x584>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	4a48      	ldr	r2, [pc, #288]	; (8012144 <font_drawChar+0x598>)
 8012022:	6812      	ldr	r2, [r2, #0]
 8012024:	fb02 f203 	mul.w	r2, r2, r3
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	18d1      	adds	r1, r2, r3
 801202c:	4b41      	ldr	r3, [pc, #260]	; (8012134 <font_drawChar+0x588>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4a43      	ldr	r2, [pc, #268]	; (8012140 <font_drawChar+0x594>)
 8012032:	6812      	ldr	r2, [r2, #0]
 8012034:	fb02 f203 	mul.w	r2, r2, r3
 8012038:	4b43      	ldr	r3, [pc, #268]	; (8012148 <font_drawChar+0x59c>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	18d5      	adds	r5, r2, r3
 801203e:	4b3e      	ldr	r3, [pc, #248]	; (8012138 <font_drawChar+0x58c>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4a40      	ldr	r2, [pc, #256]	; (8012144 <font_drawChar+0x598>)
 8012044:	6812      	ldr	r2, [r2, #0]
 8012046:	fb02 f203 	mul.w	r2, r2, r3
 801204a:	4b40      	ldr	r3, [pc, #256]	; (801214c <font_drawChar+0x5a0>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	4613      	mov	r3, r2
 8012052:	462a      	mov	r2, r5
 8012054:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8012056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801205a:	3301      	adds	r3, #1
 801205c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012060:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012064:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012068:	429a      	cmp	r2, r3
 801206a:	db93      	blt.n	8011f94 <font_drawChar+0x3e8>
      }
      break;
 801206c:	f000 bdeb 	b.w	8012c46 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B:
      for(int i=0; i<recNum; i++) {
 8012070:	2300      	movs	r3, #0
 8012072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012076:	e04f      	b.n	8012118 <font_drawChar+0x56c>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*4;
 8012078:	4b2b      	ldr	r3, [pc, #172]	; (8012128 <font_drawChar+0x57c>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8012082:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012086:	440a      	add	r2, r1
 8012088:	0092      	lsls	r2, r2, #2
 801208a:	4413      	add	r3, r2
 801208c:	653b      	str	r3, [r7, #80]	; 0x50
        xf = (rects[0])-xmin;
 801208e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	461a      	mov	r2, r3
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	1ad3      	subs	r3, r2, r3
 8012098:	4a24      	ldr	r2, [pc, #144]	; (801212c <font_drawChar+0x580>)
 801209a:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 801209c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801209e:	3301      	adds	r3, #1
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	461a      	mov	r2, r3
 80120a4:	4b22      	ldr	r3, [pc, #136]	; (8012130 <font_drawChar+0x584>)
 80120a6:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 80120a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120aa:	3302      	adds	r3, #2
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	3301      	adds	r3, #1
 80120b0:	4a20      	ldr	r2, [pc, #128]	; (8012134 <font_drawChar+0x588>)
 80120b2:	6013      	str	r3, [r2, #0]
        hf = (rects[3])+1;
 80120b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120b6:	3303      	adds	r3, #3
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	3301      	adds	r3, #1
 80120bc:	4a1e      	ldr	r2, [pc, #120]	; (8012138 <font_drawChar+0x58c>)
 80120be:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80120c0:	4b1e      	ldr	r3, [pc, #120]	; (801213c <font_drawChar+0x590>)
 80120c2:	681c      	ldr	r4, [r3, #0]
 80120c4:	4b19      	ldr	r3, [pc, #100]	; (801212c <font_drawChar+0x580>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4a1d      	ldr	r2, [pc, #116]	; (8012140 <font_drawChar+0x594>)
 80120ca:	6812      	ldr	r2, [r2, #0]
 80120cc:	fb02 f203 	mul.w	r2, r2, r3
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	18d0      	adds	r0, r2, r3
 80120d4:	4b16      	ldr	r3, [pc, #88]	; (8012130 <font_drawChar+0x584>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4a1a      	ldr	r2, [pc, #104]	; (8012144 <font_drawChar+0x598>)
 80120da:	6812      	ldr	r2, [r2, #0]
 80120dc:	fb02 f203 	mul.w	r2, r2, r3
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	18d1      	adds	r1, r2, r3
 80120e4:	4b13      	ldr	r3, [pc, #76]	; (8012134 <font_drawChar+0x588>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	4a15      	ldr	r2, [pc, #84]	; (8012140 <font_drawChar+0x594>)
 80120ea:	6812      	ldr	r2, [r2, #0]
 80120ec:	fb02 f203 	mul.w	r2, r2, r3
 80120f0:	4b15      	ldr	r3, [pc, #84]	; (8012148 <font_drawChar+0x59c>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	18d5      	adds	r5, r2, r3
 80120f6:	4b10      	ldr	r3, [pc, #64]	; (8012138 <font_drawChar+0x58c>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	4a12      	ldr	r2, [pc, #72]	; (8012144 <font_drawChar+0x598>)
 80120fc:	6812      	ldr	r2, [r2, #0]
 80120fe:	fb02 f203 	mul.w	r2, r2, r3
 8012102:	4b12      	ldr	r3, [pc, #72]	; (801214c <font_drawChar+0x5a0>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	4613      	mov	r3, r2
 801210a:	462a      	mov	r2, r5
 801210c:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 801210e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012112:	3301      	adds	r3, #1
 8012114:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012118:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801211c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012120:	429a      	cmp	r2, r3
 8012122:	dba9      	blt.n	8012078 <font_drawChar+0x4cc>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8012124:	f000 bd8f 	b.w	8012c46 <font_drawChar+0x109a>
 8012128:	2001edb4 	.word	0x2001edb4
 801212c:	2001edb8 	.word	0x2001edb8
 8012130:	2001edbc 	.word	0x2001edbc
 8012134:	2001edc0 	.word	0x2001edc0
 8012138:	2001edc4 	.word	0x2001edc4
 801213c:	2001edb0 	.word	0x2001edb0
 8012140:	20002cb0 	.word	0x20002cb0
 8012144:	20002cb4 	.word	0x20002cb4
 8012148:	2001edd4 	.word	0x2001edd4
 801214c:	20002cb8 	.word	0x20002cb8
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B:
      if(bg!=fg) {
 8012150:	4b96      	ldr	r3, [pc, #600]	; (80123ac <font_drawChar+0x800>)
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	4b96      	ldr	r3, [pc, #600]	; (80123b0 <font_drawChar+0x804>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	429a      	cmp	r2, r3
 801215a:	f000 8123 	beq.w	80123a4 <font_drawChar+0x7f8>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 801215e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012162:	2b00      	cmp	r3, #0
 8012164:	dd1d      	ble.n	80121a2 <font_drawChar+0x5f6>
 8012166:	4b93      	ldr	r3, [pc, #588]	; (80123b4 <font_drawChar+0x808>)
 8012168:	681c      	ldr	r4, [r3, #0]
 801216a:	4b93      	ldr	r3, [pc, #588]	; (80123b8 <font_drawChar+0x80c>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012172:	fb02 f303 	mul.w	r3, r2, r3
 8012176:	68fa      	ldr	r2, [r7, #12]
 8012178:	1ad0      	subs	r0, r2, r3
 801217a:	4b8f      	ldr	r3, [pc, #572]	; (80123b8 <font_drawChar+0x80c>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012182:	fb02 f203 	mul.w	r2, r2, r3
 8012186:	4b8d      	ldr	r3, [pc, #564]	; (80123bc <font_drawChar+0x810>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	789b      	ldrb	r3, [r3, #2]
 801218c:	4619      	mov	r1, r3
 801218e:	4b8c      	ldr	r3, [pc, #560]	; (80123c0 <font_drawChar+0x814>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	fb03 f101 	mul.w	r1, r3, r1
 8012196:	4b85      	ldr	r3, [pc, #532]	; (80123ac <font_drawChar+0x800>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	460b      	mov	r3, r1
 801219e:	68b9      	ldr	r1, [r7, #8]
 80121a0:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects+recIdx;
 80121a2:	4b86      	ldr	r3, [pc, #536]	; (80123bc <font_drawChar+0x810>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	689a      	ldr	r2, [r3, #8]
 80121a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80121ac:	005b      	lsls	r3, r3, #1
 80121ae:	4413      	add	r3, r2
 80121b0:	627b      	str	r3, [r7, #36]	; 0x24
        int idx=0;
 80121b2:	2300      	movs	r3, #0
 80121b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while(idx<recNum) {
 80121b8:	e0c9      	b.n	801234e <font_drawChar+0x7a2>
          unsigned short v = *(rects+idx);
 80121ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121c2:	4413      	add	r3, r2
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	847b      	strh	r3, [r7, #34]	; 0x22
          xf = (v & 0x3f)-xmin;
 80121c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	4a7c      	ldr	r2, [pc, #496]	; (80123c4 <font_drawChar+0x818>)
 80121d4:	6013      	str	r3, [r2, #0]
          int ybg=0,xfCur=xf;
 80121d6:	2300      	movs	r3, #0
 80121d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80121dc:	4b79      	ldr	r3, [pc, #484]	; (80123c4 <font_drawChar+0x818>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	61fb      	str	r3, [r7, #28]
          while(xf==xfCur && idx<recNum) {
 80121e2:	e079      	b.n	80122d8 <font_drawChar+0x72c>
            v = *(rects+idx);
 80121e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80121e8:	005b      	lsls	r3, r3, #1
 80121ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121ec:	4413      	add	r3, r2
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	847b      	strh	r3, [r7, #34]	; 0x22
            yf = (v>>6) & 0x1f;
 80121f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121f4:	099b      	lsrs	r3, r3, #6
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	f003 031f 	and.w	r3, r3, #31
 80121fc:	4a72      	ldr	r2, [pc, #456]	; (80123c8 <font_drawChar+0x81c>)
 80121fe:	6013      	str	r3, [r2, #0]
            hf = ((v>>11) & 0x1f)+1;
 8012200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012202:	0adb      	lsrs	r3, r3, #11
 8012204:	b29b      	uxth	r3, r3
 8012206:	f003 031f 	and.w	r3, r3, #31
 801220a:	3301      	adds	r3, #1
 801220c:	4a6f      	ldr	r2, [pc, #444]	; (80123cc <font_drawChar+0x820>)
 801220e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8012210:	4b6d      	ldr	r3, [pc, #436]	; (80123c8 <font_drawChar+0x81c>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012218:	429a      	cmp	r2, r3
 801221a:	da21      	bge.n	8012260 <font_drawChar+0x6b4>
 801221c:	4b65      	ldr	r3, [pc, #404]	; (80123b4 <font_drawChar+0x808>)
 801221e:	681c      	ldr	r4, [r3, #0]
 8012220:	4b65      	ldr	r3, [pc, #404]	; (80123b8 <font_drawChar+0x80c>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	69fa      	ldr	r2, [r7, #28]
 8012226:	fb02 f203 	mul.w	r2, r2, r3
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	18d0      	adds	r0, r2, r3
 801222e:	4b64      	ldr	r3, [pc, #400]	; (80123c0 <font_drawChar+0x814>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012236:	fb02 f203 	mul.w	r2, r2, r3
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	18d1      	adds	r1, r2, r3
 801223e:	4b5e      	ldr	r3, [pc, #376]	; (80123b8 <font_drawChar+0x80c>)
 8012240:	681d      	ldr	r5, [r3, #0]
 8012242:	4b61      	ldr	r3, [pc, #388]	; (80123c8 <font_drawChar+0x81c>)
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801224a:	1ad3      	subs	r3, r2, r3
 801224c:	4a5c      	ldr	r2, [pc, #368]	; (80123c0 <font_drawChar+0x814>)
 801224e:	6812      	ldr	r2, [r2, #0]
 8012250:	fb02 f203 	mul.w	r2, r2, r3
 8012254:	4b55      	ldr	r3, [pc, #340]	; (80123ac <font_drawChar+0x800>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	4613      	mov	r3, r2
 801225c:	462a      	mov	r2, r5
 801225e:	47a0      	blx	r4
            ybg = yf+hf;
 8012260:	4b59      	ldr	r3, [pc, #356]	; (80123c8 <font_drawChar+0x81c>)
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	4b59      	ldr	r3, [pc, #356]	; (80123cc <font_drawChar+0x820>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4413      	add	r3, r2
 801226a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 801226e:	4b51      	ldr	r3, [pc, #324]	; (80123b4 <font_drawChar+0x808>)
 8012270:	681c      	ldr	r4, [r3, #0]
 8012272:	4b51      	ldr	r3, [pc, #324]	; (80123b8 <font_drawChar+0x80c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	69fa      	ldr	r2, [r7, #28]
 8012278:	fb02 f203 	mul.w	r2, r2, r3
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	18d0      	adds	r0, r2, r3
 8012280:	4b51      	ldr	r3, [pc, #324]	; (80123c8 <font_drawChar+0x81c>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a4e      	ldr	r2, [pc, #312]	; (80123c0 <font_drawChar+0x814>)
 8012286:	6812      	ldr	r2, [r2, #0]
 8012288:	fb02 f203 	mul.w	r2, r2, r3
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	18d1      	adds	r1, r2, r3
 8012290:	4b4f      	ldr	r3, [pc, #316]	; (80123d0 <font_drawChar+0x824>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	4b48      	ldr	r3, [pc, #288]	; (80123b8 <font_drawChar+0x80c>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	18d5      	adds	r5, r2, r3
 801229a:	4b4c      	ldr	r3, [pc, #304]	; (80123cc <font_drawChar+0x820>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4a48      	ldr	r2, [pc, #288]	; (80123c0 <font_drawChar+0x814>)
 80122a0:	6812      	ldr	r2, [r2, #0]
 80122a2:	fb02 f203 	mul.w	r2, r2, r3
 80122a6:	4b42      	ldr	r3, [pc, #264]	; (80123b0 <font_drawChar+0x804>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	4613      	mov	r3, r2
 80122ae:	462a      	mov	r2, r5
 80122b0:	47a0      	blx	r4
            idx++;
 80122b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80122b6:	3301      	adds	r3, #1
 80122b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            v = *(rects+idx);
 80122bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80122c0:	005b      	lsls	r3, r3, #1
 80122c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122c4:	4413      	add	r3, r2
 80122c6:	881b      	ldrh	r3, [r3, #0]
 80122c8:	847b      	strh	r3, [r7, #34]	; 0x22
            xf = (v & 0x3f)-xmin;
 80122ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	4a3b      	ldr	r2, [pc, #236]	; (80123c4 <font_drawChar+0x818>)
 80122d6:	6013      	str	r3, [r2, #0]
          while(xf==xfCur && idx<recNum) {
 80122d8:	4b3a      	ldr	r3, [pc, #232]	; (80123c4 <font_drawChar+0x818>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	69fa      	ldr	r2, [r7, #28]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d106      	bne.n	80122f0 <font_drawChar+0x744>
 80122e2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80122e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80122ea:	429a      	cmp	r2, r3
 80122ec:	f6ff af7a 	blt.w	80121e4 <font_drawChar+0x638>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 80122f0:	4b32      	ldr	r3, [pc, #200]	; (80123bc <font_drawChar+0x810>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	789b      	ldrb	r3, [r3, #2]
 80122f6:	461a      	mov	r2, r3
 80122f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80122fc:	4293      	cmp	r3, r2
 80122fe:	da26      	bge.n	801234e <font_drawChar+0x7a2>
 8012300:	4b2c      	ldr	r3, [pc, #176]	; (80123b4 <font_drawChar+0x808>)
 8012302:	681c      	ldr	r4, [r3, #0]
 8012304:	4b2c      	ldr	r3, [pc, #176]	; (80123b8 <font_drawChar+0x80c>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	69fa      	ldr	r2, [r7, #28]
 801230a:	fb02 f203 	mul.w	r2, r2, r3
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	18d0      	adds	r0, r2, r3
 8012312:	4b2b      	ldr	r3, [pc, #172]	; (80123c0 <font_drawChar+0x814>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801231a:	fb02 f203 	mul.w	r2, r2, r3
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	18d1      	adds	r1, r2, r3
 8012322:	4b2b      	ldr	r3, [pc, #172]	; (80123d0 <font_drawChar+0x824>)
 8012324:	681a      	ldr	r2, [r3, #0]
 8012326:	4b24      	ldr	r3, [pc, #144]	; (80123b8 <font_drawChar+0x80c>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	18d5      	adds	r5, r2, r3
 801232c:	4b23      	ldr	r3, [pc, #140]	; (80123bc <font_drawChar+0x810>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	789b      	ldrb	r3, [r3, #2]
 8012332:	461a      	mov	r2, r3
 8012334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	4a21      	ldr	r2, [pc, #132]	; (80123c0 <font_drawChar+0x814>)
 801233c:	6812      	ldr	r2, [r2, #0]
 801233e:	fb02 f203 	mul.w	r2, r2, r3
 8012342:	4b1a      	ldr	r3, [pc, #104]	; (80123ac <font_drawChar+0x800>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	4613      	mov	r3, r2
 801234a:	462a      	mov	r2, r5
 801234c:	47a0      	blx	r4
        while(idx<recNum) {
 801234e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012352:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012356:	429a      	cmp	r2, r3
 8012358:	f6ff af2f 	blt.w	80121ba <font_drawChar+0x60e>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 801235c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012360:	2b00      	cmp	r3, #0
 8012362:	f340 846b 	ble.w	8012c3c <font_drawChar+0x1090>
 8012366:	4b13      	ldr	r3, [pc, #76]	; (80123b4 <font_drawChar+0x808>)
 8012368:	681c      	ldr	r4, [r3, #0]
 801236a:	4b13      	ldr	r3, [pc, #76]	; (80123b8 <font_drawChar+0x80c>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012370:	fb02 f203 	mul.w	r2, r2, r3
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	18d0      	adds	r0, r2, r3
 8012378:	4b0f      	ldr	r3, [pc, #60]	; (80123b8 <font_drawChar+0x80c>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012380:	fb02 f203 	mul.w	r2, r2, r3
 8012384:	4b0d      	ldr	r3, [pc, #52]	; (80123bc <font_drawChar+0x810>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	789b      	ldrb	r3, [r3, #2]
 801238a:	4619      	mov	r1, r3
 801238c:	4b0c      	ldr	r3, [pc, #48]	; (80123c0 <font_drawChar+0x814>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	fb03 f101 	mul.w	r1, r3, r1
 8012394:	4b05      	ldr	r3, [pc, #20]	; (80123ac <font_drawChar+0x800>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	460b      	mov	r3, r1
 801239c:	68b9      	ldr	r1, [r7, #8]
 801239e:	47a0      	blx	r4
        yf = (v>>6) & 0x1f;
        hf = ((v>>11) & 0x1f)+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 80123a0:	f000 bc4c 	b.w	8012c3c <font_drawChar+0x1090>
      for(int i=0; i<recNum; i++) {
 80123a4:	2300      	movs	r3, #0
 80123a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80123aa:	e066      	b.n	801247a <font_drawChar+0x8ce>
 80123ac:	20002cbc 	.word	0x20002cbc
 80123b0:	20002cb8 	.word	0x20002cb8
 80123b4:	2001edb0 	.word	0x2001edb0
 80123b8:	20002cb0 	.word	0x20002cb0
 80123bc:	2001edb4 	.word	0x2001edb4
 80123c0:	20002cb4 	.word	0x20002cb4
 80123c4:	2001edb8 	.word	0x2001edb8
 80123c8:	2001edbc 	.word	0x2001edbc
 80123cc:	2001edc4 	.word	0x2001edc4
 80123d0:	2001edd4 	.word	0x2001edd4
        unsigned short *rects = (unsigned short*)rFont->rects;
 80123d4:	4b64      	ldr	r3, [pc, #400]	; (8012568 <font_drawChar+0x9bc>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	62fb      	str	r3, [r7, #44]	; 0x2c
        unsigned short v = (rects[i+recIdx]);
 80123dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80123e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80123e4:	4413      	add	r3, r2
 80123e6:	005b      	lsls	r3, r3, #1
 80123e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123ea:	4413      	add	r3, r2
 80123ec:	881b      	ldrh	r3, [r3, #0]
 80123ee:	857b      	strh	r3, [r7, #42]	; 0x2a
        xf = (v & 0x3f)-xmin;
 80123f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80123f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	4a5c      	ldr	r2, [pc, #368]	; (801256c <font_drawChar+0x9c0>)
 80123fc:	6013      	str	r3, [r2, #0]
        yf = (v>>6) & 0x1f;
 80123fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012400:	099b      	lsrs	r3, r3, #6
 8012402:	b29b      	uxth	r3, r3
 8012404:	f003 031f 	and.w	r3, r3, #31
 8012408:	4a59      	ldr	r2, [pc, #356]	; (8012570 <font_drawChar+0x9c4>)
 801240a:	6013      	str	r3, [r2, #0]
        hf = ((v>>11) & 0x1f)+1;
 801240c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801240e:	0adb      	lsrs	r3, r3, #11
 8012410:	b29b      	uxth	r3, r3
 8012412:	f003 031f 	and.w	r3, r3, #31
 8012416:	3301      	adds	r3, #1
 8012418:	4a56      	ldr	r2, [pc, #344]	; (8012574 <font_drawChar+0x9c8>)
 801241a:	6013      	str	r3, [r2, #0]
        wf = 1;
 801241c:	4b56      	ldr	r3, [pc, #344]	; (8012578 <font_drawChar+0x9cc>)
 801241e:	2201      	movs	r2, #1
 8012420:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8012422:	4b56      	ldr	r3, [pc, #344]	; (801257c <font_drawChar+0x9d0>)
 8012424:	681c      	ldr	r4, [r3, #0]
 8012426:	4b51      	ldr	r3, [pc, #324]	; (801256c <font_drawChar+0x9c0>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4a55      	ldr	r2, [pc, #340]	; (8012580 <font_drawChar+0x9d4>)
 801242c:	6812      	ldr	r2, [r2, #0]
 801242e:	fb02 f203 	mul.w	r2, r2, r3
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	18d0      	adds	r0, r2, r3
 8012436:	4b4e      	ldr	r3, [pc, #312]	; (8012570 <font_drawChar+0x9c4>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4a52      	ldr	r2, [pc, #328]	; (8012584 <font_drawChar+0x9d8>)
 801243c:	6812      	ldr	r2, [r2, #0]
 801243e:	fb02 f203 	mul.w	r2, r2, r3
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	18d1      	adds	r1, r2, r3
 8012446:	4b4c      	ldr	r3, [pc, #304]	; (8012578 <font_drawChar+0x9cc>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	4a4d      	ldr	r2, [pc, #308]	; (8012580 <font_drawChar+0x9d4>)
 801244c:	6812      	ldr	r2, [r2, #0]
 801244e:	fb02 f203 	mul.w	r2, r2, r3
 8012452:	4b4d      	ldr	r3, [pc, #308]	; (8012588 <font_drawChar+0x9dc>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	18d5      	adds	r5, r2, r3
 8012458:	4b46      	ldr	r3, [pc, #280]	; (8012574 <font_drawChar+0x9c8>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	4a49      	ldr	r2, [pc, #292]	; (8012584 <font_drawChar+0x9d8>)
 801245e:	6812      	ldr	r2, [r2, #0]
 8012460:	fb02 f203 	mul.w	r2, r2, r3
 8012464:	4b49      	ldr	r3, [pc, #292]	; (801258c <font_drawChar+0x9e0>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	9300      	str	r3, [sp, #0]
 801246a:	4613      	mov	r3, r2
 801246c:	462a      	mov	r2, r5
 801246e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8012470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012474:	3301      	adds	r3, #1
 8012476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801247a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801247e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012482:	429a      	cmp	r2, r3
 8012484:	dba6      	blt.n	80123d4 <font_drawChar+0x828>
      break;
 8012486:	e3d9      	b.n	8012c3c <font_drawChar+0x1090>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B:
      if(bg!=fg) {
 8012488:	4b41      	ldr	r3, [pc, #260]	; (8012590 <font_drawChar+0x9e4>)
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	4b3f      	ldr	r3, [pc, #252]	; (801258c <font_drawChar+0x9e0>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	429a      	cmp	r2, r3
 8012492:	f000 817e 	beq.w	8012792 <font_drawChar+0xbe6>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8012496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801249a:	2b00      	cmp	r3, #0
 801249c:	dd1d      	ble.n	80124da <font_drawChar+0x92e>
 801249e:	4b37      	ldr	r3, [pc, #220]	; (801257c <font_drawChar+0x9d0>)
 80124a0:	681c      	ldr	r4, [r3, #0]
 80124a2:	4b37      	ldr	r3, [pc, #220]	; (8012580 <font_drawChar+0x9d4>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80124aa:	fb02 f303 	mul.w	r3, r2, r3
 80124ae:	68fa      	ldr	r2, [r7, #12]
 80124b0:	1ad0      	subs	r0, r2, r3
 80124b2:	4b33      	ldr	r3, [pc, #204]	; (8012580 <font_drawChar+0x9d4>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80124ba:	fb02 f203 	mul.w	r2, r2, r3
 80124be:	4b2a      	ldr	r3, [pc, #168]	; (8012568 <font_drawChar+0x9bc>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	789b      	ldrb	r3, [r3, #2]
 80124c4:	4619      	mov	r1, r3
 80124c6:	4b2f      	ldr	r3, [pc, #188]	; (8012584 <font_drawChar+0x9d8>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	fb03 f101 	mul.w	r1, r3, r1
 80124ce:	4b30      	ldr	r3, [pc, #192]	; (8012590 <font_drawChar+0x9e4>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	9300      	str	r3, [sp, #0]
 80124d4:	460b      	mov	r3, r1
 80124d6:	68b9      	ldr	r1, [r7, #8]
 80124d8:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects;
 80124da:	4b23      	ldr	r3, [pc, #140]	; (8012568 <font_drawChar+0x9bc>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	689b      	ldr	r3, [r3, #8]
 80124e0:	633b      	str	r3, [r7, #48]	; 0x30
        int idx=0,yfCur=0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80124e8:	2300      	movs	r3, #0
 80124ea:	67fb      	str	r3, [r7, #124]	; 0x7c
        while(idx<recNum) {
 80124ec:	e127      	b.n	801273e <font_drawChar+0xb92>
          unsigned short v = *(rects+idx+recIdx);
 80124ee:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80124f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80124f6:	4413      	add	r3, r2
 80124f8:	005b      	lsls	r3, r3, #1
 80124fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124fc:	4413      	add	r3, r2
 80124fe:	881b      	ldrh	r3, [r3, #0]
 8012500:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
          yf = (v>>5) & 0x3f;
 8012504:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8012508:	095b      	lsrs	r3, r3, #5
 801250a:	b29b      	uxth	r3, r3
 801250c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012510:	4a17      	ldr	r2, [pc, #92]	; (8012570 <font_drawChar+0x9c4>)
 8012512:	6013      	str	r3, [r2, #0]
          if(yf-yfCur>1 /*|| (yf-yfCur>0 && yfCur==0)*/) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yf-yfCur)*sy, bg);
 8012514:	4b16      	ldr	r3, [pc, #88]	; (8012570 <font_drawChar+0x9c4>)
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	2b01      	cmp	r3, #1
 801251e:	dd1c      	ble.n	801255a <font_drawChar+0x9ae>
 8012520:	4b16      	ldr	r3, [pc, #88]	; (801257c <font_drawChar+0x9d0>)
 8012522:	681c      	ldr	r4, [r3, #0]
 8012524:	4b17      	ldr	r3, [pc, #92]	; (8012584 <font_drawChar+0x9d8>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801252a:	fb02 f203 	mul.w	r2, r2, r3
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	18d1      	adds	r1, r2, r3
 8012532:	4b13      	ldr	r3, [pc, #76]	; (8012580 <font_drawChar+0x9d4>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012538:	fb02 f003 	mul.w	r0, r2, r3
 801253c:	4b0c      	ldr	r3, [pc, #48]	; (8012570 <font_drawChar+0x9c4>)
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	4a0f      	ldr	r2, [pc, #60]	; (8012584 <font_drawChar+0x9d8>)
 8012546:	6812      	ldr	r2, [r2, #0]
 8012548:	fb02 f203 	mul.w	r2, r2, r3
 801254c:	4b10      	ldr	r3, [pc, #64]	; (8012590 <font_drawChar+0x9e4>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	4613      	mov	r3, r2
 8012554:	4602      	mov	r2, r0
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	47a0      	blx	r4
          //Serial.print(idx); Serial.print("  "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          yfCur=yf;
 801255a:	4b05      	ldr	r3, [pc, #20]	; (8012570 <font_drawChar+0x9c4>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	67fb      	str	r3, [r7, #124]	; 0x7c
          int xbg=0;
 8012560:	2300      	movs	r3, #0
 8012562:	677b      	str	r3, [r7, #116]	; 0x74
          while(yf==yfCur && idx<recNum) {
 8012564:	e08a      	b.n	801267c <font_drawChar+0xad0>
 8012566:	bf00      	nop
 8012568:	2001edb4 	.word	0x2001edb4
 801256c:	2001edb8 	.word	0x2001edb8
 8012570:	2001edbc 	.word	0x2001edbc
 8012574:	2001edc4 	.word	0x2001edc4
 8012578:	2001edc0 	.word	0x2001edc0
 801257c:	2001edb0 	.word	0x2001edb0
 8012580:	20002cb0 	.word	0x20002cb0
 8012584:	20002cb4 	.word	0x20002cb4
 8012588:	2001edd4 	.word	0x2001edd4
 801258c:	20002cb8 	.word	0x20002cb8
 8012590:	20002cbc 	.word	0x20002cbc
            xf = v & 0x1f;
 8012594:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8012598:	f003 031f 	and.w	r3, r3, #31
 801259c:	4a7e      	ldr	r2, [pc, #504]	; (8012798 <font_drawChar+0xbec>)
 801259e:	6013      	str	r3, [r2, #0]
            wf = ((v>>11) & 0x1f)+1;
 80125a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80125a4:	0adb      	lsrs	r3, r3, #11
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	f003 031f 	and.w	r3, r3, #31
 80125ac:	3301      	adds	r3, #1
 80125ae:	4a7b      	ldr	r2, [pc, #492]	; (801279c <font_drawChar+0xbf0>)
 80125b0:	6013      	str	r3, [r2, #0]
            if(xf>xbg) (*fillRectFun)(x+xbg*sx, y+yf*sy, (xf-xbg)*sx, 1*sy, bg);
 80125b2:	4b79      	ldr	r3, [pc, #484]	; (8012798 <font_drawChar+0xbec>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80125b8:	429a      	cmp	r2, r3
 80125ba:	da1f      	bge.n	80125fc <font_drawChar+0xa50>
 80125bc:	4b78      	ldr	r3, [pc, #480]	; (80127a0 <font_drawChar+0xbf4>)
 80125be:	681c      	ldr	r4, [r3, #0]
 80125c0:	4b78      	ldr	r3, [pc, #480]	; (80127a4 <font_drawChar+0xbf8>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80125c6:	fb02 f203 	mul.w	r2, r2, r3
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	18d0      	adds	r0, r2, r3
 80125ce:	4b76      	ldr	r3, [pc, #472]	; (80127a8 <font_drawChar+0xbfc>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	4a76      	ldr	r2, [pc, #472]	; (80127ac <font_drawChar+0xc00>)
 80125d4:	6812      	ldr	r2, [r2, #0]
 80125d6:	fb02 f203 	mul.w	r2, r2, r3
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	18d1      	adds	r1, r2, r3
 80125de:	4b6e      	ldr	r3, [pc, #440]	; (8012798 <font_drawChar+0xbec>)
 80125e0:	681a      	ldr	r2, [r3, #0]
 80125e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125e4:	1ad3      	subs	r3, r2, r3
 80125e6:	4a6f      	ldr	r2, [pc, #444]	; (80127a4 <font_drawChar+0xbf8>)
 80125e8:	6812      	ldr	r2, [r2, #0]
 80125ea:	fb02 f203 	mul.w	r2, r2, r3
 80125ee:	4b6f      	ldr	r3, [pc, #444]	; (80127ac <font_drawChar+0xc00>)
 80125f0:	681d      	ldr	r5, [r3, #0]
 80125f2:	4b6f      	ldr	r3, [pc, #444]	; (80127b0 <font_drawChar+0xc04>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	462b      	mov	r3, r5
 80125fa:	47a0      	blx	r4
            xbg = xf+wf;
 80125fc:	4b66      	ldr	r3, [pc, #408]	; (8012798 <font_drawChar+0xbec>)
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	4b66      	ldr	r3, [pc, #408]	; (801279c <font_drawChar+0xbf0>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	4413      	add	r3, r2
 8012606:	677b      	str	r3, [r7, #116]	; 0x74
            //if(idx==recNum-1) fg=0x07E0; else fg=0xffff;
            (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, 1*sy, fg);
 8012608:	4b65      	ldr	r3, [pc, #404]	; (80127a0 <font_drawChar+0xbf4>)
 801260a:	681c      	ldr	r4, [r3, #0]
 801260c:	4b62      	ldr	r3, [pc, #392]	; (8012798 <font_drawChar+0xbec>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4a64      	ldr	r2, [pc, #400]	; (80127a4 <font_drawChar+0xbf8>)
 8012612:	6812      	ldr	r2, [r2, #0]
 8012614:	fb02 f203 	mul.w	r2, r2, r3
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	18d0      	adds	r0, r2, r3
 801261c:	4b62      	ldr	r3, [pc, #392]	; (80127a8 <font_drawChar+0xbfc>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a62      	ldr	r2, [pc, #392]	; (80127ac <font_drawChar+0xc00>)
 8012622:	6812      	ldr	r2, [r2, #0]
 8012624:	fb02 f203 	mul.w	r2, r2, r3
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	18d1      	adds	r1, r2, r3
 801262c:	4b5b      	ldr	r3, [pc, #364]	; (801279c <font_drawChar+0xbf0>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4a5c      	ldr	r2, [pc, #368]	; (80127a4 <font_drawChar+0xbf8>)
 8012632:	6812      	ldr	r2, [r2, #0]
 8012634:	fb02 f203 	mul.w	r2, r2, r3
 8012638:	4b5e      	ldr	r3, [pc, #376]	; (80127b4 <font_drawChar+0xc08>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	441a      	add	r2, r3
 801263e:	4b5b      	ldr	r3, [pc, #364]	; (80127ac <font_drawChar+0xc00>)
 8012640:	681d      	ldr	r5, [r3, #0]
 8012642:	4b5d      	ldr	r3, [pc, #372]	; (80127b8 <font_drawChar+0xc0c>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	9300      	str	r3, [sp, #0]
 8012648:	462b      	mov	r3, r5
 801264a:	47a0      	blx	r4
            idx++;
 801264c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012650:	3301      	adds	r3, #1
 8012652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            v = *(rects+idx+recIdx);
 8012656:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801265a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801265e:	4413      	add	r3, r2
 8012660:	005b      	lsls	r3, r3, #1
 8012662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012664:	4413      	add	r3, r2
 8012666:	881b      	ldrh	r3, [r3, #0]
 8012668:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            yf = (v>>5) & 0x3f;
 801266c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8012670:	095b      	lsrs	r3, r3, #5
 8012672:	b29b      	uxth	r3, r3
 8012674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012678:	4a4b      	ldr	r2, [pc, #300]	; (80127a8 <font_drawChar+0xbfc>)
 801267a:	6013      	str	r3, [r2, #0]
          while(yf==yfCur && idx<recNum) {
 801267c:	4b4a      	ldr	r3, [pc, #296]	; (80127a8 <font_drawChar+0xbfc>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012682:	429a      	cmp	r2, r3
 8012684:	d105      	bne.n	8012692 <font_drawChar+0xae6>
 8012686:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801268a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801268e:	429a      	cmp	r2, r3
 8012690:	db80      	blt.n	8012594 <font_drawChar+0x9e8>
          }
          // last bg line
          if(xbg<chWd) (*fillRectFun)(x+xbg*sx, y+yfCur*sy, (chWd-xbg)*sx, 1*sy, bg);
 8012692:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012696:	429a      	cmp	r2, r3
 8012698:	da1d      	bge.n	80126d6 <font_drawChar+0xb2a>
 801269a:	4b41      	ldr	r3, [pc, #260]	; (80127a0 <font_drawChar+0xbf4>)
 801269c:	681c      	ldr	r4, [r3, #0]
 801269e:	4b41      	ldr	r3, [pc, #260]	; (80127a4 <font_drawChar+0xbf8>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80126a4:	fb02 f203 	mul.w	r2, r2, r3
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	18d0      	adds	r0, r2, r3
 80126ac:	4b3f      	ldr	r3, [pc, #252]	; (80127ac <font_drawChar+0xc00>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80126b2:	fb02 f203 	mul.w	r2, r2, r3
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	18d1      	adds	r1, r2, r3
 80126ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80126bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126be:	1ad3      	subs	r3, r2, r3
 80126c0:	4a38      	ldr	r2, [pc, #224]	; (80127a4 <font_drawChar+0xbf8>)
 80126c2:	6812      	ldr	r2, [r2, #0]
 80126c4:	fb02 f203 	mul.w	r2, r2, r3
 80126c8:	4b38      	ldr	r3, [pc, #224]	; (80127ac <font_drawChar+0xc00>)
 80126ca:	681d      	ldr	r5, [r3, #0]
 80126cc:	4b38      	ldr	r3, [pc, #224]	; (80127b0 <font_drawChar+0xc04>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	9300      	str	r3, [sp, #0]
 80126d2:	462b      	mov	r3, r5
 80126d4:	47a0      	blx	r4
          //Serial.print(idx); Serial.print(" ++ "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          if(idx==recNum-1 && yfCur<rFont->ht) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yfCur<rFont->ht-yfCur)*sy, bg);
 80126d6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80126da:	3b01      	subs	r3, #1
 80126dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d12c      	bne.n	801273e <font_drawChar+0xb92>
 80126e4:	4b35      	ldr	r3, [pc, #212]	; (80127bc <font_drawChar+0xc10>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	789b      	ldrb	r3, [r3, #2]
 80126ea:	461a      	mov	r2, r3
 80126ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126ee:	4293      	cmp	r3, r2
 80126f0:	da25      	bge.n	801273e <font_drawChar+0xb92>
 80126f2:	4b2b      	ldr	r3, [pc, #172]	; (80127a0 <font_drawChar+0xbf4>)
 80126f4:	681c      	ldr	r4, [r3, #0]
 80126f6:	4b2d      	ldr	r3, [pc, #180]	; (80127ac <font_drawChar+0xc00>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80126fc:	fb02 f203 	mul.w	r2, r2, r3
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	18d1      	adds	r1, r2, r3
 8012704:	4b27      	ldr	r3, [pc, #156]	; (80127a4 <font_drawChar+0xbf8>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801270a:	fb02 f003 	mul.w	r0, r2, r3
 801270e:	4b2b      	ldr	r3, [pc, #172]	; (80127bc <font_drawChar+0xc10>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	789b      	ldrb	r3, [r3, #2]
 8012714:	461a      	mov	r2, r3
 8012716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012718:	1ad3      	subs	r3, r2, r3
 801271a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801271c:	429a      	cmp	r2, r3
 801271e:	bfb4      	ite	lt
 8012720:	2301      	movlt	r3, #1
 8012722:	2300      	movge	r3, #0
 8012724:	b2db      	uxtb	r3, r3
 8012726:	461a      	mov	r2, r3
 8012728:	4b20      	ldr	r3, [pc, #128]	; (80127ac <font_drawChar+0xc00>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	fb03 f202 	mul.w	r2, r3, r2
 8012730:	4b1f      	ldr	r3, [pc, #124]	; (80127b0 <font_drawChar+0xc04>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	9300      	str	r3, [sp, #0]
 8012736:	4613      	mov	r3, r2
 8012738:	4602      	mov	r2, r0
 801273a:	68f8      	ldr	r0, [r7, #12]
 801273c:	47a0      	blx	r4
        while(idx<recNum) {
 801273e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012746:	429a      	cmp	r2, r3
 8012748:	f6ff aed1 	blt.w	80124ee <font_drawChar+0x942>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 801274c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012750:	2b00      	cmp	r3, #0
 8012752:	f340 8275 	ble.w	8012c40 <font_drawChar+0x1094>
 8012756:	4b12      	ldr	r3, [pc, #72]	; (80127a0 <font_drawChar+0xbf4>)
 8012758:	681c      	ldr	r4, [r3, #0]
 801275a:	4b12      	ldr	r3, [pc, #72]	; (80127a4 <font_drawChar+0xbf8>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012760:	fb02 f203 	mul.w	r2, r2, r3
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	18d0      	adds	r0, r2, r3
 8012768:	4b0e      	ldr	r3, [pc, #56]	; (80127a4 <font_drawChar+0xbf8>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012770:	fb02 f203 	mul.w	r2, r2, r3
 8012774:	4b11      	ldr	r3, [pc, #68]	; (80127bc <font_drawChar+0xc10>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	789b      	ldrb	r3, [r3, #2]
 801277a:	4619      	mov	r1, r3
 801277c:	4b0b      	ldr	r3, [pc, #44]	; (80127ac <font_drawChar+0xc00>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	fb03 f101 	mul.w	r1, r3, r1
 8012784:	4b0a      	ldr	r3, [pc, #40]	; (80127b0 <font_drawChar+0xc04>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	9300      	str	r3, [sp, #0]
 801278a:	460b      	mov	r3, r1
 801278c:	68b9      	ldr	r1, [r7, #8]
 801278e:	47a0      	blx	r4
        yf = (v>>5) & 0x3f;
        wf = ((v>>11) & 0x1f)+1;
        hf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8012790:	e256      	b.n	8012c40 <font_drawChar+0x1094>
      for(int i=0; i<recNum; i++) {
 8012792:	2300      	movs	r3, #0
 8012794:	673b      	str	r3, [r7, #112]	; 0x70
 8012796:	e063      	b.n	8012860 <font_drawChar+0xcb4>
 8012798:	2001edb8 	.word	0x2001edb8
 801279c:	2001edc0 	.word	0x2001edc0
 80127a0:	2001edb0 	.word	0x2001edb0
 80127a4:	20002cb0 	.word	0x20002cb0
 80127a8:	2001edbc 	.word	0x2001edbc
 80127ac:	20002cb4 	.word	0x20002cb4
 80127b0:	20002cbc 	.word	0x20002cbc
 80127b4:	2001edd4 	.word	0x2001edd4
 80127b8:	20002cb8 	.word	0x20002cb8
 80127bc:	2001edb4 	.word	0x2001edb4
        unsigned short *rects = (unsigned short*)rFont->rects;
 80127c0:	4b4c      	ldr	r3, [pc, #304]	; (80128f4 <font_drawChar+0xd48>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned short v = (rects[i+recIdx]);
 80127c8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80127cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127ce:	4413      	add	r3, r2
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127d4:	4413      	add	r3, r2
 80127d6:	881b      	ldrh	r3, [r3, #0]
 80127d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        xf = (v & 0x1f)-xmin;
 80127da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127dc:	f003 021f 	and.w	r2, r3, #31
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	1ad3      	subs	r3, r2, r3
 80127e4:	4a44      	ldr	r2, [pc, #272]	; (80128f8 <font_drawChar+0xd4c>)
 80127e6:	6013      	str	r3, [r2, #0]
        yf = (v>>5) & 0x3f;
 80127e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127ea:	095b      	lsrs	r3, r3, #5
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127f2:	4a42      	ldr	r2, [pc, #264]	; (80128fc <font_drawChar+0xd50>)
 80127f4:	6013      	str	r3, [r2, #0]
        wf = ((v>>11) & 0x1f)+1;
 80127f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127f8:	0adb      	lsrs	r3, r3, #11
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	f003 031f 	and.w	r3, r3, #31
 8012800:	3301      	adds	r3, #1
 8012802:	4a3f      	ldr	r2, [pc, #252]	; (8012900 <font_drawChar+0xd54>)
 8012804:	6013      	str	r3, [r2, #0]
        hf = 1;
 8012806:	4b3f      	ldr	r3, [pc, #252]	; (8012904 <font_drawChar+0xd58>)
 8012808:	2201      	movs	r2, #1
 801280a:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 801280c:	4b3e      	ldr	r3, [pc, #248]	; (8012908 <font_drawChar+0xd5c>)
 801280e:	681c      	ldr	r4, [r3, #0]
 8012810:	4b39      	ldr	r3, [pc, #228]	; (80128f8 <font_drawChar+0xd4c>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a3d      	ldr	r2, [pc, #244]	; (801290c <font_drawChar+0xd60>)
 8012816:	6812      	ldr	r2, [r2, #0]
 8012818:	fb02 f203 	mul.w	r2, r2, r3
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	18d0      	adds	r0, r2, r3
 8012820:	4b36      	ldr	r3, [pc, #216]	; (80128fc <font_drawChar+0xd50>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4a3a      	ldr	r2, [pc, #232]	; (8012910 <font_drawChar+0xd64>)
 8012826:	6812      	ldr	r2, [r2, #0]
 8012828:	fb02 f203 	mul.w	r2, r2, r3
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	18d1      	adds	r1, r2, r3
 8012830:	4b33      	ldr	r3, [pc, #204]	; (8012900 <font_drawChar+0xd54>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	4a35      	ldr	r2, [pc, #212]	; (801290c <font_drawChar+0xd60>)
 8012836:	6812      	ldr	r2, [r2, #0]
 8012838:	fb02 f203 	mul.w	r2, r2, r3
 801283c:	4b35      	ldr	r3, [pc, #212]	; (8012914 <font_drawChar+0xd68>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	18d5      	adds	r5, r2, r3
 8012842:	4b30      	ldr	r3, [pc, #192]	; (8012904 <font_drawChar+0xd58>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	4a32      	ldr	r2, [pc, #200]	; (8012910 <font_drawChar+0xd64>)
 8012848:	6812      	ldr	r2, [r2, #0]
 801284a:	fb02 f203 	mul.w	r2, r2, r3
 801284e:	4b32      	ldr	r3, [pc, #200]	; (8012918 <font_drawChar+0xd6c>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	4613      	mov	r3, r2
 8012856:	462a      	mov	r2, r5
 8012858:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 801285a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801285c:	3301      	adds	r3, #1
 801285e:	673b      	str	r3, [r7, #112]	; 0x70
 8012860:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012864:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012866:	429a      	cmp	r2, r3
 8012868:	dbaa      	blt.n	80127c0 <font_drawChar+0xc14>
      break;
 801286a:	e1e9      	b.n	8012c40 <font_drawChar+0x1094>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B:
      if(bg!=fg) {
 801286c:	4b2b      	ldr	r3, [pc, #172]	; (801291c <font_drawChar+0xd70>)
 801286e:	681a      	ldr	r2, [r3, #0]
 8012870:	4b29      	ldr	r3, [pc, #164]	; (8012918 <font_drawChar+0xd6c>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	429a      	cmp	r2, r3
 8012876:	f000 811f 	beq.w	8012ab8 <font_drawChar+0xf0c>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 801287a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801287e:	2b00      	cmp	r3, #0
 8012880:	dd1d      	ble.n	80128be <font_drawChar+0xd12>
 8012882:	4b21      	ldr	r3, [pc, #132]	; (8012908 <font_drawChar+0xd5c>)
 8012884:	681c      	ldr	r4, [r3, #0]
 8012886:	4b21      	ldr	r3, [pc, #132]	; (801290c <font_drawChar+0xd60>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801288e:	fb02 f303 	mul.w	r3, r2, r3
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	1ad0      	subs	r0, r2, r3
 8012896:	4b1d      	ldr	r3, [pc, #116]	; (801290c <font_drawChar+0xd60>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801289e:	fb02 f203 	mul.w	r2, r2, r3
 80128a2:	4b14      	ldr	r3, [pc, #80]	; (80128f4 <font_drawChar+0xd48>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	789b      	ldrb	r3, [r3, #2]
 80128a8:	4619      	mov	r1, r3
 80128aa:	4b19      	ldr	r3, [pc, #100]	; (8012910 <font_drawChar+0xd64>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	fb03 f101 	mul.w	r1, r3, r1
 80128b2:	4b1a      	ldr	r3, [pc, #104]	; (801291c <font_drawChar+0xd70>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	9300      	str	r3, [sp, #0]
 80128b8:	460b      	mov	r3, r1
 80128ba:	68b9      	ldr	r1, [r7, #8]
 80128bc:	47a0      	blx	r4
        unsigned char *rects = (unsigned char*)rFont->rects + recIdx*3;
 80128be:	4b0d      	ldr	r3, [pc, #52]	; (80128f4 <font_drawChar+0xd48>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	6899      	ldr	r1, [r3, #8]
 80128c4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80128c8:	4613      	mov	r3, r2
 80128ca:	005b      	lsls	r3, r3, #1
 80128cc:	4413      	add	r3, r2
 80128ce:	440b      	add	r3, r1
 80128d0:	647b      	str	r3, [r7, #68]	; 0x44
        int idx=0;
 80128d2:	2300      	movs	r3, #0
 80128d4:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(idx<recNum*3) {
 80128d6:	e0c3      	b.n	8012a60 <font_drawChar+0xeb4>
          xf = *(rects+idx+0);
 80128d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128dc:	4413      	add	r3, r2
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	461a      	mov	r2, r3
 80128e2:	4b05      	ldr	r3, [pc, #20]	; (80128f8 <font_drawChar+0xd4c>)
 80128e4:	601a      	str	r2, [r3, #0]
          int ybg=0,xfCur=xf;
 80128e6:	2300      	movs	r3, #0
 80128e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80128ea:	4b03      	ldr	r3, [pc, #12]	; (80128f8 <font_drawChar+0xd4c>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	643b      	str	r3, [r7, #64]	; 0x40
          while(xf==xfCur && idx<recNum*3) {
 80128f0:	e07d      	b.n	80129ee <font_drawChar+0xe42>
 80128f2:	bf00      	nop
 80128f4:	2001edb4 	.word	0x2001edb4
 80128f8:	2001edb8 	.word	0x2001edb8
 80128fc:	2001edbc 	.word	0x2001edbc
 8012900:	2001edc0 	.word	0x2001edc0
 8012904:	2001edc4 	.word	0x2001edc4
 8012908:	2001edb0 	.word	0x2001edb0
 801290c:	20002cb0 	.word	0x20002cb0
 8012910:	20002cb4 	.word	0x20002cb4
 8012914:	2001edd4 	.word	0x2001edd4
 8012918:	20002cb8 	.word	0x20002cb8
 801291c:	20002cbc 	.word	0x20002cbc
            yf = *(rects+idx+1);
 8012920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012922:	3301      	adds	r3, #1
 8012924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012926:	4413      	add	r3, r2
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	461a      	mov	r2, r3
 801292c:	4b8e      	ldr	r3, [pc, #568]	; (8012b68 <font_drawChar+0xfbc>)
 801292e:	601a      	str	r2, [r3, #0]
            hf = *(rects+idx+2)+1;
 8012930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012932:	3302      	adds	r3, #2
 8012934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012936:	4413      	add	r3, r2
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	3301      	adds	r3, #1
 801293c:	4a8b      	ldr	r2, [pc, #556]	; (8012b6c <font_drawChar+0xfc0>)
 801293e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8012940:	4b89      	ldr	r3, [pc, #548]	; (8012b68 <font_drawChar+0xfbc>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012946:	429a      	cmp	r2, r3
 8012948:	da1f      	bge.n	801298a <font_drawChar+0xdde>
 801294a:	4b89      	ldr	r3, [pc, #548]	; (8012b70 <font_drawChar+0xfc4>)
 801294c:	681c      	ldr	r4, [r3, #0]
 801294e:	4b89      	ldr	r3, [pc, #548]	; (8012b74 <font_drawChar+0xfc8>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012954:	fb02 f203 	mul.w	r2, r2, r3
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	18d0      	adds	r0, r2, r3
 801295c:	4b86      	ldr	r3, [pc, #536]	; (8012b78 <font_drawChar+0xfcc>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012962:	fb02 f203 	mul.w	r2, r2, r3
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	18d1      	adds	r1, r2, r3
 801296a:	4b82      	ldr	r3, [pc, #520]	; (8012b74 <font_drawChar+0xfc8>)
 801296c:	681d      	ldr	r5, [r3, #0]
 801296e:	4b7e      	ldr	r3, [pc, #504]	; (8012b68 <font_drawChar+0xfbc>)
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012974:	1ad3      	subs	r3, r2, r3
 8012976:	4a80      	ldr	r2, [pc, #512]	; (8012b78 <font_drawChar+0xfcc>)
 8012978:	6812      	ldr	r2, [r2, #0]
 801297a:	fb02 f203 	mul.w	r2, r2, r3
 801297e:	4b7f      	ldr	r3, [pc, #508]	; (8012b7c <font_drawChar+0xfd0>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	4613      	mov	r3, r2
 8012986:	462a      	mov	r2, r5
 8012988:	47a0      	blx	r4
            ybg = yf+hf;
 801298a:	4b77      	ldr	r3, [pc, #476]	; (8012b68 <font_drawChar+0xfbc>)
 801298c:	681a      	ldr	r2, [r3, #0]
 801298e:	4b77      	ldr	r3, [pc, #476]	; (8012b6c <font_drawChar+0xfc0>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4413      	add	r3, r2
 8012994:	66bb      	str	r3, [r7, #104]	; 0x68
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 8012996:	4b76      	ldr	r3, [pc, #472]	; (8012b70 <font_drawChar+0xfc4>)
 8012998:	681c      	ldr	r4, [r3, #0]
 801299a:	4b76      	ldr	r3, [pc, #472]	; (8012b74 <font_drawChar+0xfc8>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129a0:	fb02 f203 	mul.w	r2, r2, r3
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	18d0      	adds	r0, r2, r3
 80129a8:	4b6f      	ldr	r3, [pc, #444]	; (8012b68 <font_drawChar+0xfbc>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4a72      	ldr	r2, [pc, #456]	; (8012b78 <font_drawChar+0xfcc>)
 80129ae:	6812      	ldr	r2, [r2, #0]
 80129b0:	fb02 f203 	mul.w	r2, r2, r3
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	18d1      	adds	r1, r2, r3
 80129b8:	4b71      	ldr	r3, [pc, #452]	; (8012b80 <font_drawChar+0xfd4>)
 80129ba:	681a      	ldr	r2, [r3, #0]
 80129bc:	4b6d      	ldr	r3, [pc, #436]	; (8012b74 <font_drawChar+0xfc8>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	18d5      	adds	r5, r2, r3
 80129c2:	4b6a      	ldr	r3, [pc, #424]	; (8012b6c <font_drawChar+0xfc0>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4a6c      	ldr	r2, [pc, #432]	; (8012b78 <font_drawChar+0xfcc>)
 80129c8:	6812      	ldr	r2, [r2, #0]
 80129ca:	fb02 f203 	mul.w	r2, r2, r3
 80129ce:	4b6d      	ldr	r3, [pc, #436]	; (8012b84 <font_drawChar+0xfd8>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	4613      	mov	r3, r2
 80129d6:	462a      	mov	r2, r5
 80129d8:	47a0      	blx	r4
            idx += 3;
 80129da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129dc:	3303      	adds	r3, #3
 80129de:	66fb      	str	r3, [r7, #108]	; 0x6c
            xf = *(rects+idx+0);
 80129e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129e4:	4413      	add	r3, r2
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	461a      	mov	r2, r3
 80129ea:	4b67      	ldr	r3, [pc, #412]	; (8012b88 <font_drawChar+0xfdc>)
 80129ec:	601a      	str	r2, [r3, #0]
          while(xf==xfCur && idx<recNum*3) {
 80129ee:	4b66      	ldr	r3, [pc, #408]	; (8012b88 <font_drawChar+0xfdc>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d107      	bne.n	8012a08 <font_drawChar+0xe5c>
 80129f8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80129fc:	4613      	mov	r3, r2
 80129fe:	005b      	lsls	r3, r3, #1
 8012a00:	4413      	add	r3, r2
 8012a02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a04:	429a      	cmp	r2, r3
 8012a06:	db8b      	blt.n	8012920 <font_drawChar+0xd74>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 8012a08:	4b60      	ldr	r3, [pc, #384]	; (8012b8c <font_drawChar+0xfe0>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	789b      	ldrb	r3, [r3, #2]
 8012a0e:	461a      	mov	r2, r3
 8012a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a12:	4293      	cmp	r3, r2
 8012a14:	da24      	bge.n	8012a60 <font_drawChar+0xeb4>
 8012a16:	4b56      	ldr	r3, [pc, #344]	; (8012b70 <font_drawChar+0xfc4>)
 8012a18:	681c      	ldr	r4, [r3, #0]
 8012a1a:	4b56      	ldr	r3, [pc, #344]	; (8012b74 <font_drawChar+0xfc8>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a20:	fb02 f203 	mul.w	r2, r2, r3
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	18d0      	adds	r0, r2, r3
 8012a28:	4b53      	ldr	r3, [pc, #332]	; (8012b78 <font_drawChar+0xfcc>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012a2e:	fb02 f203 	mul.w	r2, r2, r3
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	18d1      	adds	r1, r2, r3
 8012a36:	4b52      	ldr	r3, [pc, #328]	; (8012b80 <font_drawChar+0xfd4>)
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	4b4e      	ldr	r3, [pc, #312]	; (8012b74 <font_drawChar+0xfc8>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	18d5      	adds	r5, r2, r3
 8012a40:	4b52      	ldr	r3, [pc, #328]	; (8012b8c <font_drawChar+0xfe0>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	789b      	ldrb	r3, [r3, #2]
 8012a46:	461a      	mov	r2, r3
 8012a48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a4a:	1ad3      	subs	r3, r2, r3
 8012a4c:	4a4a      	ldr	r2, [pc, #296]	; (8012b78 <font_drawChar+0xfcc>)
 8012a4e:	6812      	ldr	r2, [r2, #0]
 8012a50:	fb02 f203 	mul.w	r2, r2, r3
 8012a54:	4b49      	ldr	r3, [pc, #292]	; (8012b7c <font_drawChar+0xfd0>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	462a      	mov	r2, r5
 8012a5e:	47a0      	blx	r4
        while(idx<recNum*3) {
 8012a60:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8012a64:	4613      	mov	r3, r2
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	4413      	add	r3, r2
 8012a6a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	f6ff af33 	blt.w	80128d8 <font_drawChar+0xd2c>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8012a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f340 80e4 	ble.w	8012c44 <font_drawChar+0x1098>
 8012a7c:	4b3c      	ldr	r3, [pc, #240]	; (8012b70 <font_drawChar+0xfc4>)
 8012a7e:	681c      	ldr	r4, [r3, #0]
 8012a80:	4b3c      	ldr	r3, [pc, #240]	; (8012b74 <font_drawChar+0xfc8>)
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a86:	fb02 f203 	mul.w	r2, r2, r3
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	18d0      	adds	r0, r2, r3
 8012a8e:	4b39      	ldr	r3, [pc, #228]	; (8012b74 <font_drawChar+0xfc8>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012a96:	fb02 f203 	mul.w	r2, r2, r3
 8012a9a:	4b3c      	ldr	r3, [pc, #240]	; (8012b8c <font_drawChar+0xfe0>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	789b      	ldrb	r3, [r3, #2]
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4b35      	ldr	r3, [pc, #212]	; (8012b78 <font_drawChar+0xfcc>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	fb03 f101 	mul.w	r1, r3, r1
 8012aaa:	4b34      	ldr	r3, [pc, #208]	; (8012b7c <font_drawChar+0xfd0>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	68b9      	ldr	r1, [r7, #8]
 8012ab4:	47a0      	blx	r4
        yf = (rects[1]);
        hf = (rects[2])+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8012ab6:	e0c5      	b.n	8012c44 <font_drawChar+0x1098>
      for(int i=0; i<recNum; i++) {
 8012ab8:	2300      	movs	r3, #0
 8012aba:	667b      	str	r3, [r7, #100]	; 0x64
 8012abc:	e04b      	b.n	8012b56 <font_drawChar+0xfaa>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8012abe:	4b33      	ldr	r3, [pc, #204]	; (8012b8c <font_drawChar+0xfe0>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	6899      	ldr	r1, [r3, #8]
 8012ac4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8012ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012aca:	441a      	add	r2, r3
 8012acc:	4613      	mov	r3, r2
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	4413      	add	r3, r2
 8012ad2:	440b      	add	r3, r1
 8012ad4:	64bb      	str	r3, [r7, #72]	; 0x48
        xf = (rects[0])-xmin;
 8012ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	461a      	mov	r2, r3
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	4a29      	ldr	r2, [pc, #164]	; (8012b88 <font_drawChar+0xfdc>)
 8012ae2:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 8012ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	461a      	mov	r2, r3
 8012aec:	4b1e      	ldr	r3, [pc, #120]	; (8012b68 <font_drawChar+0xfbc>)
 8012aee:	601a      	str	r2, [r3, #0]
        hf = (rects[2])+1;
 8012af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012af2:	3302      	adds	r3, #2
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	3301      	adds	r3, #1
 8012af8:	4a1c      	ldr	r2, [pc, #112]	; (8012b6c <font_drawChar+0xfc0>)
 8012afa:	6013      	str	r3, [r2, #0]
        wf = 1;
 8012afc:	4b24      	ldr	r3, [pc, #144]	; (8012b90 <font_drawChar+0xfe4>)
 8012afe:	2201      	movs	r2, #1
 8012b00:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8012b02:	4b1b      	ldr	r3, [pc, #108]	; (8012b70 <font_drawChar+0xfc4>)
 8012b04:	681c      	ldr	r4, [r3, #0]
 8012b06:	4b20      	ldr	r3, [pc, #128]	; (8012b88 <font_drawChar+0xfdc>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4a1a      	ldr	r2, [pc, #104]	; (8012b74 <font_drawChar+0xfc8>)
 8012b0c:	6812      	ldr	r2, [r2, #0]
 8012b0e:	fb02 f203 	mul.w	r2, r2, r3
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	18d0      	adds	r0, r2, r3
 8012b16:	4b14      	ldr	r3, [pc, #80]	; (8012b68 <font_drawChar+0xfbc>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4a17      	ldr	r2, [pc, #92]	; (8012b78 <font_drawChar+0xfcc>)
 8012b1c:	6812      	ldr	r2, [r2, #0]
 8012b1e:	fb02 f203 	mul.w	r2, r2, r3
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	18d1      	adds	r1, r2, r3
 8012b26:	4b1a      	ldr	r3, [pc, #104]	; (8012b90 <font_drawChar+0xfe4>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	4a12      	ldr	r2, [pc, #72]	; (8012b74 <font_drawChar+0xfc8>)
 8012b2c:	6812      	ldr	r2, [r2, #0]
 8012b2e:	fb02 f203 	mul.w	r2, r2, r3
 8012b32:	4b13      	ldr	r3, [pc, #76]	; (8012b80 <font_drawChar+0xfd4>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	18d5      	adds	r5, r2, r3
 8012b38:	4b0c      	ldr	r3, [pc, #48]	; (8012b6c <font_drawChar+0xfc0>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4a0e      	ldr	r2, [pc, #56]	; (8012b78 <font_drawChar+0xfcc>)
 8012b3e:	6812      	ldr	r2, [r2, #0]
 8012b40:	fb02 f203 	mul.w	r2, r2, r3
 8012b44:	4b0f      	ldr	r3, [pc, #60]	; (8012b84 <font_drawChar+0xfd8>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	9300      	str	r3, [sp, #0]
 8012b4a:	4613      	mov	r3, r2
 8012b4c:	462a      	mov	r2, r5
 8012b4e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8012b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b52:	3301      	adds	r3, #1
 8012b54:	667b      	str	r3, [r7, #100]	; 0x64
 8012b56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012b5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	dbae      	blt.n	8012abe <font_drawChar+0xf12>
      break;
 8012b60:	e070      	b.n	8012c44 <font_drawChar+0x1098>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B:
      for(int i=0; i<recNum; i++) {
 8012b62:	2300      	movs	r3, #0
 8012b64:	663b      	str	r3, [r7, #96]	; 0x60
 8012b66:	e061      	b.n	8012c2c <font_drawChar+0x1080>
 8012b68:	2001edbc 	.word	0x2001edbc
 8012b6c:	2001edc4 	.word	0x2001edc4
 8012b70:	2001edb0 	.word	0x2001edb0
 8012b74:	20002cb0 	.word	0x20002cb0
 8012b78:	20002cb4 	.word	0x20002cb4
 8012b7c:	20002cbc 	.word	0x20002cbc
 8012b80:	2001edd4 	.word	0x2001edd4
 8012b84:	20002cb8 	.word	0x20002cb8
 8012b88:	2001edb8 	.word	0x2001edb8
 8012b8c:	2001edb4 	.word	0x2001edb4
 8012b90:	2001edc0 	.word	0x2001edc0
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8012b94:	4b32      	ldr	r3, [pc, #200]	; (8012c60 <font_drawChar+0x10b4>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	6899      	ldr	r1, [r3, #8]
 8012b9a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8012b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ba0:	441a      	add	r2, r3
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	005b      	lsls	r3, r3, #1
 8012ba6:	4413      	add	r3, r2
 8012ba8:	440b      	add	r3, r1
 8012baa:	64fb      	str	r3, [r7, #76]	; 0x4c
        xf = (rects[0])-xmin;
 8012bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	1ad3      	subs	r3, r2, r3
 8012bb6:	4a2b      	ldr	r2, [pc, #172]	; (8012c64 <font_drawChar+0x10b8>)
 8012bb8:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 8012bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	4b29      	ldr	r3, [pc, #164]	; (8012c68 <font_drawChar+0x10bc>)
 8012bc4:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 8012bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bc8:	3302      	adds	r3, #2
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	3301      	adds	r3, #1
 8012bce:	4a27      	ldr	r2, [pc, #156]	; (8012c6c <font_drawChar+0x10c0>)
 8012bd0:	6013      	str	r3, [r2, #0]
        hf = 1;
 8012bd2:	4b27      	ldr	r3, [pc, #156]	; (8012c70 <font_drawChar+0x10c4>)
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8012bd8:	4b26      	ldr	r3, [pc, #152]	; (8012c74 <font_drawChar+0x10c8>)
 8012bda:	681c      	ldr	r4, [r3, #0]
 8012bdc:	4b21      	ldr	r3, [pc, #132]	; (8012c64 <font_drawChar+0x10b8>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4a25      	ldr	r2, [pc, #148]	; (8012c78 <font_drawChar+0x10cc>)
 8012be2:	6812      	ldr	r2, [r2, #0]
 8012be4:	fb02 f203 	mul.w	r2, r2, r3
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	18d0      	adds	r0, r2, r3
 8012bec:	4b1e      	ldr	r3, [pc, #120]	; (8012c68 <font_drawChar+0x10bc>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4a22      	ldr	r2, [pc, #136]	; (8012c7c <font_drawChar+0x10d0>)
 8012bf2:	6812      	ldr	r2, [r2, #0]
 8012bf4:	fb02 f203 	mul.w	r2, r2, r3
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	18d1      	adds	r1, r2, r3
 8012bfc:	4b1b      	ldr	r3, [pc, #108]	; (8012c6c <font_drawChar+0x10c0>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a1d      	ldr	r2, [pc, #116]	; (8012c78 <font_drawChar+0x10cc>)
 8012c02:	6812      	ldr	r2, [r2, #0]
 8012c04:	fb02 f203 	mul.w	r2, r2, r3
 8012c08:	4b1d      	ldr	r3, [pc, #116]	; (8012c80 <font_drawChar+0x10d4>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	18d5      	adds	r5, r2, r3
 8012c0e:	4b18      	ldr	r3, [pc, #96]	; (8012c70 <font_drawChar+0x10c4>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	4a1a      	ldr	r2, [pc, #104]	; (8012c7c <font_drawChar+0x10d0>)
 8012c14:	6812      	ldr	r2, [r2, #0]
 8012c16:	fb02 f203 	mul.w	r2, r2, r3
 8012c1a:	4b1a      	ldr	r3, [pc, #104]	; (8012c84 <font_drawChar+0x10d8>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	9300      	str	r3, [sp, #0]
 8012c20:	4613      	mov	r3, r2
 8012c22:	462a      	mov	r2, r5
 8012c24:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8012c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c28:	3301      	adds	r3, #1
 8012c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8012c2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012c32:	429a      	cmp	r2, r3
 8012c34:	dbae      	blt.n	8012b94 <font_drawChar+0xfe8>
      }
      break;
 8012c36:	e006      	b.n	8012c46 <font_drawChar+0x109a>
    default: break;
 8012c38:	bf00      	nop
 8012c3a:	e004      	b.n	8012c46 <font_drawChar+0x109a>
      break;
 8012c3c:	bf00      	nop
 8012c3e:	e002      	b.n	8012c46 <font_drawChar+0x109a>
      break;
 8012c40:	bf00      	nop
 8012c42:	e000      	b.n	8012c46 <font_drawChar+0x109a>
      break;
 8012c44:	bf00      	nop
#endif
  }
  return (wd+bold)*sx;
 8012c46:	4b0e      	ldr	r3, [pc, #56]	; (8012c80 <font_drawChar+0x10d4>)
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012c4e:	4413      	add	r3, r2
 8012c50:	4a09      	ldr	r2, [pc, #36]	; (8012c78 <font_drawChar+0x10cc>)
 8012c52:	6812      	ldr	r2, [r2, #0]
 8012c54:	fb02 f303 	mul.w	r3, r2, r3
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	37a8      	adds	r7, #168	; 0xa8
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8012c60:	2001edb4 	.word	0x2001edb4
 8012c64:	2001edb8 	.word	0x2001edb8
 8012c68:	2001edbc 	.word	0x2001edbc
 8012c6c:	2001edc0 	.word	0x2001edc0
 8012c70:	2001edc4 	.word	0x2001edc4
 8012c74:	2001edb0 	.word	0x2001edb0
 8012c78:	20002cb0 	.word	0x20002cb0
 8012c7c:	20002cb4 	.word	0x20002cb4
 8012c80:	2001edd4 	.word	0x2001edd4
 8012c84:	20002cb8 	.word	0x20002cb8

08012c88 <font_strWidth>:

// ----------------------------------------------------------------
int font_strWidth(const char *str)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  int wd = 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	60fb      	str	r3, [r7, #12]
  while (*str) wd += font_charWidth(*str++);
 8012c94:	e00a      	b.n	8012cac <font_strWidth+0x24>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	1c5a      	adds	r2, r3, #1
 8012c9a:	607a      	str	r2, [r7, #4]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7fe ff16 	bl	8011ad0 <font_charWidth>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	4413      	add	r3, r2
 8012caa:	60fb      	str	r3, [r7, #12]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d1f0      	bne.n	8012c96 <font_strWidth+0xe>
  return wd;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
	...

08012cc0 <font_printf>:

static char printfbuffer[512];

int font_printf(int xpos, int ypos, const char *str, ...)
{
 8012cc0:	b40c      	push	{r2, r3}
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b084      	sub	sp, #16
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
 8012cca:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, str);
 8012ccc:	f107 031c 	add.w	r3, r7, #28
 8012cd0:	60fb      	str	r3, [r7, #12]
  vsnprintf(printfbuffer, sizeof(printfbuffer), str, args);
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	69ba      	ldr	r2, [r7, #24]
 8012cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012cda:	4808      	ldr	r0, [pc, #32]	; (8012cfc <font_printf+0x3c>)
 8012cdc:	f001 fe1e 	bl	801491c <vsniprintf>
  va_end(args);
  return font_printStr(xpos, ypos,printfbuffer);
 8012ce0:	4a06      	ldr	r2, [pc, #24]	; (8012cfc <font_printf+0x3c>)
 8012ce2:	6839      	ldr	r1, [r7, #0]
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f000 f80b 	bl	8012d00 <font_printStr>
 8012cea:	4603      	mov	r3, r0
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3710      	adds	r7, #16
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012cf6:	b002      	add	sp, #8
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop
 8012cfc:	2001ede0 	.word	0x2001ede0

08012d00 <font_printStr>:

// ----------------------------------------------------------------
int font_printStr(int xpos, int ypos, const char *str)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b08a      	sub	sp, #40	; 0x28
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	607a      	str	r2, [r7, #4]
  unsigned char ch;
  int stl, row;
  int x = xpos;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	627b      	str	r3, [r7, #36]	; 0x24
  int y = ypos;
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	623b      	str	r3, [r7, #32]
  int wd = font_strWidth(str);
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f7ff ffb7 	bl	8012c88 <font_strWidth>
 8012d1a:	61f8      	str	r0, [r7, #28]

  //fillRectFun(xpos, ypos, wd, font_getHeight(), 0);

  if(x < 0)
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	da04      	bge.n	8012d2c <font_printStr+0x2c>
  {
    x = -x - wd;
 8012d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d24:	425a      	negs	r2, r3
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(x == 0)
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d108      	bne.n	8012d44 <font_printStr+0x44>
    x = (scrWd - wd) / 2;
 8012d32:	4b25      	ldr	r3, [pc, #148]	; (8012dc8 <font_printStr+0xc8>)
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	69fb      	ldr	r3, [r7, #28]
 8012d38:	1ad3      	subs	r3, r2, r3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	da00      	bge.n	8012d40 <font_printStr+0x40>
 8012d3e:	3301      	adds	r3, #1
 8012d40:	105b      	asrs	r3, r3, #1
 8012d42:	627b      	str	r3, [r7, #36]	; 0x24

  if(x<0) x = 0; // left
 8012d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	da34      	bge.n	8012db4 <font_printStr+0xb4>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	627b      	str	r3, [r7, #36]	; 0x24

  while(*str) {
 8012d4e:	e031      	b.n	8012db4 <font_printStr+0xb4>
    char ch = *str++;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	1c5a      	adds	r2, r3, #1
 8012d54:	607a      	str	r2, [r7, #4]
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	76fb      	strb	r3, [r7, #27]
    int wd = font_drawChar(x,y,ch);
 8012d5a:	7efb      	ldrb	r3, [r7, #27]
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	6a39      	ldr	r1, [r7, #32]
 8012d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d62:	f7fe ff23 	bl	8011bac <font_drawChar>
 8012d66:	6178      	str	r0, [r7, #20]
    x+=wd;
 8012d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	627b      	str	r3, [r7, #36]	; 0x24
    if((cr && x>=scrWd) || ch==10) { 
 8012d70:	4b16      	ldr	r3, [pc, #88]	; (8012dcc <font_printStr+0xcc>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d004      	beq.n	8012d82 <font_printStr+0x82>
 8012d78:	4b13      	ldr	r3, [pc, #76]	; (8012dc8 <font_printStr+0xc8>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	da02      	bge.n	8012d88 <font_printStr+0x88>
 8012d82:	7efb      	ldrb	r3, [r7, #27]
 8012d84:	2b0a      	cmp	r3, #10
 8012d86:	d115      	bne.n	8012db4 <font_printStr+0xb4>
      x = cr ? 0 : xpos; 
 8012d88:	4b10      	ldr	r3, [pc, #64]	; (8012dcc <font_printStr+0xcc>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d101      	bne.n	8012d94 <font_printStr+0x94>
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	e000      	b.n	8012d96 <font_printStr+0x96>
 8012d94:	2300      	movs	r3, #0
 8012d96:	627b      	str	r3, [r7, #36]	; 0x24
      y += rFont->ht * sy + spacingY; 
 8012d98:	4b0d      	ldr	r3, [pc, #52]	; (8012dd0 <font_printStr+0xd0>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	789b      	ldrb	r3, [r3, #2]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	4b0c      	ldr	r3, [pc, #48]	; (8012dd4 <font_printStr+0xd4>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	fb03 f202 	mul.w	r2, r3, r2
 8012da8:	4b0b      	ldr	r3, [pc, #44]	; (8012dd8 <font_printStr+0xd8>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4413      	add	r3, r2
 8012dae:	6a3a      	ldr	r2, [r7, #32]
 8012db0:	4413      	add	r3, r2
 8012db2:	623b      	str	r3, [r7, #32]
  while(*str) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d1c9      	bne.n	8012d50 <font_printStr+0x50>
    }
  }
  return wd;
 8012dbc:	69fb      	ldr	r3, [r7, #28]
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3728      	adds	r7, #40	; 0x28
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	2001edc8 	.word	0x2001edc8
 8012dcc:	2001edd8 	.word	0x2001edd8
 8012dd0:	2001edb4 	.word	0x2001edb4
 8012dd4:	20002cb4 	.word	0x20002cb4
 8012dd8:	2001edd0 	.word	0x2001edd0

08012ddc <font_isNumber>:
// ----------------------------------------------------------------
// callbacks
bool font_isNumber(unsigned char ch)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	4603      	mov	r3, r0
 8012de4:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) || ch==' ' || ch=='-';
 8012de6:	79fb      	ldrb	r3, [r7, #7]
 8012de8:	2b2f      	cmp	r3, #47	; 0x2f
 8012dea:	d902      	bls.n	8012df2 <font_isNumber+0x16>
 8012dec:	79fb      	ldrb	r3, [r7, #7]
 8012dee:	2b39      	cmp	r3, #57	; 0x39
 8012df0:	d905      	bls.n	8012dfe <font_isNumber+0x22>
 8012df2:	79fb      	ldrb	r3, [r7, #7]
 8012df4:	2b20      	cmp	r3, #32
 8012df6:	d002      	beq.n	8012dfe <font_isNumber+0x22>
 8012df8:	79fb      	ldrb	r3, [r7, #7]
 8012dfa:	2b2d      	cmp	r3, #45	; 0x2d
 8012dfc:	d101      	bne.n	8012e02 <font_isNumber+0x26>
 8012dfe:	2301      	movs	r3, #1
 8012e00:	e000      	b.n	8012e04 <font_isNumber+0x28>
 8012e02:	2300      	movs	r3, #0
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr

08012e10 <__errno>:
 8012e10:	4b01      	ldr	r3, [pc, #4]	; (8012e18 <__errno+0x8>)
 8012e12:	6818      	ldr	r0, [r3, #0]
 8012e14:	4770      	bx	lr
 8012e16:	bf00      	nop
 8012e18:	20002d20 	.word	0x20002d20

08012e1c <__libc_init_array>:
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	4e0d      	ldr	r6, [pc, #52]	; (8012e54 <__libc_init_array+0x38>)
 8012e20:	4c0d      	ldr	r4, [pc, #52]	; (8012e58 <__libc_init_array+0x3c>)
 8012e22:	1ba4      	subs	r4, r4, r6
 8012e24:	10a4      	asrs	r4, r4, #2
 8012e26:	2500      	movs	r5, #0
 8012e28:	42a5      	cmp	r5, r4
 8012e2a:	d109      	bne.n	8012e40 <__libc_init_array+0x24>
 8012e2c:	4e0b      	ldr	r6, [pc, #44]	; (8012e5c <__libc_init_array+0x40>)
 8012e2e:	4c0c      	ldr	r4, [pc, #48]	; (8012e60 <__libc_init_array+0x44>)
 8012e30:	f003 ff84 	bl	8016d3c <_init>
 8012e34:	1ba4      	subs	r4, r4, r6
 8012e36:	10a4      	asrs	r4, r4, #2
 8012e38:	2500      	movs	r5, #0
 8012e3a:	42a5      	cmp	r5, r4
 8012e3c:	d105      	bne.n	8012e4a <__libc_init_array+0x2e>
 8012e3e:	bd70      	pop	{r4, r5, r6, pc}
 8012e40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012e44:	4798      	blx	r3
 8012e46:	3501      	adds	r5, #1
 8012e48:	e7ee      	b.n	8012e28 <__libc_init_array+0xc>
 8012e4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012e4e:	4798      	blx	r3
 8012e50:	3501      	adds	r5, #1
 8012e52:	e7f2      	b.n	8012e3a <__libc_init_array+0x1e>
 8012e54:	0801a530 	.word	0x0801a530
 8012e58:	0801a530 	.word	0x0801a530
 8012e5c:	0801a530 	.word	0x0801a530
 8012e60:	0801a534 	.word	0x0801a534

08012e64 <memcpy>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	1e43      	subs	r3, r0, #1
 8012e68:	440a      	add	r2, r1
 8012e6a:	4291      	cmp	r1, r2
 8012e6c:	d100      	bne.n	8012e70 <memcpy+0xc>
 8012e6e:	bd10      	pop	{r4, pc}
 8012e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e78:	e7f7      	b.n	8012e6a <memcpy+0x6>

08012e7a <memset>:
 8012e7a:	4402      	add	r2, r0
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	d100      	bne.n	8012e84 <memset+0xa>
 8012e82:	4770      	bx	lr
 8012e84:	f803 1b01 	strb.w	r1, [r3], #1
 8012e88:	e7f9      	b.n	8012e7e <memset+0x4>

08012e8a <__cvt>:
 8012e8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e8e:	ec55 4b10 	vmov	r4, r5, d0
 8012e92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012e94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012e98:	2d00      	cmp	r5, #0
 8012e9a:	460e      	mov	r6, r1
 8012e9c:	4691      	mov	r9, r2
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	bfb8      	it	lt
 8012ea2:	4622      	movlt	r2, r4
 8012ea4:	462b      	mov	r3, r5
 8012ea6:	f027 0720 	bic.w	r7, r7, #32
 8012eaa:	bfbb      	ittet	lt
 8012eac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012eb0:	461d      	movlt	r5, r3
 8012eb2:	2300      	movge	r3, #0
 8012eb4:	232d      	movlt	r3, #45	; 0x2d
 8012eb6:	bfb8      	it	lt
 8012eb8:	4614      	movlt	r4, r2
 8012eba:	2f46      	cmp	r7, #70	; 0x46
 8012ebc:	700b      	strb	r3, [r1, #0]
 8012ebe:	d004      	beq.n	8012eca <__cvt+0x40>
 8012ec0:	2f45      	cmp	r7, #69	; 0x45
 8012ec2:	d100      	bne.n	8012ec6 <__cvt+0x3c>
 8012ec4:	3601      	adds	r6, #1
 8012ec6:	2102      	movs	r1, #2
 8012ec8:	e000      	b.n	8012ecc <__cvt+0x42>
 8012eca:	2103      	movs	r1, #3
 8012ecc:	ab03      	add	r3, sp, #12
 8012ece:	9301      	str	r3, [sp, #4]
 8012ed0:	ab02      	add	r3, sp, #8
 8012ed2:	9300      	str	r3, [sp, #0]
 8012ed4:	4632      	mov	r2, r6
 8012ed6:	4653      	mov	r3, sl
 8012ed8:	ec45 4b10 	vmov	d0, r4, r5
 8012edc:	f001 fdb8 	bl	8014a50 <_dtoa_r>
 8012ee0:	2f47      	cmp	r7, #71	; 0x47
 8012ee2:	4680      	mov	r8, r0
 8012ee4:	d102      	bne.n	8012eec <__cvt+0x62>
 8012ee6:	f019 0f01 	tst.w	r9, #1
 8012eea:	d026      	beq.n	8012f3a <__cvt+0xb0>
 8012eec:	2f46      	cmp	r7, #70	; 0x46
 8012eee:	eb08 0906 	add.w	r9, r8, r6
 8012ef2:	d111      	bne.n	8012f18 <__cvt+0x8e>
 8012ef4:	f898 3000 	ldrb.w	r3, [r8]
 8012ef8:	2b30      	cmp	r3, #48	; 0x30
 8012efa:	d10a      	bne.n	8012f12 <__cvt+0x88>
 8012efc:	2200      	movs	r2, #0
 8012efe:	2300      	movs	r3, #0
 8012f00:	4620      	mov	r0, r4
 8012f02:	4629      	mov	r1, r5
 8012f04:	f7ed fe08 	bl	8000b18 <__aeabi_dcmpeq>
 8012f08:	b918      	cbnz	r0, 8012f12 <__cvt+0x88>
 8012f0a:	f1c6 0601 	rsb	r6, r6, #1
 8012f0e:	f8ca 6000 	str.w	r6, [sl]
 8012f12:	f8da 3000 	ldr.w	r3, [sl]
 8012f16:	4499      	add	r9, r3
 8012f18:	2200      	movs	r2, #0
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	4629      	mov	r1, r5
 8012f20:	f7ed fdfa 	bl	8000b18 <__aeabi_dcmpeq>
 8012f24:	b938      	cbnz	r0, 8012f36 <__cvt+0xac>
 8012f26:	2230      	movs	r2, #48	; 0x30
 8012f28:	9b03      	ldr	r3, [sp, #12]
 8012f2a:	454b      	cmp	r3, r9
 8012f2c:	d205      	bcs.n	8012f3a <__cvt+0xb0>
 8012f2e:	1c59      	adds	r1, r3, #1
 8012f30:	9103      	str	r1, [sp, #12]
 8012f32:	701a      	strb	r2, [r3, #0]
 8012f34:	e7f8      	b.n	8012f28 <__cvt+0x9e>
 8012f36:	f8cd 900c 	str.w	r9, [sp, #12]
 8012f3a:	9b03      	ldr	r3, [sp, #12]
 8012f3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f3e:	eba3 0308 	sub.w	r3, r3, r8
 8012f42:	4640      	mov	r0, r8
 8012f44:	6013      	str	r3, [r2, #0]
 8012f46:	b004      	add	sp, #16
 8012f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012f4c <__exponent>:
 8012f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f4e:	2900      	cmp	r1, #0
 8012f50:	4604      	mov	r4, r0
 8012f52:	bfba      	itte	lt
 8012f54:	4249      	neglt	r1, r1
 8012f56:	232d      	movlt	r3, #45	; 0x2d
 8012f58:	232b      	movge	r3, #43	; 0x2b
 8012f5a:	2909      	cmp	r1, #9
 8012f5c:	f804 2b02 	strb.w	r2, [r4], #2
 8012f60:	7043      	strb	r3, [r0, #1]
 8012f62:	dd20      	ble.n	8012fa6 <__exponent+0x5a>
 8012f64:	f10d 0307 	add.w	r3, sp, #7
 8012f68:	461f      	mov	r7, r3
 8012f6a:	260a      	movs	r6, #10
 8012f6c:	fb91 f5f6 	sdiv	r5, r1, r6
 8012f70:	fb06 1115 	mls	r1, r6, r5, r1
 8012f74:	3130      	adds	r1, #48	; 0x30
 8012f76:	2d09      	cmp	r5, #9
 8012f78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012f7c:	f103 32ff 	add.w	r2, r3, #4294967295
 8012f80:	4629      	mov	r1, r5
 8012f82:	dc09      	bgt.n	8012f98 <__exponent+0x4c>
 8012f84:	3130      	adds	r1, #48	; 0x30
 8012f86:	3b02      	subs	r3, #2
 8012f88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012f8c:	42bb      	cmp	r3, r7
 8012f8e:	4622      	mov	r2, r4
 8012f90:	d304      	bcc.n	8012f9c <__exponent+0x50>
 8012f92:	1a10      	subs	r0, r2, r0
 8012f94:	b003      	add	sp, #12
 8012f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f98:	4613      	mov	r3, r2
 8012f9a:	e7e7      	b.n	8012f6c <__exponent+0x20>
 8012f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fa0:	f804 2b01 	strb.w	r2, [r4], #1
 8012fa4:	e7f2      	b.n	8012f8c <__exponent+0x40>
 8012fa6:	2330      	movs	r3, #48	; 0x30
 8012fa8:	4419      	add	r1, r3
 8012faa:	7083      	strb	r3, [r0, #2]
 8012fac:	1d02      	adds	r2, r0, #4
 8012fae:	70c1      	strb	r1, [r0, #3]
 8012fb0:	e7ef      	b.n	8012f92 <__exponent+0x46>
	...

08012fb4 <_printf_float>:
 8012fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fb8:	b08d      	sub	sp, #52	; 0x34
 8012fba:	460c      	mov	r4, r1
 8012fbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012fc0:	4616      	mov	r6, r2
 8012fc2:	461f      	mov	r7, r3
 8012fc4:	4605      	mov	r5, r0
 8012fc6:	f002 fe27 	bl	8015c18 <_localeconv_r>
 8012fca:	6803      	ldr	r3, [r0, #0]
 8012fcc:	9304      	str	r3, [sp, #16]
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7ed f926 	bl	8000220 <strlen>
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8012fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8012fdc:	9005      	str	r0, [sp, #20]
 8012fde:	3307      	adds	r3, #7
 8012fe0:	f023 0307 	bic.w	r3, r3, #7
 8012fe4:	f103 0208 	add.w	r2, r3, #8
 8012fe8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012fec:	f8d4 b000 	ldr.w	fp, [r4]
 8012ff0:	f8c8 2000 	str.w	r2, [r8]
 8012ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012ffc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013000:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013004:	9307      	str	r3, [sp, #28]
 8013006:	f8cd 8018 	str.w	r8, [sp, #24]
 801300a:	f04f 32ff 	mov.w	r2, #4294967295
 801300e:	4ba7      	ldr	r3, [pc, #668]	; (80132ac <_printf_float+0x2f8>)
 8013010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013014:	f7ed fdb2 	bl	8000b7c <__aeabi_dcmpun>
 8013018:	bb70      	cbnz	r0, 8013078 <_printf_float+0xc4>
 801301a:	f04f 32ff 	mov.w	r2, #4294967295
 801301e:	4ba3      	ldr	r3, [pc, #652]	; (80132ac <_printf_float+0x2f8>)
 8013020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013024:	f7ed fd8c 	bl	8000b40 <__aeabi_dcmple>
 8013028:	bb30      	cbnz	r0, 8013078 <_printf_float+0xc4>
 801302a:	2200      	movs	r2, #0
 801302c:	2300      	movs	r3, #0
 801302e:	4640      	mov	r0, r8
 8013030:	4649      	mov	r1, r9
 8013032:	f7ed fd7b 	bl	8000b2c <__aeabi_dcmplt>
 8013036:	b110      	cbz	r0, 801303e <_printf_float+0x8a>
 8013038:	232d      	movs	r3, #45	; 0x2d
 801303a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801303e:	4a9c      	ldr	r2, [pc, #624]	; (80132b0 <_printf_float+0x2fc>)
 8013040:	4b9c      	ldr	r3, [pc, #624]	; (80132b4 <_printf_float+0x300>)
 8013042:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013046:	bf8c      	ite	hi
 8013048:	4690      	movhi	r8, r2
 801304a:	4698      	movls	r8, r3
 801304c:	2303      	movs	r3, #3
 801304e:	f02b 0204 	bic.w	r2, fp, #4
 8013052:	6123      	str	r3, [r4, #16]
 8013054:	6022      	str	r2, [r4, #0]
 8013056:	f04f 0900 	mov.w	r9, #0
 801305a:	9700      	str	r7, [sp, #0]
 801305c:	4633      	mov	r3, r6
 801305e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013060:	4621      	mov	r1, r4
 8013062:	4628      	mov	r0, r5
 8013064:	f000 f9e6 	bl	8013434 <_printf_common>
 8013068:	3001      	adds	r0, #1
 801306a:	f040 808d 	bne.w	8013188 <_printf_float+0x1d4>
 801306e:	f04f 30ff 	mov.w	r0, #4294967295
 8013072:	b00d      	add	sp, #52	; 0x34
 8013074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013078:	4642      	mov	r2, r8
 801307a:	464b      	mov	r3, r9
 801307c:	4640      	mov	r0, r8
 801307e:	4649      	mov	r1, r9
 8013080:	f7ed fd7c 	bl	8000b7c <__aeabi_dcmpun>
 8013084:	b110      	cbz	r0, 801308c <_printf_float+0xd8>
 8013086:	4a8c      	ldr	r2, [pc, #560]	; (80132b8 <_printf_float+0x304>)
 8013088:	4b8c      	ldr	r3, [pc, #560]	; (80132bc <_printf_float+0x308>)
 801308a:	e7da      	b.n	8013042 <_printf_float+0x8e>
 801308c:	6861      	ldr	r1, [r4, #4]
 801308e:	1c4b      	adds	r3, r1, #1
 8013090:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013094:	a80a      	add	r0, sp, #40	; 0x28
 8013096:	d13e      	bne.n	8013116 <_printf_float+0x162>
 8013098:	2306      	movs	r3, #6
 801309a:	6063      	str	r3, [r4, #4]
 801309c:	2300      	movs	r3, #0
 801309e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80130a2:	ab09      	add	r3, sp, #36	; 0x24
 80130a4:	9300      	str	r3, [sp, #0]
 80130a6:	ec49 8b10 	vmov	d0, r8, r9
 80130aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80130ae:	6022      	str	r2, [r4, #0]
 80130b0:	f8cd a004 	str.w	sl, [sp, #4]
 80130b4:	6861      	ldr	r1, [r4, #4]
 80130b6:	4628      	mov	r0, r5
 80130b8:	f7ff fee7 	bl	8012e8a <__cvt>
 80130bc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80130c0:	2b47      	cmp	r3, #71	; 0x47
 80130c2:	4680      	mov	r8, r0
 80130c4:	d109      	bne.n	80130da <_printf_float+0x126>
 80130c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130c8:	1cd8      	adds	r0, r3, #3
 80130ca:	db02      	blt.n	80130d2 <_printf_float+0x11e>
 80130cc:	6862      	ldr	r2, [r4, #4]
 80130ce:	4293      	cmp	r3, r2
 80130d0:	dd47      	ble.n	8013162 <_printf_float+0x1ae>
 80130d2:	f1aa 0a02 	sub.w	sl, sl, #2
 80130d6:	fa5f fa8a 	uxtb.w	sl, sl
 80130da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80130de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130e0:	d824      	bhi.n	801312c <_printf_float+0x178>
 80130e2:	3901      	subs	r1, #1
 80130e4:	4652      	mov	r2, sl
 80130e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80130ea:	9109      	str	r1, [sp, #36]	; 0x24
 80130ec:	f7ff ff2e 	bl	8012f4c <__exponent>
 80130f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130f2:	1813      	adds	r3, r2, r0
 80130f4:	2a01      	cmp	r2, #1
 80130f6:	4681      	mov	r9, r0
 80130f8:	6123      	str	r3, [r4, #16]
 80130fa:	dc02      	bgt.n	8013102 <_printf_float+0x14e>
 80130fc:	6822      	ldr	r2, [r4, #0]
 80130fe:	07d1      	lsls	r1, r2, #31
 8013100:	d501      	bpl.n	8013106 <_printf_float+0x152>
 8013102:	3301      	adds	r3, #1
 8013104:	6123      	str	r3, [r4, #16]
 8013106:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801310a:	2b00      	cmp	r3, #0
 801310c:	d0a5      	beq.n	801305a <_printf_float+0xa6>
 801310e:	232d      	movs	r3, #45	; 0x2d
 8013110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013114:	e7a1      	b.n	801305a <_printf_float+0xa6>
 8013116:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801311a:	f000 8177 	beq.w	801340c <_printf_float+0x458>
 801311e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013122:	d1bb      	bne.n	801309c <_printf_float+0xe8>
 8013124:	2900      	cmp	r1, #0
 8013126:	d1b9      	bne.n	801309c <_printf_float+0xe8>
 8013128:	2301      	movs	r3, #1
 801312a:	e7b6      	b.n	801309a <_printf_float+0xe6>
 801312c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013130:	d119      	bne.n	8013166 <_printf_float+0x1b2>
 8013132:	2900      	cmp	r1, #0
 8013134:	6863      	ldr	r3, [r4, #4]
 8013136:	dd0c      	ble.n	8013152 <_printf_float+0x19e>
 8013138:	6121      	str	r1, [r4, #16]
 801313a:	b913      	cbnz	r3, 8013142 <_printf_float+0x18e>
 801313c:	6822      	ldr	r2, [r4, #0]
 801313e:	07d2      	lsls	r2, r2, #31
 8013140:	d502      	bpl.n	8013148 <_printf_float+0x194>
 8013142:	3301      	adds	r3, #1
 8013144:	440b      	add	r3, r1
 8013146:	6123      	str	r3, [r4, #16]
 8013148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801314a:	65a3      	str	r3, [r4, #88]	; 0x58
 801314c:	f04f 0900 	mov.w	r9, #0
 8013150:	e7d9      	b.n	8013106 <_printf_float+0x152>
 8013152:	b913      	cbnz	r3, 801315a <_printf_float+0x1a6>
 8013154:	6822      	ldr	r2, [r4, #0]
 8013156:	07d0      	lsls	r0, r2, #31
 8013158:	d501      	bpl.n	801315e <_printf_float+0x1aa>
 801315a:	3302      	adds	r3, #2
 801315c:	e7f3      	b.n	8013146 <_printf_float+0x192>
 801315e:	2301      	movs	r3, #1
 8013160:	e7f1      	b.n	8013146 <_printf_float+0x192>
 8013162:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013166:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801316a:	4293      	cmp	r3, r2
 801316c:	db05      	blt.n	801317a <_printf_float+0x1c6>
 801316e:	6822      	ldr	r2, [r4, #0]
 8013170:	6123      	str	r3, [r4, #16]
 8013172:	07d1      	lsls	r1, r2, #31
 8013174:	d5e8      	bpl.n	8013148 <_printf_float+0x194>
 8013176:	3301      	adds	r3, #1
 8013178:	e7e5      	b.n	8013146 <_printf_float+0x192>
 801317a:	2b00      	cmp	r3, #0
 801317c:	bfd4      	ite	le
 801317e:	f1c3 0302 	rsble	r3, r3, #2
 8013182:	2301      	movgt	r3, #1
 8013184:	4413      	add	r3, r2
 8013186:	e7de      	b.n	8013146 <_printf_float+0x192>
 8013188:	6823      	ldr	r3, [r4, #0]
 801318a:	055a      	lsls	r2, r3, #21
 801318c:	d407      	bmi.n	801319e <_printf_float+0x1ea>
 801318e:	6923      	ldr	r3, [r4, #16]
 8013190:	4642      	mov	r2, r8
 8013192:	4631      	mov	r1, r6
 8013194:	4628      	mov	r0, r5
 8013196:	47b8      	blx	r7
 8013198:	3001      	adds	r0, #1
 801319a:	d12b      	bne.n	80131f4 <_printf_float+0x240>
 801319c:	e767      	b.n	801306e <_printf_float+0xba>
 801319e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80131a2:	f240 80dc 	bls.w	801335e <_printf_float+0x3aa>
 80131a6:	2200      	movs	r2, #0
 80131a8:	2300      	movs	r3, #0
 80131aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80131ae:	f7ed fcb3 	bl	8000b18 <__aeabi_dcmpeq>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d033      	beq.n	801321e <_printf_float+0x26a>
 80131b6:	2301      	movs	r3, #1
 80131b8:	4a41      	ldr	r2, [pc, #260]	; (80132c0 <_printf_float+0x30c>)
 80131ba:	4631      	mov	r1, r6
 80131bc:	4628      	mov	r0, r5
 80131be:	47b8      	blx	r7
 80131c0:	3001      	adds	r0, #1
 80131c2:	f43f af54 	beq.w	801306e <_printf_float+0xba>
 80131c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80131ca:	429a      	cmp	r2, r3
 80131cc:	db02      	blt.n	80131d4 <_printf_float+0x220>
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	07d8      	lsls	r0, r3, #31
 80131d2:	d50f      	bpl.n	80131f4 <_printf_float+0x240>
 80131d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131d8:	4631      	mov	r1, r6
 80131da:	4628      	mov	r0, r5
 80131dc:	47b8      	blx	r7
 80131de:	3001      	adds	r0, #1
 80131e0:	f43f af45 	beq.w	801306e <_printf_float+0xba>
 80131e4:	f04f 0800 	mov.w	r8, #0
 80131e8:	f104 091a 	add.w	r9, r4, #26
 80131ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ee:	3b01      	subs	r3, #1
 80131f0:	4543      	cmp	r3, r8
 80131f2:	dc09      	bgt.n	8013208 <_printf_float+0x254>
 80131f4:	6823      	ldr	r3, [r4, #0]
 80131f6:	079b      	lsls	r3, r3, #30
 80131f8:	f100 8103 	bmi.w	8013402 <_printf_float+0x44e>
 80131fc:	68e0      	ldr	r0, [r4, #12]
 80131fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013200:	4298      	cmp	r0, r3
 8013202:	bfb8      	it	lt
 8013204:	4618      	movlt	r0, r3
 8013206:	e734      	b.n	8013072 <_printf_float+0xbe>
 8013208:	2301      	movs	r3, #1
 801320a:	464a      	mov	r2, r9
 801320c:	4631      	mov	r1, r6
 801320e:	4628      	mov	r0, r5
 8013210:	47b8      	blx	r7
 8013212:	3001      	adds	r0, #1
 8013214:	f43f af2b 	beq.w	801306e <_printf_float+0xba>
 8013218:	f108 0801 	add.w	r8, r8, #1
 801321c:	e7e6      	b.n	80131ec <_printf_float+0x238>
 801321e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013220:	2b00      	cmp	r3, #0
 8013222:	dc2b      	bgt.n	801327c <_printf_float+0x2c8>
 8013224:	2301      	movs	r3, #1
 8013226:	4a26      	ldr	r2, [pc, #152]	; (80132c0 <_printf_float+0x30c>)
 8013228:	4631      	mov	r1, r6
 801322a:	4628      	mov	r0, r5
 801322c:	47b8      	blx	r7
 801322e:	3001      	adds	r0, #1
 8013230:	f43f af1d 	beq.w	801306e <_printf_float+0xba>
 8013234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013236:	b923      	cbnz	r3, 8013242 <_printf_float+0x28e>
 8013238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801323a:	b913      	cbnz	r3, 8013242 <_printf_float+0x28e>
 801323c:	6823      	ldr	r3, [r4, #0]
 801323e:	07d9      	lsls	r1, r3, #31
 8013240:	d5d8      	bpl.n	80131f4 <_printf_float+0x240>
 8013242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013246:	4631      	mov	r1, r6
 8013248:	4628      	mov	r0, r5
 801324a:	47b8      	blx	r7
 801324c:	3001      	adds	r0, #1
 801324e:	f43f af0e 	beq.w	801306e <_printf_float+0xba>
 8013252:	f04f 0900 	mov.w	r9, #0
 8013256:	f104 0a1a 	add.w	sl, r4, #26
 801325a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801325c:	425b      	negs	r3, r3
 801325e:	454b      	cmp	r3, r9
 8013260:	dc01      	bgt.n	8013266 <_printf_float+0x2b2>
 8013262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013264:	e794      	b.n	8013190 <_printf_float+0x1dc>
 8013266:	2301      	movs	r3, #1
 8013268:	4652      	mov	r2, sl
 801326a:	4631      	mov	r1, r6
 801326c:	4628      	mov	r0, r5
 801326e:	47b8      	blx	r7
 8013270:	3001      	adds	r0, #1
 8013272:	f43f aefc 	beq.w	801306e <_printf_float+0xba>
 8013276:	f109 0901 	add.w	r9, r9, #1
 801327a:	e7ee      	b.n	801325a <_printf_float+0x2a6>
 801327c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801327e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013280:	429a      	cmp	r2, r3
 8013282:	bfa8      	it	ge
 8013284:	461a      	movge	r2, r3
 8013286:	2a00      	cmp	r2, #0
 8013288:	4691      	mov	r9, r2
 801328a:	dd07      	ble.n	801329c <_printf_float+0x2e8>
 801328c:	4613      	mov	r3, r2
 801328e:	4631      	mov	r1, r6
 8013290:	4642      	mov	r2, r8
 8013292:	4628      	mov	r0, r5
 8013294:	47b8      	blx	r7
 8013296:	3001      	adds	r0, #1
 8013298:	f43f aee9 	beq.w	801306e <_printf_float+0xba>
 801329c:	f104 031a 	add.w	r3, r4, #26
 80132a0:	f04f 0b00 	mov.w	fp, #0
 80132a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80132a8:	9306      	str	r3, [sp, #24]
 80132aa:	e015      	b.n	80132d8 <_printf_float+0x324>
 80132ac:	7fefffff 	.word	0x7fefffff
 80132b0:	0801a272 	.word	0x0801a272
 80132b4:	0801a26e 	.word	0x0801a26e
 80132b8:	0801a27a 	.word	0x0801a27a
 80132bc:	0801a276 	.word	0x0801a276
 80132c0:	0801a27e 	.word	0x0801a27e
 80132c4:	2301      	movs	r3, #1
 80132c6:	9a06      	ldr	r2, [sp, #24]
 80132c8:	4631      	mov	r1, r6
 80132ca:	4628      	mov	r0, r5
 80132cc:	47b8      	blx	r7
 80132ce:	3001      	adds	r0, #1
 80132d0:	f43f aecd 	beq.w	801306e <_printf_float+0xba>
 80132d4:	f10b 0b01 	add.w	fp, fp, #1
 80132d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80132dc:	ebaa 0309 	sub.w	r3, sl, r9
 80132e0:	455b      	cmp	r3, fp
 80132e2:	dcef      	bgt.n	80132c4 <_printf_float+0x310>
 80132e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80132e8:	429a      	cmp	r2, r3
 80132ea:	44d0      	add	r8, sl
 80132ec:	db15      	blt.n	801331a <_printf_float+0x366>
 80132ee:	6823      	ldr	r3, [r4, #0]
 80132f0:	07da      	lsls	r2, r3, #31
 80132f2:	d412      	bmi.n	801331a <_printf_float+0x366>
 80132f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132f8:	eba3 020a 	sub.w	r2, r3, sl
 80132fc:	eba3 0a01 	sub.w	sl, r3, r1
 8013300:	4592      	cmp	sl, r2
 8013302:	bfa8      	it	ge
 8013304:	4692      	movge	sl, r2
 8013306:	f1ba 0f00 	cmp.w	sl, #0
 801330a:	dc0e      	bgt.n	801332a <_printf_float+0x376>
 801330c:	f04f 0800 	mov.w	r8, #0
 8013310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013314:	f104 091a 	add.w	r9, r4, #26
 8013318:	e019      	b.n	801334e <_printf_float+0x39a>
 801331a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801331e:	4631      	mov	r1, r6
 8013320:	4628      	mov	r0, r5
 8013322:	47b8      	blx	r7
 8013324:	3001      	adds	r0, #1
 8013326:	d1e5      	bne.n	80132f4 <_printf_float+0x340>
 8013328:	e6a1      	b.n	801306e <_printf_float+0xba>
 801332a:	4653      	mov	r3, sl
 801332c:	4642      	mov	r2, r8
 801332e:	4631      	mov	r1, r6
 8013330:	4628      	mov	r0, r5
 8013332:	47b8      	blx	r7
 8013334:	3001      	adds	r0, #1
 8013336:	d1e9      	bne.n	801330c <_printf_float+0x358>
 8013338:	e699      	b.n	801306e <_printf_float+0xba>
 801333a:	2301      	movs	r3, #1
 801333c:	464a      	mov	r2, r9
 801333e:	4631      	mov	r1, r6
 8013340:	4628      	mov	r0, r5
 8013342:	47b8      	blx	r7
 8013344:	3001      	adds	r0, #1
 8013346:	f43f ae92 	beq.w	801306e <_printf_float+0xba>
 801334a:	f108 0801 	add.w	r8, r8, #1
 801334e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013352:	1a9b      	subs	r3, r3, r2
 8013354:	eba3 030a 	sub.w	r3, r3, sl
 8013358:	4543      	cmp	r3, r8
 801335a:	dcee      	bgt.n	801333a <_printf_float+0x386>
 801335c:	e74a      	b.n	80131f4 <_printf_float+0x240>
 801335e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013360:	2a01      	cmp	r2, #1
 8013362:	dc01      	bgt.n	8013368 <_printf_float+0x3b4>
 8013364:	07db      	lsls	r3, r3, #31
 8013366:	d53a      	bpl.n	80133de <_printf_float+0x42a>
 8013368:	2301      	movs	r3, #1
 801336a:	4642      	mov	r2, r8
 801336c:	4631      	mov	r1, r6
 801336e:	4628      	mov	r0, r5
 8013370:	47b8      	blx	r7
 8013372:	3001      	adds	r0, #1
 8013374:	f43f ae7b 	beq.w	801306e <_printf_float+0xba>
 8013378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801337c:	4631      	mov	r1, r6
 801337e:	4628      	mov	r0, r5
 8013380:	47b8      	blx	r7
 8013382:	3001      	adds	r0, #1
 8013384:	f108 0801 	add.w	r8, r8, #1
 8013388:	f43f ae71 	beq.w	801306e <_printf_float+0xba>
 801338c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801338e:	2200      	movs	r2, #0
 8013390:	f103 3aff 	add.w	sl, r3, #4294967295
 8013394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013398:	2300      	movs	r3, #0
 801339a:	f7ed fbbd 	bl	8000b18 <__aeabi_dcmpeq>
 801339e:	b9c8      	cbnz	r0, 80133d4 <_printf_float+0x420>
 80133a0:	4653      	mov	r3, sl
 80133a2:	4642      	mov	r2, r8
 80133a4:	4631      	mov	r1, r6
 80133a6:	4628      	mov	r0, r5
 80133a8:	47b8      	blx	r7
 80133aa:	3001      	adds	r0, #1
 80133ac:	d10e      	bne.n	80133cc <_printf_float+0x418>
 80133ae:	e65e      	b.n	801306e <_printf_float+0xba>
 80133b0:	2301      	movs	r3, #1
 80133b2:	4652      	mov	r2, sl
 80133b4:	4631      	mov	r1, r6
 80133b6:	4628      	mov	r0, r5
 80133b8:	47b8      	blx	r7
 80133ba:	3001      	adds	r0, #1
 80133bc:	f43f ae57 	beq.w	801306e <_printf_float+0xba>
 80133c0:	f108 0801 	add.w	r8, r8, #1
 80133c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133c6:	3b01      	subs	r3, #1
 80133c8:	4543      	cmp	r3, r8
 80133ca:	dcf1      	bgt.n	80133b0 <_printf_float+0x3fc>
 80133cc:	464b      	mov	r3, r9
 80133ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80133d2:	e6de      	b.n	8013192 <_printf_float+0x1de>
 80133d4:	f04f 0800 	mov.w	r8, #0
 80133d8:	f104 0a1a 	add.w	sl, r4, #26
 80133dc:	e7f2      	b.n	80133c4 <_printf_float+0x410>
 80133de:	2301      	movs	r3, #1
 80133e0:	e7df      	b.n	80133a2 <_printf_float+0x3ee>
 80133e2:	2301      	movs	r3, #1
 80133e4:	464a      	mov	r2, r9
 80133e6:	4631      	mov	r1, r6
 80133e8:	4628      	mov	r0, r5
 80133ea:	47b8      	blx	r7
 80133ec:	3001      	adds	r0, #1
 80133ee:	f43f ae3e 	beq.w	801306e <_printf_float+0xba>
 80133f2:	f108 0801 	add.w	r8, r8, #1
 80133f6:	68e3      	ldr	r3, [r4, #12]
 80133f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80133fa:	1a9b      	subs	r3, r3, r2
 80133fc:	4543      	cmp	r3, r8
 80133fe:	dcf0      	bgt.n	80133e2 <_printf_float+0x42e>
 8013400:	e6fc      	b.n	80131fc <_printf_float+0x248>
 8013402:	f04f 0800 	mov.w	r8, #0
 8013406:	f104 0919 	add.w	r9, r4, #25
 801340a:	e7f4      	b.n	80133f6 <_printf_float+0x442>
 801340c:	2900      	cmp	r1, #0
 801340e:	f43f ae8b 	beq.w	8013128 <_printf_float+0x174>
 8013412:	2300      	movs	r3, #0
 8013414:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013418:	ab09      	add	r3, sp, #36	; 0x24
 801341a:	9300      	str	r3, [sp, #0]
 801341c:	ec49 8b10 	vmov	d0, r8, r9
 8013420:	6022      	str	r2, [r4, #0]
 8013422:	f8cd a004 	str.w	sl, [sp, #4]
 8013426:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801342a:	4628      	mov	r0, r5
 801342c:	f7ff fd2d 	bl	8012e8a <__cvt>
 8013430:	4680      	mov	r8, r0
 8013432:	e648      	b.n	80130c6 <_printf_float+0x112>

08013434 <_printf_common>:
 8013434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013438:	4691      	mov	r9, r2
 801343a:	461f      	mov	r7, r3
 801343c:	688a      	ldr	r2, [r1, #8]
 801343e:	690b      	ldr	r3, [r1, #16]
 8013440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013444:	4293      	cmp	r3, r2
 8013446:	bfb8      	it	lt
 8013448:	4613      	movlt	r3, r2
 801344a:	f8c9 3000 	str.w	r3, [r9]
 801344e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013452:	4606      	mov	r6, r0
 8013454:	460c      	mov	r4, r1
 8013456:	b112      	cbz	r2, 801345e <_printf_common+0x2a>
 8013458:	3301      	adds	r3, #1
 801345a:	f8c9 3000 	str.w	r3, [r9]
 801345e:	6823      	ldr	r3, [r4, #0]
 8013460:	0699      	lsls	r1, r3, #26
 8013462:	bf42      	ittt	mi
 8013464:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013468:	3302      	addmi	r3, #2
 801346a:	f8c9 3000 	strmi.w	r3, [r9]
 801346e:	6825      	ldr	r5, [r4, #0]
 8013470:	f015 0506 	ands.w	r5, r5, #6
 8013474:	d107      	bne.n	8013486 <_printf_common+0x52>
 8013476:	f104 0a19 	add.w	sl, r4, #25
 801347a:	68e3      	ldr	r3, [r4, #12]
 801347c:	f8d9 2000 	ldr.w	r2, [r9]
 8013480:	1a9b      	subs	r3, r3, r2
 8013482:	42ab      	cmp	r3, r5
 8013484:	dc28      	bgt.n	80134d8 <_printf_common+0xa4>
 8013486:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801348a:	6822      	ldr	r2, [r4, #0]
 801348c:	3300      	adds	r3, #0
 801348e:	bf18      	it	ne
 8013490:	2301      	movne	r3, #1
 8013492:	0692      	lsls	r2, r2, #26
 8013494:	d42d      	bmi.n	80134f2 <_printf_common+0xbe>
 8013496:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801349a:	4639      	mov	r1, r7
 801349c:	4630      	mov	r0, r6
 801349e:	47c0      	blx	r8
 80134a0:	3001      	adds	r0, #1
 80134a2:	d020      	beq.n	80134e6 <_printf_common+0xb2>
 80134a4:	6823      	ldr	r3, [r4, #0]
 80134a6:	68e5      	ldr	r5, [r4, #12]
 80134a8:	f8d9 2000 	ldr.w	r2, [r9]
 80134ac:	f003 0306 	and.w	r3, r3, #6
 80134b0:	2b04      	cmp	r3, #4
 80134b2:	bf08      	it	eq
 80134b4:	1aad      	subeq	r5, r5, r2
 80134b6:	68a3      	ldr	r3, [r4, #8]
 80134b8:	6922      	ldr	r2, [r4, #16]
 80134ba:	bf0c      	ite	eq
 80134bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134c0:	2500      	movne	r5, #0
 80134c2:	4293      	cmp	r3, r2
 80134c4:	bfc4      	itt	gt
 80134c6:	1a9b      	subgt	r3, r3, r2
 80134c8:	18ed      	addgt	r5, r5, r3
 80134ca:	f04f 0900 	mov.w	r9, #0
 80134ce:	341a      	adds	r4, #26
 80134d0:	454d      	cmp	r5, r9
 80134d2:	d11a      	bne.n	801350a <_printf_common+0xd6>
 80134d4:	2000      	movs	r0, #0
 80134d6:	e008      	b.n	80134ea <_printf_common+0xb6>
 80134d8:	2301      	movs	r3, #1
 80134da:	4652      	mov	r2, sl
 80134dc:	4639      	mov	r1, r7
 80134de:	4630      	mov	r0, r6
 80134e0:	47c0      	blx	r8
 80134e2:	3001      	adds	r0, #1
 80134e4:	d103      	bne.n	80134ee <_printf_common+0xba>
 80134e6:	f04f 30ff 	mov.w	r0, #4294967295
 80134ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ee:	3501      	adds	r5, #1
 80134f0:	e7c3      	b.n	801347a <_printf_common+0x46>
 80134f2:	18e1      	adds	r1, r4, r3
 80134f4:	1c5a      	adds	r2, r3, #1
 80134f6:	2030      	movs	r0, #48	; 0x30
 80134f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80134fc:	4422      	add	r2, r4
 80134fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013502:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013506:	3302      	adds	r3, #2
 8013508:	e7c5      	b.n	8013496 <_printf_common+0x62>
 801350a:	2301      	movs	r3, #1
 801350c:	4622      	mov	r2, r4
 801350e:	4639      	mov	r1, r7
 8013510:	4630      	mov	r0, r6
 8013512:	47c0      	blx	r8
 8013514:	3001      	adds	r0, #1
 8013516:	d0e6      	beq.n	80134e6 <_printf_common+0xb2>
 8013518:	f109 0901 	add.w	r9, r9, #1
 801351c:	e7d8      	b.n	80134d0 <_printf_common+0x9c>
	...

08013520 <_printf_i>:
 8013520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013524:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013528:	460c      	mov	r4, r1
 801352a:	7e09      	ldrb	r1, [r1, #24]
 801352c:	b085      	sub	sp, #20
 801352e:	296e      	cmp	r1, #110	; 0x6e
 8013530:	4617      	mov	r7, r2
 8013532:	4606      	mov	r6, r0
 8013534:	4698      	mov	r8, r3
 8013536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013538:	f000 80b3 	beq.w	80136a2 <_printf_i+0x182>
 801353c:	d822      	bhi.n	8013584 <_printf_i+0x64>
 801353e:	2963      	cmp	r1, #99	; 0x63
 8013540:	d036      	beq.n	80135b0 <_printf_i+0x90>
 8013542:	d80a      	bhi.n	801355a <_printf_i+0x3a>
 8013544:	2900      	cmp	r1, #0
 8013546:	f000 80b9 	beq.w	80136bc <_printf_i+0x19c>
 801354a:	2958      	cmp	r1, #88	; 0x58
 801354c:	f000 8083 	beq.w	8013656 <_printf_i+0x136>
 8013550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013554:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013558:	e032      	b.n	80135c0 <_printf_i+0xa0>
 801355a:	2964      	cmp	r1, #100	; 0x64
 801355c:	d001      	beq.n	8013562 <_printf_i+0x42>
 801355e:	2969      	cmp	r1, #105	; 0x69
 8013560:	d1f6      	bne.n	8013550 <_printf_i+0x30>
 8013562:	6820      	ldr	r0, [r4, #0]
 8013564:	6813      	ldr	r3, [r2, #0]
 8013566:	0605      	lsls	r5, r0, #24
 8013568:	f103 0104 	add.w	r1, r3, #4
 801356c:	d52a      	bpl.n	80135c4 <_printf_i+0xa4>
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	6011      	str	r1, [r2, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	da03      	bge.n	801357e <_printf_i+0x5e>
 8013576:	222d      	movs	r2, #45	; 0x2d
 8013578:	425b      	negs	r3, r3
 801357a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801357e:	486f      	ldr	r0, [pc, #444]	; (801373c <_printf_i+0x21c>)
 8013580:	220a      	movs	r2, #10
 8013582:	e039      	b.n	80135f8 <_printf_i+0xd8>
 8013584:	2973      	cmp	r1, #115	; 0x73
 8013586:	f000 809d 	beq.w	80136c4 <_printf_i+0x1a4>
 801358a:	d808      	bhi.n	801359e <_printf_i+0x7e>
 801358c:	296f      	cmp	r1, #111	; 0x6f
 801358e:	d020      	beq.n	80135d2 <_printf_i+0xb2>
 8013590:	2970      	cmp	r1, #112	; 0x70
 8013592:	d1dd      	bne.n	8013550 <_printf_i+0x30>
 8013594:	6823      	ldr	r3, [r4, #0]
 8013596:	f043 0320 	orr.w	r3, r3, #32
 801359a:	6023      	str	r3, [r4, #0]
 801359c:	e003      	b.n	80135a6 <_printf_i+0x86>
 801359e:	2975      	cmp	r1, #117	; 0x75
 80135a0:	d017      	beq.n	80135d2 <_printf_i+0xb2>
 80135a2:	2978      	cmp	r1, #120	; 0x78
 80135a4:	d1d4      	bne.n	8013550 <_printf_i+0x30>
 80135a6:	2378      	movs	r3, #120	; 0x78
 80135a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80135ac:	4864      	ldr	r0, [pc, #400]	; (8013740 <_printf_i+0x220>)
 80135ae:	e055      	b.n	801365c <_printf_i+0x13c>
 80135b0:	6813      	ldr	r3, [r2, #0]
 80135b2:	1d19      	adds	r1, r3, #4
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	6011      	str	r1, [r2, #0]
 80135b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80135bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80135c0:	2301      	movs	r3, #1
 80135c2:	e08c      	b.n	80136de <_printf_i+0x1be>
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	6011      	str	r1, [r2, #0]
 80135c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80135cc:	bf18      	it	ne
 80135ce:	b21b      	sxthne	r3, r3
 80135d0:	e7cf      	b.n	8013572 <_printf_i+0x52>
 80135d2:	6813      	ldr	r3, [r2, #0]
 80135d4:	6825      	ldr	r5, [r4, #0]
 80135d6:	1d18      	adds	r0, r3, #4
 80135d8:	6010      	str	r0, [r2, #0]
 80135da:	0628      	lsls	r0, r5, #24
 80135dc:	d501      	bpl.n	80135e2 <_printf_i+0xc2>
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	e002      	b.n	80135e8 <_printf_i+0xc8>
 80135e2:	0668      	lsls	r0, r5, #25
 80135e4:	d5fb      	bpl.n	80135de <_printf_i+0xbe>
 80135e6:	881b      	ldrh	r3, [r3, #0]
 80135e8:	4854      	ldr	r0, [pc, #336]	; (801373c <_printf_i+0x21c>)
 80135ea:	296f      	cmp	r1, #111	; 0x6f
 80135ec:	bf14      	ite	ne
 80135ee:	220a      	movne	r2, #10
 80135f0:	2208      	moveq	r2, #8
 80135f2:	2100      	movs	r1, #0
 80135f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80135f8:	6865      	ldr	r5, [r4, #4]
 80135fa:	60a5      	str	r5, [r4, #8]
 80135fc:	2d00      	cmp	r5, #0
 80135fe:	f2c0 8095 	blt.w	801372c <_printf_i+0x20c>
 8013602:	6821      	ldr	r1, [r4, #0]
 8013604:	f021 0104 	bic.w	r1, r1, #4
 8013608:	6021      	str	r1, [r4, #0]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d13d      	bne.n	801368a <_printf_i+0x16a>
 801360e:	2d00      	cmp	r5, #0
 8013610:	f040 808e 	bne.w	8013730 <_printf_i+0x210>
 8013614:	4665      	mov	r5, ip
 8013616:	2a08      	cmp	r2, #8
 8013618:	d10b      	bne.n	8013632 <_printf_i+0x112>
 801361a:	6823      	ldr	r3, [r4, #0]
 801361c:	07db      	lsls	r3, r3, #31
 801361e:	d508      	bpl.n	8013632 <_printf_i+0x112>
 8013620:	6923      	ldr	r3, [r4, #16]
 8013622:	6862      	ldr	r2, [r4, #4]
 8013624:	429a      	cmp	r2, r3
 8013626:	bfde      	ittt	le
 8013628:	2330      	movle	r3, #48	; 0x30
 801362a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801362e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013632:	ebac 0305 	sub.w	r3, ip, r5
 8013636:	6123      	str	r3, [r4, #16]
 8013638:	f8cd 8000 	str.w	r8, [sp]
 801363c:	463b      	mov	r3, r7
 801363e:	aa03      	add	r2, sp, #12
 8013640:	4621      	mov	r1, r4
 8013642:	4630      	mov	r0, r6
 8013644:	f7ff fef6 	bl	8013434 <_printf_common>
 8013648:	3001      	adds	r0, #1
 801364a:	d14d      	bne.n	80136e8 <_printf_i+0x1c8>
 801364c:	f04f 30ff 	mov.w	r0, #4294967295
 8013650:	b005      	add	sp, #20
 8013652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013656:	4839      	ldr	r0, [pc, #228]	; (801373c <_printf_i+0x21c>)
 8013658:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801365c:	6813      	ldr	r3, [r2, #0]
 801365e:	6821      	ldr	r1, [r4, #0]
 8013660:	1d1d      	adds	r5, r3, #4
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	6015      	str	r5, [r2, #0]
 8013666:	060a      	lsls	r2, r1, #24
 8013668:	d50b      	bpl.n	8013682 <_printf_i+0x162>
 801366a:	07ca      	lsls	r2, r1, #31
 801366c:	bf44      	itt	mi
 801366e:	f041 0120 	orrmi.w	r1, r1, #32
 8013672:	6021      	strmi	r1, [r4, #0]
 8013674:	b91b      	cbnz	r3, 801367e <_printf_i+0x15e>
 8013676:	6822      	ldr	r2, [r4, #0]
 8013678:	f022 0220 	bic.w	r2, r2, #32
 801367c:	6022      	str	r2, [r4, #0]
 801367e:	2210      	movs	r2, #16
 8013680:	e7b7      	b.n	80135f2 <_printf_i+0xd2>
 8013682:	064d      	lsls	r5, r1, #25
 8013684:	bf48      	it	mi
 8013686:	b29b      	uxthmi	r3, r3
 8013688:	e7ef      	b.n	801366a <_printf_i+0x14a>
 801368a:	4665      	mov	r5, ip
 801368c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013690:	fb02 3311 	mls	r3, r2, r1, r3
 8013694:	5cc3      	ldrb	r3, [r0, r3]
 8013696:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801369a:	460b      	mov	r3, r1
 801369c:	2900      	cmp	r1, #0
 801369e:	d1f5      	bne.n	801368c <_printf_i+0x16c>
 80136a0:	e7b9      	b.n	8013616 <_printf_i+0xf6>
 80136a2:	6813      	ldr	r3, [r2, #0]
 80136a4:	6825      	ldr	r5, [r4, #0]
 80136a6:	6961      	ldr	r1, [r4, #20]
 80136a8:	1d18      	adds	r0, r3, #4
 80136aa:	6010      	str	r0, [r2, #0]
 80136ac:	0628      	lsls	r0, r5, #24
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	d501      	bpl.n	80136b6 <_printf_i+0x196>
 80136b2:	6019      	str	r1, [r3, #0]
 80136b4:	e002      	b.n	80136bc <_printf_i+0x19c>
 80136b6:	066a      	lsls	r2, r5, #25
 80136b8:	d5fb      	bpl.n	80136b2 <_printf_i+0x192>
 80136ba:	8019      	strh	r1, [r3, #0]
 80136bc:	2300      	movs	r3, #0
 80136be:	6123      	str	r3, [r4, #16]
 80136c0:	4665      	mov	r5, ip
 80136c2:	e7b9      	b.n	8013638 <_printf_i+0x118>
 80136c4:	6813      	ldr	r3, [r2, #0]
 80136c6:	1d19      	adds	r1, r3, #4
 80136c8:	6011      	str	r1, [r2, #0]
 80136ca:	681d      	ldr	r5, [r3, #0]
 80136cc:	6862      	ldr	r2, [r4, #4]
 80136ce:	2100      	movs	r1, #0
 80136d0:	4628      	mov	r0, r5
 80136d2:	f7ec fdad 	bl	8000230 <memchr>
 80136d6:	b108      	cbz	r0, 80136dc <_printf_i+0x1bc>
 80136d8:	1b40      	subs	r0, r0, r5
 80136da:	6060      	str	r0, [r4, #4]
 80136dc:	6863      	ldr	r3, [r4, #4]
 80136de:	6123      	str	r3, [r4, #16]
 80136e0:	2300      	movs	r3, #0
 80136e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136e6:	e7a7      	b.n	8013638 <_printf_i+0x118>
 80136e8:	6923      	ldr	r3, [r4, #16]
 80136ea:	462a      	mov	r2, r5
 80136ec:	4639      	mov	r1, r7
 80136ee:	4630      	mov	r0, r6
 80136f0:	47c0      	blx	r8
 80136f2:	3001      	adds	r0, #1
 80136f4:	d0aa      	beq.n	801364c <_printf_i+0x12c>
 80136f6:	6823      	ldr	r3, [r4, #0]
 80136f8:	079b      	lsls	r3, r3, #30
 80136fa:	d413      	bmi.n	8013724 <_printf_i+0x204>
 80136fc:	68e0      	ldr	r0, [r4, #12]
 80136fe:	9b03      	ldr	r3, [sp, #12]
 8013700:	4298      	cmp	r0, r3
 8013702:	bfb8      	it	lt
 8013704:	4618      	movlt	r0, r3
 8013706:	e7a3      	b.n	8013650 <_printf_i+0x130>
 8013708:	2301      	movs	r3, #1
 801370a:	464a      	mov	r2, r9
 801370c:	4639      	mov	r1, r7
 801370e:	4630      	mov	r0, r6
 8013710:	47c0      	blx	r8
 8013712:	3001      	adds	r0, #1
 8013714:	d09a      	beq.n	801364c <_printf_i+0x12c>
 8013716:	3501      	adds	r5, #1
 8013718:	68e3      	ldr	r3, [r4, #12]
 801371a:	9a03      	ldr	r2, [sp, #12]
 801371c:	1a9b      	subs	r3, r3, r2
 801371e:	42ab      	cmp	r3, r5
 8013720:	dcf2      	bgt.n	8013708 <_printf_i+0x1e8>
 8013722:	e7eb      	b.n	80136fc <_printf_i+0x1dc>
 8013724:	2500      	movs	r5, #0
 8013726:	f104 0919 	add.w	r9, r4, #25
 801372a:	e7f5      	b.n	8013718 <_printf_i+0x1f8>
 801372c:	2b00      	cmp	r3, #0
 801372e:	d1ac      	bne.n	801368a <_printf_i+0x16a>
 8013730:	7803      	ldrb	r3, [r0, #0]
 8013732:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013736:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801373a:	e76c      	b.n	8013616 <_printf_i+0xf6>
 801373c:	0801a280 	.word	0x0801a280
 8013740:	0801a291 	.word	0x0801a291

08013744 <_scanf_float>:
 8013744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013748:	469a      	mov	sl, r3
 801374a:	688b      	ldr	r3, [r1, #8]
 801374c:	4616      	mov	r6, r2
 801374e:	1e5a      	subs	r2, r3, #1
 8013750:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013754:	b087      	sub	sp, #28
 8013756:	bf83      	ittte	hi
 8013758:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801375c:	189b      	addhi	r3, r3, r2
 801375e:	9301      	strhi	r3, [sp, #4]
 8013760:	2300      	movls	r3, #0
 8013762:	bf86      	itte	hi
 8013764:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013768:	608b      	strhi	r3, [r1, #8]
 801376a:	9301      	strls	r3, [sp, #4]
 801376c:	680b      	ldr	r3, [r1, #0]
 801376e:	4688      	mov	r8, r1
 8013770:	f04f 0b00 	mov.w	fp, #0
 8013774:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013778:	f848 3b1c 	str.w	r3, [r8], #28
 801377c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013780:	4607      	mov	r7, r0
 8013782:	460c      	mov	r4, r1
 8013784:	4645      	mov	r5, r8
 8013786:	465a      	mov	r2, fp
 8013788:	46d9      	mov	r9, fp
 801378a:	f8cd b008 	str.w	fp, [sp, #8]
 801378e:	68a1      	ldr	r1, [r4, #8]
 8013790:	b181      	cbz	r1, 80137b4 <_scanf_float+0x70>
 8013792:	6833      	ldr	r3, [r6, #0]
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	2b49      	cmp	r3, #73	; 0x49
 8013798:	d071      	beq.n	801387e <_scanf_float+0x13a>
 801379a:	d84d      	bhi.n	8013838 <_scanf_float+0xf4>
 801379c:	2b39      	cmp	r3, #57	; 0x39
 801379e:	d840      	bhi.n	8013822 <_scanf_float+0xde>
 80137a0:	2b31      	cmp	r3, #49	; 0x31
 80137a2:	f080 8088 	bcs.w	80138b6 <_scanf_float+0x172>
 80137a6:	2b2d      	cmp	r3, #45	; 0x2d
 80137a8:	f000 8090 	beq.w	80138cc <_scanf_float+0x188>
 80137ac:	d815      	bhi.n	80137da <_scanf_float+0x96>
 80137ae:	2b2b      	cmp	r3, #43	; 0x2b
 80137b0:	f000 808c 	beq.w	80138cc <_scanf_float+0x188>
 80137b4:	f1b9 0f00 	cmp.w	r9, #0
 80137b8:	d003      	beq.n	80137c2 <_scanf_float+0x7e>
 80137ba:	6823      	ldr	r3, [r4, #0]
 80137bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80137c0:	6023      	str	r3, [r4, #0]
 80137c2:	3a01      	subs	r2, #1
 80137c4:	2a01      	cmp	r2, #1
 80137c6:	f200 80ea 	bhi.w	801399e <_scanf_float+0x25a>
 80137ca:	4545      	cmp	r5, r8
 80137cc:	f200 80dc 	bhi.w	8013988 <_scanf_float+0x244>
 80137d0:	2601      	movs	r6, #1
 80137d2:	4630      	mov	r0, r6
 80137d4:	b007      	add	sp, #28
 80137d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137da:	2b2e      	cmp	r3, #46	; 0x2e
 80137dc:	f000 809f 	beq.w	801391e <_scanf_float+0x1da>
 80137e0:	2b30      	cmp	r3, #48	; 0x30
 80137e2:	d1e7      	bne.n	80137b4 <_scanf_float+0x70>
 80137e4:	6820      	ldr	r0, [r4, #0]
 80137e6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80137ea:	d064      	beq.n	80138b6 <_scanf_float+0x172>
 80137ec:	9b01      	ldr	r3, [sp, #4]
 80137ee:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80137f2:	6020      	str	r0, [r4, #0]
 80137f4:	f109 0901 	add.w	r9, r9, #1
 80137f8:	b11b      	cbz	r3, 8013802 <_scanf_float+0xbe>
 80137fa:	3b01      	subs	r3, #1
 80137fc:	3101      	adds	r1, #1
 80137fe:	9301      	str	r3, [sp, #4]
 8013800:	60a1      	str	r1, [r4, #8]
 8013802:	68a3      	ldr	r3, [r4, #8]
 8013804:	3b01      	subs	r3, #1
 8013806:	60a3      	str	r3, [r4, #8]
 8013808:	6923      	ldr	r3, [r4, #16]
 801380a:	3301      	adds	r3, #1
 801380c:	6123      	str	r3, [r4, #16]
 801380e:	6873      	ldr	r3, [r6, #4]
 8013810:	3b01      	subs	r3, #1
 8013812:	2b00      	cmp	r3, #0
 8013814:	6073      	str	r3, [r6, #4]
 8013816:	f340 80ac 	ble.w	8013972 <_scanf_float+0x22e>
 801381a:	6833      	ldr	r3, [r6, #0]
 801381c:	3301      	adds	r3, #1
 801381e:	6033      	str	r3, [r6, #0]
 8013820:	e7b5      	b.n	801378e <_scanf_float+0x4a>
 8013822:	2b45      	cmp	r3, #69	; 0x45
 8013824:	f000 8085 	beq.w	8013932 <_scanf_float+0x1ee>
 8013828:	2b46      	cmp	r3, #70	; 0x46
 801382a:	d06a      	beq.n	8013902 <_scanf_float+0x1be>
 801382c:	2b41      	cmp	r3, #65	; 0x41
 801382e:	d1c1      	bne.n	80137b4 <_scanf_float+0x70>
 8013830:	2a01      	cmp	r2, #1
 8013832:	d1bf      	bne.n	80137b4 <_scanf_float+0x70>
 8013834:	2202      	movs	r2, #2
 8013836:	e046      	b.n	80138c6 <_scanf_float+0x182>
 8013838:	2b65      	cmp	r3, #101	; 0x65
 801383a:	d07a      	beq.n	8013932 <_scanf_float+0x1ee>
 801383c:	d818      	bhi.n	8013870 <_scanf_float+0x12c>
 801383e:	2b54      	cmp	r3, #84	; 0x54
 8013840:	d066      	beq.n	8013910 <_scanf_float+0x1cc>
 8013842:	d811      	bhi.n	8013868 <_scanf_float+0x124>
 8013844:	2b4e      	cmp	r3, #78	; 0x4e
 8013846:	d1b5      	bne.n	80137b4 <_scanf_float+0x70>
 8013848:	2a00      	cmp	r2, #0
 801384a:	d146      	bne.n	80138da <_scanf_float+0x196>
 801384c:	f1b9 0f00 	cmp.w	r9, #0
 8013850:	d145      	bne.n	80138de <_scanf_float+0x19a>
 8013852:	6821      	ldr	r1, [r4, #0]
 8013854:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013858:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801385c:	d13f      	bne.n	80138de <_scanf_float+0x19a>
 801385e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013862:	6021      	str	r1, [r4, #0]
 8013864:	2201      	movs	r2, #1
 8013866:	e02e      	b.n	80138c6 <_scanf_float+0x182>
 8013868:	2b59      	cmp	r3, #89	; 0x59
 801386a:	d01e      	beq.n	80138aa <_scanf_float+0x166>
 801386c:	2b61      	cmp	r3, #97	; 0x61
 801386e:	e7de      	b.n	801382e <_scanf_float+0xea>
 8013870:	2b6e      	cmp	r3, #110	; 0x6e
 8013872:	d0e9      	beq.n	8013848 <_scanf_float+0x104>
 8013874:	d815      	bhi.n	80138a2 <_scanf_float+0x15e>
 8013876:	2b66      	cmp	r3, #102	; 0x66
 8013878:	d043      	beq.n	8013902 <_scanf_float+0x1be>
 801387a:	2b69      	cmp	r3, #105	; 0x69
 801387c:	d19a      	bne.n	80137b4 <_scanf_float+0x70>
 801387e:	f1bb 0f00 	cmp.w	fp, #0
 8013882:	d138      	bne.n	80138f6 <_scanf_float+0x1b2>
 8013884:	f1b9 0f00 	cmp.w	r9, #0
 8013888:	d197      	bne.n	80137ba <_scanf_float+0x76>
 801388a:	6821      	ldr	r1, [r4, #0]
 801388c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013890:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013894:	d195      	bne.n	80137c2 <_scanf_float+0x7e>
 8013896:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801389a:	6021      	str	r1, [r4, #0]
 801389c:	f04f 0b01 	mov.w	fp, #1
 80138a0:	e011      	b.n	80138c6 <_scanf_float+0x182>
 80138a2:	2b74      	cmp	r3, #116	; 0x74
 80138a4:	d034      	beq.n	8013910 <_scanf_float+0x1cc>
 80138a6:	2b79      	cmp	r3, #121	; 0x79
 80138a8:	d184      	bne.n	80137b4 <_scanf_float+0x70>
 80138aa:	f1bb 0f07 	cmp.w	fp, #7
 80138ae:	d181      	bne.n	80137b4 <_scanf_float+0x70>
 80138b0:	f04f 0b08 	mov.w	fp, #8
 80138b4:	e007      	b.n	80138c6 <_scanf_float+0x182>
 80138b6:	eb12 0f0b 	cmn.w	r2, fp
 80138ba:	f47f af7b 	bne.w	80137b4 <_scanf_float+0x70>
 80138be:	6821      	ldr	r1, [r4, #0]
 80138c0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80138c4:	6021      	str	r1, [r4, #0]
 80138c6:	702b      	strb	r3, [r5, #0]
 80138c8:	3501      	adds	r5, #1
 80138ca:	e79a      	b.n	8013802 <_scanf_float+0xbe>
 80138cc:	6821      	ldr	r1, [r4, #0]
 80138ce:	0608      	lsls	r0, r1, #24
 80138d0:	f57f af70 	bpl.w	80137b4 <_scanf_float+0x70>
 80138d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80138d8:	e7f4      	b.n	80138c4 <_scanf_float+0x180>
 80138da:	2a02      	cmp	r2, #2
 80138dc:	d047      	beq.n	801396e <_scanf_float+0x22a>
 80138de:	f1bb 0f01 	cmp.w	fp, #1
 80138e2:	d003      	beq.n	80138ec <_scanf_float+0x1a8>
 80138e4:	f1bb 0f04 	cmp.w	fp, #4
 80138e8:	f47f af64 	bne.w	80137b4 <_scanf_float+0x70>
 80138ec:	f10b 0b01 	add.w	fp, fp, #1
 80138f0:	fa5f fb8b 	uxtb.w	fp, fp
 80138f4:	e7e7      	b.n	80138c6 <_scanf_float+0x182>
 80138f6:	f1bb 0f03 	cmp.w	fp, #3
 80138fa:	d0f7      	beq.n	80138ec <_scanf_float+0x1a8>
 80138fc:	f1bb 0f05 	cmp.w	fp, #5
 8013900:	e7f2      	b.n	80138e8 <_scanf_float+0x1a4>
 8013902:	f1bb 0f02 	cmp.w	fp, #2
 8013906:	f47f af55 	bne.w	80137b4 <_scanf_float+0x70>
 801390a:	f04f 0b03 	mov.w	fp, #3
 801390e:	e7da      	b.n	80138c6 <_scanf_float+0x182>
 8013910:	f1bb 0f06 	cmp.w	fp, #6
 8013914:	f47f af4e 	bne.w	80137b4 <_scanf_float+0x70>
 8013918:	f04f 0b07 	mov.w	fp, #7
 801391c:	e7d3      	b.n	80138c6 <_scanf_float+0x182>
 801391e:	6821      	ldr	r1, [r4, #0]
 8013920:	0588      	lsls	r0, r1, #22
 8013922:	f57f af47 	bpl.w	80137b4 <_scanf_float+0x70>
 8013926:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801392a:	6021      	str	r1, [r4, #0]
 801392c:	f8cd 9008 	str.w	r9, [sp, #8]
 8013930:	e7c9      	b.n	80138c6 <_scanf_float+0x182>
 8013932:	6821      	ldr	r1, [r4, #0]
 8013934:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013938:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801393c:	d006      	beq.n	801394c <_scanf_float+0x208>
 801393e:	0548      	lsls	r0, r1, #21
 8013940:	f57f af38 	bpl.w	80137b4 <_scanf_float+0x70>
 8013944:	f1b9 0f00 	cmp.w	r9, #0
 8013948:	f43f af3b 	beq.w	80137c2 <_scanf_float+0x7e>
 801394c:	0588      	lsls	r0, r1, #22
 801394e:	bf58      	it	pl
 8013950:	9802      	ldrpl	r0, [sp, #8]
 8013952:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013956:	bf58      	it	pl
 8013958:	eba9 0000 	subpl.w	r0, r9, r0
 801395c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013960:	bf58      	it	pl
 8013962:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013966:	6021      	str	r1, [r4, #0]
 8013968:	f04f 0900 	mov.w	r9, #0
 801396c:	e7ab      	b.n	80138c6 <_scanf_float+0x182>
 801396e:	2203      	movs	r2, #3
 8013970:	e7a9      	b.n	80138c6 <_scanf_float+0x182>
 8013972:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013976:	9205      	str	r2, [sp, #20]
 8013978:	4631      	mov	r1, r6
 801397a:	4638      	mov	r0, r7
 801397c:	4798      	blx	r3
 801397e:	9a05      	ldr	r2, [sp, #20]
 8013980:	2800      	cmp	r0, #0
 8013982:	f43f af04 	beq.w	801378e <_scanf_float+0x4a>
 8013986:	e715      	b.n	80137b4 <_scanf_float+0x70>
 8013988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801398c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013990:	4632      	mov	r2, r6
 8013992:	4638      	mov	r0, r7
 8013994:	4798      	blx	r3
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	3b01      	subs	r3, #1
 801399a:	6123      	str	r3, [r4, #16]
 801399c:	e715      	b.n	80137ca <_scanf_float+0x86>
 801399e:	f10b 33ff 	add.w	r3, fp, #4294967295
 80139a2:	2b06      	cmp	r3, #6
 80139a4:	d80a      	bhi.n	80139bc <_scanf_float+0x278>
 80139a6:	f1bb 0f02 	cmp.w	fp, #2
 80139aa:	d968      	bls.n	8013a7e <_scanf_float+0x33a>
 80139ac:	f1ab 0b03 	sub.w	fp, fp, #3
 80139b0:	fa5f fb8b 	uxtb.w	fp, fp
 80139b4:	eba5 0b0b 	sub.w	fp, r5, fp
 80139b8:	455d      	cmp	r5, fp
 80139ba:	d14b      	bne.n	8013a54 <_scanf_float+0x310>
 80139bc:	6823      	ldr	r3, [r4, #0]
 80139be:	05da      	lsls	r2, r3, #23
 80139c0:	d51f      	bpl.n	8013a02 <_scanf_float+0x2be>
 80139c2:	055b      	lsls	r3, r3, #21
 80139c4:	d468      	bmi.n	8013a98 <_scanf_float+0x354>
 80139c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80139ca:	6923      	ldr	r3, [r4, #16]
 80139cc:	2965      	cmp	r1, #101	; 0x65
 80139ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80139d2:	f105 3bff 	add.w	fp, r5, #4294967295
 80139d6:	6123      	str	r3, [r4, #16]
 80139d8:	d00d      	beq.n	80139f6 <_scanf_float+0x2b2>
 80139da:	2945      	cmp	r1, #69	; 0x45
 80139dc:	d00b      	beq.n	80139f6 <_scanf_float+0x2b2>
 80139de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139e2:	4632      	mov	r2, r6
 80139e4:	4638      	mov	r0, r7
 80139e6:	4798      	blx	r3
 80139e8:	6923      	ldr	r3, [r4, #16]
 80139ea:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80139ee:	3b01      	subs	r3, #1
 80139f0:	f1a5 0b02 	sub.w	fp, r5, #2
 80139f4:	6123      	str	r3, [r4, #16]
 80139f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139fa:	4632      	mov	r2, r6
 80139fc:	4638      	mov	r0, r7
 80139fe:	4798      	blx	r3
 8013a00:	465d      	mov	r5, fp
 8013a02:	6826      	ldr	r6, [r4, #0]
 8013a04:	f016 0610 	ands.w	r6, r6, #16
 8013a08:	d17a      	bne.n	8013b00 <_scanf_float+0x3bc>
 8013a0a:	702e      	strb	r6, [r5, #0]
 8013a0c:	6823      	ldr	r3, [r4, #0]
 8013a0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a16:	d142      	bne.n	8013a9e <_scanf_float+0x35a>
 8013a18:	9b02      	ldr	r3, [sp, #8]
 8013a1a:	eba9 0303 	sub.w	r3, r9, r3
 8013a1e:	425a      	negs	r2, r3
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d149      	bne.n	8013ab8 <_scanf_float+0x374>
 8013a24:	2200      	movs	r2, #0
 8013a26:	4641      	mov	r1, r8
 8013a28:	4638      	mov	r0, r7
 8013a2a:	f000 fead 	bl	8014788 <_strtod_r>
 8013a2e:	6825      	ldr	r5, [r4, #0]
 8013a30:	f8da 3000 	ldr.w	r3, [sl]
 8013a34:	f015 0f02 	tst.w	r5, #2
 8013a38:	f103 0204 	add.w	r2, r3, #4
 8013a3c:	ec59 8b10 	vmov	r8, r9, d0
 8013a40:	f8ca 2000 	str.w	r2, [sl]
 8013a44:	d043      	beq.n	8013ace <_scanf_float+0x38a>
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	e9c3 8900 	strd	r8, r9, [r3]
 8013a4c:	68e3      	ldr	r3, [r4, #12]
 8013a4e:	3301      	adds	r3, #1
 8013a50:	60e3      	str	r3, [r4, #12]
 8013a52:	e6be      	b.n	80137d2 <_scanf_float+0x8e>
 8013a54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	4638      	mov	r0, r7
 8013a60:	4798      	blx	r3
 8013a62:	6923      	ldr	r3, [r4, #16]
 8013a64:	3b01      	subs	r3, #1
 8013a66:	6123      	str	r3, [r4, #16]
 8013a68:	e7a6      	b.n	80139b8 <_scanf_float+0x274>
 8013a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a6e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013a72:	4632      	mov	r2, r6
 8013a74:	4638      	mov	r0, r7
 8013a76:	4798      	blx	r3
 8013a78:	6923      	ldr	r3, [r4, #16]
 8013a7a:	3b01      	subs	r3, #1
 8013a7c:	6123      	str	r3, [r4, #16]
 8013a7e:	4545      	cmp	r5, r8
 8013a80:	d8f3      	bhi.n	8013a6a <_scanf_float+0x326>
 8013a82:	e6a5      	b.n	80137d0 <_scanf_float+0x8c>
 8013a84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013a8c:	4632      	mov	r2, r6
 8013a8e:	4638      	mov	r0, r7
 8013a90:	4798      	blx	r3
 8013a92:	6923      	ldr	r3, [r4, #16]
 8013a94:	3b01      	subs	r3, #1
 8013a96:	6123      	str	r3, [r4, #16]
 8013a98:	4545      	cmp	r5, r8
 8013a9a:	d8f3      	bhi.n	8013a84 <_scanf_float+0x340>
 8013a9c:	e698      	b.n	80137d0 <_scanf_float+0x8c>
 8013a9e:	9b03      	ldr	r3, [sp, #12]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d0bf      	beq.n	8013a24 <_scanf_float+0x2e0>
 8013aa4:	9904      	ldr	r1, [sp, #16]
 8013aa6:	230a      	movs	r3, #10
 8013aa8:	4632      	mov	r2, r6
 8013aaa:	3101      	adds	r1, #1
 8013aac:	4638      	mov	r0, r7
 8013aae:	f000 fef7 	bl	80148a0 <_strtol_r>
 8013ab2:	9b03      	ldr	r3, [sp, #12]
 8013ab4:	9d04      	ldr	r5, [sp, #16]
 8013ab6:	1ac2      	subs	r2, r0, r3
 8013ab8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013abc:	429d      	cmp	r5, r3
 8013abe:	bf28      	it	cs
 8013ac0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013ac4:	490f      	ldr	r1, [pc, #60]	; (8013b04 <_scanf_float+0x3c0>)
 8013ac6:	4628      	mov	r0, r5
 8013ac8:	f000 f824 	bl	8013b14 <siprintf>
 8013acc:	e7aa      	b.n	8013a24 <_scanf_float+0x2e0>
 8013ace:	f015 0504 	ands.w	r5, r5, #4
 8013ad2:	d1b8      	bne.n	8013a46 <_scanf_float+0x302>
 8013ad4:	681f      	ldr	r7, [r3, #0]
 8013ad6:	ee10 2a10 	vmov	r2, s0
 8013ada:	464b      	mov	r3, r9
 8013adc:	ee10 0a10 	vmov	r0, s0
 8013ae0:	4649      	mov	r1, r9
 8013ae2:	f7ed f84b 	bl	8000b7c <__aeabi_dcmpun>
 8013ae6:	b128      	cbz	r0, 8013af4 <_scanf_float+0x3b0>
 8013ae8:	4628      	mov	r0, r5
 8013aea:	f000 f80d 	bl	8013b08 <nanf>
 8013aee:	ed87 0a00 	vstr	s0, [r7]
 8013af2:	e7ab      	b.n	8013a4c <_scanf_float+0x308>
 8013af4:	4640      	mov	r0, r8
 8013af6:	4649      	mov	r1, r9
 8013af8:	f7ed f89e 	bl	8000c38 <__aeabi_d2f>
 8013afc:	6038      	str	r0, [r7, #0]
 8013afe:	e7a5      	b.n	8013a4c <_scanf_float+0x308>
 8013b00:	2600      	movs	r6, #0
 8013b02:	e666      	b.n	80137d2 <_scanf_float+0x8e>
 8013b04:	0801a2a2 	.word	0x0801a2a2

08013b08 <nanf>:
 8013b08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013b10 <nanf+0x8>
 8013b0c:	4770      	bx	lr
 8013b0e:	bf00      	nop
 8013b10:	7fc00000 	.word	0x7fc00000

08013b14 <siprintf>:
 8013b14:	b40e      	push	{r1, r2, r3}
 8013b16:	b500      	push	{lr}
 8013b18:	b09c      	sub	sp, #112	; 0x70
 8013b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8013b1c:	9002      	str	r0, [sp, #8]
 8013b1e:	9006      	str	r0, [sp, #24]
 8013b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b24:	4809      	ldr	r0, [pc, #36]	; (8013b4c <siprintf+0x38>)
 8013b26:	9107      	str	r1, [sp, #28]
 8013b28:	9104      	str	r1, [sp, #16]
 8013b2a:	4909      	ldr	r1, [pc, #36]	; (8013b50 <siprintf+0x3c>)
 8013b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b30:	9105      	str	r1, [sp, #20]
 8013b32:	6800      	ldr	r0, [r0, #0]
 8013b34:	9301      	str	r3, [sp, #4]
 8013b36:	a902      	add	r1, sp, #8
 8013b38:	f002 fda6 	bl	8016688 <_svfiprintf_r>
 8013b3c:	9b02      	ldr	r3, [sp, #8]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	701a      	strb	r2, [r3, #0]
 8013b42:	b01c      	add	sp, #112	; 0x70
 8013b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b48:	b003      	add	sp, #12
 8013b4a:	4770      	bx	lr
 8013b4c:	20002d20 	.word	0x20002d20
 8013b50:	ffff0208 	.word	0xffff0208

08013b54 <strcpy>:
 8013b54:	4603      	mov	r3, r0
 8013b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b5a:	f803 2b01 	strb.w	r2, [r3], #1
 8013b5e:	2a00      	cmp	r2, #0
 8013b60:	d1f9      	bne.n	8013b56 <strcpy+0x2>
 8013b62:	4770      	bx	lr

08013b64 <sulp>:
 8013b64:	b570      	push	{r4, r5, r6, lr}
 8013b66:	4604      	mov	r4, r0
 8013b68:	460d      	mov	r5, r1
 8013b6a:	ec45 4b10 	vmov	d0, r4, r5
 8013b6e:	4616      	mov	r6, r2
 8013b70:	f002 fb46 	bl	8016200 <__ulp>
 8013b74:	ec51 0b10 	vmov	r0, r1, d0
 8013b78:	b17e      	cbz	r6, 8013b9a <sulp+0x36>
 8013b7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	dd09      	ble.n	8013b9a <sulp+0x36>
 8013b86:	051b      	lsls	r3, r3, #20
 8013b88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b8c:	2400      	movs	r4, #0
 8013b8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013b92:	4622      	mov	r2, r4
 8013b94:	462b      	mov	r3, r5
 8013b96:	f7ec fd57 	bl	8000648 <__aeabi_dmul>
 8013b9a:	bd70      	pop	{r4, r5, r6, pc}
 8013b9c:	0000      	movs	r0, r0
	...

08013ba0 <_strtod_l>:
 8013ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	461f      	mov	r7, r3
 8013ba6:	b0a1      	sub	sp, #132	; 0x84
 8013ba8:	2300      	movs	r3, #0
 8013baa:	4681      	mov	r9, r0
 8013bac:	4638      	mov	r0, r7
 8013bae:	460e      	mov	r6, r1
 8013bb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8013bb2:	931c      	str	r3, [sp, #112]	; 0x70
 8013bb4:	f002 f82d 	bl	8015c12 <__localeconv_l>
 8013bb8:	4680      	mov	r8, r0
 8013bba:	6800      	ldr	r0, [r0, #0]
 8013bbc:	f7ec fb30 	bl	8000220 <strlen>
 8013bc0:	f04f 0a00 	mov.w	sl, #0
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	f04f 0b00 	mov.w	fp, #0
 8013bca:	961b      	str	r6, [sp, #108]	; 0x6c
 8013bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bce:	781a      	ldrb	r2, [r3, #0]
 8013bd0:	2a0d      	cmp	r2, #13
 8013bd2:	d832      	bhi.n	8013c3a <_strtod_l+0x9a>
 8013bd4:	2a09      	cmp	r2, #9
 8013bd6:	d236      	bcs.n	8013c46 <_strtod_l+0xa6>
 8013bd8:	2a00      	cmp	r2, #0
 8013bda:	d03e      	beq.n	8013c5a <_strtod_l+0xba>
 8013bdc:	2300      	movs	r3, #0
 8013bde:	930d      	str	r3, [sp, #52]	; 0x34
 8013be0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013be2:	782b      	ldrb	r3, [r5, #0]
 8013be4:	2b30      	cmp	r3, #48	; 0x30
 8013be6:	f040 80ac 	bne.w	8013d42 <_strtod_l+0x1a2>
 8013bea:	786b      	ldrb	r3, [r5, #1]
 8013bec:	2b58      	cmp	r3, #88	; 0x58
 8013bee:	d001      	beq.n	8013bf4 <_strtod_l+0x54>
 8013bf0:	2b78      	cmp	r3, #120	; 0x78
 8013bf2:	d167      	bne.n	8013cc4 <_strtod_l+0x124>
 8013bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bf6:	9301      	str	r3, [sp, #4]
 8013bf8:	ab1c      	add	r3, sp, #112	; 0x70
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	9702      	str	r7, [sp, #8]
 8013bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8013c00:	4a88      	ldr	r2, [pc, #544]	; (8013e24 <_strtod_l+0x284>)
 8013c02:	a91b      	add	r1, sp, #108	; 0x6c
 8013c04:	4648      	mov	r0, r9
 8013c06:	f001 fd2a 	bl	801565e <__gethex>
 8013c0a:	f010 0407 	ands.w	r4, r0, #7
 8013c0e:	4606      	mov	r6, r0
 8013c10:	d005      	beq.n	8013c1e <_strtod_l+0x7e>
 8013c12:	2c06      	cmp	r4, #6
 8013c14:	d12b      	bne.n	8013c6e <_strtod_l+0xce>
 8013c16:	3501      	adds	r5, #1
 8013c18:	2300      	movs	r3, #0
 8013c1a:	951b      	str	r5, [sp, #108]	; 0x6c
 8013c1c:	930d      	str	r3, [sp, #52]	; 0x34
 8013c1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	f040 859a 	bne.w	801475a <_strtod_l+0xbba>
 8013c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c28:	b1e3      	cbz	r3, 8013c64 <_strtod_l+0xc4>
 8013c2a:	4652      	mov	r2, sl
 8013c2c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c30:	ec43 2b10 	vmov	d0, r2, r3
 8013c34:	b021      	add	sp, #132	; 0x84
 8013c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c3a:	2a2b      	cmp	r2, #43	; 0x2b
 8013c3c:	d015      	beq.n	8013c6a <_strtod_l+0xca>
 8013c3e:	2a2d      	cmp	r2, #45	; 0x2d
 8013c40:	d004      	beq.n	8013c4c <_strtod_l+0xac>
 8013c42:	2a20      	cmp	r2, #32
 8013c44:	d1ca      	bne.n	8013bdc <_strtod_l+0x3c>
 8013c46:	3301      	adds	r3, #1
 8013c48:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c4a:	e7bf      	b.n	8013bcc <_strtod_l+0x2c>
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	920d      	str	r2, [sp, #52]	; 0x34
 8013c50:	1c5a      	adds	r2, r3, #1
 8013c52:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c54:	785b      	ldrb	r3, [r3, #1]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d1c2      	bne.n	8013be0 <_strtod_l+0x40>
 8013c5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013c5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f040 8579 	bne.w	8014756 <_strtod_l+0xbb6>
 8013c64:	4652      	mov	r2, sl
 8013c66:	465b      	mov	r3, fp
 8013c68:	e7e2      	b.n	8013c30 <_strtod_l+0x90>
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	e7ef      	b.n	8013c4e <_strtod_l+0xae>
 8013c6e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013c70:	b13a      	cbz	r2, 8013c82 <_strtod_l+0xe2>
 8013c72:	2135      	movs	r1, #53	; 0x35
 8013c74:	a81e      	add	r0, sp, #120	; 0x78
 8013c76:	f002 fbbb 	bl	80163f0 <__copybits>
 8013c7a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c7c:	4648      	mov	r0, r9
 8013c7e:	f002 f827 	bl	8015cd0 <_Bfree>
 8013c82:	3c01      	subs	r4, #1
 8013c84:	2c04      	cmp	r4, #4
 8013c86:	d806      	bhi.n	8013c96 <_strtod_l+0xf6>
 8013c88:	e8df f004 	tbb	[pc, r4]
 8013c8c:	1714030a 	.word	0x1714030a
 8013c90:	0a          	.byte	0x0a
 8013c91:	00          	.byte	0x00
 8013c92:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013c96:	0730      	lsls	r0, r6, #28
 8013c98:	d5c1      	bpl.n	8013c1e <_strtod_l+0x7e>
 8013c9a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013c9e:	e7be      	b.n	8013c1e <_strtod_l+0x7e>
 8013ca0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013ca4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013ca6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013caa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013cae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013cb2:	e7f0      	b.n	8013c96 <_strtod_l+0xf6>
 8013cb4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013e28 <_strtod_l+0x288>
 8013cb8:	e7ed      	b.n	8013c96 <_strtod_l+0xf6>
 8013cba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013cbe:	f04f 3aff 	mov.w	sl, #4294967295
 8013cc2:	e7e8      	b.n	8013c96 <_strtod_l+0xf6>
 8013cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cc6:	1c5a      	adds	r2, r3, #1
 8013cc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cca:	785b      	ldrb	r3, [r3, #1]
 8013ccc:	2b30      	cmp	r3, #48	; 0x30
 8013cce:	d0f9      	beq.n	8013cc4 <_strtod_l+0x124>
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d0a4      	beq.n	8013c1e <_strtod_l+0x7e>
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	2500      	movs	r5, #0
 8013cd8:	9306      	str	r3, [sp, #24]
 8013cda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cdc:	9308      	str	r3, [sp, #32]
 8013cde:	9507      	str	r5, [sp, #28]
 8013ce0:	9505      	str	r5, [sp, #20]
 8013ce2:	220a      	movs	r2, #10
 8013ce4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013ce6:	7807      	ldrb	r7, [r0, #0]
 8013ce8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013cec:	b2d9      	uxtb	r1, r3
 8013cee:	2909      	cmp	r1, #9
 8013cf0:	d929      	bls.n	8013d46 <_strtod_l+0x1a6>
 8013cf2:	4622      	mov	r2, r4
 8013cf4:	f8d8 1000 	ldr.w	r1, [r8]
 8013cf8:	f002 fdce 	bl	8016898 <strncmp>
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d031      	beq.n	8013d64 <_strtod_l+0x1c4>
 8013d00:	2000      	movs	r0, #0
 8013d02:	9c05      	ldr	r4, [sp, #20]
 8013d04:	9004      	str	r0, [sp, #16]
 8013d06:	463b      	mov	r3, r7
 8013d08:	4602      	mov	r2, r0
 8013d0a:	2b65      	cmp	r3, #101	; 0x65
 8013d0c:	d001      	beq.n	8013d12 <_strtod_l+0x172>
 8013d0e:	2b45      	cmp	r3, #69	; 0x45
 8013d10:	d114      	bne.n	8013d3c <_strtod_l+0x19c>
 8013d12:	b924      	cbnz	r4, 8013d1e <_strtod_l+0x17e>
 8013d14:	b910      	cbnz	r0, 8013d1c <_strtod_l+0x17c>
 8013d16:	9b06      	ldr	r3, [sp, #24]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d09e      	beq.n	8013c5a <_strtod_l+0xba>
 8013d1c:	2400      	movs	r4, #0
 8013d1e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013d20:	1c73      	adds	r3, r6, #1
 8013d22:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d24:	7873      	ldrb	r3, [r6, #1]
 8013d26:	2b2b      	cmp	r3, #43	; 0x2b
 8013d28:	d078      	beq.n	8013e1c <_strtod_l+0x27c>
 8013d2a:	2b2d      	cmp	r3, #45	; 0x2d
 8013d2c:	d070      	beq.n	8013e10 <_strtod_l+0x270>
 8013d2e:	f04f 0c00 	mov.w	ip, #0
 8013d32:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013d36:	2f09      	cmp	r7, #9
 8013d38:	d97c      	bls.n	8013e34 <_strtod_l+0x294>
 8013d3a:	961b      	str	r6, [sp, #108]	; 0x6c
 8013d3c:	f04f 0e00 	mov.w	lr, #0
 8013d40:	e09a      	b.n	8013e78 <_strtod_l+0x2d8>
 8013d42:	2300      	movs	r3, #0
 8013d44:	e7c7      	b.n	8013cd6 <_strtod_l+0x136>
 8013d46:	9905      	ldr	r1, [sp, #20]
 8013d48:	2908      	cmp	r1, #8
 8013d4a:	bfdd      	ittte	le
 8013d4c:	9907      	ldrle	r1, [sp, #28]
 8013d4e:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d52:	9307      	strle	r3, [sp, #28]
 8013d54:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013d58:	9b05      	ldr	r3, [sp, #20]
 8013d5a:	3001      	adds	r0, #1
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	9305      	str	r3, [sp, #20]
 8013d60:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d62:	e7bf      	b.n	8013ce4 <_strtod_l+0x144>
 8013d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d66:	191a      	adds	r2, r3, r4
 8013d68:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d6a:	9a05      	ldr	r2, [sp, #20]
 8013d6c:	5d1b      	ldrb	r3, [r3, r4]
 8013d6e:	2a00      	cmp	r2, #0
 8013d70:	d037      	beq.n	8013de2 <_strtod_l+0x242>
 8013d72:	9c05      	ldr	r4, [sp, #20]
 8013d74:	4602      	mov	r2, r0
 8013d76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013d7a:	2909      	cmp	r1, #9
 8013d7c:	d913      	bls.n	8013da6 <_strtod_l+0x206>
 8013d7e:	2101      	movs	r1, #1
 8013d80:	9104      	str	r1, [sp, #16]
 8013d82:	e7c2      	b.n	8013d0a <_strtod_l+0x16a>
 8013d84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d86:	1c5a      	adds	r2, r3, #1
 8013d88:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d8a:	785b      	ldrb	r3, [r3, #1]
 8013d8c:	3001      	adds	r0, #1
 8013d8e:	2b30      	cmp	r3, #48	; 0x30
 8013d90:	d0f8      	beq.n	8013d84 <_strtod_l+0x1e4>
 8013d92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013d96:	2a08      	cmp	r2, #8
 8013d98:	f200 84e4 	bhi.w	8014764 <_strtod_l+0xbc4>
 8013d9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013d9e:	9208      	str	r2, [sp, #32]
 8013da0:	4602      	mov	r2, r0
 8013da2:	2000      	movs	r0, #0
 8013da4:	4604      	mov	r4, r0
 8013da6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013daa:	f100 0101 	add.w	r1, r0, #1
 8013dae:	d012      	beq.n	8013dd6 <_strtod_l+0x236>
 8013db0:	440a      	add	r2, r1
 8013db2:	eb00 0c04 	add.w	ip, r0, r4
 8013db6:	4621      	mov	r1, r4
 8013db8:	270a      	movs	r7, #10
 8013dba:	458c      	cmp	ip, r1
 8013dbc:	d113      	bne.n	8013de6 <_strtod_l+0x246>
 8013dbe:	1821      	adds	r1, r4, r0
 8013dc0:	2908      	cmp	r1, #8
 8013dc2:	f104 0401 	add.w	r4, r4, #1
 8013dc6:	4404      	add	r4, r0
 8013dc8:	dc19      	bgt.n	8013dfe <_strtod_l+0x25e>
 8013dca:	9b07      	ldr	r3, [sp, #28]
 8013dcc:	210a      	movs	r1, #10
 8013dce:	fb01 e303 	mla	r3, r1, r3, lr
 8013dd2:	9307      	str	r3, [sp, #28]
 8013dd4:	2100      	movs	r1, #0
 8013dd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dd8:	1c58      	adds	r0, r3, #1
 8013dda:	901b      	str	r0, [sp, #108]	; 0x6c
 8013ddc:	785b      	ldrb	r3, [r3, #1]
 8013dde:	4608      	mov	r0, r1
 8013de0:	e7c9      	b.n	8013d76 <_strtod_l+0x1d6>
 8013de2:	9805      	ldr	r0, [sp, #20]
 8013de4:	e7d3      	b.n	8013d8e <_strtod_l+0x1ee>
 8013de6:	2908      	cmp	r1, #8
 8013de8:	f101 0101 	add.w	r1, r1, #1
 8013dec:	dc03      	bgt.n	8013df6 <_strtod_l+0x256>
 8013dee:	9b07      	ldr	r3, [sp, #28]
 8013df0:	437b      	muls	r3, r7
 8013df2:	9307      	str	r3, [sp, #28]
 8013df4:	e7e1      	b.n	8013dba <_strtod_l+0x21a>
 8013df6:	2910      	cmp	r1, #16
 8013df8:	bfd8      	it	le
 8013dfa:	437d      	mulle	r5, r7
 8013dfc:	e7dd      	b.n	8013dba <_strtod_l+0x21a>
 8013dfe:	2c10      	cmp	r4, #16
 8013e00:	bfdc      	itt	le
 8013e02:	210a      	movle	r1, #10
 8013e04:	fb01 e505 	mlale	r5, r1, r5, lr
 8013e08:	e7e4      	b.n	8013dd4 <_strtod_l+0x234>
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	9304      	str	r3, [sp, #16]
 8013e0e:	e781      	b.n	8013d14 <_strtod_l+0x174>
 8013e10:	f04f 0c01 	mov.w	ip, #1
 8013e14:	1cb3      	adds	r3, r6, #2
 8013e16:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e18:	78b3      	ldrb	r3, [r6, #2]
 8013e1a:	e78a      	b.n	8013d32 <_strtod_l+0x192>
 8013e1c:	f04f 0c00 	mov.w	ip, #0
 8013e20:	e7f8      	b.n	8013e14 <_strtod_l+0x274>
 8013e22:	bf00      	nop
 8013e24:	0801a2a8 	.word	0x0801a2a8
 8013e28:	7ff00000 	.word	0x7ff00000
 8013e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e2e:	1c5f      	adds	r7, r3, #1
 8013e30:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e32:	785b      	ldrb	r3, [r3, #1]
 8013e34:	2b30      	cmp	r3, #48	; 0x30
 8013e36:	d0f9      	beq.n	8013e2c <_strtod_l+0x28c>
 8013e38:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013e3c:	2f08      	cmp	r7, #8
 8013e3e:	f63f af7d 	bhi.w	8013d3c <_strtod_l+0x19c>
 8013e42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e48:	930a      	str	r3, [sp, #40]	; 0x28
 8013e4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e4c:	1c5f      	adds	r7, r3, #1
 8013e4e:	971b      	str	r7, [sp, #108]	; 0x6c
 8013e50:	785b      	ldrb	r3, [r3, #1]
 8013e52:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013e56:	f1b8 0f09 	cmp.w	r8, #9
 8013e5a:	d937      	bls.n	8013ecc <_strtod_l+0x32c>
 8013e5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e5e:	1a7f      	subs	r7, r7, r1
 8013e60:	2f08      	cmp	r7, #8
 8013e62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013e66:	dc37      	bgt.n	8013ed8 <_strtod_l+0x338>
 8013e68:	45be      	cmp	lr, r7
 8013e6a:	bfa8      	it	ge
 8013e6c:	46be      	movge	lr, r7
 8013e6e:	f1bc 0f00 	cmp.w	ip, #0
 8013e72:	d001      	beq.n	8013e78 <_strtod_l+0x2d8>
 8013e74:	f1ce 0e00 	rsb	lr, lr, #0
 8013e78:	2c00      	cmp	r4, #0
 8013e7a:	d151      	bne.n	8013f20 <_strtod_l+0x380>
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	f47f aece 	bne.w	8013c1e <_strtod_l+0x7e>
 8013e82:	9a06      	ldr	r2, [sp, #24]
 8013e84:	2a00      	cmp	r2, #0
 8013e86:	f47f aeca 	bne.w	8013c1e <_strtod_l+0x7e>
 8013e8a:	9a04      	ldr	r2, [sp, #16]
 8013e8c:	2a00      	cmp	r2, #0
 8013e8e:	f47f aee4 	bne.w	8013c5a <_strtod_l+0xba>
 8013e92:	2b4e      	cmp	r3, #78	; 0x4e
 8013e94:	d027      	beq.n	8013ee6 <_strtod_l+0x346>
 8013e96:	dc21      	bgt.n	8013edc <_strtod_l+0x33c>
 8013e98:	2b49      	cmp	r3, #73	; 0x49
 8013e9a:	f47f aede 	bne.w	8013c5a <_strtod_l+0xba>
 8013e9e:	49a0      	ldr	r1, [pc, #640]	; (8014120 <_strtod_l+0x580>)
 8013ea0:	a81b      	add	r0, sp, #108	; 0x6c
 8013ea2:	f001 fe0f 	bl	8015ac4 <__match>
 8013ea6:	2800      	cmp	r0, #0
 8013ea8:	f43f aed7 	beq.w	8013c5a <_strtod_l+0xba>
 8013eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013eae:	499d      	ldr	r1, [pc, #628]	; (8014124 <_strtod_l+0x584>)
 8013eb0:	3b01      	subs	r3, #1
 8013eb2:	a81b      	add	r0, sp, #108	; 0x6c
 8013eb4:	931b      	str	r3, [sp, #108]	; 0x6c
 8013eb6:	f001 fe05 	bl	8015ac4 <__match>
 8013eba:	b910      	cbnz	r0, 8013ec2 <_strtod_l+0x322>
 8013ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ec2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014138 <_strtod_l+0x598>
 8013ec6:	f04f 0a00 	mov.w	sl, #0
 8013eca:	e6a8      	b.n	8013c1e <_strtod_l+0x7e>
 8013ecc:	210a      	movs	r1, #10
 8013ece:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013ed2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013ed6:	e7b8      	b.n	8013e4a <_strtod_l+0x2aa>
 8013ed8:	46be      	mov	lr, r7
 8013eda:	e7c8      	b.n	8013e6e <_strtod_l+0x2ce>
 8013edc:	2b69      	cmp	r3, #105	; 0x69
 8013ede:	d0de      	beq.n	8013e9e <_strtod_l+0x2fe>
 8013ee0:	2b6e      	cmp	r3, #110	; 0x6e
 8013ee2:	f47f aeba 	bne.w	8013c5a <_strtod_l+0xba>
 8013ee6:	4990      	ldr	r1, [pc, #576]	; (8014128 <_strtod_l+0x588>)
 8013ee8:	a81b      	add	r0, sp, #108	; 0x6c
 8013eea:	f001 fdeb 	bl	8015ac4 <__match>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	f43f aeb3 	beq.w	8013c5a <_strtod_l+0xba>
 8013ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	2b28      	cmp	r3, #40	; 0x28
 8013efa:	d10e      	bne.n	8013f1a <_strtod_l+0x37a>
 8013efc:	aa1e      	add	r2, sp, #120	; 0x78
 8013efe:	498b      	ldr	r1, [pc, #556]	; (801412c <_strtod_l+0x58c>)
 8013f00:	a81b      	add	r0, sp, #108	; 0x6c
 8013f02:	f001 fdf3 	bl	8015aec <__hexnan>
 8013f06:	2805      	cmp	r0, #5
 8013f08:	d107      	bne.n	8013f1a <_strtod_l+0x37a>
 8013f0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013f0c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013f10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013f14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013f18:	e681      	b.n	8013c1e <_strtod_l+0x7e>
 8013f1a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014140 <_strtod_l+0x5a0>
 8013f1e:	e7d2      	b.n	8013ec6 <_strtod_l+0x326>
 8013f20:	ebae 0302 	sub.w	r3, lr, r2
 8013f24:	9306      	str	r3, [sp, #24]
 8013f26:	9b05      	ldr	r3, [sp, #20]
 8013f28:	9807      	ldr	r0, [sp, #28]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	bf08      	it	eq
 8013f2e:	4623      	moveq	r3, r4
 8013f30:	2c10      	cmp	r4, #16
 8013f32:	9305      	str	r3, [sp, #20]
 8013f34:	46a0      	mov	r8, r4
 8013f36:	bfa8      	it	ge
 8013f38:	f04f 0810 	movge.w	r8, #16
 8013f3c:	f7ec fb0a 	bl	8000554 <__aeabi_ui2d>
 8013f40:	2c09      	cmp	r4, #9
 8013f42:	4682      	mov	sl, r0
 8013f44:	468b      	mov	fp, r1
 8013f46:	dc13      	bgt.n	8013f70 <_strtod_l+0x3d0>
 8013f48:	9b06      	ldr	r3, [sp, #24]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	f43f ae67 	beq.w	8013c1e <_strtod_l+0x7e>
 8013f50:	9b06      	ldr	r3, [sp, #24]
 8013f52:	dd7a      	ble.n	801404a <_strtod_l+0x4aa>
 8013f54:	2b16      	cmp	r3, #22
 8013f56:	dc61      	bgt.n	801401c <_strtod_l+0x47c>
 8013f58:	4a75      	ldr	r2, [pc, #468]	; (8014130 <_strtod_l+0x590>)
 8013f5a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013f5e:	e9de 0100 	ldrd	r0, r1, [lr]
 8013f62:	4652      	mov	r2, sl
 8013f64:	465b      	mov	r3, fp
 8013f66:	f7ec fb6f 	bl	8000648 <__aeabi_dmul>
 8013f6a:	4682      	mov	sl, r0
 8013f6c:	468b      	mov	fp, r1
 8013f6e:	e656      	b.n	8013c1e <_strtod_l+0x7e>
 8013f70:	4b6f      	ldr	r3, [pc, #444]	; (8014130 <_strtod_l+0x590>)
 8013f72:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f7a:	f7ec fb65 	bl	8000648 <__aeabi_dmul>
 8013f7e:	4606      	mov	r6, r0
 8013f80:	4628      	mov	r0, r5
 8013f82:	460f      	mov	r7, r1
 8013f84:	f7ec fae6 	bl	8000554 <__aeabi_ui2d>
 8013f88:	4602      	mov	r2, r0
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	4630      	mov	r0, r6
 8013f8e:	4639      	mov	r1, r7
 8013f90:	f7ec f9a4 	bl	80002dc <__adddf3>
 8013f94:	2c0f      	cmp	r4, #15
 8013f96:	4682      	mov	sl, r0
 8013f98:	468b      	mov	fp, r1
 8013f9a:	ddd5      	ble.n	8013f48 <_strtod_l+0x3a8>
 8013f9c:	9b06      	ldr	r3, [sp, #24]
 8013f9e:	eba4 0808 	sub.w	r8, r4, r8
 8013fa2:	4498      	add	r8, r3
 8013fa4:	f1b8 0f00 	cmp.w	r8, #0
 8013fa8:	f340 8096 	ble.w	80140d8 <_strtod_l+0x538>
 8013fac:	f018 030f 	ands.w	r3, r8, #15
 8013fb0:	d00a      	beq.n	8013fc8 <_strtod_l+0x428>
 8013fb2:	495f      	ldr	r1, [pc, #380]	; (8014130 <_strtod_l+0x590>)
 8013fb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013fb8:	4652      	mov	r2, sl
 8013fba:	465b      	mov	r3, fp
 8013fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fc0:	f7ec fb42 	bl	8000648 <__aeabi_dmul>
 8013fc4:	4682      	mov	sl, r0
 8013fc6:	468b      	mov	fp, r1
 8013fc8:	f038 080f 	bics.w	r8, r8, #15
 8013fcc:	d073      	beq.n	80140b6 <_strtod_l+0x516>
 8013fce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013fd2:	dd47      	ble.n	8014064 <_strtod_l+0x4c4>
 8013fd4:	2400      	movs	r4, #0
 8013fd6:	46a0      	mov	r8, r4
 8013fd8:	9407      	str	r4, [sp, #28]
 8013fda:	9405      	str	r4, [sp, #20]
 8013fdc:	2322      	movs	r3, #34	; 0x22
 8013fde:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014138 <_strtod_l+0x598>
 8013fe2:	f8c9 3000 	str.w	r3, [r9]
 8013fe6:	f04f 0a00 	mov.w	sl, #0
 8013fea:	9b07      	ldr	r3, [sp, #28]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	f43f ae16 	beq.w	8013c1e <_strtod_l+0x7e>
 8013ff2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ff4:	4648      	mov	r0, r9
 8013ff6:	f001 fe6b 	bl	8015cd0 <_Bfree>
 8013ffa:	9905      	ldr	r1, [sp, #20]
 8013ffc:	4648      	mov	r0, r9
 8013ffe:	f001 fe67 	bl	8015cd0 <_Bfree>
 8014002:	4641      	mov	r1, r8
 8014004:	4648      	mov	r0, r9
 8014006:	f001 fe63 	bl	8015cd0 <_Bfree>
 801400a:	9907      	ldr	r1, [sp, #28]
 801400c:	4648      	mov	r0, r9
 801400e:	f001 fe5f 	bl	8015cd0 <_Bfree>
 8014012:	4621      	mov	r1, r4
 8014014:	4648      	mov	r0, r9
 8014016:	f001 fe5b 	bl	8015cd0 <_Bfree>
 801401a:	e600      	b.n	8013c1e <_strtod_l+0x7e>
 801401c:	9a06      	ldr	r2, [sp, #24]
 801401e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014022:	4293      	cmp	r3, r2
 8014024:	dbba      	blt.n	8013f9c <_strtod_l+0x3fc>
 8014026:	4d42      	ldr	r5, [pc, #264]	; (8014130 <_strtod_l+0x590>)
 8014028:	f1c4 040f 	rsb	r4, r4, #15
 801402c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014030:	4652      	mov	r2, sl
 8014032:	465b      	mov	r3, fp
 8014034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014038:	f7ec fb06 	bl	8000648 <__aeabi_dmul>
 801403c:	9b06      	ldr	r3, [sp, #24]
 801403e:	1b1c      	subs	r4, r3, r4
 8014040:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014044:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014048:	e78d      	b.n	8013f66 <_strtod_l+0x3c6>
 801404a:	f113 0f16 	cmn.w	r3, #22
 801404e:	dba5      	blt.n	8013f9c <_strtod_l+0x3fc>
 8014050:	4a37      	ldr	r2, [pc, #220]	; (8014130 <_strtod_l+0x590>)
 8014052:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014056:	e9d2 2300 	ldrd	r2, r3, [r2]
 801405a:	4650      	mov	r0, sl
 801405c:	4659      	mov	r1, fp
 801405e:	f7ec fc1d 	bl	800089c <__aeabi_ddiv>
 8014062:	e782      	b.n	8013f6a <_strtod_l+0x3ca>
 8014064:	2300      	movs	r3, #0
 8014066:	4e33      	ldr	r6, [pc, #204]	; (8014134 <_strtod_l+0x594>)
 8014068:	ea4f 1828 	mov.w	r8, r8, asr #4
 801406c:	4650      	mov	r0, sl
 801406e:	4659      	mov	r1, fp
 8014070:	461d      	mov	r5, r3
 8014072:	f1b8 0f01 	cmp.w	r8, #1
 8014076:	dc21      	bgt.n	80140bc <_strtod_l+0x51c>
 8014078:	b10b      	cbz	r3, 801407e <_strtod_l+0x4de>
 801407a:	4682      	mov	sl, r0
 801407c:	468b      	mov	fp, r1
 801407e:	4b2d      	ldr	r3, [pc, #180]	; (8014134 <_strtod_l+0x594>)
 8014080:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014084:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014088:	4652      	mov	r2, sl
 801408a:	465b      	mov	r3, fp
 801408c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014090:	f7ec fada 	bl	8000648 <__aeabi_dmul>
 8014094:	4b28      	ldr	r3, [pc, #160]	; (8014138 <_strtod_l+0x598>)
 8014096:	460a      	mov	r2, r1
 8014098:	400b      	ands	r3, r1
 801409a:	4928      	ldr	r1, [pc, #160]	; (801413c <_strtod_l+0x59c>)
 801409c:	428b      	cmp	r3, r1
 801409e:	4682      	mov	sl, r0
 80140a0:	d898      	bhi.n	8013fd4 <_strtod_l+0x434>
 80140a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80140a6:	428b      	cmp	r3, r1
 80140a8:	bf86      	itte	hi
 80140aa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014144 <_strtod_l+0x5a4>
 80140ae:	f04f 3aff 	movhi.w	sl, #4294967295
 80140b2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80140b6:	2300      	movs	r3, #0
 80140b8:	9304      	str	r3, [sp, #16]
 80140ba:	e077      	b.n	80141ac <_strtod_l+0x60c>
 80140bc:	f018 0f01 	tst.w	r8, #1
 80140c0:	d006      	beq.n	80140d0 <_strtod_l+0x530>
 80140c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80140c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ca:	f7ec fabd 	bl	8000648 <__aeabi_dmul>
 80140ce:	2301      	movs	r3, #1
 80140d0:	3501      	adds	r5, #1
 80140d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80140d6:	e7cc      	b.n	8014072 <_strtod_l+0x4d2>
 80140d8:	d0ed      	beq.n	80140b6 <_strtod_l+0x516>
 80140da:	f1c8 0800 	rsb	r8, r8, #0
 80140de:	f018 020f 	ands.w	r2, r8, #15
 80140e2:	d00a      	beq.n	80140fa <_strtod_l+0x55a>
 80140e4:	4b12      	ldr	r3, [pc, #72]	; (8014130 <_strtod_l+0x590>)
 80140e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140ea:	4650      	mov	r0, sl
 80140ec:	4659      	mov	r1, fp
 80140ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f2:	f7ec fbd3 	bl	800089c <__aeabi_ddiv>
 80140f6:	4682      	mov	sl, r0
 80140f8:	468b      	mov	fp, r1
 80140fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80140fe:	d0da      	beq.n	80140b6 <_strtod_l+0x516>
 8014100:	f1b8 0f1f 	cmp.w	r8, #31
 8014104:	dd20      	ble.n	8014148 <_strtod_l+0x5a8>
 8014106:	2400      	movs	r4, #0
 8014108:	46a0      	mov	r8, r4
 801410a:	9407      	str	r4, [sp, #28]
 801410c:	9405      	str	r4, [sp, #20]
 801410e:	2322      	movs	r3, #34	; 0x22
 8014110:	f04f 0a00 	mov.w	sl, #0
 8014114:	f04f 0b00 	mov.w	fp, #0
 8014118:	f8c9 3000 	str.w	r3, [r9]
 801411c:	e765      	b.n	8013fea <_strtod_l+0x44a>
 801411e:	bf00      	nop
 8014120:	0801a273 	.word	0x0801a273
 8014124:	0801a2fb 	.word	0x0801a2fb
 8014128:	0801a27b 	.word	0x0801a27b
 801412c:	0801a2bc 	.word	0x0801a2bc
 8014130:	0801a338 	.word	0x0801a338
 8014134:	0801a310 	.word	0x0801a310
 8014138:	7ff00000 	.word	0x7ff00000
 801413c:	7ca00000 	.word	0x7ca00000
 8014140:	fff80000 	.word	0xfff80000
 8014144:	7fefffff 	.word	0x7fefffff
 8014148:	f018 0310 	ands.w	r3, r8, #16
 801414c:	bf18      	it	ne
 801414e:	236a      	movne	r3, #106	; 0x6a
 8014150:	4da0      	ldr	r5, [pc, #640]	; (80143d4 <_strtod_l+0x834>)
 8014152:	9304      	str	r3, [sp, #16]
 8014154:	4650      	mov	r0, sl
 8014156:	4659      	mov	r1, fp
 8014158:	2300      	movs	r3, #0
 801415a:	f1b8 0f00 	cmp.w	r8, #0
 801415e:	f300 810a 	bgt.w	8014376 <_strtod_l+0x7d6>
 8014162:	b10b      	cbz	r3, 8014168 <_strtod_l+0x5c8>
 8014164:	4682      	mov	sl, r0
 8014166:	468b      	mov	fp, r1
 8014168:	9b04      	ldr	r3, [sp, #16]
 801416a:	b1bb      	cbz	r3, 801419c <_strtod_l+0x5fc>
 801416c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014170:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014174:	2b00      	cmp	r3, #0
 8014176:	4659      	mov	r1, fp
 8014178:	dd10      	ble.n	801419c <_strtod_l+0x5fc>
 801417a:	2b1f      	cmp	r3, #31
 801417c:	f340 8107 	ble.w	801438e <_strtod_l+0x7ee>
 8014180:	2b34      	cmp	r3, #52	; 0x34
 8014182:	bfde      	ittt	le
 8014184:	3b20      	suble	r3, #32
 8014186:	f04f 32ff 	movle.w	r2, #4294967295
 801418a:	fa02 f303 	lslle.w	r3, r2, r3
 801418e:	f04f 0a00 	mov.w	sl, #0
 8014192:	bfcc      	ite	gt
 8014194:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014198:	ea03 0b01 	andle.w	fp, r3, r1
 801419c:	2200      	movs	r2, #0
 801419e:	2300      	movs	r3, #0
 80141a0:	4650      	mov	r0, sl
 80141a2:	4659      	mov	r1, fp
 80141a4:	f7ec fcb8 	bl	8000b18 <__aeabi_dcmpeq>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	d1ac      	bne.n	8014106 <_strtod_l+0x566>
 80141ac:	9b07      	ldr	r3, [sp, #28]
 80141ae:	9300      	str	r3, [sp, #0]
 80141b0:	9a05      	ldr	r2, [sp, #20]
 80141b2:	9908      	ldr	r1, [sp, #32]
 80141b4:	4623      	mov	r3, r4
 80141b6:	4648      	mov	r0, r9
 80141b8:	f001 fddc 	bl	8015d74 <__s2b>
 80141bc:	9007      	str	r0, [sp, #28]
 80141be:	2800      	cmp	r0, #0
 80141c0:	f43f af08 	beq.w	8013fd4 <_strtod_l+0x434>
 80141c4:	9a06      	ldr	r2, [sp, #24]
 80141c6:	9b06      	ldr	r3, [sp, #24]
 80141c8:	2a00      	cmp	r2, #0
 80141ca:	f1c3 0300 	rsb	r3, r3, #0
 80141ce:	bfa8      	it	ge
 80141d0:	2300      	movge	r3, #0
 80141d2:	930e      	str	r3, [sp, #56]	; 0x38
 80141d4:	2400      	movs	r4, #0
 80141d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80141da:	9316      	str	r3, [sp, #88]	; 0x58
 80141dc:	46a0      	mov	r8, r4
 80141de:	9b07      	ldr	r3, [sp, #28]
 80141e0:	4648      	mov	r0, r9
 80141e2:	6859      	ldr	r1, [r3, #4]
 80141e4:	f001 fd40 	bl	8015c68 <_Balloc>
 80141e8:	9005      	str	r0, [sp, #20]
 80141ea:	2800      	cmp	r0, #0
 80141ec:	f43f aef6 	beq.w	8013fdc <_strtod_l+0x43c>
 80141f0:	9b07      	ldr	r3, [sp, #28]
 80141f2:	691a      	ldr	r2, [r3, #16]
 80141f4:	3202      	adds	r2, #2
 80141f6:	f103 010c 	add.w	r1, r3, #12
 80141fa:	0092      	lsls	r2, r2, #2
 80141fc:	300c      	adds	r0, #12
 80141fe:	f7fe fe31 	bl	8012e64 <memcpy>
 8014202:	aa1e      	add	r2, sp, #120	; 0x78
 8014204:	a91d      	add	r1, sp, #116	; 0x74
 8014206:	ec4b ab10 	vmov	d0, sl, fp
 801420a:	4648      	mov	r0, r9
 801420c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014210:	f002 f86c 	bl	80162ec <__d2b>
 8014214:	901c      	str	r0, [sp, #112]	; 0x70
 8014216:	2800      	cmp	r0, #0
 8014218:	f43f aee0 	beq.w	8013fdc <_strtod_l+0x43c>
 801421c:	2101      	movs	r1, #1
 801421e:	4648      	mov	r0, r9
 8014220:	f001 fe34 	bl	8015e8c <__i2b>
 8014224:	4680      	mov	r8, r0
 8014226:	2800      	cmp	r0, #0
 8014228:	f43f aed8 	beq.w	8013fdc <_strtod_l+0x43c>
 801422c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801422e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014230:	2e00      	cmp	r6, #0
 8014232:	bfab      	itete	ge
 8014234:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014236:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014238:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801423a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801423c:	bfac      	ite	ge
 801423e:	18f7      	addge	r7, r6, r3
 8014240:	1b9d      	sublt	r5, r3, r6
 8014242:	9b04      	ldr	r3, [sp, #16]
 8014244:	1af6      	subs	r6, r6, r3
 8014246:	4416      	add	r6, r2
 8014248:	4b63      	ldr	r3, [pc, #396]	; (80143d8 <_strtod_l+0x838>)
 801424a:	3e01      	subs	r6, #1
 801424c:	429e      	cmp	r6, r3
 801424e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014252:	f280 80af 	bge.w	80143b4 <_strtod_l+0x814>
 8014256:	1b9b      	subs	r3, r3, r6
 8014258:	2b1f      	cmp	r3, #31
 801425a:	eba2 0203 	sub.w	r2, r2, r3
 801425e:	f04f 0101 	mov.w	r1, #1
 8014262:	f300 809b 	bgt.w	801439c <_strtod_l+0x7fc>
 8014266:	fa01 f303 	lsl.w	r3, r1, r3
 801426a:	930f      	str	r3, [sp, #60]	; 0x3c
 801426c:	2300      	movs	r3, #0
 801426e:	930a      	str	r3, [sp, #40]	; 0x28
 8014270:	18be      	adds	r6, r7, r2
 8014272:	9b04      	ldr	r3, [sp, #16]
 8014274:	42b7      	cmp	r7, r6
 8014276:	4415      	add	r5, r2
 8014278:	441d      	add	r5, r3
 801427a:	463b      	mov	r3, r7
 801427c:	bfa8      	it	ge
 801427e:	4633      	movge	r3, r6
 8014280:	42ab      	cmp	r3, r5
 8014282:	bfa8      	it	ge
 8014284:	462b      	movge	r3, r5
 8014286:	2b00      	cmp	r3, #0
 8014288:	bfc2      	ittt	gt
 801428a:	1af6      	subgt	r6, r6, r3
 801428c:	1aed      	subgt	r5, r5, r3
 801428e:	1aff      	subgt	r7, r7, r3
 8014290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014292:	b1bb      	cbz	r3, 80142c4 <_strtod_l+0x724>
 8014294:	4641      	mov	r1, r8
 8014296:	461a      	mov	r2, r3
 8014298:	4648      	mov	r0, r9
 801429a:	f001 fe97 	bl	8015fcc <__pow5mult>
 801429e:	4680      	mov	r8, r0
 80142a0:	2800      	cmp	r0, #0
 80142a2:	f43f ae9b 	beq.w	8013fdc <_strtod_l+0x43c>
 80142a6:	4601      	mov	r1, r0
 80142a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80142aa:	4648      	mov	r0, r9
 80142ac:	f001 fdf7 	bl	8015e9e <__multiply>
 80142b0:	900c      	str	r0, [sp, #48]	; 0x30
 80142b2:	2800      	cmp	r0, #0
 80142b4:	f43f ae92 	beq.w	8013fdc <_strtod_l+0x43c>
 80142b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142ba:	4648      	mov	r0, r9
 80142bc:	f001 fd08 	bl	8015cd0 <_Bfree>
 80142c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142c2:	931c      	str	r3, [sp, #112]	; 0x70
 80142c4:	2e00      	cmp	r6, #0
 80142c6:	dc7a      	bgt.n	80143be <_strtod_l+0x81e>
 80142c8:	9b06      	ldr	r3, [sp, #24]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	dd08      	ble.n	80142e0 <_strtod_l+0x740>
 80142ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80142d0:	9905      	ldr	r1, [sp, #20]
 80142d2:	4648      	mov	r0, r9
 80142d4:	f001 fe7a 	bl	8015fcc <__pow5mult>
 80142d8:	9005      	str	r0, [sp, #20]
 80142da:	2800      	cmp	r0, #0
 80142dc:	f43f ae7e 	beq.w	8013fdc <_strtod_l+0x43c>
 80142e0:	2d00      	cmp	r5, #0
 80142e2:	dd08      	ble.n	80142f6 <_strtod_l+0x756>
 80142e4:	462a      	mov	r2, r5
 80142e6:	9905      	ldr	r1, [sp, #20]
 80142e8:	4648      	mov	r0, r9
 80142ea:	f001 febd 	bl	8016068 <__lshift>
 80142ee:	9005      	str	r0, [sp, #20]
 80142f0:	2800      	cmp	r0, #0
 80142f2:	f43f ae73 	beq.w	8013fdc <_strtod_l+0x43c>
 80142f6:	2f00      	cmp	r7, #0
 80142f8:	dd08      	ble.n	801430c <_strtod_l+0x76c>
 80142fa:	4641      	mov	r1, r8
 80142fc:	463a      	mov	r2, r7
 80142fe:	4648      	mov	r0, r9
 8014300:	f001 feb2 	bl	8016068 <__lshift>
 8014304:	4680      	mov	r8, r0
 8014306:	2800      	cmp	r0, #0
 8014308:	f43f ae68 	beq.w	8013fdc <_strtod_l+0x43c>
 801430c:	9a05      	ldr	r2, [sp, #20]
 801430e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014310:	4648      	mov	r0, r9
 8014312:	f001 ff17 	bl	8016144 <__mdiff>
 8014316:	4604      	mov	r4, r0
 8014318:	2800      	cmp	r0, #0
 801431a:	f43f ae5f 	beq.w	8013fdc <_strtod_l+0x43c>
 801431e:	68c3      	ldr	r3, [r0, #12]
 8014320:	930c      	str	r3, [sp, #48]	; 0x30
 8014322:	2300      	movs	r3, #0
 8014324:	60c3      	str	r3, [r0, #12]
 8014326:	4641      	mov	r1, r8
 8014328:	f001 fef2 	bl	8016110 <__mcmp>
 801432c:	2800      	cmp	r0, #0
 801432e:	da55      	bge.n	80143dc <_strtod_l+0x83c>
 8014330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014332:	b9e3      	cbnz	r3, 801436e <_strtod_l+0x7ce>
 8014334:	f1ba 0f00 	cmp.w	sl, #0
 8014338:	d119      	bne.n	801436e <_strtod_l+0x7ce>
 801433a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801433e:	b9b3      	cbnz	r3, 801436e <_strtod_l+0x7ce>
 8014340:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014344:	0d1b      	lsrs	r3, r3, #20
 8014346:	051b      	lsls	r3, r3, #20
 8014348:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801434c:	d90f      	bls.n	801436e <_strtod_l+0x7ce>
 801434e:	6963      	ldr	r3, [r4, #20]
 8014350:	b913      	cbnz	r3, 8014358 <_strtod_l+0x7b8>
 8014352:	6923      	ldr	r3, [r4, #16]
 8014354:	2b01      	cmp	r3, #1
 8014356:	dd0a      	ble.n	801436e <_strtod_l+0x7ce>
 8014358:	4621      	mov	r1, r4
 801435a:	2201      	movs	r2, #1
 801435c:	4648      	mov	r0, r9
 801435e:	f001 fe83 	bl	8016068 <__lshift>
 8014362:	4641      	mov	r1, r8
 8014364:	4604      	mov	r4, r0
 8014366:	f001 fed3 	bl	8016110 <__mcmp>
 801436a:	2800      	cmp	r0, #0
 801436c:	dc67      	bgt.n	801443e <_strtod_l+0x89e>
 801436e:	9b04      	ldr	r3, [sp, #16]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d171      	bne.n	8014458 <_strtod_l+0x8b8>
 8014374:	e63d      	b.n	8013ff2 <_strtod_l+0x452>
 8014376:	f018 0f01 	tst.w	r8, #1
 801437a:	d004      	beq.n	8014386 <_strtod_l+0x7e6>
 801437c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014380:	f7ec f962 	bl	8000648 <__aeabi_dmul>
 8014384:	2301      	movs	r3, #1
 8014386:	ea4f 0868 	mov.w	r8, r8, asr #1
 801438a:	3508      	adds	r5, #8
 801438c:	e6e5      	b.n	801415a <_strtod_l+0x5ba>
 801438e:	f04f 32ff 	mov.w	r2, #4294967295
 8014392:	fa02 f303 	lsl.w	r3, r2, r3
 8014396:	ea03 0a0a 	and.w	sl, r3, sl
 801439a:	e6ff      	b.n	801419c <_strtod_l+0x5fc>
 801439c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80143a0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80143a4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80143a8:	36e2      	adds	r6, #226	; 0xe2
 80143aa:	fa01 f306 	lsl.w	r3, r1, r6
 80143ae:	930a      	str	r3, [sp, #40]	; 0x28
 80143b0:	910f      	str	r1, [sp, #60]	; 0x3c
 80143b2:	e75d      	b.n	8014270 <_strtod_l+0x6d0>
 80143b4:	2300      	movs	r3, #0
 80143b6:	930a      	str	r3, [sp, #40]	; 0x28
 80143b8:	2301      	movs	r3, #1
 80143ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80143bc:	e758      	b.n	8014270 <_strtod_l+0x6d0>
 80143be:	4632      	mov	r2, r6
 80143c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143c2:	4648      	mov	r0, r9
 80143c4:	f001 fe50 	bl	8016068 <__lshift>
 80143c8:	901c      	str	r0, [sp, #112]	; 0x70
 80143ca:	2800      	cmp	r0, #0
 80143cc:	f47f af7c 	bne.w	80142c8 <_strtod_l+0x728>
 80143d0:	e604      	b.n	8013fdc <_strtod_l+0x43c>
 80143d2:	bf00      	nop
 80143d4:	0801a2d0 	.word	0x0801a2d0
 80143d8:	fffffc02 	.word	0xfffffc02
 80143dc:	465d      	mov	r5, fp
 80143de:	f040 8086 	bne.w	80144ee <_strtod_l+0x94e>
 80143e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143e8:	b32a      	cbz	r2, 8014436 <_strtod_l+0x896>
 80143ea:	4aaf      	ldr	r2, [pc, #700]	; (80146a8 <_strtod_l+0xb08>)
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d153      	bne.n	8014498 <_strtod_l+0x8f8>
 80143f0:	9b04      	ldr	r3, [sp, #16]
 80143f2:	4650      	mov	r0, sl
 80143f4:	b1d3      	cbz	r3, 801442c <_strtod_l+0x88c>
 80143f6:	4aad      	ldr	r2, [pc, #692]	; (80146ac <_strtod_l+0xb0c>)
 80143f8:	402a      	ands	r2, r5
 80143fa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80143fe:	f04f 31ff 	mov.w	r1, #4294967295
 8014402:	d816      	bhi.n	8014432 <_strtod_l+0x892>
 8014404:	0d12      	lsrs	r2, r2, #20
 8014406:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801440a:	fa01 f303 	lsl.w	r3, r1, r3
 801440e:	4298      	cmp	r0, r3
 8014410:	d142      	bne.n	8014498 <_strtod_l+0x8f8>
 8014412:	4ba7      	ldr	r3, [pc, #668]	; (80146b0 <_strtod_l+0xb10>)
 8014414:	429d      	cmp	r5, r3
 8014416:	d102      	bne.n	801441e <_strtod_l+0x87e>
 8014418:	3001      	adds	r0, #1
 801441a:	f43f addf 	beq.w	8013fdc <_strtod_l+0x43c>
 801441e:	4ba3      	ldr	r3, [pc, #652]	; (80146ac <_strtod_l+0xb0c>)
 8014420:	402b      	ands	r3, r5
 8014422:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014426:	f04f 0a00 	mov.w	sl, #0
 801442a:	e7a0      	b.n	801436e <_strtod_l+0x7ce>
 801442c:	f04f 33ff 	mov.w	r3, #4294967295
 8014430:	e7ed      	b.n	801440e <_strtod_l+0x86e>
 8014432:	460b      	mov	r3, r1
 8014434:	e7eb      	b.n	801440e <_strtod_l+0x86e>
 8014436:	bb7b      	cbnz	r3, 8014498 <_strtod_l+0x8f8>
 8014438:	f1ba 0f00 	cmp.w	sl, #0
 801443c:	d12c      	bne.n	8014498 <_strtod_l+0x8f8>
 801443e:	9904      	ldr	r1, [sp, #16]
 8014440:	4a9a      	ldr	r2, [pc, #616]	; (80146ac <_strtod_l+0xb0c>)
 8014442:	465b      	mov	r3, fp
 8014444:	b1f1      	cbz	r1, 8014484 <_strtod_l+0x8e4>
 8014446:	ea02 010b 	and.w	r1, r2, fp
 801444a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801444e:	dc19      	bgt.n	8014484 <_strtod_l+0x8e4>
 8014450:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014454:	f77f ae5b 	ble.w	801410e <_strtod_l+0x56e>
 8014458:	4a96      	ldr	r2, [pc, #600]	; (80146b4 <_strtod_l+0xb14>)
 801445a:	2300      	movs	r3, #0
 801445c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014460:	4650      	mov	r0, sl
 8014462:	4659      	mov	r1, fp
 8014464:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014468:	f7ec f8ee 	bl	8000648 <__aeabi_dmul>
 801446c:	4682      	mov	sl, r0
 801446e:	468b      	mov	fp, r1
 8014470:	2900      	cmp	r1, #0
 8014472:	f47f adbe 	bne.w	8013ff2 <_strtod_l+0x452>
 8014476:	2800      	cmp	r0, #0
 8014478:	f47f adbb 	bne.w	8013ff2 <_strtod_l+0x452>
 801447c:	2322      	movs	r3, #34	; 0x22
 801447e:	f8c9 3000 	str.w	r3, [r9]
 8014482:	e5b6      	b.n	8013ff2 <_strtod_l+0x452>
 8014484:	4013      	ands	r3, r2
 8014486:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801448a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801448e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014492:	f04f 3aff 	mov.w	sl, #4294967295
 8014496:	e76a      	b.n	801436e <_strtod_l+0x7ce>
 8014498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801449a:	b193      	cbz	r3, 80144c2 <_strtod_l+0x922>
 801449c:	422b      	tst	r3, r5
 801449e:	f43f af66 	beq.w	801436e <_strtod_l+0x7ce>
 80144a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144a4:	9a04      	ldr	r2, [sp, #16]
 80144a6:	4650      	mov	r0, sl
 80144a8:	4659      	mov	r1, fp
 80144aa:	b173      	cbz	r3, 80144ca <_strtod_l+0x92a>
 80144ac:	f7ff fb5a 	bl	8013b64 <sulp>
 80144b0:	4602      	mov	r2, r0
 80144b2:	460b      	mov	r3, r1
 80144b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144b8:	f7eb ff10 	bl	80002dc <__adddf3>
 80144bc:	4682      	mov	sl, r0
 80144be:	468b      	mov	fp, r1
 80144c0:	e755      	b.n	801436e <_strtod_l+0x7ce>
 80144c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144c4:	ea13 0f0a 	tst.w	r3, sl
 80144c8:	e7e9      	b.n	801449e <_strtod_l+0x8fe>
 80144ca:	f7ff fb4b 	bl	8013b64 <sulp>
 80144ce:	4602      	mov	r2, r0
 80144d0:	460b      	mov	r3, r1
 80144d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80144d6:	f7eb feff 	bl	80002d8 <__aeabi_dsub>
 80144da:	2200      	movs	r2, #0
 80144dc:	2300      	movs	r3, #0
 80144de:	4682      	mov	sl, r0
 80144e0:	468b      	mov	fp, r1
 80144e2:	f7ec fb19 	bl	8000b18 <__aeabi_dcmpeq>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	f47f ae11 	bne.w	801410e <_strtod_l+0x56e>
 80144ec:	e73f      	b.n	801436e <_strtod_l+0x7ce>
 80144ee:	4641      	mov	r1, r8
 80144f0:	4620      	mov	r0, r4
 80144f2:	f001 ff4a 	bl	801638a <__ratio>
 80144f6:	ec57 6b10 	vmov	r6, r7, d0
 80144fa:	2200      	movs	r2, #0
 80144fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014500:	ee10 0a10 	vmov	r0, s0
 8014504:	4639      	mov	r1, r7
 8014506:	f7ec fb1b 	bl	8000b40 <__aeabi_dcmple>
 801450a:	2800      	cmp	r0, #0
 801450c:	d077      	beq.n	80145fe <_strtod_l+0xa5e>
 801450e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014510:	2b00      	cmp	r3, #0
 8014512:	d04a      	beq.n	80145aa <_strtod_l+0xa0a>
 8014514:	4b68      	ldr	r3, [pc, #416]	; (80146b8 <_strtod_l+0xb18>)
 8014516:	2200      	movs	r2, #0
 8014518:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801451c:	4f66      	ldr	r7, [pc, #408]	; (80146b8 <_strtod_l+0xb18>)
 801451e:	2600      	movs	r6, #0
 8014520:	4b62      	ldr	r3, [pc, #392]	; (80146ac <_strtod_l+0xb0c>)
 8014522:	402b      	ands	r3, r5
 8014524:	930f      	str	r3, [sp, #60]	; 0x3c
 8014526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014528:	4b64      	ldr	r3, [pc, #400]	; (80146bc <_strtod_l+0xb1c>)
 801452a:	429a      	cmp	r2, r3
 801452c:	f040 80ce 	bne.w	80146cc <_strtod_l+0xb2c>
 8014530:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014534:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014538:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801453c:	ec4b ab10 	vmov	d0, sl, fp
 8014540:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014544:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014548:	f001 fe5a 	bl	8016200 <__ulp>
 801454c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014550:	ec53 2b10 	vmov	r2, r3, d0
 8014554:	f7ec f878 	bl	8000648 <__aeabi_dmul>
 8014558:	4652      	mov	r2, sl
 801455a:	465b      	mov	r3, fp
 801455c:	f7eb febe 	bl	80002dc <__adddf3>
 8014560:	460b      	mov	r3, r1
 8014562:	4952      	ldr	r1, [pc, #328]	; (80146ac <_strtod_l+0xb0c>)
 8014564:	4a56      	ldr	r2, [pc, #344]	; (80146c0 <_strtod_l+0xb20>)
 8014566:	4019      	ands	r1, r3
 8014568:	4291      	cmp	r1, r2
 801456a:	4682      	mov	sl, r0
 801456c:	d95b      	bls.n	8014626 <_strtod_l+0xa86>
 801456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014570:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014574:	4293      	cmp	r3, r2
 8014576:	d103      	bne.n	8014580 <_strtod_l+0x9e0>
 8014578:	9b08      	ldr	r3, [sp, #32]
 801457a:	3301      	adds	r3, #1
 801457c:	f43f ad2e 	beq.w	8013fdc <_strtod_l+0x43c>
 8014580:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80146b0 <_strtod_l+0xb10>
 8014584:	f04f 3aff 	mov.w	sl, #4294967295
 8014588:	991c      	ldr	r1, [sp, #112]	; 0x70
 801458a:	4648      	mov	r0, r9
 801458c:	f001 fba0 	bl	8015cd0 <_Bfree>
 8014590:	9905      	ldr	r1, [sp, #20]
 8014592:	4648      	mov	r0, r9
 8014594:	f001 fb9c 	bl	8015cd0 <_Bfree>
 8014598:	4641      	mov	r1, r8
 801459a:	4648      	mov	r0, r9
 801459c:	f001 fb98 	bl	8015cd0 <_Bfree>
 80145a0:	4621      	mov	r1, r4
 80145a2:	4648      	mov	r0, r9
 80145a4:	f001 fb94 	bl	8015cd0 <_Bfree>
 80145a8:	e619      	b.n	80141de <_strtod_l+0x63e>
 80145aa:	f1ba 0f00 	cmp.w	sl, #0
 80145ae:	d11a      	bne.n	80145e6 <_strtod_l+0xa46>
 80145b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145b4:	b9eb      	cbnz	r3, 80145f2 <_strtod_l+0xa52>
 80145b6:	2200      	movs	r2, #0
 80145b8:	4b3f      	ldr	r3, [pc, #252]	; (80146b8 <_strtod_l+0xb18>)
 80145ba:	4630      	mov	r0, r6
 80145bc:	4639      	mov	r1, r7
 80145be:	f7ec fab5 	bl	8000b2c <__aeabi_dcmplt>
 80145c2:	b9c8      	cbnz	r0, 80145f8 <_strtod_l+0xa58>
 80145c4:	4630      	mov	r0, r6
 80145c6:	4639      	mov	r1, r7
 80145c8:	2200      	movs	r2, #0
 80145ca:	4b3e      	ldr	r3, [pc, #248]	; (80146c4 <_strtod_l+0xb24>)
 80145cc:	f7ec f83c 	bl	8000648 <__aeabi_dmul>
 80145d0:	4606      	mov	r6, r0
 80145d2:	460f      	mov	r7, r1
 80145d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80145d8:	9618      	str	r6, [sp, #96]	; 0x60
 80145da:	9319      	str	r3, [sp, #100]	; 0x64
 80145dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80145e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80145e4:	e79c      	b.n	8014520 <_strtod_l+0x980>
 80145e6:	f1ba 0f01 	cmp.w	sl, #1
 80145ea:	d102      	bne.n	80145f2 <_strtod_l+0xa52>
 80145ec:	2d00      	cmp	r5, #0
 80145ee:	f43f ad8e 	beq.w	801410e <_strtod_l+0x56e>
 80145f2:	2200      	movs	r2, #0
 80145f4:	4b34      	ldr	r3, [pc, #208]	; (80146c8 <_strtod_l+0xb28>)
 80145f6:	e78f      	b.n	8014518 <_strtod_l+0x978>
 80145f8:	2600      	movs	r6, #0
 80145fa:	4f32      	ldr	r7, [pc, #200]	; (80146c4 <_strtod_l+0xb24>)
 80145fc:	e7ea      	b.n	80145d4 <_strtod_l+0xa34>
 80145fe:	4b31      	ldr	r3, [pc, #196]	; (80146c4 <_strtod_l+0xb24>)
 8014600:	4630      	mov	r0, r6
 8014602:	4639      	mov	r1, r7
 8014604:	2200      	movs	r2, #0
 8014606:	f7ec f81f 	bl	8000648 <__aeabi_dmul>
 801460a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801460c:	4606      	mov	r6, r0
 801460e:	460f      	mov	r7, r1
 8014610:	b933      	cbnz	r3, 8014620 <_strtod_l+0xa80>
 8014612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014616:	9010      	str	r0, [sp, #64]	; 0x40
 8014618:	9311      	str	r3, [sp, #68]	; 0x44
 801461a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801461e:	e7df      	b.n	80145e0 <_strtod_l+0xa40>
 8014620:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014624:	e7f9      	b.n	801461a <_strtod_l+0xa7a>
 8014626:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801462a:	9b04      	ldr	r3, [sp, #16]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d1ab      	bne.n	8014588 <_strtod_l+0x9e8>
 8014630:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014634:	0d1b      	lsrs	r3, r3, #20
 8014636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014638:	051b      	lsls	r3, r3, #20
 801463a:	429a      	cmp	r2, r3
 801463c:	465d      	mov	r5, fp
 801463e:	d1a3      	bne.n	8014588 <_strtod_l+0x9e8>
 8014640:	4639      	mov	r1, r7
 8014642:	4630      	mov	r0, r6
 8014644:	f7ec fab0 	bl	8000ba8 <__aeabi_d2iz>
 8014648:	f7eb ff94 	bl	8000574 <__aeabi_i2d>
 801464c:	460b      	mov	r3, r1
 801464e:	4602      	mov	r2, r0
 8014650:	4639      	mov	r1, r7
 8014652:	4630      	mov	r0, r6
 8014654:	f7eb fe40 	bl	80002d8 <__aeabi_dsub>
 8014658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801465a:	4606      	mov	r6, r0
 801465c:	460f      	mov	r7, r1
 801465e:	b933      	cbnz	r3, 801466e <_strtod_l+0xace>
 8014660:	f1ba 0f00 	cmp.w	sl, #0
 8014664:	d103      	bne.n	801466e <_strtod_l+0xace>
 8014666:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801466a:	2d00      	cmp	r5, #0
 801466c:	d06d      	beq.n	801474a <_strtod_l+0xbaa>
 801466e:	a30a      	add	r3, pc, #40	; (adr r3, 8014698 <_strtod_l+0xaf8>)
 8014670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014674:	4630      	mov	r0, r6
 8014676:	4639      	mov	r1, r7
 8014678:	f7ec fa58 	bl	8000b2c <__aeabi_dcmplt>
 801467c:	2800      	cmp	r0, #0
 801467e:	f47f acb8 	bne.w	8013ff2 <_strtod_l+0x452>
 8014682:	a307      	add	r3, pc, #28	; (adr r3, 80146a0 <_strtod_l+0xb00>)
 8014684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014688:	4630      	mov	r0, r6
 801468a:	4639      	mov	r1, r7
 801468c:	f7ec fa6c 	bl	8000b68 <__aeabi_dcmpgt>
 8014690:	2800      	cmp	r0, #0
 8014692:	f43f af79 	beq.w	8014588 <_strtod_l+0x9e8>
 8014696:	e4ac      	b.n	8013ff2 <_strtod_l+0x452>
 8014698:	94a03595 	.word	0x94a03595
 801469c:	3fdfffff 	.word	0x3fdfffff
 80146a0:	35afe535 	.word	0x35afe535
 80146a4:	3fe00000 	.word	0x3fe00000
 80146a8:	000fffff 	.word	0x000fffff
 80146ac:	7ff00000 	.word	0x7ff00000
 80146b0:	7fefffff 	.word	0x7fefffff
 80146b4:	39500000 	.word	0x39500000
 80146b8:	3ff00000 	.word	0x3ff00000
 80146bc:	7fe00000 	.word	0x7fe00000
 80146c0:	7c9fffff 	.word	0x7c9fffff
 80146c4:	3fe00000 	.word	0x3fe00000
 80146c8:	bff00000 	.word	0xbff00000
 80146cc:	9b04      	ldr	r3, [sp, #16]
 80146ce:	b333      	cbz	r3, 801471e <_strtod_l+0xb7e>
 80146d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146d6:	d822      	bhi.n	801471e <_strtod_l+0xb7e>
 80146d8:	a327      	add	r3, pc, #156	; (adr r3, 8014778 <_strtod_l+0xbd8>)
 80146da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146de:	4630      	mov	r0, r6
 80146e0:	4639      	mov	r1, r7
 80146e2:	f7ec fa2d 	bl	8000b40 <__aeabi_dcmple>
 80146e6:	b1a0      	cbz	r0, 8014712 <_strtod_l+0xb72>
 80146e8:	4639      	mov	r1, r7
 80146ea:	4630      	mov	r0, r6
 80146ec:	f7ec fa84 	bl	8000bf8 <__aeabi_d2uiz>
 80146f0:	2800      	cmp	r0, #0
 80146f2:	bf08      	it	eq
 80146f4:	2001      	moveq	r0, #1
 80146f6:	f7eb ff2d 	bl	8000554 <__aeabi_ui2d>
 80146fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146fc:	4606      	mov	r6, r0
 80146fe:	460f      	mov	r7, r1
 8014700:	bb03      	cbnz	r3, 8014744 <_strtod_l+0xba4>
 8014702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014706:	9012      	str	r0, [sp, #72]	; 0x48
 8014708:	9313      	str	r3, [sp, #76]	; 0x4c
 801470a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801470e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014714:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014716:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801471a:	1a9b      	subs	r3, r3, r2
 801471c:	930b      	str	r3, [sp, #44]	; 0x2c
 801471e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014722:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014726:	f001 fd6b 	bl	8016200 <__ulp>
 801472a:	4650      	mov	r0, sl
 801472c:	ec53 2b10 	vmov	r2, r3, d0
 8014730:	4659      	mov	r1, fp
 8014732:	f7eb ff89 	bl	8000648 <__aeabi_dmul>
 8014736:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801473a:	f7eb fdcf 	bl	80002dc <__adddf3>
 801473e:	4682      	mov	sl, r0
 8014740:	468b      	mov	fp, r1
 8014742:	e772      	b.n	801462a <_strtod_l+0xa8a>
 8014744:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014748:	e7df      	b.n	801470a <_strtod_l+0xb6a>
 801474a:	a30d      	add	r3, pc, #52	; (adr r3, 8014780 <_strtod_l+0xbe0>)
 801474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014750:	f7ec f9ec 	bl	8000b2c <__aeabi_dcmplt>
 8014754:	e79c      	b.n	8014690 <_strtod_l+0xaf0>
 8014756:	2300      	movs	r3, #0
 8014758:	930d      	str	r3, [sp, #52]	; 0x34
 801475a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801475c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801475e:	6013      	str	r3, [r2, #0]
 8014760:	f7ff ba61 	b.w	8013c26 <_strtod_l+0x86>
 8014764:	2b65      	cmp	r3, #101	; 0x65
 8014766:	f04f 0200 	mov.w	r2, #0
 801476a:	f43f ab4e 	beq.w	8013e0a <_strtod_l+0x26a>
 801476e:	2101      	movs	r1, #1
 8014770:	4614      	mov	r4, r2
 8014772:	9104      	str	r1, [sp, #16]
 8014774:	f7ff bacb 	b.w	8013d0e <_strtod_l+0x16e>
 8014778:	ffc00000 	.word	0xffc00000
 801477c:	41dfffff 	.word	0x41dfffff
 8014780:	94a03595 	.word	0x94a03595
 8014784:	3fcfffff 	.word	0x3fcfffff

08014788 <_strtod_r>:
 8014788:	4b05      	ldr	r3, [pc, #20]	; (80147a0 <_strtod_r+0x18>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	b410      	push	{r4}
 801478e:	6a1b      	ldr	r3, [r3, #32]
 8014790:	4c04      	ldr	r4, [pc, #16]	; (80147a4 <_strtod_r+0x1c>)
 8014792:	2b00      	cmp	r3, #0
 8014794:	bf08      	it	eq
 8014796:	4623      	moveq	r3, r4
 8014798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801479c:	f7ff ba00 	b.w	8013ba0 <_strtod_l>
 80147a0:	20002d20 	.word	0x20002d20
 80147a4:	20002d84 	.word	0x20002d84

080147a8 <_strtol_l.isra.0>:
 80147a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147ac:	4680      	mov	r8, r0
 80147ae:	4689      	mov	r9, r1
 80147b0:	4692      	mov	sl, r2
 80147b2:	461e      	mov	r6, r3
 80147b4:	460f      	mov	r7, r1
 80147b6:	463d      	mov	r5, r7
 80147b8:	9808      	ldr	r0, [sp, #32]
 80147ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147be:	f001 fa25 	bl	8015c0c <__locale_ctype_ptr_l>
 80147c2:	4420      	add	r0, r4
 80147c4:	7843      	ldrb	r3, [r0, #1]
 80147c6:	f013 0308 	ands.w	r3, r3, #8
 80147ca:	d132      	bne.n	8014832 <_strtol_l.isra.0+0x8a>
 80147cc:	2c2d      	cmp	r4, #45	; 0x2d
 80147ce:	d132      	bne.n	8014836 <_strtol_l.isra.0+0x8e>
 80147d0:	787c      	ldrb	r4, [r7, #1]
 80147d2:	1cbd      	adds	r5, r7, #2
 80147d4:	2201      	movs	r2, #1
 80147d6:	2e00      	cmp	r6, #0
 80147d8:	d05d      	beq.n	8014896 <_strtol_l.isra.0+0xee>
 80147da:	2e10      	cmp	r6, #16
 80147dc:	d109      	bne.n	80147f2 <_strtol_l.isra.0+0x4a>
 80147de:	2c30      	cmp	r4, #48	; 0x30
 80147e0:	d107      	bne.n	80147f2 <_strtol_l.isra.0+0x4a>
 80147e2:	782b      	ldrb	r3, [r5, #0]
 80147e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80147e8:	2b58      	cmp	r3, #88	; 0x58
 80147ea:	d14f      	bne.n	801488c <_strtol_l.isra.0+0xe4>
 80147ec:	786c      	ldrb	r4, [r5, #1]
 80147ee:	2610      	movs	r6, #16
 80147f0:	3502      	adds	r5, #2
 80147f2:	2a00      	cmp	r2, #0
 80147f4:	bf14      	ite	ne
 80147f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80147fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80147fe:	2700      	movs	r7, #0
 8014800:	fbb1 fcf6 	udiv	ip, r1, r6
 8014804:	4638      	mov	r0, r7
 8014806:	fb06 1e1c 	mls	lr, r6, ip, r1
 801480a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801480e:	2b09      	cmp	r3, #9
 8014810:	d817      	bhi.n	8014842 <_strtol_l.isra.0+0x9a>
 8014812:	461c      	mov	r4, r3
 8014814:	42a6      	cmp	r6, r4
 8014816:	dd23      	ble.n	8014860 <_strtol_l.isra.0+0xb8>
 8014818:	1c7b      	adds	r3, r7, #1
 801481a:	d007      	beq.n	801482c <_strtol_l.isra.0+0x84>
 801481c:	4584      	cmp	ip, r0
 801481e:	d31c      	bcc.n	801485a <_strtol_l.isra.0+0xb2>
 8014820:	d101      	bne.n	8014826 <_strtol_l.isra.0+0x7e>
 8014822:	45a6      	cmp	lr, r4
 8014824:	db19      	blt.n	801485a <_strtol_l.isra.0+0xb2>
 8014826:	fb00 4006 	mla	r0, r0, r6, r4
 801482a:	2701      	movs	r7, #1
 801482c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014830:	e7eb      	b.n	801480a <_strtol_l.isra.0+0x62>
 8014832:	462f      	mov	r7, r5
 8014834:	e7bf      	b.n	80147b6 <_strtol_l.isra.0+0xe>
 8014836:	2c2b      	cmp	r4, #43	; 0x2b
 8014838:	bf04      	itt	eq
 801483a:	1cbd      	addeq	r5, r7, #2
 801483c:	787c      	ldrbeq	r4, [r7, #1]
 801483e:	461a      	mov	r2, r3
 8014840:	e7c9      	b.n	80147d6 <_strtol_l.isra.0+0x2e>
 8014842:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014846:	2b19      	cmp	r3, #25
 8014848:	d801      	bhi.n	801484e <_strtol_l.isra.0+0xa6>
 801484a:	3c37      	subs	r4, #55	; 0x37
 801484c:	e7e2      	b.n	8014814 <_strtol_l.isra.0+0x6c>
 801484e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014852:	2b19      	cmp	r3, #25
 8014854:	d804      	bhi.n	8014860 <_strtol_l.isra.0+0xb8>
 8014856:	3c57      	subs	r4, #87	; 0x57
 8014858:	e7dc      	b.n	8014814 <_strtol_l.isra.0+0x6c>
 801485a:	f04f 37ff 	mov.w	r7, #4294967295
 801485e:	e7e5      	b.n	801482c <_strtol_l.isra.0+0x84>
 8014860:	1c7b      	adds	r3, r7, #1
 8014862:	d108      	bne.n	8014876 <_strtol_l.isra.0+0xce>
 8014864:	2322      	movs	r3, #34	; 0x22
 8014866:	f8c8 3000 	str.w	r3, [r8]
 801486a:	4608      	mov	r0, r1
 801486c:	f1ba 0f00 	cmp.w	sl, #0
 8014870:	d107      	bne.n	8014882 <_strtol_l.isra.0+0xda>
 8014872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014876:	b102      	cbz	r2, 801487a <_strtol_l.isra.0+0xd2>
 8014878:	4240      	negs	r0, r0
 801487a:	f1ba 0f00 	cmp.w	sl, #0
 801487e:	d0f8      	beq.n	8014872 <_strtol_l.isra.0+0xca>
 8014880:	b10f      	cbz	r7, 8014886 <_strtol_l.isra.0+0xde>
 8014882:	f105 39ff 	add.w	r9, r5, #4294967295
 8014886:	f8ca 9000 	str.w	r9, [sl]
 801488a:	e7f2      	b.n	8014872 <_strtol_l.isra.0+0xca>
 801488c:	2430      	movs	r4, #48	; 0x30
 801488e:	2e00      	cmp	r6, #0
 8014890:	d1af      	bne.n	80147f2 <_strtol_l.isra.0+0x4a>
 8014892:	2608      	movs	r6, #8
 8014894:	e7ad      	b.n	80147f2 <_strtol_l.isra.0+0x4a>
 8014896:	2c30      	cmp	r4, #48	; 0x30
 8014898:	d0a3      	beq.n	80147e2 <_strtol_l.isra.0+0x3a>
 801489a:	260a      	movs	r6, #10
 801489c:	e7a9      	b.n	80147f2 <_strtol_l.isra.0+0x4a>
	...

080148a0 <_strtol_r>:
 80148a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148a2:	4c06      	ldr	r4, [pc, #24]	; (80148bc <_strtol_r+0x1c>)
 80148a4:	4d06      	ldr	r5, [pc, #24]	; (80148c0 <_strtol_r+0x20>)
 80148a6:	6824      	ldr	r4, [r4, #0]
 80148a8:	6a24      	ldr	r4, [r4, #32]
 80148aa:	2c00      	cmp	r4, #0
 80148ac:	bf08      	it	eq
 80148ae:	462c      	moveq	r4, r5
 80148b0:	9400      	str	r4, [sp, #0]
 80148b2:	f7ff ff79 	bl	80147a8 <_strtol_l.isra.0>
 80148b6:	b003      	add	sp, #12
 80148b8:	bd30      	pop	{r4, r5, pc}
 80148ba:	bf00      	nop
 80148bc:	20002d20 	.word	0x20002d20
 80148c0:	20002d84 	.word	0x20002d84

080148c4 <_vsniprintf_r>:
 80148c4:	b530      	push	{r4, r5, lr}
 80148c6:	1e14      	subs	r4, r2, #0
 80148c8:	4605      	mov	r5, r0
 80148ca:	b09b      	sub	sp, #108	; 0x6c
 80148cc:	4618      	mov	r0, r3
 80148ce:	da05      	bge.n	80148dc <_vsniprintf_r+0x18>
 80148d0:	238b      	movs	r3, #139	; 0x8b
 80148d2:	602b      	str	r3, [r5, #0]
 80148d4:	f04f 30ff 	mov.w	r0, #4294967295
 80148d8:	b01b      	add	sp, #108	; 0x6c
 80148da:	bd30      	pop	{r4, r5, pc}
 80148dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80148e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80148e4:	bf14      	ite	ne
 80148e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80148ea:	4623      	moveq	r3, r4
 80148ec:	9302      	str	r3, [sp, #8]
 80148ee:	9305      	str	r3, [sp, #20]
 80148f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148f4:	9100      	str	r1, [sp, #0]
 80148f6:	9104      	str	r1, [sp, #16]
 80148f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80148fc:	4602      	mov	r2, r0
 80148fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014900:	4669      	mov	r1, sp
 8014902:	4628      	mov	r0, r5
 8014904:	f001 fec0 	bl	8016688 <_svfiprintf_r>
 8014908:	1c43      	adds	r3, r0, #1
 801490a:	bfbc      	itt	lt
 801490c:	238b      	movlt	r3, #139	; 0x8b
 801490e:	602b      	strlt	r3, [r5, #0]
 8014910:	2c00      	cmp	r4, #0
 8014912:	d0e1      	beq.n	80148d8 <_vsniprintf_r+0x14>
 8014914:	9b00      	ldr	r3, [sp, #0]
 8014916:	2200      	movs	r2, #0
 8014918:	701a      	strb	r2, [r3, #0]
 801491a:	e7dd      	b.n	80148d8 <_vsniprintf_r+0x14>

0801491c <vsniprintf>:
 801491c:	b507      	push	{r0, r1, r2, lr}
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	4613      	mov	r3, r2
 8014922:	460a      	mov	r2, r1
 8014924:	4601      	mov	r1, r0
 8014926:	4803      	ldr	r0, [pc, #12]	; (8014934 <vsniprintf+0x18>)
 8014928:	6800      	ldr	r0, [r0, #0]
 801492a:	f7ff ffcb 	bl	80148c4 <_vsniprintf_r>
 801492e:	b003      	add	sp, #12
 8014930:	f85d fb04 	ldr.w	pc, [sp], #4
 8014934:	20002d20 	.word	0x20002d20

08014938 <quorem>:
 8014938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	6903      	ldr	r3, [r0, #16]
 801493e:	690c      	ldr	r4, [r1, #16]
 8014940:	42a3      	cmp	r3, r4
 8014942:	4680      	mov	r8, r0
 8014944:	f2c0 8082 	blt.w	8014a4c <quorem+0x114>
 8014948:	3c01      	subs	r4, #1
 801494a:	f101 0714 	add.w	r7, r1, #20
 801494e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014952:	f100 0614 	add.w	r6, r0, #20
 8014956:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801495a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801495e:	eb06 030c 	add.w	r3, r6, ip
 8014962:	3501      	adds	r5, #1
 8014964:	eb07 090c 	add.w	r9, r7, ip
 8014968:	9301      	str	r3, [sp, #4]
 801496a:	fbb0 f5f5 	udiv	r5, r0, r5
 801496e:	b395      	cbz	r5, 80149d6 <quorem+0x9e>
 8014970:	f04f 0a00 	mov.w	sl, #0
 8014974:	4638      	mov	r0, r7
 8014976:	46b6      	mov	lr, r6
 8014978:	46d3      	mov	fp, sl
 801497a:	f850 2b04 	ldr.w	r2, [r0], #4
 801497e:	b293      	uxth	r3, r2
 8014980:	fb05 a303 	mla	r3, r5, r3, sl
 8014984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014988:	b29b      	uxth	r3, r3
 801498a:	ebab 0303 	sub.w	r3, fp, r3
 801498e:	0c12      	lsrs	r2, r2, #16
 8014990:	f8de b000 	ldr.w	fp, [lr]
 8014994:	fb05 a202 	mla	r2, r5, r2, sl
 8014998:	fa13 f38b 	uxtah	r3, r3, fp
 801499c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80149a0:	fa1f fb82 	uxth.w	fp, r2
 80149a4:	f8de 2000 	ldr.w	r2, [lr]
 80149a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80149ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80149b6:	4581      	cmp	r9, r0
 80149b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80149bc:	f84e 3b04 	str.w	r3, [lr], #4
 80149c0:	d2db      	bcs.n	801497a <quorem+0x42>
 80149c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80149c6:	b933      	cbnz	r3, 80149d6 <quorem+0x9e>
 80149c8:	9b01      	ldr	r3, [sp, #4]
 80149ca:	3b04      	subs	r3, #4
 80149cc:	429e      	cmp	r6, r3
 80149ce:	461a      	mov	r2, r3
 80149d0:	d330      	bcc.n	8014a34 <quorem+0xfc>
 80149d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80149d6:	4640      	mov	r0, r8
 80149d8:	f001 fb9a 	bl	8016110 <__mcmp>
 80149dc:	2800      	cmp	r0, #0
 80149de:	db25      	blt.n	8014a2c <quorem+0xf4>
 80149e0:	3501      	adds	r5, #1
 80149e2:	4630      	mov	r0, r6
 80149e4:	f04f 0c00 	mov.w	ip, #0
 80149e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80149ec:	f8d0 e000 	ldr.w	lr, [r0]
 80149f0:	b293      	uxth	r3, r2
 80149f2:	ebac 0303 	sub.w	r3, ip, r3
 80149f6:	0c12      	lsrs	r2, r2, #16
 80149f8:	fa13 f38e 	uxtah	r3, r3, lr
 80149fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014a00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a0a:	45b9      	cmp	r9, r7
 8014a0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014a10:	f840 3b04 	str.w	r3, [r0], #4
 8014a14:	d2e8      	bcs.n	80149e8 <quorem+0xb0>
 8014a16:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014a1a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014a1e:	b92a      	cbnz	r2, 8014a2c <quorem+0xf4>
 8014a20:	3b04      	subs	r3, #4
 8014a22:	429e      	cmp	r6, r3
 8014a24:	461a      	mov	r2, r3
 8014a26:	d30b      	bcc.n	8014a40 <quorem+0x108>
 8014a28:	f8c8 4010 	str.w	r4, [r8, #16]
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	b003      	add	sp, #12
 8014a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a34:	6812      	ldr	r2, [r2, #0]
 8014a36:	3b04      	subs	r3, #4
 8014a38:	2a00      	cmp	r2, #0
 8014a3a:	d1ca      	bne.n	80149d2 <quorem+0x9a>
 8014a3c:	3c01      	subs	r4, #1
 8014a3e:	e7c5      	b.n	80149cc <quorem+0x94>
 8014a40:	6812      	ldr	r2, [r2, #0]
 8014a42:	3b04      	subs	r3, #4
 8014a44:	2a00      	cmp	r2, #0
 8014a46:	d1ef      	bne.n	8014a28 <quorem+0xf0>
 8014a48:	3c01      	subs	r4, #1
 8014a4a:	e7ea      	b.n	8014a22 <quorem+0xea>
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	e7ee      	b.n	8014a2e <quorem+0xf6>

08014a50 <_dtoa_r>:
 8014a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a54:	ec57 6b10 	vmov	r6, r7, d0
 8014a58:	b097      	sub	sp, #92	; 0x5c
 8014a5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014a5c:	9106      	str	r1, [sp, #24]
 8014a5e:	4604      	mov	r4, r0
 8014a60:	920b      	str	r2, [sp, #44]	; 0x2c
 8014a62:	9312      	str	r3, [sp, #72]	; 0x48
 8014a64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014a68:	e9cd 6700 	strd	r6, r7, [sp]
 8014a6c:	b93d      	cbnz	r5, 8014a7e <_dtoa_r+0x2e>
 8014a6e:	2010      	movs	r0, #16
 8014a70:	f001 f8e0 	bl	8015c34 <malloc>
 8014a74:	6260      	str	r0, [r4, #36]	; 0x24
 8014a76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014a7a:	6005      	str	r5, [r0, #0]
 8014a7c:	60c5      	str	r5, [r0, #12]
 8014a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a80:	6819      	ldr	r1, [r3, #0]
 8014a82:	b151      	cbz	r1, 8014a9a <_dtoa_r+0x4a>
 8014a84:	685a      	ldr	r2, [r3, #4]
 8014a86:	604a      	str	r2, [r1, #4]
 8014a88:	2301      	movs	r3, #1
 8014a8a:	4093      	lsls	r3, r2
 8014a8c:	608b      	str	r3, [r1, #8]
 8014a8e:	4620      	mov	r0, r4
 8014a90:	f001 f91e 	bl	8015cd0 <_Bfree>
 8014a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014a96:	2200      	movs	r2, #0
 8014a98:	601a      	str	r2, [r3, #0]
 8014a9a:	1e3b      	subs	r3, r7, #0
 8014a9c:	bfbb      	ittet	lt
 8014a9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014aa2:	9301      	strlt	r3, [sp, #4]
 8014aa4:	2300      	movge	r3, #0
 8014aa6:	2201      	movlt	r2, #1
 8014aa8:	bfac      	ite	ge
 8014aaa:	f8c8 3000 	strge.w	r3, [r8]
 8014aae:	f8c8 2000 	strlt.w	r2, [r8]
 8014ab2:	4baf      	ldr	r3, [pc, #700]	; (8014d70 <_dtoa_r+0x320>)
 8014ab4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014ab8:	ea33 0308 	bics.w	r3, r3, r8
 8014abc:	d114      	bne.n	8014ae8 <_dtoa_r+0x98>
 8014abe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ac4:	6013      	str	r3, [r2, #0]
 8014ac6:	9b00      	ldr	r3, [sp, #0]
 8014ac8:	b923      	cbnz	r3, 8014ad4 <_dtoa_r+0x84>
 8014aca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	f000 8542 	beq.w	8015558 <_dtoa_r+0xb08>
 8014ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ad6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014d84 <_dtoa_r+0x334>
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	f000 8544 	beq.w	8015568 <_dtoa_r+0xb18>
 8014ae0:	f10b 0303 	add.w	r3, fp, #3
 8014ae4:	f000 bd3e 	b.w	8015564 <_dtoa_r+0xb14>
 8014ae8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014aec:	2200      	movs	r2, #0
 8014aee:	2300      	movs	r3, #0
 8014af0:	4630      	mov	r0, r6
 8014af2:	4639      	mov	r1, r7
 8014af4:	f7ec f810 	bl	8000b18 <__aeabi_dcmpeq>
 8014af8:	4681      	mov	r9, r0
 8014afa:	b168      	cbz	r0, 8014b18 <_dtoa_r+0xc8>
 8014afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014afe:	2301      	movs	r3, #1
 8014b00:	6013      	str	r3, [r2, #0]
 8014b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	f000 8524 	beq.w	8015552 <_dtoa_r+0xb02>
 8014b0a:	4b9a      	ldr	r3, [pc, #616]	; (8014d74 <_dtoa_r+0x324>)
 8014b0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014b0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014b12:	6013      	str	r3, [r2, #0]
 8014b14:	f000 bd28 	b.w	8015568 <_dtoa_r+0xb18>
 8014b18:	aa14      	add	r2, sp, #80	; 0x50
 8014b1a:	a915      	add	r1, sp, #84	; 0x54
 8014b1c:	ec47 6b10 	vmov	d0, r6, r7
 8014b20:	4620      	mov	r0, r4
 8014b22:	f001 fbe3 	bl	80162ec <__d2b>
 8014b26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014b2a:	9004      	str	r0, [sp, #16]
 8014b2c:	2d00      	cmp	r5, #0
 8014b2e:	d07c      	beq.n	8014c2a <_dtoa_r+0x1da>
 8014b30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014b34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014b38:	46b2      	mov	sl, r6
 8014b3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014b3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014b42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014b46:	2200      	movs	r2, #0
 8014b48:	4b8b      	ldr	r3, [pc, #556]	; (8014d78 <_dtoa_r+0x328>)
 8014b4a:	4650      	mov	r0, sl
 8014b4c:	4659      	mov	r1, fp
 8014b4e:	f7eb fbc3 	bl	80002d8 <__aeabi_dsub>
 8014b52:	a381      	add	r3, pc, #516	; (adr r3, 8014d58 <_dtoa_r+0x308>)
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	f7eb fd76 	bl	8000648 <__aeabi_dmul>
 8014b5c:	a380      	add	r3, pc, #512	; (adr r3, 8014d60 <_dtoa_r+0x310>)
 8014b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b62:	f7eb fbbb 	bl	80002dc <__adddf3>
 8014b66:	4606      	mov	r6, r0
 8014b68:	4628      	mov	r0, r5
 8014b6a:	460f      	mov	r7, r1
 8014b6c:	f7eb fd02 	bl	8000574 <__aeabi_i2d>
 8014b70:	a37d      	add	r3, pc, #500	; (adr r3, 8014d68 <_dtoa_r+0x318>)
 8014b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b76:	f7eb fd67 	bl	8000648 <__aeabi_dmul>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	460b      	mov	r3, r1
 8014b7e:	4630      	mov	r0, r6
 8014b80:	4639      	mov	r1, r7
 8014b82:	f7eb fbab 	bl	80002dc <__adddf3>
 8014b86:	4606      	mov	r6, r0
 8014b88:	460f      	mov	r7, r1
 8014b8a:	f7ec f80d 	bl	8000ba8 <__aeabi_d2iz>
 8014b8e:	2200      	movs	r2, #0
 8014b90:	4682      	mov	sl, r0
 8014b92:	2300      	movs	r3, #0
 8014b94:	4630      	mov	r0, r6
 8014b96:	4639      	mov	r1, r7
 8014b98:	f7eb ffc8 	bl	8000b2c <__aeabi_dcmplt>
 8014b9c:	b148      	cbz	r0, 8014bb2 <_dtoa_r+0x162>
 8014b9e:	4650      	mov	r0, sl
 8014ba0:	f7eb fce8 	bl	8000574 <__aeabi_i2d>
 8014ba4:	4632      	mov	r2, r6
 8014ba6:	463b      	mov	r3, r7
 8014ba8:	f7eb ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 8014bac:	b908      	cbnz	r0, 8014bb2 <_dtoa_r+0x162>
 8014bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014bb2:	f1ba 0f16 	cmp.w	sl, #22
 8014bb6:	d859      	bhi.n	8014c6c <_dtoa_r+0x21c>
 8014bb8:	4970      	ldr	r1, [pc, #448]	; (8014d7c <_dtoa_r+0x32c>)
 8014bba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bc6:	f7eb ffcf 	bl	8000b68 <__aeabi_dcmpgt>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d050      	beq.n	8014c70 <_dtoa_r+0x220>
 8014bce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014bd8:	1b5d      	subs	r5, r3, r5
 8014bda:	f1b5 0801 	subs.w	r8, r5, #1
 8014bde:	bf49      	itett	mi
 8014be0:	f1c5 0301 	rsbmi	r3, r5, #1
 8014be4:	2300      	movpl	r3, #0
 8014be6:	9305      	strmi	r3, [sp, #20]
 8014be8:	f04f 0800 	movmi.w	r8, #0
 8014bec:	bf58      	it	pl
 8014bee:	9305      	strpl	r3, [sp, #20]
 8014bf0:	f1ba 0f00 	cmp.w	sl, #0
 8014bf4:	db3e      	blt.n	8014c74 <_dtoa_r+0x224>
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	44d0      	add	r8, sl
 8014bfa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014bfe:	9307      	str	r3, [sp, #28]
 8014c00:	9b06      	ldr	r3, [sp, #24]
 8014c02:	2b09      	cmp	r3, #9
 8014c04:	f200 8090 	bhi.w	8014d28 <_dtoa_r+0x2d8>
 8014c08:	2b05      	cmp	r3, #5
 8014c0a:	bfc4      	itt	gt
 8014c0c:	3b04      	subgt	r3, #4
 8014c0e:	9306      	strgt	r3, [sp, #24]
 8014c10:	9b06      	ldr	r3, [sp, #24]
 8014c12:	f1a3 0302 	sub.w	r3, r3, #2
 8014c16:	bfcc      	ite	gt
 8014c18:	2500      	movgt	r5, #0
 8014c1a:	2501      	movle	r5, #1
 8014c1c:	2b03      	cmp	r3, #3
 8014c1e:	f200 808f 	bhi.w	8014d40 <_dtoa_r+0x2f0>
 8014c22:	e8df f003 	tbb	[pc, r3]
 8014c26:	7f7d      	.short	0x7f7d
 8014c28:	7131      	.short	0x7131
 8014c2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014c2e:	441d      	add	r5, r3
 8014c30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014c34:	2820      	cmp	r0, #32
 8014c36:	dd13      	ble.n	8014c60 <_dtoa_r+0x210>
 8014c38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014c3c:	9b00      	ldr	r3, [sp, #0]
 8014c3e:	fa08 f800 	lsl.w	r8, r8, r0
 8014c42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014c46:	fa23 f000 	lsr.w	r0, r3, r0
 8014c4a:	ea48 0000 	orr.w	r0, r8, r0
 8014c4e:	f7eb fc81 	bl	8000554 <__aeabi_ui2d>
 8014c52:	2301      	movs	r3, #1
 8014c54:	4682      	mov	sl, r0
 8014c56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014c5a:	3d01      	subs	r5, #1
 8014c5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c5e:	e772      	b.n	8014b46 <_dtoa_r+0xf6>
 8014c60:	9b00      	ldr	r3, [sp, #0]
 8014c62:	f1c0 0020 	rsb	r0, r0, #32
 8014c66:	fa03 f000 	lsl.w	r0, r3, r0
 8014c6a:	e7f0      	b.n	8014c4e <_dtoa_r+0x1fe>
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	e7b1      	b.n	8014bd4 <_dtoa_r+0x184>
 8014c70:	900f      	str	r0, [sp, #60]	; 0x3c
 8014c72:	e7b0      	b.n	8014bd6 <_dtoa_r+0x186>
 8014c74:	9b05      	ldr	r3, [sp, #20]
 8014c76:	eba3 030a 	sub.w	r3, r3, sl
 8014c7a:	9305      	str	r3, [sp, #20]
 8014c7c:	f1ca 0300 	rsb	r3, sl, #0
 8014c80:	9307      	str	r3, [sp, #28]
 8014c82:	2300      	movs	r3, #0
 8014c84:	930e      	str	r3, [sp, #56]	; 0x38
 8014c86:	e7bb      	b.n	8014c00 <_dtoa_r+0x1b0>
 8014c88:	2301      	movs	r3, #1
 8014c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8014c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	dd59      	ble.n	8014d46 <_dtoa_r+0x2f6>
 8014c92:	9302      	str	r3, [sp, #8]
 8014c94:	4699      	mov	r9, r3
 8014c96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014c98:	2200      	movs	r2, #0
 8014c9a:	6072      	str	r2, [r6, #4]
 8014c9c:	2204      	movs	r2, #4
 8014c9e:	f102 0014 	add.w	r0, r2, #20
 8014ca2:	4298      	cmp	r0, r3
 8014ca4:	6871      	ldr	r1, [r6, #4]
 8014ca6:	d953      	bls.n	8014d50 <_dtoa_r+0x300>
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f000 ffdd 	bl	8015c68 <_Balloc>
 8014cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cb0:	6030      	str	r0, [r6, #0]
 8014cb2:	f1b9 0f0e 	cmp.w	r9, #14
 8014cb6:	f8d3 b000 	ldr.w	fp, [r3]
 8014cba:	f200 80e6 	bhi.w	8014e8a <_dtoa_r+0x43a>
 8014cbe:	2d00      	cmp	r5, #0
 8014cc0:	f000 80e3 	beq.w	8014e8a <_dtoa_r+0x43a>
 8014cc4:	ed9d 7b00 	vldr	d7, [sp]
 8014cc8:	f1ba 0f00 	cmp.w	sl, #0
 8014ccc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014cd0:	dd74      	ble.n	8014dbc <_dtoa_r+0x36c>
 8014cd2:	4a2a      	ldr	r2, [pc, #168]	; (8014d7c <_dtoa_r+0x32c>)
 8014cd4:	f00a 030f 	and.w	r3, sl, #15
 8014cd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014cdc:	ed93 7b00 	vldr	d7, [r3]
 8014ce0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014ce4:	06f0      	lsls	r0, r6, #27
 8014ce6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014cea:	d565      	bpl.n	8014db8 <_dtoa_r+0x368>
 8014cec:	4b24      	ldr	r3, [pc, #144]	; (8014d80 <_dtoa_r+0x330>)
 8014cee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014cf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014cf6:	f7eb fdd1 	bl	800089c <__aeabi_ddiv>
 8014cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8014cfe:	f006 060f 	and.w	r6, r6, #15
 8014d02:	2503      	movs	r5, #3
 8014d04:	4f1e      	ldr	r7, [pc, #120]	; (8014d80 <_dtoa_r+0x330>)
 8014d06:	e04c      	b.n	8014da2 <_dtoa_r+0x352>
 8014d08:	2301      	movs	r3, #1
 8014d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d0e:	4453      	add	r3, sl
 8014d10:	f103 0901 	add.w	r9, r3, #1
 8014d14:	9302      	str	r3, [sp, #8]
 8014d16:	464b      	mov	r3, r9
 8014d18:	2b01      	cmp	r3, #1
 8014d1a:	bfb8      	it	lt
 8014d1c:	2301      	movlt	r3, #1
 8014d1e:	e7ba      	b.n	8014c96 <_dtoa_r+0x246>
 8014d20:	2300      	movs	r3, #0
 8014d22:	e7b2      	b.n	8014c8a <_dtoa_r+0x23a>
 8014d24:	2300      	movs	r3, #0
 8014d26:	e7f0      	b.n	8014d0a <_dtoa_r+0x2ba>
 8014d28:	2501      	movs	r5, #1
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	9306      	str	r3, [sp, #24]
 8014d2e:	950a      	str	r5, [sp, #40]	; 0x28
 8014d30:	f04f 33ff 	mov.w	r3, #4294967295
 8014d34:	9302      	str	r3, [sp, #8]
 8014d36:	4699      	mov	r9, r3
 8014d38:	2200      	movs	r2, #0
 8014d3a:	2312      	movs	r3, #18
 8014d3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d3e:	e7aa      	b.n	8014c96 <_dtoa_r+0x246>
 8014d40:	2301      	movs	r3, #1
 8014d42:	930a      	str	r3, [sp, #40]	; 0x28
 8014d44:	e7f4      	b.n	8014d30 <_dtoa_r+0x2e0>
 8014d46:	2301      	movs	r3, #1
 8014d48:	9302      	str	r3, [sp, #8]
 8014d4a:	4699      	mov	r9, r3
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	e7f5      	b.n	8014d3c <_dtoa_r+0x2ec>
 8014d50:	3101      	adds	r1, #1
 8014d52:	6071      	str	r1, [r6, #4]
 8014d54:	0052      	lsls	r2, r2, #1
 8014d56:	e7a2      	b.n	8014c9e <_dtoa_r+0x24e>
 8014d58:	636f4361 	.word	0x636f4361
 8014d5c:	3fd287a7 	.word	0x3fd287a7
 8014d60:	8b60c8b3 	.word	0x8b60c8b3
 8014d64:	3fc68a28 	.word	0x3fc68a28
 8014d68:	509f79fb 	.word	0x509f79fb
 8014d6c:	3fd34413 	.word	0x3fd34413
 8014d70:	7ff00000 	.word	0x7ff00000
 8014d74:	0801a27f 	.word	0x0801a27f
 8014d78:	3ff80000 	.word	0x3ff80000
 8014d7c:	0801a338 	.word	0x0801a338
 8014d80:	0801a310 	.word	0x0801a310
 8014d84:	0801a301 	.word	0x0801a301
 8014d88:	07f1      	lsls	r1, r6, #31
 8014d8a:	d508      	bpl.n	8014d9e <_dtoa_r+0x34e>
 8014d8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d94:	f7eb fc58 	bl	8000648 <__aeabi_dmul>
 8014d98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d9c:	3501      	adds	r5, #1
 8014d9e:	1076      	asrs	r6, r6, #1
 8014da0:	3708      	adds	r7, #8
 8014da2:	2e00      	cmp	r6, #0
 8014da4:	d1f0      	bne.n	8014d88 <_dtoa_r+0x338>
 8014da6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014dae:	f7eb fd75 	bl	800089c <__aeabi_ddiv>
 8014db2:	e9cd 0100 	strd	r0, r1, [sp]
 8014db6:	e01a      	b.n	8014dee <_dtoa_r+0x39e>
 8014db8:	2502      	movs	r5, #2
 8014dba:	e7a3      	b.n	8014d04 <_dtoa_r+0x2b4>
 8014dbc:	f000 80a0 	beq.w	8014f00 <_dtoa_r+0x4b0>
 8014dc0:	f1ca 0600 	rsb	r6, sl, #0
 8014dc4:	4b9f      	ldr	r3, [pc, #636]	; (8015044 <_dtoa_r+0x5f4>)
 8014dc6:	4fa0      	ldr	r7, [pc, #640]	; (8015048 <_dtoa_r+0x5f8>)
 8014dc8:	f006 020f 	and.w	r2, r6, #15
 8014dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014dd8:	f7eb fc36 	bl	8000648 <__aeabi_dmul>
 8014ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8014de0:	1136      	asrs	r6, r6, #4
 8014de2:	2300      	movs	r3, #0
 8014de4:	2502      	movs	r5, #2
 8014de6:	2e00      	cmp	r6, #0
 8014de8:	d17f      	bne.n	8014eea <_dtoa_r+0x49a>
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1e1      	bne.n	8014db2 <_dtoa_r+0x362>
 8014dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f000 8087 	beq.w	8014f04 <_dtoa_r+0x4b4>
 8014df6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	4b93      	ldr	r3, [pc, #588]	; (801504c <_dtoa_r+0x5fc>)
 8014dfe:	4630      	mov	r0, r6
 8014e00:	4639      	mov	r1, r7
 8014e02:	f7eb fe93 	bl	8000b2c <__aeabi_dcmplt>
 8014e06:	2800      	cmp	r0, #0
 8014e08:	d07c      	beq.n	8014f04 <_dtoa_r+0x4b4>
 8014e0a:	f1b9 0f00 	cmp.w	r9, #0
 8014e0e:	d079      	beq.n	8014f04 <_dtoa_r+0x4b4>
 8014e10:	9b02      	ldr	r3, [sp, #8]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	dd35      	ble.n	8014e82 <_dtoa_r+0x432>
 8014e16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014e1a:	9308      	str	r3, [sp, #32]
 8014e1c:	4639      	mov	r1, r7
 8014e1e:	2200      	movs	r2, #0
 8014e20:	4b8b      	ldr	r3, [pc, #556]	; (8015050 <_dtoa_r+0x600>)
 8014e22:	4630      	mov	r0, r6
 8014e24:	f7eb fc10 	bl	8000648 <__aeabi_dmul>
 8014e28:	e9cd 0100 	strd	r0, r1, [sp]
 8014e2c:	9f02      	ldr	r7, [sp, #8]
 8014e2e:	3501      	adds	r5, #1
 8014e30:	4628      	mov	r0, r5
 8014e32:	f7eb fb9f 	bl	8000574 <__aeabi_i2d>
 8014e36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e3a:	f7eb fc05 	bl	8000648 <__aeabi_dmul>
 8014e3e:	2200      	movs	r2, #0
 8014e40:	4b84      	ldr	r3, [pc, #528]	; (8015054 <_dtoa_r+0x604>)
 8014e42:	f7eb fa4b 	bl	80002dc <__adddf3>
 8014e46:	4605      	mov	r5, r0
 8014e48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014e4c:	2f00      	cmp	r7, #0
 8014e4e:	d15d      	bne.n	8014f0c <_dtoa_r+0x4bc>
 8014e50:	2200      	movs	r2, #0
 8014e52:	4b81      	ldr	r3, [pc, #516]	; (8015058 <_dtoa_r+0x608>)
 8014e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e58:	f7eb fa3e 	bl	80002d8 <__aeabi_dsub>
 8014e5c:	462a      	mov	r2, r5
 8014e5e:	4633      	mov	r3, r6
 8014e60:	e9cd 0100 	strd	r0, r1, [sp]
 8014e64:	f7eb fe80 	bl	8000b68 <__aeabi_dcmpgt>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	f040 8288 	bne.w	801537e <_dtoa_r+0x92e>
 8014e6e:	462a      	mov	r2, r5
 8014e70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e78:	f7eb fe58 	bl	8000b2c <__aeabi_dcmplt>
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	f040 827c 	bne.w	801537a <_dtoa_r+0x92a>
 8014e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014e86:	e9cd 2300 	strd	r2, r3, [sp]
 8014e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	f2c0 8150 	blt.w	8015132 <_dtoa_r+0x6e2>
 8014e92:	f1ba 0f0e 	cmp.w	sl, #14
 8014e96:	f300 814c 	bgt.w	8015132 <_dtoa_r+0x6e2>
 8014e9a:	4b6a      	ldr	r3, [pc, #424]	; (8015044 <_dtoa_r+0x5f4>)
 8014e9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014ea0:	ed93 7b00 	vldr	d7, [r3]
 8014ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014eac:	f280 80d8 	bge.w	8015060 <_dtoa_r+0x610>
 8014eb0:	f1b9 0f00 	cmp.w	r9, #0
 8014eb4:	f300 80d4 	bgt.w	8015060 <_dtoa_r+0x610>
 8014eb8:	f040 825e 	bne.w	8015378 <_dtoa_r+0x928>
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	4b66      	ldr	r3, [pc, #408]	; (8015058 <_dtoa_r+0x608>)
 8014ec0:	ec51 0b17 	vmov	r0, r1, d7
 8014ec4:	f7eb fbc0 	bl	8000648 <__aeabi_dmul>
 8014ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ecc:	f7eb fe42 	bl	8000b54 <__aeabi_dcmpge>
 8014ed0:	464f      	mov	r7, r9
 8014ed2:	464e      	mov	r6, r9
 8014ed4:	2800      	cmp	r0, #0
 8014ed6:	f040 8234 	bne.w	8015342 <_dtoa_r+0x8f2>
 8014eda:	2331      	movs	r3, #49	; 0x31
 8014edc:	f10b 0501 	add.w	r5, fp, #1
 8014ee0:	f88b 3000 	strb.w	r3, [fp]
 8014ee4:	f10a 0a01 	add.w	sl, sl, #1
 8014ee8:	e22f      	b.n	801534a <_dtoa_r+0x8fa>
 8014eea:	07f2      	lsls	r2, r6, #31
 8014eec:	d505      	bpl.n	8014efa <_dtoa_r+0x4aa>
 8014eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ef2:	f7eb fba9 	bl	8000648 <__aeabi_dmul>
 8014ef6:	3501      	adds	r5, #1
 8014ef8:	2301      	movs	r3, #1
 8014efa:	1076      	asrs	r6, r6, #1
 8014efc:	3708      	adds	r7, #8
 8014efe:	e772      	b.n	8014de6 <_dtoa_r+0x396>
 8014f00:	2502      	movs	r5, #2
 8014f02:	e774      	b.n	8014dee <_dtoa_r+0x39e>
 8014f04:	f8cd a020 	str.w	sl, [sp, #32]
 8014f08:	464f      	mov	r7, r9
 8014f0a:	e791      	b.n	8014e30 <_dtoa_r+0x3e0>
 8014f0c:	4b4d      	ldr	r3, [pc, #308]	; (8015044 <_dtoa_r+0x5f4>)
 8014f0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014f12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d047      	beq.n	8014fac <_dtoa_r+0x55c>
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	460b      	mov	r3, r1
 8014f20:	2000      	movs	r0, #0
 8014f22:	494e      	ldr	r1, [pc, #312]	; (801505c <_dtoa_r+0x60c>)
 8014f24:	f7eb fcba 	bl	800089c <__aeabi_ddiv>
 8014f28:	462a      	mov	r2, r5
 8014f2a:	4633      	mov	r3, r6
 8014f2c:	f7eb f9d4 	bl	80002d8 <__aeabi_dsub>
 8014f30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014f34:	465d      	mov	r5, fp
 8014f36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f3a:	f7eb fe35 	bl	8000ba8 <__aeabi_d2iz>
 8014f3e:	4606      	mov	r6, r0
 8014f40:	f7eb fb18 	bl	8000574 <__aeabi_i2d>
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f4c:	f7eb f9c4 	bl	80002d8 <__aeabi_dsub>
 8014f50:	3630      	adds	r6, #48	; 0x30
 8014f52:	f805 6b01 	strb.w	r6, [r5], #1
 8014f56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8014f5e:	f7eb fde5 	bl	8000b2c <__aeabi_dcmplt>
 8014f62:	2800      	cmp	r0, #0
 8014f64:	d163      	bne.n	801502e <_dtoa_r+0x5de>
 8014f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	4937      	ldr	r1, [pc, #220]	; (801504c <_dtoa_r+0x5fc>)
 8014f6e:	f7eb f9b3 	bl	80002d8 <__aeabi_dsub>
 8014f72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014f76:	f7eb fdd9 	bl	8000b2c <__aeabi_dcmplt>
 8014f7a:	2800      	cmp	r0, #0
 8014f7c:	f040 80b7 	bne.w	80150ee <_dtoa_r+0x69e>
 8014f80:	eba5 030b 	sub.w	r3, r5, fp
 8014f84:	429f      	cmp	r7, r3
 8014f86:	f77f af7c 	ble.w	8014e82 <_dtoa_r+0x432>
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	4b30      	ldr	r3, [pc, #192]	; (8015050 <_dtoa_r+0x600>)
 8014f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014f92:	f7eb fb59 	bl	8000648 <__aeabi_dmul>
 8014f96:	2200      	movs	r2, #0
 8014f98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014f9c:	4b2c      	ldr	r3, [pc, #176]	; (8015050 <_dtoa_r+0x600>)
 8014f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fa2:	f7eb fb51 	bl	8000648 <__aeabi_dmul>
 8014fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8014faa:	e7c4      	b.n	8014f36 <_dtoa_r+0x4e6>
 8014fac:	462a      	mov	r2, r5
 8014fae:	4633      	mov	r3, r6
 8014fb0:	f7eb fb4a 	bl	8000648 <__aeabi_dmul>
 8014fb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014fb8:	eb0b 0507 	add.w	r5, fp, r7
 8014fbc:	465e      	mov	r6, fp
 8014fbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fc2:	f7eb fdf1 	bl	8000ba8 <__aeabi_d2iz>
 8014fc6:	4607      	mov	r7, r0
 8014fc8:	f7eb fad4 	bl	8000574 <__aeabi_i2d>
 8014fcc:	3730      	adds	r7, #48	; 0x30
 8014fce:	4602      	mov	r2, r0
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fd6:	f7eb f97f 	bl	80002d8 <__aeabi_dsub>
 8014fda:	f806 7b01 	strb.w	r7, [r6], #1
 8014fde:	42ae      	cmp	r6, r5
 8014fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8014fe4:	f04f 0200 	mov.w	r2, #0
 8014fe8:	d126      	bne.n	8015038 <_dtoa_r+0x5e8>
 8014fea:	4b1c      	ldr	r3, [pc, #112]	; (801505c <_dtoa_r+0x60c>)
 8014fec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ff0:	f7eb f974 	bl	80002dc <__adddf3>
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ffc:	f7eb fdb4 	bl	8000b68 <__aeabi_dcmpgt>
 8015000:	2800      	cmp	r0, #0
 8015002:	d174      	bne.n	80150ee <_dtoa_r+0x69e>
 8015004:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015008:	2000      	movs	r0, #0
 801500a:	4914      	ldr	r1, [pc, #80]	; (801505c <_dtoa_r+0x60c>)
 801500c:	f7eb f964 	bl	80002d8 <__aeabi_dsub>
 8015010:	4602      	mov	r2, r0
 8015012:	460b      	mov	r3, r1
 8015014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015018:	f7eb fd88 	bl	8000b2c <__aeabi_dcmplt>
 801501c:	2800      	cmp	r0, #0
 801501e:	f43f af30 	beq.w	8014e82 <_dtoa_r+0x432>
 8015022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015026:	2b30      	cmp	r3, #48	; 0x30
 8015028:	f105 32ff 	add.w	r2, r5, #4294967295
 801502c:	d002      	beq.n	8015034 <_dtoa_r+0x5e4>
 801502e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015032:	e04a      	b.n	80150ca <_dtoa_r+0x67a>
 8015034:	4615      	mov	r5, r2
 8015036:	e7f4      	b.n	8015022 <_dtoa_r+0x5d2>
 8015038:	4b05      	ldr	r3, [pc, #20]	; (8015050 <_dtoa_r+0x600>)
 801503a:	f7eb fb05 	bl	8000648 <__aeabi_dmul>
 801503e:	e9cd 0100 	strd	r0, r1, [sp]
 8015042:	e7bc      	b.n	8014fbe <_dtoa_r+0x56e>
 8015044:	0801a338 	.word	0x0801a338
 8015048:	0801a310 	.word	0x0801a310
 801504c:	3ff00000 	.word	0x3ff00000
 8015050:	40240000 	.word	0x40240000
 8015054:	401c0000 	.word	0x401c0000
 8015058:	40140000 	.word	0x40140000
 801505c:	3fe00000 	.word	0x3fe00000
 8015060:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015064:	465d      	mov	r5, fp
 8015066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801506a:	4630      	mov	r0, r6
 801506c:	4639      	mov	r1, r7
 801506e:	f7eb fc15 	bl	800089c <__aeabi_ddiv>
 8015072:	f7eb fd99 	bl	8000ba8 <__aeabi_d2iz>
 8015076:	4680      	mov	r8, r0
 8015078:	f7eb fa7c 	bl	8000574 <__aeabi_i2d>
 801507c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015080:	f7eb fae2 	bl	8000648 <__aeabi_dmul>
 8015084:	4602      	mov	r2, r0
 8015086:	460b      	mov	r3, r1
 8015088:	4630      	mov	r0, r6
 801508a:	4639      	mov	r1, r7
 801508c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015090:	f7eb f922 	bl	80002d8 <__aeabi_dsub>
 8015094:	f805 6b01 	strb.w	r6, [r5], #1
 8015098:	eba5 060b 	sub.w	r6, r5, fp
 801509c:	45b1      	cmp	r9, r6
 801509e:	4602      	mov	r2, r0
 80150a0:	460b      	mov	r3, r1
 80150a2:	d139      	bne.n	8015118 <_dtoa_r+0x6c8>
 80150a4:	f7eb f91a 	bl	80002dc <__adddf3>
 80150a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150ac:	4606      	mov	r6, r0
 80150ae:	460f      	mov	r7, r1
 80150b0:	f7eb fd5a 	bl	8000b68 <__aeabi_dcmpgt>
 80150b4:	b9c8      	cbnz	r0, 80150ea <_dtoa_r+0x69a>
 80150b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150ba:	4630      	mov	r0, r6
 80150bc:	4639      	mov	r1, r7
 80150be:	f7eb fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80150c2:	b110      	cbz	r0, 80150ca <_dtoa_r+0x67a>
 80150c4:	f018 0f01 	tst.w	r8, #1
 80150c8:	d10f      	bne.n	80150ea <_dtoa_r+0x69a>
 80150ca:	9904      	ldr	r1, [sp, #16]
 80150cc:	4620      	mov	r0, r4
 80150ce:	f000 fdff 	bl	8015cd0 <_Bfree>
 80150d2:	2300      	movs	r3, #0
 80150d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150d6:	702b      	strb	r3, [r5, #0]
 80150d8:	f10a 0301 	add.w	r3, sl, #1
 80150dc:	6013      	str	r3, [r2, #0]
 80150de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	f000 8241 	beq.w	8015568 <_dtoa_r+0xb18>
 80150e6:	601d      	str	r5, [r3, #0]
 80150e8:	e23e      	b.n	8015568 <_dtoa_r+0xb18>
 80150ea:	f8cd a020 	str.w	sl, [sp, #32]
 80150ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80150f2:	2a39      	cmp	r2, #57	; 0x39
 80150f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80150f8:	d108      	bne.n	801510c <_dtoa_r+0x6bc>
 80150fa:	459b      	cmp	fp, r3
 80150fc:	d10a      	bne.n	8015114 <_dtoa_r+0x6c4>
 80150fe:	9b08      	ldr	r3, [sp, #32]
 8015100:	3301      	adds	r3, #1
 8015102:	9308      	str	r3, [sp, #32]
 8015104:	2330      	movs	r3, #48	; 0x30
 8015106:	f88b 3000 	strb.w	r3, [fp]
 801510a:	465b      	mov	r3, fp
 801510c:	781a      	ldrb	r2, [r3, #0]
 801510e:	3201      	adds	r2, #1
 8015110:	701a      	strb	r2, [r3, #0]
 8015112:	e78c      	b.n	801502e <_dtoa_r+0x5de>
 8015114:	461d      	mov	r5, r3
 8015116:	e7ea      	b.n	80150ee <_dtoa_r+0x69e>
 8015118:	2200      	movs	r2, #0
 801511a:	4b9b      	ldr	r3, [pc, #620]	; (8015388 <_dtoa_r+0x938>)
 801511c:	f7eb fa94 	bl	8000648 <__aeabi_dmul>
 8015120:	2200      	movs	r2, #0
 8015122:	2300      	movs	r3, #0
 8015124:	4606      	mov	r6, r0
 8015126:	460f      	mov	r7, r1
 8015128:	f7eb fcf6 	bl	8000b18 <__aeabi_dcmpeq>
 801512c:	2800      	cmp	r0, #0
 801512e:	d09a      	beq.n	8015066 <_dtoa_r+0x616>
 8015130:	e7cb      	b.n	80150ca <_dtoa_r+0x67a>
 8015132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015134:	2a00      	cmp	r2, #0
 8015136:	f000 808b 	beq.w	8015250 <_dtoa_r+0x800>
 801513a:	9a06      	ldr	r2, [sp, #24]
 801513c:	2a01      	cmp	r2, #1
 801513e:	dc6e      	bgt.n	801521e <_dtoa_r+0x7ce>
 8015140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015142:	2a00      	cmp	r2, #0
 8015144:	d067      	beq.n	8015216 <_dtoa_r+0x7c6>
 8015146:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801514a:	9f07      	ldr	r7, [sp, #28]
 801514c:	9d05      	ldr	r5, [sp, #20]
 801514e:	9a05      	ldr	r2, [sp, #20]
 8015150:	2101      	movs	r1, #1
 8015152:	441a      	add	r2, r3
 8015154:	4620      	mov	r0, r4
 8015156:	9205      	str	r2, [sp, #20]
 8015158:	4498      	add	r8, r3
 801515a:	f000 fe97 	bl	8015e8c <__i2b>
 801515e:	4606      	mov	r6, r0
 8015160:	2d00      	cmp	r5, #0
 8015162:	dd0c      	ble.n	801517e <_dtoa_r+0x72e>
 8015164:	f1b8 0f00 	cmp.w	r8, #0
 8015168:	dd09      	ble.n	801517e <_dtoa_r+0x72e>
 801516a:	4545      	cmp	r5, r8
 801516c:	9a05      	ldr	r2, [sp, #20]
 801516e:	462b      	mov	r3, r5
 8015170:	bfa8      	it	ge
 8015172:	4643      	movge	r3, r8
 8015174:	1ad2      	subs	r2, r2, r3
 8015176:	9205      	str	r2, [sp, #20]
 8015178:	1aed      	subs	r5, r5, r3
 801517a:	eba8 0803 	sub.w	r8, r8, r3
 801517e:	9b07      	ldr	r3, [sp, #28]
 8015180:	b1eb      	cbz	r3, 80151be <_dtoa_r+0x76e>
 8015182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015184:	2b00      	cmp	r3, #0
 8015186:	d067      	beq.n	8015258 <_dtoa_r+0x808>
 8015188:	b18f      	cbz	r7, 80151ae <_dtoa_r+0x75e>
 801518a:	4631      	mov	r1, r6
 801518c:	463a      	mov	r2, r7
 801518e:	4620      	mov	r0, r4
 8015190:	f000 ff1c 	bl	8015fcc <__pow5mult>
 8015194:	9a04      	ldr	r2, [sp, #16]
 8015196:	4601      	mov	r1, r0
 8015198:	4606      	mov	r6, r0
 801519a:	4620      	mov	r0, r4
 801519c:	f000 fe7f 	bl	8015e9e <__multiply>
 80151a0:	9904      	ldr	r1, [sp, #16]
 80151a2:	9008      	str	r0, [sp, #32]
 80151a4:	4620      	mov	r0, r4
 80151a6:	f000 fd93 	bl	8015cd0 <_Bfree>
 80151aa:	9b08      	ldr	r3, [sp, #32]
 80151ac:	9304      	str	r3, [sp, #16]
 80151ae:	9b07      	ldr	r3, [sp, #28]
 80151b0:	1bda      	subs	r2, r3, r7
 80151b2:	d004      	beq.n	80151be <_dtoa_r+0x76e>
 80151b4:	9904      	ldr	r1, [sp, #16]
 80151b6:	4620      	mov	r0, r4
 80151b8:	f000 ff08 	bl	8015fcc <__pow5mult>
 80151bc:	9004      	str	r0, [sp, #16]
 80151be:	2101      	movs	r1, #1
 80151c0:	4620      	mov	r0, r4
 80151c2:	f000 fe63 	bl	8015e8c <__i2b>
 80151c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151c8:	4607      	mov	r7, r0
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	f000 81d0 	beq.w	8015570 <_dtoa_r+0xb20>
 80151d0:	461a      	mov	r2, r3
 80151d2:	4601      	mov	r1, r0
 80151d4:	4620      	mov	r0, r4
 80151d6:	f000 fef9 	bl	8015fcc <__pow5mult>
 80151da:	9b06      	ldr	r3, [sp, #24]
 80151dc:	2b01      	cmp	r3, #1
 80151de:	4607      	mov	r7, r0
 80151e0:	dc40      	bgt.n	8015264 <_dtoa_r+0x814>
 80151e2:	9b00      	ldr	r3, [sp, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d139      	bne.n	801525c <_dtoa_r+0x80c>
 80151e8:	9b01      	ldr	r3, [sp, #4]
 80151ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d136      	bne.n	8015260 <_dtoa_r+0x810>
 80151f2:	9b01      	ldr	r3, [sp, #4]
 80151f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151f8:	0d1b      	lsrs	r3, r3, #20
 80151fa:	051b      	lsls	r3, r3, #20
 80151fc:	b12b      	cbz	r3, 801520a <_dtoa_r+0x7ba>
 80151fe:	9b05      	ldr	r3, [sp, #20]
 8015200:	3301      	adds	r3, #1
 8015202:	9305      	str	r3, [sp, #20]
 8015204:	f108 0801 	add.w	r8, r8, #1
 8015208:	2301      	movs	r3, #1
 801520a:	9307      	str	r3, [sp, #28]
 801520c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801520e:	2b00      	cmp	r3, #0
 8015210:	d12a      	bne.n	8015268 <_dtoa_r+0x818>
 8015212:	2001      	movs	r0, #1
 8015214:	e030      	b.n	8015278 <_dtoa_r+0x828>
 8015216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015218:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801521c:	e795      	b.n	801514a <_dtoa_r+0x6fa>
 801521e:	9b07      	ldr	r3, [sp, #28]
 8015220:	f109 37ff 	add.w	r7, r9, #4294967295
 8015224:	42bb      	cmp	r3, r7
 8015226:	bfbf      	itttt	lt
 8015228:	9b07      	ldrlt	r3, [sp, #28]
 801522a:	9707      	strlt	r7, [sp, #28]
 801522c:	1afa      	sublt	r2, r7, r3
 801522e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015230:	bfbb      	ittet	lt
 8015232:	189b      	addlt	r3, r3, r2
 8015234:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015236:	1bdf      	subge	r7, r3, r7
 8015238:	2700      	movlt	r7, #0
 801523a:	f1b9 0f00 	cmp.w	r9, #0
 801523e:	bfb5      	itete	lt
 8015240:	9b05      	ldrlt	r3, [sp, #20]
 8015242:	9d05      	ldrge	r5, [sp, #20]
 8015244:	eba3 0509 	sublt.w	r5, r3, r9
 8015248:	464b      	movge	r3, r9
 801524a:	bfb8      	it	lt
 801524c:	2300      	movlt	r3, #0
 801524e:	e77e      	b.n	801514e <_dtoa_r+0x6fe>
 8015250:	9f07      	ldr	r7, [sp, #28]
 8015252:	9d05      	ldr	r5, [sp, #20]
 8015254:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015256:	e783      	b.n	8015160 <_dtoa_r+0x710>
 8015258:	9a07      	ldr	r2, [sp, #28]
 801525a:	e7ab      	b.n	80151b4 <_dtoa_r+0x764>
 801525c:	2300      	movs	r3, #0
 801525e:	e7d4      	b.n	801520a <_dtoa_r+0x7ba>
 8015260:	9b00      	ldr	r3, [sp, #0]
 8015262:	e7d2      	b.n	801520a <_dtoa_r+0x7ba>
 8015264:	2300      	movs	r3, #0
 8015266:	9307      	str	r3, [sp, #28]
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801526e:	6918      	ldr	r0, [r3, #16]
 8015270:	f000 fdbe 	bl	8015df0 <__hi0bits>
 8015274:	f1c0 0020 	rsb	r0, r0, #32
 8015278:	4440      	add	r0, r8
 801527a:	f010 001f 	ands.w	r0, r0, #31
 801527e:	d047      	beq.n	8015310 <_dtoa_r+0x8c0>
 8015280:	f1c0 0320 	rsb	r3, r0, #32
 8015284:	2b04      	cmp	r3, #4
 8015286:	dd3b      	ble.n	8015300 <_dtoa_r+0x8b0>
 8015288:	9b05      	ldr	r3, [sp, #20]
 801528a:	f1c0 001c 	rsb	r0, r0, #28
 801528e:	4403      	add	r3, r0
 8015290:	9305      	str	r3, [sp, #20]
 8015292:	4405      	add	r5, r0
 8015294:	4480      	add	r8, r0
 8015296:	9b05      	ldr	r3, [sp, #20]
 8015298:	2b00      	cmp	r3, #0
 801529a:	dd05      	ble.n	80152a8 <_dtoa_r+0x858>
 801529c:	461a      	mov	r2, r3
 801529e:	9904      	ldr	r1, [sp, #16]
 80152a0:	4620      	mov	r0, r4
 80152a2:	f000 fee1 	bl	8016068 <__lshift>
 80152a6:	9004      	str	r0, [sp, #16]
 80152a8:	f1b8 0f00 	cmp.w	r8, #0
 80152ac:	dd05      	ble.n	80152ba <_dtoa_r+0x86a>
 80152ae:	4639      	mov	r1, r7
 80152b0:	4642      	mov	r2, r8
 80152b2:	4620      	mov	r0, r4
 80152b4:	f000 fed8 	bl	8016068 <__lshift>
 80152b8:	4607      	mov	r7, r0
 80152ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152bc:	b353      	cbz	r3, 8015314 <_dtoa_r+0x8c4>
 80152be:	4639      	mov	r1, r7
 80152c0:	9804      	ldr	r0, [sp, #16]
 80152c2:	f000 ff25 	bl	8016110 <__mcmp>
 80152c6:	2800      	cmp	r0, #0
 80152c8:	da24      	bge.n	8015314 <_dtoa_r+0x8c4>
 80152ca:	2300      	movs	r3, #0
 80152cc:	220a      	movs	r2, #10
 80152ce:	9904      	ldr	r1, [sp, #16]
 80152d0:	4620      	mov	r0, r4
 80152d2:	f000 fd14 	bl	8015cfe <__multadd>
 80152d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152d8:	9004      	str	r0, [sp, #16]
 80152da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152de:	2b00      	cmp	r3, #0
 80152e0:	f000 814d 	beq.w	801557e <_dtoa_r+0xb2e>
 80152e4:	2300      	movs	r3, #0
 80152e6:	4631      	mov	r1, r6
 80152e8:	220a      	movs	r2, #10
 80152ea:	4620      	mov	r0, r4
 80152ec:	f000 fd07 	bl	8015cfe <__multadd>
 80152f0:	9b02      	ldr	r3, [sp, #8]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	4606      	mov	r6, r0
 80152f6:	dc4f      	bgt.n	8015398 <_dtoa_r+0x948>
 80152f8:	9b06      	ldr	r3, [sp, #24]
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	dd4c      	ble.n	8015398 <_dtoa_r+0x948>
 80152fe:	e011      	b.n	8015324 <_dtoa_r+0x8d4>
 8015300:	d0c9      	beq.n	8015296 <_dtoa_r+0x846>
 8015302:	9a05      	ldr	r2, [sp, #20]
 8015304:	331c      	adds	r3, #28
 8015306:	441a      	add	r2, r3
 8015308:	9205      	str	r2, [sp, #20]
 801530a:	441d      	add	r5, r3
 801530c:	4498      	add	r8, r3
 801530e:	e7c2      	b.n	8015296 <_dtoa_r+0x846>
 8015310:	4603      	mov	r3, r0
 8015312:	e7f6      	b.n	8015302 <_dtoa_r+0x8b2>
 8015314:	f1b9 0f00 	cmp.w	r9, #0
 8015318:	dc38      	bgt.n	801538c <_dtoa_r+0x93c>
 801531a:	9b06      	ldr	r3, [sp, #24]
 801531c:	2b02      	cmp	r3, #2
 801531e:	dd35      	ble.n	801538c <_dtoa_r+0x93c>
 8015320:	f8cd 9008 	str.w	r9, [sp, #8]
 8015324:	9b02      	ldr	r3, [sp, #8]
 8015326:	b963      	cbnz	r3, 8015342 <_dtoa_r+0x8f2>
 8015328:	4639      	mov	r1, r7
 801532a:	2205      	movs	r2, #5
 801532c:	4620      	mov	r0, r4
 801532e:	f000 fce6 	bl	8015cfe <__multadd>
 8015332:	4601      	mov	r1, r0
 8015334:	4607      	mov	r7, r0
 8015336:	9804      	ldr	r0, [sp, #16]
 8015338:	f000 feea 	bl	8016110 <__mcmp>
 801533c:	2800      	cmp	r0, #0
 801533e:	f73f adcc 	bgt.w	8014eda <_dtoa_r+0x48a>
 8015342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015344:	465d      	mov	r5, fp
 8015346:	ea6f 0a03 	mvn.w	sl, r3
 801534a:	f04f 0900 	mov.w	r9, #0
 801534e:	4639      	mov	r1, r7
 8015350:	4620      	mov	r0, r4
 8015352:	f000 fcbd 	bl	8015cd0 <_Bfree>
 8015356:	2e00      	cmp	r6, #0
 8015358:	f43f aeb7 	beq.w	80150ca <_dtoa_r+0x67a>
 801535c:	f1b9 0f00 	cmp.w	r9, #0
 8015360:	d005      	beq.n	801536e <_dtoa_r+0x91e>
 8015362:	45b1      	cmp	r9, r6
 8015364:	d003      	beq.n	801536e <_dtoa_r+0x91e>
 8015366:	4649      	mov	r1, r9
 8015368:	4620      	mov	r0, r4
 801536a:	f000 fcb1 	bl	8015cd0 <_Bfree>
 801536e:	4631      	mov	r1, r6
 8015370:	4620      	mov	r0, r4
 8015372:	f000 fcad 	bl	8015cd0 <_Bfree>
 8015376:	e6a8      	b.n	80150ca <_dtoa_r+0x67a>
 8015378:	2700      	movs	r7, #0
 801537a:	463e      	mov	r6, r7
 801537c:	e7e1      	b.n	8015342 <_dtoa_r+0x8f2>
 801537e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015382:	463e      	mov	r6, r7
 8015384:	e5a9      	b.n	8014eda <_dtoa_r+0x48a>
 8015386:	bf00      	nop
 8015388:	40240000 	.word	0x40240000
 801538c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801538e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015392:	2b00      	cmp	r3, #0
 8015394:	f000 80fa 	beq.w	801558c <_dtoa_r+0xb3c>
 8015398:	2d00      	cmp	r5, #0
 801539a:	dd05      	ble.n	80153a8 <_dtoa_r+0x958>
 801539c:	4631      	mov	r1, r6
 801539e:	462a      	mov	r2, r5
 80153a0:	4620      	mov	r0, r4
 80153a2:	f000 fe61 	bl	8016068 <__lshift>
 80153a6:	4606      	mov	r6, r0
 80153a8:	9b07      	ldr	r3, [sp, #28]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d04c      	beq.n	8015448 <_dtoa_r+0x9f8>
 80153ae:	6871      	ldr	r1, [r6, #4]
 80153b0:	4620      	mov	r0, r4
 80153b2:	f000 fc59 	bl	8015c68 <_Balloc>
 80153b6:	6932      	ldr	r2, [r6, #16]
 80153b8:	3202      	adds	r2, #2
 80153ba:	4605      	mov	r5, r0
 80153bc:	0092      	lsls	r2, r2, #2
 80153be:	f106 010c 	add.w	r1, r6, #12
 80153c2:	300c      	adds	r0, #12
 80153c4:	f7fd fd4e 	bl	8012e64 <memcpy>
 80153c8:	2201      	movs	r2, #1
 80153ca:	4629      	mov	r1, r5
 80153cc:	4620      	mov	r0, r4
 80153ce:	f000 fe4b 	bl	8016068 <__lshift>
 80153d2:	9b00      	ldr	r3, [sp, #0]
 80153d4:	f8cd b014 	str.w	fp, [sp, #20]
 80153d8:	f003 0301 	and.w	r3, r3, #1
 80153dc:	46b1      	mov	r9, r6
 80153de:	9307      	str	r3, [sp, #28]
 80153e0:	4606      	mov	r6, r0
 80153e2:	4639      	mov	r1, r7
 80153e4:	9804      	ldr	r0, [sp, #16]
 80153e6:	f7ff faa7 	bl	8014938 <quorem>
 80153ea:	4649      	mov	r1, r9
 80153ec:	4605      	mov	r5, r0
 80153ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80153f2:	9804      	ldr	r0, [sp, #16]
 80153f4:	f000 fe8c 	bl	8016110 <__mcmp>
 80153f8:	4632      	mov	r2, r6
 80153fa:	9000      	str	r0, [sp, #0]
 80153fc:	4639      	mov	r1, r7
 80153fe:	4620      	mov	r0, r4
 8015400:	f000 fea0 	bl	8016144 <__mdiff>
 8015404:	68c3      	ldr	r3, [r0, #12]
 8015406:	4602      	mov	r2, r0
 8015408:	bb03      	cbnz	r3, 801544c <_dtoa_r+0x9fc>
 801540a:	4601      	mov	r1, r0
 801540c:	9008      	str	r0, [sp, #32]
 801540e:	9804      	ldr	r0, [sp, #16]
 8015410:	f000 fe7e 	bl	8016110 <__mcmp>
 8015414:	9a08      	ldr	r2, [sp, #32]
 8015416:	4603      	mov	r3, r0
 8015418:	4611      	mov	r1, r2
 801541a:	4620      	mov	r0, r4
 801541c:	9308      	str	r3, [sp, #32]
 801541e:	f000 fc57 	bl	8015cd0 <_Bfree>
 8015422:	9b08      	ldr	r3, [sp, #32]
 8015424:	b9a3      	cbnz	r3, 8015450 <_dtoa_r+0xa00>
 8015426:	9a06      	ldr	r2, [sp, #24]
 8015428:	b992      	cbnz	r2, 8015450 <_dtoa_r+0xa00>
 801542a:	9a07      	ldr	r2, [sp, #28]
 801542c:	b982      	cbnz	r2, 8015450 <_dtoa_r+0xa00>
 801542e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015432:	d029      	beq.n	8015488 <_dtoa_r+0xa38>
 8015434:	9b00      	ldr	r3, [sp, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	dd01      	ble.n	801543e <_dtoa_r+0x9ee>
 801543a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801543e:	9b05      	ldr	r3, [sp, #20]
 8015440:	1c5d      	adds	r5, r3, #1
 8015442:	f883 8000 	strb.w	r8, [r3]
 8015446:	e782      	b.n	801534e <_dtoa_r+0x8fe>
 8015448:	4630      	mov	r0, r6
 801544a:	e7c2      	b.n	80153d2 <_dtoa_r+0x982>
 801544c:	2301      	movs	r3, #1
 801544e:	e7e3      	b.n	8015418 <_dtoa_r+0x9c8>
 8015450:	9a00      	ldr	r2, [sp, #0]
 8015452:	2a00      	cmp	r2, #0
 8015454:	db04      	blt.n	8015460 <_dtoa_r+0xa10>
 8015456:	d125      	bne.n	80154a4 <_dtoa_r+0xa54>
 8015458:	9a06      	ldr	r2, [sp, #24]
 801545a:	bb1a      	cbnz	r2, 80154a4 <_dtoa_r+0xa54>
 801545c:	9a07      	ldr	r2, [sp, #28]
 801545e:	bb0a      	cbnz	r2, 80154a4 <_dtoa_r+0xa54>
 8015460:	2b00      	cmp	r3, #0
 8015462:	ddec      	ble.n	801543e <_dtoa_r+0x9ee>
 8015464:	2201      	movs	r2, #1
 8015466:	9904      	ldr	r1, [sp, #16]
 8015468:	4620      	mov	r0, r4
 801546a:	f000 fdfd 	bl	8016068 <__lshift>
 801546e:	4639      	mov	r1, r7
 8015470:	9004      	str	r0, [sp, #16]
 8015472:	f000 fe4d 	bl	8016110 <__mcmp>
 8015476:	2800      	cmp	r0, #0
 8015478:	dc03      	bgt.n	8015482 <_dtoa_r+0xa32>
 801547a:	d1e0      	bne.n	801543e <_dtoa_r+0x9ee>
 801547c:	f018 0f01 	tst.w	r8, #1
 8015480:	d0dd      	beq.n	801543e <_dtoa_r+0x9ee>
 8015482:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015486:	d1d8      	bne.n	801543a <_dtoa_r+0x9ea>
 8015488:	9b05      	ldr	r3, [sp, #20]
 801548a:	9a05      	ldr	r2, [sp, #20]
 801548c:	1c5d      	adds	r5, r3, #1
 801548e:	2339      	movs	r3, #57	; 0x39
 8015490:	7013      	strb	r3, [r2, #0]
 8015492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015496:	2b39      	cmp	r3, #57	; 0x39
 8015498:	f105 32ff 	add.w	r2, r5, #4294967295
 801549c:	d04f      	beq.n	801553e <_dtoa_r+0xaee>
 801549e:	3301      	adds	r3, #1
 80154a0:	7013      	strb	r3, [r2, #0]
 80154a2:	e754      	b.n	801534e <_dtoa_r+0x8fe>
 80154a4:	9a05      	ldr	r2, [sp, #20]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	f102 0501 	add.w	r5, r2, #1
 80154ac:	dd06      	ble.n	80154bc <_dtoa_r+0xa6c>
 80154ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80154b2:	d0e9      	beq.n	8015488 <_dtoa_r+0xa38>
 80154b4:	f108 0801 	add.w	r8, r8, #1
 80154b8:	9b05      	ldr	r3, [sp, #20]
 80154ba:	e7c2      	b.n	8015442 <_dtoa_r+0x9f2>
 80154bc:	9a02      	ldr	r2, [sp, #8]
 80154be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80154c2:	eba5 030b 	sub.w	r3, r5, fp
 80154c6:	4293      	cmp	r3, r2
 80154c8:	d021      	beq.n	801550e <_dtoa_r+0xabe>
 80154ca:	2300      	movs	r3, #0
 80154cc:	220a      	movs	r2, #10
 80154ce:	9904      	ldr	r1, [sp, #16]
 80154d0:	4620      	mov	r0, r4
 80154d2:	f000 fc14 	bl	8015cfe <__multadd>
 80154d6:	45b1      	cmp	r9, r6
 80154d8:	9004      	str	r0, [sp, #16]
 80154da:	f04f 0300 	mov.w	r3, #0
 80154de:	f04f 020a 	mov.w	r2, #10
 80154e2:	4649      	mov	r1, r9
 80154e4:	4620      	mov	r0, r4
 80154e6:	d105      	bne.n	80154f4 <_dtoa_r+0xaa4>
 80154e8:	f000 fc09 	bl	8015cfe <__multadd>
 80154ec:	4681      	mov	r9, r0
 80154ee:	4606      	mov	r6, r0
 80154f0:	9505      	str	r5, [sp, #20]
 80154f2:	e776      	b.n	80153e2 <_dtoa_r+0x992>
 80154f4:	f000 fc03 	bl	8015cfe <__multadd>
 80154f8:	4631      	mov	r1, r6
 80154fa:	4681      	mov	r9, r0
 80154fc:	2300      	movs	r3, #0
 80154fe:	220a      	movs	r2, #10
 8015500:	4620      	mov	r0, r4
 8015502:	f000 fbfc 	bl	8015cfe <__multadd>
 8015506:	4606      	mov	r6, r0
 8015508:	e7f2      	b.n	80154f0 <_dtoa_r+0xaa0>
 801550a:	f04f 0900 	mov.w	r9, #0
 801550e:	2201      	movs	r2, #1
 8015510:	9904      	ldr	r1, [sp, #16]
 8015512:	4620      	mov	r0, r4
 8015514:	f000 fda8 	bl	8016068 <__lshift>
 8015518:	4639      	mov	r1, r7
 801551a:	9004      	str	r0, [sp, #16]
 801551c:	f000 fdf8 	bl	8016110 <__mcmp>
 8015520:	2800      	cmp	r0, #0
 8015522:	dcb6      	bgt.n	8015492 <_dtoa_r+0xa42>
 8015524:	d102      	bne.n	801552c <_dtoa_r+0xadc>
 8015526:	f018 0f01 	tst.w	r8, #1
 801552a:	d1b2      	bne.n	8015492 <_dtoa_r+0xa42>
 801552c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015530:	2b30      	cmp	r3, #48	; 0x30
 8015532:	f105 32ff 	add.w	r2, r5, #4294967295
 8015536:	f47f af0a 	bne.w	801534e <_dtoa_r+0x8fe>
 801553a:	4615      	mov	r5, r2
 801553c:	e7f6      	b.n	801552c <_dtoa_r+0xadc>
 801553e:	4593      	cmp	fp, r2
 8015540:	d105      	bne.n	801554e <_dtoa_r+0xafe>
 8015542:	2331      	movs	r3, #49	; 0x31
 8015544:	f10a 0a01 	add.w	sl, sl, #1
 8015548:	f88b 3000 	strb.w	r3, [fp]
 801554c:	e6ff      	b.n	801534e <_dtoa_r+0x8fe>
 801554e:	4615      	mov	r5, r2
 8015550:	e79f      	b.n	8015492 <_dtoa_r+0xa42>
 8015552:	f8df b064 	ldr.w	fp, [pc, #100]	; 80155b8 <_dtoa_r+0xb68>
 8015556:	e007      	b.n	8015568 <_dtoa_r+0xb18>
 8015558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801555a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80155bc <_dtoa_r+0xb6c>
 801555e:	b11b      	cbz	r3, 8015568 <_dtoa_r+0xb18>
 8015560:	f10b 0308 	add.w	r3, fp, #8
 8015564:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015566:	6013      	str	r3, [r2, #0]
 8015568:	4658      	mov	r0, fp
 801556a:	b017      	add	sp, #92	; 0x5c
 801556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015570:	9b06      	ldr	r3, [sp, #24]
 8015572:	2b01      	cmp	r3, #1
 8015574:	f77f ae35 	ble.w	80151e2 <_dtoa_r+0x792>
 8015578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801557a:	9307      	str	r3, [sp, #28]
 801557c:	e649      	b.n	8015212 <_dtoa_r+0x7c2>
 801557e:	9b02      	ldr	r3, [sp, #8]
 8015580:	2b00      	cmp	r3, #0
 8015582:	dc03      	bgt.n	801558c <_dtoa_r+0xb3c>
 8015584:	9b06      	ldr	r3, [sp, #24]
 8015586:	2b02      	cmp	r3, #2
 8015588:	f73f aecc 	bgt.w	8015324 <_dtoa_r+0x8d4>
 801558c:	465d      	mov	r5, fp
 801558e:	4639      	mov	r1, r7
 8015590:	9804      	ldr	r0, [sp, #16]
 8015592:	f7ff f9d1 	bl	8014938 <quorem>
 8015596:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801559a:	f805 8b01 	strb.w	r8, [r5], #1
 801559e:	9a02      	ldr	r2, [sp, #8]
 80155a0:	eba5 030b 	sub.w	r3, r5, fp
 80155a4:	429a      	cmp	r2, r3
 80155a6:	ddb0      	ble.n	801550a <_dtoa_r+0xaba>
 80155a8:	2300      	movs	r3, #0
 80155aa:	220a      	movs	r2, #10
 80155ac:	9904      	ldr	r1, [sp, #16]
 80155ae:	4620      	mov	r0, r4
 80155b0:	f000 fba5 	bl	8015cfe <__multadd>
 80155b4:	9004      	str	r0, [sp, #16]
 80155b6:	e7ea      	b.n	801558e <_dtoa_r+0xb3e>
 80155b8:	0801a27e 	.word	0x0801a27e
 80155bc:	0801a2f8 	.word	0x0801a2f8

080155c0 <rshift>:
 80155c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155c2:	6906      	ldr	r6, [r0, #16]
 80155c4:	114b      	asrs	r3, r1, #5
 80155c6:	429e      	cmp	r6, r3
 80155c8:	f100 0414 	add.w	r4, r0, #20
 80155cc:	dd30      	ble.n	8015630 <rshift+0x70>
 80155ce:	f011 011f 	ands.w	r1, r1, #31
 80155d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80155d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80155da:	d108      	bne.n	80155ee <rshift+0x2e>
 80155dc:	4621      	mov	r1, r4
 80155de:	42b2      	cmp	r2, r6
 80155e0:	460b      	mov	r3, r1
 80155e2:	d211      	bcs.n	8015608 <rshift+0x48>
 80155e4:	f852 3b04 	ldr.w	r3, [r2], #4
 80155e8:	f841 3b04 	str.w	r3, [r1], #4
 80155ec:	e7f7      	b.n	80155de <rshift+0x1e>
 80155ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80155f2:	f1c1 0c20 	rsb	ip, r1, #32
 80155f6:	40cd      	lsrs	r5, r1
 80155f8:	3204      	adds	r2, #4
 80155fa:	4623      	mov	r3, r4
 80155fc:	42b2      	cmp	r2, r6
 80155fe:	4617      	mov	r7, r2
 8015600:	d30c      	bcc.n	801561c <rshift+0x5c>
 8015602:	601d      	str	r5, [r3, #0]
 8015604:	b105      	cbz	r5, 8015608 <rshift+0x48>
 8015606:	3304      	adds	r3, #4
 8015608:	1b1a      	subs	r2, r3, r4
 801560a:	42a3      	cmp	r3, r4
 801560c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015610:	bf08      	it	eq
 8015612:	2300      	moveq	r3, #0
 8015614:	6102      	str	r2, [r0, #16]
 8015616:	bf08      	it	eq
 8015618:	6143      	streq	r3, [r0, #20]
 801561a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801561c:	683f      	ldr	r7, [r7, #0]
 801561e:	fa07 f70c 	lsl.w	r7, r7, ip
 8015622:	433d      	orrs	r5, r7
 8015624:	f843 5b04 	str.w	r5, [r3], #4
 8015628:	f852 5b04 	ldr.w	r5, [r2], #4
 801562c:	40cd      	lsrs	r5, r1
 801562e:	e7e5      	b.n	80155fc <rshift+0x3c>
 8015630:	4623      	mov	r3, r4
 8015632:	e7e9      	b.n	8015608 <rshift+0x48>

08015634 <__hexdig_fun>:
 8015634:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015638:	2b09      	cmp	r3, #9
 801563a:	d802      	bhi.n	8015642 <__hexdig_fun+0xe>
 801563c:	3820      	subs	r0, #32
 801563e:	b2c0      	uxtb	r0, r0
 8015640:	4770      	bx	lr
 8015642:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015646:	2b05      	cmp	r3, #5
 8015648:	d801      	bhi.n	801564e <__hexdig_fun+0x1a>
 801564a:	3847      	subs	r0, #71	; 0x47
 801564c:	e7f7      	b.n	801563e <__hexdig_fun+0xa>
 801564e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015652:	2b05      	cmp	r3, #5
 8015654:	d801      	bhi.n	801565a <__hexdig_fun+0x26>
 8015656:	3827      	subs	r0, #39	; 0x27
 8015658:	e7f1      	b.n	801563e <__hexdig_fun+0xa>
 801565a:	2000      	movs	r0, #0
 801565c:	4770      	bx	lr

0801565e <__gethex>:
 801565e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015662:	b08b      	sub	sp, #44	; 0x2c
 8015664:	468a      	mov	sl, r1
 8015666:	9002      	str	r0, [sp, #8]
 8015668:	9816      	ldr	r0, [sp, #88]	; 0x58
 801566a:	9306      	str	r3, [sp, #24]
 801566c:	4690      	mov	r8, r2
 801566e:	f000 fad0 	bl	8015c12 <__localeconv_l>
 8015672:	6803      	ldr	r3, [r0, #0]
 8015674:	9303      	str	r3, [sp, #12]
 8015676:	4618      	mov	r0, r3
 8015678:	f7ea fdd2 	bl	8000220 <strlen>
 801567c:	9b03      	ldr	r3, [sp, #12]
 801567e:	9001      	str	r0, [sp, #4]
 8015680:	4403      	add	r3, r0
 8015682:	f04f 0b00 	mov.w	fp, #0
 8015686:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801568a:	9307      	str	r3, [sp, #28]
 801568c:	f8da 3000 	ldr.w	r3, [sl]
 8015690:	3302      	adds	r3, #2
 8015692:	461f      	mov	r7, r3
 8015694:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015698:	2830      	cmp	r0, #48	; 0x30
 801569a:	d06c      	beq.n	8015776 <__gethex+0x118>
 801569c:	f7ff ffca 	bl	8015634 <__hexdig_fun>
 80156a0:	4604      	mov	r4, r0
 80156a2:	2800      	cmp	r0, #0
 80156a4:	d16a      	bne.n	801577c <__gethex+0x11e>
 80156a6:	9a01      	ldr	r2, [sp, #4]
 80156a8:	9903      	ldr	r1, [sp, #12]
 80156aa:	4638      	mov	r0, r7
 80156ac:	f001 f8f4 	bl	8016898 <strncmp>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d166      	bne.n	8015782 <__gethex+0x124>
 80156b4:	9b01      	ldr	r3, [sp, #4]
 80156b6:	5cf8      	ldrb	r0, [r7, r3]
 80156b8:	18fe      	adds	r6, r7, r3
 80156ba:	f7ff ffbb 	bl	8015634 <__hexdig_fun>
 80156be:	2800      	cmp	r0, #0
 80156c0:	d062      	beq.n	8015788 <__gethex+0x12a>
 80156c2:	4633      	mov	r3, r6
 80156c4:	7818      	ldrb	r0, [r3, #0]
 80156c6:	2830      	cmp	r0, #48	; 0x30
 80156c8:	461f      	mov	r7, r3
 80156ca:	f103 0301 	add.w	r3, r3, #1
 80156ce:	d0f9      	beq.n	80156c4 <__gethex+0x66>
 80156d0:	f7ff ffb0 	bl	8015634 <__hexdig_fun>
 80156d4:	fab0 f580 	clz	r5, r0
 80156d8:	096d      	lsrs	r5, r5, #5
 80156da:	4634      	mov	r4, r6
 80156dc:	f04f 0b01 	mov.w	fp, #1
 80156e0:	463a      	mov	r2, r7
 80156e2:	4616      	mov	r6, r2
 80156e4:	3201      	adds	r2, #1
 80156e6:	7830      	ldrb	r0, [r6, #0]
 80156e8:	f7ff ffa4 	bl	8015634 <__hexdig_fun>
 80156ec:	2800      	cmp	r0, #0
 80156ee:	d1f8      	bne.n	80156e2 <__gethex+0x84>
 80156f0:	9a01      	ldr	r2, [sp, #4]
 80156f2:	9903      	ldr	r1, [sp, #12]
 80156f4:	4630      	mov	r0, r6
 80156f6:	f001 f8cf 	bl	8016898 <strncmp>
 80156fa:	b950      	cbnz	r0, 8015712 <__gethex+0xb4>
 80156fc:	b954      	cbnz	r4, 8015714 <__gethex+0xb6>
 80156fe:	9b01      	ldr	r3, [sp, #4]
 8015700:	18f4      	adds	r4, r6, r3
 8015702:	4622      	mov	r2, r4
 8015704:	4616      	mov	r6, r2
 8015706:	3201      	adds	r2, #1
 8015708:	7830      	ldrb	r0, [r6, #0]
 801570a:	f7ff ff93 	bl	8015634 <__hexdig_fun>
 801570e:	2800      	cmp	r0, #0
 8015710:	d1f8      	bne.n	8015704 <__gethex+0xa6>
 8015712:	b10c      	cbz	r4, 8015718 <__gethex+0xba>
 8015714:	1ba4      	subs	r4, r4, r6
 8015716:	00a4      	lsls	r4, r4, #2
 8015718:	7833      	ldrb	r3, [r6, #0]
 801571a:	2b50      	cmp	r3, #80	; 0x50
 801571c:	d001      	beq.n	8015722 <__gethex+0xc4>
 801571e:	2b70      	cmp	r3, #112	; 0x70
 8015720:	d140      	bne.n	80157a4 <__gethex+0x146>
 8015722:	7873      	ldrb	r3, [r6, #1]
 8015724:	2b2b      	cmp	r3, #43	; 0x2b
 8015726:	d031      	beq.n	801578c <__gethex+0x12e>
 8015728:	2b2d      	cmp	r3, #45	; 0x2d
 801572a:	d033      	beq.n	8015794 <__gethex+0x136>
 801572c:	1c71      	adds	r1, r6, #1
 801572e:	f04f 0900 	mov.w	r9, #0
 8015732:	7808      	ldrb	r0, [r1, #0]
 8015734:	f7ff ff7e 	bl	8015634 <__hexdig_fun>
 8015738:	1e43      	subs	r3, r0, #1
 801573a:	b2db      	uxtb	r3, r3
 801573c:	2b18      	cmp	r3, #24
 801573e:	d831      	bhi.n	80157a4 <__gethex+0x146>
 8015740:	f1a0 0210 	sub.w	r2, r0, #16
 8015744:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015748:	f7ff ff74 	bl	8015634 <__hexdig_fun>
 801574c:	1e43      	subs	r3, r0, #1
 801574e:	b2db      	uxtb	r3, r3
 8015750:	2b18      	cmp	r3, #24
 8015752:	d922      	bls.n	801579a <__gethex+0x13c>
 8015754:	f1b9 0f00 	cmp.w	r9, #0
 8015758:	d000      	beq.n	801575c <__gethex+0xfe>
 801575a:	4252      	negs	r2, r2
 801575c:	4414      	add	r4, r2
 801575e:	f8ca 1000 	str.w	r1, [sl]
 8015762:	b30d      	cbz	r5, 80157a8 <__gethex+0x14a>
 8015764:	f1bb 0f00 	cmp.w	fp, #0
 8015768:	bf0c      	ite	eq
 801576a:	2706      	moveq	r7, #6
 801576c:	2700      	movne	r7, #0
 801576e:	4638      	mov	r0, r7
 8015770:	b00b      	add	sp, #44	; 0x2c
 8015772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015776:	f10b 0b01 	add.w	fp, fp, #1
 801577a:	e78a      	b.n	8015692 <__gethex+0x34>
 801577c:	2500      	movs	r5, #0
 801577e:	462c      	mov	r4, r5
 8015780:	e7ae      	b.n	80156e0 <__gethex+0x82>
 8015782:	463e      	mov	r6, r7
 8015784:	2501      	movs	r5, #1
 8015786:	e7c7      	b.n	8015718 <__gethex+0xba>
 8015788:	4604      	mov	r4, r0
 801578a:	e7fb      	b.n	8015784 <__gethex+0x126>
 801578c:	f04f 0900 	mov.w	r9, #0
 8015790:	1cb1      	adds	r1, r6, #2
 8015792:	e7ce      	b.n	8015732 <__gethex+0xd4>
 8015794:	f04f 0901 	mov.w	r9, #1
 8015798:	e7fa      	b.n	8015790 <__gethex+0x132>
 801579a:	230a      	movs	r3, #10
 801579c:	fb03 0202 	mla	r2, r3, r2, r0
 80157a0:	3a10      	subs	r2, #16
 80157a2:	e7cf      	b.n	8015744 <__gethex+0xe6>
 80157a4:	4631      	mov	r1, r6
 80157a6:	e7da      	b.n	801575e <__gethex+0x100>
 80157a8:	1bf3      	subs	r3, r6, r7
 80157aa:	3b01      	subs	r3, #1
 80157ac:	4629      	mov	r1, r5
 80157ae:	2b07      	cmp	r3, #7
 80157b0:	dc49      	bgt.n	8015846 <__gethex+0x1e8>
 80157b2:	9802      	ldr	r0, [sp, #8]
 80157b4:	f000 fa58 	bl	8015c68 <_Balloc>
 80157b8:	9b01      	ldr	r3, [sp, #4]
 80157ba:	f100 0914 	add.w	r9, r0, #20
 80157be:	f04f 0b00 	mov.w	fp, #0
 80157c2:	f1c3 0301 	rsb	r3, r3, #1
 80157c6:	4605      	mov	r5, r0
 80157c8:	f8cd 9010 	str.w	r9, [sp, #16]
 80157cc:	46da      	mov	sl, fp
 80157ce:	9308      	str	r3, [sp, #32]
 80157d0:	42b7      	cmp	r7, r6
 80157d2:	d33b      	bcc.n	801584c <__gethex+0x1ee>
 80157d4:	9804      	ldr	r0, [sp, #16]
 80157d6:	f840 ab04 	str.w	sl, [r0], #4
 80157da:	eba0 0009 	sub.w	r0, r0, r9
 80157de:	1080      	asrs	r0, r0, #2
 80157e0:	6128      	str	r0, [r5, #16]
 80157e2:	0147      	lsls	r7, r0, #5
 80157e4:	4650      	mov	r0, sl
 80157e6:	f000 fb03 	bl	8015df0 <__hi0bits>
 80157ea:	f8d8 6000 	ldr.w	r6, [r8]
 80157ee:	1a3f      	subs	r7, r7, r0
 80157f0:	42b7      	cmp	r7, r6
 80157f2:	dd64      	ble.n	80158be <__gethex+0x260>
 80157f4:	1bbf      	subs	r7, r7, r6
 80157f6:	4639      	mov	r1, r7
 80157f8:	4628      	mov	r0, r5
 80157fa:	f000 fe13 	bl	8016424 <__any_on>
 80157fe:	4682      	mov	sl, r0
 8015800:	b178      	cbz	r0, 8015822 <__gethex+0x1c4>
 8015802:	1e7b      	subs	r3, r7, #1
 8015804:	1159      	asrs	r1, r3, #5
 8015806:	f003 021f 	and.w	r2, r3, #31
 801580a:	f04f 0a01 	mov.w	sl, #1
 801580e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015812:	fa0a f202 	lsl.w	r2, sl, r2
 8015816:	420a      	tst	r2, r1
 8015818:	d003      	beq.n	8015822 <__gethex+0x1c4>
 801581a:	4553      	cmp	r3, sl
 801581c:	dc46      	bgt.n	80158ac <__gethex+0x24e>
 801581e:	f04f 0a02 	mov.w	sl, #2
 8015822:	4639      	mov	r1, r7
 8015824:	4628      	mov	r0, r5
 8015826:	f7ff fecb 	bl	80155c0 <rshift>
 801582a:	443c      	add	r4, r7
 801582c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015830:	42a3      	cmp	r3, r4
 8015832:	da52      	bge.n	80158da <__gethex+0x27c>
 8015834:	4629      	mov	r1, r5
 8015836:	9802      	ldr	r0, [sp, #8]
 8015838:	f000 fa4a 	bl	8015cd0 <_Bfree>
 801583c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801583e:	2300      	movs	r3, #0
 8015840:	6013      	str	r3, [r2, #0]
 8015842:	27a3      	movs	r7, #163	; 0xa3
 8015844:	e793      	b.n	801576e <__gethex+0x110>
 8015846:	3101      	adds	r1, #1
 8015848:	105b      	asrs	r3, r3, #1
 801584a:	e7b0      	b.n	80157ae <__gethex+0x150>
 801584c:	1e73      	subs	r3, r6, #1
 801584e:	9305      	str	r3, [sp, #20]
 8015850:	9a07      	ldr	r2, [sp, #28]
 8015852:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015856:	4293      	cmp	r3, r2
 8015858:	d018      	beq.n	801588c <__gethex+0x22e>
 801585a:	f1bb 0f20 	cmp.w	fp, #32
 801585e:	d107      	bne.n	8015870 <__gethex+0x212>
 8015860:	9b04      	ldr	r3, [sp, #16]
 8015862:	f8c3 a000 	str.w	sl, [r3]
 8015866:	3304      	adds	r3, #4
 8015868:	f04f 0a00 	mov.w	sl, #0
 801586c:	9304      	str	r3, [sp, #16]
 801586e:	46d3      	mov	fp, sl
 8015870:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015874:	f7ff fede 	bl	8015634 <__hexdig_fun>
 8015878:	f000 000f 	and.w	r0, r0, #15
 801587c:	fa00 f00b 	lsl.w	r0, r0, fp
 8015880:	ea4a 0a00 	orr.w	sl, sl, r0
 8015884:	f10b 0b04 	add.w	fp, fp, #4
 8015888:	9b05      	ldr	r3, [sp, #20]
 801588a:	e00d      	b.n	80158a8 <__gethex+0x24a>
 801588c:	9b05      	ldr	r3, [sp, #20]
 801588e:	9a08      	ldr	r2, [sp, #32]
 8015890:	4413      	add	r3, r2
 8015892:	42bb      	cmp	r3, r7
 8015894:	d3e1      	bcc.n	801585a <__gethex+0x1fc>
 8015896:	4618      	mov	r0, r3
 8015898:	9a01      	ldr	r2, [sp, #4]
 801589a:	9903      	ldr	r1, [sp, #12]
 801589c:	9309      	str	r3, [sp, #36]	; 0x24
 801589e:	f000 fffb 	bl	8016898 <strncmp>
 80158a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158a4:	2800      	cmp	r0, #0
 80158a6:	d1d8      	bne.n	801585a <__gethex+0x1fc>
 80158a8:	461e      	mov	r6, r3
 80158aa:	e791      	b.n	80157d0 <__gethex+0x172>
 80158ac:	1eb9      	subs	r1, r7, #2
 80158ae:	4628      	mov	r0, r5
 80158b0:	f000 fdb8 	bl	8016424 <__any_on>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d0b2      	beq.n	801581e <__gethex+0x1c0>
 80158b8:	f04f 0a03 	mov.w	sl, #3
 80158bc:	e7b1      	b.n	8015822 <__gethex+0x1c4>
 80158be:	da09      	bge.n	80158d4 <__gethex+0x276>
 80158c0:	1bf7      	subs	r7, r6, r7
 80158c2:	4629      	mov	r1, r5
 80158c4:	463a      	mov	r2, r7
 80158c6:	9802      	ldr	r0, [sp, #8]
 80158c8:	f000 fbce 	bl	8016068 <__lshift>
 80158cc:	1be4      	subs	r4, r4, r7
 80158ce:	4605      	mov	r5, r0
 80158d0:	f100 0914 	add.w	r9, r0, #20
 80158d4:	f04f 0a00 	mov.w	sl, #0
 80158d8:	e7a8      	b.n	801582c <__gethex+0x1ce>
 80158da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80158de:	42a0      	cmp	r0, r4
 80158e0:	dd6a      	ble.n	80159b8 <__gethex+0x35a>
 80158e2:	1b04      	subs	r4, r0, r4
 80158e4:	42a6      	cmp	r6, r4
 80158e6:	dc2e      	bgt.n	8015946 <__gethex+0x2e8>
 80158e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80158ec:	2b02      	cmp	r3, #2
 80158ee:	d022      	beq.n	8015936 <__gethex+0x2d8>
 80158f0:	2b03      	cmp	r3, #3
 80158f2:	d024      	beq.n	801593e <__gethex+0x2e0>
 80158f4:	2b01      	cmp	r3, #1
 80158f6:	d115      	bne.n	8015924 <__gethex+0x2c6>
 80158f8:	42a6      	cmp	r6, r4
 80158fa:	d113      	bne.n	8015924 <__gethex+0x2c6>
 80158fc:	2e01      	cmp	r6, #1
 80158fe:	dc0b      	bgt.n	8015918 <__gethex+0x2ba>
 8015900:	9a06      	ldr	r2, [sp, #24]
 8015902:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015906:	6013      	str	r3, [r2, #0]
 8015908:	2301      	movs	r3, #1
 801590a:	612b      	str	r3, [r5, #16]
 801590c:	f8c9 3000 	str.w	r3, [r9]
 8015910:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015912:	2762      	movs	r7, #98	; 0x62
 8015914:	601d      	str	r5, [r3, #0]
 8015916:	e72a      	b.n	801576e <__gethex+0x110>
 8015918:	1e71      	subs	r1, r6, #1
 801591a:	4628      	mov	r0, r5
 801591c:	f000 fd82 	bl	8016424 <__any_on>
 8015920:	2800      	cmp	r0, #0
 8015922:	d1ed      	bne.n	8015900 <__gethex+0x2a2>
 8015924:	4629      	mov	r1, r5
 8015926:	9802      	ldr	r0, [sp, #8]
 8015928:	f000 f9d2 	bl	8015cd0 <_Bfree>
 801592c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801592e:	2300      	movs	r3, #0
 8015930:	6013      	str	r3, [r2, #0]
 8015932:	2750      	movs	r7, #80	; 0x50
 8015934:	e71b      	b.n	801576e <__gethex+0x110>
 8015936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015938:	2b00      	cmp	r3, #0
 801593a:	d0e1      	beq.n	8015900 <__gethex+0x2a2>
 801593c:	e7f2      	b.n	8015924 <__gethex+0x2c6>
 801593e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015940:	2b00      	cmp	r3, #0
 8015942:	d1dd      	bne.n	8015900 <__gethex+0x2a2>
 8015944:	e7ee      	b.n	8015924 <__gethex+0x2c6>
 8015946:	1e67      	subs	r7, r4, #1
 8015948:	f1ba 0f00 	cmp.w	sl, #0
 801594c:	d131      	bne.n	80159b2 <__gethex+0x354>
 801594e:	b127      	cbz	r7, 801595a <__gethex+0x2fc>
 8015950:	4639      	mov	r1, r7
 8015952:	4628      	mov	r0, r5
 8015954:	f000 fd66 	bl	8016424 <__any_on>
 8015958:	4682      	mov	sl, r0
 801595a:	117a      	asrs	r2, r7, #5
 801595c:	2301      	movs	r3, #1
 801595e:	f007 071f 	and.w	r7, r7, #31
 8015962:	fa03 f707 	lsl.w	r7, r3, r7
 8015966:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801596a:	4621      	mov	r1, r4
 801596c:	421f      	tst	r7, r3
 801596e:	4628      	mov	r0, r5
 8015970:	bf18      	it	ne
 8015972:	f04a 0a02 	orrne.w	sl, sl, #2
 8015976:	1b36      	subs	r6, r6, r4
 8015978:	f7ff fe22 	bl	80155c0 <rshift>
 801597c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015980:	2702      	movs	r7, #2
 8015982:	f1ba 0f00 	cmp.w	sl, #0
 8015986:	d048      	beq.n	8015a1a <__gethex+0x3bc>
 8015988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801598c:	2b02      	cmp	r3, #2
 801598e:	d015      	beq.n	80159bc <__gethex+0x35e>
 8015990:	2b03      	cmp	r3, #3
 8015992:	d017      	beq.n	80159c4 <__gethex+0x366>
 8015994:	2b01      	cmp	r3, #1
 8015996:	d109      	bne.n	80159ac <__gethex+0x34e>
 8015998:	f01a 0f02 	tst.w	sl, #2
 801599c:	d006      	beq.n	80159ac <__gethex+0x34e>
 801599e:	f8d9 3000 	ldr.w	r3, [r9]
 80159a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80159a6:	f01a 0f01 	tst.w	sl, #1
 80159aa:	d10e      	bne.n	80159ca <__gethex+0x36c>
 80159ac:	f047 0710 	orr.w	r7, r7, #16
 80159b0:	e033      	b.n	8015a1a <__gethex+0x3bc>
 80159b2:	f04f 0a01 	mov.w	sl, #1
 80159b6:	e7d0      	b.n	801595a <__gethex+0x2fc>
 80159b8:	2701      	movs	r7, #1
 80159ba:	e7e2      	b.n	8015982 <__gethex+0x324>
 80159bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159be:	f1c3 0301 	rsb	r3, r3, #1
 80159c2:	9315      	str	r3, [sp, #84]	; 0x54
 80159c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d0f0      	beq.n	80159ac <__gethex+0x34e>
 80159ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80159ce:	f105 0314 	add.w	r3, r5, #20
 80159d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80159d6:	eb03 010a 	add.w	r1, r3, sl
 80159da:	f04f 0c00 	mov.w	ip, #0
 80159de:	4618      	mov	r0, r3
 80159e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80159e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80159e8:	d01c      	beq.n	8015a24 <__gethex+0x3c6>
 80159ea:	3201      	adds	r2, #1
 80159ec:	6002      	str	r2, [r0, #0]
 80159ee:	2f02      	cmp	r7, #2
 80159f0:	f105 0314 	add.w	r3, r5, #20
 80159f4:	d138      	bne.n	8015a68 <__gethex+0x40a>
 80159f6:	f8d8 2000 	ldr.w	r2, [r8]
 80159fa:	3a01      	subs	r2, #1
 80159fc:	42b2      	cmp	r2, r6
 80159fe:	d10a      	bne.n	8015a16 <__gethex+0x3b8>
 8015a00:	1171      	asrs	r1, r6, #5
 8015a02:	2201      	movs	r2, #1
 8015a04:	f006 061f 	and.w	r6, r6, #31
 8015a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015a0c:	fa02 f606 	lsl.w	r6, r2, r6
 8015a10:	421e      	tst	r6, r3
 8015a12:	bf18      	it	ne
 8015a14:	4617      	movne	r7, r2
 8015a16:	f047 0720 	orr.w	r7, r7, #32
 8015a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a1c:	601d      	str	r5, [r3, #0]
 8015a1e:	9b06      	ldr	r3, [sp, #24]
 8015a20:	601c      	str	r4, [r3, #0]
 8015a22:	e6a4      	b.n	801576e <__gethex+0x110>
 8015a24:	4299      	cmp	r1, r3
 8015a26:	f843 cc04 	str.w	ip, [r3, #-4]
 8015a2a:	d8d8      	bhi.n	80159de <__gethex+0x380>
 8015a2c:	68ab      	ldr	r3, [r5, #8]
 8015a2e:	4599      	cmp	r9, r3
 8015a30:	db12      	blt.n	8015a58 <__gethex+0x3fa>
 8015a32:	6869      	ldr	r1, [r5, #4]
 8015a34:	9802      	ldr	r0, [sp, #8]
 8015a36:	3101      	adds	r1, #1
 8015a38:	f000 f916 	bl	8015c68 <_Balloc>
 8015a3c:	692a      	ldr	r2, [r5, #16]
 8015a3e:	3202      	adds	r2, #2
 8015a40:	f105 010c 	add.w	r1, r5, #12
 8015a44:	4683      	mov	fp, r0
 8015a46:	0092      	lsls	r2, r2, #2
 8015a48:	300c      	adds	r0, #12
 8015a4a:	f7fd fa0b 	bl	8012e64 <memcpy>
 8015a4e:	4629      	mov	r1, r5
 8015a50:	9802      	ldr	r0, [sp, #8]
 8015a52:	f000 f93d 	bl	8015cd0 <_Bfree>
 8015a56:	465d      	mov	r5, fp
 8015a58:	692b      	ldr	r3, [r5, #16]
 8015a5a:	1c5a      	adds	r2, r3, #1
 8015a5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015a60:	612a      	str	r2, [r5, #16]
 8015a62:	2201      	movs	r2, #1
 8015a64:	615a      	str	r2, [r3, #20]
 8015a66:	e7c2      	b.n	80159ee <__gethex+0x390>
 8015a68:	692a      	ldr	r2, [r5, #16]
 8015a6a:	454a      	cmp	r2, r9
 8015a6c:	dd0b      	ble.n	8015a86 <__gethex+0x428>
 8015a6e:	2101      	movs	r1, #1
 8015a70:	4628      	mov	r0, r5
 8015a72:	f7ff fda5 	bl	80155c0 <rshift>
 8015a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a7a:	3401      	adds	r4, #1
 8015a7c:	42a3      	cmp	r3, r4
 8015a7e:	f6ff aed9 	blt.w	8015834 <__gethex+0x1d6>
 8015a82:	2701      	movs	r7, #1
 8015a84:	e7c7      	b.n	8015a16 <__gethex+0x3b8>
 8015a86:	f016 061f 	ands.w	r6, r6, #31
 8015a8a:	d0fa      	beq.n	8015a82 <__gethex+0x424>
 8015a8c:	449a      	add	sl, r3
 8015a8e:	f1c6 0620 	rsb	r6, r6, #32
 8015a92:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015a96:	f000 f9ab 	bl	8015df0 <__hi0bits>
 8015a9a:	42b0      	cmp	r0, r6
 8015a9c:	dbe7      	blt.n	8015a6e <__gethex+0x410>
 8015a9e:	e7f0      	b.n	8015a82 <__gethex+0x424>

08015aa0 <L_shift>:
 8015aa0:	f1c2 0208 	rsb	r2, r2, #8
 8015aa4:	0092      	lsls	r2, r2, #2
 8015aa6:	b570      	push	{r4, r5, r6, lr}
 8015aa8:	f1c2 0620 	rsb	r6, r2, #32
 8015aac:	6843      	ldr	r3, [r0, #4]
 8015aae:	6804      	ldr	r4, [r0, #0]
 8015ab0:	fa03 f506 	lsl.w	r5, r3, r6
 8015ab4:	432c      	orrs	r4, r5
 8015ab6:	40d3      	lsrs	r3, r2
 8015ab8:	6004      	str	r4, [r0, #0]
 8015aba:	f840 3f04 	str.w	r3, [r0, #4]!
 8015abe:	4288      	cmp	r0, r1
 8015ac0:	d3f4      	bcc.n	8015aac <L_shift+0xc>
 8015ac2:	bd70      	pop	{r4, r5, r6, pc}

08015ac4 <__match>:
 8015ac4:	b530      	push	{r4, r5, lr}
 8015ac6:	6803      	ldr	r3, [r0, #0]
 8015ac8:	3301      	adds	r3, #1
 8015aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ace:	b914      	cbnz	r4, 8015ad6 <__match+0x12>
 8015ad0:	6003      	str	r3, [r0, #0]
 8015ad2:	2001      	movs	r0, #1
 8015ad4:	bd30      	pop	{r4, r5, pc}
 8015ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ada:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015ade:	2d19      	cmp	r5, #25
 8015ae0:	bf98      	it	ls
 8015ae2:	3220      	addls	r2, #32
 8015ae4:	42a2      	cmp	r2, r4
 8015ae6:	d0f0      	beq.n	8015aca <__match+0x6>
 8015ae8:	2000      	movs	r0, #0
 8015aea:	e7f3      	b.n	8015ad4 <__match+0x10>

08015aec <__hexnan>:
 8015aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af0:	680b      	ldr	r3, [r1, #0]
 8015af2:	6801      	ldr	r1, [r0, #0]
 8015af4:	115f      	asrs	r7, r3, #5
 8015af6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015afa:	f013 031f 	ands.w	r3, r3, #31
 8015afe:	b087      	sub	sp, #28
 8015b00:	bf18      	it	ne
 8015b02:	3704      	addne	r7, #4
 8015b04:	2500      	movs	r5, #0
 8015b06:	1f3e      	subs	r6, r7, #4
 8015b08:	4682      	mov	sl, r0
 8015b0a:	4690      	mov	r8, r2
 8015b0c:	9301      	str	r3, [sp, #4]
 8015b0e:	f847 5c04 	str.w	r5, [r7, #-4]
 8015b12:	46b1      	mov	r9, r6
 8015b14:	4634      	mov	r4, r6
 8015b16:	9502      	str	r5, [sp, #8]
 8015b18:	46ab      	mov	fp, r5
 8015b1a:	784a      	ldrb	r2, [r1, #1]
 8015b1c:	1c4b      	adds	r3, r1, #1
 8015b1e:	9303      	str	r3, [sp, #12]
 8015b20:	b342      	cbz	r2, 8015b74 <__hexnan+0x88>
 8015b22:	4610      	mov	r0, r2
 8015b24:	9105      	str	r1, [sp, #20]
 8015b26:	9204      	str	r2, [sp, #16]
 8015b28:	f7ff fd84 	bl	8015634 <__hexdig_fun>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	d143      	bne.n	8015bb8 <__hexnan+0xcc>
 8015b30:	9a04      	ldr	r2, [sp, #16]
 8015b32:	9905      	ldr	r1, [sp, #20]
 8015b34:	2a20      	cmp	r2, #32
 8015b36:	d818      	bhi.n	8015b6a <__hexnan+0x7e>
 8015b38:	9b02      	ldr	r3, [sp, #8]
 8015b3a:	459b      	cmp	fp, r3
 8015b3c:	dd13      	ble.n	8015b66 <__hexnan+0x7a>
 8015b3e:	454c      	cmp	r4, r9
 8015b40:	d206      	bcs.n	8015b50 <__hexnan+0x64>
 8015b42:	2d07      	cmp	r5, #7
 8015b44:	dc04      	bgt.n	8015b50 <__hexnan+0x64>
 8015b46:	462a      	mov	r2, r5
 8015b48:	4649      	mov	r1, r9
 8015b4a:	4620      	mov	r0, r4
 8015b4c:	f7ff ffa8 	bl	8015aa0 <L_shift>
 8015b50:	4544      	cmp	r4, r8
 8015b52:	d944      	bls.n	8015bde <__hexnan+0xf2>
 8015b54:	2300      	movs	r3, #0
 8015b56:	f1a4 0904 	sub.w	r9, r4, #4
 8015b5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8015b5e:	f8cd b008 	str.w	fp, [sp, #8]
 8015b62:	464c      	mov	r4, r9
 8015b64:	461d      	mov	r5, r3
 8015b66:	9903      	ldr	r1, [sp, #12]
 8015b68:	e7d7      	b.n	8015b1a <__hexnan+0x2e>
 8015b6a:	2a29      	cmp	r2, #41	; 0x29
 8015b6c:	d14a      	bne.n	8015c04 <__hexnan+0x118>
 8015b6e:	3102      	adds	r1, #2
 8015b70:	f8ca 1000 	str.w	r1, [sl]
 8015b74:	f1bb 0f00 	cmp.w	fp, #0
 8015b78:	d044      	beq.n	8015c04 <__hexnan+0x118>
 8015b7a:	454c      	cmp	r4, r9
 8015b7c:	d206      	bcs.n	8015b8c <__hexnan+0xa0>
 8015b7e:	2d07      	cmp	r5, #7
 8015b80:	dc04      	bgt.n	8015b8c <__hexnan+0xa0>
 8015b82:	462a      	mov	r2, r5
 8015b84:	4649      	mov	r1, r9
 8015b86:	4620      	mov	r0, r4
 8015b88:	f7ff ff8a 	bl	8015aa0 <L_shift>
 8015b8c:	4544      	cmp	r4, r8
 8015b8e:	d928      	bls.n	8015be2 <__hexnan+0xf6>
 8015b90:	4643      	mov	r3, r8
 8015b92:	f854 2b04 	ldr.w	r2, [r4], #4
 8015b96:	f843 2b04 	str.w	r2, [r3], #4
 8015b9a:	42a6      	cmp	r6, r4
 8015b9c:	d2f9      	bcs.n	8015b92 <__hexnan+0xa6>
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	f843 2b04 	str.w	r2, [r3], #4
 8015ba4:	429e      	cmp	r6, r3
 8015ba6:	d2fb      	bcs.n	8015ba0 <__hexnan+0xb4>
 8015ba8:	6833      	ldr	r3, [r6, #0]
 8015baa:	b91b      	cbnz	r3, 8015bb4 <__hexnan+0xc8>
 8015bac:	4546      	cmp	r6, r8
 8015bae:	d127      	bne.n	8015c00 <__hexnan+0x114>
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	6033      	str	r3, [r6, #0]
 8015bb4:	2005      	movs	r0, #5
 8015bb6:	e026      	b.n	8015c06 <__hexnan+0x11a>
 8015bb8:	3501      	adds	r5, #1
 8015bba:	2d08      	cmp	r5, #8
 8015bbc:	f10b 0b01 	add.w	fp, fp, #1
 8015bc0:	dd06      	ble.n	8015bd0 <__hexnan+0xe4>
 8015bc2:	4544      	cmp	r4, r8
 8015bc4:	d9cf      	bls.n	8015b66 <__hexnan+0x7a>
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8015bcc:	2501      	movs	r5, #1
 8015bce:	3c04      	subs	r4, #4
 8015bd0:	6822      	ldr	r2, [r4, #0]
 8015bd2:	f000 000f 	and.w	r0, r0, #15
 8015bd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015bda:	6020      	str	r0, [r4, #0]
 8015bdc:	e7c3      	b.n	8015b66 <__hexnan+0x7a>
 8015bde:	2508      	movs	r5, #8
 8015be0:	e7c1      	b.n	8015b66 <__hexnan+0x7a>
 8015be2:	9b01      	ldr	r3, [sp, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d0df      	beq.n	8015ba8 <__hexnan+0xbc>
 8015be8:	f04f 32ff 	mov.w	r2, #4294967295
 8015bec:	f1c3 0320 	rsb	r3, r3, #32
 8015bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8015bf4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015bf8:	401a      	ands	r2, r3
 8015bfa:	f847 2c04 	str.w	r2, [r7, #-4]
 8015bfe:	e7d3      	b.n	8015ba8 <__hexnan+0xbc>
 8015c00:	3e04      	subs	r6, #4
 8015c02:	e7d1      	b.n	8015ba8 <__hexnan+0xbc>
 8015c04:	2004      	movs	r0, #4
 8015c06:	b007      	add	sp, #28
 8015c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c0c <__locale_ctype_ptr_l>:
 8015c0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015c10:	4770      	bx	lr

08015c12 <__localeconv_l>:
 8015c12:	30f0      	adds	r0, #240	; 0xf0
 8015c14:	4770      	bx	lr
	...

08015c18 <_localeconv_r>:
 8015c18:	4b04      	ldr	r3, [pc, #16]	; (8015c2c <_localeconv_r+0x14>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	6a18      	ldr	r0, [r3, #32]
 8015c1e:	4b04      	ldr	r3, [pc, #16]	; (8015c30 <_localeconv_r+0x18>)
 8015c20:	2800      	cmp	r0, #0
 8015c22:	bf08      	it	eq
 8015c24:	4618      	moveq	r0, r3
 8015c26:	30f0      	adds	r0, #240	; 0xf0
 8015c28:	4770      	bx	lr
 8015c2a:	bf00      	nop
 8015c2c:	20002d20 	.word	0x20002d20
 8015c30:	20002d84 	.word	0x20002d84

08015c34 <malloc>:
 8015c34:	4b02      	ldr	r3, [pc, #8]	; (8015c40 <malloc+0xc>)
 8015c36:	4601      	mov	r1, r0
 8015c38:	6818      	ldr	r0, [r3, #0]
 8015c3a:	f000 bc71 	b.w	8016520 <_malloc_r>
 8015c3e:	bf00      	nop
 8015c40:	20002d20 	.word	0x20002d20

08015c44 <__ascii_mbtowc>:
 8015c44:	b082      	sub	sp, #8
 8015c46:	b901      	cbnz	r1, 8015c4a <__ascii_mbtowc+0x6>
 8015c48:	a901      	add	r1, sp, #4
 8015c4a:	b142      	cbz	r2, 8015c5e <__ascii_mbtowc+0x1a>
 8015c4c:	b14b      	cbz	r3, 8015c62 <__ascii_mbtowc+0x1e>
 8015c4e:	7813      	ldrb	r3, [r2, #0]
 8015c50:	600b      	str	r3, [r1, #0]
 8015c52:	7812      	ldrb	r2, [r2, #0]
 8015c54:	1c10      	adds	r0, r2, #0
 8015c56:	bf18      	it	ne
 8015c58:	2001      	movne	r0, #1
 8015c5a:	b002      	add	sp, #8
 8015c5c:	4770      	bx	lr
 8015c5e:	4610      	mov	r0, r2
 8015c60:	e7fb      	b.n	8015c5a <__ascii_mbtowc+0x16>
 8015c62:	f06f 0001 	mvn.w	r0, #1
 8015c66:	e7f8      	b.n	8015c5a <__ascii_mbtowc+0x16>

08015c68 <_Balloc>:
 8015c68:	b570      	push	{r4, r5, r6, lr}
 8015c6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	460e      	mov	r6, r1
 8015c70:	b93d      	cbnz	r5, 8015c82 <_Balloc+0x1a>
 8015c72:	2010      	movs	r0, #16
 8015c74:	f7ff ffde 	bl	8015c34 <malloc>
 8015c78:	6260      	str	r0, [r4, #36]	; 0x24
 8015c7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015c7e:	6005      	str	r5, [r0, #0]
 8015c80:	60c5      	str	r5, [r0, #12]
 8015c82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015c84:	68eb      	ldr	r3, [r5, #12]
 8015c86:	b183      	cbz	r3, 8015caa <_Balloc+0x42>
 8015c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c8a:	68db      	ldr	r3, [r3, #12]
 8015c8c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015c90:	b9b8      	cbnz	r0, 8015cc2 <_Balloc+0x5a>
 8015c92:	2101      	movs	r1, #1
 8015c94:	fa01 f506 	lsl.w	r5, r1, r6
 8015c98:	1d6a      	adds	r2, r5, #5
 8015c9a:	0092      	lsls	r2, r2, #2
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	f000 fbe2 	bl	8016466 <_calloc_r>
 8015ca2:	b160      	cbz	r0, 8015cbe <_Balloc+0x56>
 8015ca4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015ca8:	e00e      	b.n	8015cc8 <_Balloc+0x60>
 8015caa:	2221      	movs	r2, #33	; 0x21
 8015cac:	2104      	movs	r1, #4
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f000 fbd9 	bl	8016466 <_calloc_r>
 8015cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cb6:	60e8      	str	r0, [r5, #12]
 8015cb8:	68db      	ldr	r3, [r3, #12]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d1e4      	bne.n	8015c88 <_Balloc+0x20>
 8015cbe:	2000      	movs	r0, #0
 8015cc0:	bd70      	pop	{r4, r5, r6, pc}
 8015cc2:	6802      	ldr	r2, [r0, #0]
 8015cc4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015cc8:	2300      	movs	r3, #0
 8015cca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015cce:	e7f7      	b.n	8015cc0 <_Balloc+0x58>

08015cd0 <_Bfree>:
 8015cd0:	b570      	push	{r4, r5, r6, lr}
 8015cd2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015cd4:	4606      	mov	r6, r0
 8015cd6:	460d      	mov	r5, r1
 8015cd8:	b93c      	cbnz	r4, 8015cea <_Bfree+0x1a>
 8015cda:	2010      	movs	r0, #16
 8015cdc:	f7ff ffaa 	bl	8015c34 <malloc>
 8015ce0:	6270      	str	r0, [r6, #36]	; 0x24
 8015ce2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015ce6:	6004      	str	r4, [r0, #0]
 8015ce8:	60c4      	str	r4, [r0, #12]
 8015cea:	b13d      	cbz	r5, 8015cfc <_Bfree+0x2c>
 8015cec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015cee:	686a      	ldr	r2, [r5, #4]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015cf6:	6029      	str	r1, [r5, #0]
 8015cf8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015cfc:	bd70      	pop	{r4, r5, r6, pc}

08015cfe <__multadd>:
 8015cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d02:	690d      	ldr	r5, [r1, #16]
 8015d04:	461f      	mov	r7, r3
 8015d06:	4606      	mov	r6, r0
 8015d08:	460c      	mov	r4, r1
 8015d0a:	f101 0c14 	add.w	ip, r1, #20
 8015d0e:	2300      	movs	r3, #0
 8015d10:	f8dc 0000 	ldr.w	r0, [ip]
 8015d14:	b281      	uxth	r1, r0
 8015d16:	fb02 7101 	mla	r1, r2, r1, r7
 8015d1a:	0c0f      	lsrs	r7, r1, #16
 8015d1c:	0c00      	lsrs	r0, r0, #16
 8015d1e:	fb02 7000 	mla	r0, r2, r0, r7
 8015d22:	b289      	uxth	r1, r1
 8015d24:	3301      	adds	r3, #1
 8015d26:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015d2a:	429d      	cmp	r5, r3
 8015d2c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015d30:	f84c 1b04 	str.w	r1, [ip], #4
 8015d34:	dcec      	bgt.n	8015d10 <__multadd+0x12>
 8015d36:	b1d7      	cbz	r7, 8015d6e <__multadd+0x70>
 8015d38:	68a3      	ldr	r3, [r4, #8]
 8015d3a:	42ab      	cmp	r3, r5
 8015d3c:	dc12      	bgt.n	8015d64 <__multadd+0x66>
 8015d3e:	6861      	ldr	r1, [r4, #4]
 8015d40:	4630      	mov	r0, r6
 8015d42:	3101      	adds	r1, #1
 8015d44:	f7ff ff90 	bl	8015c68 <_Balloc>
 8015d48:	6922      	ldr	r2, [r4, #16]
 8015d4a:	3202      	adds	r2, #2
 8015d4c:	f104 010c 	add.w	r1, r4, #12
 8015d50:	4680      	mov	r8, r0
 8015d52:	0092      	lsls	r2, r2, #2
 8015d54:	300c      	adds	r0, #12
 8015d56:	f7fd f885 	bl	8012e64 <memcpy>
 8015d5a:	4621      	mov	r1, r4
 8015d5c:	4630      	mov	r0, r6
 8015d5e:	f7ff ffb7 	bl	8015cd0 <_Bfree>
 8015d62:	4644      	mov	r4, r8
 8015d64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015d68:	3501      	adds	r5, #1
 8015d6a:	615f      	str	r7, [r3, #20]
 8015d6c:	6125      	str	r5, [r4, #16]
 8015d6e:	4620      	mov	r0, r4
 8015d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d74 <__s2b>:
 8015d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d78:	460c      	mov	r4, r1
 8015d7a:	4615      	mov	r5, r2
 8015d7c:	461f      	mov	r7, r3
 8015d7e:	2209      	movs	r2, #9
 8015d80:	3308      	adds	r3, #8
 8015d82:	4606      	mov	r6, r0
 8015d84:	fb93 f3f2 	sdiv	r3, r3, r2
 8015d88:	2100      	movs	r1, #0
 8015d8a:	2201      	movs	r2, #1
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	db20      	blt.n	8015dd2 <__s2b+0x5e>
 8015d90:	4630      	mov	r0, r6
 8015d92:	f7ff ff69 	bl	8015c68 <_Balloc>
 8015d96:	9b08      	ldr	r3, [sp, #32]
 8015d98:	6143      	str	r3, [r0, #20]
 8015d9a:	2d09      	cmp	r5, #9
 8015d9c:	f04f 0301 	mov.w	r3, #1
 8015da0:	6103      	str	r3, [r0, #16]
 8015da2:	dd19      	ble.n	8015dd8 <__s2b+0x64>
 8015da4:	f104 0809 	add.w	r8, r4, #9
 8015da8:	46c1      	mov	r9, r8
 8015daa:	442c      	add	r4, r5
 8015dac:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015db0:	4601      	mov	r1, r0
 8015db2:	3b30      	subs	r3, #48	; 0x30
 8015db4:	220a      	movs	r2, #10
 8015db6:	4630      	mov	r0, r6
 8015db8:	f7ff ffa1 	bl	8015cfe <__multadd>
 8015dbc:	45a1      	cmp	r9, r4
 8015dbe:	d1f5      	bne.n	8015dac <__s2b+0x38>
 8015dc0:	eb08 0405 	add.w	r4, r8, r5
 8015dc4:	3c08      	subs	r4, #8
 8015dc6:	1b2d      	subs	r5, r5, r4
 8015dc8:	1963      	adds	r3, r4, r5
 8015dca:	42bb      	cmp	r3, r7
 8015dcc:	db07      	blt.n	8015dde <__s2b+0x6a>
 8015dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dd2:	0052      	lsls	r2, r2, #1
 8015dd4:	3101      	adds	r1, #1
 8015dd6:	e7d9      	b.n	8015d8c <__s2b+0x18>
 8015dd8:	340a      	adds	r4, #10
 8015dda:	2509      	movs	r5, #9
 8015ddc:	e7f3      	b.n	8015dc6 <__s2b+0x52>
 8015dde:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015de2:	4601      	mov	r1, r0
 8015de4:	3b30      	subs	r3, #48	; 0x30
 8015de6:	220a      	movs	r2, #10
 8015de8:	4630      	mov	r0, r6
 8015dea:	f7ff ff88 	bl	8015cfe <__multadd>
 8015dee:	e7eb      	b.n	8015dc8 <__s2b+0x54>

08015df0 <__hi0bits>:
 8015df0:	0c02      	lsrs	r2, r0, #16
 8015df2:	0412      	lsls	r2, r2, #16
 8015df4:	4603      	mov	r3, r0
 8015df6:	b9b2      	cbnz	r2, 8015e26 <__hi0bits+0x36>
 8015df8:	0403      	lsls	r3, r0, #16
 8015dfa:	2010      	movs	r0, #16
 8015dfc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015e00:	bf04      	itt	eq
 8015e02:	021b      	lsleq	r3, r3, #8
 8015e04:	3008      	addeq	r0, #8
 8015e06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015e0a:	bf04      	itt	eq
 8015e0c:	011b      	lsleq	r3, r3, #4
 8015e0e:	3004      	addeq	r0, #4
 8015e10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015e14:	bf04      	itt	eq
 8015e16:	009b      	lsleq	r3, r3, #2
 8015e18:	3002      	addeq	r0, #2
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	db06      	blt.n	8015e2c <__hi0bits+0x3c>
 8015e1e:	005b      	lsls	r3, r3, #1
 8015e20:	d503      	bpl.n	8015e2a <__hi0bits+0x3a>
 8015e22:	3001      	adds	r0, #1
 8015e24:	4770      	bx	lr
 8015e26:	2000      	movs	r0, #0
 8015e28:	e7e8      	b.n	8015dfc <__hi0bits+0xc>
 8015e2a:	2020      	movs	r0, #32
 8015e2c:	4770      	bx	lr

08015e2e <__lo0bits>:
 8015e2e:	6803      	ldr	r3, [r0, #0]
 8015e30:	f013 0207 	ands.w	r2, r3, #7
 8015e34:	4601      	mov	r1, r0
 8015e36:	d00b      	beq.n	8015e50 <__lo0bits+0x22>
 8015e38:	07da      	lsls	r2, r3, #31
 8015e3a:	d423      	bmi.n	8015e84 <__lo0bits+0x56>
 8015e3c:	0798      	lsls	r0, r3, #30
 8015e3e:	bf49      	itett	mi
 8015e40:	085b      	lsrmi	r3, r3, #1
 8015e42:	089b      	lsrpl	r3, r3, #2
 8015e44:	2001      	movmi	r0, #1
 8015e46:	600b      	strmi	r3, [r1, #0]
 8015e48:	bf5c      	itt	pl
 8015e4a:	600b      	strpl	r3, [r1, #0]
 8015e4c:	2002      	movpl	r0, #2
 8015e4e:	4770      	bx	lr
 8015e50:	b298      	uxth	r0, r3
 8015e52:	b9a8      	cbnz	r0, 8015e80 <__lo0bits+0x52>
 8015e54:	0c1b      	lsrs	r3, r3, #16
 8015e56:	2010      	movs	r0, #16
 8015e58:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015e5c:	bf04      	itt	eq
 8015e5e:	0a1b      	lsreq	r3, r3, #8
 8015e60:	3008      	addeq	r0, #8
 8015e62:	071a      	lsls	r2, r3, #28
 8015e64:	bf04      	itt	eq
 8015e66:	091b      	lsreq	r3, r3, #4
 8015e68:	3004      	addeq	r0, #4
 8015e6a:	079a      	lsls	r2, r3, #30
 8015e6c:	bf04      	itt	eq
 8015e6e:	089b      	lsreq	r3, r3, #2
 8015e70:	3002      	addeq	r0, #2
 8015e72:	07da      	lsls	r2, r3, #31
 8015e74:	d402      	bmi.n	8015e7c <__lo0bits+0x4e>
 8015e76:	085b      	lsrs	r3, r3, #1
 8015e78:	d006      	beq.n	8015e88 <__lo0bits+0x5a>
 8015e7a:	3001      	adds	r0, #1
 8015e7c:	600b      	str	r3, [r1, #0]
 8015e7e:	4770      	bx	lr
 8015e80:	4610      	mov	r0, r2
 8015e82:	e7e9      	b.n	8015e58 <__lo0bits+0x2a>
 8015e84:	2000      	movs	r0, #0
 8015e86:	4770      	bx	lr
 8015e88:	2020      	movs	r0, #32
 8015e8a:	4770      	bx	lr

08015e8c <__i2b>:
 8015e8c:	b510      	push	{r4, lr}
 8015e8e:	460c      	mov	r4, r1
 8015e90:	2101      	movs	r1, #1
 8015e92:	f7ff fee9 	bl	8015c68 <_Balloc>
 8015e96:	2201      	movs	r2, #1
 8015e98:	6144      	str	r4, [r0, #20]
 8015e9a:	6102      	str	r2, [r0, #16]
 8015e9c:	bd10      	pop	{r4, pc}

08015e9e <__multiply>:
 8015e9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea2:	4614      	mov	r4, r2
 8015ea4:	690a      	ldr	r2, [r1, #16]
 8015ea6:	6923      	ldr	r3, [r4, #16]
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	bfb8      	it	lt
 8015eac:	460b      	movlt	r3, r1
 8015eae:	4688      	mov	r8, r1
 8015eb0:	bfbc      	itt	lt
 8015eb2:	46a0      	movlt	r8, r4
 8015eb4:	461c      	movlt	r4, r3
 8015eb6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015eba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ec2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015ec6:	eb07 0609 	add.w	r6, r7, r9
 8015eca:	42b3      	cmp	r3, r6
 8015ecc:	bfb8      	it	lt
 8015ece:	3101      	addlt	r1, #1
 8015ed0:	f7ff feca 	bl	8015c68 <_Balloc>
 8015ed4:	f100 0514 	add.w	r5, r0, #20
 8015ed8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015edc:	462b      	mov	r3, r5
 8015ede:	2200      	movs	r2, #0
 8015ee0:	4573      	cmp	r3, lr
 8015ee2:	d316      	bcc.n	8015f12 <__multiply+0x74>
 8015ee4:	f104 0214 	add.w	r2, r4, #20
 8015ee8:	f108 0114 	add.w	r1, r8, #20
 8015eec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015ef0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015ef4:	9300      	str	r3, [sp, #0]
 8015ef6:	9b00      	ldr	r3, [sp, #0]
 8015ef8:	9201      	str	r2, [sp, #4]
 8015efa:	4293      	cmp	r3, r2
 8015efc:	d80c      	bhi.n	8015f18 <__multiply+0x7a>
 8015efe:	2e00      	cmp	r6, #0
 8015f00:	dd03      	ble.n	8015f0a <__multiply+0x6c>
 8015f02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d05d      	beq.n	8015fc6 <__multiply+0x128>
 8015f0a:	6106      	str	r6, [r0, #16]
 8015f0c:	b003      	add	sp, #12
 8015f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f12:	f843 2b04 	str.w	r2, [r3], #4
 8015f16:	e7e3      	b.n	8015ee0 <__multiply+0x42>
 8015f18:	f8b2 b000 	ldrh.w	fp, [r2]
 8015f1c:	f1bb 0f00 	cmp.w	fp, #0
 8015f20:	d023      	beq.n	8015f6a <__multiply+0xcc>
 8015f22:	4689      	mov	r9, r1
 8015f24:	46ac      	mov	ip, r5
 8015f26:	f04f 0800 	mov.w	r8, #0
 8015f2a:	f859 4b04 	ldr.w	r4, [r9], #4
 8015f2e:	f8dc a000 	ldr.w	sl, [ip]
 8015f32:	b2a3      	uxth	r3, r4
 8015f34:	fa1f fa8a 	uxth.w	sl, sl
 8015f38:	fb0b a303 	mla	r3, fp, r3, sl
 8015f3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015f40:	f8dc 4000 	ldr.w	r4, [ip]
 8015f44:	4443      	add	r3, r8
 8015f46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015f4a:	fb0b 840a 	mla	r4, fp, sl, r8
 8015f4e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015f52:	46e2      	mov	sl, ip
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015f5a:	454f      	cmp	r7, r9
 8015f5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015f60:	f84a 3b04 	str.w	r3, [sl], #4
 8015f64:	d82b      	bhi.n	8015fbe <__multiply+0x120>
 8015f66:	f8cc 8004 	str.w	r8, [ip, #4]
 8015f6a:	9b01      	ldr	r3, [sp, #4]
 8015f6c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015f70:	3204      	adds	r2, #4
 8015f72:	f1ba 0f00 	cmp.w	sl, #0
 8015f76:	d020      	beq.n	8015fba <__multiply+0x11c>
 8015f78:	682b      	ldr	r3, [r5, #0]
 8015f7a:	4689      	mov	r9, r1
 8015f7c:	46a8      	mov	r8, r5
 8015f7e:	f04f 0b00 	mov.w	fp, #0
 8015f82:	f8b9 c000 	ldrh.w	ip, [r9]
 8015f86:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015f8a:	fb0a 440c 	mla	r4, sl, ip, r4
 8015f8e:	445c      	add	r4, fp
 8015f90:	46c4      	mov	ip, r8
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015f98:	f84c 3b04 	str.w	r3, [ip], #4
 8015f9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015fa0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015fa4:	0c1b      	lsrs	r3, r3, #16
 8015fa6:	fb0a b303 	mla	r3, sl, r3, fp
 8015faa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015fae:	454f      	cmp	r7, r9
 8015fb0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015fb4:	d805      	bhi.n	8015fc2 <__multiply+0x124>
 8015fb6:	f8c8 3004 	str.w	r3, [r8, #4]
 8015fba:	3504      	adds	r5, #4
 8015fbc:	e79b      	b.n	8015ef6 <__multiply+0x58>
 8015fbe:	46d4      	mov	ip, sl
 8015fc0:	e7b3      	b.n	8015f2a <__multiply+0x8c>
 8015fc2:	46e0      	mov	r8, ip
 8015fc4:	e7dd      	b.n	8015f82 <__multiply+0xe4>
 8015fc6:	3e01      	subs	r6, #1
 8015fc8:	e799      	b.n	8015efe <__multiply+0x60>
	...

08015fcc <__pow5mult>:
 8015fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fd0:	4615      	mov	r5, r2
 8015fd2:	f012 0203 	ands.w	r2, r2, #3
 8015fd6:	4606      	mov	r6, r0
 8015fd8:	460f      	mov	r7, r1
 8015fda:	d007      	beq.n	8015fec <__pow5mult+0x20>
 8015fdc:	3a01      	subs	r2, #1
 8015fde:	4c21      	ldr	r4, [pc, #132]	; (8016064 <__pow5mult+0x98>)
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015fe6:	f7ff fe8a 	bl	8015cfe <__multadd>
 8015fea:	4607      	mov	r7, r0
 8015fec:	10ad      	asrs	r5, r5, #2
 8015fee:	d035      	beq.n	801605c <__pow5mult+0x90>
 8015ff0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015ff2:	b93c      	cbnz	r4, 8016004 <__pow5mult+0x38>
 8015ff4:	2010      	movs	r0, #16
 8015ff6:	f7ff fe1d 	bl	8015c34 <malloc>
 8015ffa:	6270      	str	r0, [r6, #36]	; 0x24
 8015ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016000:	6004      	str	r4, [r0, #0]
 8016002:	60c4      	str	r4, [r0, #12]
 8016004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801600c:	b94c      	cbnz	r4, 8016022 <__pow5mult+0x56>
 801600e:	f240 2171 	movw	r1, #625	; 0x271
 8016012:	4630      	mov	r0, r6
 8016014:	f7ff ff3a 	bl	8015e8c <__i2b>
 8016018:	2300      	movs	r3, #0
 801601a:	f8c8 0008 	str.w	r0, [r8, #8]
 801601e:	4604      	mov	r4, r0
 8016020:	6003      	str	r3, [r0, #0]
 8016022:	f04f 0800 	mov.w	r8, #0
 8016026:	07eb      	lsls	r3, r5, #31
 8016028:	d50a      	bpl.n	8016040 <__pow5mult+0x74>
 801602a:	4639      	mov	r1, r7
 801602c:	4622      	mov	r2, r4
 801602e:	4630      	mov	r0, r6
 8016030:	f7ff ff35 	bl	8015e9e <__multiply>
 8016034:	4639      	mov	r1, r7
 8016036:	4681      	mov	r9, r0
 8016038:	4630      	mov	r0, r6
 801603a:	f7ff fe49 	bl	8015cd0 <_Bfree>
 801603e:	464f      	mov	r7, r9
 8016040:	106d      	asrs	r5, r5, #1
 8016042:	d00b      	beq.n	801605c <__pow5mult+0x90>
 8016044:	6820      	ldr	r0, [r4, #0]
 8016046:	b938      	cbnz	r0, 8016058 <__pow5mult+0x8c>
 8016048:	4622      	mov	r2, r4
 801604a:	4621      	mov	r1, r4
 801604c:	4630      	mov	r0, r6
 801604e:	f7ff ff26 	bl	8015e9e <__multiply>
 8016052:	6020      	str	r0, [r4, #0]
 8016054:	f8c0 8000 	str.w	r8, [r0]
 8016058:	4604      	mov	r4, r0
 801605a:	e7e4      	b.n	8016026 <__pow5mult+0x5a>
 801605c:	4638      	mov	r0, r7
 801605e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016062:	bf00      	nop
 8016064:	0801a400 	.word	0x0801a400

08016068 <__lshift>:
 8016068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801606c:	460c      	mov	r4, r1
 801606e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016072:	6923      	ldr	r3, [r4, #16]
 8016074:	6849      	ldr	r1, [r1, #4]
 8016076:	eb0a 0903 	add.w	r9, sl, r3
 801607a:	68a3      	ldr	r3, [r4, #8]
 801607c:	4607      	mov	r7, r0
 801607e:	4616      	mov	r6, r2
 8016080:	f109 0501 	add.w	r5, r9, #1
 8016084:	42ab      	cmp	r3, r5
 8016086:	db32      	blt.n	80160ee <__lshift+0x86>
 8016088:	4638      	mov	r0, r7
 801608a:	f7ff fded 	bl	8015c68 <_Balloc>
 801608e:	2300      	movs	r3, #0
 8016090:	4680      	mov	r8, r0
 8016092:	f100 0114 	add.w	r1, r0, #20
 8016096:	461a      	mov	r2, r3
 8016098:	4553      	cmp	r3, sl
 801609a:	db2b      	blt.n	80160f4 <__lshift+0x8c>
 801609c:	6920      	ldr	r0, [r4, #16]
 801609e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80160a2:	f104 0314 	add.w	r3, r4, #20
 80160a6:	f016 021f 	ands.w	r2, r6, #31
 80160aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80160ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80160b2:	d025      	beq.n	8016100 <__lshift+0x98>
 80160b4:	f1c2 0e20 	rsb	lr, r2, #32
 80160b8:	2000      	movs	r0, #0
 80160ba:	681e      	ldr	r6, [r3, #0]
 80160bc:	468a      	mov	sl, r1
 80160be:	4096      	lsls	r6, r2
 80160c0:	4330      	orrs	r0, r6
 80160c2:	f84a 0b04 	str.w	r0, [sl], #4
 80160c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80160ca:	459c      	cmp	ip, r3
 80160cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80160d0:	d814      	bhi.n	80160fc <__lshift+0x94>
 80160d2:	6048      	str	r0, [r1, #4]
 80160d4:	b108      	cbz	r0, 80160da <__lshift+0x72>
 80160d6:	f109 0502 	add.w	r5, r9, #2
 80160da:	3d01      	subs	r5, #1
 80160dc:	4638      	mov	r0, r7
 80160de:	f8c8 5010 	str.w	r5, [r8, #16]
 80160e2:	4621      	mov	r1, r4
 80160e4:	f7ff fdf4 	bl	8015cd0 <_Bfree>
 80160e8:	4640      	mov	r0, r8
 80160ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160ee:	3101      	adds	r1, #1
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	e7c7      	b.n	8016084 <__lshift+0x1c>
 80160f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80160f8:	3301      	adds	r3, #1
 80160fa:	e7cd      	b.n	8016098 <__lshift+0x30>
 80160fc:	4651      	mov	r1, sl
 80160fe:	e7dc      	b.n	80160ba <__lshift+0x52>
 8016100:	3904      	subs	r1, #4
 8016102:	f853 2b04 	ldr.w	r2, [r3], #4
 8016106:	f841 2f04 	str.w	r2, [r1, #4]!
 801610a:	459c      	cmp	ip, r3
 801610c:	d8f9      	bhi.n	8016102 <__lshift+0x9a>
 801610e:	e7e4      	b.n	80160da <__lshift+0x72>

08016110 <__mcmp>:
 8016110:	6903      	ldr	r3, [r0, #16]
 8016112:	690a      	ldr	r2, [r1, #16]
 8016114:	1a9b      	subs	r3, r3, r2
 8016116:	b530      	push	{r4, r5, lr}
 8016118:	d10c      	bne.n	8016134 <__mcmp+0x24>
 801611a:	0092      	lsls	r2, r2, #2
 801611c:	3014      	adds	r0, #20
 801611e:	3114      	adds	r1, #20
 8016120:	1884      	adds	r4, r0, r2
 8016122:	4411      	add	r1, r2
 8016124:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016128:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801612c:	4295      	cmp	r5, r2
 801612e:	d003      	beq.n	8016138 <__mcmp+0x28>
 8016130:	d305      	bcc.n	801613e <__mcmp+0x2e>
 8016132:	2301      	movs	r3, #1
 8016134:	4618      	mov	r0, r3
 8016136:	bd30      	pop	{r4, r5, pc}
 8016138:	42a0      	cmp	r0, r4
 801613a:	d3f3      	bcc.n	8016124 <__mcmp+0x14>
 801613c:	e7fa      	b.n	8016134 <__mcmp+0x24>
 801613e:	f04f 33ff 	mov.w	r3, #4294967295
 8016142:	e7f7      	b.n	8016134 <__mcmp+0x24>

08016144 <__mdiff>:
 8016144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016148:	460d      	mov	r5, r1
 801614a:	4607      	mov	r7, r0
 801614c:	4611      	mov	r1, r2
 801614e:	4628      	mov	r0, r5
 8016150:	4614      	mov	r4, r2
 8016152:	f7ff ffdd 	bl	8016110 <__mcmp>
 8016156:	1e06      	subs	r6, r0, #0
 8016158:	d108      	bne.n	801616c <__mdiff+0x28>
 801615a:	4631      	mov	r1, r6
 801615c:	4638      	mov	r0, r7
 801615e:	f7ff fd83 	bl	8015c68 <_Balloc>
 8016162:	2301      	movs	r3, #1
 8016164:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801616c:	bfa4      	itt	ge
 801616e:	4623      	movge	r3, r4
 8016170:	462c      	movge	r4, r5
 8016172:	4638      	mov	r0, r7
 8016174:	6861      	ldr	r1, [r4, #4]
 8016176:	bfa6      	itte	ge
 8016178:	461d      	movge	r5, r3
 801617a:	2600      	movge	r6, #0
 801617c:	2601      	movlt	r6, #1
 801617e:	f7ff fd73 	bl	8015c68 <_Balloc>
 8016182:	692b      	ldr	r3, [r5, #16]
 8016184:	60c6      	str	r6, [r0, #12]
 8016186:	6926      	ldr	r6, [r4, #16]
 8016188:	f105 0914 	add.w	r9, r5, #20
 801618c:	f104 0214 	add.w	r2, r4, #20
 8016190:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016194:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016198:	f100 0514 	add.w	r5, r0, #20
 801619c:	f04f 0e00 	mov.w	lr, #0
 80161a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80161a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80161a8:	fa1e f18a 	uxtah	r1, lr, sl
 80161ac:	b2a3      	uxth	r3, r4
 80161ae:	1ac9      	subs	r1, r1, r3
 80161b0:	0c23      	lsrs	r3, r4, #16
 80161b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80161b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80161ba:	b289      	uxth	r1, r1
 80161bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80161c0:	45c8      	cmp	r8, r9
 80161c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80161c6:	4694      	mov	ip, r2
 80161c8:	f845 3b04 	str.w	r3, [r5], #4
 80161cc:	d8e8      	bhi.n	80161a0 <__mdiff+0x5c>
 80161ce:	45bc      	cmp	ip, r7
 80161d0:	d304      	bcc.n	80161dc <__mdiff+0x98>
 80161d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80161d6:	b183      	cbz	r3, 80161fa <__mdiff+0xb6>
 80161d8:	6106      	str	r6, [r0, #16]
 80161da:	e7c5      	b.n	8016168 <__mdiff+0x24>
 80161dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80161e0:	fa1e f381 	uxtah	r3, lr, r1
 80161e4:	141a      	asrs	r2, r3, #16
 80161e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80161ea:	b29b      	uxth	r3, r3
 80161ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80161f4:	f845 3b04 	str.w	r3, [r5], #4
 80161f8:	e7e9      	b.n	80161ce <__mdiff+0x8a>
 80161fa:	3e01      	subs	r6, #1
 80161fc:	e7e9      	b.n	80161d2 <__mdiff+0x8e>
	...

08016200 <__ulp>:
 8016200:	4b12      	ldr	r3, [pc, #72]	; (801624c <__ulp+0x4c>)
 8016202:	ee10 2a90 	vmov	r2, s1
 8016206:	401a      	ands	r2, r3
 8016208:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801620c:	2b00      	cmp	r3, #0
 801620e:	dd04      	ble.n	801621a <__ulp+0x1a>
 8016210:	2000      	movs	r0, #0
 8016212:	4619      	mov	r1, r3
 8016214:	ec41 0b10 	vmov	d0, r0, r1
 8016218:	4770      	bx	lr
 801621a:	425b      	negs	r3, r3
 801621c:	151b      	asrs	r3, r3, #20
 801621e:	2b13      	cmp	r3, #19
 8016220:	f04f 0000 	mov.w	r0, #0
 8016224:	f04f 0100 	mov.w	r1, #0
 8016228:	dc04      	bgt.n	8016234 <__ulp+0x34>
 801622a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801622e:	fa42 f103 	asr.w	r1, r2, r3
 8016232:	e7ef      	b.n	8016214 <__ulp+0x14>
 8016234:	3b14      	subs	r3, #20
 8016236:	2b1e      	cmp	r3, #30
 8016238:	f04f 0201 	mov.w	r2, #1
 801623c:	bfda      	itte	le
 801623e:	f1c3 031f 	rsble	r3, r3, #31
 8016242:	fa02 f303 	lslle.w	r3, r2, r3
 8016246:	4613      	movgt	r3, r2
 8016248:	4618      	mov	r0, r3
 801624a:	e7e3      	b.n	8016214 <__ulp+0x14>
 801624c:	7ff00000 	.word	0x7ff00000

08016250 <__b2d>:
 8016250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016252:	6905      	ldr	r5, [r0, #16]
 8016254:	f100 0714 	add.w	r7, r0, #20
 8016258:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801625c:	1f2e      	subs	r6, r5, #4
 801625e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016262:	4620      	mov	r0, r4
 8016264:	f7ff fdc4 	bl	8015df0 <__hi0bits>
 8016268:	f1c0 0320 	rsb	r3, r0, #32
 801626c:	280a      	cmp	r0, #10
 801626e:	600b      	str	r3, [r1, #0]
 8016270:	f8df c074 	ldr.w	ip, [pc, #116]	; 80162e8 <__b2d+0x98>
 8016274:	dc14      	bgt.n	80162a0 <__b2d+0x50>
 8016276:	f1c0 0e0b 	rsb	lr, r0, #11
 801627a:	fa24 f10e 	lsr.w	r1, r4, lr
 801627e:	42b7      	cmp	r7, r6
 8016280:	ea41 030c 	orr.w	r3, r1, ip
 8016284:	bf34      	ite	cc
 8016286:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801628a:	2100      	movcs	r1, #0
 801628c:	3015      	adds	r0, #21
 801628e:	fa04 f000 	lsl.w	r0, r4, r0
 8016292:	fa21 f10e 	lsr.w	r1, r1, lr
 8016296:	ea40 0201 	orr.w	r2, r0, r1
 801629a:	ec43 2b10 	vmov	d0, r2, r3
 801629e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162a0:	42b7      	cmp	r7, r6
 80162a2:	bf3a      	itte	cc
 80162a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80162a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80162ac:	2100      	movcs	r1, #0
 80162ae:	380b      	subs	r0, #11
 80162b0:	d015      	beq.n	80162de <__b2d+0x8e>
 80162b2:	4084      	lsls	r4, r0
 80162b4:	f1c0 0520 	rsb	r5, r0, #32
 80162b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80162bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80162c0:	42be      	cmp	r6, r7
 80162c2:	fa21 fc05 	lsr.w	ip, r1, r5
 80162c6:	ea44 030c 	orr.w	r3, r4, ip
 80162ca:	bf8c      	ite	hi
 80162cc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80162d0:	2400      	movls	r4, #0
 80162d2:	fa01 f000 	lsl.w	r0, r1, r0
 80162d6:	40ec      	lsrs	r4, r5
 80162d8:	ea40 0204 	orr.w	r2, r0, r4
 80162dc:	e7dd      	b.n	801629a <__b2d+0x4a>
 80162de:	ea44 030c 	orr.w	r3, r4, ip
 80162e2:	460a      	mov	r2, r1
 80162e4:	e7d9      	b.n	801629a <__b2d+0x4a>
 80162e6:	bf00      	nop
 80162e8:	3ff00000 	.word	0x3ff00000

080162ec <__d2b>:
 80162ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162f0:	460e      	mov	r6, r1
 80162f2:	2101      	movs	r1, #1
 80162f4:	ec59 8b10 	vmov	r8, r9, d0
 80162f8:	4615      	mov	r5, r2
 80162fa:	f7ff fcb5 	bl	8015c68 <_Balloc>
 80162fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016302:	4607      	mov	r7, r0
 8016304:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016308:	bb34      	cbnz	r4, 8016358 <__d2b+0x6c>
 801630a:	9301      	str	r3, [sp, #4]
 801630c:	f1b8 0300 	subs.w	r3, r8, #0
 8016310:	d027      	beq.n	8016362 <__d2b+0x76>
 8016312:	a802      	add	r0, sp, #8
 8016314:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016318:	f7ff fd89 	bl	8015e2e <__lo0bits>
 801631c:	9900      	ldr	r1, [sp, #0]
 801631e:	b1f0      	cbz	r0, 801635e <__d2b+0x72>
 8016320:	9a01      	ldr	r2, [sp, #4]
 8016322:	f1c0 0320 	rsb	r3, r0, #32
 8016326:	fa02 f303 	lsl.w	r3, r2, r3
 801632a:	430b      	orrs	r3, r1
 801632c:	40c2      	lsrs	r2, r0
 801632e:	617b      	str	r3, [r7, #20]
 8016330:	9201      	str	r2, [sp, #4]
 8016332:	9b01      	ldr	r3, [sp, #4]
 8016334:	61bb      	str	r3, [r7, #24]
 8016336:	2b00      	cmp	r3, #0
 8016338:	bf14      	ite	ne
 801633a:	2102      	movne	r1, #2
 801633c:	2101      	moveq	r1, #1
 801633e:	6139      	str	r1, [r7, #16]
 8016340:	b1c4      	cbz	r4, 8016374 <__d2b+0x88>
 8016342:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016346:	4404      	add	r4, r0
 8016348:	6034      	str	r4, [r6, #0]
 801634a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801634e:	6028      	str	r0, [r5, #0]
 8016350:	4638      	mov	r0, r7
 8016352:	b003      	add	sp, #12
 8016354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801635c:	e7d5      	b.n	801630a <__d2b+0x1e>
 801635e:	6179      	str	r1, [r7, #20]
 8016360:	e7e7      	b.n	8016332 <__d2b+0x46>
 8016362:	a801      	add	r0, sp, #4
 8016364:	f7ff fd63 	bl	8015e2e <__lo0bits>
 8016368:	9b01      	ldr	r3, [sp, #4]
 801636a:	617b      	str	r3, [r7, #20]
 801636c:	2101      	movs	r1, #1
 801636e:	6139      	str	r1, [r7, #16]
 8016370:	3020      	adds	r0, #32
 8016372:	e7e5      	b.n	8016340 <__d2b+0x54>
 8016374:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016378:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801637c:	6030      	str	r0, [r6, #0]
 801637e:	6918      	ldr	r0, [r3, #16]
 8016380:	f7ff fd36 	bl	8015df0 <__hi0bits>
 8016384:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016388:	e7e1      	b.n	801634e <__d2b+0x62>

0801638a <__ratio>:
 801638a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801638e:	4688      	mov	r8, r1
 8016390:	4669      	mov	r1, sp
 8016392:	4681      	mov	r9, r0
 8016394:	f7ff ff5c 	bl	8016250 <__b2d>
 8016398:	a901      	add	r1, sp, #4
 801639a:	4640      	mov	r0, r8
 801639c:	ec57 6b10 	vmov	r6, r7, d0
 80163a0:	f7ff ff56 	bl	8016250 <__b2d>
 80163a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80163a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80163ac:	eba3 0c02 	sub.w	ip, r3, r2
 80163b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80163b4:	1a9b      	subs	r3, r3, r2
 80163b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80163ba:	ec5b ab10 	vmov	sl, fp, d0
 80163be:	2b00      	cmp	r3, #0
 80163c0:	bfce      	itee	gt
 80163c2:	463a      	movgt	r2, r7
 80163c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80163c8:	465a      	movle	r2, fp
 80163ca:	4659      	mov	r1, fp
 80163cc:	463d      	mov	r5, r7
 80163ce:	bfd4      	ite	le
 80163d0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80163d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80163d8:	4630      	mov	r0, r6
 80163da:	ee10 2a10 	vmov	r2, s0
 80163de:	460b      	mov	r3, r1
 80163e0:	4629      	mov	r1, r5
 80163e2:	f7ea fa5b 	bl	800089c <__aeabi_ddiv>
 80163e6:	ec41 0b10 	vmov	d0, r0, r1
 80163ea:	b003      	add	sp, #12
 80163ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080163f0 <__copybits>:
 80163f0:	3901      	subs	r1, #1
 80163f2:	b510      	push	{r4, lr}
 80163f4:	1149      	asrs	r1, r1, #5
 80163f6:	6914      	ldr	r4, [r2, #16]
 80163f8:	3101      	adds	r1, #1
 80163fa:	f102 0314 	add.w	r3, r2, #20
 80163fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016402:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016406:	42a3      	cmp	r3, r4
 8016408:	4602      	mov	r2, r0
 801640a:	d303      	bcc.n	8016414 <__copybits+0x24>
 801640c:	2300      	movs	r3, #0
 801640e:	428a      	cmp	r2, r1
 8016410:	d305      	bcc.n	801641e <__copybits+0x2e>
 8016412:	bd10      	pop	{r4, pc}
 8016414:	f853 2b04 	ldr.w	r2, [r3], #4
 8016418:	f840 2b04 	str.w	r2, [r0], #4
 801641c:	e7f3      	b.n	8016406 <__copybits+0x16>
 801641e:	f842 3b04 	str.w	r3, [r2], #4
 8016422:	e7f4      	b.n	801640e <__copybits+0x1e>

08016424 <__any_on>:
 8016424:	f100 0214 	add.w	r2, r0, #20
 8016428:	6900      	ldr	r0, [r0, #16]
 801642a:	114b      	asrs	r3, r1, #5
 801642c:	4298      	cmp	r0, r3
 801642e:	b510      	push	{r4, lr}
 8016430:	db11      	blt.n	8016456 <__any_on+0x32>
 8016432:	dd0a      	ble.n	801644a <__any_on+0x26>
 8016434:	f011 011f 	ands.w	r1, r1, #31
 8016438:	d007      	beq.n	801644a <__any_on+0x26>
 801643a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801643e:	fa24 f001 	lsr.w	r0, r4, r1
 8016442:	fa00 f101 	lsl.w	r1, r0, r1
 8016446:	428c      	cmp	r4, r1
 8016448:	d10b      	bne.n	8016462 <__any_on+0x3e>
 801644a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801644e:	4293      	cmp	r3, r2
 8016450:	d803      	bhi.n	801645a <__any_on+0x36>
 8016452:	2000      	movs	r0, #0
 8016454:	bd10      	pop	{r4, pc}
 8016456:	4603      	mov	r3, r0
 8016458:	e7f7      	b.n	801644a <__any_on+0x26>
 801645a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801645e:	2900      	cmp	r1, #0
 8016460:	d0f5      	beq.n	801644e <__any_on+0x2a>
 8016462:	2001      	movs	r0, #1
 8016464:	e7f6      	b.n	8016454 <__any_on+0x30>

08016466 <_calloc_r>:
 8016466:	b538      	push	{r3, r4, r5, lr}
 8016468:	fb02 f401 	mul.w	r4, r2, r1
 801646c:	4621      	mov	r1, r4
 801646e:	f000 f857 	bl	8016520 <_malloc_r>
 8016472:	4605      	mov	r5, r0
 8016474:	b118      	cbz	r0, 801647e <_calloc_r+0x18>
 8016476:	4622      	mov	r2, r4
 8016478:	2100      	movs	r1, #0
 801647a:	f7fc fcfe 	bl	8012e7a <memset>
 801647e:	4628      	mov	r0, r5
 8016480:	bd38      	pop	{r3, r4, r5, pc}
	...

08016484 <_free_r>:
 8016484:	b538      	push	{r3, r4, r5, lr}
 8016486:	4605      	mov	r5, r0
 8016488:	2900      	cmp	r1, #0
 801648a:	d045      	beq.n	8016518 <_free_r+0x94>
 801648c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016490:	1f0c      	subs	r4, r1, #4
 8016492:	2b00      	cmp	r3, #0
 8016494:	bfb8      	it	lt
 8016496:	18e4      	addlt	r4, r4, r3
 8016498:	f000 fa36 	bl	8016908 <__malloc_lock>
 801649c:	4a1f      	ldr	r2, [pc, #124]	; (801651c <_free_r+0x98>)
 801649e:	6813      	ldr	r3, [r2, #0]
 80164a0:	4610      	mov	r0, r2
 80164a2:	b933      	cbnz	r3, 80164b2 <_free_r+0x2e>
 80164a4:	6063      	str	r3, [r4, #4]
 80164a6:	6014      	str	r4, [r2, #0]
 80164a8:	4628      	mov	r0, r5
 80164aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164ae:	f000 ba2c 	b.w	801690a <__malloc_unlock>
 80164b2:	42a3      	cmp	r3, r4
 80164b4:	d90c      	bls.n	80164d0 <_free_r+0x4c>
 80164b6:	6821      	ldr	r1, [r4, #0]
 80164b8:	1862      	adds	r2, r4, r1
 80164ba:	4293      	cmp	r3, r2
 80164bc:	bf04      	itt	eq
 80164be:	681a      	ldreq	r2, [r3, #0]
 80164c0:	685b      	ldreq	r3, [r3, #4]
 80164c2:	6063      	str	r3, [r4, #4]
 80164c4:	bf04      	itt	eq
 80164c6:	1852      	addeq	r2, r2, r1
 80164c8:	6022      	streq	r2, [r4, #0]
 80164ca:	6004      	str	r4, [r0, #0]
 80164cc:	e7ec      	b.n	80164a8 <_free_r+0x24>
 80164ce:	4613      	mov	r3, r2
 80164d0:	685a      	ldr	r2, [r3, #4]
 80164d2:	b10a      	cbz	r2, 80164d8 <_free_r+0x54>
 80164d4:	42a2      	cmp	r2, r4
 80164d6:	d9fa      	bls.n	80164ce <_free_r+0x4a>
 80164d8:	6819      	ldr	r1, [r3, #0]
 80164da:	1858      	adds	r0, r3, r1
 80164dc:	42a0      	cmp	r0, r4
 80164de:	d10b      	bne.n	80164f8 <_free_r+0x74>
 80164e0:	6820      	ldr	r0, [r4, #0]
 80164e2:	4401      	add	r1, r0
 80164e4:	1858      	adds	r0, r3, r1
 80164e6:	4282      	cmp	r2, r0
 80164e8:	6019      	str	r1, [r3, #0]
 80164ea:	d1dd      	bne.n	80164a8 <_free_r+0x24>
 80164ec:	6810      	ldr	r0, [r2, #0]
 80164ee:	6852      	ldr	r2, [r2, #4]
 80164f0:	605a      	str	r2, [r3, #4]
 80164f2:	4401      	add	r1, r0
 80164f4:	6019      	str	r1, [r3, #0]
 80164f6:	e7d7      	b.n	80164a8 <_free_r+0x24>
 80164f8:	d902      	bls.n	8016500 <_free_r+0x7c>
 80164fa:	230c      	movs	r3, #12
 80164fc:	602b      	str	r3, [r5, #0]
 80164fe:	e7d3      	b.n	80164a8 <_free_r+0x24>
 8016500:	6820      	ldr	r0, [r4, #0]
 8016502:	1821      	adds	r1, r4, r0
 8016504:	428a      	cmp	r2, r1
 8016506:	bf04      	itt	eq
 8016508:	6811      	ldreq	r1, [r2, #0]
 801650a:	6852      	ldreq	r2, [r2, #4]
 801650c:	6062      	str	r2, [r4, #4]
 801650e:	bf04      	itt	eq
 8016510:	1809      	addeq	r1, r1, r0
 8016512:	6021      	streq	r1, [r4, #0]
 8016514:	605c      	str	r4, [r3, #4]
 8016516:	e7c7      	b.n	80164a8 <_free_r+0x24>
 8016518:	bd38      	pop	{r3, r4, r5, pc}
 801651a:	bf00      	nop
 801651c:	2001efe0 	.word	0x2001efe0

08016520 <_malloc_r>:
 8016520:	b570      	push	{r4, r5, r6, lr}
 8016522:	1ccd      	adds	r5, r1, #3
 8016524:	f025 0503 	bic.w	r5, r5, #3
 8016528:	3508      	adds	r5, #8
 801652a:	2d0c      	cmp	r5, #12
 801652c:	bf38      	it	cc
 801652e:	250c      	movcc	r5, #12
 8016530:	2d00      	cmp	r5, #0
 8016532:	4606      	mov	r6, r0
 8016534:	db01      	blt.n	801653a <_malloc_r+0x1a>
 8016536:	42a9      	cmp	r1, r5
 8016538:	d903      	bls.n	8016542 <_malloc_r+0x22>
 801653a:	230c      	movs	r3, #12
 801653c:	6033      	str	r3, [r6, #0]
 801653e:	2000      	movs	r0, #0
 8016540:	bd70      	pop	{r4, r5, r6, pc}
 8016542:	f000 f9e1 	bl	8016908 <__malloc_lock>
 8016546:	4a21      	ldr	r2, [pc, #132]	; (80165cc <_malloc_r+0xac>)
 8016548:	6814      	ldr	r4, [r2, #0]
 801654a:	4621      	mov	r1, r4
 801654c:	b991      	cbnz	r1, 8016574 <_malloc_r+0x54>
 801654e:	4c20      	ldr	r4, [pc, #128]	; (80165d0 <_malloc_r+0xb0>)
 8016550:	6823      	ldr	r3, [r4, #0]
 8016552:	b91b      	cbnz	r3, 801655c <_malloc_r+0x3c>
 8016554:	4630      	mov	r0, r6
 8016556:	f000 f98f 	bl	8016878 <_sbrk_r>
 801655a:	6020      	str	r0, [r4, #0]
 801655c:	4629      	mov	r1, r5
 801655e:	4630      	mov	r0, r6
 8016560:	f000 f98a 	bl	8016878 <_sbrk_r>
 8016564:	1c43      	adds	r3, r0, #1
 8016566:	d124      	bne.n	80165b2 <_malloc_r+0x92>
 8016568:	230c      	movs	r3, #12
 801656a:	6033      	str	r3, [r6, #0]
 801656c:	4630      	mov	r0, r6
 801656e:	f000 f9cc 	bl	801690a <__malloc_unlock>
 8016572:	e7e4      	b.n	801653e <_malloc_r+0x1e>
 8016574:	680b      	ldr	r3, [r1, #0]
 8016576:	1b5b      	subs	r3, r3, r5
 8016578:	d418      	bmi.n	80165ac <_malloc_r+0x8c>
 801657a:	2b0b      	cmp	r3, #11
 801657c:	d90f      	bls.n	801659e <_malloc_r+0x7e>
 801657e:	600b      	str	r3, [r1, #0]
 8016580:	50cd      	str	r5, [r1, r3]
 8016582:	18cc      	adds	r4, r1, r3
 8016584:	4630      	mov	r0, r6
 8016586:	f000 f9c0 	bl	801690a <__malloc_unlock>
 801658a:	f104 000b 	add.w	r0, r4, #11
 801658e:	1d23      	adds	r3, r4, #4
 8016590:	f020 0007 	bic.w	r0, r0, #7
 8016594:	1ac3      	subs	r3, r0, r3
 8016596:	d0d3      	beq.n	8016540 <_malloc_r+0x20>
 8016598:	425a      	negs	r2, r3
 801659a:	50e2      	str	r2, [r4, r3]
 801659c:	e7d0      	b.n	8016540 <_malloc_r+0x20>
 801659e:	428c      	cmp	r4, r1
 80165a0:	684b      	ldr	r3, [r1, #4]
 80165a2:	bf16      	itet	ne
 80165a4:	6063      	strne	r3, [r4, #4]
 80165a6:	6013      	streq	r3, [r2, #0]
 80165a8:	460c      	movne	r4, r1
 80165aa:	e7eb      	b.n	8016584 <_malloc_r+0x64>
 80165ac:	460c      	mov	r4, r1
 80165ae:	6849      	ldr	r1, [r1, #4]
 80165b0:	e7cc      	b.n	801654c <_malloc_r+0x2c>
 80165b2:	1cc4      	adds	r4, r0, #3
 80165b4:	f024 0403 	bic.w	r4, r4, #3
 80165b8:	42a0      	cmp	r0, r4
 80165ba:	d005      	beq.n	80165c8 <_malloc_r+0xa8>
 80165bc:	1a21      	subs	r1, r4, r0
 80165be:	4630      	mov	r0, r6
 80165c0:	f000 f95a 	bl	8016878 <_sbrk_r>
 80165c4:	3001      	adds	r0, #1
 80165c6:	d0cf      	beq.n	8016568 <_malloc_r+0x48>
 80165c8:	6025      	str	r5, [r4, #0]
 80165ca:	e7db      	b.n	8016584 <_malloc_r+0x64>
 80165cc:	2001efe0 	.word	0x2001efe0
 80165d0:	2001efe4 	.word	0x2001efe4

080165d4 <__ssputs_r>:
 80165d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d8:	688e      	ldr	r6, [r1, #8]
 80165da:	429e      	cmp	r6, r3
 80165dc:	4682      	mov	sl, r0
 80165de:	460c      	mov	r4, r1
 80165e0:	4690      	mov	r8, r2
 80165e2:	4699      	mov	r9, r3
 80165e4:	d837      	bhi.n	8016656 <__ssputs_r+0x82>
 80165e6:	898a      	ldrh	r2, [r1, #12]
 80165e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80165ec:	d031      	beq.n	8016652 <__ssputs_r+0x7e>
 80165ee:	6825      	ldr	r5, [r4, #0]
 80165f0:	6909      	ldr	r1, [r1, #16]
 80165f2:	1a6f      	subs	r7, r5, r1
 80165f4:	6965      	ldr	r5, [r4, #20]
 80165f6:	2302      	movs	r3, #2
 80165f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8016600:	f109 0301 	add.w	r3, r9, #1
 8016604:	443b      	add	r3, r7
 8016606:	429d      	cmp	r5, r3
 8016608:	bf38      	it	cc
 801660a:	461d      	movcc	r5, r3
 801660c:	0553      	lsls	r3, r2, #21
 801660e:	d530      	bpl.n	8016672 <__ssputs_r+0x9e>
 8016610:	4629      	mov	r1, r5
 8016612:	f7ff ff85 	bl	8016520 <_malloc_r>
 8016616:	4606      	mov	r6, r0
 8016618:	b950      	cbnz	r0, 8016630 <__ssputs_r+0x5c>
 801661a:	230c      	movs	r3, #12
 801661c:	f8ca 3000 	str.w	r3, [sl]
 8016620:	89a3      	ldrh	r3, [r4, #12]
 8016622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016626:	81a3      	strh	r3, [r4, #12]
 8016628:	f04f 30ff 	mov.w	r0, #4294967295
 801662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016630:	463a      	mov	r2, r7
 8016632:	6921      	ldr	r1, [r4, #16]
 8016634:	f7fc fc16 	bl	8012e64 <memcpy>
 8016638:	89a3      	ldrh	r3, [r4, #12]
 801663a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801663e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016642:	81a3      	strh	r3, [r4, #12]
 8016644:	6126      	str	r6, [r4, #16]
 8016646:	6165      	str	r5, [r4, #20]
 8016648:	443e      	add	r6, r7
 801664a:	1bed      	subs	r5, r5, r7
 801664c:	6026      	str	r6, [r4, #0]
 801664e:	60a5      	str	r5, [r4, #8]
 8016650:	464e      	mov	r6, r9
 8016652:	454e      	cmp	r6, r9
 8016654:	d900      	bls.n	8016658 <__ssputs_r+0x84>
 8016656:	464e      	mov	r6, r9
 8016658:	4632      	mov	r2, r6
 801665a:	4641      	mov	r1, r8
 801665c:	6820      	ldr	r0, [r4, #0]
 801665e:	f000 f93a 	bl	80168d6 <memmove>
 8016662:	68a3      	ldr	r3, [r4, #8]
 8016664:	1b9b      	subs	r3, r3, r6
 8016666:	60a3      	str	r3, [r4, #8]
 8016668:	6823      	ldr	r3, [r4, #0]
 801666a:	441e      	add	r6, r3
 801666c:	6026      	str	r6, [r4, #0]
 801666e:	2000      	movs	r0, #0
 8016670:	e7dc      	b.n	801662c <__ssputs_r+0x58>
 8016672:	462a      	mov	r2, r5
 8016674:	f000 f94a 	bl	801690c <_realloc_r>
 8016678:	4606      	mov	r6, r0
 801667a:	2800      	cmp	r0, #0
 801667c:	d1e2      	bne.n	8016644 <__ssputs_r+0x70>
 801667e:	6921      	ldr	r1, [r4, #16]
 8016680:	4650      	mov	r0, sl
 8016682:	f7ff feff 	bl	8016484 <_free_r>
 8016686:	e7c8      	b.n	801661a <__ssputs_r+0x46>

08016688 <_svfiprintf_r>:
 8016688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801668c:	461d      	mov	r5, r3
 801668e:	898b      	ldrh	r3, [r1, #12]
 8016690:	061f      	lsls	r7, r3, #24
 8016692:	b09d      	sub	sp, #116	; 0x74
 8016694:	4680      	mov	r8, r0
 8016696:	460c      	mov	r4, r1
 8016698:	4616      	mov	r6, r2
 801669a:	d50f      	bpl.n	80166bc <_svfiprintf_r+0x34>
 801669c:	690b      	ldr	r3, [r1, #16]
 801669e:	b96b      	cbnz	r3, 80166bc <_svfiprintf_r+0x34>
 80166a0:	2140      	movs	r1, #64	; 0x40
 80166a2:	f7ff ff3d 	bl	8016520 <_malloc_r>
 80166a6:	6020      	str	r0, [r4, #0]
 80166a8:	6120      	str	r0, [r4, #16]
 80166aa:	b928      	cbnz	r0, 80166b8 <_svfiprintf_r+0x30>
 80166ac:	230c      	movs	r3, #12
 80166ae:	f8c8 3000 	str.w	r3, [r8]
 80166b2:	f04f 30ff 	mov.w	r0, #4294967295
 80166b6:	e0c8      	b.n	801684a <_svfiprintf_r+0x1c2>
 80166b8:	2340      	movs	r3, #64	; 0x40
 80166ba:	6163      	str	r3, [r4, #20]
 80166bc:	2300      	movs	r3, #0
 80166be:	9309      	str	r3, [sp, #36]	; 0x24
 80166c0:	2320      	movs	r3, #32
 80166c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80166c6:	2330      	movs	r3, #48	; 0x30
 80166c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80166cc:	9503      	str	r5, [sp, #12]
 80166ce:	f04f 0b01 	mov.w	fp, #1
 80166d2:	4637      	mov	r7, r6
 80166d4:	463d      	mov	r5, r7
 80166d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80166da:	b10b      	cbz	r3, 80166e0 <_svfiprintf_r+0x58>
 80166dc:	2b25      	cmp	r3, #37	; 0x25
 80166de:	d13e      	bne.n	801675e <_svfiprintf_r+0xd6>
 80166e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80166e4:	d00b      	beq.n	80166fe <_svfiprintf_r+0x76>
 80166e6:	4653      	mov	r3, sl
 80166e8:	4632      	mov	r2, r6
 80166ea:	4621      	mov	r1, r4
 80166ec:	4640      	mov	r0, r8
 80166ee:	f7ff ff71 	bl	80165d4 <__ssputs_r>
 80166f2:	3001      	adds	r0, #1
 80166f4:	f000 80a4 	beq.w	8016840 <_svfiprintf_r+0x1b8>
 80166f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166fa:	4453      	add	r3, sl
 80166fc:	9309      	str	r3, [sp, #36]	; 0x24
 80166fe:	783b      	ldrb	r3, [r7, #0]
 8016700:	2b00      	cmp	r3, #0
 8016702:	f000 809d 	beq.w	8016840 <_svfiprintf_r+0x1b8>
 8016706:	2300      	movs	r3, #0
 8016708:	f04f 32ff 	mov.w	r2, #4294967295
 801670c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016710:	9304      	str	r3, [sp, #16]
 8016712:	9307      	str	r3, [sp, #28]
 8016714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016718:	931a      	str	r3, [sp, #104]	; 0x68
 801671a:	462f      	mov	r7, r5
 801671c:	2205      	movs	r2, #5
 801671e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016722:	4850      	ldr	r0, [pc, #320]	; (8016864 <_svfiprintf_r+0x1dc>)
 8016724:	f7e9 fd84 	bl	8000230 <memchr>
 8016728:	9b04      	ldr	r3, [sp, #16]
 801672a:	b9d0      	cbnz	r0, 8016762 <_svfiprintf_r+0xda>
 801672c:	06d9      	lsls	r1, r3, #27
 801672e:	bf44      	itt	mi
 8016730:	2220      	movmi	r2, #32
 8016732:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016736:	071a      	lsls	r2, r3, #28
 8016738:	bf44      	itt	mi
 801673a:	222b      	movmi	r2, #43	; 0x2b
 801673c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016740:	782a      	ldrb	r2, [r5, #0]
 8016742:	2a2a      	cmp	r2, #42	; 0x2a
 8016744:	d015      	beq.n	8016772 <_svfiprintf_r+0xea>
 8016746:	9a07      	ldr	r2, [sp, #28]
 8016748:	462f      	mov	r7, r5
 801674a:	2000      	movs	r0, #0
 801674c:	250a      	movs	r5, #10
 801674e:	4639      	mov	r1, r7
 8016750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016754:	3b30      	subs	r3, #48	; 0x30
 8016756:	2b09      	cmp	r3, #9
 8016758:	d94d      	bls.n	80167f6 <_svfiprintf_r+0x16e>
 801675a:	b1b8      	cbz	r0, 801678c <_svfiprintf_r+0x104>
 801675c:	e00f      	b.n	801677e <_svfiprintf_r+0xf6>
 801675e:	462f      	mov	r7, r5
 8016760:	e7b8      	b.n	80166d4 <_svfiprintf_r+0x4c>
 8016762:	4a40      	ldr	r2, [pc, #256]	; (8016864 <_svfiprintf_r+0x1dc>)
 8016764:	1a80      	subs	r0, r0, r2
 8016766:	fa0b f000 	lsl.w	r0, fp, r0
 801676a:	4318      	orrs	r0, r3
 801676c:	9004      	str	r0, [sp, #16]
 801676e:	463d      	mov	r5, r7
 8016770:	e7d3      	b.n	801671a <_svfiprintf_r+0x92>
 8016772:	9a03      	ldr	r2, [sp, #12]
 8016774:	1d11      	adds	r1, r2, #4
 8016776:	6812      	ldr	r2, [r2, #0]
 8016778:	9103      	str	r1, [sp, #12]
 801677a:	2a00      	cmp	r2, #0
 801677c:	db01      	blt.n	8016782 <_svfiprintf_r+0xfa>
 801677e:	9207      	str	r2, [sp, #28]
 8016780:	e004      	b.n	801678c <_svfiprintf_r+0x104>
 8016782:	4252      	negs	r2, r2
 8016784:	f043 0302 	orr.w	r3, r3, #2
 8016788:	9207      	str	r2, [sp, #28]
 801678a:	9304      	str	r3, [sp, #16]
 801678c:	783b      	ldrb	r3, [r7, #0]
 801678e:	2b2e      	cmp	r3, #46	; 0x2e
 8016790:	d10c      	bne.n	80167ac <_svfiprintf_r+0x124>
 8016792:	787b      	ldrb	r3, [r7, #1]
 8016794:	2b2a      	cmp	r3, #42	; 0x2a
 8016796:	d133      	bne.n	8016800 <_svfiprintf_r+0x178>
 8016798:	9b03      	ldr	r3, [sp, #12]
 801679a:	1d1a      	adds	r2, r3, #4
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	9203      	str	r2, [sp, #12]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	bfb8      	it	lt
 80167a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80167a8:	3702      	adds	r7, #2
 80167aa:	9305      	str	r3, [sp, #20]
 80167ac:	4d2e      	ldr	r5, [pc, #184]	; (8016868 <_svfiprintf_r+0x1e0>)
 80167ae:	7839      	ldrb	r1, [r7, #0]
 80167b0:	2203      	movs	r2, #3
 80167b2:	4628      	mov	r0, r5
 80167b4:	f7e9 fd3c 	bl	8000230 <memchr>
 80167b8:	b138      	cbz	r0, 80167ca <_svfiprintf_r+0x142>
 80167ba:	2340      	movs	r3, #64	; 0x40
 80167bc:	1b40      	subs	r0, r0, r5
 80167be:	fa03 f000 	lsl.w	r0, r3, r0
 80167c2:	9b04      	ldr	r3, [sp, #16]
 80167c4:	4303      	orrs	r3, r0
 80167c6:	3701      	adds	r7, #1
 80167c8:	9304      	str	r3, [sp, #16]
 80167ca:	7839      	ldrb	r1, [r7, #0]
 80167cc:	4827      	ldr	r0, [pc, #156]	; (801686c <_svfiprintf_r+0x1e4>)
 80167ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80167d2:	2206      	movs	r2, #6
 80167d4:	1c7e      	adds	r6, r7, #1
 80167d6:	f7e9 fd2b 	bl	8000230 <memchr>
 80167da:	2800      	cmp	r0, #0
 80167dc:	d038      	beq.n	8016850 <_svfiprintf_r+0x1c8>
 80167de:	4b24      	ldr	r3, [pc, #144]	; (8016870 <_svfiprintf_r+0x1e8>)
 80167e0:	bb13      	cbnz	r3, 8016828 <_svfiprintf_r+0x1a0>
 80167e2:	9b03      	ldr	r3, [sp, #12]
 80167e4:	3307      	adds	r3, #7
 80167e6:	f023 0307 	bic.w	r3, r3, #7
 80167ea:	3308      	adds	r3, #8
 80167ec:	9303      	str	r3, [sp, #12]
 80167ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167f0:	444b      	add	r3, r9
 80167f2:	9309      	str	r3, [sp, #36]	; 0x24
 80167f4:	e76d      	b.n	80166d2 <_svfiprintf_r+0x4a>
 80167f6:	fb05 3202 	mla	r2, r5, r2, r3
 80167fa:	2001      	movs	r0, #1
 80167fc:	460f      	mov	r7, r1
 80167fe:	e7a6      	b.n	801674e <_svfiprintf_r+0xc6>
 8016800:	2300      	movs	r3, #0
 8016802:	3701      	adds	r7, #1
 8016804:	9305      	str	r3, [sp, #20]
 8016806:	4619      	mov	r1, r3
 8016808:	250a      	movs	r5, #10
 801680a:	4638      	mov	r0, r7
 801680c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016810:	3a30      	subs	r2, #48	; 0x30
 8016812:	2a09      	cmp	r2, #9
 8016814:	d903      	bls.n	801681e <_svfiprintf_r+0x196>
 8016816:	2b00      	cmp	r3, #0
 8016818:	d0c8      	beq.n	80167ac <_svfiprintf_r+0x124>
 801681a:	9105      	str	r1, [sp, #20]
 801681c:	e7c6      	b.n	80167ac <_svfiprintf_r+0x124>
 801681e:	fb05 2101 	mla	r1, r5, r1, r2
 8016822:	2301      	movs	r3, #1
 8016824:	4607      	mov	r7, r0
 8016826:	e7f0      	b.n	801680a <_svfiprintf_r+0x182>
 8016828:	ab03      	add	r3, sp, #12
 801682a:	9300      	str	r3, [sp, #0]
 801682c:	4622      	mov	r2, r4
 801682e:	4b11      	ldr	r3, [pc, #68]	; (8016874 <_svfiprintf_r+0x1ec>)
 8016830:	a904      	add	r1, sp, #16
 8016832:	4640      	mov	r0, r8
 8016834:	f7fc fbbe 	bl	8012fb4 <_printf_float>
 8016838:	f1b0 3fff 	cmp.w	r0, #4294967295
 801683c:	4681      	mov	r9, r0
 801683e:	d1d6      	bne.n	80167ee <_svfiprintf_r+0x166>
 8016840:	89a3      	ldrh	r3, [r4, #12]
 8016842:	065b      	lsls	r3, r3, #25
 8016844:	f53f af35 	bmi.w	80166b2 <_svfiprintf_r+0x2a>
 8016848:	9809      	ldr	r0, [sp, #36]	; 0x24
 801684a:	b01d      	add	sp, #116	; 0x74
 801684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016850:	ab03      	add	r3, sp, #12
 8016852:	9300      	str	r3, [sp, #0]
 8016854:	4622      	mov	r2, r4
 8016856:	4b07      	ldr	r3, [pc, #28]	; (8016874 <_svfiprintf_r+0x1ec>)
 8016858:	a904      	add	r1, sp, #16
 801685a:	4640      	mov	r0, r8
 801685c:	f7fc fe60 	bl	8013520 <_printf_i>
 8016860:	e7ea      	b.n	8016838 <_svfiprintf_r+0x1b0>
 8016862:	bf00      	nop
 8016864:	0801a40c 	.word	0x0801a40c
 8016868:	0801a412 	.word	0x0801a412
 801686c:	0801a416 	.word	0x0801a416
 8016870:	08012fb5 	.word	0x08012fb5
 8016874:	080165d5 	.word	0x080165d5

08016878 <_sbrk_r>:
 8016878:	b538      	push	{r3, r4, r5, lr}
 801687a:	4c06      	ldr	r4, [pc, #24]	; (8016894 <_sbrk_r+0x1c>)
 801687c:	2300      	movs	r3, #0
 801687e:	4605      	mov	r5, r0
 8016880:	4608      	mov	r0, r1
 8016882:	6023      	str	r3, [r4, #0]
 8016884:	f7f5 f8fc 	bl	800ba80 <_sbrk>
 8016888:	1c43      	adds	r3, r0, #1
 801688a:	d102      	bne.n	8016892 <_sbrk_r+0x1a>
 801688c:	6823      	ldr	r3, [r4, #0]
 801688e:	b103      	cbz	r3, 8016892 <_sbrk_r+0x1a>
 8016890:	602b      	str	r3, [r5, #0]
 8016892:	bd38      	pop	{r3, r4, r5, pc}
 8016894:	2001f7e8 	.word	0x2001f7e8

08016898 <strncmp>:
 8016898:	b510      	push	{r4, lr}
 801689a:	b16a      	cbz	r2, 80168b8 <strncmp+0x20>
 801689c:	3901      	subs	r1, #1
 801689e:	1884      	adds	r4, r0, r2
 80168a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80168a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80168a8:	4293      	cmp	r3, r2
 80168aa:	d103      	bne.n	80168b4 <strncmp+0x1c>
 80168ac:	42a0      	cmp	r0, r4
 80168ae:	d001      	beq.n	80168b4 <strncmp+0x1c>
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d1f5      	bne.n	80168a0 <strncmp+0x8>
 80168b4:	1a98      	subs	r0, r3, r2
 80168b6:	bd10      	pop	{r4, pc}
 80168b8:	4610      	mov	r0, r2
 80168ba:	e7fc      	b.n	80168b6 <strncmp+0x1e>

080168bc <__ascii_wctomb>:
 80168bc:	b149      	cbz	r1, 80168d2 <__ascii_wctomb+0x16>
 80168be:	2aff      	cmp	r2, #255	; 0xff
 80168c0:	bf85      	ittet	hi
 80168c2:	238a      	movhi	r3, #138	; 0x8a
 80168c4:	6003      	strhi	r3, [r0, #0]
 80168c6:	700a      	strbls	r2, [r1, #0]
 80168c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80168cc:	bf98      	it	ls
 80168ce:	2001      	movls	r0, #1
 80168d0:	4770      	bx	lr
 80168d2:	4608      	mov	r0, r1
 80168d4:	4770      	bx	lr

080168d6 <memmove>:
 80168d6:	4288      	cmp	r0, r1
 80168d8:	b510      	push	{r4, lr}
 80168da:	eb01 0302 	add.w	r3, r1, r2
 80168de:	d807      	bhi.n	80168f0 <memmove+0x1a>
 80168e0:	1e42      	subs	r2, r0, #1
 80168e2:	4299      	cmp	r1, r3
 80168e4:	d00a      	beq.n	80168fc <memmove+0x26>
 80168e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80168ee:	e7f8      	b.n	80168e2 <memmove+0xc>
 80168f0:	4283      	cmp	r3, r0
 80168f2:	d9f5      	bls.n	80168e0 <memmove+0xa>
 80168f4:	1881      	adds	r1, r0, r2
 80168f6:	1ad2      	subs	r2, r2, r3
 80168f8:	42d3      	cmn	r3, r2
 80168fa:	d100      	bne.n	80168fe <memmove+0x28>
 80168fc:	bd10      	pop	{r4, pc}
 80168fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016902:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016906:	e7f7      	b.n	80168f8 <memmove+0x22>

08016908 <__malloc_lock>:
 8016908:	4770      	bx	lr

0801690a <__malloc_unlock>:
 801690a:	4770      	bx	lr

0801690c <_realloc_r>:
 801690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801690e:	4607      	mov	r7, r0
 8016910:	4614      	mov	r4, r2
 8016912:	460e      	mov	r6, r1
 8016914:	b921      	cbnz	r1, 8016920 <_realloc_r+0x14>
 8016916:	4611      	mov	r1, r2
 8016918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801691c:	f7ff be00 	b.w	8016520 <_malloc_r>
 8016920:	b922      	cbnz	r2, 801692c <_realloc_r+0x20>
 8016922:	f7ff fdaf 	bl	8016484 <_free_r>
 8016926:	4625      	mov	r5, r4
 8016928:	4628      	mov	r0, r5
 801692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801692c:	f000 f814 	bl	8016958 <_malloc_usable_size_r>
 8016930:	42a0      	cmp	r0, r4
 8016932:	d20f      	bcs.n	8016954 <_realloc_r+0x48>
 8016934:	4621      	mov	r1, r4
 8016936:	4638      	mov	r0, r7
 8016938:	f7ff fdf2 	bl	8016520 <_malloc_r>
 801693c:	4605      	mov	r5, r0
 801693e:	2800      	cmp	r0, #0
 8016940:	d0f2      	beq.n	8016928 <_realloc_r+0x1c>
 8016942:	4631      	mov	r1, r6
 8016944:	4622      	mov	r2, r4
 8016946:	f7fc fa8d 	bl	8012e64 <memcpy>
 801694a:	4631      	mov	r1, r6
 801694c:	4638      	mov	r0, r7
 801694e:	f7ff fd99 	bl	8016484 <_free_r>
 8016952:	e7e9      	b.n	8016928 <_realloc_r+0x1c>
 8016954:	4635      	mov	r5, r6
 8016956:	e7e7      	b.n	8016928 <_realloc_r+0x1c>

08016958 <_malloc_usable_size_r>:
 8016958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801695c:	1f18      	subs	r0, r3, #4
 801695e:	2b00      	cmp	r3, #0
 8016960:	bfbc      	itt	lt
 8016962:	580b      	ldrlt	r3, [r1, r0]
 8016964:	18c0      	addlt	r0, r0, r3
 8016966:	4770      	bx	lr

08016968 <roundf>:
 8016968:	ee10 0a10 	vmov	r0, s0
 801696c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016970:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8016974:	2a16      	cmp	r2, #22
 8016976:	dc15      	bgt.n	80169a4 <roundf+0x3c>
 8016978:	2a00      	cmp	r2, #0
 801697a:	da08      	bge.n	801698e <roundf+0x26>
 801697c:	3201      	adds	r2, #1
 801697e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8016982:	d101      	bne.n	8016988 <roundf+0x20>
 8016984:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8016988:	ee00 3a10 	vmov	s0, r3
 801698c:	4770      	bx	lr
 801698e:	4908      	ldr	r1, [pc, #32]	; (80169b0 <roundf+0x48>)
 8016990:	4111      	asrs	r1, r2
 8016992:	4208      	tst	r0, r1
 8016994:	d0fa      	beq.n	801698c <roundf+0x24>
 8016996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801699a:	4113      	asrs	r3, r2
 801699c:	4403      	add	r3, r0
 801699e:	ea23 0301 	bic.w	r3, r3, r1
 80169a2:	e7f1      	b.n	8016988 <roundf+0x20>
 80169a4:	2a80      	cmp	r2, #128	; 0x80
 80169a6:	d1f1      	bne.n	801698c <roundf+0x24>
 80169a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80169ac:	4770      	bx	lr
 80169ae:	bf00      	nop
 80169b0:	007fffff 	.word	0x007fffff

080169b4 <log10f>:
 80169b4:	b510      	push	{r4, lr}
 80169b6:	ed2d 8b02 	vpush	{d8}
 80169ba:	b08a      	sub	sp, #40	; 0x28
 80169bc:	eeb0 8a40 	vmov.f32	s16, s0
 80169c0:	f000 f86e 	bl	8016aa0 <__ieee754_log10f>
 80169c4:	4b31      	ldr	r3, [pc, #196]	; (8016a8c <log10f+0xd8>)
 80169c6:	f993 4000 	ldrsb.w	r4, [r3]
 80169ca:	1c63      	adds	r3, r4, #1
 80169cc:	d059      	beq.n	8016a82 <log10f+0xce>
 80169ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80169d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169d6:	d654      	bvs.n	8016a82 <log10f+0xce>
 80169d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80169dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e0:	d84f      	bhi.n	8016a82 <log10f+0xce>
 80169e2:	4b2b      	ldr	r3, [pc, #172]	; (8016a90 <log10f+0xdc>)
 80169e4:	9301      	str	r3, [sp, #4]
 80169e6:	ee18 0a10 	vmov	r0, s16
 80169ea:	2300      	movs	r3, #0
 80169ec:	9308      	str	r3, [sp, #32]
 80169ee:	f7e9 fdd3 	bl	8000598 <__aeabi_f2d>
 80169f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80169f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80169fa:	b994      	cbnz	r4, 8016a22 <log10f+0x6e>
 80169fc:	4b25      	ldr	r3, [pc, #148]	; (8016a94 <log10f+0xe0>)
 80169fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016a02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016a0e:	d025      	beq.n	8016a5c <log10f+0xa8>
 8016a10:	2301      	movs	r3, #1
 8016a12:	2c02      	cmp	r4, #2
 8016a14:	9300      	str	r3, [sp, #0]
 8016a16:	d116      	bne.n	8016a46 <log10f+0x92>
 8016a18:	f7fc f9fa 	bl	8012e10 <__errno>
 8016a1c:	2321      	movs	r3, #33	; 0x21
 8016a1e:	6003      	str	r3, [r0, #0]
 8016a20:	e016      	b.n	8016a50 <log10f+0x9c>
 8016a22:	4b1d      	ldr	r3, [pc, #116]	; (8016a98 <log10f+0xe4>)
 8016a24:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016a28:	2200      	movs	r2, #0
 8016a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016a32:	d1ed      	bne.n	8016a10 <log10f+0x5c>
 8016a34:	2302      	movs	r3, #2
 8016a36:	429c      	cmp	r4, r3
 8016a38:	9300      	str	r3, [sp, #0]
 8016a3a:	d111      	bne.n	8016a60 <log10f+0xac>
 8016a3c:	f7fc f9e8 	bl	8012e10 <__errno>
 8016a40:	2322      	movs	r3, #34	; 0x22
 8016a42:	6003      	str	r3, [r0, #0]
 8016a44:	e011      	b.n	8016a6a <log10f+0xb6>
 8016a46:	4668      	mov	r0, sp
 8016a48:	f000 f880 	bl	8016b4c <matherr>
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	d0e3      	beq.n	8016a18 <log10f+0x64>
 8016a50:	4812      	ldr	r0, [pc, #72]	; (8016a9c <log10f+0xe8>)
 8016a52:	f000 f87d 	bl	8016b50 <nan>
 8016a56:	ed8d 0b06 	vstr	d0, [sp, #24]
 8016a5a:	e006      	b.n	8016a6a <log10f+0xb6>
 8016a5c:	2302      	movs	r3, #2
 8016a5e:	9300      	str	r3, [sp, #0]
 8016a60:	4668      	mov	r0, sp
 8016a62:	f000 f873 	bl	8016b4c <matherr>
 8016a66:	2800      	cmp	r0, #0
 8016a68:	d0e8      	beq.n	8016a3c <log10f+0x88>
 8016a6a:	9b08      	ldr	r3, [sp, #32]
 8016a6c:	b11b      	cbz	r3, 8016a76 <log10f+0xc2>
 8016a6e:	f7fc f9cf 	bl	8012e10 <__errno>
 8016a72:	9b08      	ldr	r3, [sp, #32]
 8016a74:	6003      	str	r3, [r0, #0]
 8016a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a7a:	f7ea f8dd 	bl	8000c38 <__aeabi_d2f>
 8016a7e:	ee00 0a10 	vmov	s0, r0
 8016a82:	b00a      	add	sp, #40	; 0x28
 8016a84:	ecbd 8b02 	vpop	{d8}
 8016a88:	bd10      	pop	{r4, pc}
 8016a8a:	bf00      	nop
 8016a8c:	20002ef0 	.word	0x20002ef0
 8016a90:	0801a51e 	.word	0x0801a51e
 8016a94:	c7efffff 	.word	0xc7efffff
 8016a98:	fff00000 	.word	0xfff00000
 8016a9c:	0801a411 	.word	0x0801a411

08016aa0 <__ieee754_log10f>:
 8016aa0:	b508      	push	{r3, lr}
 8016aa2:	ee10 2a10 	vmov	r2, s0
 8016aa6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016aaa:	ed2d 8b02 	vpush	{d8}
 8016aae:	d108      	bne.n	8016ac2 <__ieee754_log10f+0x22>
 8016ab0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016b34 <__ieee754_log10f+0x94>
 8016ab4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016b38 <__ieee754_log10f+0x98>
 8016ab8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016abc:	ecbd 8b02 	vpop	{d8}
 8016ac0:	bd08      	pop	{r3, pc}
 8016ac2:	2a00      	cmp	r2, #0
 8016ac4:	da02      	bge.n	8016acc <__ieee754_log10f+0x2c>
 8016ac6:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016aca:	e7f3      	b.n	8016ab4 <__ieee754_log10f+0x14>
 8016acc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016ad0:	db02      	blt.n	8016ad8 <__ieee754_log10f+0x38>
 8016ad2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016ad6:	e7f1      	b.n	8016abc <__ieee754_log10f+0x1c>
 8016ad8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8016adc:	bfbf      	itttt	lt
 8016ade:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8016b3c <__ieee754_log10f+0x9c>
 8016ae2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016ae6:	f06f 0118 	mvnlt.w	r1, #24
 8016aea:	ee17 2a90 	vmovlt	r2, s15
 8016aee:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8016af2:	bfa8      	it	ge
 8016af4:	2100      	movge	r1, #0
 8016af6:	3b7f      	subs	r3, #127	; 0x7f
 8016af8:	440b      	add	r3, r1
 8016afa:	0fd9      	lsrs	r1, r3, #31
 8016afc:	440b      	add	r3, r1
 8016afe:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016b02:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8016b06:	ee07 3a90 	vmov	s15, r3
 8016b0a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8016b0e:	ee00 3a10 	vmov	s0, r3
 8016b12:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016b16:	f000 f823 	bl	8016b60 <__ieee754_logf>
 8016b1a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016b40 <__ieee754_log10f+0xa0>
 8016b1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b22:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016b44 <__ieee754_log10f+0xa4>
 8016b26:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016b2a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016b48 <__ieee754_log10f+0xa8>
 8016b2e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016b32:	e7c3      	b.n	8016abc <__ieee754_log10f+0x1c>
 8016b34:	cc000000 	.word	0xcc000000
 8016b38:	00000000 	.word	0x00000000
 8016b3c:	4c000000 	.word	0x4c000000
 8016b40:	3ede5bd9 	.word	0x3ede5bd9
 8016b44:	355427db 	.word	0x355427db
 8016b48:	3e9a2080 	.word	0x3e9a2080

08016b4c <matherr>:
 8016b4c:	2000      	movs	r0, #0
 8016b4e:	4770      	bx	lr

08016b50 <nan>:
 8016b50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016b58 <nan+0x8>
 8016b54:	4770      	bx	lr
 8016b56:	bf00      	nop
 8016b58:	00000000 	.word	0x00000000
 8016b5c:	7ff80000 	.word	0x7ff80000

08016b60 <__ieee754_logf>:
 8016b60:	ee10 3a10 	vmov	r3, s0
 8016b64:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016b68:	d106      	bne.n	8016b78 <__ieee754_logf+0x18>
 8016b6a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8016d00 <__ieee754_logf+0x1a0>
 8016b6e:	eddf 7a65 	vldr	s15, [pc, #404]	; 8016d04 <__ieee754_logf+0x1a4>
 8016b72:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016b76:	4770      	bx	lr
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	da02      	bge.n	8016b82 <__ieee754_logf+0x22>
 8016b7c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016b80:	e7f5      	b.n	8016b6e <__ieee754_logf+0xe>
 8016b82:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016b86:	db02      	blt.n	8016b8e <__ieee754_logf+0x2e>
 8016b88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016b8c:	4770      	bx	lr
 8016b8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016b92:	bfbf      	itttt	lt
 8016b94:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8016d08 <__ieee754_logf+0x1a8>
 8016b98:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016b9c:	f06f 0118 	mvnlt.w	r1, #24
 8016ba0:	ee17 3a90 	vmovlt	r3, s15
 8016ba4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8016ba8:	bfa8      	it	ge
 8016baa:	2100      	movge	r1, #0
 8016bac:	3a7f      	subs	r2, #127	; 0x7f
 8016bae:	440a      	add	r2, r1
 8016bb0:	4956      	ldr	r1, [pc, #344]	; (8016d0c <__ieee754_logf+0x1ac>)
 8016bb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016bb6:	4419      	add	r1, r3
 8016bb8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8016bbc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8016bc0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8016bc4:	4319      	orrs	r1, r3
 8016bc6:	ee07 1a90 	vmov	s15, r1
 8016bca:	f103 010f 	add.w	r1, r3, #15
 8016bce:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8016bd2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016bd6:	290f      	cmp	r1, #15
 8016bd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016bdc:	dc31      	bgt.n	8016c42 <__ieee754_logf+0xe2>
 8016bde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be6:	d10f      	bne.n	8016c08 <__ieee754_logf+0xa8>
 8016be8:	2a00      	cmp	r2, #0
 8016bea:	f000 8085 	beq.w	8016cf8 <__ieee754_logf+0x198>
 8016bee:	ee07 2a90 	vmov	s15, r2
 8016bf2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8016d10 <__ieee754_logf+0x1b0>
 8016bf6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8016d14 <__ieee754_logf+0x1b4>
 8016bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bfe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016c02:	eea7 0a87 	vfma.f32	s0, s15, s14
 8016c06:	4770      	bx	lr
 8016c08:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016d18 <__ieee754_logf+0x1b8>
 8016c0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016c10:	eea0 7a67 	vfms.f32	s14, s0, s15
 8016c14:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016c1c:	b912      	cbnz	r2, 8016c24 <__ieee754_logf+0xc4>
 8016c1e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016c22:	4770      	bx	lr
 8016c24:	ee07 2a90 	vmov	s15, r2
 8016c28:	eddf 6a39 	vldr	s13, [pc, #228]	; 8016d10 <__ieee754_logf+0x1b0>
 8016c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c30:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016c34:	ee37 0a40 	vsub.f32	s0, s14, s0
 8016c38:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8016d14 <__ieee754_logf+0x1b4>
 8016c3c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8016c40:	4770      	bx	lr
 8016c42:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016c46:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016c4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016d1c <__ieee754_logf+0x1bc>
 8016c4e:	eddf 4a34 	vldr	s9, [pc, #208]	; 8016d20 <__ieee754_logf+0x1c0>
 8016c52:	4934      	ldr	r1, [pc, #208]	; (8016d24 <__ieee754_logf+0x1c4>)
 8016c54:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8016c58:	4419      	add	r1, r3
 8016c5a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8016c5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016c62:	430b      	orrs	r3, r1
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	ee07 2a90 	vmov	s15, r2
 8016c6a:	ee26 5a06 	vmul.f32	s10, s12, s12
 8016c6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016c72:	ee25 7a05 	vmul.f32	s14, s10, s10
 8016c76:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016d28 <__ieee754_logf+0x1c8>
 8016c7a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016c7e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8016d2c <__ieee754_logf+0x1cc>
 8016c82:	eee7 5a87 	vfma.f32	s11, s15, s14
 8016c86:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016d30 <__ieee754_logf+0x1d0>
 8016c8a:	eee7 7a24 	vfma.f32	s15, s14, s9
 8016c8e:	eddf 4a29 	vldr	s9, [pc, #164]	; 8016d34 <__ieee754_logf+0x1d4>
 8016c92:	eee7 4a87 	vfma.f32	s9, s15, s14
 8016c96:	eddf 7a28 	vldr	s15, [pc, #160]	; 8016d38 <__ieee754_logf+0x1d8>
 8016c9a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8016c9e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016ca2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016ca6:	dd1c      	ble.n	8016ce2 <__ieee754_logf+0x182>
 8016ca8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016cac:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016cb0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8016cb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016cb8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016cbc:	b922      	cbnz	r2, 8016cc8 <__ieee754_logf+0x168>
 8016cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016cc6:	4770      	bx	lr
 8016cc8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8016d10 <__ieee754_logf+0x1b0>
 8016ccc:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cd4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016cd8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016d14 <__ieee754_logf+0x1b4>
 8016cdc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8016ce0:	4770      	bx	lr
 8016ce2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016ce6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016cea:	2a00      	cmp	r2, #0
 8016cec:	d0e9      	beq.n	8016cc2 <__ieee754_logf+0x162>
 8016cee:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016d10 <__ieee754_logf+0x1b0>
 8016cf2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8016cf6:	e7ed      	b.n	8016cd4 <__ieee754_logf+0x174>
 8016cf8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016d04 <__ieee754_logf+0x1a4>
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	cc000000 	.word	0xcc000000
 8016d04:	00000000 	.word	0x00000000
 8016d08:	4c000000 	.word	0x4c000000
 8016d0c:	004afb20 	.word	0x004afb20
 8016d10:	3717f7d1 	.word	0x3717f7d1
 8016d14:	3f317180 	.word	0x3f317180
 8016d18:	3eaaaaab 	.word	0x3eaaaaab
 8016d1c:	3e1cd04f 	.word	0x3e1cd04f
 8016d20:	3e178897 	.word	0x3e178897
 8016d24:	ffcf5c30 	.word	0xffcf5c30
 8016d28:	3e638e29 	.word	0x3e638e29
 8016d2c:	3ecccccd 	.word	0x3ecccccd
 8016d30:	3e3a3325 	.word	0x3e3a3325
 8016d34:	3e924925 	.word	0x3e924925
 8016d38:	3f2aaaab 	.word	0x3f2aaaab

08016d3c <_init>:
 8016d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d3e:	bf00      	nop
 8016d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d42:	bc08      	pop	{r3}
 8016d44:	469e      	mov	lr, r3
 8016d46:	4770      	bx	lr

08016d48 <_fini>:
 8016d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d4a:	bf00      	nop
 8016d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d4e:	bc08      	pop	{r3}
 8016d50:	469e      	mov	lr, r3
 8016d52:	4770      	bx	lr
