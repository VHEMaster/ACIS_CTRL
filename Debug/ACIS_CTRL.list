
ACIS_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022a8  0800cdd0  0800cdd0  0001cdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f078  0800f078  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f078  0800f078  0001f078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f080  0800f080  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f084  0800f084  0001f084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800f088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000621c  2000023c  0800f2c4  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006458  0800f2c4  00026458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002855e  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005642  00000000  00000000  000487ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001798  00000000  00000000  0004de10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c28  00000000  00000000  0004f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000270e2  00000000  00000000  000511d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017547  00000000  00000000  000782b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec80b  00000000  00000000  0008f7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017c004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000564c  00000000  00000000  0017c080  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ebc2  00000000  00000000  001816cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000023c 	.word	0x2000023c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cdb8 	.word	0x0800cdb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000240 	.word	0x20000240
 800021c:	0800cdb8 	.word	0x0800cdb8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <acis_gui_task>:
  MenuUndefined = 0,
  MenuMain,
}eMenuItem_t;

static void acis_gui_task(void * argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
  eMenuItem_t eMenuItem = MenuMain;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
  eMenuItem_t eOldMenu = MenuUndefined;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	75bb      	strb	r3, [r7, #22]
  uint32_t display_timeout = Delay_Tick;
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <acis_gui_task+0xc0>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t now;

  uint16_t rpm = 990;
 8000fee:	f240 33de 	movw	r3, #990	; 0x3de
 8000ff2:	81fb      	strh	r3, [r7, #14]


  while(1)
  {
    now = Delay_Tick;
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <acis_gui_task+0xc0>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	60bb      	str	r3, [r7, #8]
    if(eMenuItem != eOldMenu)
 8000ffa:	7dfa      	ldrb	r2, [r7, #23]
 8000ffc:	7dbb      	ldrb	r3, [r7, #22]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d102      	bne.n	8001008 <acis_gui_task+0x30>
    {
    }
    else
    {
      osDelay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f004 fe70 	bl	8005ce8 <osDelay>
    }

    switch (eMenuItem)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d13d      	bne.n	800108a <acis_gui_task+0xb2>
    {
      case MenuMain :
      {

        if(DelayDiff(now, display_timeout) > 300000)
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	68b8      	ldr	r0, [r7, #8]
 8001012:	f000 fc63 	bl	80018dc <DelayDiff>
 8001016:	4602      	mov	r2, r0
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <acis_gui_task+0xc4>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d938      	bls.n	8001090 <acis_gui_task+0xb8>
        {
          display_timeout = now;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	613b      	str	r3, [r7, #16]
          lcd_clear();
 8001022:	f000 fd85 	bl	8001b30 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8001026:	2301      	movs	r3, #1
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	2100      	movs	r1, #0
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fe68 	bl	8001d06 <lcd_rect>
          font_setFont(&rre_12x16);
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <acis_gui_task+0xc8>)
 8001038:	f006 fe50 	bl	8007cdc <font_setFont>
          font_printf(4,4,"RPM:   %5d",rpm++);
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	81fa      	strh	r2, [r7, #14]
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <acis_gui_task+0xcc>)
 8001044:	2104      	movs	r1, #4
 8001046:	2004      	movs	r0, #4
 8001048:	f008 f86a 	bl	8009120 <font_printf>
          font_printf(4,4+font_getHeight(),"Ign:       %3dd", 180);
 800104c:	f006 fdec 	bl	8007c28 <font_getHeight>
 8001050:	4603      	mov	r3, r0
 8001052:	1d19      	adds	r1, r3, #4
 8001054:	23b4      	movs	r3, #180	; 0xb4
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <acis_gui_task+0xd0>)
 8001058:	2004      	movs	r0, #4
 800105a:	f008 f861 	bl	8009120 <font_printf>
          font_printf(4,4+font_getHeight()*2,"Load:    %3d%%", 100);
 800105e:	f006 fde3 	bl	8007c28 <font_getHeight>
 8001062:	4603      	mov	r3, r0
 8001064:	3302      	adds	r3, #2
 8001066:	0059      	lsls	r1, r3, #1
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <acis_gui_task+0xd4>)
 800106c:	2004      	movs	r0, #4
 800106e:	f008 f857 	bl	8009120 <font_printf>
          font_setFont(&rre_5x8);
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <acis_gui_task+0xd8>)
 8001074:	f006 fe32 	bl	8007cdc <font_setFont>
          font_printf(4,53,"Fuel type: %s", "fuel 1");
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <acis_gui_task+0xdc>)
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <acis_gui_task+0xe0>)
 800107c:	2135      	movs	r1, #53	; 0x35
 800107e:	2004      	movs	r0, #4
 8001080:	f008 f84e 	bl	8009120 <font_printf>
          lcd_update();
 8001084:	f000 fcc8 	bl	8001a18 <lcd_update>
        }

        break;
 8001088:	e002      	b.n	8001090 <acis_gui_task+0xb8>
      }
      default :
        eMenuItem = MenuMain;
 800108a:	2301      	movs	r3, #1
 800108c:	75fb      	strb	r3, [r7, #23]
        break;
 800108e:	e000      	b.n	8001092 <acis_gui_task+0xba>
        break;
 8001090:	bf00      	nop
    }

    eOldMenu = eMenuItem;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	75bb      	strb	r3, [r7, #22]
    now = Delay_Tick;
 8001096:	e7ad      	b.n	8000ff4 <acis_gui_task+0x1c>
 8001098:	40000c00 	.word	0x40000c00
 800109c:	000493e0 	.word	0x000493e0
 80010a0:	2000002c 	.word	0x2000002c
 80010a4:	0800cddc 	.word	0x0800cddc
 80010a8:	0800cde8 	.word	0x0800cde8
 80010ac:	0800cdf8 	.word	0x0800cdf8
 80010b0:	2000003c 	.word	0x2000003c
 80010b4:	0800ce08 	.word	0x0800ce08
 80010b8:	0800ce10 	.word	0x0800ce10

080010bc <acis_main_task>:
  }
}

void acis_main_task(void * argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  tGuiHandler = osThreadNew(acis_gui_task, NULL, &cTaskAttributes);
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <acis_main_task+0x20>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <acis_main_task+0x24>)
 80010ca:	f004 fdb5 	bl	8005c38 <osThreadNew>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <acis_main_task+0x28>)
 80010d2:	601a      	str	r2, [r3, #0]
  while(1)
  {
    osDelay(100);
 80010d4:	2064      	movs	r0, #100	; 0x64
 80010d6:	f004 fe07 	bl	8005ce8 <osDelay>
 80010da:	e7fb      	b.n	80010d4 <acis_main_task+0x18>
 80010dc:	0800ce78 	.word	0x0800ce78
 80010e0:	08000fd9 	.word	0x08000fd9
 80010e4:	200055e4 	.word	0x200055e4

080010e8 <acis_parse_command>:
  }

}

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	73fb      	strb	r3, [r7, #15]

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <controls_irq>:
static uint32_t sw_display_ftime = 0;
static uint8_t sw_display_delay = 0;


void controls_irq(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  //Fuel1
  if(ISSWITCH(SW_CTRL(FUEL1)))
 8001108:	4b87      	ldr	r3, [pc, #540]	; (8001328 <controls_irq+0x224>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d11d      	bne.n	8001150 <controls_irq+0x4c>
  {
    if(sw_fuel1_delay > SW_PRESS_DELAY)
 8001114:	4b85      	ldr	r3, [pc, #532]	; (800132c <controls_irq+0x228>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b32      	cmp	r3, #50	; 0x32
 800111a:	d912      	bls.n	8001142 <controls_irq+0x3e>
    {
      if(sw_fuel1_ftime == 0) sw_fuel1_ftime = TIM_CNT;
 800111c:	4b84      	ldr	r3, [pc, #528]	; (8001330 <controls_irq+0x22c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <controls_irq+0x28>
 8001124:	4b83      	ldr	r3, [pc, #524]	; (8001334 <controls_irq+0x230>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a81      	ldr	r2, [pc, #516]	; (8001330 <controls_irq+0x22c>)
 800112a:	6013      	str	r3, [r2, #0]
      SW_FUEL1_TIME = TIM_CNT-sw_fuel1_ftime;
 800112c:	4b81      	ldr	r3, [pc, #516]	; (8001334 <controls_irq+0x230>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b7f      	ldr	r3, [pc, #508]	; (8001330 <controls_irq+0x22c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4a80      	ldr	r2, [pc, #512]	; (8001338 <controls_irq+0x234>)
 8001138:	6013      	str	r3, [r2, #0]
      SW_FUEL1 = 1;
 800113a:	4b80      	ldr	r3, [pc, #512]	; (800133c <controls_irq+0x238>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e010      	b.n	8001164 <controls_irq+0x60>
    } else sw_fuel1_delay+=TIM_STEP;
 8001142:	4b7a      	ldr	r3, [pc, #488]	; (800132c <controls_irq+0x228>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b78      	ldr	r3, [pc, #480]	; (800132c <controls_irq+0x228>)
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e009      	b.n	8001164 <controls_irq+0x60>
  } else SW_FUEL1 = sw_fuel1_delay = sw_fuel1_ftime = 0;
 8001150:	4b77      	ldr	r3, [pc, #476]	; (8001330 <controls_irq+0x22c>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	4b75      	ldr	r3, [pc, #468]	; (800132c <controls_irq+0x228>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <controls_irq+0x228>)
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	4b76      	ldr	r3, [pc, #472]	; (800133c <controls_irq+0x238>)
 8001162:	701a      	strb	r2, [r3, #0]

  //Fuel2
  if(ISSWITCH(SW_CTRL(FUEL2)))
 8001164:	4b70      	ldr	r3, [pc, #448]	; (8001328 <controls_irq+0x224>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116c:	2b00      	cmp	r3, #0
 800116e:	d11d      	bne.n	80011ac <controls_irq+0xa8>
  {
    if(sw_fuel2_delay > SW_PRESS_DELAY)
 8001170:	4b73      	ldr	r3, [pc, #460]	; (8001340 <controls_irq+0x23c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b32      	cmp	r3, #50	; 0x32
 8001176:	d912      	bls.n	800119e <controls_irq+0x9a>
    {
      if(sw_fuel2_ftime == 0) sw_fuel2_ftime = TIM_CNT;
 8001178:	4b72      	ldr	r3, [pc, #456]	; (8001344 <controls_irq+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <controls_irq+0x84>
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <controls_irq+0x230>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a6f      	ldr	r2, [pc, #444]	; (8001344 <controls_irq+0x240>)
 8001186:	6013      	str	r3, [r2, #0]
      SW_FUEL2_TIME = TIM_CNT-sw_fuel2_ftime;
 8001188:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <controls_irq+0x230>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <controls_irq+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a6d      	ldr	r2, [pc, #436]	; (8001348 <controls_irq+0x244>)
 8001194:	6013      	str	r3, [r2, #0]
      SW_FUEL2 = 1;
 8001196:	4b6d      	ldr	r3, [pc, #436]	; (800134c <controls_irq+0x248>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e010      	b.n	80011c0 <controls_irq+0xbc>
    } else sw_fuel2_delay+=TIM_STEP;
 800119e:	4b68      	ldr	r3, [pc, #416]	; (8001340 <controls_irq+0x23c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b66      	ldr	r3, [pc, #408]	; (8001340 <controls_irq+0x23c>)
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e009      	b.n	80011c0 <controls_irq+0xbc>
  } else SW_FUEL2 = sw_fuel2_delay = sw_fuel2_ftime = 0;
 80011ac:	4b65      	ldr	r3, [pc, #404]	; (8001344 <controls_irq+0x240>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <controls_irq+0x23c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <controls_irq+0x23c>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b63      	ldr	r3, [pc, #396]	; (800134c <controls_irq+0x248>)
 80011be:	701a      	strb	r2, [r3, #0]

  //Display
  if(ISSWITCH(SW_CTRL(DISPLAY)))
 80011c0:	4b59      	ldr	r3, [pc, #356]	; (8001328 <controls_irq+0x224>)
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d11d      	bne.n	8001208 <controls_irq+0x104>
  {
    if(sw_display_delay > SW_PRESS_DELAY)
 80011cc:	4b60      	ldr	r3, [pc, #384]	; (8001350 <controls_irq+0x24c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b32      	cmp	r3, #50	; 0x32
 80011d2:	d912      	bls.n	80011fa <controls_irq+0xf6>
    {
      if(sw_display_ftime == 0) sw_display_ftime = TIM_CNT;
 80011d4:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <controls_irq+0x250>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <controls_irq+0xe0>
 80011dc:	4b55      	ldr	r3, [pc, #340]	; (8001334 <controls_irq+0x230>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a5c      	ldr	r2, [pc, #368]	; (8001354 <controls_irq+0x250>)
 80011e2:	6013      	str	r3, [r2, #0]
      SW_DISPLAY_TIME = TIM_CNT-sw_display_ftime;
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <controls_irq+0x230>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <controls_irq+0x250>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4a5a      	ldr	r2, [pc, #360]	; (8001358 <controls_irq+0x254>)
 80011f0:	6013      	str	r3, [r2, #0]
      SW_DISPLAY = 1;
 80011f2:	4b5a      	ldr	r3, [pc, #360]	; (800135c <controls_irq+0x258>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e010      	b.n	800121c <controls_irq+0x118>
    } else sw_display_delay+=TIM_STEP;
 80011fa:	4b55      	ldr	r3, [pc, #340]	; (8001350 <controls_irq+0x24c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b53      	ldr	r3, [pc, #332]	; (8001350 <controls_irq+0x24c>)
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e009      	b.n	800121c <controls_irq+0x118>
  } else SW_DISPLAY = sw_display_delay = sw_display_ftime = 0;
 8001208:	4b52      	ldr	r3, [pc, #328]	; (8001354 <controls_irq+0x250>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	4b50      	ldr	r3, [pc, #320]	; (8001350 <controls_irq+0x24c>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	4b4e      	ldr	r3, [pc, #312]	; (8001350 <controls_irq+0x24c>)
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <controls_irq+0x258>)
 800121a:	701a      	strb	r2, [r3, #0]

  if(SW_DISPLAY)
 800121c:	4b4f      	ldr	r3, [pc, #316]	; (800135c <controls_irq+0x258>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 81ea 	beq.w	80015fc <controls_irq+0x4f8>
  {
    //UP
    if(ISPRESS(BUT_CTRL(UP)))
 8001228:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <controls_irq+0x25c>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d034      	beq.n	800129e <controls_irq+0x19a>
    {
      if(but_up_delay > BUT_PRESS_DELAY)
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <controls_irq+0x260>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b14      	cmp	r3, #20
 800123a:	d929      	bls.n	8001290 <controls_irq+0x18c>
      {
        if(but_up_ftime == 0) but_up_ftime = TIM_CNT;
 800123c:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <controls_irq+0x264>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <controls_irq+0x148>
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <controls_irq+0x230>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a47      	ldr	r2, [pc, #284]	; (8001368 <controls_irq+0x264>)
 800124a:	6013      	str	r3, [r2, #0]
        BUT_UP_TIME = TIM_CNT-but_up_ftime;
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <controls_irq+0x230>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <controls_irq+0x264>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	4a45      	ldr	r2, [pc, #276]	; (800136c <controls_irq+0x268>)
 8001258:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <controls_irq+0x26c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d111      	bne.n	8001288 <controls_irq+0x184>
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <controls_irq+0x270>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <controls_irq+0x184>
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <controls_irq+0x274>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <controls_irq+0x184>
 8001278:	4b40      	ldr	r3, [pc, #256]	; (800137c <controls_irq+0x278>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <controls_irq+0x184>
          BUT_UP = 1;
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <controls_irq+0x27c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
        BUT_UP_PRESS = 1;
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <controls_irq+0x274>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e010      	b.n	80012b2 <controls_irq+0x1ae>
      } else but_up_delay+=TIM_STEP;
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <controls_irq+0x260>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <controls_irq+0x260>)
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e009      	b.n	80012b2 <controls_irq+0x1ae>
    } else BUT_UP_PRESS = but_up_delay = but_up_ftime = 0;
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <controls_irq+0x264>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <controls_irq+0x260>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <controls_irq+0x260>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <controls_irq+0x274>)
 80012b0:	701a      	strb	r2, [r3, #0]

    //DOWN
    if(ISPRESS(BUT_CTRL(DOWN)))
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <controls_irq+0x25c>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06a      	beq.n	8001394 <controls_irq+0x290>
    {
      if(but_down_delay > BUT_PRESS_DELAY)
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <controls_irq+0x280>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b14      	cmp	r3, #20
 80012c4:	d929      	bls.n	800131a <controls_irq+0x216>
      {
        if(but_down_ftime == 0) but_down_ftime = TIM_CNT;
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <controls_irq+0x284>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <controls_irq+0x1d2>
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <controls_irq+0x230>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <controls_irq+0x284>)
 80012d4:	6013      	str	r3, [r2, #0]
        BUT_DOWN_TIME = TIM_CNT-but_down_ftime;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <controls_irq+0x230>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <controls_irq+0x284>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4a2a      	ldr	r2, [pc, #168]	; (800138c <controls_irq+0x288>)
 80012e2:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <controls_irq+0x26c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d111      	bne.n	8001312 <controls_irq+0x20e>
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <controls_irq+0x270>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10c      	bne.n	8001312 <controls_irq+0x20e>
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <controls_irq+0x274>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d107      	bne.n	8001312 <controls_irq+0x20e>
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <controls_irq+0x278>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <controls_irq+0x20e>
          BUT_DOWN = 1;
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <controls_irq+0x28c>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
        BUT_DOWN_PRESS = 1;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <controls_irq+0x278>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e046      	b.n	80013a8 <controls_irq+0x2a4>
      } else but_down_delay+=TIM_STEP;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <controls_irq+0x280>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <controls_irq+0x280>)
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e03f      	b.n	80013a8 <controls_irq+0x2a4>
 8001328:	40020800 	.word	0x40020800
 800132c:	200002ac 	.word	0x200002ac
 8001330:	200002a8 	.word	0x200002a8
 8001334:	20000258 	.word	0x20000258
 8001338:	200002a4 	.word	0x200002a4
 800133c:	200002a0 	.word	0x200002a0
 8001340:	200002b8 	.word	0x200002b8
 8001344:	200002b4 	.word	0x200002b4
 8001348:	200002b0 	.word	0x200002b0
 800134c:	200002ad 	.word	0x200002ad
 8001350:	200002c4 	.word	0x200002c4
 8001354:	200002c0 	.word	0x200002c0
 8001358:	200002bc 	.word	0x200002bc
 800135c:	200002b9 	.word	0x200002b9
 8001360:	40020400 	.word	0x40020400
 8001364:	20000284 	.word	0x20000284
 8001368:	20000290 	.word	0x20000290
 800136c:	2000026c 	.word	0x2000026c
 8001370:	2000025c 	.word	0x2000025c
 8001374:	2000025d 	.word	0x2000025d
 8001378:	2000025e 	.word	0x2000025e
 800137c:	2000025f 	.word	0x2000025f
 8001380:	2000027e 	.word	0x2000027e
 8001384:	20000285 	.word	0x20000285
 8001388:	20000294 	.word	0x20000294
 800138c:	20000270 	.word	0x20000270
 8001390:	2000027f 	.word	0x2000027f
    } else BUT_DOWN_PRESS = but_down_delay = but_down_ftime = 0;
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <controls_irq+0x488>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <controls_irq+0x48c>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <controls_irq+0x48c>)
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <controls_irq+0x490>)
 80013a6:	701a      	strb	r2, [r3, #0]

    //LEFT
    if(ISPRESS(BUT_CTRL(LEFT)))
 80013a8:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <controls_irq+0x494>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d034      	beq.n	800141e <controls_irq+0x31a>
    {
      if(but_left_delay > BUT_PRESS_DELAY)
 80013b4:	4b79      	ldr	r3, [pc, #484]	; (800159c <controls_irq+0x498>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b14      	cmp	r3, #20
 80013ba:	d929      	bls.n	8001410 <controls_irq+0x30c>
      {
        if(but_left_ftime == 0) but_left_ftime = TIM_CNT;
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <controls_irq+0x49c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d103      	bne.n	80013cc <controls_irq+0x2c8>
 80013c4:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <controls_irq+0x4a0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <controls_irq+0x49c>)
 80013ca:	6013      	str	r3, [r2, #0]
        BUT_LEFT_TIME = TIM_CNT-but_left_ftime;
 80013cc:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <controls_irq+0x4a0>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <controls_irq+0x49c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	4a74      	ldr	r2, [pc, #464]	; (80015a8 <controls_irq+0x4a4>)
 80013d8:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80013da:	4b74      	ldr	r3, [pc, #464]	; (80015ac <controls_irq+0x4a8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <controls_irq+0x304>
 80013e4:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <controls_irq+0x4ac>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <controls_irq+0x304>
 80013ee:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <controls_irq+0x4b0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d107      	bne.n	8001408 <controls_irq+0x304>
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <controls_irq+0x490>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <controls_irq+0x304>
          BUT_LEFT = 1;
 8001402:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <controls_irq+0x4b4>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
        BUT_LEFT_PRESS = 1;
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <controls_irq+0x4a8>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e010      	b.n	8001432 <controls_irq+0x32e>
      } else but_left_delay+=TIM_STEP;
 8001410:	4b62      	ldr	r3, [pc, #392]	; (800159c <controls_irq+0x498>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b60      	ldr	r3, [pc, #384]	; (800159c <controls_irq+0x498>)
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e009      	b.n	8001432 <controls_irq+0x32e>
    } else BUT_LEFT_PRESS = but_left_delay = but_left_ftime = 0;
 800141e:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <controls_irq+0x49c>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	4b5d      	ldr	r3, [pc, #372]	; (800159c <controls_irq+0x498>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	4b5c      	ldr	r3, [pc, #368]	; (800159c <controls_irq+0x498>)
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <controls_irq+0x4a8>)
 8001430:	701a      	strb	r2, [r3, #0]

    //RIGHT
    if(ISPRESS(BUT_CTRL(RIGHT)))
 8001432:	4b59      	ldr	r3, [pc, #356]	; (8001598 <controls_irq+0x494>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d034      	beq.n	80014a8 <controls_irq+0x3a4>
    {
      if(but_right_delay > BUT_PRESS_DELAY)
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <controls_irq+0x4b8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b14      	cmp	r3, #20
 8001444:	d929      	bls.n	800149a <controls_irq+0x396>
      {
        if(but_right_ftime == 0) but_right_ftime = TIM_CNT;
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <controls_irq+0x4bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d103      	bne.n	8001456 <controls_irq+0x352>
 800144e:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <controls_irq+0x4a0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <controls_irq+0x4bc>)
 8001454:	6013      	str	r3, [r2, #0]
        BUT_RIGHT_TIME = TIM_CNT-but_right_ftime;
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <controls_irq+0x4a0>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <controls_irq+0x4bc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <controls_irq+0x4c0>)
 8001462:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8001464:	4b51      	ldr	r3, [pc, #324]	; (80015ac <controls_irq+0x4a8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d111      	bne.n	8001492 <controls_irq+0x38e>
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <controls_irq+0x4ac>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10c      	bne.n	8001492 <controls_irq+0x38e>
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <controls_irq+0x4b0>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <controls_irq+0x38e>
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <controls_irq+0x490>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <controls_irq+0x38e>
          BUT_RIGHT = 1;
 800148c:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <controls_irq+0x4c4>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
        BUT_RIGHT_PRESS = 1;
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <controls_irq+0x4ac>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e010      	b.n	80014bc <controls_irq+0x3b8>
      } else but_right_delay+=TIM_STEP;
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <controls_irq+0x4b8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <controls_irq+0x4b8>)
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e009      	b.n	80014bc <controls_irq+0x3b8>
    } else BUT_RIGHT_PRESS = but_right_delay = but_right_ftime = 0;
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <controls_irq+0x4bc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <controls_irq+0x4b8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	4b41      	ldr	r3, [pc, #260]	; (80015bc <controls_irq+0x4b8>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <controls_irq+0x4ac>)
 80014ba:	701a      	strb	r2, [r3, #0]

    //CANCEL
    if(ISPRESS(BUT_CTRL(CANCEL)))
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <controls_irq+0x4c8>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <controls_irq+0x406>
    {
      if(but_cancel_delay > BUT_PRESS_DELAY)
 80014c8:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <controls_irq+0x4cc>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b14      	cmp	r3, #20
 80014ce:	d915      	bls.n	80014fc <controls_irq+0x3f8>
      {
        if(but_cancel_ftime == 0) but_cancel_ftime = TIM_CNT;
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <controls_irq+0x4d0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d103      	bne.n	80014e0 <controls_irq+0x3dc>
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <controls_irq+0x4a0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a3d      	ldr	r2, [pc, #244]	; (80015d4 <controls_irq+0x4d0>)
 80014de:	6013      	str	r3, [r2, #0]
        BUT_CANCEL_TIME = TIM_CNT-but_cancel_ftime;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <controls_irq+0x4a0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <controls_irq+0x4d0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4a3b      	ldr	r2, [pc, #236]	; (80015d8 <controls_irq+0x4d4>)
 80014ec:	6013      	str	r3, [r2, #0]
        BUT_CANCEL = 1;
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <controls_irq+0x4d8>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
        BUT_CANCEL_PRESS = 1;
 80014f4:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <controls_irq+0x4dc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e010      	b.n	800151e <controls_irq+0x41a>
      } else but_cancel_delay+=TIM_STEP;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <controls_irq+0x4cc>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <controls_irq+0x4cc>)
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e009      	b.n	800151e <controls_irq+0x41a>
    } else BUT_CANCEL_PRESS = but_cancel_delay = but_cancel_ftime = 0;
 800150a:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <controls_irq+0x4d0>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <controls_irq+0x4cc>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <controls_irq+0x4cc>)
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <controls_irq+0x4dc>)
 800151c:	701a      	strb	r2, [r3, #0]

    //ENTER
    if(ISPRESS(BUT_CTRL(ENTER)))
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <controls_irq+0x4e0>)
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d020      	beq.n	800156c <controls_irq+0x468>
    {
      if(but_enter_delay > BUT_PRESS_DELAY)
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <controls_irq+0x4e4>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b14      	cmp	r3, #20
 8001530:	d915      	bls.n	800155e <controls_irq+0x45a>
      {
        if(but_enter_ftime == 0) but_enter_ftime = TIM_CNT;
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <controls_irq+0x4e8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <controls_irq+0x43e>
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <controls_irq+0x4a0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <controls_irq+0x4e8>)
 8001540:	6013      	str	r3, [r2, #0]
        BUT_ENTER_TIME = TIM_CNT-but_enter_ftime;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <controls_irq+0x4a0>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <controls_irq+0x4e8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <controls_irq+0x4ec>)
 800154e:	6013      	str	r3, [r2, #0]
        BUT_ENTER = 1;
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <controls_irq+0x4f0>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
        BUT_ENTER_PRESS = 1;
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <controls_irq+0x4f4>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e010      	b.n	8001580 <controls_irq+0x47c>
      } else but_enter_delay+=TIM_STEP;
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <controls_irq+0x4e4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <controls_irq+0x4e4>)
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e009      	b.n	8001580 <controls_irq+0x47c>
    } else BUT_ENTER_PRESS = but_enter_delay = but_enter_ftime = 0;
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <controls_irq+0x4e8>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <controls_irq+0x4e4>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <controls_irq+0x4e4>)
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <controls_irq+0x4f4>)
 800157e:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 255;
 8001580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001584:	22ff      	movs	r2, #255	; 0xff
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c
 8001588:	e060      	b.n	800164c <controls_irq+0x548>
 800158a:	bf00      	nop
 800158c:	20000294 	.word	0x20000294
 8001590:	20000285 	.word	0x20000285
 8001594:	2000025f 	.word	0x2000025f
 8001598:	40020400 	.word	0x40020400
 800159c:	20000282 	.word	0x20000282
 80015a0:	20000288 	.word	0x20000288
 80015a4:	20000258 	.word	0x20000258
 80015a8:	20000264 	.word	0x20000264
 80015ac:	2000025c 	.word	0x2000025c
 80015b0:	2000025d 	.word	0x2000025d
 80015b4:	2000025e 	.word	0x2000025e
 80015b8:	2000027c 	.word	0x2000027c
 80015bc:	20000283 	.word	0x20000283
 80015c0:	2000028c 	.word	0x2000028c
 80015c4:	20000268 	.word	0x20000268
 80015c8:	2000027d 	.word	0x2000027d
 80015cc:	40020800 	.word	0x40020800
 80015d0:	20000287 	.word	0x20000287
 80015d4:	2000029c 	.word	0x2000029c
 80015d8:	20000278 	.word	0x20000278
 80015dc:	20000281 	.word	0x20000281
 80015e0:	20000261 	.word	0x20000261
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	20000286 	.word	0x20000286
 80015ec:	20000298 	.word	0x20000298
 80015f0:	20000274 	.word	0x20000274
 80015f4:	20000280 	.word	0x20000280
 80015f8:	20000260 	.word	0x20000260
  }
  else
  {
    BUT_CANCEL = 0;
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <controls_irq+0x5bc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
    BUT_ENTER = 0;
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <controls_irq+0x5c0>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
    BUT_LEFT = 0;
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <controls_irq+0x5c4>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT = 0;
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <controls_irq+0x5c8>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
    BUT_UP = 0;
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <controls_irq+0x5cc>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    BUT_DOWN = 0;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <controls_irq+0x5d0>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    BUT_CANCEL_PRESS = 0;
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <controls_irq+0x5d4>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    BUT_ENTER_PRESS = 0;
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <controls_irq+0x5d8>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    BUT_LEFT_PRESS = 0;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <controls_irq+0x5dc>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT_PRESS = 0;
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <controls_irq+0x5e0>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    BUT_UP_PRESS = 0;
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <controls_irq+0x5e4>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    BUT_DOWN_PRESS = 0;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <controls_irq+0x5e8>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 0;
 8001644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001648:	2200      	movs	r2, #0
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, !BUT_LEFT_PRESS);
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <controls_irq+0x5dc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf0c      	ite	eq
 8001656:	2301      	moveq	r3, #1
 8001658:	2300      	movne	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001662:	4823      	ldr	r0, [pc, #140]	; (80016f0 <controls_irq+0x5ec>)
 8001664:	f002 fe44 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, !BUT_RIGHT_PRESS);
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <controls_irq+0x5e0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf0c      	ite	eq
 8001672:	2301      	moveq	r3, #1
 8001674:	2300      	movne	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <controls_irq+0x5ec>)
 8001680:	f002 fe36 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, !BUT_UP_PRESS);
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <controls_irq+0x5e4>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <controls_irq+0x5ec>)
 800169c:	f002 fe28 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, !BUT_DOWN_PRESS);
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <controls_irq+0x5e8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <controls_irq+0x5ec>)
 80016b8:	f002 fe1a 	bl	80042f0 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000281 	.word	0x20000281
 80016c4:	20000280 	.word	0x20000280
 80016c8:	2000027c 	.word	0x2000027c
 80016cc:	2000027d 	.word	0x2000027d
 80016d0:	2000027e 	.word	0x2000027e
 80016d4:	2000027f 	.word	0x2000027f
 80016d8:	20000261 	.word	0x20000261
 80016dc:	20000260 	.word	0x20000260
 80016e0:	2000025c 	.word	0x2000025c
 80016e4:	2000025d 	.word	0x2000025d
 80016e8:	2000025e 	.word	0x2000025e
 80016ec:	2000025f 	.word	0x2000025f
 80016f0:	40020400 	.word	0x40020400

080016f4 <CRC16_RegisterHardware>:
  .cb_size = 0
};


void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(mutexCrc == NULL)
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <CRC16_RegisterHardware+0x2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <CRC16_RegisterHardware+0x1c>
    mutexCrc = osMutexNew(&mutexAttrs);
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <CRC16_RegisterHardware+0x30>)
 8001706:	f004 fb09 	bl	8005d1c <osMutexNew>
 800170a:	4602      	mov	r2, r0
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <CRC16_RegisterHardware+0x2c>)
 800170e:	601a      	str	r2, [r3, #0]
  handle_crc = hcrc;
 8001710:	4a05      	ldr	r2, [pc, #20]	; (8001728 <CRC16_RegisterHardware+0x34>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002cc 	.word	0x200002cc
 8001724:	0800ce9c 	.word	0x0800ce9c
 8001728:	200002c8 	.word	0x200002c8

0800172c <CRC8_Generate>:
  }
  return result;
}

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <CRC8_Generate+0x74>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <CRC8_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 8001742:	4818      	ldr	r0, [pc, #96]	; (80017a4 <CRC8_Generate+0x78>)
 8001744:	f004 faea 	bl	8005d1c <osMutexNew>
 8001748:	4602      	mov	r2, r0
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <CRC8_Generate+0x74>)
 800174c:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <CRC8_Generate+0x7c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d017      	beq.n	8001786 <CRC8_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <CRC8_Generate+0x74>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f004 fb1f 	bl	8005da0 <osMutexAcquire>
 8001762:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <CRC8_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <CRC8_Generate+0x7c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fb36 	bl	8003de4 <HAL_CRC_Calculate>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <CRC8_Generate+0x74>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fb3d 	bl	8005e00 <osMutexRelease>
    }
  }
  return (result & 0xFF) ^ (result >> 8);
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	b25a      	sxtb	r2, r3
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b29b      	uxth	r3, r3
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4053      	eors	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2db      	uxtb	r3, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200002cc 	.word	0x200002cc
 80017a4:	0800ce9c 	.word	0x0800ce9c
 80017a8:	200002c8 	.word	0x200002c8

080017ac <DelayInit>:

volatile uint32_t DelStart[COUNTERS];
static volatile uint32_t prescaller = 0;

void DelayInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <DelayInit+0x8c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a20      	ldr	r2, [pc, #128]	; (8001838 <DelayInit+0x8c>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <DelayInit+0x8c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <DelayInit+0x90>)
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <DelayInit+0x94>)
 80017ce:	601a      	str	r2, [r3, #0]
    prescaller = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000);
 80017d0:	f003 f854 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 80017d4:	4603      	mov	r3, r0
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <DelayInit+0x98>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0c9b      	lsrs	r3, r3, #18
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <DelayInit+0x9c>)
 80017e2:	6013      	str	r3, [r2, #0]
    htim_delay.Init.Prescaler = 0;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <DelayInit+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <DelayInit+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <DelayInit+0x90>)
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <DelayInit+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 80017fe:	480f      	ldr	r0, [pc, #60]	; (800183c <DelayInit+0x90>)
 8001800:	f003 fcb8 	bl	8005174 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	480a      	ldr	r0, [pc, #40]	; (800183c <DelayInit+0x90>)
 8001812:	f003 fdcf 	bl	80053b4 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <DelayInit+0x90>)
 8001824:	f003 fe8e 	bl	8005544 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <DelayInit+0x90>)
 800182a:	f003 fb59 	bl	8004ee0 <HAL_TIM_Base_Start>

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	200002d0 	.word	0x200002d0
 8001840:	40000c00 	.word	0x40000c00
 8001844:	431bde83 	.word	0x431bde83
 8001848:	20000310 	.word	0x20000310

0800184c <DelayNs>:
 
inline void DelayNs(uint32_t val)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = Delay_Tick * 1000;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <DelayNs+0x3c>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	60fb      	str	r3, [r7, #12]
  while(DelayDiff(Delay_Tick * 1000, tickstart) < val) {}
 8001862:	bf00      	nop
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <DelayNs+0x3c>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f832 	bl	80018dc <DelayDiff>
 8001878:	4602      	mov	r2, r0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4293      	cmp	r3, r2
 800187e:	d8f1      	bhi.n	8001864 <DelayNs+0x18>
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40000c00 	.word	0x40000c00

0800188c <DelayUs>:

inline void DelayUs(uint32_t val)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = Delay_Tick;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <DelayUs+0x2c>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	60fb      	str	r3, [r7, #12]
  while(DelayDiff(Delay_Tick, tickstart) < val) {}
 800189a:	bf00      	nop
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <DelayUs+0x2c>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f81a 	bl	80018dc <DelayDiff>
 80018a8:	4602      	mov	r2, r0
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d8f5      	bhi.n	800189c <DelayUs+0x10>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40000c00 	.word	0x40000c00

080018bc <DelayMs>:
 
inline void DelayMs(uint32_t val)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  DelayUs(val * 1000);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ffdc 	bl	800188c <DelayUs>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <DelayDiff>:

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	if(a >= b)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d307      	bcc.n	80018fe <DelayDiff+0x22>
		return (a - b) / prescaller;
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	1ad2      	subs	r2, r2, r3
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <DelayDiff+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fc:	e007      	b.n	800190e <DelayDiff+0x32>
	return ((0xFFFFFFFF - b) + a) / prescaller;
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	1e5a      	subs	r2, r3, #1
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <DelayDiff+0x40>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000310 	.word	0x20000310

08001920 <lcd_data>:
#include "cmsis_os.h"

uint8_t lcd_buffer[8][128];

static inline void lcd_data(uint8_t value)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	43db      	mvns	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	041b      	lsls	r3, r3, #16
 8001934:	4313      	orrs	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2102      	movs	r1, #2
 800193c:	4814      	ldr	r0, [pc, #80]	; (8001990 <lcd_data+0x70>)
 800193e:	f002 fcd7 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2104      	movs	r1, #4
 8001946:	4813      	ldr	r0, [pc, #76]	; (8001994 <lcd_data+0x74>)
 8001948:	f002 fcd2 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2102      	movs	r1, #2
 8001950:	4810      	ldr	r0, [pc, #64]	; (8001994 <lcd_data+0x74>)
 8001952:	f002 fccd 	bl	80042f0 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <lcd_data+0x78>)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6193      	str	r3, [r2, #24]
  DelayNs(1300);
 800195c:	f240 5014 	movw	r0, #1300	; 0x514
 8001960:	f7ff ff74 	bl	800184c <DelayNs>
  taskENTER_CRITICAL();
 8001964:	f005 ff26 	bl	80077b4 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	2102      	movs	r1, #2
 800196c:	4808      	ldr	r0, [pc, #32]	; (8001990 <lcd_data+0x70>)
 800196e:	f002 fcbf 	bl	80042f0 <HAL_GPIO_WritePin>
  DelayNs(1300);
 8001972:	f240 5014 	movw	r0, #1300	; 0x514
 8001976:	f7ff ff69 	bl	800184c <DelayNs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2102      	movs	r1, #2
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <lcd_data+0x70>)
 8001980:	f002 fcb6 	bl	80042f0 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8001984:	f005 ff3c 	bl	8007800 <vPortExitCritical>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020000 	.word	0x40020000

0800199c <lcd_command>:

static inline void lcd_command(uint8_t value)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 80019a6:	79fa      	ldrb	r2, [r7, #7]
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	041b      	lsls	r3, r3, #16
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2102      	movs	r1, #2
 80019b8:	4814      	ldr	r0, [pc, #80]	; (8001a0c <lcd_command+0x70>)
 80019ba:	f002 fc99 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2104      	movs	r1, #4
 80019c2:	4813      	ldr	r0, [pc, #76]	; (8001a10 <lcd_command+0x74>)
 80019c4:	f002 fc94 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2102      	movs	r1, #2
 80019cc:	4810      	ldr	r0, [pc, #64]	; (8001a10 <lcd_command+0x74>)
 80019ce:	f002 fc8f 	bl	80042f0 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <lcd_command+0x78>)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6193      	str	r3, [r2, #24]
  DelayNs(1300);
 80019d8:	f240 5014 	movw	r0, #1300	; 0x514
 80019dc:	f7ff ff36 	bl	800184c <DelayNs>
  taskENTER_CRITICAL();
 80019e0:	f005 fee8 	bl	80077b4 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2102      	movs	r1, #2
 80019e8:	4808      	ldr	r0, [pc, #32]	; (8001a0c <lcd_command+0x70>)
 80019ea:	f002 fc81 	bl	80042f0 <HAL_GPIO_WritePin>
  DelayNs(1300);
 80019ee:	f240 5014 	movw	r0, #1300	; 0x514
 80019f2:	f7ff ff2b 	bl	800184c <DelayNs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2102      	movs	r1, #2
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <lcd_command+0x70>)
 80019fc:	f002 fc78 	bl	80042f0 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8001a00:	f005 fefe 	bl	8007800 <vPortExitCritical>
}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020000 	.word	0x40020000

08001a18 <lcd_update>:

inline void lcd_update(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0

  for(int j = 0; j < 8; j++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e050      	b.n	8001ac6 <lcd_update+0xae>
  {
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2110      	movs	r1, #16
 8001a28:	482a      	ldr	r0, [pc, #168]	; (8001ad4 <lcd_update+0xbc>)
 8001a2a:	f002 fc61 	bl	80042f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2101      	movs	r1, #1
 8001a32:	4829      	ldr	r0, [pc, #164]	; (8001ad8 <lcd_update+0xc0>)
 8001a34:	f002 fc5c 	bl	80042f0 <HAL_GPIO_WritePin>

    lcd_command(0x40);
 8001a38:	2040      	movs	r0, #64	; 0x40
 8001a3a:	f7ff ffaf 	bl	800199c <lcd_command>
    lcd_command(0xB8 + j);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	3b48      	subs	r3, #72	; 0x48
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffa8 	bl	800199c <lcd_command>

    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2110      	movs	r1, #16
 8001a50:	4820      	ldr	r0, [pc, #128]	; (8001ad4 <lcd_update+0xbc>)
 8001a52:	f002 fc4d 	bl	80042f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2101      	movs	r1, #1
 8001a5a:	481f      	ldr	r0, [pc, #124]	; (8001ad8 <lcd_update+0xc0>)
 8001a5c:	f002 fc48 	bl	80042f0 <HAL_GPIO_WritePin>
    for(int i = 0; i < 64; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	e00c      	b.n	8001a80 <lcd_update+0x68>
    {
      lcd_data(lcd_buffer[j][i]);
 8001a66:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <lcd_update+0xc4>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	01db      	lsls	r3, r3, #7
 8001a6c:	441a      	add	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff53 	bl	8001920 <lcd_data>
    for(int i = 0; i < 64; i++)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b3f      	cmp	r3, #63	; 0x3f
 8001a84:	ddef      	ble.n	8001a66 <lcd_update+0x4e>
    }
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4812      	ldr	r0, [pc, #72]	; (8001ad4 <lcd_update+0xbc>)
 8001a8c:	f002 fc30 	bl	80042f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2101      	movs	r1, #1
 8001a94:	4810      	ldr	r0, [pc, #64]	; (8001ad8 <lcd_update+0xc0>)
 8001a96:	f002 fc2b 	bl	80042f0 <HAL_GPIO_WritePin>
    for(int i = 64; i < 128; i++)
 8001a9a:	2340      	movs	r3, #64	; 0x40
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	e00c      	b.n	8001aba <lcd_update+0xa2>
    {
      lcd_data(lcd_buffer[j][i]);
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <lcd_update+0xc4>)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	441a      	add	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff36 	bl	8001920 <lcd_data>
    for(int i = 64; i < 128; i++)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b7f      	cmp	r3, #127	; 0x7f
 8001abe:	ddef      	ble.n	8001aa0 <lcd_update+0x88>
  for(int j = 0; j < 8; j++)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b07      	cmp	r3, #7
 8001aca:	ddab      	ble.n	8001a24 <lcd_update+0xc>
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	200055e8 	.word	0x200055e8

08001ae0 <lcd_reset>:

inline void lcd_reset(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	480f      	ldr	r0, [pc, #60]	; (8001b28 <lcd_reset+0x48>)
 8001aea:	f002 fc01 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2101      	movs	r1, #1
 8001af2:	480e      	ldr	r0, [pc, #56]	; (8001b2c <lcd_reset+0x4c>)
 8001af4:	f002 fbfc 	bl	80042f0 <HAL_GPIO_WritePin>
  lcd_command(0x3F); //Display ON
 8001af8:	203f      	movs	r0, #63	; 0x3f
 8001afa:	f7ff ff4f 	bl	800199c <lcd_command>
  lcd_command(0x40); //Set Y address = 0
 8001afe:	2040      	movs	r0, #64	; 0x40
 8001b00:	f7ff ff4c 	bl	800199c <lcd_command>
  lcd_command(0xB8); //Set X page = 0
 8001b04:	20b8      	movs	r0, #184	; 0xb8
 8001b06:	f7ff ff49 	bl	800199c <lcd_command>
  lcd_command(0xC0); //Set Z scrolling = 0
 8001b0a:	20c0      	movs	r0, #192	; 0xc0
 8001b0c:	f7ff ff46 	bl	800199c <lcd_command>
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2110      	movs	r1, #16
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <lcd_reset+0x48>)
 8001b16:	f002 fbeb 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <lcd_reset+0x4c>)
 8001b20:	f002 fbe6 	bl	80042f0 <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020400 	.word	0x40020400

08001b30 <lcd_clear>:

inline void lcd_clear(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
  for(int i = 0; i < 8; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	e013      	b.n	8001b64 <lcd_clear+0x34>
    for(int j = 0; j < 128; j++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	e00a      	b.n	8001b58 <lcd_clear+0x28>
      lcd_buffer[i][j] = 0;
 8001b42:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <lcd_clear+0x48>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	01db      	lsls	r3, r3, #7
 8001b48:	441a      	add	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 128; j++)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b5c:	ddf1      	ble.n	8001b42 <lcd_clear+0x12>
  for(int i = 0; i < 8; i++)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3301      	adds	r3, #1
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b07      	cmp	r3, #7
 8001b68:	dde8      	ble.n	8001b3c <lcd_clear+0xc>
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200055e8 	.word	0x200055e8

08001b7c <lcd_drawpoint>:

inline void lcd_drawpoint(uint8_t x, uint8_t y)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db1f      	blt.n	8001bd4 <lcd_drawpoint+0x58>
 8001b94:	79bb      	ldrb	r3, [r7, #6]
 8001b96:	2b3f      	cmp	r3, #63	; 0x3f
 8001b98:	d81c      	bhi.n	8001bd4 <lcd_drawpoint+0x58>
    lcd_buffer[y / 8][x] |= 1 << (y % 8);
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	b2d8      	uxtb	r0, r3
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <lcd_drawpoint+0x64>)
 8001ba6:	01d2      	lsls	r2, r2, #7
 8001ba8:	440a      	add	r2, r1
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b25a      	sxtb	r2, r3
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b259      	sxtb	r1, r3
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	b2c8      	uxtb	r0, r1
 8001bc8:	4905      	ldr	r1, [pc, #20]	; (8001be0 <lcd_drawpoint+0x64>)
 8001bca:	01d2      	lsls	r2, r2, #7
 8001bcc:	440a      	add	r2, r1
 8001bce:	4413      	add	r3, r2
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	701a      	strb	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	200055e8 	.word	0x200055e8

08001be4 <lcd_clearpoint>:

inline void lcd_clearpoint(uint8_t x, uint8_t y)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	460a      	mov	r2, r1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db21      	blt.n	8001c40 <lcd_clearpoint+0x5c>
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	2b3f      	cmp	r3, #63	; 0x3f
 8001c00:	d81e      	bhi.n	8001c40 <lcd_clearpoint+0x5c>
    lcd_buffer[y / 8][x] &= ~(1 << (y % 8));
 8001c02:	79bb      	ldrb	r3, [r7, #6]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	b2d8      	uxtb	r0, r3
 8001c08:	4602      	mov	r2, r0
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	490f      	ldr	r1, [pc, #60]	; (8001c4c <lcd_clearpoint+0x68>)
 8001c0e:	01d2      	lsls	r2, r2, #7
 8001c10:	440a      	add	r2, r1
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b25a      	sxtb	r2, r3
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	b259      	sxtb	r1, r3
 8001c2e:	4602      	mov	r2, r0
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	b2c8      	uxtb	r0, r1
 8001c34:	4905      	ldr	r1, [pc, #20]	; (8001c4c <lcd_clearpoint+0x68>)
 8001c36:	01d2      	lsls	r2, r2, #7
 8001c38:	440a      	add	r2, r1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	701a      	strb	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	200055e8 	.word	0x200055e8

08001c50 <lcd_rect_solid>:


void lcd_rect_solid(int x, int y, int w, int h, int c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  if(c)
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d026      	beq.n	8001cb2 <lcd_rect_solid+0x62>
  {
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6c:	e01c      	b.n	8001ca8 <lcd_rect_solid+0x58>
    {
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	e00d      	b.n	8001c94 <lcd_rect_solid+0x44>
      {
          lcd_drawpoint(j,i);
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff7a 	bl	8001b7c <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	623b      	str	r3, [r7, #32]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3301      	adds	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbed      	blt.n	8001c78 <lcd_rect_solid+0x28>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbde      	blt.n	8001c6e <lcd_rect_solid+0x1e>
      {
          lcd_clearpoint(j,i);
      }
    }
  }
}
 8001cb0:	e025      	b.n	8001cfe <lcd_rect_solid+0xae>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	e01c      	b.n	8001cf6 <lcd_rect_solid+0xa6>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	e00d      	b.n	8001ce2 <lcd_rect_solid+0x92>
          lcd_clearpoint(j,i);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff87 	bl	8001be4 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbed      	blt.n	8001cc6 <lcd_rect_solid+0x76>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbde      	blt.n	8001cbc <lcd_rect_solid+0x6c>
}
 8001cfe:	bf00      	nop
 8001d00:	3730      	adds	r7, #48	; 0x30
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <lcd_rect>:


void lcd_rect(int x, int y, int w, int h, int c)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b08c      	sub	sp, #48	; 0x30
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
  if(w > 0 && h > 0)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f340 809a 	ble.w	8001e50 <lcd_rect+0x14a>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f340 8096 	ble.w	8001e50 <lcd_rect+0x14a>
  {
    if(c)
 8001d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d049      	beq.n	8001dbe <lcd_rect+0xb8>
    {
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d32:	e01b      	b.n	8001d6c <lcd_rect+0x66>
      {
        lcd_drawpoint(x,i);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff1c 	bl	8001b7c <lcd_drawpoint>
        lcd_drawpoint(x+w-1,i);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff0e 	bl	8001b7c <lcd_drawpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d62:	3301      	adds	r3, #1
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d68:	3301      	adds	r3, #1
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbdf      	blt.n	8001d34 <lcd_rect+0x2e>
      }
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	e01a      	b.n	8001db4 <lcd_rect+0xae>
      {
        lcd_drawpoint(j,y);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fef7 	bl	8001b7c <lcd_drawpoint>
        lcd_drawpoint(j,y+h-1);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	b2d8      	uxtb	r0, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7ff feea 	bl	8001b7c <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	3301      	adds	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	6a3a      	ldr	r2, [r7, #32]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbe0      	blt.n	8001d7e <lcd_rect+0x78>
        lcd_clearpoint(j,y);
        lcd_clearpoint(j,y+h-1);
      }
    }
  }
}
 8001dbc:	e048      	b.n	8001e50 <lcd_rect+0x14a>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e01b      	b.n	8001e00 <lcd_rect+0xfa>
        lcd_clearpoint(x,i);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff06 	bl	8001be4 <lcd_clearpoint>
        lcd_clearpoint(x+w-1,i);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fef8 	bl	8001be4 <lcd_clearpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	3301      	adds	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbdf      	blt.n	8001dc8 <lcd_rect+0xc2>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	e01a      	b.n	8001e48 <lcd_rect+0x142>
        lcd_clearpoint(j,y);
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fee1 	bl	8001be4 <lcd_clearpoint>
        lcd_clearpoint(j,y+h-1);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	b2d8      	uxtb	r0, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	f7ff fed4 	bl	8001be4 <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbe0      	blt.n	8001e12 <lcd_rect+0x10c>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	; 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <lcd_init>:
  DelayMs(3000);
  TIM2->CCR3 = 0;
}

void lcd_init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2104      	movs	r1, #4
 8001e60:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <lcd_init+0x48>)
 8001e62:	f002 fa45 	bl	80042f0 <HAL_GPIO_WritePin>
  DelayUs(500);
 8001e66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e6a:	f7ff fd0f 	bl	800188c <DelayUs>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2104      	movs	r1, #4
 8001e72:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <lcd_init+0x48>)
 8001e74:	f002 fa3c 	bl	80042f0 <HAL_GPIO_WritePin>
  DelayMs(2);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f7ff fd1f 	bl	80018bc <DelayMs>

  lcd_reset();
 8001e7e:	f7ff fe2f 	bl	8001ae0 <lcd_reset>
  lcd_clear();
 8001e82:	f7ff fe55 	bl	8001b30 <lcd_clear>
  lcd_update();
 8001e86:	f7ff fdc7 	bl	8001a18 <lcd_update>

  font_init(lcd_rect_solid, 128, 64);
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <lcd_init+0x4c>)
 8001e90:	f005 fedc 	bl	8007c4c <font_init>
  font_setCR(0);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f005 feb7 	bl	8007c08 <font_setCR>


  //font_setFont(&rre_ubuntu_32); showFont("[rre_ubuntu_32]");

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	08001c51 	.word	0x08001c51

08001ea8 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM7_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    controls_irq();
 8001eb8:	f7ff f924 	bl	8001104 <controls_irq>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20005d60 	.word	0x20005d60

08001ec8 <showlogo>:

static void showlogo(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  font_setFont(&rre_ubuntu_32);
 8001ecc:	480e      	ldr	r0, [pc, #56]	; (8001f08 <showlogo+0x40>)
 8001ece:	f005 ff05 	bl	8007cdc <font_setFont>
  font_printStr(30,4,"ACIS");
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <showlogo+0x44>)
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	201e      	movs	r0, #30
 8001ed8:	f007 f942 	bl	8009160 <font_printStr>
  font_setFont(&rre_arialb_16);
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <showlogo+0x48>)
 8001ede:	f005 fefd 	bl	8007cdc <font_setFont>
  font_printStr(0,32,"Advanced Car");
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <showlogo+0x4c>)
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f007 f93a 	bl	8009160 <font_printStr>
  font_printStr(13,46,"Ignition System");
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <showlogo+0x50>)
 8001eee:	212e      	movs	r1, #46	; 0x2e
 8001ef0:	200d      	movs	r0, #13
 8001ef2:	f007 f935 	bl	8009160 <font_printStr>
  lcd_update();
 8001ef6:	f7ff fd8f 	bl	8001a18 <lcd_update>
  DelayMs(1000);
 8001efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efe:	f7ff fcdd 	bl	80018bc <DelayMs>
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000005c 	.word	0x2000005c
 8001f0c:	0800ce50 	.word	0x0800ce50
 8001f10:	2000004c 	.word	0x2000004c
 8001f14:	0800ce58 	.word	0x0800ce58
 8001f18:	0800ce68 	.word	0x0800ce68

08001f1c <main>:

int main(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  HAL_Init();
 8001f20:	f001 fc6e 	bl	8003800 <HAL_Init>

  SystemClock_Config();
 8001f24:	f000 f856 	bl	8001fd4 <SystemClock_Config>

  MX_GPIO_Init();
 8001f28:	f000 faf0 	bl	800250c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f2c:	f000 faac 	bl	8002488 <MX_DMA_Init>
  MX_TIM2_Init();
 8001f30:	f000 f962 	bl	80021f8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001f34:	f000 f90c 	bl	8002150 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001f38:	f000 f9ee 	bl	8002318 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001f3c:	f000 fa44 	bl	80023c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f40:	f000 fa72 	bl	8002428 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001f44:	f000 f8d8 	bl	80020f8 <MX_CRC_Init>
  MX_TIM7_Init();
 8001f48:	f000 f9b0 	bl	80022ac <MX_TIM7_Init>
  initFIFOs();
 8001f4c:	f001 f8ae 	bl	80030ac <initFIFOs>

  CRC16_RegisterHardware(&hcrc);
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <main+0x90>)
 8001f52:	f7ff fbcf 	bl	80016f4 <CRC16_RegisterHardware>

  DelayInit();
 8001f56:	f7ff fc29 	bl	80017ac <DelayInit>

  HAL_TIM_Base_Start_IT(&htim7);
 8001f5a:	4815      	ldr	r0, [pc, #84]	; (8001fb0 <main+0x94>)
 8001f5c:	f002 ffd8 	bl	8004f10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001f60:	2108      	movs	r1, #8
 8001f62:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <main+0x98>)
 8001f64:	f003 faec 	bl	8005540 <HAL_TIM_PWM_Start>
  lcd_init();
 8001f68:	f7ff ff76 	bl	8001e58 <lcd_init>

  showlogo();
 8001f6c:	f7ff ffac 	bl	8001ec8 <showlogo>

  osKernelInitialize();
 8001f70:	f003 fe28 	bl	8005bc4 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(acis_main_task, NULL, &defaultTask_attributes);
 8001f74:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <main+0x9c>)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4810      	ldr	r0, [pc, #64]	; (8001fbc <main+0xa0>)
 8001f7a:	f003 fe5d 	bl	8005c38 <osThreadNew>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <main+0xa4>)
 8001f82:	601a      	str	r2, [r3, #0]
  getterPcTaskHandle = osThreadNew(xGetter, (void*)etrPC, &getterTask_attributes);
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <main+0xa8>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	480f      	ldr	r0, [pc, #60]	; (8001fc8 <main+0xac>)
 8001f8a:	f003 fe55 	bl	8005c38 <osThreadNew>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <main+0xb0>)
 8001f92:	601a      	str	r2, [r3, #0]
  getterAcisTaskHandle = osThreadNew(xGetter, (void*)etrACIS, &getterTask_attributes);
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <main+0xa8>)
 8001f96:	2102      	movs	r1, #2
 8001f98:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <main+0xac>)
 8001f9a:	f003 fe4d 	bl	8005c38 <osThreadNew>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <main+0xb4>)
 8001fa2:	601a      	str	r2, [r3, #0]

  osKernelStart();
 8001fa4:	f003 fe28 	bl	8005bf8 <osKernelStart>

  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <main+0x8c>
 8001faa:	bf00      	nop
 8001fac:	20005b0c 	.word	0x20005b0c
 8001fb0:	20005d60 	.word	0x20005d60
 8001fb4:	20005d20 	.word	0x20005d20
 8001fb8:	0800ceac 	.word	0x0800ceac
 8001fbc:	080010bd 	.word	0x080010bd
 8001fc0:	200059e8 	.word	0x200059e8
 8001fc4:	0800ced0 	.word	0x0800ced0
 8001fc8:	080032dd 	.word	0x080032dd
 8001fcc:	20005d18 	.word	0x20005d18
 8001fd0:	20005d1c 	.word	0x20005d1c

08001fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0b4      	sub	sp, #208	; 0xd0
 8001fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fde:	2230      	movs	r2, #48	; 0x30
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 f97b 	bl	80092de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f007 f96c 	bl	80092de <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <SystemClock_Config+0x11c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a39      	ldr	r2, [pc, #228]	; (80020f0 <SystemClock_Config+0x11c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <SystemClock_Config+0x11c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <SystemClock_Config+0x120>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <SystemClock_Config+0x120>)
 8002024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <SystemClock_Config+0x120>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800203c:	2301      	movs	r3, #1
 800203e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002042:	2310      	movs	r3, #16
 8002044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002048:	2302      	movs	r3, #2
 800204a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002054:	2308      	movs	r3, #8
 8002056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800205a:	23d8      	movs	r3, #216	; 0xd8
 800205c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002060:	2302      	movs	r3, #2
 8002062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002070:	4618      	mov	r0, r3
 8002072:	f002 f97b 	bl	800436c <HAL_RCC_OscConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800207c:	f000 fb52 	bl	8002724 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002080:	f002 f93c 	bl	80042fc <HAL_PWREx_EnableOverDrive>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800208a:	f000 fb4b 	bl	8002724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208e:	230f      	movs	r3, #15
 8002090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002094:	2302      	movs	r3, #2
 8002096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80020b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020b4:	2107      	movs	r1, #7
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 fb42 	bl	8004740 <HAL_RCC_ClockConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80020c2:	f000 fb2f 	bl	8002724 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 80020c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020cc:	2300      	movs	r3, #0
 80020ce:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fbef 	bl	80048bc <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80020e4:	f000 fb1e 	bl	8002724 <Error_Handler>
  }
}
 80020e8:	bf00      	nop
 80020ea:	37d0      	adds	r7, #208	; 0xd0
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40007000 	.word	0x40007000

080020f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <MX_CRC_Init+0x50>)
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <MX_CRC_Init+0x54>)
 8002100:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_CRC_Init+0x50>)
 8002104:	2201      	movs	r2, #1
 8002106:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_CRC_Init+0x50>)
 800210a:	2201      	movs	r2, #1
 800210c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_CRC_Init+0x50>)
 8002110:	f24a 0201 	movw	r2, #40961	; 0xa001
 8002114:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <MX_CRC_Init+0x50>)
 8002118:	2208      	movs	r2, #8
 800211a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <MX_CRC_Init+0x50>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <MX_CRC_Init+0x50>)
 8002124:	2220      	movs	r2, #32
 8002126:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <MX_CRC_Init+0x50>)
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_CRC_Init+0x50>)
 8002130:	2201      	movs	r2, #1
 8002132:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <MX_CRC_Init+0x50>)
 8002136:	f001 fe1b 	bl	8003d70 <HAL_CRC_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002140:	f000 faf0 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20005b0c 	.word	0x20005b0c
 800214c:	40023000 	.word	0x40023000

08002150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002156:	463b      	mov	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <MX_ADC1_Init+0x98>)
 8002164:	4a21      	ldr	r2, [pc, #132]	; (80021ec <MX_ADC1_Init+0x9c>)
 8002166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <MX_ADC1_Init+0x98>)
 800216a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800216e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <MX_ADC1_Init+0x98>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_ADC1_Init+0x98>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_ADC1_Init+0x98>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_ADC1_Init+0x98>)
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_ADC1_Init+0x98>)
 800218c:	2200      	movs	r2, #0
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <MX_ADC1_Init+0x98>)
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <MX_ADC1_Init+0xa0>)
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_ADC1_Init+0x98>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <MX_ADC1_Init+0x98>)
 800219e:	2201      	movs	r2, #1
 80021a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_ADC1_Init+0x98>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_ADC1_Init+0x98>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021b0:	480d      	ldr	r0, [pc, #52]	; (80021e8 <MX_ADC1_Init+0x98>)
 80021b2:	f001 fb43 	bl	800383c <HAL_ADC_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80021bc:	f000 fab2 	bl	8002724 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_ADC1_Init+0xa4>)
 80021c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021cc:	463b      	mov	r3, r7
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_ADC1_Init+0x98>)
 80021d2:	f001 fc71 	bl	8003ab8 <HAL_ADC_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80021dc:	f000 faa2 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20005bf0 	.word	0x20005bf0
 80021ec:	40012000 	.word	0x40012000
 80021f0:	0f000001 	.word	0x0f000001
 80021f4:	10000012 	.word	0x10000012

080021f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	615a      	str	r2, [r3, #20]
 800221a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <MX_TIM2_Init+0xb0>)
 800221e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 422;
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <MX_TIM2_Init+0xb0>)
 8002226:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 800222a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <MX_TIM2_Init+0xb0>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <MX_TIM2_Init+0xb0>)
 8002234:	22ff      	movs	r2, #255	; 0xff
 8002236:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <MX_TIM2_Init+0xb0>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <MX_TIM2_Init+0xb0>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002244:	4818      	ldr	r0, [pc, #96]	; (80022a8 <MX_TIM2_Init+0xb0>)
 8002246:	f002 ffaf 	bl	80051a8 <HAL_TIM_PWM_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002250:	f000 fa68 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	4811      	ldr	r0, [pc, #68]	; (80022a8 <MX_TIM2_Init+0xb0>)
 8002264:	f003 f96e 	bl	8005544 <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800226e:	f000 fa59 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002272:	2360      	movs	r3, #96	; 0x60
 8002274:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002282:	463b      	mov	r3, r7
 8002284:	2208      	movs	r2, #8
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <MX_TIM2_Init+0xb0>)
 800228a:	f003 f803 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002294:	f000 fa46 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <MX_TIM2_Init+0xb0>)
 800229a:	f000 faed 	bl	8002878 <HAL_TIM_MspPostInit>

}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20005d20 	.word	0x20005d20

080022ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <MX_TIM7_Init+0x64>)
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <MX_TIM7_Init+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <MX_TIM7_Init+0x64>)
 80022c4:	226b      	movs	r2, #107	; 0x6b
 80022c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_TIM7_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MX_TIM7_Init+0x64>)
 80022d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_TIM7_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <MX_TIM7_Init+0x64>)
 80022de:	f002 ff49 	bl	8005174 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80022e8:	f000 fa1c 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_TIM7_Init+0x64>)
 80022fa:	f003 f923 	bl	8005544 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002304:	f000 fa0e 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20005d60 	.word	0x20005d60
 8002314:	40001400 	.word	0x40001400

08002318 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <MX_TIM10_Init+0xa8>)
 8002332:	4a24      	ldr	r2, [pc, #144]	; (80023c4 <MX_TIM10_Init+0xac>)
 8002334:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10799;
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <MX_TIM10_Init+0xa8>)
 8002338:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800233c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <MX_TIM10_Init+0xa8>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <MX_TIM10_Init+0xa8>)
 8002346:	f242 720f 	movw	r2, #9999	; 0x270f
 800234a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <MX_TIM10_Init+0xa8>)
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <MX_TIM10_Init+0xa8>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002358:	4819      	ldr	r0, [pc, #100]	; (80023c0 <MX_TIM10_Init+0xa8>)
 800235a:	f002 ff0b 	bl	8005174 <HAL_TIM_Base_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002364:	f000 f9de 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002368:	4815      	ldr	r0, [pc, #84]	; (80023c0 <MX_TIM10_Init+0xa8>)
 800236a:	f002 ff1d 	bl	80051a8 <HAL_TIM_PWM_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002374:	f000 f9d6 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8002378:	2108      	movs	r1, #8
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <MX_TIM10_Init+0xa8>)
 800237c:	f002 ff2e 	bl	80051dc <HAL_TIM_OnePulse_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM10_Init+0x72>
  {
    Error_Handler();
 8002386:	f000 f9cd 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238a:	2360      	movs	r3, #96	; 0x60
 800238c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000;
 800238e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	4619      	mov	r1, r3
 80023a2:	4807      	ldr	r0, [pc, #28]	; (80023c0 <MX_TIM10_Init+0xa8>)
 80023a4:	f002 ff76 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM10_Init+0x9a>
  {
    Error_Handler();
 80023ae:	f000 f9b9 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <MX_TIM10_Init+0xa8>)
 80023b4:	f000 fa60 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80023b8:	bf00      	nop
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20005acc 	.word	0x20005acc
 80023c4:	40014400 	.word	0x40014400

080023c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <MX_USART1_UART_Init+0x58>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <MX_USART1_UART_Init+0x5c>)
 80023d6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023ec:	220c      	movs	r2, #12
 80023ee:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <MX_USART1_UART_Init+0x54>)
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	; (800241c <MX_USART1_UART_Init+0x54>)
 800240a:	f003 fbac 	bl	8005b66 <HAL_UART_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8002414:	f000 f986 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20005c98 	.word	0x20005c98
 8002420:	40011000 	.word	0x40011000
 8002424:	00337f98 	.word	0x00337f98

08002428 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <MX_USART3_UART_Init+0x54>)
 800242e:	4a14      	ldr	r2, [pc, #80]	; (8002480 <MX_USART3_UART_Init+0x58>)
 8002430:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 960000;
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_USART3_UART_Init+0x54>)
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <MX_USART3_UART_Init+0x5c>)
 8002436:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002438:	4b10      	ldr	r3, [pc, #64]	; (800247c <MX_USART3_UART_Init+0x54>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800243e:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_USART3_UART_Init+0x54>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <MX_USART3_UART_Init+0x54>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_USART3_UART_Init+0x54>)
 800244c:	220c      	movs	r2, #12
 800244e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <MX_USART3_UART_Init+0x54>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_USART3_UART_Init+0x54>)
 8002458:	2200      	movs	r2, #0
 800245a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <MX_USART3_UART_Init+0x54>)
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_USART3_UART_Init+0x54>)
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_USART3_UART_Init+0x54>)
 800246a:	f003 fb7c 	bl	8005b66 <HAL_UART_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8002474:	f000 f956 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20005a4c 	.word	0x20005a4c
 8002480:	40004800 	.word	0x40004800
 8002484:	000ea600 	.word	0x000ea600

08002488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <MX_DMA_Init+0x80>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <MX_DMA_Init+0x80>)
 8002494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <MX_DMA_Init+0x80>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024a6:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MX_DMA_Init+0x80>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <MX_DMA_Init+0x80>)
 80024ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <MX_DMA_Init+0x80>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 9, 0); //PC
 80024be:	2200      	movs	r2, #0
 80024c0:	2109      	movs	r1, #9
 80024c2:	200c      	movs	r0, #12
 80024c4:	f001 fbb0 	bl	8003c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80024c8:	200c      	movs	r0, #12
 80024ca:	f001 fbdf 	bl	8003c8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 9, 0); //PC
 80024ce:	2200      	movs	r2, #0
 80024d0:	2109      	movs	r1, #9
 80024d2:	200e      	movs	r0, #14
 80024d4:	f001 fba8 	bl	8003c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80024d8:	200e      	movs	r0, #14
 80024da:	f001 fbd7 	bl	8003c8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //ACIS
 80024de:	2200      	movs	r2, #0
 80024e0:	2108      	movs	r1, #8
 80024e2:	203a      	movs	r0, #58	; 0x3a
 80024e4:	f001 fba0 	bl	8003c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80024e8:	203a      	movs	r0, #58	; 0x3a
 80024ea:	f001 fbcf 	bl	8003c8c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //ACIS
 80024ee:	2200      	movs	r2, #0
 80024f0:	2108      	movs	r1, #8
 80024f2:	2046      	movs	r0, #70	; 0x46
 80024f4:	f001 fb98 	bl	8003c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80024f8:	2046      	movs	r0, #70	; 0x46
 80024fa:	f001 fbc7 	bl	8003c8c <HAL_NVIC_EnableIRQ>

}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <MX_GPIO_Init+0x204>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a7a      	ldr	r2, [pc, #488]	; (8002710 <MX_GPIO_Init+0x204>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b78      	ldr	r3, [pc, #480]	; (8002710 <MX_GPIO_Init+0x204>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b75      	ldr	r3, [pc, #468]	; (8002710 <MX_GPIO_Init+0x204>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a74      	ldr	r2, [pc, #464]	; (8002710 <MX_GPIO_Init+0x204>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b72      	ldr	r3, [pc, #456]	; (8002710 <MX_GPIO_Init+0x204>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	4b6f      	ldr	r3, [pc, #444]	; (8002710 <MX_GPIO_Init+0x204>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a6e      	ldr	r2, [pc, #440]	; (8002710 <MX_GPIO_Init+0x204>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <MX_GPIO_Init+0x204>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256a:	4b69      	ldr	r3, [pc, #420]	; (8002710 <MX_GPIO_Init+0x204>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a68      	ldr	r2, [pc, #416]	; (8002710 <MX_GPIO_Init+0x204>)
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b66      	ldr	r3, [pc, #408]	; (8002710 <MX_GPIO_Init+0x204>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin|LCD_CS1_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	2116      	movs	r1, #22
 8002586:	4863      	ldr	r0, [pc, #396]	; (8002714 <MX_GPIO_Init+0x208>)
 8002588:	f001 feb2 	bl	80042f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 800258c:	2200      	movs	r2, #0
 800258e:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8002592:	4861      	ldr	r0, [pc, #388]	; (8002718 <MX_GPIO_Init+0x20c>)
 8002594:	f001 feac 	bl	80042f0 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
                          |USB_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259e:	485f      	ldr	r0, [pc, #380]	; (800271c <MX_GPIO_Init+0x210>)
 80025a0:	f001 fea6 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 80025a4:	2201      	movs	r2, #1
 80025a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025aa:	485c      	ldr	r0, [pc, #368]	; (800271c <MX_GPIO_Init+0x210>)
 80025ac:	f001 fea0 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 80025b0:	2201      	movs	r2, #1
 80025b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b6:	4859      	ldr	r0, [pc, #356]	; (800271c <MX_GPIO_Init+0x210>)
 80025b8:	f001 fe9a 	bl	80042f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c2:	4856      	ldr	r0, [pc, #344]	; (800271c <MX_GPIO_Init+0x210>)
 80025c4:	f001 fe94 	bl	80042f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin|LCD_EN_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2107      	movs	r1, #7
 80025cc:	4853      	ldr	r0, [pc, #332]	; (800271c <MX_GPIO_Init+0x210>)
 80025ce:	f001 fe8f 	bl	80042f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 80025d2:	2306      	movs	r3, #6
 80025d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	484a      	ldr	r0, [pc, #296]	; (8002714 <MX_GPIO_Init+0x208>)
 80025ea:	f001 fda5 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80025ee:	2302      	movs	r3, #2
 80025f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fa:	2303      	movs	r3, #3
 80025fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0314 	add.w	r3, r7, #20
 8002602:	4619      	mov	r1, r3
 8002604:	4845      	ldr	r0, [pc, #276]	; (800271c <MX_GPIO_Init+0x210>)
 8002606:	f001 fd97 	bl	8004138 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1G_Pin|LED2G_Pin|LED2R_Pin|LED1R_Pin;
 800260a:	f44f 4331 	mov.w	r3, #45312	; 0xb100
 800260e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002610:	2311      	movs	r3, #17
 8002612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	483e      	ldr	r0, [pc, #248]	; (800271c <MX_GPIO_Init+0x210>)
 8002624:	f001 fd88 	bl	8004138 <HAL_GPIO_Init>


  /*Configure GPIO pins : LCD_DB0_LED1R_Pin LCD_DB1_LED1G_Pin LCD_DB2_LED2R_Pin LCD_DB3_LED2G_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 8002628:	23ff      	movs	r3, #255	; 0xff
 800262a:	617b      	str	r3, [r7, #20]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262c:	2301      	movs	r3, #1
 800262e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	4836      	ldr	r0, [pc, #216]	; (8002718 <MX_GPIO_Init+0x20c>)
 8002640:	f001 fd7a 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS1_Pin */
  GPIO_InitStruct.Pin = LCD_CS1_Pin;
 8002644:	2310      	movs	r3, #16
 8002646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002648:	2301      	movs	r3, #1
 800264a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS1_GPIO_Port, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	482e      	ldr	r0, [pc, #184]	; (8002714 <MX_GPIO_Init+0x208>)
 800265c:	f001 fd6c 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS2_Pin|LCD_RST_Pin;
 8002660:	2305      	movs	r3, #5
 8002662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002664:	2301      	movs	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	4829      	ldr	r0, [pc, #164]	; (800271c <MX_GPIO_Init+0x210>)
 8002678:	f001 fd5e 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_DISPLAY_Pin SW_FUEL2_Pin SW_FUEL1_Pin BUT_CANCEL_Pin */
  GPIO_InitStruct.Pin = SW_DISPLAY_Pin|SW_FUEL2_Pin|SW_FUEL1_Pin|BUT_CANCEL_Pin;
 800267c:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
 8002680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002686:	2301      	movs	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4820      	ldr	r0, [pc, #128]	; (8002714 <MX_GPIO_Init+0x208>)
 8002692:	f001 fd51 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002696:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800269a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026a8:	230a      	movs	r3, #10
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	4819      	ldr	r0, [pc, #100]	; (8002718 <MX_GPIO_Init+0x20c>)
 80026b4:	f001 fd40 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_RST_Pin */
  GPIO_InitStruct.Pin = USB_RST_Pin;
 80026b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RST_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	4811      	ldr	r0, [pc, #68]	; (8002718 <MX_GPIO_Init+0x20c>)
 80026d2:	f001 fd31 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_ENTER_Pin */
  GPIO_InitStruct.Pin = BUT_ENTER_Pin;
 80026d6:	2304      	movs	r3, #4
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_ENTER_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <MX_GPIO_Init+0x214>)
 80026ea:	f001 fd25 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_UP_Pin BUT_DOWN_Pin */
  GPIO_InitStruct.Pin = BUT_LEFT_Pin|BUT_RIGHT_Pin|BUT_UP_Pin|BUT_DOWN_Pin;
 80026ee:	23f0      	movs	r3, #240	; 0xf0
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <MX_GPIO_Init+0x210>)
 8002702:	f001 fd19 	bl	8004138 <HAL_GPIO_Init>

}
 8002706:	bf00      	nop
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40020800 	.word	0x40020800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020c00 	.word	0x40020c00

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800272a:	e7fe      	b.n	800272a <Error_Handler+0x6>

0800272c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_MspInit+0x4c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_MspInit+0x4c>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_MspInit+0x4c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_MspInit+0x4c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_MspInit+0x4c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_MspInit+0x4c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	210f      	movs	r1, #15
 8002766:	f06f 0001 	mvn.w	r0, #1
 800276a:	f001 fa5d 	bl	8003c28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800

0800277c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_ADC_MspInit+0x44>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_ADC_MspInit+0x48>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_ADC_MspInit+0x48>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6453      	str	r3, [r2, #68]	; 0x44
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_ADC_MspInit+0x48>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2105      	movs	r1, #5
 80027aa:	2012      	movs	r0, #18
 80027ac:	f001 fa3c 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80027b0:	2012      	movs	r0, #18
 80027b2:	f001 fa6b 	bl	8003c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40012000 	.word	0x40012000
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d10b      	bne.n	80027f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_TIM_PWM_MspInit+0x38>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_TIM_PWM_MspInit+0x38>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_TIM_PWM_MspInit+0x38>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800

08002804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <HAL_TIM_Base_MspInit+0x68>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d114      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_TIM_Base_MspInit+0x6c>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_TIM_Base_MspInit+0x6c>)
 800281c:	f043 0320 	orr.w	r3, r3, #32
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_TIM_Base_MspInit+0x6c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2102      	movs	r1, #2
 8002832:	2037      	movs	r0, #55	; 0x37
 8002834:	f001 f9f8 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002838:	2037      	movs	r0, #55	; 0x37
 800283a:	f001 fa27 	bl	8003c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800283e:	e010      	b.n	8002862 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_TIM_Base_MspInit+0x70>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10b      	bne.n	8002862 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_TIM_Base_MspInit+0x6c>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_TIM_Base_MspInit+0x6c>)
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_TIM_Base_MspInit+0x6c>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40001400 	.word	0x40001400
 8002870:	40023800 	.word	0x40023800
 8002874:	40014400 	.word	0x40014400

08002878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d11d      	bne.n	80028d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_TIM_MspPostInit+0x88>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_TIM_MspPostInit+0x88>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_TIM_MspPostInit+0x88>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LCD_LED_TIM2_CH3_Pin;
 80028b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028c4:	2301      	movs	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LED_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	480d      	ldr	r0, [pc, #52]	; (8002904 <HAL_TIM_MspPostInit+0x8c>)
 80028d0:	f001 fc32 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80028d4:	e010      	b.n	80028f8 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM10)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_TIM_MspPostInit+0x90>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d10b      	bne.n	80028f8 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_TIM_MspPostInit+0x88>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	4a06      	ldr	r2, [pc, #24]	; (8002900 <HAL_TIM_MspPostInit+0x88>)
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	6313      	str	r3, [r2, #48]	; 0x30
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_TIM_MspPostInit+0x88>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	40020400 	.word	0x40020400
 8002908:	40014400 	.word	0x40014400

0800290c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a91      	ldr	r2, [pc, #580]	; (8002b70 <HAL_UART_MspInit+0x264>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f040 8088 	bne.w	8002a40 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002930:	4b90      	ldr	r3, [pc, #576]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	4a8f      	ldr	r2, [pc, #572]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6453      	str	r3, [r2, #68]	; 0x44
 800293c:	4b8d      	ldr	r3, [pc, #564]	; (8002b74 <HAL_UART_MspInit+0x268>)
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002948:	4b8a      	ldr	r3, [pc, #552]	; (8002b74 <HAL_UART_MspInit+0x268>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a89      	ldr	r2, [pc, #548]	; (8002b74 <HAL_UART_MspInit+0x268>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b87      	ldr	r3, [pc, #540]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002960:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002972:	2307      	movs	r3, #7
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	4619      	mov	r1, r3
 800297c:	487e      	ldr	r0, [pc, #504]	; (8002b78 <HAL_UART_MspInit+0x26c>)
 800297e:	f001 fbdb 	bl	8004138 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002982:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_UART_MspInit+0x270>)
 8002984:	4a7e      	ldr	r2, [pc, #504]	; (8002b80 <HAL_UART_MspInit+0x274>)
 8002986:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002988:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <HAL_UART_MspInit+0x270>)
 800298a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800298e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002990:	4b7a      	ldr	r3, [pc, #488]	; (8002b7c <HAL_UART_MspInit+0x270>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002996:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <HAL_UART_MspInit+0x270>)
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800299c:	4b77      	ldr	r3, [pc, #476]	; (8002b7c <HAL_UART_MspInit+0x270>)
 800299e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a4:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029aa:	4b74      	ldr	r3, [pc, #464]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029b0:	4b72      	ldr	r3, [pc, #456]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80029b6:	4b71      	ldr	r3, [pc, #452]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029be:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029c4:	486d      	ldr	r0, [pc, #436]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029c6:	f001 fa69 	bl	8003e9c <HAL_DMA_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80029d0:	f7ff fea8 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a69      	ldr	r2, [pc, #420]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80029da:	4a68      	ldr	r2, [pc, #416]	; (8002b7c <HAL_UART_MspInit+0x270>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_UART_MspInit+0x278>)
 80029e2:	4a69      	ldr	r2, [pc, #420]	; (8002b88 <HAL_UART_MspInit+0x27c>)
 80029e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_UART_MspInit+0x278>)
 80029e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <HAL_UART_MspInit+0x278>)
 80029f0:	2240      	movs	r2, #64	; 0x40
 80029f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f4:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_UART_MspInit+0x278>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029fa:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <HAL_UART_MspInit+0x278>)
 80029fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a00:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a08:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a14:	4b5b      	ldr	r3, [pc, #364]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1c:	4b59      	ldr	r3, [pc, #356]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a22:	4858      	ldr	r0, [pc, #352]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a24:	f001 fa3a 	bl	8003e9c <HAL_DMA_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002a2e:	f7ff fe79 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a53      	ldr	r2, [pc, #332]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a36:	669a      	str	r2, [r3, #104]	; 0x68
 8002a38:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <HAL_UART_MspInit+0x278>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a3e:	e092      	b.n	8002b66 <HAL_UART_MspInit+0x25a>
  else if(huart->Instance==USART3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <HAL_UART_MspInit+0x280>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	f040 808d 	bne.w	8002b66 <HAL_UART_MspInit+0x25a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a48      	ldr	r2, [pc, #288]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
 8002a58:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a64:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a42      	ldr	r2, [pc, #264]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_UART_MspInit+0x268>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a86:	2301      	movs	r3, #1
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a8e:	2307      	movs	r3, #7
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4619      	mov	r1, r3
 8002a98:	483d      	ldr	r0, [pc, #244]	; (8002b90 <HAL_UART_MspInit+0x284>)
 8002a9a:	f001 fb4d 	bl	8004138 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002aa0:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <HAL_UART_MspInit+0x28c>)
 8002aa2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aac:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac0:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac6:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002acc:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ade:	482d      	ldr	r0, [pc, #180]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002ae0:	f001 f9dc 	bl	8003e9c <HAL_DMA_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 8002aea:	f7ff fe1b 	bl	8002724 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002af2:	66da      	str	r2, [r3, #108]	; 0x6c
 8002af4:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <HAL_UART_MspInit+0x288>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002afc:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <HAL_UART_MspInit+0x294>)
 8002afe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b06:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0e:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b3a:	4818      	ldr	r0, [pc, #96]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b3c:	f001 f9ae 	bl	8003e9c <HAL_DMA_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_UART_MspInit+0x23e>
      Error_Handler();
 8002b46:	f7ff fded 	bl	8002724 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b4e:	669a      	str	r2, [r3, #104]	; 0x68
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_UART_MspInit+0x290>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2105      	movs	r1, #5
 8002b5a:	2027      	movs	r0, #39	; 0x27
 8002b5c:	f001 f864 	bl	8003c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b60:	2027      	movs	r0, #39	; 0x27
 8002b62:	f001 f893 	bl	8003c8c <HAL_NVIC_EnableIRQ>
}
 8002b66:	bf00      	nop
 8002b68:	3730      	adds	r7, #48	; 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	20005c38 	.word	0x20005c38
 8002b80:	40026440 	.word	0x40026440
 8002b84:	20005b90 	.word	0x20005b90
 8002b88:	400264b8 	.word	0x400264b8
 8002b8c:	40004800 	.word	0x40004800
 8002b90:	40020800 	.word	0x40020800
 8002b94:	200059ec 	.word	0x200059ec
 8002b98:	40026028 	.word	0x40026028
 8002b9c:	20005b30 	.word	0x20005b30
 8002ba0:	40026058 	.word	0x40026058

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <NMI_Handler+0x4>

08002baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <HardFault_Handler+0x4>

08002bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <MemManage_Handler+0x4>

08002bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bba:	e7fe      	b.n	8002bba <BusFault_Handler+0x4>

08002bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <UsageFault_Handler+0x4>

08002bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 fe20 	bl	8003818 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002bd8:	f004 fa86 	bl	80070e8 <xTaskGetSchedulerState>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002be2:	f004 fe57 	bl	8007894 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA1_Stream1_IRQHandler+0x10>)
 8002bf2:	f001 f9e3 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200059ec 	.word	0x200059ec

08002c00 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <DMA1_Stream3_IRQHandler+0x10>)
 8002c06:	f001 f9d9 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20005b30 	.word	0x20005b30

08002c14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <ADC_IRQHandler+0x10>)
 8002c1a:	f000 feb8 	bl	800398e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20005bf0 	.word	0x20005bf0

08002c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <USART3_IRQHandler+0x10>)
 8002c2e:	f002 fceb 	bl	8005608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20005a4c 	.word	0x20005a4c

08002c3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <TIM7_IRQHandler+0x10>)
 8002c42:	f002 f980 	bl	8004f46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20005d60 	.word	0x20005d60

08002c50 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <DMA2_Stream2_IRQHandler+0x10>)
 8002c56:	f001 f9b1 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20005c38 	.word	0x20005c38

08002c64 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <DMA2_Stream7_IRQHandler+0x10>)
 8002c6a:	f001 f9a7 	bl	8003fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20005b90 	.word	0x20005b90

08002c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <_sbrk+0x5c>)
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <_sbrk+0x60>)
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <_sbrk+0x64>)
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <_sbrk+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca8:	f006 fae4 	bl	8009274 <__errno>
 8002cac:	4602      	mov	r2, r0
 8002cae:	230c      	movs	r3, #12
 8002cb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e009      	b.n	8002ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <_sbrk+0x64>)
 8002cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20040000 	.word	0x20040000
 8002cd8:	00000400 	.word	0x00000400
 8002cdc:	20000314 	.word	0x20000314
 8002ce0:	20006458 	.word	0x20006458

08002ce4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <SystemInit+0x28>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <SystemInit+0x28>)
 8002cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <SystemInit+0x28>)
 8002cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <Msg_GetSrc>:
static volatile uint32_t LastNotAckedTime = 0;

static uint8_t msgFullPack[MAX_PACK_LEN + 8];
static uint8_t * msgBuf = &msgFullPack[8];

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <acker>:
        }
        xSemaphoreGive(xFifo->info.globallock);
    }
}

static inline void acker(sProFIFO* xFifo, uint16_t aPacketId, eTransChannels xChaDest) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]

    if (xFifo)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d03e      	beq.n	8002de0 <acker+0x94>
    {
        uint16_t aTotLen = 8;
 8002d62:	2308      	movs	r3, #8
 8002d64:	82fb      	strh	r3, [r7, #22]
        uint8_t aHeadByte = (( etrCTRL | ( xChaDest << 3 ) ) | HEADER_ACK_BIT) & HEADER_MASK_BITS;
 8002d66:	787b      	ldrb	r3, [r7, #1]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	f043 0303 	orr.w	r3, r3, #3
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	757b      	strb	r3, [r7, #21]
        uint8_t header[8];

        header[0] = 0x55;
 8002d7a:	2355      	movs	r3, #85	; 0x55
 8002d7c:	733b      	strb	r3, [r7, #12]
        header[1] = 0x55;
 8002d7e:	2355      	movs	r3, #85	; 0x55
 8002d80:	737b      	strb	r3, [r7, #13]
        header[2] = aHeadByte;
 8002d82:	7d7b      	ldrb	r3, [r7, #21]
 8002d84:	73bb      	strb	r3, [r7, #14]
        header[3] = aTotLen & 0xFF;
 8002d86:	8afb      	ldrh	r3, [r7, #22]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	73fb      	strb	r3, [r7, #15]
        header[4] = (aTotLen >> 8) & 0xFF;
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	743b      	strb	r3, [r7, #16]
        header[5] = aPacketId & 0xFF;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	747b      	strb	r3, [r7, #17]
        header[6] = (aPacketId >> 8) & 0xFF;
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	74bb      	strb	r3, [r7, #18]
        header[7] = CRC8_Generate(header, 7);
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	2107      	movs	r1, #7
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fcbd 	bl	800172c <CRC8_Generate>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]

        xSemaphoreTake(xFifo->info.globallock, portMAX_DELAY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fc02 	bl	80065c8 <xQueueSemaphoreTake>
        protPushSequence(xFifo,header,8);
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	2208      	movs	r2, #8
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fc36 	bl	800363e <protPushSequence>
        xSemaphoreGive(xFifo->info.globallock);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6958      	ldr	r0, [r3, #20]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f003 f9e4 	bl	80061a8 <xQueueGenericSend>
    }
}
 8002de0:	bf00      	nop
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <parser>:
  }
  return 0;

}

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	70fb      	strb	r3, [r7, #3]
  uint8_t data;
  uint8_t sCount;
	sProFIFO* aDest;
	uint8_t header[8];

  if(xChaDest == etrACIS) aDest = &fifoAcisTx;
 8002df6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d101      	bne.n	8002e02 <parser+0x1a>
 8002dfe:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <parser+0x1e0>)
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
  if(xChaDest == etrPC) aDest = &fifoPcTx;
 8002e02:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <parser+0x26>
 8002e0a:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <parser+0x1e4>)
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (xChaDest) {
 8002e0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f2c0 80b9 	blt.w	8002f8a <parser+0x1a2>
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	f340 8086 	ble.w	8002f2a <parser+0x142>
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	f040 80b3 	bne.w	8002f8a <parser+0x1a2>

        case etrCTRL:
        {
            if (xDataLen)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d04b      	beq.n	8002ec2 <parser+0xda>
            {
                for(int i = 0; i < 8; i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	e00a      	b.n	8002e46 <parser+0x5e>
                  protPull(xFifo, &header[i]);
 8002e30:	f107 0214 	add.w	r2, r7, #20
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	4413      	add	r3, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fc3d 	bl	80036ba <protPull>
                for(int i = 0; i < 8; i++)
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	3301      	adds	r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	ddf1      	ble.n	8002e30 <parser+0x48>

                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e50:	e00e      	b.n	8002e70 <parser+0x88>
                {
                  protPull(xFifo, &data);
 8002e52:	f107 031e 	add.w	r3, r7, #30
 8002e56:	4619      	mov	r1, r3
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fc2e 	bl	80036ba <protPull>
                  msgBuf[aCount]=data;
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <parser+0x1e8>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	4413      	add	r3, r2
 8002e66:	7fba      	ldrb	r2, [r7, #30]
 8002e68:	701a      	strb	r2, [r3, #0]
                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b0a      	subs	r3, #10
 8002e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3eb      	bcc.n	8002e52 <parser+0x6a>
                }
                protPull(xFifo, &data);
 8002e7a:	f107 031e 	add.w	r3, r7, #30
 8002e7e:	4619      	mov	r1, r3
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fc1a 	bl	80036ba <protPull>
                protPull(xFifo, &data);
 8002e86:	f107 031e 	add.w	r3, r7, #30
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fc14 	bl	80036ba <protPull>

                msgBuf[aCount]=0;
 8002e92:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <parser+0x1e8>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	4413      	add	r3, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]

                if(aDest) acker(aDest,xPacketId,xChaSrc);
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <parser+0xca>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eae:	f7ff ff4d 	bl	8002d4c <acker>

                acis_parse_command(xChaSrc, msgBuf, aCount);
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <parser+0x1e8>)
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe f914 	bl	80010e8 <acis_parse_command>
                  ReceivedAckPacket = 1;
                }

            }

            break;
 8002ec0:	e07c      	b.n	8002fbc <parser+0x1d4>
                for (aCount = 0; aCount < 8; aCount++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec6:	e013      	b.n	8002ef0 <parser+0x108>
                  for(int i = 0; i < 8; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	623b      	str	r3, [r7, #32]
 8002ecc:	e00a      	b.n	8002ee4 <parser+0xfc>
                    protPull(xFifo, &header[i]);
 8002ece:	f107 0214 	add.w	r2, r7, #20
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fbee 	bl	80036ba <protPull>
                  for(int i = 0; i < 8; i++)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	ddf1      	ble.n	8002ece <parser+0xe6>
                for (aCount = 0; aCount < 8; aCount++)
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	3301      	adds	r3, #1
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	2b07      	cmp	r3, #7
 8002ef4:	d9e8      	bls.n	8002ec8 <parser+0xe0>
                if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <parser+0x1ec>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05d      	beq.n	8002fbc <parser+0x1d4>
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <parser+0x1f0>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d058      	beq.n	8002fbc <parser+0x1d4>
 8002f0a:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <parser+0x1f0>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d151      	bne.n	8002fbc <parser+0x1d4>
 8002f18:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <parser+0x1f4>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d14c      	bne.n	8002fbc <parser+0x1d4>
                  ReceivedAckPacket = 1;
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <parser+0x1f4>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	801a      	strh	r2, [r3, #0]
            break;
 8002f28:	e048      	b.n	8002fbc <parser+0x1d4>
        }

        case etrACIS:
        case etrPC:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0a      	cmp	r3, #10
 8002f2e:	d902      	bls.n	8002f36 <parser+0x14e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e000      	b.n	8002f38 <parser+0x150>
 8002f36:	2308      	movs	r3, #8
 8002f38:	77fb      	strb	r3, [r7, #31]

          if(aDest)
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d024      	beq.n	8002f8a <parser+0x1a2>
          {
            xSemaphoreTake(xFifo->info.globallock, portMAX_DELAY);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fb3d 	bl	80065c8 <xQueueSemaphoreTake>
            for (aCount = 0; aCount < sCount; aCount++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f52:	e00e      	b.n	8002f72 <parser+0x18a>
            {
              protPull(xFifo, &data);
 8002f54:	f107 031e 	add.w	r3, r7, #30
 8002f58:	4619      	mov	r1, r3
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fbad 	bl	80036ba <protPull>
              protPush(aDest, &data);
 8002f60:	f107 031e 	add.w	r3, r7, #30
 8002f64:	4619      	mov	r1, r3
 8002f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f68:	f000 fb89 	bl	800367e <protPush>
            for (aCount = 0; aCount < sCount; aCount++)
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	3301      	adds	r3, #1
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f72:	7ffb      	ldrb	r3, [r7, #31]
 8002f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d3ec      	bcc.n	8002f54 <parser+0x16c>
            }
            xSemaphoreGive(xFifo->info.globallock);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6958      	ldr	r0, [r3, #20]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	f003 f910 	bl	80061a8 <xQueueGenericSend>
            break;
 8002f88:	e019      	b.n	8002fbe <parser+0x1d6>
        }
        /* no break */

        default:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0a      	cmp	r3, #10
 8002f8e:	d902      	bls.n	8002f96 <parser+0x1ae>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e000      	b.n	8002f98 <parser+0x1b0>
 8002f96:	2308      	movs	r3, #8
 8002f98:	77fb      	strb	r3, [r7, #31]
          for (aCount = 0; aCount < sCount; aCount++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9e:	e008      	b.n	8002fb2 <parser+0x1ca>
          {
            protPull(xFifo, &data);
 8002fa0:	f107 031e 	add.w	r3, r7, #30
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fb87 	bl	80036ba <protPull>
          for (aCount = 0; aCount < sCount; aCount++)
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	3301      	adds	r3, #1
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d3f2      	bcc.n	8002fa0 <parser+0x1b8>
          }
          break;
 8002fba:	e000      	b.n	8002fbe <parser+0x1d6>
            break;
 8002fbc:	bf00      	nop
        }
    }
}
 8002fbe:	bf00      	nop
 8002fc0:	3730      	adds	r7, #48	; 0x30
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20005f3c 	.word	0x20005f3c
 8002fcc:	20005f58 	.word	0x20005f58
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	20000318 	.word	0x20000318
 8002fd8:	2000031a 	.word	0x2000031a
 8002fdc:	20000004 	.word	0x20000004

08002fe0 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	f107 030f 	add.w	r3, r7, #15
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6839      	ldr	r1, [r7, #0]
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fb7f 	bl	80036f6 <protLook>
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <countCRC8>:

static inline uint8_t countCRC8(sProFIFO* xFifo) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { msgFullPack[i] = lookByte(xFifo,i); }
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e00d      	b.n	8003032 <countCRC8+0x2e>
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffe1 	bl	8002fe0 <lookByte>
 800301e:	4603      	mov	r3, r0
 8003020:	4619      	mov	r1, r3
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <countCRC8+0x4c>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	460a      	mov	r2, r1
 800302a:	701a      	strb	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d9ee      	bls.n	8003016 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(msgFullPack, 7);
 8003038:	2107      	movs	r1, #7
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <countCRC8+0x4c>)
 800303c:	f7fe fb76 	bl	800172c <CRC8_Generate>
 8003040:	4603      	mov	r3, r0
 8003042:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 8003044:	7afb      	ldrb	r3, [r7, #11]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000031c 	.word	0x2000031c

08003054 <countCRC16>:

static inline int32_t countCRC16(sProFIFO* xFifo, uint32_t xLen) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { msgFullPack[i] = lookByte(xFifo,i); }
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	e00d      	b.n	8003084 <countCRC16+0x30>
 8003068:	68f9      	ldr	r1, [r7, #12]
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ffb8 	bl	8002fe0 <lookByte>
 8003070:	4603      	mov	r3, r0
 8003072:	4619      	mov	r1, r3
 8003074:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <countCRC16+0x54>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	460a      	mov	r2, r1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	3b02      	subs	r3, #2
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	429a      	cmp	r2, r3
 800308c:	d3ec      	bcc.n	8003068 <countCRC16+0x14>
    aCrc16 = CRC8_Generate(msgFullPack, xLen-2);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	3b02      	subs	r3, #2
 8003092:	4619      	mov	r1, r3
 8003094:	4804      	ldr	r0, [pc, #16]	; (80030a8 <countCRC16+0x54>)
 8003096:	f7fe fb49 	bl	800172c <CRC8_Generate>
 800309a:	4603      	mov	r3, r0
 800309c:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 800309e:	68bb      	ldr	r3, [r7, #8]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	2000031c 	.word	0x2000031c

080030ac <initFIFOs>:

void initFIFOs(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
	// Init FIFOs
  protInit(&fifoAcisTx,fifoAcisTxBuf,1,sizeof(fifoAcisTxBuf));
 80030b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030b4:	2201      	movs	r2, #1
 80030b6:	490d      	ldr	r1, [pc, #52]	; (80030ec <initFIFOs+0x40>)
 80030b8:	480d      	ldr	r0, [pc, #52]	; (80030f0 <initFIFOs+0x44>)
 80030ba:	f000 f9db 	bl	8003474 <protInit>
  protInit(&fifoAcisRx,fifoAcisRxBuf,1,sizeof(fifoAcisRxBuf));
 80030be:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030c2:	2201      	movs	r2, #1
 80030c4:	490b      	ldr	r1, [pc, #44]	; (80030f4 <initFIFOs+0x48>)
 80030c6:	480c      	ldr	r0, [pc, #48]	; (80030f8 <initFIFOs+0x4c>)
 80030c8:	f000 f9d4 	bl	8003474 <protInit>
  protInit(&fifoPcTx,fifoPcTxBuf,1,sizeof(fifoPcTxBuf));
 80030cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030d0:	2201      	movs	r2, #1
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <initFIFOs+0x50>)
 80030d4:	480a      	ldr	r0, [pc, #40]	; (8003100 <initFIFOs+0x54>)
 80030d6:	f000 f9cd 	bl	8003474 <protInit>
  protInit(&fifoPcRx,fifoPcRxBuf,1,sizeof(fifoPcRxBuf));
 80030da:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80030de:	2201      	movs	r2, #1
 80030e0:	4908      	ldr	r1, [pc, #32]	; (8003104 <initFIFOs+0x58>)
 80030e2:	4809      	ldr	r0, [pc, #36]	; (8003108 <initFIFOs+0x5c>)
 80030e4:	f000 f9c6 	bl	8003474 <protInit>
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20005f90 	.word	0x20005f90
 80030f0:	20005f3c 	.word	0x20005f3c
 80030f4:	20006110 	.word	0x20006110
 80030f8:	20005f20 	.word	0x20005f20
 80030fc:	20005da0 	.word	0x20005da0
 8003100:	20005f58 	.word	0x20005f58
 8003104:	20006290 	.word	0x20006290
 8003108:	20005f74 	.word	0x20005f74

0800310c <Getter>:

static void Getter(sProFIFO* xFifo, uint32_t * pDataReceiving, uint32_t * pDataLen, uint16_t * pPacketId)
{
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  uint32_t dataSkip = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  uint32_t dataLen = *pDataLen;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
  uint32_t dataReceiving = *pDataReceiving;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	617b      	str	r3, [r7, #20]
  uint16_t packetId = *pPacketId;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	827b      	strh	r3, [r7, #18]

  if(dataReceiving)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d043      	beq.n	80031be <Getter+0xb2>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f97e 	bl	8003438 <protGetSize>
 800313c:	4602      	mov	r2, r0
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4293      	cmp	r3, r2
 8003142:	f200 80b7 	bhi.w	80032b4 <Getter+0x1a8>
    {
        if (countCRC16(xFifo,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff ff83 	bl	8003054 <countCRC16>
 800314e:	4604      	mov	r4, r0
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	3b02      	subs	r3, #2
 8003154:	4619      	mov	r1, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff ff42 	bl	8002fe0 <lookByte>
 800315c:	4603      	mov	r3, r0
 800315e:	461d      	mov	r5, r3
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	3b01      	subs	r3, #1
 8003164:	4619      	mov	r1, r3
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff ff3a 	bl	8002fe0 <lookByte>
 800316c:	4603      	mov	r3, r0
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	442b      	add	r3, r5
 8003172:	429c      	cmp	r4, r3
 8003174:	d11c      	bne.n	80031b0 <Getter+0xa4>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003176:	8a7c      	ldrh	r4, [r7, #18]
 8003178:	2102      	movs	r1, #2
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff ff30 	bl	8002fe0 <lookByte>
 8003180:	4603      	mov	r3, r0
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fdc4 	bl	8002d10 <Msg_GetSrc>
 8003188:	4603      	mov	r3, r0
 800318a:	b2dd      	uxtb	r5, r3
 800318c:	2102      	movs	r1, #2
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff ff26 	bl	8002fe0 <lookByte>
 8003194:	4603      	mov	r3, r0
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fdc8 	bl	8002d2c <Msg_GetDest>
 800319c:	4603      	mov	r3, r0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	462b      	mov	r3, r5
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4621      	mov	r1, r4
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fe1d 	bl	8002de8 <parser>
 80031ae:	e001      	b.n	80031b4 <Getter+0xa8>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
        dataReceiving = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
        dataLen = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	e07a      	b.n	80032b4 <Getter+0x1a8>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f93a 	bl	8003438 <protGetSize>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b07      	cmp	r3, #7
 80031c8:	d974      	bls.n	80032b4 <Getter+0x1a8>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 80031ca:	2100      	movs	r1, #0
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff ff07 	bl	8002fe0 <lookByte>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b55      	cmp	r3, #85	; 0x55
 80031d6:	d16b      	bne.n	80032b0 <Getter+0x1a4>
 80031d8:	2101      	movs	r1, #1
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff00 	bl	8002fe0 <lookByte>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b55      	cmp	r3, #85	; 0x55
 80031e4:	d164      	bne.n	80032b0 <Getter+0x1a4>
      {
        if (countCRC8(xFifo) == lookByte(xFifo,7))
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff ff0c 	bl	8003004 <countCRC8>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461c      	mov	r4, r3
 80031f0:	2107      	movs	r1, #7
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff fef4 	bl	8002fe0 <lookByte>
 80031f8:	4603      	mov	r3, r0
 80031fa:	429c      	cmp	r4, r3
 80031fc:	d154      	bne.n	80032a8 <Getter+0x19c>
        {
            if (lookByte(xFifo,0) < HEADER_MASK_BITS)
 80031fe:	2100      	movs	r1, #0
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff feed 	bl	8002fe0 <lookByte>
 8003206:	4603      	mov	r3, r0
 8003208:	2b3e      	cmp	r3, #62	; 0x3e
 800320a:	d84a      	bhi.n	80032a2 <Getter+0x196>
            {
                dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 800320c:	2103      	movs	r1, #3
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff fee6 	bl	8002fe0 <lookByte>
 8003214:	4603      	mov	r3, r0
 8003216:	461c      	mov	r4, r3
 8003218:	2104      	movs	r1, #4
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff fee0 	bl	8002fe0 <lookByte>
 8003220:	4603      	mov	r3, r0
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	4423      	add	r3, r4
 8003226:	61bb      	str	r3, [r7, #24]
                packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 8003228:	2105      	movs	r1, #5
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fed8 	bl	8002fe0 <lookByte>
 8003230:	4603      	mov	r3, r0
 8003232:	b29c      	uxth	r4, r3
 8003234:	2106      	movs	r1, #6
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fed2 	bl	8002fe0 <lookByte>
 800323c:	4603      	mov	r3, r0
 800323e:	b29b      	uxth	r3, r3
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	b29b      	uxth	r3, r3
 8003244:	4423      	add	r3, r4
 8003246:	827b      	strh	r3, [r7, #18]
                if (packetId > 0 && dataLen < MAX_PACK_LEN)
 8003248:	8a7b      	ldrh	r3, [r7, #18]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d026      	beq.n	800329c <Getter+0x190>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003254:	d222      	bcs.n	800329c <Getter+0x190>
                {
                    if (dataLen>10)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b0a      	cmp	r3, #10
 800325a:	d902      	bls.n	8003262 <Getter+0x156>
                    {
                      dataReceiving = 1;
 800325c:	2301      	movs	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
                    if (dataLen>10)
 8003260:	e025      	b.n	80032ae <Getter+0x1a2>
                    }
                    else
                    {
                        // Got ShortPackage (Header Only)
                        parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003262:	8a7c      	ldrh	r4, [r7, #18]
 8003264:	2102      	movs	r1, #2
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff feba 	bl	8002fe0 <lookByte>
 800326c:	4603      	mov	r3, r0
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fd4e 	bl	8002d10 <Msg_GetSrc>
 8003274:	4603      	mov	r3, r0
 8003276:	b2dd      	uxtb	r5, r3
 8003278:	2102      	movs	r1, #2
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7ff feb0 	bl	8002fe0 <lookByte>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fd52 	bl	8002d2c <Msg_GetDest>
 8003288:	4603      	mov	r3, r0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	462b      	mov	r3, r5
 8003290:	2200      	movs	r2, #0
 8003292:	4621      	mov	r1, r4
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff fda7 	bl	8002de8 <parser>
                    if (dataLen>10)
 800329a:	e008      	b.n	80032ae <Getter+0x1a2>
                    }
                }
                else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 800329c:	2301      	movs	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
        if (countCRC8(xFifo) == lookByte(xFifo,7))
 80032a0:	e008      	b.n	80032b4 <Getter+0x1a8>
            }
            else { dataSkip=1; } // Wrong marker bits, so skip 1 byte
 80032a2:	2301      	movs	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
        if (countCRC8(xFifo) == lookByte(xFifo,7))
 80032a6:	e005      	b.n	80032b4 <Getter+0x1a8>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 80032a8:	2301      	movs	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
        if (countCRC8(xFifo) == lookByte(xFifo,7))
 80032ac:	e002      	b.n	80032b4 <Getter+0x1a8>
 80032ae:	e001      	b.n	80032b4 <Getter+0x1a8>
      }
      else { dataSkip=1; } // Wrong sync bytes
 80032b0:	2301      	movs	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
    }
  }
  if (dataSkip)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <Getter+0x1b6>
  {
    protMoveRead(xFifo,dataSkip);
 80032ba:	69f9      	ldr	r1, [r7, #28]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fa40 	bl	8003742 <protMoveRead>
  }
  *pDataReceiving = dataReceiving;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	8a7a      	ldrh	r2, [r7, #18]
 80032d2:	801a      	strh	r2, [r3, #0]
}
 80032d4:	bf00      	nop
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bdb0      	pop	{r4, r5, r7, pc}

080032dc <xGetter>:

void xGetter(void * arg) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  eTransChannels xChanIn = (eTransChannels)arg;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	76fb      	strb	r3, [r7, #27]
	sProFIFO* xFifo;
  if(xChanIn == etrPC) xFifo = &fifoPcRx;
 80032e8:	7efb      	ldrb	r3, [r7, #27]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <xGetter+0x16>
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <xGetter+0x48>)
 80032f0:	61fb      	str	r3, [r7, #28]
  if(xChanIn == etrACIS) xFifo = &fifoAcisRx;
 80032f2:	7efb      	ldrb	r3, [r7, #27]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d101      	bne.n	80032fc <xGetter+0x20>
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <xGetter+0x4c>)
 80032fa:	61fb      	str	r3, [r7, #28]

  uint32_t dataReceiving = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  uint32_t dataLen = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
  uint16_t packetId = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	81fb      	strh	r3, [r7, #14]
  for (;;) {
    Getter(xFifo, &dataReceiving, &dataLen, &packetId);
 8003308:	f107 030e 	add.w	r3, r7, #14
 800330c:	f107 0210 	add.w	r2, r7, #16
 8003310:	f107 0114 	add.w	r1, r7, #20
 8003314:	69f8      	ldr	r0, [r7, #28]
 8003316:	f7ff fef9 	bl	800310c <Getter>
    TASK_SLEEP;
 800331a:	2001      	movs	r0, #1
 800331c:	f002 fce4 	bl	8005ce8 <osDelay>
    Getter(xFifo, &dataReceiving, &dataLen, &packetId);
 8003320:	e7f2      	b.n	8003308 <xGetter+0x2c>
 8003322:	bf00      	nop
 8003324:	20005f74 	.word	0x20005f74
 8003328:	20005f20 	.word	0x20005f20

0800332c <infoGetSize>:
#include "cmsis_os.h"
#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d305      	bcc.n	800334c <infoGetSize+0x20>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	e007      	b.n	800335c <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	1ad2      	subs	r2, r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4413      	add	r3, r2
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681c      	ldr	r4, [r3, #0]
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ffd9 	bl	800332c <infoGetSize>
 800337a:	4603      	mov	r3, r0
 800337c:	1ae3      	subs	r3, r4, r3
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bd90      	pop	{r4, r7, pc}

08003386 <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	fbb3 f1f2 	udiv	r1, r3, r2
 80033a2:	fb02 f201 	mul.w	r2, r2, r1
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff ffde 	bl	8003386 <infoCorrect>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(info->lock, portMAX_DELAY);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f04f 31ff 	mov.w	r1, #4294967295
 8003412:	4618      	mov	r0, r3
 8003414:	f003 f8d8 	bl	80065c8 <xQueueSemaphoreTake>
        infoMovePar(info,param,move);
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ffc9 	bl	80033b4 <infoMovePar>
    xSemaphoreGive(info->lock);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68d8      	ldr	r0, [r3, #12]
 8003426:	2300      	movs	r3, #0
 8003428:	2200      	movs	r2, #0
 800342a:	2100      	movs	r1, #0
 800342c:	f002 febc 	bl	80061a8 <xQueueGenericSend>
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    uint32_t value;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	4618      	mov	r0, r3
 800344a:	f003 f8bd 	bl	80065c8 <xQueueSemaphoreTake>
        value = infoGetSize(&fifo->info);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff6a 	bl	800332c <infoGetSize>
 8003458:	4603      	mov	r3, r0
 800345a:	60fb      	str	r3, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6918      	ldr	r0, [r3, #16]
 8003460:	2300      	movs	r3, #0
 8003462:	2200      	movs	r2, #0
 8003464:	2100      	movs	r1, #0
 8003466:	f002 fe9f 	bl	80061a8 <xQueueGenericSend>
    return value;
 800346a:	68fb      	ldr	r3, [r7, #12]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <protInit>:
        value = infoGetAvail(&fifo->info);
    xSemaphoreGive(fifo->info.lock);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
    fifo->info.lock = xSemaphoreCreateMutex();
 8003490:	2001      	movs	r0, #1
 8003492:	f002 ff78 	bl	8006386 <xQueueCreateMutex>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	611a      	str	r2, [r3, #16]
    fifo->info.globallock = xSemaphoreCreateMutex();
 800349c:	2001      	movs	r0, #1
 800349e:	f002 ff72 	bl	8006386 <xQueueCreateMutex>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	615a      	str	r2, [r3, #20]
    fifo->info.read = 0;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	765a      	strb	r2, [r3, #25]
    fifo->info.elemsize = xElemSize;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	79fa      	ldrb	r2, [r7, #7]
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <interPut>:
        fifo->info.write = 0;
        fifo->info.overflow = 0;
    xSemaphoreGive(fifo->info.lock);
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	7e12      	ldrb	r2, [r2, #24]
 80034e0:	fb02 f303 	mul.w	r3, r2, r3
 80034e4:	440b      	add	r3, r1
 80034e6:	4618      	mov	r0, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e1b      	ldrb	r3, [r3, #24]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6839      	ldr	r1, [r7, #0]
 80034f0:	f005 feea 	bl	80092c8 <memcpy>
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	7e12      	ldrb	r2, [r2, #24]
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	440b      	add	r3, r1
 800351a:	4619      	mov	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7e1b      	ldrb	r3, [r3, #24]
 8003520:	461a      	mov	r2, r3
 8003522:	6838      	ldr	r0, [r7, #0]
 8003524:	f005 fed0 	bl	80092c8 <memcpy>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	7e1b      	ldrb	r3, [r3, #24]
 8003546:	4619      	mov	r1, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	fb03 f301 	mul.w	r3, r3, r1
 800354e:	4413      	add	r3, r2
 8003550:	4619      	mov	r1, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	7e1b      	ldrb	r3, [r3, #24]
 8003556:	461a      	mov	r2, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f005 feb5 	bl	80092c8 <memcpy>
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <interPush>:

static inline uint8_t interPush(sProFIFO* fifo, void* xData) {
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fef7 	bl	8003368 <infoGetAvail>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00c      	beq.n	800359e <interPush+0x38>
        interPut(fifo,xData);
 8003584:	6839      	ldr	r1, [r7, #0]
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff9e 	bl	80034c8 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1d18      	adds	r0, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	330c      	adds	r3, #12
 8003594:	2201      	movs	r2, #1
 8003596:	4619      	mov	r1, r3
 8003598:	f7ff ff0c 	bl	80033b4 <infoMovePar>
 800359c:	e002      	b.n	80035a4 <interPush+0x3e>
    } else { fifo->info.overflow=1; }
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	765a      	strb	r2, [r3, #25]
    return retval;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <interPull>:

static inline uint8_t interPull(sProFIFO* fifo, void* xDest) {
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff0b 	bl	80033d8 <infoIsSome>
 80035c2:	4603      	mov	r3, r0
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <interPull+0x36>
        interGet(fifo,xDest);
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ff94 	bl	80034fc <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1d18      	adds	r0, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3308      	adds	r3, #8
 80035dc:	2201      	movs	r2, #1
 80035de:	4619      	mov	r1, r3
 80035e0:	f7ff fee8 	bl	80033b4 <infoMovePar>
    }
    return retval;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <interPushSequence>:

static inline uint8_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
    uint8_t retval; uint32_t i;
    for (i=0; i<xCount; i++) {
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	e013      	b.n	8003628 <interPushSequence+0x3a>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	7e1b      	ldrb	r3, [r3, #24]
 8003604:	461a      	mov	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	fb03 f202 	mul.w	r2, r3, r2
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4413      	add	r3, r2
 8003610:	4619      	mov	r1, r3
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff ffa7 	bl	8003566 <interPush>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <interPushSequence+0x44>
    for (i=0; i<xCount; i++) {
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	3301      	adds	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	d3e7      	bcc.n	8003600 <interPushSequence+0x12>
 8003630:	e000      	b.n	8003634 <interPushSequence+0x46>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 8003632:	bf00      	nop
    }
    return retval;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <protPushSequence>:

uint8_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
    uint8_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f04f 31ff 	mov.w	r1, #4294967295
 8003652:	4618      	mov	r0, r3
 8003654:	f002 ffb8 	bl	80065c8 <xQueueSemaphoreTake>
        retval=interPushSequence(fifo,xData,xCount);
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ffc6 	bl	80035ee <interPushSequence>
 8003662:	4603      	mov	r3, r0
 8003664:	75fb      	strb	r3, [r7, #23]
    xSemaphoreGive(fifo->info.lock);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6918      	ldr	r0, [r3, #16]
 800366a:	2300      	movs	r3, #0
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	f002 fd9a 	bl	80061a8 <xQueueGenericSend>
    return retval;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <protPush>:

uint8_t protPush(sProFIFO* fifo, void* xData) {
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f04f 31ff 	mov.w	r1, #4294967295
 8003690:	4618      	mov	r0, r3
 8003692:	f002 ff99 	bl	80065c8 <xQueueSemaphoreTake>
        retval=interPush(fifo,xData);
 8003696:	6839      	ldr	r1, [r7, #0]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff64 	bl	8003566 <interPush>
 800369e:	4603      	mov	r3, r0
 80036a0:	73fb      	strb	r3, [r7, #15]
    xSemaphoreGive(fifo->info.lock);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6918      	ldr	r0, [r3, #16]
 80036a6:	2300      	movs	r3, #0
 80036a8:	2200      	movs	r2, #0
 80036aa:	2100      	movs	r1, #0
 80036ac:	f002 fd7c 	bl	80061a8 <xQueueGenericSend>
    return retval;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <protPull>:

uint8_t protPull(sProFIFO* fifo, void* xDest) {
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f04f 31ff 	mov.w	r1, #4294967295
 80036cc:	4618      	mov	r0, r3
 80036ce:	f002 ff7b 	bl	80065c8 <xQueueSemaphoreTake>
        retval=interPull(fifo,xDest);
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff ff6a 	bl	80035ae <interPull>
 80036da:	4603      	mov	r3, r0
 80036dc:	73fb      	strb	r3, [r7, #15]
    xSemaphoreGive(fifo->info.lock);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6918      	ldr	r0, [r3, #16]
 80036e2:	2300      	movs	r3, #0
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	f002 fd5e 	bl	80061a8 <xQueueGenericSend>
    return retval;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f04f 31ff 	mov.w	r1, #4294967295
 800370a:	4618      	mov	r0, r3
 800370c:	f002 ff5c 	bl	80065c8 <xQueueSemaphoreTake>
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1d18      	adds	r0, r3, #4
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3308      	adds	r3, #8
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4619      	mov	r1, r3
 800371c:	f7ff fe33 	bl	8003386 <infoCorrect>
 8003720:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6979      	ldr	r1, [r7, #20]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff ff02 	bl	8003530 <interLook>
    xSemaphoreGive(fifo->info.lock);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6918      	ldr	r0, [r3, #16]
 8003730:	2300      	movs	r3, #0
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	f002 fd37 	bl	80061a8 <xQueueGenericSend>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	1d18      	adds	r0, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3308      	adds	r3, #8
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	f7ff fe51 	bl	80033fe <protMovePar>
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800379c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003768:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800376a:	e003      	b.n	8003774 <LoopCopyDataInit>

0800376c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800376e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003770:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003772:	3104      	adds	r1, #4

08003774 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003774:	480b      	ldr	r0, [pc, #44]	; (80037a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003778:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800377a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800377c:	d3f6      	bcc.n	800376c <CopyDataInit>
  ldr  r2, =_sbss
 800377e:	4a0b      	ldr	r2, [pc, #44]	; (80037ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003780:	e002      	b.n	8003788 <LoopFillZerobss>

08003782 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003782:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003784:	f842 3b04 	str.w	r3, [r2], #4

08003788 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800378a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800378c:	d3f9      	bcc.n	8003782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800378e:	f7ff faa9 	bl	8002ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003792:	f005 fd75 	bl	8009280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003796:	f7fe fbc1 	bl	8001f1c <main>
  bx  lr    
 800379a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800379c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80037a0:	0800f088 	.word	0x0800f088
  ldr  r0, =_sdata
 80037a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037a8:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 80037ac:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 80037b0:	20006458 	.word	0x20006458

080037b4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b4:	e7fe      	b.n	80037b4 <CAN1_RX0_IRQHandler>
	...

080037b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_InitTick+0x3c>)
{
 80037bc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_InitTick+0x40>)
 80037c0:	7818      	ldrb	r0, [r3, #0]
 80037c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80037ca:	6810      	ldr	r0, [r2, #0]
 80037cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80037d0:	f000 fa6a 	bl	8003ca8 <HAL_SYSTICK_Config>
 80037d4:	4604      	mov	r4, r0
 80037d6:	b958      	cbnz	r0, 80037f0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037d8:	2d0f      	cmp	r5, #15
 80037da:	d809      	bhi.n	80037f0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037dc:	4602      	mov	r2, r0
 80037de:	4629      	mov	r1, r5
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	f000 fa20 	bl	8003c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <HAL_InitTick+0x44>)
 80037ea:	4620      	mov	r0, r4
 80037ec:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80037f0:	2001      	movs	r0, #1
 80037f2:	e7fc      	b.n	80037ee <HAL_InitTick+0x36>
 80037f4:	2000000c 	.word	0x2000000c
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000010 	.word	0x20000010

08003800 <HAL_Init>:
{
 8003800:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003802:	2003      	movs	r0, #3
 8003804:	f000 f9fe 	bl	8003c04 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003808:	200f      	movs	r0, #15
 800380a:	f7ff ffd5 	bl	80037b8 <HAL_InitTick>
  HAL_MspInit();
 800380e:	f7fe ff8d 	bl	800272c <HAL_MspInit>
}
 8003812:	2000      	movs	r0, #0
 8003814:	bd08      	pop	{r3, pc}
	...

08003818 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003818:	4a03      	ldr	r2, [pc, #12]	; (8003828 <HAL_IncTick+0x10>)
 800381a:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_IncTick+0x14>)
 800381c:	6811      	ldr	r1, [r2, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	440b      	add	r3, r1
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20006410 	.word	0x20006410
 800382c:	2000000c 	.word	0x2000000c

08003830 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003830:	4b01      	ldr	r3, [pc, #4]	; (8003838 <HAL_GetTick+0x8>)
 8003832:	6818      	ldr	r0, [r3, #0]
}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20006410 	.word	0x20006410

0800383c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800383c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800383e:	4604      	mov	r4, r0
 8003840:	2800      	cmp	r0, #0
 8003842:	f000 809b 	beq.w	800397c <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003846:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003848:	b925      	cbnz	r5, 8003854 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800384a:	f7fe ff97 	bl	800277c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800384e:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003850:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003856:	06db      	lsls	r3, r3, #27
 8003858:	f100 808e 	bmi.w	8003978 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800385c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800385e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003862:	f023 0302 	bic.w	r3, r3, #2
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800386c:	4b44      	ldr	r3, [pc, #272]	; (8003980 <HAL_ADC_Init+0x144>)
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003874:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	6861      	ldr	r1, [r4, #4]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800387e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003880:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003890:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003892:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800389a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038a0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038a2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038b0:	4934      	ldr	r1, [pc, #208]	; (8003984 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038b2:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038b6:	428a      	cmp	r2, r1
 80038b8:	d052      	beq.n	8003960 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038ba:	6899      	ldr	r1, [r3, #8]
 80038bc:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80038c0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038c2:	6899      	ldr	r1, [r3, #8]
 80038c4:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038d6:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038d8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038da:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038dc:	f022 0202 	bic.w	r2, r2, #2
 80038e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80038e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ea:	f894 2020 	ldrb.w	r2, [r4, #32]
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	d03e      	beq.n	8003970 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f2:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038fa:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038fc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003904:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800390c:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 800390e:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003912:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003914:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003918:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003922:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800392e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003936:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003948:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800394a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800394c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003958:	2300      	movs	r3, #0
 800395a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800395e:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800396e:	e7b2      	b.n	80038d6 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003976:	e7c9      	b.n	800390c <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8003978:	2001      	movs	r0, #1
 800397a:	e7ed      	b.n	8003958 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 800397c:	2001      	movs	r0, #1
 800397e:	e7ee      	b.n	800395e <HAL_ADC_Init+0x122>
 8003980:	40012300 	.word	0x40012300
 8003984:	0f000001 	.word	0x0f000001

08003988 <HAL_ADC_ConvCpltCallback>:
 8003988:	4770      	bx	lr

0800398a <HAL_ADC_LevelOutOfWindowCallback>:
 800398a:	4770      	bx	lr

0800398c <HAL_ADC_ErrorCallback>:
 800398c:	4770      	bx	lr

0800398e <HAL_ADC_IRQHandler>:
{
 800398e:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003990:	6803      	ldr	r3, [r0, #0]
{
 8003992:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003994:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003996:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8003998:	078d      	lsls	r5, r1, #30
 800399a:	d52b      	bpl.n	80039f4 <HAL_ADC_IRQHandler+0x66>
 800399c:	0690      	lsls	r0, r2, #26
 800399e:	d529      	bpl.n	80039f4 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039a2:	06d1      	lsls	r1, r2, #27
 80039a4:	d403      	bmi.n	80039ae <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80039a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ac:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80039b4:	d117      	bne.n	80039e6 <HAL_ADC_IRQHandler+0x58>
 80039b6:	69a2      	ldr	r2, [r4, #24]
 80039b8:	b9aa      	cbnz	r2, 80039e6 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039bc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80039c0:	d002      	beq.n	80039c8 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039c2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039c4:	0552      	lsls	r2, r2, #21
 80039c6:	d40e      	bmi.n	80039e6 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	f022 0220 	bic.w	r2, r2, #32
 80039ce:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039da:	04db      	lsls	r3, r3, #19
 80039dc:	d403      	bmi.n	80039e6 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff ffce 	bl	8003988 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	f06f 0212 	mvn.w	r2, #18
 80039f2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80039f8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80039fa:	074d      	lsls	r5, r1, #29
 80039fc:	d532      	bpl.n	8003a64 <HAL_ADC_IRQHandler+0xd6>
 80039fe:	0610      	lsls	r0, r2, #24
 8003a00:	d530      	bpl.n	8003a64 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a04:	06d1      	lsls	r1, r2, #27
 8003a06:	d403      	bmi.n	8003a10 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a0e:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8003a16:	d11e      	bne.n	8003a56 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a1a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8003a1e:	d002      	beq.n	8003a26 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a20:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003a22:	0552      	lsls	r2, r2, #21
 8003a24:	d417      	bmi.n	8003a56 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a26:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a28:	0555      	lsls	r5, r2, #21
 8003a2a:	d414      	bmi.n	8003a56 <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003a2c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a2e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8003a32:	d110      	bne.n	8003a56 <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003a34:	69a2      	ldr	r2, [r4, #24]
 8003a36:	b972      	cbnz	r2, 8003a56 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a3e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a46:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a4a:	05d8      	lsls	r0, r3, #23
 8003a4c:	d403      	bmi.n	8003a56 <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a56:	4620      	mov	r0, r4
 8003a58:	f000 f8d2 	bl	8003c00 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	f06f 020c 	mvn.w	r2, #12
 8003a62:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003a68:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8003a6a:	07c9      	lsls	r1, r1, #31
 8003a6c:	d50f      	bpl.n	8003a8e <HAL_ADC_IRQHandler+0x100>
 8003a6e:	0655      	lsls	r5, r2, #25
 8003a70:	d50d      	bpl.n	8003a8e <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	07d8      	lsls	r0, r3, #31
 8003a76:	d50a      	bpl.n	8003a8e <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a78:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a7a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a82:	f7ff ff82 	bl	800398a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	f06f 0201 	mvn.w	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003a92:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8003a94:	0689      	lsls	r1, r1, #26
 8003a96:	d50d      	bpl.n	8003ab4 <HAL_ADC_IRQHandler+0x126>
 8003a98:	0152      	lsls	r2, r2, #5
 8003a9a:	d50b      	bpl.n	8003ab4 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a9e:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 8003aa2:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003aa4:	f042 0202 	orr.w	r2, r2, #2
 8003aa8:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003aaa:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8003aac:	f7ff ff6e 	bl	800398c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	601d      	str	r5, [r3, #0]
}
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
	...

08003ab8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8003ab8:	2300      	movs	r3, #0
{
 8003aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8003abc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003abe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d074      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0xf8>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ac6:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8003ac8:	2301      	movs	r3, #1
 8003aca:	688a      	ldr	r2, [r1, #8]
 8003acc:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ace:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8003ad0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003ad4:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8003ad8:	6803      	ldr	r3, [r0, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ada:	d931      	bls.n	8003b40 <HAL_ADC_ConfigChannel+0x88>
 8003adc:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8003ae0:	d02e      	beq.n	8003b40 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ae2:	3c1e      	subs	r4, #30
 8003ae4:	f04f 0c07 	mov.w	ip, #7
 8003ae8:	68df      	ldr	r7, [r3, #12]
 8003aea:	fa0c fc04 	lsl.w	ip, ip, r4
 8003aee:	ea27 070c 	bic.w	r7, r7, ip
 8003af2:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003af4:	4f3d      	ldr	r7, [pc, #244]	; (8003bec <HAL_ADC_ConfigChannel+0x134>)
 8003af6:	42bd      	cmp	r5, r7
 8003af8:	d11d      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003afa:	68dc      	ldr	r4, [r3, #12]
 8003afc:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b00:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8003b02:	6849      	ldr	r1, [r1, #4]
 8003b04:	2906      	cmp	r1, #6
 8003b06:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8003b0a:	d827      	bhi.n	8003b5c <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b0c:	3a05      	subs	r2, #5
 8003b0e:	241f      	movs	r4, #31
 8003b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b12:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b14:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b18:	ea21 0104 	bic.w	r1, r1, r4
 8003b1c:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b20:	430a      	orrs	r2, r1
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b24:	4a32      	ldr	r2, [pc, #200]	; (8003bf0 <HAL_ADC_ConfigChannel+0x138>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d034      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0xdc>
  __HAL_UNLOCK(hadc);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003b30:	4618      	mov	r0, r3
}
 8003b32:	b003      	add	sp, #12
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b36:	68df      	ldr	r7, [r3, #12]
 8003b38:	fa02 f404 	lsl.w	r4, r2, r4
 8003b3c:	433c      	orrs	r4, r7
 8003b3e:	e7df      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b40:	f04f 0c07 	mov.w	ip, #7
 8003b44:	691f      	ldr	r7, [r3, #16]
 8003b46:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b4a:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b4e:	ea27 070c 	bic.w	r7, r7, ip
 8003b52:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b54:	691f      	ldr	r7, [r3, #16]
 8003b56:	433c      	orrs	r4, r7
 8003b58:	611c      	str	r4, [r3, #16]
 8003b5a:	e7d2      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8003b5c:	290c      	cmp	r1, #12
 8003b5e:	f04f 011f 	mov.w	r1, #31
 8003b62:	d80b      	bhi.n	8003b7c <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b64:	3a23      	subs	r2, #35	; 0x23
 8003b66:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003b68:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b6a:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b6e:	ea24 0101 	bic.w	r1, r4, r1
 8003b72:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b76:	430a      	orrs	r2, r1
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7a:	e7d3      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b7c:	3a41      	subs	r2, #65	; 0x41
 8003b7e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003b80:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b82:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b86:	ea24 0101 	bic.w	r1, r4, r1
 8003b8a:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b92:	e7c7      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x6c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b94:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0xfc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <HAL_ADC_ConfigChannel+0x13c>)
 8003b9c:	6853      	ldr	r3, [r2, #4]
 8003b9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    ADC->CCR |= ADC_CCR_VBATE;
 8003ba2:	6053      	str	r3, [r2, #4]
 8003ba4:	e7c1      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x72>
 8003ba6:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <HAL_ADC_ConfigChannel+0x13c>)
 8003ba8:	6853      	ldr	r3, [r2, #4]
 8003baa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bae:	e7f8      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0xea>
  __HAL_LOCK(hadc);
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	e7be      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x7a>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bb4:	2d12      	cmp	r5, #18
 8003bb6:	d0f6      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_ADC_ConfigChannel+0x134>)
 8003bba:	429d      	cmp	r5, r3
 8003bbc:	d001      	beq.n	8003bc2 <HAL_ADC_ConfigChannel+0x10a>
 8003bbe:	2d11      	cmp	r5, #17
 8003bc0:	d1b3      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x72>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bc2:	490c      	ldr	r1, [pc, #48]	; (8003bf4 <HAL_ADC_ConfigChannel+0x13c>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bc4:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bc6:	684a      	ldr	r2, [r1, #4]
 8003bc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bcc:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bce:	d1ac      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x72>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_ADC_ConfigChannel+0x140>)
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_ADC_ConfigChannel+0x144>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bda:	230a      	movs	r3, #10
 8003bdc:	4353      	muls	r3, r2
        counter--;
 8003bde:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8003be0:	9b01      	ldr	r3, [sp, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0a1      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x72>
        counter--;
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	e7f8      	b.n	8003bde <HAL_ADC_ConfigChannel+0x126>
 8003bec:	10000012 	.word	0x10000012
 8003bf0:	40012000 	.word	0x40012000
 8003bf4:	40012300 	.word	0x40012300
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	000f4240 	.word	0x000f4240

08003c00 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c04:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c06:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c08:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003c1e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003c20:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c2a:	b570      	push	{r4, r5, r6, lr}
 8003c2c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c32:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c36:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c3c:	2d04      	cmp	r5, #4
 8003c3e:	bf28      	it	cs
 8003c40:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c42:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c48:	bf8c      	ite	hi
 8003c4a:	3c03      	subhi	r4, #3
 8003c4c:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	ea21 0303 	bic.w	r3, r1, r3
 8003c54:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c58:	fa06 f404 	lsl.w	r4, r6, r4
 8003c5c:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c60:	ea43 0304 	orr.w	r3, r3, r4
 8003c64:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003c68:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	db06      	blt.n	8003c7a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003c70:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003c74:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7a:	f000 000f 	and.w	r0, r0, #15
 8003c7e:	4a02      	ldr	r2, [pc, #8]	; (8003c88 <HAL_NVIC_SetPriority+0x60>)
 8003c80:	5413      	strb	r3, [r2, r0]
 8003c82:	e7f9      	b.n	8003c78 <HAL_NVIC_SetPriority+0x50>
 8003c84:	e000ed00 	.word	0xe000ed00
 8003c88:	e000ed14 	.word	0xe000ed14

08003c8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	db08      	blt.n	8003ca2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c90:	0942      	lsrs	r2, r0, #5
 8003c92:	2301      	movs	r3, #1
 8003c94:	f000 001f 	and.w	r0, r0, #31
 8003c98:	fa03 f000 	lsl.w	r0, r3, r0
 8003c9c:	4b01      	ldr	r3, [pc, #4]	; (8003ca4 <HAL_NVIC_EnableIRQ+0x18>)
 8003c9e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003ca2:	4770      	bx	lr
 8003ca4:	e000e100 	.word	0xe000e100

08003ca8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca8:	3801      	subs	r0, #1
 8003caa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003cae:	d20a      	bcs.n	8003cc6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	21f0      	movs	r1, #240	; 0xf0
 8003cb4:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cbe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	e000e010 	.word	0xe000e010
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003cd6:	0896      	lsrs	r6, r2, #2
 8003cd8:	460b      	mov	r3, r1
 8003cda:	6805      	ldr	r5, [r0, #0]
 8003cdc:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8003ce0:	42bb      	cmp	r3, r7
 8003ce2:	d108      	bne.n	8003cf6 <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003ce4:	f012 0203 	ands.w	r2, r2, #3
 8003ce8:	d01e      	beq.n	8003d28 <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 8003cea:	2a01      	cmp	r2, #1
 8003cec:	d114      	bne.n	8003d18 <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003cee:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003cf2:	702b      	strb	r3, [r5, #0]
 8003cf4:	e018      	b.n	8003d28 <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003cf6:	785c      	ldrb	r4, [r3, #1]
 8003cf8:	3304      	adds	r3, #4
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003cfa:	f813 cc04 	ldrb.w	ip, [r3, #-4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003cfe:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003d00:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003d04:	f813 cc01 	ldrb.w	ip, [r3, #-1]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003d08:	ea44 040c 	orr.w	r4, r4, ip
 8003d0c:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 8003d10:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003d14:	602c      	str	r4, [r5, #0]
 8003d16:	e7e3      	b.n	8003ce0 <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 8003d18:	2a02      	cmp	r2, #2
 8003d1a:	d108      	bne.n	8003d2e <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003d1c:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 8003d26:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d28:	6803      	ldr	r3, [r0, #0]
 8003d2a:	6818      	ldr	r0, [r3, #0]
}
 8003d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003d2e:	785a      	ldrb	r2, [r3, #1]
 8003d30:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 8003d34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 8003d38:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003d3a:	789b      	ldrb	r3, [r3, #2]
 8003d3c:	e7d9      	b.n	8003cf2 <CRC_Handle_8+0x1e>

08003d3e <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003d3e:	b570      	push	{r4, r5, r6, lr}
 8003d40:	6800      	ldr	r0, [r0, #0]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003d42:	0855      	lsrs	r5, r2, #1
 8003d44:	2300      	movs	r3, #0
 8003d46:	429d      	cmp	r5, r3
 8003d48:	d106      	bne.n	8003d58 <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 8003d4a:	07d3      	lsls	r3, r2, #31
 8003d4c:	d502      	bpl.n	8003d54 <CRC_Handle_16+0x16>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8003d4e:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 8003d52:	8003      	strh	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003d54:	6800      	ldr	r0, [r0, #0]
}
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003d58:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8003d5c:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003d60:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003d62:	8864      	ldrh	r4, [r4, #2]
 8003d64:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003d68:	6004      	str	r4, [r0, #0]
 8003d6a:	e7ec      	b.n	8003d46 <CRC_Handle_16+0x8>

08003d6c <HAL_CRC_MspInit>:
}
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_CRC_Init>:
{
 8003d70:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8003d72:	4604      	mov	r4, r0
 8003d74:	b908      	cbnz	r0, 8003d7a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
}
 8003d78:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d7a:	7f43      	ldrb	r3, [r0, #29]
 8003d7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d80:	b913      	cbnz	r3, 8003d88 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8003d82:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8003d84:	f7ff fff2 	bl	8003d6c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003d8c:	7923      	ldrb	r3, [r4, #4]
 8003d8e:	b9e3      	cbnz	r3, 8003dca <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <HAL_CRC_Init+0x70>)
 8003d94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	f022 0218 	bic.w	r2, r2, #24
 8003d9c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d9e:	7962      	ldrb	r2, [r4, #5]
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	b9d2      	cbnz	r2, 8003dda <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003da4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003da8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8003daa:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	6961      	ldr	r1, [r4, #20]
 8003db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003db6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003db8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8003dc8:	e7d6      	b.n	8003d78 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003dca:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f000 f82c 	bl	8003e2c <HAL_CRCEx_Polynomial_Set>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d0e2      	beq.n	8003d9e <HAL_CRC_Init+0x2e>
 8003dd8:	e7cd      	b.n	8003d76 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003dda:	6922      	ldr	r2, [r4, #16]
 8003ddc:	e7e4      	b.n	8003da8 <HAL_CRC_Init+0x38>
 8003dde:	bf00      	nop
 8003de0:	04c11db7 	.word	0x04c11db7

08003de4 <HAL_CRC_Calculate>:
{
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003de6:	2502      	movs	r5, #2
{
 8003de8:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003dea:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8003dec:	6805      	ldr	r5, [r0, #0]
 8003dee:	68af      	ldr	r7, [r5, #8]
 8003df0:	f047 0701 	orr.w	r7, r7, #1
 8003df4:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 8003df6:	6a07      	ldr	r7, [r0, #32]
 8003df8:	2f02      	cmp	r7, #2
 8003dfa:	d012      	beq.n	8003e22 <HAL_CRC_Calculate+0x3e>
 8003dfc:	2f03      	cmp	r7, #3
 8003dfe:	d004      	beq.n	8003e0a <HAL_CRC_Calculate+0x26>
 8003e00:	2f01      	cmp	r7, #1
 8003e02:	d111      	bne.n	8003e28 <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003e04:	f7ff ff66 	bl	8003cd4 <CRC_Handle_8>
      break;
 8003e08:	e004      	b.n	8003e14 <HAL_CRC_Calculate+0x30>
 8003e0a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8003e0e:	42b1      	cmp	r1, r6
 8003e10:	d103      	bne.n	8003e1a <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 8003e12:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8003e14:	2301      	movs	r3, #1
 8003e16:	7763      	strb	r3, [r4, #29]
}
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 8003e1a:	f851 3b04 	ldr.w	r3, [r1], #4
 8003e1e:	602b      	str	r3, [r5, #0]
 8003e20:	e7f5      	b.n	8003e0e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003e22:	f7ff ff8c 	bl	8003d3e <CRC_Handle_16>
      break;
 8003e26:	e7f5      	b.n	8003e14 <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e7f3      	b.n	8003e14 <HAL_CRC_Calculate+0x30>

08003e2c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e2c:	231f      	movs	r3, #31
{
 8003e2e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e30:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003e34:	d306      	bcc.n	8003e44 <HAL_CRCEx_Polynomial_Set+0x18>
 8003e36:	fa21 f403 	lsr.w	r4, r1, r3
 8003e3a:	07e4      	lsls	r4, r4, #31
 8003e3c:	d5f8      	bpl.n	8003e30 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8003e3e:	2a08      	cmp	r2, #8
 8003e40:	d014      	beq.n	8003e6c <HAL_CRCEx_Polynomial_Set+0x40>
 8003e42:	d802      	bhi.n	8003e4a <HAL_CRCEx_Polynomial_Set+0x1e>
 8003e44:	b13a      	cbz	r2, 8003e56 <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e46:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8003e48:	e00d      	b.n	8003e66 <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 8003e4a:	2a10      	cmp	r2, #16
 8003e4c:	d00c      	beq.n	8003e68 <HAL_CRCEx_Polynomial_Set+0x3c>
 8003e4e:	2a18      	cmp	r2, #24
 8003e50:	d1f9      	bne.n	8003e46 <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 8003e52:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e54:	d8f7      	bhi.n	8003e46 <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e56:	6800      	ldr	r0, [r0, #0]
 8003e58:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e5a:	6883      	ldr	r3, [r0, #8]
 8003e5c:	f023 0318 	bic.w	r3, r3, #24
 8003e60:	431a      	orrs	r2, r3
 8003e62:	6082      	str	r2, [r0, #8]
 8003e64:	2000      	movs	r0, #0
}
 8003e66:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e68:	2b07      	cmp	r3, #7
 8003e6a:	e7f3      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e6c:	2b0f      	cmp	r3, #15
 8003e6e:	e7f1      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0x28>

08003e70 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e70:	6803      	ldr	r3, [r0, #0]
 8003e72:	2118      	movs	r1, #24
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e7a:	3a10      	subs	r2, #16
 8003e7c:	f023 0303 	bic.w	r3, r3, #3
 8003e80:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e84:	4904      	ldr	r1, [pc, #16]	; (8003e98 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8003e86:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e88:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e8a:	bf88      	it	hi
 8003e8c:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e8e:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e90:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8003e92:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	0800cf0c 	.word	0x0800cf0c

08003e9c <HAL_DMA_Init>:
{
 8003e9c:	b570      	push	{r4, r5, r6, lr}
 8003e9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7ff fcc6 	bl	8003830 <HAL_GetTick>
 8003ea4:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003ea6:	2c00      	cmp	r4, #0
 8003ea8:	d071      	beq.n	8003f8e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8003eaa:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8003eac:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003eae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec0:	6821      	ldr	r1, [r4, #0]
 8003ec2:	680b      	ldr	r3, [r1, #0]
 8003ec4:	07d8      	lsls	r0, r3, #31
 8003ec6:	d43c      	bmi.n	8003f42 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8003ec8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eca:	4d32      	ldr	r5, [pc, #200]	; (8003f94 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ecc:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ece:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	68e2      	ldr	r2, [r4, #12]
 8003ed8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eda:	6922      	ldr	r2, [r4, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	6962      	ldr	r2, [r4, #20]
 8003ee0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	69e2      	ldr	r2, [r4, #28]
 8003ee4:	4303      	orrs	r3, r0
 8003ee6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee8:	6a22      	ldr	r2, [r4, #32]
 8003eea:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003eee:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ef4:	bf02      	ittt	eq
 8003ef6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8003efa:	4335      	orreq	r5, r6
 8003efc:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003efe:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8003f00:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003f02:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f04:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003f08:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f0c:	d10b      	bne.n	8003f26 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8003f0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f10:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003f12:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f14:	b13d      	cbz	r5, 8003f26 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f16:	b9f8      	cbnz	r0, 8003f58 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8003f18:	2a01      	cmp	r2, #1
 8003f1a:	d02d      	beq.n	8003f78 <HAL_DMA_Init+0xdc>
 8003f1c:	d301      	bcc.n	8003f22 <HAL_DMA_Init+0x86>
 8003f1e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f20:	d101      	bne.n	8003f26 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f22:	01ea      	lsls	r2, r5, #7
 8003f24:	d42b      	bmi.n	8003f7e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8003f26:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ffa1 	bl	8003e70 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003f30:	233f      	movs	r3, #63	; 0x3f
 8003f32:	4093      	lsls	r3, r2
 8003f34:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f36:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003f38:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003f40:	e009      	b.n	8003f56 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f42:	f7ff fc75 	bl	8003830 <HAL_GetTick>
 8003f46:	1b40      	subs	r0, r0, r5
 8003f48:	2805      	cmp	r0, #5
 8003f4a:	d9b9      	bls.n	8003ec0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f4c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f4e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f50:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003f52:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f58:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003f5c:	d113      	bne.n	8003f86 <HAL_DMA_Init+0xea>
    switch (tmp)
 8003f5e:	2a03      	cmp	r2, #3
 8003f60:	d8e1      	bhi.n	8003f26 <HAL_DMA_Init+0x8a>
 8003f62:	a001      	add	r0, pc, #4	; (adr r0, 8003f68 <HAL_DMA_Init+0xcc>)
 8003f64:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003f68:	08003f7f 	.word	0x08003f7f
 8003f6c:	08003f23 	.word	0x08003f23
 8003f70:	08003f7f 	.word	0x08003f7f
 8003f74:	08003f79 	.word	0x08003f79
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f78:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003f7c:	d1d3      	bne.n	8003f26 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f7e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8003f80:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f82:	6563      	str	r3, [r4, #84]	; 0x54
 8003f84:	e7e5      	b.n	8003f52 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8003f86:	2a02      	cmp	r2, #2
 8003f88:	d9f9      	bls.n	8003f7e <HAL_DMA_Init+0xe2>
 8003f8a:	2a03      	cmp	r2, #3
 8003f8c:	e7c8      	b.n	8003f20 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8003f8e:	2001      	movs	r0, #1
 8003f90:	e7e1      	b.n	8003f56 <HAL_DMA_Init+0xba>
 8003f92:	bf00      	nop
 8003f94:	e010803f 	.word	0xe010803f

08003f98 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f98:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d003      	beq.n	8003fa8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8003fa8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8003faa:	2305      	movs	r3, #5
 8003fac:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 8003fb0:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	4770      	bx	lr

08003fbc <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8003fbc:	2300      	movs	r3, #0
{
 8003fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8003fc0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8003fc4:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <HAL_DMA_IRQHandler+0x178>)
{
 8003fc6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fc8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8003fca:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fcc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8003fce:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	4232      	tst	r2, r6
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003fd6:	6801      	ldr	r1, [r0, #0]
 8003fd8:	6808      	ldr	r0, [r1, #0]
 8003fda:	0740      	lsls	r0, r0, #29
 8003fdc:	d508      	bpl.n	8003ff0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fde:	6808      	ldr	r0, [r1, #0]
 8003fe0:	f020 0004 	bic.w	r0, r0, #4
 8003fe4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fe6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fe8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	4232      	tst	r2, r6
 8003ff6:	d008      	beq.n	800400a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ff8:	6821      	ldr	r1, [r4, #0]
 8003ffa:	6949      	ldr	r1, [r1, #20]
 8003ffc:	0609      	lsls	r1, r1, #24
 8003ffe:	d504      	bpl.n	800400a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004000:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004002:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004004:	f042 0202 	orr.w	r2, r2, #2
 8004008:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800400a:	2204      	movs	r2, #4
 800400c:	409a      	lsls	r2, r3
 800400e:	4232      	tst	r2, r6
 8004010:	d008      	beq.n	8004024 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004012:	6821      	ldr	r1, [r4, #0]
 8004014:	6809      	ldr	r1, [r1, #0]
 8004016:	0788      	lsls	r0, r1, #30
 8004018:	d504      	bpl.n	8004024 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800401a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800401c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800401e:	f042 0204 	orr.w	r2, r2, #4
 8004022:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004024:	2210      	movs	r2, #16
 8004026:	409a      	lsls	r2, r3
 8004028:	4232      	tst	r2, r6
 800402a:	d010      	beq.n	800404e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	0709      	lsls	r1, r1, #28
 8004032:	d50c      	bpl.n	800404e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004034:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	0350      	lsls	r0, r2, #13
 800403a:	d537      	bpl.n	80040ac <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0319      	lsls	r1, r3, #12
 8004040:	d401      	bmi.n	8004046 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8004042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004044:	e000      	b.n	8004048 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004046:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8004048:	b10b      	cbz	r3, 800404e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800404a:	4620      	mov	r0, r4
 800404c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800404e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004050:	2220      	movs	r2, #32
 8004052:	408a      	lsls	r2, r1
 8004054:	4232      	tst	r2, r6
 8004056:	d03a      	beq.n	80040ce <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	06c6      	lsls	r6, r0, #27
 800405e:	d536      	bpl.n	80040ce <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004060:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004062:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004066:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004068:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800406a:	d127      	bne.n	80040bc <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800406c:	f022 0216 	bic.w	r2, r2, #22
 8004070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004078:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800407a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800407c:	b90a      	cbnz	r2, 8004082 <HAL_DMA_IRQHandler+0xc6>
 800407e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004080:	b11a      	cbz	r2, 800408a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	f022 0208 	bic.w	r2, r2, #8
 8004088:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408a:	233f      	movs	r3, #63	; 0x3f
 800408c:	408b      	lsls	r3, r1
 800408e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8004090:	2300      	movs	r3, #0
 8004092:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004096:	2301      	movs	r3, #1
 8004098:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800409c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d045      	beq.n	800412e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80040a2:	4620      	mov	r0, r4
}
 80040a4:	b003      	add	sp, #12
 80040a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80040aa:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	05d2      	lsls	r2, r2, #23
 80040b0:	d4c7      	bmi.n	8004042 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e7c2      	b.n	8004042 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040bc:	0350      	lsls	r0, r2, #13
 80040be:	d527      	bpl.n	8004110 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0319      	lsls	r1, r3, #12
 80040c4:	d431      	bmi.n	800412a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80040c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80040c8:	b10b      	cbz	r3, 80040ce <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80040ca:	4620      	mov	r0, r4
 80040cc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040d0:	b36b      	cbz	r3, 800412e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040d4:	07da      	lsls	r2, r3, #31
 80040d6:	d519      	bpl.n	800410c <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d8:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80040da:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80040dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80040e0:	6813      	ldr	r3, [r2, #0]
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 80040e8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80040ec:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80040f0:	9b01      	ldr	r3, [sp, #4]
 80040f2:	3301      	adds	r3, #1
 80040f4:	42bb      	cmp	r3, r7
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	d802      	bhi.n	8004100 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040fa:	6813      	ldr	r3, [r2, #0]
 80040fc:	07db      	lsls	r3, r3, #31
 80040fe:	d4f7      	bmi.n	80040f0 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8004100:	2300      	movs	r3, #0
 8004102:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004106:	2301      	movs	r3, #1
 8004108:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800410c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800410e:	e7c6      	b.n	800409e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004116:	d108      	bne.n	800412a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	f021 0110 	bic.w	r1, r1, #16
 800411e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004120:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8004122:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004126:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800412a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800412c:	e7cc      	b.n	80040c8 <HAL_DMA_IRQHandler+0x10c>
}
 800412e:	b003      	add	sp, #12
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	bf00      	nop
 8004134:	20000000 	.word	0x20000000

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800413c:	680b      	ldr	r3, [r1, #0]
{
 800413e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004140:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042e8 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004144:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004146:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004148:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <HAL_GPIO_Init+0x1a8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800414a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80042ec <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 800414e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004150:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8004152:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004154:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8004156:	42ac      	cmp	r4, r5
 8004158:	f040 80ac 	bne.w	80042b4 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800415c:	684c      	ldr	r4, [r1, #4]
 800415e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004162:	2603      	movs	r6, #3
 8004164:	f024 0c10 	bic.w	ip, r4, #16
 8004168:	fa06 f60e 	lsl.w	r6, r6, lr
 800416c:	f10c 37ff 	add.w	r7, ip, #4294967295
 8004170:	43f6      	mvns	r6, r6
 8004172:	2f01      	cmp	r7, #1
 8004174:	d811      	bhi.n	800419a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 8004176:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004178:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800417c:	68cf      	ldr	r7, [r1, #12]
 800417e:	fa07 f70e 	lsl.w	r7, r7, lr
 8004182:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004186:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004188:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800418a:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800418e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8004192:	409f      	lsls	r7, r3
 8004194:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8004198:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800419a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800419c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041a0:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80041a4:	688f      	ldr	r7, [r1, #8]
 80041a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80041aa:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 80041ae:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b0:	d116      	bne.n	80041e0 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 80041b2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041b6:	f003 0b07 	and.w	fp, r3, #7
 80041ba:	f04f 0c0f 	mov.w	ip, #15
 80041be:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80041c2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80041c6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041ca:	fa0c fc0b 	lsl.w	ip, ip, fp
 80041ce:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80041d2:	690f      	ldr	r7, [r1, #16]
 80041d4:	fa07 f70b 	lsl.w	r7, r7, fp
 80041d8:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 80041dc:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80041e0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041e2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041e4:	f004 0703 	and.w	r7, r4, #3
 80041e8:	fa07 fe0e 	lsl.w	lr, r7, lr
 80041ec:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80041f0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f2:	00e6      	lsls	r6, r4, #3
 80041f4:	d55e      	bpl.n	80042b4 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f6:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80041fa:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041fe:	f003 0c03 	and.w	ip, r3, #3
 8004202:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004206:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800420a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800420e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004212:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8004216:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800421a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800421e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8004222:	9603      	str	r6, [sp, #12]
 8004224:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004226:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 800422a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800422e:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004232:	4e2c      	ldr	r6, [pc, #176]	; (80042e4 <HAL_GPIO_Init+0x1ac>)
 8004234:	42b0      	cmp	r0, r6
 8004236:	d044      	beq.n	80042c2 <HAL_GPIO_Init+0x18a>
 8004238:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800423c:	42b0      	cmp	r0, r6
 800423e:	d042      	beq.n	80042c6 <HAL_GPIO_Init+0x18e>
 8004240:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004244:	42b0      	cmp	r0, r6
 8004246:	d040      	beq.n	80042ca <HAL_GPIO_Init+0x192>
 8004248:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800424c:	42b0      	cmp	r0, r6
 800424e:	d03e      	beq.n	80042ce <HAL_GPIO_Init+0x196>
 8004250:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004254:	42b0      	cmp	r0, r6
 8004256:	d03c      	beq.n	80042d2 <HAL_GPIO_Init+0x19a>
 8004258:	4548      	cmp	r0, r9
 800425a:	d03c      	beq.n	80042d6 <HAL_GPIO_Init+0x19e>
 800425c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004260:	42b0      	cmp	r0, r6
 8004262:	d03a      	beq.n	80042da <HAL_GPIO_Init+0x1a2>
 8004264:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004268:	42b0      	cmp	r0, r6
 800426a:	bf14      	ite	ne
 800426c:	2608      	movne	r6, #8
 800426e:	2607      	moveq	r6, #7
 8004270:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004274:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004278:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800427c:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800427e:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8004282:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004284:	bf0c      	ite	eq
 8004286:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004288:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800428a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800428e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8004290:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004292:	bf0c      	ite	eq
 8004294:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004296:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004298:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800429c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800429e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80042a0:	bf0c      	ite	eq
 80042a2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80042a4:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042a6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80042a8:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80042aa:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80042ac:	bf54      	ite	pl
 80042ae:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80042b0:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80042b2:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042b4:	3301      	adds	r3, #1
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	f47f af49 	bne.w	800414e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80042bc:	b005      	add	sp, #20
 80042be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042c2:	2600      	movs	r6, #0
 80042c4:	e7d4      	b.n	8004270 <HAL_GPIO_Init+0x138>
 80042c6:	2601      	movs	r6, #1
 80042c8:	e7d2      	b.n	8004270 <HAL_GPIO_Init+0x138>
 80042ca:	2602      	movs	r6, #2
 80042cc:	e7d0      	b.n	8004270 <HAL_GPIO_Init+0x138>
 80042ce:	2603      	movs	r6, #3
 80042d0:	e7ce      	b.n	8004270 <HAL_GPIO_Init+0x138>
 80042d2:	2604      	movs	r6, #4
 80042d4:	e7cc      	b.n	8004270 <HAL_GPIO_Init+0x138>
 80042d6:	2605      	movs	r6, #5
 80042d8:	e7ca      	b.n	8004270 <HAL_GPIO_Init+0x138>
 80042da:	2606      	movs	r6, #6
 80042dc:	e7c8      	b.n	8004270 <HAL_GPIO_Init+0x138>
 80042de:	bf00      	nop
 80042e0:	40013c00 	.word	0x40013c00
 80042e4:	40020000 	.word	0x40020000
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40021400 	.word	0x40021400

080042f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f0:	b10a      	cbz	r2, 80042f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042f2:	6181      	str	r1, [r0, #24]
  }
}
 80042f4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042f6:	0409      	lsls	r1, r1, #16
 80042f8:	e7fb      	b.n	80042f2 <HAL_GPIO_WritePin+0x2>
	...

080042fc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80042fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004302:	4c19      	ldr	r4, [pc, #100]	; (8004368 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004304:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800431c:	f7ff fa88 	bl	8003830 <HAL_GetTick>
 8004320:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	03da      	lsls	r2, r3, #15
 8004326:	d50c      	bpl.n	8004342 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004330:	f7ff fa7e 	bl	8003830 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004334:	4c0c      	ldr	r4, [pc, #48]	; (8004368 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8004336:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	039b      	lsls	r3, r3, #14
 800433c:	d50a      	bpl.n	8004354 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800433e:	2000      	movs	r0, #0
 8004340:	e006      	b.n	8004350 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004342:	f7ff fa75 	bl	8003830 <HAL_GetTick>
 8004346:	1b40      	subs	r0, r0, r5
 8004348:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800434c:	d9e9      	bls.n	8004322 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800434e:	2003      	movs	r0, #3
}
 8004350:	b003      	add	sp, #12
 8004352:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004354:	f7ff fa6c 	bl	8003830 <HAL_GetTick>
 8004358:	1b40      	subs	r0, r0, r5
 800435a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800435e:	d9eb      	bls.n	8004338 <HAL_PWREx_EnableOverDrive+0x3c>
 8004360:	e7f5      	b.n	800434e <HAL_PWREx_EnableOverDrive+0x52>
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40007000 	.word	0x40007000

0800436c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004370:	4604      	mov	r4, r0
 8004372:	b908      	cbnz	r0, 8004378 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004374:	2001      	movs	r0, #1
 8004376:	e03f      	b.n	80043f8 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004378:	6803      	ldr	r3, [r0, #0]
 800437a:	07d8      	lsls	r0, r3, #31
 800437c:	d410      	bmi.n	80043a0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	0799      	lsls	r1, r3, #30
 8004382:	d460      	bmi.n	8004446 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	0719      	lsls	r1, r3, #28
 8004388:	f100 80a5 	bmi.w	80044d6 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	075a      	lsls	r2, r3, #29
 8004390:	f100 80c6 	bmi.w	8004520 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004394:	69a0      	ldr	r0, [r4, #24]
 8004396:	2800      	cmp	r0, #0
 8004398:	f040 8130 	bne.w	80045fc <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 800439c:	2000      	movs	r0, #0
 800439e:	e02b      	b.n	80043f8 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043a0:	4b94      	ldr	r3, [pc, #592]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	f002 020c 	and.w	r2, r2, #12
 80043a8:	2a04      	cmp	r2, #4
 80043aa:	d007      	beq.n	80043bc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	f002 020c 	and.w	r2, r2, #12
 80043b2:	2a08      	cmp	r2, #8
 80043b4:	d10a      	bne.n	80043cc <HAL_RCC_OscConfig+0x60>
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	025a      	lsls	r2, r3, #9
 80043ba:	d507      	bpl.n	80043cc <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b8d      	ldr	r3, [pc, #564]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	039b      	lsls	r3, r3, #14
 80043c2:	d5dc      	bpl.n	800437e <HAL_RCC_OscConfig+0x12>
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1d9      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
 80043ca:	e7d3      	b.n	8004374 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	6863      	ldr	r3, [r4, #4]
 80043ce:	4d89      	ldr	r5, [pc, #548]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d113      	bne.n	80043fe <HAL_RCC_OscConfig+0x92>
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043de:	f7ff fa27 	bl	8003830 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4d84      	ldr	r5, [pc, #528]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80043e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	039f      	lsls	r7, r3, #14
 80043ea:	d4c8      	bmi.n	800437e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7ff fa20 	bl	8003830 <HAL_GetTick>
 80043f0:	1b80      	subs	r0, r0, r6
 80043f2:	2864      	cmp	r0, #100	; 0x64
 80043f4:	d9f7      	bls.n	80043e6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80043f6:	2003      	movs	r0, #3
}
 80043f8:	b002      	add	sp, #8
 80043fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fe:	b99b      	cbnz	r3, 8004428 <HAL_RCC_OscConfig+0xbc>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004410:	f7ff fa0e 	bl	8003830 <HAL_GetTick>
 8004414:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	682b      	ldr	r3, [r5, #0]
 8004418:	0398      	lsls	r0, r3, #14
 800441a:	d5b0      	bpl.n	800437e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800441c:	f7ff fa08 	bl	8003830 <HAL_GetTick>
 8004420:	1b80      	subs	r0, r0, r6
 8004422:	2864      	cmp	r0, #100	; 0x64
 8004424:	d9f7      	bls.n	8004416 <HAL_RCC_OscConfig+0xaa>
 8004426:	e7e6      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	d103      	bne.n	8004438 <HAL_RCC_OscConfig+0xcc>
 8004430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	e7ce      	b.n	80043d6 <HAL_RCC_OscConfig+0x6a>
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	682b      	ldr	r3, [r5, #0]
 8004440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004444:	e7ca      	b.n	80043dc <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004446:	4b6b      	ldr	r3, [pc, #428]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	f012 0f0c 	tst.w	r2, #12
 800444e:	d007      	beq.n	8004460 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	f002 020c 	and.w	r2, r2, #12
 8004456:	2a08      	cmp	r2, #8
 8004458:	d111      	bne.n	800447e <HAL_RCC_OscConfig+0x112>
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	0259      	lsls	r1, r3, #9
 800445e:	d40e      	bmi.n	800447e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004460:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	0792      	lsls	r2, r2, #30
 8004466:	d502      	bpl.n	800446e <HAL_RCC_OscConfig+0x102>
 8004468:	68e2      	ldr	r2, [r4, #12]
 800446a:	2a01      	cmp	r2, #1
 800446c:	d182      	bne.n	8004374 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	6921      	ldr	r1, [r4, #16]
 8004472:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004476:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800447a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447c:	e782      	b.n	8004384 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800447e:	68e3      	ldr	r3, [r4, #12]
 8004480:	4d5c      	ldr	r5, [pc, #368]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004482:	b1bb      	cbz	r3, 80044b4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800448c:	f7ff f9d0 	bl	8003830 <HAL_GetTick>
 8004490:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	079f      	lsls	r7, r3, #30
 8004496:	d507      	bpl.n	80044a8 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80044a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	e76d      	b.n	8004384 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a8:	f7ff f9c2 	bl	8003830 <HAL_GetTick>
 80044ac:	1b80      	subs	r0, r0, r6
 80044ae:	2802      	cmp	r0, #2
 80044b0:	d9ef      	bls.n	8004492 <HAL_RCC_OscConfig+0x126>
 80044b2:	e7a0      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044bc:	f7ff f9b8 	bl	8003830 <HAL_GetTick>
 80044c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c2:	682b      	ldr	r3, [r5, #0]
 80044c4:	0798      	lsls	r0, r3, #30
 80044c6:	f57f af5d 	bpl.w	8004384 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7ff f9b1 	bl	8003830 <HAL_GetTick>
 80044ce:	1b80      	subs	r0, r0, r6
 80044d0:	2802      	cmp	r0, #2
 80044d2:	d9f6      	bls.n	80044c2 <HAL_RCC_OscConfig+0x156>
 80044d4:	e78f      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044d6:	6963      	ldr	r3, [r4, #20]
 80044d8:	4d46      	ldr	r5, [pc, #280]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 80044da:	b183      	cbz	r3, 80044fe <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80044dc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80044e4:	f7ff f9a4 	bl	8003830 <HAL_GetTick>
 80044e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80044ec:	079b      	lsls	r3, r3, #30
 80044ee:	f53f af4d 	bmi.w	800438c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f2:	f7ff f99d 	bl	8003830 <HAL_GetTick>
 80044f6:	1b80      	subs	r0, r0, r6
 80044f8:	2802      	cmp	r0, #2
 80044fa:	d9f6      	bls.n	80044ea <HAL_RCC_OscConfig+0x17e>
 80044fc:	e77b      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80044fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004506:	f7ff f993 	bl	8003830 <HAL_GetTick>
 800450a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800450e:	079f      	lsls	r7, r3, #30
 8004510:	f57f af3c 	bpl.w	800438c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7ff f98c 	bl	8003830 <HAL_GetTick>
 8004518:	1b80      	subs	r0, r0, r6
 800451a:	2802      	cmp	r0, #2
 800451c:	d9f6      	bls.n	800450c <HAL_RCC_OscConfig+0x1a0>
 800451e:	e76a      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004520:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004524:	00d0      	lsls	r0, r2, #3
 8004526:	d427      	bmi.n	8004578 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800452a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800453c:	4d2e      	ldr	r5, [pc, #184]	; (80045f8 <HAL_RCC_OscConfig+0x28c>)
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	05d9      	lsls	r1, r3, #23
 8004542:	d51b      	bpl.n	800457c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004544:	68a3      	ldr	r3, [r4, #8]
 8004546:	4d2b      	ldr	r5, [pc, #172]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 8004548:	2b01      	cmp	r3, #1
 800454a:	d127      	bne.n	800459c <HAL_RCC_OscConfig+0x230>
 800454c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004558:	f7ff f96a 	bl	8003830 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	4f25      	ldr	r7, [pc, #148]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800455e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004562:	079b      	lsls	r3, r3, #30
 8004564:	d53f      	bpl.n	80045e6 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8004566:	2e00      	cmp	r6, #0
 8004568:	f43f af14 	beq.w	8004394 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800456c:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <HAL_RCC_OscConfig+0x288>)
 800456e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	e70d      	b.n	8004394 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8004578:	2600      	movs	r6, #0
 800457a:	e7df      	b.n	800453c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004582:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004584:	f7ff f954 	bl	8003830 <HAL_GetTick>
 8004588:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458a:	682b      	ldr	r3, [r5, #0]
 800458c:	05da      	lsls	r2, r3, #23
 800458e:	d4d9      	bmi.n	8004544 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004590:	f7ff f94e 	bl	8003830 <HAL_GetTick>
 8004594:	1bc0      	subs	r0, r0, r7
 8004596:	2864      	cmp	r0, #100	; 0x64
 8004598:	d9f7      	bls.n	800458a <HAL_RCC_OscConfig+0x21e>
 800459a:	e72c      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	b9ab      	cbnz	r3, 80045ca <HAL_RCC_OscConfig+0x25e>
 800459e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	672b      	str	r3, [r5, #112]	; 0x70
 80045aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80045b2:	f7ff f93d 	bl	8003830 <HAL_GetTick>
 80045b6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80045ba:	0798      	lsls	r0, r3, #30
 80045bc:	d5d3      	bpl.n	8004566 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7ff f937 	bl	8003830 <HAL_GetTick>
 80045c2:	1bc0      	subs	r0, r0, r7
 80045c4:	4540      	cmp	r0, r8
 80045c6:	d9f7      	bls.n	80045b8 <HAL_RCC_OscConfig+0x24c>
 80045c8:	e715      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80045ce:	d103      	bne.n	80045d8 <HAL_RCC_OscConfig+0x26c>
 80045d0:	f043 0304 	orr.w	r3, r3, #4
 80045d4:	672b      	str	r3, [r5, #112]	; 0x70
 80045d6:	e7b9      	b.n	800454c <HAL_RCC_OscConfig+0x1e0>
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	672b      	str	r3, [r5, #112]	; 0x70
 80045de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	e7b5      	b.n	8004552 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7ff f923 	bl	8003830 <HAL_GetTick>
 80045ea:	eba0 0008 	sub.w	r0, r0, r8
 80045ee:	42a8      	cmp	r0, r5
 80045f0:	d9b6      	bls.n	8004560 <HAL_RCC_OscConfig+0x1f4>
 80045f2:	e700      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fc:	4d38      	ldr	r5, [pc, #224]	; (80046e0 <HAL_RCC_OscConfig+0x374>)
 80045fe:	68ab      	ldr	r3, [r5, #8]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d041      	beq.n	800468c <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8004608:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800460a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800460c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004610:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004612:	d12e      	bne.n	8004672 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8004614:	f7ff f90c 	bl	8003830 <HAL_GetTick>
 8004618:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	682b      	ldr	r3, [r5, #0]
 800461c:	0199      	lsls	r1, r3, #6
 800461e:	d422      	bmi.n	8004666 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004620:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004624:	4313      	orrs	r3, r2
 8004626:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800462c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004630:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004632:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004636:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004638:	4c29      	ldr	r4, [pc, #164]	; (80046e0 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463a:	0852      	lsrs	r2, r2, #1
 800463c:	3a01      	subs	r2, #1
 800463e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004642:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800464c:	f7ff f8f0 	bl	8003830 <HAL_GetTick>
 8004650:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	019a      	lsls	r2, r3, #6
 8004656:	f53f aea1 	bmi.w	800439c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7ff f8e9 	bl	8003830 <HAL_GetTick>
 800465e:	1b40      	subs	r0, r0, r5
 8004660:	2802      	cmp	r0, #2
 8004662:	d9f6      	bls.n	8004652 <HAL_RCC_OscConfig+0x2e6>
 8004664:	e6c7      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7ff f8e3 	bl	8003830 <HAL_GetTick>
 800466a:	1b80      	subs	r0, r0, r6
 800466c:	2802      	cmp	r0, #2
 800466e:	d9d4      	bls.n	800461a <HAL_RCC_OscConfig+0x2ae>
 8004670:	e6c1      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8004672:	f7ff f8dd 	bl	8003830 <HAL_GetTick>
 8004676:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	019b      	lsls	r3, r3, #6
 800467c:	f57f ae8e 	bpl.w	800439c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7ff f8d6 	bl	8003830 <HAL_GetTick>
 8004684:	1b00      	subs	r0, r0, r4
 8004686:	2802      	cmp	r0, #2
 8004688:	d9f6      	bls.n	8004678 <HAL_RCC_OscConfig+0x30c>
 800468a:	e6b4      	b.n	80043f6 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800468e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004690:	f43f aeb2 	beq.w	80043f8 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004698:	69e1      	ldr	r1, [r4, #28]
 800469a:	428a      	cmp	r2, r1
 800469c:	f47f ae6a 	bne.w	8004374 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a4:	6a21      	ldr	r1, [r4, #32]
 80046a6:	428a      	cmp	r2, r1
 80046a8:	f47f ae64 	bne.w	8004374 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b2:	401a      	ands	r2, r3
 80046b4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80046b8:	f47f ae5c 	bne.w	8004374 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80046be:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80046c2:	0852      	lsrs	r2, r2, #1
 80046c4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80046ca:	f47f ae53 	bne.w	8004374 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046d4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 80046d8:	bf14      	ite	ne
 80046da:	2001      	movne	r0, #1
 80046dc:	2000      	moveq	r0, #0
 80046de:	e68b      	b.n	80043f8 <HAL_RCC_OscConfig+0x8c>
 80046e0:	40023800 	.word	0x40023800

080046e4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e4:	4913      	ldr	r1, [pc, #76]	; (8004734 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80046e6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e8:	688b      	ldr	r3, [r1, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d003      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x16>
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d003      	beq.n	80046fe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f6:	4810      	ldr	r0, [pc, #64]	; (8004738 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80046f8:	e000      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80046fa:	4810      	ldr	r0, [pc, #64]	; (800473c <HAL_RCC_GetSysClockFreq+0x58>)
}
 80046fc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fe:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004700:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004702:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004704:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004708:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004710:	bf1a      	itte	ne
 8004712:	480a      	ldrne	r0, [pc, #40]	; (800473c <HAL_RCC_GetSysClockFreq+0x58>)
 8004714:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004716:	4808      	ldreq	r0, [pc, #32]	; (8004738 <HAL_RCC_GetSysClockFreq+0x54>)
 8004718:	fba1 0100 	umull	r0, r1, r1, r0
 800471c:	f7fc fadc 	bl	8000cd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <HAL_RCC_GetSysClockFreq+0x50>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004728:	3301      	adds	r3, #1
 800472a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800472c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004730:	e7e4      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x18>
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800
 8004738:	00f42400 	.word	0x00f42400
 800473c:	017d7840 	.word	0x017d7840

08004740 <HAL_RCC_ClockConfig>:
{
 8004740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004744:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004746:	4604      	mov	r4, r0
 8004748:	b910      	cbnz	r0, 8004750 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800474a:	2001      	movs	r0, #1
}
 800474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	4a45      	ldr	r2, [pc, #276]	; (8004868 <HAL_RCC_ClockConfig+0x128>)
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	428b      	cmp	r3, r1
 800475a:	d328      	bcc.n	80047ae <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	6821      	ldr	r1, [r4, #0]
 800475e:	078f      	lsls	r7, r1, #30
 8004760:	d430      	bmi.n	80047c4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	07c8      	lsls	r0, r1, #31
 8004764:	d443      	bmi.n	80047ee <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004766:	4a40      	ldr	r2, [pc, #256]	; (8004868 <HAL_RCC_ClockConfig+0x128>)
 8004768:	6813      	ldr	r3, [r2, #0]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	42ab      	cmp	r3, r5
 8004770:	d866      	bhi.n	8004840 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004772:	6822      	ldr	r2, [r4, #0]
 8004774:	0751      	lsls	r1, r2, #29
 8004776:	d46f      	bmi.n	8004858 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004778:	0713      	lsls	r3, r2, #28
 800477a:	d507      	bpl.n	800478c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800477c:	4a3b      	ldr	r2, [pc, #236]	; (800486c <HAL_RCC_ClockConfig+0x12c>)
 800477e:	6921      	ldr	r1, [r4, #16]
 8004780:	6893      	ldr	r3, [r2, #8]
 8004782:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004786:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800478a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800478c:	f7ff ffaa 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8004790:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_RCC_ClockConfig+0x12c>)
 8004792:	4a37      	ldr	r2, [pc, #220]	; (8004870 <HAL_RCC_ClockConfig+0x130>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	40d8      	lsrs	r0, r3
 800479e:	4b35      	ldr	r3, [pc, #212]	; (8004874 <HAL_RCC_ClockConfig+0x134>)
 80047a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80047a2:	4b35      	ldr	r3, [pc, #212]	; (8004878 <HAL_RCC_ClockConfig+0x138>)
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	f7ff f807 	bl	80037b8 <HAL_InitTick>
  return HAL_OK;
 80047aa:	2000      	movs	r0, #0
 80047ac:	e7ce      	b.n	800474c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	f023 030f 	bic.w	r3, r3, #15
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	428b      	cmp	r3, r1
 80047c0:	d1c3      	bne.n	800474a <HAL_RCC_ClockConfig+0xa>
 80047c2:	e7cb      	b.n	800475c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	f011 0f04 	tst.w	r1, #4
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <HAL_RCC_ClockConfig+0x12c>)
 80047ca:	d003      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80047d2:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	070e      	lsls	r6, r1, #28
 80047d6:	d503      	bpl.n	80047e0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80047de:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	68a0      	ldr	r0, [r4, #8]
 80047e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047e8:	4302      	orrs	r2, r0
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	e7b9      	b.n	8004762 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	6861      	ldr	r1, [r4, #4]
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCC_ClockConfig+0x12c>)
 80047f2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	d11b      	bne.n	8004830 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	d0a5      	beq.n	800474a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004804:	4e19      	ldr	r6, [pc, #100]	; (800486c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004806:	f022 0203 	bic.w	r2, r2, #3
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800480e:	f7ff f80f 	bl	8003830 <HAL_GetTick>
 8004812:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004814:	68b3      	ldr	r3, [r6, #8]
 8004816:	6862      	ldr	r2, [r4, #4]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004820:	d0a1      	beq.n	8004766 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004822:	f7ff f805 	bl	8003830 <HAL_GetTick>
 8004826:	1bc0      	subs	r0, r0, r7
 8004828:	4540      	cmp	r0, r8
 800482a:	d9f3      	bls.n	8004814 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800482c:	2003      	movs	r0, #3
 800482e:	e78d      	b.n	800474c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004830:	2902      	cmp	r1, #2
 8004832:	d102      	bne.n	800483a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004838:	e7e0      	b.n	80047fc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	f012 0f02 	tst.w	r2, #2
 800483e:	e7dd      	b.n	80047fc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f023 030f 	bic.w	r3, r3, #15
 8004846:	432b      	orrs	r3, r5
 8004848:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	42ab      	cmp	r3, r5
 8004852:	f47f af7a 	bne.w	800474a <HAL_RCC_ClockConfig+0xa>
 8004856:	e78c      	b.n	8004772 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004858:	4904      	ldr	r1, [pc, #16]	; (800486c <HAL_RCC_ClockConfig+0x12c>)
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	688b      	ldr	r3, [r1, #8]
 800485e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004862:	4303      	orrs	r3, r0
 8004864:	608b      	str	r3, [r1, #8]
 8004866:	e787      	b.n	8004778 <HAL_RCC_ClockConfig+0x38>
 8004868:	40023c00 	.word	0x40023c00
 800486c:	40023800 	.word	0x40023800
 8004870:	0800cef4 	.word	0x0800cef4
 8004874:	20000000 	.word	0x20000000
 8004878:	20000010 	.word	0x20000010

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <HAL_RCC_GetPCLK1Freq+0x14>)
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004886:	5cd3      	ldrb	r3, [r2, r3]
 8004888:	4a03      	ldr	r2, [pc, #12]	; (8004898 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800488a:	6810      	ldr	r0, [r2, #0]
}
 800488c:	40d8      	lsrs	r0, r3
 800488e:	4770      	bx	lr
 8004890:	40023800 	.word	0x40023800
 8004894:	0800cf04 	.word	0x0800cf04
 8004898:	20000000 	.word	0x20000000

0800489c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80048a6:	5cd3      	ldrb	r3, [r2, r3]
 80048a8:	4a03      	ldr	r2, [pc, #12]	; (80048b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80048aa:	6810      	ldr	r0, [r2, #0]
}
 80048ac:	40d8      	lsrs	r0, r3
 80048ae:	4770      	bx	lr
 80048b0:	40023800 	.word	0x40023800
 80048b4:	0800cf04 	.word	0x0800cf04
 80048b8:	20000000 	.word	0x20000000

080048bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048c0:	6802      	ldr	r2, [r0, #0]
{
 80048c2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048c4:	f012 0601 	ands.w	r6, r2, #1
 80048c8:	d00b      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048ca:	4bb9      	ldr	r3, [pc, #740]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048cc:	6899      	ldr	r1, [r3, #8]
 80048ce:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80048d2:	6099      	str	r1, [r3, #8]
 80048d4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80048d6:	6899      	ldr	r1, [r3, #8]
 80048d8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80048da:	fab6 f686 	clz	r6, r6
 80048de:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048e0:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048e2:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80048e6:	d012      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048e8:	49b1      	ldr	r1, [pc, #708]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ea:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80048ec:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048f0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80048f8:	bf08      	it	eq
 80048fa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048fc:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004900:	bf16      	itet	ne
 8004902:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004906:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004908:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800490a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800490e:	02d7      	lsls	r7, r2, #11
 8004910:	d510      	bpl.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004912:	48a7      	ldr	r0, [pc, #668]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004914:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004916:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800491a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800491e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004922:	ea43 0301 	orr.w	r3, r3, r1
 8004926:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800492a:	f000 814b 	beq.w	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800492e:	2900      	cmp	r1, #0
 8004930:	bf08      	it	eq
 8004932:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004934:	0690      	lsls	r0, r2, #26
 8004936:	d531      	bpl.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004938:	4b9d      	ldr	r3, [pc, #628]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800493a:	4f9e      	ldr	r7, [pc, #632]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800493e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004956:	f7fe ff6b 	bl	8003830 <HAL_GetTick>
 800495a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	05d9      	lsls	r1, r3, #23
 8004960:	f140 8132 	bpl.w	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004964:	4f92      	ldr	r7, [pc, #584]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004966:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004968:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800496c:	f040 8137 	bne.w	8004bde <HAL_RCCEx_PeriphCLKConfig+0x322>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004970:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004972:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004976:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800497a:	4a8d      	ldr	r2, [pc, #564]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800497c:	f040 8155 	bne.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004980:	6891      	ldr	r1, [r2, #8]
 8004982:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004986:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800498a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800498e:	4301      	orrs	r1, r0
 8004990:	6091      	str	r1, [r2, #8]
 8004992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004996:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004998:	430b      	orrs	r3, r1
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	06df      	lsls	r7, r3, #27
 80049a0:	d50c      	bpl.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049a2:	4a83      	ldr	r2, [pc, #524]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80049a8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80049ac:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80049b0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80049b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80049b6:	4301      	orrs	r1, r0
 80049b8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049bc:	0458      	lsls	r0, r3, #17
 80049be:	d508      	bpl.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c0:	497b      	ldr	r1, [pc, #492]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049c2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80049c4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80049c8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80049cc:	4302      	orrs	r2, r0
 80049ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049d2:	0419      	lsls	r1, r3, #16
 80049d4:	d508      	bpl.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049d6:	4976      	ldr	r1, [pc, #472]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80049da:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80049de:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80049e2:	4302      	orrs	r2, r0
 80049e4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049e8:	03da      	lsls	r2, r3, #15
 80049ea:	d508      	bpl.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ec:	4970      	ldr	r1, [pc, #448]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049ee:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80049f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80049f4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80049f8:	4302      	orrs	r2, r0
 80049fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049fe:	065f      	lsls	r7, r3, #25
 8004a00:	d508      	bpl.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a02:	496b      	ldr	r1, [pc, #428]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a0a:	f022 0203 	bic.w	r2, r2, #3
 8004a0e:	4302      	orrs	r2, r0
 8004a10:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a14:	0618      	lsls	r0, r3, #24
 8004a16:	d508      	bpl.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a18:	4965      	ldr	r1, [pc, #404]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a20:	f022 020c 	bic.w	r2, r2, #12
 8004a24:	4302      	orrs	r2, r0
 8004a26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a2a:	05d9      	lsls	r1, r3, #23
 8004a2c:	d508      	bpl.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a2e:	4960      	ldr	r1, [pc, #384]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a30:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004a32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a36:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004a3a:	4302      	orrs	r2, r0
 8004a3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a40:	059a      	lsls	r2, r3, #22
 8004a42:	d508      	bpl.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a44:	495a      	ldr	r1, [pc, #360]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a46:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a48:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a4c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a50:	4302      	orrs	r2, r0
 8004a52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a56:	055f      	lsls	r7, r3, #21
 8004a58:	d508      	bpl.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a5a:	4955      	ldr	r1, [pc, #340]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a5c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004a5e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a66:	4302      	orrs	r2, r0
 8004a68:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a6c:	0518      	lsls	r0, r3, #20
 8004a6e:	d508      	bpl.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a70:	494f      	ldr	r1, [pc, #316]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a72:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004a74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a7c:	4302      	orrs	r2, r0
 8004a7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a82:	04d9      	lsls	r1, r3, #19
 8004a84:	d508      	bpl.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a86:	494a      	ldr	r1, [pc, #296]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a8e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a92:	4302      	orrs	r2, r0
 8004a94:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a98:	049a      	lsls	r2, r3, #18
 8004a9a:	d508      	bpl.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a9c:	4944      	ldr	r1, [pc, #272]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aa0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004aa4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004aa8:	4302      	orrs	r2, r0
 8004aaa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004aae:	029f      	lsls	r7, r3, #10
 8004ab0:	d50c      	bpl.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ab2:	483f      	ldr	r0, [pc, #252]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ab4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004ab6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004aba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004abe:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8004ac2:	bf08      	it	eq
 8004ac4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004acc:	0358      	lsls	r0, r3, #13
 8004ace:	d508      	bpl.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ad0:	4937      	ldr	r1, [pc, #220]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004ad4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004ad8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004adc:	4302      	orrs	r2, r0
 8004ade:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ae2:	0219      	lsls	r1, r3, #8
 8004ae4:	d508      	bpl.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ae6:	4932      	ldr	r1, [pc, #200]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ae8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004aea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004aee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004af2:	4302      	orrs	r2, r0
 8004af4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	d508      	bpl.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004afc:	492c      	ldr	r1, [pc, #176]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004afe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004b00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b04:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004b08:	4302      	orrs	r2, r0
 8004b0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	f040 808f 	bne.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b18:	f000 808b 	beq.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b1c:	2d01      	cmp	r5, #1
 8004b1e:	d14f      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b20:	4d23      	ldr	r5, [pc, #140]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b22:	682b      	ldr	r3, [r5, #0]
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b28:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2a:	f7fe fe81 	bl	8003830 <HAL_GetTick>
 8004b2e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	009f      	lsls	r7, r3, #2
 8004b34:	f100 80e0 	bmi.w	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	0305      	lsls	r5, r0, #12
 8004b3c:	d501      	bpl.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b40:	b11b      	cbz	r3, 8004b4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004b42:	02c1      	lsls	r1, r0, #11
 8004b44:	d518      	bpl.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b48:	b9b3      	cbnz	r3, 8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b4a:	4919      	ldr	r1, [pc, #100]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004b4c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b50:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8004b5a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b64:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8004b68:	6a22      	ldr	r2, [r4, #32]
 8004b6a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b78:	0282      	lsls	r2, r0, #10
 8004b7a:	d510      	bpl.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004b7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b82:	d10c      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b84:	490a      	ldr	r1, [pc, #40]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004b86:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004b8c:	6920      	ldr	r0, [r4, #16]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004b94:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b9e:	4c04      	ldr	r4, [pc, #16]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba8:	f7fe fe42 	bl	8003830 <HAL_GetTick>
 8004bac:	4605      	mov	r5, r0
 8004bae:	e003      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	f140 80a3 	bpl.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e009      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      plli2sused = 1;
 8004bc4:	2601      	movs	r6, #1
 8004bc6:	e6b5      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc8:	f7fe fe32 	bl	8003830 <HAL_GetTick>
 8004bcc:	eba0 0008 	sub.w	r0, r0, r8
 8004bd0:	2864      	cmp	r0, #100	; 0x64
 8004bd2:	f67f aec3 	bls.w	800495c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8004bd6:	2003      	movs	r0, #3
}
 8004bd8:	b003      	add	sp, #12
 8004bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004be0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f43f aec3 	beq.w	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004bf6:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004bfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bfe:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004c00:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c04:	07da      	lsls	r2, r3, #31
 8004c06:	f57f aeb3 	bpl.w	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 8004c0a:	f7fe fe11 	bl	8003830 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004c12:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c16:	079b      	lsls	r3, r3, #30
 8004c18:	f53f aeaa 	bmi.w	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fe fe08 	bl	8003830 <HAL_GetTick>
 8004c20:	eba0 0008 	sub.w	r0, r0, r8
 8004c24:	4548      	cmp	r0, r9
 8004c26:	d9f5      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8004c28:	e7d5      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2a:	6891      	ldr	r1, [r2, #8]
 8004c2c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004c30:	e6ae      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 8004c32:	4e38      	ldr	r6, [pc, #224]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004c34:	6833      	ldr	r3, [r6, #0]
 8004c36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c3a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004c3c:	f7fe fdf8 	bl	8003830 <HAL_GetTick>
 8004c40:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c42:	6833      	ldr	r3, [r6, #0]
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	d451      	bmi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	07d7      	lsls	r7, r2, #31
 8004c4c:	d50d      	bpl.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c50:	b95b      	cbnz	r3, 8004c6a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c52:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c56:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8004c5a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004c5e:	071b      	lsls	r3, r3, #28
 8004c60:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004c64:	430b      	orrs	r3, r1
 8004c66:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c6a:	0310      	lsls	r0, r2, #12
 8004c6c:	d503      	bpl.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004c6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c74:	d005      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8004c76:	02d1      	lsls	r1, r2, #11
 8004c78:	d519      	bpl.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c80:	d115      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c82:	4924      	ldr	r1, [pc, #144]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004c84:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c86:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004c8a:	6866      	ldr	r6, [r4, #4]
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004c92:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8004c96:	4303      	orrs	r3, r0
 8004c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c9c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8004ca0:	69e3      	ldr	r3, [r4, #28]
 8004ca2:	f020 001f 	bic.w	r0, r0, #31
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	4303      	orrs	r3, r0
 8004caa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cae:	0192      	lsls	r2, r2, #6
 8004cb0:	d50a      	bpl.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	6862      	ldr	r2, [r4, #4]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004cbc:	68a2      	ldr	r2, [r4, #8]
 8004cbe:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004cc2:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004cc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc8:	4e12      	ldr	r6, [pc, #72]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004cca:	6833      	ldr	r3, [r6, #0]
 8004ccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004cd2:	f7fe fdad 	bl	8003830 <HAL_GetTick>
 8004cd6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd8:	6833      	ldr	r3, [r6, #0]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	f53f af1e 	bmi.w	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ce0:	f7fe fda6 	bl	8003830 <HAL_GetTick>
 8004ce4:	1bc0      	subs	r0, r0, r7
 8004ce6:	2864      	cmp	r0, #100	; 0x64
 8004ce8:	d9f6      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004cea:	e774      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cec:	f7fe fda0 	bl	8003830 <HAL_GetTick>
 8004cf0:	1bc0      	subs	r0, r0, r7
 8004cf2:	2864      	cmp	r0, #100	; 0x64
 8004cf4:	d9a5      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004cf6:	e76e      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cf8:	f7fe fd9a 	bl	8003830 <HAL_GetTick>
 8004cfc:	1b80      	subs	r0, r0, r6
 8004cfe:	2864      	cmp	r0, #100	; 0x64
 8004d00:	f67f af16 	bls.w	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d04:	e767      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d06:	f7fe fd93 	bl	8003830 <HAL_GetTick>
 8004d0a:	1b40      	subs	r0, r0, r5
 8004d0c:	2864      	cmp	r0, #100	; 0x64
 8004d0e:	f67f af53 	bls.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004d12:	e760      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8004d14:	40023800 	.word	0x40023800

08004d18 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d18:	6a03      	ldr	r3, [r0, #32]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
{
 8004d1e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d24:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d26:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d28:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d2e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004d32:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004d36:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d38:	688d      	ldr	r5, [r1, #8]
 8004d3a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d3c:	4d0e      	ldr	r5, [pc, #56]	; (8004d78 <TIM_OC1_SetConfig+0x60>)
 8004d3e:	42a8      	cmp	r0, r5
 8004d40:	d002      	beq.n	8004d48 <TIM_OC1_SetConfig+0x30>
 8004d42:	4e0e      	ldr	r6, [pc, #56]	; (8004d7c <TIM_OC1_SetConfig+0x64>)
 8004d44:	42b0      	cmp	r0, r6
 8004d46:	d111      	bne.n	8004d6c <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d48:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d4c:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8004d50:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d54:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d58:	d002      	beq.n	8004d60 <TIM_OC1_SetConfig+0x48>
 8004d5a:	4d08      	ldr	r5, [pc, #32]	; (8004d7c <TIM_OC1_SetConfig+0x64>)
 8004d5c:	42a8      	cmp	r0, r5
 8004d5e:	d105      	bne.n	8004d6c <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d60:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d64:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004d68:	4335      	orrs	r5, r6
 8004d6a:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d6e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d70:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004d72:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	6203      	str	r3, [r0, #32]
}
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40010400 	.word	0x40010400

08004d80 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d80:	6a03      	ldr	r3, [r0, #32]
 8004d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8004d86:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d88:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8004d94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d96:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004d9a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004d9e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004da0:	688d      	ldr	r5, [r1, #8]
 8004da2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004da6:	4d11      	ldr	r5, [pc, #68]	; (8004dec <TIM_OC3_SetConfig+0x6c>)
 8004da8:	42a8      	cmp	r0, r5
 8004daa:	d003      	beq.n	8004db4 <TIM_OC3_SetConfig+0x34>
 8004dac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004db0:	42a8      	cmp	r0, r5
 8004db2:	d114      	bne.n	8004dde <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004db4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	4d0b      	ldr	r5, [pc, #44]	; (8004dec <TIM_OC3_SetConfig+0x6c>)
 8004dc0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC3_SetConfig+0x50>
 8004dc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dcc:	42a8      	cmp	r0, r5
 8004dce:	d106      	bne.n	8004dde <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dd4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004dd8:	4335      	orrs	r5, r6
 8004dda:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004de0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004de2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004de4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	6203      	str	r3, [r0, #32]
}
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
 8004dea:	bf00      	nop
 8004dec:	40010000 	.word	0x40010000

08004df0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df0:	6a03      	ldr	r3, [r0, #32]
 8004df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8004df6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfe:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e04:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e0a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e12:	688d      	ldr	r5, [r1, #8]
 8004e14:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	4d08      	ldr	r5, [pc, #32]	; (8004e3c <TIM_OC4_SetConfig+0x4c>)
 8004e1a:	42a8      	cmp	r0, r5
 8004e1c:	d003      	beq.n	8004e26 <TIM_OC4_SetConfig+0x36>
 8004e1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e22:	42a8      	cmp	r0, r5
 8004e24:	d104      	bne.n	8004e30 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e26:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e2a:	694d      	ldr	r5, [r1, #20]
 8004e2c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e30:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e32:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e34:	684b      	ldr	r3, [r1, #4]
 8004e36:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e38:	6202      	str	r2, [r0, #32]
}
 8004e3a:	bd30      	pop	{r4, r5, pc}
 8004e3c:	40010000 	.word	0x40010000

08004e40 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e40:	6a03      	ldr	r3, [r0, #32]
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 8004e46:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e50:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8004e54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8004e5e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e60:	688d      	ldr	r5, [r1, #8]
 8004e62:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	4d09      	ldr	r5, [pc, #36]	; (8004e8c <TIM_OC5_SetConfig+0x4c>)
 8004e68:	42a8      	cmp	r0, r5
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC5_SetConfig+0x34>
 8004e6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e70:	42a8      	cmp	r0, r5
 8004e72:	d104      	bne.n	8004e7e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e74:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e78:	694d      	ldr	r5, [r1, #20]
 8004e7a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e80:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e82:	684b      	ldr	r3, [r1, #4]
 8004e84:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e86:	6202      	str	r2, [r0, #32]
}
 8004e88:	bd30      	pop	{r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40010000 	.word	0x40010000

08004e90 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e90:	6a03      	ldr	r3, [r0, #32]
 8004e92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8004e96:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ea0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ea4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004eb2:	688d      	ldr	r5, [r1, #8]
 8004eb4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb8:	4d08      	ldr	r5, [pc, #32]	; (8004edc <TIM_OC6_SetConfig+0x4c>)
 8004eba:	42a8      	cmp	r0, r5
 8004ebc:	d003      	beq.n	8004ec6 <TIM_OC6_SetConfig+0x36>
 8004ebe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ec2:	42a8      	cmp	r0, r5
 8004ec4:	d104      	bne.n	8004ed0 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ec6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eca:	694d      	ldr	r5, [r1, #20]
 8004ecc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ed2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ed4:	684b      	ldr	r3, [r1, #4]
 8004ed6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed8:	6202      	str	r2, [r0, #32]
}
 8004eda:	bd30      	pop	{r4, r5, pc}
 8004edc:	40010000 	.word	0x40010000

08004ee0 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee2:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee8:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <HAL_TIM_Base_Start+0x2c>)
 8004eea:	6891      	ldr	r1, [r2, #8]
 8004eec:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d006      	beq.n	8004f00 <HAL_TIM_Base_Start+0x20>
 8004ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef6:	d003      	beq.n	8004f00 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	f043 0301 	orr.w	r3, r3, #1
 8004efe:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004f06:	2000      	movs	r0, #0
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	00010007 	.word	0x00010007

08004f10 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f10:	6803      	ldr	r3, [r0, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f1a:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <HAL_TIM_Base_Start_IT+0x28>)
 8004f1c:	6899      	ldr	r1, [r3, #8]
 8004f1e:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	2a06      	cmp	r2, #6
 8004f22:	d006      	beq.n	8004f32 <HAL_TIM_Base_Start_IT+0x22>
 8004f24:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
}
 8004f32:	2000      	movs	r0, #0
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	00010007 	.word	0x00010007

08004f3c <HAL_TIM_OnePulse_MspInit>:
 8004f3c:	4770      	bx	lr

08004f3e <HAL_TIM_OC_DelayElapsedCallback>:
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_IC_CaptureCallback>:
 8004f40:	4770      	bx	lr

08004f42 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIM_TriggerCallback>:
 8004f44:	4770      	bx	lr

08004f46 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f46:	6803      	ldr	r3, [r0, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	0791      	lsls	r1, r2, #30
{
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f50:	d50f      	bpl.n	8004f72 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	0792      	lsls	r2, r2, #30
 8004f56:	d50c      	bpl.n	8004f72 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f58:	f06f 0202 	mvn.w	r2, #2
 8004f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f60:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f62:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f64:	0799      	lsls	r1, r3, #30
 8004f66:	f000 8085 	beq.w	8005074 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	f7ff ffe9 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	0752      	lsls	r2, r2, #29
 8004f78:	d510      	bpl.n	8004f9c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	0750      	lsls	r0, r2, #29
 8004f7e:	d50d      	bpl.n	8004f9c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f80:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004f84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f88:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f8a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f8c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f8e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004f92:	d075      	beq.n	8005080 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f94:	f7ff ffd4 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	0711      	lsls	r1, r2, #28
 8004fa2:	d50f      	bpl.n	8004fc4 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	0712      	lsls	r2, r2, #28
 8004fa8:	d50c      	bpl.n	8004fc4 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004faa:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004fae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fb2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fb6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb8:	079b      	lsls	r3, r3, #30
 8004fba:	d067      	beq.n	800508c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbc:	f7ff ffc0 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	06d0      	lsls	r0, r2, #27
 8004fca:	d510      	bpl.n	8004fee <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	06d1      	lsls	r1, r2, #27
 8004fd0:	d50d      	bpl.n	8004fee <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd2:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fda:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fdc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fde:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004fe4:	d058      	beq.n	8005098 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	f7ff ffab 	bl	8004f40 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	2300      	movs	r3, #0
 8004fec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	07d2      	lsls	r2, r2, #31
 8004ff4:	d508      	bpl.n	8005008 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	07d0      	lsls	r0, r2, #31
 8004ffa:	d505      	bpl.n	8005008 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ffc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005000:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005002:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005004:	f7fc ff50 	bl	8001ea8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	0611      	lsls	r1, r2, #24
 800500e:	d508      	bpl.n	8005022 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	0612      	lsls	r2, r2, #24
 8005014:	d505      	bpl.n	8005022 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005016:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800501a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800501c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800501e:	f000 fae0 	bl	80055e2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	05d0      	lsls	r0, r2, #23
 8005028:	d508      	bpl.n	800503c <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	0611      	lsls	r1, r2, #24
 800502e:	d505      	bpl.n	800503c <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005030:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005034:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005036:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005038:	f000 fad4 	bl	80055e4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	0652      	lsls	r2, r2, #25
 8005042:	d508      	bpl.n	8005056 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	0650      	lsls	r0, r2, #25
 8005048:	d505      	bpl.n	8005056 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800504a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800504e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005050:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005052:	f7ff ff77 	bl	8004f44 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	0691      	lsls	r1, r2, #26
 800505c:	d522      	bpl.n	80050a4 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d51f      	bpl.n	80050a4 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005064:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005068:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800506a:	611a      	str	r2, [r3, #16]
}
 800506c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005070:	f000 bab6 	b.w	80055e0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005074:	f7ff ff63 	bl	8004f3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	4620      	mov	r0, r4
 800507a:	f7ff ff62 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
 800507e:	e776      	b.n	8004f6e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005080:	f7ff ff5d 	bl	8004f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff ff5c 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
 800508a:	e785      	b.n	8004f98 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508c:	f7ff ff57 	bl	8004f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	4620      	mov	r0, r4
 8005092:	f7ff ff56 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
 8005096:	e793      	b.n	8004fc0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005098:	f7ff ff51 	bl	8004f3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff ff50 	bl	8004f42 <HAL_TIM_PWM_PulseFinishedCallback>
 80050a2:	e7a2      	b.n	8004fea <HAL_TIM_IRQHandler+0xa4>
}
 80050a4:	bd10      	pop	{r4, pc}
	...

080050a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a8:	4a30      	ldr	r2, [pc, #192]	; (800516c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80050aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	4290      	cmp	r0, r2
 80050ae:	d012      	beq.n	80050d6 <TIM_Base_SetConfig+0x2e>
 80050b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050b4:	d00f      	beq.n	80050d6 <TIM_Base_SetConfig+0x2e>
 80050b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80050ba:	4290      	cmp	r0, r2
 80050bc:	d00b      	beq.n	80050d6 <TIM_Base_SetConfig+0x2e>
 80050be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050c2:	4290      	cmp	r0, r2
 80050c4:	d007      	beq.n	80050d6 <TIM_Base_SetConfig+0x2e>
 80050c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ca:	4290      	cmp	r0, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_Base_SetConfig+0x2e>
 80050ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80050d2:	4290      	cmp	r0, r2
 80050d4:	d119      	bne.n	800510a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80050d6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80050dc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050de:	4a23      	ldr	r2, [pc, #140]	; (800516c <TIM_Base_SetConfig+0xc4>)
 80050e0:	4290      	cmp	r0, r2
 80050e2:	d029      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 80050e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80050e8:	d026      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 80050ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80050ee:	4290      	cmp	r0, r2
 80050f0:	d022      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 80050f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050f6:	4290      	cmp	r0, r2
 80050f8:	d01e      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 80050fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050fe:	4290      	cmp	r0, r2
 8005100:	d01a      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 8005102:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005106:	4290      	cmp	r0, r2
 8005108:	d016      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 800510a:	4a19      	ldr	r2, [pc, #100]	; (8005170 <TIM_Base_SetConfig+0xc8>)
 800510c:	4290      	cmp	r0, r2
 800510e:	d013      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 8005110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005114:	4290      	cmp	r0, r2
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 8005118:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800511c:	4290      	cmp	r0, r2
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 8005120:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005124:	4290      	cmp	r0, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 8005128:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800512c:	4290      	cmp	r0, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x90>
 8005130:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005134:	4290      	cmp	r0, r2
 8005136:	d103      	bne.n	8005140 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513c:	68ca      	ldr	r2, [r1, #12]
 800513e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	694a      	ldr	r2, [r1, #20]
 8005142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005146:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005148:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514a:	688b      	ldr	r3, [r1, #8]
 800514c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800514e:	680b      	ldr	r3, [r1, #0]
 8005150:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <TIM_Base_SetConfig+0xc4>)
 8005154:	4298      	cmp	r0, r3
 8005156:	d003      	beq.n	8005160 <TIM_Base_SetConfig+0xb8>
 8005158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800515c:	4298      	cmp	r0, r3
 800515e:	d101      	bne.n	8005164 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005160:	690b      	ldr	r3, [r1, #16]
 8005162:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005164:	2301      	movs	r3, #1
 8005166:	6143      	str	r3, [r0, #20]
}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40014000 	.word	0x40014000

08005174 <HAL_TIM_Base_Init>:
{
 8005174:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005176:	4604      	mov	r4, r0
 8005178:	b1a0      	cbz	r0, 80051a4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800517a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800517e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005182:	b91b      	cbnz	r3, 800518c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005184:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005188:	f7fd fb3c 	bl	8002804 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8005192:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005196:	f7ff ff87 	bl	80050a8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800519a:	2301      	movs	r3, #1
  return HAL_OK;
 800519c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800519e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80051a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051a4:	2001      	movs	r0, #1
 80051a6:	e7fc      	b.n	80051a2 <HAL_TIM_Base_Init+0x2e>

080051a8 <HAL_TIM_PWM_Init>:
{
 80051a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80051aa:	4604      	mov	r4, r0
 80051ac:	b1a0      	cbz	r0, 80051d8 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80051ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051b6:	b91b      	cbnz	r3, 80051c0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80051b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80051bc:	f7fd fb04 	bl	80027c8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80051c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ca:	f7ff ff6d 	bl	80050a8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80051ce:	2301      	movs	r3, #1
  return HAL_OK;
 80051d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80051d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80051d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051d8:	2001      	movs	r0, #1
 80051da:	e7fc      	b.n	80051d6 <HAL_TIM_PWM_Init+0x2e>

080051dc <HAL_TIM_OnePulse_Init>:
{
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	460d      	mov	r5, r1
  if (htim == NULL)
 80051e0:	4604      	mov	r4, r0
 80051e2:	b1e0      	cbz	r0, 800521e <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 80051e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051ec:	b91b      	cbnz	r3, 80051f6 <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 80051ee:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80051f2:	f7ff fea3 	bl	8004f3c <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	1d21      	adds	r1, r4, #4
 80051fa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005200:	f7ff ff52 	bl	80050a8 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005204:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005206:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	f022 0208 	bic.w	r2, r2, #8
 800520e:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	4329      	orrs	r1, r5
 8005214:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005216:	2301      	movs	r3, #1
 8005218:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800521c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800521e:	2001      	movs	r0, #1
 8005220:	e7fc      	b.n	800521c <HAL_TIM_OnePulse_Init+0x40>
	...

08005224 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005224:	6a03      	ldr	r3, [r0, #32]
 8005226:	f023 0310 	bic.w	r3, r3, #16
{
 800522a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800522e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005230:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005232:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005234:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800523a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800523e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005242:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005246:	688d      	ldr	r5, [r1, #8]
 8005248:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800524c:	4d10      	ldr	r5, [pc, #64]	; (8005290 <TIM_OC2_SetConfig+0x6c>)
 800524e:	42a8      	cmp	r0, r5
 8005250:	d003      	beq.n	800525a <TIM_OC2_SetConfig+0x36>
 8005252:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005256:	42a8      	cmp	r0, r5
 8005258:	d114      	bne.n	8005284 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800525a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800525c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005260:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	4d0a      	ldr	r5, [pc, #40]	; (8005290 <TIM_OC2_SetConfig+0x6c>)
 8005266:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	d003      	beq.n	8005276 <TIM_OC2_SetConfig+0x52>
 800526e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005272:	42a8      	cmp	r0, r5
 8005274:	d106      	bne.n	8005284 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005276:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800527a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800527e:	4335      	orrs	r5, r6
 8005280:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005284:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005286:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005288:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800528a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800528c:	6203      	str	r3, [r0, #32]
}
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	40010000 	.word	0x40010000

08005294 <HAL_TIM_PWM_ConfigChannel>:
{
 8005294:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005296:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800529a:	4604      	mov	r4, r0
 800529c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d010      	beq.n	80052c4 <HAL_TIM_PWM_ConfigChannel+0x30>
 80052a2:	2301      	movs	r3, #1
  switch (Channel)
 80052a4:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 80052a6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80052aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80052ae:	d043      	beq.n	8005338 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80052b0:	d809      	bhi.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80052b2:	b1fa      	cbz	r2, 80052f4 <HAL_TIM_PWM_ConfigChannel+0x60>
 80052b4:	2a04      	cmp	r2, #4
 80052b6:	d02e      	beq.n	8005316 <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80052ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80052c4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80052c6:	2a10      	cmp	r2, #16
 80052c8:	d047      	beq.n	800535a <HAL_TIM_PWM_ConfigChannel+0xc6>
 80052ca:	2a14      	cmp	r2, #20
 80052cc:	d056      	beq.n	800537c <HAL_TIM_PWM_ConfigChannel+0xe8>
 80052ce:	2a0c      	cmp	r2, #12
 80052d0:	d1f2      	bne.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	f7ff fd8c 	bl	8004df0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052d8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052da:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052e4:	69da      	ldr	r2, [r3, #28]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052f2:	e030      	b.n	8005356 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	f7ff fd0f 	bl	8004d18 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052fa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052fc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052fe:	699a      	ldr	r2, [r3, #24]
 8005300:	f042 0208 	orr.w	r2, r2, #8
 8005304:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	f022 0204 	bic.w	r2, r2, #4
 800530c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005312:	619a      	str	r2, [r3, #24]
      break;
 8005314:	e7d0      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005316:	6820      	ldr	r0, [r4, #0]
 8005318:	f7ff ff84 	bl	8005224 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800531c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800531e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005336:	e7ec      	b.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	f7ff fd21 	bl	8004d80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800533e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005340:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	f042 0208 	orr.w	r2, r2, #8
 8005348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	f022 0204 	bic.w	r2, r2, #4
 8005350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005356:	61da      	str	r2, [r3, #28]
      break;
 8005358:	e7ae      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800535a:	6820      	ldr	r0, [r4, #0]
 800535c:	f7ff fd70 	bl	8004e40 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005360:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005362:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005366:	f042 0208 	orr.w	r2, r2, #8
 800536a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800536c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800536e:	f022 0204 	bic.w	r2, r2, #4
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005376:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800537a:	e79d      	b.n	80052b8 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800537c:	6820      	ldr	r0, [r4, #0]
 800537e:	f7ff fd87 	bl	8004e90 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005382:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005384:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800538e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005394:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800539c:	e7ec      	b.n	8005378 <HAL_TIM_PWM_ConfigChannel+0xe4>

0800539e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800539e:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a0:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80053a2:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ac:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ae:	6083      	str	r3, [r0, #8]
}
 80053b0:	bd10      	pop	{r4, pc}
	...

080053b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80053b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
{
 80053ba:	b570      	push	{r4, r5, r6, lr}
 80053bc:	4604      	mov	r4, r0
 80053be:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80053c2:	d017      	beq.n	80053f4 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80053c8:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80053ca:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80053cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d2:	4b41      	ldr	r3, [pc, #260]	; (80054d8 <HAL_TIM_ConfigClockSource+0x124>)
 80053d4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80053d6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80053d8:	680b      	ldr	r3, [r1, #0]
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d065      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0xf6>
 80053de:	d815      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x58>
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d00c      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x4a>
 80053e4:	d807      	bhi.n	80053f6 <HAL_TIM_ConfigClockSource+0x42>
 80053e6:	b153      	cbz	r3, 80053fe <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80053ea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80053f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d001      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x4a>
 80053fa:	2b30      	cmp	r3, #48	; 0x30
 80053fc:	d1f4      	bne.n	80053e8 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80053fe:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005400:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005404:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005408:	4313      	orrs	r3, r2
 800540a:	e01a      	b.n	8005442 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800540c:	2b60      	cmp	r3, #96	; 0x60
 800540e:	d034      	beq.n	800547a <HAL_TIM_ConfigClockSource+0xc6>
 8005410:	d819      	bhi.n	8005446 <HAL_TIM_ConfigClockSource+0x92>
 8005412:	2b50      	cmp	r3, #80	; 0x50
 8005414:	d1e8      	bne.n	80053e8 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	684a      	ldr	r2, [r1, #4]
 8005418:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800541a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8005426:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005428:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800542c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005430:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005434:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005436:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005438:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800543e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005442:	6083      	str	r3, [r0, #8]
 8005444:	e7d0      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8005446:	2b70      	cmp	r3, #112	; 0x70
 8005448:	d00c      	beq.n	8005464 <HAL_TIM_ConfigClockSource+0xb0>
 800544a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544e:	d1cb      	bne.n	80053e8 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8005450:	68cb      	ldr	r3, [r1, #12]
 8005452:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005456:	f7ff ffa2 	bl	800539e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800545a:	6822      	ldr	r2, [r4, #0]
 800545c:	6893      	ldr	r3, [r2, #8]
 800545e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005462:	e008      	b.n	8005476 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	68cb      	ldr	r3, [r1, #12]
 8005466:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800546a:	f7ff ff98 	bl	800539e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005472:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005476:	6093      	str	r3, [r2, #8]
      break;
 8005478:	e7b6      	b.n	80053e8 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800547a:	684d      	ldr	r5, [r1, #4]
 800547c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547e:	6a01      	ldr	r1, [r0, #32]
 8005480:	f021 0110 	bic.w	r1, r1, #16
 8005484:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005486:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005488:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005492:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005496:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800549a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800549c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800549e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80054a8:	e7cb      	b.n	8005442 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054aa:	684a      	ldr	r2, [r1, #4]
 80054ac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80054ae:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b6:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80054ba:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054bc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054be:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80054c8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80054ca:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80054cc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80054d6:	e7b4      	b.n	8005442 <HAL_TIM_ConfigClockSource+0x8e>
 80054d8:	fffe0088 	.word	0xfffe0088

080054dc <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054dc:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054e0:	6a03      	ldr	r3, [r0, #32]
{
 80054e2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e4:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054e6:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e8:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80054ea:	ea23 0304 	bic.w	r3, r3, r4
 80054ee:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054f0:	6a03      	ldr	r3, [r0, #32]
 80054f2:	431a      	orrs	r2, r3
 80054f4:	6202      	str	r2, [r0, #32]
}
 80054f6:	bd10      	pop	{r4, pc}

080054f8 <HAL_TIM_OC_Start>:
{
 80054f8:	b510      	push	{r4, lr}
 80054fa:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054fc:	2201      	movs	r2, #1
 80054fe:	6800      	ldr	r0, [r0, #0]
 8005500:	f7ff ffec 	bl	80054dc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <HAL_TIM_OC_Start+0x40>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <HAL_TIM_OC_Start+0x1c>
 800550c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005510:	4293      	cmp	r3, r2
 8005512:	d103      	bne.n	800551c <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8005514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800551a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551c:	6899      	ldr	r1, [r3, #8]
 800551e:	4a07      	ldr	r2, [pc, #28]	; (800553c <HAL_TIM_OC_Start+0x44>)
 8005520:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	2a06      	cmp	r2, #6
 8005524:	d006      	beq.n	8005534 <HAL_TIM_OC_Start+0x3c>
 8005526:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800552a:	d003      	beq.n	8005534 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	2000      	movs	r0, #0
 8005536:	bd10      	pop	{r4, pc}
 8005538:	40010000 	.word	0x40010000
 800553c:	00010007 	.word	0x00010007

08005540 <HAL_TIM_PWM_Start>:
 8005540:	f7ff bfda 	b.w	80054f8 <HAL_TIM_OC_Start>

08005544 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005544:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	f04f 0302 	mov.w	r3, #2
{
 800554e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005550:	d03e      	beq.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005552:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005556:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800555a:	4d1e      	ldr	r5, [pc, #120]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 800555c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005560:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005562:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005564:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005566:	d002      	beq.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8005568:	4e1b      	ldr	r6, [pc, #108]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800556a:	42b3      	cmp	r3, r6
 800556c:	d103      	bne.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800556e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005572:	684e      	ldr	r6, [r1, #4]
 8005574:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005576:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005578:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557c:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800557e:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8005582:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005584:	d019      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558a:	d016      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d013      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005596:	4293      	cmp	r3, r2
 8005598:	d00f      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800559a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00b      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80055a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d007      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80055aa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80055b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d104      	bne.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ba:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055bc:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c0:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ca:	2300      	movs	r3, #0
 80055cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80055d0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400
 80055dc:	40000400 	.word	0x40000400

080055e0 <HAL_TIMEx_CommutCallback>:
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIMEx_BreakCallback>:
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIMEx_Break2Callback>:
 80055e4:	4770      	bx	lr

080055e6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e6:	6803      	ldr	r3, [r0, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f8:	2320      	movs	r3, #32
 80055fa:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005600:	4770      	bx	lr

08005602 <HAL_UART_TxCpltCallback>:
 8005602:	4770      	bx	lr

08005604 <HAL_UART_ErrorCallback>:
 8005604:	4770      	bx	lr
	...

08005608 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005608:	6803      	ldr	r3, [r0, #0]
{
 800560a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800560c:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800560e:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005612:	6819      	ldr	r1, [r3, #0]
{
 8005614:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8005616:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005618:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800561a:	d109      	bne.n	8005630 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800561c:	0696      	lsls	r6, r2, #26
 800561e:	d56e      	bpl.n	80056fe <HAL_UART_IRQHandler+0xf6>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005620:	068d      	lsls	r5, r1, #26
 8005622:	d56c      	bpl.n	80056fe <HAL_UART_IRQHandler+0xf6>
      if (huart->RxISR != NULL)
 8005624:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005626:	2b00      	cmp	r3, #0
 8005628:	d064      	beq.n	80056f4 <HAL_UART_IRQHandler+0xec>
}
 800562a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800562e:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005630:	f015 0001 	ands.w	r0, r5, #1
 8005634:	d102      	bne.n	800563c <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005636:	f411 7f90 	tst.w	r1, #288	; 0x120
 800563a:	d060      	beq.n	80056fe <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800563c:	07d6      	lsls	r6, r2, #31
 800563e:	d507      	bpl.n	8005650 <HAL_UART_IRQHandler+0x48>
 8005640:	05cd      	lsls	r5, r1, #23
 8005642:	d505      	bpl.n	8005650 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005644:	2501      	movs	r5, #1
 8005646:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005648:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800564a:	f045 0501 	orr.w	r5, r5, #1
 800564e:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005650:	0796      	lsls	r6, r2, #30
 8005652:	d506      	bpl.n	8005662 <HAL_UART_IRQHandler+0x5a>
 8005654:	b128      	cbz	r0, 8005662 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005656:	2502      	movs	r5, #2
 8005658:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800565a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800565c:	f045 0504 	orr.w	r5, r5, #4
 8005660:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005662:	0755      	lsls	r5, r2, #29
 8005664:	d506      	bpl.n	8005674 <HAL_UART_IRQHandler+0x6c>
 8005666:	b128      	cbz	r0, 8005674 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005668:	2504      	movs	r5, #4
 800566a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800566c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800566e:	f045 0502 	orr.w	r5, r5, #2
 8005672:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005674:	0716      	lsls	r6, r2, #28
 8005676:	d508      	bpl.n	800568a <HAL_UART_IRQHandler+0x82>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005678:	068d      	lsls	r5, r1, #26
 800567a:	d400      	bmi.n	800567e <HAL_UART_IRQHandler+0x76>
 800567c:	b128      	cbz	r0, 800568a <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800567e:	2008      	movs	r0, #8
 8005680:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005682:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005684:	f040 0008 	orr.w	r0, r0, #8
 8005688:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800568a:	0510      	lsls	r0, r2, #20
 800568c:	d508      	bpl.n	80056a0 <HAL_UART_IRQHandler+0x98>
 800568e:	014e      	lsls	r6, r1, #5
 8005690:	d506      	bpl.n	80056a0 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005692:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005696:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005698:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800569a:	f043 0320 	orr.w	r3, r3, #32
 800569e:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80056a2:	b33b      	cbz	r3, 80056f4 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056a4:	0695      	lsls	r5, r2, #26
 80056a6:	d505      	bpl.n	80056b4 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056a8:	0688      	lsls	r0, r1, #26
 80056aa:	d503      	bpl.n	80056b4 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 80056ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80056ae:	b10b      	cbz	r3, 80056b4 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 80056b0:	4620      	mov	r0, r4
 80056b2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056b4:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 80056b6:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 80056b8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ba:	6892      	ldr	r2, [r2, #8]
 80056bc:	0651      	lsls	r1, r2, #25
 80056be:	d402      	bmi.n	80056c6 <HAL_UART_IRQHandler+0xbe>
 80056c0:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 80056c4:	d017      	beq.n	80056f6 <HAL_UART_IRQHandler+0xee>
        UART_EndRxTransfer(huart);
 80056c6:	f7ff ff8e 	bl	80055e6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	0652      	lsls	r2, r2, #25
 80056d0:	d50d      	bpl.n	80056ee <HAL_UART_IRQHandler+0xe6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d2:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80056d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056da:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80056dc:	b138      	cbz	r0, 80056ee <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056de:	4b14      	ldr	r3, [pc, #80]	; (8005730 <HAL_UART_IRQHandler+0x128>)
 80056e0:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056e2:	f7fe fc59 	bl	8003f98 <HAL_DMA_Abort_IT>
 80056e6:	b128      	cbz	r0, 80056f4 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80056ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80056ec:	e79d      	b.n	800562a <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff ff88 	bl	8005604 <HAL_UART_ErrorCallback>
}
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80056f6:	f7ff ff85 	bl	8005604 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fa:	67e5      	str	r5, [r4, #124]	; 0x7c
 80056fc:	e7fa      	b.n	80056f4 <HAL_UART_IRQHandler+0xec>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056fe:	0616      	lsls	r6, r2, #24
 8005700:	d506      	bpl.n	8005710 <HAL_UART_IRQHandler+0x108>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005702:	060d      	lsls	r5, r1, #24
 8005704:	d504      	bpl.n	8005710 <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 8005706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f3      	beq.n	80056f4 <HAL_UART_IRQHandler+0xec>
      huart->TxISR(huart);
 800570c:	4620      	mov	r0, r4
 800570e:	e78c      	b.n	800562a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005710:	0650      	lsls	r0, r2, #25
 8005712:	d5ef      	bpl.n	80056f4 <HAL_UART_IRQHandler+0xec>
 8005714:	064a      	lsls	r2, r1, #25
 8005716:	d5ed      	bpl.n	80056f4 <HAL_UART_IRQHandler+0xec>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005718:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800571a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800571c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005720:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005722:	2320      	movs	r3, #32
 8005724:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800572a:	f7ff ff6a 	bl	8005602 <HAL_UART_TxCpltCallback>
 800572e:	e7e1      	b.n	80056f4 <HAL_UART_IRQHandler+0xec>
 8005730:	08005735 	.word	0x08005735

08005734 <UART_DMAAbortOnError>:
{
 8005734:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005736:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800573e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8005742:	f7ff ff5f 	bl	8005604 <HAL_UART_ErrorCallback>
}
 8005746:	bd08      	pop	{r3, pc}

08005748 <UART_SetConfig>:
{
 8005748:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800574a:	69c2      	ldr	r2, [r0, #28]
{
 800574c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800574e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005750:	6881      	ldr	r1, [r0, #8]
 8005752:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005754:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005756:	4301      	orrs	r1, r0
 8005758:	6960      	ldr	r0, [r4, #20]
 800575a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800575c:	489a      	ldr	r0, [pc, #616]	; (80059c8 <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005760:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 8005762:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005764:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005766:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005768:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005770:	4301      	orrs	r1, r0
 8005772:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005774:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005776:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005778:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800577a:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800577e:	4301      	orrs	r1, r0
 8005780:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005782:	4992      	ldr	r1, [pc, #584]	; (80059cc <UART_SetConfig+0x284>)
 8005784:	428b      	cmp	r3, r1
 8005786:	d118      	bne.n	80057ba <UART_SetConfig+0x72>
 8005788:	4b91      	ldr	r3, [pc, #580]	; (80059d0 <UART_SetConfig+0x288>)
 800578a:	4992      	ldr	r1, [pc, #584]	; (80059d4 <UART_SetConfig+0x28c>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005796:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800579a:	f040 80bd 	bne.w	8005918 <UART_SetConfig+0x1d0>
    switch (clocksource)
 800579e:	2b08      	cmp	r3, #8
 80057a0:	f200 80af 	bhi.w	8005902 <UART_SetConfig+0x1ba>
 80057a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80057a8:	00aa0095 	.word	0x00aa0095
 80057ac:	00ad00f9 	.word	0x00ad00f9
 80057b0:	00ad0105 	.word	0x00ad0105
 80057b4:	00ad00ad 	.word	0x00ad00ad
 80057b8:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ba:	4987      	ldr	r1, [pc, #540]	; (80059d8 <UART_SetConfig+0x290>)
 80057bc:	428b      	cmp	r3, r1
 80057be:	d106      	bne.n	80057ce <UART_SetConfig+0x86>
 80057c0:	4b83      	ldr	r3, [pc, #524]	; (80059d0 <UART_SetConfig+0x288>)
 80057c2:	4986      	ldr	r1, [pc, #536]	; (80059dc <UART_SetConfig+0x294>)
 80057c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	e7e2      	b.n	8005794 <UART_SetConfig+0x4c>
 80057ce:	4984      	ldr	r1, [pc, #528]	; (80059e0 <UART_SetConfig+0x298>)
 80057d0:	428b      	cmp	r3, r1
 80057d2:	d118      	bne.n	8005806 <UART_SetConfig+0xbe>
 80057d4:	4b7e      	ldr	r3, [pc, #504]	; (80059d0 <UART_SetConfig+0x288>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057de:	2b10      	cmp	r3, #16
 80057e0:	f000 80e4 	beq.w	80059ac <UART_SetConfig+0x264>
 80057e4:	d802      	bhi.n	80057ec <UART_SetConfig+0xa4>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0d5      	beq.n	8005796 <UART_SetConfig+0x4e>
 80057ea:	e005      	b.n	80057f8 <UART_SetConfig+0xb0>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	f000 80d1 	beq.w	8005994 <UART_SetConfig+0x24c>
 80057f2:	2b30      	cmp	r3, #48	; 0x30
 80057f4:	f000 80e0 	beq.w	80059b8 <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80057fc:	f000 8081 	beq.w	8005902 <UART_SetConfig+0x1ba>
        ret = HAL_ERROR;
 8005800:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005802:	2300      	movs	r3, #0
 8005804:	e0a9      	b.n	800595a <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005806:	4977      	ldr	r1, [pc, #476]	; (80059e4 <UART_SetConfig+0x29c>)
 8005808:	428b      	cmp	r3, r1
 800580a:	d10d      	bne.n	8005828 <UART_SetConfig+0xe0>
 800580c:	4b70      	ldr	r3, [pc, #448]	; (80059d0 <UART_SetConfig+0x288>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	f000 80c8 	beq.w	80059ac <UART_SetConfig+0x264>
 800581c:	d9e3      	bls.n	80057e6 <UART_SetConfig+0x9e>
 800581e:	2b80      	cmp	r3, #128	; 0x80
 8005820:	f000 80b8 	beq.w	8005994 <UART_SetConfig+0x24c>
 8005824:	2bc0      	cmp	r3, #192	; 0xc0
 8005826:	e7e5      	b.n	80057f4 <UART_SetConfig+0xac>
 8005828:	496f      	ldr	r1, [pc, #444]	; (80059e8 <UART_SetConfig+0x2a0>)
 800582a:	428b      	cmp	r3, r1
 800582c:	d110      	bne.n	8005850 <UART_SetConfig+0x108>
 800582e:	4b68      	ldr	r3, [pc, #416]	; (80059d0 <UART_SetConfig+0x288>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583c:	f000 80b6 	beq.w	80059ac <UART_SetConfig+0x264>
 8005840:	d9d1      	bls.n	80057e6 <UART_SetConfig+0x9e>
 8005842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005846:	f000 80a5 	beq.w	8005994 <UART_SetConfig+0x24c>
 800584a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800584e:	e7d1      	b.n	80057f4 <UART_SetConfig+0xac>
 8005850:	4966      	ldr	r1, [pc, #408]	; (80059ec <UART_SetConfig+0x2a4>)
 8005852:	428b      	cmp	r3, r1
 8005854:	d114      	bne.n	8005880 <UART_SetConfig+0x138>
 8005856:	4b5e      	ldr	r3, [pc, #376]	; (80059d0 <UART_SetConfig+0x288>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005864:	f000 80a2 	beq.w	80059ac <UART_SetConfig+0x264>
 8005868:	d803      	bhi.n	8005872 <UART_SetConfig+0x12a>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1c4      	bne.n	80057f8 <UART_SetConfig+0xb0>
 800586e:	2301      	movs	r3, #1
 8005870:	e791      	b.n	8005796 <UART_SetConfig+0x4e>
 8005872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005876:	f000 808d 	beq.w	8005994 <UART_SetConfig+0x24c>
 800587a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800587e:	e7b9      	b.n	80057f4 <UART_SetConfig+0xac>
 8005880:	495b      	ldr	r1, [pc, #364]	; (80059f0 <UART_SetConfig+0x2a8>)
 8005882:	428b      	cmp	r3, r1
 8005884:	d113      	bne.n	80058ae <UART_SetConfig+0x166>
 8005886:	4b52      	ldr	r3, [pc, #328]	; (80059d0 <UART_SetConfig+0x288>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005894:	f000 808a 	beq.w	80059ac <UART_SetConfig+0x264>
 8005898:	d803      	bhi.n	80058a2 <UART_SetConfig+0x15a>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ac      	bne.n	80057f8 <UART_SetConfig+0xb0>
 800589e:	2300      	movs	r3, #0
 80058a0:	e779      	b.n	8005796 <UART_SetConfig+0x4e>
 80058a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a6:	d075      	beq.n	8005994 <UART_SetConfig+0x24c>
 80058a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058ac:	e7a2      	b.n	80057f4 <UART_SetConfig+0xac>
 80058ae:	4951      	ldr	r1, [pc, #324]	; (80059f4 <UART_SetConfig+0x2ac>)
 80058b0:	428b      	cmp	r3, r1
 80058b2:	d1a1      	bne.n	80057f8 <UART_SetConfig+0xb0>
 80058b4:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <UART_SetConfig+0x288>)
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058c2:	d073      	beq.n	80059ac <UART_SetConfig+0x264>
 80058c4:	d98f      	bls.n	80057e6 <UART_SetConfig+0x9e>
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	d063      	beq.n	8005994 <UART_SetConfig+0x24c>
 80058cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058d0:	e790      	b.n	80057f4 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d2:	f7fe ffd3 	bl	800487c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058d6:	6861      	ldr	r1, [r4, #4]
 80058d8:	084a      	lsrs	r2, r1, #1
 80058da:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80058de:	fbb3 f3f1 	udiv	r3, r3, r1
 80058e2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80058e4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e6:	f1a3 0110 	sub.w	r1, r3, #16
 80058ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80058ee:	4291      	cmp	r1, r2
 80058f0:	d90a      	bls.n	8005908 <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 80058f2:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80058f4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80058f6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80058fc:	f7fe ffce 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8005900:	e7e9      	b.n	80058d6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8005902:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005904:	2300      	movs	r3, #0
 8005906:	e7ee      	b.n	80058e6 <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005908:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800590c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005910:	6821      	ldr	r1, [r4, #0]
 8005912:	4313      	orrs	r3, r2
 8005914:	60cb      	str	r3, [r1, #12]
 8005916:	e7ed      	b.n	80058f4 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8005918:	2b08      	cmp	r3, #8
 800591a:	f63f af71 	bhi.w	8005800 <UART_SetConfig+0xb8>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x1dc>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	08005949 	.word	0x08005949
 8005928:	0800596d 	.word	0x0800596d
 800592c:	08005973 	.word	0x08005973
 8005930:	08005801 	.word	0x08005801
 8005934:	08005985 	.word	0x08005985
 8005938:	08005801 	.word	0x08005801
 800593c:	08005801 	.word	0x08005801
 8005940:	08005801 	.word	0x08005801
 8005944:	0800598b 	.word	0x0800598b
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fe ff98 	bl	800487c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800594c:	6862      	ldr	r2, [r4, #4]
 800594e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005952:	fbb3 f3f2 	udiv	r3, r3, r2
 8005956:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005958:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595a:	f1a3 0110 	sub.w	r1, r3, #16
 800595e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005962:	4291      	cmp	r1, r2
 8005964:	d8c5      	bhi.n	80058f2 <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	60d3      	str	r3, [r2, #12]
 800596a:	e7c3      	b.n	80058f4 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7fe ff96 	bl	800489c <HAL_RCC_GetPCLK2Freq>
 8005970:	e7ec      	b.n	800594c <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005972:	6860      	ldr	r0, [r4, #4]
 8005974:	0843      	lsrs	r3, r0, #1
 8005976:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800597a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800597e:	fbb3 f3f0 	udiv	r3, r3, r0
 8005982:	e7e8      	b.n	8005956 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005984:	f7fe feae 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8005988:	e7e0      	b.n	800594c <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800598a:	6860      	ldr	r0, [r4, #4]
 800598c:	0843      	lsrs	r3, r0, #1
 800598e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005992:	e7f4      	b.n	800597e <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005994:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005998:	d1eb      	bne.n	8005972 <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800599a:	6860      	ldr	r0, [r4, #4]
 800599c:	0843      	lsrs	r3, r0, #1
 800599e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80059a2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80059aa:	e79a      	b.n	80058e2 <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80059b0:	d1e8      	bne.n	8005984 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 80059b2:	f7fe fe97 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80059b6:	e78e      	b.n	80058d6 <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80059bc:	d1e5      	bne.n	800598a <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059be:	6860      	ldr	r0, [r4, #4]
 80059c0:	0843      	lsrs	r3, r0, #1
 80059c2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80059c6:	e7ee      	b.n	80059a6 <UART_SetConfig+0x25e>
 80059c8:	efff69f3 	.word	0xefff69f3
 80059cc:	40011000 	.word	0x40011000
 80059d0:	40023800 	.word	0x40023800
 80059d4:	0800cf14 	.word	0x0800cf14
 80059d8:	40004400 	.word	0x40004400
 80059dc:	0800cf18 	.word	0x0800cf18
 80059e0:	40004800 	.word	0x40004800
 80059e4:	40004c00 	.word	0x40004c00
 80059e8:	40005000 	.word	0x40005000
 80059ec:	40011400 	.word	0x40011400
 80059f0:	40007800 	.word	0x40007800
 80059f4:	40007c00 	.word	0x40007c00

080059f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059fa:	07da      	lsls	r2, r3, #31
{
 80059fc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fe:	d506      	bpl.n	8005a0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a00:	6801      	ldr	r1, [r0, #0]
 8005a02:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005a04:	684a      	ldr	r2, [r1, #4]
 8005a06:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005a0a:	4322      	orrs	r2, r4
 8005a0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a0e:	079c      	lsls	r4, r3, #30
 8005a10:	d506      	bpl.n	8005a20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a12:	6801      	ldr	r1, [r0, #0]
 8005a14:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005a16:	684a      	ldr	r2, [r1, #4]
 8005a18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a1c:	4322      	orrs	r2, r4
 8005a1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a20:	0759      	lsls	r1, r3, #29
 8005a22:	d506      	bpl.n	8005a32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a24:	6801      	ldr	r1, [r0, #0]
 8005a26:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005a28:	684a      	ldr	r2, [r1, #4]
 8005a2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a2e:	4322      	orrs	r2, r4
 8005a30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a32:	071a      	lsls	r2, r3, #28
 8005a34:	d506      	bpl.n	8005a44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a36:	6801      	ldr	r1, [r0, #0]
 8005a38:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005a3a:	684a      	ldr	r2, [r1, #4]
 8005a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a40:	4322      	orrs	r2, r4
 8005a42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a44:	06dc      	lsls	r4, r3, #27
 8005a46:	d506      	bpl.n	8005a56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a48:	6801      	ldr	r1, [r0, #0]
 8005a4a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005a4c:	688a      	ldr	r2, [r1, #8]
 8005a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a52:	4322      	orrs	r2, r4
 8005a54:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a56:	0699      	lsls	r1, r3, #26
 8005a58:	d506      	bpl.n	8005a68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5a:	6801      	ldr	r1, [r0, #0]
 8005a5c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005a5e:	688a      	ldr	r2, [r1, #8]
 8005a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a64:	4322      	orrs	r2, r4
 8005a66:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	065a      	lsls	r2, r3, #25
 8005a6a:	d510      	bpl.n	8005a8e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a6c:	6801      	ldr	r1, [r0, #0]
 8005a6e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005a70:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a72:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a76:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005a7a:	ea42 0204 	orr.w	r2, r2, r4
 8005a7e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a80:	d105      	bne.n	8005a8e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a82:	684a      	ldr	r2, [r1, #4]
 8005a84:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005a86:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005a8a:	4322      	orrs	r2, r4
 8005a8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	d506      	bpl.n	8005aa0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a92:	6802      	ldr	r2, [r0, #0]
 8005a94:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005a96:	6853      	ldr	r3, [r2, #4]
 8005a98:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6053      	str	r3, [r2, #4]
}
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <UART_WaitOnFlagUntilTimeout>:
{
 8005aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa6:	9d06      	ldr	r5, [sp, #24]
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460f      	mov	r7, r1
 8005aac:	4616      	mov	r6, r2
 8005aae:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab0:	6821      	ldr	r1, [r4, #0]
 8005ab2:	69ca      	ldr	r2, [r1, #28]
 8005ab4:	ea37 0302 	bics.w	r3, r7, r2
 8005ab8:	bf0c      	ite	eq
 8005aba:	2201      	moveq	r2, #1
 8005abc:	2200      	movne	r2, #0
 8005abe:	42b2      	cmp	r2, r6
 8005ac0:	d001      	beq.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	e018      	b.n	8005af8 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	1c68      	adds	r0, r5, #1
 8005ac8:	d0f3      	beq.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fd feb1 	bl	8003830 <HAL_GetTick>
 8005ace:	eba0 0008 	sub.w	r0, r0, r8
 8005ad2:	42a8      	cmp	r0, r5
 8005ad4:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ad6:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad8:	d800      	bhi.n	8005adc <UART_WaitOnFlagUntilTimeout+0x3a>
 8005ada:	b97d      	cbnz	r5, 8005afc <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005adc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ae0:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	6883      	ldr	r3, [r0, #8]
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005aea:	2320      	movs	r3, #32
 8005aec:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005aee:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005af0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005af2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005af4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8005af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005afc:	075a      	lsls	r2, r3, #29
 8005afe:	d5d7      	bpl.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b00:	69c3      	ldr	r3, [r0, #28]
 8005b02:	051b      	lsls	r3, r3, #20
 8005b04:	d5d4      	bpl.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b0a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b0c:	6803      	ldr	r3, [r0, #0]
 8005b0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b12:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	6883      	ldr	r3, [r0, #8]
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005b20:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b22:	67e3      	str	r3, [r4, #124]	; 0x7c
 8005b24:	e7e4      	b.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x4e>

08005b26 <UART_CheckIdleState>:
{
 8005b26:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	2500      	movs	r5, #0
{
 8005b2a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2c:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8005b2e:	f7fd fe7f 	bl	8003830 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b32:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8005b34:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	0712      	lsls	r2, r2, #28
 8005b3a:	d407      	bmi.n	8005b4c <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8005b3c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005b3e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b40:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8005b42:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005b46:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8005b48:	b003      	add	sp, #12
 8005b4a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005b50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b54:	4620      	mov	r0, r4
 8005b56:	9200      	str	r2, [sp, #0]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	f7ff ffa2 	bl	8005aa2 <UART_WaitOnFlagUntilTimeout>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d0ec      	beq.n	8005b3c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005b62:	2003      	movs	r0, #3
 8005b64:	e7f0      	b.n	8005b48 <UART_CheckIdleState+0x22>

08005b66 <HAL_UART_Init>:
{
 8005b66:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005b68:	4604      	mov	r4, r0
 8005b6a:	b340      	cbz	r0, 8005bbe <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005b6c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005b6e:	b91b      	cbnz	r3, 8005b78 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8005b70:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005b74:	f7fc feca 	bl	800290c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005b78:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005b7a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b7c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8005b7e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b88:	f7ff fdde 	bl	8005748 <UART_SetConfig>
 8005b8c:	2801      	cmp	r0, #1
 8005b8e:	d016      	beq.n	8005bbe <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b92:	b113      	cbz	r3, 8005b9a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7ff ff2f 	bl	80059f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8005b9c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
}
 8005bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8005bb8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005bba:	f7ff bfb4 	b.w	8005b26 <UART_CheckIdleState>
}
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	bd10      	pop	{r4, pc}
	...

08005bc4 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bc8:	b113      	cbz	r3, 8005bd0 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8005bca:	f06f 0005 	mvn.w	r0, #5
 8005bce:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd0:	f3ef 8210 	mrs	r2, PRIMASK
 8005bd4:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8005bd6:	b912      	cbnz	r2, 8005bde <osKernelInitialize+0x1a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bd8:	f3ef 8211 	mrs	r2, BASEPRI
 8005bdc:	b112      	cbz	r2, 8005be4 <osKernelInitialize+0x20>
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	2a02      	cmp	r2, #2
 8005be2:	d0f2      	beq.n	8005bca <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	b910      	cbnz	r0, 8005bee <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005be8:	2201      	movs	r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005bf2:	4770      	bx	lr
 8005bf4:	20000900 	.word	0x20000900

08005bf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bf8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bfa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bfe:	b113      	cbz	r3, 8005c06 <osKernelStart+0xe>
    stat = osErrorISR;
 8005c00:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8005c04:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c06:	f3ef 8210 	mrs	r2, PRIMASK
 8005c0a:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8005c0c:	b912      	cbnz	r2, 8005c14 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c0e:	f3ef 8211 	mrs	r2, BASEPRI
 8005c12:	b112      	cbz	r2, 8005c1a <osKernelStart+0x22>
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	2a02      	cmp	r2, #2
 8005c18:	d0f2      	beq.n	8005c00 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	2a01      	cmp	r2, #1
 8005c1e:	d105      	bne.n	8005c2c <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8005c20:	2202      	movs	r2, #2
 8005c22:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005c24:	f000 ffc6 	bl	8006bb4 <vTaskStartScheduler>
      stat = osOK;
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7eb      	b.n	8005c04 <osKernelStart+0xc>
      stat = osError;
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005c30:	e7e8      	b.n	8005c04 <osKernelStart+0xc>
 8005c32:	bf00      	nop
 8005c34:	20000900 	.word	0x20000900

08005c38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c3e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c40:	460b      	mov	r3, r1
  hTask = NULL;
 8005c42:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c44:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005c48:	bb32      	cbnz	r2, 8005c98 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c4a:	f3ef 8210 	mrs	r2, PRIMASK
 8005c4e:	b912      	cbnz	r2, 8005c56 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c50:	f3ef 8211 	mrs	r2, BASEPRI
 8005c54:	b11a      	cbz	r2, 8005c5e <osThreadNew+0x26>
 8005c56:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <osThreadNew+0xac>)
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	2a02      	cmp	r2, #2
 8005c5c:	d01c      	beq.n	8005c98 <osThreadNew+0x60>
 8005c5e:	b1d8      	cbz	r0, 8005c98 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8005c60:	2c00      	cmp	r4, #0
 8005c62:	d037      	beq.n	8005cd4 <osThreadNew+0x9c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005c64:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 8005c66:	6821      	ldr	r1, [r4, #0]
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	bf08      	it	eq
 8005c6c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c6e:	1e6a      	subs	r2, r5, #1
 8005c70:	462f      	mov	r7, r5
 8005c72:	2a37      	cmp	r2, #55	; 0x37
 8005c74:	d833      	bhi.n	8005cde <osThreadNew+0xa6>
 8005c76:	6862      	ldr	r2, [r4, #4]
 8005c78:	07d2      	lsls	r2, r2, #31
 8005c7a:	d430      	bmi.n	8005cde <osThreadNew+0xa6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005c7c:	6966      	ldr	r6, [r4, #20]
 8005c7e:	b176      	cbz	r6, 8005c9e <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c80:	08b2      	lsrs	r2, r6, #2
 8005c82:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c86:	f1bc 0f00 	cmp.w	ip, #0
 8005c8a:	d00b      	beq.n	8005ca4 <osThreadNew+0x6c>
 8005c8c:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 8005c90:	d902      	bls.n	8005c98 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c92:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c94:	b104      	cbz	r4, 8005c98 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c96:	b9b6      	cbnz	r6, 8005cc6 <osThreadNew+0x8e>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c98:	9805      	ldr	r0, [sp, #20]
}
 8005c9a:	b007      	add	sp, #28
 8005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8005c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca2:	e7ee      	b.n	8005c82 <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ca4:	f1be 0f00 	cmp.w	lr, #0
 8005ca8:	d1f6      	bne.n	8005c98 <osThreadNew+0x60>
      if (mem == 0) {
 8005caa:	6924      	ldr	r4, [r4, #16]
 8005cac:	2c00      	cmp	r4, #0
 8005cae:	d1f3      	bne.n	8005c98 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005cb0:	ac05      	add	r4, sp, #20
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	e9cd 7400 	strd	r7, r4, [sp]
 8005cb8:	f000 ff4e 	bl	8006b58 <xTaskCreate>
 8005cbc:	2801      	cmp	r0, #1
          hTask = NULL;
 8005cbe:	bf1c      	itt	ne
 8005cc0:	2300      	movne	r3, #0
 8005cc2:	9305      	strne	r3, [sp, #20]
 8005cc4:	e7e8      	b.n	8005c98 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cc6:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8005cca:	9500      	str	r5, [sp, #0]
 8005ccc:	f000 ff06 	bl	8006adc <xTaskCreateStatic>
 8005cd0:	9005      	str	r0, [sp, #20]
 8005cd2:	e7e1      	b.n	8005c98 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 8005cd4:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8005cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
    name = NULL;
 8005cda:	4621      	mov	r1, r4
 8005cdc:	e7e8      	b.n	8005cb0 <osThreadNew+0x78>
        return (NULL);
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e7db      	b.n	8005c9a <osThreadNew+0x62>
 8005ce2:	bf00      	nop
 8005ce4:	20000900 	.word	0x20000900

08005ce8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005ce8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cea:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cee:	b113      	cbz	r3, 8005cf6 <osDelay+0xe>
    stat = osErrorISR;
 8005cf0:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005cf4:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8005cfa:	b913      	cbnz	r3, 8005d02 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8005d00:	b11b      	cbz	r3, 8005d0a <osDelay+0x22>
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <osDelay+0x30>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d0f2      	beq.n	8005cf0 <osDelay+0x8>
    if (ticks != 0U) {
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d0f2      	beq.n	8005cf4 <osDelay+0xc>
      vTaskDelay(ticks);
 8005d0e:	f001 f8af 	bl	8006e70 <vTaskDelay>
    stat = osOK;
 8005d12:	2000      	movs	r0, #0
 8005d14:	e7ee      	b.n	8005cf4 <osDelay+0xc>
 8005d16:	bf00      	nop
 8005d18:	20000900 	.word	0x20000900

08005d1c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d20:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8005d24:	b113      	cbz	r3, 8005d2c <osMutexNew+0x10>
  hMutex = NULL;
 8005d26:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8005d28:	4628      	mov	r0, r5
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2c:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8005d30:	b912      	cbnz	r2, 8005d38 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d32:	f3ef 8211 	mrs	r2, BASEPRI
 8005d36:	b11a      	cbz	r2, 8005d40 <osMutexNew+0x24>
 8005d38:	4a18      	ldr	r2, [pc, #96]	; (8005d9c <osMutexNew+0x80>)
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	2a02      	cmp	r2, #2
 8005d3e:	d0f2      	beq.n	8005d26 <osMutexNew+0xa>
    if (attr != NULL) {
 8005d40:	b104      	cbz	r4, 8005d44 <osMutexNew+0x28>
      type = attr->attr_bits;
 8005d42:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005d44:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 8005d48:	071b      	lsls	r3, r3, #28
 8005d4a:	d4ec      	bmi.n	8005d26 <osMutexNew+0xa>
      if (attr != NULL) {
 8005d4c:	b1b4      	cbz	r4, 8005d7c <osMutexNew+0x60>
 8005d4e:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005d52:	b189      	cbz	r1, 8005d78 <osMutexNew+0x5c>
 8005d54:	2b4f      	cmp	r3, #79	; 0x4f
 8005d56:	d9e6      	bls.n	8005d26 <osMutexNew+0xa>
        if (rmtx != 0U) {
 8005d58:	b1de      	cbz	r6, 8005d92 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005d5a:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005d5c:	f000 fade 	bl	800631c <xQueueCreateMutexStatic>
 8005d60:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d0df      	beq.n	8005d26 <osMutexNew+0xa>
          name = attr->name;
 8005d66:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f000 fd1b 	bl	80067a4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	d0da      	beq.n	8005d28 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005d72:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 8005d76:	e7d7      	b.n	8005d28 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1d4      	bne.n	8005d26 <osMutexNew+0xa>
          if (rmtx != 0U) {
 8005d7c:	b15e      	cbz	r6, 8005d96 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005d7e:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8005d80:	f000 fb01 	bl	8006386 <xQueueCreateMutex>
 8005d84:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d0cd      	beq.n	8005d26 <osMutexNew+0xa>
        if (attr != NULL) {
 8005d8a:	2c00      	cmp	r4, #0
 8005d8c:	d1eb      	bne.n	8005d66 <osMutexNew+0x4a>
          name = NULL;
 8005d8e:	4621      	mov	r1, r4
 8005d90:	e7ea      	b.n	8005d68 <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005d92:	2001      	movs	r0, #1
 8005d94:	e7e2      	b.n	8005d5c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8005d96:	2001      	movs	r0, #1
 8005d98:	e7f2      	b.n	8005d80 <osMutexNew+0x64>
 8005d9a:	bf00      	nop
 8005d9c:	20000900 	.word	0x20000900

08005da0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005da0:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005da2:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005da6:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8005da8:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005dac:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dae:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8005db2:	b112      	cbz	r2, 8005dba <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8005db4:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8005db8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dba:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8005dbe:	b912      	cbnz	r2, 8005dc6 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dc0:	f3ef 8211 	mrs	r2, BASEPRI
 8005dc4:	b11a      	cbz	r2, 8005dce <osMutexAcquire+0x2e>
 8005dc6:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <osMutexAcquire+0x5c>)
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	2a02      	cmp	r2, #2
 8005dcc:	d0f2      	beq.n	8005db4 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8005dce:	b188      	cbz	r0, 8005df4 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005dd0:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8005dd2:	b163      	cbz	r3, 8005dee <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005dd4:	f000 fcc2 	bl	800675c <xQueueTakeMutexRecursive>
 8005dd8:	2801      	cmp	r0, #1
 8005dda:	d101      	bne.n	8005de0 <osMutexAcquire+0x40>
  stat = osOK;
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e7eb      	b.n	8005db8 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8005de0:	2c00      	cmp	r4, #0
 8005de2:	bf14      	ite	ne
 8005de4:	f06f 0001 	mvnne.w	r0, #1
 8005de8:	f06f 0002 	mvneq.w	r0, #2
 8005dec:	e7e4      	b.n	8005db8 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005dee:	f000 fbeb 	bl	80065c8 <xQueueSemaphoreTake>
 8005df2:	e7f1      	b.n	8005dd8 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8005df4:	f06f 0003 	mvn.w	r0, #3
 8005df8:	e7de      	b.n	8005db8 <osMutexAcquire+0x18>
 8005dfa:	bf00      	nop
 8005dfc:	20000900 	.word	0x20000900

08005e00 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005e00:	b508      	push	{r3, lr}
 8005e02:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005e04:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8005e08:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0c:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8005e10:	b112      	cbz	r2, 8005e18 <osMutexRelease+0x18>
    stat = osErrorISR;
 8005e12:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8005e16:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e18:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8005e1c:	b912      	cbnz	r2, 8005e24 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e22:	b11a      	cbz	r2, 8005e2c <osMutexRelease+0x2c>
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <osMutexRelease+0x50>)
 8005e26:	6812      	ldr	r2, [r2, #0]
 8005e28:	2a02      	cmp	r2, #2
 8005e2a:	d0f2      	beq.n	8005e12 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8005e2c:	b168      	cbz	r0, 8005e4a <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8005e2e:	b13b      	cbz	r3, 8005e40 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005e30:	f000 fa89 	bl	8006346 <xQueueGiveMutexRecursive>
 8005e34:	2801      	cmp	r0, #1
  stat = osOK;
 8005e36:	bf0c      	ite	eq
 8005e38:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8005e3a:	f06f 0002 	mvnne.w	r0, #2
 8005e3e:	e7ea      	b.n	8005e16 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005e40:	461a      	mov	r2, r3
 8005e42:	4619      	mov	r1, r3
 8005e44:	f000 f9b0 	bl	80061a8 <xQueueGenericSend>
 8005e48:	e7f4      	b.n	8005e34 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8005e4a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8005e4e:	e7e2      	b.n	8005e16 <osMutexRelease+0x16>
 8005e50:	20000900 	.word	0x20000900

08005e54 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e54:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <vApplicationGetIdleTaskMemory+0x10>)
 8005e56:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e58:	4b03      	ldr	r3, [pc, #12]	; (8005e68 <vApplicationGetIdleTaskMemory+0x14>)
 8005e5a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e60:	6013      	str	r3, [r2, #0]
}
 8005e62:	4770      	bx	lr
 8005e64:	200008a4 	.word	0x200008a4
 8005e68:	200004a4 	.word	0x200004a4

08005e6c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e6c:	4b03      	ldr	r3, [pc, #12]	; (8005e7c <vApplicationGetTimerTaskMemory+0x10>)
 8005e6e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e70:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <vApplicationGetTimerTaskMemory+0x14>)
 8005e72:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e78:	6013      	str	r3, [r2, #0]
}
 8005e7a:	4770      	bx	lr
 8005e7c:	20001104 	.word	0x20001104
 8005e80:	20000904 	.word	0x20000904

08005e84 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e84:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e88:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e8c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e8e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e90:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e98:	4770      	bx	lr

08005e9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e9e:	4770      	bx	lr

08005ea0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ea0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ea2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005ea4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ea6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eac:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005eae:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8005eb0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6003      	str	r3, [r0, #0]
}
 8005eb6:	4770      	bx	lr

08005eb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eb8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eba:	1c53      	adds	r3, r2, #1
{
 8005ebc:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8005ebe:	d10a      	bne.n	8005ed6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ec0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ec6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ec8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eca:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005ecc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8005ece:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	6003      	str	r3, [r0, #0]
}
 8005ed4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ed6:	f100 0308 	add.w	r3, r0, #8
 8005eda:	685c      	ldr	r4, [r3, #4]
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	4295      	cmp	r5, r2
 8005ee0:	d8ef      	bhi.n	8005ec2 <vListInsert+0xa>
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	e7f9      	b.n	8005eda <vListInsert+0x22>

08005ee6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ee6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8005eea:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eec:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eee:	6882      	ldr	r2, [r0, #8]
 8005ef0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ef6:	bf08      	it	eq
 8005ef8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005efa:	2200      	movs	r2, #0
 8005efc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	3a01      	subs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f04:	6818      	ldr	r0, [r3, #0]
}
 8005f06:	4770      	bx	lr

08005f08 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f0c:	f001 fc52 	bl	80077b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f10:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005f12:	f001 fc75 	bl	8007800 <vPortExitCritical>

	return xReturn;
}
 8005f16:	fab4 f084 	clz	r0, r4
 8005f1a:	0940      	lsrs	r0, r0, #5
 8005f1c:	bd10      	pop	{r4, pc}

08005f1e <prvCopyDataToQueue>:
{
 8005f1e:	b570      	push	{r4, r5, r6, lr}
 8005f20:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f22:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005f24:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f26:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f28:	b942      	cbnz	r2, 8005f3c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f2a:	6805      	ldr	r5, [r0, #0]
 8005f2c:	b99d      	cbnz	r5, 8005f56 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f2e:	6880      	ldr	r0, [r0, #8]
 8005f30:	f001 f92a 	bl	8007188 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f34:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f36:	3601      	adds	r6, #1
 8005f38:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005f3c:	b96d      	cbnz	r5, 8005f5a <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f3e:	6840      	ldr	r0, [r0, #4]
 8005f40:	f003 f9c2 	bl	80092c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f48:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f4a:	68a2      	ldr	r2, [r4, #8]
 8005f4c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f4e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f50:	d301      	bcc.n	8005f56 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8005f56:	2000      	movs	r0, #0
 8005f58:	e7ed      	b.n	8005f36 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f5a:	68c0      	ldr	r0, [r0, #12]
 8005f5c:	f003 f9b4 	bl	80092c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f62:	68e2      	ldr	r2, [r4, #12]
 8005f64:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f66:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f68:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f6a:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f6c:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f6e:	bf3e      	ittt	cc
 8005f70:	68a2      	ldrcc	r2, [r4, #8]
 8005f72:	189b      	addcc	r3, r3, r2
 8005f74:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005f76:	2d02      	cmp	r5, #2
 8005f78:	d1ed      	bne.n	8005f56 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f7a:	b10e      	cbz	r6, 8005f80 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8005f7c:	3e01      	subs	r6, #1
 8005f7e:	e7ea      	b.n	8005f56 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005f80:	4630      	mov	r0, r6
 8005f82:	e7d8      	b.n	8005f36 <prvCopyDataToQueue+0x18>

08005f84 <prvCopyDataFromQueue>:
{
 8005f84:	4603      	mov	r3, r0
 8005f86:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005f8a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f8c:	b162      	cbz	r2, 8005fa8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f8e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f90:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f92:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f94:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f96:	60d9      	str	r1, [r3, #12]
}
 8005f98:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f9c:	bf24      	itt	cs
 8005f9e:	6819      	ldrcs	r1, [r3, #0]
 8005fa0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fa2:	68d9      	ldr	r1, [r3, #12]
 8005fa4:	f003 b990 	b.w	80092c8 <memcpy>
}
 8005fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <prvUnlockQueue>:
{
 8005fae:	b570      	push	{r4, r5, r6, lr}
 8005fb0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005fb2:	f001 fbff 	bl	80077b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005fb6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fba:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005fbe:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	dc14      	bgt.n	8005fee <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005fc4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8005fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005fce:	f001 fc17 	bl	8007800 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005fd2:	f001 fbef 	bl	80077b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005fd6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005fda:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	dc12      	bgt.n	8006006 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005fe0:	23ff      	movs	r3, #255	; 0xff
 8005fe2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8005fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005fea:	f001 bc09 	b.w	8007800 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0e7      	beq.n	8005fc4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f000 ffdb 	bl	8006fb0 <xTaskRemoveFromEventList>
 8005ffa:	b108      	cbz	r0, 8006000 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8005ffc:	f001 f868 	bl	80070d0 <vTaskMissedYield>
 8006000:	3d01      	subs	r5, #1
 8006002:	b26d      	sxtb	r5, r5
 8006004:	e7dc      	b.n	8005fc0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0e9      	beq.n	8005fe0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600c:	4630      	mov	r0, r6
 800600e:	f000 ffcf 	bl	8006fb0 <xTaskRemoveFromEventList>
 8006012:	b108      	cbz	r0, 8006018 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006014:	f001 f85c 	bl	80070d0 <vTaskMissedYield>
 8006018:	3d01      	subs	r5, #1
 800601a:	b26d      	sxtb	r5, r5
 800601c:	e7de      	b.n	8005fdc <prvUnlockQueue+0x2e>
	...

08006020 <xQueueGenericReset>:
{
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006024:	4604      	mov	r4, r0
 8006026:	b950      	cbnz	r0, 800603e <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	b672      	cpsid	i
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	b662      	cpsie	i
 800603c:	e7fe      	b.n	800603c <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800603e:	f001 fbb9 	bl	80077b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006048:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800604a:	4343      	muls	r3, r0
 800604c:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800604e:	1a1b      	subs	r3, r3, r0
 8006050:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006052:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006054:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006056:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006058:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800605a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800605c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006064:	b995      	cbnz	r5, 800608c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	b163      	cbz	r3, 8006084 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800606a:	f104 0010 	add.w	r0, r4, #16
 800606e:	f000 ff9f 	bl	8006fb0 <xTaskRemoveFromEventList>
 8006072:	b138      	cbz	r0, 8006084 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <xQueueGenericReset+0x80>)
 8006076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006084:	f001 fbbc 	bl	8007800 <vPortExitCritical>
}
 8006088:	2001      	movs	r0, #1
 800608a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800608c:	f104 0010 	add.w	r0, r4, #16
 8006090:	f7ff fef8 	bl	8005e84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006094:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006098:	f7ff fef4 	bl	8005e84 <vListInitialise>
 800609c:	e7f2      	b.n	8006084 <xQueueGenericReset+0x64>
 800609e:	bf00      	nop
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <xQueueGenericCreateStatic>:
	{
 80060a4:	b513      	push	{r0, r1, r4, lr}
 80060a6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060a8:	b950      	cbnz	r0, 80060c0 <xQueueGenericCreateStatic+0x1c>
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	b672      	cpsid	i
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	b662      	cpsie	i
 80060be:	e7fe      	b.n	80060be <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80060c0:	b953      	cbnz	r3, 80060d8 <xQueueGenericCreateStatic+0x34>
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	b672      	cpsid	i
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	b662      	cpsie	i
 80060d6:	e7fe      	b.n	80060d6 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060d8:	b15a      	cbz	r2, 80060f2 <xQueueGenericCreateStatic+0x4e>
 80060da:	b9b1      	cbnz	r1, 800610a <xQueueGenericCreateStatic+0x66>
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	b672      	cpsid	i
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	b662      	cpsie	i
 80060f0:	e7fe      	b.n	80060f0 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060f2:	b151      	cbz	r1, 800610a <xQueueGenericCreateStatic+0x66>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	b672      	cpsid	i
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	b662      	cpsie	i
 8006108:	e7fe      	b.n	8006108 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800610a:	2350      	movs	r3, #80	; 0x50
 800610c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800610e:	9b01      	ldr	r3, [sp, #4]
 8006110:	2b50      	cmp	r3, #80	; 0x50
 8006112:	d00a      	beq.n	800612a <xQueueGenericCreateStatic+0x86>
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	b672      	cpsid	i
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	b662      	cpsie	i
 8006128:	e7fe      	b.n	8006128 <xQueueGenericCreateStatic+0x84>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800612a:	2900      	cmp	r1, #0
 800612c:	bf08      	it	eq
 800612e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006130:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006132:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006134:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006136:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800613a:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800613e:	4619      	mov	r1, r3
 8006140:	4620      	mov	r0, r4
 8006142:	f7ff ff6d 	bl	8006020 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006146:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800614a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800614c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8006150:	b002      	add	sp, #8
 8006152:	bd10      	pop	{r4, pc}

08006154 <xQueueGenericCreate>:
	{
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	460d      	mov	r5, r1
 8006158:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800615a:	4606      	mov	r6, r0
 800615c:	b950      	cbnz	r0, 8006174 <xQueueGenericCreate+0x20>
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	b672      	cpsid	i
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	b662      	cpsie	i
 8006172:	e7fe      	b.n	8006172 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006174:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006176:	3050      	adds	r0, #80	; 0x50
 8006178:	f001 fc7a 	bl	8007a70 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800617c:	4604      	mov	r4, r0
 800617e:	b160      	cbz	r0, 800619a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006180:	2300      	movs	r3, #0
 8006182:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006186:	b955      	cbnz	r5, 800619e <xQueueGenericCreate+0x4a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006188:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800618a:	2101      	movs	r1, #1
 800618c:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800618e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006192:	f7ff ff45 	bl	8006020 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006196:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800619a:	4620      	mov	r0, r4
 800619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800619e:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061a2:	6003      	str	r3, [r0, #0]
 80061a4:	e7f1      	b.n	800618a <xQueueGenericCreate+0x36>
	...

080061a8 <xQueueGenericSend>:
{
 80061a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	4688      	mov	r8, r1
 80061ae:	9201      	str	r2, [sp, #4]
 80061b0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80061b2:	4604      	mov	r4, r0
 80061b4:	b950      	cbnz	r0, 80061cc <xQueueGenericSend+0x24>
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	b672      	cpsid	i
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	b662      	cpsie	i
 80061ca:	e7fe      	b.n	80061ca <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061cc:	b961      	cbnz	r1, 80061e8 <xQueueGenericSend+0x40>
 80061ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80061d0:	b153      	cbz	r3, 80061e8 <xQueueGenericSend+0x40>
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	b672      	cpsid	i
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	b662      	cpsie	i
 80061e6:	e7fe      	b.n	80061e6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061e8:	2f02      	cmp	r7, #2
 80061ea:	d10d      	bne.n	8006208 <xQueueGenericSend+0x60>
 80061ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d00a      	beq.n	8006208 <xQueueGenericSend+0x60>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	b672      	cpsid	i
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	b662      	cpsie	i
 8006206:	e7fe      	b.n	8006206 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006208:	f000 ff6e 	bl	80070e8 <xTaskGetSchedulerState>
 800620c:	b960      	cbnz	r0, 8006228 <xQueueGenericSend+0x80>
 800620e:	9e01      	ldr	r6, [sp, #4]
 8006210:	b15e      	cbz	r6, 800622a <xQueueGenericSend+0x82>
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	b672      	cpsid	i
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	b662      	cpsie	i
 8006226:	e7fe      	b.n	8006226 <xQueueGenericSend+0x7e>
 8006228:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800622a:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800622e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8006318 <xQueueGenericSend+0x170>
 8006232:	e037      	b.n	80062a4 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006234:	9d01      	ldr	r5, [sp, #4]
 8006236:	b91d      	cbnz	r5, 8006240 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8006238:	f001 fae2 	bl	8007800 <vPortExitCritical>
			return errQUEUE_FULL;
 800623c:	2000      	movs	r0, #0
 800623e:	e050      	b.n	80062e2 <xQueueGenericSend+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8006240:	b916      	cbnz	r6, 8006248 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006242:	a802      	add	r0, sp, #8
 8006244:	f000 fef8 	bl	8007038 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006248:	f001 fada 	bl	8007800 <vPortExitCritical>
		vTaskSuspendAll();
 800624c:	f000 fcfa 	bl	8006c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006250:	f001 fab0 	bl	80077b4 <vPortEnterCritical>
 8006254:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006258:	2bff      	cmp	r3, #255	; 0xff
 800625a:	d101      	bne.n	8006260 <xQueueGenericSend+0xb8>
 800625c:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8006260:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006264:	2bff      	cmp	r3, #255	; 0xff
 8006266:	d101      	bne.n	800626c <xQueueGenericSend+0xc4>
 8006268:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800626c:	f001 fac8 	bl	8007800 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006270:	a901      	add	r1, sp, #4
 8006272:	a802      	add	r0, sp, #8
 8006274:	f000 feec 	bl	8007050 <xTaskCheckForTimeOut>
 8006278:	2800      	cmp	r0, #0
 800627a:	d146      	bne.n	800630a <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800627c:	f001 fa9a 	bl	80077b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006280:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006282:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006284:	429a      	cmp	r2, r3
 8006286:	d12f      	bne.n	80062e8 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006288:	f001 faba 	bl	8007800 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800628c:	9901      	ldr	r1, [sp, #4]
 800628e:	f104 0010 	add.w	r0, r4, #16
 8006292:	f000 fe51 	bl	8006f38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff fe89 	bl	8005fae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800629c:	f000 fd72 	bl	8006d84 <xTaskResumeAll>
 80062a0:	b350      	cbz	r0, 80062f8 <xQueueGenericSend+0x150>
 80062a2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80062a4:	f001 fa86 	bl	80077b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d301      	bcc.n	80062b4 <xQueueGenericSend+0x10c>
 80062b0:	2f02      	cmp	r7, #2
 80062b2:	d1bf      	bne.n	8006234 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062b4:	463a      	mov	r2, r7
 80062b6:	4641      	mov	r1, r8
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff fe30 	bl	8005f1e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c0:	b11b      	cbz	r3, 80062ca <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062c6:	f000 fe73 	bl	8006fb0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80062ca:	b138      	cbz	r0, 80062dc <xQueueGenericSend+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <xQueueGenericSend+0x170>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80062dc:	f001 fa90 	bl	8007800 <vPortExitCritical>
				return pdPASS;
 80062e0:	2001      	movs	r0, #1
}
 80062e2:	b004      	add	sp, #16
 80062e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80062e8:	f001 fa8a 	bl	8007800 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7ff fe5e 	bl	8005fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062f2:	f000 fd47 	bl	8006d84 <xTaskResumeAll>
 80062f6:	e7d4      	b.n	80062a2 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 80062f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062fc:	f8ca 3000 	str.w	r3, [sl]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	e7cb      	b.n	80062a2 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800630a:	4620      	mov	r0, r4
 800630c:	f7ff fe4f 	bl	8005fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006310:	f000 fd38 	bl	8006d84 <xTaskResumeAll>
 8006314:	e792      	b.n	800623c <xQueueGenericSend+0x94>
 8006316:	bf00      	nop
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800631c:	2200      	movs	r2, #0
 800631e:	460b      	mov	r3, r1
	{
 8006320:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006322:	4611      	mov	r1, r2
 8006324:	9000      	str	r0, [sp, #0]
 8006326:	2001      	movs	r0, #1
 8006328:	f7ff febc 	bl	80060a4 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800632c:	4604      	mov	r4, r0
 800632e:	b138      	cbz	r0, 8006340 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006334:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006336:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006338:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800633a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800633c:	f7ff ff34 	bl	80061a8 <xQueueGenericSend>
	}
 8006340:	4620      	mov	r0, r4
 8006342:	b002      	add	sp, #8
 8006344:	bd10      	pop	{r4, pc}

08006346 <xQueueGiveMutexRecursive>:
	{
 8006346:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006348:	4604      	mov	r4, r0
 800634a:	b950      	cbnz	r0, 8006362 <xQueueGiveMutexRecursive+0x1c>
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	b672      	cpsid	i
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	b662      	cpsie	i
 8006360:	e7fe      	b.n	8006360 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006362:	6885      	ldr	r5, [r0, #8]
 8006364:	f000 feba 	bl	80070dc <xTaskGetCurrentTaskHandle>
 8006368:	4285      	cmp	r5, r0
 800636a:	d10a      	bne.n	8006382 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800636c:	68e3      	ldr	r3, [r4, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006372:	b923      	cbnz	r3, 800637e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006374:	461a      	mov	r2, r3
 8006376:	4619      	mov	r1, r3
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff ff15 	bl	80061a8 <xQueueGenericSend>
			xReturn = pdPASS;
 800637e:	2001      	movs	r0, #1
		return xReturn;
 8006380:	e000      	b.n	8006384 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8006382:	2000      	movs	r0, #0
	}
 8006384:	bd38      	pop	{r3, r4, r5, pc}

08006386 <xQueueCreateMutex>:
	{
 8006386:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006388:	4602      	mov	r2, r0
 800638a:	2100      	movs	r1, #0
 800638c:	2001      	movs	r0, #1
 800638e:	f7ff fee1 	bl	8006154 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8006392:	4604      	mov	r4, r0
 8006394:	b138      	cbz	r0, 80063a6 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800639a:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800639c:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800639e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80063a0:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80063a2:	f7ff ff01 	bl	80061a8 <xQueueGenericSend>
	}
 80063a6:	4620      	mov	r0, r4
 80063a8:	bd10      	pop	{r4, pc}

080063aa <xQueueGenericSendFromISR>:
{
 80063aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ae:	4689      	mov	r9, r1
 80063b0:	4690      	mov	r8, r2
 80063b2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80063b4:	4604      	mov	r4, r0
 80063b6:	b950      	cbnz	r0, 80063ce <xQueueGenericSendFromISR+0x24>
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	b672      	cpsid	i
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	b662      	cpsie	i
 80063cc:	e7fe      	b.n	80063cc <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ce:	b961      	cbnz	r1, 80063ea <xQueueGenericSendFromISR+0x40>
 80063d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063d2:	b153      	cbz	r3, 80063ea <xQueueGenericSendFromISR+0x40>
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	b672      	cpsid	i
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	b662      	cpsie	i
 80063e8:	e7fe      	b.n	80063e8 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063ea:	2f02      	cmp	r7, #2
 80063ec:	d10d      	bne.n	800640a <xQueueGenericSendFromISR+0x60>
 80063ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d00a      	beq.n	800640a <xQueueGenericSendFromISR+0x60>
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	b672      	cpsid	i
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	b662      	cpsie	i
 8006408:	e7fe      	b.n	8006408 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800640a:	f001 fadb 	bl	80079c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800640e:	f3ef 8611 	mrs	r6, BASEPRI
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	b672      	cpsid	i
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006426:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800642a:	429a      	cmp	r2, r3
 800642c:	d301      	bcc.n	8006432 <xQueueGenericSendFromISR+0x88>
 800642e:	2f02      	cmp	r7, #2
 8006430:	d122      	bne.n	8006478 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006432:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006436:	463a      	mov	r2, r7
 8006438:	4649      	mov	r1, r9
 800643a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800643c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800643e:	f7ff fd6e 	bl	8005f1e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006442:	1c6b      	adds	r3, r5, #1
 8006444:	d113      	bne.n	800646e <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006448:	b90b      	cbnz	r3, 800644e <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800644a:	2001      	movs	r0, #1
 800644c:	e00b      	b.n	8006466 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800644e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006452:	f000 fdad 	bl	8006fb0 <xTaskRemoveFromEventList>
 8006456:	2800      	cmp	r0, #0
 8006458:	d0f7      	beq.n	800644a <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800645a:	f1b8 0f00 	cmp.w	r8, #0
 800645e:	d0f4      	beq.n	800644a <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006460:	2001      	movs	r0, #1
 8006462:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006466:	f386 8811 	msr	BASEPRI, r6
}
 800646a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800646e:	3501      	adds	r5, #1
 8006470:	b26d      	sxtb	r5, r5
 8006472:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006476:	e7e8      	b.n	800644a <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8006478:	2000      	movs	r0, #0
 800647a:	e7f4      	b.n	8006466 <xQueueGenericSendFromISR+0xbc>

0800647c <xQueueReceive>:
{
 800647c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006480:	b085      	sub	sp, #20
 8006482:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8006484:	4604      	mov	r4, r0
{
 8006486:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006488:	b950      	cbnz	r0, 80064a0 <xQueueReceive+0x24>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	b672      	cpsid	i
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	b662      	cpsie	i
 800649e:	e7fe      	b.n	800649e <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a0:	b961      	cbnz	r1, 80064bc <xQueueReceive+0x40>
 80064a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80064a4:	b153      	cbz	r3, 80064bc <xQueueReceive+0x40>
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	b672      	cpsid	i
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	b662      	cpsie	i
 80064ba:	e7fe      	b.n	80064ba <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064bc:	f000 fe14 	bl	80070e8 <xTaskGetSchedulerState>
 80064c0:	b960      	cbnz	r0, 80064dc <xQueueReceive+0x60>
 80064c2:	9e01      	ldr	r6, [sp, #4]
 80064c4:	b15e      	cbz	r6, 80064de <xQueueReceive+0x62>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	b672      	cpsid	i
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	b662      	cpsie	i
 80064da:	e7fe      	b.n	80064da <xQueueReceive+0x5e>
 80064dc:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80064de:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80064e2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80065c4 <xQueueReceive+0x148>
 80064e6:	e03b      	b.n	8006560 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 80064e8:	9d01      	ldr	r5, [sp, #4]
 80064ea:	b91d      	cbnz	r5, 80064f4 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 80064ec:	f001 f988 	bl	8007800 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80064f0:	2000      	movs	r0, #0
 80064f2:	e052      	b.n	800659a <xQueueReceive+0x11e>
				else if( xEntryTimeSet == pdFALSE )
 80064f4:	b916      	cbnz	r6, 80064fc <xQueueReceive+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f6:	a802      	add	r0, sp, #8
 80064f8:	f000 fd9e 	bl	8007038 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80064fc:	f001 f980 	bl	8007800 <vPortExitCritical>
		vTaskSuspendAll();
 8006500:	f000 fba0 	bl	8006c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006504:	f001 f956 	bl	80077b4 <vPortEnterCritical>
 8006508:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800650c:	2bff      	cmp	r3, #255	; 0xff
 800650e:	d101      	bne.n	8006514 <xQueueReceive+0x98>
 8006510:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006514:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006518:	2bff      	cmp	r3, #255	; 0xff
 800651a:	d101      	bne.n	8006520 <xQueueReceive+0xa4>
 800651c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8006520:	f001 f96e 	bl	8007800 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006524:	a901      	add	r1, sp, #4
 8006526:	a802      	add	r0, sp, #8
 8006528:	f000 fd92 	bl	8007050 <xTaskCheckForTimeOut>
 800652c:	2800      	cmp	r0, #0
 800652e:	d13d      	bne.n	80065ac <xQueueReceive+0x130>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff fce9 	bl	8005f08 <prvIsQueueEmpty>
 8006536:	b398      	cbz	r0, 80065a0 <xQueueReceive+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006538:	9901      	ldr	r1, [sp, #4]
 800653a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800653e:	f000 fcfb 	bl	8006f38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff fd33 	bl	8005fae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006548:	f000 fc1c 	bl	8006d84 <xTaskResumeAll>
 800654c:	b938      	cbnz	r0, 800655e <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800654e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006552:	f8c9 3000 	str.w	r3, [r9]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006560:	f001 f928 	bl	80077b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006564:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006566:	2d00      	cmp	r5, #0
 8006568:	d0be      	beq.n	80064e8 <xQueueReceive+0x6c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800656a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800656c:	4639      	mov	r1, r7
 800656e:	4620      	mov	r0, r4
 8006570:	f7ff fd08 	bl	8005f84 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006574:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	b163      	cbz	r3, 8006594 <xQueueReceive+0x118>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800657a:	f104 0010 	add.w	r0, r4, #16
 800657e:	f000 fd17 	bl	8006fb0 <xTaskRemoveFromEventList>
 8006582:	b138      	cbz	r0, 8006594 <xQueueReceive+0x118>
						queueYIELD_IF_USING_PREEMPTION();
 8006584:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <xQueueReceive+0x148>)
 8006586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006594:	f001 f934 	bl	8007800 <vPortExitCritical>
				return pdPASS;
 8006598:	2001      	movs	r0, #1
}
 800659a:	b005      	add	sp, #20
 800659c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7ff fd04 	bl	8005fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065a6:	f000 fbed 	bl	8006d84 <xTaskResumeAll>
 80065aa:	e7d8      	b.n	800655e <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7ff fcfe 	bl	8005fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065b2:	f000 fbe7 	bl	8006d84 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b6:	4620      	mov	r0, r4
 80065b8:	f7ff fca6 	bl	8005f08 <prvIsQueueEmpty>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d0ce      	beq.n	800655e <xQueueReceive+0xe2>
 80065c0:	e796      	b.n	80064f0 <xQueueReceive+0x74>
 80065c2:	bf00      	nop
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <xQueueSemaphoreTake>:
{
 80065c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80065cc:	4604      	mov	r4, r0
{
 80065ce:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80065d0:	b950      	cbnz	r0, 80065e8 <xQueueSemaphoreTake+0x20>
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	b672      	cpsid	i
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	b662      	cpsie	i
 80065e6:	e7fe      	b.n	80065e6 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80065e8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80065ea:	b155      	cbz	r5, 8006602 <xQueueSemaphoreTake+0x3a>
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	b672      	cpsid	i
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	b662      	cpsie	i
 8006600:	e7fe      	b.n	8006600 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006602:	f000 fd71 	bl	80070e8 <xTaskGetSchedulerState>
 8006606:	b960      	cbnz	r0, 8006622 <xQueueSemaphoreTake+0x5a>
 8006608:	9d01      	ldr	r5, [sp, #4]
 800660a:	b155      	cbz	r5, 8006622 <xQueueSemaphoreTake+0x5a>
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	b672      	cpsid	i
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	b662      	cpsie	i
 8006620:	e7fe      	b.n	8006620 <xQueueSemaphoreTake+0x58>
 8006622:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006624:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8006626:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006758 <xQueueSemaphoreTake+0x190>
 800662a:	e051      	b.n	80066d0 <xQueueSemaphoreTake+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 800662c:	9b01      	ldr	r3, [sp, #4]
 800662e:	b973      	cbnz	r3, 800664e <xQueueSemaphoreTake+0x86>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006630:	b155      	cbz	r5, 8006648 <xQueueSemaphoreTake+0x80>
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	b672      	cpsid	i
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	b662      	cpsie	i
 8006646:	e7fe      	b.n	8006646 <xQueueSemaphoreTake+0x7e>
					taskEXIT_CRITICAL();
 8006648:	f001 f8da 	bl	8007800 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800664c:	e05e      	b.n	800670c <xQueueSemaphoreTake+0x144>
				else if( xEntryTimeSet == pdFALSE )
 800664e:	b916      	cbnz	r6, 8006656 <xQueueSemaphoreTake+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006650:	a802      	add	r0, sp, #8
 8006652:	f000 fcf1 	bl	8007038 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006656:	f001 f8d3 	bl	8007800 <vPortExitCritical>
		vTaskSuspendAll();
 800665a:	f000 faf3 	bl	8006c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800665e:	f001 f8a9 	bl	80077b4 <vPortEnterCritical>
 8006662:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006666:	2bff      	cmp	r3, #255	; 0xff
 8006668:	d101      	bne.n	800666e <xQueueSemaphoreTake+0xa6>
 800666a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800666e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006672:	2bff      	cmp	r3, #255	; 0xff
 8006674:	d101      	bne.n	800667a <xQueueSemaphoreTake+0xb2>
 8006676:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800667a:	f001 f8c1 	bl	8007800 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800667e:	a901      	add	r1, sp, #4
 8006680:	a802      	add	r0, sp, #8
 8006682:	f000 fce5 	bl	8007050 <xTaskCheckForTimeOut>
 8006686:	2800      	cmp	r0, #0
 8006688:	d14a      	bne.n	8006720 <xQueueSemaphoreTake+0x158>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800668a:	4620      	mov	r0, r4
 800668c:	f7ff fc3c 	bl	8005f08 <prvIsQueueEmpty>
 8006690:	2800      	cmp	r0, #0
 8006692:	d03f      	beq.n	8006714 <xQueueSemaphoreTake+0x14c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	b93b      	cbnz	r3, 80066a8 <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 8006698:	f001 f88c 	bl	80077b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800669c:	68a0      	ldr	r0, [r4, #8]
 800669e:	f000 fd33 	bl	8007108 <xTaskPriorityInherit>
 80066a2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80066a4:	f001 f8ac 	bl	8007800 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066a8:	9901      	ldr	r1, [sp, #4]
 80066aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066ae:	f000 fc43 	bl	8006f38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff fc7b 	bl	8005fae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066b8:	f000 fb64 	bl	8006d84 <xTaskResumeAll>
 80066bc:	b938      	cbnz	r0, 80066ce <xQueueSemaphoreTake+0x106>
					portYIELD_WITHIN_API();
 80066be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066c2:	f8c8 3000 	str.w	r3, [r8]
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80066d0:	f001 f870 	bl	80077b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0a8      	beq.n	800662c <xQueueSemaphoreTake+0x64>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066da:	3b01      	subs	r3, #1
 80066dc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	b913      	cbnz	r3, 80066e8 <xQueueSemaphoreTake+0x120>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066e2:	f000 fde9 	bl	80072b8 <pvTaskIncrementMutexHeldCount>
 80066e6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	b163      	cbz	r3, 8006706 <xQueueSemaphoreTake+0x13e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ec:	f104 0010 	add.w	r0, r4, #16
 80066f0:	f000 fc5e 	bl	8006fb0 <xTaskRemoveFromEventList>
 80066f4:	b138      	cbz	r0, 8006706 <xQueueSemaphoreTake+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 80066f6:	4b18      	ldr	r3, [pc, #96]	; (8006758 <xQueueSemaphoreTake+0x190>)
 80066f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8006706:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8006708:	f001 f87a 	bl	8007800 <vPortExitCritical>
}
 800670c:	4628      	mov	r0, r5
 800670e:	b004      	add	sp, #16
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff fc4a 	bl	8005fae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800671a:	f000 fb33 	bl	8006d84 <xTaskResumeAll>
 800671e:	e7d6      	b.n	80066ce <xQueueSemaphoreTake+0x106>
			prvUnlockQueue( pxQueue );
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff fc44 	bl	8005fae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006726:	f000 fb2d 	bl	8006d84 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff fbec 	bl	8005f08 <prvIsQueueEmpty>
 8006730:	2800      	cmp	r0, #0
 8006732:	d0cc      	beq.n	80066ce <xQueueSemaphoreTake+0x106>
					if( xInheritanceOccurred != pdFALSE )
 8006734:	2d00      	cmp	r5, #0
 8006736:	d0e9      	beq.n	800670c <xQueueSemaphoreTake+0x144>
						taskENTER_CRITICAL();
 8006738:	f001 f83c 	bl	80077b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800673c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800673e:	b119      	cbz	r1, 8006748 <xQueueSemaphoreTake+0x180>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006748:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800674a:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800674c:	f000 fd62 	bl	8007214 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006750:	f001 f856 	bl	8007800 <vPortExitCritical>
 8006754:	e7da      	b.n	800670c <xQueueSemaphoreTake+0x144>
 8006756:	bf00      	nop
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <xQueueTakeMutexRecursive>:
	{
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 8006760:	4604      	mov	r4, r0
 8006762:	b950      	cbnz	r0, 800677a <xQueueTakeMutexRecursive+0x1e>
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	b672      	cpsid	i
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	b662      	cpsie	i
 8006778:	e7fe      	b.n	8006778 <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800677a:	6886      	ldr	r6, [r0, #8]
 800677c:	f000 fcae 	bl	80070dc <xTaskGetCurrentTaskHandle>
 8006780:	4286      	cmp	r6, r0
 8006782:	d104      	bne.n	800678e <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006784:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8006786:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006788:	3301      	adds	r3, #1
 800678a:	60e3      	str	r3, [r4, #12]
	}
 800678c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800678e:	4629      	mov	r1, r5
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ff19 	bl	80065c8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006796:	2800      	cmp	r0, #0
 8006798:	d0f8      	beq.n	800678c <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800679a:	68e3      	ldr	r3, [r4, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 80067a0:	e7f4      	b.n	800678c <xQueueTakeMutexRecursive+0x30>
	...

080067a4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067a4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067a6:	4a07      	ldr	r2, [pc, #28]	; (80067c4 <vQueueAddToRegistry+0x20>)
	{
 80067a8:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067aa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80067ae:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80067b2:	b91d      	cbnz	r5, 80067bc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067b8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067ba:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067bc:	3301      	adds	r3, #1
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d1f3      	bne.n	80067aa <vQueueAddToRegistry+0x6>
 80067c2:	e7fa      	b.n	80067ba <vQueueAddToRegistry+0x16>
 80067c4:	20006414 	.word	0x20006414

080067c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	4604      	mov	r4, r0
 80067cc:	460d      	mov	r5, r1
 80067ce:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067d0:	f000 fff0 	bl	80077b4 <vPortEnterCritical>
 80067d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80067d8:	2bff      	cmp	r3, #255	; 0xff
 80067da:	d102      	bne.n	80067e2 <vQueueWaitForMessageRestricted+0x1a>
 80067dc:	2300      	movs	r3, #0
 80067de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80067e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80067e6:	2bff      	cmp	r3, #255	; 0xff
 80067e8:	d102      	bne.n	80067f0 <vQueueWaitForMessageRestricted+0x28>
 80067ea:	2300      	movs	r3, #0
 80067ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067f0:	f001 f806 	bl	8007800 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067f6:	b92b      	cbnz	r3, 8006804 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067f8:	4632      	mov	r2, r6
 80067fa:	4629      	mov	r1, r5
 80067fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006800:	f000 fbb6 	bl	8006f70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006804:	4620      	mov	r0, r4
	}
 8006806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800680a:	f7ff bbd0 	b.w	8005fae <prvUnlockQueue>
	...

08006810 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006816:	f000 ffcd 	bl	80077b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800681a:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800681c:	4d2e      	ldr	r5, [pc, #184]	; (80068d8 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	4f2e      	ldr	r7, [pc, #184]	; (80068dc <prvAddNewTaskToReadyList+0xcc>)
 8006822:	3201      	adds	r2, #1
 8006824:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006826:	682e      	ldr	r6, [r5, #0]
 8006828:	2e00      	cmp	r6, #0
 800682a:	d148      	bne.n	80068be <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800682c:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d11f      	bne.n	8006874 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006834:	f04f 0814 	mov.w	r8, #20
 8006838:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800683c:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800683e:	f7ff fb21 	bl	8005e84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006842:	2e38      	cmp	r6, #56	; 0x38
 8006844:	d1f8      	bne.n	8006838 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006846:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8006908 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800684a:	4e25      	ldr	r6, [pc, #148]	; (80068e0 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800684c:	4640      	mov	r0, r8
 800684e:	f7ff fb19 	bl	8005e84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff fb16 	bl	8005e84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006858:	4822      	ldr	r0, [pc, #136]	; (80068e4 <prvAddNewTaskToReadyList+0xd4>)
 800685a:	f7ff fb13 	bl	8005e84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800685e:	4822      	ldr	r0, [pc, #136]	; (80068e8 <prvAddNewTaskToReadyList+0xd8>)
 8006860:	f7ff fb10 	bl	8005e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006864:	4821      	ldr	r0, [pc, #132]	; (80068ec <prvAddNewTaskToReadyList+0xdc>)
 8006866:	f7ff fb0d 	bl	8005e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800686a:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <prvAddNewTaskToReadyList+0xe0>)
 800686c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006870:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <prvAddNewTaskToReadyList+0xe4>)
 8006872:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8006874:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <prvAddNewTaskToReadyList+0xe8>)
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800687c:	4a1f      	ldr	r2, [pc, #124]	; (80068fc <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800687e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006880:	6811      	ldr	r1, [r2, #0]
 8006882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006884:	428b      	cmp	r3, r1
 8006886:	d900      	bls.n	800688a <prvAddNewTaskToReadyList+0x7a>
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	2014      	movs	r0, #20
 800688c:	1d21      	adds	r1, r4, #4
 800688e:	fb00 7003 	mla	r0, r0, r3, r7
 8006892:	f7ff fb05 	bl	8005ea0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006896:	f000 ffb3 	bl	8007800 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800689a:	4b19      	ldr	r3, [pc, #100]	; (8006900 <prvAddNewTaskToReadyList+0xf0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b163      	cbz	r3, 80068ba <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d207      	bcs.n	80068ba <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 80068aa:	4b16      	ldr	r3, [pc, #88]	; (8006904 <prvAddNewTaskToReadyList+0xf4>)
 80068ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	f3bf 8f6f 	isb	sy
}
 80068ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80068be:	4b10      	ldr	r3, [pc, #64]	; (8006900 <prvAddNewTaskToReadyList+0xf0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1d6      	bne.n	8006874 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068c6:	682b      	ldr	r3, [r5, #0]
 80068c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d8d1      	bhi.n	8006874 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80068d0:	602c      	str	r4, [r5, #0]
 80068d2:	e7cf      	b.n	8006874 <prvAddNewTaskToReadyList+0x64>
 80068d4:	200015cc 	.word	0x200015cc
 80068d8:	20001160 	.word	0x20001160
 80068dc:	2000116c 	.word	0x2000116c
 80068e0:	200015f8 	.word	0x200015f8
 80068e4:	20001614 	.word	0x20001614
 80068e8:	20001640 	.word	0x20001640
 80068ec:	2000162c 	.word	0x2000162c
 80068f0:	20001164 	.word	0x20001164
 80068f4:	20001168 	.word	0x20001168
 80068f8:	200015dc 	.word	0x200015dc
 80068fc:	200015e0 	.word	0x200015e0
 8006900:	20001628 	.word	0x20001628
 8006904:	e000ed04 	.word	0xe000ed04
 8006908:	200015e4 	.word	0x200015e4

0800690c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800690c:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800690e:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8006912:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006914:	b93b      	cbnz	r3, 8006926 <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006916:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006918:	f001 f93a 	bl	8007b90 <vPortFree>
				vPortFree( pxTCB );
 800691c:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800691e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8006922:	f001 b935 	b.w	8007b90 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006926:	2b01      	cmp	r3, #1
 8006928:	d0f9      	beq.n	800691e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800692a:	2b02      	cmp	r3, #2
 800692c:	d00a      	beq.n	8006944 <prvDeleteTCB+0x38>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	b672      	cpsid	i
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	b662      	cpsie	i
 8006942:	e7fe      	b.n	8006942 <prvDeleteTCB+0x36>
	}
 8006944:	bd10      	pop	{r4, pc}
	...

08006948 <prvIdleTask>:
{
 8006948:	b580      	push	{r7, lr}
				taskYIELD();
 800694a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80069a8 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694e:	4f12      	ldr	r7, [pc, #72]	; (8006998 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006950:	4c12      	ldr	r4, [pc, #72]	; (800699c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006952:	4d13      	ldr	r5, [pc, #76]	; (80069a0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	b963      	cbnz	r3, 8006972 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <prvIdleTask+0x5c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d9f8      	bls.n	8006952 <prvIdleTask+0xa>
				taskYIELD();
 8006960:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006964:	f8c8 3000 	str.w	r3, [r8]
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	e7ee      	b.n	8006950 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8006972:	f000 ff1f 	bl	80077b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800697a:	1d30      	adds	r0, r6, #4
 800697c:	f7ff fab3 	bl	8005ee6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	3b01      	subs	r3, #1
 8006984:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	3b01      	subs	r3, #1
 800698a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800698c:	f000 ff38 	bl	8007800 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006990:	4630      	mov	r0, r6
 8006992:	f7ff ffbb 	bl	800690c <prvDeleteTCB>
 8006996:	e7dd      	b.n	8006954 <prvIdleTask+0xc>
 8006998:	20001640 	.word	0x20001640
 800699c:	200015d0 	.word	0x200015d0
 80069a0:	200015cc 	.word	0x200015cc
 80069a4:	2000116c 	.word	0x2000116c
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ac:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <prvResetNextTaskUnblockTime+0x1c>)
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	6819      	ldr	r1, [r3, #0]
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <prvResetNextTaskUnblockTime+0x20>)
 80069b4:	b919      	cbnz	r1, 80069be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069ba:	601a      	str	r2, [r3, #0]
	}
}
 80069bc:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069c2:	68d2      	ldr	r2, [r2, #12]
 80069c4:	6852      	ldr	r2, [r2, #4]
 80069c6:	e7f8      	b.n	80069ba <prvResetNextTaskUnblockTime+0xe>
 80069c8:	20001164 	.word	0x20001164
 80069cc:	2000160c 	.word	0x2000160c

080069d0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069d4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80069d8:	4607      	mov	r7, r0
 80069da:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069dc:	21a5      	movs	r1, #165	; 0xa5
 80069de:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80069e0:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069e2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80069e6:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80069ec:	f002 fc77 	bl	80092de <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069f2:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069f4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80069f8:	b395      	cbz	r5, 8006a60 <prvInitialiseNewTask.isra.2+0x90>
 80069fa:	1e6b      	subs	r3, r5, #1
 80069fc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8006a00:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a02:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006a06:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8006a0a:	7819      	ldrb	r1, [r3, #0]
 8006a0c:	b109      	cbz	r1, 8006a12 <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a0e:	42ab      	cmp	r3, r5
 8006a10:	d1f7      	bne.n	8006a02 <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a12:	2300      	movs	r3, #0
 8006a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a18:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8006a1a:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a1e:	1d20      	adds	r0, r4, #4
 8006a20:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8006a22:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8006a26:	bf28      	it	cs
 8006a28:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8006a2a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006a2c:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2e:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a32:	f7ff fa32 	bl	8005e9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a36:	f104 0018 	add.w	r0, r4, #24
 8006a3a:	f7ff fa2e 	bl	8005e9a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006a3e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a42:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a44:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a46:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a48:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a4a:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a4c:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a4e:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a52:	f000 fe8b 	bl	800776c <pxPortInitialiseStack>
 8006a56:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006a58:	b106      	cbz	r6, 8006a5c <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a5a:	6034      	str	r4, [r6, #0]
}
 8006a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a60:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8006a64:	e7d8      	b.n	8006a18 <prvInitialiseNewTask.isra.2+0x48>
	...

08006a68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a6a:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8006a6c:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a6e:	4e16      	ldr	r6, [pc, #88]	; (8006ac8 <prvAddCurrentTaskToDelayedList+0x60>)
{
 8006a70:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8006a72:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a74:	6830      	ldr	r0, [r6, #0]
 8006a76:	3004      	adds	r0, #4
 8006a78:	f7ff fa35 	bl	8005ee6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a7c:	1c6b      	adds	r3, r5, #1
 8006a7e:	4633      	mov	r3, r6
 8006a80:	d107      	bne.n	8006a92 <prvAddCurrentTaskToDelayedList+0x2a>
 8006a82:	b137      	cbz	r7, 8006a92 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a84:	6831      	ldr	r1, [r6, #0]
 8006a86:	4811      	ldr	r0, [pc, #68]	; (8006acc <prvAddCurrentTaskToDelayedList+0x64>)
 8006a88:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a8e:	f7ff ba07 	b.w	8005ea0 <vListInsertEnd>
 8006a92:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8006a98:	d307      	bcc.n	8006aaa <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <prvAddCurrentTaskToDelayedList+0x68>)
 8006a9c:	6810      	ldr	r0, [r2, #0]
 8006a9e:	6819      	ldr	r1, [r3, #0]
}
 8006aa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aa4:	3104      	adds	r1, #4
 8006aa6:	f7ff ba07 	b.w	8005eb8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006aac:	6810      	ldr	r0, [r2, #0]
 8006aae:	6819      	ldr	r1, [r3, #0]
 8006ab0:	3104      	adds	r1, #4
 8006ab2:	f7ff fa01 	bl	8005eb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ab6:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <prvAddCurrentTaskToDelayedList+0x70>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	42a2      	cmp	r2, r4
 8006abc:	d900      	bls.n	8006ac0 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8006abe:	601c      	str	r4, [r3, #0]
}
 8006ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20001654 	.word	0x20001654
 8006ac8:	20001160 	.word	0x20001160
 8006acc:	2000162c 	.word	0x2000162c
 8006ad0:	20001168 	.word	0x20001168
 8006ad4:	20001164 	.word	0x20001164
 8006ad8:	2000160c 	.word	0x2000160c

08006adc <xTaskCreateStatic>:
	{
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006ae4:	b955      	cbnz	r5, 8006afc <xTaskCreateStatic+0x20>
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	b672      	cpsid	i
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	b662      	cpsie	i
 8006afa:	e7fe      	b.n	8006afa <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8006afc:	b954      	cbnz	r4, 8006b14 <xTaskCreateStatic+0x38>
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	b672      	cpsid	i
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	b662      	cpsie	i
 8006b12:	e7fe      	b.n	8006b12 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b14:	265c      	movs	r6, #92	; 0x5c
 8006b16:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b18:	9e05      	ldr	r6, [sp, #20]
 8006b1a:	2e5c      	cmp	r6, #92	; 0x5c
 8006b1c:	d00a      	beq.n	8006b34 <xTaskCreateStatic+0x58>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	e7fe      	b.n	8006b32 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b34:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b36:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b38:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b3a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b3e:	ad04      	add	r5, sp, #16
 8006b40:	9402      	str	r4, [sp, #8]
 8006b42:	9501      	str	r5, [sp, #4]
 8006b44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006b46:	9500      	str	r5, [sp, #0]
 8006b48:	f7ff ff42 	bl	80069d0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f7ff fe5f 	bl	8006810 <prvAddNewTaskToReadyList>
	}
 8006b52:	9804      	ldr	r0, [sp, #16]
 8006b54:	b006      	add	sp, #24
 8006b56:	bd70      	pop	{r4, r5, r6, pc}

08006b58 <xTaskCreate>:
	{
 8006b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b60:	0090      	lsls	r0, r2, #2
	{
 8006b62:	4688      	mov	r8, r1
 8006b64:	4616      	mov	r6, r2
 8006b66:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b68:	f000 ff82 	bl	8007a70 <pvPortMalloc>
			if( pxStack != NULL )
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	b1e8      	cbz	r0, 8006bac <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b70:	205c      	movs	r0, #92	; 0x5c
 8006b72:	f000 ff7d 	bl	8007a70 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006b76:	4604      	mov	r4, r0
 8006b78:	b1a8      	cbz	r0, 8006ba6 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b7a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8006b7c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b7e:	4632      	mov	r2, r6
 8006b80:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b82:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b88:	9002      	str	r0, [sp, #8]
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	464b      	mov	r3, r9
 8006b94:	f7ff ff1c 	bl	80069d0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f7ff fe39 	bl	8006810 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b9e:	2001      	movs	r0, #1
	}
 8006ba0:	b005      	add	sp, #20
 8006ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 fff2 	bl	8007b90 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006bb0:	e7f6      	b.n	8006ba0 <xTaskCreate+0x48>
	...

08006bb4 <vTaskStartScheduler>:
{
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bb8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bba:	aa07      	add	r2, sp, #28
 8006bbc:	a906      	add	r1, sp, #24
 8006bbe:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bc0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bc4:	f7ff f946 	bl	8005e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	9a07      	ldr	r2, [sp, #28]
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	4917      	ldr	r1, [pc, #92]	; (8006c30 <vTaskStartScheduler+0x7c>)
 8006bd2:	4818      	ldr	r0, [pc, #96]	; (8006c34 <vTaskStartScheduler+0x80>)
 8006bd4:	e9cd 4300 	strd	r4, r3, [sp]
 8006bd8:	4623      	mov	r3, r4
 8006bda:	f7ff ff7f 	bl	8006adc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006bde:	b1b8      	cbz	r0, 8006c10 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8006be0:	f000 fbc8 	bl	8007374 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006be4:	2801      	cmp	r0, #1
 8006be6:	d115      	bne.n	8006c14 <vTaskStartScheduler+0x60>
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	b672      	cpsid	i
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bfc:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <vTaskStartScheduler+0x84>)
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c04:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <vTaskStartScheduler+0x88>)
 8006c06:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <vTaskStartScheduler+0x8c>)
 8006c0a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006c0c:	f000 fe74 	bl	80078f8 <xPortStartScheduler>
}
 8006c10:	b008      	add	sp, #32
 8006c12:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1fb      	bne.n	8006c10 <vTaskStartScheduler+0x5c>
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	b672      	cpsid	i
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	b662      	cpsie	i
 8006c2c:	e7fe      	b.n	8006c2c <vTaskStartScheduler+0x78>
 8006c2e:	bf00      	nop
 8006c30:	0800cf25 	.word	0x0800cf25
 8006c34:	08006949 	.word	0x08006949
 8006c38:	2000160c 	.word	0x2000160c
 8006c3c:	20001628 	.word	0x20001628
 8006c40:	20001654 	.word	0x20001654

08006c44 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006c44:	4a02      	ldr	r2, [pc, #8]	; (8006c50 <vTaskSuspendAll+0xc>)
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	6013      	str	r3, [r2, #0]
}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	200015d8 	.word	0x200015d8

08006c54 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006c54:	4b01      	ldr	r3, [pc, #4]	; (8006c5c <xTaskGetTickCount+0x8>)
 8006c56:	6818      	ldr	r0, [r3, #0]
}
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20001654 	.word	0x20001654

08006c60 <xTaskIncrementTick>:
{
 8006c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c64:	4b3c      	ldr	r3, [pc, #240]	; (8006d58 <xTaskIncrementTick+0xf8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d16d      	bne.n	8006d48 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c6c:	4b3b      	ldr	r3, [pc, #236]	; (8006d5c <xTaskIncrementTick+0xfc>)
 8006c6e:	681c      	ldr	r4, [r3, #0]
 8006c70:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8006c72:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c74:	b9cc      	cbnz	r4, 8006caa <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8006c76:	4b3a      	ldr	r3, [pc, #232]	; (8006d60 <xTaskIncrementTick+0x100>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	b152      	cbz	r2, 8006c94 <xTaskIncrementTick+0x34>
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	e7fe      	b.n	8006c92 <xTaskIncrementTick+0x32>
 8006c94:	4a33      	ldr	r2, [pc, #204]	; (8006d64 <xTaskIncrementTick+0x104>)
 8006c96:	6819      	ldr	r1, [r3, #0]
 8006c98:	6810      	ldr	r0, [r2, #0]
 8006c9a:	6018      	str	r0, [r3, #0]
 8006c9c:	6011      	str	r1, [r2, #0]
 8006c9e:	4a32      	ldr	r2, [pc, #200]	; (8006d68 <xTaskIncrementTick+0x108>)
 8006ca0:	6813      	ldr	r3, [r2, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	f7ff fe81 	bl	80069ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006caa:	4d30      	ldr	r5, [pc, #192]	; (8006d6c <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8006cac:	f04f 0b00 	mov.w	fp, #0
 8006cb0:	4f2f      	ldr	r7, [pc, #188]	; (8006d70 <xTaskIncrementTick+0x110>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cb2:	682b      	ldr	r3, [r5, #0]
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	d911      	bls.n	8006cdc <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	4b2e      	ldr	r3, [pc, #184]	; (8006d74 <xTaskIncrementTick+0x114>)
 8006cbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006cbe:	2214      	movs	r2, #20
 8006cc0:	434a      	muls	r2, r1
 8006cc2:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8006cc4:	2a02      	cmp	r2, #2
 8006cc6:	bf28      	it	cs
 8006cc8:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8006ccc:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <xTaskIncrementTick+0x118>)
 8006cce:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006cd0:	2a00      	cmp	r2, #0
}
 8006cd2:	bf0c      	ite	eq
 8006cd4:	4658      	moveq	r0, fp
 8006cd6:	2001      	movne	r0, #1
 8006cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cdc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8006d60 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8006ce0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8006d80 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	b91a      	cbnz	r2, 8006cf4 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	602a      	str	r2, [r5, #0]
					break;
 8006cf2:	e7e1      	b.n	8006cb8 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf4:	f8d9 2000 	ldr.w	r2, [r9]
 8006cf8:	68d2      	ldr	r2, [r2, #12]
 8006cfa:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cfc:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006cfe:	428c      	cmp	r4, r1
 8006d00:	d201      	bcs.n	8006d06 <xTaskIncrementTick+0xa6>
						xNextTaskUnblockTime = xItemValue;
 8006d02:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d04:	e7d8      	b.n	8006cb8 <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d06:	f106 0804 	add.w	r8, r6, #4
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	f7ff f8eb 	bl	8005ee6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d10:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8006d12:	b119      	cbz	r1, 8006d1c <xTaskIncrementTick+0xbc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d14:	f106 0018 	add.w	r0, r6, #24
 8006d18:	f7ff f8e5 	bl	8005ee6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d1c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8006d1e:	f8da 1000 	ldr.w	r1, [sl]
 8006d22:	4288      	cmp	r0, r1
 8006d24:	d901      	bls.n	8006d2a <xTaskIncrementTick+0xca>
 8006d26:	f8ca 0000 	str.w	r0, [sl]
 8006d2a:	2214      	movs	r2, #20
 8006d2c:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <xTaskIncrementTick+0x114>)
 8006d2e:	4641      	mov	r1, r8
 8006d30:	fb02 3000 	mla	r0, r2, r0, r3
 8006d34:	f7ff f8b4 	bl	8005ea0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d38:	6838      	ldr	r0, [r7, #0]
 8006d3a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8006d3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006d3e:	4291      	cmp	r1, r2
 8006d40:	bf28      	it	cs
 8006d42:	f04f 0b01 	movcs.w	fp, #1
 8006d46:	e7cd      	b.n	8006ce4 <xTaskIncrementTick+0x84>
		++uxPendedTicks;
 8006d48:	4a0c      	ldr	r2, [pc, #48]	; (8006d7c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8006d4a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	3301      	adds	r3, #1
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	e7ba      	b.n	8006ccc <xTaskIncrementTick+0x6c>
 8006d56:	bf00      	nop
 8006d58:	200015d8 	.word	0x200015d8
 8006d5c:	20001654 	.word	0x20001654
 8006d60:	20001164 	.word	0x20001164
 8006d64:	20001168 	.word	0x20001168
 8006d68:	20001610 	.word	0x20001610
 8006d6c:	2000160c 	.word	0x2000160c
 8006d70:	20001160 	.word	0x20001160
 8006d74:	2000116c 	.word	0x2000116c
 8006d78:	20001658 	.word	0x20001658
 8006d7c:	200015d4 	.word	0x200015d4
 8006d80:	200015e0 	.word	0x200015e0

08006d84 <xTaskResumeAll>:
{
 8006d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8006d88:	4c30      	ldr	r4, [pc, #192]	; (8006e4c <xTaskResumeAll+0xc8>)
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	b953      	cbnz	r3, 8006da4 <xTaskResumeAll+0x20>
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	b672      	cpsid	i
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	b662      	cpsie	i
 8006da2:	e7fe      	b.n	8006da2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8006da4:	f000 fd06 	bl	80077b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dae:	6824      	ldr	r4, [r4, #0]
 8006db0:	b12c      	cbz	r4, 8006dbe <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8006db2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006db4:	f000 fd24 	bl	8007800 <vPortExitCritical>
}
 8006db8:	4620      	mov	r0, r4
 8006dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dbe:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <xTaskResumeAll+0xcc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f5      	beq.n	8006db2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dc6:	4d23      	ldr	r5, [pc, #140]	; (8006e54 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8006dc8:	4e23      	ldr	r6, [pc, #140]	; (8006e58 <xTaskResumeAll+0xd4>)
 8006dca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006e6c <xTaskResumeAll+0xe8>
 8006dce:	e01d      	b.n	8006e0c <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd0:	68eb      	ldr	r3, [r5, #12]
 8006dd2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dd6:	f104 0018 	add.w	r0, r4, #24
 8006dda:	f7ff f884 	bl	8005ee6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7ff f881 	bl	8005ee6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006de4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006de6:	6832      	ldr	r2, [r6, #0]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d900      	bls.n	8006dee <xTaskResumeAll+0x6a>
 8006dec:	6033      	str	r3, [r6, #0]
 8006dee:	2014      	movs	r0, #20
 8006df0:	4639      	mov	r1, r7
 8006df2:	fb00 8003 	mla	r0, r0, r3, r8
 8006df6:	f7ff f853 	bl	8005ea0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dfa:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <xTaskResumeAll+0xd8>)
 8006dfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d302      	bcc.n	8006e0c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8006e06:	4b16      	ldr	r3, [pc, #88]	; (8006e60 <xTaskResumeAll+0xdc>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1de      	bne.n	8006dd0 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 8006e12:	b10c      	cbz	r4, 8006e18 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8006e14:	f7ff fdca 	bl	80069ac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e18:	4d12      	ldr	r5, [pc, #72]	; (8006e64 <xTaskResumeAll+0xe0>)
 8006e1a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e1c:	b144      	cbz	r4, 8006e30 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8006e1e:	4e10      	ldr	r6, [pc, #64]	; (8006e60 <xTaskResumeAll+0xdc>)
 8006e20:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006e22:	f7ff ff1d 	bl	8006c60 <xTaskIncrementTick>
 8006e26:	b100      	cbz	r0, 8006e2a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8006e28:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e2a:	3c01      	subs	r4, #1
 8006e2c:	d1f9      	bne.n	8006e22 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8006e2e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <xTaskResumeAll+0xdc>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0bc      	beq.n	8006db2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <xTaskResumeAll+0xe4>)
 8006e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006e48:	2401      	movs	r4, #1
 8006e4a:	e7b3      	b.n	8006db4 <xTaskResumeAll+0x30>
 8006e4c:	200015d8 	.word	0x200015d8
 8006e50:	200015cc 	.word	0x200015cc
 8006e54:	20001614 	.word	0x20001614
 8006e58:	200015e0 	.word	0x200015e0
 8006e5c:	20001160 	.word	0x20001160
 8006e60:	20001658 	.word	0x20001658
 8006e64:	200015d4 	.word	0x200015d4
 8006e68:	e000ed04 	.word	0xe000ed04
 8006e6c:	2000116c 	.word	0x2000116c

08006e70 <vTaskDelay>:
	{
 8006e70:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e72:	b940      	cbnz	r0, 8006e86 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <vTaskDelay+0x44>)
 8006e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	f3bf 8f6f 	isb	sy
	}
 8006e84:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <vTaskDelay+0x48>)
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	b151      	cbz	r1, 8006ea2 <vTaskDelay+0x32>
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	b672      	cpsid	i
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	b662      	cpsie	i
 8006ea0:	e7fe      	b.n	8006ea0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006ea2:	f7ff fecf 	bl	8006c44 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ea6:	f7ff fddf 	bl	8006a68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006eaa:	f7ff ff6b 	bl	8006d84 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d0e0      	beq.n	8006e74 <vTaskDelay+0x4>
 8006eb2:	e7e7      	b.n	8006e84 <vTaskDelay+0x14>
 8006eb4:	e000ed04 	.word	0xe000ed04
 8006eb8:	200015d8 	.word	0x200015d8

08006ebc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <vTaskSwitchContext+0x68>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <vTaskSwitchContext+0x6c>)
{
 8006ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ec4:	b112      	cbz	r2, 8006ecc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
}
 8006eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8006ecc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ece:	2714      	movs	r7, #20
 8006ed0:	4d16      	ldr	r5, [pc, #88]	; (8006f2c <vTaskSwitchContext+0x70>)
 8006ed2:	4a17      	ldr	r2, [pc, #92]	; (8006f30 <vTaskSwitchContext+0x74>)
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	4616      	mov	r6, r2
 8006ed8:	fb07 f103 	mul.w	r1, r7, r3
 8006edc:	5854      	ldr	r4, [r2, r1]
 8006ede:	1850      	adds	r0, r2, r1
 8006ee0:	b18c      	cbz	r4, 8006f06 <vTaskSwitchContext+0x4a>
 8006ee2:	6844      	ldr	r4, [r0, #4]
 8006ee4:	3108      	adds	r1, #8
 8006ee6:	6864      	ldr	r4, [r4, #4]
 8006ee8:	440a      	add	r2, r1
 8006eea:	4294      	cmp	r4, r2
 8006eec:	6044      	str	r4, [r0, #4]
 8006eee:	bf04      	itt	eq
 8006ef0:	6862      	ldreq	r2, [r4, #4]
 8006ef2:	6042      	streq	r2, [r0, #4]
 8006ef4:	2214      	movs	r2, #20
 8006ef6:	fb02 6203 	mla	r2, r2, r3, r6
 8006efa:	6852      	ldr	r2, [r2, #4]
 8006efc:	68d1      	ldr	r1, [r2, #12]
 8006efe:	4a0d      	ldr	r2, [pc, #52]	; (8006f34 <vTaskSwitchContext+0x78>)
 8006f00:	6011      	str	r1, [r2, #0]
 8006f02:	602b      	str	r3, [r5, #0]
}
 8006f04:	e7e1      	b.n	8006eca <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f06:	b953      	cbnz	r3, 8006f1e <vTaskSwitchContext+0x62>
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	b672      	cpsid	i
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	b662      	cpsie	i
 8006f1c:	e7fe      	b.n	8006f1c <vTaskSwitchContext+0x60>
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	e7da      	b.n	8006ed8 <vTaskSwitchContext+0x1c>
 8006f22:	bf00      	nop
 8006f24:	200015d8 	.word	0x200015d8
 8006f28:	20001658 	.word	0x20001658
 8006f2c:	200015e0 	.word	0x200015e0
 8006f30:	2000116c 	.word	0x2000116c
 8006f34:	20001160 	.word	0x20001160

08006f38 <vTaskPlaceOnEventList>:
{
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006f3c:	b950      	cbnz	r0, 8006f54 <vTaskPlaceOnEventList+0x1c>
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	b672      	cpsid	i
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	b662      	cpsie	i
 8006f52:	e7fe      	b.n	8006f52 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <vTaskPlaceOnEventList+0x34>)
 8006f56:	6819      	ldr	r1, [r3, #0]
 8006f58:	3118      	adds	r1, #24
 8006f5a:	f7fe ffad 	bl	8005eb8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f5e:	4620      	mov	r0, r4
 8006f60:	2101      	movs	r1, #1
}
 8006f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f66:	f7ff bd7f 	b.w	8006a68 <prvAddCurrentTaskToDelayedList>
 8006f6a:	bf00      	nop
 8006f6c:	20001160 	.word	0x20001160

08006f70 <vTaskPlaceOnEventListRestricted>:
	{
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	460d      	mov	r5, r1
 8006f74:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8006f76:	b950      	cbnz	r0, 8006f8e <vTaskPlaceOnEventListRestricted+0x1e>
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	b672      	cpsid	i
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	b662      	cpsie	i
 8006f8c:	e7fe      	b.n	8006f8c <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f8e:	4b07      	ldr	r3, [pc, #28]	; (8006fac <vTaskPlaceOnEventListRestricted+0x3c>)
 8006f90:	6819      	ldr	r1, [r3, #0]
 8006f92:	3118      	adds	r1, #24
 8006f94:	f7fe ff84 	bl	8005ea0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006f98:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	bf0c      	ite	eq
 8006f9e:	4628      	moveq	r0, r5
 8006fa0:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8006fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006fa8:	f7ff bd5e 	b.w	8006a68 <prvAddCurrentTaskToDelayedList>
 8006fac:	20001160 	.word	0x20001160

08006fb0 <xTaskRemoveFromEventList>:
{
 8006fb0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb2:	68c3      	ldr	r3, [r0, #12]
 8006fb4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006fb6:	b954      	cbnz	r4, 8006fce <xTaskRemoveFromEventList+0x1e>
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	e7fe      	b.n	8006fcc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fce:	f104 0518 	add.w	r5, r4, #24
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7fe ff87 	bl	8005ee6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd8:	4b11      	ldr	r3, [pc, #68]	; (8007020 <xTaskRemoveFromEventList+0x70>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	b9d3      	cbnz	r3, 8007014 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fde:	1d25      	adds	r5, r4, #4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f7fe ff80 	bl	8005ee6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fe6:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <xTaskRemoveFromEventList+0x74>)
 8006fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006fea:	6811      	ldr	r1, [r2, #0]
 8006fec:	428b      	cmp	r3, r1
 8006fee:	d900      	bls.n	8006ff2 <xTaskRemoveFromEventList+0x42>
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4a0d      	ldr	r2, [pc, #52]	; (8007028 <xTaskRemoveFromEventList+0x78>)
 8006ff4:	2014      	movs	r0, #20
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ffc:	f7fe ff50 	bl	8005ea0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007000:	4b0a      	ldr	r3, [pc, #40]	; (800702c <xTaskRemoveFromEventList+0x7c>)
 8007002:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	429a      	cmp	r2, r3
 800700a:	d906      	bls.n	800701a <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 800700c:	2001      	movs	r0, #1
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <xTaskRemoveFromEventList+0x80>)
 8007010:	6018      	str	r0, [r3, #0]
}
 8007012:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007014:	4629      	mov	r1, r5
 8007016:	4807      	ldr	r0, [pc, #28]	; (8007034 <xTaskRemoveFromEventList+0x84>)
 8007018:	e7f0      	b.n	8006ffc <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 800701a:	2000      	movs	r0, #0
	return xReturn;
 800701c:	e7f9      	b.n	8007012 <xTaskRemoveFromEventList+0x62>
 800701e:	bf00      	nop
 8007020:	200015d8 	.word	0x200015d8
 8007024:	200015e0 	.word	0x200015e0
 8007028:	2000116c 	.word	0x2000116c
 800702c:	20001160 	.word	0x20001160
 8007030:	20001658 	.word	0x20001658
 8007034:	20001614 	.word	0x20001614

08007038 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007038:	4b03      	ldr	r3, [pc, #12]	; (8007048 <vTaskInternalSetTimeOutState+0x10>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <vTaskInternalSetTimeOutState+0x14>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6043      	str	r3, [r0, #4]
}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20001610 	.word	0x20001610
 800704c:	20001654 	.word	0x20001654

08007050 <xTaskCheckForTimeOut>:
{
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007054:	4605      	mov	r5, r0
 8007056:	b950      	cbnz	r0, 800706e <xTaskCheckForTimeOut+0x1e>
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	b672      	cpsid	i
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	b662      	cpsie	i
 800706c:	e7fe      	b.n	800706c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800706e:	b951      	cbnz	r1, 8007086 <xTaskCheckForTimeOut+0x36>
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	b672      	cpsid	i
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	b662      	cpsie	i
 8007084:	e7fe      	b.n	8007084 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8007086:	f000 fb95 	bl	80077b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800708c:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800708e:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007090:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007092:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8007094:	1c5e      	adds	r6, r3, #1
 8007096:	d00d      	beq.n	80070b4 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007098:	4e0c      	ldr	r6, [pc, #48]	; (80070cc <xTaskCheckForTimeOut+0x7c>)
 800709a:	682f      	ldr	r7, [r5, #0]
 800709c:	6836      	ldr	r6, [r6, #0]
 800709e:	42b7      	cmp	r7, r6
 80070a0:	d001      	beq.n	80070a6 <xTaskCheckForTimeOut+0x56>
 80070a2:	4288      	cmp	r0, r1
 80070a4:	d90d      	bls.n	80070c2 <xTaskCheckForTimeOut+0x72>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d909      	bls.n	80070be <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 80070aa:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070ac:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80070ae:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070b0:	f7ff ffc2 	bl	8007038 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80070b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80070b6:	f000 fba3 	bl	8007800 <vPortExitCritical>
}
 80070ba:	4620      	mov	r0, r4
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80070c2:	2401      	movs	r4, #1
 80070c4:	e7f7      	b.n	80070b6 <xTaskCheckForTimeOut+0x66>
 80070c6:	bf00      	nop
 80070c8:	20001654 	.word	0x20001654
 80070cc:	20001610 	.word	0x20001610

080070d0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80070d0:	4b01      	ldr	r3, [pc, #4]	; (80070d8 <vTaskMissedYield+0x8>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
}
 80070d6:	4770      	bx	lr
 80070d8:	20001658 	.word	0x20001658

080070dc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80070dc:	4b01      	ldr	r3, [pc, #4]	; (80070e4 <xTaskGetCurrentTaskHandle+0x8>)
 80070de:	6818      	ldr	r0, [r3, #0]
	}
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20001160 	.word	0x20001160

080070e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <xTaskGetSchedulerState+0x18>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b133      	cbz	r3, 80070fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <xTaskGetSchedulerState+0x1c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80070f4:	bf0c      	ite	eq
 80070f6:	2002      	moveq	r0, #2
 80070f8:	2000      	movne	r0, #0
 80070fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070fc:	2001      	movs	r0, #1
	}
 80070fe:	4770      	bx	lr
 8007100:	20001628 	.word	0x20001628
 8007104:	200015d8 	.word	0x200015d8

08007108 <xTaskPriorityInherit>:
	{
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800710a:	4604      	mov	r4, r0
 800710c:	b340      	cbz	r0, 8007160 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800710e:	4a1b      	ldr	r2, [pc, #108]	; (800717c <xTaskPriorityInherit+0x74>)
 8007110:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007112:	6811      	ldr	r1, [r2, #0]
 8007114:	4616      	mov	r6, r2
 8007116:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007118:	428b      	cmp	r3, r1
 800711a:	d226      	bcs.n	800716a <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800711c:	6982      	ldr	r2, [r0, #24]
 800711e:	2a00      	cmp	r2, #0
 8007120:	db04      	blt.n	800712c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007122:	6832      	ldr	r2, [r6, #0]
 8007124:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007126:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800712a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800712c:	2214      	movs	r2, #20
 800712e:	4d14      	ldr	r5, [pc, #80]	; (8007180 <xTaskPriorityInherit+0x78>)
 8007130:	fb02 5303 	mla	r3, r2, r3, r5
 8007134:	6962      	ldr	r2, [r4, #20]
 8007136:	429a      	cmp	r2, r3
 8007138:	d113      	bne.n	8007162 <xTaskPriorityInherit+0x5a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800713a:	1d27      	adds	r7, r4, #4
 800713c:	4638      	mov	r0, r7
 800713e:	f7fe fed2 	bl	8005ee6 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007142:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007144:	4a0f      	ldr	r2, [pc, #60]	; (8007184 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007148:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800714a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800714c:	428b      	cmp	r3, r1
 800714e:	d900      	bls.n	8007152 <xTaskPriorityInherit+0x4a>
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	2014      	movs	r0, #20
 8007154:	4639      	mov	r1, r7
 8007156:	fb00 5003 	mla	r0, r0, r3, r5
 800715a:	f7fe fea1 	bl	8005ea0 <vListInsertEnd>
				xReturn = pdTRUE;
 800715e:	2001      	movs	r0, #1
	}
 8007160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007162:	6833      	ldr	r3, [r6, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007168:	e7f9      	b.n	800715e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800716e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007170:	42a0      	cmp	r0, r4
 8007172:	bf2c      	ite	cs
 8007174:	2000      	movcs	r0, #0
 8007176:	2001      	movcc	r0, #1
 8007178:	e7f2      	b.n	8007160 <xTaskPriorityInherit+0x58>
 800717a:	bf00      	nop
 800717c:	20001160 	.word	0x20001160
 8007180:	2000116c 	.word	0x2000116c
 8007184:	200015e0 	.word	0x200015e0

08007188 <xTaskPriorityDisinherit>:
	{
 8007188:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800718a:	b908      	cbnz	r0, 8007190 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800718c:	2000      	movs	r0, #0
	}
 800718e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007190:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <xTaskPriorityDisinherit+0x80>)
 8007192:	681c      	ldr	r4, [r3, #0]
 8007194:	4284      	cmp	r4, r0
 8007196:	d00a      	beq.n	80071ae <xTaskPriorityDisinherit+0x26>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	b672      	cpsid	i
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	b662      	cpsie	i
 80071ac:	e7fe      	b.n	80071ac <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80071ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80071b0:	b953      	cbnz	r3, 80071c8 <xTaskPriorityDisinherit+0x40>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	e7fe      	b.n	80071c6 <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80071ca:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071cc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80071ce:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071d0:	4291      	cmp	r1, r2
 80071d2:	d0db      	beq.n	800718c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1d9      	bne.n	800718c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071d8:	1d25      	adds	r5, r4, #4
 80071da:	4628      	mov	r0, r5
 80071dc:	f7fe fe83 	bl	8005ee6 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071e6:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80071ea:	4a08      	ldr	r2, [pc, #32]	; (800720c <xTaskPriorityDisinherit+0x84>)
 80071ec:	6811      	ldr	r1, [r2, #0]
 80071ee:	428b      	cmp	r3, r1
 80071f0:	d900      	bls.n	80071f4 <xTaskPriorityDisinherit+0x6c>
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	4a06      	ldr	r2, [pc, #24]	; (8007210 <xTaskPriorityDisinherit+0x88>)
 80071f6:	2014      	movs	r0, #20
 80071f8:	4629      	mov	r1, r5
 80071fa:	fb00 2003 	mla	r0, r0, r3, r2
 80071fe:	f7fe fe4f 	bl	8005ea0 <vListInsertEnd>
					xReturn = pdTRUE;
 8007202:	2001      	movs	r0, #1
		return xReturn;
 8007204:	e7c3      	b.n	800718e <xTaskPriorityDisinherit+0x6>
 8007206:	bf00      	nop
 8007208:	20001160 	.word	0x20001160
 800720c:	200015e0 	.word	0x200015e0
 8007210:	2000116c 	.word	0x2000116c

08007214 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007214:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8007216:	4604      	mov	r4, r0
 8007218:	2800      	cmp	r0, #0
 800721a:	d046      	beq.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 800721c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800721e:	b952      	cbnz	r2, 8007236 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	b672      	cpsid	i
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	b662      	cpsie	i
 8007234:	e7fe      	b.n	8007234 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8007236:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007238:	4299      	cmp	r1, r3
 800723a:	bf38      	it	cc
 800723c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800723e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007240:	428b      	cmp	r3, r1
 8007242:	d032      	beq.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007244:	2a01      	cmp	r2, #1
 8007246:	d130      	bne.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 8007248:	4a18      	ldr	r2, [pc, #96]	; (80072ac <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	4282      	cmp	r2, r0
 800724e:	d10a      	bne.n	8007266 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	b672      	cpsid	i
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	b662      	cpsie	i
 8007264:	e7fe      	b.n	8007264 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007266:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007268:	4d11      	ldr	r5, [pc, #68]	; (80072b0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800726a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800726c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8007270:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007272:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007276:	bfa8      	it	ge
 8007278:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800727c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727e:	bfa8      	it	ge
 8007280:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007282:	429a      	cmp	r2, r3
 8007284:	d111      	bne.n	80072aa <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007286:	1d06      	adds	r6, r0, #4
 8007288:	4630      	mov	r0, r6
 800728a:	f7fe fe2c 	bl	8005ee6 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800728e:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8007290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007292:	6811      	ldr	r1, [r2, #0]
 8007294:	428b      	cmp	r3, r1
 8007296:	d900      	bls.n	800729a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	2014      	movs	r0, #20
 800729c:	4631      	mov	r1, r6
 800729e:	fb00 5003 	mla	r0, r0, r3, r5
	}
 80072a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80072a6:	f7fe bdfb 	b.w	8005ea0 <vListInsertEnd>
	}
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	20001160 	.word	0x20001160
 80072b0:	2000116c 	.word	0x2000116c
 80072b4:	200015e0 	.word	0x200015e0

080072b8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80072b8:	4b04      	ldr	r3, [pc, #16]	; (80072cc <pvTaskIncrementMutexHeldCount+0x14>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	b11a      	cbz	r2, 80072c6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80072be:	6819      	ldr	r1, [r3, #0]
 80072c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80072c2:	3201      	adds	r2, #1
 80072c4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80072c6:	6818      	ldr	r0, [r3, #0]
	}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20001160 	.word	0x20001160

080072d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80072d2:	4c11      	ldr	r4, [pc, #68]	; (8007318 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80072d4:	f000 fa6e 	bl	80077b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80072d8:	6825      	ldr	r5, [r4, #0]
 80072da:	b9bd      	cbnz	r5, 800730c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80072dc:	4f0f      	ldr	r7, [pc, #60]	; (800731c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80072de:	4e10      	ldr	r6, [pc, #64]	; (8007320 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7fe fdcf 	bl	8005e84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072e6:	4630      	mov	r0, r6
 80072e8:	f7fe fdcc 	bl	8005e84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072ec:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072ee:	4a0e      	ldr	r2, [pc, #56]	; (8007328 <prvCheckForValidListAndQueue+0x58>)
 80072f0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 80072f2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072f4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <prvCheckForValidListAndQueue+0x5c>)
 80072f8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072fa:	9500      	str	r5, [sp, #0]
 80072fc:	4b0c      	ldr	r3, [pc, #48]	; (8007330 <prvCheckForValidListAndQueue+0x60>)
 80072fe:	f7fe fed1 	bl	80060a4 <xQueueGenericCreateStatic>
 8007302:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007304:	b110      	cbz	r0, 800730c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007306:	490b      	ldr	r1, [pc, #44]	; (8007334 <prvCheckForValidListAndQueue+0x64>)
 8007308:	f7ff fa4c 	bl	80067a4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800730c:	b003      	add	sp, #12
 800730e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007312:	f000 ba75 	b.w	8007800 <vPortExitCritical>
 8007316:	bf00      	nop
 8007318:	20001780 	.word	0x20001780
 800731c:	20001704 	.word	0x20001704
 8007320:	20001718 	.word	0x20001718
 8007324:	2000165c 	.word	0x2000165c
 8007328:	20001664 	.word	0x20001664
 800732c:	20001660 	.word	0x20001660
 8007330:	20001730 	.word	0x20001730
 8007334:	0800cf2a 	.word	0x0800cf2a

08007338 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8007338:	4291      	cmp	r1, r2
{
 800733a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800733c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800733e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8007340:	d80a      	bhi.n	8007358 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007342:	1ad2      	subs	r2, r2, r3
 8007344:	6983      	ldr	r3, [r0, #24]
 8007346:	429a      	cmp	r2, r3
 8007348:	d20d      	bcs.n	8007366 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800734a:	1d01      	adds	r1, r0, #4
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	f7fe fdb2 	bl	8005eb8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007354:	2000      	movs	r0, #0
}
 8007356:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007358:	429a      	cmp	r2, r3
 800735a:	d201      	bcs.n	8007360 <prvInsertTimerInActiveList+0x28>
 800735c:	4299      	cmp	r1, r3
 800735e:	d202      	bcs.n	8007366 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007360:	1d01      	adds	r1, r0, #4
 8007362:	4b03      	ldr	r3, [pc, #12]	; (8007370 <prvInsertTimerInActiveList+0x38>)
 8007364:	e7f3      	b.n	800734e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8007366:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007368:	e7f5      	b.n	8007356 <prvInsertTimerInActiveList+0x1e>
 800736a:	bf00      	nop
 800736c:	20001660 	.word	0x20001660
 8007370:	2000165c 	.word	0x2000165c

08007374 <xTimerCreateTimerTask>:
{
 8007374:	b510      	push	{r4, lr}
 8007376:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007378:	f7ff ffaa 	bl	80072d0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <xTimerCreateTimerTask+0x58>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	b1b3      	cbz	r3, 80073b0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007382:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007384:	aa07      	add	r2, sp, #28
 8007386:	a906      	add	r1, sp, #24
 8007388:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800738a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800738e:	f7fe fd6d 	bl	8005e6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007392:	9b05      	ldr	r3, [sp, #20]
 8007394:	9a07      	ldr	r2, [sp, #28]
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	9b06      	ldr	r3, [sp, #24]
 800739a:	490d      	ldr	r1, [pc, #52]	; (80073d0 <xTimerCreateTimerTask+0x5c>)
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	2302      	movs	r3, #2
 80073a0:	480c      	ldr	r0, [pc, #48]	; (80073d4 <xTimerCreateTimerTask+0x60>)
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	4623      	mov	r3, r4
 80073a6:	f7ff fb99 	bl	8006adc <xTaskCreateStatic>
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <xTimerCreateTimerTask+0x64>)
 80073ac:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80073ae:	b950      	cbnz	r0, 80073c6 <xTimerCreateTimerTask+0x52>
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	e7fe      	b.n	80073c4 <xTimerCreateTimerTask+0x50>
}
 80073c6:	2001      	movs	r0, #1
 80073c8:	b008      	add	sp, #32
 80073ca:	bd10      	pop	{r4, pc}
 80073cc:	20001780 	.word	0x20001780
 80073d0:	0800cf2f 	.word	0x0800cf2f
 80073d4:	080074bd 	.word	0x080074bd
 80073d8:	20001784 	.word	0x20001784

080073dc <xTimerGenericCommand>:
{
 80073dc:	b530      	push	{r4, r5, lr}
 80073de:	4615      	mov	r5, r2
 80073e0:	b085      	sub	sp, #20
 80073e2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80073e4:	4603      	mov	r3, r0
 80073e6:	b950      	cbnz	r0, 80073fe <xTimerGenericCommand+0x22>
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	b672      	cpsid	i
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	b662      	cpsie	i
 80073fc:	e7fe      	b.n	80073fc <xTimerGenericCommand+0x20>
	if( xTimerQueue != NULL )
 80073fe:	4c0d      	ldr	r4, [pc, #52]	; (8007434 <xTimerGenericCommand+0x58>)
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	b178      	cbz	r0, 8007424 <xTimerGenericCommand+0x48>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007404:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007406:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007408:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800740c:	dc0c      	bgt.n	8007428 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800740e:	f7ff fe6b 	bl	80070e8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007412:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007414:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007416:	4669      	mov	r1, sp
 8007418:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800741a:	bf0c      	ite	eq
 800741c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800741e:	461a      	movne	r2, r3
 8007420:	f7fe fec2 	bl	80061a8 <xQueueGenericSend>
}
 8007424:	b005      	add	sp, #20
 8007426:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007428:	2300      	movs	r3, #0
 800742a:	4669      	mov	r1, sp
 800742c:	f7fe ffbd 	bl	80063aa <xQueueGenericSendFromISR>
 8007430:	e7f8      	b.n	8007424 <xTimerGenericCommand+0x48>
 8007432:	bf00      	nop
 8007434:	20001780 	.word	0x20001780

08007438 <prvSwitchTimerLists>:
{
 8007438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800743c:	4d1d      	ldr	r5, [pc, #116]	; (80074b4 <prvSwitchTimerLists+0x7c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800743e:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007442:	682b      	ldr	r3, [r5, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	b932      	cbnz	r2, 8007456 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8007448:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <prvSwitchTimerLists+0x80>)
 800744a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800744c:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800744e:	6029      	str	r1, [r5, #0]
}
 8007450:	b002      	add	sp, #8
 8007452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007456:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007458:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800745a:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800745c:	1d27      	adds	r7, r4, #4
 800745e:	4638      	mov	r0, r7
 8007460:	f7fe fd41 	bl	8005ee6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007464:	6a23      	ldr	r3, [r4, #32]
 8007466:	4620      	mov	r0, r4
 8007468:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800746a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800746e:	075b      	lsls	r3, r3, #29
 8007470:	d5e7      	bpl.n	8007442 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007472:	69a3      	ldr	r3, [r4, #24]
 8007474:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8007476:	429e      	cmp	r6, r3
 8007478:	d206      	bcs.n	8007488 <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800747a:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800747c:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800747e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007480:	6828      	ldr	r0, [r5, #0]
 8007482:	f7fe fd19 	bl	8005eb8 <vListInsert>
 8007486:	e7dc      	b.n	8007442 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007488:	2300      	movs	r3, #0
 800748a:	f8cd 8000 	str.w	r8, [sp]
 800748e:	4632      	mov	r2, r6
 8007490:	4620      	mov	r0, r4
 8007492:	4619      	mov	r1, r3
 8007494:	f7ff ffa2 	bl	80073dc <xTimerGenericCommand>
				configASSERT( xResult );
 8007498:	2800      	cmp	r0, #0
 800749a:	d1d2      	bne.n	8007442 <prvSwitchTimerLists+0xa>
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	b672      	cpsid	i
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	b662      	cpsie	i
 80074b0:	e7fe      	b.n	80074b0 <prvSwitchTimerLists+0x78>
 80074b2:	bf00      	nop
 80074b4:	2000165c 	.word	0x2000165c
 80074b8:	20001660 	.word	0x20001660

080074bc <prvTimerTask>:
{
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074c0:	4d84      	ldr	r5, [pc, #528]	; (80076d4 <prvTimerTask+0x218>)
{
 80074c2:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 80074c4:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80076e0 <prvTimerTask+0x224>
 80074c8:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074ca:	682a      	ldr	r2, [r5, #0]
 80074cc:	6813      	ldr	r3, [r2, #0]
 80074ce:	b353      	cbz	r3, 8007526 <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d0:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074d2:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d4:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 80074d8:	f8df b208 	ldr.w	fp, [pc, #520]	; 80076e4 <prvTimerTask+0x228>
	vTaskSuspendAll();
 80074dc:	f7ff fbb2 	bl	8006c44 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80074e0:	f7ff fbb8 	bl	8006c54 <xTaskGetTickCount>
 80074e4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80074e6:	f8db 3000 	ldr.w	r3, [fp]
 80074ea:	465e      	mov	r6, fp
 80074ec:	4298      	cmp	r0, r3
 80074ee:	d31d      	bcc.n	800752c <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 80074f0:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074f4:	b32c      	cbz	r4, 8007542 <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074f6:	4b78      	ldr	r3, [pc, #480]	; (80076d8 <prvTimerTask+0x21c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	fab2 f282 	clz	r2, r2
 8007500:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007502:	4b76      	ldr	r3, [pc, #472]	; (80076dc <prvTimerTask+0x220>)
 8007504:	eba9 010a 	sub.w	r1, r9, sl
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f7ff f95d 	bl	80067c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800750e:	f7ff fc39 	bl	8006d84 <xTaskResumeAll>
 8007512:	b988      	cbnz	r0, 8007538 <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 8007514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007518:	f8c8 3000 	str.w	r3, [r8]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	e008      	b.n	8007538 <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007526:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 8007528:	4699      	mov	r9, r3
 800752a:	e7d5      	b.n	80074d8 <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 800752c:	f7ff ff84 	bl	8007438 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8007530:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 8007534:	f7ff fc26 	bl	8006d84 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007538:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80076dc <prvTimerTask+0x220>
 800753c:	f04f 0a00 	mov.w	sl, #0
 8007540:	e083      	b.n	800764a <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007542:	4581      	cmp	r9, r0
 8007544:	d832      	bhi.n	80075ac <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 8007546:	f7ff fc1d 	bl	8006d84 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007552:	f10b 0004 	add.w	r0, fp, #4
 8007556:	f7fe fcc6 	bl	8005ee6 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800755a:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 800755e:	0758      	lsls	r0, r3, #29
 8007560:	d51b      	bpl.n	800759a <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007562:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007566:	464b      	mov	r3, r9
 8007568:	4652      	mov	r2, sl
 800756a:	4658      	mov	r0, fp
 800756c:	4449      	add	r1, r9
 800756e:	f7ff fee3 	bl	8007338 <prvInsertTimerInActiveList>
 8007572:	b1b0      	cbz	r0, 80075a2 <prvTimerTask+0xe6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007574:	9400      	str	r4, [sp, #0]
 8007576:	4623      	mov	r3, r4
 8007578:	464a      	mov	r2, r9
 800757a:	4621      	mov	r1, r4
 800757c:	4658      	mov	r0, fp
 800757e:	f7ff ff2d 	bl	80073dc <xTimerGenericCommand>
			configASSERT( xResult );
 8007582:	b970      	cbnz	r0, 80075a2 <prvTimerTask+0xe6>
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	b672      	cpsid	i
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	b662      	cpsie	i
 8007598:	e7fe      	b.n	8007598 <prvTimerTask+0xdc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800759a:	f023 0301 	bic.w	r3, r3, #1
 800759e:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075a2:	f8db 3020 	ldr.w	r3, [fp, #32]
 80075a6:	4658      	mov	r0, fp
 80075a8:	4798      	blx	r3
 80075aa:	e7c5      	b.n	8007538 <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075ac:	4622      	mov	r2, r4
 80075ae:	e7a8      	b.n	8007502 <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075b4:	465a      	mov	r2, fp
 80075b6:	69a1      	ldr	r1, [r4, #24]
 80075b8:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	4419      	add	r1, r3
 80075c6:	f7ff feb7 	bl	8007338 <prvInsertTimerInActiveList>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d03d      	beq.n	800764a <prvTimerTask+0x18e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ce:	6a23      	ldr	r3, [r4, #32]
 80075d0:	4620      	mov	r0, r4
 80075d2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80075d8:	0759      	lsls	r1, r3, #29
 80075da:	d536      	bpl.n	800764a <prvTimerTask+0x18e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075dc:	69a2      	ldr	r2, [r4, #24]
 80075de:	2300      	movs	r3, #0
 80075e0:	9903      	ldr	r1, [sp, #12]
 80075e2:	4620      	mov	r0, r4
 80075e4:	f8cd a000 	str.w	sl, [sp]
 80075e8:	440a      	add	r2, r1
 80075ea:	4619      	mov	r1, r3
 80075ec:	f7ff fef6 	bl	80073dc <xTimerGenericCommand>
							configASSERT( xResult );
 80075f0:	bb58      	cbnz	r0, 800764a <prvTimerTask+0x18e>
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	b672      	cpsid	i
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	b662      	cpsie	i
 8007606:	e7fe      	b.n	8007606 <prvTimerTask+0x14a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007608:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8007614:	e019      	b.n	800764a <prvTimerTask+0x18e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007616:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800761a:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800761c:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007620:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007622:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007626:	b951      	cbnz	r1, 800763e <prvTimerTask+0x182>
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	e7fe      	b.n	800763c <prvTimerTask+0x180>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800763e:	465b      	mov	r3, fp
 8007640:	465a      	mov	r2, fp
 8007642:	4459      	add	r1, fp
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff fe77 	bl	8007338 <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800764a:	2200      	movs	r2, #0
 800764c:	a902      	add	r1, sp, #8
 800764e:	f8d9 0000 	ldr.w	r0, [r9]
 8007652:	f7fe ff13 	bl	800647c <xQueueReceive>
 8007656:	2800      	cmp	r0, #0
 8007658:	f43f af37 	beq.w	80074ca <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800765c:	9b02      	ldr	r3, [sp, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	da03      	bge.n	800766a <prvTimerTask+0x1ae>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007662:	9b03      	ldr	r3, [sp, #12]
 8007664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007668:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800766a:	9b02      	ldr	r3, [sp, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	dbec      	blt.n	800764a <prvTimerTask+0x18e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007670:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007672:	6963      	ldr	r3, [r4, #20]
 8007674:	b113      	cbz	r3, 800767c <prvTimerTask+0x1c0>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007676:	1d20      	adds	r0, r4, #4
 8007678:	f7fe fc35 	bl	8005ee6 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800767c:	f7ff faea 	bl	8006c54 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007680:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8007682:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8007684:	4298      	cmp	r0, r3
 8007686:	d201      	bcs.n	800768c <prvTimerTask+0x1d0>
		prvSwitchTimerLists();
 8007688:	f7ff fed6 	bl	8007438 <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 800768c:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800768e:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 8007692:	2b09      	cmp	r3, #9
 8007694:	d8d9      	bhi.n	800764a <prvTimerTask+0x18e>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <prvTimerTask+0x1e0>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080075b1 	.word	0x080075b1
 80076a0:	080075b1 	.word	0x080075b1
 80076a4:	080075b1 	.word	0x080075b1
 80076a8:	08007609 	.word	0x08007609
 80076ac:	08007617 	.word	0x08007617
 80076b0:	080076c5 	.word	0x080076c5
 80076b4:	080075b1 	.word	0x080075b1
 80076b8:	080075b1 	.word	0x080075b1
 80076bc:	08007609 	.word	0x08007609
 80076c0:	08007617 	.word	0x08007617
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80076c8:	079a      	lsls	r2, r3, #30
 80076ca:	d49f      	bmi.n	800760c <prvTimerTask+0x150>
							vPortFree( pxTimer );
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fa5f 	bl	8007b90 <vPortFree>
 80076d2:	e7ba      	b.n	800764a <prvTimerTask+0x18e>
 80076d4:	2000165c 	.word	0x2000165c
 80076d8:	20001660 	.word	0x20001660
 80076dc:	20001780 	.word	0x20001780
 80076e0:	e000ed04 	.word	0xe000ed04
 80076e4:	2000172c 	.word	0x2000172c

080076e8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 80076e8:	2300      	movs	r3, #0
{
 80076ea:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80076ec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <prvTaskExitError+0x44>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	d00a      	beq.n	800770c <prvTaskExitError+0x24>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	b672      	cpsid	i
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	b662      	cpsie	i
 800770a:	e7fe      	b.n	800770a <prvTaskExitError+0x22>
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	b672      	cpsid	i
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0fc      	beq.n	8007720 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007726:	b002      	add	sp, #8
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000014 	.word	0x20000014

08007730 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007730:	4808      	ldr	r0, [pc, #32]	; (8007754 <prvPortStartFirstTask+0x24>)
 8007732:	6800      	ldr	r0, [r0, #0]
 8007734:	6800      	ldr	r0, [r0, #0]
 8007736:	f380 8808 	msr	MSP, r0
 800773a:	f04f 0000 	mov.w	r0, #0
 800773e:	f380 8814 	msr	CONTROL, r0
 8007742:	b662      	cpsie	i
 8007744:	b661      	cpsie	f
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	df00      	svc	0
 8007750:	bf00      	nop
 8007752:	0000      	.short	0x0000
 8007754:	e000ed08 	.word	0xe000ed08

08007758 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007758:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007768 <vPortEnableVFP+0x10>
 800775c:	6801      	ldr	r1, [r0, #0]
 800775e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007762:	6001      	str	r1, [r0, #0]
 8007764:	4770      	bx	lr
 8007766:	0000      	.short	0x0000
 8007768:	e000ed88 	.word	0xe000ed88

0800776c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800776c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007770:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007774:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007778:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800777a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800777c:	4b03      	ldr	r3, [pc, #12]	; (800778c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800777e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007780:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007782:	f06f 0302 	mvn.w	r3, #2
 8007786:	6203      	str	r3, [r0, #32]
}
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	080076e9 	.word	0x080076e9

08007790 <SVC_Handler>:
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20001160 	.word	0x20001160

080077b4 <vPortEnterCritical>:
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	b672      	cpsid	i
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	b662      	cpsie	i
	uxCriticalNesting++;
 80077c8:	4a0b      	ldr	r2, [pc, #44]	; (80077f8 <vPortEnterCritical+0x44>)
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80077ce:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80077d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80077d2:	d10f      	bne.n	80077f4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077d4:	4b09      	ldr	r3, [pc, #36]	; (80077fc <vPortEnterCritical+0x48>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077dc:	d00a      	beq.n	80077f4 <vPortEnterCritical+0x40>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	b672      	cpsid	i
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	b662      	cpsie	i
 80077f2:	e7fe      	b.n	80077f2 <vPortEnterCritical+0x3e>
}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	20000014 	.word	0x20000014
 80077fc:	e000ed04 	.word	0xe000ed04

08007800 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007800:	4a09      	ldr	r2, [pc, #36]	; (8007828 <vPortExitCritical+0x28>)
 8007802:	6813      	ldr	r3, [r2, #0]
 8007804:	b953      	cbnz	r3, 800781c <vPortExitCritical+0x1c>
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	b672      	cpsid	i
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	b662      	cpsie	i
 800781a:	e7fe      	b.n	800781a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800781c:	3b01      	subs	r3, #1
 800781e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007820:	b90b      	cbnz	r3, 8007826 <vPortExitCritical+0x26>
	__asm volatile
 8007822:	f383 8811 	msr	BASEPRI, r3
}
 8007826:	4770      	bx	lr
 8007828:	20000014 	.word	0x20000014
 800782c:	00000000 	.word	0x00000000

08007830 <PendSV_Handler>:
	__asm volatile
 8007830:	f3ef 8009 	mrs	r0, PSP
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <pxCurrentTCBConst>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	f01e 0f10 	tst.w	lr, #16
 8007840:	bf08      	it	eq
 8007842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784a:	6010      	str	r0, [r2, #0]
 800784c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007854:	b672      	cpsid	i
 8007856:	f380 8811 	msr	BASEPRI, r0
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	b662      	cpsie	i
 8007864:	f7ff fb2a 	bl	8006ebc <vTaskSwitchContext>
 8007868:	f04f 0000 	mov.w	r0, #0
 800786c:	f380 8811 	msr	BASEPRI, r0
 8007870:	bc09      	pop	{r0, r3}
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	6808      	ldr	r0, [r1, #0]
 8007876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787a:	f01e 0f10 	tst.w	lr, #16
 800787e:	bf08      	it	eq
 8007880:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007884:	f380 8809 	msr	PSP, r0
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop

08007890 <pxCurrentTCBConst>:
 8007890:	20001160 	.word	0x20001160

08007894 <xPortSysTickHandler>:
{
 8007894:	b508      	push	{r3, lr}
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80078aa:	f7ff f9d9 	bl	8006c60 <xTaskIncrementTick>
 80078ae:	b118      	cbz	r0, 80078b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078b0:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <xPortSysTickHandler+0x2c>)
 80078b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80078b8:	2300      	movs	r3, #0
 80078ba:	f383 8811 	msr	BASEPRI, r3
}
 80078be:	bd08      	pop	{r3, pc}
 80078c0:	e000ed04 	.word	0xe000ed04

080078c4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078c4:	2300      	movs	r3, #0
 80078c6:	4a08      	ldr	r2, [pc, #32]	; (80078e8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078c8:	4908      	ldr	r1, [pc, #32]	; (80078ec <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078cc:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <vPortSetupTimerInterrupt+0x2c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80078da:	4906      	ldr	r1, [pc, #24]	; (80078f4 <vPortSetupTimerInterrupt+0x30>)
 80078dc:	3b01      	subs	r3, #1
 80078de:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078e0:	2307      	movs	r3, #7
 80078e2:	6013      	str	r3, [r2, #0]
}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	e000e010 	.word	0xe000e010
 80078ec:	e000e018 	.word	0xe000e018
 80078f0:	20000000 	.word	0x20000000
 80078f4:	e000e014 	.word	0xe000e014

080078f8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078f8:	4b2c      	ldr	r3, [pc, #176]	; (80079ac <xPortStartScheduler+0xb4>)
{
 80078fa:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078fc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fe:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007908:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800790a:	4a29      	ldr	r2, [pc, #164]	; (80079b0 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007912:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007916:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800791a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800791c:	2207      	movs	r2, #7
 800791e:	4b25      	ldr	r3, [pc, #148]	; (80079b4 <xPortStartScheduler+0xbc>)
 8007920:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007922:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007926:	1e54      	subs	r4, r2, #1
 8007928:	0600      	lsls	r0, r0, #24
 800792a:	d40f      	bmi.n	800794c <xPortStartScheduler+0x54>
 800792c:	b101      	cbz	r1, 8007930 <xPortStartScheduler+0x38>
 800792e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	2a03      	cmp	r2, #3
 8007934:	d013      	beq.n	800795e <xPortStartScheduler+0x66>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	b672      	cpsid	i
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	b662      	cpsie	i
 800794a:	e7fe      	b.n	800794a <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800794c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007950:	2101      	movs	r1, #1
 8007952:	0052      	lsls	r2, r2, #1
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	f88d 2003 	strb.w	r2, [sp, #3]
 800795a:	4622      	mov	r2, r4
 800795c:	e7e1      	b.n	8007922 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800795e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8007960:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007962:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007966:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <xPortStartScheduler+0xb4>)
 800796c:	b2db      	uxtb	r3, r3
 800796e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007970:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <xPortStartScheduler+0xc0>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007978:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007980:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007982:	f7ff ff9f 	bl	80078c4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007986:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <xPortStartScheduler+0xc4>)
 8007988:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800798a:	f7ff fee5 	bl	8007758 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800798e:	4a0c      	ldr	r2, [pc, #48]	; (80079c0 <xPortStartScheduler+0xc8>)
 8007990:	6813      	ldr	r3, [r2, #0]
 8007992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007996:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007998:	f7ff feca 	bl	8007730 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800799c:	f7ff fa8e 	bl	8006ebc <vTaskSwitchContext>
	prvTaskExitError();
 80079a0:	f7ff fea2 	bl	80076e8 <prvTaskExitError>
}
 80079a4:	4620      	mov	r0, r4
 80079a6:	b002      	add	sp, #8
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	bf00      	nop
 80079ac:	e000e400 	.word	0xe000e400
 80079b0:	20001788 	.word	0x20001788
 80079b4:	2000178c 	.word	0x2000178c
 80079b8:	e000ed20 	.word	0xe000ed20
 80079bc:	20000014 	.word	0x20000014
 80079c0:	e000ef34 	.word	0xe000ef34

080079c4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079c4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079c8:	2b0f      	cmp	r3, #15
 80079ca:	d910      	bls.n	80079ee <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079cc:	4a12      	ldr	r2, [pc, #72]	; (8007a18 <vPortValidateInterruptPriority+0x54>)
 80079ce:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079d0:	4a12      	ldr	r2, [pc, #72]	; (8007a1c <vPortValidateInterruptPriority+0x58>)
 80079d2:	7812      	ldrb	r2, [r2, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d90a      	bls.n	80079ee <vPortValidateInterruptPriority+0x2a>
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	b672      	cpsid	i
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	b662      	cpsie	i
 80079ec:	e7fe      	b.n	80079ec <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079ee:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <vPortValidateInterruptPriority+0x5c>)
 80079f0:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <vPortValidateInterruptPriority+0x60>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d90a      	bls.n	8007a14 <vPortValidateInterruptPriority+0x50>
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	b672      	cpsid	i
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	b662      	cpsie	i
 8007a12:	e7fe      	b.n	8007a12 <vPortValidateInterruptPriority+0x4e>
	}
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	e000e3f0 	.word	0xe000e3f0
 8007a1c:	20001788 	.word	0x20001788
 8007a20:	e000ed0c 	.word	0xe000ed0c
 8007a24:	2000178c 	.word	0x2000178c

08007a28 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a28:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <prvInsertBlockIntoFreeList+0x40>)
{
 8007a2a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4282      	cmp	r2, r0
 8007a30:	d318      	bcc.n	8007a64 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a32:	685c      	ldr	r4, [r3, #4]
 8007a34:	1919      	adds	r1, r3, r4
 8007a36:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a38:	bf01      	itttt	eq
 8007a3a:	6841      	ldreq	r1, [r0, #4]
 8007a3c:	4618      	moveq	r0, r3
 8007a3e:	1909      	addeq	r1, r1, r4
 8007a40:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a42:	6844      	ldr	r4, [r0, #4]
 8007a44:	1901      	adds	r1, r0, r4
 8007a46:	428a      	cmp	r2, r1
 8007a48:	d107      	bne.n	8007a5a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a4a:	4908      	ldr	r1, [pc, #32]	; (8007a6c <prvInsertBlockIntoFreeList+0x44>)
 8007a4c:	6809      	ldr	r1, [r1, #0]
 8007a4e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a50:	bf1f      	itttt	ne
 8007a52:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a54:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a56:	1909      	addne	r1, r1, r4
 8007a58:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a5a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a5c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a5e:	bf18      	it	ne
 8007a60:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a62:	bd10      	pop	{r4, pc}
 8007a64:	4613      	mov	r3, r2
 8007a66:	e7e1      	b.n	8007a2c <prvInsertBlockIntoFreeList+0x4>
 8007a68:	200053a0 	.word	0x200053a0
 8007a6c:	20001790 	.word	0x20001790

08007a70 <pvPortMalloc>:
{
 8007a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a74:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007a76:	f7ff f8e5 	bl	8006c44 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007a7a:	493f      	ldr	r1, [pc, #252]	; (8007b78 <pvPortMalloc+0x108>)
 8007a7c:	4d3f      	ldr	r5, [pc, #252]	; (8007b7c <pvPortMalloc+0x10c>)
 8007a7e:	680b      	ldr	r3, [r1, #0]
 8007a80:	bb03      	cbnz	r3, 8007ac4 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 8007a82:	4a3f      	ldr	r2, [pc, #252]	; (8007b80 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;
 8007a84:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a86:	0756      	lsls	r6, r2, #29
 8007a88:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a8c:	4e3d      	ldr	r6, [pc, #244]	; (8007b84 <pvPortMalloc+0x114>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a8e:	bf14      	ite	ne
 8007a90:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a92:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.xBlockSize = ( size_t ) 0;
 8007a96:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a98:	bf1c      	itt	ne
 8007a9a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a9e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aa0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007aa2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007aa4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aa6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007aaa:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aae:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8007ab0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab6:	4b34      	ldr	r3, [pc, #208]	; (8007b88 <pvPortMalloc+0x118>)
 8007ab8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aba:	4b34      	ldr	r3, [pc, #208]	; (8007b8c <pvPortMalloc+0x11c>)
 8007abc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007abe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ac2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ac4:	682f      	ldr	r7, [r5, #0]
 8007ac6:	4227      	tst	r7, r4
 8007ac8:	d151      	bne.n	8007b6e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	d040      	beq.n	8007b50 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 8007ace:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ad2:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ad4:	bf1c      	itt	ne
 8007ad6:	f023 0307 	bicne.w	r3, r3, #7
 8007ada:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d046      	beq.n	8007b6e <pvPortMalloc+0xfe>
 8007ae0:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <pvPortMalloc+0x11c>)
 8007ae2:	6816      	ldr	r6, [r2, #0]
 8007ae4:	4690      	mov	r8, r2
 8007ae6:	429e      	cmp	r6, r3
 8007ae8:	d341      	bcc.n	8007b6e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8007aea:	4a26      	ldr	r2, [pc, #152]	; (8007b84 <pvPortMalloc+0x114>)
 8007aec:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aee:	6868      	ldr	r0, [r5, #4]
 8007af0:	4298      	cmp	r0, r3
 8007af2:	d201      	bcs.n	8007af8 <pvPortMalloc+0x88>
 8007af4:	682c      	ldr	r4, [r5, #0]
 8007af6:	b9b4      	cbnz	r4, 8007b26 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8007af8:	6809      	ldr	r1, [r1, #0]
 8007afa:	42a9      	cmp	r1, r5
 8007afc:	d037      	beq.n	8007b6e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007afe:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b00:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b02:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b04:	1ac2      	subs	r2, r0, r3
 8007b06:	2a10      	cmp	r2, #16
 8007b08:	d914      	bls.n	8007b34 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b0a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b0c:	0741      	lsls	r1, r0, #29
 8007b0e:	d00d      	beq.n	8007b2c <pvPortMalloc+0xbc>
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	b672      	cpsid	i
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	b662      	cpsie	i
 8007b24:	e7fe      	b.n	8007b24 <pvPortMalloc+0xb4>
 8007b26:	462a      	mov	r2, r5
 8007b28:	4625      	mov	r5, r4
 8007b2a:	e7e0      	b.n	8007aee <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b2c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b2e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b30:	f7ff ff7a 	bl	8007a28 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b34:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b36:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b38:	4913      	ldr	r1, [pc, #76]	; (8007b88 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b3a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b3c:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b3e:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007b40:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b42:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b46:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b48:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b4a:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b4c:	bf38      	it	cc
 8007b4e:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8007b50:	f7ff f918 	bl	8006d84 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b54:	0763      	lsls	r3, r4, #29
 8007b56:	d00c      	beq.n	8007b72 <pvPortMalloc+0x102>
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	b672      	cpsid	i
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	b662      	cpsie	i
 8007b6c:	e7fe      	b.n	8007b6c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8007b6e:	2400      	movs	r4, #0
 8007b70:	e7ee      	b.n	8007b50 <pvPortMalloc+0xe0>
}
 8007b72:	4620      	mov	r0, r4
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b78:	20001790 	.word	0x20001790
 8007b7c:	20005394 	.word	0x20005394
 8007b80:	20001794 	.word	0x20001794
 8007b84:	200053a0 	.word	0x200053a0
 8007b88:	2000539c 	.word	0x2000539c
 8007b8c:	20005398 	.word	0x20005398

08007b90 <vPortFree>:
{
 8007b90:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007b92:	4604      	mov	r4, r0
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d032      	beq.n	8007bfe <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b98:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <vPortFree+0x70>)
 8007b9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	4213      	tst	r3, r2
 8007ba2:	d10a      	bne.n	8007bba <vPortFree+0x2a>
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	b672      	cpsid	i
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	b662      	cpsie	i
 8007bb8:	e7fe      	b.n	8007bb8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bba:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007bbe:	b151      	cbz	r1, 8007bd6 <vPortFree+0x46>
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	b672      	cpsid	i
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	b662      	cpsie	i
 8007bd4:	e7fe      	b.n	8007bd4 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bd6:	ea23 0302 	bic.w	r3, r3, r2
 8007bda:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007bde:	f7ff f831 	bl	8006c44 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007be2:	4a08      	ldr	r2, [pc, #32]	; (8007c04 <vPortFree+0x74>)
 8007be4:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007be8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bec:	6811      	ldr	r1, [r2, #0]
 8007bee:	440b      	add	r3, r1
 8007bf0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bf2:	f7ff ff19 	bl	8007a28 <prvInsertBlockIntoFreeList>
}
 8007bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007bfa:	f7ff b8c3 	b.w	8006d84 <xTaskResumeAll>
}
 8007bfe:	bd10      	pop	{r4, pc}
 8007c00:	20005394 	.word	0x20005394
 8007c04:	20005398 	.word	0x20005398

08007c08 <font_setCR>:
static unsigned char minDigitWd;
static unsigned char dualChar;

void font_setScale2(unsigned char _sx, unsigned char _sy) { sx = _sx; sy = _sy; }
void font_setScale1(unsigned char s) { sx = sy = s; }
void font_setCR(unsigned char _cr) { cr = _cr; }
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	4a03      	ldr	r2, [pc, #12]	; (8007c24 <font_setCR+0x1c>)
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	200053d4 	.word	0x200053d4

08007c28 <font_getHeight>:
void font_setSpacingY(unsigned char sp) { spacingY = sp; }
void font_setFontMinWd(unsigned char wd) { minCharWd = wd; }
void font_setCharMinWd(unsigned char wd) { minCharWd = wd; }
void font_setDigitMinWd(unsigned char wd) { minDigitWd = wd; }
int font_getWidth() { return rFont ? rFont->wd : 0; }
int font_getHeight() { return rFont ? rFont->ht : 0; }
 8007c28:	b480      	push	{r7}
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <font_getHeight+0x20>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <font_getHeight+0x14>
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <font_getHeight+0x20>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	789b      	ldrb	r3, [r3, #2]
 8007c3a:	e000      	b.n	8007c3e <font_getHeight+0x16>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	200053b0 	.word	0x200053b0

08007c4c <font_init>:
void font_setFillRectFun(void (*fun)(int x, int y, int w, int h, int c)) { fillRectFun=fun; }

// ----------------------------------------------------------------
// fillRect function callback and screen width and height is necessary to initialize the library
void font_init(void (*rectFun)(int x, int y, int w, int h, int c), int swd, int sht)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  fillRectFun = rectFun;
 8007c58:	4a14      	ldr	r2, [pc, #80]	; (8007cac <font_init+0x60>)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6013      	str	r3, [r2, #0]
  scrWd = swd;
 8007c5e:	4a14      	ldr	r2, [pc, #80]	; (8007cb0 <font_init+0x64>)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6013      	str	r3, [r2, #0]
  scrHt = sht;
 8007c64:	4a13      	ldr	r2, [pc, #76]	; (8007cb4 <font_init+0x68>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6013      	str	r3, [r2, #0]
  cr = bold = dualChar = 0;
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <font_init+0x6c>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <font_init+0x70>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <font_init+0x70>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a11      	ldr	r2, [pc, #68]	; (8007cc0 <font_init+0x74>)
 8007c7c:	6013      	str	r3, [r2, #0]
  isNumberFun = &font_isNumber;
 8007c7e:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <font_init+0x78>)
 8007c80:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <font_init+0x7c>)
 8007c82:	601a      	str	r2, [r3, #0]
  sx = sy = 1;
 8007c84:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <font_init+0x80>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <font_init+0x80>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <font_init+0x84>)
 8007c90:	6013      	str	r3, [r2, #0]
  fg = bg = 1;
 8007c92:	4b10      	ldr	r3, [pc, #64]	; (8007cd4 <font_init+0x88>)
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <font_init+0x88>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0e      	ldr	r2, [pc, #56]	; (8007cd8 <font_init+0x8c>)
 8007c9e:	6013      	str	r3, [r2, #0]
}
 8007ca0:	bf00      	nop
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	200053ac 	.word	0x200053ac
 8007cb0:	200053c4 	.word	0x200053c4
 8007cb4:	200053c8 	.word	0x200053c8
 8007cb8:	200053da 	.word	0x200053da
 8007cbc:	200053d0 	.word	0x200053d0
 8007cc0:	200053d4 	.word	0x200053d4
 8007cc4:	200053a8 	.word	0x200053a8
 8007cc8:	08009241 	.word	0x08009241
 8007ccc:	20000020 	.word	0x20000020
 8007cd0:	2000001c 	.word	0x2000001c
 8007cd4:	20000028 	.word	0x20000028
 8007cd8:	20000024 	.word	0x20000024

08007cdc <font_setFont>:

// ---------------------------------
void font_setFont(RRE_Font *f)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  rFont = f;
 8007ce4:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <font_setFont+0x34>)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6013      	str	r3, [r2, #0]
  minCharWd = minDigitWd = 0;
 8007cea:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <font_setFont+0x38>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
 8007cf0:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <font_setFont+0x38>)
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	4b08      	ldr	r3, [pc, #32]	; (8007d18 <font_setFont+0x3c>)
 8007cf6:	701a      	strb	r2, [r3, #0]
  spacing = 1;
 8007cf8:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <font_setFont+0x40>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
  spacingY = 0;
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <font_setFont+0x44>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	200053b0 	.word	0x200053b0
 8007d14:	200053d9 	.word	0x200053d9
 8007d18:	200053d8 	.word	0x200053d8
 8007d1c:	20000018 	.word	0x20000018
 8007d20:	200053cc 	.word	0x200053cc

08007d24 <font_charWidthOptim>:
  return xmax-xmin;
}

// ----------------------------------------------------------------
int font_charWidthOptim(unsigned char c, int *_xmin)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b08f      	sub	sp, #60	; 0x3c
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	71fb      	strb	r3, [r7, #7]
  if(c<rFont->firstCh || c>rFont->lastCh) return c==' '? rFont->wd/2 : 0;
 8007d30:	4b7e      	ldr	r3, [pc, #504]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	78db      	ldrb	r3, [r3, #3]
 8007d36:	79fa      	ldrb	r2, [r7, #7]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d305      	bcc.n	8007d48 <font_charWidthOptim+0x24>
 8007d3c:	4b7b      	ldr	r3, [pc, #492]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	79fa      	ldrb	r2, [r7, #7]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d90a      	bls.n	8007d5e <font_charWidthOptim+0x3a>
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d105      	bne.n	8007d5a <font_charWidthOptim+0x36>
 8007d4e:	4b77      	ldr	r3, [pc, #476]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	e0e2      	b.n	8007f20 <font_charWidthOptim+0x1fc>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e0e0      	b.n	8007f20 <font_charWidthOptim+0x1fc>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 8007d5e:	4b73      	ldr	r3, [pc, #460]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	4971      	ldr	r1, [pc, #452]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d68:	6809      	ldr	r1, [r1, #0]
 8007d6a:	78c9      	ldrb	r1, [r1, #3]
 8007d6c:	1a5b      	subs	r3, r3, r1
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4413      	add	r3, r2
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	867b      	strh	r3, [r7, #50]	; 0x32
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 8007d76:	4b6d      	ldr	r3, [pc, #436]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	496b      	ldr	r1, [pc, #428]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d80:	6809      	ldr	r1, [r1, #0]
 8007d82:	78c9      	ldrb	r1, [r1, #3]
 8007d84:	1a5b      	subs	r3, r3, r1
 8007d86:	3301      	adds	r3, #1
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4413      	add	r3, r2
 8007d8c:	881a      	ldrh	r2, [r3, #0]
 8007d8e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	863b      	strh	r3, [r7, #48]	; 0x30
  if(!recNum) return rFont->wd/2;
 8007d94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <font_charWidthOptim+0x82>
 8007d9a:	4b64      	ldr	r3, [pc, #400]	; (8007f2c <font_charWidthOptim+0x208>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	085b      	lsrs	r3, r3, #1
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	e0bc      	b.n	8007f20 <font_charWidthOptim+0x1fc>
  if(_xmin) *_xmin=0;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <font_charWidthOptim+0x8e>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
  int chWd = rFont->wd;
 8007db2:	4b5e      	ldr	r3, [pc, #376]	; (8007f2c <font_charWidthOptim+0x208>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	785b      	ldrb	r3, [r3, #1]
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
  switch(rFont->type & 7) {
 8007dba:	4b5c      	ldr	r3, [pc, #368]	; (8007f2c <font_charWidthOptim+0x208>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	2b06      	cmp	r3, #6
 8007dc6:	f200 80a9 	bhi.w	8007f1c <font_charWidthOptim+0x1f8>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <font_charWidthOptim+0xac>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007ded 	.word	0x08007ded
 8007dd4:	08007e77 	.word	0x08007e77
 8007dd8:	08007e9d 	.word	0x08007e9d
 8007ddc:	08007e1d 	.word	0x08007e1d
 8007de0:	08007ecf 	.word	0x08007ecf
 8007de4:	08007ef1 	.word	0x08007ef1
 8007de8:	08007e4f 	.word	0x08007e4f
#if ENABLE_RRE_16B==1
    case RRE_16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8007dec:	4b4f      	ldr	r3, [pc, #316]	; (8007f2c <font_charWidthOptim+0x208>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	60fb      	str	r3, [r7, #12]
      unsigned short v = (rects[recNum-1+recIdx]);
 8007df4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007dfa:	4413      	add	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	817b      	strh	r3, [r7, #10]
      chWd = (v & 0x000f)+1+((v & 0x0f00)>>8);
 8007e06:	897b      	ldrh	r3, [r7, #10]
 8007e08:	f003 030f 	and.w	r3, r3, #15
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	897b      	ldrh	r3, [r7, #10]
 8007e10:	121b      	asrs	r3, r3, #8
 8007e12:	f003 030f 	and.w	r3, r3, #15
 8007e16:	4413      	add	r3, r2
 8007e18:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8007e1a:	e080      	b.n	8007f1e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8007e1c:	4b43      	ldr	r3, [pc, #268]	; (8007f2c <font_charWidthOptim+0x208>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6899      	ldr	r1, [r3, #8]
 8007e22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007e24:	1e5a      	subs	r2, r3, #1
 8007e26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007e28:	441a      	add	r2, r3
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	4413      	add	r3, r2
 8007e30:	440b      	add	r3, r1
 8007e32:	623b      	str	r3, [r7, #32]
      chWd = ((rects[0]) & 0x3f)+((rects[2]) & 0x3f)+1;
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	3302      	adds	r3, #2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e46:	4413      	add	r3, r2
 8007e48:	3301      	adds	r3, #1
 8007e4a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8007e4c:	e067      	b.n	8007f1e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*4;
 8007e4e:	4b37      	ldr	r3, [pc, #220]	; (8007f2c <font_charWidthOptim+0x208>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007e56:	1e51      	subs	r1, r2, #1
 8007e58:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007e5a:	440a      	add	r2, r1
 8007e5c:	0092      	lsls	r2, r2, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      chWd = (rects[0])+(rects[2])+1;
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3301      	adds	r3, #1
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8007e74:	e053      	b.n	8007f1e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8007e76:	4b2d      	ldr	r3, [pc, #180]	; (8007f2c <font_charWidthOptim+0x208>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	617b      	str	r3, [r7, #20]
      unsigned short v = (rects[recNum-1+recIdx]);
 8007e7e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007e80:	1e5a      	subs	r2, r3, #1
 8007e82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007e84:	4413      	add	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	827b      	strh	r3, [r7, #18]
      chWd = (v & 0x3f)+1;
 8007e90:	8a7b      	ldrh	r3, [r7, #18]
 8007e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e96:	3301      	adds	r3, #1
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8007e9a:	e040      	b.n	8007f1e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 8007e9c:	4b23      	ldr	r3, [pc, #140]	; (8007f2c <font_charWidthOptim+0x208>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	61fb      	str	r3, [r7, #28]
      unsigned short v = (rects[recNum-1+recIdx]);
 8007ea4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ea6:	1e5a      	subs	r2, r3, #1
 8007ea8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007eaa:	4413      	add	r3, r2
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	837b      	strh	r3, [r7, #26]
      chWd = (v & 0x1f)+((v>>11) & 0x1f)+1;
 8007eb6:	8b7b      	ldrh	r3, [r7, #26]
 8007eb8:	f003 021f 	and.w	r2, r3, #31
 8007ebc:	8b7b      	ldrh	r3, [r7, #26]
 8007ebe:	0adb      	lsrs	r3, r3, #11
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f003 031f 	and.w	r3, r3, #31
 8007ec6:	4413      	add	r3, r2
 8007ec8:	3301      	adds	r3, #1
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8007ecc:	e027      	b.n	8007f1e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8007ece:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <font_charWidthOptim+0x208>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6899      	ldr	r1, [r3, #8]
 8007ed4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ed6:	1e5a      	subs	r2, r3, #1
 8007ed8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007eda:	441a      	add	r2, r3
 8007edc:	4613      	mov	r3, r2
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
      chWd = (rects[0])+1;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8007eee:	e016      	b.n	8007f1e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <font_charWidthOptim+0x208>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6899      	ldr	r1, [r3, #8]
 8007ef6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007efc:	441a      	add	r2, r3
 8007efe:	4613      	mov	r3, r2
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	4413      	add	r3, r2
 8007f04:	440b      	add	r3, r1
 8007f06:	62bb      	str	r3, [r7, #40]	; 0x28
      chWd = (rects[0])+(rects[2])+1;
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	3302      	adds	r3, #2
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	4413      	add	r3, r2
 8007f16:	3301      	adds	r3, #1
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 8007f1a:	e000      	b.n	8007f1e <font_charWidthOptim+0x1fa>
#endif
    default: break;
 8007f1c:	bf00      	nop
  }
  return chWd;
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	373c      	adds	r7, #60	; 0x3c
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	200053b0 	.word	0x200053b0

08007f30 <font_charWidth>:

// ----------------------------------------------------------------
int font_charWidth(unsigned char c)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	71fb      	strb	r3, [r7, #7]
  c = convertPolish(c);
#endif
#if ENABLE_NOSORT==1
  int wd = (rFont->type & RRE_NO_SORT) ? charWidthNoSort(c,_xmin) : charWidthOptim(c,_xmin);
#else
  int wd = font_charWidthOptim(c, 0);
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fef0 	bl	8007d24 <font_charWidthOptim>
 8007f44:	60f8      	str	r0, [r7, #12]
#endif
  int wdL = 0, wdR = spacing; // default spacing before and behind char
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	4b2a      	ldr	r3, [pc, #168]	; (8007ff4 <font_charWidth+0xc4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	613b      	str	r3, [r7, #16]
  if((*isNumberFun)(c) && minDigitWd>0) {
 8007f50:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <font_charWidth+0xc8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	79fa      	ldrb	r2, [r7, #7]
 8007f56:	4610      	mov	r0, r2
 8007f58:	4798      	blx	r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01e      	beq.n	8007f9e <font_charWidth+0x6e>
 8007f60:	4b26      	ldr	r3, [pc, #152]	; (8007ffc <font_charWidth+0xcc>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01a      	beq.n	8007f9e <font_charWidth+0x6e>
    if(minDigitWd>wd) {
 8007f68:	4b24      	ldr	r3, [pc, #144]	; (8007ffc <font_charWidth+0xcc>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	da2e      	bge.n	8007fd2 <font_charWidth+0xa2>
      wdL = (minDigitWd-wd)/2;
 8007f74:	4b21      	ldr	r3, [pc, #132]	; (8007ffc <font_charWidth+0xcc>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da00      	bge.n	8007f84 <font_charWidth+0x54>
 8007f82:	3301      	adds	r3, #1
 8007f84:	105b      	asrs	r3, r3, #1
 8007f86:	617b      	str	r3, [r7, #20]
      wdR += (minDigitWd-wd-wdL);
 8007f88:	4b1c      	ldr	r3, [pc, #112]	; (8007ffc <font_charWidth+0xcc>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4413      	add	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]
    if(minDigitWd>wd) {
 8007f9c:	e019      	b.n	8007fd2 <font_charWidth+0xa2>
    }
  } else if(minCharWd>wd) {
 8007f9e:	4b18      	ldr	r3, [pc, #96]	; (8008000 <font_charWidth+0xd0>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	da13      	bge.n	8007fd2 <font_charWidth+0xa2>
    wdL = (minCharWd-wd)/2;
 8007faa:	4b15      	ldr	r3, [pc, #84]	; (8008000 <font_charWidth+0xd0>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da00      	bge.n	8007fba <font_charWidth+0x8a>
 8007fb8:	3301      	adds	r3, #1
 8007fba:	105b      	asrs	r3, r3, #1
 8007fbc:	617b      	str	r3, [r7, #20]
    wdR += (minCharWd-wd-wdL);
 8007fbe:	4b10      	ldr	r3, [pc, #64]	; (8008000 <font_charWidth+0xd0>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4413      	add	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]
  }
  return (wd+wdL+wdR+bold)*sx;
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	441a      	add	r2, r3
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	441a      	add	r2, r3
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <font_charWidth+0xd4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	4a09      	ldr	r2, [pc, #36]	; (8008008 <font_charWidth+0xd8>)
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000018 	.word	0x20000018
 8007ff8:	200053a8 	.word	0x200053a8
 8007ffc:	200053d9 	.word	0x200053d9
 8008000:	200053d8 	.word	0x200053d8
 8008004:	200053d0 	.word	0x200053d0
 8008008:	2000001c 	.word	0x2000001c

0800800c <font_drawChar>:

// ----------------------------------------------------------------
int font_drawChar(int x, int y, unsigned char c)
{
 800800c:	b5b0      	push	{r4, r5, r7, lr}
 800800e:	b0ac      	sub	sp, #176	; 0xb0
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	4613      	mov	r3, r2
 8008018:	71fb      	strb	r3, [r7, #7]
#if CONVERT_PL_CHARS==1
  c = convertPolish(c);
#endif
  if(x>=scrWd || y>=scrHt || x+rFont->wd*sx-1<0 || y+rFont->ht*sy-1<0) return 0;
 800801a:	4bac      	ldr	r3, [pc, #688]	; (80082cc <font_drawChar+0x2c0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	429a      	cmp	r2, r3
 8008022:	da1e      	bge.n	8008062 <font_drawChar+0x56>
 8008024:	4baa      	ldr	r3, [pc, #680]	; (80082d0 <font_drawChar+0x2c4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	429a      	cmp	r2, r3
 800802c:	da19      	bge.n	8008062 <font_drawChar+0x56>
 800802e:	4ba9      	ldr	r3, [pc, #676]	; (80082d4 <font_drawChar+0x2c8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	461a      	mov	r2, r3
 8008036:	4ba8      	ldr	r3, [pc, #672]	; (80082d8 <font_drawChar+0x2cc>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	fb03 f202 	mul.w	r2, r3, r2
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4413      	add	r3, r2
 8008042:	3b01      	subs	r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	db0c      	blt.n	8008062 <font_drawChar+0x56>
 8008048:	4ba2      	ldr	r3, [pc, #648]	; (80082d4 <font_drawChar+0x2c8>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	789b      	ldrb	r3, [r3, #2]
 800804e:	461a      	mov	r2, r3
 8008050:	4ba2      	ldr	r3, [pc, #648]	; (80082dc <font_drawChar+0x2d0>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	fb03 f202 	mul.w	r2, r3, r2
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	4413      	add	r3, r2
 800805c:	3b01      	subs	r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	da02      	bge.n	8008068 <font_drawChar+0x5c>
 8008062:	2300      	movs	r3, #0
 8008064:	f001 b828 	b.w	80090b8 <font_drawChar+0x10ac>
  if(c<rFont->firstCh || c>rFont->lastCh) return font_charWidth(c);
 8008068:	4b9a      	ldr	r3, [pc, #616]	; (80082d4 <font_drawChar+0x2c8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	78db      	ldrb	r3, [r3, #3]
 800806e:	79fa      	ldrb	r2, [r7, #7]
 8008070:	429a      	cmp	r2, r3
 8008072:	d305      	bcc.n	8008080 <font_drawChar+0x74>
 8008074:	4b97      	ldr	r3, [pc, #604]	; (80082d4 <font_drawChar+0x2c8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	791b      	ldrb	r3, [r3, #4]
 800807a:	79fa      	ldrb	r2, [r7, #7]
 800807c:	429a      	cmp	r2, r3
 800807e:	d906      	bls.n	800808e <font_drawChar+0x82>
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff ff54 	bl	8007f30 <font_charWidth>
 8008088:	4603      	mov	r3, r0
 800808a:	f001 b815 	b.w	80090b8 <font_drawChar+0x10ac>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 800808e:	4b91      	ldr	r3, [pc, #580]	; (80082d4 <font_drawChar+0x2c8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	498f      	ldr	r1, [pc, #572]	; (80082d4 <font_drawChar+0x2c8>)
 8008098:	6809      	ldr	r1, [r1, #0]
 800809a:	78c9      	ldrb	r1, [r1, #3]
 800809c:	1a5b      	subs	r3, r3, r1
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	4413      	add	r3, r2
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 80080a8:	4b8a      	ldr	r3, [pc, #552]	; (80082d4 <font_drawChar+0x2c8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	4988      	ldr	r1, [pc, #544]	; (80082d4 <font_drawChar+0x2c8>)
 80080b2:	6809      	ldr	r1, [r1, #0]
 80080b4:	78c9      	ldrb	r1, [r1, #3]
 80080b6:	1a5b      	subs	r3, r3, r1
 80080b8:	3301      	adds	r3, #1
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	4413      	add	r3, r2
 80080be:	881a      	ldrh	r2, [r3, #0]
 80080c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if ENABLE_NOSORT==1
  int xmin, chWd = (rFont->type & RRE_NO_SORT) ? font_charWidthNoSort(c,&xmin) : font_charWidthOptim(c,&xmin);
#else
  int xmin, chWd = font_charWidthOptim(c,&xmin);
 80080ca:	f107 0210 	add.w	r2, r7, #16
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fe26 	bl	8007d24 <font_charWidthOptim>
 80080d8:	65b8      	str	r0, [r7, #88]	; 0x58
#endif
  int wd=chWd, wdL = 0, wdR = spacing;
 80080da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080e0:	2300      	movs	r3, #0
 80080e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080e6:	4b7e      	ldr	r3, [pc, #504]	; (80082e0 <font_drawChar+0x2d4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if((*isNumberFun)(c) && minDigitWd>0) {
 80080ee:	4b7d      	ldr	r3, [pc, #500]	; (80082e4 <font_drawChar+0x2d8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	79fa      	ldrb	r2, [r7, #7]
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d025      	beq.n	800814a <font_drawChar+0x13e>
 80080fe:	4b7a      	ldr	r3, [pc, #488]	; (80082e8 <font_drawChar+0x2dc>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d021      	beq.n	800814a <font_drawChar+0x13e>
    if(minDigitWd>wd) {
 8008106:	4b78      	ldr	r3, [pc, #480]	; (80082e8 <font_drawChar+0x2dc>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008110:	4293      	cmp	r3, r2
 8008112:	da3b      	bge.n	800818c <font_drawChar+0x180>
      wdL = (minDigitWd-wd)/2;
 8008114:	4b74      	ldr	r3, [pc, #464]	; (80082e8 <font_drawChar+0x2dc>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	da00      	bge.n	8008126 <font_drawChar+0x11a>
 8008124:	3301      	adds	r3, #1
 8008126:	105b      	asrs	r3, r3, #1
 8008128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      wdR += (minDigitWd-wd-wdL);
 800812c:	4b6e      	ldr	r3, [pc, #440]	; (80082e8 <font_drawChar+0x2dc>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008142:	4413      	add	r3, r2
 8008144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(minDigitWd>wd) {
 8008148:	e020      	b.n	800818c <font_drawChar+0x180>
    }
  } else if(minCharWd>wd) {
 800814a:	4b68      	ldr	r3, [pc, #416]	; (80082ec <font_drawChar+0x2e0>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008154:	4293      	cmp	r3, r2
 8008156:	da19      	bge.n	800818c <font_drawChar+0x180>
    wdL = (minCharWd-wd)/2;
 8008158:	4b64      	ldr	r3, [pc, #400]	; (80082ec <font_drawChar+0x2e0>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	da00      	bge.n	800816a <font_drawChar+0x15e>
 8008168:	3301      	adds	r3, #1
 800816a:	105b      	asrs	r3, r3, #1
 800816c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    wdR += (minCharWd-wd-wdL);
 8008170:	4b5e      	ldr	r3, [pc, #376]	; (80082ec <font_drawChar+0x2e0>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800817a:	1ad2      	subs	r2, r2, r3
 800817c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008186:	4413      	add	r3, r2
 8008188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  if(x+wd+wdL+wdR>scrWd) wdR = max(scrWd-x-wdL-wd, 0);
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008192:	441a      	add	r2, r3
 8008194:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008198:	441a      	add	r2, r3
 800819a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800819e:	441a      	add	r2, r3
 80081a0:	4b4a      	ldr	r3, [pc, #296]	; (80082cc <font_drawChar+0x2c0>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	dd0d      	ble.n	80081c4 <font_drawChar+0x1b8>
 80081a8:	4b48      	ldr	r3, [pc, #288]	; (80082cc <font_drawChar+0x2c0>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if(x+wd+wdL+wdR>scrWd) wd  = max(scrWd-x-wdL, 0);
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081ca:	441a      	add	r2, r3
 80081cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081d0:	441a      	add	r2, r3
 80081d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081d6:	441a      	add	r2, r3
 80081d8:	4b3c      	ldr	r3, [pc, #240]	; (80082cc <font_drawChar+0x2c0>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	dd0a      	ble.n	80081f6 <font_drawChar+0x1ea>
 80081e0:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <font_drawChar+0x2c0>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	1ad2      	subs	r2, r2, r3
 80081e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80081f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if(x+wd+wdL+wdR>scrWd) wdL = max(scrWd-x, 0);
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081fc:	441a      	add	r2, r3
 80081fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008202:	441a      	add	r2, r3
 8008204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008208:	441a      	add	r2, r3
 800820a:	4b30      	ldr	r3, [pc, #192]	; (80082cc <font_drawChar+0x2c0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	dd07      	ble.n	8008222 <font_drawChar+0x216>
 8008212:	4b2e      	ldr	r3, [pc, #184]	; (80082cc <font_drawChar+0x2c0>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	1ad3      	subs	r3, r2, r3
 800821a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800821e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  wd+=wdR+wdL;
 8008222:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800822a:	4413      	add	r3, r2
 800822c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008230:	4413      	add	r3, r2
 8008232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int type=rFont->type & 7;
 8008236:	4b27      	ldr	r3, [pc, #156]	; (80082d4 <font_drawChar+0x2c8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	657b      	str	r3, [r7, #84]	; 0x54
  if(bg!=fg && (type==RRE_16B ||type==RRE_24B ||type==RRE_32B || !recNum)) (*fillRectFun)(x, y, (wd+bold)*sx, rFont->ht*sy, bg);
 8008242:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <font_drawChar+0x2e4>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	4b2b      	ldr	r3, [pc, #172]	; (80082f4 <font_drawChar+0x2e8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d026      	beq.n	800829c <font_drawChar+0x290>
 800824e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008250:	2b00      	cmp	r3, #0
 8008252:	d009      	beq.n	8008268 <font_drawChar+0x25c>
 8008254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008256:	2b03      	cmp	r3, #3
 8008258:	d006      	beq.n	8008268 <font_drawChar+0x25c>
 800825a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800825c:	2b06      	cmp	r3, #6
 800825e:	d003      	beq.n	8008268 <font_drawChar+0x25c>
 8008260:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d119      	bne.n	800829c <font_drawChar+0x290>
 8008268:	4b23      	ldr	r3, [pc, #140]	; (80082f8 <font_drawChar+0x2ec>)
 800826a:	681c      	ldr	r4, [r3, #0]
 800826c:	4b23      	ldr	r3, [pc, #140]	; (80082fc <font_drawChar+0x2f0>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008274:	4413      	add	r3, r2
 8008276:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <font_drawChar+0x2cc>)
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	fb02 f203 	mul.w	r2, r2, r3
 800827e:	4b15      	ldr	r3, [pc, #84]	; (80082d4 <font_drawChar+0x2c8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	789b      	ldrb	r3, [r3, #2]
 8008284:	4619      	mov	r1, r3
 8008286:	4b15      	ldr	r3, [pc, #84]	; (80082dc <font_drawChar+0x2d0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	fb03 f101 	mul.w	r1, r3, r1
 800828e:	4b18      	ldr	r3, [pc, #96]	; (80082f0 <font_drawChar+0x2e4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	460b      	mov	r3, r1
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	47a0      	blx	r4
  x+=wdL*sx;
 800829c:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <font_drawChar+0x2cc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  if(!recNum) return (wd+bold)*sx;
 80082ae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d124      	bne.n	8008300 <font_drawChar+0x2f4>
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <font_drawChar+0x2f0>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082be:	4413      	add	r3, r2
 80082c0:	4a05      	ldr	r2, [pc, #20]	; (80082d8 <font_drawChar+0x2cc>)
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	fb02 f303 	mul.w	r3, r2, r3
 80082c8:	f000 bef6 	b.w	80090b8 <font_drawChar+0x10ac>
 80082cc:	200053c4 	.word	0x200053c4
 80082d0:	200053c8 	.word	0x200053c8
 80082d4:	200053b0 	.word	0x200053b0
 80082d8:	2000001c 	.word	0x2000001c
 80082dc:	20000020 	.word	0x20000020
 80082e0:	20000018 	.word	0x20000018
 80082e4:	200053a8 	.word	0x200053a8
 80082e8:	200053d9 	.word	0x200053d9
 80082ec:	200053d8 	.word	0x200053d8
 80082f0:	20000028 	.word	0x20000028
 80082f4:	20000024 	.word	0x20000024
 80082f8:	200053ac 	.word	0x200053ac
 80082fc:	200053d0 	.word	0x200053d0
  switch(type) {
 8008300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008302:	2b06      	cmp	r3, #6
 8008304:	f200 86c8 	bhi.w	8009098 <font_drawChar+0x108c>
 8008308:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <font_drawChar+0x304>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	0800832d 	.word	0x0800832d
 8008314:	080085b1 	.word	0x080085b1
 8008318:	080088e9 	.word	0x080088e9
 800831c:	080083ed 	.word	0x080083ed
 8008320:	08008ccd 	.word	0x08008ccd
 8008324:	08008fc3 	.word	0x08008fc3
 8008328:	080084d1 	.word	0x080084d1
#if ENABLE_RRE_16B==1
    case RRE_16B:
      for(int i=0; i<recNum; i++) {
 800832c:	2300      	movs	r3, #0
 800832e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008332:	e053      	b.n	80083dc <font_drawChar+0x3d0>
        unsigned short *rects = (unsigned short*)rFont->rects;
 8008334:	4b94      	ldr	r3, [pc, #592]	; (8008588 <font_drawChar+0x57c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	61bb      	str	r3, [r7, #24]
        unsigned short v = (rects[i+recIdx]);
 800833c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008344:	4413      	add	r3, r2
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	82fb      	strh	r3, [r7, #22]
        xf = (v & 0x000f)-xmin;
 8008350:	8afb      	ldrh	r3, [r7, #22]
 8008352:	f003 020f 	and.w	r2, r3, #15
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	4a8c      	ldr	r2, [pc, #560]	; (800858c <font_drawChar+0x580>)
 800835c:	6013      	str	r3, [r2, #0]
        yf = (v & 0x00f0)>>4;
 800835e:	8afb      	ldrh	r3, [r7, #22]
 8008360:	111b      	asrs	r3, r3, #4
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	4a8a      	ldr	r2, [pc, #552]	; (8008590 <font_drawChar+0x584>)
 8008368:	6013      	str	r3, [r2, #0]
        wf = ((v & 0x0f00)>>8)+1;
 800836a:	8afb      	ldrh	r3, [r7, #22]
 800836c:	121b      	asrs	r3, r3, #8
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	3301      	adds	r3, #1
 8008374:	4a87      	ldr	r2, [pc, #540]	; (8008594 <font_drawChar+0x588>)
 8008376:	6013      	str	r3, [r2, #0]
        hf = ((v & 0xf000)>>12)+1;
 8008378:	8afb      	ldrh	r3, [r7, #22]
 800837a:	0b1b      	lsrs	r3, r3, #12
 800837c:	b29b      	uxth	r3, r3
 800837e:	3301      	adds	r3, #1
 8008380:	4a85      	ldr	r2, [pc, #532]	; (8008598 <font_drawChar+0x58c>)
 8008382:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008384:	4b85      	ldr	r3, [pc, #532]	; (800859c <font_drawChar+0x590>)
 8008386:	681c      	ldr	r4, [r3, #0]
 8008388:	4b80      	ldr	r3, [pc, #512]	; (800858c <font_drawChar+0x580>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a84      	ldr	r2, [pc, #528]	; (80085a0 <font_drawChar+0x594>)
 800838e:	6812      	ldr	r2, [r2, #0]
 8008390:	fb02 f203 	mul.w	r2, r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	18d0      	adds	r0, r2, r3
 8008398:	4b7d      	ldr	r3, [pc, #500]	; (8008590 <font_drawChar+0x584>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a81      	ldr	r2, [pc, #516]	; (80085a4 <font_drawChar+0x598>)
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	fb02 f203 	mul.w	r2, r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	18d1      	adds	r1, r2, r3
 80083a8:	4b7a      	ldr	r3, [pc, #488]	; (8008594 <font_drawChar+0x588>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a7c      	ldr	r2, [pc, #496]	; (80085a0 <font_drawChar+0x594>)
 80083ae:	6812      	ldr	r2, [r2, #0]
 80083b0:	fb02 f203 	mul.w	r2, r2, r3
 80083b4:	4b7c      	ldr	r3, [pc, #496]	; (80085a8 <font_drawChar+0x59c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	18d5      	adds	r5, r2, r3
 80083ba:	4b77      	ldr	r3, [pc, #476]	; (8008598 <font_drawChar+0x58c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a79      	ldr	r2, [pc, #484]	; (80085a4 <font_drawChar+0x598>)
 80083c0:	6812      	ldr	r2, [r2, #0]
 80083c2:	fb02 f203 	mul.w	r2, r2, r3
 80083c6:	4b79      	ldr	r3, [pc, #484]	; (80085ac <font_drawChar+0x5a0>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	4613      	mov	r3, r2
 80083ce:	462a      	mov	r2, r5
 80083d0:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80083d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083d6:	3301      	adds	r3, #1
 80083d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80083e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80083e4:	429a      	cmp	r2, r3
 80083e6:	dba5      	blt.n	8008334 <font_drawChar+0x328>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 80083e8:	f000 be5d 	b.w	80090a6 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B:
      for(int i=0; i<recNum; i++) {
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083f2:	e065      	b.n	80084c0 <font_drawChar+0x4b4>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 80083f4:	4b64      	ldr	r3, [pc, #400]	; (8008588 <font_drawChar+0x57c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6899      	ldr	r1, [r3, #8]
 80083fa:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80083fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008402:	441a      	add	r2, r3
 8008404:	4613      	mov	r3, r2
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	4413      	add	r3, r2
 800840a:	440b      	add	r3, r1
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
        xf = ((rects[0]) & 0x3f)-xmin;
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	4a5c      	ldr	r2, [pc, #368]	; (800858c <font_drawChar+0x580>)
 800841c:	6013      	str	r3, [r2, #0]
        yf = ((rects[1]) & 0x3f);
 800841e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008420:	3301      	adds	r3, #1
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008428:	4a59      	ldr	r2, [pc, #356]	; (8008590 <font_drawChar+0x584>)
 800842a:	6013      	str	r3, [r2, #0]
        wf = ((rects[2]) & 0x3f)+1;
 800842c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842e:	3302      	adds	r3, #2
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008436:	3301      	adds	r3, #1
 8008438:	4a56      	ldr	r2, [pc, #344]	; (8008594 <font_drawChar+0x588>)
 800843a:	6013      	str	r3, [r2, #0]
        hf = 1+((((rects[0]) & 0xc0)>>6) | (((rects[1]) & 0xc0)>>4) | (((rects[2]) & 0xc0)>>2));
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	099b      	lsrs	r3, r3, #6
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008448:	3301      	adds	r3, #1
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	111b      	asrs	r3, r3, #4
 800844e:	f003 030c 	and.w	r3, r3, #12
 8008452:	431a      	orrs	r2, r3
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	3302      	adds	r3, #2
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	109b      	asrs	r3, r3, #2
 800845c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008460:	4313      	orrs	r3, r2
 8008462:	3301      	adds	r3, #1
 8008464:	4a4c      	ldr	r2, [pc, #304]	; (8008598 <font_drawChar+0x58c>)
 8008466:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008468:	4b4c      	ldr	r3, [pc, #304]	; (800859c <font_drawChar+0x590>)
 800846a:	681c      	ldr	r4, [r3, #0]
 800846c:	4b47      	ldr	r3, [pc, #284]	; (800858c <font_drawChar+0x580>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a4b      	ldr	r2, [pc, #300]	; (80085a0 <font_drawChar+0x594>)
 8008472:	6812      	ldr	r2, [r2, #0]
 8008474:	fb02 f203 	mul.w	r2, r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	18d0      	adds	r0, r2, r3
 800847c:	4b44      	ldr	r3, [pc, #272]	; (8008590 <font_drawChar+0x584>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a48      	ldr	r2, [pc, #288]	; (80085a4 <font_drawChar+0x598>)
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	fb02 f203 	mul.w	r2, r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	18d1      	adds	r1, r2, r3
 800848c:	4b41      	ldr	r3, [pc, #260]	; (8008594 <font_drawChar+0x588>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a43      	ldr	r2, [pc, #268]	; (80085a0 <font_drawChar+0x594>)
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	fb02 f203 	mul.w	r2, r2, r3
 8008498:	4b43      	ldr	r3, [pc, #268]	; (80085a8 <font_drawChar+0x59c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	18d5      	adds	r5, r2, r3
 800849e:	4b3e      	ldr	r3, [pc, #248]	; (8008598 <font_drawChar+0x58c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a40      	ldr	r2, [pc, #256]	; (80085a4 <font_drawChar+0x598>)
 80084a4:	6812      	ldr	r2, [r2, #0]
 80084a6:	fb02 f203 	mul.w	r2, r2, r3
 80084aa:	4b40      	ldr	r3, [pc, #256]	; (80085ac <font_drawChar+0x5a0>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	4613      	mov	r3, r2
 80084b2:	462a      	mov	r2, r5
 80084b4:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80084b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084ba:	3301      	adds	r3, #1
 80084bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80084c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084c8:	429a      	cmp	r2, r3
 80084ca:	db93      	blt.n	80083f4 <font_drawChar+0x3e8>
      }
      break;
 80084cc:	f000 bdeb 	b.w	80090a6 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B:
      for(int i=0; i<recNum; i++) {
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084d6:	e04f      	b.n	8008578 <font_drawChar+0x56c>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*4;
 80084d8:	4b2b      	ldr	r3, [pc, #172]	; (8008588 <font_drawChar+0x57c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 80084e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80084e6:	440a      	add	r2, r1
 80084e8:	0092      	lsls	r2, r2, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
        xf = (rects[0])-xmin;
 80084ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	4a24      	ldr	r2, [pc, #144]	; (800858c <font_drawChar+0x580>)
 80084fa:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 80084fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fe:	3301      	adds	r3, #1
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	4b22      	ldr	r3, [pc, #136]	; (8008590 <font_drawChar+0x584>)
 8008506:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 8008508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850a:	3302      	adds	r3, #2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	4a20      	ldr	r2, [pc, #128]	; (8008594 <font_drawChar+0x588>)
 8008512:	6013      	str	r3, [r2, #0]
        hf = (rects[3])+1;
 8008514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008516:	3303      	adds	r3, #3
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	4a1e      	ldr	r2, [pc, #120]	; (8008598 <font_drawChar+0x58c>)
 800851e:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008520:	4b1e      	ldr	r3, [pc, #120]	; (800859c <font_drawChar+0x590>)
 8008522:	681c      	ldr	r4, [r3, #0]
 8008524:	4b19      	ldr	r3, [pc, #100]	; (800858c <font_drawChar+0x580>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1d      	ldr	r2, [pc, #116]	; (80085a0 <font_drawChar+0x594>)
 800852a:	6812      	ldr	r2, [r2, #0]
 800852c:	fb02 f203 	mul.w	r2, r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	18d0      	adds	r0, r2, r3
 8008534:	4b16      	ldr	r3, [pc, #88]	; (8008590 <font_drawChar+0x584>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a1a      	ldr	r2, [pc, #104]	; (80085a4 <font_drawChar+0x598>)
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	fb02 f203 	mul.w	r2, r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	18d1      	adds	r1, r2, r3
 8008544:	4b13      	ldr	r3, [pc, #76]	; (8008594 <font_drawChar+0x588>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a15      	ldr	r2, [pc, #84]	; (80085a0 <font_drawChar+0x594>)
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	fb02 f203 	mul.w	r2, r2, r3
 8008550:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <font_drawChar+0x59c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	18d5      	adds	r5, r2, r3
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <font_drawChar+0x58c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a12      	ldr	r2, [pc, #72]	; (80085a4 <font_drawChar+0x598>)
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	fb02 f203 	mul.w	r2, r2, r3
 8008562:	4b12      	ldr	r3, [pc, #72]	; (80085ac <font_drawChar+0x5a0>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	462a      	mov	r2, r5
 800856c:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800856e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008572:	3301      	adds	r3, #1
 8008574:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008578:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800857c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008580:	429a      	cmp	r2, r3
 8008582:	dba9      	blt.n	80084d8 <font_drawChar+0x4cc>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8008584:	f000 bd8f 	b.w	80090a6 <font_drawChar+0x109a>
 8008588:	200053b0 	.word	0x200053b0
 800858c:	200053b4 	.word	0x200053b4
 8008590:	200053b8 	.word	0x200053b8
 8008594:	200053bc 	.word	0x200053bc
 8008598:	200053c0 	.word	0x200053c0
 800859c:	200053ac 	.word	0x200053ac
 80085a0:	2000001c 	.word	0x2000001c
 80085a4:	20000020 	.word	0x20000020
 80085a8:	200053d0 	.word	0x200053d0
 80085ac:	20000024 	.word	0x20000024
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B:
      if(bg!=fg) {
 80085b0:	4b96      	ldr	r3, [pc, #600]	; (800880c <font_drawChar+0x800>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	4b96      	ldr	r3, [pc, #600]	; (8008810 <font_drawChar+0x804>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	f000 8123 	beq.w	8008804 <font_drawChar+0x7f8>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 80085be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	dd1d      	ble.n	8008602 <font_drawChar+0x5f6>
 80085c6:	4b93      	ldr	r3, [pc, #588]	; (8008814 <font_drawChar+0x808>)
 80085c8:	681c      	ldr	r4, [r3, #0]
 80085ca:	4b93      	ldr	r3, [pc, #588]	; (8008818 <font_drawChar+0x80c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80085d2:	fb02 f303 	mul.w	r3, r2, r3
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	1ad0      	subs	r0, r2, r3
 80085da:	4b8f      	ldr	r3, [pc, #572]	; (8008818 <font_drawChar+0x80c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80085e2:	fb02 f203 	mul.w	r2, r2, r3
 80085e6:	4b8d      	ldr	r3, [pc, #564]	; (800881c <font_drawChar+0x810>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	789b      	ldrb	r3, [r3, #2]
 80085ec:	4619      	mov	r1, r3
 80085ee:	4b8c      	ldr	r3, [pc, #560]	; (8008820 <font_drawChar+0x814>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	fb03 f101 	mul.w	r1, r3, r1
 80085f6:	4b85      	ldr	r3, [pc, #532]	; (800880c <font_drawChar+0x800>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	460b      	mov	r3, r1
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects+recIdx;
 8008602:	4b86      	ldr	r3, [pc, #536]	; (800881c <font_drawChar+0x810>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	4413      	add	r3, r2
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
        int idx=0;
 8008612:	2300      	movs	r3, #0
 8008614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while(idx<recNum) {
 8008618:	e0c9      	b.n	80087ae <font_drawChar+0x7a2>
          unsigned short v = *(rects+idx);
 800861a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	4413      	add	r3, r2
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	847b      	strh	r3, [r7, #34]	; 0x22
          xf = (v & 0x3f)-xmin;
 8008628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800862a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	4a7c      	ldr	r2, [pc, #496]	; (8008824 <font_drawChar+0x818>)
 8008634:	6013      	str	r3, [r2, #0]
          int ybg=0,xfCur=xf;
 8008636:	2300      	movs	r3, #0
 8008638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800863c:	4b79      	ldr	r3, [pc, #484]	; (8008824 <font_drawChar+0x818>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	61fb      	str	r3, [r7, #28]
          while(xf==xfCur && idx<recNum) {
 8008642:	e079      	b.n	8008738 <font_drawChar+0x72c>
            v = *(rects+idx);
 8008644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	847b      	strh	r3, [r7, #34]	; 0x22
            yf = (v>>6) & 0x1f;
 8008652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008654:	099b      	lsrs	r3, r3, #6
 8008656:	b29b      	uxth	r3, r3
 8008658:	f003 031f 	and.w	r3, r3, #31
 800865c:	4a72      	ldr	r2, [pc, #456]	; (8008828 <font_drawChar+0x81c>)
 800865e:	6013      	str	r3, [r2, #0]
            hf = ((v>>11) & 0x1f)+1;
 8008660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008662:	0adb      	lsrs	r3, r3, #11
 8008664:	b29b      	uxth	r3, r3
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	3301      	adds	r3, #1
 800866c:	4a6f      	ldr	r2, [pc, #444]	; (800882c <font_drawChar+0x820>)
 800866e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8008670:	4b6d      	ldr	r3, [pc, #436]	; (8008828 <font_drawChar+0x81c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008678:	429a      	cmp	r2, r3
 800867a:	da21      	bge.n	80086c0 <font_drawChar+0x6b4>
 800867c:	4b65      	ldr	r3, [pc, #404]	; (8008814 <font_drawChar+0x808>)
 800867e:	681c      	ldr	r4, [r3, #0]
 8008680:	4b65      	ldr	r3, [pc, #404]	; (8008818 <font_drawChar+0x80c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	fb02 f203 	mul.w	r2, r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	18d0      	adds	r0, r2, r3
 800868e:	4b64      	ldr	r3, [pc, #400]	; (8008820 <font_drawChar+0x814>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008696:	fb02 f203 	mul.w	r2, r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	18d1      	adds	r1, r2, r3
 800869e:	4b5e      	ldr	r3, [pc, #376]	; (8008818 <font_drawChar+0x80c>)
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	4b61      	ldr	r3, [pc, #388]	; (8008828 <font_drawChar+0x81c>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	4a5c      	ldr	r2, [pc, #368]	; (8008820 <font_drawChar+0x814>)
 80086ae:	6812      	ldr	r2, [r2, #0]
 80086b0:	fb02 f203 	mul.w	r2, r2, r3
 80086b4:	4b55      	ldr	r3, [pc, #340]	; (800880c <font_drawChar+0x800>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	4613      	mov	r3, r2
 80086bc:	462a      	mov	r2, r5
 80086be:	47a0      	blx	r4
            ybg = yf+hf;
 80086c0:	4b59      	ldr	r3, [pc, #356]	; (8008828 <font_drawChar+0x81c>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	4b59      	ldr	r3, [pc, #356]	; (800882c <font_drawChar+0x820>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4413      	add	r3, r2
 80086ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 80086ce:	4b51      	ldr	r3, [pc, #324]	; (8008814 <font_drawChar+0x808>)
 80086d0:	681c      	ldr	r4, [r3, #0]
 80086d2:	4b51      	ldr	r3, [pc, #324]	; (8008818 <font_drawChar+0x80c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	fb02 f203 	mul.w	r2, r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	18d0      	adds	r0, r2, r3
 80086e0:	4b51      	ldr	r3, [pc, #324]	; (8008828 <font_drawChar+0x81c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a4e      	ldr	r2, [pc, #312]	; (8008820 <font_drawChar+0x814>)
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	fb02 f203 	mul.w	r2, r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	18d1      	adds	r1, r2, r3
 80086f0:	4b4f      	ldr	r3, [pc, #316]	; (8008830 <font_drawChar+0x824>)
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4b48      	ldr	r3, [pc, #288]	; (8008818 <font_drawChar+0x80c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	18d5      	adds	r5, r2, r3
 80086fa:	4b4c      	ldr	r3, [pc, #304]	; (800882c <font_drawChar+0x820>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a48      	ldr	r2, [pc, #288]	; (8008820 <font_drawChar+0x814>)
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	fb02 f203 	mul.w	r2, r2, r3
 8008706:	4b42      	ldr	r3, [pc, #264]	; (8008810 <font_drawChar+0x804>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	4613      	mov	r3, r2
 800870e:	462a      	mov	r2, r5
 8008710:	47a0      	blx	r4
            idx++;
 8008712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008716:	3301      	adds	r3, #1
 8008718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            v = *(rects+idx);
 800871c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	847b      	strh	r3, [r7, #34]	; 0x22
            xf = (v & 0x3f)-xmin;
 800872a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800872c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	4a3b      	ldr	r2, [pc, #236]	; (8008824 <font_drawChar+0x818>)
 8008736:	6013      	str	r3, [r2, #0]
          while(xf==xfCur && idx<recNum) {
 8008738:	4b3a      	ldr	r3, [pc, #232]	; (8008824 <font_drawChar+0x818>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	429a      	cmp	r2, r3
 8008740:	d106      	bne.n	8008750 <font_drawChar+0x744>
 8008742:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008746:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800874a:	429a      	cmp	r2, r3
 800874c:	f6ff af7a 	blt.w	8008644 <font_drawChar+0x638>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 8008750:	4b32      	ldr	r3, [pc, #200]	; (800881c <font_drawChar+0x810>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	789b      	ldrb	r3, [r3, #2]
 8008756:	461a      	mov	r2, r3
 8008758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800875c:	4293      	cmp	r3, r2
 800875e:	da26      	bge.n	80087ae <font_drawChar+0x7a2>
 8008760:	4b2c      	ldr	r3, [pc, #176]	; (8008814 <font_drawChar+0x808>)
 8008762:	681c      	ldr	r4, [r3, #0]
 8008764:	4b2c      	ldr	r3, [pc, #176]	; (8008818 <font_drawChar+0x80c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	fb02 f203 	mul.w	r2, r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	18d0      	adds	r0, r2, r3
 8008772:	4b2b      	ldr	r3, [pc, #172]	; (8008820 <font_drawChar+0x814>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800877a:	fb02 f203 	mul.w	r2, r2, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	18d1      	adds	r1, r2, r3
 8008782:	4b2b      	ldr	r3, [pc, #172]	; (8008830 <font_drawChar+0x824>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b24      	ldr	r3, [pc, #144]	; (8008818 <font_drawChar+0x80c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	18d5      	adds	r5, r2, r3
 800878c:	4b23      	ldr	r3, [pc, #140]	; (800881c <font_drawChar+0x810>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	789b      	ldrb	r3, [r3, #2]
 8008792:	461a      	mov	r2, r3
 8008794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	4a21      	ldr	r2, [pc, #132]	; (8008820 <font_drawChar+0x814>)
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	fb02 f203 	mul.w	r2, r2, r3
 80087a2:	4b1a      	ldr	r3, [pc, #104]	; (800880c <font_drawChar+0x800>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4613      	mov	r3, r2
 80087aa:	462a      	mov	r2, r5
 80087ac:	47a0      	blx	r4
        while(idx<recNum) {
 80087ae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80087b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80087b6:	429a      	cmp	r2, r3
 80087b8:	f6ff af2f 	blt.w	800861a <font_drawChar+0x60e>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 80087bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f340 846b 	ble.w	800909c <font_drawChar+0x1090>
 80087c6:	4b13      	ldr	r3, [pc, #76]	; (8008814 <font_drawChar+0x808>)
 80087c8:	681c      	ldr	r4, [r3, #0]
 80087ca:	4b13      	ldr	r3, [pc, #76]	; (8008818 <font_drawChar+0x80c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087d0:	fb02 f203 	mul.w	r2, r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	18d0      	adds	r0, r2, r3
 80087d8:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <font_drawChar+0x80c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80087e0:	fb02 f203 	mul.w	r2, r2, r3
 80087e4:	4b0d      	ldr	r3, [pc, #52]	; (800881c <font_drawChar+0x810>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	789b      	ldrb	r3, [r3, #2]
 80087ea:	4619      	mov	r1, r3
 80087ec:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <font_drawChar+0x814>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	fb03 f101 	mul.w	r1, r3, r1
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <font_drawChar+0x800>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	460b      	mov	r3, r1
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	47a0      	blx	r4
        yf = (v>>6) & 0x1f;
        hf = ((v>>11) & 0x1f)+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8008800:	f000 bc4c 	b.w	800909c <font_drawChar+0x1090>
      for(int i=0; i<recNum; i++) {
 8008804:	2300      	movs	r3, #0
 8008806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800880a:	e066      	b.n	80088da <font_drawChar+0x8ce>
 800880c:	20000028 	.word	0x20000028
 8008810:	20000024 	.word	0x20000024
 8008814:	200053ac 	.word	0x200053ac
 8008818:	2000001c 	.word	0x2000001c
 800881c:	200053b0 	.word	0x200053b0
 8008820:	20000020 	.word	0x20000020
 8008824:	200053b4 	.word	0x200053b4
 8008828:	200053b8 	.word	0x200053b8
 800882c:	200053c0 	.word	0x200053c0
 8008830:	200053d0 	.word	0x200053d0
        unsigned short *rects = (unsigned short*)rFont->rects;
 8008834:	4b64      	ldr	r3, [pc, #400]	; (80089c8 <font_drawChar+0x9bc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
        unsigned short v = (rects[i+recIdx]);
 800883c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008844:	4413      	add	r3, r2
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	857b      	strh	r3, [r7, #42]	; 0x2a
        xf = (v & 0x3f)-xmin;
 8008850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	4a5c      	ldr	r2, [pc, #368]	; (80089cc <font_drawChar+0x9c0>)
 800885c:	6013      	str	r3, [r2, #0]
        yf = (v>>6) & 0x1f;
 800885e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008860:	099b      	lsrs	r3, r3, #6
 8008862:	b29b      	uxth	r3, r3
 8008864:	f003 031f 	and.w	r3, r3, #31
 8008868:	4a59      	ldr	r2, [pc, #356]	; (80089d0 <font_drawChar+0x9c4>)
 800886a:	6013      	str	r3, [r2, #0]
        hf = ((v>>11) & 0x1f)+1;
 800886c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800886e:	0adb      	lsrs	r3, r3, #11
 8008870:	b29b      	uxth	r3, r3
 8008872:	f003 031f 	and.w	r3, r3, #31
 8008876:	3301      	adds	r3, #1
 8008878:	4a56      	ldr	r2, [pc, #344]	; (80089d4 <font_drawChar+0x9c8>)
 800887a:	6013      	str	r3, [r2, #0]
        wf = 1;
 800887c:	4b56      	ldr	r3, [pc, #344]	; (80089d8 <font_drawChar+0x9cc>)
 800887e:	2201      	movs	r2, #1
 8008880:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008882:	4b56      	ldr	r3, [pc, #344]	; (80089dc <font_drawChar+0x9d0>)
 8008884:	681c      	ldr	r4, [r3, #0]
 8008886:	4b51      	ldr	r3, [pc, #324]	; (80089cc <font_drawChar+0x9c0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a55      	ldr	r2, [pc, #340]	; (80089e0 <font_drawChar+0x9d4>)
 800888c:	6812      	ldr	r2, [r2, #0]
 800888e:	fb02 f203 	mul.w	r2, r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	18d0      	adds	r0, r2, r3
 8008896:	4b4e      	ldr	r3, [pc, #312]	; (80089d0 <font_drawChar+0x9c4>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a52      	ldr	r2, [pc, #328]	; (80089e4 <font_drawChar+0x9d8>)
 800889c:	6812      	ldr	r2, [r2, #0]
 800889e:	fb02 f203 	mul.w	r2, r2, r3
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	18d1      	adds	r1, r2, r3
 80088a6:	4b4c      	ldr	r3, [pc, #304]	; (80089d8 <font_drawChar+0x9cc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a4d      	ldr	r2, [pc, #308]	; (80089e0 <font_drawChar+0x9d4>)
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	fb02 f203 	mul.w	r2, r2, r3
 80088b2:	4b4d      	ldr	r3, [pc, #308]	; (80089e8 <font_drawChar+0x9dc>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	18d5      	adds	r5, r2, r3
 80088b8:	4b46      	ldr	r3, [pc, #280]	; (80089d4 <font_drawChar+0x9c8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a49      	ldr	r2, [pc, #292]	; (80089e4 <font_drawChar+0x9d8>)
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	fb02 f203 	mul.w	r2, r2, r3
 80088c4:	4b49      	ldr	r3, [pc, #292]	; (80089ec <font_drawChar+0x9e0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	4613      	mov	r3, r2
 80088cc:	462a      	mov	r2, r5
 80088ce:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80088d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088d4:	3301      	adds	r3, #1
 80088d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088da:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80088de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088e2:	429a      	cmp	r2, r3
 80088e4:	dba6      	blt.n	8008834 <font_drawChar+0x828>
      break;
 80088e6:	e3d9      	b.n	800909c <font_drawChar+0x1090>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B:
      if(bg!=fg) {
 80088e8:	4b41      	ldr	r3, [pc, #260]	; (80089f0 <font_drawChar+0x9e4>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	4b3f      	ldr	r3, [pc, #252]	; (80089ec <font_drawChar+0x9e0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	f000 817e 	beq.w	8008bf2 <font_drawChar+0xbe6>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 80088f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dd1d      	ble.n	800893a <font_drawChar+0x92e>
 80088fe:	4b37      	ldr	r3, [pc, #220]	; (80089dc <font_drawChar+0x9d0>)
 8008900:	681c      	ldr	r4, [r3, #0]
 8008902:	4b37      	ldr	r3, [pc, #220]	; (80089e0 <font_drawChar+0x9d4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800890a:	fb02 f303 	mul.w	r3, r2, r3
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	1ad0      	subs	r0, r2, r3
 8008912:	4b33      	ldr	r3, [pc, #204]	; (80089e0 <font_drawChar+0x9d4>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800891a:	fb02 f203 	mul.w	r2, r2, r3
 800891e:	4b2a      	ldr	r3, [pc, #168]	; (80089c8 <font_drawChar+0x9bc>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	789b      	ldrb	r3, [r3, #2]
 8008924:	4619      	mov	r1, r3
 8008926:	4b2f      	ldr	r3, [pc, #188]	; (80089e4 <font_drawChar+0x9d8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	fb03 f101 	mul.w	r1, r3, r1
 800892e:	4b30      	ldr	r3, [pc, #192]	; (80089f0 <font_drawChar+0x9e4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	460b      	mov	r3, r1
 8008936:	68b9      	ldr	r1, [r7, #8]
 8008938:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects;
 800893a:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <font_drawChar+0x9bc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	633b      	str	r3, [r7, #48]	; 0x30
        int idx=0,yfCur=0;
 8008942:	2300      	movs	r3, #0
 8008944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008948:	2300      	movs	r3, #0
 800894a:	67fb      	str	r3, [r7, #124]	; 0x7c
        while(idx<recNum) {
 800894c:	e127      	b.n	8008b9e <font_drawChar+0xb92>
          unsigned short v = *(rects+idx+recIdx);
 800894e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008952:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008956:	4413      	add	r3, r2
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
          yf = (v>>5) & 0x3f;
 8008964:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	b29b      	uxth	r3, r3
 800896c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008970:	4a17      	ldr	r2, [pc, #92]	; (80089d0 <font_drawChar+0x9c4>)
 8008972:	6013      	str	r3, [r2, #0]
          if(yf-yfCur>1 /*|| (yf-yfCur>0 && yfCur==0)*/) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yf-yfCur)*sy, bg);
 8008974:	4b16      	ldr	r3, [pc, #88]	; (80089d0 <font_drawChar+0x9c4>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b01      	cmp	r3, #1
 800897e:	dd1c      	ble.n	80089ba <font_drawChar+0x9ae>
 8008980:	4b16      	ldr	r3, [pc, #88]	; (80089dc <font_drawChar+0x9d0>)
 8008982:	681c      	ldr	r4, [r3, #0]
 8008984:	4b17      	ldr	r3, [pc, #92]	; (80089e4 <font_drawChar+0x9d8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800898a:	fb02 f203 	mul.w	r2, r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	18d1      	adds	r1, r2, r3
 8008992:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <font_drawChar+0x9d4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008998:	fb02 f003 	mul.w	r0, r2, r3
 800899c:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <font_drawChar+0x9c4>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	4a0f      	ldr	r2, [pc, #60]	; (80089e4 <font_drawChar+0x9d8>)
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	fb02 f203 	mul.w	r2, r2, r3
 80089ac:	4b10      	ldr	r3, [pc, #64]	; (80089f0 <font_drawChar+0x9e4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	4613      	mov	r3, r2
 80089b4:	4602      	mov	r2, r0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	47a0      	blx	r4
          //Serial.print(idx); Serial.print("  "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          yfCur=yf;
 80089ba:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <font_drawChar+0x9c4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	67fb      	str	r3, [r7, #124]	; 0x7c
          int xbg=0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	677b      	str	r3, [r7, #116]	; 0x74
          while(yf==yfCur && idx<recNum) {
 80089c4:	e08a      	b.n	8008adc <font_drawChar+0xad0>
 80089c6:	bf00      	nop
 80089c8:	200053b0 	.word	0x200053b0
 80089cc:	200053b4 	.word	0x200053b4
 80089d0:	200053b8 	.word	0x200053b8
 80089d4:	200053c0 	.word	0x200053c0
 80089d8:	200053bc 	.word	0x200053bc
 80089dc:	200053ac 	.word	0x200053ac
 80089e0:	2000001c 	.word	0x2000001c
 80089e4:	20000020 	.word	0x20000020
 80089e8:	200053d0 	.word	0x200053d0
 80089ec:	20000024 	.word	0x20000024
 80089f0:	20000028 	.word	0x20000028
            xf = v & 0x1f;
 80089f4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80089f8:	f003 031f 	and.w	r3, r3, #31
 80089fc:	4a7e      	ldr	r2, [pc, #504]	; (8008bf8 <font_drawChar+0xbec>)
 80089fe:	6013      	str	r3, [r2, #0]
            wf = ((v>>11) & 0x1f)+1;
 8008a00:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008a04:	0adb      	lsrs	r3, r3, #11
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	4a7b      	ldr	r2, [pc, #492]	; (8008bfc <font_drawChar+0xbf0>)
 8008a10:	6013      	str	r3, [r2, #0]
            if(xf>xbg) (*fillRectFun)(x+xbg*sx, y+yf*sy, (xf-xbg)*sx, 1*sy, bg);
 8008a12:	4b79      	ldr	r3, [pc, #484]	; (8008bf8 <font_drawChar+0xbec>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	da1f      	bge.n	8008a5c <font_drawChar+0xa50>
 8008a1c:	4b78      	ldr	r3, [pc, #480]	; (8008c00 <font_drawChar+0xbf4>)
 8008a1e:	681c      	ldr	r4, [r3, #0]
 8008a20:	4b78      	ldr	r3, [pc, #480]	; (8008c04 <font_drawChar+0xbf8>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a26:	fb02 f203 	mul.w	r2, r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	18d0      	adds	r0, r2, r3
 8008a2e:	4b76      	ldr	r3, [pc, #472]	; (8008c08 <font_drawChar+0xbfc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a76      	ldr	r2, [pc, #472]	; (8008c0c <font_drawChar+0xc00>)
 8008a34:	6812      	ldr	r2, [r2, #0]
 8008a36:	fb02 f203 	mul.w	r2, r2, r3
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	18d1      	adds	r1, r2, r3
 8008a3e:	4b6e      	ldr	r3, [pc, #440]	; (8008bf8 <font_drawChar+0xbec>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	4a6f      	ldr	r2, [pc, #444]	; (8008c04 <font_drawChar+0xbf8>)
 8008a48:	6812      	ldr	r2, [r2, #0]
 8008a4a:	fb02 f203 	mul.w	r2, r2, r3
 8008a4e:	4b6f      	ldr	r3, [pc, #444]	; (8008c0c <font_drawChar+0xc00>)
 8008a50:	681d      	ldr	r5, [r3, #0]
 8008a52:	4b6f      	ldr	r3, [pc, #444]	; (8008c10 <font_drawChar+0xc04>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	462b      	mov	r3, r5
 8008a5a:	47a0      	blx	r4
            xbg = xf+wf;
 8008a5c:	4b66      	ldr	r3, [pc, #408]	; (8008bf8 <font_drawChar+0xbec>)
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4b66      	ldr	r3, [pc, #408]	; (8008bfc <font_drawChar+0xbf0>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4413      	add	r3, r2
 8008a66:	677b      	str	r3, [r7, #116]	; 0x74
            //if(idx==recNum-1) fg=0x07E0; else fg=0xffff;
            (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, 1*sy, fg);
 8008a68:	4b65      	ldr	r3, [pc, #404]	; (8008c00 <font_drawChar+0xbf4>)
 8008a6a:	681c      	ldr	r4, [r3, #0]
 8008a6c:	4b62      	ldr	r3, [pc, #392]	; (8008bf8 <font_drawChar+0xbec>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a64      	ldr	r2, [pc, #400]	; (8008c04 <font_drawChar+0xbf8>)
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	fb02 f203 	mul.w	r2, r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	18d0      	adds	r0, r2, r3
 8008a7c:	4b62      	ldr	r3, [pc, #392]	; (8008c08 <font_drawChar+0xbfc>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a62      	ldr	r2, [pc, #392]	; (8008c0c <font_drawChar+0xc00>)
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	fb02 f203 	mul.w	r2, r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	18d1      	adds	r1, r2, r3
 8008a8c:	4b5b      	ldr	r3, [pc, #364]	; (8008bfc <font_drawChar+0xbf0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a5c      	ldr	r2, [pc, #368]	; (8008c04 <font_drawChar+0xbf8>)
 8008a92:	6812      	ldr	r2, [r2, #0]
 8008a94:	fb02 f203 	mul.w	r2, r2, r3
 8008a98:	4b5e      	ldr	r3, [pc, #376]	; (8008c14 <font_drawChar+0xc08>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	441a      	add	r2, r3
 8008a9e:	4b5b      	ldr	r3, [pc, #364]	; (8008c0c <font_drawChar+0xc00>)
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	4b5d      	ldr	r3, [pc, #372]	; (8008c18 <font_drawChar+0xc0c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	47a0      	blx	r4
            idx++;
 8008aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            v = *(rects+idx+recIdx);
 8008ab6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008aba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008abe:	4413      	add	r3, r2
 8008ac0:	005b      	lsls	r3, r3, #1
 8008ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac4:	4413      	add	r3, r2
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            yf = (v>>5) & 0x3f;
 8008acc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad8:	4a4b      	ldr	r2, [pc, #300]	; (8008c08 <font_drawChar+0xbfc>)
 8008ada:	6013      	str	r3, [r2, #0]
          while(yf==yfCur && idx<recNum) {
 8008adc:	4b4a      	ldr	r3, [pc, #296]	; (8008c08 <font_drawChar+0xbfc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d105      	bne.n	8008af2 <font_drawChar+0xae6>
 8008ae6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008aee:	429a      	cmp	r2, r3
 8008af0:	db80      	blt.n	80089f4 <font_drawChar+0x9e8>
          }
          // last bg line
          if(xbg<chWd) (*fillRectFun)(x+xbg*sx, y+yfCur*sy, (chWd-xbg)*sx, 1*sy, bg);
 8008af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008af6:	429a      	cmp	r2, r3
 8008af8:	da1d      	bge.n	8008b36 <font_drawChar+0xb2a>
 8008afa:	4b41      	ldr	r3, [pc, #260]	; (8008c00 <font_drawChar+0xbf4>)
 8008afc:	681c      	ldr	r4, [r3, #0]
 8008afe:	4b41      	ldr	r3, [pc, #260]	; (8008c04 <font_drawChar+0xbf8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008b04:	fb02 f203 	mul.w	r2, r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	18d0      	adds	r0, r2, r3
 8008b0c:	4b3f      	ldr	r3, [pc, #252]	; (8008c0c <font_drawChar+0xc00>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b12:	fb02 f203 	mul.w	r2, r2, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	18d1      	adds	r1, r2, r3
 8008b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	4a38      	ldr	r2, [pc, #224]	; (8008c04 <font_drawChar+0xbf8>)
 8008b22:	6812      	ldr	r2, [r2, #0]
 8008b24:	fb02 f203 	mul.w	r2, r2, r3
 8008b28:	4b38      	ldr	r3, [pc, #224]	; (8008c0c <font_drawChar+0xc00>)
 8008b2a:	681d      	ldr	r5, [r3, #0]
 8008b2c:	4b38      	ldr	r3, [pc, #224]	; (8008c10 <font_drawChar+0xc04>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	462b      	mov	r3, r5
 8008b34:	47a0      	blx	r4
          //Serial.print(idx); Serial.print(" ++ "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          if(idx==recNum-1 && yfCur<rFont->ht) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yfCur<rFont->ht-yfCur)*sy, bg);
 8008b36:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d12c      	bne.n	8008b9e <font_drawChar+0xb92>
 8008b44:	4b35      	ldr	r3, [pc, #212]	; (8008c1c <font_drawChar+0xc10>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	da25      	bge.n	8008b9e <font_drawChar+0xb92>
 8008b52:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <font_drawChar+0xbf4>)
 8008b54:	681c      	ldr	r4, [r3, #0]
 8008b56:	4b2d      	ldr	r3, [pc, #180]	; (8008c0c <font_drawChar+0xc00>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b5c:	fb02 f203 	mul.w	r2, r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	18d1      	adds	r1, r2, r3
 8008b64:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <font_drawChar+0xbf8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b6a:	fb02 f003 	mul.w	r0, r2, r3
 8008b6e:	4b2b      	ldr	r3, [pc, #172]	; (8008c1c <font_drawChar+0xc10>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	789b      	ldrb	r3, [r3, #2]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	bfb4      	ite	lt
 8008b80:	2301      	movlt	r3, #1
 8008b82:	2300      	movge	r3, #0
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <font_drawChar+0xc00>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	fb03 f202 	mul.w	r2, r3, r2
 8008b90:	4b1f      	ldr	r3, [pc, #124]	; (8008c10 <font_drawChar+0xc04>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	4613      	mov	r3, r2
 8008b98:	4602      	mov	r2, r0
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	47a0      	blx	r4
        while(idx<recNum) {
 8008b9e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	f6ff aed1 	blt.w	800894e <font_drawChar+0x942>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8008bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f340 8275 	ble.w	80090a0 <font_drawChar+0x1094>
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <font_drawChar+0xbf4>)
 8008bb8:	681c      	ldr	r4, [r3, #0]
 8008bba:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <font_drawChar+0xbf8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bc0:	fb02 f203 	mul.w	r2, r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	18d0      	adds	r0, r2, r3
 8008bc8:	4b0e      	ldr	r3, [pc, #56]	; (8008c04 <font_drawChar+0xbf8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008bd0:	fb02 f203 	mul.w	r2, r2, r3
 8008bd4:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <font_drawChar+0xc10>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	789b      	ldrb	r3, [r3, #2]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <font_drawChar+0xc00>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	fb03 f101 	mul.w	r1, r3, r1
 8008be4:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <font_drawChar+0xc04>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	460b      	mov	r3, r1
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	47a0      	blx	r4
        yf = (v>>5) & 0x3f;
        wf = ((v>>11) & 0x1f)+1;
        hf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8008bf0:	e256      	b.n	80090a0 <font_drawChar+0x1094>
      for(int i=0; i<recNum; i++) {
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	673b      	str	r3, [r7, #112]	; 0x70
 8008bf6:	e063      	b.n	8008cc0 <font_drawChar+0xcb4>
 8008bf8:	200053b4 	.word	0x200053b4
 8008bfc:	200053bc 	.word	0x200053bc
 8008c00:	200053ac 	.word	0x200053ac
 8008c04:	2000001c 	.word	0x2000001c
 8008c08:	200053b8 	.word	0x200053b8
 8008c0c:	20000020 	.word	0x20000020
 8008c10:	20000028 	.word	0x20000028
 8008c14:	200053d0 	.word	0x200053d0
 8008c18:	20000024 	.word	0x20000024
 8008c1c:	200053b0 	.word	0x200053b0
        unsigned short *rects = (unsigned short*)rFont->rects;
 8008c20:	4b4c      	ldr	r3, [pc, #304]	; (8008d54 <font_drawChar+0xd48>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned short v = (rects[i+recIdx]);
 8008c28:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c2e:	4413      	add	r3, r2
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c34:	4413      	add	r3, r2
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	86fb      	strh	r3, [r7, #54]	; 0x36
        xf = (v & 0x1f)-xmin;
 8008c3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c3c:	f003 021f 	and.w	r2, r3, #31
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	4a44      	ldr	r2, [pc, #272]	; (8008d58 <font_drawChar+0xd4c>)
 8008c46:	6013      	str	r3, [r2, #0]
        yf = (v>>5) & 0x3f;
 8008c48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c4a:	095b      	lsrs	r3, r3, #5
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c52:	4a42      	ldr	r2, [pc, #264]	; (8008d5c <font_drawChar+0xd50>)
 8008c54:	6013      	str	r3, [r2, #0]
        wf = ((v>>11) & 0x1f)+1;
 8008c56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008c58:	0adb      	lsrs	r3, r3, #11
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f003 031f 	and.w	r3, r3, #31
 8008c60:	3301      	adds	r3, #1
 8008c62:	4a3f      	ldr	r2, [pc, #252]	; (8008d60 <font_drawChar+0xd54>)
 8008c64:	6013      	str	r3, [r2, #0]
        hf = 1;
 8008c66:	4b3f      	ldr	r3, [pc, #252]	; (8008d64 <font_drawChar+0xd58>)
 8008c68:	2201      	movs	r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008c6c:	4b3e      	ldr	r3, [pc, #248]	; (8008d68 <font_drawChar+0xd5c>)
 8008c6e:	681c      	ldr	r4, [r3, #0]
 8008c70:	4b39      	ldr	r3, [pc, #228]	; (8008d58 <font_drawChar+0xd4c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a3d      	ldr	r2, [pc, #244]	; (8008d6c <font_drawChar+0xd60>)
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	fb02 f203 	mul.w	r2, r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	18d0      	adds	r0, r2, r3
 8008c80:	4b36      	ldr	r3, [pc, #216]	; (8008d5c <font_drawChar+0xd50>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a3a      	ldr	r2, [pc, #232]	; (8008d70 <font_drawChar+0xd64>)
 8008c86:	6812      	ldr	r2, [r2, #0]
 8008c88:	fb02 f203 	mul.w	r2, r2, r3
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	18d1      	adds	r1, r2, r3
 8008c90:	4b33      	ldr	r3, [pc, #204]	; (8008d60 <font_drawChar+0xd54>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a35      	ldr	r2, [pc, #212]	; (8008d6c <font_drawChar+0xd60>)
 8008c96:	6812      	ldr	r2, [r2, #0]
 8008c98:	fb02 f203 	mul.w	r2, r2, r3
 8008c9c:	4b35      	ldr	r3, [pc, #212]	; (8008d74 <font_drawChar+0xd68>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	18d5      	adds	r5, r2, r3
 8008ca2:	4b30      	ldr	r3, [pc, #192]	; (8008d64 <font_drawChar+0xd58>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a32      	ldr	r2, [pc, #200]	; (8008d70 <font_drawChar+0xd64>)
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	fb02 f203 	mul.w	r2, r2, r3
 8008cae:	4b32      	ldr	r3, [pc, #200]	; (8008d78 <font_drawChar+0xd6c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8008cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8008cc0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008cc4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	dbaa      	blt.n	8008c20 <font_drawChar+0xc14>
      break;
 8008cca:	e1e9      	b.n	80090a0 <font_drawChar+0x1094>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B:
      if(bg!=fg) {
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <font_drawChar+0xd70>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	4b29      	ldr	r3, [pc, #164]	; (8008d78 <font_drawChar+0xd6c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	f000 811f 	beq.w	8008f18 <font_drawChar+0xf0c>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8008cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dd1d      	ble.n	8008d1e <font_drawChar+0xd12>
 8008ce2:	4b21      	ldr	r3, [pc, #132]	; (8008d68 <font_drawChar+0xd5c>)
 8008ce4:	681c      	ldr	r4, [r3, #0]
 8008ce6:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <font_drawChar+0xd60>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	1ad0      	subs	r0, r2, r3
 8008cf6:	4b1d      	ldr	r3, [pc, #116]	; (8008d6c <font_drawChar+0xd60>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008cfe:	fb02 f203 	mul.w	r2, r2, r3
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <font_drawChar+0xd48>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	789b      	ldrb	r3, [r3, #2]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4b19      	ldr	r3, [pc, #100]	; (8008d70 <font_drawChar+0xd64>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	fb03 f101 	mul.w	r1, r3, r1
 8008d12:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <font_drawChar+0xd70>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	47a0      	blx	r4
        unsigned char *rects = (unsigned char*)rFont->rects + recIdx*3;
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <font_drawChar+0xd48>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6899      	ldr	r1, [r3, #8]
 8008d24:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008d28:	4613      	mov	r3, r2
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	4413      	add	r3, r2
 8008d2e:	440b      	add	r3, r1
 8008d30:	647b      	str	r3, [r7, #68]	; 0x44
        int idx=0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(idx<recNum*3) {
 8008d36:	e0c3      	b.n	8008ec0 <font_drawChar+0xeb4>
          xf = *(rects+idx+0);
 8008d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d3c:	4413      	add	r3, r2
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <font_drawChar+0xd4c>)
 8008d44:	601a      	str	r2, [r3, #0]
          int ybg=0,xfCur=xf;
 8008d46:	2300      	movs	r3, #0
 8008d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d4a:	4b03      	ldr	r3, [pc, #12]	; (8008d58 <font_drawChar+0xd4c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	643b      	str	r3, [r7, #64]	; 0x40
          while(xf==xfCur && idx<recNum*3) {
 8008d50:	e07d      	b.n	8008e4e <font_drawChar+0xe42>
 8008d52:	bf00      	nop
 8008d54:	200053b0 	.word	0x200053b0
 8008d58:	200053b4 	.word	0x200053b4
 8008d5c:	200053b8 	.word	0x200053b8
 8008d60:	200053bc 	.word	0x200053bc
 8008d64:	200053c0 	.word	0x200053c0
 8008d68:	200053ac 	.word	0x200053ac
 8008d6c:	2000001c 	.word	0x2000001c
 8008d70:	20000020 	.word	0x20000020
 8008d74:	200053d0 	.word	0x200053d0
 8008d78:	20000024 	.word	0x20000024
 8008d7c:	20000028 	.word	0x20000028
            yf = *(rects+idx+1);
 8008d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d82:	3301      	adds	r3, #1
 8008d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d86:	4413      	add	r3, r2
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4b8e      	ldr	r3, [pc, #568]	; (8008fc8 <font_drawChar+0xfbc>)
 8008d8e:	601a      	str	r2, [r3, #0]
            hf = *(rects+idx+2)+1;
 8008d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d92:	3302      	adds	r3, #2
 8008d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d96:	4413      	add	r3, r2
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	4a8b      	ldr	r2, [pc, #556]	; (8008fcc <font_drawChar+0xfc0>)
 8008d9e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8008da0:	4b89      	ldr	r3, [pc, #548]	; (8008fc8 <font_drawChar+0xfbc>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008da6:	429a      	cmp	r2, r3
 8008da8:	da1f      	bge.n	8008dea <font_drawChar+0xdde>
 8008daa:	4b89      	ldr	r3, [pc, #548]	; (8008fd0 <font_drawChar+0xfc4>)
 8008dac:	681c      	ldr	r4, [r3, #0]
 8008dae:	4b89      	ldr	r3, [pc, #548]	; (8008fd4 <font_drawChar+0xfc8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008db4:	fb02 f203 	mul.w	r2, r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	18d0      	adds	r0, r2, r3
 8008dbc:	4b86      	ldr	r3, [pc, #536]	; (8008fd8 <font_drawChar+0xfcc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dc2:	fb02 f203 	mul.w	r2, r2, r3
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	18d1      	adds	r1, r2, r3
 8008dca:	4b82      	ldr	r3, [pc, #520]	; (8008fd4 <font_drawChar+0xfc8>)
 8008dcc:	681d      	ldr	r5, [r3, #0]
 8008dce:	4b7e      	ldr	r3, [pc, #504]	; (8008fc8 <font_drawChar+0xfbc>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dd4:	1ad3      	subs	r3, r2, r3
 8008dd6:	4a80      	ldr	r2, [pc, #512]	; (8008fd8 <font_drawChar+0xfcc>)
 8008dd8:	6812      	ldr	r2, [r2, #0]
 8008dda:	fb02 f203 	mul.w	r2, r2, r3
 8008dde:	4b7f      	ldr	r3, [pc, #508]	; (8008fdc <font_drawChar+0xfd0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	4613      	mov	r3, r2
 8008de6:	462a      	mov	r2, r5
 8008de8:	47a0      	blx	r4
            ybg = yf+hf;
 8008dea:	4b77      	ldr	r3, [pc, #476]	; (8008fc8 <font_drawChar+0xfbc>)
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	4b77      	ldr	r3, [pc, #476]	; (8008fcc <font_drawChar+0xfc0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4413      	add	r3, r2
 8008df4:	66bb      	str	r3, [r7, #104]	; 0x68
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 8008df6:	4b76      	ldr	r3, [pc, #472]	; (8008fd0 <font_drawChar+0xfc4>)
 8008df8:	681c      	ldr	r4, [r3, #0]
 8008dfa:	4b76      	ldr	r3, [pc, #472]	; (8008fd4 <font_drawChar+0xfc8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e00:	fb02 f203 	mul.w	r2, r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	18d0      	adds	r0, r2, r3
 8008e08:	4b6f      	ldr	r3, [pc, #444]	; (8008fc8 <font_drawChar+0xfbc>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a72      	ldr	r2, [pc, #456]	; (8008fd8 <font_drawChar+0xfcc>)
 8008e0e:	6812      	ldr	r2, [r2, #0]
 8008e10:	fb02 f203 	mul.w	r2, r2, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	18d1      	adds	r1, r2, r3
 8008e18:	4b71      	ldr	r3, [pc, #452]	; (8008fe0 <font_drawChar+0xfd4>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b6d      	ldr	r3, [pc, #436]	; (8008fd4 <font_drawChar+0xfc8>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	18d5      	adds	r5, r2, r3
 8008e22:	4b6a      	ldr	r3, [pc, #424]	; (8008fcc <font_drawChar+0xfc0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a6c      	ldr	r2, [pc, #432]	; (8008fd8 <font_drawChar+0xfcc>)
 8008e28:	6812      	ldr	r2, [r2, #0]
 8008e2a:	fb02 f203 	mul.w	r2, r2, r3
 8008e2e:	4b6d      	ldr	r3, [pc, #436]	; (8008fe4 <font_drawChar+0xfd8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	462a      	mov	r2, r5
 8008e38:	47a0      	blx	r4
            idx += 3;
 8008e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3c:	3303      	adds	r3, #3
 8008e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
            xf = *(rects+idx+0);
 8008e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e44:	4413      	add	r3, r2
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	4b67      	ldr	r3, [pc, #412]	; (8008fe8 <font_drawChar+0xfdc>)
 8008e4c:	601a      	str	r2, [r3, #0]
          while(xf==xfCur && idx<recNum*3) {
 8008e4e:	4b66      	ldr	r3, [pc, #408]	; (8008fe8 <font_drawChar+0xfdc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d107      	bne.n	8008e68 <font_drawChar+0xe5c>
 8008e58:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	4413      	add	r3, r2
 8008e62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e64:	429a      	cmp	r2, r3
 8008e66:	db8b      	blt.n	8008d80 <font_drawChar+0xd74>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 8008e68:	4b60      	ldr	r3, [pc, #384]	; (8008fec <font_drawChar+0xfe0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	789b      	ldrb	r3, [r3, #2]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e72:	4293      	cmp	r3, r2
 8008e74:	da24      	bge.n	8008ec0 <font_drawChar+0xeb4>
 8008e76:	4b56      	ldr	r3, [pc, #344]	; (8008fd0 <font_drawChar+0xfc4>)
 8008e78:	681c      	ldr	r4, [r3, #0]
 8008e7a:	4b56      	ldr	r3, [pc, #344]	; (8008fd4 <font_drawChar+0xfc8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e80:	fb02 f203 	mul.w	r2, r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	18d0      	adds	r0, r2, r3
 8008e88:	4b53      	ldr	r3, [pc, #332]	; (8008fd8 <font_drawChar+0xfcc>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e8e:	fb02 f203 	mul.w	r2, r2, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	18d1      	adds	r1, r2, r3
 8008e96:	4b52      	ldr	r3, [pc, #328]	; (8008fe0 <font_drawChar+0xfd4>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	4b4e      	ldr	r3, [pc, #312]	; (8008fd4 <font_drawChar+0xfc8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	18d5      	adds	r5, r2, r3
 8008ea0:	4b52      	ldr	r3, [pc, #328]	; (8008fec <font_drawChar+0xfe0>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	789b      	ldrb	r3, [r3, #2]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	4a4a      	ldr	r2, [pc, #296]	; (8008fd8 <font_drawChar+0xfcc>)
 8008eae:	6812      	ldr	r2, [r2, #0]
 8008eb0:	fb02 f203 	mul.w	r2, r2, r3
 8008eb4:	4b49      	ldr	r3, [pc, #292]	; (8008fdc <font_drawChar+0xfd0>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	462a      	mov	r2, r5
 8008ebe:	47a0      	blx	r4
        while(idx<recNum*3) {
 8008ec0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	4413      	add	r3, r2
 8008eca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	f6ff af33 	blt.w	8008d38 <font_drawChar+0xd2c>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8008ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f340 80e4 	ble.w	80090a4 <font_drawChar+0x1098>
 8008edc:	4b3c      	ldr	r3, [pc, #240]	; (8008fd0 <font_drawChar+0xfc4>)
 8008ede:	681c      	ldr	r4, [r3, #0]
 8008ee0:	4b3c      	ldr	r3, [pc, #240]	; (8008fd4 <font_drawChar+0xfc8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ee6:	fb02 f203 	mul.w	r2, r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	18d0      	adds	r0, r2, r3
 8008eee:	4b39      	ldr	r3, [pc, #228]	; (8008fd4 <font_drawChar+0xfc8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008ef6:	fb02 f203 	mul.w	r2, r2, r3
 8008efa:	4b3c      	ldr	r3, [pc, #240]	; (8008fec <font_drawChar+0xfe0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	789b      	ldrb	r3, [r3, #2]
 8008f00:	4619      	mov	r1, r3
 8008f02:	4b35      	ldr	r3, [pc, #212]	; (8008fd8 <font_drawChar+0xfcc>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	fb03 f101 	mul.w	r1, r3, r1
 8008f0a:	4b34      	ldr	r3, [pc, #208]	; (8008fdc <font_drawChar+0xfd0>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	460b      	mov	r3, r1
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	47a0      	blx	r4
        yf = (rects[1]);
        hf = (rects[2])+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8008f16:	e0c5      	b.n	80090a4 <font_drawChar+0x1098>
      for(int i=0; i<recNum; i++) {
 8008f18:	2300      	movs	r3, #0
 8008f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8008f1c:	e04b      	b.n	8008fb6 <font_drawChar+0xfaa>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8008f1e:	4b33      	ldr	r3, [pc, #204]	; (8008fec <font_drawChar+0xfe0>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6899      	ldr	r1, [r3, #8]
 8008f24:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2a:	441a      	add	r2, r3
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	440b      	add	r3, r1
 8008f34:	64bb      	str	r3, [r7, #72]	; 0x48
        xf = (rects[0])-xmin;
 8008f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	4a29      	ldr	r2, [pc, #164]	; (8008fe8 <font_drawChar+0xfdc>)
 8008f42:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 8008f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f46:	3301      	adds	r3, #1
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4b1e      	ldr	r3, [pc, #120]	; (8008fc8 <font_drawChar+0xfbc>)
 8008f4e:	601a      	str	r2, [r3, #0]
        hf = (rects[2])+1;
 8008f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f52:	3302      	adds	r3, #2
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	4a1c      	ldr	r2, [pc, #112]	; (8008fcc <font_drawChar+0xfc0>)
 8008f5a:	6013      	str	r3, [r2, #0]
        wf = 1;
 8008f5c:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <font_drawChar+0xfe4>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008f62:	4b1b      	ldr	r3, [pc, #108]	; (8008fd0 <font_drawChar+0xfc4>)
 8008f64:	681c      	ldr	r4, [r3, #0]
 8008f66:	4b20      	ldr	r3, [pc, #128]	; (8008fe8 <font_drawChar+0xfdc>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a1a      	ldr	r2, [pc, #104]	; (8008fd4 <font_drawChar+0xfc8>)
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	fb02 f203 	mul.w	r2, r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	18d0      	adds	r0, r2, r3
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <font_drawChar+0xfbc>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a17      	ldr	r2, [pc, #92]	; (8008fd8 <font_drawChar+0xfcc>)
 8008f7c:	6812      	ldr	r2, [r2, #0]
 8008f7e:	fb02 f203 	mul.w	r2, r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	18d1      	adds	r1, r2, r3
 8008f86:	4b1a      	ldr	r3, [pc, #104]	; (8008ff0 <font_drawChar+0xfe4>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a12      	ldr	r2, [pc, #72]	; (8008fd4 <font_drawChar+0xfc8>)
 8008f8c:	6812      	ldr	r2, [r2, #0]
 8008f8e:	fb02 f203 	mul.w	r2, r2, r3
 8008f92:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <font_drawChar+0xfd4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	18d5      	adds	r5, r2, r3
 8008f98:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <font_drawChar+0xfc0>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a0e      	ldr	r2, [pc, #56]	; (8008fd8 <font_drawChar+0xfcc>)
 8008f9e:	6812      	ldr	r2, [r2, #0]
 8008fa0:	fb02 f203 	mul.w	r2, r2, r3
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <font_drawChar+0xfd8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	4613      	mov	r3, r2
 8008fac:	462a      	mov	r2, r5
 8008fae:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8008fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8008fb6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008fba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	dbae      	blt.n	8008f1e <font_drawChar+0xf12>
      break;
 8008fc0:	e070      	b.n	80090a4 <font_drawChar+0x1098>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B:
      for(int i=0; i<recNum; i++) {
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8008fc6:	e061      	b.n	800908c <font_drawChar+0x1080>
 8008fc8:	200053b8 	.word	0x200053b8
 8008fcc:	200053c0 	.word	0x200053c0
 8008fd0:	200053ac 	.word	0x200053ac
 8008fd4:	2000001c 	.word	0x2000001c
 8008fd8:	20000020 	.word	0x20000020
 8008fdc:	20000028 	.word	0x20000028
 8008fe0:	200053d0 	.word	0x200053d0
 8008fe4:	20000024 	.word	0x20000024
 8008fe8:	200053b4 	.word	0x200053b4
 8008fec:	200053b0 	.word	0x200053b0
 8008ff0:	200053bc 	.word	0x200053bc
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8008ff4:	4b32      	ldr	r3, [pc, #200]	; (80090c0 <font_drawChar+0x10b4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6899      	ldr	r1, [r3, #8]
 8008ffa:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009000:	441a      	add	r2, r3
 8009002:	4613      	mov	r3, r2
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	4413      	add	r3, r2
 8009008:	440b      	add	r3, r1
 800900a:	64fb      	str	r3, [r7, #76]	; 0x4c
        xf = (rects[0])-xmin;
 800900c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	4a2b      	ldr	r2, [pc, #172]	; (80090c4 <font_drawChar+0x10b8>)
 8009018:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800901a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901c:	3301      	adds	r3, #1
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	4b29      	ldr	r3, [pc, #164]	; (80090c8 <font_drawChar+0x10bc>)
 8009024:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 8009026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009028:	3302      	adds	r3, #2
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	3301      	adds	r3, #1
 800902e:	4a27      	ldr	r2, [pc, #156]	; (80090cc <font_drawChar+0x10c0>)
 8009030:	6013      	str	r3, [r2, #0]
        hf = 1;
 8009032:	4b27      	ldr	r3, [pc, #156]	; (80090d0 <font_drawChar+0x10c4>)
 8009034:	2201      	movs	r2, #1
 8009036:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8009038:	4b26      	ldr	r3, [pc, #152]	; (80090d4 <font_drawChar+0x10c8>)
 800903a:	681c      	ldr	r4, [r3, #0]
 800903c:	4b21      	ldr	r3, [pc, #132]	; (80090c4 <font_drawChar+0x10b8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a25      	ldr	r2, [pc, #148]	; (80090d8 <font_drawChar+0x10cc>)
 8009042:	6812      	ldr	r2, [r2, #0]
 8009044:	fb02 f203 	mul.w	r2, r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	18d0      	adds	r0, r2, r3
 800904c:	4b1e      	ldr	r3, [pc, #120]	; (80090c8 <font_drawChar+0x10bc>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a22      	ldr	r2, [pc, #136]	; (80090dc <font_drawChar+0x10d0>)
 8009052:	6812      	ldr	r2, [r2, #0]
 8009054:	fb02 f203 	mul.w	r2, r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	18d1      	adds	r1, r2, r3
 800905c:	4b1b      	ldr	r3, [pc, #108]	; (80090cc <font_drawChar+0x10c0>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1d      	ldr	r2, [pc, #116]	; (80090d8 <font_drawChar+0x10cc>)
 8009062:	6812      	ldr	r2, [r2, #0]
 8009064:	fb02 f203 	mul.w	r2, r2, r3
 8009068:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <font_drawChar+0x10d4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	18d5      	adds	r5, r2, r3
 800906e:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <font_drawChar+0x10c4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a1a      	ldr	r2, [pc, #104]	; (80090dc <font_drawChar+0x10d0>)
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	fb02 f203 	mul.w	r2, r2, r3
 800907a:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <font_drawChar+0x10d8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	4613      	mov	r3, r2
 8009082:	462a      	mov	r2, r5
 8009084:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009088:	3301      	adds	r3, #1
 800908a:	663b      	str	r3, [r7, #96]	; 0x60
 800908c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009090:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009092:	429a      	cmp	r2, r3
 8009094:	dbae      	blt.n	8008ff4 <font_drawChar+0xfe8>
      }
      break;
 8009096:	e006      	b.n	80090a6 <font_drawChar+0x109a>
    default: break;
 8009098:	bf00      	nop
 800909a:	e004      	b.n	80090a6 <font_drawChar+0x109a>
      break;
 800909c:	bf00      	nop
 800909e:	e002      	b.n	80090a6 <font_drawChar+0x109a>
      break;
 80090a0:	bf00      	nop
 80090a2:	e000      	b.n	80090a6 <font_drawChar+0x109a>
      break;
 80090a4:	bf00      	nop
#endif
  }
  return (wd+bold)*sx;
 80090a6:	4b0e      	ldr	r3, [pc, #56]	; (80090e0 <font_drawChar+0x10d4>)
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80090ae:	4413      	add	r3, r2
 80090b0:	4a09      	ldr	r2, [pc, #36]	; (80090d8 <font_drawChar+0x10cc>)
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	fb02 f303 	mul.w	r3, r2, r3
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	37a8      	adds	r7, #168	; 0xa8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bdb0      	pop	{r4, r5, r7, pc}
 80090c0:	200053b0 	.word	0x200053b0
 80090c4:	200053b4 	.word	0x200053b4
 80090c8:	200053b8 	.word	0x200053b8
 80090cc:	200053bc 	.word	0x200053bc
 80090d0:	200053c0 	.word	0x200053c0
 80090d4:	200053ac 	.word	0x200053ac
 80090d8:	2000001c 	.word	0x2000001c
 80090dc:	20000020 	.word	0x20000020
 80090e0:	200053d0 	.word	0x200053d0
 80090e4:	20000024 	.word	0x20000024

080090e8 <font_strWidth>:

// ----------------------------------------------------------------
int font_strWidth(char *str)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  int wd = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]
  while (*str) wd += font_charWidth(*str++);
 80090f4:	e00a      	b.n	800910c <font_strWidth+0x24>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe ff16 	bl	8007f30 <font_charWidth>
 8009104:	4602      	mov	r2, r0
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1f0      	bne.n	80090f6 <font_strWidth+0xe>
  return wd;
 8009114:	68fb      	ldr	r3, [r7, #12]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <font_printf>:

static char printfbuffer[512];

int font_printf(int xpos, int ypos, char *str, ...)
{
 8009120:	b40c      	push	{r2, r3}
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, str);
 800912c:	f107 031c 	add.w	r3, r7, #28
 8009130:	60fb      	str	r3, [r7, #12]
  vsnprintf(printfbuffer, sizeof(printfbuffer), str, args);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800913a:	4808      	ldr	r0, [pc, #32]	; (800915c <font_printf+0x3c>)
 800913c:	f001 fe16 	bl	800ad6c <vsniprintf>
  va_end(args);
  return font_printStr(xpos, ypos,printfbuffer);
 8009140:	4a06      	ldr	r2, [pc, #24]	; (800915c <font_printf+0x3c>)
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f80b 	bl	8009160 <font_printStr>
 800914a:	4603      	mov	r3, r0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009156:	b002      	add	sp, #8
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	200053dc 	.word	0x200053dc

08009160 <font_printStr>:

// ----------------------------------------------------------------
int font_printStr(int xpos, int ypos, char *str)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  unsigned char ch;
  int stl, row;
  int x = xpos;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
  int y = ypos;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	623b      	str	r3, [r7, #32]
  int wd = font_strWidth(str);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff ffb7 	bl	80090e8 <font_strWidth>
 800917a:	61f8      	str	r0, [r7, #28]

  //fillRectFun(xpos, ypos, wd, font_getHeight(), 0);

  if(x==ALIGN_RIGHT) x = scrWd - wd; // right = -1
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009182:	d105      	bne.n	8009190 <font_printStr+0x30>
 8009184:	4b29      	ldr	r3, [pc, #164]	; (800922c <font_printStr+0xcc>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
 800918e:	e00b      	b.n	80091a8 <font_printStr+0x48>
  else if(x<0) x = (scrWd - wd) / 2; // center = -2
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	2b00      	cmp	r3, #0
 8009194:	da08      	bge.n	80091a8 <font_printStr+0x48>
 8009196:	4b25      	ldr	r3, [pc, #148]	; (800922c <font_printStr+0xcc>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	da00      	bge.n	80091a4 <font_printStr+0x44>
 80091a2:	3301      	adds	r3, #1
 80091a4:	105b      	asrs	r3, r3, #1
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
  if(x<0) x = 0; // left
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da34      	bge.n	8009218 <font_printStr+0xb8>
 80091ae:	2300      	movs	r3, #0
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24

  while(*str) {
 80091b2:	e031      	b.n	8009218 <font_printStr+0xb8>
    char ch = *str++;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	76fb      	strb	r3, [r7, #27]
    int wd = font_drawChar(x,y,ch);
 80091be:	7efb      	ldrb	r3, [r7, #27]
 80091c0:	461a      	mov	r2, r3
 80091c2:	6a39      	ldr	r1, [r7, #32]
 80091c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091c6:	f7fe ff21 	bl	800800c <font_drawChar>
 80091ca:	6178      	str	r0, [r7, #20]
    x+=wd;
 80091cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	4413      	add	r3, r2
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
    if((cr && x>=scrWd) || ch==10) { 
 80091d4:	4b16      	ldr	r3, [pc, #88]	; (8009230 <font_printStr+0xd0>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <font_printStr+0x86>
 80091dc:	4b13      	ldr	r3, [pc, #76]	; (800922c <font_printStr+0xcc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e2:	429a      	cmp	r2, r3
 80091e4:	da02      	bge.n	80091ec <font_printStr+0x8c>
 80091e6:	7efb      	ldrb	r3, [r7, #27]
 80091e8:	2b0a      	cmp	r3, #10
 80091ea:	d115      	bne.n	8009218 <font_printStr+0xb8>
      x = cr ? 0 : xpos; 
 80091ec:	4b10      	ldr	r3, [pc, #64]	; (8009230 <font_printStr+0xd0>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <font_printStr+0x98>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	e000      	b.n	80091fa <font_printStr+0x9a>
 80091f8:	2300      	movs	r3, #0
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
      y += rFont->ht * sy + spacingY; 
 80091fc:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <font_printStr+0xd4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	789b      	ldrb	r3, [r3, #2]
 8009202:	461a      	mov	r2, r3
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <font_printStr+0xd8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	fb03 f202 	mul.w	r2, r3, r2
 800920c:	4b0b      	ldr	r3, [pc, #44]	; (800923c <font_printStr+0xdc>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4413      	add	r3, r2
 8009212:	6a3a      	ldr	r2, [r7, #32]
 8009214:	4413      	add	r3, r2
 8009216:	623b      	str	r3, [r7, #32]
  while(*str) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1c9      	bne.n	80091b4 <font_printStr+0x54>
    }
  }
  return x;
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009222:	4618      	mov	r0, r3
 8009224:	3728      	adds	r7, #40	; 0x28
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	200053c4 	.word	0x200053c4
 8009230:	200053d4 	.word	0x200053d4
 8009234:	200053b0 	.word	0x200053b0
 8009238:	20000020 	.word	0x20000020
 800923c:	200053cc 	.word	0x200053cc

08009240 <font_isNumber>:
// ----------------------------------------------------------------
// callbacks
bool font_isNumber(unsigned char ch)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) || ch==' ' || ch=='-';
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	2b2f      	cmp	r3, #47	; 0x2f
 800924e:	d902      	bls.n	8009256 <font_isNumber+0x16>
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b39      	cmp	r3, #57	; 0x39
 8009254:	d905      	bls.n	8009262 <font_isNumber+0x22>
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	2b20      	cmp	r3, #32
 800925a:	d002      	beq.n	8009262 <font_isNumber+0x22>
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	2b2d      	cmp	r3, #45	; 0x2d
 8009260:	d101      	bne.n	8009266 <font_isNumber+0x26>
 8009262:	2301      	movs	r3, #1
 8009264:	e000      	b.n	8009268 <font_isNumber+0x28>
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <__errno>:
 8009274:	4b01      	ldr	r3, [pc, #4]	; (800927c <__errno+0x8>)
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	2000006c 	.word	0x2000006c

08009280 <__libc_init_array>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4e0d      	ldr	r6, [pc, #52]	; (80092b8 <__libc_init_array+0x38>)
 8009284:	4c0d      	ldr	r4, [pc, #52]	; (80092bc <__libc_init_array+0x3c>)
 8009286:	1ba4      	subs	r4, r4, r6
 8009288:	10a4      	asrs	r4, r4, #2
 800928a:	2500      	movs	r5, #0
 800928c:	42a5      	cmp	r5, r4
 800928e:	d109      	bne.n	80092a4 <__libc_init_array+0x24>
 8009290:	4e0b      	ldr	r6, [pc, #44]	; (80092c0 <__libc_init_array+0x40>)
 8009292:	4c0c      	ldr	r4, [pc, #48]	; (80092c4 <__libc_init_array+0x44>)
 8009294:	f003 fd90 	bl	800cdb8 <_init>
 8009298:	1ba4      	subs	r4, r4, r6
 800929a:	10a4      	asrs	r4, r4, #2
 800929c:	2500      	movs	r5, #0
 800929e:	42a5      	cmp	r5, r4
 80092a0:	d105      	bne.n	80092ae <__libc_init_array+0x2e>
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092a8:	4798      	blx	r3
 80092aa:	3501      	adds	r5, #1
 80092ac:	e7ee      	b.n	800928c <__libc_init_array+0xc>
 80092ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092b2:	4798      	blx	r3
 80092b4:	3501      	adds	r5, #1
 80092b6:	e7f2      	b.n	800929e <__libc_init_array+0x1e>
 80092b8:	0800f080 	.word	0x0800f080
 80092bc:	0800f080 	.word	0x0800f080
 80092c0:	0800f080 	.word	0x0800f080
 80092c4:	0800f084 	.word	0x0800f084

080092c8 <memcpy>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	1e43      	subs	r3, r0, #1
 80092cc:	440a      	add	r2, r1
 80092ce:	4291      	cmp	r1, r2
 80092d0:	d100      	bne.n	80092d4 <memcpy+0xc>
 80092d2:	bd10      	pop	{r4, pc}
 80092d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092dc:	e7f7      	b.n	80092ce <memcpy+0x6>

080092de <memset>:
 80092de:	4402      	add	r2, r0
 80092e0:	4603      	mov	r3, r0
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d100      	bne.n	80092e8 <memset+0xa>
 80092e6:	4770      	bx	lr
 80092e8:	f803 1b01 	strb.w	r1, [r3], #1
 80092ec:	e7f9      	b.n	80092e2 <memset+0x4>

080092ee <__cvt>:
 80092ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f2:	ec55 4b10 	vmov	r4, r5, d0
 80092f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80092f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	460e      	mov	r6, r1
 8009300:	4691      	mov	r9, r2
 8009302:	4619      	mov	r1, r3
 8009304:	bfb8      	it	lt
 8009306:	4622      	movlt	r2, r4
 8009308:	462b      	mov	r3, r5
 800930a:	f027 0720 	bic.w	r7, r7, #32
 800930e:	bfbb      	ittet	lt
 8009310:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009314:	461d      	movlt	r5, r3
 8009316:	2300      	movge	r3, #0
 8009318:	232d      	movlt	r3, #45	; 0x2d
 800931a:	bfb8      	it	lt
 800931c:	4614      	movlt	r4, r2
 800931e:	2f46      	cmp	r7, #70	; 0x46
 8009320:	700b      	strb	r3, [r1, #0]
 8009322:	d004      	beq.n	800932e <__cvt+0x40>
 8009324:	2f45      	cmp	r7, #69	; 0x45
 8009326:	d100      	bne.n	800932a <__cvt+0x3c>
 8009328:	3601      	adds	r6, #1
 800932a:	2102      	movs	r1, #2
 800932c:	e000      	b.n	8009330 <__cvt+0x42>
 800932e:	2103      	movs	r1, #3
 8009330:	ab03      	add	r3, sp, #12
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	ab02      	add	r3, sp, #8
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	4632      	mov	r2, r6
 800933a:	4653      	mov	r3, sl
 800933c:	ec45 4b10 	vmov	d0, r4, r5
 8009340:	f001 fdae 	bl	800aea0 <_dtoa_r>
 8009344:	2f47      	cmp	r7, #71	; 0x47
 8009346:	4680      	mov	r8, r0
 8009348:	d102      	bne.n	8009350 <__cvt+0x62>
 800934a:	f019 0f01 	tst.w	r9, #1
 800934e:	d026      	beq.n	800939e <__cvt+0xb0>
 8009350:	2f46      	cmp	r7, #70	; 0x46
 8009352:	eb08 0906 	add.w	r9, r8, r6
 8009356:	d111      	bne.n	800937c <__cvt+0x8e>
 8009358:	f898 3000 	ldrb.w	r3, [r8]
 800935c:	2b30      	cmp	r3, #48	; 0x30
 800935e:	d10a      	bne.n	8009376 <__cvt+0x88>
 8009360:	2200      	movs	r2, #0
 8009362:	2300      	movs	r3, #0
 8009364:	4620      	mov	r0, r4
 8009366:	4629      	mov	r1, r5
 8009368:	f7f7 fbd6 	bl	8000b18 <__aeabi_dcmpeq>
 800936c:	b918      	cbnz	r0, 8009376 <__cvt+0x88>
 800936e:	f1c6 0601 	rsb	r6, r6, #1
 8009372:	f8ca 6000 	str.w	r6, [sl]
 8009376:	f8da 3000 	ldr.w	r3, [sl]
 800937a:	4499      	add	r9, r3
 800937c:	2200      	movs	r2, #0
 800937e:	2300      	movs	r3, #0
 8009380:	4620      	mov	r0, r4
 8009382:	4629      	mov	r1, r5
 8009384:	f7f7 fbc8 	bl	8000b18 <__aeabi_dcmpeq>
 8009388:	b938      	cbnz	r0, 800939a <__cvt+0xac>
 800938a:	2230      	movs	r2, #48	; 0x30
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	454b      	cmp	r3, r9
 8009390:	d205      	bcs.n	800939e <__cvt+0xb0>
 8009392:	1c59      	adds	r1, r3, #1
 8009394:	9103      	str	r1, [sp, #12]
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	e7f8      	b.n	800938c <__cvt+0x9e>
 800939a:	f8cd 900c 	str.w	r9, [sp, #12]
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093a2:	eba3 0308 	sub.w	r3, r3, r8
 80093a6:	4640      	mov	r0, r8
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	b004      	add	sp, #16
 80093ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080093b0 <__exponent>:
 80093b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b2:	2900      	cmp	r1, #0
 80093b4:	4604      	mov	r4, r0
 80093b6:	bfba      	itte	lt
 80093b8:	4249      	neglt	r1, r1
 80093ba:	232d      	movlt	r3, #45	; 0x2d
 80093bc:	232b      	movge	r3, #43	; 0x2b
 80093be:	2909      	cmp	r1, #9
 80093c0:	f804 2b02 	strb.w	r2, [r4], #2
 80093c4:	7043      	strb	r3, [r0, #1]
 80093c6:	dd20      	ble.n	800940a <__exponent+0x5a>
 80093c8:	f10d 0307 	add.w	r3, sp, #7
 80093cc:	461f      	mov	r7, r3
 80093ce:	260a      	movs	r6, #10
 80093d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80093d4:	fb06 1115 	mls	r1, r6, r5, r1
 80093d8:	3130      	adds	r1, #48	; 0x30
 80093da:	2d09      	cmp	r5, #9
 80093dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093e0:	f103 32ff 	add.w	r2, r3, #4294967295
 80093e4:	4629      	mov	r1, r5
 80093e6:	dc09      	bgt.n	80093fc <__exponent+0x4c>
 80093e8:	3130      	adds	r1, #48	; 0x30
 80093ea:	3b02      	subs	r3, #2
 80093ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80093f0:	42bb      	cmp	r3, r7
 80093f2:	4622      	mov	r2, r4
 80093f4:	d304      	bcc.n	8009400 <__exponent+0x50>
 80093f6:	1a10      	subs	r0, r2, r0
 80093f8:	b003      	add	sp, #12
 80093fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093fc:	4613      	mov	r3, r2
 80093fe:	e7e7      	b.n	80093d0 <__exponent+0x20>
 8009400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009404:	f804 2b01 	strb.w	r2, [r4], #1
 8009408:	e7f2      	b.n	80093f0 <__exponent+0x40>
 800940a:	2330      	movs	r3, #48	; 0x30
 800940c:	4419      	add	r1, r3
 800940e:	7083      	strb	r3, [r0, #2]
 8009410:	1d02      	adds	r2, r0, #4
 8009412:	70c1      	strb	r1, [r0, #3]
 8009414:	e7ef      	b.n	80093f6 <__exponent+0x46>
	...

08009418 <_printf_float>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	b08d      	sub	sp, #52	; 0x34
 800941e:	460c      	mov	r4, r1
 8009420:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009424:	4616      	mov	r6, r2
 8009426:	461f      	mov	r7, r3
 8009428:	4605      	mov	r5, r0
 800942a:	f002 fe1d 	bl	800c068 <_localeconv_r>
 800942e:	6803      	ldr	r3, [r0, #0]
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	4618      	mov	r0, r3
 8009434:	f7f6 fef4 	bl	8000220 <strlen>
 8009438:	2300      	movs	r3, #0
 800943a:	930a      	str	r3, [sp, #40]	; 0x28
 800943c:	f8d8 3000 	ldr.w	r3, [r8]
 8009440:	9005      	str	r0, [sp, #20]
 8009442:	3307      	adds	r3, #7
 8009444:	f023 0307 	bic.w	r3, r3, #7
 8009448:	f103 0208 	add.w	r2, r3, #8
 800944c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009450:	f8d4 b000 	ldr.w	fp, [r4]
 8009454:	f8c8 2000 	str.w	r2, [r8]
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009460:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009464:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009468:	9307      	str	r3, [sp, #28]
 800946a:	f8cd 8018 	str.w	r8, [sp, #24]
 800946e:	f04f 32ff 	mov.w	r2, #4294967295
 8009472:	4ba7      	ldr	r3, [pc, #668]	; (8009710 <_printf_float+0x2f8>)
 8009474:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009478:	f7f7 fb80 	bl	8000b7c <__aeabi_dcmpun>
 800947c:	bb70      	cbnz	r0, 80094dc <_printf_float+0xc4>
 800947e:	f04f 32ff 	mov.w	r2, #4294967295
 8009482:	4ba3      	ldr	r3, [pc, #652]	; (8009710 <_printf_float+0x2f8>)
 8009484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009488:	f7f7 fb5a 	bl	8000b40 <__aeabi_dcmple>
 800948c:	bb30      	cbnz	r0, 80094dc <_printf_float+0xc4>
 800948e:	2200      	movs	r2, #0
 8009490:	2300      	movs	r3, #0
 8009492:	4640      	mov	r0, r8
 8009494:	4649      	mov	r1, r9
 8009496:	f7f7 fb49 	bl	8000b2c <__aeabi_dcmplt>
 800949a:	b110      	cbz	r0, 80094a2 <_printf_float+0x8a>
 800949c:	232d      	movs	r3, #45	; 0x2d
 800949e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094a2:	4a9c      	ldr	r2, [pc, #624]	; (8009714 <_printf_float+0x2fc>)
 80094a4:	4b9c      	ldr	r3, [pc, #624]	; (8009718 <_printf_float+0x300>)
 80094a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80094aa:	bf8c      	ite	hi
 80094ac:	4690      	movhi	r8, r2
 80094ae:	4698      	movls	r8, r3
 80094b0:	2303      	movs	r3, #3
 80094b2:	f02b 0204 	bic.w	r2, fp, #4
 80094b6:	6123      	str	r3, [r4, #16]
 80094b8:	6022      	str	r2, [r4, #0]
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	9700      	str	r7, [sp, #0]
 80094c0:	4633      	mov	r3, r6
 80094c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80094c4:	4621      	mov	r1, r4
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f9e6 	bl	8009898 <_printf_common>
 80094cc:	3001      	adds	r0, #1
 80094ce:	f040 808d 	bne.w	80095ec <_printf_float+0x1d4>
 80094d2:	f04f 30ff 	mov.w	r0, #4294967295
 80094d6:	b00d      	add	sp, #52	; 0x34
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094dc:	4642      	mov	r2, r8
 80094de:	464b      	mov	r3, r9
 80094e0:	4640      	mov	r0, r8
 80094e2:	4649      	mov	r1, r9
 80094e4:	f7f7 fb4a 	bl	8000b7c <__aeabi_dcmpun>
 80094e8:	b110      	cbz	r0, 80094f0 <_printf_float+0xd8>
 80094ea:	4a8c      	ldr	r2, [pc, #560]	; (800971c <_printf_float+0x304>)
 80094ec:	4b8c      	ldr	r3, [pc, #560]	; (8009720 <_printf_float+0x308>)
 80094ee:	e7da      	b.n	80094a6 <_printf_float+0x8e>
 80094f0:	6861      	ldr	r1, [r4, #4]
 80094f2:	1c4b      	adds	r3, r1, #1
 80094f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80094f8:	a80a      	add	r0, sp, #40	; 0x28
 80094fa:	d13e      	bne.n	800957a <_printf_float+0x162>
 80094fc:	2306      	movs	r3, #6
 80094fe:	6063      	str	r3, [r4, #4]
 8009500:	2300      	movs	r3, #0
 8009502:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009506:	ab09      	add	r3, sp, #36	; 0x24
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	ec49 8b10 	vmov	d0, r8, r9
 800950e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	f8cd a004 	str.w	sl, [sp, #4]
 8009518:	6861      	ldr	r1, [r4, #4]
 800951a:	4628      	mov	r0, r5
 800951c:	f7ff fee7 	bl	80092ee <__cvt>
 8009520:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009524:	2b47      	cmp	r3, #71	; 0x47
 8009526:	4680      	mov	r8, r0
 8009528:	d109      	bne.n	800953e <_printf_float+0x126>
 800952a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952c:	1cd8      	adds	r0, r3, #3
 800952e:	db02      	blt.n	8009536 <_printf_float+0x11e>
 8009530:	6862      	ldr	r2, [r4, #4]
 8009532:	4293      	cmp	r3, r2
 8009534:	dd47      	ble.n	80095c6 <_printf_float+0x1ae>
 8009536:	f1aa 0a02 	sub.w	sl, sl, #2
 800953a:	fa5f fa8a 	uxtb.w	sl, sl
 800953e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009542:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009544:	d824      	bhi.n	8009590 <_printf_float+0x178>
 8009546:	3901      	subs	r1, #1
 8009548:	4652      	mov	r2, sl
 800954a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800954e:	9109      	str	r1, [sp, #36]	; 0x24
 8009550:	f7ff ff2e 	bl	80093b0 <__exponent>
 8009554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009556:	1813      	adds	r3, r2, r0
 8009558:	2a01      	cmp	r2, #1
 800955a:	4681      	mov	r9, r0
 800955c:	6123      	str	r3, [r4, #16]
 800955e:	dc02      	bgt.n	8009566 <_printf_float+0x14e>
 8009560:	6822      	ldr	r2, [r4, #0]
 8009562:	07d1      	lsls	r1, r2, #31
 8009564:	d501      	bpl.n	800956a <_printf_float+0x152>
 8009566:	3301      	adds	r3, #1
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0a5      	beq.n	80094be <_printf_float+0xa6>
 8009572:	232d      	movs	r3, #45	; 0x2d
 8009574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009578:	e7a1      	b.n	80094be <_printf_float+0xa6>
 800957a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800957e:	f000 8177 	beq.w	8009870 <_printf_float+0x458>
 8009582:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009586:	d1bb      	bne.n	8009500 <_printf_float+0xe8>
 8009588:	2900      	cmp	r1, #0
 800958a:	d1b9      	bne.n	8009500 <_printf_float+0xe8>
 800958c:	2301      	movs	r3, #1
 800958e:	e7b6      	b.n	80094fe <_printf_float+0xe6>
 8009590:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009594:	d119      	bne.n	80095ca <_printf_float+0x1b2>
 8009596:	2900      	cmp	r1, #0
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	dd0c      	ble.n	80095b6 <_printf_float+0x19e>
 800959c:	6121      	str	r1, [r4, #16]
 800959e:	b913      	cbnz	r3, 80095a6 <_printf_float+0x18e>
 80095a0:	6822      	ldr	r2, [r4, #0]
 80095a2:	07d2      	lsls	r2, r2, #31
 80095a4:	d502      	bpl.n	80095ac <_printf_float+0x194>
 80095a6:	3301      	adds	r3, #1
 80095a8:	440b      	add	r3, r1
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80095b0:	f04f 0900 	mov.w	r9, #0
 80095b4:	e7d9      	b.n	800956a <_printf_float+0x152>
 80095b6:	b913      	cbnz	r3, 80095be <_printf_float+0x1a6>
 80095b8:	6822      	ldr	r2, [r4, #0]
 80095ba:	07d0      	lsls	r0, r2, #31
 80095bc:	d501      	bpl.n	80095c2 <_printf_float+0x1aa>
 80095be:	3302      	adds	r3, #2
 80095c0:	e7f3      	b.n	80095aa <_printf_float+0x192>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e7f1      	b.n	80095aa <_printf_float+0x192>
 80095c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80095ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095ce:	4293      	cmp	r3, r2
 80095d0:	db05      	blt.n	80095de <_printf_float+0x1c6>
 80095d2:	6822      	ldr	r2, [r4, #0]
 80095d4:	6123      	str	r3, [r4, #16]
 80095d6:	07d1      	lsls	r1, r2, #31
 80095d8:	d5e8      	bpl.n	80095ac <_printf_float+0x194>
 80095da:	3301      	adds	r3, #1
 80095dc:	e7e5      	b.n	80095aa <_printf_float+0x192>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	bfd4      	ite	le
 80095e2:	f1c3 0302 	rsble	r3, r3, #2
 80095e6:	2301      	movgt	r3, #1
 80095e8:	4413      	add	r3, r2
 80095ea:	e7de      	b.n	80095aa <_printf_float+0x192>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	055a      	lsls	r2, r3, #21
 80095f0:	d407      	bmi.n	8009602 <_printf_float+0x1ea>
 80095f2:	6923      	ldr	r3, [r4, #16]
 80095f4:	4642      	mov	r2, r8
 80095f6:	4631      	mov	r1, r6
 80095f8:	4628      	mov	r0, r5
 80095fa:	47b8      	blx	r7
 80095fc:	3001      	adds	r0, #1
 80095fe:	d12b      	bne.n	8009658 <_printf_float+0x240>
 8009600:	e767      	b.n	80094d2 <_printf_float+0xba>
 8009602:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009606:	f240 80dc 	bls.w	80097c2 <_printf_float+0x3aa>
 800960a:	2200      	movs	r2, #0
 800960c:	2300      	movs	r3, #0
 800960e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009612:	f7f7 fa81 	bl	8000b18 <__aeabi_dcmpeq>
 8009616:	2800      	cmp	r0, #0
 8009618:	d033      	beq.n	8009682 <_printf_float+0x26a>
 800961a:	2301      	movs	r3, #1
 800961c:	4a41      	ldr	r2, [pc, #260]	; (8009724 <_printf_float+0x30c>)
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f af54 	beq.w	80094d2 <_printf_float+0xba>
 800962a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800962e:	429a      	cmp	r2, r3
 8009630:	db02      	blt.n	8009638 <_printf_float+0x220>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	07d8      	lsls	r0, r3, #31
 8009636:	d50f      	bpl.n	8009658 <_printf_float+0x240>
 8009638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	47b8      	blx	r7
 8009642:	3001      	adds	r0, #1
 8009644:	f43f af45 	beq.w	80094d2 <_printf_float+0xba>
 8009648:	f04f 0800 	mov.w	r8, #0
 800964c:	f104 091a 	add.w	r9, r4, #26
 8009650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009652:	3b01      	subs	r3, #1
 8009654:	4543      	cmp	r3, r8
 8009656:	dc09      	bgt.n	800966c <_printf_float+0x254>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	079b      	lsls	r3, r3, #30
 800965c:	f100 8103 	bmi.w	8009866 <_printf_float+0x44e>
 8009660:	68e0      	ldr	r0, [r4, #12]
 8009662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009664:	4298      	cmp	r0, r3
 8009666:	bfb8      	it	lt
 8009668:	4618      	movlt	r0, r3
 800966a:	e734      	b.n	80094d6 <_printf_float+0xbe>
 800966c:	2301      	movs	r3, #1
 800966e:	464a      	mov	r2, r9
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	f43f af2b 	beq.w	80094d2 <_printf_float+0xba>
 800967c:	f108 0801 	add.w	r8, r8, #1
 8009680:	e7e6      	b.n	8009650 <_printf_float+0x238>
 8009682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009684:	2b00      	cmp	r3, #0
 8009686:	dc2b      	bgt.n	80096e0 <_printf_float+0x2c8>
 8009688:	2301      	movs	r3, #1
 800968a:	4a26      	ldr	r2, [pc, #152]	; (8009724 <_printf_float+0x30c>)
 800968c:	4631      	mov	r1, r6
 800968e:	4628      	mov	r0, r5
 8009690:	47b8      	blx	r7
 8009692:	3001      	adds	r0, #1
 8009694:	f43f af1d 	beq.w	80094d2 <_printf_float+0xba>
 8009698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969a:	b923      	cbnz	r3, 80096a6 <_printf_float+0x28e>
 800969c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969e:	b913      	cbnz	r3, 80096a6 <_printf_float+0x28e>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	07d9      	lsls	r1, r3, #31
 80096a4:	d5d8      	bpl.n	8009658 <_printf_float+0x240>
 80096a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b8      	blx	r7
 80096b0:	3001      	adds	r0, #1
 80096b2:	f43f af0e 	beq.w	80094d2 <_printf_float+0xba>
 80096b6:	f04f 0900 	mov.w	r9, #0
 80096ba:	f104 0a1a 	add.w	sl, r4, #26
 80096be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c0:	425b      	negs	r3, r3
 80096c2:	454b      	cmp	r3, r9
 80096c4:	dc01      	bgt.n	80096ca <_printf_float+0x2b2>
 80096c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c8:	e794      	b.n	80095f4 <_printf_float+0x1dc>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4652      	mov	r2, sl
 80096ce:	4631      	mov	r1, r6
 80096d0:	4628      	mov	r0, r5
 80096d2:	47b8      	blx	r7
 80096d4:	3001      	adds	r0, #1
 80096d6:	f43f aefc 	beq.w	80094d2 <_printf_float+0xba>
 80096da:	f109 0901 	add.w	r9, r9, #1
 80096de:	e7ee      	b.n	80096be <_printf_float+0x2a6>
 80096e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096e4:	429a      	cmp	r2, r3
 80096e6:	bfa8      	it	ge
 80096e8:	461a      	movge	r2, r3
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	4691      	mov	r9, r2
 80096ee:	dd07      	ble.n	8009700 <_printf_float+0x2e8>
 80096f0:	4613      	mov	r3, r2
 80096f2:	4631      	mov	r1, r6
 80096f4:	4642      	mov	r2, r8
 80096f6:	4628      	mov	r0, r5
 80096f8:	47b8      	blx	r7
 80096fa:	3001      	adds	r0, #1
 80096fc:	f43f aee9 	beq.w	80094d2 <_printf_float+0xba>
 8009700:	f104 031a 	add.w	r3, r4, #26
 8009704:	f04f 0b00 	mov.w	fp, #0
 8009708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800970c:	9306      	str	r3, [sp, #24]
 800970e:	e015      	b.n	800973c <_printf_float+0x324>
 8009710:	7fefffff 	.word	0x7fefffff
 8009714:	0800edca 	.word	0x0800edca
 8009718:	0800edc6 	.word	0x0800edc6
 800971c:	0800edd2 	.word	0x0800edd2
 8009720:	0800edce 	.word	0x0800edce
 8009724:	0800edd6 	.word	0x0800edd6
 8009728:	2301      	movs	r3, #1
 800972a:	9a06      	ldr	r2, [sp, #24]
 800972c:	4631      	mov	r1, r6
 800972e:	4628      	mov	r0, r5
 8009730:	47b8      	blx	r7
 8009732:	3001      	adds	r0, #1
 8009734:	f43f aecd 	beq.w	80094d2 <_printf_float+0xba>
 8009738:	f10b 0b01 	add.w	fp, fp, #1
 800973c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009740:	ebaa 0309 	sub.w	r3, sl, r9
 8009744:	455b      	cmp	r3, fp
 8009746:	dcef      	bgt.n	8009728 <_printf_float+0x310>
 8009748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800974c:	429a      	cmp	r2, r3
 800974e:	44d0      	add	r8, sl
 8009750:	db15      	blt.n	800977e <_printf_float+0x366>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	07da      	lsls	r2, r3, #31
 8009756:	d412      	bmi.n	800977e <_printf_float+0x366>
 8009758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800975c:	eba3 020a 	sub.w	r2, r3, sl
 8009760:	eba3 0a01 	sub.w	sl, r3, r1
 8009764:	4592      	cmp	sl, r2
 8009766:	bfa8      	it	ge
 8009768:	4692      	movge	sl, r2
 800976a:	f1ba 0f00 	cmp.w	sl, #0
 800976e:	dc0e      	bgt.n	800978e <_printf_float+0x376>
 8009770:	f04f 0800 	mov.w	r8, #0
 8009774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009778:	f104 091a 	add.w	r9, r4, #26
 800977c:	e019      	b.n	80097b2 <_printf_float+0x39a>
 800977e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009782:	4631      	mov	r1, r6
 8009784:	4628      	mov	r0, r5
 8009786:	47b8      	blx	r7
 8009788:	3001      	adds	r0, #1
 800978a:	d1e5      	bne.n	8009758 <_printf_float+0x340>
 800978c:	e6a1      	b.n	80094d2 <_printf_float+0xba>
 800978e:	4653      	mov	r3, sl
 8009790:	4642      	mov	r2, r8
 8009792:	4631      	mov	r1, r6
 8009794:	4628      	mov	r0, r5
 8009796:	47b8      	blx	r7
 8009798:	3001      	adds	r0, #1
 800979a:	d1e9      	bne.n	8009770 <_printf_float+0x358>
 800979c:	e699      	b.n	80094d2 <_printf_float+0xba>
 800979e:	2301      	movs	r3, #1
 80097a0:	464a      	mov	r2, r9
 80097a2:	4631      	mov	r1, r6
 80097a4:	4628      	mov	r0, r5
 80097a6:	47b8      	blx	r7
 80097a8:	3001      	adds	r0, #1
 80097aa:	f43f ae92 	beq.w	80094d2 <_printf_float+0xba>
 80097ae:	f108 0801 	add.w	r8, r8, #1
 80097b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097b6:	1a9b      	subs	r3, r3, r2
 80097b8:	eba3 030a 	sub.w	r3, r3, sl
 80097bc:	4543      	cmp	r3, r8
 80097be:	dcee      	bgt.n	800979e <_printf_float+0x386>
 80097c0:	e74a      	b.n	8009658 <_printf_float+0x240>
 80097c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c4:	2a01      	cmp	r2, #1
 80097c6:	dc01      	bgt.n	80097cc <_printf_float+0x3b4>
 80097c8:	07db      	lsls	r3, r3, #31
 80097ca:	d53a      	bpl.n	8009842 <_printf_float+0x42a>
 80097cc:	2301      	movs	r3, #1
 80097ce:	4642      	mov	r2, r8
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f ae7b 	beq.w	80094d2 <_printf_float+0xba>
 80097dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097e0:	4631      	mov	r1, r6
 80097e2:	4628      	mov	r0, r5
 80097e4:	47b8      	blx	r7
 80097e6:	3001      	adds	r0, #1
 80097e8:	f108 0801 	add.w	r8, r8, #1
 80097ec:	f43f ae71 	beq.w	80094d2 <_printf_float+0xba>
 80097f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f2:	2200      	movs	r2, #0
 80097f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80097f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097fc:	2300      	movs	r3, #0
 80097fe:	f7f7 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 8009802:	b9c8      	cbnz	r0, 8009838 <_printf_float+0x420>
 8009804:	4653      	mov	r3, sl
 8009806:	4642      	mov	r2, r8
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	d10e      	bne.n	8009830 <_printf_float+0x418>
 8009812:	e65e      	b.n	80094d2 <_printf_float+0xba>
 8009814:	2301      	movs	r3, #1
 8009816:	4652      	mov	r2, sl
 8009818:	4631      	mov	r1, r6
 800981a:	4628      	mov	r0, r5
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f ae57 	beq.w	80094d2 <_printf_float+0xba>
 8009824:	f108 0801 	add.w	r8, r8, #1
 8009828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982a:	3b01      	subs	r3, #1
 800982c:	4543      	cmp	r3, r8
 800982e:	dcf1      	bgt.n	8009814 <_printf_float+0x3fc>
 8009830:	464b      	mov	r3, r9
 8009832:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009836:	e6de      	b.n	80095f6 <_printf_float+0x1de>
 8009838:	f04f 0800 	mov.w	r8, #0
 800983c:	f104 0a1a 	add.w	sl, r4, #26
 8009840:	e7f2      	b.n	8009828 <_printf_float+0x410>
 8009842:	2301      	movs	r3, #1
 8009844:	e7df      	b.n	8009806 <_printf_float+0x3ee>
 8009846:	2301      	movs	r3, #1
 8009848:	464a      	mov	r2, r9
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	47b8      	blx	r7
 8009850:	3001      	adds	r0, #1
 8009852:	f43f ae3e 	beq.w	80094d2 <_printf_float+0xba>
 8009856:	f108 0801 	add.w	r8, r8, #1
 800985a:	68e3      	ldr	r3, [r4, #12]
 800985c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800985e:	1a9b      	subs	r3, r3, r2
 8009860:	4543      	cmp	r3, r8
 8009862:	dcf0      	bgt.n	8009846 <_printf_float+0x42e>
 8009864:	e6fc      	b.n	8009660 <_printf_float+0x248>
 8009866:	f04f 0800 	mov.w	r8, #0
 800986a:	f104 0919 	add.w	r9, r4, #25
 800986e:	e7f4      	b.n	800985a <_printf_float+0x442>
 8009870:	2900      	cmp	r1, #0
 8009872:	f43f ae8b 	beq.w	800958c <_printf_float+0x174>
 8009876:	2300      	movs	r3, #0
 8009878:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800987c:	ab09      	add	r3, sp, #36	; 0x24
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	ec49 8b10 	vmov	d0, r8, r9
 8009884:	6022      	str	r2, [r4, #0]
 8009886:	f8cd a004 	str.w	sl, [sp, #4]
 800988a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800988e:	4628      	mov	r0, r5
 8009890:	f7ff fd2d 	bl	80092ee <__cvt>
 8009894:	4680      	mov	r8, r0
 8009896:	e648      	b.n	800952a <_printf_float+0x112>

08009898 <_printf_common>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	4691      	mov	r9, r2
 800989e:	461f      	mov	r7, r3
 80098a0:	688a      	ldr	r2, [r1, #8]
 80098a2:	690b      	ldr	r3, [r1, #16]
 80098a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	bfb8      	it	lt
 80098ac:	4613      	movlt	r3, r2
 80098ae:	f8c9 3000 	str.w	r3, [r9]
 80098b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098b6:	4606      	mov	r6, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	b112      	cbz	r2, 80098c2 <_printf_common+0x2a>
 80098bc:	3301      	adds	r3, #1
 80098be:	f8c9 3000 	str.w	r3, [r9]
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	0699      	lsls	r1, r3, #26
 80098c6:	bf42      	ittt	mi
 80098c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80098cc:	3302      	addmi	r3, #2
 80098ce:	f8c9 3000 	strmi.w	r3, [r9]
 80098d2:	6825      	ldr	r5, [r4, #0]
 80098d4:	f015 0506 	ands.w	r5, r5, #6
 80098d8:	d107      	bne.n	80098ea <_printf_common+0x52>
 80098da:	f104 0a19 	add.w	sl, r4, #25
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	f8d9 2000 	ldr.w	r2, [r9]
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	42ab      	cmp	r3, r5
 80098e8:	dc28      	bgt.n	800993c <_printf_common+0xa4>
 80098ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80098ee:	6822      	ldr	r2, [r4, #0]
 80098f0:	3300      	adds	r3, #0
 80098f2:	bf18      	it	ne
 80098f4:	2301      	movne	r3, #1
 80098f6:	0692      	lsls	r2, r2, #26
 80098f8:	d42d      	bmi.n	8009956 <_printf_common+0xbe>
 80098fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098fe:	4639      	mov	r1, r7
 8009900:	4630      	mov	r0, r6
 8009902:	47c0      	blx	r8
 8009904:	3001      	adds	r0, #1
 8009906:	d020      	beq.n	800994a <_printf_common+0xb2>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	68e5      	ldr	r5, [r4, #12]
 800990c:	f8d9 2000 	ldr.w	r2, [r9]
 8009910:	f003 0306 	and.w	r3, r3, #6
 8009914:	2b04      	cmp	r3, #4
 8009916:	bf08      	it	eq
 8009918:	1aad      	subeq	r5, r5, r2
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	6922      	ldr	r2, [r4, #16]
 800991e:	bf0c      	ite	eq
 8009920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009924:	2500      	movne	r5, #0
 8009926:	4293      	cmp	r3, r2
 8009928:	bfc4      	itt	gt
 800992a:	1a9b      	subgt	r3, r3, r2
 800992c:	18ed      	addgt	r5, r5, r3
 800992e:	f04f 0900 	mov.w	r9, #0
 8009932:	341a      	adds	r4, #26
 8009934:	454d      	cmp	r5, r9
 8009936:	d11a      	bne.n	800996e <_printf_common+0xd6>
 8009938:	2000      	movs	r0, #0
 800993a:	e008      	b.n	800994e <_printf_common+0xb6>
 800993c:	2301      	movs	r3, #1
 800993e:	4652      	mov	r2, sl
 8009940:	4639      	mov	r1, r7
 8009942:	4630      	mov	r0, r6
 8009944:	47c0      	blx	r8
 8009946:	3001      	adds	r0, #1
 8009948:	d103      	bne.n	8009952 <_printf_common+0xba>
 800994a:	f04f 30ff 	mov.w	r0, #4294967295
 800994e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009952:	3501      	adds	r5, #1
 8009954:	e7c3      	b.n	80098de <_printf_common+0x46>
 8009956:	18e1      	adds	r1, r4, r3
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	2030      	movs	r0, #48	; 0x30
 800995c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009960:	4422      	add	r2, r4
 8009962:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009966:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800996a:	3302      	adds	r3, #2
 800996c:	e7c5      	b.n	80098fa <_printf_common+0x62>
 800996e:	2301      	movs	r3, #1
 8009970:	4622      	mov	r2, r4
 8009972:	4639      	mov	r1, r7
 8009974:	4630      	mov	r0, r6
 8009976:	47c0      	blx	r8
 8009978:	3001      	adds	r0, #1
 800997a:	d0e6      	beq.n	800994a <_printf_common+0xb2>
 800997c:	f109 0901 	add.w	r9, r9, #1
 8009980:	e7d8      	b.n	8009934 <_printf_common+0x9c>
	...

08009984 <_printf_i>:
 8009984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009988:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800998c:	460c      	mov	r4, r1
 800998e:	7e09      	ldrb	r1, [r1, #24]
 8009990:	b085      	sub	sp, #20
 8009992:	296e      	cmp	r1, #110	; 0x6e
 8009994:	4617      	mov	r7, r2
 8009996:	4606      	mov	r6, r0
 8009998:	4698      	mov	r8, r3
 800999a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800999c:	f000 80b3 	beq.w	8009b06 <_printf_i+0x182>
 80099a0:	d822      	bhi.n	80099e8 <_printf_i+0x64>
 80099a2:	2963      	cmp	r1, #99	; 0x63
 80099a4:	d036      	beq.n	8009a14 <_printf_i+0x90>
 80099a6:	d80a      	bhi.n	80099be <_printf_i+0x3a>
 80099a8:	2900      	cmp	r1, #0
 80099aa:	f000 80b9 	beq.w	8009b20 <_printf_i+0x19c>
 80099ae:	2958      	cmp	r1, #88	; 0x58
 80099b0:	f000 8083 	beq.w	8009aba <_printf_i+0x136>
 80099b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80099bc:	e032      	b.n	8009a24 <_printf_i+0xa0>
 80099be:	2964      	cmp	r1, #100	; 0x64
 80099c0:	d001      	beq.n	80099c6 <_printf_i+0x42>
 80099c2:	2969      	cmp	r1, #105	; 0x69
 80099c4:	d1f6      	bne.n	80099b4 <_printf_i+0x30>
 80099c6:	6820      	ldr	r0, [r4, #0]
 80099c8:	6813      	ldr	r3, [r2, #0]
 80099ca:	0605      	lsls	r5, r0, #24
 80099cc:	f103 0104 	add.w	r1, r3, #4
 80099d0:	d52a      	bpl.n	8009a28 <_printf_i+0xa4>
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	da03      	bge.n	80099e2 <_printf_i+0x5e>
 80099da:	222d      	movs	r2, #45	; 0x2d
 80099dc:	425b      	negs	r3, r3
 80099de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80099e2:	486f      	ldr	r0, [pc, #444]	; (8009ba0 <_printf_i+0x21c>)
 80099e4:	220a      	movs	r2, #10
 80099e6:	e039      	b.n	8009a5c <_printf_i+0xd8>
 80099e8:	2973      	cmp	r1, #115	; 0x73
 80099ea:	f000 809d 	beq.w	8009b28 <_printf_i+0x1a4>
 80099ee:	d808      	bhi.n	8009a02 <_printf_i+0x7e>
 80099f0:	296f      	cmp	r1, #111	; 0x6f
 80099f2:	d020      	beq.n	8009a36 <_printf_i+0xb2>
 80099f4:	2970      	cmp	r1, #112	; 0x70
 80099f6:	d1dd      	bne.n	80099b4 <_printf_i+0x30>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	f043 0320 	orr.w	r3, r3, #32
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	e003      	b.n	8009a0a <_printf_i+0x86>
 8009a02:	2975      	cmp	r1, #117	; 0x75
 8009a04:	d017      	beq.n	8009a36 <_printf_i+0xb2>
 8009a06:	2978      	cmp	r1, #120	; 0x78
 8009a08:	d1d4      	bne.n	80099b4 <_printf_i+0x30>
 8009a0a:	2378      	movs	r3, #120	; 0x78
 8009a0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a10:	4864      	ldr	r0, [pc, #400]	; (8009ba4 <_printf_i+0x220>)
 8009a12:	e055      	b.n	8009ac0 <_printf_i+0x13c>
 8009a14:	6813      	ldr	r3, [r2, #0]
 8009a16:	1d19      	adds	r1, r3, #4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6011      	str	r1, [r2, #0]
 8009a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a24:	2301      	movs	r3, #1
 8009a26:	e08c      	b.n	8009b42 <_printf_i+0x1be>
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6011      	str	r1, [r2, #0]
 8009a2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a30:	bf18      	it	ne
 8009a32:	b21b      	sxthne	r3, r3
 8009a34:	e7cf      	b.n	80099d6 <_printf_i+0x52>
 8009a36:	6813      	ldr	r3, [r2, #0]
 8009a38:	6825      	ldr	r5, [r4, #0]
 8009a3a:	1d18      	adds	r0, r3, #4
 8009a3c:	6010      	str	r0, [r2, #0]
 8009a3e:	0628      	lsls	r0, r5, #24
 8009a40:	d501      	bpl.n	8009a46 <_printf_i+0xc2>
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	e002      	b.n	8009a4c <_printf_i+0xc8>
 8009a46:	0668      	lsls	r0, r5, #25
 8009a48:	d5fb      	bpl.n	8009a42 <_printf_i+0xbe>
 8009a4a:	881b      	ldrh	r3, [r3, #0]
 8009a4c:	4854      	ldr	r0, [pc, #336]	; (8009ba0 <_printf_i+0x21c>)
 8009a4e:	296f      	cmp	r1, #111	; 0x6f
 8009a50:	bf14      	ite	ne
 8009a52:	220a      	movne	r2, #10
 8009a54:	2208      	moveq	r2, #8
 8009a56:	2100      	movs	r1, #0
 8009a58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a5c:	6865      	ldr	r5, [r4, #4]
 8009a5e:	60a5      	str	r5, [r4, #8]
 8009a60:	2d00      	cmp	r5, #0
 8009a62:	f2c0 8095 	blt.w	8009b90 <_printf_i+0x20c>
 8009a66:	6821      	ldr	r1, [r4, #0]
 8009a68:	f021 0104 	bic.w	r1, r1, #4
 8009a6c:	6021      	str	r1, [r4, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d13d      	bne.n	8009aee <_printf_i+0x16a>
 8009a72:	2d00      	cmp	r5, #0
 8009a74:	f040 808e 	bne.w	8009b94 <_printf_i+0x210>
 8009a78:	4665      	mov	r5, ip
 8009a7a:	2a08      	cmp	r2, #8
 8009a7c:	d10b      	bne.n	8009a96 <_printf_i+0x112>
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	07db      	lsls	r3, r3, #31
 8009a82:	d508      	bpl.n	8009a96 <_printf_i+0x112>
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	6862      	ldr	r2, [r4, #4]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	bfde      	ittt	le
 8009a8c:	2330      	movle	r3, #48	; 0x30
 8009a8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a96:	ebac 0305 	sub.w	r3, ip, r5
 8009a9a:	6123      	str	r3, [r4, #16]
 8009a9c:	f8cd 8000 	str.w	r8, [sp]
 8009aa0:	463b      	mov	r3, r7
 8009aa2:	aa03      	add	r2, sp, #12
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f7ff fef6 	bl	8009898 <_printf_common>
 8009aac:	3001      	adds	r0, #1
 8009aae:	d14d      	bne.n	8009b4c <_printf_i+0x1c8>
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	b005      	add	sp, #20
 8009ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aba:	4839      	ldr	r0, [pc, #228]	; (8009ba0 <_printf_i+0x21c>)
 8009abc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009ac0:	6813      	ldr	r3, [r2, #0]
 8009ac2:	6821      	ldr	r1, [r4, #0]
 8009ac4:	1d1d      	adds	r5, r3, #4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6015      	str	r5, [r2, #0]
 8009aca:	060a      	lsls	r2, r1, #24
 8009acc:	d50b      	bpl.n	8009ae6 <_printf_i+0x162>
 8009ace:	07ca      	lsls	r2, r1, #31
 8009ad0:	bf44      	itt	mi
 8009ad2:	f041 0120 	orrmi.w	r1, r1, #32
 8009ad6:	6021      	strmi	r1, [r4, #0]
 8009ad8:	b91b      	cbnz	r3, 8009ae2 <_printf_i+0x15e>
 8009ada:	6822      	ldr	r2, [r4, #0]
 8009adc:	f022 0220 	bic.w	r2, r2, #32
 8009ae0:	6022      	str	r2, [r4, #0]
 8009ae2:	2210      	movs	r2, #16
 8009ae4:	e7b7      	b.n	8009a56 <_printf_i+0xd2>
 8009ae6:	064d      	lsls	r5, r1, #25
 8009ae8:	bf48      	it	mi
 8009aea:	b29b      	uxthmi	r3, r3
 8009aec:	e7ef      	b.n	8009ace <_printf_i+0x14a>
 8009aee:	4665      	mov	r5, ip
 8009af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009af4:	fb02 3311 	mls	r3, r2, r1, r3
 8009af8:	5cc3      	ldrb	r3, [r0, r3]
 8009afa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009afe:	460b      	mov	r3, r1
 8009b00:	2900      	cmp	r1, #0
 8009b02:	d1f5      	bne.n	8009af0 <_printf_i+0x16c>
 8009b04:	e7b9      	b.n	8009a7a <_printf_i+0xf6>
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	6825      	ldr	r5, [r4, #0]
 8009b0a:	6961      	ldr	r1, [r4, #20]
 8009b0c:	1d18      	adds	r0, r3, #4
 8009b0e:	6010      	str	r0, [r2, #0]
 8009b10:	0628      	lsls	r0, r5, #24
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	d501      	bpl.n	8009b1a <_printf_i+0x196>
 8009b16:	6019      	str	r1, [r3, #0]
 8009b18:	e002      	b.n	8009b20 <_printf_i+0x19c>
 8009b1a:	066a      	lsls	r2, r5, #25
 8009b1c:	d5fb      	bpl.n	8009b16 <_printf_i+0x192>
 8009b1e:	8019      	strh	r1, [r3, #0]
 8009b20:	2300      	movs	r3, #0
 8009b22:	6123      	str	r3, [r4, #16]
 8009b24:	4665      	mov	r5, ip
 8009b26:	e7b9      	b.n	8009a9c <_printf_i+0x118>
 8009b28:	6813      	ldr	r3, [r2, #0]
 8009b2a:	1d19      	adds	r1, r3, #4
 8009b2c:	6011      	str	r1, [r2, #0]
 8009b2e:	681d      	ldr	r5, [r3, #0]
 8009b30:	6862      	ldr	r2, [r4, #4]
 8009b32:	2100      	movs	r1, #0
 8009b34:	4628      	mov	r0, r5
 8009b36:	f7f6 fb7b 	bl	8000230 <memchr>
 8009b3a:	b108      	cbz	r0, 8009b40 <_printf_i+0x1bc>
 8009b3c:	1b40      	subs	r0, r0, r5
 8009b3e:	6060      	str	r0, [r4, #4]
 8009b40:	6863      	ldr	r3, [r4, #4]
 8009b42:	6123      	str	r3, [r4, #16]
 8009b44:	2300      	movs	r3, #0
 8009b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b4a:	e7a7      	b.n	8009a9c <_printf_i+0x118>
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	462a      	mov	r2, r5
 8009b50:	4639      	mov	r1, r7
 8009b52:	4630      	mov	r0, r6
 8009b54:	47c0      	blx	r8
 8009b56:	3001      	adds	r0, #1
 8009b58:	d0aa      	beq.n	8009ab0 <_printf_i+0x12c>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	079b      	lsls	r3, r3, #30
 8009b5e:	d413      	bmi.n	8009b88 <_printf_i+0x204>
 8009b60:	68e0      	ldr	r0, [r4, #12]
 8009b62:	9b03      	ldr	r3, [sp, #12]
 8009b64:	4298      	cmp	r0, r3
 8009b66:	bfb8      	it	lt
 8009b68:	4618      	movlt	r0, r3
 8009b6a:	e7a3      	b.n	8009ab4 <_printf_i+0x130>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	464a      	mov	r2, r9
 8009b70:	4639      	mov	r1, r7
 8009b72:	4630      	mov	r0, r6
 8009b74:	47c0      	blx	r8
 8009b76:	3001      	adds	r0, #1
 8009b78:	d09a      	beq.n	8009ab0 <_printf_i+0x12c>
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	68e3      	ldr	r3, [r4, #12]
 8009b7e:	9a03      	ldr	r2, [sp, #12]
 8009b80:	1a9b      	subs	r3, r3, r2
 8009b82:	42ab      	cmp	r3, r5
 8009b84:	dcf2      	bgt.n	8009b6c <_printf_i+0x1e8>
 8009b86:	e7eb      	b.n	8009b60 <_printf_i+0x1dc>
 8009b88:	2500      	movs	r5, #0
 8009b8a:	f104 0919 	add.w	r9, r4, #25
 8009b8e:	e7f5      	b.n	8009b7c <_printf_i+0x1f8>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1ac      	bne.n	8009aee <_printf_i+0x16a>
 8009b94:	7803      	ldrb	r3, [r0, #0]
 8009b96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b9e:	e76c      	b.n	8009a7a <_printf_i+0xf6>
 8009ba0:	0800edd8 	.word	0x0800edd8
 8009ba4:	0800ede9 	.word	0x0800ede9

08009ba8 <_scanf_float>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	469a      	mov	sl, r3
 8009bae:	688b      	ldr	r3, [r1, #8]
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	1e5a      	subs	r2, r3, #1
 8009bb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009bb8:	b087      	sub	sp, #28
 8009bba:	bf83      	ittte	hi
 8009bbc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009bc0:	189b      	addhi	r3, r3, r2
 8009bc2:	9301      	strhi	r3, [sp, #4]
 8009bc4:	2300      	movls	r3, #0
 8009bc6:	bf86      	itte	hi
 8009bc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009bcc:	608b      	strhi	r3, [r1, #8]
 8009bce:	9301      	strls	r3, [sp, #4]
 8009bd0:	680b      	ldr	r3, [r1, #0]
 8009bd2:	4688      	mov	r8, r1
 8009bd4:	f04f 0b00 	mov.w	fp, #0
 8009bd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009bdc:	f848 3b1c 	str.w	r3, [r8], #28
 8009be0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009be4:	4607      	mov	r7, r0
 8009be6:	460c      	mov	r4, r1
 8009be8:	4645      	mov	r5, r8
 8009bea:	465a      	mov	r2, fp
 8009bec:	46d9      	mov	r9, fp
 8009bee:	f8cd b008 	str.w	fp, [sp, #8]
 8009bf2:	68a1      	ldr	r1, [r4, #8]
 8009bf4:	b181      	cbz	r1, 8009c18 <_scanf_float+0x70>
 8009bf6:	6833      	ldr	r3, [r6, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b49      	cmp	r3, #73	; 0x49
 8009bfc:	d071      	beq.n	8009ce2 <_scanf_float+0x13a>
 8009bfe:	d84d      	bhi.n	8009c9c <_scanf_float+0xf4>
 8009c00:	2b39      	cmp	r3, #57	; 0x39
 8009c02:	d840      	bhi.n	8009c86 <_scanf_float+0xde>
 8009c04:	2b31      	cmp	r3, #49	; 0x31
 8009c06:	f080 8088 	bcs.w	8009d1a <_scanf_float+0x172>
 8009c0a:	2b2d      	cmp	r3, #45	; 0x2d
 8009c0c:	f000 8090 	beq.w	8009d30 <_scanf_float+0x188>
 8009c10:	d815      	bhi.n	8009c3e <_scanf_float+0x96>
 8009c12:	2b2b      	cmp	r3, #43	; 0x2b
 8009c14:	f000 808c 	beq.w	8009d30 <_scanf_float+0x188>
 8009c18:	f1b9 0f00 	cmp.w	r9, #0
 8009c1c:	d003      	beq.n	8009c26 <_scanf_float+0x7e>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	3a01      	subs	r2, #1
 8009c28:	2a01      	cmp	r2, #1
 8009c2a:	f200 80ea 	bhi.w	8009e02 <_scanf_float+0x25a>
 8009c2e:	4545      	cmp	r5, r8
 8009c30:	f200 80dc 	bhi.w	8009dec <_scanf_float+0x244>
 8009c34:	2601      	movs	r6, #1
 8009c36:	4630      	mov	r0, r6
 8009c38:	b007      	add	sp, #28
 8009c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c40:	f000 809f 	beq.w	8009d82 <_scanf_float+0x1da>
 8009c44:	2b30      	cmp	r3, #48	; 0x30
 8009c46:	d1e7      	bne.n	8009c18 <_scanf_float+0x70>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009c4e:	d064      	beq.n	8009d1a <_scanf_float+0x172>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009c56:	6020      	str	r0, [r4, #0]
 8009c58:	f109 0901 	add.w	r9, r9, #1
 8009c5c:	b11b      	cbz	r3, 8009c66 <_scanf_float+0xbe>
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	3101      	adds	r1, #1
 8009c62:	9301      	str	r3, [sp, #4]
 8009c64:	60a1      	str	r1, [r4, #8]
 8009c66:	68a3      	ldr	r3, [r4, #8]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	60a3      	str	r3, [r4, #8]
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	6123      	str	r3, [r4, #16]
 8009c72:	6873      	ldr	r3, [r6, #4]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	6073      	str	r3, [r6, #4]
 8009c7a:	f340 80ac 	ble.w	8009dd6 <_scanf_float+0x22e>
 8009c7e:	6833      	ldr	r3, [r6, #0]
 8009c80:	3301      	adds	r3, #1
 8009c82:	6033      	str	r3, [r6, #0]
 8009c84:	e7b5      	b.n	8009bf2 <_scanf_float+0x4a>
 8009c86:	2b45      	cmp	r3, #69	; 0x45
 8009c88:	f000 8085 	beq.w	8009d96 <_scanf_float+0x1ee>
 8009c8c:	2b46      	cmp	r3, #70	; 0x46
 8009c8e:	d06a      	beq.n	8009d66 <_scanf_float+0x1be>
 8009c90:	2b41      	cmp	r3, #65	; 0x41
 8009c92:	d1c1      	bne.n	8009c18 <_scanf_float+0x70>
 8009c94:	2a01      	cmp	r2, #1
 8009c96:	d1bf      	bne.n	8009c18 <_scanf_float+0x70>
 8009c98:	2202      	movs	r2, #2
 8009c9a:	e046      	b.n	8009d2a <_scanf_float+0x182>
 8009c9c:	2b65      	cmp	r3, #101	; 0x65
 8009c9e:	d07a      	beq.n	8009d96 <_scanf_float+0x1ee>
 8009ca0:	d818      	bhi.n	8009cd4 <_scanf_float+0x12c>
 8009ca2:	2b54      	cmp	r3, #84	; 0x54
 8009ca4:	d066      	beq.n	8009d74 <_scanf_float+0x1cc>
 8009ca6:	d811      	bhi.n	8009ccc <_scanf_float+0x124>
 8009ca8:	2b4e      	cmp	r3, #78	; 0x4e
 8009caa:	d1b5      	bne.n	8009c18 <_scanf_float+0x70>
 8009cac:	2a00      	cmp	r2, #0
 8009cae:	d146      	bne.n	8009d3e <_scanf_float+0x196>
 8009cb0:	f1b9 0f00 	cmp.w	r9, #0
 8009cb4:	d145      	bne.n	8009d42 <_scanf_float+0x19a>
 8009cb6:	6821      	ldr	r1, [r4, #0]
 8009cb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009cbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009cc0:	d13f      	bne.n	8009d42 <_scanf_float+0x19a>
 8009cc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009cc6:	6021      	str	r1, [r4, #0]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	e02e      	b.n	8009d2a <_scanf_float+0x182>
 8009ccc:	2b59      	cmp	r3, #89	; 0x59
 8009cce:	d01e      	beq.n	8009d0e <_scanf_float+0x166>
 8009cd0:	2b61      	cmp	r3, #97	; 0x61
 8009cd2:	e7de      	b.n	8009c92 <_scanf_float+0xea>
 8009cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8009cd6:	d0e9      	beq.n	8009cac <_scanf_float+0x104>
 8009cd8:	d815      	bhi.n	8009d06 <_scanf_float+0x15e>
 8009cda:	2b66      	cmp	r3, #102	; 0x66
 8009cdc:	d043      	beq.n	8009d66 <_scanf_float+0x1be>
 8009cde:	2b69      	cmp	r3, #105	; 0x69
 8009ce0:	d19a      	bne.n	8009c18 <_scanf_float+0x70>
 8009ce2:	f1bb 0f00 	cmp.w	fp, #0
 8009ce6:	d138      	bne.n	8009d5a <_scanf_float+0x1b2>
 8009ce8:	f1b9 0f00 	cmp.w	r9, #0
 8009cec:	d197      	bne.n	8009c1e <_scanf_float+0x76>
 8009cee:	6821      	ldr	r1, [r4, #0]
 8009cf0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009cf4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009cf8:	d195      	bne.n	8009c26 <_scanf_float+0x7e>
 8009cfa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009cfe:	6021      	str	r1, [r4, #0]
 8009d00:	f04f 0b01 	mov.w	fp, #1
 8009d04:	e011      	b.n	8009d2a <_scanf_float+0x182>
 8009d06:	2b74      	cmp	r3, #116	; 0x74
 8009d08:	d034      	beq.n	8009d74 <_scanf_float+0x1cc>
 8009d0a:	2b79      	cmp	r3, #121	; 0x79
 8009d0c:	d184      	bne.n	8009c18 <_scanf_float+0x70>
 8009d0e:	f1bb 0f07 	cmp.w	fp, #7
 8009d12:	d181      	bne.n	8009c18 <_scanf_float+0x70>
 8009d14:	f04f 0b08 	mov.w	fp, #8
 8009d18:	e007      	b.n	8009d2a <_scanf_float+0x182>
 8009d1a:	eb12 0f0b 	cmn.w	r2, fp
 8009d1e:	f47f af7b 	bne.w	8009c18 <_scanf_float+0x70>
 8009d22:	6821      	ldr	r1, [r4, #0]
 8009d24:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009d28:	6021      	str	r1, [r4, #0]
 8009d2a:	702b      	strb	r3, [r5, #0]
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	e79a      	b.n	8009c66 <_scanf_float+0xbe>
 8009d30:	6821      	ldr	r1, [r4, #0]
 8009d32:	0608      	lsls	r0, r1, #24
 8009d34:	f57f af70 	bpl.w	8009c18 <_scanf_float+0x70>
 8009d38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d3c:	e7f4      	b.n	8009d28 <_scanf_float+0x180>
 8009d3e:	2a02      	cmp	r2, #2
 8009d40:	d047      	beq.n	8009dd2 <_scanf_float+0x22a>
 8009d42:	f1bb 0f01 	cmp.w	fp, #1
 8009d46:	d003      	beq.n	8009d50 <_scanf_float+0x1a8>
 8009d48:	f1bb 0f04 	cmp.w	fp, #4
 8009d4c:	f47f af64 	bne.w	8009c18 <_scanf_float+0x70>
 8009d50:	f10b 0b01 	add.w	fp, fp, #1
 8009d54:	fa5f fb8b 	uxtb.w	fp, fp
 8009d58:	e7e7      	b.n	8009d2a <_scanf_float+0x182>
 8009d5a:	f1bb 0f03 	cmp.w	fp, #3
 8009d5e:	d0f7      	beq.n	8009d50 <_scanf_float+0x1a8>
 8009d60:	f1bb 0f05 	cmp.w	fp, #5
 8009d64:	e7f2      	b.n	8009d4c <_scanf_float+0x1a4>
 8009d66:	f1bb 0f02 	cmp.w	fp, #2
 8009d6a:	f47f af55 	bne.w	8009c18 <_scanf_float+0x70>
 8009d6e:	f04f 0b03 	mov.w	fp, #3
 8009d72:	e7da      	b.n	8009d2a <_scanf_float+0x182>
 8009d74:	f1bb 0f06 	cmp.w	fp, #6
 8009d78:	f47f af4e 	bne.w	8009c18 <_scanf_float+0x70>
 8009d7c:	f04f 0b07 	mov.w	fp, #7
 8009d80:	e7d3      	b.n	8009d2a <_scanf_float+0x182>
 8009d82:	6821      	ldr	r1, [r4, #0]
 8009d84:	0588      	lsls	r0, r1, #22
 8009d86:	f57f af47 	bpl.w	8009c18 <_scanf_float+0x70>
 8009d8a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009d8e:	6021      	str	r1, [r4, #0]
 8009d90:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d94:	e7c9      	b.n	8009d2a <_scanf_float+0x182>
 8009d96:	6821      	ldr	r1, [r4, #0]
 8009d98:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009d9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009da0:	d006      	beq.n	8009db0 <_scanf_float+0x208>
 8009da2:	0548      	lsls	r0, r1, #21
 8009da4:	f57f af38 	bpl.w	8009c18 <_scanf_float+0x70>
 8009da8:	f1b9 0f00 	cmp.w	r9, #0
 8009dac:	f43f af3b 	beq.w	8009c26 <_scanf_float+0x7e>
 8009db0:	0588      	lsls	r0, r1, #22
 8009db2:	bf58      	it	pl
 8009db4:	9802      	ldrpl	r0, [sp, #8]
 8009db6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009dba:	bf58      	it	pl
 8009dbc:	eba9 0000 	subpl.w	r0, r9, r0
 8009dc0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009dc4:	bf58      	it	pl
 8009dc6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009dca:	6021      	str	r1, [r4, #0]
 8009dcc:	f04f 0900 	mov.w	r9, #0
 8009dd0:	e7ab      	b.n	8009d2a <_scanf_float+0x182>
 8009dd2:	2203      	movs	r2, #3
 8009dd4:	e7a9      	b.n	8009d2a <_scanf_float+0x182>
 8009dd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009dda:	9205      	str	r2, [sp, #20]
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4638      	mov	r0, r7
 8009de0:	4798      	blx	r3
 8009de2:	9a05      	ldr	r2, [sp, #20]
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f43f af04 	beq.w	8009bf2 <_scanf_float+0x4a>
 8009dea:	e715      	b.n	8009c18 <_scanf_float+0x70>
 8009dec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009df0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009df4:	4632      	mov	r2, r6
 8009df6:	4638      	mov	r0, r7
 8009df8:	4798      	blx	r3
 8009dfa:	6923      	ldr	r3, [r4, #16]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	e715      	b.n	8009c2e <_scanf_float+0x86>
 8009e02:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009e06:	2b06      	cmp	r3, #6
 8009e08:	d80a      	bhi.n	8009e20 <_scanf_float+0x278>
 8009e0a:	f1bb 0f02 	cmp.w	fp, #2
 8009e0e:	d968      	bls.n	8009ee2 <_scanf_float+0x33a>
 8009e10:	f1ab 0b03 	sub.w	fp, fp, #3
 8009e14:	fa5f fb8b 	uxtb.w	fp, fp
 8009e18:	eba5 0b0b 	sub.w	fp, r5, fp
 8009e1c:	455d      	cmp	r5, fp
 8009e1e:	d14b      	bne.n	8009eb8 <_scanf_float+0x310>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	05da      	lsls	r2, r3, #23
 8009e24:	d51f      	bpl.n	8009e66 <_scanf_float+0x2be>
 8009e26:	055b      	lsls	r3, r3, #21
 8009e28:	d468      	bmi.n	8009efc <_scanf_float+0x354>
 8009e2a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	2965      	cmp	r1, #101	; 0x65
 8009e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e36:	f105 3bff 	add.w	fp, r5, #4294967295
 8009e3a:	6123      	str	r3, [r4, #16]
 8009e3c:	d00d      	beq.n	8009e5a <_scanf_float+0x2b2>
 8009e3e:	2945      	cmp	r1, #69	; 0x45
 8009e40:	d00b      	beq.n	8009e5a <_scanf_float+0x2b2>
 8009e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e46:	4632      	mov	r2, r6
 8009e48:	4638      	mov	r0, r7
 8009e4a:	4798      	blx	r3
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	f1a5 0b02 	sub.w	fp, r5, #2
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e5e:	4632      	mov	r2, r6
 8009e60:	4638      	mov	r0, r7
 8009e62:	4798      	blx	r3
 8009e64:	465d      	mov	r5, fp
 8009e66:	6826      	ldr	r6, [r4, #0]
 8009e68:	f016 0610 	ands.w	r6, r6, #16
 8009e6c:	d17a      	bne.n	8009f64 <_scanf_float+0x3bc>
 8009e6e:	702e      	strb	r6, [r5, #0]
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e7a:	d142      	bne.n	8009f02 <_scanf_float+0x35a>
 8009e7c:	9b02      	ldr	r3, [sp, #8]
 8009e7e:	eba9 0303 	sub.w	r3, r9, r3
 8009e82:	425a      	negs	r2, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d149      	bne.n	8009f1c <_scanf_float+0x374>
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	f000 fea3 	bl	800abd8 <_strtod_r>
 8009e92:	6825      	ldr	r5, [r4, #0]
 8009e94:	f8da 3000 	ldr.w	r3, [sl]
 8009e98:	f015 0f02 	tst.w	r5, #2
 8009e9c:	f103 0204 	add.w	r2, r3, #4
 8009ea0:	ec59 8b10 	vmov	r8, r9, d0
 8009ea4:	f8ca 2000 	str.w	r2, [sl]
 8009ea8:	d043      	beq.n	8009f32 <_scanf_float+0x38a>
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	e9c3 8900 	strd	r8, r9, [r3]
 8009eb0:	68e3      	ldr	r3, [r4, #12]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	60e3      	str	r3, [r4, #12]
 8009eb6:	e6be      	b.n	8009c36 <_scanf_float+0x8e>
 8009eb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ebc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	4798      	blx	r3
 8009ec6:	6923      	ldr	r3, [r4, #16]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	6123      	str	r3, [r4, #16]
 8009ecc:	e7a6      	b.n	8009e1c <_scanf_float+0x274>
 8009ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ed2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ed6:	4632      	mov	r2, r6
 8009ed8:	4638      	mov	r0, r7
 8009eda:	4798      	blx	r3
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	6123      	str	r3, [r4, #16]
 8009ee2:	4545      	cmp	r5, r8
 8009ee4:	d8f3      	bhi.n	8009ece <_scanf_float+0x326>
 8009ee6:	e6a5      	b.n	8009c34 <_scanf_float+0x8c>
 8009ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009eec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	4798      	blx	r3
 8009ef6:	6923      	ldr	r3, [r4, #16]
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	4545      	cmp	r5, r8
 8009efe:	d8f3      	bhi.n	8009ee8 <_scanf_float+0x340>
 8009f00:	e698      	b.n	8009c34 <_scanf_float+0x8c>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0bf      	beq.n	8009e88 <_scanf_float+0x2e0>
 8009f08:	9904      	ldr	r1, [sp, #16]
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	3101      	adds	r1, #1
 8009f10:	4638      	mov	r0, r7
 8009f12:	f000 feed 	bl	800acf0 <_strtol_r>
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	9d04      	ldr	r5, [sp, #16]
 8009f1a:	1ac2      	subs	r2, r0, r3
 8009f1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009f20:	429d      	cmp	r5, r3
 8009f22:	bf28      	it	cs
 8009f24:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009f28:	490f      	ldr	r1, [pc, #60]	; (8009f68 <_scanf_float+0x3c0>)
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 f824 	bl	8009f78 <siprintf>
 8009f30:	e7aa      	b.n	8009e88 <_scanf_float+0x2e0>
 8009f32:	f015 0504 	ands.w	r5, r5, #4
 8009f36:	d1b8      	bne.n	8009eaa <_scanf_float+0x302>
 8009f38:	681f      	ldr	r7, [r3, #0]
 8009f3a:	ee10 2a10 	vmov	r2, s0
 8009f3e:	464b      	mov	r3, r9
 8009f40:	ee10 0a10 	vmov	r0, s0
 8009f44:	4649      	mov	r1, r9
 8009f46:	f7f6 fe19 	bl	8000b7c <__aeabi_dcmpun>
 8009f4a:	b128      	cbz	r0, 8009f58 <_scanf_float+0x3b0>
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f000 f80d 	bl	8009f6c <nanf>
 8009f52:	ed87 0a00 	vstr	s0, [r7]
 8009f56:	e7ab      	b.n	8009eb0 <_scanf_float+0x308>
 8009f58:	4640      	mov	r0, r8
 8009f5a:	4649      	mov	r1, r9
 8009f5c:	f7f6 fe6c 	bl	8000c38 <__aeabi_d2f>
 8009f60:	6038      	str	r0, [r7, #0]
 8009f62:	e7a5      	b.n	8009eb0 <_scanf_float+0x308>
 8009f64:	2600      	movs	r6, #0
 8009f66:	e666      	b.n	8009c36 <_scanf_float+0x8e>
 8009f68:	0800edfa 	.word	0x0800edfa

08009f6c <nanf>:
 8009f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009f74 <nanf+0x8>
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	7fc00000 	.word	0x7fc00000

08009f78 <siprintf>:
 8009f78:	b40e      	push	{r1, r2, r3}
 8009f7a:	b500      	push	{lr}
 8009f7c:	b09c      	sub	sp, #112	; 0x70
 8009f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f80:	9002      	str	r0, [sp, #8]
 8009f82:	9006      	str	r0, [sp, #24]
 8009f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f88:	4809      	ldr	r0, [pc, #36]	; (8009fb0 <siprintf+0x38>)
 8009f8a:	9107      	str	r1, [sp, #28]
 8009f8c:	9104      	str	r1, [sp, #16]
 8009f8e:	4909      	ldr	r1, [pc, #36]	; (8009fb4 <siprintf+0x3c>)
 8009f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f94:	9105      	str	r1, [sp, #20]
 8009f96:	6800      	ldr	r0, [r0, #0]
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	a902      	add	r1, sp, #8
 8009f9c:	f002 fd9c 	bl	800cad8 <_svfiprintf_r>
 8009fa0:	9b02      	ldr	r3, [sp, #8]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	b01c      	add	sp, #112	; 0x70
 8009fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fac:	b003      	add	sp, #12
 8009fae:	4770      	bx	lr
 8009fb0:	2000006c 	.word	0x2000006c
 8009fb4:	ffff0208 	.word	0xffff0208

08009fb8 <sulp>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	ec45 4b10 	vmov	d0, r4, r5
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	f002 fb44 	bl	800c650 <__ulp>
 8009fc8:	ec51 0b10 	vmov	r0, r1, d0
 8009fcc:	b17e      	cbz	r6, 8009fee <sulp+0x36>
 8009fce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	dd09      	ble.n	8009fee <sulp+0x36>
 8009fda:	051b      	lsls	r3, r3, #20
 8009fdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009fe0:	2400      	movs	r4, #0
 8009fe2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	462b      	mov	r3, r5
 8009fea:	f7f6 fb2d 	bl	8000648 <__aeabi_dmul>
 8009fee:	bd70      	pop	{r4, r5, r6, pc}

08009ff0 <_strtod_l>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	461f      	mov	r7, r3
 8009ff6:	b0a1      	sub	sp, #132	; 0x84
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4681      	mov	r9, r0
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	460e      	mov	r6, r1
 800a000:	9217      	str	r2, [sp, #92]	; 0x5c
 800a002:	931c      	str	r3, [sp, #112]	; 0x70
 800a004:	f002 f82d 	bl	800c062 <__localeconv_l>
 800a008:	4680      	mov	r8, r0
 800a00a:	6800      	ldr	r0, [r0, #0]
 800a00c:	f7f6 f908 	bl	8000220 <strlen>
 800a010:	f04f 0a00 	mov.w	sl, #0
 800a014:	4604      	mov	r4, r0
 800a016:	f04f 0b00 	mov.w	fp, #0
 800a01a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a01c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a01e:	781a      	ldrb	r2, [r3, #0]
 800a020:	2a0d      	cmp	r2, #13
 800a022:	d832      	bhi.n	800a08a <_strtod_l+0x9a>
 800a024:	2a09      	cmp	r2, #9
 800a026:	d236      	bcs.n	800a096 <_strtod_l+0xa6>
 800a028:	2a00      	cmp	r2, #0
 800a02a:	d03e      	beq.n	800a0aa <_strtod_l+0xba>
 800a02c:	2300      	movs	r3, #0
 800a02e:	930d      	str	r3, [sp, #52]	; 0x34
 800a030:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a032:	782b      	ldrb	r3, [r5, #0]
 800a034:	2b30      	cmp	r3, #48	; 0x30
 800a036:	f040 80ac 	bne.w	800a192 <_strtod_l+0x1a2>
 800a03a:	786b      	ldrb	r3, [r5, #1]
 800a03c:	2b58      	cmp	r3, #88	; 0x58
 800a03e:	d001      	beq.n	800a044 <_strtod_l+0x54>
 800a040:	2b78      	cmp	r3, #120	; 0x78
 800a042:	d167      	bne.n	800a114 <_strtod_l+0x124>
 800a044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	ab1c      	add	r3, sp, #112	; 0x70
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	9702      	str	r7, [sp, #8]
 800a04e:	ab1d      	add	r3, sp, #116	; 0x74
 800a050:	4a88      	ldr	r2, [pc, #544]	; (800a274 <_strtod_l+0x284>)
 800a052:	a91b      	add	r1, sp, #108	; 0x6c
 800a054:	4648      	mov	r0, r9
 800a056:	f001 fd2a 	bl	800baae <__gethex>
 800a05a:	f010 0407 	ands.w	r4, r0, #7
 800a05e:	4606      	mov	r6, r0
 800a060:	d005      	beq.n	800a06e <_strtod_l+0x7e>
 800a062:	2c06      	cmp	r4, #6
 800a064:	d12b      	bne.n	800a0be <_strtod_l+0xce>
 800a066:	3501      	adds	r5, #1
 800a068:	2300      	movs	r3, #0
 800a06a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a06c:	930d      	str	r3, [sp, #52]	; 0x34
 800a06e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a070:	2b00      	cmp	r3, #0
 800a072:	f040 859a 	bne.w	800abaa <_strtod_l+0xbba>
 800a076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a078:	b1e3      	cbz	r3, 800a0b4 <_strtod_l+0xc4>
 800a07a:	4652      	mov	r2, sl
 800a07c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a080:	ec43 2b10 	vmov	d0, r2, r3
 800a084:	b021      	add	sp, #132	; 0x84
 800a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08a:	2a2b      	cmp	r2, #43	; 0x2b
 800a08c:	d015      	beq.n	800a0ba <_strtod_l+0xca>
 800a08e:	2a2d      	cmp	r2, #45	; 0x2d
 800a090:	d004      	beq.n	800a09c <_strtod_l+0xac>
 800a092:	2a20      	cmp	r2, #32
 800a094:	d1ca      	bne.n	800a02c <_strtod_l+0x3c>
 800a096:	3301      	adds	r3, #1
 800a098:	931b      	str	r3, [sp, #108]	; 0x6c
 800a09a:	e7bf      	b.n	800a01c <_strtod_l+0x2c>
 800a09c:	2201      	movs	r2, #1
 800a09e:	920d      	str	r2, [sp, #52]	; 0x34
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a0a4:	785b      	ldrb	r3, [r3, #1]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1c2      	bne.n	800a030 <_strtod_l+0x40>
 800a0aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0ac:	961b      	str	r6, [sp, #108]	; 0x6c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f040 8579 	bne.w	800aba6 <_strtod_l+0xbb6>
 800a0b4:	4652      	mov	r2, sl
 800a0b6:	465b      	mov	r3, fp
 800a0b8:	e7e2      	b.n	800a080 <_strtod_l+0x90>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	e7ef      	b.n	800a09e <_strtod_l+0xae>
 800a0be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a0c0:	b13a      	cbz	r2, 800a0d2 <_strtod_l+0xe2>
 800a0c2:	2135      	movs	r1, #53	; 0x35
 800a0c4:	a81e      	add	r0, sp, #120	; 0x78
 800a0c6:	f002 fbbb 	bl	800c840 <__copybits>
 800a0ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	f002 f827 	bl	800c120 <_Bfree>
 800a0d2:	3c01      	subs	r4, #1
 800a0d4:	2c04      	cmp	r4, #4
 800a0d6:	d806      	bhi.n	800a0e6 <_strtod_l+0xf6>
 800a0d8:	e8df f004 	tbb	[pc, r4]
 800a0dc:	1714030a 	.word	0x1714030a
 800a0e0:	0a          	.byte	0x0a
 800a0e1:	00          	.byte	0x00
 800a0e2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a0e6:	0730      	lsls	r0, r6, #28
 800a0e8:	d5c1      	bpl.n	800a06e <_strtod_l+0x7e>
 800a0ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a0ee:	e7be      	b.n	800a06e <_strtod_l+0x7e>
 800a0f0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a0f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a0f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a0fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a0fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a102:	e7f0      	b.n	800a0e6 <_strtod_l+0xf6>
 800a104:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a278 <_strtod_l+0x288>
 800a108:	e7ed      	b.n	800a0e6 <_strtod_l+0xf6>
 800a10a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a10e:	f04f 3aff 	mov.w	sl, #4294967295
 800a112:	e7e8      	b.n	800a0e6 <_strtod_l+0xf6>
 800a114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	921b      	str	r2, [sp, #108]	; 0x6c
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b30      	cmp	r3, #48	; 0x30
 800a11e:	d0f9      	beq.n	800a114 <_strtod_l+0x124>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0a4      	beq.n	800a06e <_strtod_l+0x7e>
 800a124:	2301      	movs	r3, #1
 800a126:	2500      	movs	r5, #0
 800a128:	9306      	str	r3, [sp, #24]
 800a12a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a12c:	9308      	str	r3, [sp, #32]
 800a12e:	9507      	str	r5, [sp, #28]
 800a130:	9505      	str	r5, [sp, #20]
 800a132:	220a      	movs	r2, #10
 800a134:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a136:	7807      	ldrb	r7, [r0, #0]
 800a138:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a13c:	b2d9      	uxtb	r1, r3
 800a13e:	2909      	cmp	r1, #9
 800a140:	d929      	bls.n	800a196 <_strtod_l+0x1a6>
 800a142:	4622      	mov	r2, r4
 800a144:	f8d8 1000 	ldr.w	r1, [r8]
 800a148:	f002 fdce 	bl	800cce8 <strncmp>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d031      	beq.n	800a1b4 <_strtod_l+0x1c4>
 800a150:	2000      	movs	r0, #0
 800a152:	9c05      	ldr	r4, [sp, #20]
 800a154:	9004      	str	r0, [sp, #16]
 800a156:	463b      	mov	r3, r7
 800a158:	4602      	mov	r2, r0
 800a15a:	2b65      	cmp	r3, #101	; 0x65
 800a15c:	d001      	beq.n	800a162 <_strtod_l+0x172>
 800a15e:	2b45      	cmp	r3, #69	; 0x45
 800a160:	d114      	bne.n	800a18c <_strtod_l+0x19c>
 800a162:	b924      	cbnz	r4, 800a16e <_strtod_l+0x17e>
 800a164:	b910      	cbnz	r0, 800a16c <_strtod_l+0x17c>
 800a166:	9b06      	ldr	r3, [sp, #24]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d09e      	beq.n	800a0aa <_strtod_l+0xba>
 800a16c:	2400      	movs	r4, #0
 800a16e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a170:	1c73      	adds	r3, r6, #1
 800a172:	931b      	str	r3, [sp, #108]	; 0x6c
 800a174:	7873      	ldrb	r3, [r6, #1]
 800a176:	2b2b      	cmp	r3, #43	; 0x2b
 800a178:	d078      	beq.n	800a26c <_strtod_l+0x27c>
 800a17a:	2b2d      	cmp	r3, #45	; 0x2d
 800a17c:	d070      	beq.n	800a260 <_strtod_l+0x270>
 800a17e:	f04f 0c00 	mov.w	ip, #0
 800a182:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a186:	2f09      	cmp	r7, #9
 800a188:	d97c      	bls.n	800a284 <_strtod_l+0x294>
 800a18a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a18c:	f04f 0e00 	mov.w	lr, #0
 800a190:	e09a      	b.n	800a2c8 <_strtod_l+0x2d8>
 800a192:	2300      	movs	r3, #0
 800a194:	e7c7      	b.n	800a126 <_strtod_l+0x136>
 800a196:	9905      	ldr	r1, [sp, #20]
 800a198:	2908      	cmp	r1, #8
 800a19a:	bfdd      	ittte	le
 800a19c:	9907      	ldrle	r1, [sp, #28]
 800a19e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1a2:	9307      	strle	r3, [sp, #28]
 800a1a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a1a8:	9b05      	ldr	r3, [sp, #20]
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	901b      	str	r0, [sp, #108]	; 0x6c
 800a1b2:	e7bf      	b.n	800a134 <_strtod_l+0x144>
 800a1b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1b6:	191a      	adds	r2, r3, r4
 800a1b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a1ba:	9a05      	ldr	r2, [sp, #20]
 800a1bc:	5d1b      	ldrb	r3, [r3, r4]
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	d037      	beq.n	800a232 <_strtod_l+0x242>
 800a1c2:	9c05      	ldr	r4, [sp, #20]
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a1ca:	2909      	cmp	r1, #9
 800a1cc:	d913      	bls.n	800a1f6 <_strtod_l+0x206>
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	9104      	str	r1, [sp, #16]
 800a1d2:	e7c2      	b.n	800a15a <_strtod_l+0x16a>
 800a1d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	3001      	adds	r0, #1
 800a1de:	2b30      	cmp	r3, #48	; 0x30
 800a1e0:	d0f8      	beq.n	800a1d4 <_strtod_l+0x1e4>
 800a1e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a1e6:	2a08      	cmp	r2, #8
 800a1e8:	f200 84e4 	bhi.w	800abb4 <_strtod_l+0xbc4>
 800a1ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a1ee:	9208      	str	r2, [sp, #32]
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a1fa:	f100 0101 	add.w	r1, r0, #1
 800a1fe:	d012      	beq.n	800a226 <_strtod_l+0x236>
 800a200:	440a      	add	r2, r1
 800a202:	eb00 0c04 	add.w	ip, r0, r4
 800a206:	4621      	mov	r1, r4
 800a208:	270a      	movs	r7, #10
 800a20a:	458c      	cmp	ip, r1
 800a20c:	d113      	bne.n	800a236 <_strtod_l+0x246>
 800a20e:	1821      	adds	r1, r4, r0
 800a210:	2908      	cmp	r1, #8
 800a212:	f104 0401 	add.w	r4, r4, #1
 800a216:	4404      	add	r4, r0
 800a218:	dc19      	bgt.n	800a24e <_strtod_l+0x25e>
 800a21a:	9b07      	ldr	r3, [sp, #28]
 800a21c:	210a      	movs	r1, #10
 800a21e:	fb01 e303 	mla	r3, r1, r3, lr
 800a222:	9307      	str	r3, [sp, #28]
 800a224:	2100      	movs	r1, #0
 800a226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a228:	1c58      	adds	r0, r3, #1
 800a22a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	4608      	mov	r0, r1
 800a230:	e7c9      	b.n	800a1c6 <_strtod_l+0x1d6>
 800a232:	9805      	ldr	r0, [sp, #20]
 800a234:	e7d3      	b.n	800a1de <_strtod_l+0x1ee>
 800a236:	2908      	cmp	r1, #8
 800a238:	f101 0101 	add.w	r1, r1, #1
 800a23c:	dc03      	bgt.n	800a246 <_strtod_l+0x256>
 800a23e:	9b07      	ldr	r3, [sp, #28]
 800a240:	437b      	muls	r3, r7
 800a242:	9307      	str	r3, [sp, #28]
 800a244:	e7e1      	b.n	800a20a <_strtod_l+0x21a>
 800a246:	2910      	cmp	r1, #16
 800a248:	bfd8      	it	le
 800a24a:	437d      	mulle	r5, r7
 800a24c:	e7dd      	b.n	800a20a <_strtod_l+0x21a>
 800a24e:	2c10      	cmp	r4, #16
 800a250:	bfdc      	itt	le
 800a252:	210a      	movle	r1, #10
 800a254:	fb01 e505 	mlale	r5, r1, r5, lr
 800a258:	e7e4      	b.n	800a224 <_strtod_l+0x234>
 800a25a:	2301      	movs	r3, #1
 800a25c:	9304      	str	r3, [sp, #16]
 800a25e:	e781      	b.n	800a164 <_strtod_l+0x174>
 800a260:	f04f 0c01 	mov.w	ip, #1
 800a264:	1cb3      	adds	r3, r6, #2
 800a266:	931b      	str	r3, [sp, #108]	; 0x6c
 800a268:	78b3      	ldrb	r3, [r6, #2]
 800a26a:	e78a      	b.n	800a182 <_strtod_l+0x192>
 800a26c:	f04f 0c00 	mov.w	ip, #0
 800a270:	e7f8      	b.n	800a264 <_strtod_l+0x274>
 800a272:	bf00      	nop
 800a274:	0800ee00 	.word	0x0800ee00
 800a278:	7ff00000 	.word	0x7ff00000
 800a27c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a27e:	1c5f      	adds	r7, r3, #1
 800a280:	971b      	str	r7, [sp, #108]	; 0x6c
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	2b30      	cmp	r3, #48	; 0x30
 800a286:	d0f9      	beq.n	800a27c <_strtod_l+0x28c>
 800a288:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a28c:	2f08      	cmp	r7, #8
 800a28e:	f63f af7d 	bhi.w	800a18c <_strtod_l+0x19c>
 800a292:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a298:	930a      	str	r3, [sp, #40]	; 0x28
 800a29a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a29c:	1c5f      	adds	r7, r3, #1
 800a29e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a2a6:	f1b8 0f09 	cmp.w	r8, #9
 800a2aa:	d937      	bls.n	800a31c <_strtod_l+0x32c>
 800a2ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2ae:	1a7f      	subs	r7, r7, r1
 800a2b0:	2f08      	cmp	r7, #8
 800a2b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a2b6:	dc37      	bgt.n	800a328 <_strtod_l+0x338>
 800a2b8:	45be      	cmp	lr, r7
 800a2ba:	bfa8      	it	ge
 800a2bc:	46be      	movge	lr, r7
 800a2be:	f1bc 0f00 	cmp.w	ip, #0
 800a2c2:	d001      	beq.n	800a2c8 <_strtod_l+0x2d8>
 800a2c4:	f1ce 0e00 	rsb	lr, lr, #0
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	d151      	bne.n	800a370 <_strtod_l+0x380>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	f47f aece 	bne.w	800a06e <_strtod_l+0x7e>
 800a2d2:	9a06      	ldr	r2, [sp, #24]
 800a2d4:	2a00      	cmp	r2, #0
 800a2d6:	f47f aeca 	bne.w	800a06e <_strtod_l+0x7e>
 800a2da:	9a04      	ldr	r2, [sp, #16]
 800a2dc:	2a00      	cmp	r2, #0
 800a2de:	f47f aee4 	bne.w	800a0aa <_strtod_l+0xba>
 800a2e2:	2b4e      	cmp	r3, #78	; 0x4e
 800a2e4:	d027      	beq.n	800a336 <_strtod_l+0x346>
 800a2e6:	dc21      	bgt.n	800a32c <_strtod_l+0x33c>
 800a2e8:	2b49      	cmp	r3, #73	; 0x49
 800a2ea:	f47f aede 	bne.w	800a0aa <_strtod_l+0xba>
 800a2ee:	49a0      	ldr	r1, [pc, #640]	; (800a570 <_strtod_l+0x580>)
 800a2f0:	a81b      	add	r0, sp, #108	; 0x6c
 800a2f2:	f001 fe0f 	bl	800bf14 <__match>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	f43f aed7 	beq.w	800a0aa <_strtod_l+0xba>
 800a2fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2fe:	499d      	ldr	r1, [pc, #628]	; (800a574 <_strtod_l+0x584>)
 800a300:	3b01      	subs	r3, #1
 800a302:	a81b      	add	r0, sp, #108	; 0x6c
 800a304:	931b      	str	r3, [sp, #108]	; 0x6c
 800a306:	f001 fe05 	bl	800bf14 <__match>
 800a30a:	b910      	cbnz	r0, 800a312 <_strtod_l+0x322>
 800a30c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a30e:	3301      	adds	r3, #1
 800a310:	931b      	str	r3, [sp, #108]	; 0x6c
 800a312:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a588 <_strtod_l+0x598>
 800a316:	f04f 0a00 	mov.w	sl, #0
 800a31a:	e6a8      	b.n	800a06e <_strtod_l+0x7e>
 800a31c:	210a      	movs	r1, #10
 800a31e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a322:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a326:	e7b8      	b.n	800a29a <_strtod_l+0x2aa>
 800a328:	46be      	mov	lr, r7
 800a32a:	e7c8      	b.n	800a2be <_strtod_l+0x2ce>
 800a32c:	2b69      	cmp	r3, #105	; 0x69
 800a32e:	d0de      	beq.n	800a2ee <_strtod_l+0x2fe>
 800a330:	2b6e      	cmp	r3, #110	; 0x6e
 800a332:	f47f aeba 	bne.w	800a0aa <_strtod_l+0xba>
 800a336:	4990      	ldr	r1, [pc, #576]	; (800a578 <_strtod_l+0x588>)
 800a338:	a81b      	add	r0, sp, #108	; 0x6c
 800a33a:	f001 fdeb 	bl	800bf14 <__match>
 800a33e:	2800      	cmp	r0, #0
 800a340:	f43f aeb3 	beq.w	800a0aa <_strtod_l+0xba>
 800a344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b28      	cmp	r3, #40	; 0x28
 800a34a:	d10e      	bne.n	800a36a <_strtod_l+0x37a>
 800a34c:	aa1e      	add	r2, sp, #120	; 0x78
 800a34e:	498b      	ldr	r1, [pc, #556]	; (800a57c <_strtod_l+0x58c>)
 800a350:	a81b      	add	r0, sp, #108	; 0x6c
 800a352:	f001 fdf3 	bl	800bf3c <__hexnan>
 800a356:	2805      	cmp	r0, #5
 800a358:	d107      	bne.n	800a36a <_strtod_l+0x37a>
 800a35a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a35c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a360:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a364:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a368:	e681      	b.n	800a06e <_strtod_l+0x7e>
 800a36a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a590 <_strtod_l+0x5a0>
 800a36e:	e7d2      	b.n	800a316 <_strtod_l+0x326>
 800a370:	ebae 0302 	sub.w	r3, lr, r2
 800a374:	9306      	str	r3, [sp, #24]
 800a376:	9b05      	ldr	r3, [sp, #20]
 800a378:	9807      	ldr	r0, [sp, #28]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	bf08      	it	eq
 800a37e:	4623      	moveq	r3, r4
 800a380:	2c10      	cmp	r4, #16
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	46a0      	mov	r8, r4
 800a386:	bfa8      	it	ge
 800a388:	f04f 0810 	movge.w	r8, #16
 800a38c:	f7f6 f8e2 	bl	8000554 <__aeabi_ui2d>
 800a390:	2c09      	cmp	r4, #9
 800a392:	4682      	mov	sl, r0
 800a394:	468b      	mov	fp, r1
 800a396:	dc13      	bgt.n	800a3c0 <_strtod_l+0x3d0>
 800a398:	9b06      	ldr	r3, [sp, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f43f ae67 	beq.w	800a06e <_strtod_l+0x7e>
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	dd7a      	ble.n	800a49a <_strtod_l+0x4aa>
 800a3a4:	2b16      	cmp	r3, #22
 800a3a6:	dc61      	bgt.n	800a46c <_strtod_l+0x47c>
 800a3a8:	4a75      	ldr	r2, [pc, #468]	; (800a580 <_strtod_l+0x590>)
 800a3aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a3ae:	e9de 0100 	ldrd	r0, r1, [lr]
 800a3b2:	4652      	mov	r2, sl
 800a3b4:	465b      	mov	r3, fp
 800a3b6:	f7f6 f947 	bl	8000648 <__aeabi_dmul>
 800a3ba:	4682      	mov	sl, r0
 800a3bc:	468b      	mov	fp, r1
 800a3be:	e656      	b.n	800a06e <_strtod_l+0x7e>
 800a3c0:	4b6f      	ldr	r3, [pc, #444]	; (800a580 <_strtod_l+0x590>)
 800a3c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a3c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a3ca:	f7f6 f93d 	bl	8000648 <__aeabi_dmul>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	f7f6 f8be 	bl	8000554 <__aeabi_ui2d>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f5 ff7c 	bl	80002dc <__adddf3>
 800a3e4:	2c0f      	cmp	r4, #15
 800a3e6:	4682      	mov	sl, r0
 800a3e8:	468b      	mov	fp, r1
 800a3ea:	ddd5      	ble.n	800a398 <_strtod_l+0x3a8>
 800a3ec:	9b06      	ldr	r3, [sp, #24]
 800a3ee:	eba4 0808 	sub.w	r8, r4, r8
 800a3f2:	4498      	add	r8, r3
 800a3f4:	f1b8 0f00 	cmp.w	r8, #0
 800a3f8:	f340 8096 	ble.w	800a528 <_strtod_l+0x538>
 800a3fc:	f018 030f 	ands.w	r3, r8, #15
 800a400:	d00a      	beq.n	800a418 <_strtod_l+0x428>
 800a402:	495f      	ldr	r1, [pc, #380]	; (800a580 <_strtod_l+0x590>)
 800a404:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a408:	4652      	mov	r2, sl
 800a40a:	465b      	mov	r3, fp
 800a40c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a410:	f7f6 f91a 	bl	8000648 <__aeabi_dmul>
 800a414:	4682      	mov	sl, r0
 800a416:	468b      	mov	fp, r1
 800a418:	f038 080f 	bics.w	r8, r8, #15
 800a41c:	d073      	beq.n	800a506 <_strtod_l+0x516>
 800a41e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a422:	dd47      	ble.n	800a4b4 <_strtod_l+0x4c4>
 800a424:	2400      	movs	r4, #0
 800a426:	46a0      	mov	r8, r4
 800a428:	9407      	str	r4, [sp, #28]
 800a42a:	9405      	str	r4, [sp, #20]
 800a42c:	2322      	movs	r3, #34	; 0x22
 800a42e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a588 <_strtod_l+0x598>
 800a432:	f8c9 3000 	str.w	r3, [r9]
 800a436:	f04f 0a00 	mov.w	sl, #0
 800a43a:	9b07      	ldr	r3, [sp, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f43f ae16 	beq.w	800a06e <_strtod_l+0x7e>
 800a442:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a444:	4648      	mov	r0, r9
 800a446:	f001 fe6b 	bl	800c120 <_Bfree>
 800a44a:	9905      	ldr	r1, [sp, #20]
 800a44c:	4648      	mov	r0, r9
 800a44e:	f001 fe67 	bl	800c120 <_Bfree>
 800a452:	4641      	mov	r1, r8
 800a454:	4648      	mov	r0, r9
 800a456:	f001 fe63 	bl	800c120 <_Bfree>
 800a45a:	9907      	ldr	r1, [sp, #28]
 800a45c:	4648      	mov	r0, r9
 800a45e:	f001 fe5f 	bl	800c120 <_Bfree>
 800a462:	4621      	mov	r1, r4
 800a464:	4648      	mov	r0, r9
 800a466:	f001 fe5b 	bl	800c120 <_Bfree>
 800a46a:	e600      	b.n	800a06e <_strtod_l+0x7e>
 800a46c:	9a06      	ldr	r2, [sp, #24]
 800a46e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a472:	4293      	cmp	r3, r2
 800a474:	dbba      	blt.n	800a3ec <_strtod_l+0x3fc>
 800a476:	4d42      	ldr	r5, [pc, #264]	; (800a580 <_strtod_l+0x590>)
 800a478:	f1c4 040f 	rsb	r4, r4, #15
 800a47c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a480:	4652      	mov	r2, sl
 800a482:	465b      	mov	r3, fp
 800a484:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a488:	f7f6 f8de 	bl	8000648 <__aeabi_dmul>
 800a48c:	9b06      	ldr	r3, [sp, #24]
 800a48e:	1b1c      	subs	r4, r3, r4
 800a490:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a494:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a498:	e78d      	b.n	800a3b6 <_strtod_l+0x3c6>
 800a49a:	f113 0f16 	cmn.w	r3, #22
 800a49e:	dba5      	blt.n	800a3ec <_strtod_l+0x3fc>
 800a4a0:	4a37      	ldr	r2, [pc, #220]	; (800a580 <_strtod_l+0x590>)
 800a4a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a4a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a4aa:	4650      	mov	r0, sl
 800a4ac:	4659      	mov	r1, fp
 800a4ae:	f7f6 f9f5 	bl	800089c <__aeabi_ddiv>
 800a4b2:	e782      	b.n	800a3ba <_strtod_l+0x3ca>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4e33      	ldr	r6, [pc, #204]	; (800a584 <_strtod_l+0x594>)
 800a4b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a4bc:	4650      	mov	r0, sl
 800a4be:	4659      	mov	r1, fp
 800a4c0:	461d      	mov	r5, r3
 800a4c2:	f1b8 0f01 	cmp.w	r8, #1
 800a4c6:	dc21      	bgt.n	800a50c <_strtod_l+0x51c>
 800a4c8:	b10b      	cbz	r3, 800a4ce <_strtod_l+0x4de>
 800a4ca:	4682      	mov	sl, r0
 800a4cc:	468b      	mov	fp, r1
 800a4ce:	4b2d      	ldr	r3, [pc, #180]	; (800a584 <_strtod_l+0x594>)
 800a4d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a4d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a4d8:	4652      	mov	r2, sl
 800a4da:	465b      	mov	r3, fp
 800a4dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a4e0:	f7f6 f8b2 	bl	8000648 <__aeabi_dmul>
 800a4e4:	4b28      	ldr	r3, [pc, #160]	; (800a588 <_strtod_l+0x598>)
 800a4e6:	460a      	mov	r2, r1
 800a4e8:	400b      	ands	r3, r1
 800a4ea:	4928      	ldr	r1, [pc, #160]	; (800a58c <_strtod_l+0x59c>)
 800a4ec:	428b      	cmp	r3, r1
 800a4ee:	4682      	mov	sl, r0
 800a4f0:	d898      	bhi.n	800a424 <_strtod_l+0x434>
 800a4f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a4f6:	428b      	cmp	r3, r1
 800a4f8:	bf86      	itte	hi
 800a4fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a594 <_strtod_l+0x5a4>
 800a4fe:	f04f 3aff 	movhi.w	sl, #4294967295
 800a502:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a506:	2300      	movs	r3, #0
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	e077      	b.n	800a5fc <_strtod_l+0x60c>
 800a50c:	f018 0f01 	tst.w	r8, #1
 800a510:	d006      	beq.n	800a520 <_strtod_l+0x530>
 800a512:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	f7f6 f895 	bl	8000648 <__aeabi_dmul>
 800a51e:	2301      	movs	r3, #1
 800a520:	3501      	adds	r5, #1
 800a522:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a526:	e7cc      	b.n	800a4c2 <_strtod_l+0x4d2>
 800a528:	d0ed      	beq.n	800a506 <_strtod_l+0x516>
 800a52a:	f1c8 0800 	rsb	r8, r8, #0
 800a52e:	f018 020f 	ands.w	r2, r8, #15
 800a532:	d00a      	beq.n	800a54a <_strtod_l+0x55a>
 800a534:	4b12      	ldr	r3, [pc, #72]	; (800a580 <_strtod_l+0x590>)
 800a536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a53a:	4650      	mov	r0, sl
 800a53c:	4659      	mov	r1, fp
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f7f6 f9ab 	bl	800089c <__aeabi_ddiv>
 800a546:	4682      	mov	sl, r0
 800a548:	468b      	mov	fp, r1
 800a54a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a54e:	d0da      	beq.n	800a506 <_strtod_l+0x516>
 800a550:	f1b8 0f1f 	cmp.w	r8, #31
 800a554:	dd20      	ble.n	800a598 <_strtod_l+0x5a8>
 800a556:	2400      	movs	r4, #0
 800a558:	46a0      	mov	r8, r4
 800a55a:	9407      	str	r4, [sp, #28]
 800a55c:	9405      	str	r4, [sp, #20]
 800a55e:	2322      	movs	r3, #34	; 0x22
 800a560:	f04f 0a00 	mov.w	sl, #0
 800a564:	f04f 0b00 	mov.w	fp, #0
 800a568:	f8c9 3000 	str.w	r3, [r9]
 800a56c:	e765      	b.n	800a43a <_strtod_l+0x44a>
 800a56e:	bf00      	nop
 800a570:	0800edcb 	.word	0x0800edcb
 800a574:	0800ee53 	.word	0x0800ee53
 800a578:	0800edd3 	.word	0x0800edd3
 800a57c:	0800ee14 	.word	0x0800ee14
 800a580:	0800ee90 	.word	0x0800ee90
 800a584:	0800ee68 	.word	0x0800ee68
 800a588:	7ff00000 	.word	0x7ff00000
 800a58c:	7ca00000 	.word	0x7ca00000
 800a590:	fff80000 	.word	0xfff80000
 800a594:	7fefffff 	.word	0x7fefffff
 800a598:	f018 0310 	ands.w	r3, r8, #16
 800a59c:	bf18      	it	ne
 800a59e:	236a      	movne	r3, #106	; 0x6a
 800a5a0:	4da0      	ldr	r5, [pc, #640]	; (800a824 <_strtod_l+0x834>)
 800a5a2:	9304      	str	r3, [sp, #16]
 800a5a4:	4650      	mov	r0, sl
 800a5a6:	4659      	mov	r1, fp
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f1b8 0f00 	cmp.w	r8, #0
 800a5ae:	f300 810a 	bgt.w	800a7c6 <_strtod_l+0x7d6>
 800a5b2:	b10b      	cbz	r3, 800a5b8 <_strtod_l+0x5c8>
 800a5b4:	4682      	mov	sl, r0
 800a5b6:	468b      	mov	fp, r1
 800a5b8:	9b04      	ldr	r3, [sp, #16]
 800a5ba:	b1bb      	cbz	r3, 800a5ec <_strtod_l+0x5fc>
 800a5bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a5c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	4659      	mov	r1, fp
 800a5c8:	dd10      	ble.n	800a5ec <_strtod_l+0x5fc>
 800a5ca:	2b1f      	cmp	r3, #31
 800a5cc:	f340 8107 	ble.w	800a7de <_strtod_l+0x7ee>
 800a5d0:	2b34      	cmp	r3, #52	; 0x34
 800a5d2:	bfde      	ittt	le
 800a5d4:	3b20      	suble	r3, #32
 800a5d6:	f04f 32ff 	movle.w	r2, #4294967295
 800a5da:	fa02 f303 	lslle.w	r3, r2, r3
 800a5de:	f04f 0a00 	mov.w	sl, #0
 800a5e2:	bfcc      	ite	gt
 800a5e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a5e8:	ea03 0b01 	andle.w	fp, r3, r1
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	4659      	mov	r1, fp
 800a5f4:	f7f6 fa90 	bl	8000b18 <__aeabi_dcmpeq>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1ac      	bne.n	800a556 <_strtod_l+0x566>
 800a5fc:	9b07      	ldr	r3, [sp, #28]
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	9a05      	ldr	r2, [sp, #20]
 800a602:	9908      	ldr	r1, [sp, #32]
 800a604:	4623      	mov	r3, r4
 800a606:	4648      	mov	r0, r9
 800a608:	f001 fddc 	bl	800c1c4 <__s2b>
 800a60c:	9007      	str	r0, [sp, #28]
 800a60e:	2800      	cmp	r0, #0
 800a610:	f43f af08 	beq.w	800a424 <_strtod_l+0x434>
 800a614:	9a06      	ldr	r2, [sp, #24]
 800a616:	9b06      	ldr	r3, [sp, #24]
 800a618:	2a00      	cmp	r2, #0
 800a61a:	f1c3 0300 	rsb	r3, r3, #0
 800a61e:	bfa8      	it	ge
 800a620:	2300      	movge	r3, #0
 800a622:	930e      	str	r3, [sp, #56]	; 0x38
 800a624:	2400      	movs	r4, #0
 800a626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a62a:	9316      	str	r3, [sp, #88]	; 0x58
 800a62c:	46a0      	mov	r8, r4
 800a62e:	9b07      	ldr	r3, [sp, #28]
 800a630:	4648      	mov	r0, r9
 800a632:	6859      	ldr	r1, [r3, #4]
 800a634:	f001 fd40 	bl	800c0b8 <_Balloc>
 800a638:	9005      	str	r0, [sp, #20]
 800a63a:	2800      	cmp	r0, #0
 800a63c:	f43f aef6 	beq.w	800a42c <_strtod_l+0x43c>
 800a640:	9b07      	ldr	r3, [sp, #28]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	3202      	adds	r2, #2
 800a646:	f103 010c 	add.w	r1, r3, #12
 800a64a:	0092      	lsls	r2, r2, #2
 800a64c:	300c      	adds	r0, #12
 800a64e:	f7fe fe3b 	bl	80092c8 <memcpy>
 800a652:	aa1e      	add	r2, sp, #120	; 0x78
 800a654:	a91d      	add	r1, sp, #116	; 0x74
 800a656:	ec4b ab10 	vmov	d0, sl, fp
 800a65a:	4648      	mov	r0, r9
 800a65c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a660:	f002 f86c 	bl	800c73c <__d2b>
 800a664:	901c      	str	r0, [sp, #112]	; 0x70
 800a666:	2800      	cmp	r0, #0
 800a668:	f43f aee0 	beq.w	800a42c <_strtod_l+0x43c>
 800a66c:	2101      	movs	r1, #1
 800a66e:	4648      	mov	r0, r9
 800a670:	f001 fe34 	bl	800c2dc <__i2b>
 800a674:	4680      	mov	r8, r0
 800a676:	2800      	cmp	r0, #0
 800a678:	f43f aed8 	beq.w	800a42c <_strtod_l+0x43c>
 800a67c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a67e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a680:	2e00      	cmp	r6, #0
 800a682:	bfab      	itete	ge
 800a684:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a686:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a688:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a68a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a68c:	bfac      	ite	ge
 800a68e:	18f7      	addge	r7, r6, r3
 800a690:	1b9d      	sublt	r5, r3, r6
 800a692:	9b04      	ldr	r3, [sp, #16]
 800a694:	1af6      	subs	r6, r6, r3
 800a696:	4416      	add	r6, r2
 800a698:	4b63      	ldr	r3, [pc, #396]	; (800a828 <_strtod_l+0x838>)
 800a69a:	3e01      	subs	r6, #1
 800a69c:	429e      	cmp	r6, r3
 800a69e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a6a2:	f280 80af 	bge.w	800a804 <_strtod_l+0x814>
 800a6a6:	1b9b      	subs	r3, r3, r6
 800a6a8:	2b1f      	cmp	r3, #31
 800a6aa:	eba2 0203 	sub.w	r2, r2, r3
 800a6ae:	f04f 0101 	mov.w	r1, #1
 800a6b2:	f300 809b 	bgt.w	800a7ec <_strtod_l+0x7fc>
 800a6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6bc:	2300      	movs	r3, #0
 800a6be:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c0:	18be      	adds	r6, r7, r2
 800a6c2:	9b04      	ldr	r3, [sp, #16]
 800a6c4:	42b7      	cmp	r7, r6
 800a6c6:	4415      	add	r5, r2
 800a6c8:	441d      	add	r5, r3
 800a6ca:	463b      	mov	r3, r7
 800a6cc:	bfa8      	it	ge
 800a6ce:	4633      	movge	r3, r6
 800a6d0:	42ab      	cmp	r3, r5
 800a6d2:	bfa8      	it	ge
 800a6d4:	462b      	movge	r3, r5
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	bfc2      	ittt	gt
 800a6da:	1af6      	subgt	r6, r6, r3
 800a6dc:	1aed      	subgt	r5, r5, r3
 800a6de:	1aff      	subgt	r7, r7, r3
 800a6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6e2:	b1bb      	cbz	r3, 800a714 <_strtod_l+0x724>
 800a6e4:	4641      	mov	r1, r8
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4648      	mov	r0, r9
 800a6ea:	f001 fe97 	bl	800c41c <__pow5mult>
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	f43f ae9b 	beq.w	800a42c <_strtod_l+0x43c>
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a6fa:	4648      	mov	r0, r9
 800a6fc:	f001 fdf7 	bl	800c2ee <__multiply>
 800a700:	900c      	str	r0, [sp, #48]	; 0x30
 800a702:	2800      	cmp	r0, #0
 800a704:	f43f ae92 	beq.w	800a42c <_strtod_l+0x43c>
 800a708:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a70a:	4648      	mov	r0, r9
 800a70c:	f001 fd08 	bl	800c120 <_Bfree>
 800a710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a712:	931c      	str	r3, [sp, #112]	; 0x70
 800a714:	2e00      	cmp	r6, #0
 800a716:	dc7a      	bgt.n	800a80e <_strtod_l+0x81e>
 800a718:	9b06      	ldr	r3, [sp, #24]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dd08      	ble.n	800a730 <_strtod_l+0x740>
 800a71e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a720:	9905      	ldr	r1, [sp, #20]
 800a722:	4648      	mov	r0, r9
 800a724:	f001 fe7a 	bl	800c41c <__pow5mult>
 800a728:	9005      	str	r0, [sp, #20]
 800a72a:	2800      	cmp	r0, #0
 800a72c:	f43f ae7e 	beq.w	800a42c <_strtod_l+0x43c>
 800a730:	2d00      	cmp	r5, #0
 800a732:	dd08      	ble.n	800a746 <_strtod_l+0x756>
 800a734:	462a      	mov	r2, r5
 800a736:	9905      	ldr	r1, [sp, #20]
 800a738:	4648      	mov	r0, r9
 800a73a:	f001 febd 	bl	800c4b8 <__lshift>
 800a73e:	9005      	str	r0, [sp, #20]
 800a740:	2800      	cmp	r0, #0
 800a742:	f43f ae73 	beq.w	800a42c <_strtod_l+0x43c>
 800a746:	2f00      	cmp	r7, #0
 800a748:	dd08      	ble.n	800a75c <_strtod_l+0x76c>
 800a74a:	4641      	mov	r1, r8
 800a74c:	463a      	mov	r2, r7
 800a74e:	4648      	mov	r0, r9
 800a750:	f001 feb2 	bl	800c4b8 <__lshift>
 800a754:	4680      	mov	r8, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	f43f ae68 	beq.w	800a42c <_strtod_l+0x43c>
 800a75c:	9a05      	ldr	r2, [sp, #20]
 800a75e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a760:	4648      	mov	r0, r9
 800a762:	f001 ff17 	bl	800c594 <__mdiff>
 800a766:	4604      	mov	r4, r0
 800a768:	2800      	cmp	r0, #0
 800a76a:	f43f ae5f 	beq.w	800a42c <_strtod_l+0x43c>
 800a76e:	68c3      	ldr	r3, [r0, #12]
 800a770:	930c      	str	r3, [sp, #48]	; 0x30
 800a772:	2300      	movs	r3, #0
 800a774:	60c3      	str	r3, [r0, #12]
 800a776:	4641      	mov	r1, r8
 800a778:	f001 fef2 	bl	800c560 <__mcmp>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	da55      	bge.n	800a82c <_strtod_l+0x83c>
 800a780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a782:	b9e3      	cbnz	r3, 800a7be <_strtod_l+0x7ce>
 800a784:	f1ba 0f00 	cmp.w	sl, #0
 800a788:	d119      	bne.n	800a7be <_strtod_l+0x7ce>
 800a78a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a78e:	b9b3      	cbnz	r3, 800a7be <_strtod_l+0x7ce>
 800a790:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a794:	0d1b      	lsrs	r3, r3, #20
 800a796:	051b      	lsls	r3, r3, #20
 800a798:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a79c:	d90f      	bls.n	800a7be <_strtod_l+0x7ce>
 800a79e:	6963      	ldr	r3, [r4, #20]
 800a7a0:	b913      	cbnz	r3, 800a7a8 <_strtod_l+0x7b8>
 800a7a2:	6923      	ldr	r3, [r4, #16]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	dd0a      	ble.n	800a7be <_strtod_l+0x7ce>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	4648      	mov	r0, r9
 800a7ae:	f001 fe83 	bl	800c4b8 <__lshift>
 800a7b2:	4641      	mov	r1, r8
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	f001 fed3 	bl	800c560 <__mcmp>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	dc67      	bgt.n	800a88e <_strtod_l+0x89e>
 800a7be:	9b04      	ldr	r3, [sp, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d171      	bne.n	800a8a8 <_strtod_l+0x8b8>
 800a7c4:	e63d      	b.n	800a442 <_strtod_l+0x452>
 800a7c6:	f018 0f01 	tst.w	r8, #1
 800a7ca:	d004      	beq.n	800a7d6 <_strtod_l+0x7e6>
 800a7cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7d0:	f7f5 ff3a 	bl	8000648 <__aeabi_dmul>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7da:	3508      	adds	r5, #8
 800a7dc:	e6e5      	b.n	800a5aa <_strtod_l+0x5ba>
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e6:	ea03 0a0a 	and.w	sl, r3, sl
 800a7ea:	e6ff      	b.n	800a5ec <_strtod_l+0x5fc>
 800a7ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a7f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a7f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a7f8:	36e2      	adds	r6, #226	; 0xe2
 800a7fa:	fa01 f306 	lsl.w	r3, r1, r6
 800a7fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a800:	910f      	str	r1, [sp, #60]	; 0x3c
 800a802:	e75d      	b.n	800a6c0 <_strtod_l+0x6d0>
 800a804:	2300      	movs	r3, #0
 800a806:	930a      	str	r3, [sp, #40]	; 0x28
 800a808:	2301      	movs	r3, #1
 800a80a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a80c:	e758      	b.n	800a6c0 <_strtod_l+0x6d0>
 800a80e:	4632      	mov	r2, r6
 800a810:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a812:	4648      	mov	r0, r9
 800a814:	f001 fe50 	bl	800c4b8 <__lshift>
 800a818:	901c      	str	r0, [sp, #112]	; 0x70
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f47f af7c 	bne.w	800a718 <_strtod_l+0x728>
 800a820:	e604      	b.n	800a42c <_strtod_l+0x43c>
 800a822:	bf00      	nop
 800a824:	0800ee28 	.word	0x0800ee28
 800a828:	fffffc02 	.word	0xfffffc02
 800a82c:	465d      	mov	r5, fp
 800a82e:	f040 8086 	bne.w	800a93e <_strtod_l+0x94e>
 800a832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a834:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a838:	b32a      	cbz	r2, 800a886 <_strtod_l+0x896>
 800a83a:	4aaf      	ldr	r2, [pc, #700]	; (800aaf8 <_strtod_l+0xb08>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d153      	bne.n	800a8e8 <_strtod_l+0x8f8>
 800a840:	9b04      	ldr	r3, [sp, #16]
 800a842:	4650      	mov	r0, sl
 800a844:	b1d3      	cbz	r3, 800a87c <_strtod_l+0x88c>
 800a846:	4aad      	ldr	r2, [pc, #692]	; (800aafc <_strtod_l+0xb0c>)
 800a848:	402a      	ands	r2, r5
 800a84a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a84e:	f04f 31ff 	mov.w	r1, #4294967295
 800a852:	d816      	bhi.n	800a882 <_strtod_l+0x892>
 800a854:	0d12      	lsrs	r2, r2, #20
 800a856:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a85a:	fa01 f303 	lsl.w	r3, r1, r3
 800a85e:	4298      	cmp	r0, r3
 800a860:	d142      	bne.n	800a8e8 <_strtod_l+0x8f8>
 800a862:	4ba7      	ldr	r3, [pc, #668]	; (800ab00 <_strtod_l+0xb10>)
 800a864:	429d      	cmp	r5, r3
 800a866:	d102      	bne.n	800a86e <_strtod_l+0x87e>
 800a868:	3001      	adds	r0, #1
 800a86a:	f43f addf 	beq.w	800a42c <_strtod_l+0x43c>
 800a86e:	4ba3      	ldr	r3, [pc, #652]	; (800aafc <_strtod_l+0xb0c>)
 800a870:	402b      	ands	r3, r5
 800a872:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a876:	f04f 0a00 	mov.w	sl, #0
 800a87a:	e7a0      	b.n	800a7be <_strtod_l+0x7ce>
 800a87c:	f04f 33ff 	mov.w	r3, #4294967295
 800a880:	e7ed      	b.n	800a85e <_strtod_l+0x86e>
 800a882:	460b      	mov	r3, r1
 800a884:	e7eb      	b.n	800a85e <_strtod_l+0x86e>
 800a886:	bb7b      	cbnz	r3, 800a8e8 <_strtod_l+0x8f8>
 800a888:	f1ba 0f00 	cmp.w	sl, #0
 800a88c:	d12c      	bne.n	800a8e8 <_strtod_l+0x8f8>
 800a88e:	9904      	ldr	r1, [sp, #16]
 800a890:	4a9a      	ldr	r2, [pc, #616]	; (800aafc <_strtod_l+0xb0c>)
 800a892:	465b      	mov	r3, fp
 800a894:	b1f1      	cbz	r1, 800a8d4 <_strtod_l+0x8e4>
 800a896:	ea02 010b 	and.w	r1, r2, fp
 800a89a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a89e:	dc19      	bgt.n	800a8d4 <_strtod_l+0x8e4>
 800a8a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a8a4:	f77f ae5b 	ble.w	800a55e <_strtod_l+0x56e>
 800a8a8:	4a96      	ldr	r2, [pc, #600]	; (800ab04 <_strtod_l+0xb14>)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	4659      	mov	r1, fp
 800a8b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a8b8:	f7f5 fec6 	bl	8000648 <__aeabi_dmul>
 800a8bc:	4682      	mov	sl, r0
 800a8be:	468b      	mov	fp, r1
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	f47f adbe 	bne.w	800a442 <_strtod_l+0x452>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	f47f adbb 	bne.w	800a442 <_strtod_l+0x452>
 800a8cc:	2322      	movs	r3, #34	; 0x22
 800a8ce:	f8c9 3000 	str.w	r3, [r9]
 800a8d2:	e5b6      	b.n	800a442 <_strtod_l+0x452>
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a8da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8e2:	f04f 3aff 	mov.w	sl, #4294967295
 800a8e6:	e76a      	b.n	800a7be <_strtod_l+0x7ce>
 800a8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ea:	b193      	cbz	r3, 800a912 <_strtod_l+0x922>
 800a8ec:	422b      	tst	r3, r5
 800a8ee:	f43f af66 	beq.w	800a7be <_strtod_l+0x7ce>
 800a8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8f4:	9a04      	ldr	r2, [sp, #16]
 800a8f6:	4650      	mov	r0, sl
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	b173      	cbz	r3, 800a91a <_strtod_l+0x92a>
 800a8fc:	f7ff fb5c 	bl	8009fb8 <sulp>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a908:	f7f5 fce8 	bl	80002dc <__adddf3>
 800a90c:	4682      	mov	sl, r0
 800a90e:	468b      	mov	fp, r1
 800a910:	e755      	b.n	800a7be <_strtod_l+0x7ce>
 800a912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a914:	ea13 0f0a 	tst.w	r3, sl
 800a918:	e7e9      	b.n	800a8ee <_strtod_l+0x8fe>
 800a91a:	f7ff fb4d 	bl	8009fb8 <sulp>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a926:	f7f5 fcd7 	bl	80002d8 <__aeabi_dsub>
 800a92a:	2200      	movs	r2, #0
 800a92c:	2300      	movs	r3, #0
 800a92e:	4682      	mov	sl, r0
 800a930:	468b      	mov	fp, r1
 800a932:	f7f6 f8f1 	bl	8000b18 <__aeabi_dcmpeq>
 800a936:	2800      	cmp	r0, #0
 800a938:	f47f ae11 	bne.w	800a55e <_strtod_l+0x56e>
 800a93c:	e73f      	b.n	800a7be <_strtod_l+0x7ce>
 800a93e:	4641      	mov	r1, r8
 800a940:	4620      	mov	r0, r4
 800a942:	f001 ff4a 	bl	800c7da <__ratio>
 800a946:	ec57 6b10 	vmov	r6, r7, d0
 800a94a:	2200      	movs	r2, #0
 800a94c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a950:	ee10 0a10 	vmov	r0, s0
 800a954:	4639      	mov	r1, r7
 800a956:	f7f6 f8f3 	bl	8000b40 <__aeabi_dcmple>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d077      	beq.n	800aa4e <_strtod_l+0xa5e>
 800a95e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a960:	2b00      	cmp	r3, #0
 800a962:	d04a      	beq.n	800a9fa <_strtod_l+0xa0a>
 800a964:	4b68      	ldr	r3, [pc, #416]	; (800ab08 <_strtod_l+0xb18>)
 800a966:	2200      	movs	r2, #0
 800a968:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a96c:	4f66      	ldr	r7, [pc, #408]	; (800ab08 <_strtod_l+0xb18>)
 800a96e:	2600      	movs	r6, #0
 800a970:	4b62      	ldr	r3, [pc, #392]	; (800aafc <_strtod_l+0xb0c>)
 800a972:	402b      	ands	r3, r5
 800a974:	930f      	str	r3, [sp, #60]	; 0x3c
 800a976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a978:	4b64      	ldr	r3, [pc, #400]	; (800ab0c <_strtod_l+0xb1c>)
 800a97a:	429a      	cmp	r2, r3
 800a97c:	f040 80ce 	bne.w	800ab1c <_strtod_l+0xb2c>
 800a980:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a988:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a98c:	ec4b ab10 	vmov	d0, sl, fp
 800a990:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a994:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a998:	f001 fe5a 	bl	800c650 <__ulp>
 800a99c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9a0:	ec53 2b10 	vmov	r2, r3, d0
 800a9a4:	f7f5 fe50 	bl	8000648 <__aeabi_dmul>
 800a9a8:	4652      	mov	r2, sl
 800a9aa:	465b      	mov	r3, fp
 800a9ac:	f7f5 fc96 	bl	80002dc <__adddf3>
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4952      	ldr	r1, [pc, #328]	; (800aafc <_strtod_l+0xb0c>)
 800a9b4:	4a56      	ldr	r2, [pc, #344]	; (800ab10 <_strtod_l+0xb20>)
 800a9b6:	4019      	ands	r1, r3
 800a9b8:	4291      	cmp	r1, r2
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	d95b      	bls.n	800aa76 <_strtod_l+0xa86>
 800a9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d103      	bne.n	800a9d0 <_strtod_l+0x9e0>
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	f43f ad2e 	beq.w	800a42c <_strtod_l+0x43c>
 800a9d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800ab00 <_strtod_l+0xb10>
 800a9d4:	f04f 3aff 	mov.w	sl, #4294967295
 800a9d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9da:	4648      	mov	r0, r9
 800a9dc:	f001 fba0 	bl	800c120 <_Bfree>
 800a9e0:	9905      	ldr	r1, [sp, #20]
 800a9e2:	4648      	mov	r0, r9
 800a9e4:	f001 fb9c 	bl	800c120 <_Bfree>
 800a9e8:	4641      	mov	r1, r8
 800a9ea:	4648      	mov	r0, r9
 800a9ec:	f001 fb98 	bl	800c120 <_Bfree>
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4648      	mov	r0, r9
 800a9f4:	f001 fb94 	bl	800c120 <_Bfree>
 800a9f8:	e619      	b.n	800a62e <_strtod_l+0x63e>
 800a9fa:	f1ba 0f00 	cmp.w	sl, #0
 800a9fe:	d11a      	bne.n	800aa36 <_strtod_l+0xa46>
 800aa00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa04:	b9eb      	cbnz	r3, 800aa42 <_strtod_l+0xa52>
 800aa06:	2200      	movs	r2, #0
 800aa08:	4b3f      	ldr	r3, [pc, #252]	; (800ab08 <_strtod_l+0xb18>)
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	f7f6 f88d 	bl	8000b2c <__aeabi_dcmplt>
 800aa12:	b9c8      	cbnz	r0, 800aa48 <_strtod_l+0xa58>
 800aa14:	4630      	mov	r0, r6
 800aa16:	4639      	mov	r1, r7
 800aa18:	2200      	movs	r2, #0
 800aa1a:	4b3e      	ldr	r3, [pc, #248]	; (800ab14 <_strtod_l+0xb24>)
 800aa1c:	f7f5 fe14 	bl	8000648 <__aeabi_dmul>
 800aa20:	4606      	mov	r6, r0
 800aa22:	460f      	mov	r7, r1
 800aa24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aa28:	9618      	str	r6, [sp, #96]	; 0x60
 800aa2a:	9319      	str	r3, [sp, #100]	; 0x64
 800aa2c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800aa30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aa34:	e79c      	b.n	800a970 <_strtod_l+0x980>
 800aa36:	f1ba 0f01 	cmp.w	sl, #1
 800aa3a:	d102      	bne.n	800aa42 <_strtod_l+0xa52>
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	f43f ad8e 	beq.w	800a55e <_strtod_l+0x56e>
 800aa42:	2200      	movs	r2, #0
 800aa44:	4b34      	ldr	r3, [pc, #208]	; (800ab18 <_strtod_l+0xb28>)
 800aa46:	e78f      	b.n	800a968 <_strtod_l+0x978>
 800aa48:	2600      	movs	r6, #0
 800aa4a:	4f32      	ldr	r7, [pc, #200]	; (800ab14 <_strtod_l+0xb24>)
 800aa4c:	e7ea      	b.n	800aa24 <_strtod_l+0xa34>
 800aa4e:	4b31      	ldr	r3, [pc, #196]	; (800ab14 <_strtod_l+0xb24>)
 800aa50:	4630      	mov	r0, r6
 800aa52:	4639      	mov	r1, r7
 800aa54:	2200      	movs	r2, #0
 800aa56:	f7f5 fdf7 	bl	8000648 <__aeabi_dmul>
 800aa5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	460f      	mov	r7, r1
 800aa60:	b933      	cbnz	r3, 800aa70 <_strtod_l+0xa80>
 800aa62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa66:	9010      	str	r0, [sp, #64]	; 0x40
 800aa68:	9311      	str	r3, [sp, #68]	; 0x44
 800aa6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa6e:	e7df      	b.n	800aa30 <_strtod_l+0xa40>
 800aa70:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800aa74:	e7f9      	b.n	800aa6a <_strtod_l+0xa7a>
 800aa76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aa7a:	9b04      	ldr	r3, [sp, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1ab      	bne.n	800a9d8 <_strtod_l+0x9e8>
 800aa80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa84:	0d1b      	lsrs	r3, r3, #20
 800aa86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa88:	051b      	lsls	r3, r3, #20
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	465d      	mov	r5, fp
 800aa8e:	d1a3      	bne.n	800a9d8 <_strtod_l+0x9e8>
 800aa90:	4639      	mov	r1, r7
 800aa92:	4630      	mov	r0, r6
 800aa94:	f7f6 f888 	bl	8000ba8 <__aeabi_d2iz>
 800aa98:	f7f5 fd6c 	bl	8000574 <__aeabi_i2d>
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7f5 fc18 	bl	80002d8 <__aeabi_dsub>
 800aaa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460f      	mov	r7, r1
 800aaae:	b933      	cbnz	r3, 800aabe <_strtod_l+0xace>
 800aab0:	f1ba 0f00 	cmp.w	sl, #0
 800aab4:	d103      	bne.n	800aabe <_strtod_l+0xace>
 800aab6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800aaba:	2d00      	cmp	r5, #0
 800aabc:	d06d      	beq.n	800ab9a <_strtod_l+0xbaa>
 800aabe:	a30a      	add	r3, pc, #40	; (adr r3, 800aae8 <_strtod_l+0xaf8>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	4630      	mov	r0, r6
 800aac6:	4639      	mov	r1, r7
 800aac8:	f7f6 f830 	bl	8000b2c <__aeabi_dcmplt>
 800aacc:	2800      	cmp	r0, #0
 800aace:	f47f acb8 	bne.w	800a442 <_strtod_l+0x452>
 800aad2:	a307      	add	r3, pc, #28	; (adr r3, 800aaf0 <_strtod_l+0xb00>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	4630      	mov	r0, r6
 800aada:	4639      	mov	r1, r7
 800aadc:	f7f6 f844 	bl	8000b68 <__aeabi_dcmpgt>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	f43f af79 	beq.w	800a9d8 <_strtod_l+0x9e8>
 800aae6:	e4ac      	b.n	800a442 <_strtod_l+0x452>
 800aae8:	94a03595 	.word	0x94a03595
 800aaec:	3fdfffff 	.word	0x3fdfffff
 800aaf0:	35afe535 	.word	0x35afe535
 800aaf4:	3fe00000 	.word	0x3fe00000
 800aaf8:	000fffff 	.word	0x000fffff
 800aafc:	7ff00000 	.word	0x7ff00000
 800ab00:	7fefffff 	.word	0x7fefffff
 800ab04:	39500000 	.word	0x39500000
 800ab08:	3ff00000 	.word	0x3ff00000
 800ab0c:	7fe00000 	.word	0x7fe00000
 800ab10:	7c9fffff 	.word	0x7c9fffff
 800ab14:	3fe00000 	.word	0x3fe00000
 800ab18:	bff00000 	.word	0xbff00000
 800ab1c:	9b04      	ldr	r3, [sp, #16]
 800ab1e:	b333      	cbz	r3, 800ab6e <_strtod_l+0xb7e>
 800ab20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab26:	d822      	bhi.n	800ab6e <_strtod_l+0xb7e>
 800ab28:	a327      	add	r3, pc, #156	; (adr r3, 800abc8 <_strtod_l+0xbd8>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f6 f805 	bl	8000b40 <__aeabi_dcmple>
 800ab36:	b1a0      	cbz	r0, 800ab62 <_strtod_l+0xb72>
 800ab38:	4639      	mov	r1, r7
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f7f6 f85c 	bl	8000bf8 <__aeabi_d2uiz>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	bf08      	it	eq
 800ab44:	2001      	moveq	r0, #1
 800ab46:	f7f5 fd05 	bl	8000554 <__aeabi_ui2d>
 800ab4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
 800ab50:	bb03      	cbnz	r3, 800ab94 <_strtod_l+0xba4>
 800ab52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab56:	9012      	str	r0, [sp, #72]	; 0x48
 800ab58:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ab5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ab62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab66:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ab6a:	1a9b      	subs	r3, r3, r2
 800ab6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab6e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ab72:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ab76:	f001 fd6b 	bl	800c650 <__ulp>
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	ec53 2b10 	vmov	r2, r3, d0
 800ab80:	4659      	mov	r1, fp
 800ab82:	f7f5 fd61 	bl	8000648 <__aeabi_dmul>
 800ab86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab8a:	f7f5 fba7 	bl	80002dc <__adddf3>
 800ab8e:	4682      	mov	sl, r0
 800ab90:	468b      	mov	fp, r1
 800ab92:	e772      	b.n	800aa7a <_strtod_l+0xa8a>
 800ab94:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ab98:	e7df      	b.n	800ab5a <_strtod_l+0xb6a>
 800ab9a:	a30d      	add	r3, pc, #52	; (adr r3, 800abd0 <_strtod_l+0xbe0>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f7f5 ffc4 	bl	8000b2c <__aeabi_dcmplt>
 800aba4:	e79c      	b.n	800aae0 <_strtod_l+0xaf0>
 800aba6:	2300      	movs	r3, #0
 800aba8:	930d      	str	r3, [sp, #52]	; 0x34
 800abaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	f7ff ba61 	b.w	800a076 <_strtod_l+0x86>
 800abb4:	2b65      	cmp	r3, #101	; 0x65
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	f43f ab4e 	beq.w	800a25a <_strtod_l+0x26a>
 800abbe:	2101      	movs	r1, #1
 800abc0:	4614      	mov	r4, r2
 800abc2:	9104      	str	r1, [sp, #16]
 800abc4:	f7ff bacb 	b.w	800a15e <_strtod_l+0x16e>
 800abc8:	ffc00000 	.word	0xffc00000
 800abcc:	41dfffff 	.word	0x41dfffff
 800abd0:	94a03595 	.word	0x94a03595
 800abd4:	3fcfffff 	.word	0x3fcfffff

0800abd8 <_strtod_r>:
 800abd8:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <_strtod_r+0x18>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	b410      	push	{r4}
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	4c04      	ldr	r4, [pc, #16]	; (800abf4 <_strtod_r+0x1c>)
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bf08      	it	eq
 800abe6:	4623      	moveq	r3, r4
 800abe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abec:	f7ff ba00 	b.w	8009ff0 <_strtod_l>
 800abf0:	2000006c 	.word	0x2000006c
 800abf4:	200000d0 	.word	0x200000d0

0800abf8 <_strtol_l.isra.0>:
 800abf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abfc:	4680      	mov	r8, r0
 800abfe:	4689      	mov	r9, r1
 800ac00:	4692      	mov	sl, r2
 800ac02:	461e      	mov	r6, r3
 800ac04:	460f      	mov	r7, r1
 800ac06:	463d      	mov	r5, r7
 800ac08:	9808      	ldr	r0, [sp, #32]
 800ac0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac0e:	f001 fa25 	bl	800c05c <__locale_ctype_ptr_l>
 800ac12:	4420      	add	r0, r4
 800ac14:	7843      	ldrb	r3, [r0, #1]
 800ac16:	f013 0308 	ands.w	r3, r3, #8
 800ac1a:	d132      	bne.n	800ac82 <_strtol_l.isra.0+0x8a>
 800ac1c:	2c2d      	cmp	r4, #45	; 0x2d
 800ac1e:	d132      	bne.n	800ac86 <_strtol_l.isra.0+0x8e>
 800ac20:	787c      	ldrb	r4, [r7, #1]
 800ac22:	1cbd      	adds	r5, r7, #2
 800ac24:	2201      	movs	r2, #1
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	d05d      	beq.n	800ace6 <_strtol_l.isra.0+0xee>
 800ac2a:	2e10      	cmp	r6, #16
 800ac2c:	d109      	bne.n	800ac42 <_strtol_l.isra.0+0x4a>
 800ac2e:	2c30      	cmp	r4, #48	; 0x30
 800ac30:	d107      	bne.n	800ac42 <_strtol_l.isra.0+0x4a>
 800ac32:	782b      	ldrb	r3, [r5, #0]
 800ac34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac38:	2b58      	cmp	r3, #88	; 0x58
 800ac3a:	d14f      	bne.n	800acdc <_strtol_l.isra.0+0xe4>
 800ac3c:	786c      	ldrb	r4, [r5, #1]
 800ac3e:	2610      	movs	r6, #16
 800ac40:	3502      	adds	r5, #2
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	bf14      	ite	ne
 800ac46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ac4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ac4e:	2700      	movs	r7, #0
 800ac50:	fbb1 fcf6 	udiv	ip, r1, r6
 800ac54:	4638      	mov	r0, r7
 800ac56:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ac5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ac5e:	2b09      	cmp	r3, #9
 800ac60:	d817      	bhi.n	800ac92 <_strtol_l.isra.0+0x9a>
 800ac62:	461c      	mov	r4, r3
 800ac64:	42a6      	cmp	r6, r4
 800ac66:	dd23      	ble.n	800acb0 <_strtol_l.isra.0+0xb8>
 800ac68:	1c7b      	adds	r3, r7, #1
 800ac6a:	d007      	beq.n	800ac7c <_strtol_l.isra.0+0x84>
 800ac6c:	4584      	cmp	ip, r0
 800ac6e:	d31c      	bcc.n	800acaa <_strtol_l.isra.0+0xb2>
 800ac70:	d101      	bne.n	800ac76 <_strtol_l.isra.0+0x7e>
 800ac72:	45a6      	cmp	lr, r4
 800ac74:	db19      	blt.n	800acaa <_strtol_l.isra.0+0xb2>
 800ac76:	fb00 4006 	mla	r0, r0, r6, r4
 800ac7a:	2701      	movs	r7, #1
 800ac7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac80:	e7eb      	b.n	800ac5a <_strtol_l.isra.0+0x62>
 800ac82:	462f      	mov	r7, r5
 800ac84:	e7bf      	b.n	800ac06 <_strtol_l.isra.0+0xe>
 800ac86:	2c2b      	cmp	r4, #43	; 0x2b
 800ac88:	bf04      	itt	eq
 800ac8a:	1cbd      	addeq	r5, r7, #2
 800ac8c:	787c      	ldrbeq	r4, [r7, #1]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	e7c9      	b.n	800ac26 <_strtol_l.isra.0+0x2e>
 800ac92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ac96:	2b19      	cmp	r3, #25
 800ac98:	d801      	bhi.n	800ac9e <_strtol_l.isra.0+0xa6>
 800ac9a:	3c37      	subs	r4, #55	; 0x37
 800ac9c:	e7e2      	b.n	800ac64 <_strtol_l.isra.0+0x6c>
 800ac9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aca2:	2b19      	cmp	r3, #25
 800aca4:	d804      	bhi.n	800acb0 <_strtol_l.isra.0+0xb8>
 800aca6:	3c57      	subs	r4, #87	; 0x57
 800aca8:	e7dc      	b.n	800ac64 <_strtol_l.isra.0+0x6c>
 800acaa:	f04f 37ff 	mov.w	r7, #4294967295
 800acae:	e7e5      	b.n	800ac7c <_strtol_l.isra.0+0x84>
 800acb0:	1c7b      	adds	r3, r7, #1
 800acb2:	d108      	bne.n	800acc6 <_strtol_l.isra.0+0xce>
 800acb4:	2322      	movs	r3, #34	; 0x22
 800acb6:	f8c8 3000 	str.w	r3, [r8]
 800acba:	4608      	mov	r0, r1
 800acbc:	f1ba 0f00 	cmp.w	sl, #0
 800acc0:	d107      	bne.n	800acd2 <_strtol_l.isra.0+0xda>
 800acc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc6:	b102      	cbz	r2, 800acca <_strtol_l.isra.0+0xd2>
 800acc8:	4240      	negs	r0, r0
 800acca:	f1ba 0f00 	cmp.w	sl, #0
 800acce:	d0f8      	beq.n	800acc2 <_strtol_l.isra.0+0xca>
 800acd0:	b10f      	cbz	r7, 800acd6 <_strtol_l.isra.0+0xde>
 800acd2:	f105 39ff 	add.w	r9, r5, #4294967295
 800acd6:	f8ca 9000 	str.w	r9, [sl]
 800acda:	e7f2      	b.n	800acc2 <_strtol_l.isra.0+0xca>
 800acdc:	2430      	movs	r4, #48	; 0x30
 800acde:	2e00      	cmp	r6, #0
 800ace0:	d1af      	bne.n	800ac42 <_strtol_l.isra.0+0x4a>
 800ace2:	2608      	movs	r6, #8
 800ace4:	e7ad      	b.n	800ac42 <_strtol_l.isra.0+0x4a>
 800ace6:	2c30      	cmp	r4, #48	; 0x30
 800ace8:	d0a3      	beq.n	800ac32 <_strtol_l.isra.0+0x3a>
 800acea:	260a      	movs	r6, #10
 800acec:	e7a9      	b.n	800ac42 <_strtol_l.isra.0+0x4a>
	...

0800acf0 <_strtol_r>:
 800acf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acf2:	4c06      	ldr	r4, [pc, #24]	; (800ad0c <_strtol_r+0x1c>)
 800acf4:	4d06      	ldr	r5, [pc, #24]	; (800ad10 <_strtol_r+0x20>)
 800acf6:	6824      	ldr	r4, [r4, #0]
 800acf8:	6a24      	ldr	r4, [r4, #32]
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	bf08      	it	eq
 800acfe:	462c      	moveq	r4, r5
 800ad00:	9400      	str	r4, [sp, #0]
 800ad02:	f7ff ff79 	bl	800abf8 <_strtol_l.isra.0>
 800ad06:	b003      	add	sp, #12
 800ad08:	bd30      	pop	{r4, r5, pc}
 800ad0a:	bf00      	nop
 800ad0c:	2000006c 	.word	0x2000006c
 800ad10:	200000d0 	.word	0x200000d0

0800ad14 <_vsniprintf_r>:
 800ad14:	b530      	push	{r4, r5, lr}
 800ad16:	1e14      	subs	r4, r2, #0
 800ad18:	4605      	mov	r5, r0
 800ad1a:	b09b      	sub	sp, #108	; 0x6c
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	da05      	bge.n	800ad2c <_vsniprintf_r+0x18>
 800ad20:	238b      	movs	r3, #139	; 0x8b
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	b01b      	add	sp, #108	; 0x6c
 800ad2a:	bd30      	pop	{r4, r5, pc}
 800ad2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad30:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ad34:	bf14      	ite	ne
 800ad36:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad3a:	4623      	moveq	r3, r4
 800ad3c:	9302      	str	r3, [sp, #8]
 800ad3e:	9305      	str	r3, [sp, #20]
 800ad40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad44:	9100      	str	r1, [sp, #0]
 800ad46:	9104      	str	r1, [sp, #16]
 800ad48:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad50:	4669      	mov	r1, sp
 800ad52:	4628      	mov	r0, r5
 800ad54:	f001 fec0 	bl	800cad8 <_svfiprintf_r>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	bfbc      	itt	lt
 800ad5c:	238b      	movlt	r3, #139	; 0x8b
 800ad5e:	602b      	strlt	r3, [r5, #0]
 800ad60:	2c00      	cmp	r4, #0
 800ad62:	d0e1      	beq.n	800ad28 <_vsniprintf_r+0x14>
 800ad64:	9b00      	ldr	r3, [sp, #0]
 800ad66:	2200      	movs	r2, #0
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	e7dd      	b.n	800ad28 <_vsniprintf_r+0x14>

0800ad6c <vsniprintf>:
 800ad6c:	b507      	push	{r0, r1, r2, lr}
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	4613      	mov	r3, r2
 800ad72:	460a      	mov	r2, r1
 800ad74:	4601      	mov	r1, r0
 800ad76:	4803      	ldr	r0, [pc, #12]	; (800ad84 <vsniprintf+0x18>)
 800ad78:	6800      	ldr	r0, [r0, #0]
 800ad7a:	f7ff ffcb 	bl	800ad14 <_vsniprintf_r>
 800ad7e:	b003      	add	sp, #12
 800ad80:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad84:	2000006c 	.word	0x2000006c

0800ad88 <quorem>:
 800ad88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	6903      	ldr	r3, [r0, #16]
 800ad8e:	690c      	ldr	r4, [r1, #16]
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	4680      	mov	r8, r0
 800ad94:	f2c0 8082 	blt.w	800ae9c <quorem+0x114>
 800ad98:	3c01      	subs	r4, #1
 800ad9a:	f101 0714 	add.w	r7, r1, #20
 800ad9e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ada2:	f100 0614 	add.w	r6, r0, #20
 800ada6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800adaa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800adae:	eb06 030c 	add.w	r3, r6, ip
 800adb2:	3501      	adds	r5, #1
 800adb4:	eb07 090c 	add.w	r9, r7, ip
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	fbb0 f5f5 	udiv	r5, r0, r5
 800adbe:	b395      	cbz	r5, 800ae26 <quorem+0x9e>
 800adc0:	f04f 0a00 	mov.w	sl, #0
 800adc4:	4638      	mov	r0, r7
 800adc6:	46b6      	mov	lr, r6
 800adc8:	46d3      	mov	fp, sl
 800adca:	f850 2b04 	ldr.w	r2, [r0], #4
 800adce:	b293      	uxth	r3, r2
 800add0:	fb05 a303 	mla	r3, r5, r3, sl
 800add4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800add8:	b29b      	uxth	r3, r3
 800adda:	ebab 0303 	sub.w	r3, fp, r3
 800adde:	0c12      	lsrs	r2, r2, #16
 800ade0:	f8de b000 	ldr.w	fp, [lr]
 800ade4:	fb05 a202 	mla	r2, r5, r2, sl
 800ade8:	fa13 f38b 	uxtah	r3, r3, fp
 800adec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800adf0:	fa1f fb82 	uxth.w	fp, r2
 800adf4:	f8de 2000 	ldr.w	r2, [lr]
 800adf8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800adfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae06:	4581      	cmp	r9, r0
 800ae08:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ae0c:	f84e 3b04 	str.w	r3, [lr], #4
 800ae10:	d2db      	bcs.n	800adca <quorem+0x42>
 800ae12:	f856 300c 	ldr.w	r3, [r6, ip]
 800ae16:	b933      	cbnz	r3, 800ae26 <quorem+0x9e>
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	3b04      	subs	r3, #4
 800ae1c:	429e      	cmp	r6, r3
 800ae1e:	461a      	mov	r2, r3
 800ae20:	d330      	bcc.n	800ae84 <quorem+0xfc>
 800ae22:	f8c8 4010 	str.w	r4, [r8, #16]
 800ae26:	4640      	mov	r0, r8
 800ae28:	f001 fb9a 	bl	800c560 <__mcmp>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	db25      	blt.n	800ae7c <quorem+0xf4>
 800ae30:	3501      	adds	r5, #1
 800ae32:	4630      	mov	r0, r6
 800ae34:	f04f 0c00 	mov.w	ip, #0
 800ae38:	f857 2b04 	ldr.w	r2, [r7], #4
 800ae3c:	f8d0 e000 	ldr.w	lr, [r0]
 800ae40:	b293      	uxth	r3, r2
 800ae42:	ebac 0303 	sub.w	r3, ip, r3
 800ae46:	0c12      	lsrs	r2, r2, #16
 800ae48:	fa13 f38e 	uxtah	r3, r3, lr
 800ae4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae5a:	45b9      	cmp	r9, r7
 800ae5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae60:	f840 3b04 	str.w	r3, [r0], #4
 800ae64:	d2e8      	bcs.n	800ae38 <quorem+0xb0>
 800ae66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ae6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ae6e:	b92a      	cbnz	r2, 800ae7c <quorem+0xf4>
 800ae70:	3b04      	subs	r3, #4
 800ae72:	429e      	cmp	r6, r3
 800ae74:	461a      	mov	r2, r3
 800ae76:	d30b      	bcc.n	800ae90 <quorem+0x108>
 800ae78:	f8c8 4010 	str.w	r4, [r8, #16]
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	b003      	add	sp, #12
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	6812      	ldr	r2, [r2, #0]
 800ae86:	3b04      	subs	r3, #4
 800ae88:	2a00      	cmp	r2, #0
 800ae8a:	d1ca      	bne.n	800ae22 <quorem+0x9a>
 800ae8c:	3c01      	subs	r4, #1
 800ae8e:	e7c5      	b.n	800ae1c <quorem+0x94>
 800ae90:	6812      	ldr	r2, [r2, #0]
 800ae92:	3b04      	subs	r3, #4
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	d1ef      	bne.n	800ae78 <quorem+0xf0>
 800ae98:	3c01      	subs	r4, #1
 800ae9a:	e7ea      	b.n	800ae72 <quorem+0xea>
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	e7ee      	b.n	800ae7e <quorem+0xf6>

0800aea0 <_dtoa_r>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	ec57 6b10 	vmov	r6, r7, d0
 800aea8:	b097      	sub	sp, #92	; 0x5c
 800aeaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aeac:	9106      	str	r1, [sp, #24]
 800aeae:	4604      	mov	r4, r0
 800aeb0:	920b      	str	r2, [sp, #44]	; 0x2c
 800aeb2:	9312      	str	r3, [sp, #72]	; 0x48
 800aeb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aeb8:	e9cd 6700 	strd	r6, r7, [sp]
 800aebc:	b93d      	cbnz	r5, 800aece <_dtoa_r+0x2e>
 800aebe:	2010      	movs	r0, #16
 800aec0:	f001 f8e0 	bl	800c084 <malloc>
 800aec4:	6260      	str	r0, [r4, #36]	; 0x24
 800aec6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aeca:	6005      	str	r5, [r0, #0]
 800aecc:	60c5      	str	r5, [r0, #12]
 800aece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed0:	6819      	ldr	r1, [r3, #0]
 800aed2:	b151      	cbz	r1, 800aeea <_dtoa_r+0x4a>
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	604a      	str	r2, [r1, #4]
 800aed8:	2301      	movs	r3, #1
 800aeda:	4093      	lsls	r3, r2
 800aedc:	608b      	str	r3, [r1, #8]
 800aede:	4620      	mov	r0, r4
 800aee0:	f001 f91e 	bl	800c120 <_Bfree>
 800aee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee6:	2200      	movs	r2, #0
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	1e3b      	subs	r3, r7, #0
 800aeec:	bfbb      	ittet	lt
 800aeee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aef2:	9301      	strlt	r3, [sp, #4]
 800aef4:	2300      	movge	r3, #0
 800aef6:	2201      	movlt	r2, #1
 800aef8:	bfac      	ite	ge
 800aefa:	f8c8 3000 	strge.w	r3, [r8]
 800aefe:	f8c8 2000 	strlt.w	r2, [r8]
 800af02:	4baf      	ldr	r3, [pc, #700]	; (800b1c0 <_dtoa_r+0x320>)
 800af04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af08:	ea33 0308 	bics.w	r3, r3, r8
 800af0c:	d114      	bne.n	800af38 <_dtoa_r+0x98>
 800af0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af10:	f242 730f 	movw	r3, #9999	; 0x270f
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	9b00      	ldr	r3, [sp, #0]
 800af18:	b923      	cbnz	r3, 800af24 <_dtoa_r+0x84>
 800af1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800af1e:	2800      	cmp	r0, #0
 800af20:	f000 8542 	beq.w	800b9a8 <_dtoa_r+0xb08>
 800af24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b1d4 <_dtoa_r+0x334>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 8544 	beq.w	800b9b8 <_dtoa_r+0xb18>
 800af30:	f10b 0303 	add.w	r3, fp, #3
 800af34:	f000 bd3e 	b.w	800b9b4 <_dtoa_r+0xb14>
 800af38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af3c:	2200      	movs	r2, #0
 800af3e:	2300      	movs	r3, #0
 800af40:	4630      	mov	r0, r6
 800af42:	4639      	mov	r1, r7
 800af44:	f7f5 fde8 	bl	8000b18 <__aeabi_dcmpeq>
 800af48:	4681      	mov	r9, r0
 800af4a:	b168      	cbz	r0, 800af68 <_dtoa_r+0xc8>
 800af4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af4e:	2301      	movs	r3, #1
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 8524 	beq.w	800b9a2 <_dtoa_r+0xb02>
 800af5a:	4b9a      	ldr	r3, [pc, #616]	; (800b1c4 <_dtoa_r+0x324>)
 800af5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af5e:	f103 3bff 	add.w	fp, r3, #4294967295
 800af62:	6013      	str	r3, [r2, #0]
 800af64:	f000 bd28 	b.w	800b9b8 <_dtoa_r+0xb18>
 800af68:	aa14      	add	r2, sp, #80	; 0x50
 800af6a:	a915      	add	r1, sp, #84	; 0x54
 800af6c:	ec47 6b10 	vmov	d0, r6, r7
 800af70:	4620      	mov	r0, r4
 800af72:	f001 fbe3 	bl	800c73c <__d2b>
 800af76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800af7a:	9004      	str	r0, [sp, #16]
 800af7c:	2d00      	cmp	r5, #0
 800af7e:	d07c      	beq.n	800b07a <_dtoa_r+0x1da>
 800af80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800af88:	46b2      	mov	sl, r6
 800af8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800af8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800af96:	2200      	movs	r2, #0
 800af98:	4b8b      	ldr	r3, [pc, #556]	; (800b1c8 <_dtoa_r+0x328>)
 800af9a:	4650      	mov	r0, sl
 800af9c:	4659      	mov	r1, fp
 800af9e:	f7f5 f99b 	bl	80002d8 <__aeabi_dsub>
 800afa2:	a381      	add	r3, pc, #516	; (adr r3, 800b1a8 <_dtoa_r+0x308>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 fb4e 	bl	8000648 <__aeabi_dmul>
 800afac:	a380      	add	r3, pc, #512	; (adr r3, 800b1b0 <_dtoa_r+0x310>)
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f7f5 f993 	bl	80002dc <__adddf3>
 800afb6:	4606      	mov	r6, r0
 800afb8:	4628      	mov	r0, r5
 800afba:	460f      	mov	r7, r1
 800afbc:	f7f5 fada 	bl	8000574 <__aeabi_i2d>
 800afc0:	a37d      	add	r3, pc, #500	; (adr r3, 800b1b8 <_dtoa_r+0x318>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 fb3f 	bl	8000648 <__aeabi_dmul>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	4630      	mov	r0, r6
 800afd0:	4639      	mov	r1, r7
 800afd2:	f7f5 f983 	bl	80002dc <__adddf3>
 800afd6:	4606      	mov	r6, r0
 800afd8:	460f      	mov	r7, r1
 800afda:	f7f5 fde5 	bl	8000ba8 <__aeabi_d2iz>
 800afde:	2200      	movs	r2, #0
 800afe0:	4682      	mov	sl, r0
 800afe2:	2300      	movs	r3, #0
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	f7f5 fda0 	bl	8000b2c <__aeabi_dcmplt>
 800afec:	b148      	cbz	r0, 800b002 <_dtoa_r+0x162>
 800afee:	4650      	mov	r0, sl
 800aff0:	f7f5 fac0 	bl	8000574 <__aeabi_i2d>
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	f7f5 fd8e 	bl	8000b18 <__aeabi_dcmpeq>
 800affc:	b908      	cbnz	r0, 800b002 <_dtoa_r+0x162>
 800affe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b002:	f1ba 0f16 	cmp.w	sl, #22
 800b006:	d859      	bhi.n	800b0bc <_dtoa_r+0x21c>
 800b008:	4970      	ldr	r1, [pc, #448]	; (800b1cc <_dtoa_r+0x32c>)
 800b00a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b012:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b016:	f7f5 fda7 	bl	8000b68 <__aeabi_dcmpgt>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d050      	beq.n	800b0c0 <_dtoa_r+0x220>
 800b01e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b022:	2300      	movs	r3, #0
 800b024:	930f      	str	r3, [sp, #60]	; 0x3c
 800b026:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b028:	1b5d      	subs	r5, r3, r5
 800b02a:	f1b5 0801 	subs.w	r8, r5, #1
 800b02e:	bf49      	itett	mi
 800b030:	f1c5 0301 	rsbmi	r3, r5, #1
 800b034:	2300      	movpl	r3, #0
 800b036:	9305      	strmi	r3, [sp, #20]
 800b038:	f04f 0800 	movmi.w	r8, #0
 800b03c:	bf58      	it	pl
 800b03e:	9305      	strpl	r3, [sp, #20]
 800b040:	f1ba 0f00 	cmp.w	sl, #0
 800b044:	db3e      	blt.n	800b0c4 <_dtoa_r+0x224>
 800b046:	2300      	movs	r3, #0
 800b048:	44d0      	add	r8, sl
 800b04a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b04e:	9307      	str	r3, [sp, #28]
 800b050:	9b06      	ldr	r3, [sp, #24]
 800b052:	2b09      	cmp	r3, #9
 800b054:	f200 8090 	bhi.w	800b178 <_dtoa_r+0x2d8>
 800b058:	2b05      	cmp	r3, #5
 800b05a:	bfc4      	itt	gt
 800b05c:	3b04      	subgt	r3, #4
 800b05e:	9306      	strgt	r3, [sp, #24]
 800b060:	9b06      	ldr	r3, [sp, #24]
 800b062:	f1a3 0302 	sub.w	r3, r3, #2
 800b066:	bfcc      	ite	gt
 800b068:	2500      	movgt	r5, #0
 800b06a:	2501      	movle	r5, #1
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	f200 808f 	bhi.w	800b190 <_dtoa_r+0x2f0>
 800b072:	e8df f003 	tbb	[pc, r3]
 800b076:	7f7d      	.short	0x7f7d
 800b078:	7131      	.short	0x7131
 800b07a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b07e:	441d      	add	r5, r3
 800b080:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b084:	2820      	cmp	r0, #32
 800b086:	dd13      	ble.n	800b0b0 <_dtoa_r+0x210>
 800b088:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b08c:	9b00      	ldr	r3, [sp, #0]
 800b08e:	fa08 f800 	lsl.w	r8, r8, r0
 800b092:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b096:	fa23 f000 	lsr.w	r0, r3, r0
 800b09a:	ea48 0000 	orr.w	r0, r8, r0
 800b09e:	f7f5 fa59 	bl	8000554 <__aeabi_ui2d>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b0aa:	3d01      	subs	r5, #1
 800b0ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0ae:	e772      	b.n	800af96 <_dtoa_r+0xf6>
 800b0b0:	9b00      	ldr	r3, [sp, #0]
 800b0b2:	f1c0 0020 	rsb	r0, r0, #32
 800b0b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b0ba:	e7f0      	b.n	800b09e <_dtoa_r+0x1fe>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e7b1      	b.n	800b024 <_dtoa_r+0x184>
 800b0c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b0c2:	e7b0      	b.n	800b026 <_dtoa_r+0x186>
 800b0c4:	9b05      	ldr	r3, [sp, #20]
 800b0c6:	eba3 030a 	sub.w	r3, r3, sl
 800b0ca:	9305      	str	r3, [sp, #20]
 800b0cc:	f1ca 0300 	rsb	r3, sl, #0
 800b0d0:	9307      	str	r3, [sp, #28]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	930e      	str	r3, [sp, #56]	; 0x38
 800b0d6:	e7bb      	b.n	800b050 <_dtoa_r+0x1b0>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	930a      	str	r3, [sp, #40]	; 0x28
 800b0dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	dd59      	ble.n	800b196 <_dtoa_r+0x2f6>
 800b0e2:	9302      	str	r3, [sp, #8]
 800b0e4:	4699      	mov	r9, r3
 800b0e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	6072      	str	r2, [r6, #4]
 800b0ec:	2204      	movs	r2, #4
 800b0ee:	f102 0014 	add.w	r0, r2, #20
 800b0f2:	4298      	cmp	r0, r3
 800b0f4:	6871      	ldr	r1, [r6, #4]
 800b0f6:	d953      	bls.n	800b1a0 <_dtoa_r+0x300>
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 ffdd 	bl	800c0b8 <_Balloc>
 800b0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b100:	6030      	str	r0, [r6, #0]
 800b102:	f1b9 0f0e 	cmp.w	r9, #14
 800b106:	f8d3 b000 	ldr.w	fp, [r3]
 800b10a:	f200 80e6 	bhi.w	800b2da <_dtoa_r+0x43a>
 800b10e:	2d00      	cmp	r5, #0
 800b110:	f000 80e3 	beq.w	800b2da <_dtoa_r+0x43a>
 800b114:	ed9d 7b00 	vldr	d7, [sp]
 800b118:	f1ba 0f00 	cmp.w	sl, #0
 800b11c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b120:	dd74      	ble.n	800b20c <_dtoa_r+0x36c>
 800b122:	4a2a      	ldr	r2, [pc, #168]	; (800b1cc <_dtoa_r+0x32c>)
 800b124:	f00a 030f 	and.w	r3, sl, #15
 800b128:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b12c:	ed93 7b00 	vldr	d7, [r3]
 800b130:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b134:	06f0      	lsls	r0, r6, #27
 800b136:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b13a:	d565      	bpl.n	800b208 <_dtoa_r+0x368>
 800b13c:	4b24      	ldr	r3, [pc, #144]	; (800b1d0 <_dtoa_r+0x330>)
 800b13e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b142:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b146:	f7f5 fba9 	bl	800089c <__aeabi_ddiv>
 800b14a:	e9cd 0100 	strd	r0, r1, [sp]
 800b14e:	f006 060f 	and.w	r6, r6, #15
 800b152:	2503      	movs	r5, #3
 800b154:	4f1e      	ldr	r7, [pc, #120]	; (800b1d0 <_dtoa_r+0x330>)
 800b156:	e04c      	b.n	800b1f2 <_dtoa_r+0x352>
 800b158:	2301      	movs	r3, #1
 800b15a:	930a      	str	r3, [sp, #40]	; 0x28
 800b15c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15e:	4453      	add	r3, sl
 800b160:	f103 0901 	add.w	r9, r3, #1
 800b164:	9302      	str	r3, [sp, #8]
 800b166:	464b      	mov	r3, r9
 800b168:	2b01      	cmp	r3, #1
 800b16a:	bfb8      	it	lt
 800b16c:	2301      	movlt	r3, #1
 800b16e:	e7ba      	b.n	800b0e6 <_dtoa_r+0x246>
 800b170:	2300      	movs	r3, #0
 800b172:	e7b2      	b.n	800b0da <_dtoa_r+0x23a>
 800b174:	2300      	movs	r3, #0
 800b176:	e7f0      	b.n	800b15a <_dtoa_r+0x2ba>
 800b178:	2501      	movs	r5, #1
 800b17a:	2300      	movs	r3, #0
 800b17c:	9306      	str	r3, [sp, #24]
 800b17e:	950a      	str	r5, [sp, #40]	; 0x28
 800b180:	f04f 33ff 	mov.w	r3, #4294967295
 800b184:	9302      	str	r3, [sp, #8]
 800b186:	4699      	mov	r9, r3
 800b188:	2200      	movs	r2, #0
 800b18a:	2312      	movs	r3, #18
 800b18c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b18e:	e7aa      	b.n	800b0e6 <_dtoa_r+0x246>
 800b190:	2301      	movs	r3, #1
 800b192:	930a      	str	r3, [sp, #40]	; 0x28
 800b194:	e7f4      	b.n	800b180 <_dtoa_r+0x2e0>
 800b196:	2301      	movs	r3, #1
 800b198:	9302      	str	r3, [sp, #8]
 800b19a:	4699      	mov	r9, r3
 800b19c:	461a      	mov	r2, r3
 800b19e:	e7f5      	b.n	800b18c <_dtoa_r+0x2ec>
 800b1a0:	3101      	adds	r1, #1
 800b1a2:	6071      	str	r1, [r6, #4]
 800b1a4:	0052      	lsls	r2, r2, #1
 800b1a6:	e7a2      	b.n	800b0ee <_dtoa_r+0x24e>
 800b1a8:	636f4361 	.word	0x636f4361
 800b1ac:	3fd287a7 	.word	0x3fd287a7
 800b1b0:	8b60c8b3 	.word	0x8b60c8b3
 800b1b4:	3fc68a28 	.word	0x3fc68a28
 800b1b8:	509f79fb 	.word	0x509f79fb
 800b1bc:	3fd34413 	.word	0x3fd34413
 800b1c0:	7ff00000 	.word	0x7ff00000
 800b1c4:	0800edd7 	.word	0x0800edd7
 800b1c8:	3ff80000 	.word	0x3ff80000
 800b1cc:	0800ee90 	.word	0x0800ee90
 800b1d0:	0800ee68 	.word	0x0800ee68
 800b1d4:	0800ee59 	.word	0x0800ee59
 800b1d8:	07f1      	lsls	r1, r6, #31
 800b1da:	d508      	bpl.n	800b1ee <_dtoa_r+0x34e>
 800b1dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1e4:	f7f5 fa30 	bl	8000648 <__aeabi_dmul>
 800b1e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1ec:	3501      	adds	r5, #1
 800b1ee:	1076      	asrs	r6, r6, #1
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	2e00      	cmp	r6, #0
 800b1f4:	d1f0      	bne.n	800b1d8 <_dtoa_r+0x338>
 800b1f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b1fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1fe:	f7f5 fb4d 	bl	800089c <__aeabi_ddiv>
 800b202:	e9cd 0100 	strd	r0, r1, [sp]
 800b206:	e01a      	b.n	800b23e <_dtoa_r+0x39e>
 800b208:	2502      	movs	r5, #2
 800b20a:	e7a3      	b.n	800b154 <_dtoa_r+0x2b4>
 800b20c:	f000 80a0 	beq.w	800b350 <_dtoa_r+0x4b0>
 800b210:	f1ca 0600 	rsb	r6, sl, #0
 800b214:	4b9f      	ldr	r3, [pc, #636]	; (800b494 <_dtoa_r+0x5f4>)
 800b216:	4fa0      	ldr	r7, [pc, #640]	; (800b498 <_dtoa_r+0x5f8>)
 800b218:	f006 020f 	and.w	r2, r6, #15
 800b21c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b228:	f7f5 fa0e 	bl	8000648 <__aeabi_dmul>
 800b22c:	e9cd 0100 	strd	r0, r1, [sp]
 800b230:	1136      	asrs	r6, r6, #4
 800b232:	2300      	movs	r3, #0
 800b234:	2502      	movs	r5, #2
 800b236:	2e00      	cmp	r6, #0
 800b238:	d17f      	bne.n	800b33a <_dtoa_r+0x49a>
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e1      	bne.n	800b202 <_dtoa_r+0x362>
 800b23e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 8087 	beq.w	800b354 <_dtoa_r+0x4b4>
 800b246:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b24a:	2200      	movs	r2, #0
 800b24c:	4b93      	ldr	r3, [pc, #588]	; (800b49c <_dtoa_r+0x5fc>)
 800b24e:	4630      	mov	r0, r6
 800b250:	4639      	mov	r1, r7
 800b252:	f7f5 fc6b 	bl	8000b2c <__aeabi_dcmplt>
 800b256:	2800      	cmp	r0, #0
 800b258:	d07c      	beq.n	800b354 <_dtoa_r+0x4b4>
 800b25a:	f1b9 0f00 	cmp.w	r9, #0
 800b25e:	d079      	beq.n	800b354 <_dtoa_r+0x4b4>
 800b260:	9b02      	ldr	r3, [sp, #8]
 800b262:	2b00      	cmp	r3, #0
 800b264:	dd35      	ble.n	800b2d2 <_dtoa_r+0x432>
 800b266:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b26a:	9308      	str	r3, [sp, #32]
 800b26c:	4639      	mov	r1, r7
 800b26e:	2200      	movs	r2, #0
 800b270:	4b8b      	ldr	r3, [pc, #556]	; (800b4a0 <_dtoa_r+0x600>)
 800b272:	4630      	mov	r0, r6
 800b274:	f7f5 f9e8 	bl	8000648 <__aeabi_dmul>
 800b278:	e9cd 0100 	strd	r0, r1, [sp]
 800b27c:	9f02      	ldr	r7, [sp, #8]
 800b27e:	3501      	adds	r5, #1
 800b280:	4628      	mov	r0, r5
 800b282:	f7f5 f977 	bl	8000574 <__aeabi_i2d>
 800b286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b28a:	f7f5 f9dd 	bl	8000648 <__aeabi_dmul>
 800b28e:	2200      	movs	r2, #0
 800b290:	4b84      	ldr	r3, [pc, #528]	; (800b4a4 <_dtoa_r+0x604>)
 800b292:	f7f5 f823 	bl	80002dc <__adddf3>
 800b296:	4605      	mov	r5, r0
 800b298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b29c:	2f00      	cmp	r7, #0
 800b29e:	d15d      	bne.n	800b35c <_dtoa_r+0x4bc>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4b81      	ldr	r3, [pc, #516]	; (800b4a8 <_dtoa_r+0x608>)
 800b2a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2a8:	f7f5 f816 	bl	80002d8 <__aeabi_dsub>
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	4633      	mov	r3, r6
 800b2b0:	e9cd 0100 	strd	r0, r1, [sp]
 800b2b4:	f7f5 fc58 	bl	8000b68 <__aeabi_dcmpgt>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f040 8288 	bne.w	800b7ce <_dtoa_r+0x92e>
 800b2be:	462a      	mov	r2, r5
 800b2c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2c8:	f7f5 fc30 	bl	8000b2c <__aeabi_dcmplt>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	f040 827c 	bne.w	800b7ca <_dtoa_r+0x92a>
 800b2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b2d6:	e9cd 2300 	strd	r2, r3, [sp]
 800b2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f2c0 8150 	blt.w	800b582 <_dtoa_r+0x6e2>
 800b2e2:	f1ba 0f0e 	cmp.w	sl, #14
 800b2e6:	f300 814c 	bgt.w	800b582 <_dtoa_r+0x6e2>
 800b2ea:	4b6a      	ldr	r3, [pc, #424]	; (800b494 <_dtoa_r+0x5f4>)
 800b2ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b2f0:	ed93 7b00 	vldr	d7, [r3]
 800b2f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2fc:	f280 80d8 	bge.w	800b4b0 <_dtoa_r+0x610>
 800b300:	f1b9 0f00 	cmp.w	r9, #0
 800b304:	f300 80d4 	bgt.w	800b4b0 <_dtoa_r+0x610>
 800b308:	f040 825e 	bne.w	800b7c8 <_dtoa_r+0x928>
 800b30c:	2200      	movs	r2, #0
 800b30e:	4b66      	ldr	r3, [pc, #408]	; (800b4a8 <_dtoa_r+0x608>)
 800b310:	ec51 0b17 	vmov	r0, r1, d7
 800b314:	f7f5 f998 	bl	8000648 <__aeabi_dmul>
 800b318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b31c:	f7f5 fc1a 	bl	8000b54 <__aeabi_dcmpge>
 800b320:	464f      	mov	r7, r9
 800b322:	464e      	mov	r6, r9
 800b324:	2800      	cmp	r0, #0
 800b326:	f040 8234 	bne.w	800b792 <_dtoa_r+0x8f2>
 800b32a:	2331      	movs	r3, #49	; 0x31
 800b32c:	f10b 0501 	add.w	r5, fp, #1
 800b330:	f88b 3000 	strb.w	r3, [fp]
 800b334:	f10a 0a01 	add.w	sl, sl, #1
 800b338:	e22f      	b.n	800b79a <_dtoa_r+0x8fa>
 800b33a:	07f2      	lsls	r2, r6, #31
 800b33c:	d505      	bpl.n	800b34a <_dtoa_r+0x4aa>
 800b33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b342:	f7f5 f981 	bl	8000648 <__aeabi_dmul>
 800b346:	3501      	adds	r5, #1
 800b348:	2301      	movs	r3, #1
 800b34a:	1076      	asrs	r6, r6, #1
 800b34c:	3708      	adds	r7, #8
 800b34e:	e772      	b.n	800b236 <_dtoa_r+0x396>
 800b350:	2502      	movs	r5, #2
 800b352:	e774      	b.n	800b23e <_dtoa_r+0x39e>
 800b354:	f8cd a020 	str.w	sl, [sp, #32]
 800b358:	464f      	mov	r7, r9
 800b35a:	e791      	b.n	800b280 <_dtoa_r+0x3e0>
 800b35c:	4b4d      	ldr	r3, [pc, #308]	; (800b494 <_dtoa_r+0x5f4>)
 800b35e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b362:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d047      	beq.n	800b3fc <_dtoa_r+0x55c>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	2000      	movs	r0, #0
 800b372:	494e      	ldr	r1, [pc, #312]	; (800b4ac <_dtoa_r+0x60c>)
 800b374:	f7f5 fa92 	bl	800089c <__aeabi_ddiv>
 800b378:	462a      	mov	r2, r5
 800b37a:	4633      	mov	r3, r6
 800b37c:	f7f4 ffac 	bl	80002d8 <__aeabi_dsub>
 800b380:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b384:	465d      	mov	r5, fp
 800b386:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b38a:	f7f5 fc0d 	bl	8000ba8 <__aeabi_d2iz>
 800b38e:	4606      	mov	r6, r0
 800b390:	f7f5 f8f0 	bl	8000574 <__aeabi_i2d>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b39c:	f7f4 ff9c 	bl	80002d8 <__aeabi_dsub>
 800b3a0:	3630      	adds	r6, #48	; 0x30
 800b3a2:	f805 6b01 	strb.w	r6, [r5], #1
 800b3a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b3aa:	e9cd 0100 	strd	r0, r1, [sp]
 800b3ae:	f7f5 fbbd 	bl	8000b2c <__aeabi_dcmplt>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d163      	bne.n	800b47e <_dtoa_r+0x5de>
 800b3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	4937      	ldr	r1, [pc, #220]	; (800b49c <_dtoa_r+0x5fc>)
 800b3be:	f7f4 ff8b 	bl	80002d8 <__aeabi_dsub>
 800b3c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b3c6:	f7f5 fbb1 	bl	8000b2c <__aeabi_dcmplt>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	f040 80b7 	bne.w	800b53e <_dtoa_r+0x69e>
 800b3d0:	eba5 030b 	sub.w	r3, r5, fp
 800b3d4:	429f      	cmp	r7, r3
 800b3d6:	f77f af7c 	ble.w	800b2d2 <_dtoa_r+0x432>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	4b30      	ldr	r3, [pc, #192]	; (800b4a0 <_dtoa_r+0x600>)
 800b3de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3e2:	f7f5 f931 	bl	8000648 <__aeabi_dmul>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b3ec:	4b2c      	ldr	r3, [pc, #176]	; (800b4a0 <_dtoa_r+0x600>)
 800b3ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3f2:	f7f5 f929 	bl	8000648 <__aeabi_dmul>
 800b3f6:	e9cd 0100 	strd	r0, r1, [sp]
 800b3fa:	e7c4      	b.n	800b386 <_dtoa_r+0x4e6>
 800b3fc:	462a      	mov	r2, r5
 800b3fe:	4633      	mov	r3, r6
 800b400:	f7f5 f922 	bl	8000648 <__aeabi_dmul>
 800b404:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b408:	eb0b 0507 	add.w	r5, fp, r7
 800b40c:	465e      	mov	r6, fp
 800b40e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b412:	f7f5 fbc9 	bl	8000ba8 <__aeabi_d2iz>
 800b416:	4607      	mov	r7, r0
 800b418:	f7f5 f8ac 	bl	8000574 <__aeabi_i2d>
 800b41c:	3730      	adds	r7, #48	; 0x30
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b426:	f7f4 ff57 	bl	80002d8 <__aeabi_dsub>
 800b42a:	f806 7b01 	strb.w	r7, [r6], #1
 800b42e:	42ae      	cmp	r6, r5
 800b430:	e9cd 0100 	strd	r0, r1, [sp]
 800b434:	f04f 0200 	mov.w	r2, #0
 800b438:	d126      	bne.n	800b488 <_dtoa_r+0x5e8>
 800b43a:	4b1c      	ldr	r3, [pc, #112]	; (800b4ac <_dtoa_r+0x60c>)
 800b43c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b440:	f7f4 ff4c 	bl	80002dc <__adddf3>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b44c:	f7f5 fb8c 	bl	8000b68 <__aeabi_dcmpgt>
 800b450:	2800      	cmp	r0, #0
 800b452:	d174      	bne.n	800b53e <_dtoa_r+0x69e>
 800b454:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b458:	2000      	movs	r0, #0
 800b45a:	4914      	ldr	r1, [pc, #80]	; (800b4ac <_dtoa_r+0x60c>)
 800b45c:	f7f4 ff3c 	bl	80002d8 <__aeabi_dsub>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b468:	f7f5 fb60 	bl	8000b2c <__aeabi_dcmplt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f43f af30 	beq.w	800b2d2 <_dtoa_r+0x432>
 800b472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b476:	2b30      	cmp	r3, #48	; 0x30
 800b478:	f105 32ff 	add.w	r2, r5, #4294967295
 800b47c:	d002      	beq.n	800b484 <_dtoa_r+0x5e4>
 800b47e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b482:	e04a      	b.n	800b51a <_dtoa_r+0x67a>
 800b484:	4615      	mov	r5, r2
 800b486:	e7f4      	b.n	800b472 <_dtoa_r+0x5d2>
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <_dtoa_r+0x600>)
 800b48a:	f7f5 f8dd 	bl	8000648 <__aeabi_dmul>
 800b48e:	e9cd 0100 	strd	r0, r1, [sp]
 800b492:	e7bc      	b.n	800b40e <_dtoa_r+0x56e>
 800b494:	0800ee90 	.word	0x0800ee90
 800b498:	0800ee68 	.word	0x0800ee68
 800b49c:	3ff00000 	.word	0x3ff00000
 800b4a0:	40240000 	.word	0x40240000
 800b4a4:	401c0000 	.word	0x401c0000
 800b4a8:	40140000 	.word	0x40140000
 800b4ac:	3fe00000 	.word	0x3fe00000
 800b4b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4b4:	465d      	mov	r5, fp
 800b4b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	4639      	mov	r1, r7
 800b4be:	f7f5 f9ed 	bl	800089c <__aeabi_ddiv>
 800b4c2:	f7f5 fb71 	bl	8000ba8 <__aeabi_d2iz>
 800b4c6:	4680      	mov	r8, r0
 800b4c8:	f7f5 f854 	bl	8000574 <__aeabi_i2d>
 800b4cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4d0:	f7f5 f8ba 	bl	8000648 <__aeabi_dmul>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4639      	mov	r1, r7
 800b4dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b4e0:	f7f4 fefa 	bl	80002d8 <__aeabi_dsub>
 800b4e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b4e8:	eba5 060b 	sub.w	r6, r5, fp
 800b4ec:	45b1      	cmp	r9, r6
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	d139      	bne.n	800b568 <_dtoa_r+0x6c8>
 800b4f4:	f7f4 fef2 	bl	80002dc <__adddf3>
 800b4f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	f7f5 fb32 	bl	8000b68 <__aeabi_dcmpgt>
 800b504:	b9c8      	cbnz	r0, 800b53a <_dtoa_r+0x69a>
 800b506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b50a:	4630      	mov	r0, r6
 800b50c:	4639      	mov	r1, r7
 800b50e:	f7f5 fb03 	bl	8000b18 <__aeabi_dcmpeq>
 800b512:	b110      	cbz	r0, 800b51a <_dtoa_r+0x67a>
 800b514:	f018 0f01 	tst.w	r8, #1
 800b518:	d10f      	bne.n	800b53a <_dtoa_r+0x69a>
 800b51a:	9904      	ldr	r1, [sp, #16]
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 fdff 	bl	800c120 <_Bfree>
 800b522:	2300      	movs	r3, #0
 800b524:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b526:	702b      	strb	r3, [r5, #0]
 800b528:	f10a 0301 	add.w	r3, sl, #1
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 8241 	beq.w	800b9b8 <_dtoa_r+0xb18>
 800b536:	601d      	str	r5, [r3, #0]
 800b538:	e23e      	b.n	800b9b8 <_dtoa_r+0xb18>
 800b53a:	f8cd a020 	str.w	sl, [sp, #32]
 800b53e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b542:	2a39      	cmp	r2, #57	; 0x39
 800b544:	f105 33ff 	add.w	r3, r5, #4294967295
 800b548:	d108      	bne.n	800b55c <_dtoa_r+0x6bc>
 800b54a:	459b      	cmp	fp, r3
 800b54c:	d10a      	bne.n	800b564 <_dtoa_r+0x6c4>
 800b54e:	9b08      	ldr	r3, [sp, #32]
 800b550:	3301      	adds	r3, #1
 800b552:	9308      	str	r3, [sp, #32]
 800b554:	2330      	movs	r3, #48	; 0x30
 800b556:	f88b 3000 	strb.w	r3, [fp]
 800b55a:	465b      	mov	r3, fp
 800b55c:	781a      	ldrb	r2, [r3, #0]
 800b55e:	3201      	adds	r2, #1
 800b560:	701a      	strb	r2, [r3, #0]
 800b562:	e78c      	b.n	800b47e <_dtoa_r+0x5de>
 800b564:	461d      	mov	r5, r3
 800b566:	e7ea      	b.n	800b53e <_dtoa_r+0x69e>
 800b568:	2200      	movs	r2, #0
 800b56a:	4b9b      	ldr	r3, [pc, #620]	; (800b7d8 <_dtoa_r+0x938>)
 800b56c:	f7f5 f86c 	bl	8000648 <__aeabi_dmul>
 800b570:	2200      	movs	r2, #0
 800b572:	2300      	movs	r3, #0
 800b574:	4606      	mov	r6, r0
 800b576:	460f      	mov	r7, r1
 800b578:	f7f5 face 	bl	8000b18 <__aeabi_dcmpeq>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d09a      	beq.n	800b4b6 <_dtoa_r+0x616>
 800b580:	e7cb      	b.n	800b51a <_dtoa_r+0x67a>
 800b582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b584:	2a00      	cmp	r2, #0
 800b586:	f000 808b 	beq.w	800b6a0 <_dtoa_r+0x800>
 800b58a:	9a06      	ldr	r2, [sp, #24]
 800b58c:	2a01      	cmp	r2, #1
 800b58e:	dc6e      	bgt.n	800b66e <_dtoa_r+0x7ce>
 800b590:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b592:	2a00      	cmp	r2, #0
 800b594:	d067      	beq.n	800b666 <_dtoa_r+0x7c6>
 800b596:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b59a:	9f07      	ldr	r7, [sp, #28]
 800b59c:	9d05      	ldr	r5, [sp, #20]
 800b59e:	9a05      	ldr	r2, [sp, #20]
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	441a      	add	r2, r3
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	9205      	str	r2, [sp, #20]
 800b5a8:	4498      	add	r8, r3
 800b5aa:	f000 fe97 	bl	800c2dc <__i2b>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	2d00      	cmp	r5, #0
 800b5b2:	dd0c      	ble.n	800b5ce <_dtoa_r+0x72e>
 800b5b4:	f1b8 0f00 	cmp.w	r8, #0
 800b5b8:	dd09      	ble.n	800b5ce <_dtoa_r+0x72e>
 800b5ba:	4545      	cmp	r5, r8
 800b5bc:	9a05      	ldr	r2, [sp, #20]
 800b5be:	462b      	mov	r3, r5
 800b5c0:	bfa8      	it	ge
 800b5c2:	4643      	movge	r3, r8
 800b5c4:	1ad2      	subs	r2, r2, r3
 800b5c6:	9205      	str	r2, [sp, #20]
 800b5c8:	1aed      	subs	r5, r5, r3
 800b5ca:	eba8 0803 	sub.w	r8, r8, r3
 800b5ce:	9b07      	ldr	r3, [sp, #28]
 800b5d0:	b1eb      	cbz	r3, 800b60e <_dtoa_r+0x76e>
 800b5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d067      	beq.n	800b6a8 <_dtoa_r+0x808>
 800b5d8:	b18f      	cbz	r7, 800b5fe <_dtoa_r+0x75e>
 800b5da:	4631      	mov	r1, r6
 800b5dc:	463a      	mov	r2, r7
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 ff1c 	bl	800c41c <__pow5mult>
 800b5e4:	9a04      	ldr	r2, [sp, #16]
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fe7f 	bl	800c2ee <__multiply>
 800b5f0:	9904      	ldr	r1, [sp, #16]
 800b5f2:	9008      	str	r0, [sp, #32]
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f000 fd93 	bl	800c120 <_Bfree>
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	9304      	str	r3, [sp, #16]
 800b5fe:	9b07      	ldr	r3, [sp, #28]
 800b600:	1bda      	subs	r2, r3, r7
 800b602:	d004      	beq.n	800b60e <_dtoa_r+0x76e>
 800b604:	9904      	ldr	r1, [sp, #16]
 800b606:	4620      	mov	r0, r4
 800b608:	f000 ff08 	bl	800c41c <__pow5mult>
 800b60c:	9004      	str	r0, [sp, #16]
 800b60e:	2101      	movs	r1, #1
 800b610:	4620      	mov	r0, r4
 800b612:	f000 fe63 	bl	800c2dc <__i2b>
 800b616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b618:	4607      	mov	r7, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 81d0 	beq.w	800b9c0 <_dtoa_r+0xb20>
 800b620:	461a      	mov	r2, r3
 800b622:	4601      	mov	r1, r0
 800b624:	4620      	mov	r0, r4
 800b626:	f000 fef9 	bl	800c41c <__pow5mult>
 800b62a:	9b06      	ldr	r3, [sp, #24]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	4607      	mov	r7, r0
 800b630:	dc40      	bgt.n	800b6b4 <_dtoa_r+0x814>
 800b632:	9b00      	ldr	r3, [sp, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d139      	bne.n	800b6ac <_dtoa_r+0x80c>
 800b638:	9b01      	ldr	r3, [sp, #4]
 800b63a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d136      	bne.n	800b6b0 <_dtoa_r+0x810>
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b648:	0d1b      	lsrs	r3, r3, #20
 800b64a:	051b      	lsls	r3, r3, #20
 800b64c:	b12b      	cbz	r3, 800b65a <_dtoa_r+0x7ba>
 800b64e:	9b05      	ldr	r3, [sp, #20]
 800b650:	3301      	adds	r3, #1
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	f108 0801 	add.w	r8, r8, #1
 800b658:	2301      	movs	r3, #1
 800b65a:	9307      	str	r3, [sp, #28]
 800b65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d12a      	bne.n	800b6b8 <_dtoa_r+0x818>
 800b662:	2001      	movs	r0, #1
 800b664:	e030      	b.n	800b6c8 <_dtoa_r+0x828>
 800b666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b668:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b66c:	e795      	b.n	800b59a <_dtoa_r+0x6fa>
 800b66e:	9b07      	ldr	r3, [sp, #28]
 800b670:	f109 37ff 	add.w	r7, r9, #4294967295
 800b674:	42bb      	cmp	r3, r7
 800b676:	bfbf      	itttt	lt
 800b678:	9b07      	ldrlt	r3, [sp, #28]
 800b67a:	9707      	strlt	r7, [sp, #28]
 800b67c:	1afa      	sublt	r2, r7, r3
 800b67e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b680:	bfbb      	ittet	lt
 800b682:	189b      	addlt	r3, r3, r2
 800b684:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b686:	1bdf      	subge	r7, r3, r7
 800b688:	2700      	movlt	r7, #0
 800b68a:	f1b9 0f00 	cmp.w	r9, #0
 800b68e:	bfb5      	itete	lt
 800b690:	9b05      	ldrlt	r3, [sp, #20]
 800b692:	9d05      	ldrge	r5, [sp, #20]
 800b694:	eba3 0509 	sublt.w	r5, r3, r9
 800b698:	464b      	movge	r3, r9
 800b69a:	bfb8      	it	lt
 800b69c:	2300      	movlt	r3, #0
 800b69e:	e77e      	b.n	800b59e <_dtoa_r+0x6fe>
 800b6a0:	9f07      	ldr	r7, [sp, #28]
 800b6a2:	9d05      	ldr	r5, [sp, #20]
 800b6a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b6a6:	e783      	b.n	800b5b0 <_dtoa_r+0x710>
 800b6a8:	9a07      	ldr	r2, [sp, #28]
 800b6aa:	e7ab      	b.n	800b604 <_dtoa_r+0x764>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	e7d4      	b.n	800b65a <_dtoa_r+0x7ba>
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	e7d2      	b.n	800b65a <_dtoa_r+0x7ba>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b6be:	6918      	ldr	r0, [r3, #16]
 800b6c0:	f000 fdbe 	bl	800c240 <__hi0bits>
 800b6c4:	f1c0 0020 	rsb	r0, r0, #32
 800b6c8:	4440      	add	r0, r8
 800b6ca:	f010 001f 	ands.w	r0, r0, #31
 800b6ce:	d047      	beq.n	800b760 <_dtoa_r+0x8c0>
 800b6d0:	f1c0 0320 	rsb	r3, r0, #32
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	dd3b      	ble.n	800b750 <_dtoa_r+0x8b0>
 800b6d8:	9b05      	ldr	r3, [sp, #20]
 800b6da:	f1c0 001c 	rsb	r0, r0, #28
 800b6de:	4403      	add	r3, r0
 800b6e0:	9305      	str	r3, [sp, #20]
 800b6e2:	4405      	add	r5, r0
 800b6e4:	4480      	add	r8, r0
 800b6e6:	9b05      	ldr	r3, [sp, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	dd05      	ble.n	800b6f8 <_dtoa_r+0x858>
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	9904      	ldr	r1, [sp, #16]
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 fee1 	bl	800c4b8 <__lshift>
 800b6f6:	9004      	str	r0, [sp, #16]
 800b6f8:	f1b8 0f00 	cmp.w	r8, #0
 800b6fc:	dd05      	ble.n	800b70a <_dtoa_r+0x86a>
 800b6fe:	4639      	mov	r1, r7
 800b700:	4642      	mov	r2, r8
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fed8 	bl	800c4b8 <__lshift>
 800b708:	4607      	mov	r7, r0
 800b70a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b70c:	b353      	cbz	r3, 800b764 <_dtoa_r+0x8c4>
 800b70e:	4639      	mov	r1, r7
 800b710:	9804      	ldr	r0, [sp, #16]
 800b712:	f000 ff25 	bl	800c560 <__mcmp>
 800b716:	2800      	cmp	r0, #0
 800b718:	da24      	bge.n	800b764 <_dtoa_r+0x8c4>
 800b71a:	2300      	movs	r3, #0
 800b71c:	220a      	movs	r2, #10
 800b71e:	9904      	ldr	r1, [sp, #16]
 800b720:	4620      	mov	r0, r4
 800b722:	f000 fd14 	bl	800c14e <__multadd>
 800b726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b728:	9004      	str	r0, [sp, #16]
 800b72a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 814d 	beq.w	800b9ce <_dtoa_r+0xb2e>
 800b734:	2300      	movs	r3, #0
 800b736:	4631      	mov	r1, r6
 800b738:	220a      	movs	r2, #10
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 fd07 	bl	800c14e <__multadd>
 800b740:	9b02      	ldr	r3, [sp, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	4606      	mov	r6, r0
 800b746:	dc4f      	bgt.n	800b7e8 <_dtoa_r+0x948>
 800b748:	9b06      	ldr	r3, [sp, #24]
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	dd4c      	ble.n	800b7e8 <_dtoa_r+0x948>
 800b74e:	e011      	b.n	800b774 <_dtoa_r+0x8d4>
 800b750:	d0c9      	beq.n	800b6e6 <_dtoa_r+0x846>
 800b752:	9a05      	ldr	r2, [sp, #20]
 800b754:	331c      	adds	r3, #28
 800b756:	441a      	add	r2, r3
 800b758:	9205      	str	r2, [sp, #20]
 800b75a:	441d      	add	r5, r3
 800b75c:	4498      	add	r8, r3
 800b75e:	e7c2      	b.n	800b6e6 <_dtoa_r+0x846>
 800b760:	4603      	mov	r3, r0
 800b762:	e7f6      	b.n	800b752 <_dtoa_r+0x8b2>
 800b764:	f1b9 0f00 	cmp.w	r9, #0
 800b768:	dc38      	bgt.n	800b7dc <_dtoa_r+0x93c>
 800b76a:	9b06      	ldr	r3, [sp, #24]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	dd35      	ble.n	800b7dc <_dtoa_r+0x93c>
 800b770:	f8cd 9008 	str.w	r9, [sp, #8]
 800b774:	9b02      	ldr	r3, [sp, #8]
 800b776:	b963      	cbnz	r3, 800b792 <_dtoa_r+0x8f2>
 800b778:	4639      	mov	r1, r7
 800b77a:	2205      	movs	r2, #5
 800b77c:	4620      	mov	r0, r4
 800b77e:	f000 fce6 	bl	800c14e <__multadd>
 800b782:	4601      	mov	r1, r0
 800b784:	4607      	mov	r7, r0
 800b786:	9804      	ldr	r0, [sp, #16]
 800b788:	f000 feea 	bl	800c560 <__mcmp>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f73f adcc 	bgt.w	800b32a <_dtoa_r+0x48a>
 800b792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b794:	465d      	mov	r5, fp
 800b796:	ea6f 0a03 	mvn.w	sl, r3
 800b79a:	f04f 0900 	mov.w	r9, #0
 800b79e:	4639      	mov	r1, r7
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 fcbd 	bl	800c120 <_Bfree>
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	f43f aeb7 	beq.w	800b51a <_dtoa_r+0x67a>
 800b7ac:	f1b9 0f00 	cmp.w	r9, #0
 800b7b0:	d005      	beq.n	800b7be <_dtoa_r+0x91e>
 800b7b2:	45b1      	cmp	r9, r6
 800b7b4:	d003      	beq.n	800b7be <_dtoa_r+0x91e>
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fcb1 	bl	800c120 <_Bfree>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f000 fcad 	bl	800c120 <_Bfree>
 800b7c6:	e6a8      	b.n	800b51a <_dtoa_r+0x67a>
 800b7c8:	2700      	movs	r7, #0
 800b7ca:	463e      	mov	r6, r7
 800b7cc:	e7e1      	b.n	800b792 <_dtoa_r+0x8f2>
 800b7ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b7d2:	463e      	mov	r6, r7
 800b7d4:	e5a9      	b.n	800b32a <_dtoa_r+0x48a>
 800b7d6:	bf00      	nop
 800b7d8:	40240000 	.word	0x40240000
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7de:	f8cd 9008 	str.w	r9, [sp, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 80fa 	beq.w	800b9dc <_dtoa_r+0xb3c>
 800b7e8:	2d00      	cmp	r5, #0
 800b7ea:	dd05      	ble.n	800b7f8 <_dtoa_r+0x958>
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	462a      	mov	r2, r5
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fe61 	bl	800c4b8 <__lshift>
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	9b07      	ldr	r3, [sp, #28]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d04c      	beq.n	800b898 <_dtoa_r+0x9f8>
 800b7fe:	6871      	ldr	r1, [r6, #4]
 800b800:	4620      	mov	r0, r4
 800b802:	f000 fc59 	bl	800c0b8 <_Balloc>
 800b806:	6932      	ldr	r2, [r6, #16]
 800b808:	3202      	adds	r2, #2
 800b80a:	4605      	mov	r5, r0
 800b80c:	0092      	lsls	r2, r2, #2
 800b80e:	f106 010c 	add.w	r1, r6, #12
 800b812:	300c      	adds	r0, #12
 800b814:	f7fd fd58 	bl	80092c8 <memcpy>
 800b818:	2201      	movs	r2, #1
 800b81a:	4629      	mov	r1, r5
 800b81c:	4620      	mov	r0, r4
 800b81e:	f000 fe4b 	bl	800c4b8 <__lshift>
 800b822:	9b00      	ldr	r3, [sp, #0]
 800b824:	f8cd b014 	str.w	fp, [sp, #20]
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	46b1      	mov	r9, r6
 800b82e:	9307      	str	r3, [sp, #28]
 800b830:	4606      	mov	r6, r0
 800b832:	4639      	mov	r1, r7
 800b834:	9804      	ldr	r0, [sp, #16]
 800b836:	f7ff faa7 	bl	800ad88 <quorem>
 800b83a:	4649      	mov	r1, r9
 800b83c:	4605      	mov	r5, r0
 800b83e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b842:	9804      	ldr	r0, [sp, #16]
 800b844:	f000 fe8c 	bl	800c560 <__mcmp>
 800b848:	4632      	mov	r2, r6
 800b84a:	9000      	str	r0, [sp, #0]
 800b84c:	4639      	mov	r1, r7
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 fea0 	bl	800c594 <__mdiff>
 800b854:	68c3      	ldr	r3, [r0, #12]
 800b856:	4602      	mov	r2, r0
 800b858:	bb03      	cbnz	r3, 800b89c <_dtoa_r+0x9fc>
 800b85a:	4601      	mov	r1, r0
 800b85c:	9008      	str	r0, [sp, #32]
 800b85e:	9804      	ldr	r0, [sp, #16]
 800b860:	f000 fe7e 	bl	800c560 <__mcmp>
 800b864:	9a08      	ldr	r2, [sp, #32]
 800b866:	4603      	mov	r3, r0
 800b868:	4611      	mov	r1, r2
 800b86a:	4620      	mov	r0, r4
 800b86c:	9308      	str	r3, [sp, #32]
 800b86e:	f000 fc57 	bl	800c120 <_Bfree>
 800b872:	9b08      	ldr	r3, [sp, #32]
 800b874:	b9a3      	cbnz	r3, 800b8a0 <_dtoa_r+0xa00>
 800b876:	9a06      	ldr	r2, [sp, #24]
 800b878:	b992      	cbnz	r2, 800b8a0 <_dtoa_r+0xa00>
 800b87a:	9a07      	ldr	r2, [sp, #28]
 800b87c:	b982      	cbnz	r2, 800b8a0 <_dtoa_r+0xa00>
 800b87e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b882:	d029      	beq.n	800b8d8 <_dtoa_r+0xa38>
 800b884:	9b00      	ldr	r3, [sp, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	dd01      	ble.n	800b88e <_dtoa_r+0x9ee>
 800b88a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b88e:	9b05      	ldr	r3, [sp, #20]
 800b890:	1c5d      	adds	r5, r3, #1
 800b892:	f883 8000 	strb.w	r8, [r3]
 800b896:	e782      	b.n	800b79e <_dtoa_r+0x8fe>
 800b898:	4630      	mov	r0, r6
 800b89a:	e7c2      	b.n	800b822 <_dtoa_r+0x982>
 800b89c:	2301      	movs	r3, #1
 800b89e:	e7e3      	b.n	800b868 <_dtoa_r+0x9c8>
 800b8a0:	9a00      	ldr	r2, [sp, #0]
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	db04      	blt.n	800b8b0 <_dtoa_r+0xa10>
 800b8a6:	d125      	bne.n	800b8f4 <_dtoa_r+0xa54>
 800b8a8:	9a06      	ldr	r2, [sp, #24]
 800b8aa:	bb1a      	cbnz	r2, 800b8f4 <_dtoa_r+0xa54>
 800b8ac:	9a07      	ldr	r2, [sp, #28]
 800b8ae:	bb0a      	cbnz	r2, 800b8f4 <_dtoa_r+0xa54>
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	ddec      	ble.n	800b88e <_dtoa_r+0x9ee>
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	9904      	ldr	r1, [sp, #16]
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fdfd 	bl	800c4b8 <__lshift>
 800b8be:	4639      	mov	r1, r7
 800b8c0:	9004      	str	r0, [sp, #16]
 800b8c2:	f000 fe4d 	bl	800c560 <__mcmp>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	dc03      	bgt.n	800b8d2 <_dtoa_r+0xa32>
 800b8ca:	d1e0      	bne.n	800b88e <_dtoa_r+0x9ee>
 800b8cc:	f018 0f01 	tst.w	r8, #1
 800b8d0:	d0dd      	beq.n	800b88e <_dtoa_r+0x9ee>
 800b8d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b8d6:	d1d8      	bne.n	800b88a <_dtoa_r+0x9ea>
 800b8d8:	9b05      	ldr	r3, [sp, #20]
 800b8da:	9a05      	ldr	r2, [sp, #20]
 800b8dc:	1c5d      	adds	r5, r3, #1
 800b8de:	2339      	movs	r3, #57	; 0x39
 800b8e0:	7013      	strb	r3, [r2, #0]
 800b8e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8e6:	2b39      	cmp	r3, #57	; 0x39
 800b8e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b8ec:	d04f      	beq.n	800b98e <_dtoa_r+0xaee>
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	7013      	strb	r3, [r2, #0]
 800b8f2:	e754      	b.n	800b79e <_dtoa_r+0x8fe>
 800b8f4:	9a05      	ldr	r2, [sp, #20]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f102 0501 	add.w	r5, r2, #1
 800b8fc:	dd06      	ble.n	800b90c <_dtoa_r+0xa6c>
 800b8fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b902:	d0e9      	beq.n	800b8d8 <_dtoa_r+0xa38>
 800b904:	f108 0801 	add.w	r8, r8, #1
 800b908:	9b05      	ldr	r3, [sp, #20]
 800b90a:	e7c2      	b.n	800b892 <_dtoa_r+0x9f2>
 800b90c:	9a02      	ldr	r2, [sp, #8]
 800b90e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b912:	eba5 030b 	sub.w	r3, r5, fp
 800b916:	4293      	cmp	r3, r2
 800b918:	d021      	beq.n	800b95e <_dtoa_r+0xabe>
 800b91a:	2300      	movs	r3, #0
 800b91c:	220a      	movs	r2, #10
 800b91e:	9904      	ldr	r1, [sp, #16]
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fc14 	bl	800c14e <__multadd>
 800b926:	45b1      	cmp	r9, r6
 800b928:	9004      	str	r0, [sp, #16]
 800b92a:	f04f 0300 	mov.w	r3, #0
 800b92e:	f04f 020a 	mov.w	r2, #10
 800b932:	4649      	mov	r1, r9
 800b934:	4620      	mov	r0, r4
 800b936:	d105      	bne.n	800b944 <_dtoa_r+0xaa4>
 800b938:	f000 fc09 	bl	800c14e <__multadd>
 800b93c:	4681      	mov	r9, r0
 800b93e:	4606      	mov	r6, r0
 800b940:	9505      	str	r5, [sp, #20]
 800b942:	e776      	b.n	800b832 <_dtoa_r+0x992>
 800b944:	f000 fc03 	bl	800c14e <__multadd>
 800b948:	4631      	mov	r1, r6
 800b94a:	4681      	mov	r9, r0
 800b94c:	2300      	movs	r3, #0
 800b94e:	220a      	movs	r2, #10
 800b950:	4620      	mov	r0, r4
 800b952:	f000 fbfc 	bl	800c14e <__multadd>
 800b956:	4606      	mov	r6, r0
 800b958:	e7f2      	b.n	800b940 <_dtoa_r+0xaa0>
 800b95a:	f04f 0900 	mov.w	r9, #0
 800b95e:	2201      	movs	r2, #1
 800b960:	9904      	ldr	r1, [sp, #16]
 800b962:	4620      	mov	r0, r4
 800b964:	f000 fda8 	bl	800c4b8 <__lshift>
 800b968:	4639      	mov	r1, r7
 800b96a:	9004      	str	r0, [sp, #16]
 800b96c:	f000 fdf8 	bl	800c560 <__mcmp>
 800b970:	2800      	cmp	r0, #0
 800b972:	dcb6      	bgt.n	800b8e2 <_dtoa_r+0xa42>
 800b974:	d102      	bne.n	800b97c <_dtoa_r+0xadc>
 800b976:	f018 0f01 	tst.w	r8, #1
 800b97a:	d1b2      	bne.n	800b8e2 <_dtoa_r+0xa42>
 800b97c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b980:	2b30      	cmp	r3, #48	; 0x30
 800b982:	f105 32ff 	add.w	r2, r5, #4294967295
 800b986:	f47f af0a 	bne.w	800b79e <_dtoa_r+0x8fe>
 800b98a:	4615      	mov	r5, r2
 800b98c:	e7f6      	b.n	800b97c <_dtoa_r+0xadc>
 800b98e:	4593      	cmp	fp, r2
 800b990:	d105      	bne.n	800b99e <_dtoa_r+0xafe>
 800b992:	2331      	movs	r3, #49	; 0x31
 800b994:	f10a 0a01 	add.w	sl, sl, #1
 800b998:	f88b 3000 	strb.w	r3, [fp]
 800b99c:	e6ff      	b.n	800b79e <_dtoa_r+0x8fe>
 800b99e:	4615      	mov	r5, r2
 800b9a0:	e79f      	b.n	800b8e2 <_dtoa_r+0xa42>
 800b9a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ba08 <_dtoa_r+0xb68>
 800b9a6:	e007      	b.n	800b9b8 <_dtoa_r+0xb18>
 800b9a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ba0c <_dtoa_r+0xb6c>
 800b9ae:	b11b      	cbz	r3, 800b9b8 <_dtoa_r+0xb18>
 800b9b0:	f10b 0308 	add.w	r3, fp, #8
 800b9b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	4658      	mov	r0, fp
 800b9ba:	b017      	add	sp, #92	; 0x5c
 800b9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c0:	9b06      	ldr	r3, [sp, #24]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	f77f ae35 	ble.w	800b632 <_dtoa_r+0x792>
 800b9c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ca:	9307      	str	r3, [sp, #28]
 800b9cc:	e649      	b.n	800b662 <_dtoa_r+0x7c2>
 800b9ce:	9b02      	ldr	r3, [sp, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	dc03      	bgt.n	800b9dc <_dtoa_r+0xb3c>
 800b9d4:	9b06      	ldr	r3, [sp, #24]
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	f73f aecc 	bgt.w	800b774 <_dtoa_r+0x8d4>
 800b9dc:	465d      	mov	r5, fp
 800b9de:	4639      	mov	r1, r7
 800b9e0:	9804      	ldr	r0, [sp, #16]
 800b9e2:	f7ff f9d1 	bl	800ad88 <quorem>
 800b9e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b9ea:	f805 8b01 	strb.w	r8, [r5], #1
 800b9ee:	9a02      	ldr	r2, [sp, #8]
 800b9f0:	eba5 030b 	sub.w	r3, r5, fp
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	ddb0      	ble.n	800b95a <_dtoa_r+0xaba>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	220a      	movs	r2, #10
 800b9fc:	9904      	ldr	r1, [sp, #16]
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f000 fba5 	bl	800c14e <__multadd>
 800ba04:	9004      	str	r0, [sp, #16]
 800ba06:	e7ea      	b.n	800b9de <_dtoa_r+0xb3e>
 800ba08:	0800edd6 	.word	0x0800edd6
 800ba0c:	0800ee50 	.word	0x0800ee50

0800ba10 <rshift>:
 800ba10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba12:	6906      	ldr	r6, [r0, #16]
 800ba14:	114b      	asrs	r3, r1, #5
 800ba16:	429e      	cmp	r6, r3
 800ba18:	f100 0414 	add.w	r4, r0, #20
 800ba1c:	dd30      	ble.n	800ba80 <rshift+0x70>
 800ba1e:	f011 011f 	ands.w	r1, r1, #31
 800ba22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ba26:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ba2a:	d108      	bne.n	800ba3e <rshift+0x2e>
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	42b2      	cmp	r2, r6
 800ba30:	460b      	mov	r3, r1
 800ba32:	d211      	bcs.n	800ba58 <rshift+0x48>
 800ba34:	f852 3b04 	ldr.w	r3, [r2], #4
 800ba38:	f841 3b04 	str.w	r3, [r1], #4
 800ba3c:	e7f7      	b.n	800ba2e <rshift+0x1e>
 800ba3e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ba42:	f1c1 0c20 	rsb	ip, r1, #32
 800ba46:	40cd      	lsrs	r5, r1
 800ba48:	3204      	adds	r2, #4
 800ba4a:	4623      	mov	r3, r4
 800ba4c:	42b2      	cmp	r2, r6
 800ba4e:	4617      	mov	r7, r2
 800ba50:	d30c      	bcc.n	800ba6c <rshift+0x5c>
 800ba52:	601d      	str	r5, [r3, #0]
 800ba54:	b105      	cbz	r5, 800ba58 <rshift+0x48>
 800ba56:	3304      	adds	r3, #4
 800ba58:	1b1a      	subs	r2, r3, r4
 800ba5a:	42a3      	cmp	r3, r4
 800ba5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba60:	bf08      	it	eq
 800ba62:	2300      	moveq	r3, #0
 800ba64:	6102      	str	r2, [r0, #16]
 800ba66:	bf08      	it	eq
 800ba68:	6143      	streq	r3, [r0, #20]
 800ba6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba6c:	683f      	ldr	r7, [r7, #0]
 800ba6e:	fa07 f70c 	lsl.w	r7, r7, ip
 800ba72:	433d      	orrs	r5, r7
 800ba74:	f843 5b04 	str.w	r5, [r3], #4
 800ba78:	f852 5b04 	ldr.w	r5, [r2], #4
 800ba7c:	40cd      	lsrs	r5, r1
 800ba7e:	e7e5      	b.n	800ba4c <rshift+0x3c>
 800ba80:	4623      	mov	r3, r4
 800ba82:	e7e9      	b.n	800ba58 <rshift+0x48>

0800ba84 <__hexdig_fun>:
 800ba84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba88:	2b09      	cmp	r3, #9
 800ba8a:	d802      	bhi.n	800ba92 <__hexdig_fun+0xe>
 800ba8c:	3820      	subs	r0, #32
 800ba8e:	b2c0      	uxtb	r0, r0
 800ba90:	4770      	bx	lr
 800ba92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba96:	2b05      	cmp	r3, #5
 800ba98:	d801      	bhi.n	800ba9e <__hexdig_fun+0x1a>
 800ba9a:	3847      	subs	r0, #71	; 0x47
 800ba9c:	e7f7      	b.n	800ba8e <__hexdig_fun+0xa>
 800ba9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800baa2:	2b05      	cmp	r3, #5
 800baa4:	d801      	bhi.n	800baaa <__hexdig_fun+0x26>
 800baa6:	3827      	subs	r0, #39	; 0x27
 800baa8:	e7f1      	b.n	800ba8e <__hexdig_fun+0xa>
 800baaa:	2000      	movs	r0, #0
 800baac:	4770      	bx	lr

0800baae <__gethex>:
 800baae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab2:	b08b      	sub	sp, #44	; 0x2c
 800bab4:	468a      	mov	sl, r1
 800bab6:	9002      	str	r0, [sp, #8]
 800bab8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800baba:	9306      	str	r3, [sp, #24]
 800babc:	4690      	mov	r8, r2
 800babe:	f000 fad0 	bl	800c062 <__localeconv_l>
 800bac2:	6803      	ldr	r3, [r0, #0]
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7f4 fbaa 	bl	8000220 <strlen>
 800bacc:	9b03      	ldr	r3, [sp, #12]
 800bace:	9001      	str	r0, [sp, #4]
 800bad0:	4403      	add	r3, r0
 800bad2:	f04f 0b00 	mov.w	fp, #0
 800bad6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bada:	9307      	str	r3, [sp, #28]
 800badc:	f8da 3000 	ldr.w	r3, [sl]
 800bae0:	3302      	adds	r3, #2
 800bae2:	461f      	mov	r7, r3
 800bae4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bae8:	2830      	cmp	r0, #48	; 0x30
 800baea:	d06c      	beq.n	800bbc6 <__gethex+0x118>
 800baec:	f7ff ffca 	bl	800ba84 <__hexdig_fun>
 800baf0:	4604      	mov	r4, r0
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d16a      	bne.n	800bbcc <__gethex+0x11e>
 800baf6:	9a01      	ldr	r2, [sp, #4]
 800baf8:	9903      	ldr	r1, [sp, #12]
 800bafa:	4638      	mov	r0, r7
 800bafc:	f001 f8f4 	bl	800cce8 <strncmp>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d166      	bne.n	800bbd2 <__gethex+0x124>
 800bb04:	9b01      	ldr	r3, [sp, #4]
 800bb06:	5cf8      	ldrb	r0, [r7, r3]
 800bb08:	18fe      	adds	r6, r7, r3
 800bb0a:	f7ff ffbb 	bl	800ba84 <__hexdig_fun>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d062      	beq.n	800bbd8 <__gethex+0x12a>
 800bb12:	4633      	mov	r3, r6
 800bb14:	7818      	ldrb	r0, [r3, #0]
 800bb16:	2830      	cmp	r0, #48	; 0x30
 800bb18:	461f      	mov	r7, r3
 800bb1a:	f103 0301 	add.w	r3, r3, #1
 800bb1e:	d0f9      	beq.n	800bb14 <__gethex+0x66>
 800bb20:	f7ff ffb0 	bl	800ba84 <__hexdig_fun>
 800bb24:	fab0 f580 	clz	r5, r0
 800bb28:	096d      	lsrs	r5, r5, #5
 800bb2a:	4634      	mov	r4, r6
 800bb2c:	f04f 0b01 	mov.w	fp, #1
 800bb30:	463a      	mov	r2, r7
 800bb32:	4616      	mov	r6, r2
 800bb34:	3201      	adds	r2, #1
 800bb36:	7830      	ldrb	r0, [r6, #0]
 800bb38:	f7ff ffa4 	bl	800ba84 <__hexdig_fun>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d1f8      	bne.n	800bb32 <__gethex+0x84>
 800bb40:	9a01      	ldr	r2, [sp, #4]
 800bb42:	9903      	ldr	r1, [sp, #12]
 800bb44:	4630      	mov	r0, r6
 800bb46:	f001 f8cf 	bl	800cce8 <strncmp>
 800bb4a:	b950      	cbnz	r0, 800bb62 <__gethex+0xb4>
 800bb4c:	b954      	cbnz	r4, 800bb64 <__gethex+0xb6>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	18f4      	adds	r4, r6, r3
 800bb52:	4622      	mov	r2, r4
 800bb54:	4616      	mov	r6, r2
 800bb56:	3201      	adds	r2, #1
 800bb58:	7830      	ldrb	r0, [r6, #0]
 800bb5a:	f7ff ff93 	bl	800ba84 <__hexdig_fun>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d1f8      	bne.n	800bb54 <__gethex+0xa6>
 800bb62:	b10c      	cbz	r4, 800bb68 <__gethex+0xba>
 800bb64:	1ba4      	subs	r4, r4, r6
 800bb66:	00a4      	lsls	r4, r4, #2
 800bb68:	7833      	ldrb	r3, [r6, #0]
 800bb6a:	2b50      	cmp	r3, #80	; 0x50
 800bb6c:	d001      	beq.n	800bb72 <__gethex+0xc4>
 800bb6e:	2b70      	cmp	r3, #112	; 0x70
 800bb70:	d140      	bne.n	800bbf4 <__gethex+0x146>
 800bb72:	7873      	ldrb	r3, [r6, #1]
 800bb74:	2b2b      	cmp	r3, #43	; 0x2b
 800bb76:	d031      	beq.n	800bbdc <__gethex+0x12e>
 800bb78:	2b2d      	cmp	r3, #45	; 0x2d
 800bb7a:	d033      	beq.n	800bbe4 <__gethex+0x136>
 800bb7c:	1c71      	adds	r1, r6, #1
 800bb7e:	f04f 0900 	mov.w	r9, #0
 800bb82:	7808      	ldrb	r0, [r1, #0]
 800bb84:	f7ff ff7e 	bl	800ba84 <__hexdig_fun>
 800bb88:	1e43      	subs	r3, r0, #1
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b18      	cmp	r3, #24
 800bb8e:	d831      	bhi.n	800bbf4 <__gethex+0x146>
 800bb90:	f1a0 0210 	sub.w	r2, r0, #16
 800bb94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb98:	f7ff ff74 	bl	800ba84 <__hexdig_fun>
 800bb9c:	1e43      	subs	r3, r0, #1
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b18      	cmp	r3, #24
 800bba2:	d922      	bls.n	800bbea <__gethex+0x13c>
 800bba4:	f1b9 0f00 	cmp.w	r9, #0
 800bba8:	d000      	beq.n	800bbac <__gethex+0xfe>
 800bbaa:	4252      	negs	r2, r2
 800bbac:	4414      	add	r4, r2
 800bbae:	f8ca 1000 	str.w	r1, [sl]
 800bbb2:	b30d      	cbz	r5, 800bbf8 <__gethex+0x14a>
 800bbb4:	f1bb 0f00 	cmp.w	fp, #0
 800bbb8:	bf0c      	ite	eq
 800bbba:	2706      	moveq	r7, #6
 800bbbc:	2700      	movne	r7, #0
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	b00b      	add	sp, #44	; 0x2c
 800bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc6:	f10b 0b01 	add.w	fp, fp, #1
 800bbca:	e78a      	b.n	800bae2 <__gethex+0x34>
 800bbcc:	2500      	movs	r5, #0
 800bbce:	462c      	mov	r4, r5
 800bbd0:	e7ae      	b.n	800bb30 <__gethex+0x82>
 800bbd2:	463e      	mov	r6, r7
 800bbd4:	2501      	movs	r5, #1
 800bbd6:	e7c7      	b.n	800bb68 <__gethex+0xba>
 800bbd8:	4604      	mov	r4, r0
 800bbda:	e7fb      	b.n	800bbd4 <__gethex+0x126>
 800bbdc:	f04f 0900 	mov.w	r9, #0
 800bbe0:	1cb1      	adds	r1, r6, #2
 800bbe2:	e7ce      	b.n	800bb82 <__gethex+0xd4>
 800bbe4:	f04f 0901 	mov.w	r9, #1
 800bbe8:	e7fa      	b.n	800bbe0 <__gethex+0x132>
 800bbea:	230a      	movs	r3, #10
 800bbec:	fb03 0202 	mla	r2, r3, r2, r0
 800bbf0:	3a10      	subs	r2, #16
 800bbf2:	e7cf      	b.n	800bb94 <__gethex+0xe6>
 800bbf4:	4631      	mov	r1, r6
 800bbf6:	e7da      	b.n	800bbae <__gethex+0x100>
 800bbf8:	1bf3      	subs	r3, r6, r7
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	2b07      	cmp	r3, #7
 800bc00:	dc49      	bgt.n	800bc96 <__gethex+0x1e8>
 800bc02:	9802      	ldr	r0, [sp, #8]
 800bc04:	f000 fa58 	bl	800c0b8 <_Balloc>
 800bc08:	9b01      	ldr	r3, [sp, #4]
 800bc0a:	f100 0914 	add.w	r9, r0, #20
 800bc0e:	f04f 0b00 	mov.w	fp, #0
 800bc12:	f1c3 0301 	rsb	r3, r3, #1
 800bc16:	4605      	mov	r5, r0
 800bc18:	f8cd 9010 	str.w	r9, [sp, #16]
 800bc1c:	46da      	mov	sl, fp
 800bc1e:	9308      	str	r3, [sp, #32]
 800bc20:	42b7      	cmp	r7, r6
 800bc22:	d33b      	bcc.n	800bc9c <__gethex+0x1ee>
 800bc24:	9804      	ldr	r0, [sp, #16]
 800bc26:	f840 ab04 	str.w	sl, [r0], #4
 800bc2a:	eba0 0009 	sub.w	r0, r0, r9
 800bc2e:	1080      	asrs	r0, r0, #2
 800bc30:	6128      	str	r0, [r5, #16]
 800bc32:	0147      	lsls	r7, r0, #5
 800bc34:	4650      	mov	r0, sl
 800bc36:	f000 fb03 	bl	800c240 <__hi0bits>
 800bc3a:	f8d8 6000 	ldr.w	r6, [r8]
 800bc3e:	1a3f      	subs	r7, r7, r0
 800bc40:	42b7      	cmp	r7, r6
 800bc42:	dd64      	ble.n	800bd0e <__gethex+0x260>
 800bc44:	1bbf      	subs	r7, r7, r6
 800bc46:	4639      	mov	r1, r7
 800bc48:	4628      	mov	r0, r5
 800bc4a:	f000 fe13 	bl	800c874 <__any_on>
 800bc4e:	4682      	mov	sl, r0
 800bc50:	b178      	cbz	r0, 800bc72 <__gethex+0x1c4>
 800bc52:	1e7b      	subs	r3, r7, #1
 800bc54:	1159      	asrs	r1, r3, #5
 800bc56:	f003 021f 	and.w	r2, r3, #31
 800bc5a:	f04f 0a01 	mov.w	sl, #1
 800bc5e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bc62:	fa0a f202 	lsl.w	r2, sl, r2
 800bc66:	420a      	tst	r2, r1
 800bc68:	d003      	beq.n	800bc72 <__gethex+0x1c4>
 800bc6a:	4553      	cmp	r3, sl
 800bc6c:	dc46      	bgt.n	800bcfc <__gethex+0x24e>
 800bc6e:	f04f 0a02 	mov.w	sl, #2
 800bc72:	4639      	mov	r1, r7
 800bc74:	4628      	mov	r0, r5
 800bc76:	f7ff fecb 	bl	800ba10 <rshift>
 800bc7a:	443c      	add	r4, r7
 800bc7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	da52      	bge.n	800bd2a <__gethex+0x27c>
 800bc84:	4629      	mov	r1, r5
 800bc86:	9802      	ldr	r0, [sp, #8]
 800bc88:	f000 fa4a 	bl	800c120 <_Bfree>
 800bc8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc8e:	2300      	movs	r3, #0
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	27a3      	movs	r7, #163	; 0xa3
 800bc94:	e793      	b.n	800bbbe <__gethex+0x110>
 800bc96:	3101      	adds	r1, #1
 800bc98:	105b      	asrs	r3, r3, #1
 800bc9a:	e7b0      	b.n	800bbfe <__gethex+0x150>
 800bc9c:	1e73      	subs	r3, r6, #1
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	9a07      	ldr	r2, [sp, #28]
 800bca2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d018      	beq.n	800bcdc <__gethex+0x22e>
 800bcaa:	f1bb 0f20 	cmp.w	fp, #32
 800bcae:	d107      	bne.n	800bcc0 <__gethex+0x212>
 800bcb0:	9b04      	ldr	r3, [sp, #16]
 800bcb2:	f8c3 a000 	str.w	sl, [r3]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	f04f 0a00 	mov.w	sl, #0
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	46d3      	mov	fp, sl
 800bcc0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bcc4:	f7ff fede 	bl	800ba84 <__hexdig_fun>
 800bcc8:	f000 000f 	and.w	r0, r0, #15
 800bccc:	fa00 f00b 	lsl.w	r0, r0, fp
 800bcd0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bcd4:	f10b 0b04 	add.w	fp, fp, #4
 800bcd8:	9b05      	ldr	r3, [sp, #20]
 800bcda:	e00d      	b.n	800bcf8 <__gethex+0x24a>
 800bcdc:	9b05      	ldr	r3, [sp, #20]
 800bcde:	9a08      	ldr	r2, [sp, #32]
 800bce0:	4413      	add	r3, r2
 800bce2:	42bb      	cmp	r3, r7
 800bce4:	d3e1      	bcc.n	800bcaa <__gethex+0x1fc>
 800bce6:	4618      	mov	r0, r3
 800bce8:	9a01      	ldr	r2, [sp, #4]
 800bcea:	9903      	ldr	r1, [sp, #12]
 800bcec:	9309      	str	r3, [sp, #36]	; 0x24
 800bcee:	f000 fffb 	bl	800cce8 <strncmp>
 800bcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d1d8      	bne.n	800bcaa <__gethex+0x1fc>
 800bcf8:	461e      	mov	r6, r3
 800bcfa:	e791      	b.n	800bc20 <__gethex+0x172>
 800bcfc:	1eb9      	subs	r1, r7, #2
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f000 fdb8 	bl	800c874 <__any_on>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d0b2      	beq.n	800bc6e <__gethex+0x1c0>
 800bd08:	f04f 0a03 	mov.w	sl, #3
 800bd0c:	e7b1      	b.n	800bc72 <__gethex+0x1c4>
 800bd0e:	da09      	bge.n	800bd24 <__gethex+0x276>
 800bd10:	1bf7      	subs	r7, r6, r7
 800bd12:	4629      	mov	r1, r5
 800bd14:	463a      	mov	r2, r7
 800bd16:	9802      	ldr	r0, [sp, #8]
 800bd18:	f000 fbce 	bl	800c4b8 <__lshift>
 800bd1c:	1be4      	subs	r4, r4, r7
 800bd1e:	4605      	mov	r5, r0
 800bd20:	f100 0914 	add.w	r9, r0, #20
 800bd24:	f04f 0a00 	mov.w	sl, #0
 800bd28:	e7a8      	b.n	800bc7c <__gethex+0x1ce>
 800bd2a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bd2e:	42a0      	cmp	r0, r4
 800bd30:	dd6a      	ble.n	800be08 <__gethex+0x35a>
 800bd32:	1b04      	subs	r4, r0, r4
 800bd34:	42a6      	cmp	r6, r4
 800bd36:	dc2e      	bgt.n	800bd96 <__gethex+0x2e8>
 800bd38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d022      	beq.n	800bd86 <__gethex+0x2d8>
 800bd40:	2b03      	cmp	r3, #3
 800bd42:	d024      	beq.n	800bd8e <__gethex+0x2e0>
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d115      	bne.n	800bd74 <__gethex+0x2c6>
 800bd48:	42a6      	cmp	r6, r4
 800bd4a:	d113      	bne.n	800bd74 <__gethex+0x2c6>
 800bd4c:	2e01      	cmp	r6, #1
 800bd4e:	dc0b      	bgt.n	800bd68 <__gethex+0x2ba>
 800bd50:	9a06      	ldr	r2, [sp, #24]
 800bd52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	612b      	str	r3, [r5, #16]
 800bd5c:	f8c9 3000 	str.w	r3, [r9]
 800bd60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd62:	2762      	movs	r7, #98	; 0x62
 800bd64:	601d      	str	r5, [r3, #0]
 800bd66:	e72a      	b.n	800bbbe <__gethex+0x110>
 800bd68:	1e71      	subs	r1, r6, #1
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f000 fd82 	bl	800c874 <__any_on>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d1ed      	bne.n	800bd50 <__gethex+0x2a2>
 800bd74:	4629      	mov	r1, r5
 800bd76:	9802      	ldr	r0, [sp, #8]
 800bd78:	f000 f9d2 	bl	800c120 <_Bfree>
 800bd7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd7e:	2300      	movs	r3, #0
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	2750      	movs	r7, #80	; 0x50
 800bd84:	e71b      	b.n	800bbbe <__gethex+0x110>
 800bd86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d0e1      	beq.n	800bd50 <__gethex+0x2a2>
 800bd8c:	e7f2      	b.n	800bd74 <__gethex+0x2c6>
 800bd8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1dd      	bne.n	800bd50 <__gethex+0x2a2>
 800bd94:	e7ee      	b.n	800bd74 <__gethex+0x2c6>
 800bd96:	1e67      	subs	r7, r4, #1
 800bd98:	f1ba 0f00 	cmp.w	sl, #0
 800bd9c:	d131      	bne.n	800be02 <__gethex+0x354>
 800bd9e:	b127      	cbz	r7, 800bdaa <__gethex+0x2fc>
 800bda0:	4639      	mov	r1, r7
 800bda2:	4628      	mov	r0, r5
 800bda4:	f000 fd66 	bl	800c874 <__any_on>
 800bda8:	4682      	mov	sl, r0
 800bdaa:	117a      	asrs	r2, r7, #5
 800bdac:	2301      	movs	r3, #1
 800bdae:	f007 071f 	and.w	r7, r7, #31
 800bdb2:	fa03 f707 	lsl.w	r7, r3, r7
 800bdb6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800bdba:	4621      	mov	r1, r4
 800bdbc:	421f      	tst	r7, r3
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	bf18      	it	ne
 800bdc2:	f04a 0a02 	orrne.w	sl, sl, #2
 800bdc6:	1b36      	subs	r6, r6, r4
 800bdc8:	f7ff fe22 	bl	800ba10 <rshift>
 800bdcc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bdd0:	2702      	movs	r7, #2
 800bdd2:	f1ba 0f00 	cmp.w	sl, #0
 800bdd6:	d048      	beq.n	800be6a <__gethex+0x3bc>
 800bdd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d015      	beq.n	800be0c <__gethex+0x35e>
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d017      	beq.n	800be14 <__gethex+0x366>
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d109      	bne.n	800bdfc <__gethex+0x34e>
 800bde8:	f01a 0f02 	tst.w	sl, #2
 800bdec:	d006      	beq.n	800bdfc <__gethex+0x34e>
 800bdee:	f8d9 3000 	ldr.w	r3, [r9]
 800bdf2:	ea4a 0a03 	orr.w	sl, sl, r3
 800bdf6:	f01a 0f01 	tst.w	sl, #1
 800bdfa:	d10e      	bne.n	800be1a <__gethex+0x36c>
 800bdfc:	f047 0710 	orr.w	r7, r7, #16
 800be00:	e033      	b.n	800be6a <__gethex+0x3bc>
 800be02:	f04f 0a01 	mov.w	sl, #1
 800be06:	e7d0      	b.n	800bdaa <__gethex+0x2fc>
 800be08:	2701      	movs	r7, #1
 800be0a:	e7e2      	b.n	800bdd2 <__gethex+0x324>
 800be0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be0e:	f1c3 0301 	rsb	r3, r3, #1
 800be12:	9315      	str	r3, [sp, #84]	; 0x54
 800be14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be16:	2b00      	cmp	r3, #0
 800be18:	d0f0      	beq.n	800bdfc <__gethex+0x34e>
 800be1a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800be1e:	f105 0314 	add.w	r3, r5, #20
 800be22:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800be26:	eb03 010a 	add.w	r1, r3, sl
 800be2a:	f04f 0c00 	mov.w	ip, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f853 2b04 	ldr.w	r2, [r3], #4
 800be34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be38:	d01c      	beq.n	800be74 <__gethex+0x3c6>
 800be3a:	3201      	adds	r2, #1
 800be3c:	6002      	str	r2, [r0, #0]
 800be3e:	2f02      	cmp	r7, #2
 800be40:	f105 0314 	add.w	r3, r5, #20
 800be44:	d138      	bne.n	800beb8 <__gethex+0x40a>
 800be46:	f8d8 2000 	ldr.w	r2, [r8]
 800be4a:	3a01      	subs	r2, #1
 800be4c:	42b2      	cmp	r2, r6
 800be4e:	d10a      	bne.n	800be66 <__gethex+0x3b8>
 800be50:	1171      	asrs	r1, r6, #5
 800be52:	2201      	movs	r2, #1
 800be54:	f006 061f 	and.w	r6, r6, #31
 800be58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be5c:	fa02 f606 	lsl.w	r6, r2, r6
 800be60:	421e      	tst	r6, r3
 800be62:	bf18      	it	ne
 800be64:	4617      	movne	r7, r2
 800be66:	f047 0720 	orr.w	r7, r7, #32
 800be6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be6c:	601d      	str	r5, [r3, #0]
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	601c      	str	r4, [r3, #0]
 800be72:	e6a4      	b.n	800bbbe <__gethex+0x110>
 800be74:	4299      	cmp	r1, r3
 800be76:	f843 cc04 	str.w	ip, [r3, #-4]
 800be7a:	d8d8      	bhi.n	800be2e <__gethex+0x380>
 800be7c:	68ab      	ldr	r3, [r5, #8]
 800be7e:	4599      	cmp	r9, r3
 800be80:	db12      	blt.n	800bea8 <__gethex+0x3fa>
 800be82:	6869      	ldr	r1, [r5, #4]
 800be84:	9802      	ldr	r0, [sp, #8]
 800be86:	3101      	adds	r1, #1
 800be88:	f000 f916 	bl	800c0b8 <_Balloc>
 800be8c:	692a      	ldr	r2, [r5, #16]
 800be8e:	3202      	adds	r2, #2
 800be90:	f105 010c 	add.w	r1, r5, #12
 800be94:	4683      	mov	fp, r0
 800be96:	0092      	lsls	r2, r2, #2
 800be98:	300c      	adds	r0, #12
 800be9a:	f7fd fa15 	bl	80092c8 <memcpy>
 800be9e:	4629      	mov	r1, r5
 800bea0:	9802      	ldr	r0, [sp, #8]
 800bea2:	f000 f93d 	bl	800c120 <_Bfree>
 800bea6:	465d      	mov	r5, fp
 800bea8:	692b      	ldr	r3, [r5, #16]
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800beb0:	612a      	str	r2, [r5, #16]
 800beb2:	2201      	movs	r2, #1
 800beb4:	615a      	str	r2, [r3, #20]
 800beb6:	e7c2      	b.n	800be3e <__gethex+0x390>
 800beb8:	692a      	ldr	r2, [r5, #16]
 800beba:	454a      	cmp	r2, r9
 800bebc:	dd0b      	ble.n	800bed6 <__gethex+0x428>
 800bebe:	2101      	movs	r1, #1
 800bec0:	4628      	mov	r0, r5
 800bec2:	f7ff fda5 	bl	800ba10 <rshift>
 800bec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800beca:	3401      	adds	r4, #1
 800becc:	42a3      	cmp	r3, r4
 800bece:	f6ff aed9 	blt.w	800bc84 <__gethex+0x1d6>
 800bed2:	2701      	movs	r7, #1
 800bed4:	e7c7      	b.n	800be66 <__gethex+0x3b8>
 800bed6:	f016 061f 	ands.w	r6, r6, #31
 800beda:	d0fa      	beq.n	800bed2 <__gethex+0x424>
 800bedc:	449a      	add	sl, r3
 800bede:	f1c6 0620 	rsb	r6, r6, #32
 800bee2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800bee6:	f000 f9ab 	bl	800c240 <__hi0bits>
 800beea:	42b0      	cmp	r0, r6
 800beec:	dbe7      	blt.n	800bebe <__gethex+0x410>
 800beee:	e7f0      	b.n	800bed2 <__gethex+0x424>

0800bef0 <L_shift>:
 800bef0:	f1c2 0208 	rsb	r2, r2, #8
 800bef4:	0092      	lsls	r2, r2, #2
 800bef6:	b570      	push	{r4, r5, r6, lr}
 800bef8:	f1c2 0620 	rsb	r6, r2, #32
 800befc:	6843      	ldr	r3, [r0, #4]
 800befe:	6804      	ldr	r4, [r0, #0]
 800bf00:	fa03 f506 	lsl.w	r5, r3, r6
 800bf04:	432c      	orrs	r4, r5
 800bf06:	40d3      	lsrs	r3, r2
 800bf08:	6004      	str	r4, [r0, #0]
 800bf0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf0e:	4288      	cmp	r0, r1
 800bf10:	d3f4      	bcc.n	800befc <L_shift+0xc>
 800bf12:	bd70      	pop	{r4, r5, r6, pc}

0800bf14 <__match>:
 800bf14:	b530      	push	{r4, r5, lr}
 800bf16:	6803      	ldr	r3, [r0, #0]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf1e:	b914      	cbnz	r4, 800bf26 <__match+0x12>
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	2001      	movs	r0, #1
 800bf24:	bd30      	pop	{r4, r5, pc}
 800bf26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf2e:	2d19      	cmp	r5, #25
 800bf30:	bf98      	it	ls
 800bf32:	3220      	addls	r2, #32
 800bf34:	42a2      	cmp	r2, r4
 800bf36:	d0f0      	beq.n	800bf1a <__match+0x6>
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e7f3      	b.n	800bf24 <__match+0x10>

0800bf3c <__hexnan>:
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	680b      	ldr	r3, [r1, #0]
 800bf42:	6801      	ldr	r1, [r0, #0]
 800bf44:	115f      	asrs	r7, r3, #5
 800bf46:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bf4a:	f013 031f 	ands.w	r3, r3, #31
 800bf4e:	b087      	sub	sp, #28
 800bf50:	bf18      	it	ne
 800bf52:	3704      	addne	r7, #4
 800bf54:	2500      	movs	r5, #0
 800bf56:	1f3e      	subs	r6, r7, #4
 800bf58:	4682      	mov	sl, r0
 800bf5a:	4690      	mov	r8, r2
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	f847 5c04 	str.w	r5, [r7, #-4]
 800bf62:	46b1      	mov	r9, r6
 800bf64:	4634      	mov	r4, r6
 800bf66:	9502      	str	r5, [sp, #8]
 800bf68:	46ab      	mov	fp, r5
 800bf6a:	784a      	ldrb	r2, [r1, #1]
 800bf6c:	1c4b      	adds	r3, r1, #1
 800bf6e:	9303      	str	r3, [sp, #12]
 800bf70:	b342      	cbz	r2, 800bfc4 <__hexnan+0x88>
 800bf72:	4610      	mov	r0, r2
 800bf74:	9105      	str	r1, [sp, #20]
 800bf76:	9204      	str	r2, [sp, #16]
 800bf78:	f7ff fd84 	bl	800ba84 <__hexdig_fun>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d143      	bne.n	800c008 <__hexnan+0xcc>
 800bf80:	9a04      	ldr	r2, [sp, #16]
 800bf82:	9905      	ldr	r1, [sp, #20]
 800bf84:	2a20      	cmp	r2, #32
 800bf86:	d818      	bhi.n	800bfba <__hexnan+0x7e>
 800bf88:	9b02      	ldr	r3, [sp, #8]
 800bf8a:	459b      	cmp	fp, r3
 800bf8c:	dd13      	ble.n	800bfb6 <__hexnan+0x7a>
 800bf8e:	454c      	cmp	r4, r9
 800bf90:	d206      	bcs.n	800bfa0 <__hexnan+0x64>
 800bf92:	2d07      	cmp	r5, #7
 800bf94:	dc04      	bgt.n	800bfa0 <__hexnan+0x64>
 800bf96:	462a      	mov	r2, r5
 800bf98:	4649      	mov	r1, r9
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f7ff ffa8 	bl	800bef0 <L_shift>
 800bfa0:	4544      	cmp	r4, r8
 800bfa2:	d944      	bls.n	800c02e <__hexnan+0xf2>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f1a4 0904 	sub.w	r9, r4, #4
 800bfaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfae:	f8cd b008 	str.w	fp, [sp, #8]
 800bfb2:	464c      	mov	r4, r9
 800bfb4:	461d      	mov	r5, r3
 800bfb6:	9903      	ldr	r1, [sp, #12]
 800bfb8:	e7d7      	b.n	800bf6a <__hexnan+0x2e>
 800bfba:	2a29      	cmp	r2, #41	; 0x29
 800bfbc:	d14a      	bne.n	800c054 <__hexnan+0x118>
 800bfbe:	3102      	adds	r1, #2
 800bfc0:	f8ca 1000 	str.w	r1, [sl]
 800bfc4:	f1bb 0f00 	cmp.w	fp, #0
 800bfc8:	d044      	beq.n	800c054 <__hexnan+0x118>
 800bfca:	454c      	cmp	r4, r9
 800bfcc:	d206      	bcs.n	800bfdc <__hexnan+0xa0>
 800bfce:	2d07      	cmp	r5, #7
 800bfd0:	dc04      	bgt.n	800bfdc <__hexnan+0xa0>
 800bfd2:	462a      	mov	r2, r5
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7ff ff8a 	bl	800bef0 <L_shift>
 800bfdc:	4544      	cmp	r4, r8
 800bfde:	d928      	bls.n	800c032 <__hexnan+0xf6>
 800bfe0:	4643      	mov	r3, r8
 800bfe2:	f854 2b04 	ldr.w	r2, [r4], #4
 800bfe6:	f843 2b04 	str.w	r2, [r3], #4
 800bfea:	42a6      	cmp	r6, r4
 800bfec:	d2f9      	bcs.n	800bfe2 <__hexnan+0xa6>
 800bfee:	2200      	movs	r2, #0
 800bff0:	f843 2b04 	str.w	r2, [r3], #4
 800bff4:	429e      	cmp	r6, r3
 800bff6:	d2fb      	bcs.n	800bff0 <__hexnan+0xb4>
 800bff8:	6833      	ldr	r3, [r6, #0]
 800bffa:	b91b      	cbnz	r3, 800c004 <__hexnan+0xc8>
 800bffc:	4546      	cmp	r6, r8
 800bffe:	d127      	bne.n	800c050 <__hexnan+0x114>
 800c000:	2301      	movs	r3, #1
 800c002:	6033      	str	r3, [r6, #0]
 800c004:	2005      	movs	r0, #5
 800c006:	e026      	b.n	800c056 <__hexnan+0x11a>
 800c008:	3501      	adds	r5, #1
 800c00a:	2d08      	cmp	r5, #8
 800c00c:	f10b 0b01 	add.w	fp, fp, #1
 800c010:	dd06      	ble.n	800c020 <__hexnan+0xe4>
 800c012:	4544      	cmp	r4, r8
 800c014:	d9cf      	bls.n	800bfb6 <__hexnan+0x7a>
 800c016:	2300      	movs	r3, #0
 800c018:	f844 3c04 	str.w	r3, [r4, #-4]
 800c01c:	2501      	movs	r5, #1
 800c01e:	3c04      	subs	r4, #4
 800c020:	6822      	ldr	r2, [r4, #0]
 800c022:	f000 000f 	and.w	r0, r0, #15
 800c026:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c02a:	6020      	str	r0, [r4, #0]
 800c02c:	e7c3      	b.n	800bfb6 <__hexnan+0x7a>
 800c02e:	2508      	movs	r5, #8
 800c030:	e7c1      	b.n	800bfb6 <__hexnan+0x7a>
 800c032:	9b01      	ldr	r3, [sp, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0df      	beq.n	800bff8 <__hexnan+0xbc>
 800c038:	f04f 32ff 	mov.w	r2, #4294967295
 800c03c:	f1c3 0320 	rsb	r3, r3, #32
 800c040:	fa22 f303 	lsr.w	r3, r2, r3
 800c044:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c048:	401a      	ands	r2, r3
 800c04a:	f847 2c04 	str.w	r2, [r7, #-4]
 800c04e:	e7d3      	b.n	800bff8 <__hexnan+0xbc>
 800c050:	3e04      	subs	r6, #4
 800c052:	e7d1      	b.n	800bff8 <__hexnan+0xbc>
 800c054:	2004      	movs	r0, #4
 800c056:	b007      	add	sp, #28
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c05c <__locale_ctype_ptr_l>:
 800c05c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c060:	4770      	bx	lr

0800c062 <__localeconv_l>:
 800c062:	30f0      	adds	r0, #240	; 0xf0
 800c064:	4770      	bx	lr
	...

0800c068 <_localeconv_r>:
 800c068:	4b04      	ldr	r3, [pc, #16]	; (800c07c <_localeconv_r+0x14>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6a18      	ldr	r0, [r3, #32]
 800c06e:	4b04      	ldr	r3, [pc, #16]	; (800c080 <_localeconv_r+0x18>)
 800c070:	2800      	cmp	r0, #0
 800c072:	bf08      	it	eq
 800c074:	4618      	moveq	r0, r3
 800c076:	30f0      	adds	r0, #240	; 0xf0
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	2000006c 	.word	0x2000006c
 800c080:	200000d0 	.word	0x200000d0

0800c084 <malloc>:
 800c084:	4b02      	ldr	r3, [pc, #8]	; (800c090 <malloc+0xc>)
 800c086:	4601      	mov	r1, r0
 800c088:	6818      	ldr	r0, [r3, #0]
 800c08a:	f000 bc71 	b.w	800c970 <_malloc_r>
 800c08e:	bf00      	nop
 800c090:	2000006c 	.word	0x2000006c

0800c094 <__ascii_mbtowc>:
 800c094:	b082      	sub	sp, #8
 800c096:	b901      	cbnz	r1, 800c09a <__ascii_mbtowc+0x6>
 800c098:	a901      	add	r1, sp, #4
 800c09a:	b142      	cbz	r2, 800c0ae <__ascii_mbtowc+0x1a>
 800c09c:	b14b      	cbz	r3, 800c0b2 <__ascii_mbtowc+0x1e>
 800c09e:	7813      	ldrb	r3, [r2, #0]
 800c0a0:	600b      	str	r3, [r1, #0]
 800c0a2:	7812      	ldrb	r2, [r2, #0]
 800c0a4:	1c10      	adds	r0, r2, #0
 800c0a6:	bf18      	it	ne
 800c0a8:	2001      	movne	r0, #1
 800c0aa:	b002      	add	sp, #8
 800c0ac:	4770      	bx	lr
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	e7fb      	b.n	800c0aa <__ascii_mbtowc+0x16>
 800c0b2:	f06f 0001 	mvn.w	r0, #1
 800c0b6:	e7f8      	b.n	800c0aa <__ascii_mbtowc+0x16>

0800c0b8 <_Balloc>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c0bc:	4604      	mov	r4, r0
 800c0be:	460e      	mov	r6, r1
 800c0c0:	b93d      	cbnz	r5, 800c0d2 <_Balloc+0x1a>
 800c0c2:	2010      	movs	r0, #16
 800c0c4:	f7ff ffde 	bl	800c084 <malloc>
 800c0c8:	6260      	str	r0, [r4, #36]	; 0x24
 800c0ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c0ce:	6005      	str	r5, [r0, #0]
 800c0d0:	60c5      	str	r5, [r0, #12]
 800c0d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c0d4:	68eb      	ldr	r3, [r5, #12]
 800c0d6:	b183      	cbz	r3, 800c0fa <_Balloc+0x42>
 800c0d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c0e0:	b9b8      	cbnz	r0, 800c112 <_Balloc+0x5a>
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	fa01 f506 	lsl.w	r5, r1, r6
 800c0e8:	1d6a      	adds	r2, r5, #5
 800c0ea:	0092      	lsls	r2, r2, #2
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f000 fbe2 	bl	800c8b6 <_calloc_r>
 800c0f2:	b160      	cbz	r0, 800c10e <_Balloc+0x56>
 800c0f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c0f8:	e00e      	b.n	800c118 <_Balloc+0x60>
 800c0fa:	2221      	movs	r2, #33	; 0x21
 800c0fc:	2104      	movs	r1, #4
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 fbd9 	bl	800c8b6 <_calloc_r>
 800c104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c106:	60e8      	str	r0, [r5, #12]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e4      	bne.n	800c0d8 <_Balloc+0x20>
 800c10e:	2000      	movs	r0, #0
 800c110:	bd70      	pop	{r4, r5, r6, pc}
 800c112:	6802      	ldr	r2, [r0, #0]
 800c114:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c118:	2300      	movs	r3, #0
 800c11a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c11e:	e7f7      	b.n	800c110 <_Balloc+0x58>

0800c120 <_Bfree>:
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c124:	4606      	mov	r6, r0
 800c126:	460d      	mov	r5, r1
 800c128:	b93c      	cbnz	r4, 800c13a <_Bfree+0x1a>
 800c12a:	2010      	movs	r0, #16
 800c12c:	f7ff ffaa 	bl	800c084 <malloc>
 800c130:	6270      	str	r0, [r6, #36]	; 0x24
 800c132:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c136:	6004      	str	r4, [r0, #0]
 800c138:	60c4      	str	r4, [r0, #12]
 800c13a:	b13d      	cbz	r5, 800c14c <_Bfree+0x2c>
 800c13c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c13e:	686a      	ldr	r2, [r5, #4]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c146:	6029      	str	r1, [r5, #0]
 800c148:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c14c:	bd70      	pop	{r4, r5, r6, pc}

0800c14e <__multadd>:
 800c14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c152:	690d      	ldr	r5, [r1, #16]
 800c154:	461f      	mov	r7, r3
 800c156:	4606      	mov	r6, r0
 800c158:	460c      	mov	r4, r1
 800c15a:	f101 0c14 	add.w	ip, r1, #20
 800c15e:	2300      	movs	r3, #0
 800c160:	f8dc 0000 	ldr.w	r0, [ip]
 800c164:	b281      	uxth	r1, r0
 800c166:	fb02 7101 	mla	r1, r2, r1, r7
 800c16a:	0c0f      	lsrs	r7, r1, #16
 800c16c:	0c00      	lsrs	r0, r0, #16
 800c16e:	fb02 7000 	mla	r0, r2, r0, r7
 800c172:	b289      	uxth	r1, r1
 800c174:	3301      	adds	r3, #1
 800c176:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c17a:	429d      	cmp	r5, r3
 800c17c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c180:	f84c 1b04 	str.w	r1, [ip], #4
 800c184:	dcec      	bgt.n	800c160 <__multadd+0x12>
 800c186:	b1d7      	cbz	r7, 800c1be <__multadd+0x70>
 800c188:	68a3      	ldr	r3, [r4, #8]
 800c18a:	42ab      	cmp	r3, r5
 800c18c:	dc12      	bgt.n	800c1b4 <__multadd+0x66>
 800c18e:	6861      	ldr	r1, [r4, #4]
 800c190:	4630      	mov	r0, r6
 800c192:	3101      	adds	r1, #1
 800c194:	f7ff ff90 	bl	800c0b8 <_Balloc>
 800c198:	6922      	ldr	r2, [r4, #16]
 800c19a:	3202      	adds	r2, #2
 800c19c:	f104 010c 	add.w	r1, r4, #12
 800c1a0:	4680      	mov	r8, r0
 800c1a2:	0092      	lsls	r2, r2, #2
 800c1a4:	300c      	adds	r0, #12
 800c1a6:	f7fd f88f 	bl	80092c8 <memcpy>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f7ff ffb7 	bl	800c120 <_Bfree>
 800c1b2:	4644      	mov	r4, r8
 800c1b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	615f      	str	r7, [r3, #20]
 800c1bc:	6125      	str	r5, [r4, #16]
 800c1be:	4620      	mov	r0, r4
 800c1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c1c4 <__s2b>:
 800c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	4615      	mov	r5, r2
 800c1cc:	461f      	mov	r7, r3
 800c1ce:	2209      	movs	r2, #9
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1d8:	2100      	movs	r1, #0
 800c1da:	2201      	movs	r2, #1
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	db20      	blt.n	800c222 <__s2b+0x5e>
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f7ff ff69 	bl	800c0b8 <_Balloc>
 800c1e6:	9b08      	ldr	r3, [sp, #32]
 800c1e8:	6143      	str	r3, [r0, #20]
 800c1ea:	2d09      	cmp	r5, #9
 800c1ec:	f04f 0301 	mov.w	r3, #1
 800c1f0:	6103      	str	r3, [r0, #16]
 800c1f2:	dd19      	ble.n	800c228 <__s2b+0x64>
 800c1f4:	f104 0809 	add.w	r8, r4, #9
 800c1f8:	46c1      	mov	r9, r8
 800c1fa:	442c      	add	r4, r5
 800c1fc:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c200:	4601      	mov	r1, r0
 800c202:	3b30      	subs	r3, #48	; 0x30
 800c204:	220a      	movs	r2, #10
 800c206:	4630      	mov	r0, r6
 800c208:	f7ff ffa1 	bl	800c14e <__multadd>
 800c20c:	45a1      	cmp	r9, r4
 800c20e:	d1f5      	bne.n	800c1fc <__s2b+0x38>
 800c210:	eb08 0405 	add.w	r4, r8, r5
 800c214:	3c08      	subs	r4, #8
 800c216:	1b2d      	subs	r5, r5, r4
 800c218:	1963      	adds	r3, r4, r5
 800c21a:	42bb      	cmp	r3, r7
 800c21c:	db07      	blt.n	800c22e <__s2b+0x6a>
 800c21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c222:	0052      	lsls	r2, r2, #1
 800c224:	3101      	adds	r1, #1
 800c226:	e7d9      	b.n	800c1dc <__s2b+0x18>
 800c228:	340a      	adds	r4, #10
 800c22a:	2509      	movs	r5, #9
 800c22c:	e7f3      	b.n	800c216 <__s2b+0x52>
 800c22e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c232:	4601      	mov	r1, r0
 800c234:	3b30      	subs	r3, #48	; 0x30
 800c236:	220a      	movs	r2, #10
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff ff88 	bl	800c14e <__multadd>
 800c23e:	e7eb      	b.n	800c218 <__s2b+0x54>

0800c240 <__hi0bits>:
 800c240:	0c02      	lsrs	r2, r0, #16
 800c242:	0412      	lsls	r2, r2, #16
 800c244:	4603      	mov	r3, r0
 800c246:	b9b2      	cbnz	r2, 800c276 <__hi0bits+0x36>
 800c248:	0403      	lsls	r3, r0, #16
 800c24a:	2010      	movs	r0, #16
 800c24c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c250:	bf04      	itt	eq
 800c252:	021b      	lsleq	r3, r3, #8
 800c254:	3008      	addeq	r0, #8
 800c256:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c25a:	bf04      	itt	eq
 800c25c:	011b      	lsleq	r3, r3, #4
 800c25e:	3004      	addeq	r0, #4
 800c260:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c264:	bf04      	itt	eq
 800c266:	009b      	lsleq	r3, r3, #2
 800c268:	3002      	addeq	r0, #2
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	db06      	blt.n	800c27c <__hi0bits+0x3c>
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	d503      	bpl.n	800c27a <__hi0bits+0x3a>
 800c272:	3001      	adds	r0, #1
 800c274:	4770      	bx	lr
 800c276:	2000      	movs	r0, #0
 800c278:	e7e8      	b.n	800c24c <__hi0bits+0xc>
 800c27a:	2020      	movs	r0, #32
 800c27c:	4770      	bx	lr

0800c27e <__lo0bits>:
 800c27e:	6803      	ldr	r3, [r0, #0]
 800c280:	f013 0207 	ands.w	r2, r3, #7
 800c284:	4601      	mov	r1, r0
 800c286:	d00b      	beq.n	800c2a0 <__lo0bits+0x22>
 800c288:	07da      	lsls	r2, r3, #31
 800c28a:	d423      	bmi.n	800c2d4 <__lo0bits+0x56>
 800c28c:	0798      	lsls	r0, r3, #30
 800c28e:	bf49      	itett	mi
 800c290:	085b      	lsrmi	r3, r3, #1
 800c292:	089b      	lsrpl	r3, r3, #2
 800c294:	2001      	movmi	r0, #1
 800c296:	600b      	strmi	r3, [r1, #0]
 800c298:	bf5c      	itt	pl
 800c29a:	600b      	strpl	r3, [r1, #0]
 800c29c:	2002      	movpl	r0, #2
 800c29e:	4770      	bx	lr
 800c2a0:	b298      	uxth	r0, r3
 800c2a2:	b9a8      	cbnz	r0, 800c2d0 <__lo0bits+0x52>
 800c2a4:	0c1b      	lsrs	r3, r3, #16
 800c2a6:	2010      	movs	r0, #16
 800c2a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c2ac:	bf04      	itt	eq
 800c2ae:	0a1b      	lsreq	r3, r3, #8
 800c2b0:	3008      	addeq	r0, #8
 800c2b2:	071a      	lsls	r2, r3, #28
 800c2b4:	bf04      	itt	eq
 800c2b6:	091b      	lsreq	r3, r3, #4
 800c2b8:	3004      	addeq	r0, #4
 800c2ba:	079a      	lsls	r2, r3, #30
 800c2bc:	bf04      	itt	eq
 800c2be:	089b      	lsreq	r3, r3, #2
 800c2c0:	3002      	addeq	r0, #2
 800c2c2:	07da      	lsls	r2, r3, #31
 800c2c4:	d402      	bmi.n	800c2cc <__lo0bits+0x4e>
 800c2c6:	085b      	lsrs	r3, r3, #1
 800c2c8:	d006      	beq.n	800c2d8 <__lo0bits+0x5a>
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	600b      	str	r3, [r1, #0]
 800c2ce:	4770      	bx	lr
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	e7e9      	b.n	800c2a8 <__lo0bits+0x2a>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	4770      	bx	lr
 800c2d8:	2020      	movs	r0, #32
 800c2da:	4770      	bx	lr

0800c2dc <__i2b>:
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	460c      	mov	r4, r1
 800c2e0:	2101      	movs	r1, #1
 800c2e2:	f7ff fee9 	bl	800c0b8 <_Balloc>
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	6144      	str	r4, [r0, #20]
 800c2ea:	6102      	str	r2, [r0, #16]
 800c2ec:	bd10      	pop	{r4, pc}

0800c2ee <__multiply>:
 800c2ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f2:	4614      	mov	r4, r2
 800c2f4:	690a      	ldr	r2, [r1, #16]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	bfb8      	it	lt
 800c2fc:	460b      	movlt	r3, r1
 800c2fe:	4688      	mov	r8, r1
 800c300:	bfbc      	itt	lt
 800c302:	46a0      	movlt	r8, r4
 800c304:	461c      	movlt	r4, r3
 800c306:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c30a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c30e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c312:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c316:	eb07 0609 	add.w	r6, r7, r9
 800c31a:	42b3      	cmp	r3, r6
 800c31c:	bfb8      	it	lt
 800c31e:	3101      	addlt	r1, #1
 800c320:	f7ff feca 	bl	800c0b8 <_Balloc>
 800c324:	f100 0514 	add.w	r5, r0, #20
 800c328:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c32c:	462b      	mov	r3, r5
 800c32e:	2200      	movs	r2, #0
 800c330:	4573      	cmp	r3, lr
 800c332:	d316      	bcc.n	800c362 <__multiply+0x74>
 800c334:	f104 0214 	add.w	r2, r4, #20
 800c338:	f108 0114 	add.w	r1, r8, #20
 800c33c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c340:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	9b00      	ldr	r3, [sp, #0]
 800c348:	9201      	str	r2, [sp, #4]
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d80c      	bhi.n	800c368 <__multiply+0x7a>
 800c34e:	2e00      	cmp	r6, #0
 800c350:	dd03      	ble.n	800c35a <__multiply+0x6c>
 800c352:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c356:	2b00      	cmp	r3, #0
 800c358:	d05d      	beq.n	800c416 <__multiply+0x128>
 800c35a:	6106      	str	r6, [r0, #16]
 800c35c:	b003      	add	sp, #12
 800c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c362:	f843 2b04 	str.w	r2, [r3], #4
 800c366:	e7e3      	b.n	800c330 <__multiply+0x42>
 800c368:	f8b2 b000 	ldrh.w	fp, [r2]
 800c36c:	f1bb 0f00 	cmp.w	fp, #0
 800c370:	d023      	beq.n	800c3ba <__multiply+0xcc>
 800c372:	4689      	mov	r9, r1
 800c374:	46ac      	mov	ip, r5
 800c376:	f04f 0800 	mov.w	r8, #0
 800c37a:	f859 4b04 	ldr.w	r4, [r9], #4
 800c37e:	f8dc a000 	ldr.w	sl, [ip]
 800c382:	b2a3      	uxth	r3, r4
 800c384:	fa1f fa8a 	uxth.w	sl, sl
 800c388:	fb0b a303 	mla	r3, fp, r3, sl
 800c38c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c390:	f8dc 4000 	ldr.w	r4, [ip]
 800c394:	4443      	add	r3, r8
 800c396:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c39a:	fb0b 840a 	mla	r4, fp, sl, r8
 800c39e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c3a2:	46e2      	mov	sl, ip
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c3aa:	454f      	cmp	r7, r9
 800c3ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c3b0:	f84a 3b04 	str.w	r3, [sl], #4
 800c3b4:	d82b      	bhi.n	800c40e <__multiply+0x120>
 800c3b6:	f8cc 8004 	str.w	r8, [ip, #4]
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c3c0:	3204      	adds	r2, #4
 800c3c2:	f1ba 0f00 	cmp.w	sl, #0
 800c3c6:	d020      	beq.n	800c40a <__multiply+0x11c>
 800c3c8:	682b      	ldr	r3, [r5, #0]
 800c3ca:	4689      	mov	r9, r1
 800c3cc:	46a8      	mov	r8, r5
 800c3ce:	f04f 0b00 	mov.w	fp, #0
 800c3d2:	f8b9 c000 	ldrh.w	ip, [r9]
 800c3d6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c3da:	fb0a 440c 	mla	r4, sl, ip, r4
 800c3de:	445c      	add	r4, fp
 800c3e0:	46c4      	mov	ip, r8
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c3e8:	f84c 3b04 	str.w	r3, [ip], #4
 800c3ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3f0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c3f4:	0c1b      	lsrs	r3, r3, #16
 800c3f6:	fb0a b303 	mla	r3, sl, r3, fp
 800c3fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c3fe:	454f      	cmp	r7, r9
 800c400:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c404:	d805      	bhi.n	800c412 <__multiply+0x124>
 800c406:	f8c8 3004 	str.w	r3, [r8, #4]
 800c40a:	3504      	adds	r5, #4
 800c40c:	e79b      	b.n	800c346 <__multiply+0x58>
 800c40e:	46d4      	mov	ip, sl
 800c410:	e7b3      	b.n	800c37a <__multiply+0x8c>
 800c412:	46e0      	mov	r8, ip
 800c414:	e7dd      	b.n	800c3d2 <__multiply+0xe4>
 800c416:	3e01      	subs	r6, #1
 800c418:	e799      	b.n	800c34e <__multiply+0x60>
	...

0800c41c <__pow5mult>:
 800c41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c420:	4615      	mov	r5, r2
 800c422:	f012 0203 	ands.w	r2, r2, #3
 800c426:	4606      	mov	r6, r0
 800c428:	460f      	mov	r7, r1
 800c42a:	d007      	beq.n	800c43c <__pow5mult+0x20>
 800c42c:	3a01      	subs	r2, #1
 800c42e:	4c21      	ldr	r4, [pc, #132]	; (800c4b4 <__pow5mult+0x98>)
 800c430:	2300      	movs	r3, #0
 800c432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c436:	f7ff fe8a 	bl	800c14e <__multadd>
 800c43a:	4607      	mov	r7, r0
 800c43c:	10ad      	asrs	r5, r5, #2
 800c43e:	d035      	beq.n	800c4ac <__pow5mult+0x90>
 800c440:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c442:	b93c      	cbnz	r4, 800c454 <__pow5mult+0x38>
 800c444:	2010      	movs	r0, #16
 800c446:	f7ff fe1d 	bl	800c084 <malloc>
 800c44a:	6270      	str	r0, [r6, #36]	; 0x24
 800c44c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c450:	6004      	str	r4, [r0, #0]
 800c452:	60c4      	str	r4, [r0, #12]
 800c454:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c45c:	b94c      	cbnz	r4, 800c472 <__pow5mult+0x56>
 800c45e:	f240 2171 	movw	r1, #625	; 0x271
 800c462:	4630      	mov	r0, r6
 800c464:	f7ff ff3a 	bl	800c2dc <__i2b>
 800c468:	2300      	movs	r3, #0
 800c46a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c46e:	4604      	mov	r4, r0
 800c470:	6003      	str	r3, [r0, #0]
 800c472:	f04f 0800 	mov.w	r8, #0
 800c476:	07eb      	lsls	r3, r5, #31
 800c478:	d50a      	bpl.n	800c490 <__pow5mult+0x74>
 800c47a:	4639      	mov	r1, r7
 800c47c:	4622      	mov	r2, r4
 800c47e:	4630      	mov	r0, r6
 800c480:	f7ff ff35 	bl	800c2ee <__multiply>
 800c484:	4639      	mov	r1, r7
 800c486:	4681      	mov	r9, r0
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff fe49 	bl	800c120 <_Bfree>
 800c48e:	464f      	mov	r7, r9
 800c490:	106d      	asrs	r5, r5, #1
 800c492:	d00b      	beq.n	800c4ac <__pow5mult+0x90>
 800c494:	6820      	ldr	r0, [r4, #0]
 800c496:	b938      	cbnz	r0, 800c4a8 <__pow5mult+0x8c>
 800c498:	4622      	mov	r2, r4
 800c49a:	4621      	mov	r1, r4
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7ff ff26 	bl	800c2ee <__multiply>
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	f8c0 8000 	str.w	r8, [r0]
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	e7e4      	b.n	800c476 <__pow5mult+0x5a>
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4b2:	bf00      	nop
 800c4b4:	0800ef58 	.word	0x0800ef58

0800c4b8 <__lshift>:
 800c4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	460c      	mov	r4, r1
 800c4be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4c2:	6923      	ldr	r3, [r4, #16]
 800c4c4:	6849      	ldr	r1, [r1, #4]
 800c4c6:	eb0a 0903 	add.w	r9, sl, r3
 800c4ca:	68a3      	ldr	r3, [r4, #8]
 800c4cc:	4607      	mov	r7, r0
 800c4ce:	4616      	mov	r6, r2
 800c4d0:	f109 0501 	add.w	r5, r9, #1
 800c4d4:	42ab      	cmp	r3, r5
 800c4d6:	db32      	blt.n	800c53e <__lshift+0x86>
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7ff fded 	bl	800c0b8 <_Balloc>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	4680      	mov	r8, r0
 800c4e2:	f100 0114 	add.w	r1, r0, #20
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	4553      	cmp	r3, sl
 800c4ea:	db2b      	blt.n	800c544 <__lshift+0x8c>
 800c4ec:	6920      	ldr	r0, [r4, #16]
 800c4ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4f2:	f104 0314 	add.w	r3, r4, #20
 800c4f6:	f016 021f 	ands.w	r2, r6, #31
 800c4fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c502:	d025      	beq.n	800c550 <__lshift+0x98>
 800c504:	f1c2 0e20 	rsb	lr, r2, #32
 800c508:	2000      	movs	r0, #0
 800c50a:	681e      	ldr	r6, [r3, #0]
 800c50c:	468a      	mov	sl, r1
 800c50e:	4096      	lsls	r6, r2
 800c510:	4330      	orrs	r0, r6
 800c512:	f84a 0b04 	str.w	r0, [sl], #4
 800c516:	f853 0b04 	ldr.w	r0, [r3], #4
 800c51a:	459c      	cmp	ip, r3
 800c51c:	fa20 f00e 	lsr.w	r0, r0, lr
 800c520:	d814      	bhi.n	800c54c <__lshift+0x94>
 800c522:	6048      	str	r0, [r1, #4]
 800c524:	b108      	cbz	r0, 800c52a <__lshift+0x72>
 800c526:	f109 0502 	add.w	r5, r9, #2
 800c52a:	3d01      	subs	r5, #1
 800c52c:	4638      	mov	r0, r7
 800c52e:	f8c8 5010 	str.w	r5, [r8, #16]
 800c532:	4621      	mov	r1, r4
 800c534:	f7ff fdf4 	bl	800c120 <_Bfree>
 800c538:	4640      	mov	r0, r8
 800c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53e:	3101      	adds	r1, #1
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	e7c7      	b.n	800c4d4 <__lshift+0x1c>
 800c544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c548:	3301      	adds	r3, #1
 800c54a:	e7cd      	b.n	800c4e8 <__lshift+0x30>
 800c54c:	4651      	mov	r1, sl
 800c54e:	e7dc      	b.n	800c50a <__lshift+0x52>
 800c550:	3904      	subs	r1, #4
 800c552:	f853 2b04 	ldr.w	r2, [r3], #4
 800c556:	f841 2f04 	str.w	r2, [r1, #4]!
 800c55a:	459c      	cmp	ip, r3
 800c55c:	d8f9      	bhi.n	800c552 <__lshift+0x9a>
 800c55e:	e7e4      	b.n	800c52a <__lshift+0x72>

0800c560 <__mcmp>:
 800c560:	6903      	ldr	r3, [r0, #16]
 800c562:	690a      	ldr	r2, [r1, #16]
 800c564:	1a9b      	subs	r3, r3, r2
 800c566:	b530      	push	{r4, r5, lr}
 800c568:	d10c      	bne.n	800c584 <__mcmp+0x24>
 800c56a:	0092      	lsls	r2, r2, #2
 800c56c:	3014      	adds	r0, #20
 800c56e:	3114      	adds	r1, #20
 800c570:	1884      	adds	r4, r0, r2
 800c572:	4411      	add	r1, r2
 800c574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c57c:	4295      	cmp	r5, r2
 800c57e:	d003      	beq.n	800c588 <__mcmp+0x28>
 800c580:	d305      	bcc.n	800c58e <__mcmp+0x2e>
 800c582:	2301      	movs	r3, #1
 800c584:	4618      	mov	r0, r3
 800c586:	bd30      	pop	{r4, r5, pc}
 800c588:	42a0      	cmp	r0, r4
 800c58a:	d3f3      	bcc.n	800c574 <__mcmp+0x14>
 800c58c:	e7fa      	b.n	800c584 <__mcmp+0x24>
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295
 800c592:	e7f7      	b.n	800c584 <__mcmp+0x24>

0800c594 <__mdiff>:
 800c594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c598:	460d      	mov	r5, r1
 800c59a:	4607      	mov	r7, r0
 800c59c:	4611      	mov	r1, r2
 800c59e:	4628      	mov	r0, r5
 800c5a0:	4614      	mov	r4, r2
 800c5a2:	f7ff ffdd 	bl	800c560 <__mcmp>
 800c5a6:	1e06      	subs	r6, r0, #0
 800c5a8:	d108      	bne.n	800c5bc <__mdiff+0x28>
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	f7ff fd83 	bl	800c0b8 <_Balloc>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5bc:	bfa4      	itt	ge
 800c5be:	4623      	movge	r3, r4
 800c5c0:	462c      	movge	r4, r5
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	6861      	ldr	r1, [r4, #4]
 800c5c6:	bfa6      	itte	ge
 800c5c8:	461d      	movge	r5, r3
 800c5ca:	2600      	movge	r6, #0
 800c5cc:	2601      	movlt	r6, #1
 800c5ce:	f7ff fd73 	bl	800c0b8 <_Balloc>
 800c5d2:	692b      	ldr	r3, [r5, #16]
 800c5d4:	60c6      	str	r6, [r0, #12]
 800c5d6:	6926      	ldr	r6, [r4, #16]
 800c5d8:	f105 0914 	add.w	r9, r5, #20
 800c5dc:	f104 0214 	add.w	r2, r4, #20
 800c5e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c5e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c5e8:	f100 0514 	add.w	r5, r0, #20
 800c5ec:	f04f 0e00 	mov.w	lr, #0
 800c5f0:	f852 ab04 	ldr.w	sl, [r2], #4
 800c5f4:	f859 4b04 	ldr.w	r4, [r9], #4
 800c5f8:	fa1e f18a 	uxtah	r1, lr, sl
 800c5fc:	b2a3      	uxth	r3, r4
 800c5fe:	1ac9      	subs	r1, r1, r3
 800c600:	0c23      	lsrs	r3, r4, #16
 800c602:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c606:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c60a:	b289      	uxth	r1, r1
 800c60c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c610:	45c8      	cmp	r8, r9
 800c612:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c616:	4694      	mov	ip, r2
 800c618:	f845 3b04 	str.w	r3, [r5], #4
 800c61c:	d8e8      	bhi.n	800c5f0 <__mdiff+0x5c>
 800c61e:	45bc      	cmp	ip, r7
 800c620:	d304      	bcc.n	800c62c <__mdiff+0x98>
 800c622:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c626:	b183      	cbz	r3, 800c64a <__mdiff+0xb6>
 800c628:	6106      	str	r6, [r0, #16]
 800c62a:	e7c5      	b.n	800c5b8 <__mdiff+0x24>
 800c62c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c630:	fa1e f381 	uxtah	r3, lr, r1
 800c634:	141a      	asrs	r2, r3, #16
 800c636:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c640:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c644:	f845 3b04 	str.w	r3, [r5], #4
 800c648:	e7e9      	b.n	800c61e <__mdiff+0x8a>
 800c64a:	3e01      	subs	r6, #1
 800c64c:	e7e9      	b.n	800c622 <__mdiff+0x8e>
	...

0800c650 <__ulp>:
 800c650:	4b12      	ldr	r3, [pc, #72]	; (800c69c <__ulp+0x4c>)
 800c652:	ee10 2a90 	vmov	r2, s1
 800c656:	401a      	ands	r2, r3
 800c658:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	dd04      	ble.n	800c66a <__ulp+0x1a>
 800c660:	2000      	movs	r0, #0
 800c662:	4619      	mov	r1, r3
 800c664:	ec41 0b10 	vmov	d0, r0, r1
 800c668:	4770      	bx	lr
 800c66a:	425b      	negs	r3, r3
 800c66c:	151b      	asrs	r3, r3, #20
 800c66e:	2b13      	cmp	r3, #19
 800c670:	f04f 0000 	mov.w	r0, #0
 800c674:	f04f 0100 	mov.w	r1, #0
 800c678:	dc04      	bgt.n	800c684 <__ulp+0x34>
 800c67a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c67e:	fa42 f103 	asr.w	r1, r2, r3
 800c682:	e7ef      	b.n	800c664 <__ulp+0x14>
 800c684:	3b14      	subs	r3, #20
 800c686:	2b1e      	cmp	r3, #30
 800c688:	f04f 0201 	mov.w	r2, #1
 800c68c:	bfda      	itte	le
 800c68e:	f1c3 031f 	rsble	r3, r3, #31
 800c692:	fa02 f303 	lslle.w	r3, r2, r3
 800c696:	4613      	movgt	r3, r2
 800c698:	4618      	mov	r0, r3
 800c69a:	e7e3      	b.n	800c664 <__ulp+0x14>
 800c69c:	7ff00000 	.word	0x7ff00000

0800c6a0 <__b2d>:
 800c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a2:	6905      	ldr	r5, [r0, #16]
 800c6a4:	f100 0714 	add.w	r7, r0, #20
 800c6a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c6ac:	1f2e      	subs	r6, r5, #4
 800c6ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f7ff fdc4 	bl	800c240 <__hi0bits>
 800c6b8:	f1c0 0320 	rsb	r3, r0, #32
 800c6bc:	280a      	cmp	r0, #10
 800c6be:	600b      	str	r3, [r1, #0]
 800c6c0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c738 <__b2d+0x98>
 800c6c4:	dc14      	bgt.n	800c6f0 <__b2d+0x50>
 800c6c6:	f1c0 0e0b 	rsb	lr, r0, #11
 800c6ca:	fa24 f10e 	lsr.w	r1, r4, lr
 800c6ce:	42b7      	cmp	r7, r6
 800c6d0:	ea41 030c 	orr.w	r3, r1, ip
 800c6d4:	bf34      	ite	cc
 800c6d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c6da:	2100      	movcs	r1, #0
 800c6dc:	3015      	adds	r0, #21
 800c6de:	fa04 f000 	lsl.w	r0, r4, r0
 800c6e2:	fa21 f10e 	lsr.w	r1, r1, lr
 800c6e6:	ea40 0201 	orr.w	r2, r0, r1
 800c6ea:	ec43 2b10 	vmov	d0, r2, r3
 800c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6f0:	42b7      	cmp	r7, r6
 800c6f2:	bf3a      	itte	cc
 800c6f4:	f1a5 0608 	subcc.w	r6, r5, #8
 800c6f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c6fc:	2100      	movcs	r1, #0
 800c6fe:	380b      	subs	r0, #11
 800c700:	d015      	beq.n	800c72e <__b2d+0x8e>
 800c702:	4084      	lsls	r4, r0
 800c704:	f1c0 0520 	rsb	r5, r0, #32
 800c708:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c70c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c710:	42be      	cmp	r6, r7
 800c712:	fa21 fc05 	lsr.w	ip, r1, r5
 800c716:	ea44 030c 	orr.w	r3, r4, ip
 800c71a:	bf8c      	ite	hi
 800c71c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c720:	2400      	movls	r4, #0
 800c722:	fa01 f000 	lsl.w	r0, r1, r0
 800c726:	40ec      	lsrs	r4, r5
 800c728:	ea40 0204 	orr.w	r2, r0, r4
 800c72c:	e7dd      	b.n	800c6ea <__b2d+0x4a>
 800c72e:	ea44 030c 	orr.w	r3, r4, ip
 800c732:	460a      	mov	r2, r1
 800c734:	e7d9      	b.n	800c6ea <__b2d+0x4a>
 800c736:	bf00      	nop
 800c738:	3ff00000 	.word	0x3ff00000

0800c73c <__d2b>:
 800c73c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c740:	460e      	mov	r6, r1
 800c742:	2101      	movs	r1, #1
 800c744:	ec59 8b10 	vmov	r8, r9, d0
 800c748:	4615      	mov	r5, r2
 800c74a:	f7ff fcb5 	bl	800c0b8 <_Balloc>
 800c74e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c752:	4607      	mov	r7, r0
 800c754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c758:	bb34      	cbnz	r4, 800c7a8 <__d2b+0x6c>
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	f1b8 0300 	subs.w	r3, r8, #0
 800c760:	d027      	beq.n	800c7b2 <__d2b+0x76>
 800c762:	a802      	add	r0, sp, #8
 800c764:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c768:	f7ff fd89 	bl	800c27e <__lo0bits>
 800c76c:	9900      	ldr	r1, [sp, #0]
 800c76e:	b1f0      	cbz	r0, 800c7ae <__d2b+0x72>
 800c770:	9a01      	ldr	r2, [sp, #4]
 800c772:	f1c0 0320 	rsb	r3, r0, #32
 800c776:	fa02 f303 	lsl.w	r3, r2, r3
 800c77a:	430b      	orrs	r3, r1
 800c77c:	40c2      	lsrs	r2, r0
 800c77e:	617b      	str	r3, [r7, #20]
 800c780:	9201      	str	r2, [sp, #4]
 800c782:	9b01      	ldr	r3, [sp, #4]
 800c784:	61bb      	str	r3, [r7, #24]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf14      	ite	ne
 800c78a:	2102      	movne	r1, #2
 800c78c:	2101      	moveq	r1, #1
 800c78e:	6139      	str	r1, [r7, #16]
 800c790:	b1c4      	cbz	r4, 800c7c4 <__d2b+0x88>
 800c792:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c796:	4404      	add	r4, r0
 800c798:	6034      	str	r4, [r6, #0]
 800c79a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c79e:	6028      	str	r0, [r5, #0]
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	b003      	add	sp, #12
 800c7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7ac:	e7d5      	b.n	800c75a <__d2b+0x1e>
 800c7ae:	6179      	str	r1, [r7, #20]
 800c7b0:	e7e7      	b.n	800c782 <__d2b+0x46>
 800c7b2:	a801      	add	r0, sp, #4
 800c7b4:	f7ff fd63 	bl	800c27e <__lo0bits>
 800c7b8:	9b01      	ldr	r3, [sp, #4]
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	2101      	movs	r1, #1
 800c7be:	6139      	str	r1, [r7, #16]
 800c7c0:	3020      	adds	r0, #32
 800c7c2:	e7e5      	b.n	800c790 <__d2b+0x54>
 800c7c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c7c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c7cc:	6030      	str	r0, [r6, #0]
 800c7ce:	6918      	ldr	r0, [r3, #16]
 800c7d0:	f7ff fd36 	bl	800c240 <__hi0bits>
 800c7d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c7d8:	e7e1      	b.n	800c79e <__d2b+0x62>

0800c7da <__ratio>:
 800c7da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7de:	4688      	mov	r8, r1
 800c7e0:	4669      	mov	r1, sp
 800c7e2:	4681      	mov	r9, r0
 800c7e4:	f7ff ff5c 	bl	800c6a0 <__b2d>
 800c7e8:	a901      	add	r1, sp, #4
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	ec57 6b10 	vmov	r6, r7, d0
 800c7f0:	f7ff ff56 	bl	800c6a0 <__b2d>
 800c7f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c7fc:	eba3 0c02 	sub.w	ip, r3, r2
 800c800:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c804:	1a9b      	subs	r3, r3, r2
 800c806:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c80a:	ec5b ab10 	vmov	sl, fp, d0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	bfce      	itee	gt
 800c812:	463a      	movgt	r2, r7
 800c814:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c818:	465a      	movle	r2, fp
 800c81a:	4659      	mov	r1, fp
 800c81c:	463d      	mov	r5, r7
 800c81e:	bfd4      	ite	le
 800c820:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c824:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c828:	4630      	mov	r0, r6
 800c82a:	ee10 2a10 	vmov	r2, s0
 800c82e:	460b      	mov	r3, r1
 800c830:	4629      	mov	r1, r5
 800c832:	f7f4 f833 	bl	800089c <__aeabi_ddiv>
 800c836:	ec41 0b10 	vmov	d0, r0, r1
 800c83a:	b003      	add	sp, #12
 800c83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c840 <__copybits>:
 800c840:	3901      	subs	r1, #1
 800c842:	b510      	push	{r4, lr}
 800c844:	1149      	asrs	r1, r1, #5
 800c846:	6914      	ldr	r4, [r2, #16]
 800c848:	3101      	adds	r1, #1
 800c84a:	f102 0314 	add.w	r3, r2, #20
 800c84e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c852:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c856:	42a3      	cmp	r3, r4
 800c858:	4602      	mov	r2, r0
 800c85a:	d303      	bcc.n	800c864 <__copybits+0x24>
 800c85c:	2300      	movs	r3, #0
 800c85e:	428a      	cmp	r2, r1
 800c860:	d305      	bcc.n	800c86e <__copybits+0x2e>
 800c862:	bd10      	pop	{r4, pc}
 800c864:	f853 2b04 	ldr.w	r2, [r3], #4
 800c868:	f840 2b04 	str.w	r2, [r0], #4
 800c86c:	e7f3      	b.n	800c856 <__copybits+0x16>
 800c86e:	f842 3b04 	str.w	r3, [r2], #4
 800c872:	e7f4      	b.n	800c85e <__copybits+0x1e>

0800c874 <__any_on>:
 800c874:	f100 0214 	add.w	r2, r0, #20
 800c878:	6900      	ldr	r0, [r0, #16]
 800c87a:	114b      	asrs	r3, r1, #5
 800c87c:	4298      	cmp	r0, r3
 800c87e:	b510      	push	{r4, lr}
 800c880:	db11      	blt.n	800c8a6 <__any_on+0x32>
 800c882:	dd0a      	ble.n	800c89a <__any_on+0x26>
 800c884:	f011 011f 	ands.w	r1, r1, #31
 800c888:	d007      	beq.n	800c89a <__any_on+0x26>
 800c88a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c88e:	fa24 f001 	lsr.w	r0, r4, r1
 800c892:	fa00 f101 	lsl.w	r1, r0, r1
 800c896:	428c      	cmp	r4, r1
 800c898:	d10b      	bne.n	800c8b2 <__any_on+0x3e>
 800c89a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d803      	bhi.n	800c8aa <__any_on+0x36>
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	bd10      	pop	{r4, pc}
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	e7f7      	b.n	800c89a <__any_on+0x26>
 800c8aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8ae:	2900      	cmp	r1, #0
 800c8b0:	d0f5      	beq.n	800c89e <__any_on+0x2a>
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	e7f6      	b.n	800c8a4 <__any_on+0x30>

0800c8b6 <_calloc_r>:
 800c8b6:	b538      	push	{r3, r4, r5, lr}
 800c8b8:	fb02 f401 	mul.w	r4, r2, r1
 800c8bc:	4621      	mov	r1, r4
 800c8be:	f000 f857 	bl	800c970 <_malloc_r>
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b118      	cbz	r0, 800c8ce <_calloc_r+0x18>
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	f7fc fd08 	bl	80092de <memset>
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c8d4 <_free_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	2900      	cmp	r1, #0
 800c8da:	d045      	beq.n	800c968 <_free_r+0x94>
 800c8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8e0:	1f0c      	subs	r4, r1, #4
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	bfb8      	it	lt
 800c8e6:	18e4      	addlt	r4, r4, r3
 800c8e8:	f000 fa36 	bl	800cd58 <__malloc_lock>
 800c8ec:	4a1f      	ldr	r2, [pc, #124]	; (800c96c <_free_r+0x98>)
 800c8ee:	6813      	ldr	r3, [r2, #0]
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	b933      	cbnz	r3, 800c902 <_free_r+0x2e>
 800c8f4:	6063      	str	r3, [r4, #4]
 800c8f6:	6014      	str	r4, [r2, #0]
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8fe:	f000 ba2c 	b.w	800cd5a <__malloc_unlock>
 800c902:	42a3      	cmp	r3, r4
 800c904:	d90c      	bls.n	800c920 <_free_r+0x4c>
 800c906:	6821      	ldr	r1, [r4, #0]
 800c908:	1862      	adds	r2, r4, r1
 800c90a:	4293      	cmp	r3, r2
 800c90c:	bf04      	itt	eq
 800c90e:	681a      	ldreq	r2, [r3, #0]
 800c910:	685b      	ldreq	r3, [r3, #4]
 800c912:	6063      	str	r3, [r4, #4]
 800c914:	bf04      	itt	eq
 800c916:	1852      	addeq	r2, r2, r1
 800c918:	6022      	streq	r2, [r4, #0]
 800c91a:	6004      	str	r4, [r0, #0]
 800c91c:	e7ec      	b.n	800c8f8 <_free_r+0x24>
 800c91e:	4613      	mov	r3, r2
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	b10a      	cbz	r2, 800c928 <_free_r+0x54>
 800c924:	42a2      	cmp	r2, r4
 800c926:	d9fa      	bls.n	800c91e <_free_r+0x4a>
 800c928:	6819      	ldr	r1, [r3, #0]
 800c92a:	1858      	adds	r0, r3, r1
 800c92c:	42a0      	cmp	r0, r4
 800c92e:	d10b      	bne.n	800c948 <_free_r+0x74>
 800c930:	6820      	ldr	r0, [r4, #0]
 800c932:	4401      	add	r1, r0
 800c934:	1858      	adds	r0, r3, r1
 800c936:	4282      	cmp	r2, r0
 800c938:	6019      	str	r1, [r3, #0]
 800c93a:	d1dd      	bne.n	800c8f8 <_free_r+0x24>
 800c93c:	6810      	ldr	r0, [r2, #0]
 800c93e:	6852      	ldr	r2, [r2, #4]
 800c940:	605a      	str	r2, [r3, #4]
 800c942:	4401      	add	r1, r0
 800c944:	6019      	str	r1, [r3, #0]
 800c946:	e7d7      	b.n	800c8f8 <_free_r+0x24>
 800c948:	d902      	bls.n	800c950 <_free_r+0x7c>
 800c94a:	230c      	movs	r3, #12
 800c94c:	602b      	str	r3, [r5, #0]
 800c94e:	e7d3      	b.n	800c8f8 <_free_r+0x24>
 800c950:	6820      	ldr	r0, [r4, #0]
 800c952:	1821      	adds	r1, r4, r0
 800c954:	428a      	cmp	r2, r1
 800c956:	bf04      	itt	eq
 800c958:	6811      	ldreq	r1, [r2, #0]
 800c95a:	6852      	ldreq	r2, [r2, #4]
 800c95c:	6062      	str	r2, [r4, #4]
 800c95e:	bf04      	itt	eq
 800c960:	1809      	addeq	r1, r1, r0
 800c962:	6021      	streq	r1, [r4, #0]
 800c964:	605c      	str	r4, [r3, #4]
 800c966:	e7c7      	b.n	800c8f8 <_free_r+0x24>
 800c968:	bd38      	pop	{r3, r4, r5, pc}
 800c96a:	bf00      	nop
 800c96c:	200055dc 	.word	0x200055dc

0800c970 <_malloc_r>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	1ccd      	adds	r5, r1, #3
 800c974:	f025 0503 	bic.w	r5, r5, #3
 800c978:	3508      	adds	r5, #8
 800c97a:	2d0c      	cmp	r5, #12
 800c97c:	bf38      	it	cc
 800c97e:	250c      	movcc	r5, #12
 800c980:	2d00      	cmp	r5, #0
 800c982:	4606      	mov	r6, r0
 800c984:	db01      	blt.n	800c98a <_malloc_r+0x1a>
 800c986:	42a9      	cmp	r1, r5
 800c988:	d903      	bls.n	800c992 <_malloc_r+0x22>
 800c98a:	230c      	movs	r3, #12
 800c98c:	6033      	str	r3, [r6, #0]
 800c98e:	2000      	movs	r0, #0
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	f000 f9e1 	bl	800cd58 <__malloc_lock>
 800c996:	4a21      	ldr	r2, [pc, #132]	; (800ca1c <_malloc_r+0xac>)
 800c998:	6814      	ldr	r4, [r2, #0]
 800c99a:	4621      	mov	r1, r4
 800c99c:	b991      	cbnz	r1, 800c9c4 <_malloc_r+0x54>
 800c99e:	4c20      	ldr	r4, [pc, #128]	; (800ca20 <_malloc_r+0xb0>)
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	b91b      	cbnz	r3, 800c9ac <_malloc_r+0x3c>
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f000 f98f 	bl	800ccc8 <_sbrk_r>
 800c9aa:	6020      	str	r0, [r4, #0]
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f000 f98a 	bl	800ccc8 <_sbrk_r>
 800c9b4:	1c43      	adds	r3, r0, #1
 800c9b6:	d124      	bne.n	800ca02 <_malloc_r+0x92>
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	6033      	str	r3, [r6, #0]
 800c9bc:	4630      	mov	r0, r6
 800c9be:	f000 f9cc 	bl	800cd5a <__malloc_unlock>
 800c9c2:	e7e4      	b.n	800c98e <_malloc_r+0x1e>
 800c9c4:	680b      	ldr	r3, [r1, #0]
 800c9c6:	1b5b      	subs	r3, r3, r5
 800c9c8:	d418      	bmi.n	800c9fc <_malloc_r+0x8c>
 800c9ca:	2b0b      	cmp	r3, #11
 800c9cc:	d90f      	bls.n	800c9ee <_malloc_r+0x7e>
 800c9ce:	600b      	str	r3, [r1, #0]
 800c9d0:	50cd      	str	r5, [r1, r3]
 800c9d2:	18cc      	adds	r4, r1, r3
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f000 f9c0 	bl	800cd5a <__malloc_unlock>
 800c9da:	f104 000b 	add.w	r0, r4, #11
 800c9de:	1d23      	adds	r3, r4, #4
 800c9e0:	f020 0007 	bic.w	r0, r0, #7
 800c9e4:	1ac3      	subs	r3, r0, r3
 800c9e6:	d0d3      	beq.n	800c990 <_malloc_r+0x20>
 800c9e8:	425a      	negs	r2, r3
 800c9ea:	50e2      	str	r2, [r4, r3]
 800c9ec:	e7d0      	b.n	800c990 <_malloc_r+0x20>
 800c9ee:	428c      	cmp	r4, r1
 800c9f0:	684b      	ldr	r3, [r1, #4]
 800c9f2:	bf16      	itet	ne
 800c9f4:	6063      	strne	r3, [r4, #4]
 800c9f6:	6013      	streq	r3, [r2, #0]
 800c9f8:	460c      	movne	r4, r1
 800c9fa:	e7eb      	b.n	800c9d4 <_malloc_r+0x64>
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	6849      	ldr	r1, [r1, #4]
 800ca00:	e7cc      	b.n	800c99c <_malloc_r+0x2c>
 800ca02:	1cc4      	adds	r4, r0, #3
 800ca04:	f024 0403 	bic.w	r4, r4, #3
 800ca08:	42a0      	cmp	r0, r4
 800ca0a:	d005      	beq.n	800ca18 <_malloc_r+0xa8>
 800ca0c:	1a21      	subs	r1, r4, r0
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f000 f95a 	bl	800ccc8 <_sbrk_r>
 800ca14:	3001      	adds	r0, #1
 800ca16:	d0cf      	beq.n	800c9b8 <_malloc_r+0x48>
 800ca18:	6025      	str	r5, [r4, #0]
 800ca1a:	e7db      	b.n	800c9d4 <_malloc_r+0x64>
 800ca1c:	200055dc 	.word	0x200055dc
 800ca20:	200055e0 	.word	0x200055e0

0800ca24 <__ssputs_r>:
 800ca24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	688e      	ldr	r6, [r1, #8]
 800ca2a:	429e      	cmp	r6, r3
 800ca2c:	4682      	mov	sl, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	4690      	mov	r8, r2
 800ca32:	4699      	mov	r9, r3
 800ca34:	d837      	bhi.n	800caa6 <__ssputs_r+0x82>
 800ca36:	898a      	ldrh	r2, [r1, #12]
 800ca38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca3c:	d031      	beq.n	800caa2 <__ssputs_r+0x7e>
 800ca3e:	6825      	ldr	r5, [r4, #0]
 800ca40:	6909      	ldr	r1, [r1, #16]
 800ca42:	1a6f      	subs	r7, r5, r1
 800ca44:	6965      	ldr	r5, [r4, #20]
 800ca46:	2302      	movs	r3, #2
 800ca48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca4c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ca50:	f109 0301 	add.w	r3, r9, #1
 800ca54:	443b      	add	r3, r7
 800ca56:	429d      	cmp	r5, r3
 800ca58:	bf38      	it	cc
 800ca5a:	461d      	movcc	r5, r3
 800ca5c:	0553      	lsls	r3, r2, #21
 800ca5e:	d530      	bpl.n	800cac2 <__ssputs_r+0x9e>
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7ff ff85 	bl	800c970 <_malloc_r>
 800ca66:	4606      	mov	r6, r0
 800ca68:	b950      	cbnz	r0, 800ca80 <__ssputs_r+0x5c>
 800ca6a:	230c      	movs	r3, #12
 800ca6c:	f8ca 3000 	str.w	r3, [sl]
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca76:	81a3      	strh	r3, [r4, #12]
 800ca78:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca80:	463a      	mov	r2, r7
 800ca82:	6921      	ldr	r1, [r4, #16]
 800ca84:	f7fc fc20 	bl	80092c8 <memcpy>
 800ca88:	89a3      	ldrh	r3, [r4, #12]
 800ca8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca92:	81a3      	strh	r3, [r4, #12]
 800ca94:	6126      	str	r6, [r4, #16]
 800ca96:	6165      	str	r5, [r4, #20]
 800ca98:	443e      	add	r6, r7
 800ca9a:	1bed      	subs	r5, r5, r7
 800ca9c:	6026      	str	r6, [r4, #0]
 800ca9e:	60a5      	str	r5, [r4, #8]
 800caa0:	464e      	mov	r6, r9
 800caa2:	454e      	cmp	r6, r9
 800caa4:	d900      	bls.n	800caa8 <__ssputs_r+0x84>
 800caa6:	464e      	mov	r6, r9
 800caa8:	4632      	mov	r2, r6
 800caaa:	4641      	mov	r1, r8
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	f000 f93a 	bl	800cd26 <memmove>
 800cab2:	68a3      	ldr	r3, [r4, #8]
 800cab4:	1b9b      	subs	r3, r3, r6
 800cab6:	60a3      	str	r3, [r4, #8]
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	441e      	add	r6, r3
 800cabc:	6026      	str	r6, [r4, #0]
 800cabe:	2000      	movs	r0, #0
 800cac0:	e7dc      	b.n	800ca7c <__ssputs_r+0x58>
 800cac2:	462a      	mov	r2, r5
 800cac4:	f000 f94a 	bl	800cd5c <_realloc_r>
 800cac8:	4606      	mov	r6, r0
 800caca:	2800      	cmp	r0, #0
 800cacc:	d1e2      	bne.n	800ca94 <__ssputs_r+0x70>
 800cace:	6921      	ldr	r1, [r4, #16]
 800cad0:	4650      	mov	r0, sl
 800cad2:	f7ff feff 	bl	800c8d4 <_free_r>
 800cad6:	e7c8      	b.n	800ca6a <__ssputs_r+0x46>

0800cad8 <_svfiprintf_r>:
 800cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cadc:	461d      	mov	r5, r3
 800cade:	898b      	ldrh	r3, [r1, #12]
 800cae0:	061f      	lsls	r7, r3, #24
 800cae2:	b09d      	sub	sp, #116	; 0x74
 800cae4:	4680      	mov	r8, r0
 800cae6:	460c      	mov	r4, r1
 800cae8:	4616      	mov	r6, r2
 800caea:	d50f      	bpl.n	800cb0c <_svfiprintf_r+0x34>
 800caec:	690b      	ldr	r3, [r1, #16]
 800caee:	b96b      	cbnz	r3, 800cb0c <_svfiprintf_r+0x34>
 800caf0:	2140      	movs	r1, #64	; 0x40
 800caf2:	f7ff ff3d 	bl	800c970 <_malloc_r>
 800caf6:	6020      	str	r0, [r4, #0]
 800caf8:	6120      	str	r0, [r4, #16]
 800cafa:	b928      	cbnz	r0, 800cb08 <_svfiprintf_r+0x30>
 800cafc:	230c      	movs	r3, #12
 800cafe:	f8c8 3000 	str.w	r3, [r8]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295
 800cb06:	e0c8      	b.n	800cc9a <_svfiprintf_r+0x1c2>
 800cb08:	2340      	movs	r3, #64	; 0x40
 800cb0a:	6163      	str	r3, [r4, #20]
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb10:	2320      	movs	r3, #32
 800cb12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb16:	2330      	movs	r3, #48	; 0x30
 800cb18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb1c:	9503      	str	r5, [sp, #12]
 800cb1e:	f04f 0b01 	mov.w	fp, #1
 800cb22:	4637      	mov	r7, r6
 800cb24:	463d      	mov	r5, r7
 800cb26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb2a:	b10b      	cbz	r3, 800cb30 <_svfiprintf_r+0x58>
 800cb2c:	2b25      	cmp	r3, #37	; 0x25
 800cb2e:	d13e      	bne.n	800cbae <_svfiprintf_r+0xd6>
 800cb30:	ebb7 0a06 	subs.w	sl, r7, r6
 800cb34:	d00b      	beq.n	800cb4e <_svfiprintf_r+0x76>
 800cb36:	4653      	mov	r3, sl
 800cb38:	4632      	mov	r2, r6
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4640      	mov	r0, r8
 800cb3e:	f7ff ff71 	bl	800ca24 <__ssputs_r>
 800cb42:	3001      	adds	r0, #1
 800cb44:	f000 80a4 	beq.w	800cc90 <_svfiprintf_r+0x1b8>
 800cb48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4a:	4453      	add	r3, sl
 800cb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb4e:	783b      	ldrb	r3, [r7, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 809d 	beq.w	800cc90 <_svfiprintf_r+0x1b8>
 800cb56:	2300      	movs	r3, #0
 800cb58:	f04f 32ff 	mov.w	r2, #4294967295
 800cb5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb60:	9304      	str	r3, [sp, #16]
 800cb62:	9307      	str	r3, [sp, #28]
 800cb64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb68:	931a      	str	r3, [sp, #104]	; 0x68
 800cb6a:	462f      	mov	r7, r5
 800cb6c:	2205      	movs	r2, #5
 800cb6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cb72:	4850      	ldr	r0, [pc, #320]	; (800ccb4 <_svfiprintf_r+0x1dc>)
 800cb74:	f7f3 fb5c 	bl	8000230 <memchr>
 800cb78:	9b04      	ldr	r3, [sp, #16]
 800cb7a:	b9d0      	cbnz	r0, 800cbb2 <_svfiprintf_r+0xda>
 800cb7c:	06d9      	lsls	r1, r3, #27
 800cb7e:	bf44      	itt	mi
 800cb80:	2220      	movmi	r2, #32
 800cb82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb86:	071a      	lsls	r2, r3, #28
 800cb88:	bf44      	itt	mi
 800cb8a:	222b      	movmi	r2, #43	; 0x2b
 800cb8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb90:	782a      	ldrb	r2, [r5, #0]
 800cb92:	2a2a      	cmp	r2, #42	; 0x2a
 800cb94:	d015      	beq.n	800cbc2 <_svfiprintf_r+0xea>
 800cb96:	9a07      	ldr	r2, [sp, #28]
 800cb98:	462f      	mov	r7, r5
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	250a      	movs	r5, #10
 800cb9e:	4639      	mov	r1, r7
 800cba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cba4:	3b30      	subs	r3, #48	; 0x30
 800cba6:	2b09      	cmp	r3, #9
 800cba8:	d94d      	bls.n	800cc46 <_svfiprintf_r+0x16e>
 800cbaa:	b1b8      	cbz	r0, 800cbdc <_svfiprintf_r+0x104>
 800cbac:	e00f      	b.n	800cbce <_svfiprintf_r+0xf6>
 800cbae:	462f      	mov	r7, r5
 800cbb0:	e7b8      	b.n	800cb24 <_svfiprintf_r+0x4c>
 800cbb2:	4a40      	ldr	r2, [pc, #256]	; (800ccb4 <_svfiprintf_r+0x1dc>)
 800cbb4:	1a80      	subs	r0, r0, r2
 800cbb6:	fa0b f000 	lsl.w	r0, fp, r0
 800cbba:	4318      	orrs	r0, r3
 800cbbc:	9004      	str	r0, [sp, #16]
 800cbbe:	463d      	mov	r5, r7
 800cbc0:	e7d3      	b.n	800cb6a <_svfiprintf_r+0x92>
 800cbc2:	9a03      	ldr	r2, [sp, #12]
 800cbc4:	1d11      	adds	r1, r2, #4
 800cbc6:	6812      	ldr	r2, [r2, #0]
 800cbc8:	9103      	str	r1, [sp, #12]
 800cbca:	2a00      	cmp	r2, #0
 800cbcc:	db01      	blt.n	800cbd2 <_svfiprintf_r+0xfa>
 800cbce:	9207      	str	r2, [sp, #28]
 800cbd0:	e004      	b.n	800cbdc <_svfiprintf_r+0x104>
 800cbd2:	4252      	negs	r2, r2
 800cbd4:	f043 0302 	orr.w	r3, r3, #2
 800cbd8:	9207      	str	r2, [sp, #28]
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	783b      	ldrb	r3, [r7, #0]
 800cbde:	2b2e      	cmp	r3, #46	; 0x2e
 800cbe0:	d10c      	bne.n	800cbfc <_svfiprintf_r+0x124>
 800cbe2:	787b      	ldrb	r3, [r7, #1]
 800cbe4:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe6:	d133      	bne.n	800cc50 <_svfiprintf_r+0x178>
 800cbe8:	9b03      	ldr	r3, [sp, #12]
 800cbea:	1d1a      	adds	r2, r3, #4
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	9203      	str	r2, [sp, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bfb8      	it	lt
 800cbf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbf8:	3702      	adds	r7, #2
 800cbfa:	9305      	str	r3, [sp, #20]
 800cbfc:	4d2e      	ldr	r5, [pc, #184]	; (800ccb8 <_svfiprintf_r+0x1e0>)
 800cbfe:	7839      	ldrb	r1, [r7, #0]
 800cc00:	2203      	movs	r2, #3
 800cc02:	4628      	mov	r0, r5
 800cc04:	f7f3 fb14 	bl	8000230 <memchr>
 800cc08:	b138      	cbz	r0, 800cc1a <_svfiprintf_r+0x142>
 800cc0a:	2340      	movs	r3, #64	; 0x40
 800cc0c:	1b40      	subs	r0, r0, r5
 800cc0e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	4303      	orrs	r3, r0
 800cc16:	3701      	adds	r7, #1
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	7839      	ldrb	r1, [r7, #0]
 800cc1c:	4827      	ldr	r0, [pc, #156]	; (800ccbc <_svfiprintf_r+0x1e4>)
 800cc1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc22:	2206      	movs	r2, #6
 800cc24:	1c7e      	adds	r6, r7, #1
 800cc26:	f7f3 fb03 	bl	8000230 <memchr>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d038      	beq.n	800cca0 <_svfiprintf_r+0x1c8>
 800cc2e:	4b24      	ldr	r3, [pc, #144]	; (800ccc0 <_svfiprintf_r+0x1e8>)
 800cc30:	bb13      	cbnz	r3, 800cc78 <_svfiprintf_r+0x1a0>
 800cc32:	9b03      	ldr	r3, [sp, #12]
 800cc34:	3307      	adds	r3, #7
 800cc36:	f023 0307 	bic.w	r3, r3, #7
 800cc3a:	3308      	adds	r3, #8
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc40:	444b      	add	r3, r9
 800cc42:	9309      	str	r3, [sp, #36]	; 0x24
 800cc44:	e76d      	b.n	800cb22 <_svfiprintf_r+0x4a>
 800cc46:	fb05 3202 	mla	r2, r5, r2, r3
 800cc4a:	2001      	movs	r0, #1
 800cc4c:	460f      	mov	r7, r1
 800cc4e:	e7a6      	b.n	800cb9e <_svfiprintf_r+0xc6>
 800cc50:	2300      	movs	r3, #0
 800cc52:	3701      	adds	r7, #1
 800cc54:	9305      	str	r3, [sp, #20]
 800cc56:	4619      	mov	r1, r3
 800cc58:	250a      	movs	r5, #10
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc60:	3a30      	subs	r2, #48	; 0x30
 800cc62:	2a09      	cmp	r2, #9
 800cc64:	d903      	bls.n	800cc6e <_svfiprintf_r+0x196>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0c8      	beq.n	800cbfc <_svfiprintf_r+0x124>
 800cc6a:	9105      	str	r1, [sp, #20]
 800cc6c:	e7c6      	b.n	800cbfc <_svfiprintf_r+0x124>
 800cc6e:	fb05 2101 	mla	r1, r5, r1, r2
 800cc72:	2301      	movs	r3, #1
 800cc74:	4607      	mov	r7, r0
 800cc76:	e7f0      	b.n	800cc5a <_svfiprintf_r+0x182>
 800cc78:	ab03      	add	r3, sp, #12
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4622      	mov	r2, r4
 800cc7e:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <_svfiprintf_r+0x1ec>)
 800cc80:	a904      	add	r1, sp, #16
 800cc82:	4640      	mov	r0, r8
 800cc84:	f7fc fbc8 	bl	8009418 <_printf_float>
 800cc88:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc8c:	4681      	mov	r9, r0
 800cc8e:	d1d6      	bne.n	800cc3e <_svfiprintf_r+0x166>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	065b      	lsls	r3, r3, #25
 800cc94:	f53f af35 	bmi.w	800cb02 <_svfiprintf_r+0x2a>
 800cc98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc9a:	b01d      	add	sp, #116	; 0x74
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	ab03      	add	r3, sp, #12
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	4622      	mov	r2, r4
 800cca6:	4b07      	ldr	r3, [pc, #28]	; (800ccc4 <_svfiprintf_r+0x1ec>)
 800cca8:	a904      	add	r1, sp, #16
 800ccaa:	4640      	mov	r0, r8
 800ccac:	f7fc fe6a 	bl	8009984 <_printf_i>
 800ccb0:	e7ea      	b.n	800cc88 <_svfiprintf_r+0x1b0>
 800ccb2:	bf00      	nop
 800ccb4:	0800ef64 	.word	0x0800ef64
 800ccb8:	0800ef6a 	.word	0x0800ef6a
 800ccbc:	0800ef6e 	.word	0x0800ef6e
 800ccc0:	08009419 	.word	0x08009419
 800ccc4:	0800ca25 	.word	0x0800ca25

0800ccc8 <_sbrk_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4c06      	ldr	r4, [pc, #24]	; (800cce4 <_sbrk_r+0x1c>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4605      	mov	r5, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	f7f5 ffd0 	bl	8002c78 <_sbrk>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_sbrk_r+0x1a>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_sbrk_r+0x1a>
 800cce0:	602b      	str	r3, [r5, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	20006454 	.word	0x20006454

0800cce8 <strncmp>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	b16a      	cbz	r2, 800cd08 <strncmp+0x20>
 800ccec:	3901      	subs	r1, #1
 800ccee:	1884      	adds	r4, r0, r2
 800ccf0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ccf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d103      	bne.n	800cd04 <strncmp+0x1c>
 800ccfc:	42a0      	cmp	r0, r4
 800ccfe:	d001      	beq.n	800cd04 <strncmp+0x1c>
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1f5      	bne.n	800ccf0 <strncmp+0x8>
 800cd04:	1a98      	subs	r0, r3, r2
 800cd06:	bd10      	pop	{r4, pc}
 800cd08:	4610      	mov	r0, r2
 800cd0a:	e7fc      	b.n	800cd06 <strncmp+0x1e>

0800cd0c <__ascii_wctomb>:
 800cd0c:	b149      	cbz	r1, 800cd22 <__ascii_wctomb+0x16>
 800cd0e:	2aff      	cmp	r2, #255	; 0xff
 800cd10:	bf85      	ittet	hi
 800cd12:	238a      	movhi	r3, #138	; 0x8a
 800cd14:	6003      	strhi	r3, [r0, #0]
 800cd16:	700a      	strbls	r2, [r1, #0]
 800cd18:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd1c:	bf98      	it	ls
 800cd1e:	2001      	movls	r0, #1
 800cd20:	4770      	bx	lr
 800cd22:	4608      	mov	r0, r1
 800cd24:	4770      	bx	lr

0800cd26 <memmove>:
 800cd26:	4288      	cmp	r0, r1
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	eb01 0302 	add.w	r3, r1, r2
 800cd2e:	d807      	bhi.n	800cd40 <memmove+0x1a>
 800cd30:	1e42      	subs	r2, r0, #1
 800cd32:	4299      	cmp	r1, r3
 800cd34:	d00a      	beq.n	800cd4c <memmove+0x26>
 800cd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cd3e:	e7f8      	b.n	800cd32 <memmove+0xc>
 800cd40:	4283      	cmp	r3, r0
 800cd42:	d9f5      	bls.n	800cd30 <memmove+0xa>
 800cd44:	1881      	adds	r1, r0, r2
 800cd46:	1ad2      	subs	r2, r2, r3
 800cd48:	42d3      	cmn	r3, r2
 800cd4a:	d100      	bne.n	800cd4e <memmove+0x28>
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cd56:	e7f7      	b.n	800cd48 <memmove+0x22>

0800cd58 <__malloc_lock>:
 800cd58:	4770      	bx	lr

0800cd5a <__malloc_unlock>:
 800cd5a:	4770      	bx	lr

0800cd5c <_realloc_r>:
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5e:	4607      	mov	r7, r0
 800cd60:	4614      	mov	r4, r2
 800cd62:	460e      	mov	r6, r1
 800cd64:	b921      	cbnz	r1, 800cd70 <_realloc_r+0x14>
 800cd66:	4611      	mov	r1, r2
 800cd68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cd6c:	f7ff be00 	b.w	800c970 <_malloc_r>
 800cd70:	b922      	cbnz	r2, 800cd7c <_realloc_r+0x20>
 800cd72:	f7ff fdaf 	bl	800c8d4 <_free_r>
 800cd76:	4625      	mov	r5, r4
 800cd78:	4628      	mov	r0, r5
 800cd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd7c:	f000 f814 	bl	800cda8 <_malloc_usable_size_r>
 800cd80:	42a0      	cmp	r0, r4
 800cd82:	d20f      	bcs.n	800cda4 <_realloc_r+0x48>
 800cd84:	4621      	mov	r1, r4
 800cd86:	4638      	mov	r0, r7
 800cd88:	f7ff fdf2 	bl	800c970 <_malloc_r>
 800cd8c:	4605      	mov	r5, r0
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d0f2      	beq.n	800cd78 <_realloc_r+0x1c>
 800cd92:	4631      	mov	r1, r6
 800cd94:	4622      	mov	r2, r4
 800cd96:	f7fc fa97 	bl	80092c8 <memcpy>
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4638      	mov	r0, r7
 800cd9e:	f7ff fd99 	bl	800c8d4 <_free_r>
 800cda2:	e7e9      	b.n	800cd78 <_realloc_r+0x1c>
 800cda4:	4635      	mov	r5, r6
 800cda6:	e7e7      	b.n	800cd78 <_realloc_r+0x1c>

0800cda8 <_malloc_usable_size_r>:
 800cda8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdac:	1f18      	subs	r0, r3, #4
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bfbc      	itt	lt
 800cdb2:	580b      	ldrlt	r3, [r1, r0]
 800cdb4:	18c0      	addlt	r0, r0, r3
 800cdb6:	4770      	bx	lr

0800cdb8 <_init>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	bf00      	nop
 800cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdbe:	bc08      	pop	{r3}
 800cdc0:	469e      	mov	lr, r3
 800cdc2:	4770      	bx	lr

0800cdc4 <_fini>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	bf00      	nop
 800cdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdca:	bc08      	pop	{r3}
 800cdcc:	469e      	mov	lr, r3
 800cdce:	4770      	bx	lr
