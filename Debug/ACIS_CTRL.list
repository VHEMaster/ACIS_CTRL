
ACIS_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000143fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036a8  080145e0  080145e0  000245e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c88  08017c88  00032df0  2**0
                  CONTENTS
  4 .ARM          00000008  08017c88  08017c88  00027c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c90  08017c90  00032df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c90  08017c90  00027c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c94  08017c94  00027c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002df0  20000000  08017c98  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d908  20002e00  0801aa88  00032e00  2**5
                  ALLOC
 10 ._user_heap_stack 00000c00  20010708  0801aa88  00040708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032df0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8c8  00000000  00000000  00032e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005e24  00000000  00000000  000616e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  00067510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d00  00000000  00000000  00068da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028cdc  00000000  00000000  0006aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b342  00000000  00000000  0009377c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee4d4  00000000  00000000  000aeabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019cf92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ec  00000000  00000000  0019d010  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ebd8  00000000  00000000  001a29fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002e00 	.word	0x20002e00
 80001fc:	00000000 	.word	0x00000000
 8000200:	080145c4 	.word	0x080145c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002e04 	.word	0x20002e04
 800021c:	080145c4 	.word	0x080145c4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <PK_Copy>:
PACKET_C(PK_PcConnected);
PACKET_C(PK_FuelSwitch);


int16_t PK_Copy(void * dest, void * source)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  if(dest == 0 || source == 0) return -1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <PK_Copy+0x16>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <PK_Copy+0x1c>
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e037      	b.n	8001064 <PK_Copy+0x8c>
  uint8_t * dest_data = (uint8_t*)dest;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	617b      	str	r3, [r7, #20]
  uint8_t * source_data = (uint8_t*)source;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
  int16_t length = dest_data[1];
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	81bb      	strh	r3, [r7, #12]
  if(dest_data[1] != source_data[1] || dest_data[0] != source_data[0] || length == 0 || length > 384) return -2;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	3301      	adds	r3, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d10e      	bne.n	8001032 <PK_Copy+0x5a>
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d108      	bne.n	8001032 <PK_Copy+0x5a>
 8001020:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <PK_Copy+0x5a>
 8001028:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800102c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8001030:	dd02      	ble.n	8001038 <PK_Copy+0x60>
 8001032:	f06f 0301 	mvn.w	r3, #1
 8001036:	e015      	b.n	8001064 <PK_Copy+0x8c>
  for(uint8_t i=2;i<length+2;i++)
 8001038:	2302      	movs	r3, #2
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e00a      	b.n	8001054 <PK_Copy+0x7c>
    *dest_data++ = *source_data++;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	1c53      	adds	r3, r2, #1
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	1c59      	adds	r1, r3, #1
 8001048:	6179      	str	r1, [r7, #20]
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	701a      	strb	r2, [r3, #0]
  for(uint8_t i=2;i<length+2;i++)
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	3301      	adds	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800105a:	3302      	adds	r3, #2
 800105c:	429a      	cmp	r2, r3
 800105e:	dbee      	blt.n	800103e <PK_Copy+0x66>
  return length;
 8001060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <acis_apply_parameter>:
volatile uint8_t StatusTimeout = 0;

static HAL_StatusTypeDef acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length);

static HAL_StatusTypeDef acis_apply_parameter(void * parameter, int size)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b092      	sub	sp, #72	; 0x48
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  uint32_t addr = (uint32_t)parameter;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t config_addr_start = (uint32_t)&acis_config;
 8001084:	4b71      	ldr	r3, [pc, #452]	; (800124c <acis_apply_parameter+0x1dc>)
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t config_addr_end = (uint32_t)&acis_config.tables[0];
 8001088:	4b71      	ldr	r3, [pc, #452]	; (8001250 <acis_apply_parameter+0x1e0>)
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tables_addr_start[TABLE_SETUPS_MAX];
  uint32_t tables_addr_end[TABLE_SETUPS_MAX];
  uint32_t configsize = config_addr_end - config_addr_start;
 800108c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800108e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t tablesize = sizeof(sAcisIgnTable);
 8001094:	f640 436c 	movw	r3, #3180	; 0xc6c
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
 800109e:	e023      	b.n	80010e8 <acis_apply_parameter+0x78>
  {
    tables_addr_start[i] = (uint32_t)&acis_config.tables[i];
 80010a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a2:	f640 426c 	movw	r2, #3180	; 0xc6c
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	33e0      	adds	r3, #224	; 0xe0
 80010ac:	4a67      	ldr	r2, [pc, #412]	; (800124c <acis_apply_parameter+0x1dc>)
 80010ae:	4413      	add	r3, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010ba:	440b      	add	r3, r1
 80010bc:	f843 2c30 	str.w	r2, [r3, #-48]
    tables_addr_end[i] = (uint32_t)&acis_config.tables[i] + sizeof(sAcisIgnTable);
 80010c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c2:	f640 426c 	movw	r2, #3180	; 0xc6c
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	33e0      	adds	r3, #224	; 0xe0
 80010cc:	4a5f      	ldr	r2, [pc, #380]	; (800124c <acis_apply_parameter+0x1dc>)
 80010ce:	4413      	add	r3, r2
 80010d0:	f603 426c 	addw	r2, r3, #3180	; 0xc6c
 80010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010dc:	440b      	add	r3, r1
 80010de:	f843 2c40 	str.w	r2, [r3, #-64]
  for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 80010e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010e4:	3301      	adds	r3, #1
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
 80010e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	ddd8      	ble.n	80010a0 <acis_apply_parameter+0x30>
  }

  if(addr >= config_addr_start && addr < config_addr_end)
 80010ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d33d      	bcc.n	8001172 <acis_apply_parameter+0x102>
 80010f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d239      	bcs.n	8001172 <acis_apply_parameter+0x102>
  {
    PK_ConfigMemoryData.Destination = etrACIS;
 80010fe:	4b55      	ldr	r3, [pc, #340]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001100:	2202      	movs	r2, #2
 8001102:	709a      	strb	r2, [r3, #2]
    PK_ConfigMemoryData.configsize = configsize;
 8001104:	4a53      	ldr	r2, [pc, #332]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001108:	6093      	str	r3, [r2, #8]
    PK_ConfigMemoryData.offset = addr - config_addr_start;
 800110a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800110c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	4a50      	ldr	r2, [pc, #320]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001112:	60d3      	str	r3, [r2, #12]
    PK_ConfigMemoryData.size = sizeof(uint32_t);
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001116:	2204      	movs	r2, #4
 8001118:	611a      	str	r2, [r3, #16]

    memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[PK_ConfigMemoryData.offset], PK_ConfigMemoryData.size);
 800111a:	4b4e      	ldr	r3, [pc, #312]	; (8001254 <acis_apply_parameter+0x1e4>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4a4b      	ldr	r2, [pc, #300]	; (800124c <acis_apply_parameter+0x1dc>)
 8001120:	1899      	adds	r1, r3, r2
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	461a      	mov	r2, r3
 8001128:	484b      	ldr	r0, [pc, #300]	; (8001258 <acis_apply_parameter+0x1e8>)
 800112a:	f00f fca3 	bl	8010a74 <memcpy>
    memset(&PK_ConfigMemoryData.data[PK_ConfigMemoryData.size], 0, sizeof(PK_ConfigMemoryData.data) - PK_ConfigMemoryData.size);
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	3310      	adds	r3, #16
 8001134:	4a47      	ldr	r2, [pc, #284]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001136:	4413      	add	r3, r2
 8001138:	1d98      	adds	r0, r3, #6
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <acis_apply_parameter+0x1e4>)
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	f1c3 03d4 	rsb	r3, r3, #212	; 0xd4
 8001142:	461a      	mov	r2, r3
 8001144:	2100      	movs	r1, #0
 8001146:	f00f fca0 	bl	8010a8a <memset>
    PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 800114a:	21d4      	movs	r1, #212	; 0xd4
 800114c:	4842      	ldr	r0, [pc, #264]	; (8001258 <acis_apply_parameter+0x1e8>)
 800114e:	f006 fb51 	bl	80077f4 <CRC16_Generate>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001158:	829a      	strh	r2, [r3, #20]

    Applying = 1;
 800115a:	4b40      	ldr	r3, [pc, #256]	; (800125c <acis_apply_parameter+0x1ec>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
    protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 8001160:	22ec      	movs	r2, #236	; 0xec
 8001162:	493c      	ldr	r1, [pc, #240]	; (8001254 <acis_apply_parameter+0x1e4>)
 8001164:	483e      	ldr	r0, [pc, #248]	; (8001260 <acis_apply_parameter+0x1f0>)
 8001166:	f009 fce9 	bl	800ab3c <protPushSequence>
    status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001170:	e066      	b.n	8001240 <acis_apply_parameter+0x1d0>
  }
  else
  {
    for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001176:	e060      	b.n	800123a <acis_apply_parameter+0x1ca>
    {
      if(addr >= tables_addr_start[i] && addr < tables_addr_end[i])
 8001178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001180:	4413      	add	r3, r2
 8001182:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001188:	429a      	cmp	r2, r3
 800118a:	d353      	bcc.n	8001234 <acis_apply_parameter+0x1c4>
 800118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001194:	4413      	add	r3, r2
 8001196:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800119a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800119c:	429a      	cmp	r2, r3
 800119e:	d249      	bcs.n	8001234 <acis_apply_parameter+0x1c4>
      {
        PK_TableMemoryData.Destination = etrACIS;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	709a      	strb	r2, [r3, #2]
        PK_TableMemoryData.tablesize = tablesize;
 80011a6:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	60d3      	str	r3, [r2, #12]
        PK_TableMemoryData.table = i;
 80011ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ae:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011b0:	6093      	str	r3, [r2, #8]
        PK_TableMemoryData.offset = addr - tables_addr_start[i];
 80011b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80011ba:	4413      	add	r3, r2
 80011bc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80011c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011c6:	6113      	str	r3, [r2, #16]
        PK_TableMemoryData.size = size;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4a26      	ldr	r2, [pc, #152]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011cc:	6153      	str	r3, [r2, #20]

        memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[i])[PK_TableMemoryData.offset], PK_TableMemoryData.size);
 80011ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d0:	f640 426c 	movw	r2, #3180	; 0xc6c
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	33e0      	adds	r3, #224	; 0xe0
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <acis_apply_parameter+0x1dc>)
 80011dc:	441a      	add	r2, r3
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	18d1      	adds	r1, r2, r3
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	461a      	mov	r2, r3
 80011ea:	481f      	ldr	r0, [pc, #124]	; (8001268 <acis_apply_parameter+0x1f8>)
 80011ec:	f00f fc42 	bl	8010a74 <memcpy>
        memset(&PK_TableMemoryData.data[PK_TableMemoryData.size], 0, sizeof(PK_TableMemoryData.data) - PK_TableMemoryData.size);
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	3318      	adds	r3, #24
 80011f6:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011f8:	4413      	add	r3, r2
 80011fa:	1c98      	adds	r0, r3, #2
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <acis_apply_parameter+0x1f4>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8001204:	461a      	mov	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f00f fc3f 	bl	8010a8a <memset>
        PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 800120c:	21e0      	movs	r1, #224	; 0xe0
 800120e:	4816      	ldr	r0, [pc, #88]	; (8001268 <acis_apply_parameter+0x1f8>)
 8001210:	f006 faf0 	bl	80077f4 <CRC16_Generate>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <acis_apply_parameter+0x1f4>)
 800121a:	831a      	strh	r2, [r3, #24]

        Applying = 1;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <acis_apply_parameter+0x1ec>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
        protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 8001222:	22fc      	movs	r2, #252	; 0xfc
 8001224:	490f      	ldr	r1, [pc, #60]	; (8001264 <acis_apply_parameter+0x1f4>)
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <acis_apply_parameter+0x1f0>)
 8001228:	f009 fc88 	bl	800ab3c <protPushSequence>
        status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        break;
 8001232:	e005      	b.n	8001240 <acis_apply_parameter+0x1d0>
    for(int i = 0; i < TABLE_SETUPS_MAX; i++)
 8001234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001236:	3301      	adds	r3, #1
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800123a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800123c:	2b03      	cmp	r3, #3
 800123e:	dd9b      	ble.n	8001178 <acis_apply_parameter+0x108>
  }

  //if(status != HAL_OK)
    //ApplyError = 1;

  return status;
 8001240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001244:	4618      	mov	r0, r3
 8001246:	3748      	adds	r7, #72	; 0x48
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20002e20 	.word	0x20002e20
 8001250:	20002f00 	.word	0x20002f00
 8001254:	20000200 	.word	0x20000200
 8001258:	20000216 	.word	0x20000216
 800125c:	200068ba 	.word	0x200068ba
 8001260:	20006860 	.word	0x20006860
 8001264:	200000c0 	.word	0x200000c0
 8001268:	200000da 	.word	0x200000da

0800126c <acis_gui_task>:

static void acis_gui_task(void * argument)
{
 800126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001270:	b0c2      	sub	sp, #264	; 0x108
 8001272:	af02      	add	r7, sp, #8
 8001274:	6078      	str	r0, [r7, #4]
  eMenuItem_t eOldMenu = MenuUndefined;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  uint32_t check_last = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  uint32_t display_timeout = Delay_Tick;
 8001282:	4bca      	ldr	r3, [pc, #808]	; (80015ac <acis_gui_task+0x340>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint32_t select_timeout = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  uint32_t last_menu_switch = Delay_Tick;
 8001290:	4bc6      	ldr	r3, [pc, #792]	; (80015ac <acis_gui_task+0x340>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint32_t now;
  uint8_t cnt = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

  int32_t menuitem = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  int32_t menuitem2 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t menufirst2 = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  int32_t stringchar = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint32_t menuselecting = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t menuselected = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t menufirst = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  char tablestring[TABLE_STRING_MAX];
  int16_t tablechars[TABLE_STRING_MAX];
  uint16_t lcd_chars_len = strlen(lcd_chars);
 80012c6:	4bba      	ldr	r3, [pc, #744]	; (80015b0 <acis_gui_task+0x344>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7fe ffa8 	bl	8000220 <strlen>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  const sConfigLinking * tablesetupitem = NULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  const char * tablesetuptitle = NULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  //config_default(&acis_config);

  while(1)
  {
    if(StatusValveNum == 1)
 80012e2:	4bb4      	ldr	r3, [pc, #720]	; (80015b4 <acis_gui_task+0x348>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d10c      	bne.n	8001306 <acis_gui_task+0x9a>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f2:	48b1      	ldr	r0, [pc, #708]	; (80015b8 <acis_gui_task+0x34c>)
 80012f4:	f00a fac8 	bl	800b888 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	48ae      	ldr	r0, [pc, #696]	; (80015b8 <acis_gui_task+0x34c>)
 8001300:	f00a fac2 	bl	800b888 <HAL_GPIO_WritePin>
 8001304:	e01d      	b.n	8001342 <acis_gui_task+0xd6>
    }
    else if(StatusValveNum == 2)
 8001306:	4bab      	ldr	r3, [pc, #684]	; (80015b4 <acis_gui_task+0x348>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d10c      	bne.n	800132a <acis_gui_task+0xbe>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001316:	48a8      	ldr	r0, [pc, #672]	; (80015b8 <acis_gui_task+0x34c>)
 8001318:	f00a fab6 	bl	800b888 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	48a5      	ldr	r0, [pc, #660]	; (80015b8 <acis_gui_task+0x34c>)
 8001324:	f00a fab0 	bl	800b888 <HAL_GPIO_WritePin>
 8001328:	e00b      	b.n	8001342 <acis_gui_task+0xd6>
    }
    else
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001330:	48a1      	ldr	r0, [pc, #644]	; (80015b8 <acis_gui_task+0x34c>)
 8001332:	f00a faa9 	bl	800b888 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133c:	489e      	ldr	r0, [pc, #632]	; (80015b8 <acis_gui_task+0x34c>)
 800133e:	f00a faa3 	bl	800b888 <HAL_GPIO_WritePin>
    }

    if(DragStatus == 1)
 8001342:	4b9e      	ldr	r3, [pc, #632]	; (80015bc <acis_gui_task+0x350>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b01      	cmp	r3, #1
 800134a:	d13e      	bne.n	80013ca <acis_gui_task+0x15e>
    {
      if(DelayDiff(now, check_last) < 400000)
 800134c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001350:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001354:	f006 fb48 	bl	80079e8 <DelayDiff>
 8001358:	4602      	mov	r2, r0
 800135a:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <acis_gui_task+0x354>)
 800135c:	429a      	cmp	r2, r3
 800135e:	d80c      	bhi.n	800137a <acis_gui_task+0x10e>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	4894      	ldr	r0, [pc, #592]	; (80015b8 <acis_gui_task+0x34c>)
 8001368:	f00a fa8e 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001372:	4891      	ldr	r0, [pc, #580]	; (80015b8 <acis_gui_task+0x34c>)
 8001374:	f00a fa88 	bl	800b888 <HAL_GPIO_WritePin>
 8001378:	e140      	b.n	80015fc <acis_gui_task+0x390>
      }
      else if(DelayDiff(now, check_last) < 800000)
 800137a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800137e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001382:	f006 fb31 	bl	80079e8 <DelayDiff>
 8001386:	4602      	mov	r2, r0
 8001388:	4b8e      	ldr	r3, [pc, #568]	; (80015c4 <acis_gui_task+0x358>)
 800138a:	429a      	cmp	r2, r3
 800138c:	d80c      	bhi.n	80013a8 <acis_gui_task+0x13c>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001394:	4888      	ldr	r0, [pc, #544]	; (80015b8 <acis_gui_task+0x34c>)
 8001396:	f00a fa77 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	4885      	ldr	r0, [pc, #532]	; (80015b8 <acis_gui_task+0x34c>)
 80013a2:	f00a fa71 	bl	800b888 <HAL_GPIO_WritePin>
 80013a6:	e129      	b.n	80015fc <acis_gui_task+0x390>
      }
      else
      {
        check_last = now;
 80013a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	4880      	ldr	r0, [pc, #512]	; (80015b8 <acis_gui_task+0x34c>)
 80013b8:	f00a fa66 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c2:	487d      	ldr	r0, [pc, #500]	; (80015b8 <acis_gui_task+0x34c>)
 80013c4:	f00a fa60 	bl	800b888 <HAL_GPIO_WritePin>
 80013c8:	e118      	b.n	80015fc <acis_gui_task+0x390>
      }
    }
    else if(DragStatus == 2)
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <acis_gui_task+0x350>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d13e      	bne.n	8001452 <acis_gui_task+0x1e6>
    {
      if(DelayDiff(now, check_last) < 200000)
 80013d4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80013d8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80013dc:	f006 fb04 	bl	80079e8 <DelayDiff>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <acis_gui_task+0x35c>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d80c      	bhi.n	8001402 <acis_gui_task+0x196>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	4872      	ldr	r0, [pc, #456]	; (80015b8 <acis_gui_task+0x34c>)
 80013f0:	f00a fa4a 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	486f      	ldr	r0, [pc, #444]	; (80015b8 <acis_gui_task+0x34c>)
 80013fc:	f00a fa44 	bl	800b888 <HAL_GPIO_WritePin>
 8001400:	e0fc      	b.n	80015fc <acis_gui_task+0x390>
      }
      else if(DelayDiff(now, check_last) < 400000)
 8001402:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001406:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800140a:	f006 faed 	bl	80079e8 <DelayDiff>
 800140e:	4602      	mov	r2, r0
 8001410:	4b6b      	ldr	r3, [pc, #428]	; (80015c0 <acis_gui_task+0x354>)
 8001412:	429a      	cmp	r2, r3
 8001414:	d80c      	bhi.n	8001430 <acis_gui_task+0x1c4>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	4866      	ldr	r0, [pc, #408]	; (80015b8 <acis_gui_task+0x34c>)
 800141e:	f00a fa33 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001428:	4863      	ldr	r0, [pc, #396]	; (80015b8 <acis_gui_task+0x34c>)
 800142a:	f00a fa2d 	bl	800b888 <HAL_GPIO_WritePin>
 800142e:	e0e5      	b.n	80015fc <acis_gui_task+0x390>
      }
      else
      {
        check_last = now;
 8001430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	485e      	ldr	r0, [pc, #376]	; (80015b8 <acis_gui_task+0x34c>)
 8001440:	f00a fa22 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144a:	485b      	ldr	r0, [pc, #364]	; (80015b8 <acis_gui_task+0x34c>)
 800144c:	f00a fa1c 	bl	800b888 <HAL_GPIO_WritePin>
 8001450:	e0d4      	b.n	80015fc <acis_gui_task+0x390>
      }
    }
    else if(DragStatus == 3)
 8001452:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <acis_gui_task+0x350>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b03      	cmp	r3, #3
 800145a:	d10c      	bne.n	8001476 <acis_gui_task+0x20a>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	4855      	ldr	r0, [pc, #340]	; (80015b8 <acis_gui_task+0x34c>)
 8001464:	f00a fa10 	bl	800b888 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146e:	4852      	ldr	r0, [pc, #328]	; (80015b8 <acis_gui_task+0x34c>)
 8001470:	f00a fa0a 	bl	800b888 <HAL_GPIO_WritePin>
 8001474:	e0c2      	b.n	80015fc <acis_gui_task+0x390>
    }
    else if(DragStatus == 4)
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <acis_gui_task+0x350>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b04      	cmp	r3, #4
 800147e:	d10c      	bne.n	800149a <acis_gui_task+0x22e>
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001486:	484c      	ldr	r0, [pc, #304]	; (80015b8 <acis_gui_task+0x34c>)
 8001488:	f00a f9fe 	bl	800b888 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001492:	4849      	ldr	r0, [pc, #292]	; (80015b8 <acis_gui_task+0x34c>)
 8001494:	f00a f9f8 	bl	800b888 <HAL_GPIO_WritePin>
 8001498:	e0b0      	b.n	80015fc <acis_gui_task+0x390>
    }
    else if(StatusCheck)
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <acis_gui_task+0x360>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d03e      	beq.n	8001522 <acis_gui_task+0x2b6>
    {
      if(DelayDiff(now, check_last) < 1000000)
 80014a4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80014a8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80014ac:	f006 fa9c 	bl	80079e8 <DelayDiff>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <acis_gui_task+0x364>)
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d80c      	bhi.n	80014d2 <acis_gui_task+0x266>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014be:	483e      	ldr	r0, [pc, #248]	; (80015b8 <acis_gui_task+0x34c>)
 80014c0:	f00a f9e2 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	483b      	ldr	r0, [pc, #236]	; (80015b8 <acis_gui_task+0x34c>)
 80014cc:	f00a f9dc 	bl	800b888 <HAL_GPIO_WritePin>
 80014d0:	e094      	b.n	80015fc <acis_gui_task+0x390>
      }
      else if(DelayDiff(now, check_last) < 2000000)
 80014d2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80014d6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80014da:	f006 fa85 	bl	80079e8 <DelayDiff>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <acis_gui_task+0x368>)
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d80c      	bhi.n	8001500 <acis_gui_task+0x294>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ec:	4832      	ldr	r0, [pc, #200]	; (80015b8 <acis_gui_task+0x34c>)
 80014ee:	f00a f9cb 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f8:	482f      	ldr	r0, [pc, #188]	; (80015b8 <acis_gui_task+0x34c>)
 80014fa:	f00a f9c5 	bl	800b888 <HAL_GPIO_WritePin>
 80014fe:	e07d      	b.n	80015fc <acis_gui_task+0x390>
      }
      else
      {
        check_last = now;
 8001500:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150e:	482a      	ldr	r0, [pc, #168]	; (80015b8 <acis_gui_task+0x34c>)
 8001510:	f00a f9ba 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151a:	4827      	ldr	r0, [pc, #156]	; (80015b8 <acis_gui_task+0x34c>)
 800151c:	f00a f9b4 	bl	800b888 <HAL_GPIO_WritePin>
 8001520:	e06c      	b.n	80015fc <acis_gui_task+0x390>
      }
    }
    else if(!StatusSynchronized)
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <acis_gui_task+0x36c>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d157      	bne.n	80015dc <acis_gui_task+0x370>
    {
      if(DelayDiff(now, check_last) < 1000000)
 800152c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001530:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001534:	f006 fa58 	bl	80079e8 <DelayDiff>
 8001538:	4602      	mov	r2, r0
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <acis_gui_task+0x364>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d80c      	bhi.n	800155a <acis_gui_task+0x2ee>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	481c      	ldr	r0, [pc, #112]	; (80015b8 <acis_gui_task+0x34c>)
 8001548:	f00a f99e 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001552:	4819      	ldr	r0, [pc, #100]	; (80015b8 <acis_gui_task+0x34c>)
 8001554:	f00a f998 	bl	800b888 <HAL_GPIO_WritePin>
 8001558:	e050      	b.n	80015fc <acis_gui_task+0x390>
      }
      else if(DelayDiff(now, check_last) < 2000000)
 800155a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800155e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001562:	f006 fa41 	bl	80079e8 <DelayDiff>
 8001566:	4602      	mov	r2, r0
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <acis_gui_task+0x368>)
 800156a:	429a      	cmp	r2, r3
 800156c:	d80c      	bhi.n	8001588 <acis_gui_task+0x31c>
      {
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <acis_gui_task+0x34c>)
 8001576:	f00a f987 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <acis_gui_task+0x34c>)
 8001582:	f00a f981 	bl	800b888 <HAL_GPIO_WritePin>
 8001586:	e039      	b.n	80015fc <acis_gui_task+0x390>
      }
      else
      {
        check_last = now;
 8001588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800158c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001596:	4808      	ldr	r0, [pc, #32]	; (80015b8 <acis_gui_task+0x34c>)
 8001598:	f00a f976 	bl	800b888 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <acis_gui_task+0x34c>)
 80015a4:	f00a f970 	bl	800b888 <HAL_GPIO_WritePin>
 80015a8:	e028      	b.n	80015fc <acis_gui_task+0x390>
 80015aa:	bf00      	nop
 80015ac:	40000c00 	.word	0x40000c00
 80015b0:	200003d0 	.word	0x200003d0
 80015b4:	2000689c 	.word	0x2000689c
 80015b8:	40020400 	.word	0x40020400
 80015bc:	200068c4 	.word	0x200068c4
 80015c0:	00061a7f 	.word	0x00061a7f
 80015c4:	000c34ff 	.word	0x000c34ff
 80015c8:	00030d3f 	.word	0x00030d3f
 80015cc:	2000689d 	.word	0x2000689d
 80015d0:	000f423f 	.word	0x000f423f
 80015d4:	001e847f 	.word	0x001e847f
 80015d8:	2000689e 	.word	0x2000689e
      }
    }
    else
    {
      HAL_GPIO_WritePin(LED1R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e2:	48b2      	ldr	r0, [pc, #712]	; (80018ac <acis_gui_task+0x640>)
 80015e4:	f00a f950 	bl	800b888 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED1G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ee:	48af      	ldr	r0, [pc, #700]	; (80018ac <acis_gui_task+0x640>)
 80015f0:	f00a f94a 	bl	800b888 <HAL_GPIO_WritePin>
      check_last = now;
 80015f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }

    now = Delay_Tick;
 80015fc:	4bac      	ldr	r3, [pc, #688]	; (80018b0 <acis_gui_task+0x644>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    if(BUT_CANCEL_PRESS && BUT_CANCEL_TIME >= 1000 && eMenuItem > MenuMain)
 8001604:	4bab      	ldr	r3, [pc, #684]	; (80018b4 <acis_gui_task+0x648>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00f      	beq.n	800162e <acis_gui_task+0x3c2>
 800160e:	4baa      	ldr	r3, [pc, #680]	; (80018b8 <acis_gui_task+0x64c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001616:	d30a      	bcc.n	800162e <acis_gui_task+0x3c2>
 8001618:	4ba8      	ldr	r3, [pc, #672]	; (80018bc <acis_gui_task+0x650>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b04      	cmp	r3, #4
 8001620:	d905      	bls.n	800162e <acis_gui_task+0x3c2>
    {
      BUT_CANCEL_TIME = 0;
 8001622:	4ba5      	ldr	r3, [pc, #660]	; (80018b8 <acis_gui_task+0x64c>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
      eMenuItem = MenuMain;
 8001628:	4ba4      	ldr	r3, [pc, #656]	; (80018bc <acis_gui_task+0x650>)
 800162a:	2204      	movs	r2, #4
 800162c:	701a      	strb	r2, [r3, #0]
    }

    if(StatusPcConnected)
 800162e:	4ba4      	ldr	r3, [pc, #656]	; (80018c0 <acis_gui_task+0x654>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <acis_gui_task+0x3d4>
    {
      eMenuItem = MenuPcConnected;
 8001638:	4ba0      	ldr	r3, [pc, #640]	; (80018bc <acis_gui_task+0x650>)
 800163a:	2203      	movs	r2, #3
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e030      	b.n	80016a2 <acis_gui_task+0x436>
    }
    else if(StatusSynchronizing)
 8001640:	4ba0      	ldr	r3, [pc, #640]	; (80018c4 <acis_gui_task+0x658>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <acis_gui_task+0x3e6>
    {
      eMenuItem = MenuSynchronizing;
 800164a:	4b9c      	ldr	r3, [pc, #624]	; (80018bc <acis_gui_task+0x650>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e027      	b.n	80016a2 <acis_gui_task+0x436>
    }
    else
    {
      if(SyncError)
 8001652:	4b9d      	ldr	r3, [pc, #628]	; (80018c8 <acis_gui_task+0x65c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <acis_gui_task+0x3fe>
      {
        eMenuItem = MenuSyncError;
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <acis_gui_task+0x650>)
 800165e:	2202      	movs	r2, #2
 8001660:	701a      	strb	r2, [r3, #0]
        SyncError = 0;
 8001662:	4b99      	ldr	r3, [pc, #612]	; (80018c8 <acis_gui_task+0x65c>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e007      	b.n	800167a <acis_gui_task+0x40e>
      }
      else if(eMenuItem == MenuSynchronizing)
 800166a:	4b94      	ldr	r3, [pc, #592]	; (80018bc <acis_gui_task+0x650>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <acis_gui_task+0x40e>
        eMenuItem = MenuMain;
 8001674:	4b91      	ldr	r3, [pc, #580]	; (80018bc <acis_gui_task+0x650>)
 8001676:	2204      	movs	r2, #4
 8001678:	701a      	strb	r2, [r3, #0]

      if(eMenuItem == MenuPcConnected)
 800167a:	4b90      	ldr	r3, [pc, #576]	; (80018bc <acis_gui_task+0x650>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b03      	cmp	r3, #3
 8001682:	d10e      	bne.n	80016a2 <acis_gui_task+0x436>
      {
        eMenuItem = MenuSynchronizing;
 8001684:	4b8d      	ldr	r3, [pc, #564]	; (80018bc <acis_gui_task+0x650>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
        StatusSynchronizing = 1;
 800168a:	4b8e      	ldr	r3, [pc, #568]	; (80018c4 <acis_gui_task+0x658>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
        SyncStep = 0;
 8001690:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <acis_gui_task+0x660>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
        SyncError = 0;
 8001696:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <acis_gui_task+0x65c>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
        SyncSize = 0;
 800169c:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <acis_gui_task+0x664>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
      }
    }

    if(eMenuItem != eOldMenu && eOldMenu < MenuMainLast && eMenuItem < MenuTableSetup)
 80016a2:	4b86      	ldr	r3, [pc, #536]	; (80018bc <acis_gui_task+0x650>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d040      	beq.n	8001732 <acis_gui_task+0x4c6>
 80016b0:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d83c      	bhi.n	8001732 <acis_gui_task+0x4c6>
 80016b8:	4b80      	ldr	r3, [pc, #512]	; (80018bc <acis_gui_task+0x650>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d837      	bhi.n	8001732 <acis_gui_task+0x4c6>
    {
      last_menu_switch = now;
 80016c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      display_timeout = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      BUT_UP = 0;
 80016d0:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <acis_gui_task+0x668>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
      BUT_DOWN = 0;
 80016d6:	4b80      	ldr	r3, [pc, #512]	; (80018d8 <acis_gui_task+0x66c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
      BUT_LEFT = 0;
 80016dc:	4b7f      	ldr	r3, [pc, #508]	; (80018dc <acis_gui_task+0x670>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
      BUT_RIGHT = 0;
 80016e2:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <acis_gui_task+0x674>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
      BUT_ENTER = 0;
 80016e8:	4b7e      	ldr	r3, [pc, #504]	; (80018e4 <acis_gui_task+0x678>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
      BUT_CANCEL = 0;
 80016ee:	4b7e      	ldr	r3, [pc, #504]	; (80018e8 <acis_gui_task+0x67c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
      BUT_UP_TIME = 0;
 80016f4:	4b7d      	ldr	r3, [pc, #500]	; (80018ec <acis_gui_task+0x680>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
      BUT_DOWN_TIME = 0;
 80016fa:	4b7d      	ldr	r3, [pc, #500]	; (80018f0 <acis_gui_task+0x684>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
      BUT_LEFT_TIME = 0;
 8001700:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <acis_gui_task+0x688>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
      BUT_RIGHT_TIME = 0;
 8001706:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <acis_gui_task+0x68c>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
      BUT_ENTER_TIME = 0;
 800170c:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <acis_gui_task+0x690>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
      BUT_CANCEL_TIME = 0;
 8001712:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <acis_gui_task+0x64c>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
      menuselecting = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      menufirst = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      menuitem = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      DragStatus = 0;
 800172a:	4b75      	ldr	r3, [pc, #468]	; (8001900 <acis_gui_task+0x694>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e002      	b.n	8001738 <acis_gui_task+0x4cc>
    }
    else
    {
      Delay(1);
 8001732:	200a      	movs	r0, #10
 8001734:	f00b fe96 	bl	800d464 <osDelay>
    }
    StatusSynchronized = 1;
 8001738:	4b72      	ldr	r3, [pc, #456]	; (8001904 <acis_gui_task+0x698>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
    eOldMenu = eMenuItem;
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <acis_gui_task+0x650>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

    switch (eMenuItem)
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <acis_gui_task+0x650>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	2b11      	cmp	r3, #17
 8001750:	f204 8444 	bhi.w	8005fdc <acis_gui_task+0x4d70>
 8001754:	a201      	add	r2, pc, #4	; (adr r2, 800175c <acis_gui_task+0x4f0>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	08005e69 	.word	0x08005e69
 8001760:	08005f65 	.word	0x08005f65
 8001764:	08005e03 	.word	0x08005e03
 8001768:	080017a5 	.word	0x080017a5
 800176c:	080019ad 	.word	0x080019ad
 8001770:	080023ff 	.word	0x080023ff
 8001774:	08002e01 	.word	0x08002e01
 8001778:	08003837 	.word	0x08003837
 800177c:	08004b87 	.word	0x08004b87
 8001780:	08005fdd 	.word	0x08005fdd
 8001784:	08004fa1 	.word	0x08004fa1
 8001788:	08004fa1 	.word	0x08004fa1
 800178c:	08005fdd 	.word	0x08005fdd
 8001790:	08004fa1 	.word	0x08004fa1
 8001794:	08004fa1 	.word	0x08004fa1
 8001798:	08004fa1 	.word	0x08004fa1
 800179c:	08004fa1 	.word	0x08004fa1
 80017a0:	08004fa1 	.word	0x08004fa1
    {
      case MenuMain :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 80017a4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80017a8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80017ac:	f006 f91c 	bl	80079e8 <DelayDiff>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b55      	ldr	r3, [pc, #340]	; (8001908 <acis_gui_task+0x69c>)
 80017b4:	429a      	cmp	r2, r3
 80017b6:	f240 80da 	bls.w	800196e <acis_gui_task+0x702>
        {
          display_timeout = now;
 80017ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80017be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 80017c2:	f006 fa41 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80017c6:	2301      	movs	r3, #1
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	2100      	movs	r1, #0
 80017d0:	2000      	movs	r0, #0
 80017d2:	f006 fb24 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_12x16);
 80017d6:	484d      	ldr	r0, [pc, #308]	; (800190c <acis_gui_task+0x6a0>)
 80017d8:	f00d fe58 	bl	800f48c <font_setFont>
          font_printf(4,4,"RPM:");
 80017dc:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <acis_gui_task+0x6a4>)
 80017de:	2104      	movs	r1, #4
 80017e0:	2004      	movs	r0, #4
 80017e2:	f00f f875 	bl	80108d0 <font_printf>
          font_printf(-125,4,"%03.0f",StatusRPM);
 80017e6:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <acis_gui_task+0x6a8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fed4 	bl	8000598 <__aeabi_f2d>
 80017f0:	4603      	mov	r3, r0
 80017f2:	460c      	mov	r4, r1
 80017f4:	e9cd 3400 	strd	r3, r4, [sp]
 80017f8:	4a47      	ldr	r2, [pc, #284]	; (8001918 <acis_gui_task+0x6ac>)
 80017fa:	2104      	movs	r1, #4
 80017fc:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001800:	f00f f866 	bl	80108d0 <font_printf>
          font_printf(4,4+font_getHeight(),"Load:");
 8001804:	f00d fde8 	bl	800f3d8 <font_getHeight>
 8001808:	4603      	mov	r3, r0
 800180a:	3304      	adds	r3, #4
 800180c:	4a43      	ldr	r2, [pc, #268]	; (800191c <acis_gui_task+0x6b0>)
 800180e:	4619      	mov	r1, r3
 8001810:	2004      	movs	r0, #4
 8001812:	f00f f85d 	bl	80108d0 <font_printf>
          font_printf(-125,4+font_getHeight(),"%02.0f%%", StatusLoad);
 8001816:	f00d fddf 	bl	800f3d8 <font_getHeight>
 800181a:	4603      	mov	r3, r0
 800181c:	1d1d      	adds	r5, r3, #4
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <acis_gui_task+0x6b4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe feb8 	bl	8000598 <__aeabi_f2d>
 8001828:	4603      	mov	r3, r0
 800182a:	460c      	mov	r4, r1
 800182c:	e9cd 3400 	strd	r3, r4, [sp]
 8001830:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <acis_gui_task+0x6b8>)
 8001832:	4629      	mov	r1, r5
 8001834:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001838:	f00f f84a 	bl	80108d0 <font_printf>
          font_printf(4,4+font_getHeight()*2,"Ign:");
 800183c:	f00d fdcc 	bl	800f3d8 <font_getHeight>
 8001840:	4603      	mov	r3, r0
 8001842:	3302      	adds	r3, #2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4a38      	ldr	r2, [pc, #224]	; (8001928 <acis_gui_task+0x6bc>)
 8001848:	4619      	mov	r1, r3
 800184a:	2004      	movs	r0, #4
 800184c:	f00f f840 	bl	80108d0 <font_printf>
          font_printf(-125,4+font_getHeight()*2,"%3.0fd", StatusIgnition);
 8001850:	f00d fdc2 	bl	800f3d8 <font_getHeight>
 8001854:	4603      	mov	r3, r0
 8001856:	3302      	adds	r3, #2
 8001858:	005d      	lsls	r5, r3, #1
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <acis_gui_task+0x6c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe9a 	bl	8000598 <__aeabi_f2d>
 8001864:	4603      	mov	r3, r0
 8001866:	460c      	mov	r4, r1
 8001868:	e9cd 3400 	strd	r3, r4, [sp]
 800186c:	4a30      	ldr	r2, [pc, #192]	; (8001930 <acis_gui_task+0x6c4>)
 800186e:	4629      	mov	r1, r5
 8001870:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001874:	f00f f82c 	bl	80108d0 <font_printf>
          font_setFont(&rre_5x8);
 8001878:	482e      	ldr	r0, [pc, #184]	; (8001934 <acis_gui_task+0x6c8>)
 800187a:	f00d fe07 	bl	800f48c <font_setFont>
          font_printf(4,53,"%d: %-11s", StatusTableNum+1, StatusTableName);
 800187e:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <acis_gui_task+0x6cc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <acis_gui_task+0x6d0>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <acis_gui_task+0x6d4>)
 800188c:	2135      	movs	r1, #53	; 0x35
 800188e:	2004      	movs	r0, #4
 8001890:	f00f f81e 	bl	80108d0 <font_printf>

          if(StatusTimeout)
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <acis_gui_task+0x6d8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d056      	beq.n	800194c <acis_gui_task+0x6e0>
            font_printf(-125,53,"Timeout!");
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <acis_gui_task+0x6dc>)
 80018a0:	2135      	movs	r1, #53	; 0x35
 80018a2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80018a6:	f00f f813 	bl	80108d0 <font_printf>
 80018aa:	e05e      	b.n	800196a <acis_gui_task+0x6fe>
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40000c00 	.word	0x40000c00
 80018b4:	200068e5 	.word	0x200068e5
 80018b8:	200068fc 	.word	0x200068fc
 80018bc:	2000687c 	.word	0x2000687c
 80018c0:	200068a4 	.word	0x200068a4
 80018c4:	2000689f 	.word	0x2000689f
 80018c8:	200068b8 	.word	0x200068b8
 80018cc:	200068a7 	.word	0x200068a7
 80018d0:	200068ac 	.word	0x200068ac
 80018d4:	20006902 	.word	0x20006902
 80018d8:	20006903 	.word	0x20006903
 80018dc:	20006900 	.word	0x20006900
 80018e0:	20006901 	.word	0x20006901
 80018e4:	20006904 	.word	0x20006904
 80018e8:	20006905 	.word	0x20006905
 80018ec:	200068f0 	.word	0x200068f0
 80018f0:	200068f4 	.word	0x200068f4
 80018f4:	200068e8 	.word	0x200068e8
 80018f8:	200068ec 	.word	0x200068ec
 80018fc:	200068f8 	.word	0x200068f8
 8001900:	200068c4 	.word	0x200068c4
 8001904:	2000689e 	.word	0x2000689e
 8001908:	000249f0 	.word	0x000249f0
 800190c:	20002bc0 	.word	0x20002bc0
 8001910:	080148f0 	.word	0x080148f0
 8001914:	20006880 	.word	0x20006880
 8001918:	080148f8 	.word	0x080148f8
 800191c:	08014900 	.word	0x08014900
 8001920:	20006884 	.word	0x20006884
 8001924:	08014908 	.word	0x08014908
 8001928:	08014914 	.word	0x08014914
 800192c:	2000688c 	.word	0x2000688c
 8001930:	0801491c 	.word	0x0801491c
 8001934:	20002bd0 	.word	0x20002bd0
 8001938:	20006898 	.word	0x20006898
 800193c:	200068cc 	.word	0x200068cc
 8001940:	08014924 	.word	0x08014924
 8001944:	200068d8 	.word	0x200068d8
 8001948:	08014930 	.word	0x08014930
          else
            font_printf(-125,53,"%4.1fV",StatusVoltage);
 800194c:	4bc4      	ldr	r3, [pc, #784]	; (8001c60 <acis_gui_task+0x9f4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe21 	bl	8000598 <__aeabi_f2d>
 8001956:	4603      	mov	r3, r0
 8001958:	460c      	mov	r4, r1
 800195a:	e9cd 3400 	strd	r3, r4, [sp]
 800195e:	4ac1      	ldr	r2, [pc, #772]	; (8001c64 <acis_gui_task+0x9f8>)
 8001960:	2135      	movs	r1, #53	; 0x35
 8001962:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001966:	f00e ffb3 	bl	80108d0 <font_printf>

          lcd_update();
 800196a:	f006 f8e1 	bl	8007b30 <lcd_update>
        }
        if(BUT_RIGHT) BUT_RIGHT = 0, eMenuItem++;
 800196e:	4bbe      	ldr	r3, [pc, #760]	; (8001c68 <acis_gui_task+0x9fc>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <acis_gui_task+0x724>
 8001978:	4bbb      	ldr	r3, [pc, #748]	; (8001c68 <acis_gui_task+0x9fc>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	4bbb      	ldr	r3, [pc, #748]	; (8001c6c <acis_gui_task+0xa00>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3301      	adds	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4bb8      	ldr	r3, [pc, #736]	; (8001c6c <acis_gui_task+0xa00>)
 800198a:	701a      	strb	r2, [r3, #0]
        else if(BUT_LEFT) BUT_LEFT = 0, eMenuItem = MenuMainLast - 1;
        break;
 800198c:	f004 bb2a 	b.w	8005fe4 <acis_gui_task+0x4d78>
        else if(BUT_LEFT) BUT_LEFT = 0, eMenuItem = MenuMainLast - 1;
 8001990:	4bb7      	ldr	r3, [pc, #732]	; (8001c70 <acis_gui_task+0xa04>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	f004 8324 	beq.w	8005fe4 <acis_gui_task+0x4d78>
 800199c:	4bb4      	ldr	r3, [pc, #720]	; (8001c70 <acis_gui_task+0xa04>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	4bb2      	ldr	r3, [pc, #712]	; (8001c6c <acis_gui_task+0xa00>)
 80019a4:	2209      	movs	r2, #9
 80019a6:	701a      	strb	r2, [r3, #0]
        break;
 80019a8:	f004 bb1c 	b.w	8005fe4 <acis_gui_task+0x4d78>
      }

      case MenuMainDrag :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 80019ac:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80019b0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80019b4:	f006 f818 	bl	80079e8 <DelayDiff>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4bae      	ldr	r3, [pc, #696]	; (8001c74 <acis_gui_task+0xa08>)
 80019bc:	429a      	cmp	r2, r3
 80019be:	f240 81aa 	bls.w	8001d16 <acis_gui_task+0xaaa>
        {
          display_timeout = now;
 80019c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80019c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 80019ca:	f006 f93d 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 80019ce:	2301      	movs	r3, #1
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f006 fa20 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_8x12);
 80019de:	48a6      	ldr	r0, [pc, #664]	; (8001c78 <acis_gui_task+0xa0c>)
 80019e0:	f00d fd54 	bl	800f48c <font_setFont>
          font_printf(0,2,"Drag Measure");
 80019e4:	4aa5      	ldr	r2, [pc, #660]	; (8001c7c <acis_gui_task+0xa10>)
 80019e6:	2102      	movs	r1, #2
 80019e8:	2000      	movs	r0, #0
 80019ea:	f00e ff71 	bl	80108d0 <font_printf>
          lcd_rect(0,15,128,1,1);
 80019ee:	2301      	movs	r3, #1
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	210f      	movs	r1, #15
 80019f8:	2000      	movs	r0, #0
 80019fa:	f006 fa10 	bl	8007e1e <lcd_rect>

          font_setFont(&rre_5x8);
 80019fe:	48a0      	ldr	r0, [pc, #640]	; (8001c80 <acis_gui_task+0xa14>)
 8001a00:	f00d fd44 	bl	800f48c <font_setFont>
          for(int i = 0; i < sizeof(DragConfig) / sizeof(sConfigLinking); i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a0a:	e0fe      	b.n	8001c0a <acis_gui_task+0x99e>
          {

            font_printf(3,18 + font_getHeight()*i,"%s:", DragConfig[i].name);
 8001a0c:	f00d fce4 	bl	800f3d8 <font_getHeight>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a16:	fb03 f302 	mul.w	r3, r3, r2
 8001a1a:	f103 0012 	add.w	r0, r3, #18
 8001a1e:	4999      	ldr	r1, [pc, #612]	; (8001c84 <acis_gui_task+0xa18>)
 8001a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a95      	ldr	r2, [pc, #596]	; (8001c88 <acis_gui_task+0xa1c>)
 8001a32:	4601      	mov	r1, r0
 8001a34:	2003      	movs	r0, #3
 8001a36:	f00e ff4b 	bl	80108d0 <font_printf>
            if(DragConfig[i].valuef)
 8001a3a:	4992      	ldr	r1, [pc, #584]	; (8001c84 <acis_gui_task+0xa18>)
 8001a3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	440b      	add	r3, r1
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d06c      	beq.n	8001b2c <acis_gui_task+0x8c0>
            {
              if((!menuselecting || menuitem != i))
 8001a52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <acis_gui_task+0x7fa>
 8001a5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d021      	beq.n	8001aaa <acis_gui_task+0x83e>
                font_printf(-125,18 + font_getHeight()*i,"%03.0f", *DragConfig[i].valuef);
 8001a66:	f00d fcb7 	bl	800f3d8 <font_getHeight>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a70:	fb03 f302 	mul.w	r3, r3, r2
 8001a74:	f103 0512 	add.w	r5, r3, #18
 8001a78:	4982      	ldr	r1, [pc, #520]	; (8001c84 <acis_gui_task+0xa18>)
 8001a7a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	440b      	add	r3, r1
 8001a88:	330c      	adds	r3, #12
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd82 	bl	8000598 <__aeabi_f2d>
 8001a94:	4603      	mov	r3, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	e9cd 3400 	strd	r3, r4, [sp]
 8001a9c:	4a7b      	ldr	r2, [pc, #492]	; (8001c8c <acis_gui_task+0xa20>)
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001aa4:	f00e ff14 	bl	80108d0 <font_printf>
 8001aa8:	e0aa      	b.n	8001c00 <acis_gui_task+0x994>
              else if(menuitem == i && DelayDiff(now, select_timeout) < 500000)
 8001aaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d12b      	bne.n	8001b0e <acis_gui_task+0x8a2>
 8001ab6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001aba:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001abe:	f005 ff93 	bl	80079e8 <DelayDiff>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <acis_gui_task+0xa24>)
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d821      	bhi.n	8001b0e <acis_gui_task+0x8a2>
                font_printf(-125,18 + font_getHeight()*i,"> %03.0f", *DragConfig[i].valuef);
 8001aca:	f00d fc85 	bl	800f3d8 <font_getHeight>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ad4:	fb03 f302 	mul.w	r3, r3, r2
 8001ad8:	f103 0512 	add.w	r5, r3, #18
 8001adc:	4969      	ldr	r1, [pc, #420]	; (8001c84 <acis_gui_task+0xa18>)
 8001ade:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	440b      	add	r3, r1
 8001aec:	330c      	adds	r3, #12
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd50 	bl	8000598 <__aeabi_f2d>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	e9cd 3400 	strd	r3, r4, [sp]
 8001b00:	4a64      	ldr	r2, [pc, #400]	; (8001c94 <acis_gui_task+0xa28>)
 8001b02:	4629      	mov	r1, r5
 8001b04:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001b08:	f00e fee2 	bl	80108d0 <font_printf>
 8001b0c:	e078      	b.n	8001c00 <acis_gui_task+0x994>
              else if(DelayDiff(now, select_timeout) > 800000)
 8001b0e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001b12:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001b16:	f005 ff67 	bl	80079e8 <DelayDiff>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <acis_gui_task+0xa2c>)
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d96e      	bls.n	8001c00 <acis_gui_task+0x994>
                select_timeout = now;
 8001b22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001b2a:	e069      	b.n	8001c00 <acis_gui_task+0x994>
            }
            else if(DragConfig[i].valuei)
 8001b2c:	4955      	ldr	r1, [pc, #340]	; (8001c84 <acis_gui_task+0xa18>)
 8001b2e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3308      	adds	r3, #8
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d05d      	beq.n	8001c00 <acis_gui_task+0x994>
            {
              if((!menuselecting || menuitem != i))
 8001b44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <acis_gui_task+0x8ec>
 8001b4c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d01a      	beq.n	8001b8e <acis_gui_task+0x922>
                font_printf(-125,18 + font_getHeight()*i,"%d", *DragConfig[i].valuei);
 8001b58:	f00d fc3e 	bl	800f3d8 <font_getHeight>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b62:	fb03 f302 	mul.w	r3, r3, r2
 8001b66:	f103 0012 	add.w	r0, r3, #18
 8001b6a:	4946      	ldr	r1, [pc, #280]	; (8001c84 <acis_gui_task+0xa18>)
 8001b6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	440b      	add	r3, r1
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a46      	ldr	r2, [pc, #280]	; (8001c9c <acis_gui_task+0xa30>)
 8001b82:	4601      	mov	r1, r0
 8001b84:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001b88:	f00e fea2 	bl	80108d0 <font_printf>
 8001b8c:	e038      	b.n	8001c00 <acis_gui_task+0x994>
              else if(menuitem == i && DelayDiff(now, select_timeout) < 500000)
 8001b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d124      	bne.n	8001be4 <acis_gui_task+0x978>
 8001b9a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001b9e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001ba2:	f005 ff21 	bl	80079e8 <DelayDiff>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <acis_gui_task+0xa24>)
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d81a      	bhi.n	8001be4 <acis_gui_task+0x978>
                font_printf(-125,18 + font_getHeight()*i,"> %d", *DragConfig[i].valuei);
 8001bae:	f00d fc13 	bl	800f3d8 <font_getHeight>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bb8:	fb03 f302 	mul.w	r3, r3, r2
 8001bbc:	f103 0012 	add.w	r0, r3, #18
 8001bc0:	4930      	ldr	r1, [pc, #192]	; (8001c84 <acis_gui_task+0xa18>)
 8001bc2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	440b      	add	r3, r1
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <acis_gui_task+0xa34>)
 8001bd8:	4601      	mov	r1, r0
 8001bda:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001bde:	f00e fe77 	bl	80108d0 <font_printf>
 8001be2:	e00d      	b.n	8001c00 <acis_gui_task+0x994>
              else if(DelayDiff(now, select_timeout) > 800000)
 8001be4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001be8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001bec:	f005 fefc 	bl	80079e8 <DelayDiff>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <acis_gui_task+0xa2c>)
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d903      	bls.n	8001c00 <acis_gui_task+0x994>
                select_timeout = now;
 8001bf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          for(int i = 0; i < sizeof(DragConfig) / sizeof(sConfigLinking); i++)
 8001c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c04:	3301      	adds	r3, #1
 8001c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	f67f aefc 	bls.w	8001a0c <acis_gui_task+0x7a0>
            }
          }

          font_setFont(&rre_bold_6x8);
 8001c14:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <acis_gui_task+0xa38>)
 8001c16:	f00d fc39 	bl	800f48c <font_setFont>
          if(DragStatus == 0)
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <acis_gui_task+0xa3c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d106      	bne.n	8001c32 <acis_gui_task+0x9c6>
            font_printf(-125,53,"Ready");
 8001c24:	4a21      	ldr	r2, [pc, #132]	; (8001cac <acis_gui_task+0xa40>)
 8001c26:	2135      	movs	r1, #53	; 0x35
 8001c28:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001c2c:	f00e fe50 	bl	80108d0 <font_printf>
 8001c30:	e04e      	b.n	8001cd0 <acis_gui_task+0xa64>
          else if(DragStatus == 1)
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <acis_gui_task+0xa3c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d149      	bne.n	8001cd0 <acis_gui_task+0xa64>
          {
            if(DelayDiff(now, select_timeout) < 500000)
 8001c3c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001c40:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001c44:	f005 fed0 	bl	80079e8 <DelayDiff>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <acis_gui_task+0xa24>)
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d831      	bhi.n	8001cb4 <acis_gui_task+0xa48>
              font_printf(-125,53,"GO!");
 8001c50:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <acis_gui_task+0xa44>)
 8001c52:	2135      	movs	r1, #53	; 0x35
 8001c54:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8001c58:	f00e fe3a 	bl	80108d0 <font_printf>
 8001c5c:	e038      	b.n	8001cd0 <acis_gui_task+0xa64>
 8001c5e:	bf00      	nop
 8001c60:	20006890 	.word	0x20006890
 8001c64:	0801493c 	.word	0x0801493c
 8001c68:	20006901 	.word	0x20006901
 8001c6c:	2000687c 	.word	0x2000687c
 8001c70:	20006900 	.word	0x20006900
 8001c74:	000249f0 	.word	0x000249f0
 8001c78:	20002be0 	.word	0x20002be0
 8001c7c:	08014944 	.word	0x08014944
 8001c80:	20002bd0 	.word	0x20002bd0
 8001c84:	08014ac0 	.word	0x08014ac0
 8001c88:	08014954 	.word	0x08014954
 8001c8c:	080148f8 	.word	0x080148f8
 8001c90:	0007a11f 	.word	0x0007a11f
 8001c94:	08014958 	.word	0x08014958
 8001c98:	000c3500 	.word	0x000c3500
 8001c9c:	08014964 	.word	0x08014964
 8001ca0:	08014968 	.word	0x08014968
 8001ca4:	20002c00 	.word	0x20002c00
 8001ca8:	200068c4 	.word	0x200068c4
 8001cac:	08014970 	.word	0x08014970
 8001cb0:	08014978 	.word	0x08014978
            else if(DelayDiff(now, select_timeout) > 800000)
 8001cb4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001cb8:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8001cbc:	f005 fe94 	bl	80079e8 <DelayDiff>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4bc5      	ldr	r3, [pc, #788]	; (8001fd8 <acis_gui_task+0xd6c>)
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d903      	bls.n	8001cd0 <acis_gui_task+0xa64>
              select_timeout = now;
 8001cc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ccc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }

          font_setFont(&rre_arialb_16);
 8001cd0:	48c2      	ldr	r0, [pc, #776]	; (8001fdc <acis_gui_task+0xd70>)
 8001cd2:	f00d fbdb 	bl	800f48c <font_setFont>
          font_printf(-90,34,"%03.0f RPM", DragRPM);
 8001cd6:	4bc2      	ldr	r3, [pc, #776]	; (8001fe0 <acis_gui_task+0xd74>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc5c 	bl	8000598 <__aeabi_f2d>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	e9cd 3400 	strd	r3, r4, [sp]
 8001ce8:	4abe      	ldr	r2, [pc, #760]	; (8001fe4 <acis_gui_task+0xd78>)
 8001cea:	2122      	movs	r1, #34	; 0x22
 8001cec:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8001cf0:	f00e fdee 	bl	80108d0 <font_printf>
          font_printf(-80,34+14,"%04.2f sec", DragTime);
 8001cf4:	4bbc      	ldr	r3, [pc, #752]	; (8001fe8 <acis_gui_task+0xd7c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc4d 	bl	8000598 <__aeabi_f2d>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460c      	mov	r4, r1
 8001d02:	e9cd 3400 	strd	r3, r4, [sp]
 8001d06:	4ab9      	ldr	r2, [pc, #740]	; (8001fec <acis_gui_task+0xd80>)
 8001d08:	2130      	movs	r1, #48	; 0x30
 8001d0a:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8001d0e:	f00e fddf 	bl	80108d0 <font_printf>

          lcd_update();
 8001d12:	f005 ff0d 	bl	8007b30 <lcd_update>
        }
        if(BUT_ENTER_PRESS)
 8001d16:	4bb6      	ldr	r3, [pc, #728]	; (8001ff0 <acis_gui_task+0xd84>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d019      	beq.n	8001d54 <acis_gui_task+0xae8>
        {
          if(!BUT_CANCEL_PRESS && BUT_ENTER_TIME > 500)
 8001d20:	4bb4      	ldr	r3, [pc, #720]	; (8001ff4 <acis_gui_task+0xd88>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d147      	bne.n	8001dba <acis_gui_task+0xb4e>
 8001d2a:	4bb3      	ldr	r3, [pc, #716]	; (8001ff8 <acis_gui_task+0xd8c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d32:	d942      	bls.n	8001dba <acis_gui_task+0xb4e>
          {
            select_timeout = now;
 8001d34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            if(DragStatus == 0)
 8001d3c:	4baf      	ldr	r3, [pc, #700]	; (8001ffc <acis_gui_task+0xd90>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d139      	bne.n	8001dba <acis_gui_task+0xb4e>
            {
              menuselecting = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
              DragStatus = 1;
 8001d4c:	4bab      	ldr	r3, [pc, #684]	; (8001ffc <acis_gui_task+0xd90>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e032      	b.n	8001dba <acis_gui_task+0xb4e>
            }
          }
        }
        else if(BUT_ENTER)
 8001d54:	4baa      	ldr	r3, [pc, #680]	; (8002000 <acis_gui_task+0xd94>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d02d      	beq.n	8001dba <acis_gui_task+0xb4e>
        {
          display_timeout = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(!menuselecting)
 8001d64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d114      	bne.n	8001d96 <acis_gui_task+0xb2a>
          {
            if(DragStatus == 0 || DragStatus == 3)
 8001d6c:	4ba3      	ldr	r3, [pc, #652]	; (8001ffc <acis_gui_task+0xd90>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <acis_gui_task+0xb14>
 8001d76:	4ba1      	ldr	r3, [pc, #644]	; (8001ffc <acis_gui_task+0xd90>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d10d      	bne.n	8001d9c <acis_gui_task+0xb30>
            {
              menuselecting = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
              menuitem = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
              select_timeout = now;
 8001d8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d94:	e002      	b.n	8001d9c <acis_gui_task+0xb30>
            }
          }
          else
          {
            menuselecting = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 8001d9c:	4b99      	ldr	r3, [pc, #612]	; (8002004 <acis_gui_task+0xd98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8001da2:	4b99      	ldr	r3, [pc, #612]	; (8002008 <acis_gui_task+0xd9c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8001da8:	4b98      	ldr	r3, [pc, #608]	; (800200c <acis_gui_task+0xda0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8001dae:	4b98      	ldr	r3, [pc, #608]	; (8002010 <acis_gui_task+0xda4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8001db4:	4b92      	ldr	r3, [pc, #584]	; (8002000 <acis_gui_task+0xd94>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8001dba:	4b96      	ldr	r3, [pc, #600]	; (8002014 <acis_gui_task+0xda8>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <acis_gui_task+0xb90>
        {
          display_timeout = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8001dca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <acis_gui_task+0xb6c>
          {
            menuselecting = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          DragStatus = 0;
 8001dd8:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <acis_gui_task+0xd90>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
          BUT_UP = 0;
 8001dde:	4b89      	ldr	r3, [pc, #548]	; (8002004 <acis_gui_task+0xd98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8001de4:	4b88      	ldr	r3, [pc, #544]	; (8002008 <acis_gui_task+0xd9c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <acis_gui_task+0xda0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8001df0:	4b87      	ldr	r3, [pc, #540]	; (8002010 <acis_gui_task+0xda4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8001df6:	4b87      	ldr	r3, [pc, #540]	; (8002014 <acis_gui_task+0xda8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 8001dfc:	4b83      	ldr	r3, [pc, #524]	; (800200c <acis_gui_task+0xda0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <acis_gui_task+0xbb2>
 8001e06:	4b84      	ldr	r3, [pc, #528]	; (8002018 <acis_gui_task+0xdac>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 813b 	beq.w	8002088 <acis_gui_task+0xe1c>
 8001e12:	4b82      	ldr	r3, [pc, #520]	; (800201c <acis_gui_task+0xdb0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001e1a:	f240 8135 	bls.w	8002088 <acis_gui_task+0xe1c>
        {
          display_timeout = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 8001e24:	4b7d      	ldr	r3, [pc, #500]	; (800201c <acis_gui_task+0xdb0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d904      	bls.n	8001e36 <acis_gui_task+0xbca>
 8001e2c:	4b7b      	ldr	r3, [pc, #492]	; (800201c <acis_gui_task+0xdb0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3b64      	subs	r3, #100	; 0x64
 8001e32:	4a7a      	ldr	r2, [pc, #488]	; (800201c <acis_gui_task+0xdb0>)
 8001e34:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8001e36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8124 	beq.w	8002088 <acis_gui_task+0xe1c>
          {
            if(DragConfig[menuitem].valuef)
 8001e40:	4977      	ldr	r1, [pc, #476]	; (8002020 <acis_gui_task+0xdb4>)
 8001e42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	440b      	add	r3, r1
 8001e50:	330c      	adds	r3, #12
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d06c      	beq.n	8001f32 <acis_gui_task+0xcc6>
            {
              if(*DragConfig[menuitem].valuef - DragConfig[menuitem].step < DragConfig[menuitem].min)
 8001e58:	4971      	ldr	r1, [pc, #452]	; (8002020 <acis_gui_task+0xdb4>)
 8001e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	440b      	add	r3, r1
 8001e68:	330c      	adds	r3, #12
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	ed93 7a00 	vldr	s14, [r3]
 8001e70:	496b      	ldr	r1, [pc, #428]	; (8002020 <acis_gui_task+0xdb4>)
 8001e72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	440b      	add	r3, r1
 8001e80:	3318      	adds	r3, #24
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e8a:	4965      	ldr	r1, [pc, #404]	; (8002020 <acis_gui_task+0xdb4>)
 8001e8c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	440b      	add	r3, r1
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	d51a      	bpl.n	8001ee6 <acis_gui_task+0xc7a>
                *DragConfig[menuitem].valuef = DragConfig[menuitem].min;
 8001eb0:	495b      	ldr	r1, [pc, #364]	; (8002020 <acis_gui_task+0xdb4>)
 8001eb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3310      	adds	r3, #16
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	4956      	ldr	r1, [pc, #344]	; (8002020 <acis_gui_task+0xdb4>)
 8001ec6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	440b      	add	r3, r1
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	ee07 0a90 	vmov	s15, r0
 8001edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee0:	edc3 7a00 	vstr	s15, [r3]
 8001ee4:	e0c9      	b.n	800207a <acis_gui_task+0xe0e>
              else *DragConfig[menuitem].valuef -= DragConfig[menuitem].step;
 8001ee6:	494e      	ldr	r1, [pc, #312]	; (8002020 <acis_gui_task+0xdb4>)
 8001ee8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	440b      	add	r3, r1
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	4948      	ldr	r1, [pc, #288]	; (8002020 <acis_gui_task+0xdb4>)
 8001f00:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3318      	adds	r3, #24
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	4942      	ldr	r1, [pc, #264]	; (8002020 <acis_gui_task+0xdb4>)
 8001f16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	440b      	add	r3, r1
 8001f24:	330c      	adds	r3, #12
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2c:	edc3 7a00 	vstr	s15, [r3]
 8001f30:	e0a3      	b.n	800207a <acis_gui_task+0xe0e>
            }
            else if(DragConfig[menuitem].valuei)
 8001f32:	493b      	ldr	r1, [pc, #236]	; (8002020 <acis_gui_task+0xdb4>)
 8001f34:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	440b      	add	r3, r1
 8001f42:	3308      	adds	r3, #8
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8097 	beq.w	800207a <acis_gui_task+0xe0e>
            {
              if(*DragConfig[menuitem].valuei - DragConfig[menuitem].step < DragConfig[menuitem].min)
 8001f4c:	4934      	ldr	r1, [pc, #208]	; (8002020 <acis_gui_task+0xdb4>)
 8001f4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3308      	adds	r3, #8
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6a:	492d      	ldr	r1, [pc, #180]	; (8002020 <acis_gui_task+0xdb4>)
 8001f6c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	3318      	adds	r3, #24
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f84:	4926      	ldr	r1, [pc, #152]	; (8002020 <acis_gui_task+0xdb4>)
 8001f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	440b      	add	r3, r1
 8001f94:	3310      	adds	r3, #16
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	d53c      	bpl.n	8002024 <acis_gui_task+0xdb8>
                *DragConfig[menuitem].valuei = DragConfig[menuitem].min;
 8001faa:	491d      	ldr	r1, [pc, #116]	; (8002020 <acis_gui_task+0xdb4>)
 8001fac:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	440b      	add	r3, r1
 8001fba:	3308      	adds	r3, #8
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	4818      	ldr	r0, [pc, #96]	; (8002020 <acis_gui_task+0xdb4>)
 8001fc0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4403      	add	r3, r0
 8001fce:	3310      	adds	r3, #16
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e051      	b.n	800207a <acis_gui_task+0xe0e>
 8001fd6:	bf00      	nop
 8001fd8:	000c3500 	.word	0x000c3500
 8001fdc:	20002bf0 	.word	0x20002bf0
 8001fe0:	200068c0 	.word	0x200068c0
 8001fe4:	0801497c 	.word	0x0801497c
 8001fe8:	200068bc 	.word	0x200068bc
 8001fec:	08014988 	.word	0x08014988
 8001ff0:	200068e4 	.word	0x200068e4
 8001ff4:	200068e5 	.word	0x200068e5
 8001ff8:	200068f8 	.word	0x200068f8
 8001ffc:	200068c4 	.word	0x200068c4
 8002000:	20006904 	.word	0x20006904
 8002004:	20006902 	.word	0x20006902
 8002008:	20006903 	.word	0x20006903
 800200c:	20006900 	.word	0x20006900
 8002010:	20006901 	.word	0x20006901
 8002014:	20006905 	.word	0x20006905
 8002018:	200068e0 	.word	0x200068e0
 800201c:	200068e8 	.word	0x200068e8
 8002020:	08014ac0 	.word	0x08014ac0
              else *DragConfig[menuitem].valuei -= DragConfig[menuitem].step;
 8002024:	498e      	ldr	r1, [pc, #568]	; (8002260 <acis_gui_task+0xff4>)
 8002026:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	440b      	add	r3, r1
 8002034:	3308      	adds	r3, #8
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002042:	4987      	ldr	r1, [pc, #540]	; (8002260 <acis_gui_task+0xff4>)
 8002044:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	440b      	add	r3, r1
 8002052:	3318      	adds	r3, #24
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205c:	4980      	ldr	r1, [pc, #512]	; (8002260 <acis_gui_task+0xff4>)
 800205e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	440b      	add	r3, r1
 800206c:	3308      	adds	r3, #8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002074:	ee17 2a90 	vmov	r2, s15
 8002078:	601a      	str	r2, [r3, #0]
            }

            select_timeout = now;
 800207a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800207e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_LEFT = 0;
 8002082:	4b78      	ldr	r3, [pc, #480]	; (8002264 <acis_gui_task+0xff8>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8002088:	4b77      	ldr	r3, [pc, #476]	; (8002268 <acis_gui_task+0xffc>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10b      	bne.n	80020aa <acis_gui_task+0xe3e>
 8002092:	4b76      	ldr	r3, [pc, #472]	; (800226c <acis_gui_task+0x1000>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 811d 	beq.w	80022d8 <acis_gui_task+0x106c>
 800209e:	4b74      	ldr	r3, [pc, #464]	; (8002270 <acis_gui_task+0x1004>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80020a6:	f240 8117 	bls.w	80022d8 <acis_gui_task+0x106c>
        {
          display_timeout = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 80020b0:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <acis_gui_task+0x1004>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d904      	bls.n	80020c2 <acis_gui_task+0xe56>
 80020b8:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <acis_gui_task+0x1004>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3b64      	subs	r3, #100	; 0x64
 80020be:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <acis_gui_task+0x1004>)
 80020c0:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 80020c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8106 	beq.w	80022d8 <acis_gui_task+0x106c>
          {
            if(DragConfig[menuitem].valuef)
 80020cc:	4964      	ldr	r1, [pc, #400]	; (8002260 <acis_gui_task+0xff4>)
 80020ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	440b      	add	r3, r1
 80020dc:	330c      	adds	r3, #12
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d06c      	beq.n	80021be <acis_gui_task+0xf52>
            {
              if(*DragConfig[menuitem].valuef + DragConfig[menuitem].step > DragConfig[menuitem].max)
 80020e4:	495e      	ldr	r1, [pc, #376]	; (8002260 <acis_gui_task+0xff4>)
 80020e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	440b      	add	r3, r1
 80020f4:	330c      	adds	r3, #12
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	4958      	ldr	r1, [pc, #352]	; (8002260 <acis_gui_task+0xff4>)
 80020fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	3318      	adds	r3, #24
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002116:	4952      	ldr	r1, [pc, #328]	; (8002260 <acis_gui_task+0xff4>)
 8002118:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	440b      	add	r3, r1
 8002126:	3314      	adds	r3, #20
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	dd1a      	ble.n	8002172 <acis_gui_task+0xf06>
                *DragConfig[menuitem].valuef = DragConfig[menuitem].max;
 800213c:	4948      	ldr	r1, [pc, #288]	; (8002260 <acis_gui_task+0xff4>)
 800213e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	440b      	add	r3, r1
 800214c:	3314      	adds	r3, #20
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	4943      	ldr	r1, [pc, #268]	; (8002260 <acis_gui_task+0xff4>)
 8002152:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	440b      	add	r3, r1
 8002160:	330c      	adds	r3, #12
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	ee07 0a90 	vmov	s15, r0
 8002168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216c:	edc3 7a00 	vstr	s15, [r3]
 8002170:	e0ab      	b.n	80022ca <acis_gui_task+0x105e>
              else *DragConfig[menuitem].valuef += DragConfig[menuitem].step;
 8002172:	493b      	ldr	r1, [pc, #236]	; (8002260 <acis_gui_task+0xff4>)
 8002174:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	440b      	add	r3, r1
 8002182:	330c      	adds	r3, #12
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	ed93 7a00 	vldr	s14, [r3]
 800218a:	4935      	ldr	r1, [pc, #212]	; (8002260 <acis_gui_task+0xff4>)
 800218c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	440b      	add	r3, r1
 800219a:	3318      	adds	r3, #24
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	492f      	ldr	r1, [pc, #188]	; (8002260 <acis_gui_task+0xff4>)
 80021a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	440b      	add	r3, r1
 80021b0:	330c      	adds	r3, #12
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	edc3 7a00 	vstr	s15, [r3]
 80021bc:	e085      	b.n	80022ca <acis_gui_task+0x105e>
            }
            else if(DragConfig[menuitem].valuei)
 80021be:	4928      	ldr	r1, [pc, #160]	; (8002260 <acis_gui_task+0xff4>)
 80021c0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	440b      	add	r3, r1
 80021ce:	3308      	adds	r3, #8
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d079      	beq.n	80022ca <acis_gui_task+0x105e>
            {
              if(*DragConfig[menuitem].valuei + DragConfig[menuitem].step > DragConfig[menuitem].max)
 80021d6:	4922      	ldr	r1, [pc, #136]	; (8002260 <acis_gui_task+0xff4>)
 80021d8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	440b      	add	r3, r1
 80021e6:	3308      	adds	r3, #8
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f4:	491a      	ldr	r1, [pc, #104]	; (8002260 <acis_gui_task+0xff4>)
 80021f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	440b      	add	r3, r1
 8002204:	3318      	adds	r3, #24
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	4914      	ldr	r1, [pc, #80]	; (8002260 <acis_gui_task+0xff4>)
 8002210:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	440b      	add	r3, r1
 800221e:	3314      	adds	r3, #20
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	dd1f      	ble.n	8002274 <acis_gui_task+0x1008>
                *DragConfig[menuitem].valuei = DragConfig[menuitem].max;
 8002234:	490a      	ldr	r1, [pc, #40]	; (8002260 <acis_gui_task+0xff4>)
 8002236:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	440b      	add	r3, r1
 8002244:	3308      	adds	r3, #8
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <acis_gui_task+0xff4>)
 800224a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	4403      	add	r3, r0
 8002258:	3314      	adds	r3, #20
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	600b      	str	r3, [r1, #0]
 800225e:	e034      	b.n	80022ca <acis_gui_task+0x105e>
 8002260:	08014ac0 	.word	0x08014ac0
 8002264:	20006900 	.word	0x20006900
 8002268:	20006901 	.word	0x20006901
 800226c:	200068e1 	.word	0x200068e1
 8002270:	200068ec 	.word	0x200068ec
              else *DragConfig[menuitem].valuei += DragConfig[menuitem].step;
 8002274:	49ad      	ldr	r1, [pc, #692]	; (800252c <acis_gui_task+0x12c0>)
 8002276:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	440b      	add	r3, r1
 8002284:	3308      	adds	r3, #8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002292:	49a6      	ldr	r1, [pc, #664]	; (800252c <acis_gui_task+0x12c0>)
 8002294:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	440b      	add	r3, r1
 80022a2:	3318      	adds	r3, #24
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	499f      	ldr	r1, [pc, #636]	; (800252c <acis_gui_task+0x12c0>)
 80022ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	440b      	add	r3, r1
 80022bc:	3308      	adds	r3, #8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c4:	ee17 2a90 	vmov	r2, s15
 80022c8:	601a      	str	r2, [r3, #0]
            }

            select_timeout = now;
 80022ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80022ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_RIGHT = 0;
 80022d2:	4b97      	ldr	r3, [pc, #604]	; (8002530 <acis_gui_task+0x12c4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 80022d8:	4b96      	ldr	r3, [pc, #600]	; (8002534 <acis_gui_task+0x12c8>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d019      	beq.n	8002316 <acis_gui_task+0x10aa>
        {
          display_timeout = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 80022e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00f      	beq.n	8002310 <acis_gui_task+0x10a4>
          {
            if(++menuitem >= sizeof(DragConfig) / sizeof(sConfigLinking)) menuitem = sizeof(DragConfig) / sizeof(sConfigLinking) - 1;
 80022f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f4:	3301      	adds	r3, #1
 80022f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d902      	bls.n	8002308 <acis_gui_task+0x109c>
 8002302:	2301      	movs	r3, #1
 8002304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            select_timeout = now;
 8002308:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800230c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_DOWN = 0;
 8002310:	4b88      	ldr	r3, [pc, #544]	; (8002534 <acis_gui_task+0x12c8>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8002316:	4b88      	ldr	r3, [pc, #544]	; (8002538 <acis_gui_task+0x12cc>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d019      	beq.n	8002354 <acis_gui_task+0x10e8>
        {
          display_timeout = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8002326:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00f      	beq.n	800234e <acis_gui_task+0x10e2>
          {
            if(--menuitem < 0) menuitem = 0;
 800232e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002332:	3b01      	subs	r3, #1
 8002334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800233c:	2b00      	cmp	r3, #0
 800233e:	da02      	bge.n	8002346 <acis_gui_task+0x10da>
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            select_timeout = now;
 8002346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800234a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_UP = 0;
 800234e:	4b7a      	ldr	r3, [pc, #488]	; (8002538 <acis_gui_task+0x12cc>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
        }

        if(!BUT_ENTER_PRESS && BUT_CANCEL_PRESS && BUT_CANCEL_TIME > 300)
 8002354:	4b79      	ldr	r3, [pc, #484]	; (800253c <acis_gui_task+0x12d0>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d114      	bne.n	8002388 <acis_gui_task+0x111c>
 800235e:	4b78      	ldr	r3, [pc, #480]	; (8002540 <acis_gui_task+0x12d4>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00f      	beq.n	8002388 <acis_gui_task+0x111c>
 8002368:	4b76      	ldr	r3, [pc, #472]	; (8002544 <acis_gui_task+0x12d8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002370:	d90a      	bls.n	8002388 <acis_gui_task+0x111c>
        {
          display_timeout = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(DragStatus > 0)
 8002378:	4b73      	ldr	r3, [pc, #460]	; (8002548 <acis_gui_task+0x12dc>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <acis_gui_task+0x111c>
          {
            DragStatus = 0;
 8002382:	4b71      	ldr	r3, [pc, #452]	; (8002548 <acis_gui_task+0x12dc>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT && !menuselecting && (DragStatus == 0 || DragStatus == 3)) eMenuItem++;
 8002388:	4b69      	ldr	r3, [pc, #420]	; (8002530 <acis_gui_task+0x12c4>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <acis_gui_task+0x1154>
 8002392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d112      	bne.n	80023c0 <acis_gui_task+0x1154>
 800239a:	4b6b      	ldr	r3, [pc, #428]	; (8002548 <acis_gui_task+0x12dc>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <acis_gui_task+0x1142>
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <acis_gui_task+0x12dc>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d108      	bne.n	80023c0 <acis_gui_task+0x1154>
 80023ae:	4b67      	ldr	r3, [pc, #412]	; (800254c <acis_gui_task+0x12e0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b64      	ldr	r3, [pc, #400]	; (800254c <acis_gui_task+0x12e0>)
 80023ba:	701a      	strb	r2, [r3, #0]
        else if(BUT_LEFT && !menuselecting && (DragStatus == 0 || DragStatus == 3)) eMenuItem--;
        break;
 80023bc:	f003 be15 	b.w	8005fea <acis_gui_task+0x4d7e>
        else if(BUT_LEFT && !menuselecting && (DragStatus == 0 || DragStatus == 3)) eMenuItem--;
 80023c0:	4b63      	ldr	r3, [pc, #396]	; (8002550 <acis_gui_task+0x12e4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f003 860f 	beq.w	8005fea <acis_gui_task+0x4d7e>
 80023cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f043 860a 	bne.w	8005fea <acis_gui_task+0x4d7e>
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <acis_gui_task+0x12dc>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <acis_gui_task+0x1180>
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <acis_gui_task+0x12dc>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	f043 85ff 	bne.w	8005fea <acis_gui_task+0x4d7e>
 80023ec:	4b57      	ldr	r3, [pc, #348]	; (800254c <acis_gui_task+0x12e0>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b55      	ldr	r3, [pc, #340]	; (800254c <acis_gui_task+0x12e0>)
 80023f8:	701a      	strb	r2, [r3, #0]
        break;
 80023fa:	f003 bdf6 	b.w	8005fea <acis_gui_task+0x4d7e>
      }

      case MenuMainConfig :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 80023fe:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002402:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002406:	f005 faef 	bl	80079e8 <DelayDiff>
 800240a:	4602      	mov	r2, r0
 800240c:	4b51      	ldr	r3, [pc, #324]	; (8002554 <acis_gui_task+0x12e8>)
 800240e:	429a      	cmp	r2, r3
 8002410:	f240 8183 	bls.w	800271a <acis_gui_task+0x14ae>
        {
          display_timeout = now;
 8002414:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 800241c:	f005 fc14 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8002420:	2301      	movs	r3, #1
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2340      	movs	r3, #64	; 0x40
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	2100      	movs	r1, #0
 800242a:	2000      	movs	r0, #0
 800242c:	f005 fcf7 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_8x12);
 8002430:	4849      	ldr	r0, [pc, #292]	; (8002558 <acis_gui_task+0x12ec>)
 8002432:	f00d f82b 	bl	800f48c <font_setFont>
          font_printf(0,2,"Configuration");
 8002436:	4a49      	ldr	r2, [pc, #292]	; (800255c <acis_gui_task+0x12f0>)
 8002438:	2102      	movs	r1, #2
 800243a:	2000      	movs	r0, #0
 800243c:	f00e fa48 	bl	80108d0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8002440:	2301      	movs	r3, #1
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	210f      	movs	r1, #15
 800244a:	2000      	movs	r0, #0
 800244c:	f005 fce7 	bl	8007e1e <lcd_rect>

          font_setFont(&rre_5x8);
 8002450:	4843      	ldr	r0, [pc, #268]	; (8002560 <acis_gui_task+0x12f4>)
 8002452:	f00d f81b 	bl	800f48c <font_setFont>
          for(int i = 0; i < 6; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800245c:	e156      	b.n	800270c <acis_gui_task+0x14a0>
          {
            menuselected = menufirst + i;
 800245e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002462:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002466:	4413      	add	r3, r2
 8002468:	64bb      	str	r3, [r7, #72]	; 0x48
            if(menuselected < sizeof(CommonConfig) / sizeof(sConfigLinking))
 800246a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246c:	2b0d      	cmp	r3, #13
 800246e:	f200 8148 	bhi.w	8002702 <acis_gui_task+0x1496>
            {
              font_printf(3,18 + font_getHeight()*i,"%s:", CommonConfig[menuselected].name);
 8002472:	f00c ffb1 	bl	800f3d8 <font_getHeight>
 8002476:	4602      	mov	r2, r0
 8002478:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800247c:	fb03 f302 	mul.w	r3, r3, r2
 8002480:	f103 0012 	add.w	r0, r3, #18
 8002484:	4937      	ldr	r1, [pc, #220]	; (8002564 <acis_gui_task+0x12f8>)
 8002486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	440b      	add	r3, r1
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a34      	ldr	r2, [pc, #208]	; (8002568 <acis_gui_task+0x12fc>)
 8002496:	4601      	mov	r1, r0
 8002498:	2003      	movs	r0, #3
 800249a:	f00e fa19 	bl	80108d0 <font_printf>
              if(CommonConfig[menuselected].valuef)
 800249e:	4931      	ldr	r1, [pc, #196]	; (8002564 <acis_gui_task+0x12f8>)
 80024a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	440b      	add	r3, r1
 80024ac:	330c      	adds	r3, #12
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80ad 	beq.w	8002610 <acis_gui_task+0x13a4>
              {
                if((!menuselecting || menuitem != menuselected))
 80024b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <acis_gui_task+0x125c>
 80024be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d053      	beq.n	8002570 <acis_gui_task+0x1304>
                  font_printf(-125,18 + font_getHeight()*i,"%.0f", *CommonConfig[menuselected].valuef + CommonConfig[menuselected].guicorrective);
 80024c8:	f00c ff86 	bl	800f3d8 <font_getHeight>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024d2:	fb03 f302 	mul.w	r3, r3, r2
 80024d6:	f103 0512 	add.w	r5, r3, #18
 80024da:	4922      	ldr	r1, [pc, #136]	; (8002564 <acis_gui_task+0x12f8>)
 80024dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	440b      	add	r3, r1
 80024e8:	330c      	adds	r3, #12
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	491c      	ldr	r1, [pc, #112]	; (8002564 <acis_gui_task+0x12f8>)
 80024f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	440b      	add	r3, r1
 80024fe:	331c      	adds	r3, #28
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250e:	ee17 0a90 	vmov	r0, s15
 8002512:	f7fe f841 	bl	8000598 <__aeabi_f2d>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	e9cd 3400 	strd	r3, r4, [sp]
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <acis_gui_task+0x1300>)
 8002520:	4629      	mov	r1, r5
 8002522:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002526:	f00e f9d3 	bl	80108d0 <font_printf>
 800252a:	e0ea      	b.n	8002702 <acis_gui_task+0x1496>
 800252c:	08014ac0 	.word	0x08014ac0
 8002530:	20006901 	.word	0x20006901
 8002534:	20006903 	.word	0x20006903
 8002538:	20006902 	.word	0x20006902
 800253c:	200068e4 	.word	0x200068e4
 8002540:	200068e5 	.word	0x200068e5
 8002544:	200068fc 	.word	0x200068fc
 8002548:	200068c4 	.word	0x200068c4
 800254c:	2000687c 	.word	0x2000687c
 8002550:	20006900 	.word	0x20006900
 8002554:	000249f0 	.word	0x000249f0
 8002558:	20002be0 	.word	0x20002be0
 800255c:	08014994 	.word	0x08014994
 8002560:	20002bd0 	.word	0x20002bd0
 8002564:	08014b20 	.word	0x08014b20
 8002568:	08014954 	.word	0x08014954
 800256c:	080149a4 	.word	0x080149a4
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8002570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002576:	429a      	cmp	r2, r3
 8002578:	d13b      	bne.n	80025f2 <acis_gui_task+0x1386>
 800257a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800257e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002582:	f005 fa31 	bl	80079e8 <DelayDiff>
 8002586:	4602      	mov	r2, r0
 8002588:	4bc4      	ldr	r3, [pc, #784]	; (800289c <acis_gui_task+0x1630>)
 800258a:	429a      	cmp	r2, r3
 800258c:	d831      	bhi.n	80025f2 <acis_gui_task+0x1386>
                  font_printf(-125,18 + font_getHeight()*i,"> %.0f", *CommonConfig[menuselected].valuef + CommonConfig[menuselected].guicorrective);
 800258e:	f00c ff23 	bl	800f3d8 <font_getHeight>
 8002592:	4602      	mov	r2, r0
 8002594:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002598:	fb03 f302 	mul.w	r3, r3, r2
 800259c:	f103 0512 	add.w	r5, r3, #18
 80025a0:	49bf      	ldr	r1, [pc, #764]	; (80028a0 <acis_gui_task+0x1634>)
 80025a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	440b      	add	r3, r1
 80025ae:	330c      	adds	r3, #12
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	ed93 7a00 	vldr	s14, [r3]
 80025b6:	49ba      	ldr	r1, [pc, #744]	; (80028a0 <acis_gui_task+0x1634>)
 80025b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	440b      	add	r3, r1
 80025c4:	331c      	adds	r3, #28
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d4:	ee17 0a90 	vmov	r0, s15
 80025d8:	f7fd ffde 	bl	8000598 <__aeabi_f2d>
 80025dc:	4603      	mov	r3, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	e9cd 3400 	strd	r3, r4, [sp]
 80025e4:	4aaf      	ldr	r2, [pc, #700]	; (80028a4 <acis_gui_task+0x1638>)
 80025e6:	4629      	mov	r1, r5
 80025e8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80025ec:	f00e f970 	bl	80108d0 <font_printf>
 80025f0:	e087      	b.n	8002702 <acis_gui_task+0x1496>
                else if(DelayDiff(now, select_timeout) > 800000)
 80025f2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80025f6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80025fa:	f005 f9f5 	bl	80079e8 <DelayDiff>
 80025fe:	4602      	mov	r2, r0
 8002600:	4ba9      	ldr	r3, [pc, #676]	; (80028a8 <acis_gui_task+0x163c>)
 8002602:	429a      	cmp	r2, r3
 8002604:	d97d      	bls.n	8002702 <acis_gui_task+0x1496>
                  select_timeout = now;
 8002606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800260a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800260e:	e078      	b.n	8002702 <acis_gui_task+0x1496>
              }
              else if(CommonConfig[menuselected].valuei)
 8002610:	49a3      	ldr	r1, [pc, #652]	; (80028a0 <acis_gui_task+0x1634>)
 8002612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	440b      	add	r3, r1
 800261e:	3308      	adds	r3, #8
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d06d      	beq.n	8002702 <acis_gui_task+0x1496>
              {
                if((!menuselecting || menuitem != menuselected))
 8002626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <acis_gui_task+0x13cc>
 800262e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002634:	429a      	cmp	r2, r3
 8002636:	d023      	beq.n	8002680 <acis_gui_task+0x1414>
                  font_printf(-125,18 + font_getHeight()*i,"%d", *CommonConfig[menuselected].valuei + CommonConfig[menuselected].guicorrective);
 8002638:	f00c fece 	bl	800f3d8 <font_getHeight>
 800263c:	4602      	mov	r2, r0
 800263e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002642:	fb03 f302 	mul.w	r3, r3, r2
 8002646:	f103 0412 	add.w	r4, r3, #18
 800264a:	4995      	ldr	r1, [pc, #596]	; (80028a0 <acis_gui_task+0x1634>)
 800264c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	440b      	add	r3, r1
 8002658:	3308      	adds	r3, #8
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	4890      	ldr	r0, [pc, #576]	; (80028a0 <acis_gui_task+0x1634>)
 8002660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4403      	add	r3, r0
 800266c:	331c      	adds	r3, #28
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	440b      	add	r3, r1
 8002672:	4a8e      	ldr	r2, [pc, #568]	; (80028ac <acis_gui_task+0x1640>)
 8002674:	4621      	mov	r1, r4
 8002676:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800267a:	f00e f929 	bl	80108d0 <font_printf>
 800267e:	e040      	b.n	8002702 <acis_gui_task+0x1496>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8002680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002686:	429a      	cmp	r2, r3
 8002688:	d12d      	bne.n	80026e6 <acis_gui_task+0x147a>
 800268a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800268e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002692:	f005 f9a9 	bl	80079e8 <DelayDiff>
 8002696:	4602      	mov	r2, r0
 8002698:	4b80      	ldr	r3, [pc, #512]	; (800289c <acis_gui_task+0x1630>)
 800269a:	429a      	cmp	r2, r3
 800269c:	d823      	bhi.n	80026e6 <acis_gui_task+0x147a>
                  font_printf(-125,18 + font_getHeight()*i,"> %d", *CommonConfig[menuselected].valuei + CommonConfig[menuselected].guicorrective);
 800269e:	f00c fe9b 	bl	800f3d8 <font_getHeight>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026a8:	fb03 f302 	mul.w	r3, r3, r2
 80026ac:	f103 0412 	add.w	r4, r3, #18
 80026b0:	497b      	ldr	r1, [pc, #492]	; (80028a0 <acis_gui_task+0x1634>)
 80026b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	440b      	add	r3, r1
 80026be:	3308      	adds	r3, #8
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	4876      	ldr	r0, [pc, #472]	; (80028a0 <acis_gui_task+0x1634>)
 80026c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	4403      	add	r3, r0
 80026d2:	331c      	adds	r3, #28
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	440b      	add	r3, r1
 80026d8:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <acis_gui_task+0x1644>)
 80026da:	4621      	mov	r1, r4
 80026dc:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80026e0:	f00e f8f6 	bl	80108d0 <font_printf>
 80026e4:	e00d      	b.n	8002702 <acis_gui_task+0x1496>
                else if(DelayDiff(now, select_timeout) > 800000)
 80026e6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80026ea:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80026ee:	f005 f97b 	bl	80079e8 <DelayDiff>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b6c      	ldr	r3, [pc, #432]	; (80028a8 <acis_gui_task+0x163c>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d903      	bls.n	8002702 <acis_gui_task+0x1496>
                  select_timeout = now;
 80026fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80026fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          for(int i = 0; i < 6; i++)
 8002702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002706:	3301      	adds	r3, #1
 8002708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800270c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002710:	2b05      	cmp	r3, #5
 8002712:	f77f aea4 	ble.w	800245e <acis_gui_task+0x11f2>
              }
            }
          }

          lcd_update();
 8002716:	f005 fa0b 	bl	8007b30 <lcd_update>
        }
        if(BUT_ENTER)
 800271a:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <acis_gui_task+0x1648>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <acis_gui_task+0x14fa>
        {
          display_timeout = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(!menuselecting)
 800272a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <acis_gui_task+0x14d6>
          {
            menuselecting = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            select_timeout = now;
 8002738:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800273c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002740:	e002      	b.n	8002748 <acis_gui_task+0x14dc>

          }
          else
          {
            menuselecting = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 8002748:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <acis_gui_task+0x164c>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <acis_gui_task+0x1650>)
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8002754:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <acis_gui_task+0x1654>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <acis_gui_task+0x1658>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8002760:	4b54      	ldr	r3, [pc, #336]	; (80028b4 <acis_gui_task+0x1648>)
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8002766:	4b58      	ldr	r3, [pc, #352]	; (80028c8 <acis_gui_task+0x165c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d018      	beq.n	80027a2 <acis_gui_task+0x1536>
        {
          display_timeout = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8002776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <acis_gui_task+0x1518>
          {
            menuselecting = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 8002784:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <acis_gui_task+0x164c>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 800278a:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <acis_gui_task+0x1650>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8002790:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <acis_gui_task+0x1654>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8002796:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <acis_gui_task+0x1658>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 800279c:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <acis_gui_task+0x165c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <acis_gui_task+0x1654>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10b      	bne.n	80027c4 <acis_gui_task+0x1558>
 80027ac:	4b47      	ldr	r3, [pc, #284]	; (80028cc <acis_gui_task+0x1660>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8155 	beq.w	8002a62 <acis_gui_task+0x17f6>
 80027b8:	4b45      	ldr	r3, [pc, #276]	; (80028d0 <acis_gui_task+0x1664>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80027c0:	f240 814f 	bls.w	8002a62 <acis_gui_task+0x17f6>
        {
          display_timeout = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <acis_gui_task+0x1664>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d904      	bls.n	80027dc <acis_gui_task+0x1570>
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <acis_gui_task+0x1664>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3b64      	subs	r3, #100	; 0x64
 80027d8:	4a3d      	ldr	r2, [pc, #244]	; (80028d0 <acis_gui_task+0x1664>)
 80027da:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 80027dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 813e 	beq.w	8002a62 <acis_gui_task+0x17f6>
          {
            if(StatusSynchronized)
 80027e6:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <acis_gui_task+0x1668>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8131 	beq.w	8002a54 <acis_gui_task+0x17e8>
            {
              if(CommonConfig[menuitem].valuef)
 80027f2:	492b      	ldr	r1, [pc, #172]	; (80028a0 <acis_gui_task+0x1634>)
 80027f4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	440b      	add	r3, r1
 8002802:	330c      	adds	r3, #12
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 809a 	beq.w	8002940 <acis_gui_task+0x16d4>
              {
                if(*CommonConfig[menuitem].valuef - CommonConfig[menuitem].step < CommonConfig[menuitem].min)
 800280c:	4924      	ldr	r1, [pc, #144]	; (80028a0 <acis_gui_task+0x1634>)
 800280e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002812:	4613      	mov	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	4413      	add	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	440b      	add	r3, r1
 800281c:	330c      	adds	r3, #12
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	ed93 7a00 	vldr	s14, [r3]
 8002824:	491e      	ldr	r1, [pc, #120]	; (80028a0 <acis_gui_task+0x1634>)
 8002826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	440b      	add	r3, r1
 8002834:	3318      	adds	r3, #24
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800283e:	4918      	ldr	r1, [pc, #96]	; (80028a0 <acis_gui_task+0x1634>)
 8002840:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	440b      	add	r3, r1
 800284e:	3310      	adds	r3, #16
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	d539      	bpl.n	80028d8 <acis_gui_task+0x166c>
                  *CommonConfig[menuitem].valuef = CommonConfig[menuitem].min;
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <acis_gui_task+0x1634>)
 8002866:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	440b      	add	r3, r1
 8002874:	3310      	adds	r3, #16
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	4909      	ldr	r1, [pc, #36]	; (80028a0 <acis_gui_task+0x1634>)
 800287a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	440b      	add	r3, r1
 8002888:	330c      	adds	r3, #12
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	ee07 0a90 	vmov	s15, r0
 8002890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002894:	edc3 7a00 	vstr	s15, [r3]
 8002898:	e043      	b.n	8002922 <acis_gui_task+0x16b6>
 800289a:	bf00      	nop
 800289c:	0007a11f 	.word	0x0007a11f
 80028a0:	08014b20 	.word	0x08014b20
 80028a4:	080149ac 	.word	0x080149ac
 80028a8:	000c3500 	.word	0x000c3500
 80028ac:	08014964 	.word	0x08014964
 80028b0:	08014968 	.word	0x08014968
 80028b4:	20006904 	.word	0x20006904
 80028b8:	20006902 	.word	0x20006902
 80028bc:	20006903 	.word	0x20006903
 80028c0:	20006900 	.word	0x20006900
 80028c4:	20006901 	.word	0x20006901
 80028c8:	20006905 	.word	0x20006905
 80028cc:	200068e0 	.word	0x200068e0
 80028d0:	200068e8 	.word	0x200068e8
 80028d4:	2000689e 	.word	0x2000689e
                else *CommonConfig[menuitem].valuef -= CommonConfig[menuitem].step;
 80028d8:	49ba      	ldr	r1, [pc, #744]	; (8002bc4 <acis_gui_task+0x1958>)
 80028da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	ed93 7a00 	vldr	s14, [r3]
 80028f0:	49b4      	ldr	r1, [pc, #720]	; (8002bc4 <acis_gui_task+0x1958>)
 80028f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	440b      	add	r3, r1
 8002900:	3318      	adds	r3, #24
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	49af      	ldr	r1, [pc, #700]	; (8002bc4 <acis_gui_task+0x1958>)
 8002908:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	440b      	add	r3, r1
 8002916:	330c      	adds	r3, #12
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(CommonConfig[menuitem].valuef, sizeof(float));
 8002922:	49a8      	ldr	r1, [pc, #672]	; (8002bc4 <acis_gui_task+0x1958>)
 8002924:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2104      	movs	r1, #4
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fb99 	bl	8001070 <acis_apply_parameter>
 800293e:	e089      	b.n	8002a54 <acis_gui_task+0x17e8>
              }
              else if(CommonConfig[menuitem].valuei)
 8002940:	49a0      	ldr	r1, [pc, #640]	; (8002bc4 <acis_gui_task+0x1958>)
 8002942:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	440b      	add	r3, r1
 8002950:	3308      	adds	r3, #8
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d07d      	beq.n	8002a54 <acis_gui_task+0x17e8>
              {
                if(*CommonConfig[menuitem].valuei - CommonConfig[menuitem].step < CommonConfig[menuitem].min)
 8002958:	499a      	ldr	r1, [pc, #616]	; (8002bc4 <acis_gui_task+0x1958>)
 800295a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	440b      	add	r3, r1
 8002968:	3308      	adds	r3, #8
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002976:	4993      	ldr	r1, [pc, #588]	; (8002bc4 <acis_gui_task+0x1958>)
 8002978:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	440b      	add	r3, r1
 8002986:	3318      	adds	r3, #24
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002990:	498c      	ldr	r1, [pc, #560]	; (8002bc4 <acis_gui_task+0x1958>)
 8002992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	440b      	add	r3, r1
 80029a0:	3310      	adds	r3, #16
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b4:	d515      	bpl.n	80029e2 <acis_gui_task+0x1776>
                  *CommonConfig[menuitem].valuei = CommonConfig[menuitem].min;
 80029b6:	4983      	ldr	r1, [pc, #524]	; (8002bc4 <acis_gui_task+0x1958>)
 80029b8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	440b      	add	r3, r1
 80029c6:	3308      	adds	r3, #8
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	487e      	ldr	r0, [pc, #504]	; (8002bc4 <acis_gui_task+0x1958>)
 80029cc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4403      	add	r3, r0
 80029da:	3310      	adds	r3, #16
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e02a      	b.n	8002a38 <acis_gui_task+0x17cc>
                else *CommonConfig[menuitem].valuei -= CommonConfig[menuitem].step;
 80029e2:	4978      	ldr	r1, [pc, #480]	; (8002bc4 <acis_gui_task+0x1958>)
 80029e4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	3308      	adds	r3, #8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a00:	4970      	ldr	r1, [pc, #448]	; (8002bc4 <acis_gui_task+0x1958>)
 8002a02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	440b      	add	r3, r1
 8002a10:	3318      	adds	r3, #24
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	496a      	ldr	r1, [pc, #424]	; (8002bc4 <acis_gui_task+0x1958>)
 8002a1c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	440b      	add	r3, r1
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a32:	ee17 2a90 	vmov	r2, s15
 8002a36:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(CommonConfig[menuitem].valuei, sizeof(int32_t));
 8002a38:	4962      	ldr	r1, [pc, #392]	; (8002bc4 <acis_gui_task+0x1958>)
 8002a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	440b      	add	r3, r1
 8002a48:	3308      	adds	r3, #8
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fb0e 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 8002a54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_LEFT = 0;
 8002a5c:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <acis_gui_task+0x195c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8002a62:	4b5a      	ldr	r3, [pc, #360]	; (8002bcc <acis_gui_task+0x1960>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <acis_gui_task+0x1818>
 8002a6c:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <acis_gui_task+0x1964>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8143 	beq.w	8002cfe <acis_gui_task+0x1a92>
 8002a78:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <acis_gui_task+0x1968>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002a80:	f240 813d 	bls.w	8002cfe <acis_gui_task+0x1a92>
        {
          display_timeout = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 8002a8a:	4b52      	ldr	r3, [pc, #328]	; (8002bd4 <acis_gui_task+0x1968>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d904      	bls.n	8002a9c <acis_gui_task+0x1830>
 8002a92:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <acis_gui_task+0x1968>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3b64      	subs	r3, #100	; 0x64
 8002a98:	4a4e      	ldr	r2, [pc, #312]	; (8002bd4 <acis_gui_task+0x1968>)
 8002a9a:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 8002a9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 812c 	beq.w	8002cfe <acis_gui_task+0x1a92>
          {
            if(StatusSynchronized)
 8002aa6:	4b4c      	ldr	r3, [pc, #304]	; (8002bd8 <acis_gui_task+0x196c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 811f 	beq.w	8002cf0 <acis_gui_task+0x1a84>
            {
              if(CommonConfig[menuitem].valuef)
 8002ab2:	4944      	ldr	r1, [pc, #272]	; (8002bc4 <acis_gui_task+0x1958>)
 8002ab4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	440b      	add	r3, r1
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8088 	beq.w	8002bdc <acis_gui_task+0x1970>
              {
                if(*CommonConfig[menuitem].valuef + CommonConfig[menuitem].step > CommonConfig[menuitem].max)
 8002acc:	493d      	ldr	r1, [pc, #244]	; (8002bc4 <acis_gui_task+0x1958>)
 8002ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	440b      	add	r3, r1
 8002adc:	330c      	adds	r3, #12
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	4937      	ldr	r1, [pc, #220]	; (8002bc4 <acis_gui_task+0x1958>)
 8002ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	440b      	add	r3, r1
 8002af4:	3318      	adds	r3, #24
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002afe:	4931      	ldr	r1, [pc, #196]	; (8002bc4 <acis_gui_task+0x1958>)
 8002b00:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3314      	adds	r3, #20
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	dd1a      	ble.n	8002b5a <acis_gui_task+0x18ee>
                  *CommonConfig[menuitem].valuef = CommonConfig[menuitem].max;
 8002b24:	4927      	ldr	r1, [pc, #156]	; (8002bc4 <acis_gui_task+0x1958>)
 8002b26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	440b      	add	r3, r1
 8002b34:	3314      	adds	r3, #20
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	4922      	ldr	r1, [pc, #136]	; (8002bc4 <acis_gui_task+0x1958>)
 8002b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	440b      	add	r3, r1
 8002b48:	330c      	adds	r3, #12
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	ee07 0a90 	vmov	s15, r0
 8002b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b54:	edc3 7a00 	vstr	s15, [r3]
 8002b58:	e024      	b.n	8002ba4 <acis_gui_task+0x1938>
                else *CommonConfig[menuitem].valuef += CommonConfig[menuitem].step;
 8002b5a:	491a      	ldr	r1, [pc, #104]	; (8002bc4 <acis_gui_task+0x1958>)
 8002b5c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	440b      	add	r3, r1
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	ed93 7a00 	vldr	s14, [r3]
 8002b72:	4914      	ldr	r1, [pc, #80]	; (8002bc4 <acis_gui_task+0x1958>)
 8002b74:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	440b      	add	r3, r1
 8002b82:	3318      	adds	r3, #24
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <acis_gui_task+0x1958>)
 8002b8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	440b      	add	r3, r1
 8002b98:	330c      	adds	r3, #12
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba0:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(CommonConfig[menuitem].valuef, sizeof(float));
 8002ba4:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <acis_gui_task+0x1958>)
 8002ba6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	440b      	add	r3, r1
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2104      	movs	r1, #4
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fa58 	bl	8001070 <acis_apply_parameter>
 8002bc0:	e096      	b.n	8002cf0 <acis_gui_task+0x1a84>
 8002bc2:	bf00      	nop
 8002bc4:	08014b20 	.word	0x08014b20
 8002bc8:	20006900 	.word	0x20006900
 8002bcc:	20006901 	.word	0x20006901
 8002bd0:	200068e1 	.word	0x200068e1
 8002bd4:	200068ec 	.word	0x200068ec
 8002bd8:	2000689e 	.word	0x2000689e
              }
              else if(CommonConfig[menuitem].valuei)
 8002bdc:	49a0      	ldr	r1, [pc, #640]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002bde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	440b      	add	r3, r1
 8002bec:	3308      	adds	r3, #8
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d07d      	beq.n	8002cf0 <acis_gui_task+0x1a84>
              {
                if(*CommonConfig[menuitem].valuei + CommonConfig[menuitem].step > CommonConfig[menuitem].max)
 8002bf4:	499a      	ldr	r1, [pc, #616]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002bf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	440b      	add	r3, r1
 8002c04:	3308      	adds	r3, #8
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c12:	4993      	ldr	r1, [pc, #588]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002c14:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	440b      	add	r3, r1
 8002c22:	3318      	adds	r3, #24
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c2c:	498c      	ldr	r1, [pc, #560]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002c2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3314      	adds	r3, #20
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	dd15      	ble.n	8002c7e <acis_gui_task+0x1a12>
                  *CommonConfig[menuitem].valuei = CommonConfig[menuitem].max;
 8002c52:	4983      	ldr	r1, [pc, #524]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002c54:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	440b      	add	r3, r1
 8002c62:	3308      	adds	r3, #8
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	487e      	ldr	r0, [pc, #504]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002c68:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	4403      	add	r3, r0
 8002c76:	3314      	adds	r3, #20
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	600b      	str	r3, [r1, #0]
 8002c7c:	e02a      	b.n	8002cd4 <acis_gui_task+0x1a68>
                else *CommonConfig[menuitem].valuei += CommonConfig[menuitem].step;
 8002c7e:	4978      	ldr	r1, [pc, #480]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002c80:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3308      	adds	r3, #8
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c9c:	4970      	ldr	r1, [pc, #448]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002c9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	440b      	add	r3, r1
 8002cac:	3318      	adds	r3, #24
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	496a      	ldr	r1, [pc, #424]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002cb8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cce:	ee17 2a90 	vmov	r2, s15
 8002cd2:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(CommonConfig[menuitem].valuei, sizeof(int32_t));
 8002cd4:	4962      	ldr	r1, [pc, #392]	; (8002e60 <acis_gui_task+0x1bf4>)
 8002cd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2104      	movs	r1, #4
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f9c0 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 8002cf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cf4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_RIGHT = 0;
 8002cf8:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <acis_gui_task+0x1bf8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 8002cfe:	4b5a      	ldr	r3, [pc, #360]	; (8002e68 <acis_gui_task+0x1bfc>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d025      	beq.n	8002d54 <acis_gui_task+0x1ae8>
        {
          display_timeout = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8002d0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01b      	beq.n	8002d4e <acis_gui_task+0x1ae2>
          {
            if(++menuitem >= sizeof(CommonConfig) / sizeof(sConfigLinking)) menuitem = sizeof(CommonConfig) / sizeof(sConfigLinking) - 1;
 8002d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	2b0d      	cmp	r3, #13
 8002d26:	d902      	bls.n	8002d2e <acis_gui_task+0x1ac2>
 8002d28:	230d      	movs	r3, #13
 8002d2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 8002d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d32:	1d1a      	adds	r2, r3, #4
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d204      	bcs.n	8002d46 <acis_gui_task+0x1ada>
 8002d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d40:	3b04      	subs	r3, #4
 8002d42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 8002d46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_DOWN = 0;
 8002d4e:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <acis_gui_task+0x1bfc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8002d54:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <acis_gui_task+0x1c00>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d023      	beq.n	8002da6 <acis_gui_task+0x1b3a>
        {
          display_timeout = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8002d64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d019      	beq.n	8002da0 <acis_gui_task+0x1b34>
          {
            if(--menuitem < 0) menuitem = 0;
 8002d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d70:	3b01      	subs	r3, #1
 8002d72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da02      	bge.n	8002d84 <acis_gui_task+0x1b18>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menuitem < menufirst) menufirst = menuitem;
 8002d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d88:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d903      	bls.n	8002d98 <acis_gui_task+0x1b2c>
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 8002d98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d9c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_UP = 0;
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <acis_gui_task+0x1c00>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++;
 8002da6:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <acis_gui_task+0x1bf8>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <acis_gui_task+0x1b66>
 8002db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10c      	bne.n	8002dd2 <acis_gui_task+0x1b66>
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <acis_gui_task+0x1bf8>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <acis_gui_task+0x1c04>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <acis_gui_task+0x1c04>)
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
        break;
 8002dce:	f003 b90f 	b.w	8005ff0 <acis_gui_task+0x4d84>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <acis_gui_task+0x1c08>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f003 8109 	beq.w	8005ff0 <acis_gui_task+0x4d84>
 8002dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f043 8104 	bne.w	8005ff0 <acis_gui_task+0x4d84>
 8002de8:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <acis_gui_task+0x1c08>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <acis_gui_task+0x1c04>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <acis_gui_task+0x1c04>)
 8002dfa:	701a      	strb	r2, [r3, #0]
        break;
 8002dfc:	f003 b8f8 	b.w	8005ff0 <acis_gui_task+0x4d84>
      }

      case MenuTableSelect :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 8002e00:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002e04:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002e08:	f004 fdee 	bl	80079e8 <DelayDiff>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <acis_gui_task+0x1c0c>)
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f240 8175 	bls.w	8003100 <acis_gui_task+0x1e94>
        {
          display_timeout = now;
 8002e16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 8002e1e:	f004 ff13 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8002e22:	2301      	movs	r3, #1
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f004 fff6 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_8x12);
 8002e32:	4812      	ldr	r0, [pc, #72]	; (8002e7c <acis_gui_task+0x1c10>)
 8002e34:	f00c fb2a 	bl	800f48c <font_setFont>
          font_printf(0,2,"Table Select");
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <acis_gui_task+0x1c14>)
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f00d fd47 	bl	80108d0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8002e42:	2301      	movs	r3, #1
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2301      	movs	r3, #1
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	210f      	movs	r1, #15
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f004 ffe6 	bl	8007e1e <lcd_rect>

          font_setFont(&rre_5x8);
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <acis_gui_task+0x1c18>)
 8002e54:	f00c fb1a 	bl	800f48c <font_setFont>
          for(int i = 0; i < 6; i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e5e:	e148      	b.n	80030f2 <acis_gui_task+0x1e86>
 8002e60:	08014b20 	.word	0x08014b20
 8002e64:	20006901 	.word	0x20006901
 8002e68:	20006903 	.word	0x20006903
 8002e6c:	20006902 	.word	0x20006902
 8002e70:	2000687c 	.word	0x2000687c
 8002e74:	20006900 	.word	0x20006900
 8002e78:	000249f0 	.word	0x000249f0
 8002e7c:	20002be0 	.word	0x20002be0
 8002e80:	080149b4 	.word	0x080149b4
 8002e84:	20002bd0 	.word	0x20002bd0
          {
            menuselected = menufirst + i;
 8002e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e8c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e90:	4413      	add	r3, r2
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
            if(menuselected < sizeof(TableInitial) / sizeof(sConfigLinking))
 8002e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f200 8126 	bhi.w	80030e8 <acis_gui_task+0x1e7c>
            {
              font_printf(3,18 + font_getHeight()*i,"%s:", TableInitial[menuselected].name);
 8002e9c:	f00c fa9c 	bl	800f3d8 <font_getHeight>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ea6:	fb03 f302 	mul.w	r3, r3, r2
 8002eaa:	f103 0012 	add.w	r0, r3, #18
 8002eae:	499e      	ldr	r1, [pc, #632]	; (8003128 <acis_gui_task+0x1ebc>)
 8002eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	440b      	add	r3, r1
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a9b      	ldr	r2, [pc, #620]	; (800312c <acis_gui_task+0x1ec0>)
 8002ec0:	4601      	mov	r1, r0
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	f00d fd04 	bl	80108d0 <font_printf>
              if(TableInitial[menuselected].valuef)
 8002ec8:	4997      	ldr	r1, [pc, #604]	; (8003128 <acis_gui_task+0x1ebc>)
 8002eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	440b      	add	r3, r1
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 808b 	beq.w	8002ff6 <acis_gui_task+0x1d8a>
              {
                if((!menuselecting || menuitem != menuselected))
 8002ee0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d004      	beq.n	8002ef2 <acis_gui_task+0x1c86>
 8002ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d031      	beq.n	8002f56 <acis_gui_task+0x1cea>
                  font_printf(-125,18 + font_getHeight()*i,"%.0f", *TableInitial[menuselected].valuef + TableInitial[menuselected].guicorrective);
 8002ef2:	f00c fa71 	bl	800f3d8 <font_getHeight>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002efc:	fb03 f302 	mul.w	r3, r3, r2
 8002f00:	f103 0512 	add.w	r5, r3, #18
 8002f04:	4988      	ldr	r1, [pc, #544]	; (8003128 <acis_gui_task+0x1ebc>)
 8002f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	440b      	add	r3, r1
 8002f12:	330c      	adds	r3, #12
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	4983      	ldr	r1, [pc, #524]	; (8003128 <acis_gui_task+0x1ebc>)
 8002f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	440b      	add	r3, r1
 8002f28:	331c      	adds	r3, #28
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f38:	ee17 0a90 	vmov	r0, s15
 8002f3c:	f7fd fb2c 	bl	8000598 <__aeabi_f2d>
 8002f40:	4603      	mov	r3, r0
 8002f42:	460c      	mov	r4, r1
 8002f44:	e9cd 3400 	strd	r3, r4, [sp]
 8002f48:	4a79      	ldr	r2, [pc, #484]	; (8003130 <acis_gui_task+0x1ec4>)
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002f50:	f00d fcbe 	bl	80108d0 <font_printf>
 8002f54:	e0c8      	b.n	80030e8 <acis_gui_task+0x1e7c>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8002f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d13b      	bne.n	8002fd8 <acis_gui_task+0x1d6c>
 8002f60:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8002f64:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002f68:	f004 fd3e 	bl	80079e8 <DelayDiff>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b71      	ldr	r3, [pc, #452]	; (8003134 <acis_gui_task+0x1ec8>)
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d831      	bhi.n	8002fd8 <acis_gui_task+0x1d6c>
                  font_printf(-125,18 + font_getHeight()*i,"> %.0f", *TableInitial[menuselected].valuef + TableInitial[menuselected].guicorrective);
 8002f74:	f00c fa30 	bl	800f3d8 <font_getHeight>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f7e:	fb03 f302 	mul.w	r3, r3, r2
 8002f82:	f103 0512 	add.w	r5, r3, #18
 8002f86:	4968      	ldr	r1, [pc, #416]	; (8003128 <acis_gui_task+0x1ebc>)
 8002f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	440b      	add	r3, r1
 8002f94:	330c      	adds	r3, #12
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	ed93 7a00 	vldr	s14, [r3]
 8002f9c:	4962      	ldr	r1, [pc, #392]	; (8003128 <acis_gui_task+0x1ebc>)
 8002f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	440b      	add	r3, r1
 8002faa:	331c      	adds	r3, #28
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fba:	ee17 0a90 	vmov	r0, s15
 8002fbe:	f7fd faeb 	bl	8000598 <__aeabi_f2d>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	e9cd 3400 	strd	r3, r4, [sp]
 8002fca:	4a5b      	ldr	r2, [pc, #364]	; (8003138 <acis_gui_task+0x1ecc>)
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8002fd2:	f00d fc7d 	bl	80108d0 <font_printf>
 8002fd6:	e087      	b.n	80030e8 <acis_gui_task+0x1e7c>
                else if(DelayDiff(now, select_timeout) > 800000)
 8002fd8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8002fdc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002fe0:	f004 fd02 	bl	80079e8 <DelayDiff>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b55      	ldr	r3, [pc, #340]	; (800313c <acis_gui_task+0x1ed0>)
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d97d      	bls.n	80030e8 <acis_gui_task+0x1e7c>
                  select_timeout = now;
 8002fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ff0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ff4:	e078      	b.n	80030e8 <acis_gui_task+0x1e7c>
              }
              else if(TableInitial[menuselected].valuei)
 8002ff6:	494c      	ldr	r1, [pc, #304]	; (8003128 <acis_gui_task+0x1ebc>)
 8002ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	440b      	add	r3, r1
 8003004:	3308      	adds	r3, #8
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d06d      	beq.n	80030e8 <acis_gui_task+0x1e7c>
              {
                if((!menuselecting || menuitem != menuselected))
 800300c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <acis_gui_task+0x1db2>
 8003014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800301a:	429a      	cmp	r2, r3
 800301c:	d023      	beq.n	8003066 <acis_gui_task+0x1dfa>
                  font_printf(-125,18 + font_getHeight()*i,"%d", *TableInitial[menuselected].valuei + TableInitial[menuselected].guicorrective);
 800301e:	f00c f9db 	bl	800f3d8 <font_getHeight>
 8003022:	4602      	mov	r2, r0
 8003024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003028:	fb03 f302 	mul.w	r3, r3, r2
 800302c:	f103 0412 	add.w	r4, r3, #18
 8003030:	493d      	ldr	r1, [pc, #244]	; (8003128 <acis_gui_task+0x1ebc>)
 8003032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	440b      	add	r3, r1
 800303e:	3308      	adds	r3, #8
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	4838      	ldr	r0, [pc, #224]	; (8003128 <acis_gui_task+0x1ebc>)
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4403      	add	r3, r0
 8003052:	331c      	adds	r3, #28
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	440b      	add	r3, r1
 8003058:	4a39      	ldr	r2, [pc, #228]	; (8003140 <acis_gui_task+0x1ed4>)
 800305a:	4621      	mov	r1, r4
 800305c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003060:	f00d fc36 	bl	80108d0 <font_printf>
 8003064:	e040      	b.n	80030e8 <acis_gui_task+0x1e7c>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8003066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800306c:	429a      	cmp	r2, r3
 800306e:	d12d      	bne.n	80030cc <acis_gui_task+0x1e60>
 8003070:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003074:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003078:	f004 fcb6 	bl	80079e8 <DelayDiff>
 800307c:	4602      	mov	r2, r0
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <acis_gui_task+0x1ec8>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d823      	bhi.n	80030cc <acis_gui_task+0x1e60>
                  font_printf(-125,18 + font_getHeight()*i,"> %d", *TableInitial[menuselected].valuei + TableInitial[menuselected].guicorrective);
 8003084:	f00c f9a8 	bl	800f3d8 <font_getHeight>
 8003088:	4602      	mov	r2, r0
 800308a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800308e:	fb03 f302 	mul.w	r3, r3, r2
 8003092:	f103 0412 	add.w	r4, r3, #18
 8003096:	4924      	ldr	r1, [pc, #144]	; (8003128 <acis_gui_task+0x1ebc>)
 8003098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	440b      	add	r3, r1
 80030a4:	3308      	adds	r3, #8
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	481f      	ldr	r0, [pc, #124]	; (8003128 <acis_gui_task+0x1ebc>)
 80030ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4403      	add	r3, r0
 80030b8:	331c      	adds	r3, #28
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	440b      	add	r3, r1
 80030be:	4a21      	ldr	r2, [pc, #132]	; (8003144 <acis_gui_task+0x1ed8>)
 80030c0:	4621      	mov	r1, r4
 80030c2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80030c6:	f00d fc03 	bl	80108d0 <font_printf>
 80030ca:	e00d      	b.n	80030e8 <acis_gui_task+0x1e7c>
                else if(DelayDiff(now, select_timeout) > 800000)
 80030cc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80030d0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80030d4:	f004 fc88 	bl	80079e8 <DelayDiff>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <acis_gui_task+0x1ed0>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d903      	bls.n	80030e8 <acis_gui_task+0x1e7c>
                  select_timeout = now;
 80030e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          for(int i = 0; i < 6; i++)
 80030e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030ec:	3301      	adds	r3, #1
 80030ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030f6:	2b05      	cmp	r3, #5
 80030f8:	f77f aec6 	ble.w	8002e88 <acis_gui_task+0x1c1c>
              }
            }
          }

          lcd_update();
 80030fc:	f004 fd18 	bl	8007b30 <lcd_update>
        }
        if(BUT_ENTER)
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <acis_gui_task+0x1edc>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d032      	beq.n	8003170 <acis_gui_task+0x1f04>
        {
          display_timeout = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(!menuselecting)
 8003110:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d119      	bne.n	800314c <acis_gui_task+0x1ee0>
          {
            menuselecting = 1;
 8003118:	2301      	movs	r3, #1
 800311a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            select_timeout = now;
 800311e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003122:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003126:	e014      	b.n	8003152 <acis_gui_task+0x1ee6>
 8003128:	08014dc0 	.word	0x08014dc0
 800312c:	08014954 	.word	0x08014954
 8003130:	080149a4 	.word	0x080149a4
 8003134:	0007a11f 	.word	0x0007a11f
 8003138:	080149ac 	.word	0x080149ac
 800313c:	000c3500 	.word	0x000c3500
 8003140:	08014964 	.word	0x08014964
 8003144:	08014968 	.word	0x08014968
 8003148:	20006904 	.word	0x20006904

          }
          else
          {
            menuselecting = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 8003152:	4b9f      	ldr	r3, [pc, #636]	; (80033d0 <acis_gui_task+0x2164>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8003158:	4b9e      	ldr	r3, [pc, #632]	; (80033d4 <acis_gui_task+0x2168>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 800315e:	4b9e      	ldr	r3, [pc, #632]	; (80033d8 <acis_gui_task+0x216c>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8003164:	4b9d      	ldr	r3, [pc, #628]	; (80033dc <acis_gui_task+0x2170>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 800316a:	4b9d      	ldr	r3, [pc, #628]	; (80033e0 <acis_gui_task+0x2174>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8003170:	4b9c      	ldr	r3, [pc, #624]	; (80033e4 <acis_gui_task+0x2178>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d018      	beq.n	80031ac <acis_gui_task+0x1f40>
        {
          display_timeout = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8003180:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <acis_gui_task+0x1f22>
          {
            menuselecting = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 800318e:	4b90      	ldr	r3, [pc, #576]	; (80033d0 <acis_gui_task+0x2164>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8003194:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <acis_gui_task+0x2168>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 800319a:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <acis_gui_task+0x216c>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 80031a0:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <acis_gui_task+0x2170>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 80031a6:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <acis_gui_task+0x2178>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 80031ac:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <acis_gui_task+0x216c>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <acis_gui_task+0x1f62>
 80031b6:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <acis_gui_task+0x217c>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 815b 	beq.w	8003478 <acis_gui_task+0x220c>
 80031c2:	4b8a      	ldr	r3, [pc, #552]	; (80033ec <acis_gui_task+0x2180>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80031ca:	f240 8155 	bls.w	8003478 <acis_gui_task+0x220c>
        {
          display_timeout = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 80031d4:	4b85      	ldr	r3, [pc, #532]	; (80033ec <acis_gui_task+0x2180>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d904      	bls.n	80031e6 <acis_gui_task+0x1f7a>
 80031dc:	4b83      	ldr	r3, [pc, #524]	; (80033ec <acis_gui_task+0x2180>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b64      	subs	r3, #100	; 0x64
 80031e2:	4a82      	ldr	r2, [pc, #520]	; (80033ec <acis_gui_task+0x2180>)
 80031e4:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 80031e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8144 	beq.w	8003478 <acis_gui_task+0x220c>
          {
            if(StatusSynchronized && TableInitial[menuitem].step > 0)
 80031f0:	4b7f      	ldr	r3, [pc, #508]	; (80033f0 <acis_gui_task+0x2184>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8137 	beq.w	800346a <acis_gui_task+0x21fe>
 80031fc:	497d      	ldr	r1, [pc, #500]	; (80033f4 <acis_gui_task+0x2188>)
 80031fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	440b      	add	r3, r1
 800320c:	3318      	adds	r3, #24
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	f340 8126 	ble.w	800346a <acis_gui_task+0x21fe>
            {
              if(TableInitial[menuitem].valuef)
 800321e:	4975      	ldr	r1, [pc, #468]	; (80033f4 <acis_gui_task+0x2188>)
 8003220:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	440b      	add	r3, r1
 800322e:	330c      	adds	r3, #12
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d07a      	beq.n	800332c <acis_gui_task+0x20c0>
              {
                if(*TableInitial[menuitem].valuef - TableInitial[menuitem].step < TableInitial[menuitem].min)
 8003236:	496f      	ldr	r1, [pc, #444]	; (80033f4 <acis_gui_task+0x2188>)
 8003238:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	440b      	add	r3, r1
 8003246:	330c      	adds	r3, #12
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	ed93 7a00 	vldr	s14, [r3]
 800324e:	4969      	ldr	r1, [pc, #420]	; (80033f4 <acis_gui_task+0x2188>)
 8003250:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	440b      	add	r3, r1
 800325e:	3318      	adds	r3, #24
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003268:	4962      	ldr	r1, [pc, #392]	; (80033f4 <acis_gui_task+0x2188>)
 800326a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	440b      	add	r3, r1
 8003278:	3310      	adds	r3, #16
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	ee07 3a90 	vmov	s15, r3
 8003280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d51a      	bpl.n	80032c4 <acis_gui_task+0x2058>
                  *TableInitial[menuitem].valuef = TableInitial[menuitem].min;
 800328e:	4959      	ldr	r1, [pc, #356]	; (80033f4 <acis_gui_task+0x2188>)
 8003290:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	440b      	add	r3, r1
 800329e:	3310      	adds	r3, #16
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	4954      	ldr	r1, [pc, #336]	; (80033f4 <acis_gui_task+0x2188>)
 80032a4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	440b      	add	r3, r1
 80032b2:	330c      	adds	r3, #12
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	ee07 0a90 	vmov	s15, r0
 80032ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032be:	edc3 7a00 	vstr	s15, [r3]
 80032c2:	e024      	b.n	800330e <acis_gui_task+0x20a2>
                else *TableInitial[menuitem].valuef -= TableInitial[menuitem].step;
 80032c4:	494b      	ldr	r1, [pc, #300]	; (80033f4 <acis_gui_task+0x2188>)
 80032c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	440b      	add	r3, r1
 80032d4:	330c      	adds	r3, #12
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	ed93 7a00 	vldr	s14, [r3]
 80032dc:	4945      	ldr	r1, [pc, #276]	; (80033f4 <acis_gui_task+0x2188>)
 80032de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	440b      	add	r3, r1
 80032ec:	3318      	adds	r3, #24
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	4940      	ldr	r1, [pc, #256]	; (80033f4 <acis_gui_task+0x2188>)
 80032f4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	440b      	add	r3, r1
 8003302:	330c      	adds	r3, #12
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330a:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(TableInitial[menuitem].valuef, sizeof(float));
 800330e:	4939      	ldr	r1, [pc, #228]	; (80033f4 <acis_gui_task+0x2188>)
 8003310:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	440b      	add	r3, r1
 800331e:	330c      	adds	r3, #12
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2104      	movs	r1, #4
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fea3 	bl	8001070 <acis_apply_parameter>
 800332a:	e09e      	b.n	800346a <acis_gui_task+0x21fe>
              }
              else if(TableInitial[menuitem].valuei)
 800332c:	4931      	ldr	r1, [pc, #196]	; (80033f4 <acis_gui_task+0x2188>)
 800332e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	440b      	add	r3, r1
 800333c:	3308      	adds	r3, #8
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8092 	beq.w	800346a <acis_gui_task+0x21fe>
              {
                if(*TableInitial[menuitem].valuei - TableInitial[menuitem].step < TableInitial[menuitem].min)
 8003346:	492b      	ldr	r1, [pc, #172]	; (80033f4 <acis_gui_task+0x2188>)
 8003348:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	440b      	add	r3, r1
 8003356:	3308      	adds	r3, #8
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003364:	4923      	ldr	r1, [pc, #140]	; (80033f4 <acis_gui_task+0x2188>)
 8003366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	440b      	add	r3, r1
 8003374:	3318      	adds	r3, #24
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800337e:	491d      	ldr	r1, [pc, #116]	; (80033f4 <acis_gui_task+0x2188>)
 8003380:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	440b      	add	r3, r1
 800338e:	3310      	adds	r3, #16
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800339a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	d529      	bpl.n	80033f8 <acis_gui_task+0x218c>
                  *TableInitial[menuitem].valuei = TableInitial[menuitem].min;
 80033a4:	4913      	ldr	r1, [pc, #76]	; (80033f4 <acis_gui_task+0x2188>)
 80033a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	440b      	add	r3, r1
 80033b4:	3308      	adds	r3, #8
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	480e      	ldr	r0, [pc, #56]	; (80033f4 <acis_gui_task+0x2188>)
 80033ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4403      	add	r3, r0
 80033c8:	3310      	adds	r3, #16
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	600b      	str	r3, [r1, #0]
 80033ce:	e03e      	b.n	800344e <acis_gui_task+0x21e2>
 80033d0:	20006902 	.word	0x20006902
 80033d4:	20006903 	.word	0x20006903
 80033d8:	20006900 	.word	0x20006900
 80033dc:	20006901 	.word	0x20006901
 80033e0:	20006904 	.word	0x20006904
 80033e4:	20006905 	.word	0x20006905
 80033e8:	200068e0 	.word	0x200068e0
 80033ec:	200068e8 	.word	0x200068e8
 80033f0:	2000689e 	.word	0x2000689e
 80033f4:	08014dc0 	.word	0x08014dc0
                else *TableInitial[menuitem].valuei -= TableInitial[menuitem].step;
 80033f8:	49a8      	ldr	r1, [pc, #672]	; (800369c <acis_gui_task+0x2430>)
 80033fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	440b      	add	r3, r1
 8003408:	3308      	adds	r3, #8
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003416:	49a1      	ldr	r1, [pc, #644]	; (800369c <acis_gui_task+0x2430>)
 8003418:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	440b      	add	r3, r1
 8003426:	3318      	adds	r3, #24
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003430:	499a      	ldr	r1, [pc, #616]	; (800369c <acis_gui_task+0x2430>)
 8003432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	440b      	add	r3, r1
 8003440:	3308      	adds	r3, #8
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003448:	ee17 2a90 	vmov	r2, s15
 800344c:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(TableInitial[menuitem].valuei, sizeof(int32_t));
 800344e:	4993      	ldr	r1, [pc, #588]	; (800369c <acis_gui_task+0x2430>)
 8003450:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	440b      	add	r3, r1
 800345e:	3308      	adds	r3, #8
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fe03 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 800346a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800346e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_LEFT = 0;
 8003472:	4b8b      	ldr	r3, [pc, #556]	; (80036a0 <acis_gui_task+0x2434>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 8003478:	4b8a      	ldr	r3, [pc, #552]	; (80036a4 <acis_gui_task+0x2438>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <acis_gui_task+0x222e>
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <acis_gui_task+0x243c>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8153 	beq.w	8003734 <acis_gui_task+0x24c8>
 800348e:	4b87      	ldr	r3, [pc, #540]	; (80036ac <acis_gui_task+0x2440>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003496:	f240 814d 	bls.w	8003734 <acis_gui_task+0x24c8>
        {
          display_timeout = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 80034a0:	4b82      	ldr	r3, [pc, #520]	; (80036ac <acis_gui_task+0x2440>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b64      	cmp	r3, #100	; 0x64
 80034a6:	d904      	bls.n	80034b2 <acis_gui_task+0x2246>
 80034a8:	4b80      	ldr	r3, [pc, #512]	; (80036ac <acis_gui_task+0x2440>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3b64      	subs	r3, #100	; 0x64
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <acis_gui_task+0x2440>)
 80034b0:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 80034b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 813c 	beq.w	8003734 <acis_gui_task+0x24c8>
          {
            if(StatusSynchronized && TableInitial[menuitem].step > 0)
 80034bc:	4b7c      	ldr	r3, [pc, #496]	; (80036b0 <acis_gui_task+0x2444>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 812f 	beq.w	8003726 <acis_gui_task+0x24ba>
 80034c8:	4974      	ldr	r1, [pc, #464]	; (800369c <acis_gui_task+0x2430>)
 80034ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	440b      	add	r3, r1
 80034d8:	3318      	adds	r3, #24
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e6:	f340 811e 	ble.w	8003726 <acis_gui_task+0x24ba>
            {
              if(TableInitial[menuitem].valuef)
 80034ea:	496c      	ldr	r1, [pc, #432]	; (800369c <acis_gui_task+0x2430>)
 80034ec:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	440b      	add	r3, r1
 80034fa:	330c      	adds	r3, #12
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d07a      	beq.n	80035f8 <acis_gui_task+0x238c>
              {
                if(*TableInitial[menuitem].valuef + TableInitial[menuitem].step > TableInitial[menuitem].max)
 8003502:	4966      	ldr	r1, [pc, #408]	; (800369c <acis_gui_task+0x2430>)
 8003504:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	440b      	add	r3, r1
 8003512:	330c      	adds	r3, #12
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	ed93 7a00 	vldr	s14, [r3]
 800351a:	4960      	ldr	r1, [pc, #384]	; (800369c <acis_gui_task+0x2430>)
 800351c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	440b      	add	r3, r1
 800352a:	3318      	adds	r3, #24
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003534:	4959      	ldr	r1, [pc, #356]	; (800369c <acis_gui_task+0x2430>)
 8003536:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	440b      	add	r3, r1
 8003544:	3314      	adds	r3, #20
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003558:	dd1a      	ble.n	8003590 <acis_gui_task+0x2324>
                  *TableInitial[menuitem].valuef = TableInitial[menuitem].max;
 800355a:	4950      	ldr	r1, [pc, #320]	; (800369c <acis_gui_task+0x2430>)
 800355c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	440b      	add	r3, r1
 800356a:	3314      	adds	r3, #20
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	494b      	ldr	r1, [pc, #300]	; (800369c <acis_gui_task+0x2430>)
 8003570:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	440b      	add	r3, r1
 800357e:	330c      	adds	r3, #12
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	ee07 0a90 	vmov	s15, r0
 8003586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358a:	edc3 7a00 	vstr	s15, [r3]
 800358e:	e024      	b.n	80035da <acis_gui_task+0x236e>
                else *TableInitial[menuitem].valuef += TableInitial[menuitem].step;
 8003590:	4942      	ldr	r1, [pc, #264]	; (800369c <acis_gui_task+0x2430>)
 8003592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	440b      	add	r3, r1
 80035a0:	330c      	adds	r3, #12
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	ed93 7a00 	vldr	s14, [r3]
 80035a8:	493c      	ldr	r1, [pc, #240]	; (800369c <acis_gui_task+0x2430>)
 80035aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	440b      	add	r3, r1
 80035b8:	3318      	adds	r3, #24
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	4937      	ldr	r1, [pc, #220]	; (800369c <acis_gui_task+0x2430>)
 80035c0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	440b      	add	r3, r1
 80035ce:	330c      	adds	r3, #12
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d6:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(TableInitial[menuitem].valuef, sizeof(float));
 80035da:	4930      	ldr	r1, [pc, #192]	; (800369c <acis_gui_task+0x2430>)
 80035dc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	440b      	add	r3, r1
 80035ea:	330c      	adds	r3, #12
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2104      	movs	r1, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd fd3d 	bl	8001070 <acis_apply_parameter>
 80035f6:	e096      	b.n	8003726 <acis_gui_task+0x24ba>
              }
              else if(TableInitial[menuitem].valuei)
 80035f8:	4928      	ldr	r1, [pc, #160]	; (800369c <acis_gui_task+0x2430>)
 80035fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	440b      	add	r3, r1
 8003608:	3308      	adds	r3, #8
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 808a 	beq.w	8003726 <acis_gui_task+0x24ba>
              {
                if(*TableInitial[menuitem].valuei + TableInitial[menuitem].step > TableInitial[menuitem].max)
 8003612:	4922      	ldr	r1, [pc, #136]	; (800369c <acis_gui_task+0x2430>)
 8003614:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	440b      	add	r3, r1
 8003622:	3308      	adds	r3, #8
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003630:	491a      	ldr	r1, [pc, #104]	; (800369c <acis_gui_task+0x2430>)
 8003632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	440b      	add	r3, r1
 8003640:	3318      	adds	r3, #24
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364a:	4914      	ldr	r1, [pc, #80]	; (800369c <acis_gui_task+0x2430>)
 800364c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	440b      	add	r3, r1
 800365a:	3314      	adds	r3, #20
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	dd21      	ble.n	80036b4 <acis_gui_task+0x2448>
                  *TableInitial[menuitem].valuei = TableInitial[menuitem].max;
 8003670:	490a      	ldr	r1, [pc, #40]	; (800369c <acis_gui_task+0x2430>)
 8003672:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	440b      	add	r3, r1
 8003680:	3308      	adds	r3, #8
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	4805      	ldr	r0, [pc, #20]	; (800369c <acis_gui_task+0x2430>)
 8003686:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	4403      	add	r3, r0
 8003694:	3314      	adds	r3, #20
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	600b      	str	r3, [r1, #0]
 800369a:	e036      	b.n	800370a <acis_gui_task+0x249e>
 800369c:	08014dc0 	.word	0x08014dc0
 80036a0:	20006900 	.word	0x20006900
 80036a4:	20006901 	.word	0x20006901
 80036a8:	200068e1 	.word	0x200068e1
 80036ac:	200068ec 	.word	0x200068ec
 80036b0:	2000689e 	.word	0x2000689e
                else *TableInitial[menuitem].valuei += TableInitial[menuitem].step;
 80036b4:	49b6      	ldr	r1, [pc, #728]	; (8003990 <acis_gui_task+0x2724>)
 80036b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	440b      	add	r3, r1
 80036c4:	3308      	adds	r3, #8
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036d2:	49af      	ldr	r1, [pc, #700]	; (8003990 <acis_gui_task+0x2724>)
 80036d4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	440b      	add	r3, r1
 80036e2:	3318      	adds	r3, #24
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ec:	49a8      	ldr	r1, [pc, #672]	; (8003990 <acis_gui_task+0x2724>)
 80036ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	440b      	add	r3, r1
 80036fc:	3308      	adds	r3, #8
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003704:	ee17 2a90 	vmov	r2, s15
 8003708:	601a      	str	r2, [r3, #0]
                acis_apply_parameter(TableInitial[menuitem].valuei, sizeof(int32_t));
 800370a:	49a1      	ldr	r1, [pc, #644]	; (8003990 <acis_gui_task+0x2724>)
 800370c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	440b      	add	r3, r1
 800371a:	3308      	adds	r3, #8
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2104      	movs	r1, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd fca5 	bl	8001070 <acis_apply_parameter>
              }
            }
            select_timeout = now;
 8003726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800372a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_RIGHT = 0;
 800372e:	4b99      	ldr	r3, [pc, #612]	; (8003994 <acis_gui_task+0x2728>)
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 8003734:	4b98      	ldr	r3, [pc, #608]	; (8003998 <acis_gui_task+0x272c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d025      	beq.n	800378a <acis_gui_task+0x251e>
        {
          display_timeout = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8003744:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <acis_gui_task+0x2518>
          {
            if(++menuitem >= sizeof(TableInitial) / sizeof(sConfigLinking)) menuitem = sizeof(TableInitial) / sizeof(sConfigLinking) - 1;
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003750:	3301      	adds	r3, #1
 8003752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <acis_gui_task+0x24f8>
 800375e:	2302      	movs	r3, #2
 8003760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 8003764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800376e:	429a      	cmp	r2, r3
 8003770:	d204      	bcs.n	800377c <acis_gui_task+0x2510>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003776:	3b04      	subs	r3, #4
 8003778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 800377c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003780:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_DOWN = 0;
 8003784:	4b84      	ldr	r3, [pc, #528]	; (8003998 <acis_gui_task+0x272c>)
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 800378a:	4b84      	ldr	r3, [pc, #528]	; (800399c <acis_gui_task+0x2730>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <acis_gui_task+0x2570>
        {
          display_timeout = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 800379a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d019      	beq.n	80037d6 <acis_gui_task+0x256a>
          {
            if(--menuitem < 0) menuitem = 0;
 80037a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	da02      	bge.n	80037ba <acis_gui_task+0x254e>
 80037b4:	2300      	movs	r3, #0
 80037b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menuitem < menufirst) menufirst = menuitem;
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d903      	bls.n	80037ce <acis_gui_task+0x2562>
 80037c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 80037ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_UP = 0;
 80037d6:	4b71      	ldr	r3, [pc, #452]	; (800399c <acis_gui_task+0x2730>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++;
 80037dc:	4b6d      	ldr	r3, [pc, #436]	; (8003994 <acis_gui_task+0x2728>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d010      	beq.n	8003808 <acis_gui_task+0x259c>
 80037e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <acis_gui_task+0x259c>
 80037ee:	4b69      	ldr	r3, [pc, #420]	; (8003994 <acis_gui_task+0x2728>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <acis_gui_task+0x2734>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <acis_gui_task+0x2734>)
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;

        break;
 8003804:	f002 bbf7 	b.w	8005ff6 <acis_gui_task+0x4d8a>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
 8003808:	4b66      	ldr	r3, [pc, #408]	; (80039a4 <acis_gui_task+0x2738>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	f002 83f1 	beq.w	8005ff6 <acis_gui_task+0x4d8a>
 8003814:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003818:	2b00      	cmp	r3, #0
 800381a:	f042 83ec 	bne.w	8005ff6 <acis_gui_task+0x4d8a>
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <acis_gui_task+0x2738>)
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <acis_gui_task+0x2734>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <acis_gui_task+0x2734>)
 8003830:	701a      	strb	r2, [r3, #0]
        break;
 8003832:	f002 bbe0 	b.w	8005ff6 <acis_gui_task+0x4d8a>
      }

      case MenuTableConfig :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 8003836:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800383a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800383e:	f004 f8d3 	bl	80079e8 <DelayDiff>
 8003842:	4602      	mov	r2, r0
 8003844:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <acis_gui_task+0x273c>)
 8003846:	429a      	cmp	r2, r3
 8003848:	f240 8341 	bls.w	8003ece <acis_gui_task+0x2c62>
        {
          display_timeout = now;
 800384c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003850:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 8003854:	f004 f9f8 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8003858:	2301      	movs	r3, #1
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2340      	movs	r3, #64	; 0x40
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	2100      	movs	r1, #0
 8003862:	2000      	movs	r0, #0
 8003864:	f004 fadb 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_8x12);
 8003868:	4850      	ldr	r0, [pc, #320]	; (80039ac <acis_gui_task+0x2740>)
 800386a:	f00b fe0f 	bl	800f48c <font_setFont>
          font_printf(0,2,"Table Config");
 800386e:	4a50      	ldr	r2, [pc, #320]	; (80039b0 <acis_gui_task+0x2744>)
 8003870:	2102      	movs	r1, #2
 8003872:	2000      	movs	r0, #0
 8003874:	f00d f82c 	bl	80108d0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8003878:	2301      	movs	r3, #1
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2301      	movs	r3, #1
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	210f      	movs	r1, #15
 8003882:	2000      	movs	r0, #0
 8003884:	f004 facb 	bl	8007e1e <lcd_rect>

          font_setFont(&rre_5x8);
 8003888:	484a      	ldr	r0, [pc, #296]	; (80039b4 <acis_gui_task+0x2748>)
 800388a:	f00b fdff 	bl	800f48c <font_setFont>
          for(int i = 0; i < 6; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003894:	e314      	b.n	8003ec0 <acis_gui_task+0x2c54>
          {
            menuselected = menufirst + i;
 8003896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800389a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800389e:	4413      	add	r3, r2
 80038a0:	64bb      	str	r3, [r7, #72]	; 0x48
            if(menuselected < sizeof(TableConfig) / sizeof(sConfigLinking))
 80038a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	f200 8306 	bhi.w	8003eb6 <acis_gui_task+0x2c4a>
            {
              font_printf(3,18 + font_getHeight()*i,"%s:", TableConfig[menuselected].name);
 80038aa:	f00b fd95 	bl	800f3d8 <font_getHeight>
 80038ae:	4602      	mov	r2, r0
 80038b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038b4:	fb03 f302 	mul.w	r3, r3, r2
 80038b8:	f103 0012 	add.w	r0, r3, #18
 80038bc:	493e      	ldr	r1, [pc, #248]	; (80039b8 <acis_gui_task+0x274c>)
 80038be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	440b      	add	r3, r1
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a3b      	ldr	r2, [pc, #236]	; (80039bc <acis_gui_task+0x2750>)
 80038ce:	4601      	mov	r1, r0
 80038d0:	2003      	movs	r0, #3
 80038d2:	f00c fffd 	bl	80108d0 <font_printf>
              if(TableConfig[menuselected].valuef)
 80038d6:	4938      	ldr	r1, [pc, #224]	; (80039b8 <acis_gui_task+0x274c>)
 80038d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	440b      	add	r3, r1
 80038e4:	330c      	adds	r3, #12
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80d3 	beq.w	8003a94 <acis_gui_task+0x2828>
              {
                if((!menuselecting || menuitem != menuselected))
 80038ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <acis_gui_task+0x2694>
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d063      	beq.n	80039c8 <acis_gui_task+0x275c>
                  font_printf(-125,18 + font_getHeight()*i,"%.1f", (TableOffset(TableConfig[menuselected].valuef, float) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier);
 8003900:	f00b fd6a 	bl	800f3d8 <font_getHeight>
 8003904:	4602      	mov	r2, r0
 8003906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800390a:	fb03 f302 	mul.w	r3, r3, r2
 800390e:	f103 0512 	add.w	r5, r3, #18
 8003912:	4929      	ldr	r1, [pc, #164]	; (80039b8 <acis_gui_task+0x274c>)
 8003914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	440b      	add	r3, r1
 8003920:	330c      	adds	r3, #12
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <acis_gui_task+0x2754>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003930:	fb03 f301 	mul.w	r3, r3, r1
 8003934:	4413      	add	r3, r2
 8003936:	ed93 7a00 	vldr	s14, [r3]
 800393a:	491f      	ldr	r1, [pc, #124]	; (80039b8 <acis_gui_task+0x274c>)
 800393c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	440b      	add	r3, r1
 8003948:	331c      	adds	r3, #28
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003954:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003958:	4917      	ldr	r1, [pc, #92]	; (80039b8 <acis_gui_task+0x274c>)
 800395a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	440b      	add	r3, r1
 8003966:	3320      	adds	r3, #32
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003970:	ee17 0a90 	vmov	r0, s15
 8003974:	f7fc fe10 	bl	8000598 <__aeabi_f2d>
 8003978:	4603      	mov	r3, r0
 800397a:	460c      	mov	r4, r1
 800397c:	e9cd 3400 	strd	r3, r4, [sp]
 8003980:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <acis_gui_task+0x2758>)
 8003982:	4629      	mov	r1, r5
 8003984:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003988:	f00c ffa2 	bl	80108d0 <font_printf>
 800398c:	e293      	b.n	8003eb6 <acis_gui_task+0x2c4a>
 800398e:	bf00      	nop
 8003990:	08014dc0 	.word	0x08014dc0
 8003994:	20006901 	.word	0x20006901
 8003998:	20006903 	.word	0x20006903
 800399c:	20006902 	.word	0x20006902
 80039a0:	2000687c 	.word	0x2000687c
 80039a4:	20006900 	.word	0x20006900
 80039a8:	000249f0 	.word	0x000249f0
 80039ac:	20002be0 	.word	0x20002be0
 80039b0:	080149c4 	.word	0x080149c4
 80039b4:	20002bd0 	.word	0x20002bd0
 80039b8:	08014fd0 	.word	0x08014fd0
 80039bc:	08014954 	.word	0x08014954
 80039c0:	200068c8 	.word	0x200068c8
 80039c4:	080149d4 	.word	0x080149d4
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d150      	bne.n	8003a74 <acis_gui_task+0x2808>
 80039d2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80039d6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80039da:	f004 f805 	bl	80079e8 <DelayDiff>
 80039de:	4602      	mov	r2, r0
 80039e0:	4bca      	ldr	r3, [pc, #808]	; (8003d0c <acis_gui_task+0x2aa0>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d846      	bhi.n	8003a74 <acis_gui_task+0x2808>
                  font_printf(-125,18 + font_getHeight()*i,"> %.1f", (TableOffset(TableConfig[menuselected].valuef, float) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier);
 80039e6:	f00b fcf7 	bl	800f3d8 <font_getHeight>
 80039ea:	4602      	mov	r2, r0
 80039ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80039f0:	fb03 f302 	mul.w	r3, r3, r2
 80039f4:	f103 0512 	add.w	r5, r3, #18
 80039f8:	49c5      	ldr	r1, [pc, #788]	; (8003d10 <acis_gui_task+0x2aa4>)
 80039fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	440b      	add	r3, r1
 8003a06:	330c      	adds	r3, #12
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4bc1      	ldr	r3, [pc, #772]	; (8003d14 <acis_gui_task+0x2aa8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003a16:	fb03 f301 	mul.w	r3, r3, r1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	ed93 7a00 	vldr	s14, [r3]
 8003a20:	49bb      	ldr	r1, [pc, #748]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	440b      	add	r3, r1
 8003a2e:	331c      	adds	r3, #28
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a3e:	49b4      	ldr	r1, [pc, #720]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3320      	adds	r3, #32
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a56:	ee17 0a90 	vmov	r0, s15
 8003a5a:	f7fc fd9d 	bl	8000598 <__aeabi_f2d>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	e9cd 3400 	strd	r3, r4, [sp]
 8003a66:	4aac      	ldr	r2, [pc, #688]	; (8003d18 <acis_gui_task+0x2aac>)
 8003a68:	4629      	mov	r1, r5
 8003a6a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003a6e:	f00c ff2f 	bl	80108d0 <font_printf>
 8003a72:	e220      	b.n	8003eb6 <acis_gui_task+0x2c4a>
                else if(DelayDiff(now, select_timeout) > 800000)
 8003a74:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003a78:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003a7c:	f003 ffb4 	bl	80079e8 <DelayDiff>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4ba6      	ldr	r3, [pc, #664]	; (8003d1c <acis_gui_task+0x2ab0>)
 8003a84:	429a      	cmp	r2, r3
 8003a86:	f240 8216 	bls.w	8003eb6 <acis_gui_task+0x2c4a>
                  select_timeout = now;
 8003a8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003a92:	e210      	b.n	8003eb6 <acis_gui_task+0x2c4a>
              }
              else if(TableConfig[menuselected].valuei)
 8003a94:	499e      	ldr	r1, [pc, #632]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80b6 	beq.w	8003c18 <acis_gui_task+0x29ac>
              {
                if((!menuselecting || menuitem != menuselected))
 8003aac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <acis_gui_task+0x2852>
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d046      	beq.n	8003b4c <acis_gui_task+0x28e0>
                  font_printf(-125,18 + font_getHeight()*i,"%d", (int32_t)roundf((TableOffset(TableConfig[menuselected].valuei, int32_t) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier));
 8003abe:	f00b fc8b 	bl	800f3d8 <font_getHeight>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ac8:	fb03 f302 	mul.w	r3, r3, r2
 8003acc:	f103 0412 	add.w	r4, r3, #18
 8003ad0:	498f      	ldr	r1, [pc, #572]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	440b      	add	r3, r1
 8003ade:	3308      	adds	r3, #8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b8b      	ldr	r3, [pc, #556]	; (8003d14 <acis_gui_task+0x2aa8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003aee:	fb03 f301 	mul.w	r3, r3, r1
 8003af2:	4413      	add	r3, r2
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	4886      	ldr	r0, [pc, #536]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afa:	4613      	mov	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4403      	add	r3, r0
 8003b04:	331c      	adds	r3, #28
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	440b      	add	r3, r1
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b12:	497f      	ldr	r1, [pc, #508]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	440b      	add	r3, r1
 8003b20:	3320      	adds	r3, #32
 8003b22:	edd3 7a00 	vldr	s15, [r3]
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2e:	f010 fd23 	bl	8014578 <roundf>
 8003b32:	eef0 7a40 	vmov.f32	s15, s0
 8003b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b3a:	ee17 3a90 	vmov	r3, s15
 8003b3e:	4a78      	ldr	r2, [pc, #480]	; (8003d20 <acis_gui_task+0x2ab4>)
 8003b40:	4621      	mov	r1, r4
 8003b42:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003b46:	f00c fec3 	bl	80108d0 <font_printf>
 8003b4a:	e1b4      	b.n	8003eb6 <acis_gui_task+0x2c4a>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d150      	bne.n	8003bf8 <acis_gui_task+0x298c>
 8003b56:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003b5a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003b5e:	f003 ff43 	bl	80079e8 <DelayDiff>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b69      	ldr	r3, [pc, #420]	; (8003d0c <acis_gui_task+0x2aa0>)
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d846      	bhi.n	8003bf8 <acis_gui_task+0x298c>
                  font_printf(-125,18 + font_getHeight()*i,"> %d", (int32_t)roundf((TableOffset(TableConfig[menuselected].valuei, int32_t) + TableConfig[menuselected].guicorrective) * TableConfig[menuselected].guimultiplier));
 8003b6a:	f00b fc35 	bl	800f3d8 <font_getHeight>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b74:	fb03 f302 	mul.w	r3, r3, r2
 8003b78:	f103 0412 	add.w	r4, r3, #18
 8003b7c:	4964      	ldr	r1, [pc, #400]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b80:	4613      	mov	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	440b      	add	r3, r1
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b60      	ldr	r3, [pc, #384]	; (8003d14 <acis_gui_task+0x2aa8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4619      	mov	r1, r3
 8003b96:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003b9a:	fb03 f301 	mul.w	r3, r3, r1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	485b      	ldr	r0, [pc, #364]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4403      	add	r3, r0
 8003bb0:	331c      	adds	r3, #28
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	440b      	add	r3, r1
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bbe:	4954      	ldr	r1, [pc, #336]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	440b      	add	r3, r1
 8003bcc:	3320      	adds	r3, #32
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	f010 fccd 	bl	8014578 <roundf>
 8003bde:	eef0 7a40 	vmov.f32	s15, s0
 8003be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be6:	ee17 3a90 	vmov	r3, s15
 8003bea:	4a4e      	ldr	r2, [pc, #312]	; (8003d24 <acis_gui_task+0x2ab8>)
 8003bec:	4621      	mov	r1, r4
 8003bee:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003bf2:	f00c fe6d 	bl	80108d0 <font_printf>
 8003bf6:	e15e      	b.n	8003eb6 <acis_gui_task+0x2c4a>
                else if(DelayDiff(now, select_timeout) > 800000)
 8003bf8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003bfc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003c00:	f003 fef2 	bl	80079e8 <DelayDiff>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b45      	ldr	r3, [pc, #276]	; (8003d1c <acis_gui_task+0x2ab0>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f240 8154 	bls.w	8003eb6 <acis_gui_task+0x2c4a>
                  select_timeout = now;
 8003c0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003c16:	e14e      	b.n	8003eb6 <acis_gui_task+0x2c4a>
              }
              else if(&TableConfig[menuselected].values)
              {
                if((menuselecting == 0 || menuitem != menuselected))
 8003c18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <acis_gui_task+0x29be>
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d021      	beq.n	8003c6e <acis_gui_task+0x2a02>
                  font_printf(-125,18 + font_getHeight()*i,"%s", &TableOffset(TableConfig[menuselected].values, char));
 8003c2a:	f00b fbd5 	bl	800f3d8 <font_getHeight>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c34:	fb03 f302 	mul.w	r3, r3, r2
 8003c38:	f103 0012 	add.w	r0, r3, #18
 8003c3c:	4934      	ldr	r1, [pc, #208]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	440b      	add	r3, r1
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <acis_gui_task+0x2aa8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003c5a:	fb03 f301 	mul.w	r3, r3, r1
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a31      	ldr	r2, [pc, #196]	; (8003d28 <acis_gui_task+0x2abc>)
 8003c62:	4601      	mov	r1, r0
 8003c64:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003c68:	f00c fe32 	bl	80108d0 <font_printf>
 8003c6c:	e123      	b.n	8003eb6 <acis_gui_task+0x2c4a>
                else if(menuselecting == 1 && menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8003c6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d130      	bne.n	8003cd8 <acis_gui_task+0x2a6c>
 8003c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d12b      	bne.n	8003cd8 <acis_gui_task+0x2a6c>
 8003c80:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003c84:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003c88:	f003 feae 	bl	80079e8 <DelayDiff>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <acis_gui_task+0x2aa0>)
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d821      	bhi.n	8003cd8 <acis_gui_task+0x2a6c>
                  font_printf(-125,18 + font_getHeight()*i,"> %s", &TableOffset(TableConfig[menuselected].values, char));
 8003c94:	f00b fba0 	bl	800f3d8 <font_getHeight>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c9e:	fb03 f302 	mul.w	r3, r3, r2
 8003ca2:	f103 0012 	add.w	r0, r3, #18
 8003ca6:	491a      	ldr	r1, [pc, #104]	; (8003d10 <acis_gui_task+0x2aa4>)
 8003ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <acis_gui_task+0x2aa8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003cc4:	fb03 f301 	mul.w	r3, r3, r1
 8003cc8:	4413      	add	r3, r2
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <acis_gui_task+0x2ac0>)
 8003ccc:	4601      	mov	r1, r0
 8003cce:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8003cd2:	f00c fdfd 	bl	80108d0 <font_printf>
 8003cd6:	e0ee      	b.n	8003eb6 <acis_gui_task+0x2c4a>
                else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d170      	bne.n	8003dc4 <acis_gui_task+0x2b58>
 8003ce2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003ce6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003cea:	f003 fe7d 	bl	80079e8 <DelayDiff>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <acis_gui_task+0x2aa0>)
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d866      	bhi.n	8003dc4 <acis_gui_task+0x2b58>
                {
                  int width = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                  int widthbf = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                  for(int j = 0; j < TABLE_STRING_MAX; j++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d08:	e057      	b.n	8003dba <acis_gui_task+0x2b4e>
 8003d0a:	bf00      	nop
 8003d0c:	0007a11f 	.word	0x0007a11f
 8003d10:	08014fd0 	.word	0x08014fd0
 8003d14:	200068c8 	.word	0x200068c8
 8003d18:	080149dc 	.word	0x080149dc
 8003d1c:	000c3500 	.word	0x000c3500
 8003d20:	08014964 	.word	0x08014964
 8003d24:	08014968 	.word	0x08014968
 8003d28:	080149e4 	.word	0x080149e4
 8003d2c:	080149e8 	.word	0x080149e8
                  {
                    char chr = tablestring[j];
 8003d30:	f107 0220 	add.w	r2, r7, #32
 8003d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    width += font_printf(-125 + width,18 + font_getHeight()*i,"%c", chr);
 8003d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d44:	f1a3 047d 	sub.w	r4, r3, #125	; 0x7d
 8003d48:	f00b fb46 	bl	800f3d8 <font_getHeight>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d52:	fb03 f302 	mul.w	r3, r3, r2
 8003d56:	f103 0112 	add.w	r1, r3, #18
 8003d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d5e:	4ade      	ldr	r2, [pc, #888]	; (80040d8 <acis_gui_task+0x2e6c>)
 8003d60:	4620      	mov	r0, r4
 8003d62:	f00c fdb5 	bl	80108d0 <font_printf>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                    if(j == stringchar)
 8003d72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d114      	bne.n	8003da8 <acis_gui_task+0x2b3c>
                    {
                      lcd_rect_solid(125-width, 18 + font_getHeight() - 1, width - widthbf - 1, 1, 1);
 8003d7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d82:	f1c3 047d 	rsb	r4, r3, #125	; 0x7d
 8003d86:	f00b fb27 	bl	800f3d8 <font_getHeight>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f103 0111 	add.w	r1, r3, #17
 8003d90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	1e5a      	subs	r2, r3, #1
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2301      	movs	r3, #1
 8003da2:	4620      	mov	r0, r4
 8003da4:	f003 ffe0 	bl	8007d68 <lcd_rect_solid>
                    }
                    widthbf = width;
 8003da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                  for(int j = 0; j < TABLE_STRING_MAX; j++)
 8003db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003db4:	3301      	adds	r3, #1
 8003db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dbe:	2b0b      	cmp	r3, #11
 8003dc0:	ddb6      	ble.n	8003d30 <acis_gui_task+0x2ac4>
                {
 8003dc2:	e078      	b.n	8003eb6 <acis_gui_task+0x2c4a>
                  }
                }
                else
                {
                  if(menuselecting == 2)
 8003dc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d166      	bne.n	8003e9a <acis_gui_task+0x2c2e>
                  {
                    int width = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                    int widthbf = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    for(int j = 0; j < TABLE_STRING_MAX; j++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dde:	e058      	b.n	8003e92 <acis_gui_task+0x2c26>
                    {
                      char chr = tablestring[j];
 8003de0:	f107 0220 	add.w	r2, r7, #32
 8003de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003de8:	4413      	add	r3, r2
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                      width += font_printf(-125 + widthbf,18 + font_getHeight()*i,"%c", chr);
 8003df0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df4:	f1a3 047d 	sub.w	r4, r3, #125	; 0x7d
 8003df8:	f00b faee 	bl	800f3d8 <font_getHeight>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e02:	fb03 f302 	mul.w	r3, r3, r2
 8003e06:	f103 0112 	add.w	r1, r3, #18
 8003e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003e0e:	4ab2      	ldr	r2, [pc, #712]	; (80040d8 <acis_gui_task+0x2e6c>)
 8003e10:	4620      	mov	r0, r4
 8003e12:	f00c fd5d 	bl	80108d0 <font_printf>
 8003e16:	4602      	mov	r2, r0
 8003e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                      if(j == stringchar)
 8003e22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d128      	bne.n	8003e80 <acis_gui_task+0x2c14>
                      {
                        lcd_rect_solid(125-width, 18, width - widthbf, font_getHeight(), 0);
 8003e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e32:	f1c3 047d 	rsb	r4, r3, #125	; 0x7d
 8003e36:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e3e:	1ad5      	subs	r5, r2, r3
 8003e40:	f00b faca 	bl	800f3d8 <font_getHeight>
 8003e44:	4602      	mov	r2, r0
 8003e46:	2300      	movs	r3, #0
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	2112      	movs	r1, #18
 8003e50:	4620      	mov	r0, r4
 8003e52:	f003 ff89 	bl	8007d68 <lcd_rect_solid>
                        lcd_rect_solid(125-width, 18 + font_getHeight() - 1, width - widthbf - 1, 1, 1);
 8003e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e5a:	f1c3 047d 	rsb	r4, r3, #125	; 0x7d
 8003e5e:	f00b fabb 	bl	800f3d8 <font_getHeight>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f103 0111 	add.w	r1, r3, #17
 8003e68:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	2301      	movs	r3, #1
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f003 ff74 	bl	8007d68 <lcd_rect_solid>
                      }
                      widthbf = width;
 8003e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                    for(int j = 0; j < TABLE_STRING_MAX; j++)
 8003e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e96:	2b0b      	cmp	r3, #11
 8003e98:	dda2      	ble.n	8003de0 <acis_gui_task+0x2b74>
                    }
                  }
                  if(DelayDiff(now, select_timeout) > 800000)
 8003e9a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8003e9e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003ea2:	f003 fda1 	bl	80079e8 <DelayDiff>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b8c      	ldr	r3, [pc, #560]	; (80040dc <acis_gui_task+0x2e70>)
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d903      	bls.n	8003eb6 <acis_gui_task+0x2c4a>
                  {
                    select_timeout = now;
 8003eae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003eb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          for(int i = 0; i < 6; i++)
 8003eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	f77f ace6 	ble.w	8003896 <acis_gui_task+0x262a>
                }
              }
            }
          }

          lcd_update();
 8003eca:	f003 fe31 	bl	8007b30 <lcd_update>
        }
        if(BUT_ENTER)
 8003ece:	4b84      	ldr	r3, [pc, #528]	; (80040e0 <acis_gui_task+0x2e74>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80cf 	beq.w	8004078 <acis_gui_task+0x2e0c>
        {
          display_timeout = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting == 0)
 8003ee0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <acis_gui_task+0x2c8c>
          {
            menuselecting = 1;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            select_timeout = now;
 8003eee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ef6:	e0b0      	b.n	800405a <acis_gui_task+0x2dee>

          }
          else if(menuselecting == 1)
 8003ef8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 80a5 	bne.w	800404c <acis_gui_task+0x2de0>
          {
            select_timeout = now;
 8003f02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003f06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            if(&TableConfig[menuitem].values)
            {
              menuselecting = 2;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
              memset(tablestring, ' ', sizeof(tablestring));
 8003f10:	f107 0320 	add.w	r3, r7, #32
 8003f14:	220c      	movs	r2, #12
 8003f16:	2120      	movs	r1, #32
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f00c fdb6 	bl	8010a8a <memset>
              memset(tablechars, 0, sizeof(tablechars));
 8003f1e:	f107 0308 	add.w	r3, r7, #8
 8003f22:	2218      	movs	r2, #24
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f00c fdaf 	bl	8010a8a <memset>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f32:	e082      	b.n	800403a <acis_gui_task+0x2dce>
              {
                if((&TableOffset(TableConfig[menuitem].values, char))[TABLE_STRING_MAX - i - 1] != 0)
 8003f34:	496b      	ldr	r1, [pc, #428]	; (80040e4 <acis_gui_task+0x2e78>)
 8003f36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	4413      	add	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	440b      	add	r3, r1
 8003f44:	3304      	adds	r3, #4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <acis_gui_task+0x2e7c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003f54:	fb03 f301 	mul.w	r3, r3, r1
 8003f58:	441a      	add	r2, r3
 8003f5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	330b      	adds	r3, #11
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d063      	beq.n	8004030 <acis_gui_task+0x2dc4>
                {
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 8003f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f70:	e059      	b.n	8004026 <acis_gui_task+0x2dba>
                  {
                    char chr = (&TableOffset(TableConfig[menuitem].values, char))[TABLE_STRING_MAX - j - 1];
 8003f72:	495c      	ldr	r1, [pc, #368]	; (80040e4 <acis_gui_task+0x2e78>)
 8003f74:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f78:	4613      	mov	r3, r2
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	4413      	add	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	440b      	add	r3, r1
 8003f82:	3304      	adds	r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <acis_gui_task+0x2e7c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f640 436c 	movw	r3, #3180	; 0xc6c
 8003f92:	fb03 f301 	mul.w	r3, r3, r1
 8003f96:	441a      	add	r2, r3
 8003f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	330b      	adds	r3, #11
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                    uint8_t num = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    for(int k = 0; k < lcd_chars_len; k++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003fb2:	e013      	b.n	8003fdc <acis_gui_task+0x2d70>
                    {
                      if(lcd_chars[k] == chr)
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <acis_gui_task+0x2e80>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fbc:	4413      	add	r3, r2
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d104      	bne.n	8003fd2 <acis_gui_task+0x2d66>
                      {
                        num = k;
 8003fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fcc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                        break;
 8003fd0:	e00a      	b.n	8003fe8 <acis_gui_task+0x2d7c>
                    for(int k = 0; k < lcd_chars_len; k++)
 8003fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003fdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003fe0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	dbe5      	blt.n	8003fb4 <acis_gui_task+0x2d48>
                      }
                    }
                    tablestring[j - i] = chr;
 8003fe8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003ffc:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    tablechars[j - i] = num;
 8004000:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800400e:	b212      	sxth	r2, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8004016:	440b      	add	r3, r1
 8004018:	f823 2cf8 	strh.w	r2, [r3, #-248]
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 800401c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004020:	3301      	adds	r3, #1
 8004022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800402a:	2b0b      	cmp	r3, #11
 800402c:	dda1      	ble.n	8003f72 <acis_gui_task+0x2d06>
                  }
                  break;
 800402e:	e009      	b.n	8004044 <acis_gui_task+0x2dd8>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 8004030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004034:	3301      	adds	r3, #1
 8004036:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800403a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800403e:	2b0b      	cmp	r3, #11
 8004040:	f77f af78 	ble.w	8003f34 <acis_gui_task+0x2cc8>
                }
              }
              stringchar = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800404a:	e006      	b.n	800405a <acis_gui_task+0x2dee>
            else
            {
              menuselecting = 0;
            }
          }
          else if(menuselecting == 2)
 800404c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004050:	2b02      	cmp	r3, #2
 8004052:	d102      	bne.n	800405a <acis_gui_task+0x2dee>
          {
            menuselecting = 1;
 8004054:	2301      	movs	r3, #1
 8004056:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 800405a:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <acis_gui_task+0x2e84>)
 800405c:	2200      	movs	r2, #0
 800405e:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8004060:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <acis_gui_task+0x2e88>)
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <acis_gui_task+0x2e8c>)
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 800406c:	4b23      	ldr	r3, [pc, #140]	; (80040fc <acis_gui_task+0x2e90>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <acis_gui_task+0x2e74>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8004078:	4b21      	ldr	r3, [pc, #132]	; (8004100 <acis_gui_task+0x2e94>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80b7 	beq.w	80041f2 <acis_gui_task+0x2f86>
        {
          display_timeout = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting > 0)
 800408a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80a0 	beq.w	80041d4 <acis_gui_task+0x2f68>
          {
            if(menuselecting == 2)
 8004094:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004098:	2b02      	cmp	r3, #2
 800409a:	f040 8092 	bne.w	80041c2 <acis_gui_task+0x2f56>
            {
              memset(&TableOffset(TableConfig[menuitem].values, char), '\0', TABLE_STRING_MAX);
 800409e:	4911      	ldr	r1, [pc, #68]	; (80040e4 <acis_gui_task+0x2e78>)
 80040a0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	440b      	add	r3, r1
 80040ae:	3304      	adds	r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <acis_gui_task+0x2e7c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	f640 436c 	movw	r3, #3180	; 0xc6c
 80040be:	fb03 f301 	mul.w	r3, r3, r1
 80040c2:	4413      	add	r3, r2
 80040c4:	220c      	movs	r2, #12
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f00c fcde 	bl	8010a8a <memset>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d4:	e05a      	b.n	800418c <acis_gui_task+0x2f20>
 80040d6:	bf00      	nop
 80040d8:	080149f0 	.word	0x080149f0
 80040dc:	000c3500 	.word	0x000c3500
 80040e0:	20006904 	.word	0x20006904
 80040e4:	08014fd0 	.word	0x08014fd0
 80040e8:	200068c8 	.word	0x200068c8
 80040ec:	200003d0 	.word	0x200003d0
 80040f0:	20006902 	.word	0x20006902
 80040f4:	20006903 	.word	0x20006903
 80040f8:	20006900 	.word	0x20006900
 80040fc:	20006901 	.word	0x20006901
 8004100:	20006905 	.word	0x20006905
              {
                if(tablestring[TABLE_STRING_MAX - i - 1] != ' ')
 8004104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004108:	f1c3 030b 	rsb	r3, r3, #11
 800410c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004110:	4413      	add	r3, r2
 8004112:	f813 3ce0 	ldrb.w	r3, [r3, #-224]
 8004116:	2b20      	cmp	r3, #32
 8004118:	d033      	beq.n	8004182 <acis_gui_task+0x2f16>
                {
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 800411a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800411e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004122:	e029      	b.n	8004178 <acis_gui_task+0x2f0c>
                    (&TableOffset(TableConfig[menuitem].values, char))[j - i] = tablestring[TABLE_STRING_MAX - j - 1];
 8004124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004128:	f1c3 010b 	rsb	r1, r3, #11
 800412c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	461c      	mov	r4, r3
 8004138:	48a6      	ldr	r0, [pc, #664]	; (80043d4 <acis_gui_task+0x3168>)
 800413a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	4403      	add	r3, r0
 8004148:	3304      	adds	r3, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	4ba2      	ldr	r3, [pc, #648]	; (80043d8 <acis_gui_task+0x316c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004158:	fb03 f300 	mul.w	r3, r3, r0
 800415c:	4413      	add	r3, r2
 800415e:	4423      	add	r3, r4
 8004160:	461a      	mov	r2, r3
 8004162:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004166:	440b      	add	r3, r1
 8004168:	f813 3ce0 	ldrb.w	r3, [r3, #-224]
 800416c:	7013      	strb	r3, [r2, #0]
                  for(int j = i; j < TABLE_STRING_MAX; j++)
 800416e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004172:	3301      	adds	r3, #1
 8004174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800417c:	2b0b      	cmp	r3, #11
 800417e:	ddd1      	ble.n	8004124 <acis_gui_task+0x2eb8>
                  break;
 8004180:	e008      	b.n	8004194 <acis_gui_task+0x2f28>
              for(int i = 0; i < TABLE_STRING_MAX; i++)
 8004182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004186:	3301      	adds	r3, #1
 8004188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800418c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004190:	2b0b      	cmp	r3, #11
 8004192:	ddb7      	ble.n	8004104 <acis_gui_task+0x2e98>
                }
              }
              acis_apply_parameter(&TableOffset(TableConfig[menuitem].values, char), TABLE_STRING_MAX);
 8004194:	498f      	ldr	r1, [pc, #572]	; (80043d4 <acis_gui_task+0x3168>)
 8004196:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	440b      	add	r3, r1
 80041a4:	3304      	adds	r3, #4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b8b      	ldr	r3, [pc, #556]	; (80043d8 <acis_gui_task+0x316c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	f640 436c 	movw	r3, #3180	; 0xc6c
 80041b4:	fb03 f301 	mul.w	r3, r3, r1
 80041b8:	4413      	add	r3, r2
 80041ba:	210c      	movs	r1, #12
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fc ff57 	bl	8001070 <acis_apply_parameter>
            }
            select_timeout = now;
 80041c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            menuselecting--;
 80041ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041ce:	3b01      	subs	r3, #1
 80041d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 80041d4:	4b81      	ldr	r3, [pc, #516]	; (80043dc <acis_gui_task+0x3170>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 80041da:	4b81      	ldr	r3, [pc, #516]	; (80043e0 <acis_gui_task+0x3174>)
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 80041e0:	4b80      	ldr	r3, [pc, #512]	; (80043e4 <acis_gui_task+0x3178>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 80041e6:	4b80      	ldr	r3, [pc, #512]	; (80043e8 <acis_gui_task+0x317c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 80041ec:	4b7f      	ldr	r3, [pc, #508]	; (80043ec <acis_gui_task+0x3180>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 80041f2:	4b7c      	ldr	r3, [pc, #496]	; (80043e4 <acis_gui_task+0x3178>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <acis_gui_task+0x2fa8>
 80041fc:	4b7c      	ldr	r3, [pc, #496]	; (80043f0 <acis_gui_task+0x3184>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 81c9 	beq.w	800459a <acis_gui_task+0x332e>
 8004208:	4b7a      	ldr	r3, [pc, #488]	; (80043f4 <acis_gui_task+0x3188>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004210:	f240 81c3 	bls.w	800459a <acis_gui_task+0x332e>
        {
          display_timeout = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 100;
 800421a:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <acis_gui_task+0x3188>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b64      	cmp	r3, #100	; 0x64
 8004220:	d904      	bls.n	800422c <acis_gui_task+0x2fc0>
 8004222:	4b74      	ldr	r3, [pc, #464]	; (80043f4 <acis_gui_task+0x3188>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3b64      	subs	r3, #100	; 0x64
 8004228:	4a72      	ldr	r2, [pc, #456]	; (80043f4 <acis_gui_task+0x3188>)
 800422a:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 800422c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 81b2 	beq.w	800459a <acis_gui_task+0x332e>
          {
            if(menuselecting == 1)
 8004236:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800423a:	2b01      	cmp	r3, #1
 800423c:	f040 8196 	bne.w	800456c <acis_gui_task+0x3300>
            {
              if(StatusSynchronized && TableConfig[menuitem].step)
 8004240:	4b6d      	ldr	r3, [pc, #436]	; (80043f8 <acis_gui_task+0x318c>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 81a0 	beq.w	800458c <acis_gui_task+0x3320>
 800424c:	4961      	ldr	r1, [pc, #388]	; (80043d4 <acis_gui_task+0x3168>)
 800424e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	440b      	add	r3, r1
 800425c:	3318      	adds	r3, #24
 800425e:	edd3 7a00 	vldr	s15, [r3]
 8004262:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426a:	f000 818f 	beq.w	800458c <acis_gui_task+0x3320>
              {
                if(TableConfig[menuitem].valuef)
 800426e:	4959      	ldr	r1, [pc, #356]	; (80043d4 <acis_gui_task+0x3168>)
 8004270:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004274:	4613      	mov	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4413      	add	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	440b      	add	r3, r1
 800427e:	330c      	adds	r3, #12
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80ba 	beq.w	80043fc <acis_gui_task+0x3190>
                {
                  if(TableOffset(TableConfig[menuitem].valuef, float) - TableConfig[menuitem].step < TableConfig[menuitem].min)
 8004288:	4952      	ldr	r1, [pc, #328]	; (80043d4 <acis_gui_task+0x3168>)
 800428a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800428e:	4613      	mov	r3, r2
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	4413      	add	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	440b      	add	r3, r1
 8004298:	330c      	adds	r3, #12
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <acis_gui_task+0x316c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	f640 436c 	movw	r3, #3180	; 0xc6c
 80042a8:	fb03 f301 	mul.w	r3, r3, r1
 80042ac:	4413      	add	r3, r2
 80042ae:	ed93 7a00 	vldr	s14, [r3]
 80042b2:	4948      	ldr	r1, [pc, #288]	; (80043d4 <acis_gui_task+0x3168>)
 80042b4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	440b      	add	r3, r1
 80042c2:	3318      	adds	r3, #24
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042cc:	4941      	ldr	r1, [pc, #260]	; (80043d4 <acis_gui_task+0x3168>)
 80042ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042d2:	4613      	mov	r3, r2
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	4413      	add	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	440b      	add	r3, r1
 80042dc:	3310      	adds	r3, #16
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	ee07 3a90 	vmov	s15, r3
 80042e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d523      	bpl.n	800433a <acis_gui_task+0x30ce>
                    TableOffset(TableConfig[menuitem].valuef, float) = TableConfig[menuitem].min;
 80042f2:	4938      	ldr	r1, [pc, #224]	; (80043d4 <acis_gui_task+0x3168>)
 80042f4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	440b      	add	r3, r1
 8004302:	3310      	adds	r3, #16
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	4933      	ldr	r1, [pc, #204]	; (80043d4 <acis_gui_task+0x3168>)
 8004308:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	440b      	add	r3, r1
 8004316:	330c      	adds	r3, #12
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <acis_gui_task+0x316c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4619      	mov	r1, r3
 8004322:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004326:	fb03 f301 	mul.w	r3, r3, r1
 800432a:	4413      	add	r3, r2
 800432c:	ee07 0a90 	vmov	s15, r0
 8004330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004334:	edc3 7a00 	vstr	s15, [r3]
 8004338:	e034      	b.n	80043a4 <acis_gui_task+0x3138>
                  else TableOffset(TableConfig[menuitem].valuef, float) -= TableConfig[menuitem].step;
 800433a:	4926      	ldr	r1, [pc, #152]	; (80043d4 <acis_gui_task+0x3168>)
 800433c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	440b      	add	r3, r1
 800434a:	330c      	adds	r3, #12
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <acis_gui_task+0x316c>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	4601      	mov	r1, r0
 8004356:	f640 436c 	movw	r3, #3180	; 0xc6c
 800435a:	fb03 f301 	mul.w	r3, r3, r1
 800435e:	4413      	add	r3, r2
 8004360:	ed93 7a00 	vldr	s14, [r3]
 8004364:	491b      	ldr	r1, [pc, #108]	; (80043d4 <acis_gui_task+0x3168>)
 8004366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800436a:	4613      	mov	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4413      	add	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	440b      	add	r3, r1
 8004374:	3318      	adds	r3, #24
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	4916      	ldr	r1, [pc, #88]	; (80043d4 <acis_gui_task+0x3168>)
 800437c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	440b      	add	r3, r1
 800438a:	330c      	adds	r3, #12
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4601      	mov	r1, r0
 8004392:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004396:	fb03 f301 	mul.w	r3, r3, r1
 800439a:	4413      	add	r3, r2
 800439c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043a0:	edc3 7a00 	vstr	s15, [r3]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuef, float), sizeof(float));
 80043a4:	490b      	ldr	r1, [pc, #44]	; (80043d4 <acis_gui_task+0x3168>)
 80043a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	440b      	add	r3, r1
 80043b4:	330c      	adds	r3, #12
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <acis_gui_task+0x316c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	f640 436c 	movw	r3, #3180	; 0xc6c
 80043c4:	fb03 f301 	mul.w	r3, r3, r1
 80043c8:	4413      	add	r3, r2
 80043ca:	2104      	movs	r1, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fc fe4f 	bl	8001070 <acis_apply_parameter>
 80043d2:	e0db      	b.n	800458c <acis_gui_task+0x3320>
 80043d4:	08014fd0 	.word	0x08014fd0
 80043d8:	200068c8 	.word	0x200068c8
 80043dc:	20006902 	.word	0x20006902
 80043e0:	20006903 	.word	0x20006903
 80043e4:	20006900 	.word	0x20006900
 80043e8:	20006901 	.word	0x20006901
 80043ec:	20006905 	.word	0x20006905
 80043f0:	200068e0 	.word	0x200068e0
 80043f4:	200068e8 	.word	0x200068e8
 80043f8:	2000689e 	.word	0x2000689e
                }
                else if(TableConfig[menuitem].valuei)
 80043fc:	49b9      	ldr	r1, [pc, #740]	; (80046e4 <acis_gui_task+0x3478>)
 80043fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004402:	4613      	mov	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4413      	add	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	440b      	add	r3, r1
 800440c:	3308      	adds	r3, #8
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80bb 	beq.w	800458c <acis_gui_task+0x3320>
                {
                  if(TableOffset(TableConfig[menuitem].valuei, int32_t) - TableConfig[menuitem].step < TableConfig[menuitem].min)
 8004416:	49b3      	ldr	r1, [pc, #716]	; (80046e4 <acis_gui_task+0x3478>)
 8004418:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	440b      	add	r3, r1
 8004426:	3308      	adds	r3, #8
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	4bae      	ldr	r3, [pc, #696]	; (80046e8 <acis_gui_task+0x347c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4619      	mov	r1, r3
 8004432:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004436:	fb03 f301 	mul.w	r3, r3, r1
 800443a:	4413      	add	r3, r2
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004446:	49a7      	ldr	r1, [pc, #668]	; (80046e4 <acis_gui_task+0x3478>)
 8004448:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	440b      	add	r3, r1
 8004456:	3318      	adds	r3, #24
 8004458:	edd3 7a00 	vldr	s15, [r3]
 800445c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004460:	49a0      	ldr	r1, [pc, #640]	; (80046e4 <acis_gui_task+0x3478>)
 8004462:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	440b      	add	r3, r1
 8004470:	3310      	adds	r3, #16
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800447c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004484:	d51f      	bpl.n	80044c6 <acis_gui_task+0x325a>
                    TableOffset(TableConfig[menuitem].valuei, int32_t) = TableConfig[menuitem].min;
 8004486:	4997      	ldr	r1, [pc, #604]	; (80046e4 <acis_gui_task+0x3478>)
 8004488:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800448c:	4613      	mov	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4413      	add	r3, r2
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	440b      	add	r3, r1
 8004496:	3308      	adds	r3, #8
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	4b92      	ldr	r3, [pc, #584]	; (80046e8 <acis_gui_task+0x347c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	f640 436c 	movw	r3, #3180	; 0xc6c
 80044a6:	fb03 f301 	mul.w	r3, r3, r1
 80044aa:	4413      	add	r3, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	498d      	ldr	r1, [pc, #564]	; (80046e4 <acis_gui_task+0x3478>)
 80044b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	440b      	add	r3, r1
 80044be:	3310      	adds	r3, #16
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6003      	str	r3, [r0, #0]
 80044c4:	e03a      	b.n	800453c <acis_gui_task+0x32d0>
                  else TableOffset(TableConfig[menuitem].valuei, int32_t) -= TableConfig[menuitem].step;
 80044c6:	4987      	ldr	r1, [pc, #540]	; (80046e4 <acis_gui_task+0x3478>)
 80044c8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	440b      	add	r3, r1
 80044d6:	3308      	adds	r3, #8
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <acis_gui_task+0x347c>)
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	4601      	mov	r1, r0
 80044e2:	f640 436c 	movw	r3, #3180	; 0xc6c
 80044e6:	fb03 f301 	mul.w	r3, r3, r1
 80044ea:	4413      	add	r3, r2
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f6:	497b      	ldr	r1, [pc, #492]	; (80046e4 <acis_gui_task+0x3478>)
 80044f8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	440b      	add	r3, r1
 8004506:	3318      	adds	r3, #24
 8004508:	edd3 7a00 	vldr	s15, [r3]
 800450c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004510:	4974      	ldr	r1, [pc, #464]	; (80046e4 <acis_gui_task+0x3478>)
 8004512:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	440b      	add	r3, r1
 8004520:	3308      	adds	r3, #8
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4601      	mov	r1, r0
 8004528:	f640 436c 	movw	r3, #3180	; 0xc6c
 800452c:	fb03 f301 	mul.w	r3, r3, r1
 8004530:	4413      	add	r3, r2
 8004532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004536:	ee17 2a90 	vmov	r2, s15
 800453a:	601a      	str	r2, [r3, #0]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuei, int32_t), sizeof(int32_t));
 800453c:	4969      	ldr	r1, [pc, #420]	; (80046e4 <acis_gui_task+0x3478>)
 800453e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	440b      	add	r3, r1
 800454c:	3308      	adds	r3, #8
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b65      	ldr	r3, [pc, #404]	; (80046e8 <acis_gui_task+0x347c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4619      	mov	r1, r3
 8004558:	f640 436c 	movw	r3, #3180	; 0xc6c
 800455c:	fb03 f301 	mul.w	r3, r3, r1
 8004560:	4413      	add	r3, r2
 8004562:	2104      	movs	r1, #4
 8004564:	4618      	mov	r0, r3
 8004566:	f7fc fd83 	bl	8001070 <acis_apply_parameter>
 800456a:	e00f      	b.n	800458c <acis_gui_task+0x3320>
                }
              }
            }
            else if(menuselecting == 2)
 800456c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004570:	2b02      	cmp	r3, #2
 8004572:	d10b      	bne.n	800458c <acis_gui_task+0x3320>
            {
              if(++stringchar >= TABLE_STRING_MAX - 1) stringchar = TABLE_STRING_MAX - 2;
 8004574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004578:	3301      	adds	r3, #1
 800457a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800457e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004582:	2b0a      	cmp	r3, #10
 8004584:	dd02      	ble.n	800458c <acis_gui_task+0x3320>
 8004586:	230a      	movs	r3, #10
 8004588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            }
            select_timeout = now;
 800458c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004590:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_LEFT = 0;
 8004594:	4b55      	ldr	r3, [pc, #340]	; (80046ec <acis_gui_task+0x3480>)
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 800459a:	4b55      	ldr	r3, [pc, #340]	; (80046f0 <acis_gui_task+0x3484>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <acis_gui_task+0x3350>
 80045a4:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <acis_gui_task+0x3488>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 81c4 	beq.w	8004938 <acis_gui_task+0x36cc>
 80045b0:	4b51      	ldr	r3, [pc, #324]	; (80046f8 <acis_gui_task+0x348c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80045b8:	f240 81be 	bls.w	8004938 <acis_gui_task+0x36cc>
        {
          display_timeout = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 100;
 80045c2:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <acis_gui_task+0x348c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d904      	bls.n	80045d4 <acis_gui_task+0x3368>
 80045ca:	4b4b      	ldr	r3, [pc, #300]	; (80046f8 <acis_gui_task+0x348c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3b64      	subs	r3, #100	; 0x64
 80045d0:	4a49      	ldr	r2, [pc, #292]	; (80046f8 <acis_gui_task+0x348c>)
 80045d2:	6013      	str	r3, [r2, #0]
          if(menuselecting)
 80045d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 81ad 	beq.w	8004938 <acis_gui_task+0x36cc>
          {
            if(menuselecting == 1)
 80045de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	f040 8191 	bne.w	800490a <acis_gui_task+0x369e>
            {
              if(StatusSynchronized && TableConfig[menuitem].step)
 80045e8:	4b44      	ldr	r3, [pc, #272]	; (80046fc <acis_gui_task+0x3490>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 819b 	beq.w	800492a <acis_gui_task+0x36be>
 80045f4:	493b      	ldr	r1, [pc, #236]	; (80046e4 <acis_gui_task+0x3478>)
 80045f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	440b      	add	r3, r1
 8004604:	3318      	adds	r3, #24
 8004606:	edd3 7a00 	vldr	s15, [r3]
 800460a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	f000 818a 	beq.w	800492a <acis_gui_task+0x36be>
              {
                if(TableConfig[menuitem].valuef)
 8004616:	4933      	ldr	r1, [pc, #204]	; (80046e4 <acis_gui_task+0x3478>)
 8004618:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	440b      	add	r3, r1
 8004626:	330c      	adds	r3, #12
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80b5 	beq.w	800479a <acis_gui_task+0x352e>
                {
                  if(TableOffset(TableConfig[menuitem].valuef, float) + TableConfig[menuitem].step > TableConfig[menuitem].max)
 8004630:	492c      	ldr	r1, [pc, #176]	; (80046e4 <acis_gui_task+0x3478>)
 8004632:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	440b      	add	r3, r1
 8004640:	330c      	adds	r3, #12
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <acis_gui_task+0x347c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4619      	mov	r1, r3
 800464c:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004650:	fb03 f301 	mul.w	r3, r3, r1
 8004654:	4413      	add	r3, r2
 8004656:	ed93 7a00 	vldr	s14, [r3]
 800465a:	4922      	ldr	r1, [pc, #136]	; (80046e4 <acis_gui_task+0x3478>)
 800465c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004660:	4613      	mov	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4413      	add	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	440b      	add	r3, r1
 800466a:	3318      	adds	r3, #24
 800466c:	edd3 7a00 	vldr	s15, [r3]
 8004670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004674:	491b      	ldr	r1, [pc, #108]	; (80046e4 <acis_gui_task+0x3478>)
 8004676:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	440b      	add	r3, r1
 8004684:	3314      	adds	r3, #20
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	ee07 3a90 	vmov	s15, r3
 800468c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004698:	dd32      	ble.n	8004700 <acis_gui_task+0x3494>
                    TableOffset(TableConfig[menuitem].valuef, float) = TableConfig[menuitem].max;
 800469a:	4912      	ldr	r1, [pc, #72]	; (80046e4 <acis_gui_task+0x3478>)
 800469c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	440b      	add	r3, r1
 80046aa:	3314      	adds	r3, #20
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	490d      	ldr	r1, [pc, #52]	; (80046e4 <acis_gui_task+0x3478>)
 80046b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046b4:	4613      	mov	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4413      	add	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	440b      	add	r3, r1
 80046be:	330c      	adds	r3, #12
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <acis_gui_task+0x347c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4619      	mov	r1, r3
 80046ca:	f640 436c 	movw	r3, #3180	; 0xc6c
 80046ce:	fb03 f301 	mul.w	r3, r3, r1
 80046d2:	4413      	add	r3, r2
 80046d4:	ee07 0a90 	vmov	s15, r0
 80046d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046dc:	edc3 7a00 	vstr	s15, [r3]
 80046e0:	e043      	b.n	800476a <acis_gui_task+0x34fe>
 80046e2:	bf00      	nop
 80046e4:	08014fd0 	.word	0x08014fd0
 80046e8:	200068c8 	.word	0x200068c8
 80046ec:	20006900 	.word	0x20006900
 80046f0:	20006901 	.word	0x20006901
 80046f4:	200068e1 	.word	0x200068e1
 80046f8:	200068ec 	.word	0x200068ec
 80046fc:	2000689e 	.word	0x2000689e
                  else TableOffset(TableConfig[menuitem].valuef, float) += TableConfig[menuitem].step;
 8004700:	49a2      	ldr	r1, [pc, #648]	; (800498c <acis_gui_task+0x3720>)
 8004702:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	440b      	add	r3, r1
 8004710:	330c      	adds	r3, #12
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	4b9e      	ldr	r3, [pc, #632]	; (8004990 <acis_gui_task+0x3724>)
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	4601      	mov	r1, r0
 800471c:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004720:	fb03 f301 	mul.w	r3, r3, r1
 8004724:	4413      	add	r3, r2
 8004726:	ed93 7a00 	vldr	s14, [r3]
 800472a:	4998      	ldr	r1, [pc, #608]	; (800498c <acis_gui_task+0x3720>)
 800472c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	440b      	add	r3, r1
 800473a:	3318      	adds	r3, #24
 800473c:	edd3 7a00 	vldr	s15, [r3]
 8004740:	4992      	ldr	r1, [pc, #584]	; (800498c <acis_gui_task+0x3720>)
 8004742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	440b      	add	r3, r1
 8004750:	330c      	adds	r3, #12
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	4601      	mov	r1, r0
 8004758:	f640 436c 	movw	r3, #3180	; 0xc6c
 800475c:	fb03 f301 	mul.w	r3, r3, r1
 8004760:	4413      	add	r3, r2
 8004762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004766:	edc3 7a00 	vstr	s15, [r3]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuef, float), sizeof(float));
 800476a:	4988      	ldr	r1, [pc, #544]	; (800498c <acis_gui_task+0x3720>)
 800476c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004770:	4613      	mov	r3, r2
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	4413      	add	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	440b      	add	r3, r1
 800477a:	330c      	adds	r3, #12
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	4b83      	ldr	r3, [pc, #524]	; (8004990 <acis_gui_task+0x3724>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4619      	mov	r1, r3
 8004786:	f640 436c 	movw	r3, #3180	; 0xc6c
 800478a:	fb03 f301 	mul.w	r3, r3, r1
 800478e:	4413      	add	r3, r2
 8004790:	2104      	movs	r1, #4
 8004792:	4618      	mov	r0, r3
 8004794:	f7fc fc6c 	bl	8001070 <acis_apply_parameter>
 8004798:	e0c7      	b.n	800492a <acis_gui_task+0x36be>
                }
                else if(TableConfig[menuitem].valuei)
 800479a:	497c      	ldr	r1, [pc, #496]	; (800498c <acis_gui_task+0x3720>)
 800479c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	440b      	add	r3, r1
 80047aa:	3308      	adds	r3, #8
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80bb 	beq.w	800492a <acis_gui_task+0x36be>
                {
                  if(TableOffset(TableConfig[menuitem].valuei, int32_t) + TableConfig[menuitem].step > TableConfig[menuitem].max)
 80047b4:	4975      	ldr	r1, [pc, #468]	; (800498c <acis_gui_task+0x3720>)
 80047b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047ba:	4613      	mov	r3, r2
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	4413      	add	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	3308      	adds	r3, #8
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b71      	ldr	r3, [pc, #452]	; (8004990 <acis_gui_task+0x3724>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	f640 436c 	movw	r3, #3180	; 0xc6c
 80047d4:	fb03 f301 	mul.w	r3, r3, r1
 80047d8:	4413      	add	r3, r2
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e4:	4969      	ldr	r1, [pc, #420]	; (800498c <acis_gui_task+0x3720>)
 80047e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	440b      	add	r3, r1
 80047f4:	3318      	adds	r3, #24
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047fe:	4963      	ldr	r1, [pc, #396]	; (800498c <acis_gui_task+0x3720>)
 8004800:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	440b      	add	r3, r1
 800480e:	3314      	adds	r3, #20
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800481a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800481e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004822:	dd1f      	ble.n	8004864 <acis_gui_task+0x35f8>
                    TableOffset(TableConfig[menuitem].valuei, int32_t) = TableConfig[menuitem].max;
 8004824:	4959      	ldr	r1, [pc, #356]	; (800498c <acis_gui_task+0x3720>)
 8004826:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800482a:	4613      	mov	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4413      	add	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	440b      	add	r3, r1
 8004834:	3308      	adds	r3, #8
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	4b55      	ldr	r3, [pc, #340]	; (8004990 <acis_gui_task+0x3724>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004844:	fb03 f301 	mul.w	r3, r3, r1
 8004848:	4413      	add	r3, r2
 800484a:	4618      	mov	r0, r3
 800484c:	494f      	ldr	r1, [pc, #316]	; (800498c <acis_gui_task+0x3720>)
 800484e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	440b      	add	r3, r1
 800485c:	3314      	adds	r3, #20
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6003      	str	r3, [r0, #0]
 8004862:	e03a      	b.n	80048da <acis_gui_task+0x366e>
                  else TableOffset(TableConfig[menuitem].valuei, int32_t) += TableConfig[menuitem].step;
 8004864:	4949      	ldr	r1, [pc, #292]	; (800498c <acis_gui_task+0x3720>)
 8004866:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	440b      	add	r3, r1
 8004874:	3308      	adds	r3, #8
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <acis_gui_task+0x3724>)
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	4601      	mov	r1, r0
 8004880:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004884:	fb03 f301 	mul.w	r3, r3, r1
 8004888:	4413      	add	r3, r2
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004894:	493d      	ldr	r1, [pc, #244]	; (800498c <acis_gui_task+0x3720>)
 8004896:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	440b      	add	r3, r1
 80048a4:	3318      	adds	r3, #24
 80048a6:	edd3 7a00 	vldr	s15, [r3]
 80048aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ae:	4937      	ldr	r1, [pc, #220]	; (800498c <acis_gui_task+0x3720>)
 80048b0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	440b      	add	r3, r1
 80048be:	3308      	adds	r3, #8
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	4601      	mov	r1, r0
 80048c6:	f640 436c 	movw	r3, #3180	; 0xc6c
 80048ca:	fb03 f301 	mul.w	r3, r3, r1
 80048ce:	4413      	add	r3, r2
 80048d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048d4:	ee17 2a90 	vmov	r2, s15
 80048d8:	601a      	str	r2, [r3, #0]
                  acis_apply_parameter(&TableOffset(TableConfig[menuitem].valuei, int32_t), sizeof(int32_t));
 80048da:	492c      	ldr	r1, [pc, #176]	; (800498c <acis_gui_task+0x3720>)
 80048dc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048e0:	4613      	mov	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	440b      	add	r3, r1
 80048ea:	3308      	adds	r3, #8
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <acis_gui_task+0x3724>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f640 436c 	movw	r3, #3180	; 0xc6c
 80048fa:	fb03 f301 	mul.w	r3, r3, r1
 80048fe:	4413      	add	r3, r2
 8004900:	2104      	movs	r1, #4
 8004902:	4618      	mov	r0, r3
 8004904:	f7fc fbb4 	bl	8001070 <acis_apply_parameter>
 8004908:	e00f      	b.n	800492a <acis_gui_task+0x36be>
                }
              }
            }
            else if(menuselecting == 2)
 800490a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800490e:	2b02      	cmp	r3, #2
 8004910:	d10b      	bne.n	800492a <acis_gui_task+0x36be>
            {
              if(--stringchar < 0) stringchar = 0;
 8004912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004916:	3b01      	subs	r3, #1
 8004918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800491c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004920:	2b00      	cmp	r3, #0
 8004922:	da02      	bge.n	800492a <acis_gui_task+0x36be>
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            }
            select_timeout = now;
 800492a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800492e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            BUT_RIGHT = 0;
 8004932:	4b18      	ldr	r3, [pc, #96]	; (8004994 <acis_gui_task+0x3728>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
          }
        }

        if(BUT_DOWN)
 8004938:	4b17      	ldr	r3, [pc, #92]	; (8004998 <acis_gui_task+0x372c>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d079      	beq.n	8004a36 <acis_gui_task+0x37ca>
        {
          display_timeout = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting == 1)
 8004948:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800494c:	2b01      	cmp	r3, #1
 800494e:	d125      	bne.n	800499c <acis_gui_task+0x3730>
          {
            if(++menuitem >= sizeof(TableConfig) / sizeof(sConfigLinking)) menuitem = sizeof(TableConfig) / sizeof(sConfigLinking) - 1;
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004954:	3301      	adds	r3, #1
 8004956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800495a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495e:	2b08      	cmp	r3, #8
 8004960:	d902      	bls.n	8004968 <acis_gui_task+0x36fc>
 8004962:	2308      	movs	r3, #8
 8004964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 8004968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800496c:	1d1a      	adds	r2, r3, #4
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	429a      	cmp	r2, r3
 8004974:	d204      	bcs.n	8004980 <acis_gui_task+0x3714>
 8004976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800497a:	3b04      	subs	r3, #4
 800497c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 8004980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004984:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004988:	e052      	b.n	8004a30 <acis_gui_task+0x37c4>
 800498a:	bf00      	nop
 800498c:	08014fd0 	.word	0x08014fd0
 8004990:	200068c8 	.word	0x200068c8
 8004994:	20006901 	.word	0x20006901
 8004998:	20006903 	.word	0x20006903
          }
          else if(menuselecting == 2)
 800499c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d145      	bne.n	8004a30 <acis_gui_task+0x37c4>
          {
            if(StatusSynchronized)
 80049a4:	4bbf      	ldr	r3, [pc, #764]	; (8004ca4 <acis_gui_task+0x3a38>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d03c      	beq.n	8004a28 <acis_gui_task+0x37bc>
            {
              if(++tablechars[stringchar] >= lcd_chars_len) tablechars[stringchar] = 0;
 80049ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80049b8:	4413      	add	r3, r2
 80049ba:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	b21a      	sxth	r2, r3
 80049c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80049d0:	440b      	add	r3, r1
 80049d2:	f823 2cf8 	strh.w	r2, [r3, #-248]
 80049d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80049e0:	4413      	add	r3, r2
 80049e2:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049ec:	429a      	cmp	r2, r3
 80049ee:	db08      	blt.n	8004a02 <acis_gui_task+0x3796>
 80049f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80049fa:	4413      	add	r3, r2
 80049fc:	2200      	movs	r2, #0
 80049fe:	f823 2cf8 	strh.w	r2, [r3, #-248]
              tablestring[stringchar] = lcd_chars[tablechars[stringchar]];
 8004a02:	4ba9      	ldr	r3, [pc, #676]	; (8004ca8 <acis_gui_task+0x3a3c>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8004a10:	440b      	add	r3, r1
 8004a12:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 8004a16:	4413      	add	r3, r2
 8004a18:	7819      	ldrb	r1, [r3, #0]
 8004a1a:	f107 0220 	add.w	r2, r7, #32
 8004a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a22:	4413      	add	r3, r2
 8004a24:	460a      	mov	r2, r1
 8004a26:	701a      	strb	r2, [r3, #0]
            }
            select_timeout = now;
 8004a28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_DOWN = 0;
 8004a30:	4b9e      	ldr	r3, [pc, #632]	; (8004cac <acis_gui_task+0x3a40>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8004a36:	4b9e      	ldr	r3, [pc, #632]	; (8004cb0 <acis_gui_task+0x3a44>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d06f      	beq.n	8004b20 <acis_gui_task+0x38b4>
        {
          display_timeout = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting == 1)
 8004a46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d11a      	bne.n	8004a84 <acis_gui_task+0x3818>
          {
            if(--menuitem < 0) menuitem = 0;
 8004a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a52:	3b01      	subs	r3, #1
 8004a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da02      	bge.n	8004a66 <acis_gui_task+0x37fa>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menuitem < menufirst) menufirst = menuitem;
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d903      	bls.n	8004a7a <acis_gui_task+0x380e>
 8004a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 8004a7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004a82:	e04a      	b.n	8004b1a <acis_gui_task+0x38ae>
          }
          else if(menuselecting == 2)
 8004a84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d146      	bne.n	8004b1a <acis_gui_task+0x38ae>
          {
            if(StatusSynchronized)
 8004a8c:	4b85      	ldr	r3, [pc, #532]	; (8004ca4 <acis_gui_task+0x3a38>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d03d      	beq.n	8004b12 <acis_gui_task+0x38a6>
            {
              if(--tablechars[stringchar] < 0) tablechars[stringchar] = lcd_chars_len - 1;
 8004a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	b21a      	sxth	r2, r3
 8004aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8004ab8:	440b      	add	r3, r1
 8004aba:	f823 2cf8 	strh.w	r2, [r3, #-248]
 8004abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004ac8:	4413      	add	r3, r2
 8004aca:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da0c      	bge.n	8004aec <acis_gui_task+0x3880>
 8004ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	b21a      	sxth	r2, r3
 8004adc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f823 2cf8 	strh.w	r2, [r3, #-248]
              tablestring[stringchar] = lcd_chars[tablechars[stringchar]];
 8004aec:	4b6e      	ldr	r3, [pc, #440]	; (8004ca8 <acis_gui_task+0x3a3c>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8004afa:	440b      	add	r3, r1
 8004afc:	f933 3cf8 	ldrsh.w	r3, [r3, #-248]
 8004b00:	4413      	add	r3, r2
 8004b02:	7819      	ldrb	r1, [r3, #0]
 8004b04:	f107 0220 	add.w	r2, r7, #32
 8004b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b0c:	4413      	add	r3, r2
 8004b0e:	460a      	mov	r2, r1
 8004b10:	701a      	strb	r2, [r3, #0]
            }
            select_timeout = now;
 8004b12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_UP = 0;
 8004b1a:	4b65      	ldr	r3, [pc, #404]	; (8004cb0 <acis_gui_task+0x3a44>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++, menuitem = 0;
 8004b20:	4b64      	ldr	r3, [pc, #400]	; (8004cb4 <acis_gui_task+0x3a48>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d013      	beq.n	8004b52 <acis_gui_task+0x38e6>
 8004b2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10f      	bne.n	8004b52 <acis_gui_task+0x38e6>
 8004b32:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <acis_gui_task+0x3a48>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	4b5f      	ldr	r3, [pc, #380]	; (8004cb8 <acis_gui_task+0x3a4c>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4b5d      	ldr	r3, [pc, #372]	; (8004cb8 <acis_gui_task+0x3a4c>)
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b4c:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--, menuitem = 0;

        break;
 8004b4e:	f001 ba55 	b.w	8005ffc <acis_gui_task+0x4d90>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--, menuitem = 0;
 8004b52:	4b5a      	ldr	r3, [pc, #360]	; (8004cbc <acis_gui_task+0x3a50>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f001 824f 	beq.w	8005ffc <acis_gui_task+0x4d90>
 8004b5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f041 824a 	bne.w	8005ffc <acis_gui_task+0x4d90>
 8004b68:	4b54      	ldr	r3, [pc, #336]	; (8004cbc <acis_gui_task+0x3a50>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	4b52      	ldr	r3, [pc, #328]	; (8004cb8 <acis_gui_task+0x3a4c>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	4b4f      	ldr	r3, [pc, #316]	; (8004cb8 <acis_gui_task+0x3a4c>)
 8004b7a:	701a      	strb	r2, [r3, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        break;
 8004b82:	f001 ba3b 	b.w	8005ffc <acis_gui_task+0x4d90>
      }
      case MenuTableSetup :
      {
        if(DelayDiff(now, display_timeout) > 150000)
 8004b86:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8004b8a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004b8e:	f002 ff2b 	bl	80079e8 <DelayDiff>
 8004b92:	4602      	mov	r2, r0
 8004b94:	4b4a      	ldr	r3, [pc, #296]	; (8004cc0 <acis_gui_task+0x3a54>)
 8004b96:	429a      	cmp	r2, r3
 8004b98:	f240 8121 	bls.w	8004dde <acis_gui_task+0x3b72>
        {
          display_timeout = now;
 8004b9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 8004ba4:	f003 f850 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8004ba8:	2301      	movs	r3, #1
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2340      	movs	r3, #64	; 0x40
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f003 f933 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_8x12);
 8004bb8:	4842      	ldr	r0, [pc, #264]	; (8004cc4 <acis_gui_task+0x3a58>)
 8004bba:	f00a fc67 	bl	800f48c <font_setFont>
          font_printf(0,2,"Table Setups");
 8004bbe:	4a42      	ldr	r2, [pc, #264]	; (8004cc8 <acis_gui_task+0x3a5c>)
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f00b fe84 	bl	80108d0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8004bc8:	2301      	movs	r3, #1
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	210f      	movs	r1, #15
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f003 f923 	bl	8007e1e <lcd_rect>

          font_setFont(&rre_5x8);
 8004bd8:	483c      	ldr	r0, [pc, #240]	; (8004ccc <acis_gui_task+0x3a60>)
 8004bda:	f00a fc57 	bl	800f48c <font_setFont>
          for(int i = 0; i < 6; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004be4:	e0f4      	b.n	8004dd0 <acis_gui_task+0x3b64>
          {
            menuselected = menufirst + i;
 8004be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004bea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004bee:	4413      	add	r3, r2
 8004bf0:	64bb      	str	r3, [r7, #72]	; 0x48
            if(menuselected < sizeof(TableSetup) / sizeof(sConfigLinking))
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf4:	2b07      	cmp	r3, #7
 8004bf6:	f200 80e6 	bhi.w	8004dc6 <acis_gui_task+0x3b5a>
            {
              if((!menuselecting || menuitem != menuselected))
 8004bfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <acis_gui_task+0x39a0>
 8004c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d065      	beq.n	8004cd8 <acis_gui_task+0x3a6c>
              {
                if(TableSetup[menuselected].valuei)
 8004c0c:	4930      	ldr	r1, [pc, #192]	; (8004cd0 <acis_gui_task+0x3a64>)
 8004c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	440b      	add	r3, r1
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d029      	beq.n	8004c76 <acis_gui_task+0x3a0a>
                  font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name, TableOffset(TableSetup[menuselected].valuei, int32_t));
 8004c22:	f00a fbd9 	bl	800f3d8 <font_getHeight>
 8004c26:	4602      	mov	r2, r0
 8004c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2c:	fb03 f302 	mul.w	r3, r3, r2
 8004c30:	f103 0012 	add.w	r0, r3, #18
 8004c34:	4926      	ldr	r1, [pc, #152]	; (8004cd0 <acis_gui_task+0x3a64>)
 8004c36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	440b      	add	r3, r1
 8004c42:	681c      	ldr	r4, [r3, #0]
 8004c44:	4922      	ldr	r1, [pc, #136]	; (8004cd0 <acis_gui_task+0x3a64>)
 8004c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c48:	4613      	mov	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	440b      	add	r3, r1
 8004c52:	3308      	adds	r3, #8
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <acis_gui_task+0x3a68>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004c62:	fb03 f301 	mul.w	r3, r3, r1
 8004c66:	4413      	add	r3, r2
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4601      	mov	r1, r0
 8004c6e:	2003      	movs	r0, #3
 8004c70:	f00b fe2e 	bl	80108d0 <font_printf>
                if(TableSetup[menuselected].valuei)
 8004c74:	e0a7      	b.n	8004dc6 <acis_gui_task+0x3b5a>
                else font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name);
 8004c76:	f00a fbaf 	bl	800f3d8 <font_getHeight>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c80:	fb03 f302 	mul.w	r3, r3, r2
 8004c84:	f103 0012 	add.w	r0, r3, #18
 8004c88:	4911      	ldr	r1, [pc, #68]	; (8004cd0 <acis_gui_task+0x3a64>)
 8004c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4413      	add	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	440b      	add	r3, r1
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	2003      	movs	r0, #3
 8004c9e:	f00b fe17 	bl	80108d0 <font_printf>
                if(TableSetup[menuselected].valuei)
 8004ca2:	e090      	b.n	8004dc6 <acis_gui_task+0x3b5a>
 8004ca4:	2000689e 	.word	0x2000689e
 8004ca8:	200003d0 	.word	0x200003d0
 8004cac:	20006903 	.word	0x20006903
 8004cb0:	20006902 	.word	0x20006902
 8004cb4:	20006901 	.word	0x20006901
 8004cb8:	2000687c 	.word	0x2000687c
 8004cbc:	20006900 	.word	0x20006900
 8004cc0:	000249f0 	.word	0x000249f0
 8004cc4:	20002be0 	.word	0x20002be0
 8004cc8:	080149f4 	.word	0x080149f4
 8004ccc:	20002bd0 	.word	0x20002bd0
 8004cd0:	08014e50 	.word	0x08014e50
 8004cd4:	200068c8 	.word	0x200068c8
              }
              else if(menuitem == menuselected && DelayDiff(now, select_timeout) < 500000)
 8004cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d163      	bne.n	8004daa <acis_gui_task+0x3b3e>
 8004ce2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004ce6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004cea:	f002 fe7d 	bl	80079e8 <DelayDiff>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	4bca      	ldr	r3, [pc, #808]	; (800501c <acis_gui_task+0x3db0>)
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d859      	bhi.n	8004daa <acis_gui_task+0x3b3e>
              {
                font_printf(-125,18 + font_getHeight()*i,"<");
 8004cf6:	f00a fb6f 	bl	800f3d8 <font_getHeight>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d00:	fb03 f302 	mul.w	r3, r3, r2
 8004d04:	3312      	adds	r3, #18
 8004d06:	4ac6      	ldr	r2, [pc, #792]	; (8005020 <acis_gui_task+0x3db4>)
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8004d0e:	f00b fddf 	bl	80108d0 <font_printf>
                if(TableSetup[menuselected].valuei)
 8004d12:	49c4      	ldr	r1, [pc, #784]	; (8005024 <acis_gui_task+0x3db8>)
 8004d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	440b      	add	r3, r1
 8004d20:	3308      	adds	r3, #8
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d029      	beq.n	8004d7c <acis_gui_task+0x3b10>
                  font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name, TableOffset(TableSetup[menuselected].valuei, int32_t));
 8004d28:	f00a fb56 	bl	800f3d8 <font_getHeight>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d32:	fb03 f302 	mul.w	r3, r3, r2
 8004d36:	f103 0012 	add.w	r0, r3, #18
 8004d3a:	49ba      	ldr	r1, [pc, #744]	; (8005024 <acis_gui_task+0x3db8>)
 8004d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	440b      	add	r3, r1
 8004d48:	681c      	ldr	r4, [r3, #0]
 8004d4a:	49b6      	ldr	r1, [pc, #728]	; (8005024 <acis_gui_task+0x3db8>)
 8004d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4e:	4613      	mov	r3, r2
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	4413      	add	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	440b      	add	r3, r1
 8004d58:	3308      	adds	r3, #8
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4bb2      	ldr	r3, [pc, #712]	; (8005028 <acis_gui_task+0x3dbc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4619      	mov	r1, r3
 8004d64:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004d68:	fb03 f301 	mul.w	r3, r3, r1
 8004d6c:	4413      	add	r3, r2
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4622      	mov	r2, r4
 8004d72:	4601      	mov	r1, r0
 8004d74:	2003      	movs	r0, #3
 8004d76:	f00b fdab 	bl	80108d0 <font_printf>
                if(TableSetup[menuselected].valuei)
 8004d7a:	e024      	b.n	8004dc6 <acis_gui_task+0x3b5a>
                else font_printf(3,18 + font_getHeight()*i,TableSetup[menuselected].name);
 8004d7c:	f00a fb2c 	bl	800f3d8 <font_getHeight>
 8004d80:	4602      	mov	r2, r0
 8004d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d86:	fb03 f302 	mul.w	r3, r3, r2
 8004d8a:	f103 0012 	add.w	r0, r3, #18
 8004d8e:	49a5      	ldr	r1, [pc, #660]	; (8005024 <acis_gui_task+0x3db8>)
 8004d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	440b      	add	r3, r1
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4601      	mov	r1, r0
 8004da2:	2003      	movs	r0, #3
 8004da4:	f00b fd94 	bl	80108d0 <font_printf>
                if(TableSetup[menuselected].valuei)
 8004da8:	e00d      	b.n	8004dc6 <acis_gui_task+0x3b5a>
              }
              else if(DelayDiff(now, select_timeout) > 800000)
 8004daa:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004dae:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004db2:	f002 fe19 	bl	80079e8 <DelayDiff>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b9c      	ldr	r3, [pc, #624]	; (800502c <acis_gui_task+0x3dc0>)
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d903      	bls.n	8004dc6 <acis_gui_task+0x3b5a>
                select_timeout = now;
 8004dbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004dc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          for(int i = 0; i < 6; i++)
 8004dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	f77f af06 	ble.w	8004be6 <acis_gui_task+0x397a>
            }
          }

          lcd_update();
 8004dda:	f002 fea9 	bl	8007b30 <lcd_update>
        }
        if(BUT_ENTER)
 8004dde:	4b94      	ldr	r3, [pc, #592]	; (8005030 <acis_gui_task+0x3dc4>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d03c      	beq.n	8004e62 <acis_gui_task+0x3bf6>
        {
          display_timeout = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(!menuselecting)
 8004dee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <acis_gui_task+0x3b9a>
          {
            menuselecting = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            select_timeout = now;
 8004dfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e04:	e01e      	b.n	8004e44 <acis_gui_task+0x3bd8>
          }
          else
          {
            select_timeout = now;
 8004e06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
            tablesetupitem = &TableSetup[menuitem];
 8004e0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	4a82      	ldr	r2, [pc, #520]	; (8005024 <acis_gui_task+0x3db8>)
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            eMenuItem = tablesetupitem->menuitem;
 8004e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e26:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004e2a:	4b82      	ldr	r3, [pc, #520]	; (8005034 <acis_gui_task+0x3dc8>)
 8004e2c:	701a      	strb	r2, [r3, #0]
            tablesetuptitle = tablesetupitem->name;
 8004e2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            menufirst2 = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            menuitem2 = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          }
          BUT_UP = 0;
 8004e44:	4b7c      	ldr	r3, [pc, #496]	; (8005038 <acis_gui_task+0x3dcc>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8004e4a:	4b7c      	ldr	r3, [pc, #496]	; (800503c <acis_gui_task+0x3dd0>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8004e50:	4b7b      	ldr	r3, [pc, #492]	; (8005040 <acis_gui_task+0x3dd4>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8004e56:	4b7b      	ldr	r3, [pc, #492]	; (8005044 <acis_gui_task+0x3dd8>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8004e5c:	4b74      	ldr	r3, [pc, #464]	; (8005030 <acis_gui_task+0x3dc4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
        }
        if(BUT_CANCEL)
 8004e62:	4b79      	ldr	r3, [pc, #484]	; (8005048 <acis_gui_task+0x3ddc>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d018      	beq.n	8004e9e <acis_gui_task+0x3c32>
        {
          display_timeout = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8004e72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <acis_gui_task+0x3c14>
          {
            menuselecting = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          }
          BUT_UP = 0;
 8004e80:	4b6d      	ldr	r3, [pc, #436]	; (8005038 <acis_gui_task+0x3dcc>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 8004e86:	4b6d      	ldr	r3, [pc, #436]	; (800503c <acis_gui_task+0x3dd0>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8004e8c:	4b6c      	ldr	r3, [pc, #432]	; (8005040 <acis_gui_task+0x3dd4>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 8004e92:	4b6c      	ldr	r3, [pc, #432]	; (8005044 <acis_gui_task+0x3dd8>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8004e98:	4b6b      	ldr	r3, [pc, #428]	; (8005048 <acis_gui_task+0x3ddc>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_DOWN)
 8004e9e:	4b67      	ldr	r3, [pc, #412]	; (800503c <acis_gui_task+0x3dd0>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d025      	beq.n	8004ef4 <acis_gui_task+0x3c88>
        {
          display_timeout = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8004eae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01b      	beq.n	8004eee <acis_gui_task+0x3c82>
          {
            if(++menuitem >= sizeof(TableSetup) / sizeof(sConfigLinking)) menuitem = sizeof(TableSetup) / sizeof(sConfigLinking) - 1;
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec4:	2b07      	cmp	r3, #7
 8004ec6:	d902      	bls.n	8004ece <acis_gui_task+0x3c62>
 8004ec8:	2307      	movs	r3, #7
 8004eca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menufirst + 4 < menuitem) menufirst = menuitem - 4;
 8004ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ed2:	1d1a      	adds	r2, r3, #4
 8004ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d204      	bcs.n	8004ee6 <acis_gui_task+0x3c7a>
 8004edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee0:	3b04      	subs	r3, #4
 8004ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 8004ee6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004eea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_DOWN = 0;
 8004eee:	4b53      	ldr	r3, [pc, #332]	; (800503c <acis_gui_task+0x3dd0>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8004ef4:	4b50      	ldr	r3, [pc, #320]	; (8005038 <acis_gui_task+0x3dcc>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d023      	beq.n	8004f46 <acis_gui_task+0x3cda>
        {
          display_timeout = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(menuselecting)
 8004f04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d019      	beq.n	8004f40 <acis_gui_task+0x3cd4>
          {
            if(--menuitem < 0) menuitem = 0;
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da02      	bge.n	8004f24 <acis_gui_task+0x3cb8>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if(menuitem < menufirst) menufirst = menuitem;
 8004f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d903      	bls.n	8004f38 <acis_gui_task+0x3ccc>
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            select_timeout = now;
 8004f38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          }
          BUT_UP = 0;
 8004f40:	4b3d      	ldr	r3, [pc, #244]	; (8005038 <acis_gui_task+0x3dcc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_RIGHT && !menuselecting) BUT_RIGHT = 0, eMenuItem++;
 8004f46:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <acis_gui_task+0x3dd8>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d010      	beq.n	8004f72 <acis_gui_task+0x3d06>
 8004f50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10c      	bne.n	8004f72 <acis_gui_task+0x3d06>
 8004f58:	4b3a      	ldr	r3, [pc, #232]	; (8005044 <acis_gui_task+0x3dd8>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	4b35      	ldr	r3, [pc, #212]	; (8005034 <acis_gui_task+0x3dc8>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	3301      	adds	r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	4b32      	ldr	r3, [pc, #200]	; (8005034 <acis_gui_task+0x3dc8>)
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	bf00      	nop
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;

        break;
 8004f6e:	f001 b848 	b.w	8006002 <acis_gui_task+0x4d96>
        else if(BUT_LEFT && !menuselecting) BUT_LEFT = 0, eMenuItem--;
 8004f72:	4b33      	ldr	r3, [pc, #204]	; (8005040 <acis_gui_task+0x3dd4>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f001 8042 	beq.w	8006002 <acis_gui_task+0x4d96>
 8004f7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f041 803d 	bne.w	8006002 <acis_gui_task+0x4d96>
 8004f88:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <acis_gui_task+0x3dd4>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	4b29      	ldr	r3, [pc, #164]	; (8005034 <acis_gui_task+0x3dc8>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	4b26      	ldr	r3, [pc, #152]	; (8005034 <acis_gui_task+0x3dc8>)
 8004f9a:	701a      	strb	r2, [r3, #0]
        break;
 8004f9c:	f001 b831 	b.w	8006002 <acis_gui_task+0x4d96>
      case MenuTableSetupTemperatures :
      case MenuTableSetupServoAccel :
      case MenuTableSetupServoChoke:
      {

        if(DelayDiff(now, display_timeout) > 150000)
 8004fa0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8004fa4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004fa8:	f002 fd1e 	bl	80079e8 <DelayDiff>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b27      	ldr	r3, [pc, #156]	; (800504c <acis_gui_task+0x3de0>)
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	f240 833e 	bls.w	8005632 <acis_gui_task+0x43c6>
        {
          display_timeout = now;
 8004fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 8004fbe:	f002 fe43 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2340      	movs	r3, #64	; 0x40
 8004fc8:	2280      	movs	r2, #128	; 0x80
 8004fca:	2100      	movs	r1, #0
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f002 ff26 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_8x12);
 8004fd2:	481f      	ldr	r0, [pc, #124]	; (8005050 <acis_gui_task+0x3de4>)
 8004fd4:	f00a fa5a 	bl	800f48c <font_setFont>
          font_printf(0,2,tablesetuptitle, TableOffset(tablesetupitem->valuei, int32_t));
 8004fd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <acis_gui_task+0x3dbc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f640 436c 	movw	r3, #3180	; 0xc6c
 8004fea:	fb03 f301 	mul.w	r3, r3, r1
 8004fee:	4413      	add	r3, r2
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ff6:	2102      	movs	r1, #2
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f00b fc69 	bl	80108d0 <font_printf>
          lcd_rect(0,15,128,1,1);
 8004ffe:	2301      	movs	r3, #1
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2301      	movs	r3, #1
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	210f      	movs	r1, #15
 8005008:	2000      	movs	r0, #0
 800500a:	f002 ff08 	bl	8007e1e <lcd_rect>

          font_setFont(&rre_5x8);
 800500e:	4811      	ldr	r0, [pc, #68]	; (8005054 <acis_gui_task+0x3de8>)
 8005010:	f00a fa3c 	bl	800f48c <font_setFont>
          for(int i = 0; i < 2; i++)
 8005014:	2300      	movs	r3, #0
 8005016:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005018:	e103      	b.n	8005222 <acis_gui_task+0x3fb6>
 800501a:	bf00      	nop
 800501c:	0007a11f 	.word	0x0007a11f
 8005020:	08014a04 	.word	0x08014a04
 8005024:	08014e50 	.word	0x08014e50
 8005028:	200068c8 	.word	0x200068c8
 800502c:	000c3500 	.word	0x000c3500
 8005030:	20006904 	.word	0x20006904
 8005034:	2000687c 	.word	0x2000687c
 8005038:	20006902 	.word	0x20006902
 800503c:	20006903 	.word	0x20006903
 8005040:	20006900 	.word	0x20006900
 8005044:	20006901 	.word	0x20006901
 8005048:	20006905 	.word	0x20006905
 800504c:	000249f0 	.word	0x000249f0
 8005050:	20002be0 	.word	0x20002be0
 8005054:	20002bd0 	.word	0x20002bd0
          {
            menuselected = menufirst2 + i;
 8005058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800505a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800505e:	4413      	add	r3, r2
 8005060:	64bb      	str	r3, [r7, #72]	; 0x48
            if(menuselected < TableOffset(tablesetupitem->valuei, int32_t))
 8005062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	461a      	mov	r2, r3
 800506a:	4bbf      	ldr	r3, [pc, #764]	; (8005368 <acis_gui_task+0x40fc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005074:	fb03 f301 	mul.w	r3, r3, r1
 8005078:	4413      	add	r3, r2
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005080:	4293      	cmp	r3, r2
 8005082:	f080 80cb 	bcs.w	800521c <acis_gui_task+0x3fb0>
            {
              if(tablesetupitem->valuedep)
 8005086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02b      	beq.n	80050e8 <acis_gui_task+0x3e7c>
                font_printf(3,18 + font_getHeight()*i,tablesetupitem->title, menuselected + 1, ((&TableOffset(tablesetupitem->valuedep, float))[menuselected]));
 8005090:	f00a f9a2 	bl	800f3d8 <font_getHeight>
 8005094:	4602      	mov	r2, r0
 8005096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005098:	fb03 f302 	mul.w	r3, r3, r2
 800509c:	f103 0512 	add.w	r5, r3, #18
 80050a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050a4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	f103 0801 	add.w	r8, r3, #1
 80050ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	4619      	mov	r1, r3
 80050b4:	4bac      	ldr	r3, [pc, #688]	; (8005368 <acis_gui_task+0x40fc>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f240 331b 	movw	r3, #795	; 0x31b
 80050be:	fb03 f202 	mul.w	r2, r3, r2
 80050c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb fa63 	bl	8000598 <__aeabi_f2d>
 80050d2:	4603      	mov	r3, r0
 80050d4:	460c      	mov	r4, r1
 80050d6:	e9cd 3400 	strd	r3, r4, [sp]
 80050da:	4643      	mov	r3, r8
 80050dc:	4632      	mov	r2, r6
 80050de:	4629      	mov	r1, r5
 80050e0:	2003      	movs	r0, #3
 80050e2:	f00b fbf5 	bl	80108d0 <font_printf>
 80050e6:	e00f      	b.n	8005108 <acis_gui_task+0x3e9c>
              else font_printf(3,18 + font_getHeight()*i,tablesetupitem->title, menuselected + 1);
 80050e8:	f00a f976 	bl	800f3d8 <font_getHeight>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050f0:	fb03 f302 	mul.w	r3, r3, r2
 80050f4:	f103 0112 	add.w	r1, r3, #18
 80050f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	3301      	adds	r3, #1
 8005102:	2003      	movs	r0, #3
 8005104:	f00b fbe4 	bl	80108d0 <font_printf>

              if(menuitem2 != menuselected)
 8005108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510e:	429a      	cmp	r2, r3
 8005110:	d033      	beq.n	800517a <acis_gui_task+0x3f0e>
                font_printf(-125,18 + font_getHeight()*i,tablesetupitem->step >= 1.0f ? "%.0f" : "%.1f", ((&TableOffset(tablesetupitem->valuef, float))[menuselected]));
 8005112:	f00a f961 	bl	800f3d8 <font_getHeight>
 8005116:	4602      	mov	r2, r0
 8005118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800511a:	fb03 f302 	mul.w	r3, r3, r2
 800511e:	f103 0512 	add.w	r5, r3, #18
 8005122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005126:	edd3 7a06 	vldr	s15, [r3, #24]
 800512a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800512e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005136:	db01      	blt.n	800513c <acis_gui_task+0x3ed0>
 8005138:	4e8c      	ldr	r6, [pc, #560]	; (800536c <acis_gui_task+0x4100>)
 800513a:	e000      	b.n	800513e <acis_gui_task+0x3ed2>
 800513c:	4e8c      	ldr	r6, [pc, #560]	; (8005370 <acis_gui_task+0x4104>)
 800513e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4619      	mov	r1, r3
 8005146:	4b88      	ldr	r3, [pc, #544]	; (8005368 <acis_gui_task+0x40fc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f240 331b 	movw	r3, #795	; 0x31b
 8005150:	fb03 f202 	mul.w	r2, r3, r2
 8005154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb fa1a 	bl	8000598 <__aeabi_f2d>
 8005164:	4603      	mov	r3, r0
 8005166:	460c      	mov	r4, r1
 8005168:	e9cd 3400 	strd	r3, r4, [sp]
 800516c:	4632      	mov	r2, r6
 800516e:	4629      	mov	r1, r5
 8005170:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8005174:	f00b fbac 	bl	80108d0 <font_printf>
 8005178:	e050      	b.n	800521c <acis_gui_task+0x3fb0>
              else if(menuitem2 == menuselected && DelayDiff(now, select_timeout) < 500000)
 800517a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800517e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005180:	429a      	cmp	r2, r3
 8005182:	d13d      	bne.n	8005200 <acis_gui_task+0x3f94>
 8005184:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005188:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800518c:	f002 fc2c 	bl	80079e8 <DelayDiff>
 8005190:	4602      	mov	r2, r0
 8005192:	4b78      	ldr	r3, [pc, #480]	; (8005374 <acis_gui_task+0x4108>)
 8005194:	429a      	cmp	r2, r3
 8005196:	d833      	bhi.n	8005200 <acis_gui_task+0x3f94>
                font_printf(-125,18 + font_getHeight()*i,tablesetupitem->step >= 1.0f ? "> %.0f" : "> %.1f", ((&TableOffset(tablesetupitem->valuef, float))[menuselected]));
 8005198:	f00a f91e 	bl	800f3d8 <font_getHeight>
 800519c:	4602      	mov	r2, r0
 800519e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051a0:	fb03 f302 	mul.w	r3, r3, r2
 80051a4:	f103 0512 	add.w	r5, r3, #18
 80051a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80051b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	db01      	blt.n	80051c2 <acis_gui_task+0x3f56>
 80051be:	4e6e      	ldr	r6, [pc, #440]	; (8005378 <acis_gui_task+0x410c>)
 80051c0:	e000      	b.n	80051c4 <acis_gui_task+0x3f58>
 80051c2:	4e6e      	ldr	r6, [pc, #440]	; (800537c <acis_gui_task+0x4110>)
 80051c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4b66      	ldr	r3, [pc, #408]	; (8005368 <acis_gui_task+0x40fc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	f240 331b 	movw	r3, #795	; 0x31b
 80051d6:	fb03 f202 	mul.w	r2, r3, r2
 80051da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fb f9d7 	bl	8000598 <__aeabi_f2d>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	e9cd 3400 	strd	r3, r4, [sp]
 80051f2:	4632      	mov	r2, r6
 80051f4:	4629      	mov	r1, r5
 80051f6:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 80051fa:	f00b fb69 	bl	80108d0 <font_printf>
 80051fe:	e00d      	b.n	800521c <acis_gui_task+0x3fb0>
              else if(DelayDiff(now, select_timeout) > 800000)
 8005200:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005204:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005208:	f002 fbee 	bl	80079e8 <DelayDiff>
 800520c:	4602      	mov	r2, r0
 800520e:	4b5c      	ldr	r3, [pc, #368]	; (8005380 <acis_gui_task+0x4114>)
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <acis_gui_task+0x3fb0>
                select_timeout = now;
 8005214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005218:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          for(int i = 0; i < 2; i++)
 800521c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800521e:	3301      	adds	r3, #1
 8005220:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005224:	2b01      	cmp	r3, #1
 8005226:	f77f af17 	ble.w	8005058 <acis_gui_task+0x3dec>

            }
          }

          lcd_rect(1,30,126,1,1);
 800522a:	2301      	movs	r3, #1
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2301      	movs	r3, #1
 8005230:	227e      	movs	r2, #126	; 0x7e
 8005232:	211e      	movs	r1, #30
 8005234:	2001      	movs	r0, #1
 8005236:	f002 fdf2 	bl	8007e1e <lcd_rect>
          lcd_rect_solid(1,31,126,font_getHeight(),0);
 800523a:	f00a f8cd 	bl	800f3d8 <font_getHeight>
 800523e:	4602      	mov	r2, r0
 8005240:	2300      	movs	r3, #0
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	227e      	movs	r2, #126	; 0x7e
 8005248:	211f      	movs	r1, #31
 800524a:	2001      	movs	r0, #1
 800524c:	f002 fd8c 	bl	8007d68 <lcd_rect_solid>

          int cnt = TableOffset(tablesetupitem->valuei, int32_t);
 8005250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	461a      	mov	r2, r3
 8005258:	4b43      	ldr	r3, [pc, #268]	; (8005368 <acis_gui_task+0x40fc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4619      	mov	r1, r3
 800525e:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005262:	fb03 f301 	mul.w	r3, r3, r1
 8005266:	4413      	add	r3, r2
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	643b      	str	r3, [r7, #64]	; 0x40
          float x = -1.0f ,y = -1.0f , prevx = -1.0f , prevy = -1.0f ;
 800526c:	4b45      	ldr	r3, [pc, #276]	; (8005384 <acis_gui_task+0x4118>)
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005270:	4b44      	ldr	r3, [pc, #272]	; (8005384 <acis_gui_task+0x4118>)
 8005272:	63bb      	str	r3, [r7, #56]	; 0x38
 8005274:	4b43      	ldr	r3, [pc, #268]	; (8005384 <acis_gui_task+0x4118>)
 8005276:	67bb      	str	r3, [r7, #120]	; 0x78
 8005278:	4b42      	ldr	r3, [pc, #264]	; (8005384 <acis_gui_task+0x4118>)
 800527a:	677b      	str	r3, [r7, #116]	; 0x74
          float cx,cy;
          float max = -INFINITY;
 800527c:	4b42      	ldr	r3, [pc, #264]	; (8005388 <acis_gui_task+0x411c>)
 800527e:	66bb      	str	r3, [r7, #104]	; 0x68
          float min = 0;
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	667b      	str	r3, [r7, #100]	; 0x64
          float depmin = INFINITY;
 8005286:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800528a:	663b      	str	r3, [r7, #96]	; 0x60
          float depmax = -INFINITY;
 800528c:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <acis_gui_task+0x411c>)
 800528e:	65fb      	str	r3, [r7, #92]	; 0x5c
          float value, dep;
          for(int i = 0; i < cnt; i++)
 8005290:	2300      	movs	r3, #0
 8005292:	65bb      	str	r3, [r7, #88]	; 0x58
 8005294:	e029      	b.n	80052ea <acis_gui_task+0x407e>
          {
            value = ((&TableOffset(tablesetupitem->valuef, float))[i]);
 8005296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4619      	mov	r1, r3
 800529e:	4b32      	ldr	r3, [pc, #200]	; (8005368 <acis_gui_task+0x40fc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f240 331b 	movw	r3, #795	; 0x31b
 80052a8:	fb03 f202 	mul.w	r2, r3, r2
 80052ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
            if(value > max)
 80052b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80052bc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80052c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c8:	dd01      	ble.n	80052ce <acis_gui_task+0x4062>
              max = value;
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	66bb      	str	r3, [r7, #104]	; 0x68
            if(value < min)
 80052ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80052d2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80052d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	d501      	bpl.n	80052e4 <acis_gui_task+0x4078>
              min = value;
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	667b      	str	r3, [r7, #100]	; 0x64
          for(int i = 0; i < cnt; i++)
 80052e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e6:	3301      	adds	r3, #1
 80052e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80052ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ee:	429a      	cmp	r2, r3
 80052f0:	dbd1      	blt.n	8005296 <acis_gui_task+0x402a>
          }
          if(tablesetupitem->valuedep)
 80052f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80e6 	beq.w	80054ca <acis_gui_task+0x425e>
          {
            for(int i = 0; i < cnt; i++)
 80052fe:	2300      	movs	r3, #0
 8005300:	657b      	str	r3, [r7, #84]	; 0x54
 8005302:	e029      	b.n	8005358 <acis_gui_task+0x40ec>
            {
              dep = ((&TableOffset(tablesetupitem->valuedep, float))[i]);
 8005304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4619      	mov	r1, r3
 800530c:	4b16      	ldr	r3, [pc, #88]	; (8005368 <acis_gui_task+0x40fc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	f240 331b 	movw	r3, #795	; 0x31b
 8005316:	fb03 f202 	mul.w	r2, r3, r2
 800531a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
              if(dep > depmax)
 8005326:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800532a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800532e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	dd01      	ble.n	800533c <acis_gui_task+0x40d0>
                depmax = dep;
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	65fb      	str	r3, [r7, #92]	; 0x5c
              if(dep < depmin)
 800533c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005340:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534c:	d501      	bpl.n	8005352 <acis_gui_task+0x40e6>
                depmin = dep;
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	663b      	str	r3, [r7, #96]	; 0x60
            for(int i = 0; i < cnt; i++)
 8005352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005354:	3301      	adds	r3, #1
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
 8005358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800535a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535c:	429a      	cmp	r2, r3
 800535e:	dbd1      	blt.n	8005304 <acis_gui_task+0x4098>
            }
            for(int i = 0; i < cnt; i++)
 8005360:	2300      	movs	r3, #0
 8005362:	653b      	str	r3, [r7, #80]	; 0x50
 8005364:	e0ab      	b.n	80054be <acis_gui_task+0x4252>
 8005366:	bf00      	nop
 8005368:	200068c8 	.word	0x200068c8
 800536c:	080149a4 	.word	0x080149a4
 8005370:	080149d4 	.word	0x080149d4
 8005374:	0007a11f 	.word	0x0007a11f
 8005378:	080149ac 	.word	0x080149ac
 800537c:	080149dc 	.word	0x080149dc
 8005380:	000c3500 	.word	0x000c3500
 8005384:	bf800000 	.word	0xbf800000
 8005388:	ff800000 	.word	0xff800000
            {
              dep = ((&TableOffset(tablesetupitem->valuedep, float))[i]);
 800538c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	4619      	mov	r1, r3
 8005394:	4b4e      	ldr	r3, [pc, #312]	; (80054d0 <acis_gui_task+0x4264>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	f240 331b 	movw	r3, #795	; 0x31b
 800539e:	fb03 f202 	mul.w	r2, r3, r2
 80053a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
              value = ((&TableOffset(tablesetupitem->valuef, float))[i]);
 80053ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4b46      	ldr	r3, [pc, #280]	; (80054d0 <acis_gui_task+0x4264>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f240 331b 	movw	r3, #795	; 0x31b
 80053c0:	fb03 f202 	mul.w	r2, r3, r2
 80053c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
              x = 126.0f * (dep - depmin) / (depmax-depmin) + 1.0f;
 80053d0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80053d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80053d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053dc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80054d4 <acis_gui_task+0x4268>
 80053e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80053e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80053e8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80053ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053fc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
              y = 63 - (value - min) / (max-min) * 32;
 8005400:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005404:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005408:	ee77 6a67 	vsub.f32	s13, s14, s15
 800540c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8005410:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800541c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80054d8 <acis_gui_task+0x426c>
 8005420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005424:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80054dc <acis_gui_task+0x4270>
 8005428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800542c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

              if(prevx == -1.0f && prevy == -1.0f)
 8005430:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005434:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005438:	eef4 7a47 	vcmp.f32	s15, s14
 800543c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005440:	d10c      	bne.n	800545c <acis_gui_task+0x41f0>
 8005442:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005446:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800544a:	eef4 7a47 	vcmp.f32	s15, s14
 800544e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005452:	d103      	bne.n	800545c <acis_gui_task+0x41f0>
                prevx = x, prevy = y;
 8005454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005456:	67bb      	str	r3, [r7, #120]	; 0x78
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	677b      	str	r3, [r7, #116]	; 0x74

              if(i == menuitem2)
 800545c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005462:	429a      	cmp	r2, r3
 8005464:	d103      	bne.n	800546e <acis_gui_task+0x4202>
                cx = x, cy = y;
 8005466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005468:	673b      	str	r3, [r7, #112]	; 0x70
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	66fb      	str	r3, [r7, #108]	; 0x6c

              lcd_line(prevx, prevy, x, y, 1);
 800546e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005476:	ee17 3a90 	vmov	r3, s15
 800547a:	b298      	uxth	r0, r3
 800547c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005484:	ee17 3a90 	vmov	r3, s15
 8005488:	b299      	uxth	r1, r3
 800548a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800548e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005492:	ee17 3a90 	vmov	r3, s15
 8005496:	b29a      	uxth	r2, r3
 8005498:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800549c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a0:	ee17 3a90 	vmov	r3, s15
 80054a4:	b29c      	uxth	r4, r3
 80054a6:	2301      	movs	r3, #1
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	4623      	mov	r3, r4
 80054ac:	f002 fd60 	bl	8007f70 <lcd_line>

              prevx = x;
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	67bb      	str	r3, [r7, #120]	; 0x78
              prevy = y;
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	677b      	str	r3, [r7, #116]	; 0x74
            for(int i = 0; i < cnt; i++)
 80054b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ba:	3301      	adds	r3, #1
 80054bc:	653b      	str	r3, [r7, #80]	; 0x50
 80054be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	429a      	cmp	r2, r3
 80054c4:	f6ff af62 	blt.w	800538c <acis_gui_task+0x4120>
 80054c8:	e096      	b.n	80055f8 <acis_gui_task+0x438c>
            }
          }
          else
          {
            for(int i = 0; i < cnt; i++)
 80054ca:	2300      	movs	r3, #0
 80054cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ce:	e08e      	b.n	80055ee <acis_gui_task+0x4382>
 80054d0:	200068c8 	.word	0x200068c8
 80054d4:	42fc0000 	.word	0x42fc0000
 80054d8:	42000000 	.word	0x42000000
 80054dc:	427c0000 	.word	0x427c0000
            {
              value = ((&TableOffset(tablesetupitem->valuef, float))[i]);
 80054e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	4619      	mov	r1, r3
 80054e8:	4bba      	ldr	r3, [pc, #744]	; (80057d4 <acis_gui_task+0x4568>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	f240 331b 	movw	r3, #795	; 0x31b
 80054f2:	fb03 f202 	mul.w	r2, r3, r2
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
              x = 126.0f * ((float)i / (float)(cnt-1)) + 1.0f;
 8005502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800550c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550e:	3b01      	subs	r3, #1
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800551c:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80057d8 <acis_gui_task+0x456c>
 8005520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800552c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
              y = 63 - (value - min) / (max-min) * 32;
 8005530:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005534:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005538:	ee77 6a67 	vsub.f32	s13, s14, s15
 800553c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8005540:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005544:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800554c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80057dc <acis_gui_task+0x4570>
 8005550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005554:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80057e0 <acis_gui_task+0x4574>
 8005558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800555c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

              if(prevx == -1.0f && prevy == -1.0f)
 8005560:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005564:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005568:	eef4 7a47 	vcmp.f32	s15, s14
 800556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005570:	d10c      	bne.n	800558c <acis_gui_task+0x4320>
 8005572:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005576:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800557a:	eef4 7a47 	vcmp.f32	s15, s14
 800557e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005582:	d103      	bne.n	800558c <acis_gui_task+0x4320>
                prevx = x, prevy = y;
 8005584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005586:	67bb      	str	r3, [r7, #120]	; 0x78
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	677b      	str	r3, [r7, #116]	; 0x74

              lcd_line(prevx, prevy, x, y, 1);
 800558c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005594:	ee17 3a90 	vmov	r3, s15
 8005598:	b298      	uxth	r0, r3
 800559a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800559e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a2:	ee17 3a90 	vmov	r3, s15
 80055a6:	b299      	uxth	r1, r3
 80055a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80055ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055b0:	ee17 3a90 	vmov	r3, s15
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80055ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055be:	ee17 3a90 	vmov	r3, s15
 80055c2:	b29c      	uxth	r4, r3
 80055c4:	2301      	movs	r3, #1
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4623      	mov	r3, r4
 80055ca:	f002 fcd1 	bl	8007f70 <lcd_line>

              if(i == menuitem2)
 80055ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d103      	bne.n	80055e0 <acis_gui_task+0x4374>
                cx = x, cy = y;
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	673b      	str	r3, [r7, #112]	; 0x70
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	66fb      	str	r3, [r7, #108]	; 0x6c

              prevx = x;
 80055e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e2:	67bb      	str	r3, [r7, #120]	; 0x78
              prevy = y;
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	677b      	str	r3, [r7, #116]	; 0x74
            for(int i = 0; i < cnt; i++)
 80055e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ea:	3301      	adds	r3, #1
 80055ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f2:	429a      	cmp	r2, r3
 80055f4:	f6ff af74 	blt.w	80054e0 <acis_gui_task+0x4274>
            }
          }
          if(cy > 28)
 80055f8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80055fc:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8005600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005608:	dd11      	ble.n	800562e <acis_gui_task+0x43c2>
            lcd_circle5x5(cx,cy);
 800560a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800560e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005612:	ee17 3a90 	vmov	r3, s15
 8005616:	b21b      	sxth	r3, r3
 8005618:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800561c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005620:	ee17 2a90 	vmov	r2, s15
 8005624:	b212      	sxth	r2, r2
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f002 ffc2 	bl	80085b2 <lcd_circle5x5>

          lcd_update();
 800562e:	f002 fa7f 	bl	8007b30 <lcd_update>
        }
        if(BUT_CANCEL)
 8005632:	4b6c      	ldr	r3, [pc, #432]	; (80057e4 <acis_gui_task+0x4578>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d017      	beq.n	800566c <acis_gui_task+0x4400>
        {
          display_timeout = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          eMenuItem = MenuTableSetup;
 8005642:	4b69      	ldr	r3, [pc, #420]	; (80057e8 <acis_gui_task+0x457c>)
 8005644:	2209      	movs	r2, #9
 8005646:	701a      	strb	r2, [r3, #0]
          BUT_UP = 0;
 8005648:	4b68      	ldr	r3, [pc, #416]	; (80057ec <acis_gui_task+0x4580>)
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
          BUT_DOWN = 0;
 800564e:	4b68      	ldr	r3, [pc, #416]	; (80057f0 <acis_gui_task+0x4584>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
          BUT_LEFT = 0;
 8005654:	4b67      	ldr	r3, [pc, #412]	; (80057f4 <acis_gui_task+0x4588>)
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
          BUT_RIGHT = 0;
 800565a:	4b67      	ldr	r3, [pc, #412]	; (80057f8 <acis_gui_task+0x458c>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
          BUT_CANCEL = 0;
 8005660:	4b60      	ldr	r3, [pc, #384]	; (80057e4 <acis_gui_task+0x4578>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
          BUT_ENTER = 0;
 8005666:	4b65      	ldr	r3, [pc, #404]	; (80057fc <acis_gui_task+0x4590>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_LEFT || (BUT_LEFT_PRESS && BUT_LEFT_TIME > 400))
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <acis_gui_task+0x4588>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <acis_gui_task+0x4422>
 8005676:	4b62      	ldr	r3, [pc, #392]	; (8005800 <acis_gui_task+0x4594>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 81b4 	beq.w	80059ea <acis_gui_task+0x477e>
 8005682:	4b60      	ldr	r3, [pc, #384]	; (8005804 <acis_gui_task+0x4598>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800568a:	f240 81ae 	bls.w	80059ea <acis_gui_task+0x477e>
        {
          display_timeout = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_LEFT_TIME > 100) BUT_LEFT_TIME -= 40;
 8005694:	4b5b      	ldr	r3, [pc, #364]	; (8005804 <acis_gui_task+0x4598>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b64      	cmp	r3, #100	; 0x64
 800569a:	d904      	bls.n	80056a6 <acis_gui_task+0x443a>
 800569c:	4b59      	ldr	r3, [pc, #356]	; (8005804 <acis_gui_task+0x4598>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3b28      	subs	r3, #40	; 0x28
 80056a2:	4a58      	ldr	r2, [pc, #352]	; (8005804 <acis_gui_task+0x4598>)
 80056a4:	6013      	str	r3, [r2, #0]
          if(StatusSynchronized && tablesetupitem->step)
 80056a6:	4b58      	ldr	r3, [pc, #352]	; (8005808 <acis_gui_task+0x459c>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8195 	beq.w	80059dc <acis_gui_task+0x4770>
 80056b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80056ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c2:	f000 818b 	beq.w	80059dc <acis_gui_task+0x4770>
          {
            if(tablesetupitem->valuedep)
 80056c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 809d 	beq.w	800580c <acis_gui_task+0x45a0>
            {
              if(tablesetupitem->valuef)
 80056d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 817f 	beq.w	80059dc <acis_gui_task+0x4770>
              {
                if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) - tablesetupitem->step < tablesetupitem->min)
 80056de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4619      	mov	r1, r3
 80056e6:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <acis_gui_task+0x4568>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f240 331b 	movw	r3, #795	; 0x31b
 80056f0:	fb03 f202 	mul.w	r2, r3, r2
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	ed93 7a00 	vldr	s14, [r3]
 8005702:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005706:	edd3 7a06 	vldr	s15, [r3, #24]
 800570a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800570e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800571c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005724:	d519      	bpl.n	800575a <acis_gui_task+0x44ee>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->min;
 8005726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800572a:	6918      	ldr	r0, [r3, #16]
 800572c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4619      	mov	r1, r3
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <acis_gui_task+0x4568>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	f240 331b 	movw	r3, #795	; 0x31b
 800573e:	fb03 f202 	mul.w	r2, r3, r2
 8005742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	ee07 0a90 	vmov	s15, r0
 8005750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005754:	edc3 7a00 	vstr	s15, [r3]
 8005758:	e027      	b.n	80057aa <acis_gui_task+0x453e>
                else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) -= tablesetupitem->step;
 800575a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	4618      	mov	r0, r3
 8005762:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <acis_gui_task+0x4568>)
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	460a      	mov	r2, r1
 8005768:	f240 331b 	movw	r3, #795	; 0x31b
 800576c:	fb03 f202 	mul.w	r2, r3, r2
 8005770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4403      	add	r3, r0
 800577a:	ed93 7a00 	vldr	s14, [r3]
 800577e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005782:	edd3 7a06 	vldr	s15, [r3, #24]
 8005786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4618      	mov	r0, r3
 800578e:	460a      	mov	r2, r1
 8005790:	f240 331b 	movw	r3, #795	; 0x31b
 8005794:	fb03 f202 	mul.w	r2, r3, r2
 8005798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4403      	add	r3, r0
 80057a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a6:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 80057aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4619      	mov	r1, r3
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <acis_gui_task+0x4568>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f240 331b 	movw	r3, #795	; 0x31b
 80057bc:	fb03 f202 	mul.w	r2, r3, r2
 80057c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	2104      	movs	r1, #4
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fb fc4f 	bl	8001070 <acis_apply_parameter>
 80057d2:	e103      	b.n	80059dc <acis_gui_task+0x4770>
 80057d4:	200068c8 	.word	0x200068c8
 80057d8:	42fc0000 	.word	0x42fc0000
 80057dc:	42000000 	.word	0x42000000
 80057e0:	427c0000 	.word	0x427c0000
 80057e4:	20006905 	.word	0x20006905
 80057e8:	2000687c 	.word	0x2000687c
 80057ec:	20006902 	.word	0x20006902
 80057f0:	20006903 	.word	0x20006903
 80057f4:	20006900 	.word	0x20006900
 80057f8:	20006901 	.word	0x20006901
 80057fc:	20006904 	.word	0x20006904
 8005800:	200068e0 	.word	0x200068e0
 8005804:	200068e8 	.word	0x200068e8
 8005808:	2000689e 	.word	0x2000689e
              }
            }
            else
            {
              if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) - tablesetupitem->step < tablesetupitem->min)
 800580c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4619      	mov	r1, r3
 8005814:	4bcf      	ldr	r3, [pc, #828]	; (8005b54 <acis_gui_task+0x48e8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	f240 331b 	movw	r3, #795	; 0x31b
 800581e:	fb03 f202 	mul.w	r2, r3, r2
 8005822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	ed93 7a00 	vldr	s14, [r3]
 8005830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005834:	edd3 7a06 	vldr	s15, [r3, #24]
 8005838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800583c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005852:	d519      	bpl.n	8005888 <acis_gui_task+0x461c>
                ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->min;
 8005854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005858:	6918      	ldr	r0, [r3, #16]
 800585a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4619      	mov	r1, r3
 8005862:	4bbc      	ldr	r3, [pc, #752]	; (8005b54 <acis_gui_task+0x48e8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f240 331b 	movw	r3, #795	; 0x31b
 800586c:	fb03 f202 	mul.w	r2, r3, r2
 8005870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	ee07 0a90 	vmov	s15, r0
 800587e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005882:	edc3 7a00 	vstr	s15, [r3]
 8005886:	e027      	b.n	80058d8 <acis_gui_task+0x466c>
              else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) -= tablesetupitem->step;
 8005888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	4618      	mov	r0, r3
 8005890:	4bb0      	ldr	r3, [pc, #704]	; (8005b54 <acis_gui_task+0x48e8>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	460a      	mov	r2, r1
 8005896:	f240 331b 	movw	r3, #795	; 0x31b
 800589a:	fb03 f202 	mul.w	r2, r3, r2
 800589e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4403      	add	r3, r0
 80058a8:	ed93 7a00 	vldr	s14, [r3]
 80058ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80058b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	4618      	mov	r0, r3
 80058bc:	460a      	mov	r2, r1
 80058be:	f240 331b 	movw	r3, #795	; 0x31b
 80058c2:	fb03 f202 	mul.w	r2, r3, r2
 80058c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4403      	add	r3, r0
 80058d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d4:	edc3 7a00 	vstr	s15, [r3]

              if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 > 0 &&
 80058d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	461a      	mov	r2, r3
 80058e0:	4b9c      	ldr	r3, [pc, #624]	; (8005b54 <acis_gui_task+0x48e8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4619      	mov	r1, r3
 80058e6:	f640 436c 	movw	r3, #3180	; 0xc6c
 80058ea:	fb03 f301 	mul.w	r3, r3, r1
 80058ee:	4413      	add	r3, r2
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	dd5e      	ble.n	80059b4 <acis_gui_task+0x4748>
 80058f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dd5a      	ble.n	80059b4 <acis_gui_task+0x4748>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) - tablesetupitem->step <= ((&TableOffset(tablesetupitem->valuef, float))[menuitem2-1]))
 80058fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4619      	mov	r1, r3
 8005906:	4b93      	ldr	r3, [pc, #588]	; (8005b54 <acis_gui_task+0x48e8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	f240 331b 	movw	r3, #795	; 0x31b
 8005910:	fb03 f202 	mul.w	r2, r3, r2
 8005914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	ed93 7a00 	vldr	s14, [r3]
 8005922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005926:	edd3 7a06 	vldr	s15, [r3, #24]
 800592a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800592e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4619      	mov	r1, r3
 8005936:	4b87      	ldr	r3, [pc, #540]	; (8005b54 <acis_gui_task+0x48e8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f240 331b 	movw	r3, #795	; 0x31b
 8005940:	fb03 f202 	mul.w	r2, r3, r2
 8005944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	3b04      	subs	r3, #4
 8005950:	edd3 7a00 	vldr	s15, [r3]
              if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 > 0 &&
 8005954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595c:	d82a      	bhi.n	80059b4 <acis_gui_task+0x4748>
                ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = ((&TableOffset(tablesetupitem->valuef, float))[menuitem2-1]) + tablesetupitem->step;
 800595e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4619      	mov	r1, r3
 8005966:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <acis_gui_task+0x48e8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f240 331b 	movw	r3, #795	; 0x31b
 8005970:	fb03 f202 	mul.w	r2, r3, r2
 8005974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	3b04      	subs	r3, #4
 8005980:	ed93 7a00 	vldr	s14, [r3]
 8005984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005988:	edd3 7a06 	vldr	s15, [r3, #24]
 800598c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	4619      	mov	r1, r3
 8005994:	4b6f      	ldr	r3, [pc, #444]	; (8005b54 <acis_gui_task+0x48e8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	f240 331b 	movw	r3, #795	; 0x31b
 800599e:	fb03 f202 	mul.w	r2, r3, r2
 80059a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b0:	edc3 7a00 	vstr	s15, [r3]


              acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 80059b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	4619      	mov	r1, r3
 80059bc:	4b65      	ldr	r3, [pc, #404]	; (8005b54 <acis_gui_task+0x48e8>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	f240 331b 	movw	r3, #795	; 0x31b
 80059c6:	fb03 f202 	mul.w	r2, r3, r2
 80059ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	2104      	movs	r1, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fb fb4a 	bl	8001070 <acis_apply_parameter>
            }
          }
          select_timeout = now;
 80059dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          BUT_LEFT = 0;
 80059e4:	4b5c      	ldr	r3, [pc, #368]	; (8005b58 <acis_gui_task+0x48ec>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]

        }

        if(BUT_RIGHT || (BUT_RIGHT_PRESS && BUT_RIGHT_TIME > 400))
 80059ea:	4b5c      	ldr	r3, [pc, #368]	; (8005b5c <acis_gui_task+0x48f0>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <acis_gui_task+0x47a0>
 80059f4:	4b5a      	ldr	r3, [pc, #360]	; (8005b60 <acis_gui_task+0x48f4>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 81b9 	beq.w	8005d72 <acis_gui_task+0x4b06>
 8005a00:	4b58      	ldr	r3, [pc, #352]	; (8005b64 <acis_gui_task+0x48f8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005a08:	f240 81b3 	bls.w	8005d72 <acis_gui_task+0x4b06>
        {
          display_timeout = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(BUT_RIGHT_TIME > 100) BUT_RIGHT_TIME -= 40;
 8005a12:	4b54      	ldr	r3, [pc, #336]	; (8005b64 <acis_gui_task+0x48f8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b64      	cmp	r3, #100	; 0x64
 8005a18:	d904      	bls.n	8005a24 <acis_gui_task+0x47b8>
 8005a1a:	4b52      	ldr	r3, [pc, #328]	; (8005b64 <acis_gui_task+0x48f8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3b28      	subs	r3, #40	; 0x28
 8005a20:	4a50      	ldr	r2, [pc, #320]	; (8005b64 <acis_gui_task+0x48f8>)
 8005a22:	6013      	str	r3, [r2, #0]
          if(StatusSynchronized && tablesetupitem->step)
 8005a24:	4b50      	ldr	r3, [pc, #320]	; (8005b68 <acis_gui_task+0x48fc>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 819a 	beq.w	8005d64 <acis_gui_task+0x4af8>
 8005a30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a34:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	f000 8190 	beq.w	8005d64 <acis_gui_task+0x4af8>
          {
            if(tablesetupitem->valuedep)
 8005a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 808e 	beq.w	8005b6c <acis_gui_task+0x4900>
            {
              if(tablesetupitem->valuef)
 8005a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8184 	beq.w	8005d64 <acis_gui_task+0x4af8>
              {
                if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) + tablesetupitem->step > tablesetupitem->max)
 8005a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4b3b      	ldr	r3, [pc, #236]	; (8005b54 <acis_gui_task+0x48e8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f240 331b 	movw	r3, #795	; 0x31b
 8005a6e:	fb03 f202 	mul.w	r2, r3, r2
 8005a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	ed93 7a00 	vldr	s14, [r3]
 8005a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a84:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa2:	dd19      	ble.n	8005ad8 <acis_gui_task+0x486c>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->max;
 8005aa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aa8:	6958      	ldr	r0, [r3, #20]
 8005aaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <acis_gui_task+0x48e8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f240 331b 	movw	r3, #795	; 0x31b
 8005abc:	fb03 f202 	mul.w	r2, r3, r2
 8005ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	ee07 0a90 	vmov	s15, r0
 8005ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ad2:	edc3 7a00 	vstr	s15, [r3]
 8005ad6:	e027      	b.n	8005b28 <acis_gui_task+0x48bc>
                else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) += tablesetupitem->step;
 8005ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <acis_gui_task+0x48e8>)
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	460a      	mov	r2, r1
 8005ae6:	f240 331b 	movw	r3, #795	; 0x31b
 8005aea:	fb03 f202 	mul.w	r2, r3, r2
 8005aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4403      	add	r3, r0
 8005af8:	ed93 7a00 	vldr	s14, [r3]
 8005afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b00:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	460a      	mov	r2, r1
 8005b0e:	f240 331b 	movw	r3, #795	; 0x31b
 8005b12:	fb03 f202 	mul.w	r2, r3, r2
 8005b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4403      	add	r3, r0
 8005b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b24:	edc3 7a00 	vstr	s15, [r3]
                acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 8005b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <acis_gui_task+0x48e8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	f240 331b 	movw	r3, #795	; 0x31b
 8005b3a:	fb03 f202 	mul.w	r2, r3, r2
 8005b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	2104      	movs	r1, #4
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fb fa90 	bl	8001070 <acis_apply_parameter>
 8005b50:	e108      	b.n	8005d64 <acis_gui_task+0x4af8>
 8005b52:	bf00      	nop
 8005b54:	200068c8 	.word	0x200068c8
 8005b58:	20006900 	.word	0x20006900
 8005b5c:	20006901 	.word	0x20006901
 8005b60:	200068e1 	.word	0x200068e1
 8005b64:	200068ec 	.word	0x200068ec
 8005b68:	2000689e 	.word	0x2000689e
              }
            }
            else
            {
              if(tablesetupitem->valuef)
 8005b6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80f6 	beq.w	8005d64 <acis_gui_task+0x4af8>
              {
                if(((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) + tablesetupitem->step > tablesetupitem->max)
 8005b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4bb2      	ldr	r3, [pc, #712]	; (8005e4c <acis_gui_task+0x4be0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f240 331b 	movw	r3, #795	; 0x31b
 8005b8a:	fb03 f202 	mul.w	r2, r3, r2
 8005b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	ed93 7a00 	vldr	s14, [r3]
 8005b9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ba0:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	dd19      	ble.n	8005bf4 <acis_gui_task+0x4988>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = tablesetupitem->max;
 8005bc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bc4:	6958      	ldr	r0, [r3, #20]
 8005bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4b9f      	ldr	r3, [pc, #636]	; (8005e4c <acis_gui_task+0x4be0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f240 331b 	movw	r3, #795	; 0x31b
 8005bd8:	fb03 f202 	mul.w	r2, r3, r2
 8005bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	ee07 0a90 	vmov	s15, r0
 8005bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bee:	edc3 7a00 	vstr	s15, [r3]
 8005bf2:	e027      	b.n	8005c44 <acis_gui_task+0x49d8>
                else ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) += tablesetupitem->step;
 8005bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	4b93      	ldr	r3, [pc, #588]	; (8005e4c <acis_gui_task+0x4be0>)
 8005bfe:	6819      	ldr	r1, [r3, #0]
 8005c00:	460a      	mov	r2, r1
 8005c02:	f240 331b 	movw	r3, #795	; 0x31b
 8005c06:	fb03 f202 	mul.w	r2, r3, r2
 8005c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4403      	add	r3, r0
 8005c14:	ed93 7a00 	vldr	s14, [r3]
 8005c18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c1c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4618      	mov	r0, r3
 8005c28:	460a      	mov	r2, r1
 8005c2a:	f240 331b 	movw	r3, #795	; 0x31b
 8005c2e:	fb03 f202 	mul.w	r2, r3, r2
 8005c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4403      	add	r3, r0
 8005c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c40:	edc3 7a00 	vstr	s15, [r3]

                if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 < TableOffset(tablesetupitem->valuei, int32_t)-1 &&
 8005c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4b7f      	ldr	r3, [pc, #508]	; (8005e4c <acis_gui_task+0x4be0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4619      	mov	r1, r3
 8005c52:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005c56:	fb03 f301 	mul.w	r3, r3, r1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	dd6c      	ble.n	8005d3c <acis_gui_task+0x4ad0>
 8005c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b78      	ldr	r3, [pc, #480]	; (8005e4c <acis_gui_task+0x4be0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f640 436c 	movw	r3, #3180	; 0xc6c
 8005c74:	fb03 f301 	mul.w	r3, r3, r1
 8005c78:	4413      	add	r3, r2
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c82:	429a      	cmp	r2, r3
 8005c84:	da5a      	bge.n	8005d3c <acis_gui_task+0x4ad0>
                    ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) + tablesetupitem->step >= ((&TableOffset(tablesetupitem->valuef, float))[menuitem2+1]))
 8005c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4b6f      	ldr	r3, [pc, #444]	; (8005e4c <acis_gui_task+0x4be0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	f240 331b 	movw	r3, #795	; 0x31b
 8005c98:	fb03 f202 	mul.w	r2, r3, r2
 8005c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	ed93 7a00 	vldr	s14, [r3]
 8005caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cae:	edd3 7a06 	vldr	s15, [r3, #24]
 8005cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4b63      	ldr	r3, [pc, #396]	; (8005e4c <acis_gui_task+0x4be0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f240 331b 	movw	r3, #795	; 0x31b
 8005cc8:	fb03 f202 	mul.w	r2, r3, r2
 8005ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	edd3 7a00 	vldr	s15, [r3]
                if(TableOffset(tablesetupitem->valuei, int32_t) > 1 && menuitem2 < TableOffset(tablesetupitem->valuei, int32_t)-1 &&
 8005cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	db2a      	blt.n	8005d3c <acis_gui_task+0x4ad0>
                  ((&TableOffset(tablesetupitem->valuef, float))[menuitem2]) = ((&TableOffset(tablesetupitem->valuef, float))[menuitem2+1]) - tablesetupitem->step;
 8005ce6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4619      	mov	r1, r3
 8005cee:	4b57      	ldr	r3, [pc, #348]	; (8005e4c <acis_gui_task+0x4be0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f240 331b 	movw	r3, #795	; 0x31b
 8005cf8:	fb03 f202 	mul.w	r2, r3, r2
 8005cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	3304      	adds	r3, #4
 8005d08:	ed93 7a00 	vldr	s14, [r3]
 8005d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d10:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4b4b      	ldr	r3, [pc, #300]	; (8005e4c <acis_gui_task+0x4be0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f240 331b 	movw	r3, #795	; 0x31b
 8005d26:	fb03 f202 	mul.w	r2, r3, r2
 8005d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d38:	edc3 7a00 	vstr	s15, [r3]

                acis_apply_parameter(&((&TableOffset(tablesetupitem->valuef, float))[menuitem2]), sizeof(float));
 8005d3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	4619      	mov	r1, r3
 8005d44:	4b41      	ldr	r3, [pc, #260]	; (8005e4c <acis_gui_task+0x4be0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f240 331b 	movw	r3, #795	; 0x31b
 8005d4e:	fb03 f202 	mul.w	r2, r3, r2
 8005d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	440b      	add	r3, r1
 8005d5c:	2104      	movs	r1, #4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fb f986 	bl	8001070 <acis_apply_parameter>
              }
            }
          }
          select_timeout = now;
 8005d64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          BUT_RIGHT = 0;
 8005d6c:	4b38      	ldr	r3, [pc, #224]	; (8005e50 <acis_gui_task+0x4be4>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]

        }

        if(BUT_DOWN)
 8005d72:	4b38      	ldr	r3, [pc, #224]	; (8005e54 <acis_gui_task+0x4be8>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d021      	beq.n	8005dc0 <acis_gui_task+0x4b54>
        {
          display_timeout = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(++menuitem2 >= *tablesetupitem->valuei) menuitem2 = *tablesetupitem->valuei - 1;
 8005d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d86:	3301      	adds	r3, #1
 8005d88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	db06      	blt.n	8005daa <acis_gui_task+0x4b3e>
 8005d9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          menufirst2 = menuitem2;
 8005daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
          select_timeout = now;
 8005db2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005db6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          BUT_DOWN = 0;
 8005dba:	4b26      	ldr	r3, [pc, #152]	; (8005e54 <acis_gui_task+0x4be8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
        }

        if(BUT_UP)
 8005dc0:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <acis_gui_task+0x4bec>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 811e 	beq.w	8006008 <acis_gui_task+0x4d9c>
        {
          display_timeout = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          if(--menuitem2 < 0) menuitem2 = 0;
 8005dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da02      	bge.n	8005dea <acis_gui_task+0x4b7e>
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
          menufirst2 = menuitem2;
 8005dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
          select_timeout = now;
 8005df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005df6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          BUT_UP = 0;
 8005dfa:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <acis_gui_task+0x4bec>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
        }

        break;
 8005e00:	e102      	b.n	8006008 <acis_gui_task+0x4d9c>
      }
      case MenuPcConnected :
      {
        if(DelayDiff(now, display_timeout) > 500000)
 8005e02:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8005e06:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005e0a:	f001 fded 	bl	80079e8 <DelayDiff>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <acis_gui_task+0x4bf0>)
 8005e12:	429a      	cmp	r2, r3
 8005e14:	f240 80fb 	bls.w	800600e <acis_gui_task+0x4da2>
        {
          display_timeout = now;
 8005e18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 8005e20:	f001 ff12 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8005e24:	2301      	movs	r3, #1
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2340      	movs	r3, #64	; 0x40
 8005e2a:	2280      	movs	r2, #128	; 0x80
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	2000      	movs	r0, #0
 8005e30:	f001 fff5 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_arialb_16);
 8005e34:	480a      	ldr	r0, [pc, #40]	; (8005e60 <acis_gui_task+0x4bf4>)
 8005e36:	f009 fb29 	bl	800f48c <font_setFont>
          font_printf(10,18,"PC Connected");
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	; (8005e64 <acis_gui_task+0x4bf8>)
 8005e3c:	2112      	movs	r1, #18
 8005e3e:	200a      	movs	r0, #10
 8005e40:	f00a fd46 	bl	80108d0 <font_printf>
          lcd_update();
 8005e44:	f001 fe74 	bl	8007b30 <lcd_update>
        }
        break;
 8005e48:	e0e1      	b.n	800600e <acis_gui_task+0x4da2>
 8005e4a:	bf00      	nop
 8005e4c:	200068c8 	.word	0x200068c8
 8005e50:	20006901 	.word	0x20006901
 8005e54:	20006903 	.word	0x20006903
 8005e58:	20006902 	.word	0x20006902
 8005e5c:	0007a120 	.word	0x0007a120
 8005e60:	20002bf0 	.word	0x20002bf0
 8005e64:	08014a08 	.word	0x08014a08
      }

      case MenuSynchronizing :
      {
        if(DelayDiff(now, display_timeout) > 50000)
 8005e68:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8005e6c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005e70:	f001 fdba 	bl	80079e8 <DelayDiff>
 8005e74:	4602      	mov	r2, r0
 8005e76:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	f240 80ca 	bls.w	8006014 <acis_gui_task+0x4da8>
        {
          display_timeout = now;
 8005e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 8005e88:	f001 fede 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	2280      	movs	r2, #128	; 0x80
 8005e94:	2100      	movs	r1, #0
 8005e96:	2000      	movs	r0, #0
 8005e98:	f001 ffc1 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_arialb_16);
 8005e9c:	4860      	ldr	r0, [pc, #384]	; (8006020 <acis_gui_task+0x4db4>)
 8005e9e:	f009 faf5 	bl	800f48c <font_setFont>
          font_printf(0,18,"Synchronizing");
 8005ea2:	4a60      	ldr	r2, [pc, #384]	; (8006024 <acis_gui_task+0x4db8>)
 8005ea4:	2112      	movs	r1, #18
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f00a fd12 	bl	80108d0 <font_printf>

          font_printf(45 + cnt * 3,18+font_getHeight(),".");
 8005eac:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8005eba:	f009 fa8d 	bl	800f3d8 <font_getHeight>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	3312      	adds	r3, #18
 8005ec2:	4a59      	ldr	r2, [pc, #356]	; (8006028 <acis_gui_task+0x4dbc>)
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f00a fd02 	bl	80108d0 <font_printf>
          font_printf(45 + (((cnt + 1) % 12) * 3),18+font_getHeight(),".");
 8005ecc:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	4b56      	ldr	r3, [pc, #344]	; (800602c <acis_gui_task+0x4dc0>)
 8005ed4:	fb83 2301 	smull	r2, r3, r3, r1
 8005ed8:	105a      	asrs	r2, r3, #1
 8005eda:	17cb      	asrs	r3, r1, #31
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	4613      	mov	r3, r2
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	1aca      	subs	r2, r1, r3
 8005ee8:	4613      	mov	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4413      	add	r3, r2
 8005eee:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8005ef2:	f009 fa71 	bl	800f3d8 <font_getHeight>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	3312      	adds	r3, #18
 8005efa:	4a4b      	ldr	r2, [pc, #300]	; (8006028 <acis_gui_task+0x4dbc>)
 8005efc:	4619      	mov	r1, r3
 8005efe:	4620      	mov	r0, r4
 8005f00:	f00a fce6 	bl	80108d0 <font_printf>
          font_printf(45 + (((cnt + 2) % 12) * 3),18+font_getHeight(),".");
 8005f04:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8005f08:	1c99      	adds	r1, r3, #2
 8005f0a:	4b48      	ldr	r3, [pc, #288]	; (800602c <acis_gui_task+0x4dc0>)
 8005f0c:	fb83 2301 	smull	r2, r3, r3, r1
 8005f10:	105a      	asrs	r2, r3, #1
 8005f12:	17cb      	asrs	r3, r1, #31
 8005f14:	1ad2      	subs	r2, r2, r3
 8005f16:	4613      	mov	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	1aca      	subs	r2, r1, r3
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	f103 042d 	add.w	r4, r3, #45	; 0x2d
 8005f2a:	f009 fa55 	bl	800f3d8 <font_getHeight>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	3312      	adds	r3, #18
 8005f32:	4a3d      	ldr	r2, [pc, #244]	; (8006028 <acis_gui_task+0x4dbc>)
 8005f34:	4619      	mov	r1, r3
 8005f36:	4620      	mov	r0, r4
 8005f38:	f00a fcca 	bl	80108d0 <font_printf>

          cnt = (cnt + 1) % 12;
 8005f3c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	4b3a      	ldr	r3, [pc, #232]	; (800602c <acis_gui_task+0x4dc0>)
 8005f44:	fb83 1302 	smull	r1, r3, r3, r2
 8005f48:	1059      	asrs	r1, r3, #1
 8005f4a:	17d3      	asrs	r3, r2, #31
 8005f4c:	1ac9      	subs	r1, r1, r3
 8005f4e:	460b      	mov	r3, r1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	440b      	add	r3, r1
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	1ad1      	subs	r1, r2, r3
 8005f58:	460b      	mov	r3, r1
 8005f5a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

          lcd_update();
 8005f5e:	f001 fde7 	bl	8007b30 <lcd_update>
        }
        break;
 8005f62:	e057      	b.n	8006014 <acis_gui_task+0x4da8>
      }
      case MenuSyncError :
      {
        if(DelayDiff(now, display_timeout) > 500000)
 8005f64:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8005f68:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005f6c:	f001 fd3c 	bl	80079e8 <DelayDiff>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <acis_gui_task+0x4dc4>)
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d923      	bls.n	8005fc0 <acis_gui_task+0x4d54>
        {
          display_timeout = now;
 8005f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          lcd_clear();
 8005f80:	f001 fe62 	bl	8007c48 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8005f84:	2301      	movs	r3, #1
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2340      	movs	r3, #64	; 0x40
 8005f8a:	2280      	movs	r2, #128	; 0x80
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f001 ff45 	bl	8007e1e <lcd_rect>
          font_setFont(&rre_arialb_16);
 8005f94:	4822      	ldr	r0, [pc, #136]	; (8006020 <acis_gui_task+0x4db4>)
 8005f96:	f009 fa79 	bl	800f48c <font_setFont>
          font_printf(0,18,"Synchronizing");
 8005f9a:	4a22      	ldr	r2, [pc, #136]	; (8006024 <acis_gui_task+0x4db8>)
 8005f9c:	2112      	movs	r1, #18
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f00a fc96 	bl	80108d0 <font_printf>
          font_printf(0,18+font_getHeight(),"ERROR (%d)",SyncError);
 8005fa4:	f009 fa18 	bl	800f3d8 <font_getHeight>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f103 0112 	add.w	r1, r3, #18
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <acis_gui_task+0x4dc8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	4a20      	ldr	r2, [pc, #128]	; (8006038 <acis_gui_task+0x4dcc>)
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f00a fc8a 	bl	80108d0 <font_printf>
          lcd_update();
 8005fbc:	f001 fdb8 	bl	8007b30 <lcd_update>
        }
        if(DelayDiff(now, last_menu_switch) > 2000000)
 8005fc0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005fc4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005fc8:	f001 fd0e 	bl	80079e8 <DelayDiff>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b1b      	ldr	r3, [pc, #108]	; (800603c <acis_gui_task+0x4dd0>)
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d922      	bls.n	800601a <acis_gui_task+0x4dae>
          eMenuItem = MenuMain;
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <acis_gui_task+0x4dd4>)
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	701a      	strb	r2, [r3, #0]
        break;
 8005fda:	e01e      	b.n	800601a <acis_gui_task+0x4dae>
      }
      default :
        eMenuItem = MenuMain;
 8005fdc:	4b18      	ldr	r3, [pc, #96]	; (8006040 <acis_gui_task+0x4dd4>)
 8005fde:	2204      	movs	r2, #4
 8005fe0:	701a      	strb	r2, [r3, #0]
        break;
 8005fe2:	e01b      	b.n	800601c <acis_gui_task+0x4db0>
        break;
 8005fe4:	bf00      	nop
 8005fe6:	f7fb b97c 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 8005fea:	bf00      	nop
 8005fec:	f7fb b979 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 8005ff0:	bf00      	nop
 8005ff2:	f7fb b976 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 8005ff6:	bf00      	nop
 8005ff8:	f7fb b973 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 8005ffc:	bf00      	nop
 8005ffe:	f7fb b970 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 8006002:	bf00      	nop
 8006004:	f7fb b96d 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 8006008:	bf00      	nop
 800600a:	f7fb b96a 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 800600e:	bf00      	nop
 8006010:	f7fb b967 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 8006014:	bf00      	nop
 8006016:	f7fb b964 	b.w	80012e2 <acis_gui_task+0x76>
        break;
 800601a:	bf00      	nop
    if(StatusValveNum == 1)
 800601c:	f7fb b961 	b.w	80012e2 <acis_gui_task+0x76>
 8006020:	20002bf0 	.word	0x20002bf0
 8006024:	08014a18 	.word	0x08014a18
 8006028:	08014a28 	.word	0x08014a28
 800602c:	2aaaaaab 	.word	0x2aaaaaab
 8006030:	0007a120 	.word	0x0007a120
 8006034:	200068b8 	.word	0x200068b8
 8006038:	08014a2c 	.word	0x08014a2c
 800603c:	001e8480 	.word	0x001e8480
 8006040:	2000687c 	.word	0x2000687c

08006044 <acis_sender_task>:
  }

}

static void acis_sender_task(void * argument)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint8_t sending = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	75fb      	strb	r3, [r7, #23]
  uint8_t destination = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	72bb      	strb	r3, [r7, #10]
  uint8_t size = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	727b      	strb	r3, [r7, #9]

  while(1)
  {
    do
    {
      if(!sending && protGetSize(&fifoSendingQueue) > 4)
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d133      	bne.n	80060c6 <acis_sender_task+0x82>
 800605e:	4824      	ldr	r0, [pc, #144]	; (80060f0 <acis_sender_task+0xac>)
 8006060:	f004 fc60 	bl	800a924 <protGetSize>
 8006064:	4603      	mov	r3, r0
 8006066:	2b04      	cmp	r3, #4
 8006068:	d92d      	bls.n	80060c6 <acis_sender_task+0x82>
      {
        protLook(&fifoSendingQueue,1,&size);
 800606a:	f107 0309 	add.w	r3, r7, #9
 800606e:	461a      	mov	r2, r3
 8006070:	2101      	movs	r1, #1
 8006072:	481f      	ldr	r0, [pc, #124]	; (80060f0 <acis_sender_task+0xac>)
 8006074:	f004 fdad 	bl	800abd2 <protLook>
        protLook(&fifoSendingQueue,2,&destination);
 8006078:	f107 030a 	add.w	r3, r7, #10
 800607c:	461a      	mov	r2, r3
 800607e:	2102      	movs	r1, #2
 8006080:	481b      	ldr	r0, [pc, #108]	; (80060f0 <acis_sender_task+0xac>)
 8006082:	f004 fda6 	bl	800abd2 <protLook>
        if(protGetSize(&fifoSendingQueue) >= size)
 8006086:	481a      	ldr	r0, [pc, #104]	; (80060f0 <acis_sender_task+0xac>)
 8006088:	f004 fc4c 	bl	800a924 <protGetSize>
 800608c:	4602      	mov	r2, r0
 800608e:	7a7b      	ldrb	r3, [r7, #9]
 8006090:	429a      	cmp	r2, r3
 8006092:	d318      	bcc.n	80060c6 <acis_sender_task+0x82>
        {
          pnt = buffSendingBuffer;
 8006094:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <acis_sender_task+0xb0>)
 8006096:	613b      	str	r3, [r7, #16]
          for(int i = 0; i < size; i++)
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e009      	b.n	80060b2 <acis_sender_task+0x6e>
            protPull(&fifoSendingQueue, pnt++);
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	613a      	str	r2, [r7, #16]
 80060a4:	4619      	mov	r1, r3
 80060a6:	4812      	ldr	r0, [pc, #72]	; (80060f0 <acis_sender_task+0xac>)
 80060a8:	f004 fd84 	bl	800abb4 <protPull>
          for(int i = 0; i < size; i++)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3301      	adds	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	7a7b      	ldrb	r3, [r7, #9]
 80060b4:	461a      	mov	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	dbf0      	blt.n	800609e <acis_sender_task+0x5a>
          if(destination)
 80060bc:	7abb      	ldrb	r3, [r7, #10]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <acis_sender_task+0x82>
            sending = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if(sending)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <acis_sender_task+0xa4>
      {
        status = acis_send_command(destination, buffSendingBuffer, size);
 80060cc:	7abb      	ldrb	r3, [r7, #10]
 80060ce:	7a7a      	ldrb	r2, [r7, #9]
 80060d0:	4908      	ldr	r1, [pc, #32]	; (80060f4 <acis_sender_task+0xb0>)
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 f888 	bl	80071e8 <acis_send_command>
 80060d8:	4603      	mov	r3, r0
 80060da:	72fb      	strb	r3, [r7, #11]
        if(status != HAL_BUSY)
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d002      	beq.n	80060e8 <acis_sender_task+0xa4>
        {
          sending = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75fb      	strb	r3, [r7, #23]
          continue;
 80060e6:	bf00      	nop
        }
      }
    } while(0);
    osDelay(1);
 80060e8:	2001      	movs	r0, #1
 80060ea:	f007 f9bb 	bl	800d464 <osDelay>
      if(!sending && protGetSize(&fifoSendingQueue) > 4)
 80060ee:	e7b3      	b.n	8006058 <acis_sender_task+0x14>
 80060f0:	20006860 	.word	0x20006860
 80060f4:	200060e0 	.word	0x200060e0

080060f8 <acis_main_task>:
  }

}

void acis_main_task(void * argument)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t LastPacket = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
  uint32_t LastGeneralStatusPacket = 0;
 8006104:	2300      	movs	r3, #0
 8006106:	61bb      	str	r3, [r7, #24]
  uint32_t LastFuelSwitchPacket = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
  uint8_t LastFuelSwitchPos = 0xFF;
 800610c:	23ff      	movs	r3, #255	; 0xff
 800610e:	74fb      	strb	r3, [r7, #19]
  uint8_t FuelSwitchPos = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	74bb      	strb	r3, [r7, #18]
  uint32_t now;
  protInit(&fifoSendingQueue, buffSendingQueue, 1, SENDING_QUEUE_SIZE);
 8006114:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006118:	2201      	movs	r2, #1
 800611a:	49a0      	ldr	r1, [pc, #640]	; (800639c <acis_main_task+0x2a4>)
 800611c:	48a0      	ldr	r0, [pc, #640]	; (80063a0 <acis_main_task+0x2a8>)
 800611e:	f004 fc1f 	bl	800a960 <protInit>
  tGuiHandler = osThreadNew(acis_gui_task, NULL, &cTaskAttributes);
 8006122:	4aa0      	ldr	r2, [pc, #640]	; (80063a4 <acis_main_task+0x2ac>)
 8006124:	2100      	movs	r1, #0
 8006126:	48a0      	ldr	r0, [pc, #640]	; (80063a8 <acis_main_task+0x2b0>)
 8006128:	f007 f944 	bl	800d3b4 <osThreadNew>
 800612c:	4602      	mov	r2, r0
 800612e:	4b9f      	ldr	r3, [pc, #636]	; (80063ac <acis_main_task+0x2b4>)
 8006130:	601a      	str	r2, [r3, #0]
  tSenderHandler = osThreadNew(acis_sender_task, NULL, &cTaskAttributes);
 8006132:	4a9c      	ldr	r2, [pc, #624]	; (80063a4 <acis_main_task+0x2ac>)
 8006134:	2100      	movs	r1, #0
 8006136:	489e      	ldr	r0, [pc, #632]	; (80063b0 <acis_main_task+0x2b8>)
 8006138:	f007 f93c 	bl	800d3b4 <osThreadNew>
 800613c:	4602      	mov	r2, r0
 800613e:	4b9d      	ldr	r3, [pc, #628]	; (80063b4 <acis_main_task+0x2bc>)
 8006140:	601a      	str	r2, [r3, #0]
  StatusSynchronizing = 1; //Read config
 8006142:	4b9d      	ldr	r3, [pc, #628]	; (80063b8 <acis_main_task+0x2c0>)
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
  while(1)
  {
    now = Delay_Tick;
 8006148:	4b9c      	ldr	r3, [pc, #624]	; (80063bc <acis_main_task+0x2c4>)
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	60fb      	str	r3, [r7, #12]
    if(StatusSynchronizing == 0)
 800614e:	4b9a      	ldr	r3, [pc, #616]	; (80063b8 <acis_main_task+0x2c0>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11c      	bne.n	8006192 <acis_main_task+0x9a>
    {
      if(NeedLoad)
 8006158:	4b99      	ldr	r3, [pc, #612]	; (80063c0 <acis_main_task+0x2c8>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <acis_main_task+0x7e>
      {
        SyncSize = 0;
 8006162:	4b98      	ldr	r3, [pc, #608]	; (80063c4 <acis_main_task+0x2cc>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
        SyncStep = 0;
 8006168:	4b97      	ldr	r3, [pc, #604]	; (80063c8 <acis_main_task+0x2d0>)
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
        StatusSynchronizing = 1;
 800616e:	4b92      	ldr	r3, [pc, #584]	; (80063b8 <acis_main_task+0x2c0>)
 8006170:	2201      	movs	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e00d      	b.n	8006192 <acis_main_task+0x9a>
      }
      else if(NeedSave)
 8006176:	4b95      	ldr	r3, [pc, #596]	; (80063cc <acis_main_task+0x2d4>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <acis_main_task+0x9a>
      {
        SyncSize = 0;
 8006180:	4b90      	ldr	r3, [pc, #576]	; (80063c4 <acis_main_task+0x2cc>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
        SyncStep = 0;
 8006186:	4b90      	ldr	r3, [pc, #576]	; (80063c8 <acis_main_task+0x2d0>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
        StatusSynchronizing = 2;
 800618c:	4b8a      	ldr	r3, [pc, #552]	; (80063b8 <acis_main_task+0x2c0>)
 800618e:	2202      	movs	r2, #2
 8006190:	701a      	strb	r2, [r3, #0]
      }
    }

    if(StatusSynchronizing == 1)
 8006192:	4b89      	ldr	r3, [pc, #548]	; (80063b8 <acis_main_task+0x2c0>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	f040 8222 	bne.w	80065e2 <acis_main_task+0x4ea>
    {
      StatusSynchronized = 0;
 800619e:	4b8c      	ldr	r3, [pc, #560]	; (80063d0 <acis_main_task+0x2d8>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	701a      	strb	r2, [r3, #0]
      if(SyncStep == 0)
 80061a4:	4b88      	ldr	r3, [pc, #544]	; (80063c8 <acis_main_task+0x2d0>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d159      	bne.n	8006262 <acis_main_task+0x16a>
      {
        if(NeedLoad)
 80061ae:	4b84      	ldr	r3, [pc, #528]	; (80063c0 <acis_main_task+0x2c8>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d04f      	beq.n	8006258 <acis_main_task+0x160>
        {
          if(SyncSize == 0)
 80061b8:	4b82      	ldr	r3, [pc, #520]	; (80063c4 <acis_main_task+0x2cc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <acis_main_task+0xe8>
          {
            SyncSize = 1;
 80061c0:	4b80      	ldr	r3, [pc, #512]	; (80063c4 <acis_main_task+0x2cc>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
            SyncRequestDone = 0;
 80061c6:	4b83      	ldr	r3, [pc, #524]	; (80063d4 <acis_main_task+0x2dc>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
            PK_RestoreConfig.Destination = etrACIS;
 80061cc:	4b82      	ldr	r3, [pc, #520]	; (80063d8 <acis_main_task+0x2e0>)
 80061ce:	2202      	movs	r2, #2
 80061d0:	709a      	strb	r2, [r3, #2]
            protPushSequence(&fifoSendingQueue, &PK_RestoreConfig, sizeof(PK_RestoreConfig));
 80061d2:	2204      	movs	r2, #4
 80061d4:	4980      	ldr	r1, [pc, #512]	; (80063d8 <acis_main_task+0x2e0>)
 80061d6:	4872      	ldr	r0, [pc, #456]	; (80063a0 <acis_main_task+0x2a8>)
 80061d8:	f004 fcb0 	bl	800ab3c <protPushSequence>
 80061dc:	f000 bce1 	b.w	8006ba2 <acis_main_task+0xaaa>
          }
          else
          {
            if(SyncRequestDone == 0)
 80061e0:	4b7c      	ldr	r3, [pc, #496]	; (80063d4 <acis_main_task+0x2dc>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d111      	bne.n	800620e <acis_main_task+0x116>
            {
              SyncRequestDone = 0;
 80061ea:	4b7a      	ldr	r3, [pc, #488]	; (80063d4 <acis_main_task+0x2dc>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
              SyncStep++;
 80061f0:	4b75      	ldr	r3, [pc, #468]	; (80063c8 <acis_main_task+0x2d0>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	3301      	adds	r3, #1
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	4b73      	ldr	r3, [pc, #460]	; (80063c8 <acis_main_task+0x2d0>)
 80061fc:	701a      	strb	r2, [r3, #0]
              NeedLoad = 0;
 80061fe:	4b70      	ldr	r3, [pc, #448]	; (80063c0 <acis_main_task+0x2c8>)
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8006204:	4b6f      	ldr	r3, [pc, #444]	; (80063c4 <acis_main_task+0x2cc>)
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f000 bcca 	b.w	8006ba2 <acis_main_task+0xaaa>
            }
            else if(DelayDiff(now, LastPacket) > 3000000 || SyncError > 0)
 800620e:	69f9      	ldr	r1, [r7, #28]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 fbe9 	bl	80079e8 <DelayDiff>
 8006216:	4602      	mov	r2, r0
 8006218:	4b70      	ldr	r3, [pc, #448]	; (80063dc <acis_main_task+0x2e4>)
 800621a:	429a      	cmp	r2, r3
 800621c:	d805      	bhi.n	800622a <acis_main_task+0x132>
 800621e:	4b70      	ldr	r3, [pc, #448]	; (80063e0 <acis_main_task+0x2e8>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 84bc 	beq.w	8006ba2 <acis_main_task+0xaaa>
            {
              StatusSynchronizing = 0;
 800622a:	4b63      	ldr	r3, [pc, #396]	; (80063b8 <acis_main_task+0x2c0>)
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
              SyncStep = 0;
 8006230:	4b65      	ldr	r3, [pc, #404]	; (80063c8 <acis_main_task+0x2d0>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8006236:	4b63      	ldr	r3, [pc, #396]	; (80063c4 <acis_main_task+0x2cc>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
              NeedLoad = 0;
 800623c:	4b60      	ldr	r3, [pc, #384]	; (80063c0 <acis_main_task+0x2c8>)
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
              if(SyncError == 0)
 8006242:	4b67      	ldr	r3, [pc, #412]	; (80063e0 <acis_main_task+0x2e8>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	f040 84aa 	bne.w	8006ba2 <acis_main_task+0xaaa>
                SyncError = 1;
 800624e:	4b64      	ldr	r3, [pc, #400]	; (80063e0 <acis_main_task+0x2e8>)
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	f000 bca5 	b.w	8006ba2 <acis_main_task+0xaaa>
            }
          }
        }
        else SyncStep = 1;
 8006258:	4b5b      	ldr	r3, [pc, #364]	; (80063c8 <acis_main_task+0x2d0>)
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	f000 bca0 	b.w	8006ba2 <acis_main_task+0xaaa>
      }
      else if(SyncStep == 1)
 8006262:	4b59      	ldr	r3, [pc, #356]	; (80063c8 <acis_main_task+0x2d0>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	f040 80e2 	bne.w	8006432 <acis_main_task+0x33a>
      {
        if(SyncSize == 0)
 800626e:	4b55      	ldr	r3, [pc, #340]	; (80063c4 <acis_main_task+0x2cc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d148      	bne.n	8006308 <acis_main_task+0x210>
        {
          SyncSize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 8006276:	4b53      	ldr	r3, [pc, #332]	; (80063c4 <acis_main_task+0x2cc>)
 8006278:	22e0      	movs	r2, #224	; 0xe0
 800627a:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 800627c:	4b51      	ldr	r3, [pc, #324]	; (80063c4 <acis_main_task+0x2cc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a58      	ldr	r2, [pc, #352]	; (80063e4 <acis_main_task+0x2ec>)
 8006282:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 8006284:	4b58      	ldr	r3, [pc, #352]	; (80063e8 <acis_main_task+0x2f0>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 800628a:	4b52      	ldr	r3, [pc, #328]	; (80063d4 <acis_main_task+0x2dc>)
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
          PK_ConfigMemoryRequest.Destination = etrACIS;
 8006290:	4b56      	ldr	r3, [pc, #344]	; (80063ec <acis_main_task+0x2f4>)
 8006292:	2202      	movs	r2, #2
 8006294:	709a      	strb	r2, [r3, #2]
          PK_ConfigMemoryRequest.configsize = SyncSize;
 8006296:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <acis_main_task+0x2cc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a54      	ldr	r2, [pc, #336]	; (80063ec <acis_main_task+0x2f4>)
 800629c:	6053      	str	r3, [r2, #4]
          PK_ConfigMemoryRequest.offset = SyncOffset;
 800629e:	4b52      	ldr	r3, [pc, #328]	; (80063e8 <acis_main_task+0x2f0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a52      	ldr	r2, [pc, #328]	; (80063ec <acis_main_task+0x2f4>)
 80062a4:	6093      	str	r3, [r2, #8]

          if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 80062a6:	4b4f      	ldr	r3, [pc, #316]	; (80063e4 <acis_main_task+0x2ec>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2bd4      	cmp	r3, #212	; 0xd4
 80062ac:	d911      	bls.n	80062d2 <acis_main_task+0x1da>
          {
            PK_ConfigMemoryRequest.offset = SyncOffset;
 80062ae:	4b4e      	ldr	r3, [pc, #312]	; (80063e8 <acis_main_task+0x2f0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a4e      	ldr	r2, [pc, #312]	; (80063ec <acis_main_task+0x2f4>)
 80062b4:	6093      	str	r3, [r2, #8]
            PK_ConfigMemoryRequest.size = PACKET_CONFIG_MAX_SIZE;
 80062b6:	4b4d      	ldr	r3, [pc, #308]	; (80063ec <acis_main_task+0x2f4>)
 80062b8:	22d4      	movs	r2, #212	; 0xd4
 80062ba:	60da      	str	r2, [r3, #12]
            SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 80062bc:	4b49      	ldr	r3, [pc, #292]	; (80063e4 <acis_main_task+0x2ec>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3bd4      	subs	r3, #212	; 0xd4
 80062c2:	4a48      	ldr	r2, [pc, #288]	; (80063e4 <acis_main_task+0x2ec>)
 80062c4:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_CONFIG_MAX_SIZE;
 80062c6:	4b48      	ldr	r3, [pc, #288]	; (80063e8 <acis_main_task+0x2f0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	33d4      	adds	r3, #212	; 0xd4
 80062cc:	4a46      	ldr	r2, [pc, #280]	; (80063e8 <acis_main_task+0x2f0>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e011      	b.n	80062f6 <acis_main_task+0x1fe>
          }
          else
          {
            PK_ConfigMemoryRequest.offset = SyncOffset;
 80062d2:	4b45      	ldr	r3, [pc, #276]	; (80063e8 <acis_main_task+0x2f0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a45      	ldr	r2, [pc, #276]	; (80063ec <acis_main_task+0x2f4>)
 80062d8:	6093      	str	r3, [r2, #8]
            PK_ConfigMemoryRequest.size = SyncLeft;
 80062da:	4b42      	ldr	r3, [pc, #264]	; (80063e4 <acis_main_task+0x2ec>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a43      	ldr	r2, [pc, #268]	; (80063ec <acis_main_task+0x2f4>)
 80062e0:	60d3      	str	r3, [r2, #12]
            SyncOffset += SyncLeft;
 80062e2:	4b40      	ldr	r3, [pc, #256]	; (80063e4 <acis_main_task+0x2ec>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b40      	ldr	r3, [pc, #256]	; (80063e8 <acis_main_task+0x2f0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4413      	add	r3, r2
 80062ec:	4a3e      	ldr	r2, [pc, #248]	; (80063e8 <acis_main_task+0x2f0>)
 80062ee:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 80062f0:	4b3c      	ldr	r3, [pc, #240]	; (80063e4 <acis_main_task+0x2ec>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
          }
          protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryRequest, sizeof(PK_ConfigMemoryRequest));
 80062f6:	2210      	movs	r2, #16
 80062f8:	493c      	ldr	r1, [pc, #240]	; (80063ec <acis_main_task+0x2f4>)
 80062fa:	4829      	ldr	r0, [pc, #164]	; (80063a0 <acis_main_task+0x2a8>)
 80062fc:	f004 fc1e 	bl	800ab3c <protPushSequence>
          LastPacket = now;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	f000 bc4d 	b.w	8006ba2 <acis_main_task+0xaaa>
        }
        else
        {
          if(SyncRequestDone)
 8006308:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <acis_main_task+0x2dc>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d06e      	beq.n	80063f0 <acis_main_task+0x2f8>
          {
            SyncRequestDone = 0;
 8006312:	4b30      	ldr	r3, [pc, #192]	; (80063d4 <acis_main_task+0x2dc>)
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 8006318:	4b32      	ldr	r3, [pc, #200]	; (80063e4 <acis_main_task+0x2ec>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <acis_main_task+0x240>
            {
              SyncStep++;
 8006320:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <acis_main_task+0x2d0>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	3301      	adds	r3, #1
 8006328:	b2da      	uxtb	r2, r3
 800632a:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <acis_main_task+0x2d0>)
 800632c:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 800632e:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <acis_main_task+0x2cc>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f000 bc35 	b.w	8006ba2 <acis_main_task+0xaaa>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 8006338:	4b2a      	ldr	r3, [pc, #168]	; (80063e4 <acis_main_task+0x2ec>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2bd4      	cmp	r3, #212	; 0xd4
 800633e:	d911      	bls.n	8006364 <acis_main_task+0x26c>
              {
                PK_ConfigMemoryRequest.offset = SyncOffset;
 8006340:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <acis_main_task+0x2f0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a29      	ldr	r2, [pc, #164]	; (80063ec <acis_main_task+0x2f4>)
 8006346:	6093      	str	r3, [r2, #8]
                PK_ConfigMemoryRequest.size = PACKET_CONFIG_MAX_SIZE;
 8006348:	4b28      	ldr	r3, [pc, #160]	; (80063ec <acis_main_task+0x2f4>)
 800634a:	22d4      	movs	r2, #212	; 0xd4
 800634c:	60da      	str	r2, [r3, #12]
                SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 800634e:	4b25      	ldr	r3, [pc, #148]	; (80063e4 <acis_main_task+0x2ec>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3bd4      	subs	r3, #212	; 0xd4
 8006354:	4a23      	ldr	r2, [pc, #140]	; (80063e4 <acis_main_task+0x2ec>)
 8006356:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_CONFIG_MAX_SIZE;
 8006358:	4b23      	ldr	r3, [pc, #140]	; (80063e8 <acis_main_task+0x2f0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	33d4      	adds	r3, #212	; 0xd4
 800635e:	4a22      	ldr	r2, [pc, #136]	; (80063e8 <acis_main_task+0x2f0>)
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e011      	b.n	8006388 <acis_main_task+0x290>
              }
              else
              {
                PK_ConfigMemoryRequest.offset = SyncOffset;
 8006364:	4b20      	ldr	r3, [pc, #128]	; (80063e8 <acis_main_task+0x2f0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <acis_main_task+0x2f4>)
 800636a:	6093      	str	r3, [r2, #8]
                PK_ConfigMemoryRequest.size = SyncLeft;
 800636c:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <acis_main_task+0x2ec>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1e      	ldr	r2, [pc, #120]	; (80063ec <acis_main_task+0x2f4>)
 8006372:	60d3      	str	r3, [r2, #12]
                SyncOffset += SyncLeft;
 8006374:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <acis_main_task+0x2ec>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <acis_main_task+0x2f0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4413      	add	r3, r2
 800637e:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <acis_main_task+0x2f0>)
 8006380:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 8006382:	4b18      	ldr	r3, [pc, #96]	; (80063e4 <acis_main_task+0x2ec>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
              }
              protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryRequest, sizeof(PK_ConfigMemoryRequest));
 8006388:	2210      	movs	r2, #16
 800638a:	4918      	ldr	r1, [pc, #96]	; (80063ec <acis_main_task+0x2f4>)
 800638c:	4804      	ldr	r0, [pc, #16]	; (80063a0 <acis_main_task+0x2a8>)
 800638e:	f004 fbd5 	bl	800ab3c <protPushSequence>
              LastPacket = now;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	f000 bc04 	b.w	8006ba2 <acis_main_task+0xaaa>
 800639a:	bf00      	nop
 800639c:	20006260 	.word	0x20006260
 80063a0:	20006860 	.word	0x20006860
 80063a4:	08014a9c 	.word	0x08014a9c
 80063a8:	0800126d 	.word	0x0800126d
 80063ac:	2000ff08 	.word	0x2000ff08
 80063b0:	08006045 	.word	0x08006045
 80063b4:	2000ff04 	.word	0x2000ff04
 80063b8:	2000689f 	.word	0x2000689f
 80063bc:	40000c00 	.word	0x40000c00
 80063c0:	200068a6 	.word	0x200068a6
 80063c4:	200068ac 	.word	0x200068ac
 80063c8:	200068a7 	.word	0x200068a7
 80063cc:	200068a5 	.word	0x200068a5
 80063d0:	2000689e 	.word	0x2000689e
 80063d4:	200068a8 	.word	0x200068a8
 80063d8:	20000340 	.word	0x20000340
 80063dc:	002dc6c0 	.word	0x002dc6c0
 80063e0:	200068b8 	.word	0x200068b8
 80063e4:	200068b0 	.word	0x200068b0
 80063e8:	200068b4 	.word	0x200068b4
 80063ec:	200001e0 	.word	0x200001e0
            }

          }
          else if(DelayDiff(now, LastPacket) > 500000 || SyncError > 0)
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f001 faf8 	bl	80079e8 <DelayDiff>
 80063f8:	4602      	mov	r2, r0
 80063fa:	4b9a      	ldr	r3, [pc, #616]	; (8006664 <acis_main_task+0x56c>)
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d805      	bhi.n	800640c <acis_main_task+0x314>
 8006400:	4b99      	ldr	r3, [pc, #612]	; (8006668 <acis_main_task+0x570>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 83cb 	beq.w	8006ba2 <acis_main_task+0xaaa>
          {
            StatusSynchronizing = 0;
 800640c:	4b97      	ldr	r3, [pc, #604]	; (800666c <acis_main_task+0x574>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 8006412:	4b97      	ldr	r3, [pc, #604]	; (8006670 <acis_main_task+0x578>)
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 8006418:	4b96      	ldr	r3, [pc, #600]	; (8006674 <acis_main_task+0x57c>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 800641e:	4b92      	ldr	r3, [pc, #584]	; (8006668 <acis_main_task+0x570>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 83bc 	bne.w	8006ba2 <acis_main_task+0xaaa>
              SyncError = 1;
 800642a:	4b8f      	ldr	r3, [pc, #572]	; (8006668 <acis_main_task+0x570>)
 800642c:	2201      	movs	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e3b7      	b.n	8006ba2 <acis_main_task+0xaaa>
          }
        }
      }
      else if(SyncStep > 1 && SyncStep <= TABLE_SETUPS_MAX + 1)
 8006432:	4b8f      	ldr	r3, [pc, #572]	; (8006670 <acis_main_task+0x578>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	f240 80c2 	bls.w	80065c2 <acis_main_task+0x4ca>
 800643e:	4b8c      	ldr	r3, [pc, #560]	; (8006670 <acis_main_task+0x578>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b05      	cmp	r3, #5
 8006446:	f200 80bc 	bhi.w	80065c2 <acis_main_task+0x4ca>
      {
        if(SyncSize == 0)
 800644a:	4b8a      	ldr	r3, [pc, #552]	; (8006674 <acis_main_task+0x57c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d14f      	bne.n	80064f2 <acis_main_task+0x3fa>
        {
          SyncSize = sizeof(sAcisIgnTable);
 8006452:	4b88      	ldr	r3, [pc, #544]	; (8006674 <acis_main_task+0x57c>)
 8006454:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006458:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 800645a:	4b86      	ldr	r3, [pc, #536]	; (8006674 <acis_main_task+0x57c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a86      	ldr	r2, [pc, #536]	; (8006678 <acis_main_task+0x580>)
 8006460:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 8006462:	4b86      	ldr	r3, [pc, #536]	; (800667c <acis_main_task+0x584>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 8006468:	4b85      	ldr	r3, [pc, #532]	; (8006680 <acis_main_task+0x588>)
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
          PK_TableMemoryRequest.Destination = etrACIS;
 800646e:	4b85      	ldr	r3, [pc, #532]	; (8006684 <acis_main_task+0x58c>)
 8006470:	2202      	movs	r2, #2
 8006472:	709a      	strb	r2, [r3, #2]
          PK_TableMemoryRequest.tablesize = SyncSize;
 8006474:	4b7f      	ldr	r3, [pc, #508]	; (8006674 <acis_main_task+0x57c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a82      	ldr	r2, [pc, #520]	; (8006684 <acis_main_task+0x58c>)
 800647a:	6093      	str	r3, [r2, #8]
          PK_TableMemoryRequest.table = SyncStep - 2;
 800647c:	4b7c      	ldr	r3, [pc, #496]	; (8006670 <acis_main_task+0x578>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	b2db      	uxtb	r3, r3
 8006482:	3b02      	subs	r3, #2
 8006484:	461a      	mov	r2, r3
 8006486:	4b7f      	ldr	r3, [pc, #508]	; (8006684 <acis_main_task+0x58c>)
 8006488:	605a      	str	r2, [r3, #4]
          PK_TableMemoryRequest.offset = SyncOffset;
 800648a:	4b7c      	ldr	r3, [pc, #496]	; (800667c <acis_main_task+0x584>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a7d      	ldr	r2, [pc, #500]	; (8006684 <acis_main_task+0x58c>)
 8006490:	60d3      	str	r3, [r2, #12]

          if(SyncLeft > PACKET_TABLE_MAX_SIZE)
 8006492:	4b79      	ldr	r3, [pc, #484]	; (8006678 <acis_main_task+0x580>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2be0      	cmp	r3, #224	; 0xe0
 8006498:	d911      	bls.n	80064be <acis_main_task+0x3c6>
          {
            PK_TableMemoryRequest.offset = SyncOffset;
 800649a:	4b78      	ldr	r3, [pc, #480]	; (800667c <acis_main_task+0x584>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a79      	ldr	r2, [pc, #484]	; (8006684 <acis_main_task+0x58c>)
 80064a0:	60d3      	str	r3, [r2, #12]
            PK_TableMemoryRequest.size = PACKET_TABLE_MAX_SIZE;
 80064a2:	4b78      	ldr	r3, [pc, #480]	; (8006684 <acis_main_task+0x58c>)
 80064a4:	22e0      	movs	r2, #224	; 0xe0
 80064a6:	611a      	str	r2, [r3, #16]
            SyncLeft -= PACKET_TABLE_MAX_SIZE;
 80064a8:	4b73      	ldr	r3, [pc, #460]	; (8006678 <acis_main_task+0x580>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3be0      	subs	r3, #224	; 0xe0
 80064ae:	4a72      	ldr	r2, [pc, #456]	; (8006678 <acis_main_task+0x580>)
 80064b0:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_TABLE_MAX_SIZE;
 80064b2:	4b72      	ldr	r3, [pc, #456]	; (800667c <acis_main_task+0x584>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	33e0      	adds	r3, #224	; 0xe0
 80064b8:	4a70      	ldr	r2, [pc, #448]	; (800667c <acis_main_task+0x584>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e011      	b.n	80064e2 <acis_main_task+0x3ea>
          }
          else
          {
            PK_TableMemoryRequest.offset = SyncOffset;
 80064be:	4b6f      	ldr	r3, [pc, #444]	; (800667c <acis_main_task+0x584>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a70      	ldr	r2, [pc, #448]	; (8006684 <acis_main_task+0x58c>)
 80064c4:	60d3      	str	r3, [r2, #12]
            PK_TableMemoryRequest.size = SyncLeft;
 80064c6:	4b6c      	ldr	r3, [pc, #432]	; (8006678 <acis_main_task+0x580>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a6e      	ldr	r2, [pc, #440]	; (8006684 <acis_main_task+0x58c>)
 80064cc:	6113      	str	r3, [r2, #16]
            SyncOffset += SyncLeft;
 80064ce:	4b6a      	ldr	r3, [pc, #424]	; (8006678 <acis_main_task+0x580>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b6a      	ldr	r3, [pc, #424]	; (800667c <acis_main_task+0x584>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4413      	add	r3, r2
 80064d8:	4a68      	ldr	r2, [pc, #416]	; (800667c <acis_main_task+0x584>)
 80064da:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 80064dc:	4b66      	ldr	r3, [pc, #408]	; (8006678 <acis_main_task+0x580>)
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
          }
          protPushSequence(&fifoSendingQueue, &PK_TableMemoryRequest, sizeof(PK_TableMemoryRequest));
 80064e2:	2214      	movs	r2, #20
 80064e4:	4967      	ldr	r1, [pc, #412]	; (8006684 <acis_main_task+0x58c>)
 80064e6:	4868      	ldr	r0, [pc, #416]	; (8006688 <acis_main_task+0x590>)
 80064e8:	f004 fb28 	bl	800ab3c <protPushSequence>
          LastPacket = now;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	61fb      	str	r3, [r7, #28]
        if(SyncSize == 0)
 80064f0:	e333      	b.n	8006b5a <acis_main_task+0xa62>
        }
        else
        {
          if(SyncRequestDone)
 80064f2:	4b63      	ldr	r3, [pc, #396]	; (8006680 <acis_main_task+0x588>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d041      	beq.n	8006580 <acis_main_task+0x488>
          {
            SyncRequestDone = 0;
 80064fc:	4b60      	ldr	r3, [pc, #384]	; (8006680 <acis_main_task+0x588>)
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 8006502:	4b5d      	ldr	r3, [pc, #372]	; (8006678 <acis_main_task+0x580>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <acis_main_task+0x428>
            {
              SyncStep++;
 800650a:	4b59      	ldr	r3, [pc, #356]	; (8006670 <acis_main_task+0x578>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	3301      	adds	r3, #1
 8006512:	b2da      	uxtb	r2, r3
 8006514:	4b56      	ldr	r3, [pc, #344]	; (8006670 <acis_main_task+0x578>)
 8006516:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8006518:	4b56      	ldr	r3, [pc, #344]	; (8006674 <acis_main_task+0x57c>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
        if(SyncSize == 0)
 800651e:	e31c      	b.n	8006b5a <acis_main_task+0xa62>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 8006520:	4b55      	ldr	r3, [pc, #340]	; (8006678 <acis_main_task+0x580>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2bd4      	cmp	r3, #212	; 0xd4
 8006526:	d911      	bls.n	800654c <acis_main_task+0x454>
              {
                PK_TableMemoryRequest.offset = SyncOffset;
 8006528:	4b54      	ldr	r3, [pc, #336]	; (800667c <acis_main_task+0x584>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a55      	ldr	r2, [pc, #340]	; (8006684 <acis_main_task+0x58c>)
 800652e:	60d3      	str	r3, [r2, #12]
                PK_TableMemoryRequest.size = PACKET_TABLE_MAX_SIZE;
 8006530:	4b54      	ldr	r3, [pc, #336]	; (8006684 <acis_main_task+0x58c>)
 8006532:	22e0      	movs	r2, #224	; 0xe0
 8006534:	611a      	str	r2, [r3, #16]
                SyncLeft -= PACKET_TABLE_MAX_SIZE;
 8006536:	4b50      	ldr	r3, [pc, #320]	; (8006678 <acis_main_task+0x580>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3be0      	subs	r3, #224	; 0xe0
 800653c:	4a4e      	ldr	r2, [pc, #312]	; (8006678 <acis_main_task+0x580>)
 800653e:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_TABLE_MAX_SIZE;
 8006540:	4b4e      	ldr	r3, [pc, #312]	; (800667c <acis_main_task+0x584>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	33e0      	adds	r3, #224	; 0xe0
 8006546:	4a4d      	ldr	r2, [pc, #308]	; (800667c <acis_main_task+0x584>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e011      	b.n	8006570 <acis_main_task+0x478>
              }
              else
              {
                PK_TableMemoryRequest.offset = SyncOffset;
 800654c:	4b4b      	ldr	r3, [pc, #300]	; (800667c <acis_main_task+0x584>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a4c      	ldr	r2, [pc, #304]	; (8006684 <acis_main_task+0x58c>)
 8006552:	60d3      	str	r3, [r2, #12]
                PK_TableMemoryRequest.size = SyncLeft;
 8006554:	4b48      	ldr	r3, [pc, #288]	; (8006678 <acis_main_task+0x580>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a4a      	ldr	r2, [pc, #296]	; (8006684 <acis_main_task+0x58c>)
 800655a:	6113      	str	r3, [r2, #16]
                SyncOffset += SyncLeft;
 800655c:	4b46      	ldr	r3, [pc, #280]	; (8006678 <acis_main_task+0x580>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	4b46      	ldr	r3, [pc, #280]	; (800667c <acis_main_task+0x584>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4413      	add	r3, r2
 8006566:	4a45      	ldr	r2, [pc, #276]	; (800667c <acis_main_task+0x584>)
 8006568:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 800656a:	4b43      	ldr	r3, [pc, #268]	; (8006678 <acis_main_task+0x580>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
              }
              protPushSequence(&fifoSendingQueue, &PK_TableMemoryRequest, sizeof(PK_TableMemoryRequest));
 8006570:	2214      	movs	r2, #20
 8006572:	4944      	ldr	r1, [pc, #272]	; (8006684 <acis_main_task+0x58c>)
 8006574:	4844      	ldr	r0, [pc, #272]	; (8006688 <acis_main_task+0x590>)
 8006576:	f004 fae1 	bl	800ab3c <protPushSequence>
              LastPacket = now;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	61fb      	str	r3, [r7, #28]
        if(SyncSize == 0)
 800657e:	e2ec      	b.n	8006b5a <acis_main_task+0xa62>
            }

          }
          else if(DelayDiff(now, LastPacket) > 500000 || SyncError > 0)
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 fa30 	bl	80079e8 <DelayDiff>
 8006588:	4602      	mov	r2, r0
 800658a:	4b36      	ldr	r3, [pc, #216]	; (8006664 <acis_main_task+0x56c>)
 800658c:	429a      	cmp	r2, r3
 800658e:	d805      	bhi.n	800659c <acis_main_task+0x4a4>
 8006590:	4b35      	ldr	r3, [pc, #212]	; (8006668 <acis_main_task+0x570>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 82df 	beq.w	8006b5a <acis_main_task+0xa62>
          {
            StatusSynchronizing = 0;
 800659c:	4b33      	ldr	r3, [pc, #204]	; (800666c <acis_main_task+0x574>)
 800659e:	2200      	movs	r2, #0
 80065a0:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 80065a2:	4b33      	ldr	r3, [pc, #204]	; (8006670 <acis_main_task+0x578>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 80065a8:	4b32      	ldr	r3, [pc, #200]	; (8006674 <acis_main_task+0x57c>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 80065ae:	4b2e      	ldr	r3, [pc, #184]	; (8006668 <acis_main_task+0x570>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 82d0 	bne.w	8006b5a <acis_main_task+0xa62>
              SyncError = 1;
 80065ba:	4b2b      	ldr	r3, [pc, #172]	; (8006668 <acis_main_task+0x570>)
 80065bc:	2201      	movs	r2, #1
 80065be:	701a      	strb	r2, [r3, #0]
        if(SyncSize == 0)
 80065c0:	e2cb      	b.n	8006b5a <acis_main_task+0xa62>
          }
        }
      }
      else
      {
        StatusSynchronizing = 0;
 80065c2:	4b2a      	ldr	r3, [pc, #168]	; (800666c <acis_main_task+0x574>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
        SyncStep = 0;
 80065c8:	4b29      	ldr	r3, [pc, #164]	; (8006670 <acis_main_task+0x578>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
        SyncSize = 0;
 80065ce:	4b29      	ldr	r3, [pc, #164]	; (8006674 <acis_main_task+0x57c>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]
        SyncError = 0;
 80065d4:	4b24      	ldr	r3, [pc, #144]	; (8006668 <acis_main_task+0x570>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
        StatusSynchronized = 1;
 80065da:	4b2c      	ldr	r3, [pc, #176]	; (800668c <acis_main_task+0x594>)
 80065dc:	2201      	movs	r2, #1
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e2df      	b.n	8006ba2 <acis_main_task+0xaaa>
      }
    }
    else if(StatusSynchronizing == 2)
 80065e2:	4b22      	ldr	r3, [pc, #136]	; (800666c <acis_main_task+0x574>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	f040 82da 	bne.w	8006ba2 <acis_main_task+0xaaa>
    {
      StatusSynchronized = 0;
 80065ee:	4b27      	ldr	r3, [pc, #156]	; (800668c <acis_main_task+0x594>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
      if(SyncStep == 0)
 80065f4:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <acis_main_task+0x578>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f040 810c 	bne.w	8006818 <acis_main_task+0x720>
      {
        if(SyncSize == 0)
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <acis_main_task+0x57c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d17f      	bne.n	8006708 <acis_main_task+0x610>
        {
          SyncSize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 8006608:	4b1a      	ldr	r3, [pc, #104]	; (8006674 <acis_main_task+0x57c>)
 800660a:	22e0      	movs	r2, #224	; 0xe0
 800660c:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 800660e:	4b19      	ldr	r3, [pc, #100]	; (8006674 <acis_main_task+0x57c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a19      	ldr	r2, [pc, #100]	; (8006678 <acis_main_task+0x580>)
 8006614:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 8006616:	4b19      	ldr	r3, [pc, #100]	; (800667c <acis_main_task+0x584>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 800661c:	4b18      	ldr	r3, [pc, #96]	; (8006680 <acis_main_task+0x588>)
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
          PK_ConfigMemoryData.Destination = etrACIS;
 8006622:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <acis_main_task+0x598>)
 8006624:	2202      	movs	r2, #2
 8006626:	709a      	strb	r2, [r3, #2]
          PK_ConfigMemoryData.configsize = SyncSize;
 8006628:	4b12      	ldr	r3, [pc, #72]	; (8006674 <acis_main_task+0x57c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a18      	ldr	r2, [pc, #96]	; (8006690 <acis_main_task+0x598>)
 800662e:	6093      	str	r3, [r2, #8]
          PK_ConfigMemoryData.offset = SyncOffset;
 8006630:	4b12      	ldr	r3, [pc, #72]	; (800667c <acis_main_task+0x584>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a16      	ldr	r2, [pc, #88]	; (8006690 <acis_main_task+0x598>)
 8006636:	60d3      	str	r3, [r2, #12]

          if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 8006638:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <acis_main_task+0x580>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2bd4      	cmp	r3, #212	; 0xd4
 800663e:	d929      	bls.n	8006694 <acis_main_task+0x59c>
          {
            PK_ConfigMemoryData.offset = SyncOffset;
 8006640:	4b0e      	ldr	r3, [pc, #56]	; (800667c <acis_main_task+0x584>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a12      	ldr	r2, [pc, #72]	; (8006690 <acis_main_task+0x598>)
 8006646:	60d3      	str	r3, [r2, #12]
            PK_ConfigMemoryData.size = PACKET_CONFIG_MAX_SIZE;
 8006648:	4b11      	ldr	r3, [pc, #68]	; (8006690 <acis_main_task+0x598>)
 800664a:	22d4      	movs	r2, #212	; 0xd4
 800664c:	611a      	str	r2, [r3, #16]
            SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <acis_main_task+0x580>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3bd4      	subs	r3, #212	; 0xd4
 8006654:	4a08      	ldr	r2, [pc, #32]	; (8006678 <acis_main_task+0x580>)
 8006656:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_CONFIG_MAX_SIZE;
 8006658:	4b08      	ldr	r3, [pc, #32]	; (800667c <acis_main_task+0x584>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	33d4      	adds	r3, #212	; 0xd4
 800665e:	4a07      	ldr	r2, [pc, #28]	; (800667c <acis_main_task+0x584>)
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e029      	b.n	80066b8 <acis_main_task+0x5c0>
 8006664:	0007a120 	.word	0x0007a120
 8006668:	200068b8 	.word	0x200068b8
 800666c:	2000689f 	.word	0x2000689f
 8006670:	200068a7 	.word	0x200068a7
 8006674:	200068ac 	.word	0x200068ac
 8006678:	200068b0 	.word	0x200068b0
 800667c:	200068b4 	.word	0x200068b4
 8006680:	200068a8 	.word	0x200068a8
 8006684:	200000a0 	.word	0x200000a0
 8006688:	20006860 	.word	0x20006860
 800668c:	2000689e 	.word	0x2000689e
 8006690:	20000200 	.word	0x20000200
          }
          else
          {
            PK_ConfigMemoryData.offset = SyncOffset;
 8006694:	4b84      	ldr	r3, [pc, #528]	; (80068a8 <acis_main_task+0x7b0>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a84      	ldr	r2, [pc, #528]	; (80068ac <acis_main_task+0x7b4>)
 800669a:	60d3      	str	r3, [r2, #12]
            PK_ConfigMemoryData.size = SyncLeft;
 800669c:	4b84      	ldr	r3, [pc, #528]	; (80068b0 <acis_main_task+0x7b8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a82      	ldr	r2, [pc, #520]	; (80068ac <acis_main_task+0x7b4>)
 80066a2:	6113      	str	r3, [r2, #16]
            SyncOffset += SyncLeft;
 80066a4:	4b82      	ldr	r3, [pc, #520]	; (80068b0 <acis_main_task+0x7b8>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	4b7f      	ldr	r3, [pc, #508]	; (80068a8 <acis_main_task+0x7b0>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4413      	add	r3, r2
 80066ae:	4a7e      	ldr	r2, [pc, #504]	; (80068a8 <acis_main_task+0x7b0>)
 80066b0:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 80066b2:	4b7f      	ldr	r3, [pc, #508]	; (80068b0 <acis_main_task+0x7b8>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
          }

          memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[PK_ConfigMemoryData.offset], PK_ConfigMemoryData.size);
 80066b8:	4b7c      	ldr	r3, [pc, #496]	; (80068ac <acis_main_task+0x7b4>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a7d      	ldr	r2, [pc, #500]	; (80068b4 <acis_main_task+0x7bc>)
 80066be:	1899      	adds	r1, r3, r2
 80066c0:	4b7a      	ldr	r3, [pc, #488]	; (80068ac <acis_main_task+0x7b4>)
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	461a      	mov	r2, r3
 80066c6:	487c      	ldr	r0, [pc, #496]	; (80068b8 <acis_main_task+0x7c0>)
 80066c8:	f00a f9d4 	bl	8010a74 <memcpy>
          memset(&PK_ConfigMemoryData.data[PK_ConfigMemoryData.size], 0, sizeof(PK_ConfigMemoryData.data) - PK_ConfigMemoryData.size);
 80066cc:	4b77      	ldr	r3, [pc, #476]	; (80068ac <acis_main_task+0x7b4>)
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	3310      	adds	r3, #16
 80066d2:	4a76      	ldr	r2, [pc, #472]	; (80068ac <acis_main_task+0x7b4>)
 80066d4:	4413      	add	r3, r2
 80066d6:	1d98      	adds	r0, r3, #6
 80066d8:	4b74      	ldr	r3, [pc, #464]	; (80068ac <acis_main_task+0x7b4>)
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f1c3 03d4 	rsb	r3, r3, #212	; 0xd4
 80066e0:	461a      	mov	r2, r3
 80066e2:	2100      	movs	r1, #0
 80066e4:	f00a f9d1 	bl	8010a8a <memset>
          PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 80066e8:	21d4      	movs	r1, #212	; 0xd4
 80066ea:	4873      	ldr	r0, [pc, #460]	; (80068b8 <acis_main_task+0x7c0>)
 80066ec:	f001 f882 	bl	80077f4 <CRC16_Generate>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	4b6d      	ldr	r3, [pc, #436]	; (80068ac <acis_main_task+0x7b4>)
 80066f6:	829a      	strh	r2, [r3, #20]

          protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 80066f8:	22ec      	movs	r2, #236	; 0xec
 80066fa:	496c      	ldr	r1, [pc, #432]	; (80068ac <acis_main_task+0x7b4>)
 80066fc:	486f      	ldr	r0, [pc, #444]	; (80068bc <acis_main_task+0x7c4>)
 80066fe:	f004 fa1d 	bl	800ab3c <protPushSequence>
          LastPacket = now;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e24c      	b.n	8006ba2 <acis_main_task+0xaaa>
        }
        else
        {
          if(SyncRequestDone)
 8006708:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <acis_main_task+0x7c8>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d061      	beq.n	80067d6 <acis_main_task+0x6de>
          {
            SyncRequestDone = 0;
 8006712:	4b6b      	ldr	r3, [pc, #428]	; (80068c0 <acis_main_task+0x7c8>)
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 8006718:	4b65      	ldr	r3, [pc, #404]	; (80068b0 <acis_main_task+0x7b8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <acis_main_task+0x63e>
            {
              SyncStep++;
 8006720:	4b68      	ldr	r3, [pc, #416]	; (80068c4 <acis_main_task+0x7cc>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	3301      	adds	r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	4b66      	ldr	r3, [pc, #408]	; (80068c4 <acis_main_task+0x7cc>)
 800672c:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 800672e:	4b66      	ldr	r3, [pc, #408]	; (80068c8 <acis_main_task+0x7d0>)
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e235      	b.n	8006ba2 <acis_main_task+0xaaa>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 8006736:	4b5e      	ldr	r3, [pc, #376]	; (80068b0 <acis_main_task+0x7b8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2bd4      	cmp	r3, #212	; 0xd4
 800673c:	d911      	bls.n	8006762 <acis_main_task+0x66a>
              {
                PK_ConfigMemoryData.offset = SyncOffset;
 800673e:	4b5a      	ldr	r3, [pc, #360]	; (80068a8 <acis_main_task+0x7b0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a5a      	ldr	r2, [pc, #360]	; (80068ac <acis_main_task+0x7b4>)
 8006744:	60d3      	str	r3, [r2, #12]
                PK_ConfigMemoryData.size = PACKET_CONFIG_MAX_SIZE;
 8006746:	4b59      	ldr	r3, [pc, #356]	; (80068ac <acis_main_task+0x7b4>)
 8006748:	22d4      	movs	r2, #212	; 0xd4
 800674a:	611a      	str	r2, [r3, #16]
                SyncLeft -= PACKET_CONFIG_MAX_SIZE;
 800674c:	4b58      	ldr	r3, [pc, #352]	; (80068b0 <acis_main_task+0x7b8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3bd4      	subs	r3, #212	; 0xd4
 8006752:	4a57      	ldr	r2, [pc, #348]	; (80068b0 <acis_main_task+0x7b8>)
 8006754:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_CONFIG_MAX_SIZE;
 8006756:	4b54      	ldr	r3, [pc, #336]	; (80068a8 <acis_main_task+0x7b0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	33d4      	adds	r3, #212	; 0xd4
 800675c:	4a52      	ldr	r2, [pc, #328]	; (80068a8 <acis_main_task+0x7b0>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	e011      	b.n	8006786 <acis_main_task+0x68e>
              }
              else
              {
                PK_ConfigMemoryData.offset = SyncOffset;
 8006762:	4b51      	ldr	r3, [pc, #324]	; (80068a8 <acis_main_task+0x7b0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a51      	ldr	r2, [pc, #324]	; (80068ac <acis_main_task+0x7b4>)
 8006768:	60d3      	str	r3, [r2, #12]
                PK_ConfigMemoryData.size = SyncLeft;
 800676a:	4b51      	ldr	r3, [pc, #324]	; (80068b0 <acis_main_task+0x7b8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a4f      	ldr	r2, [pc, #316]	; (80068ac <acis_main_task+0x7b4>)
 8006770:	6113      	str	r3, [r2, #16]
                SyncOffset += SyncLeft;
 8006772:	4b4f      	ldr	r3, [pc, #316]	; (80068b0 <acis_main_task+0x7b8>)
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b4c      	ldr	r3, [pc, #304]	; (80068a8 <acis_main_task+0x7b0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4413      	add	r3, r2
 800677c:	4a4a      	ldr	r2, [pc, #296]	; (80068a8 <acis_main_task+0x7b0>)
 800677e:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 8006780:	4b4b      	ldr	r3, [pc, #300]	; (80068b0 <acis_main_task+0x7b8>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
              }

              memcpy(&PK_ConfigMemoryData.data[0], &((uint8_t*)&acis_config)[PK_ConfigMemoryData.offset], PK_ConfigMemoryData.size);
 8006786:	4b49      	ldr	r3, [pc, #292]	; (80068ac <acis_main_task+0x7b4>)
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	4a4a      	ldr	r2, [pc, #296]	; (80068b4 <acis_main_task+0x7bc>)
 800678c:	1899      	adds	r1, r3, r2
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <acis_main_task+0x7b4>)
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	461a      	mov	r2, r3
 8006794:	4848      	ldr	r0, [pc, #288]	; (80068b8 <acis_main_task+0x7c0>)
 8006796:	f00a f96d 	bl	8010a74 <memcpy>
              memset(&PK_ConfigMemoryData.data[PK_ConfigMemoryData.size], 0, sizeof(PK_ConfigMemoryData.data) - PK_ConfigMemoryData.size);
 800679a:	4b44      	ldr	r3, [pc, #272]	; (80068ac <acis_main_task+0x7b4>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	3310      	adds	r3, #16
 80067a0:	4a42      	ldr	r2, [pc, #264]	; (80068ac <acis_main_task+0x7b4>)
 80067a2:	4413      	add	r3, r2
 80067a4:	1d98      	adds	r0, r3, #6
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <acis_main_task+0x7b4>)
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f1c3 03d4 	rsb	r3, r3, #212	; 0xd4
 80067ae:	461a      	mov	r2, r3
 80067b0:	2100      	movs	r1, #0
 80067b2:	f00a f96a 	bl	8010a8a <memset>
              PK_ConfigMemoryData.crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 80067b6:	21d4      	movs	r1, #212	; 0xd4
 80067b8:	483f      	ldr	r0, [pc, #252]	; (80068b8 <acis_main_task+0x7c0>)
 80067ba:	f001 f81b 	bl	80077f4 <CRC16_Generate>
 80067be:	4603      	mov	r3, r0
 80067c0:	461a      	mov	r2, r3
 80067c2:	4b3a      	ldr	r3, [pc, #232]	; (80068ac <acis_main_task+0x7b4>)
 80067c4:	829a      	strh	r2, [r3, #20]

              protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryData, sizeof(PK_ConfigMemoryData));
 80067c6:	22ec      	movs	r2, #236	; 0xec
 80067c8:	4938      	ldr	r1, [pc, #224]	; (80068ac <acis_main_task+0x7b4>)
 80067ca:	483c      	ldr	r0, [pc, #240]	; (80068bc <acis_main_task+0x7c4>)
 80067cc:	f004 f9b6 	bl	800ab3c <protPushSequence>
              LastPacket = now;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	e1e5      	b.n	8006ba2 <acis_main_task+0xaaa>
            }

          }
          else if(DelayDiff(now, LastPacket) > 500000 || SyncError > 0)
 80067d6:	69f9      	ldr	r1, [r7, #28]
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f001 f905 	bl	80079e8 <DelayDiff>
 80067de:	4602      	mov	r2, r0
 80067e0:	4b3a      	ldr	r3, [pc, #232]	; (80068cc <acis_main_task+0x7d4>)
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d805      	bhi.n	80067f2 <acis_main_task+0x6fa>
 80067e6:	4b3a      	ldr	r3, [pc, #232]	; (80068d0 <acis_main_task+0x7d8>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 81d8 	beq.w	8006ba2 <acis_main_task+0xaaa>
          {
            StatusSynchronizing = 0;
 80067f2:	4b38      	ldr	r3, [pc, #224]	; (80068d4 <acis_main_task+0x7dc>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 80067f8:	4b32      	ldr	r3, [pc, #200]	; (80068c4 <acis_main_task+0x7cc>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 80067fe:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <acis_main_task+0x7d0>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 8006804:	4b32      	ldr	r3, [pc, #200]	; (80068d0 <acis_main_task+0x7d8>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f040 81c9 	bne.w	8006ba2 <acis_main_task+0xaaa>
              SyncError = 1;
 8006810:	4b2f      	ldr	r3, [pc, #188]	; (80068d0 <acis_main_task+0x7d8>)
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e1c4      	b.n	8006ba2 <acis_main_task+0xaaa>
          }
        }
      }
      else if(SyncStep > 0 && SyncStep <= TABLE_SETUPS_MAX)
 8006818:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <acis_main_task+0x7cc>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 812e 	beq.w	8006a80 <acis_main_task+0x988>
 8006824:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <acis_main_task+0x7cc>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b04      	cmp	r3, #4
 800682c:	f200 8128 	bhi.w	8006a80 <acis_main_task+0x988>
      {
        if(SyncSize == 0)
 8006830:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <acis_main_task+0x7d0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f040 8093 	bne.w	8006960 <acis_main_task+0x868>
        {
          SyncSize = sizeof(sAcisIgnTable);
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <acis_main_task+0x7d0>)
 800683c:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006840:	601a      	str	r2, [r3, #0]
          SyncLeft = SyncSize;
 8006842:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <acis_main_task+0x7d0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1a      	ldr	r2, [pc, #104]	; (80068b0 <acis_main_task+0x7b8>)
 8006848:	6013      	str	r3, [r2, #0]
          SyncOffset = 0;
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <acis_main_task+0x7b0>)
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
          SyncRequestDone = 0;
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <acis_main_task+0x7c8>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
          PK_TableMemoryData.Destination = etrACIS;
 8006856:	4b20      	ldr	r3, [pc, #128]	; (80068d8 <acis_main_task+0x7e0>)
 8006858:	2202      	movs	r2, #2
 800685a:	709a      	strb	r2, [r3, #2]
          PK_TableMemoryData.tablesize = SyncSize;
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <acis_main_task+0x7d0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <acis_main_task+0x7e0>)
 8006862:	60d3      	str	r3, [r2, #12]
          PK_TableMemoryData.table = SyncStep - 1;
 8006864:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <acis_main_task+0x7cc>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	461a      	mov	r2, r3
 800686e:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <acis_main_task+0x7e0>)
 8006870:	609a      	str	r2, [r3, #8]
          PK_TableMemoryData.offset = SyncOffset;
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <acis_main_task+0x7b0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <acis_main_task+0x7e0>)
 8006878:	6113      	str	r3, [r2, #16]

          if(SyncLeft > PACKET_TABLE_MAX_SIZE)
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <acis_main_task+0x7b8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2be0      	cmp	r3, #224	; 0xe0
 8006880:	d92c      	bls.n	80068dc <acis_main_task+0x7e4>
          {
            PK_TableMemoryData.offset = SyncOffset;
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <acis_main_task+0x7b0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a14      	ldr	r2, [pc, #80]	; (80068d8 <acis_main_task+0x7e0>)
 8006888:	6113      	str	r3, [r2, #16]
            PK_TableMemoryData.size = PACKET_TABLE_MAX_SIZE;
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <acis_main_task+0x7e0>)
 800688c:	22e0      	movs	r2, #224	; 0xe0
 800688e:	615a      	str	r2, [r3, #20]
            SyncLeft -= PACKET_TABLE_MAX_SIZE;
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <acis_main_task+0x7b8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3be0      	subs	r3, #224	; 0xe0
 8006896:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <acis_main_task+0x7b8>)
 8006898:	6013      	str	r3, [r2, #0]
            SyncOffset += PACKET_TABLE_MAX_SIZE;
 800689a:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <acis_main_task+0x7b0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	33e0      	adds	r3, #224	; 0xe0
 80068a0:	4a01      	ldr	r2, [pc, #4]	; (80068a8 <acis_main_task+0x7b0>)
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e02c      	b.n	8006900 <acis_main_task+0x808>
 80068a6:	bf00      	nop
 80068a8:	200068b4 	.word	0x200068b4
 80068ac:	20000200 	.word	0x20000200
 80068b0:	200068b0 	.word	0x200068b0
 80068b4:	20002e20 	.word	0x20002e20
 80068b8:	20000216 	.word	0x20000216
 80068bc:	20006860 	.word	0x20006860
 80068c0:	200068a8 	.word	0x200068a8
 80068c4:	200068a7 	.word	0x200068a7
 80068c8:	200068ac 	.word	0x200068ac
 80068cc:	0007a120 	.word	0x0007a120
 80068d0:	200068b8 	.word	0x200068b8
 80068d4:	2000689f 	.word	0x2000689f
 80068d8:	200000c0 	.word	0x200000c0
          }
          else
          {
            PK_TableMemoryData.offset = SyncOffset;
 80068dc:	4ba0      	ldr	r3, [pc, #640]	; (8006b60 <acis_main_task+0xa68>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4aa0      	ldr	r2, [pc, #640]	; (8006b64 <acis_main_task+0xa6c>)
 80068e2:	6113      	str	r3, [r2, #16]
            PK_TableMemoryData.size = SyncLeft;
 80068e4:	4ba0      	ldr	r3, [pc, #640]	; (8006b68 <acis_main_task+0xa70>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a9e      	ldr	r2, [pc, #632]	; (8006b64 <acis_main_task+0xa6c>)
 80068ea:	6153      	str	r3, [r2, #20]
            SyncOffset += SyncLeft;
 80068ec:	4b9e      	ldr	r3, [pc, #632]	; (8006b68 <acis_main_task+0xa70>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b9b      	ldr	r3, [pc, #620]	; (8006b60 <acis_main_task+0xa68>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	4a9a      	ldr	r2, [pc, #616]	; (8006b60 <acis_main_task+0xa68>)
 80068f8:	6013      	str	r3, [r2, #0]
            SyncLeft = 0;
 80068fa:	4b9b      	ldr	r3, [pc, #620]	; (8006b68 <acis_main_task+0xa70>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
          }

          memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[PK_TableMemoryData.table])[PK_TableMemoryData.offset], PK_TableMemoryData.size);
 8006900:	4b98      	ldr	r3, [pc, #608]	; (8006b64 <acis_main_task+0xa6c>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	33e0      	adds	r3, #224	; 0xe0
 800690e:	4a97      	ldr	r2, [pc, #604]	; (8006b6c <acis_main_task+0xa74>)
 8006910:	441a      	add	r2, r3
 8006912:	4b94      	ldr	r3, [pc, #592]	; (8006b64 <acis_main_task+0xa6c>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	18d1      	adds	r1, r2, r3
 8006918:	4b92      	ldr	r3, [pc, #584]	; (8006b64 <acis_main_task+0xa6c>)
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	461a      	mov	r2, r3
 800691e:	4894      	ldr	r0, [pc, #592]	; (8006b70 <acis_main_task+0xa78>)
 8006920:	f00a f8a8 	bl	8010a74 <memcpy>
          memset(&PK_TableMemoryData.data[PK_TableMemoryData.size], 0, sizeof(PK_TableMemoryData.data) - PK_TableMemoryData.size);
 8006924:	4b8f      	ldr	r3, [pc, #572]	; (8006b64 <acis_main_task+0xa6c>)
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	3318      	adds	r3, #24
 800692a:	4a8e      	ldr	r2, [pc, #568]	; (8006b64 <acis_main_task+0xa6c>)
 800692c:	4413      	add	r3, r2
 800692e:	1c98      	adds	r0, r3, #2
 8006930:	4b8c      	ldr	r3, [pc, #560]	; (8006b64 <acis_main_task+0xa6c>)
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8006938:	461a      	mov	r2, r3
 800693a:	2100      	movs	r1, #0
 800693c:	f00a f8a5 	bl	8010a8a <memset>
          PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 8006940:	21e0      	movs	r1, #224	; 0xe0
 8006942:	488b      	ldr	r0, [pc, #556]	; (8006b70 <acis_main_task+0xa78>)
 8006944:	f000 ff56 	bl	80077f4 <CRC16_Generate>
 8006948:	4603      	mov	r3, r0
 800694a:	461a      	mov	r2, r3
 800694c:	4b85      	ldr	r3, [pc, #532]	; (8006b64 <acis_main_task+0xa6c>)
 800694e:	831a      	strh	r2, [r3, #24]

          protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 8006950:	22fc      	movs	r2, #252	; 0xfc
 8006952:	4984      	ldr	r1, [pc, #528]	; (8006b64 <acis_main_task+0xa6c>)
 8006954:	4887      	ldr	r0, [pc, #540]	; (8006b74 <acis_main_task+0xa7c>)
 8006956:	f004 f8f1 	bl	800ab3c <protPushSequence>
          LastPacket = now;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	61fb      	str	r3, [r7, #28]
        if(SyncSize == 0)
 800695e:	e11f      	b.n	8006ba0 <acis_main_task+0xaa8>
        }
        else
        {
          if(SyncRequestDone)
 8006960:	4b85      	ldr	r3, [pc, #532]	; (8006b78 <acis_main_task+0xa80>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d069      	beq.n	8006a3e <acis_main_task+0x946>
          {
            SyncRequestDone = 0;
 800696a:	4b83      	ldr	r3, [pc, #524]	; (8006b78 <acis_main_task+0xa80>)
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
            if(SyncLeft == 0)
 8006970:	4b7d      	ldr	r3, [pc, #500]	; (8006b68 <acis_main_task+0xa70>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <acis_main_task+0x896>
            {
              SyncStep++;
 8006978:	4b80      	ldr	r3, [pc, #512]	; (8006b7c <acis_main_task+0xa84>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	3301      	adds	r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	4b7e      	ldr	r3, [pc, #504]	; (8006b7c <acis_main_task+0xa84>)
 8006984:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8006986:	4b7e      	ldr	r3, [pc, #504]	; (8006b80 <acis_main_task+0xa88>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
        if(SyncSize == 0)
 800698c:	e108      	b.n	8006ba0 <acis_main_task+0xaa8>
            }
            else
            {
              if(SyncLeft > PACKET_CONFIG_MAX_SIZE)
 800698e:	4b76      	ldr	r3, [pc, #472]	; (8006b68 <acis_main_task+0xa70>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2bd4      	cmp	r3, #212	; 0xd4
 8006994:	d911      	bls.n	80069ba <acis_main_task+0x8c2>
              {
                PK_TableMemoryData.offset = SyncOffset;
 8006996:	4b72      	ldr	r3, [pc, #456]	; (8006b60 <acis_main_task+0xa68>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a72      	ldr	r2, [pc, #456]	; (8006b64 <acis_main_task+0xa6c>)
 800699c:	6113      	str	r3, [r2, #16]
                PK_TableMemoryData.size = PACKET_TABLE_MAX_SIZE;
 800699e:	4b71      	ldr	r3, [pc, #452]	; (8006b64 <acis_main_task+0xa6c>)
 80069a0:	22e0      	movs	r2, #224	; 0xe0
 80069a2:	615a      	str	r2, [r3, #20]
                SyncLeft -= PACKET_TABLE_MAX_SIZE;
 80069a4:	4b70      	ldr	r3, [pc, #448]	; (8006b68 <acis_main_task+0xa70>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3be0      	subs	r3, #224	; 0xe0
 80069aa:	4a6f      	ldr	r2, [pc, #444]	; (8006b68 <acis_main_task+0xa70>)
 80069ac:	6013      	str	r3, [r2, #0]
                SyncOffset += PACKET_TABLE_MAX_SIZE;
 80069ae:	4b6c      	ldr	r3, [pc, #432]	; (8006b60 <acis_main_task+0xa68>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	33e0      	adds	r3, #224	; 0xe0
 80069b4:	4a6a      	ldr	r2, [pc, #424]	; (8006b60 <acis_main_task+0xa68>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	e011      	b.n	80069de <acis_main_task+0x8e6>
              }
              else
              {
                PK_TableMemoryData.offset = SyncOffset;
 80069ba:	4b69      	ldr	r3, [pc, #420]	; (8006b60 <acis_main_task+0xa68>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a69      	ldr	r2, [pc, #420]	; (8006b64 <acis_main_task+0xa6c>)
 80069c0:	6113      	str	r3, [r2, #16]
                PK_TableMemoryData.size = SyncLeft;
 80069c2:	4b69      	ldr	r3, [pc, #420]	; (8006b68 <acis_main_task+0xa70>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a67      	ldr	r2, [pc, #412]	; (8006b64 <acis_main_task+0xa6c>)
 80069c8:	6153      	str	r3, [r2, #20]
                SyncOffset += SyncLeft;
 80069ca:	4b67      	ldr	r3, [pc, #412]	; (8006b68 <acis_main_task+0xa70>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b64      	ldr	r3, [pc, #400]	; (8006b60 <acis_main_task+0xa68>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4413      	add	r3, r2
 80069d4:	4a62      	ldr	r2, [pc, #392]	; (8006b60 <acis_main_task+0xa68>)
 80069d6:	6013      	str	r3, [r2, #0]
                SyncLeft = 0;
 80069d8:	4b63      	ldr	r3, [pc, #396]	; (8006b68 <acis_main_task+0xa70>)
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
              }

              memcpy(&PK_TableMemoryData.data[0], &((uint8_t*)&acis_config.tables[PK_TableMemoryData.table])[PK_TableMemoryData.offset], PK_TableMemoryData.size);
 80069de:	4b61      	ldr	r3, [pc, #388]	; (8006b64 <acis_main_task+0xa6c>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f640 426c 	movw	r2, #3180	; 0xc6c
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	33e0      	adds	r3, #224	; 0xe0
 80069ec:	4a5f      	ldr	r2, [pc, #380]	; (8006b6c <acis_main_task+0xa74>)
 80069ee:	441a      	add	r2, r3
 80069f0:	4b5c      	ldr	r3, [pc, #368]	; (8006b64 <acis_main_task+0xa6c>)
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	18d1      	adds	r1, r2, r3
 80069f6:	4b5b      	ldr	r3, [pc, #364]	; (8006b64 <acis_main_task+0xa6c>)
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	461a      	mov	r2, r3
 80069fc:	485c      	ldr	r0, [pc, #368]	; (8006b70 <acis_main_task+0xa78>)
 80069fe:	f00a f839 	bl	8010a74 <memcpy>
              memset(&PK_TableMemoryData.data[PK_TableMemoryData.size], 0, sizeof(PK_TableMemoryData.data) - PK_TableMemoryData.size);
 8006a02:	4b58      	ldr	r3, [pc, #352]	; (8006b64 <acis_main_task+0xa6c>)
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	3318      	adds	r3, #24
 8006a08:	4a56      	ldr	r2, [pc, #344]	; (8006b64 <acis_main_task+0xa6c>)
 8006a0a:	4413      	add	r3, r2
 8006a0c:	1c98      	adds	r0, r3, #2
 8006a0e:	4b55      	ldr	r3, [pc, #340]	; (8006b64 <acis_main_task+0xa6c>)
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	f1c3 03e0 	rsb	r3, r3, #224	; 0xe0
 8006a16:	461a      	mov	r2, r3
 8006a18:	2100      	movs	r1, #0
 8006a1a:	f00a f836 	bl	8010a8a <memset>
              PK_TableMemoryData.crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 8006a1e:	21e0      	movs	r1, #224	; 0xe0
 8006a20:	4853      	ldr	r0, [pc, #332]	; (8006b70 <acis_main_task+0xa78>)
 8006a22:	f000 fee7 	bl	80077f4 <CRC16_Generate>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b4e      	ldr	r3, [pc, #312]	; (8006b64 <acis_main_task+0xa6c>)
 8006a2c:	831a      	strh	r2, [r3, #24]

              protPushSequence(&fifoSendingQueue, &PK_TableMemoryData, sizeof(PK_TableMemoryData));
 8006a2e:	22fc      	movs	r2, #252	; 0xfc
 8006a30:	494c      	ldr	r1, [pc, #304]	; (8006b64 <acis_main_task+0xa6c>)
 8006a32:	4850      	ldr	r0, [pc, #320]	; (8006b74 <acis_main_task+0xa7c>)
 8006a34:	f004 f882 	bl	800ab3c <protPushSequence>
              LastPacket = now;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	61fb      	str	r3, [r7, #28]
        if(SyncSize == 0)
 8006a3c:	e0b0      	b.n	8006ba0 <acis_main_task+0xaa8>
            }

          }
          else if(DelayDiff(now, LastPacket) > 500000 || SyncError > 0)
 8006a3e:	69f9      	ldr	r1, [r7, #28]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 ffd1 	bl	80079e8 <DelayDiff>
 8006a46:	4602      	mov	r2, r0
 8006a48:	4b4e      	ldr	r3, [pc, #312]	; (8006b84 <acis_main_task+0xa8c>)
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d805      	bhi.n	8006a5a <acis_main_task+0x962>
 8006a4e:	4b4e      	ldr	r3, [pc, #312]	; (8006b88 <acis_main_task+0xa90>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80a3 	beq.w	8006ba0 <acis_main_task+0xaa8>
          {
            StatusSynchronizing = 0;
 8006a5a:	4b4c      	ldr	r3, [pc, #304]	; (8006b8c <acis_main_task+0xa94>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
            SyncStep = 0;
 8006a60:	4b46      	ldr	r3, [pc, #280]	; (8006b7c <acis_main_task+0xa84>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
            SyncSize = 0;
 8006a66:	4b46      	ldr	r3, [pc, #280]	; (8006b80 <acis_main_task+0xa88>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
            if(SyncError == 0)
 8006a6c:	4b46      	ldr	r3, [pc, #280]	; (8006b88 <acis_main_task+0xa90>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 8094 	bne.w	8006ba0 <acis_main_task+0xaa8>
              SyncError = 1;
 8006a78:	4b43      	ldr	r3, [pc, #268]	; (8006b88 <acis_main_task+0xa90>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
        if(SyncSize == 0)
 8006a7e:	e08f      	b.n	8006ba0 <acis_main_task+0xaa8>
          }
        }
      }
      else if(SyncStep == TABLE_SETUPS_MAX + 1)
 8006a80:	4b3e      	ldr	r3, [pc, #248]	; (8006b7c <acis_main_task+0xa84>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d157      	bne.n	8006b3a <acis_main_task+0xa42>
      {
        if(NeedSave)
 8006a8a:	4b41      	ldr	r3, [pc, #260]	; (8006b90 <acis_main_task+0xa98>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d04a      	beq.n	8006b2a <acis_main_task+0xa32>
        {
          if(SyncSize == 0)
 8006a94:	4b3a      	ldr	r3, [pc, #232]	; (8006b80 <acis_main_task+0xa88>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10e      	bne.n	8006aba <acis_main_task+0x9c2>
          {
            SyncSize = 1;
 8006a9c:	4b38      	ldr	r3, [pc, #224]	; (8006b80 <acis_main_task+0xa88>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
            SyncRequestDone = 0;
 8006aa2:	4b35      	ldr	r3, [pc, #212]	; (8006b78 <acis_main_task+0xa80>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
            PK_SaveConfig.Destination = etrACIS;
 8006aa8:	4b3a      	ldr	r3, [pc, #232]	; (8006b94 <acis_main_task+0xa9c>)
 8006aaa:	2202      	movs	r2, #2
 8006aac:	709a      	strb	r2, [r3, #2]
            protPushSequence(&fifoSendingQueue, &PK_SaveConfig, sizeof(PK_SaveConfig));
 8006aae:	2204      	movs	r2, #4
 8006ab0:	4938      	ldr	r1, [pc, #224]	; (8006b94 <acis_main_task+0xa9c>)
 8006ab2:	4830      	ldr	r0, [pc, #192]	; (8006b74 <acis_main_task+0xa7c>)
 8006ab4:	f004 f842 	bl	800ab3c <protPushSequence>
 8006ab8:	e073      	b.n	8006ba2 <acis_main_task+0xaaa>
          }
          else
          {
            if(SyncRequestDone == 0)
 8006aba:	4b2f      	ldr	r3, [pc, #188]	; (8006b78 <acis_main_task+0xa80>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d110      	bne.n	8006ae6 <acis_main_task+0x9ee>
            {
              SyncRequestDone = 0;
 8006ac4:	4b2c      	ldr	r3, [pc, #176]	; (8006b78 <acis_main_task+0xa80>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	701a      	strb	r2, [r3, #0]
              SyncStep++;
 8006aca:	4b2c      	ldr	r3, [pc, #176]	; (8006b7c <acis_main_task+0xa84>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	4b29      	ldr	r3, [pc, #164]	; (8006b7c <acis_main_task+0xa84>)
 8006ad6:	701a      	strb	r2, [r3, #0]
              NeedSave = 0;
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <acis_main_task+0xa98>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8006ade:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <acis_main_task+0xa88>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e05d      	b.n	8006ba2 <acis_main_task+0xaaa>
            }
            else if(DelayDiff(now, LastPacket) > 5000000 || SyncError > 0)
 8006ae6:	69f9      	ldr	r1, [r7, #28]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 ff7d 	bl	80079e8 <DelayDiff>
 8006aee:	4602      	mov	r2, r0
 8006af0:	4b29      	ldr	r3, [pc, #164]	; (8006b98 <acis_main_task+0xaa0>)
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d804      	bhi.n	8006b00 <acis_main_task+0xa08>
 8006af6:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <acis_main_task+0xa90>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d050      	beq.n	8006ba2 <acis_main_task+0xaaa>
            {
              StatusSynchronizing = 0;
 8006b00:	4b22      	ldr	r3, [pc, #136]	; (8006b8c <acis_main_task+0xa94>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
              SyncStep = 0;
 8006b06:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <acis_main_task+0xa84>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
              SyncSize = 0;
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <acis_main_task+0xa88>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
              NeedSave = 0;
 8006b12:	4b1f      	ldr	r3, [pc, #124]	; (8006b90 <acis_main_task+0xa98>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
              if(SyncError == 0)
 8006b18:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <acis_main_task+0xa90>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d13f      	bne.n	8006ba2 <acis_main_task+0xaaa>
                SyncError = 1;
 8006b22:	4b19      	ldr	r3, [pc, #100]	; (8006b88 <acis_main_task+0xa90>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	e03b      	b.n	8006ba2 <acis_main_task+0xaaa>
            }
          }
        }
        else SyncStep++;
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <acis_main_task+0xa84>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	3301      	adds	r3, #1
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <acis_main_task+0xa84>)
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	e033      	b.n	8006ba2 <acis_main_task+0xaaa>
      }
      else
      {
        StatusSynchronizing = 0;
 8006b3a:	4b14      	ldr	r3, [pc, #80]	; (8006b8c <acis_main_task+0xa94>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	701a      	strb	r2, [r3, #0]
        SyncStep = 0;
 8006b40:	4b0e      	ldr	r3, [pc, #56]	; (8006b7c <acis_main_task+0xa84>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
        SyncSize = 0;
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <acis_main_task+0xa88>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
        SyncError = 0;
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <acis_main_task+0xa90>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	701a      	strb	r2, [r3, #0]
        StatusSynchronized = 1;
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <acis_main_task+0xaa4>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e023      	b.n	8006ba2 <acis_main_task+0xaaa>
        if(SyncSize == 0)
 8006b5a:	bf00      	nop
 8006b5c:	e021      	b.n	8006ba2 <acis_main_task+0xaaa>
 8006b5e:	bf00      	nop
 8006b60:	200068b4 	.word	0x200068b4
 8006b64:	200000c0 	.word	0x200000c0
 8006b68:	200068b0 	.word	0x200068b0
 8006b6c:	20002e20 	.word	0x20002e20
 8006b70:	200000da 	.word	0x200000da
 8006b74:	20006860 	.word	0x20006860
 8006b78:	200068a8 	.word	0x200068a8
 8006b7c:	200068a7 	.word	0x200068a7
 8006b80:	200068ac 	.word	0x200068ac
 8006b84:	0007a120 	.word	0x0007a120
 8006b88:	200068b8 	.word	0x200068b8
 8006b8c:	2000689f 	.word	0x2000689f
 8006b90:	200068a5 	.word	0x200068a5
 8006b94:	20000320 	.word	0x20000320
 8006b98:	004c4b40 	.word	0x004c4b40
 8006b9c:	2000689e 	.word	0x2000689e
        if(SyncSize == 0)
 8006ba0:	bf00      	nop
    else
    {

    }

    if(DelayDiff(now, LastGeneralStatusPacket) > 100000)
 8006ba2:	69b9      	ldr	r1, [r7, #24]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 ff1f 	bl	80079e8 <DelayDiff>
 8006baa:	4602      	mov	r2, r0
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <acis_main_task+0xb58>)
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d909      	bls.n	8006bc6 <acis_main_task+0xace>
    {
      LastGeneralStatusPacket = now;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	61bb      	str	r3, [r7, #24]
      PK_GeneralStatusRequest.Destination = etrACIS;
 8006bb6:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <acis_main_task+0xb5c>)
 8006bb8:	2202      	movs	r2, #2
 8006bba:	709a      	strb	r2, [r3, #2]
      protPushSequence(&fifoSendingQueue, &PK_GeneralStatusRequest, sizeof(PK_GeneralStatusRequest));
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	4925      	ldr	r1, [pc, #148]	; (8006c54 <acis_main_task+0xb5c>)
 8006bc0:	4825      	ldr	r0, [pc, #148]	; (8006c58 <acis_main_task+0xb60>)
 8006bc2:	f003 ffbb 	bl	800ab3c <protPushSequence>
    }

    FuelSwitchPos = SW_FUEL1 ? 1 : SW_FUEL2 ? 2 : 0;
 8006bc6:	4b25      	ldr	r3, [pc, #148]	; (8006c5c <acis_main_task+0xb64>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d108      	bne.n	8006be2 <acis_main_task+0xaea>
 8006bd0:	4b23      	ldr	r3, [pc, #140]	; (8006c60 <acis_main_task+0xb68>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <acis_main_task+0xae6>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e002      	b.n	8006be4 <acis_main_task+0xaec>
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <acis_main_task+0xaec>
 8006be2:	2301      	movs	r3, #1
 8006be4:	74bb      	strb	r3, [r7, #18]
    if(FuelSwitchPos != LastFuelSwitchPos || DelayDiff(now, LastFuelSwitchPacket) > 500000)
 8006be6:	7cba      	ldrb	r2, [r7, #18]
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d107      	bne.n	8006bfe <acis_main_task+0xb06>
 8006bee:	6979      	ldr	r1, [r7, #20]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fef9 	bl	80079e8 <DelayDiff>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b1a      	ldr	r3, [pc, #104]	; (8006c64 <acis_main_task+0xb6c>)
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d90e      	bls.n	8006c1c <acis_main_task+0xb24>
    {
      LastFuelSwitchPos = FuelSwitchPos;
 8006bfe:	7cbb      	ldrb	r3, [r7, #18]
 8006c00:	74fb      	strb	r3, [r7, #19]
      LastFuelSwitchPacket = now;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	617b      	str	r3, [r7, #20]
      PK_FuelSwitch.Destination = etrACIS;
 8006c06:	4b18      	ldr	r3, [pc, #96]	; (8006c68 <acis_main_task+0xb70>)
 8006c08:	2202      	movs	r2, #2
 8006c0a:	709a      	strb	r2, [r3, #2]
      PK_FuelSwitch.FuelSwitchPos = FuelSwitchPos;
 8006c0c:	4a16      	ldr	r2, [pc, #88]	; (8006c68 <acis_main_task+0xb70>)
 8006c0e:	7cbb      	ldrb	r3, [r7, #18]
 8006c10:	7113      	strb	r3, [r2, #4]
      protPushSequence(&fifoSendingQueue, &PK_FuelSwitch, sizeof(PK_FuelSwitch));
 8006c12:	2205      	movs	r2, #5
 8006c14:	4914      	ldr	r1, [pc, #80]	; (8006c68 <acis_main_task+0xb70>)
 8006c16:	4810      	ldr	r0, [pc, #64]	; (8006c58 <acis_main_task+0xb60>)
 8006c18:	f003 ff90 	bl	800ab3c <protPushSequence>

    }

    osDelay(1);
 8006c1c:	2001      	movs	r0, #1
 8006c1e:	f006 fc21 	bl	800d464 <osDelay>

    if(DelayDiff(now, StatusPcLast) >= 2000000)
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <acis_main_task+0xb74>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fedd 	bl	80079e8 <DelayDiff>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <acis_main_task+0xb78>)
 8006c32:	429a      	cmp	r2, r3
 8006c34:	f67f aa88 	bls.w	8006148 <acis_main_task+0x50>
    {
      StatusPcLast += 1000000;
 8006c38:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <acis_main_task+0xb74>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <acis_main_task+0xb7c>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <acis_main_task+0xb74>)
 8006c42:	6013      	str	r3, [r2, #0]
      StatusPcConnected = 0;
 8006c44:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <acis_main_task+0xb80>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
    now = Delay_Tick;
 8006c4a:	f7ff ba7d 	b.w	8006148 <acis_main_task+0x50>
 8006c4e:	bf00      	nop
 8006c50:	000186a0 	.word	0x000186a0
 8006c54:	20000040 	.word	0x20000040
 8006c58:	20006860 	.word	0x20006860
 8006c5c:	20006924 	.word	0x20006924
 8006c60:	20006931 	.word	0x20006931
 8006c64:	0007a120 	.word	0x0007a120
 8006c68:	200003c0 	.word	0x200003c0
 8006c6c:	200068a0 	.word	0x200068a0
 8006c70:	001e847f 	.word	0x001e847f
 8006c74:	000f4240 	.word	0x000f4240
 8006c78:	200068a4 	.word	0x200068a4

08006c7c <acis_parse_command>:
  }

}

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08c      	sub	sp, #48	; 0x30
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	73fb      	strb	r3, [r7, #15]
  uint16_t crc;
  uint32_t now = Delay_Tick;
 8006c8a:	4b70      	ldr	r3, [pc, #448]	; (8006e4c <acis_parse_command+0x1d0>)
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t offset,size, table, tablesize,configsize;
  uint32_t realconfigsize = (uint32_t)&acis_config.tables[0] - (uint32_t)&acis_config;
 8006c90:	23e0      	movs	r3, #224	; 0xe0
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28

  switch(msgBuf[0])
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d007      	beq.n	8006cac <acis_parse_command+0x30>
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d01d      	beq.n	8006cdc <acis_parse_command+0x60>
      (void)PK_Pong.RandomPong;
      if(xChaSrc == etrPC)
        StatusPcLast = now;
      return;
    default :
      break;
 8006ca0:	bf00      	nop
  }

  if(xChaSrc == etrACIS)
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	f040 8290 	bne.w	80071ca <acis_parse_command+0x54e>
 8006caa:	e023      	b.n	8006cf4 <acis_parse_command+0x78>
      PK_Copy(&PK_Ping, msgBuf);
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	4868      	ldr	r0, [pc, #416]	; (8006e50 <acis_parse_command+0x1d4>)
 8006cb0:	f7fa f992 	bl	8000fd8 <PK_Copy>
      PK_Pong.RandomPong = PK_Ping.RandomPing;
 8006cb4:	4b66      	ldr	r3, [pc, #408]	; (8006e50 <acis_parse_command+0x1d4>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a66      	ldr	r2, [pc, #408]	; (8006e54 <acis_parse_command+0x1d8>)
 8006cba:	6053      	str	r3, [r2, #4]
      PK_Pong.Destination = xChaSrc;
 8006cbc:	4a65      	ldr	r2, [pc, #404]	; (8006e54 <acis_parse_command+0x1d8>)
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	7093      	strb	r3, [r2, #2]
      protPushSequence(&fifoSendingQueue, &PK_Pong, sizeof(PK_Pong));
 8006cc2:	2208      	movs	r2, #8
 8006cc4:	4963      	ldr	r1, [pc, #396]	; (8006e54 <acis_parse_command+0x1d8>)
 8006cc6:	4864      	ldr	r0, [pc, #400]	; (8006e58 <acis_parse_command+0x1dc>)
 8006cc8:	f003 ff38 	bl	800ab3c <protPushSequence>
      if(xChaSrc == etrPC)
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	f040 826e 	bne.w	80071b0 <acis_parse_command+0x534>
        StatusPcLast = now;
 8006cd4:	4a61      	ldr	r2, [pc, #388]	; (8006e5c <acis_parse_command+0x1e0>)
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	6013      	str	r3, [r2, #0]
      return;
 8006cda:	e269      	b.n	80071b0 <acis_parse_command+0x534>
      PK_Copy(&PK_Pong, msgBuf);
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	485d      	ldr	r0, [pc, #372]	; (8006e54 <acis_parse_command+0x1d8>)
 8006ce0:	f7fa f97a 	bl	8000fd8 <PK_Copy>
      if(xChaSrc == etrPC)
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	f040 8264 	bne.w	80071b4 <acis_parse_command+0x538>
        StatusPcLast = now;
 8006cec:	4a5b      	ldr	r2, [pc, #364]	; (8006e5c <acis_parse_command+0x1e0>)
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	6013      	str	r3, [r2, #0]
      return;
 8006cf2:	e25f      	b.n	80071b4 <acis_parse_command+0x538>
  {
    switch(msgBuf[0])
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	2b13      	cmp	r3, #19
 8006cfc:	f200 825c 	bhi.w	80071b8 <acis_parse_command+0x53c>
 8006d00:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <acis_parse_command+0x8c>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d59 	.word	0x08006d59
 8006d0c:	080071b9 	.word	0x080071b9
 8006d10:	08006eb5 	.word	0x08006eb5
 8006d14:	08007141 	.word	0x08007141
 8006d18:	080071b9 	.word	0x080071b9
 8006d1c:	08006fbf 	.word	0x08006fbf
 8006d20:	0800709b 	.word	0x0800709b
 8006d24:	080071b9 	.word	0x080071b9
 8006d28:	080071b9 	.word	0x080071b9
 8006d2c:	08006df5 	.word	0x08006df5
 8006d30:	08006db5 	.word	0x08006db5
 8006d34:	080071b9 	.word	0x080071b9
 8006d38:	080071b9 	.word	0x080071b9
 8006d3c:	080071b9 	.word	0x080071b9
 8006d40:	080071b9 	.word	0x080071b9
 8006d44:	080071b9 	.word	0x080071b9
 8006d48:	080071b9 	.word	0x080071b9
 8006d4c:	080071b9 	.word	0x080071b9
 8006d50:	080071b9 	.word	0x080071b9
 8006d54:	08006e35 	.word	0x08006e35
    {
      case PK_GeneralStatusResponseID :
        PK_Copy(&PK_GeneralStatusResponse, msgBuf);
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	4841      	ldr	r0, [pc, #260]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d5c:	f7fa f93c 	bl	8000fd8 <PK_Copy>
        StatusIgnition = PK_GeneralStatusResponse.IgnitionAngle;
 8006d60:	4b3f      	ldr	r3, [pc, #252]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	4a3f      	ldr	r2, [pc, #252]	; (8006e64 <acis_parse_command+0x1e8>)
 8006d66:	6013      	str	r3, [r2, #0]
        StatusLoad = PK_GeneralStatusResponse.Load;
 8006d68:	4b3d      	ldr	r3, [pc, #244]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	4a3e      	ldr	r2, [pc, #248]	; (8006e68 <acis_parse_command+0x1ec>)
 8006d6e:	6013      	str	r3, [r2, #0]
        StatusRPM = PK_GeneralStatusResponse.RPM;
 8006d70:	4b3b      	ldr	r3, [pc, #236]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <acis_parse_command+0x1f0>)
 8006d76:	6013      	str	r3, [r2, #0]
        StatusPressure = PK_GeneralStatusResponse.Pressure;
 8006d78:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <acis_parse_command+0x1f4>)
 8006d7e:	6013      	str	r3, [r2, #0]
        StatusVoltage = PK_GeneralStatusResponse.Voltage;
 8006d80:	4b37      	ldr	r3, [pc, #220]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	4a3b      	ldr	r2, [pc, #236]	; (8006e74 <acis_parse_command+0x1f8>)
 8006d86:	6013      	str	r3, [r2, #0]
        StatusTemperature = PK_GeneralStatusResponse.Temperature;
 8006d88:	4b35      	ldr	r3, [pc, #212]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <acis_parse_command+0x1fc>)
 8006d8e:	6013      	str	r3, [r2, #0]
        StatusCheck = PK_GeneralStatusResponse.check;
 8006d90:	4b33      	ldr	r3, [pc, #204]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d92:	799a      	ldrb	r2, [r3, #6]
 8006d94:	4b39      	ldr	r3, [pc, #228]	; (8006e7c <acis_parse_command+0x200>)
 8006d96:	701a      	strb	r2, [r3, #0]
        StatusValveNum = PK_GeneralStatusResponse.valvenum;
 8006d98:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <acis_parse_command+0x1e4>)
 8006d9a:	795a      	ldrb	r2, [r3, #5]
 8006d9c:	4b38      	ldr	r3, [pc, #224]	; (8006e80 <acis_parse_command+0x204>)
 8006d9e:	701a      	strb	r2, [r3, #0]
        StatusTableNum = PK_GeneralStatusResponse.tablenum;
 8006da0:	4b2f      	ldr	r3, [pc, #188]	; (8006e60 <acis_parse_command+0x1e4>)
 8006da2:	791b      	ldrb	r3, [r3, #4]
 8006da4:	461a      	mov	r2, r3
 8006da6:	4b37      	ldr	r3, [pc, #220]	; (8006e84 <acis_parse_command+0x208>)
 8006da8:	601a      	str	r2, [r3, #0]
        strcpy(StatusTableName, PK_GeneralStatusResponse.tablename);
 8006daa:	4937      	ldr	r1, [pc, #220]	; (8006e88 <acis_parse_command+0x20c>)
 8006dac:	4837      	ldr	r0, [pc, #220]	; (8006e8c <acis_parse_command+0x210>)
 8006dae:	f00a fcd9 	bl	8011764 <strcpy>
        break;
 8006db2:	e20a      	b.n	80071ca <acis_parse_command+0x54e>

      case PK_RestoreConfigAcknowledgeID :
        PK_Copy(&PK_RestoreConfigAcknowledge, msgBuf);
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	4836      	ldr	r0, [pc, #216]	; (8006e90 <acis_parse_command+0x214>)
 8006db8:	f7fa f90e 	bl	8000fd8 <PK_Copy>
        if(PK_RestoreConfigAcknowledge.ErrorCode == 0)
 8006dbc:	4b34      	ldr	r3, [pc, #208]	; (8006e90 <acis_parse_command+0x214>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10f      	bne.n	8006de4 <acis_parse_command+0x168>
        {
          if(StatusSynchronizing == 1 && NeedLoad)
 8006dc4:	4b33      	ldr	r3, [pc, #204]	; (8006e94 <acis_parse_command+0x218>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	f040 81f6 	bne.w	80071bc <acis_parse_command+0x540>
 8006dd0:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <acis_parse_command+0x21c>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 81f0 	beq.w	80071bc <acis_parse_command+0x540>
            SyncRequestDone = 1;
 8006ddc:	4b2f      	ldr	r3, [pc, #188]	; (8006e9c <acis_parse_command+0x220>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	701a      	strb	r2, [r3, #0]
        }
        else SyncError = PK_RestoreConfigAcknowledge.ErrorCode + 100;
        break;
 8006de2:	e1eb      	b.n	80071bc <acis_parse_command+0x540>
        else SyncError = PK_RestoreConfigAcknowledge.ErrorCode + 100;
 8006de4:	4b2a      	ldr	r3, [pc, #168]	; (8006e90 <acis_parse_command+0x214>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	3364      	adds	r3, #100	; 0x64
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	4b2c      	ldr	r3, [pc, #176]	; (8006ea0 <acis_parse_command+0x224>)
 8006df0:	701a      	strb	r2, [r3, #0]
        break;
 8006df2:	e1e3      	b.n	80071bc <acis_parse_command+0x540>

      case PK_SaveConfigAcknowledgeID :
        PK_Copy(&PK_SaveConfigAcknowledge, msgBuf);
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	482b      	ldr	r0, [pc, #172]	; (8006ea4 <acis_parse_command+0x228>)
 8006df8:	f7fa f8ee 	bl	8000fd8 <PK_Copy>
        if(PK_SaveConfigAcknowledge.ErrorCode == 0)
 8006dfc:	4b29      	ldr	r3, [pc, #164]	; (8006ea4 <acis_parse_command+0x228>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10f      	bne.n	8006e24 <acis_parse_command+0x1a8>
        {
          if(StatusSynchronizing == 2 && NeedSave)
 8006e04:	4b23      	ldr	r3, [pc, #140]	; (8006e94 <acis_parse_command+0x218>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	f040 81d8 	bne.w	80071c0 <acis_parse_command+0x544>
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <acis_parse_command+0x22c>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 81d2 	beq.w	80071c0 <acis_parse_command+0x544>
            SyncRequestDone = 1;
 8006e1c:	4b1f      	ldr	r3, [pc, #124]	; (8006e9c <acis_parse_command+0x220>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]
        }
        else SyncError = PK_SaveConfigAcknowledge.ErrorCode + 120;
        break;
 8006e22:	e1cd      	b.n	80071c0 <acis_parse_command+0x544>
        else SyncError = PK_SaveConfigAcknowledge.ErrorCode + 120;
 8006e24:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <acis_parse_command+0x228>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	3378      	adds	r3, #120	; 0x78
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <acis_parse_command+0x224>)
 8006e30:	701a      	strb	r2, [r3, #0]
        break;
 8006e32:	e1c5      	b.n	80071c0 <acis_parse_command+0x544>

      case PK_PcConnectedID :
        PK_Copy(&PK_PcConnected, msgBuf);
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	481d      	ldr	r0, [pc, #116]	; (8006eac <acis_parse_command+0x230>)
 8006e38:	f7fa f8ce 	bl	8000fd8 <PK_Copy>
        StatusPcLast = Delay_Tick;
 8006e3c:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <acis_parse_command+0x1d0>)
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	4a06      	ldr	r2, [pc, #24]	; (8006e5c <acis_parse_command+0x1e0>)
 8006e42:	6013      	str	r3, [r2, #0]
        StatusPcConnected = 1;
 8006e44:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <acis_parse_command+0x234>)
 8006e46:	2201      	movs	r2, #1
 8006e48:	701a      	strb	r2, [r3, #0]
        break;
 8006e4a:	e1be      	b.n	80071ca <acis_parse_command+0x54e>
 8006e4c:	40000c00 	.word	0x40000c00
 8006e50:	20000000 	.word	0x20000000
 8006e54:	20000020 	.word	0x20000020
 8006e58:	20006860 	.word	0x20006860
 8006e5c:	200068a0 	.word	0x200068a0
 8006e60:	20000060 	.word	0x20000060
 8006e64:	2000688c 	.word	0x2000688c
 8006e68:	20006884 	.word	0x20006884
 8006e6c:	20006880 	.word	0x20006880
 8006e70:	20006888 	.word	0x20006888
 8006e74:	20006890 	.word	0x20006890
 8006e78:	20006894 	.word	0x20006894
 8006e7c:	2000689d 	.word	0x2000689d
 8006e80:	2000689c 	.word	0x2000689c
 8006e84:	20006898 	.word	0x20006898
 8006e88:	20000067 	.word	0x20000067
 8006e8c:	200068cc 	.word	0x200068cc
 8006e90:	20000380 	.word	0x20000380
 8006e94:	2000689f 	.word	0x2000689f
 8006e98:	200068a6 	.word	0x200068a6
 8006e9c:	200068a8 	.word	0x200068a8
 8006ea0:	200068b8 	.word	0x200068b8
 8006ea4:	20000360 	.word	0x20000360
 8006ea8:	200068a5 	.word	0x200068a5
 8006eac:	200003a0 	.word	0x200003a0
 8006eb0:	200068a4 	.word	0x200068a4

      case PK_TableMemoryDataID :
        PK_Copy(&PK_TableMemoryData, msgBuf);
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	4895      	ldr	r0, [pc, #596]	; (800710c <acis_parse_command+0x490>)
 8006eb8:	f7fa f88e 	bl	8000fd8 <PK_Copy>

        if(PK_TableMemoryData.ErrorCode == 0)
 8006ebc:	4b93      	ldr	r3, [pc, #588]	; (800710c <acis_parse_command+0x490>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d174      	bne.n	8006fae <acis_parse_command+0x332>
        {
          PK_TableMemoryAcknowledge.Destination = xChaSrc;
 8006ec4:	4a92      	ldr	r2, [pc, #584]	; (8007110 <acis_parse_command+0x494>)
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	7093      	strb	r3, [r2, #2]
          offset = PK_TableMemoryAcknowledge.offset = PK_TableMemoryData.offset;
 8006eca:	4b90      	ldr	r3, [pc, #576]	; (800710c <acis_parse_command+0x490>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	4a90      	ldr	r2, [pc, #576]	; (8007110 <acis_parse_command+0x494>)
 8006ed0:	6113      	str	r3, [r2, #16]
 8006ed2:	4b8f      	ldr	r3, [pc, #572]	; (8007110 <acis_parse_command+0x494>)
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
          size = PK_TableMemoryAcknowledge.size = PK_TableMemoryData.size;
 8006ed8:	4b8c      	ldr	r3, [pc, #560]	; (800710c <acis_parse_command+0x490>)
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	4a8c      	ldr	r2, [pc, #560]	; (8007110 <acis_parse_command+0x494>)
 8006ede:	6153      	str	r3, [r2, #20]
 8006ee0:	4b8b      	ldr	r3, [pc, #556]	; (8007110 <acis_parse_command+0x494>)
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	623b      	str	r3, [r7, #32]
          table = PK_TableMemoryAcknowledge.table = PK_TableMemoryData.table;
 8006ee6:	4b89      	ldr	r3, [pc, #548]	; (800710c <acis_parse_command+0x490>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	4a89      	ldr	r2, [pc, #548]	; (8007110 <acis_parse_command+0x494>)
 8006eec:	6093      	str	r3, [r2, #8]
 8006eee:	4b88      	ldr	r3, [pc, #544]	; (8007110 <acis_parse_command+0x494>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	617b      	str	r3, [r7, #20]
          tablesize = PK_TableMemoryAcknowledge.tablesize = PK_TableMemoryData.tablesize;
 8006ef4:	4b85      	ldr	r3, [pc, #532]	; (800710c <acis_parse_command+0x490>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	4a85      	ldr	r2, [pc, #532]	; (8007110 <acis_parse_command+0x494>)
 8006efa:	60d3      	str	r3, [r2, #12]
 8006efc:	4b84      	ldr	r3, [pc, #528]	; (8007110 <acis_parse_command+0x494>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	613b      	str	r3, [r7, #16]
          PK_TableMemoryAcknowledge.ErrorCode = 0;
 8006f02:	4b83      	ldr	r3, [pc, #524]	; (8007110 <acis_parse_command+0x494>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]

          if(tablesize != sizeof(sAcisIgnTable))
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d002      	beq.n	8006f18 <acis_parse_command+0x29c>
            PK_TableMemoryAcknowledge.ErrorCode = 1;
 8006f12:	4b7f      	ldr	r3, [pc, #508]	; (8007110 <acis_parse_command+0x494>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	605a      	str	r2, [r3, #4]

          if(size + offset > sizeof(sAcisIgnTable))
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d902      	bls.n	8006f2c <acis_parse_command+0x2b0>
            PK_TableMemoryAcknowledge.ErrorCode = 2;
 8006f26:	4b7a      	ldr	r3, [pc, #488]	; (8007110 <acis_parse_command+0x494>)
 8006f28:	2202      	movs	r2, #2
 8006f2a:	605a      	str	r2, [r3, #4]

          if(size > PACKET_TABLE_MAX_SIZE || size > sizeof(sAcisIgnTable))
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	2be0      	cmp	r3, #224	; 0xe0
 8006f30:	d804      	bhi.n	8006f3c <acis_parse_command+0x2c0>
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d902      	bls.n	8006f42 <acis_parse_command+0x2c6>
            PK_TableMemoryAcknowledge.ErrorCode = 3;
 8006f3c:	4b74      	ldr	r3, [pc, #464]	; (8007110 <acis_parse_command+0x494>)
 8006f3e:	2203      	movs	r2, #3
 8006f40:	605a      	str	r2, [r3, #4]

          if(table >= TABLE_SETUPS_MAX)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d902      	bls.n	8006f4e <acis_parse_command+0x2d2>
            PK_TableMemoryAcknowledge.ErrorCode = 4;
 8006f48:	4b71      	ldr	r3, [pc, #452]	; (8007110 <acis_parse_command+0x494>)
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	605a      	str	r2, [r3, #4]

          if(PK_TableMemoryAcknowledge.ErrorCode == 0)
 8006f4e:	4b70      	ldr	r3, [pc, #448]	; (8007110 <acis_parse_command+0x494>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d125      	bne.n	8006fa2 <acis_parse_command+0x326>
          {
            crc = CRC16_Generate(PK_TableMemoryData.data, sizeof(PK_TableMemoryData.data));
 8006f56:	21e0      	movs	r1, #224	; 0xe0
 8006f58:	486e      	ldr	r0, [pc, #440]	; (8007114 <acis_parse_command+0x498>)
 8006f5a:	f000 fc4b 	bl	80077f4 <CRC16_Generate>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	837b      	strh	r3, [r7, #26]
            if(crc == PK_TableMemoryData.crc)
 8006f62:	4b6a      	ldr	r3, [pc, #424]	; (800710c <acis_parse_command+0x490>)
 8006f64:	8b1b      	ldrh	r3, [r3, #24]
 8006f66:	8b7a      	ldrh	r2, [r7, #26]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d117      	bne.n	8006f9c <acis_parse_command+0x320>
            {
              memcpy(&((uint8_t*)&acis_config.tables[table])[offset], &PK_TableMemoryData.data[0], size);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f640 426c 	movw	r2, #3180	; 0xc6c
 8006f72:	fb02 f303 	mul.w	r3, r2, r3
 8006f76:	33e0      	adds	r3, #224	; 0xe0
 8006f78:	4a67      	ldr	r2, [pc, #412]	; (8007118 <acis_parse_command+0x49c>)
 8006f7a:	441a      	add	r2, r3
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	4413      	add	r3, r2
 8006f80:	6a3a      	ldr	r2, [r7, #32]
 8006f82:	4964      	ldr	r1, [pc, #400]	; (8007114 <acis_parse_command+0x498>)
 8006f84:	4618      	mov	r0, r3
 8006f86:	f009 fd75 	bl	8010a74 <memcpy>

              if(StatusSynchronizing == 1)
 8006f8a:	4b64      	ldr	r3, [pc, #400]	; (800711c <acis_parse_command+0x4a0>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d106      	bne.n	8006fa2 <acis_parse_command+0x326>
                SyncRequestDone = 1;
 8006f94:	4b62      	ldr	r3, [pc, #392]	; (8007120 <acis_parse_command+0x4a4>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e002      	b.n	8006fa2 <acis_parse_command+0x326>
            }
            else
              PK_TableMemoryAcknowledge.ErrorCode = 5;
 8006f9c:	4b5c      	ldr	r3, [pc, #368]	; (8007110 <acis_parse_command+0x494>)
 8006f9e:	2205      	movs	r2, #5
 8006fa0:	605a      	str	r2, [r3, #4]
          }

          protPushSequence(&fifoSendingQueue, &PK_TableMemoryAcknowledge, sizeof(PK_TableMemoryAcknowledge));
 8006fa2:	2218      	movs	r2, #24
 8006fa4:	495a      	ldr	r1, [pc, #360]	; (8007110 <acis_parse_command+0x494>)
 8006fa6:	485f      	ldr	r0, [pc, #380]	; (8007124 <acis_parse_command+0x4a8>)
 8006fa8:	f003 fdc8 	bl	800ab3c <protPushSequence>
        }
        else SyncError = PK_TableMemoryData.ErrorCode + 20;
        break;
 8006fac:	e10d      	b.n	80071ca <acis_parse_command+0x54e>
        else SyncError = PK_TableMemoryData.ErrorCode + 20;
 8006fae:	4b57      	ldr	r3, [pc, #348]	; (800710c <acis_parse_command+0x490>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	4b5b      	ldr	r3, [pc, #364]	; (8007128 <acis_parse_command+0x4ac>)
 8006fba:	701a      	strb	r2, [r3, #0]
        break;
 8006fbc:	e105      	b.n	80071ca <acis_parse_command+0x54e>

      case PK_ConfigMemoryDataID :
        PK_Copy(&PK_ConfigMemoryData, msgBuf);
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	485a      	ldr	r0, [pc, #360]	; (800712c <acis_parse_command+0x4b0>)
 8006fc2:	f7fa f809 	bl	8000fd8 <PK_Copy>

        if(PK_ConfigMemoryData.ErrorCode == 0)
 8006fc6:	4b59      	ldr	r3, [pc, #356]	; (800712c <acis_parse_command+0x4b0>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d15d      	bne.n	800708a <acis_parse_command+0x40e>
        {
          PK_ConfigMemoryAcknowledge.Destination = xChaSrc;
 8006fce:	4a58      	ldr	r2, [pc, #352]	; (8007130 <acis_parse_command+0x4b4>)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	7093      	strb	r3, [r2, #2]
          offset = PK_ConfigMemoryAcknowledge.offset = PK_ConfigMemoryData.offset;
 8006fd4:	4b55      	ldr	r3, [pc, #340]	; (800712c <acis_parse_command+0x4b0>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	4a55      	ldr	r2, [pc, #340]	; (8007130 <acis_parse_command+0x4b4>)
 8006fda:	60d3      	str	r3, [r2, #12]
 8006fdc:	4b54      	ldr	r3, [pc, #336]	; (8007130 <acis_parse_command+0x4b4>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
          size = PK_ConfigMemoryAcknowledge.size = PK_ConfigMemoryData.size;
 8006fe2:	4b52      	ldr	r3, [pc, #328]	; (800712c <acis_parse_command+0x4b0>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	4a52      	ldr	r2, [pc, #328]	; (8007130 <acis_parse_command+0x4b4>)
 8006fe8:	6113      	str	r3, [r2, #16]
 8006fea:	4b51      	ldr	r3, [pc, #324]	; (8007130 <acis_parse_command+0x4b4>)
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	623b      	str	r3, [r7, #32]
          configsize = PK_ConfigMemoryAcknowledge.configsize = PK_ConfigMemoryData.configsize;
 8006ff0:	4b4e      	ldr	r3, [pc, #312]	; (800712c <acis_parse_command+0x4b0>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4a4e      	ldr	r2, [pc, #312]	; (8007130 <acis_parse_command+0x4b4>)
 8006ff6:	6093      	str	r3, [r2, #8]
 8006ff8:	4b4d      	ldr	r3, [pc, #308]	; (8007130 <acis_parse_command+0x4b4>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	61fb      	str	r3, [r7, #28]
          PK_ConfigMemoryAcknowledge.ErrorCode = 0;
 8006ffe:	4b4c      	ldr	r3, [pc, #304]	; (8007130 <acis_parse_command+0x4b4>)
 8007000:	2200      	movs	r2, #0
 8007002:	605a      	str	r2, [r3, #4]

          if(configsize != realconfigsize)
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	429a      	cmp	r2, r3
 800700a:	d002      	beq.n	8007012 <acis_parse_command+0x396>
            PK_ConfigMemoryData.ErrorCode = 1;
 800700c:	4b47      	ldr	r3, [pc, #284]	; (800712c <acis_parse_command+0x4b0>)
 800700e:	2201      	movs	r2, #1
 8007010:	605a      	str	r2, [r3, #4]

          if(size + offset > realconfigsize)
 8007012:	6a3a      	ldr	r2, [r7, #32]
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	4413      	add	r3, r2
 8007018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701a:	429a      	cmp	r2, r3
 800701c:	d202      	bcs.n	8007024 <acis_parse_command+0x3a8>
            PK_ConfigMemoryData.ErrorCode = 2;
 800701e:	4b43      	ldr	r3, [pc, #268]	; (800712c <acis_parse_command+0x4b0>)
 8007020:	2202      	movs	r2, #2
 8007022:	605a      	str	r2, [r3, #4]

          if(size > realconfigsize || size > PACKET_CONFIG_MAX_SIZE)
 8007024:	6a3a      	ldr	r2, [r7, #32]
 8007026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007028:	429a      	cmp	r2, r3
 800702a:	d802      	bhi.n	8007032 <acis_parse_command+0x3b6>
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	2bd4      	cmp	r3, #212	; 0xd4
 8007030:	d902      	bls.n	8007038 <acis_parse_command+0x3bc>
            PK_ConfigMemoryData.ErrorCode = 3;
 8007032:	4b3e      	ldr	r3, [pc, #248]	; (800712c <acis_parse_command+0x4b0>)
 8007034:	2203      	movs	r2, #3
 8007036:	605a      	str	r2, [r3, #4]

          if(PK_ConfigMemoryAcknowledge.ErrorCode == 0)
 8007038:	4b3d      	ldr	r3, [pc, #244]	; (8007130 <acis_parse_command+0x4b4>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d11e      	bne.n	800707e <acis_parse_command+0x402>
          {
            crc = CRC16_Generate(PK_ConfigMemoryData.data, sizeof(PK_ConfigMemoryData.data));
 8007040:	21d4      	movs	r1, #212	; 0xd4
 8007042:	483c      	ldr	r0, [pc, #240]	; (8007134 <acis_parse_command+0x4b8>)
 8007044:	f000 fbd6 	bl	80077f4 <CRC16_Generate>
 8007048:	4603      	mov	r3, r0
 800704a:	837b      	strh	r3, [r7, #26]
            if(crc == PK_ConfigMemoryData.crc)
 800704c:	4b37      	ldr	r3, [pc, #220]	; (800712c <acis_parse_command+0x4b0>)
 800704e:	8a9b      	ldrh	r3, [r3, #20]
 8007050:	8b7a      	ldrh	r2, [r7, #26]
 8007052:	429a      	cmp	r2, r3
 8007054:	d110      	bne.n	8007078 <acis_parse_command+0x3fc>
            {
              memcpy(&((uint8_t*)&acis_config)[offset], &PK_ConfigMemoryData.data[0], size);
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <acis_parse_command+0x49c>)
 800705a:	4413      	add	r3, r2
 800705c:	6a3a      	ldr	r2, [r7, #32]
 800705e:	4935      	ldr	r1, [pc, #212]	; (8007134 <acis_parse_command+0x4b8>)
 8007060:	4618      	mov	r0, r3
 8007062:	f009 fd07 	bl	8010a74 <memcpy>

              if(StatusSynchronizing == 1)
 8007066:	4b2d      	ldr	r3, [pc, #180]	; (800711c <acis_parse_command+0x4a0>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d106      	bne.n	800707e <acis_parse_command+0x402>
                SyncRequestDone = 1;
 8007070:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <acis_parse_command+0x4a4>)
 8007072:	2201      	movs	r2, #1
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	e002      	b.n	800707e <acis_parse_command+0x402>
            }
            else
              PK_ConfigMemoryAcknowledge.ErrorCode = 5;
 8007078:	4b2d      	ldr	r3, [pc, #180]	; (8007130 <acis_parse_command+0x4b4>)
 800707a:	2205      	movs	r2, #5
 800707c:	605a      	str	r2, [r3, #4]
          }

          protPushSequence(&fifoSendingQueue, &PK_ConfigMemoryAcknowledge, sizeof(PK_ConfigMemoryAcknowledge));
 800707e:	2214      	movs	r2, #20
 8007080:	492b      	ldr	r1, [pc, #172]	; (8007130 <acis_parse_command+0x4b4>)
 8007082:	4828      	ldr	r0, [pc, #160]	; (8007124 <acis_parse_command+0x4a8>)
 8007084:	f003 fd5a 	bl	800ab3c <protPushSequence>
        }
        else SyncError = PK_ConfigMemoryData.ErrorCode + 40;
        break;
 8007088:	e09f      	b.n	80071ca <acis_parse_command+0x54e>
        else SyncError = PK_ConfigMemoryData.ErrorCode + 40;
 800708a:	4b28      	ldr	r3, [pc, #160]	; (800712c <acis_parse_command+0x4b0>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	3328      	adds	r3, #40	; 0x28
 8007092:	b2da      	uxtb	r2, r3
 8007094:	4b24      	ldr	r3, [pc, #144]	; (8007128 <acis_parse_command+0x4ac>)
 8007096:	701a      	strb	r2, [r3, #0]
        break;
 8007098:	e097      	b.n	80071ca <acis_parse_command+0x54e>

      case PK_ConfigMemoryAcknowledgeID :
        PK_Copy(&PK_ConfigMemoryAcknowledge, msgBuf);
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	4824      	ldr	r0, [pc, #144]	; (8007130 <acis_parse_command+0x4b4>)
 800709e:	f7f9 ff9b 	bl	8000fd8 <PK_Copy>
        if(PK_ConfigMemoryAcknowledge.ErrorCode == 0)
 80070a2:	4b23      	ldr	r3, [pc, #140]	; (8007130 <acis_parse_command+0x4b4>)
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d113      	bne.n	80070d2 <acis_parse_command+0x456>
        {
          if(StatusSynchronizing == 2)
 80070aa:	4b1c      	ldr	r3, [pc, #112]	; (800711c <acis_parse_command+0x4a0>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d102      	bne.n	80070ba <acis_parse_command+0x43e>
            SyncRequestDone = 1;
 80070b4:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <acis_parse_command+0x4a4>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	701a      	strb	r2, [r3, #0]
          if(Applying)
 80070ba:	4b1f      	ldr	r3, [pc, #124]	; (8007138 <acis_parse_command+0x4bc>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d07f      	beq.n	80071c4 <acis_parse_command+0x548>
          {
            Applying = 0;
 80070c4:	4b1c      	ldr	r3, [pc, #112]	; (8007138 <acis_parse_command+0x4bc>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
            ApplyError = 0;
 80070ca:	4b1c      	ldr	r3, [pc, #112]	; (800713c <acis_parse_command+0x4c0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	701a      	strb	r2, [r3, #0]
        else
        {
          if(StatusSynchronizing == 2) SyncError = PK_ConfigMemoryAcknowledge.ErrorCode + 60;
          if(Applying) { Applying = 0; ApplyError = PK_ConfigMemoryAcknowledge.ErrorCode + 60; }
        }
        break;
 80070d0:	e078      	b.n	80071c4 <acis_parse_command+0x548>
          if(StatusSynchronizing == 2) SyncError = PK_ConfigMemoryAcknowledge.ErrorCode + 60;
 80070d2:	4b12      	ldr	r3, [pc, #72]	; (800711c <acis_parse_command+0x4a0>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d106      	bne.n	80070ea <acis_parse_command+0x46e>
 80070dc:	4b14      	ldr	r3, [pc, #80]	; (8007130 <acis_parse_command+0x4b4>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	333c      	adds	r3, #60	; 0x3c
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <acis_parse_command+0x4ac>)
 80070e8:	701a      	strb	r2, [r3, #0]
          if(Applying) { Applying = 0; ApplyError = PK_ConfigMemoryAcknowledge.ErrorCode + 60; }
 80070ea:	4b13      	ldr	r3, [pc, #76]	; (8007138 <acis_parse_command+0x4bc>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d067      	beq.n	80071c4 <acis_parse_command+0x548>
 80070f4:	4b10      	ldr	r3, [pc, #64]	; (8007138 <acis_parse_command+0x4bc>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <acis_parse_command+0x4b4>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	333c      	adds	r3, #60	; 0x3c
 8007102:	b2da      	uxtb	r2, r3
 8007104:	4b0d      	ldr	r3, [pc, #52]	; (800713c <acis_parse_command+0x4c0>)
 8007106:	701a      	strb	r2, [r3, #0]
        break;
 8007108:	e05c      	b.n	80071c4 <acis_parse_command+0x548>
 800710a:	bf00      	nop
 800710c:	200000c0 	.word	0x200000c0
 8007110:	200001c0 	.word	0x200001c0
 8007114:	200000da 	.word	0x200000da
 8007118:	20002e20 	.word	0x20002e20
 800711c:	2000689f 	.word	0x2000689f
 8007120:	200068a8 	.word	0x200068a8
 8007124:	20006860 	.word	0x20006860
 8007128:	200068b8 	.word	0x200068b8
 800712c:	20000200 	.word	0x20000200
 8007130:	20000300 	.word	0x20000300
 8007134:	20000216 	.word	0x20000216
 8007138:	200068ba 	.word	0x200068ba
 800713c:	200068b9 	.word	0x200068b9
      case PK_TableMemoryAcknowledgeID :
        PK_Copy(&PK_TableMemoryAcknowledge, msgBuf);
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	4823      	ldr	r0, [pc, #140]	; (80071d0 <acis_parse_command+0x554>)
 8007144:	f7f9 ff48 	bl	8000fd8 <PK_Copy>
        if(PK_TableMemoryAcknowledge.ErrorCode == 0)
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <acis_parse_command+0x554>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d113      	bne.n	8007178 <acis_parse_command+0x4fc>
        {
          if(StatusSynchronizing == 2)
 8007150:	4b20      	ldr	r3, [pc, #128]	; (80071d4 <acis_parse_command+0x558>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d102      	bne.n	8007160 <acis_parse_command+0x4e4>
            SyncRequestDone = 1;
 800715a:	4b1f      	ldr	r3, [pc, #124]	; (80071d8 <acis_parse_command+0x55c>)
 800715c:	2201      	movs	r2, #1
 800715e:	701a      	strb	r2, [r3, #0]
          if(Applying)
 8007160:	4b1e      	ldr	r3, [pc, #120]	; (80071dc <acis_parse_command+0x560>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d02e      	beq.n	80071c8 <acis_parse_command+0x54c>
          {
            Applying = 0;
 800716a:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <acis_parse_command+0x560>)
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
            ApplyError = 0;
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <acis_parse_command+0x564>)
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
        else
        {
          if(StatusSynchronizing == 2) SyncError = PK_TableMemoryAcknowledge.ErrorCode + 80;
          if(Applying) { Applying = 0; ApplyError = PK_TableMemoryAcknowledge.ErrorCode + 80; }
        }
        break;
 8007176:	e027      	b.n	80071c8 <acis_parse_command+0x54c>
          if(StatusSynchronizing == 2) SyncError = PK_TableMemoryAcknowledge.ErrorCode + 80;
 8007178:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <acis_parse_command+0x558>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d106      	bne.n	8007190 <acis_parse_command+0x514>
 8007182:	4b13      	ldr	r3, [pc, #76]	; (80071d0 <acis_parse_command+0x554>)
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	3350      	adds	r3, #80	; 0x50
 800718a:	b2da      	uxtb	r2, r3
 800718c:	4b15      	ldr	r3, [pc, #84]	; (80071e4 <acis_parse_command+0x568>)
 800718e:	701a      	strb	r2, [r3, #0]
          if(Applying) { Applying = 0; ApplyError = PK_TableMemoryAcknowledge.ErrorCode + 80; }
 8007190:	4b12      	ldr	r3, [pc, #72]	; (80071dc <acis_parse_command+0x560>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <acis_parse_command+0x54c>
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <acis_parse_command+0x560>)
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <acis_parse_command+0x554>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	3350      	adds	r3, #80	; 0x50
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <acis_parse_command+0x564>)
 80071ac:	701a      	strb	r2, [r3, #0]
        break;
 80071ae:	e00b      	b.n	80071c8 <acis_parse_command+0x54c>
      return;
 80071b0:	bf00      	nop
 80071b2:	e00a      	b.n	80071ca <acis_parse_command+0x54e>
      return;
 80071b4:	bf00      	nop
 80071b6:	e008      	b.n	80071ca <acis_parse_command+0x54e>

      default:
        break;
 80071b8:	bf00      	nop
 80071ba:	e006      	b.n	80071ca <acis_parse_command+0x54e>
        break;
 80071bc:	bf00      	nop
 80071be:	e004      	b.n	80071ca <acis_parse_command+0x54e>
        break;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <acis_parse_command+0x54e>
        break;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <acis_parse_command+0x54e>
        break;
 80071c8:	bf00      	nop
    }
  }
}
 80071ca:	3730      	adds	r7, #48	; 0x30
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	200001c0 	.word	0x200001c0
 80071d4:	2000689f 	.word	0x2000689f
 80071d8:	200068a8 	.word	0x200068a8
 80071dc:	200068ba 	.word	0x200068ba
 80071e0:	200068b9 	.word	0x200068b9
 80071e4:	200068b8 	.word	0x200068b8

080071e8 <acis_send_command>:

static inline HAL_StatusTypeDef acis_send_command(eTransChannels xChaDst, void * msgBuf, uint32_t length)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef result = HAL_BUSY;
 80071f6:	2302      	movs	r3, #2
 80071f8:	75fb      	strb	r3, [r7, #23]
  int8_t status;

  status = xSender(xChaDst, (uint8_t*)msgBuf, length);
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f002 fd2b 	bl	8009c5c <xSender>
 8007206:	4603      	mov	r3, r0
 8007208:	75bb      	strb	r3, [r7, #22]

  if(status == -1)
 800720a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d108      	bne.n	8007226 <acis_send_command+0x3e>
  {
    StatusTimeout = 1;
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <acis_send_command+0x5c>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
    StatusCheck = 1;
 800721a:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <acis_send_command+0x60>)
 800721c:	2201      	movs	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
    result = HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	75fb      	strb	r3, [r7, #23]
 8007224:	e008      	b.n	8007238 <acis_send_command+0x50>
  }
  else if(status == 1)
 8007226:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d104      	bne.n	8007238 <acis_send_command+0x50>
  {
    StatusTimeout = 0;
 800722e:	4b05      	ldr	r3, [pc, #20]	; (8007244 <acis_send_command+0x5c>)
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
    result = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200068d8 	.word	0x200068d8
 8007248:	2000689d 	.word	0x2000689d

0800724c <controls_irq>:
static uint32_t sw_display_ftime = 0;
static uint8_t sw_display_delay = 0;


void controls_irq(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  TIM_CNT += TIM_STEP;
 8007250:	4b8b      	ldr	r3, [pc, #556]	; (8007480 <controls_irq+0x234>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3301      	adds	r3, #1
 8007256:	4a8a      	ldr	r2, [pc, #552]	; (8007480 <controls_irq+0x234>)
 8007258:	6013      	str	r3, [r2, #0]
  //Fuel1
  if(ISSWITCH(SW_CTRL(FUEL1)))
 800725a:	4b8a      	ldr	r3, [pc, #552]	; (8007484 <controls_irq+0x238>)
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007262:	2b00      	cmp	r3, #0
 8007264:	d11d      	bne.n	80072a2 <controls_irq+0x56>
  {
    if(sw_fuel1_delay > SW_PRESS_DELAY)
 8007266:	4b88      	ldr	r3, [pc, #544]	; (8007488 <controls_irq+0x23c>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b0a      	cmp	r3, #10
 800726c:	d912      	bls.n	8007294 <controls_irq+0x48>
    {
      if(sw_fuel1_ftime == 0) sw_fuel1_ftime = TIM_CNT;
 800726e:	4b87      	ldr	r3, [pc, #540]	; (800748c <controls_irq+0x240>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <controls_irq+0x32>
 8007276:	4b82      	ldr	r3, [pc, #520]	; (8007480 <controls_irq+0x234>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a84      	ldr	r2, [pc, #528]	; (800748c <controls_irq+0x240>)
 800727c:	6013      	str	r3, [r2, #0]
      SW_FUEL1_TIME = TIM_CNT-sw_fuel1_ftime;
 800727e:	4b80      	ldr	r3, [pc, #512]	; (8007480 <controls_irq+0x234>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b82      	ldr	r3, [pc, #520]	; (800748c <controls_irq+0x240>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	4a81      	ldr	r2, [pc, #516]	; (8007490 <controls_irq+0x244>)
 800728a:	6013      	str	r3, [r2, #0]
      SW_FUEL1 = 1;
 800728c:	4b81      	ldr	r3, [pc, #516]	; (8007494 <controls_irq+0x248>)
 800728e:	2201      	movs	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e010      	b.n	80072b6 <controls_irq+0x6a>
    } else sw_fuel1_delay+=TIM_STEP;
 8007294:	4b7c      	ldr	r3, [pc, #496]	; (8007488 <controls_irq+0x23c>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	4b7a      	ldr	r3, [pc, #488]	; (8007488 <controls_irq+0x23c>)
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e009      	b.n	80072b6 <controls_irq+0x6a>
  } else SW_FUEL1 = sw_fuel1_delay = sw_fuel1_ftime = 0;
 80072a2:	4b7a      	ldr	r3, [pc, #488]	; (800748c <controls_irq+0x240>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	4b77      	ldr	r3, [pc, #476]	; (8007488 <controls_irq+0x23c>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	4b76      	ldr	r3, [pc, #472]	; (8007488 <controls_irq+0x23c>)
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	4b78      	ldr	r3, [pc, #480]	; (8007494 <controls_irq+0x248>)
 80072b4:	701a      	strb	r2, [r3, #0]

  //Fuel2
  if(ISSWITCH(SW_CTRL(FUEL2)))
 80072b6:	4b73      	ldr	r3, [pc, #460]	; (8007484 <controls_irq+0x238>)
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d11d      	bne.n	80072fe <controls_irq+0xb2>
  {
    if(sw_fuel2_delay > SW_PRESS_DELAY)
 80072c2:	4b75      	ldr	r3, [pc, #468]	; (8007498 <controls_irq+0x24c>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b0a      	cmp	r3, #10
 80072c8:	d912      	bls.n	80072f0 <controls_irq+0xa4>
    {
      if(sw_fuel2_ftime == 0) sw_fuel2_ftime = TIM_CNT;
 80072ca:	4b74      	ldr	r3, [pc, #464]	; (800749c <controls_irq+0x250>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d103      	bne.n	80072da <controls_irq+0x8e>
 80072d2:	4b6b      	ldr	r3, [pc, #428]	; (8007480 <controls_irq+0x234>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a71      	ldr	r2, [pc, #452]	; (800749c <controls_irq+0x250>)
 80072d8:	6013      	str	r3, [r2, #0]
      SW_FUEL2_TIME = TIM_CNT-sw_fuel2_ftime;
 80072da:	4b69      	ldr	r3, [pc, #420]	; (8007480 <controls_irq+0x234>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4b6f      	ldr	r3, [pc, #444]	; (800749c <controls_irq+0x250>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	4a6e      	ldr	r2, [pc, #440]	; (80074a0 <controls_irq+0x254>)
 80072e6:	6013      	str	r3, [r2, #0]
      SW_FUEL2 = 1;
 80072e8:	4b6e      	ldr	r3, [pc, #440]	; (80074a4 <controls_irq+0x258>)
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e010      	b.n	8007312 <controls_irq+0xc6>
    } else sw_fuel2_delay+=TIM_STEP;
 80072f0:	4b69      	ldr	r3, [pc, #420]	; (8007498 <controls_irq+0x24c>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	3301      	adds	r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	4b67      	ldr	r3, [pc, #412]	; (8007498 <controls_irq+0x24c>)
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e009      	b.n	8007312 <controls_irq+0xc6>
  } else SW_FUEL2 = sw_fuel2_delay = sw_fuel2_ftime = 0;
 80072fe:	4b67      	ldr	r3, [pc, #412]	; (800749c <controls_irq+0x250>)
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	4b64      	ldr	r3, [pc, #400]	; (8007498 <controls_irq+0x24c>)
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	4b63      	ldr	r3, [pc, #396]	; (8007498 <controls_irq+0x24c>)
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	4b65      	ldr	r3, [pc, #404]	; (80074a4 <controls_irq+0x258>)
 8007310:	701a      	strb	r2, [r3, #0]

  //Display
  if(ISSWITCH(SW_CTRL(DISPLAY)))
 8007312:	4b5c      	ldr	r3, [pc, #368]	; (8007484 <controls_irq+0x238>)
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d11d      	bne.n	800735a <controls_irq+0x10e>
  {
    if(sw_display_delay > SW_PRESS_DELAY)
 800731e:	4b62      	ldr	r3, [pc, #392]	; (80074a8 <controls_irq+0x25c>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b0a      	cmp	r3, #10
 8007324:	d912      	bls.n	800734c <controls_irq+0x100>
    {
      if(sw_display_ftime == 0) sw_display_ftime = TIM_CNT;
 8007326:	4b61      	ldr	r3, [pc, #388]	; (80074ac <controls_irq+0x260>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <controls_irq+0xea>
 800732e:	4b54      	ldr	r3, [pc, #336]	; (8007480 <controls_irq+0x234>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a5e      	ldr	r2, [pc, #376]	; (80074ac <controls_irq+0x260>)
 8007334:	6013      	str	r3, [r2, #0]
      SW_DISPLAY_TIME = TIM_CNT-sw_display_ftime;
 8007336:	4b52      	ldr	r3, [pc, #328]	; (8007480 <controls_irq+0x234>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	4b5c      	ldr	r3, [pc, #368]	; (80074ac <controls_irq+0x260>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	4a5b      	ldr	r2, [pc, #364]	; (80074b0 <controls_irq+0x264>)
 8007342:	6013      	str	r3, [r2, #0]
      SW_DISPLAY = 1;
 8007344:	4b5b      	ldr	r3, [pc, #364]	; (80074b4 <controls_irq+0x268>)
 8007346:	2201      	movs	r2, #1
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	e010      	b.n	800736e <controls_irq+0x122>
    } else sw_display_delay+=TIM_STEP;
 800734c:	4b56      	ldr	r3, [pc, #344]	; (80074a8 <controls_irq+0x25c>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	b2da      	uxtb	r2, r3
 8007354:	4b54      	ldr	r3, [pc, #336]	; (80074a8 <controls_irq+0x25c>)
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	e009      	b.n	800736e <controls_irq+0x122>
  } else SW_DISPLAY = sw_display_delay = sw_display_ftime = 0;
 800735a:	4b54      	ldr	r3, [pc, #336]	; (80074ac <controls_irq+0x260>)
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	4b51      	ldr	r3, [pc, #324]	; (80074a8 <controls_irq+0x25c>)
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	4b50      	ldr	r3, [pc, #320]	; (80074a8 <controls_irq+0x25c>)
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	4b52      	ldr	r3, [pc, #328]	; (80074b4 <controls_irq+0x268>)
 800736c:	701a      	strb	r2, [r3, #0]

  if(SW_DISPLAY)
 800736e:	4b51      	ldr	r3, [pc, #324]	; (80074b4 <controls_irq+0x268>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 81b8 	beq.w	80076ea <controls_irq+0x49e>
  {
    //UP
    if(ISPRESS(BUT_CTRL(UP)))
 800737a:	4b4f      	ldr	r3, [pc, #316]	; (80074b8 <controls_irq+0x26c>)
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d035      	beq.n	80073f2 <controls_irq+0x1a6>
    {
      if(but_up_delay > BUT_PRESS_DELAY)
 8007386:	4b4d      	ldr	r3, [pc, #308]	; (80074bc <controls_irq+0x270>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b32      	cmp	r3, #50	; 0x32
 800738c:	d92a      	bls.n	80073e4 <controls_irq+0x198>
      {
        if(but_up_ftime == 0) but_up_ftime = TIM_CNT, BUT_UP_TIME = 0;
 800738e:	4b4c      	ldr	r3, [pc, #304]	; (80074c0 <controls_irq+0x274>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <controls_irq+0x158>
 8007396:	4b3a      	ldr	r3, [pc, #232]	; (8007480 <controls_irq+0x234>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a49      	ldr	r2, [pc, #292]	; (80074c0 <controls_irq+0x274>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4b49      	ldr	r3, [pc, #292]	; (80074c4 <controls_irq+0x278>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
        BUT_UP_TIME += TIM_STEP;
 80073a4:	4b47      	ldr	r3, [pc, #284]	; (80074c4 <controls_irq+0x278>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a46      	ldr	r2, [pc, #280]	; (80074c4 <controls_irq+0x278>)
 80073ac:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80073ae:	4b46      	ldr	r3, [pc, #280]	; (80074c8 <controls_irq+0x27c>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d111      	bne.n	80073dc <controls_irq+0x190>
 80073b8:	4b44      	ldr	r3, [pc, #272]	; (80074cc <controls_irq+0x280>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10c      	bne.n	80073dc <controls_irq+0x190>
 80073c2:	4b43      	ldr	r3, [pc, #268]	; (80074d0 <controls_irq+0x284>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d107      	bne.n	80073dc <controls_irq+0x190>
 80073cc:	4b41      	ldr	r3, [pc, #260]	; (80074d4 <controls_irq+0x288>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <controls_irq+0x190>
          BUT_UP = 1;
 80073d6:	4b40      	ldr	r3, [pc, #256]	; (80074d8 <controls_irq+0x28c>)
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]
        BUT_UP_PRESS = 1;
 80073dc:	4b3c      	ldr	r3, [pc, #240]	; (80074d0 <controls_irq+0x284>)
 80073de:	2201      	movs	r2, #1
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e010      	b.n	8007406 <controls_irq+0x1ba>
      } else but_up_delay+=TIM_STEP;
 80073e4:	4b35      	ldr	r3, [pc, #212]	; (80074bc <controls_irq+0x270>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	4b33      	ldr	r3, [pc, #204]	; (80074bc <controls_irq+0x270>)
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	e009      	b.n	8007406 <controls_irq+0x1ba>
    } else BUT_UP_PRESS = but_up_delay = but_up_ftime = 0;
 80073f2:	4b33      	ldr	r3, [pc, #204]	; (80074c0 <controls_irq+0x274>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	4b30      	ldr	r3, [pc, #192]	; (80074bc <controls_irq+0x270>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	4b2f      	ldr	r3, [pc, #188]	; (80074bc <controls_irq+0x270>)
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	4b33      	ldr	r3, [pc, #204]	; (80074d0 <controls_irq+0x284>)
 8007404:	701a      	strb	r2, [r3, #0]

    //DOWN
    if(ISPRESS(BUT_CTRL(DOWN)))
 8007406:	4b2c      	ldr	r3, [pc, #176]	; (80074b8 <controls_irq+0x26c>)
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740e:	2b00      	cmp	r3, #0
 8007410:	d06c      	beq.n	80074ec <controls_irq+0x2a0>
    {
      if(but_down_delay > BUT_PRESS_DELAY)
 8007412:	4b32      	ldr	r3, [pc, #200]	; (80074dc <controls_irq+0x290>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b32      	cmp	r3, #50	; 0x32
 8007418:	d92a      	bls.n	8007470 <controls_irq+0x224>
      {
        if(but_down_ftime == 0) but_down_ftime = TIM_CNT, BUT_DOWN_TIME = 0;
 800741a:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <controls_irq+0x294>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <controls_irq+0x1e4>
 8007422:	4b17      	ldr	r3, [pc, #92]	; (8007480 <controls_irq+0x234>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2e      	ldr	r2, [pc, #184]	; (80074e0 <controls_irq+0x294>)
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	4b2e      	ldr	r3, [pc, #184]	; (80074e4 <controls_irq+0x298>)
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
        BUT_DOWN_TIME += TIM_STEP;
 8007430:	4b2c      	ldr	r3, [pc, #176]	; (80074e4 <controls_irq+0x298>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	4a2b      	ldr	r2, [pc, #172]	; (80074e4 <controls_irq+0x298>)
 8007438:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 800743a:	4b23      	ldr	r3, [pc, #140]	; (80074c8 <controls_irq+0x27c>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d111      	bne.n	8007468 <controls_irq+0x21c>
 8007444:	4b21      	ldr	r3, [pc, #132]	; (80074cc <controls_irq+0x280>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10c      	bne.n	8007468 <controls_irq+0x21c>
 800744e:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <controls_irq+0x284>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d107      	bne.n	8007468 <controls_irq+0x21c>
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <controls_irq+0x288>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <controls_irq+0x21c>
          BUT_DOWN = 1;
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <controls_irq+0x29c>)
 8007464:	2201      	movs	r2, #1
 8007466:	701a      	strb	r2, [r3, #0]
        BUT_DOWN_PRESS = 1;
 8007468:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <controls_irq+0x288>)
 800746a:	2201      	movs	r2, #1
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	e047      	b.n	8007500 <controls_irq+0x2b4>
      } else but_down_delay+=TIM_STEP;
 8007470:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <controls_irq+0x290>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	b2da      	uxtb	r2, r3
 8007478:	4b18      	ldr	r3, [pc, #96]	; (80074dc <controls_irq+0x290>)
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e040      	b.n	8007500 <controls_irq+0x2b4>
 800747e:	bf00      	nop
 8007480:	200068dc 	.word	0x200068dc
 8007484:	40020800 	.word	0x40020800
 8007488:	20006930 	.word	0x20006930
 800748c:	2000692c 	.word	0x2000692c
 8007490:	20006928 	.word	0x20006928
 8007494:	20006924 	.word	0x20006924
 8007498:	2000693c 	.word	0x2000693c
 800749c:	20006938 	.word	0x20006938
 80074a0:	20006934 	.word	0x20006934
 80074a4:	20006931 	.word	0x20006931
 80074a8:	20006948 	.word	0x20006948
 80074ac:	20006944 	.word	0x20006944
 80074b0:	20006940 	.word	0x20006940
 80074b4:	2000693d 	.word	0x2000693d
 80074b8:	40020400 	.word	0x40020400
 80074bc:	20006908 	.word	0x20006908
 80074c0:	20006914 	.word	0x20006914
 80074c4:	200068f0 	.word	0x200068f0
 80074c8:	200068e0 	.word	0x200068e0
 80074cc:	200068e1 	.word	0x200068e1
 80074d0:	200068e2 	.word	0x200068e2
 80074d4:	200068e3 	.word	0x200068e3
 80074d8:	20006902 	.word	0x20006902
 80074dc:	20006909 	.word	0x20006909
 80074e0:	20006918 	.word	0x20006918
 80074e4:	200068f4 	.word	0x200068f4
 80074e8:	20006903 	.word	0x20006903
    } else BUT_DOWN_PRESS = but_down_delay = but_down_ftime = 0;
 80074ec:	4b95      	ldr	r3, [pc, #596]	; (8007744 <controls_irq+0x4f8>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	4b95      	ldr	r3, [pc, #596]	; (8007748 <controls_irq+0x4fc>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	4b93      	ldr	r3, [pc, #588]	; (8007748 <controls_irq+0x4fc>)
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	4b93      	ldr	r3, [pc, #588]	; (800774c <controls_irq+0x500>)
 80074fe:	701a      	strb	r2, [r3, #0]

    //LEFT
    if(ISPRESS(BUT_CTRL(LEFT)))
 8007500:	4b93      	ldr	r3, [pc, #588]	; (8007750 <controls_irq+0x504>)
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	d035      	beq.n	8007578 <controls_irq+0x32c>
    {
      if(but_left_delay > BUT_PRESS_DELAY)
 800750c:	4b91      	ldr	r3, [pc, #580]	; (8007754 <controls_irq+0x508>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b32      	cmp	r3, #50	; 0x32
 8007512:	d92a      	bls.n	800756a <controls_irq+0x31e>
      {
        if(but_left_ftime == 0) but_left_ftime = TIM_CNT, BUT_LEFT_TIME = 0;
 8007514:	4b90      	ldr	r3, [pc, #576]	; (8007758 <controls_irq+0x50c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d106      	bne.n	800752a <controls_irq+0x2de>
 800751c:	4b8f      	ldr	r3, [pc, #572]	; (800775c <controls_irq+0x510>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a8d      	ldr	r2, [pc, #564]	; (8007758 <controls_irq+0x50c>)
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	4b8e      	ldr	r3, [pc, #568]	; (8007760 <controls_irq+0x514>)
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
        BUT_LEFT_TIME += TIM_STEP;
 800752a:	4b8d      	ldr	r3, [pc, #564]	; (8007760 <controls_irq+0x514>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	4a8b      	ldr	r2, [pc, #556]	; (8007760 <controls_irq+0x514>)
 8007532:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8007534:	4b8b      	ldr	r3, [pc, #556]	; (8007764 <controls_irq+0x518>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d111      	bne.n	8007562 <controls_irq+0x316>
 800753e:	4b8a      	ldr	r3, [pc, #552]	; (8007768 <controls_irq+0x51c>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10c      	bne.n	8007562 <controls_irq+0x316>
 8007548:	4b88      	ldr	r3, [pc, #544]	; (800776c <controls_irq+0x520>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d107      	bne.n	8007562 <controls_irq+0x316>
 8007552:	4b7e      	ldr	r3, [pc, #504]	; (800774c <controls_irq+0x500>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <controls_irq+0x316>
          BUT_LEFT = 1;
 800755c:	4b84      	ldr	r3, [pc, #528]	; (8007770 <controls_irq+0x524>)
 800755e:	2201      	movs	r2, #1
 8007560:	701a      	strb	r2, [r3, #0]
        BUT_LEFT_PRESS = 1;
 8007562:	4b80      	ldr	r3, [pc, #512]	; (8007764 <controls_irq+0x518>)
 8007564:	2201      	movs	r2, #1
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e010      	b.n	800758c <controls_irq+0x340>
      } else but_left_delay+=TIM_STEP;
 800756a:	4b7a      	ldr	r3, [pc, #488]	; (8007754 <controls_irq+0x508>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	b2da      	uxtb	r2, r3
 8007572:	4b78      	ldr	r3, [pc, #480]	; (8007754 <controls_irq+0x508>)
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	e009      	b.n	800758c <controls_irq+0x340>
    } else BUT_LEFT_PRESS = but_left_delay = but_left_ftime = 0;
 8007578:	4b77      	ldr	r3, [pc, #476]	; (8007758 <controls_irq+0x50c>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	4b75      	ldr	r3, [pc, #468]	; (8007754 <controls_irq+0x508>)
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	4b73      	ldr	r3, [pc, #460]	; (8007754 <controls_irq+0x508>)
 8007586:	781a      	ldrb	r2, [r3, #0]
 8007588:	4b76      	ldr	r3, [pc, #472]	; (8007764 <controls_irq+0x518>)
 800758a:	701a      	strb	r2, [r3, #0]

    //RIGHT
    if(ISPRESS(BUT_CTRL(RIGHT)))
 800758c:	4b70      	ldr	r3, [pc, #448]	; (8007750 <controls_irq+0x504>)
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d035      	beq.n	8007604 <controls_irq+0x3b8>
    {
      if(but_right_delay > BUT_PRESS_DELAY)
 8007598:	4b76      	ldr	r3, [pc, #472]	; (8007774 <controls_irq+0x528>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b32      	cmp	r3, #50	; 0x32
 800759e:	d92a      	bls.n	80075f6 <controls_irq+0x3aa>
      {
        if(but_right_ftime == 0) but_right_ftime = TIM_CNT, BUT_RIGHT_TIME = 0;
 80075a0:	4b75      	ldr	r3, [pc, #468]	; (8007778 <controls_irq+0x52c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <controls_irq+0x36a>
 80075a8:	4b6c      	ldr	r3, [pc, #432]	; (800775c <controls_irq+0x510>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a72      	ldr	r2, [pc, #456]	; (8007778 <controls_irq+0x52c>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	4b72      	ldr	r3, [pc, #456]	; (800777c <controls_irq+0x530>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
        BUT_RIGHT_TIME += TIM_STEP;
 80075b6:	4b71      	ldr	r3, [pc, #452]	; (800777c <controls_irq+0x530>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a6f      	ldr	r2, [pc, #444]	; (800777c <controls_irq+0x530>)
 80075be:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80075c0:	4b68      	ldr	r3, [pc, #416]	; (8007764 <controls_irq+0x518>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d111      	bne.n	80075ee <controls_irq+0x3a2>
 80075ca:	4b67      	ldr	r3, [pc, #412]	; (8007768 <controls_irq+0x51c>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10c      	bne.n	80075ee <controls_irq+0x3a2>
 80075d4:	4b65      	ldr	r3, [pc, #404]	; (800776c <controls_irq+0x520>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d107      	bne.n	80075ee <controls_irq+0x3a2>
 80075de:	4b5b      	ldr	r3, [pc, #364]	; (800774c <controls_irq+0x500>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <controls_irq+0x3a2>
          BUT_RIGHT = 1;
 80075e8:	4b65      	ldr	r3, [pc, #404]	; (8007780 <controls_irq+0x534>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	701a      	strb	r2, [r3, #0]
        BUT_RIGHT_PRESS = 1;
 80075ee:	4b5e      	ldr	r3, [pc, #376]	; (8007768 <controls_irq+0x51c>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	701a      	strb	r2, [r3, #0]
 80075f4:	e010      	b.n	8007618 <controls_irq+0x3cc>
      } else but_right_delay+=TIM_STEP;
 80075f6:	4b5f      	ldr	r3, [pc, #380]	; (8007774 <controls_irq+0x528>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	4b5d      	ldr	r3, [pc, #372]	; (8007774 <controls_irq+0x528>)
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	e009      	b.n	8007618 <controls_irq+0x3cc>
    } else BUT_RIGHT_PRESS = but_right_delay = but_right_ftime = 0;
 8007604:	4b5c      	ldr	r3, [pc, #368]	; (8007778 <controls_irq+0x52c>)
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	4b5a      	ldr	r3, [pc, #360]	; (8007774 <controls_irq+0x528>)
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	4b58      	ldr	r3, [pc, #352]	; (8007774 <controls_irq+0x528>)
 8007612:	781a      	ldrb	r2, [r3, #0]
 8007614:	4b54      	ldr	r3, [pc, #336]	; (8007768 <controls_irq+0x51c>)
 8007616:	701a      	strb	r2, [r3, #0]

    //CANCEL
    if(ISPRESS(BUT_CTRL(CANCEL)))
 8007618:	4b5a      	ldr	r3, [pc, #360]	; (8007784 <controls_irq+0x538>)
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d021      	beq.n	8007668 <controls_irq+0x41c>
    {
      if(but_cancel_delay > BUT_PRESS_DELAY)
 8007624:	4b58      	ldr	r3, [pc, #352]	; (8007788 <controls_irq+0x53c>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b32      	cmp	r3, #50	; 0x32
 800762a:	d916      	bls.n	800765a <controls_irq+0x40e>
      {
        if(but_cancel_ftime == 0) but_cancel_ftime = TIM_CNT, BUT_CANCEL_TIME = 0,BUT_CANCEL = 1;
 800762c:	4b57      	ldr	r3, [pc, #348]	; (800778c <controls_irq+0x540>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <controls_irq+0x3fc>
 8007634:	4b49      	ldr	r3, [pc, #292]	; (800775c <controls_irq+0x510>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a54      	ldr	r2, [pc, #336]	; (800778c <controls_irq+0x540>)
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4b54      	ldr	r3, [pc, #336]	; (8007790 <controls_irq+0x544>)
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	4b54      	ldr	r3, [pc, #336]	; (8007794 <controls_irq+0x548>)
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]
        BUT_CANCEL_TIME += TIM_STEP;
 8007648:	4b51      	ldr	r3, [pc, #324]	; (8007790 <controls_irq+0x544>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a50      	ldr	r2, [pc, #320]	; (8007790 <controls_irq+0x544>)
 8007650:	6013      	str	r3, [r2, #0]

        BUT_CANCEL_PRESS = 1;
 8007652:	4b51      	ldr	r3, [pc, #324]	; (8007798 <controls_irq+0x54c>)
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e010      	b.n	800767c <controls_irq+0x430>
      } else but_cancel_delay+=TIM_STEP;
 800765a:	4b4b      	ldr	r3, [pc, #300]	; (8007788 <controls_irq+0x53c>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	3301      	adds	r3, #1
 8007660:	b2da      	uxtb	r2, r3
 8007662:	4b49      	ldr	r3, [pc, #292]	; (8007788 <controls_irq+0x53c>)
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e009      	b.n	800767c <controls_irq+0x430>
    } else BUT_CANCEL_PRESS = but_cancel_delay = but_cancel_ftime = 0;
 8007668:	4b48      	ldr	r3, [pc, #288]	; (800778c <controls_irq+0x540>)
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	4b46      	ldr	r3, [pc, #280]	; (8007788 <controls_irq+0x53c>)
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	4b44      	ldr	r3, [pc, #272]	; (8007788 <controls_irq+0x53c>)
 8007676:	781a      	ldrb	r2, [r3, #0]
 8007678:	4b47      	ldr	r3, [pc, #284]	; (8007798 <controls_irq+0x54c>)
 800767a:	701a      	strb	r2, [r3, #0]

    //ENTER
    if(ISPRESS(BUT_CTRL(ENTER)))
 800767c:	4b47      	ldr	r3, [pc, #284]	; (800779c <controls_irq+0x550>)
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d021      	beq.n	80076cc <controls_irq+0x480>
    {
      if(but_enter_delay > BUT_PRESS_DELAY)
 8007688:	4b45      	ldr	r3, [pc, #276]	; (80077a0 <controls_irq+0x554>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b32      	cmp	r3, #50	; 0x32
 800768e:	d916      	bls.n	80076be <controls_irq+0x472>
      {
        if(but_enter_ftime == 0) but_enter_ftime = TIM_CNT, BUT_ENTER_TIME = 0,BUT_ENTER = 1;
 8007690:	4b44      	ldr	r3, [pc, #272]	; (80077a4 <controls_irq+0x558>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d109      	bne.n	80076ac <controls_irq+0x460>
 8007698:	4b30      	ldr	r3, [pc, #192]	; (800775c <controls_irq+0x510>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a41      	ldr	r2, [pc, #260]	; (80077a4 <controls_irq+0x558>)
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	4b41      	ldr	r3, [pc, #260]	; (80077a8 <controls_irq+0x55c>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	4b41      	ldr	r3, [pc, #260]	; (80077ac <controls_irq+0x560>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
        BUT_ENTER_TIME += TIM_STEP;
 80076ac:	4b3e      	ldr	r3, [pc, #248]	; (80077a8 <controls_irq+0x55c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	4a3d      	ldr	r2, [pc, #244]	; (80077a8 <controls_irq+0x55c>)
 80076b4:	6013      	str	r3, [r2, #0]
        BUT_ENTER_PRESS = 1;
 80076b6:	4b3e      	ldr	r3, [pc, #248]	; (80077b0 <controls_irq+0x564>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	e010      	b.n	80076e0 <controls_irq+0x494>
      } else but_enter_delay+=TIM_STEP;
 80076be:	4b38      	ldr	r3, [pc, #224]	; (80077a0 <controls_irq+0x554>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <controls_irq+0x554>)
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	e009      	b.n	80076e0 <controls_irq+0x494>
    } else BUT_ENTER_PRESS = but_enter_delay = but_enter_ftime = 0;
 80076cc:	4b35      	ldr	r3, [pc, #212]	; (80077a4 <controls_irq+0x558>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	4b33      	ldr	r3, [pc, #204]	; (80077a0 <controls_irq+0x554>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	4b31      	ldr	r3, [pc, #196]	; (80077a0 <controls_irq+0x554>)
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	4b34      	ldr	r3, [pc, #208]	; (80077b0 <controls_irq+0x564>)
 80076de:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 255;
 80076e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076e4:	22ff      	movs	r2, #255	; 0xff
 80076e6:	63da      	str	r2, [r3, #60]	; 0x3c
    BUT_RIGHT_PRESS = 0;
    BUT_UP_PRESS = 0;
    BUT_DOWN_PRESS = 0;
    TIM2->CCR3 = 0;
  }
}
 80076e8:	e027      	b.n	800773a <controls_irq+0x4ee>
    BUT_CANCEL = 0;
 80076ea:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <controls_irq+0x548>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
    BUT_ENTER = 0;
 80076f0:	4b2e      	ldr	r3, [pc, #184]	; (80077ac <controls_irq+0x560>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
    BUT_LEFT = 0;
 80076f6:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <controls_irq+0x524>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT = 0;
 80076fc:	4b20      	ldr	r3, [pc, #128]	; (8007780 <controls_irq+0x534>)
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
    BUT_UP = 0;
 8007702:	4b2c      	ldr	r3, [pc, #176]	; (80077b4 <controls_irq+0x568>)
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
    BUT_DOWN = 0;
 8007708:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <controls_irq+0x56c>)
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
    BUT_CANCEL_PRESS = 0;
 800770e:	4b22      	ldr	r3, [pc, #136]	; (8007798 <controls_irq+0x54c>)
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
    BUT_ENTER_PRESS = 0;
 8007714:	4b26      	ldr	r3, [pc, #152]	; (80077b0 <controls_irq+0x564>)
 8007716:	2200      	movs	r2, #0
 8007718:	701a      	strb	r2, [r3, #0]
    BUT_LEFT_PRESS = 0;
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <controls_irq+0x518>)
 800771c:	2200      	movs	r2, #0
 800771e:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT_PRESS = 0;
 8007720:	4b11      	ldr	r3, [pc, #68]	; (8007768 <controls_irq+0x51c>)
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
    BUT_UP_PRESS = 0;
 8007726:	4b11      	ldr	r3, [pc, #68]	; (800776c <controls_irq+0x520>)
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
    BUT_DOWN_PRESS = 0;
 800772c:	4b07      	ldr	r3, [pc, #28]	; (800774c <controls_irq+0x500>)
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 0;
 8007732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007736:	2200      	movs	r2, #0
 8007738:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800773a:	bf00      	nop
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20006918 	.word	0x20006918
 8007748:	20006909 	.word	0x20006909
 800774c:	200068e3 	.word	0x200068e3
 8007750:	40020400 	.word	0x40020400
 8007754:	20006906 	.word	0x20006906
 8007758:	2000690c 	.word	0x2000690c
 800775c:	200068dc 	.word	0x200068dc
 8007760:	200068e8 	.word	0x200068e8
 8007764:	200068e0 	.word	0x200068e0
 8007768:	200068e1 	.word	0x200068e1
 800776c:	200068e2 	.word	0x200068e2
 8007770:	20006900 	.word	0x20006900
 8007774:	20006907 	.word	0x20006907
 8007778:	20006910 	.word	0x20006910
 800777c:	200068ec 	.word	0x200068ec
 8007780:	20006901 	.word	0x20006901
 8007784:	40020800 	.word	0x40020800
 8007788:	2000690b 	.word	0x2000690b
 800778c:	20006920 	.word	0x20006920
 8007790:	200068fc 	.word	0x200068fc
 8007794:	20006905 	.word	0x20006905
 8007798:	200068e5 	.word	0x200068e5
 800779c:	40020c00 	.word	0x40020c00
 80077a0:	2000690a 	.word	0x2000690a
 80077a4:	2000691c 	.word	0x2000691c
 80077a8:	200068f8 	.word	0x200068f8
 80077ac:	20006904 	.word	0x20006904
 80077b0:	200068e4 	.word	0x200068e4
 80077b4:	20006902 	.word	0x20006902
 80077b8:	20006903 	.word	0x20006903

080077bc <CRC16_RegisterHardware>:
  .cb_size = 0
};


void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  if(mutexCrc == NULL)
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <CRC16_RegisterHardware+0x2c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <CRC16_RegisterHardware+0x1c>
    mutexCrc = osMutexNew(&mutexAttrs);
 80077cc:	4807      	ldr	r0, [pc, #28]	; (80077ec <CRC16_RegisterHardware+0x30>)
 80077ce:	f005 fe63 	bl	800d498 <osMutexNew>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <CRC16_RegisterHardware+0x2c>)
 80077d6:	601a      	str	r2, [r3, #0]
  handle_crc = hcrc;
 80077d8:	4a05      	ldr	r2, [pc, #20]	; (80077f0 <CRC16_RegisterHardware+0x34>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6013      	str	r3, [r2, #0]
}
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20006950 	.word	0x20006950
 80077ec:	08015180 	.word	0x08015180
 80077f0:	2000694c 	.word	0x2000694c

080077f4 <CRC16_Generate>:

inline uint16_t CRC16_Generate(uint8_t * input, uint32_t size)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <CRC16_Generate+0x64>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d105      	bne.n	8007816 <CRC16_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 800780a:	4814      	ldr	r0, [pc, #80]	; (800785c <CRC16_Generate+0x68>)
 800780c:	f005 fe44 	bl	800d498 <osMutexNew>
 8007810:	4602      	mov	r2, r0
 8007812:	4b11      	ldr	r3, [pc, #68]	; (8007858 <CRC16_Generate+0x64>)
 8007814:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <CRC16_Generate+0x6c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d017      	beq.n	800784e <CRC16_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 800781e:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <CRC16_Generate+0x64>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f005 fe79 	bl	800d51c <osMutexAcquire>
 800782a:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10d      	bne.n	800784e <CRC16_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <CRC16_Generate+0x6c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4618      	mov	r0, r3
 800783c:	f003 fd60 	bl	800b300 <HAL_CRC_Calculate>
 8007840:	4603      	mov	r3, r0
 8007842:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 8007844:	4b04      	ldr	r3, [pc, #16]	; (8007858 <CRC16_Generate+0x64>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f005 fe97 	bl	800d57c <osMutexRelease>
    }
  }
  return result;
 800784e:	89fb      	ldrh	r3, [r7, #14]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20006950 	.word	0x20006950
 800785c:	08015180 	.word	0x08015180
 8007860:	2000694c 	.word	0x2000694c

08007864 <CRC8_Generate>:

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 800786e:	2300      	movs	r3, #0
 8007870:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 8007872:	4b19      	ldr	r3, [pc, #100]	; (80078d8 <CRC8_Generate+0x74>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <CRC8_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 800787a:	4818      	ldr	r0, [pc, #96]	; (80078dc <CRC8_Generate+0x78>)
 800787c:	f005 fe0c 	bl	800d498 <osMutexNew>
 8007880:	4602      	mov	r2, r0
 8007882:	4b15      	ldr	r3, [pc, #84]	; (80078d8 <CRC8_Generate+0x74>)
 8007884:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 8007886:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <CRC8_Generate+0x7c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d017      	beq.n	80078be <CRC8_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <CRC8_Generate+0x74>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f005 fe41 	bl	800d51c <osMutexAcquire>
 800789a:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10d      	bne.n	80078be <CRC8_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <CRC8_Generate+0x7c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f003 fd28 	bl	800b300 <HAL_CRC_Calculate>
 80078b0:	4603      	mov	r3, r0
 80078b2:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 80078b4:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <CRC8_Generate+0x74>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f005 fe5f 	bl	800d57c <osMutexRelease>
    }
  }
  return (result & 0xFF) ^ (result >> 8);
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	b25a      	sxtb	r2, r3
 80078c2:	89fb      	ldrh	r3, [r7, #14]
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	b25b      	sxtb	r3, r3
 80078ca:	4053      	eors	r3, r2
 80078cc:	b25b      	sxtb	r3, r3
 80078ce:	b2db      	uxtb	r3, r3
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20006950 	.word	0x20006950
 80078dc:	08015180 	.word	0x08015180
 80078e0:	2000694c 	.word	0x2000694c

080078e4 <DelayInit>:
volatile uint32_t DelStart[COUNTERS];
static volatile uint32_t divider = 0;
static volatile uint32_t prescaller = 0;

void DelayInit(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 80078ea:	4b25      	ldr	r3, [pc, #148]	; (8007980 <DelayInit+0x9c>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	4a24      	ldr	r2, [pc, #144]	; (8007980 <DelayInit+0x9c>)
 80078f0:	f043 0308 	orr.w	r3, r3, #8
 80078f4:	6413      	str	r3, [r2, #64]	; 0x40
 80078f6:	4b22      	ldr	r3, [pc, #136]	; (8007980 <DelayInit+0x9c>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 8007902:	4b20      	ldr	r3, [pc, #128]	; (8007984 <DelayInit+0xa0>)
 8007904:	4a20      	ldr	r2, [pc, #128]	; (8007988 <DelayInit+0xa4>)
 8007906:	601a      	str	r2, [r3, #0]
    divider = 4;
 8007908:	4b20      	ldr	r3, [pc, #128]	; (800798c <DelayInit+0xa8>)
 800790a:	2204      	movs	r2, #4
 800790c:	601a      	str	r2, [r3, #0]

    prescaller = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000) / divider;
 800790e:	f004 fa81 	bl	800be14 <HAL_RCC_GetPCLK1Freq>
 8007912:	4603      	mov	r3, r0
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <DelayInit+0xac>)
 8007918:	fba2 2303 	umull	r2, r3, r2, r3
 800791c:	0c9a      	lsrs	r2, r3, #18
 800791e:	4b1b      	ldr	r3, [pc, #108]	; (800798c <DelayInit+0xa8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	fbb2 f3f3 	udiv	r3, r2, r3
 8007926:	4a1b      	ldr	r2, [pc, #108]	; (8007994 <DelayInit+0xb0>)
 8007928:	6013      	str	r3, [r2, #0]
    htim_delay.Init.Prescaler = divider - 1;
 800792a:	4b18      	ldr	r3, [pc, #96]	; (800798c <DelayInit+0xa8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3b01      	subs	r3, #1
 8007930:	4a14      	ldr	r2, [pc, #80]	; (8007984 <DelayInit+0xa0>)
 8007932:	6053      	str	r3, [r2, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007934:	4b13      	ldr	r3, [pc, #76]	; (8007984 <DelayInit+0xa0>)
 8007936:	2200      	movs	r2, #0
 8007938:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = DelayMask;
 800793a:	4b12      	ldr	r3, [pc, #72]	; (8007984 <DelayInit+0xa0>)
 800793c:	f06f 4278 	mvn.w	r2, #4160749568	; 0xf8000000
 8007940:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007942:	4b10      	ldr	r3, [pc, #64]	; (8007984 <DelayInit+0xa0>)
 8007944:	2200      	movs	r2, #0
 8007946:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 8007948:	480e      	ldr	r0, [pc, #56]	; (8007984 <DelayInit+0xa0>)
 800794a:	f004 fedf 	bl	800c70c <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800794e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007952:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 8007954:	f107 0310 	add.w	r3, r7, #16
 8007958:	4619      	mov	r1, r3
 800795a:	480a      	ldr	r0, [pc, #40]	; (8007984 <DelayInit+0xa0>)
 800795c:	f004 fff6 	bl	800c94c <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007960:	2300      	movs	r3, #0
 8007962:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 8007968:	1d3b      	adds	r3, r7, #4
 800796a:	4619      	mov	r1, r3
 800796c:	4805      	ldr	r0, [pc, #20]	; (8007984 <DelayInit+0xa0>)
 800796e:	f005 f8b5 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8007972:	4804      	ldr	r0, [pc, #16]	; (8007984 <DelayInit+0xa0>)
 8007974:	f004 fd80 	bl	800c478 <HAL_TIM_Base_Start>

}
 8007978:	bf00      	nop
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40023800 	.word	0x40023800
 8007984:	20006954 	.word	0x20006954
 8007988:	40000c00 	.word	0x40000c00
 800798c:	20006994 	.word	0x20006994
 8007990:	431bde83 	.word	0x431bde83
 8007994:	20006998 	.word	0x20006998

08007998 <DelayUs>:
  uint32_t tickstart = Delay_Tick * 1000;
  while(DelayDiff(Delay_Tick * 1000, tickstart) < val) {}
}

inline void DelayUs(uint32_t val)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = Delay_Tick;
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <DelayUs+0x2c>)
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	60fb      	str	r3, [r7, #12]
  while(DelayDiff(Delay_Tick, tickstart) < val) {}
 80079a6:	bf00      	nop
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <DelayUs+0x2c>)
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	68f9      	ldr	r1, [r7, #12]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f81a 	bl	80079e8 <DelayDiff>
 80079b4:	4602      	mov	r2, r0
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d8f5      	bhi.n	80079a8 <DelayUs+0x10>
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40000c00 	.word	0x40000c00

080079c8 <DelayMs>:
 
inline void DelayMs(uint32_t val)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  DelayUs(val * 1000);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079d6:	fb02 f303 	mul.w	r3, r2, r3
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff ffdc 	bl	8007998 <DelayUs>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <DelayDiff>:

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	if(a >= b)
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d307      	bcc.n	8007a0a <DelayDiff+0x22>
		return (a - b) / prescaller;
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <DelayDiff+0x44>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a08:	e009      	b.n	8007a1e <DelayDiff+0x36>
	return ((DelayMask - b) + a) / prescaller;
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8007a14:	4413      	add	r3, r2
 8007a16:	4a05      	ldr	r2, [pc, #20]	; (8007a2c <DelayDiff+0x44>)
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	20006998 	.word	0x20006998

08007a30 <lcd_data>:
#include <stdlib.h>

uint8_t lcd_buffer[8][128];

static inline void lcd_data(uint8_t value)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8007a3a:	79fa      	ldrb	r2, [r7, #7]
 8007a3c:	79fb      	ldrb	r3, [r7, #7]
 8007a3e:	43db      	mvns	r3, r3
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	041b      	lsls	r3, r3, #16
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	4815      	ldr	r0, [pc, #84]	; (8007aa4 <lcd_data+0x74>)
 8007a4e:	f003 ff1b 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8007a52:	2200      	movs	r2, #0
 8007a54:	2104      	movs	r1, #4
 8007a56:	4814      	ldr	r0, [pc, #80]	; (8007aa8 <lcd_data+0x78>)
 8007a58:	f003 ff16 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	2102      	movs	r1, #2
 8007a60:	4811      	ldr	r0, [pc, #68]	; (8007aa8 <lcd_data+0x78>)
 8007a62:	f003 ff11 	bl	800b888 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8007a66:	4a11      	ldr	r2, [pc, #68]	; (8007aac <lcd_data+0x7c>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8007a6c:	2002      	movs	r0, #2
 8007a6e:	f7ff ff93 	bl	8007998 <DelayUs>
  taskENTER_CRITICAL();
 8007a72:	f007 fa77 	bl	800ef64 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8007a76:	2201      	movs	r2, #1
 8007a78:	2102      	movs	r1, #2
 8007a7a:	480a      	ldr	r0, [pc, #40]	; (8007aa4 <lcd_data+0x74>)
 8007a7c:	f003 ff04 	bl	800b888 <HAL_GPIO_WritePin>
  DelayUs(2);
 8007a80:	2002      	movs	r0, #2
 8007a82:	f7ff ff89 	bl	8007998 <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8007a86:	2200      	movs	r2, #0
 8007a88:	2102      	movs	r1, #2
 8007a8a:	4806      	ldr	r0, [pc, #24]	; (8007aa4 <lcd_data+0x74>)
 8007a8c:	f003 fefc 	bl	800b888 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8007a90:	f007 fa8e 	bl	800efb0 <vPortExitCritical>
  DelayUs(1);
 8007a94:	2001      	movs	r0, #1
 8007a96:	f7ff ff7f 	bl	8007998 <DelayUs>
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	40020400 	.word	0x40020400
 8007aa8:	40020800 	.word	0x40020800
 8007aac:	40020000 	.word	0x40020000

08007ab0 <lcd_command>:

static inline void lcd_command(uint8_t value)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 8007aba:	79fa      	ldrb	r2, [r7, #7]
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2102      	movs	r1, #2
 8007acc:	4815      	ldr	r0, [pc, #84]	; (8007b24 <lcd_command+0x74>)
 8007ace:	f003 fedb 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2104      	movs	r1, #4
 8007ad6:	4814      	ldr	r0, [pc, #80]	; (8007b28 <lcd_command+0x78>)
 8007ad8:	f003 fed6 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8007adc:	2200      	movs	r2, #0
 8007ade:	2102      	movs	r1, #2
 8007ae0:	4811      	ldr	r0, [pc, #68]	; (8007b28 <lcd_command+0x78>)
 8007ae2:	f003 fed1 	bl	800b888 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8007ae6:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <lcd_command+0x7c>)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 8007aec:	2002      	movs	r0, #2
 8007aee:	f7ff ff53 	bl	8007998 <DelayUs>
  taskENTER_CRITICAL();
 8007af2:	f007 fa37 	bl	800ef64 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8007af6:	2201      	movs	r2, #1
 8007af8:	2102      	movs	r1, #2
 8007afa:	480a      	ldr	r0, [pc, #40]	; (8007b24 <lcd_command+0x74>)
 8007afc:	f003 fec4 	bl	800b888 <HAL_GPIO_WritePin>
  DelayUs(2);
 8007b00:	2002      	movs	r0, #2
 8007b02:	f7ff ff49 	bl	8007998 <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8007b06:	2200      	movs	r2, #0
 8007b08:	2102      	movs	r1, #2
 8007b0a:	4806      	ldr	r0, [pc, #24]	; (8007b24 <lcd_command+0x74>)
 8007b0c:	f003 febc 	bl	800b888 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8007b10:	f007 fa4e 	bl	800efb0 <vPortExitCritical>
  DelayUs(1);
 8007b14:	2001      	movs	r0, #1
 8007b16:	f7ff ff3f 	bl	8007998 <DelayUs>
}
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40020400 	.word	0x40020400
 8007b28:	40020800 	.word	0x40020800
 8007b2c:	40020000 	.word	0x40020000

08007b30 <lcd_update>:

inline void lcd_update(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0

  for(int j = 0; j < 8; j++)
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e050      	b.n	8007bde <lcd_update+0xae>
  {
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	2110      	movs	r1, #16
 8007b40:	482a      	ldr	r0, [pc, #168]	; (8007bec <lcd_update+0xbc>)
 8007b42:	f003 fea1 	bl	800b888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8007b46:	2201      	movs	r2, #1
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4829      	ldr	r0, [pc, #164]	; (8007bf0 <lcd_update+0xc0>)
 8007b4c:	f003 fe9c 	bl	800b888 <HAL_GPIO_WritePin>

    lcd_command(0x40);
 8007b50:	2040      	movs	r0, #64	; 0x40
 8007b52:	f7ff ffad 	bl	8007ab0 <lcd_command>
    lcd_command(0xB8 + j);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	3b48      	subs	r3, #72	; 0x48
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff ffa6 	bl	8007ab0 <lcd_command>

    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8007b64:	2201      	movs	r2, #1
 8007b66:	2110      	movs	r1, #16
 8007b68:	4820      	ldr	r0, [pc, #128]	; (8007bec <lcd_update+0xbc>)
 8007b6a:	f003 fe8d 	bl	800b888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2101      	movs	r1, #1
 8007b72:	481f      	ldr	r0, [pc, #124]	; (8007bf0 <lcd_update+0xc0>)
 8007b74:	f003 fe88 	bl	800b888 <HAL_GPIO_WritePin>
    for(int i = 0; i < 64; i++)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60bb      	str	r3, [r7, #8]
 8007b7c:	e00c      	b.n	8007b98 <lcd_update+0x68>
    {
      lcd_data(lcd_buffer[j][i]);
 8007b7e:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <lcd_update+0xc4>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	01db      	lsls	r3, r3, #7
 8007b84:	441a      	add	r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	4413      	add	r3, r2
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff ff4f 	bl	8007a30 <lcd_data>
    for(int i = 0; i < 64; i++)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60bb      	str	r3, [r7, #8]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b9c:	ddef      	ble.n	8007b7e <lcd_update+0x4e>
    }
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2110      	movs	r1, #16
 8007ba2:	4812      	ldr	r0, [pc, #72]	; (8007bec <lcd_update+0xbc>)
 8007ba4:	f003 fe70 	bl	800b888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8007ba8:	2201      	movs	r2, #1
 8007baa:	2101      	movs	r1, #1
 8007bac:	4810      	ldr	r0, [pc, #64]	; (8007bf0 <lcd_update+0xc0>)
 8007bae:	f003 fe6b 	bl	800b888 <HAL_GPIO_WritePin>
    for(int i = 64; i < 128; i++)
 8007bb2:	2340      	movs	r3, #64	; 0x40
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	e00c      	b.n	8007bd2 <lcd_update+0xa2>
    {
      lcd_data(lcd_buffer[j][i]);
 8007bb8:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <lcd_update+0xc4>)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	01db      	lsls	r3, r3, #7
 8007bbe:	441a      	add	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff ff32 	bl	8007a30 <lcd_data>
    for(int i = 64; i < 128; i++)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd6:	ddef      	ble.n	8007bb8 <lcd_update+0x88>
  for(int j = 0; j < 8; j++)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b07      	cmp	r3, #7
 8007be2:	ddab      	ble.n	8007b3c <lcd_update+0xc>
    }
  }
}
 8007be4:	bf00      	nop
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	40020800 	.word	0x40020800
 8007bf0:	40020400 	.word	0x40020400
 8007bf4:	2000ff0c 	.word	0x2000ff0c

08007bf8 <lcd_reset>:

inline void lcd_reset(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	2110      	movs	r1, #16
 8007c00:	480f      	ldr	r0, [pc, #60]	; (8007c40 <lcd_reset+0x48>)
 8007c02:	f003 fe41 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8007c06:	2201      	movs	r2, #1
 8007c08:	2101      	movs	r1, #1
 8007c0a:	480e      	ldr	r0, [pc, #56]	; (8007c44 <lcd_reset+0x4c>)
 8007c0c:	f003 fe3c 	bl	800b888 <HAL_GPIO_WritePin>
  lcd_command(0x3F); //Display ON
 8007c10:	203f      	movs	r0, #63	; 0x3f
 8007c12:	f7ff ff4d 	bl	8007ab0 <lcd_command>
  lcd_command(0x40); //Set Y address = 0
 8007c16:	2040      	movs	r0, #64	; 0x40
 8007c18:	f7ff ff4a 	bl	8007ab0 <lcd_command>
  lcd_command(0xB8); //Set X page = 0
 8007c1c:	20b8      	movs	r0, #184	; 0xb8
 8007c1e:	f7ff ff47 	bl	8007ab0 <lcd_command>
  lcd_command(0xC0); //Set Z scrolling = 0
 8007c22:	20c0      	movs	r0, #192	; 0xc0
 8007c24:	f7ff ff44 	bl	8007ab0 <lcd_command>
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2110      	movs	r1, #16
 8007c2c:	4804      	ldr	r0, [pc, #16]	; (8007c40 <lcd_reset+0x48>)
 8007c2e:	f003 fe2b 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8007c32:	2200      	movs	r2, #0
 8007c34:	2101      	movs	r1, #1
 8007c36:	4803      	ldr	r0, [pc, #12]	; (8007c44 <lcd_reset+0x4c>)
 8007c38:	f003 fe26 	bl	800b888 <HAL_GPIO_WritePin>
}
 8007c3c:	bf00      	nop
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	40020800 	.word	0x40020800
 8007c44:	40020400 	.word	0x40020400

08007c48 <lcd_clear>:

inline void lcd_clear(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
  for(int i = 0; i < 8; i++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	607b      	str	r3, [r7, #4]
 8007c52:	e013      	b.n	8007c7c <lcd_clear+0x34>
    for(int j = 0; j < 128; j++)
 8007c54:	2300      	movs	r3, #0
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	e00a      	b.n	8007c70 <lcd_clear+0x28>
      lcd_buffer[i][j] = 0;
 8007c5a:	4a0d      	ldr	r2, [pc, #52]	; (8007c90 <lcd_clear+0x48>)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	01db      	lsls	r3, r3, #7
 8007c60:	441a      	add	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	4413      	add	r3, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 128; j++)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b7f      	cmp	r3, #127	; 0x7f
 8007c74:	ddf1      	ble.n	8007c5a <lcd_clear+0x12>
  for(int i = 0; i < 8; i++)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b07      	cmp	r3, #7
 8007c80:	dde8      	ble.n	8007c54 <lcd_clear+0xc>
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	2000ff0c 	.word	0x2000ff0c

08007c94 <lcd_drawpoint>:

inline void lcd_drawpoint(uint8_t x, uint8_t y)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	460a      	mov	r2, r1
 8007c9e:	71fb      	strb	r3, [r7, #7]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8007ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	db1f      	blt.n	8007cec <lcd_drawpoint+0x58>
 8007cac:	79bb      	ldrb	r3, [r7, #6]
 8007cae:	2b3f      	cmp	r3, #63	; 0x3f
 8007cb0:	d81c      	bhi.n	8007cec <lcd_drawpoint+0x58>
    lcd_buffer[y / 8][x] |= 1 << (y % 8);
 8007cb2:	79bb      	ldrb	r3, [r7, #6]
 8007cb4:	08db      	lsrs	r3, r3, #3
 8007cb6:	b2d8      	uxtb	r0, r3
 8007cb8:	4602      	mov	r2, r0
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	490e      	ldr	r1, [pc, #56]	; (8007cf8 <lcd_drawpoint+0x64>)
 8007cbe:	01d2      	lsls	r2, r2, #7
 8007cc0:	440a      	add	r2, r1
 8007cc2:	4413      	add	r3, r2
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b25a      	sxtb	r2, r3
 8007cc8:	79bb      	ldrb	r3, [r7, #6]
 8007cca:	f003 0307 	and.w	r3, r3, #7
 8007cce:	2101      	movs	r1, #1
 8007cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd4:	b25b      	sxtb	r3, r3
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b259      	sxtb	r1, r3
 8007cda:	4602      	mov	r2, r0
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	b2c8      	uxtb	r0, r1
 8007ce0:	4905      	ldr	r1, [pc, #20]	; (8007cf8 <lcd_drawpoint+0x64>)
 8007ce2:	01d2      	lsls	r2, r2, #7
 8007ce4:	440a      	add	r2, r1
 8007ce6:	4413      	add	r3, r2
 8007ce8:	4602      	mov	r2, r0
 8007cea:	701a      	strb	r2, [r3, #0]
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	2000ff0c 	.word	0x2000ff0c

08007cfc <lcd_clearpoint>:

inline void lcd_clearpoint(uint8_t x, uint8_t y)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	460a      	mov	r2, r1
 8007d06:	71fb      	strb	r3, [r7, #7]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8007d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	db21      	blt.n	8007d58 <lcd_clearpoint+0x5c>
 8007d14:	79bb      	ldrb	r3, [r7, #6]
 8007d16:	2b3f      	cmp	r3, #63	; 0x3f
 8007d18:	d81e      	bhi.n	8007d58 <lcd_clearpoint+0x5c>
    lcd_buffer[y / 8][x] &= ~(1 << (y % 8));
 8007d1a:	79bb      	ldrb	r3, [r7, #6]
 8007d1c:	08db      	lsrs	r3, r3, #3
 8007d1e:	b2d8      	uxtb	r0, r3
 8007d20:	4602      	mov	r2, r0
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	490f      	ldr	r1, [pc, #60]	; (8007d64 <lcd_clearpoint+0x68>)
 8007d26:	01d2      	lsls	r2, r2, #7
 8007d28:	440a      	add	r2, r1
 8007d2a:	4413      	add	r3, r2
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b25a      	sxtb	r2, r3
 8007d30:	79bb      	ldrb	r3, [r7, #6]
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	2101      	movs	r1, #1
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	b25b      	sxtb	r3, r3
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	4013      	ands	r3, r2
 8007d44:	b259      	sxtb	r1, r3
 8007d46:	4602      	mov	r2, r0
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	b2c8      	uxtb	r0, r1
 8007d4c:	4905      	ldr	r1, [pc, #20]	; (8007d64 <lcd_clearpoint+0x68>)
 8007d4e:	01d2      	lsls	r2, r2, #7
 8007d50:	440a      	add	r2, r1
 8007d52:	4413      	add	r3, r2
 8007d54:	4602      	mov	r2, r0
 8007d56:	701a      	strb	r2, [r3, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	2000ff0c 	.word	0x2000ff0c

08007d68 <lcd_rect_solid>:


void lcd_rect_solid(int x, int y, int w, int h, int c)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08c      	sub	sp, #48	; 0x30
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
  if(c)
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d026      	beq.n	8007dca <lcd_rect_solid+0x62>
  {
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d80:	2300      	movs	r3, #0
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d84:	e01c      	b.n	8007dc0 <lcd_rect_solid+0x58>
    {
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	623b      	str	r3, [r7, #32]
 8007d8e:	e00d      	b.n	8007dac <lcd_rect_solid+0x44>
      {
          lcd_drawpoint(j,i);
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff ff7a 	bl	8007c94 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	3301      	adds	r3, #1
 8007da4:	623b      	str	r3, [r7, #32]
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	3301      	adds	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dac:	6a3a      	ldr	r2, [r7, #32]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	dbed      	blt.n	8007d90 <lcd_rect_solid+0x28>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	3301      	adds	r3, #1
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	dbde      	blt.n	8007d86 <lcd_rect_solid+0x1e>
      {
          lcd_clearpoint(j,i);
      }
    }
  }
}
 8007dc8:	e025      	b.n	8007e16 <lcd_rect_solid+0xae>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	61fb      	str	r3, [r7, #28]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e01c      	b.n	8007e0e <lcd_rect_solid+0xa6>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	e00d      	b.n	8007dfa <lcd_rect_solid+0x92>
          lcd_clearpoint(j,i);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	b2d2      	uxtb	r2, r2
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff ff87 	bl	8007cfc <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	3301      	adds	r3, #1
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	dbed      	blt.n	8007dde <lcd_rect_solid+0x76>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	3301      	adds	r3, #1
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	dbde      	blt.n	8007dd4 <lcd_rect_solid+0x6c>
}
 8007e16:	bf00      	nop
 8007e18:	3730      	adds	r7, #48	; 0x30
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <lcd_rect>:


void lcd_rect(int x, int y, int w, int h, int c)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b08c      	sub	sp, #48	; 0x30
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
 8007e2a:	603b      	str	r3, [r7, #0]
  if(w > 0 && h > 0)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f340 809a 	ble.w	8007f68 <lcd_rect+0x14a>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f340 8096 	ble.w	8007f68 <lcd_rect+0x14a>
  {
    if(c)
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d049      	beq.n	8007ed6 <lcd_rect+0xb8>
    {
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e46:	2300      	movs	r3, #0
 8007e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e4a:	e01b      	b.n	8007e84 <lcd_rect+0x66>
      {
        lcd_drawpoint(x,i);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff ff1c 	bl	8007c94 <lcd_drawpoint>
        lcd_drawpoint(x+w-1,i);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	4413      	add	r3, r2
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff ff0e 	bl	8007c94 <lcd_drawpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	3301      	adds	r3, #1
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	dbdf      	blt.n	8007e4c <lcd_rect+0x2e>
      }
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e90:	2300      	movs	r3, #0
 8007e92:	623b      	str	r3, [r7, #32]
 8007e94:	e01a      	b.n	8007ecc <lcd_rect+0xae>
      {
        lcd_drawpoint(j,y);
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	b2d2      	uxtb	r2, r2
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fef7 	bl	8007c94 <lcd_drawpoint>
        lcd_drawpoint(j,y+h-1);
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	b2d8      	uxtb	r0, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	4619      	mov	r1, r3
 8007ebc:	f7ff feea 	bl	8007c94 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	623b      	str	r3, [r7, #32]
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	3301      	adds	r3, #1
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
 8007ecc:	6a3a      	ldr	r2, [r7, #32]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	dbe0      	blt.n	8007e96 <lcd_rect+0x78>
        lcd_clearpoint(j,y);
        lcd_clearpoint(j,y+h-1);
      }
    }
  }
}
 8007ed4:	e048      	b.n	8007f68 <lcd_rect+0x14a>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	2300      	movs	r3, #0
 8007edc:	61bb      	str	r3, [r7, #24]
 8007ede:	e01b      	b.n	8007f18 <lcd_rect+0xfa>
        lcd_clearpoint(x,i);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff ff06 	bl	8007cfc <lcd_clearpoint>
        lcd_clearpoint(x+w-1,i);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	4413      	add	r3, r2
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fef8 	bl	8007cfc <lcd_clearpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	3301      	adds	r3, #1
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	dbdf      	blt.n	8007ee0 <lcd_rect+0xc2>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e01a      	b.n	8007f60 <lcd_rect+0x142>
        lcd_clearpoint(j,y);
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	4611      	mov	r1, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fee1 	bl	8007cfc <lcd_clearpoint>
        lcd_clearpoint(j,y+h-1);
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	b2d8      	uxtb	r0, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	4413      	add	r3, r2
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f7ff fed4 	bl	8007cfc <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	3301      	adds	r3, #1
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	dbe0      	blt.n	8007f2a <lcd_rect+0x10c>
}
 8007f68:	bf00      	nop
 8007f6a:	3730      	adds	r7, #48	; 0x30
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <lcd_line>:


void lcd_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b09b      	sub	sp, #108	; 0x6c
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4604      	mov	r4, r0
 8007f78:	4608      	mov	r0, r1
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4623      	mov	r3, r4
 8007f80:	80fb      	strh	r3, [r7, #6]
 8007f82:	4603      	mov	r3, r0
 8007f84:	80bb      	strh	r3, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	807b      	strh	r3, [r7, #2]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	803b      	strh	r3, [r7, #0]
  if(x1>=x0 && y1>=y0)
 8007f8e:	887a      	ldrh	r2, [r7, #2]
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	f0c0 80c3 	bcc.w	800811e <lcd_line+0x1ae>
 8007f98:	883a      	ldrh	r2, [r7, #0]
 8007f9a:	88bb      	ldrh	r3, [r7, #4]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	f0c0 80be 	bcc.w	800811e <lcd_line+0x1ae>
  {
    if(x1-x0 >= y1-y0)
 8007fa2:	887a      	ldrh	r2, [r7, #2]
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	8839      	ldrh	r1, [r7, #0]
 8007faa:	88bb      	ldrh	r3, [r7, #4]
 8007fac:	1acb      	subs	r3, r1, r3
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	db5a      	blt.n	8008068 <lcd_line+0xf8>
    {
      int16_t deltax = abs(x1 - x0);
 8007fb2:	887a      	ldrh	r2, [r7, #2]
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfb8      	it	lt
 8007fbc:	425b      	neglt	r3, r3
 8007fbe:	863b      	strh	r3, [r7, #48]	; 0x30
      int16_t deltay = abs(y1 - y0);
 8007fc0:	883a      	ldrh	r2, [r7, #0]
 8007fc2:	88bb      	ldrh	r3, [r7, #4]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bfb8      	it	lt
 8007fca:	425b      	neglt	r3, r3
 8007fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      int16_t error = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      int16_t deltaerr = deltay;
 8007fd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007fd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      int16_t y = y0,x;
 8007fd8:	88bb      	ldrh	r3, [r7, #4]
 8007fda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      for(x=x0;x<=x1;x++)
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007fe4:	e03a      	b.n	800805c <lcd_line+0xec>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 8007fe6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <lcd_line+0x94>
 8007fee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff fe49 	bl	8007c94 <lcd_drawpoint>
 8008002:	e009      	b.n	8008018 <lcd_line+0xa8>
 8008004:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fe72 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 8008018:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800801c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800801e:	4413      	add	r3, r2
 8008020:	b29b      	uxth	r3, r3
 8008022:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
          if(2*error >= deltax)
 8008026:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800802a:	005a      	lsls	r2, r3, #1
 800802c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8008030:	429a      	cmp	r2, r3
 8008032:	db0c      	blt.n	800804e <lcd_line+0xde>
          {
              y = y + 1;
 8008034:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008038:	3301      	adds	r3, #1
 800803a:	b29b      	uxth	r3, r3
 800803c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
              error = error - deltax;
 8008040:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8008044:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	b29b      	uxth	r3, r3
 800804a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      for(x=x0;x<=x1;x++)
 800804e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8008052:	b29b      	uxth	r3, r3
 8008054:	3301      	adds	r3, #1
 8008056:	b29b      	uxth	r3, r3
 8008058:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800805c:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8008060:	887b      	ldrh	r3, [r7, #2]
 8008062:	429a      	cmp	r2, r3
 8008064:	ddbf      	ble.n	8007fe6 <lcd_line+0x76>
    if(x1-x0 >= y1-y0)
 8008066:	e2a0      	b.n	80085aa <lcd_line+0x63a>
          }
      }
    }
    else
    {
      int16_t deltax = abs(x1 - x0);
 8008068:	887a      	ldrh	r2, [r7, #2]
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	bfb8      	it	lt
 8008072:	425b      	neglt	r3, r3
 8008074:	86fb      	strh	r3, [r7, #54]	; 0x36
      int16_t deltay = abs(y1 - y0);
 8008076:	883a      	ldrh	r2, [r7, #0]
 8008078:	88bb      	ldrh	r3, [r7, #4]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfb8      	it	lt
 8008080:	425b      	neglt	r3, r3
 8008082:	86bb      	strh	r3, [r7, #52]	; 0x34
      int16_t error = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      int16_t deltaerr = deltax;
 800808a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800808c:	867b      	strh	r3, [r7, #50]	; 0x32
      int16_t x = x0,y;
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      for(y=y0;y<=y1;y++)
 8008094:	88bb      	ldrh	r3, [r7, #4]
 8008096:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800809a:	e03a      	b.n	8008112 <lcd_line+0x1a2>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800809c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <lcd_line+0x14a>
 80080a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fdee 	bl	8007c94 <lcd_drawpoint>
 80080b8:	e009      	b.n	80080ce <lcd_line+0x15e>
 80080ba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fe17 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 80080ce:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80080d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80080d4:	4413      	add	r3, r2
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
          if(2*error >= deltay)
 80080dc:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80080e0:	005a      	lsls	r2, r3, #1
 80080e2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80080e6:	429a      	cmp	r2, r3
 80080e8:	db0c      	blt.n	8008104 <lcd_line+0x194>
          {
              x = x + 1;
 80080ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80080ee:	3301      	adds	r3, #1
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
              error = error - deltay;
 80080f6:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80080fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      for(y=y0;y<=y1;y++)
 8008104:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8008108:	b29b      	uxth	r3, r3
 800810a:	3301      	adds	r3, #1
 800810c:	b29b      	uxth	r3, r3
 800810e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008112:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 8008116:	883b      	ldrh	r3, [r7, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	ddbf      	ble.n	800809c <lcd_line+0x12c>
    if(x1-x0 >= y1-y0)
 800811c:	e245      	b.n	80085aa <lcd_line+0x63a>
          }
      }
    }
  }
  else if(x0>=x1 && y0>=y1)
 800811e:	88fa      	ldrh	r2, [r7, #6]
 8008120:	887b      	ldrh	r3, [r7, #2]
 8008122:	429a      	cmp	r2, r3
 8008124:	f0c0 80c3 	bcc.w	80082ae <lcd_line+0x33e>
 8008128:	88ba      	ldrh	r2, [r7, #4]
 800812a:	883b      	ldrh	r3, [r7, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	f0c0 80be 	bcc.w	80082ae <lcd_line+0x33e>
  {
    if(x0-x1 >= y0-y1)
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	887b      	ldrh	r3, [r7, #2]
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	88b9      	ldrh	r1, [r7, #4]
 800813a:	883b      	ldrh	r3, [r7, #0]
 800813c:	1acb      	subs	r3, r1, r3
 800813e:	429a      	cmp	r2, r3
 8008140:	db5a      	blt.n	80081f8 <lcd_line+0x288>
    {
      int16_t deltax = abs(x0 - x1);
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	887b      	ldrh	r3, [r7, #2]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfb8      	it	lt
 800814c:	425b      	neglt	r3, r3
 800814e:	84bb      	strh	r3, [r7, #36]	; 0x24
      int16_t deltay = abs(y0 - y1);
 8008150:	88ba      	ldrh	r2, [r7, #4]
 8008152:	883b      	ldrh	r3, [r7, #0]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfb8      	it	lt
 800815a:	425b      	neglt	r3, r3
 800815c:	847b      	strh	r3, [r7, #34]	; 0x22
      int16_t error = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      int16_t deltaerr = deltay;
 8008164:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008166:	843b      	strh	r3, [r7, #32]
      int16_t y = y1,x;
 8008168:	883b      	ldrh	r3, [r7, #0]
 800816a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
      for(x=x1;x<=x0;x++)
 800816e:	887b      	ldrh	r3, [r7, #2]
 8008170:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008174:	e03a      	b.n	80081ec <lcd_line+0x27c>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 8008176:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <lcd_line+0x224>
 800817e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8008188:	b2d2      	uxtb	r2, r2
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff fd81 	bl	8007c94 <lcd_drawpoint>
 8008192:	e009      	b.n	80081a8 <lcd_line+0x238>
 8008194:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008198:	b2db      	uxtb	r3, r3
 800819a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	4611      	mov	r1, r2
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fdaa 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 80081a8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80081ac:	8c3b      	ldrh	r3, [r7, #32]
 80081ae:	4413      	add	r3, r2
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
          if(2*error >= deltax)
 80081b6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80081ba:	005a      	lsls	r2, r3, #1
 80081bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80081c0:	429a      	cmp	r2, r3
 80081c2:	db0c      	blt.n	80081de <lcd_line+0x26e>
          {
              y = y + 1;
 80081c4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80081c8:	3301      	adds	r3, #1
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
              error = error - deltax;
 80081d0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80081d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      for(x=x1;x<=x0;x++)
 80081de:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3301      	adds	r3, #1
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80081ec:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80081f0:	88fb      	ldrh	r3, [r7, #6]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	ddbf      	ble.n	8008176 <lcd_line+0x206>
    if(x0-x1 >= y0-y1)
 80081f6:	e1d8      	b.n	80085aa <lcd_line+0x63a>
          }
      }
    }
    else
    {
      int16_t deltax = abs(x0 - x1);
 80081f8:	88fa      	ldrh	r2, [r7, #6]
 80081fa:	887b      	ldrh	r3, [r7, #2]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfb8      	it	lt
 8008202:	425b      	neglt	r3, r3
 8008204:	857b      	strh	r3, [r7, #42]	; 0x2a
      int16_t deltay = abs(y0 - y1);
 8008206:	88ba      	ldrh	r2, [r7, #4]
 8008208:	883b      	ldrh	r3, [r7, #0]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	bfb8      	it	lt
 8008210:	425b      	neglt	r3, r3
 8008212:	853b      	strh	r3, [r7, #40]	; 0x28
      int16_t error = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      int16_t deltaerr = deltax;
 800821a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800821c:	84fb      	strh	r3, [r7, #38]	; 0x26
      int16_t x = x1,y;
 800821e:	887b      	ldrh	r3, [r7, #2]
 8008220:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
      for(y=y1;y<=y0;y++)
 8008224:	883b      	ldrh	r3, [r7, #0]
 8008226:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800822a:	e03a      	b.n	80082a2 <lcd_line+0x332>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800822c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00a      	beq.n	800824a <lcd_line+0x2da>
 8008234:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fd26 	bl	8007c94 <lcd_drawpoint>
 8008248:	e009      	b.n	800825e <lcd_line+0x2ee>
 800824a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800824e:	b2db      	uxtb	r3, r3
 8008250:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff fd4f 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 800825e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008264:	4413      	add	r3, r2
 8008266:	b29b      	uxth	r3, r3
 8008268:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
          if(2*error >= deltay)
 800826c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8008270:	005a      	lsls	r2, r3, #1
 8008272:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008276:	429a      	cmp	r2, r3
 8008278:	db0c      	blt.n	8008294 <lcd_line+0x324>
          {
              x = x + 1;
 800827a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800827e:	3301      	adds	r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
              error = error - deltay;
 8008286:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800828a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	b29b      	uxth	r3, r3
 8008290:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
      for(y=y1;y<=y0;y++)
 8008294:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8008298:	b29b      	uxth	r3, r3
 800829a:	3301      	adds	r3, #1
 800829c:	b29b      	uxth	r3, r3
 800829e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80082a2:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 80082a6:	88bb      	ldrh	r3, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	ddbf      	ble.n	800822c <lcd_line+0x2bc>
    if(x0-x1 >= y0-y1)
 80082ac:	e17d      	b.n	80085aa <lcd_line+0x63a>
          }
      }
    }
  }
  else if(x0>=x1 && y1>=y0)
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	887b      	ldrh	r3, [r7, #2]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	f0c0 80c3 	bcc.w	800843e <lcd_line+0x4ce>
 80082b8:	883a      	ldrh	r2, [r7, #0]
 80082ba:	88bb      	ldrh	r3, [r7, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	f0c0 80be 	bcc.w	800843e <lcd_line+0x4ce>
  {
    if(x0-x1 >= y1-y0)
 80082c2:	88fa      	ldrh	r2, [r7, #6]
 80082c4:	887b      	ldrh	r3, [r7, #2]
 80082c6:	1ad2      	subs	r2, r2, r3
 80082c8:	8839      	ldrh	r1, [r7, #0]
 80082ca:	88bb      	ldrh	r3, [r7, #4]
 80082cc:	1acb      	subs	r3, r1, r3
 80082ce:	429a      	cmp	r2, r3
 80082d0:	db5a      	blt.n	8008388 <lcd_line+0x418>
    {
      int16_t deltax = abs(x0 - x1);
 80082d2:	88fa      	ldrh	r2, [r7, #6]
 80082d4:	887b      	ldrh	r3, [r7, #2]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bfb8      	it	lt
 80082dc:	425b      	neglt	r3, r3
 80082de:	833b      	strh	r3, [r7, #24]
      int16_t deltay = abs(y1 - y0);
 80082e0:	883a      	ldrh	r2, [r7, #0]
 80082e2:	88bb      	ldrh	r3, [r7, #4]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfb8      	it	lt
 80082ea:	425b      	neglt	r3, r3
 80082ec:	82fb      	strh	r3, [r7, #22]
      int16_t error = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      int16_t deltaerr = deltay;
 80082f4:	8afb      	ldrh	r3, [r7, #22]
 80082f6:	82bb      	strh	r3, [r7, #20]
      int16_t y = y0,x;
 80082f8:	88bb      	ldrh	r3, [r7, #4]
 80082fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
      for(x=x0;x>=x1;x--)
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008304:	e03a      	b.n	800837c <lcd_line+0x40c>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 8008306:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <lcd_line+0x3b4>
 800830e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fcb9 	bl	8007c94 <lcd_drawpoint>
 8008322:	e009      	b.n	8008338 <lcd_line+0x3c8>
 8008324:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	4611      	mov	r1, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fce2 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 8008338:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800833c:	8abb      	ldrh	r3, [r7, #20]
 800833e:	4413      	add	r3, r2
 8008340:	b29b      	uxth	r3, r3
 8008342:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
          if(2*error >= deltax)
 8008346:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800834a:	005a      	lsls	r2, r3, #1
 800834c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008350:	429a      	cmp	r2, r3
 8008352:	db0c      	blt.n	800836e <lcd_line+0x3fe>
          {
              y = y + 1;
 8008354:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008358:	3301      	adds	r3, #1
 800835a:	b29b      	uxth	r3, r3
 800835c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
              error = error - deltax;
 8008360:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008364:	8b3b      	ldrh	r3, [r7, #24]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	b29b      	uxth	r3, r3
 800836a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      for(x=x0;x>=x1;x--)
 800836e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29b      	uxth	r3, r3
 8008378:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800837c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8008380:	887b      	ldrh	r3, [r7, #2]
 8008382:	429a      	cmp	r2, r3
 8008384:	dabf      	bge.n	8008306 <lcd_line+0x396>
    if(x0-x1 >= y1-y0)
 8008386:	e110      	b.n	80085aa <lcd_line+0x63a>
          }
      }
    }
    else
    {
      int16_t deltax = abs(x0 - x1);
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	887b      	ldrh	r3, [r7, #2]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfb8      	it	lt
 8008392:	425b      	neglt	r3, r3
 8008394:	83fb      	strh	r3, [r7, #30]
      int16_t deltay = abs(y1 - y0);
 8008396:	883a      	ldrh	r2, [r7, #0]
 8008398:	88bb      	ldrh	r3, [r7, #4]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfb8      	it	lt
 80083a0:	425b      	neglt	r3, r3
 80083a2:	83bb      	strh	r3, [r7, #28]
      int16_t error = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      int16_t deltaerr = deltax;
 80083aa:	8bfb      	ldrh	r3, [r7, #30]
 80083ac:	837b      	strh	r3, [r7, #26]
      int16_t x = x1,y;
 80083ae:	887b      	ldrh	r3, [r7, #2]
 80083b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      for(y=y1;y>=y0;y--)
 80083b4:	883b      	ldrh	r3, [r7, #0]
 80083b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80083ba:	e03a      	b.n	8008432 <lcd_line+0x4c2>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 80083bc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <lcd_line+0x46a>
 80083c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fc5e 	bl	8007c94 <lcd_drawpoint>
 80083d8:	e009      	b.n	80083ee <lcd_line+0x47e>
 80083da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80083e4:	b2d2      	uxtb	r2, r2
 80083e6:	4611      	mov	r1, r2
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff fc87 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 80083ee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80083f2:	8b7b      	ldrh	r3, [r7, #26]
 80083f4:	4413      	add	r3, r2
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
          if(2*error >= deltay)
 80083fc:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8008400:	005a      	lsls	r2, r3, #1
 8008402:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008406:	429a      	cmp	r2, r3
 8008408:	db0c      	blt.n	8008424 <lcd_line+0x4b4>
          {
              x = x + 1;
 800840a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800840e:	3301      	adds	r3, #1
 8008410:	b29b      	uxth	r3, r3
 8008412:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
              error = error - deltay;
 8008416:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800841a:	8bbb      	ldrh	r3, [r7, #28]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      for(y=y1;y>=y0;y--)
 8008424:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	b29b      	uxth	r3, r3
 800842e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008432:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 8008436:	88bb      	ldrh	r3, [r7, #4]
 8008438:	429a      	cmp	r2, r3
 800843a:	dabf      	bge.n	80083bc <lcd_line+0x44c>
    if(x0-x1 >= y1-y0)
 800843c:	e0b5      	b.n	80085aa <lcd_line+0x63a>
          }
      }
    }
  }
  else if(x1>=x0 && y0>=y1)
 800843e:	887a      	ldrh	r2, [r7, #2]
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	429a      	cmp	r2, r3
 8008444:	f0c0 80b1 	bcc.w	80085aa <lcd_line+0x63a>
 8008448:	88ba      	ldrh	r2, [r7, #4]
 800844a:	883b      	ldrh	r3, [r7, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	f0c0 80ac 	bcc.w	80085aa <lcd_line+0x63a>
  {
    if(x1-x0 >= y0-y1)
 8008452:	887a      	ldrh	r2, [r7, #2]
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	88b9      	ldrh	r1, [r7, #4]
 800845a:	883b      	ldrh	r3, [r7, #0]
 800845c:	1acb      	subs	r3, r1, r3
 800845e:	429a      	cmp	r2, r3
 8008460:	db56      	blt.n	8008510 <lcd_line+0x5a0>
    {
      int16_t deltax = abs(x1 - x0);
 8008462:	887a      	ldrh	r2, [r7, #2]
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfb8      	it	lt
 800846c:	425b      	neglt	r3, r3
 800846e:	81bb      	strh	r3, [r7, #12]
      int16_t deltay = abs(y0 - y1);
 8008470:	88ba      	ldrh	r2, [r7, #4]
 8008472:	883b      	ldrh	r3, [r7, #0]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfb8      	it	lt
 800847a:	425b      	neglt	r3, r3
 800847c:	817b      	strh	r3, [r7, #10]
      int16_t error = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      int16_t deltaerr = deltay;
 8008484:	897b      	ldrh	r3, [r7, #10]
 8008486:	813b      	strh	r3, [r7, #8]
      int16_t y = y1,x;
 8008488:	883b      	ldrh	r3, [r7, #0]
 800848a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
      for(x=x1;x>=x0;x--)
 800848e:	887b      	ldrh	r3, [r7, #2]
 8008490:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008492:	e037      	b.n	8008504 <lcd_line+0x594>
      {
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 8008494:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008498:	2b00      	cmp	r3, #0
 800849a:	d009      	beq.n	80084b0 <lcd_line+0x540>
 800849c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff fbf3 	bl	8007c94 <lcd_drawpoint>
 80084ae:	e008      	b.n	80084c2 <lcd_line+0x552>
 80084b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80084b8:	b2d2      	uxtb	r2, r2
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fc1d 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 80084c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80084c6:	893b      	ldrh	r3, [r7, #8]
 80084c8:	4413      	add	r3, r2
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
          if(2*error >= deltax)
 80084d0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80084d4:	005a      	lsls	r2, r3, #1
 80084d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80084da:	429a      	cmp	r2, r3
 80084dc:	db0c      	blt.n	80084f8 <lcd_line+0x588>
          {
              y = y + 1;
 80084de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80084e2:	3301      	adds	r3, #1
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
              error = error - deltax;
 80084ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80084ee:	89bb      	ldrh	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      for(x=x1;x>=x0;x--)
 80084f8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29b      	uxth	r3, r3
 8008502:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008504:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	429a      	cmp	r2, r3
 800850c:	dac2      	bge.n	8008494 <lcd_line+0x524>
          }
      }
    }
  }

}
 800850e:	e04c      	b.n	80085aa <lcd_line+0x63a>
      int16_t deltax = abs(x1 - x0);
 8008510:	887a      	ldrh	r2, [r7, #2]
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfb8      	it	lt
 800851a:	425b      	neglt	r3, r3
 800851c:	827b      	strh	r3, [r7, #18]
      int16_t deltay = abs(y0 - y1);
 800851e:	88ba      	ldrh	r2, [r7, #4]
 8008520:	883b      	ldrh	r3, [r7, #0]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	bfb8      	it	lt
 8008528:	425b      	neglt	r3, r3
 800852a:	823b      	strh	r3, [r7, #16]
      int16_t error = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	87bb      	strh	r3, [r7, #60]	; 0x3c
      int16_t deltaerr = deltax;
 8008530:	8a7b      	ldrh	r3, [r7, #18]
 8008532:	81fb      	strh	r3, [r7, #14]
      int16_t x = x0,y;
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	877b      	strh	r3, [r7, #58]	; 0x3a
      for(y=y0;y>=y1;y--)
 8008538:	88bb      	ldrh	r3, [r7, #4]
 800853a:	873b      	strh	r3, [r7, #56]	; 0x38
 800853c:	e02f      	b.n	800859e <lcd_line+0x62e>
          { if(color) lcd_drawpoint(x,y); else lcd_clearpoint(x,y); }
 800853e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008542:	2b00      	cmp	r3, #0
 8008544:	d008      	beq.n	8008558 <lcd_line+0x5e8>
 8008546:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008548:	b2db      	uxtb	r3, r3
 800854a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800854c:	b2d2      	uxtb	r2, r2
 800854e:	4611      	mov	r1, r2
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fb9f 	bl	8007c94 <lcd_drawpoint>
 8008556:	e007      	b.n	8008568 <lcd_line+0x5f8>
 8008558:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800855a:	b2db      	uxtb	r3, r3
 800855c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800855e:	b2d2      	uxtb	r2, r2
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fbca 	bl	8007cfc <lcd_clearpoint>
          error = error+deltaerr;
 8008568:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	4413      	add	r3, r2
 800856e:	b29b      	uxth	r3, r3
 8008570:	87bb      	strh	r3, [r7, #60]	; 0x3c
          if(2*error >= deltay)
 8008572:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8008576:	005a      	lsls	r2, r3, #1
 8008578:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800857c:	429a      	cmp	r2, r3
 800857e:	db08      	blt.n	8008592 <lcd_line+0x622>
              x = x + 1;
 8008580:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008582:	3301      	adds	r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	877b      	strh	r3, [r7, #58]	; 0x3a
              error = error - deltay;
 8008588:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800858a:	8a3b      	ldrh	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	b29b      	uxth	r3, r3
 8008590:	87bb      	strh	r3, [r7, #60]	; 0x3c
      for(y=y0;y>=y1;y--)
 8008592:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8008596:	b29b      	uxth	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	b29b      	uxth	r3, r3
 800859c:	873b      	strh	r3, [r7, #56]	; 0x38
 800859e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80085a2:	883b      	ldrh	r3, [r7, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	daca      	bge.n	800853e <lcd_line+0x5ce>
}
 80085a8:	e7ff      	b.n	80085aa <lcd_line+0x63a>
 80085aa:	bf00      	nop
 80085ac:	376c      	adds	r7, #108	; 0x6c
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd90      	pop	{r4, r7, pc}

080085b2 <lcd_circle5x5>:
    }
  }
}

void lcd_circle5x5(int16_t x, int16_t y)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	4603      	mov	r3, r0
 80085ba:	460a      	mov	r2, r1
 80085bc:	80fb      	strh	r3, [r7, #6]
 80085be:	4613      	mov	r3, r2
 80085c0:	80bb      	strh	r3, [r7, #4]
  lcd_drawpoint(x-2,y-1);
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	3b02      	subs	r3, #2
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	88bb      	ldrh	r3, [r7, #4]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	4619      	mov	r1, r3
 80085d4:	4610      	mov	r0, r2
 80085d6:	f7ff fb5d 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x-2,y);
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	3b02      	subs	r3, #2
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	88ba      	ldrh	r2, [r7, #4]
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff fb53 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x-2,y+1);
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	3b02      	subs	r3, #2
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	88bb      	ldrh	r3, [r7, #4]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	3301      	adds	r3, #1
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f7ff fb47 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x+2,y+1);
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	3302      	adds	r3, #2
 800860c:	b2da      	uxtb	r2, r3
 800860e:	88bb      	ldrh	r3, [r7, #4]
 8008610:	b2db      	uxtb	r3, r3
 8008612:	3301      	adds	r3, #1
 8008614:	b2db      	uxtb	r3, r3
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7ff fb3b 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x+2,y);
 800861e:	88fb      	ldrh	r3, [r7, #6]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	3302      	adds	r3, #2
 8008624:	b2db      	uxtb	r3, r3
 8008626:	88ba      	ldrh	r2, [r7, #4]
 8008628:	b2d2      	uxtb	r2, r2
 800862a:	4611      	mov	r1, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff fb31 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x+2,y-1);
 8008632:	88fb      	ldrh	r3, [r7, #6]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	3302      	adds	r3, #2
 8008638:	b2da      	uxtb	r2, r3
 800863a:	88bb      	ldrh	r3, [r7, #4]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	3b01      	subs	r3, #1
 8008640:	b2db      	uxtb	r3, r3
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f7ff fb25 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x-1,y-2);
 800864a:	88fb      	ldrh	r3, [r7, #6]
 800864c:	b2db      	uxtb	r3, r3
 800864e:	3b01      	subs	r3, #1
 8008650:	b2da      	uxtb	r2, r3
 8008652:	88bb      	ldrh	r3, [r7, #4]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	3b02      	subs	r3, #2
 8008658:	b2db      	uxtb	r3, r3
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f7ff fb19 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x,y-2);
 8008662:	88fb      	ldrh	r3, [r7, #6]
 8008664:	b2da      	uxtb	r2, r3
 8008666:	88bb      	ldrh	r3, [r7, #4]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	3b02      	subs	r3, #2
 800866c:	b2db      	uxtb	r3, r3
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f7ff fb0f 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x+1,y-2);
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	3301      	adds	r3, #1
 800867c:	b2da      	uxtb	r2, r3
 800867e:	88bb      	ldrh	r3, [r7, #4]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	3b02      	subs	r3, #2
 8008684:	b2db      	uxtb	r3, r3
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7ff fb03 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x-1,y+2);
 800868e:	88fb      	ldrh	r3, [r7, #6]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	b2da      	uxtb	r2, r3
 8008696:	88bb      	ldrh	r3, [r7, #4]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	3302      	adds	r3, #2
 800869c:	b2db      	uxtb	r3, r3
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f7ff faf7 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x,y+2);
 80086a6:	88fb      	ldrh	r3, [r7, #6]
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	88bb      	ldrh	r3, [r7, #4]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	3302      	adds	r3, #2
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	4619      	mov	r1, r3
 80086b4:	4610      	mov	r0, r2
 80086b6:	f7ff faed 	bl	8007c94 <lcd_drawpoint>
  lcd_drawpoint(x+1,y+2);
 80086ba:	88fb      	ldrh	r3, [r7, #6]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	3301      	adds	r3, #1
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	88bb      	ldrh	r3, [r7, #4]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	3302      	adds	r3, #2
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7ff fae1 	bl	8007c94 <lcd_drawpoint>
  for(int i = 0; i < 3; i++)
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e01e      	b.n	8008716 <lcd_circle5x5+0x164>
    for(int j = 0; j < 3; j++)
 80086d8:	2300      	movs	r3, #0
 80086da:	60bb      	str	r3, [r7, #8]
 80086dc:	e015      	b.n	800870a <lcd_circle5x5+0x158>
      lcd_clearpoint(x+i-1,y+j-1);
 80086de:	88fb      	ldrh	r3, [r7, #6]
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b2d8      	uxtb	r0, r3
 80086ee:	88bb      	ldrh	r3, [r7, #4]
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	4413      	add	r3, r2
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	4619      	mov	r1, r3
 8008700:	f7ff fafc 	bl	8007cfc <lcd_clearpoint>
    for(int j = 0; j < 3; j++)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3301      	adds	r3, #1
 8008708:	60bb      	str	r3, [r7, #8]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b02      	cmp	r3, #2
 800870e:	dde6      	ble.n	80086de <lcd_circle5x5+0x12c>
  for(int i = 0; i < 3; i++)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3301      	adds	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b02      	cmp	r3, #2
 800871a:	dddd      	ble.n	80086d8 <lcd_circle5x5+0x126>
}
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <lcd_init>:
  DelayMs(3000);
  TIM2->CCR3 = 0;
}

void lcd_init(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8008728:	2200      	movs	r2, #0
 800872a:	2104      	movs	r1, #4
 800872c:	480f      	ldr	r0, [pc, #60]	; (800876c <lcd_init+0x48>)
 800872e:	f003 f8ab 	bl	800b888 <HAL_GPIO_WritePin>
  DelayUs(500);
 8008732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008736:	f7ff f92f 	bl	8007998 <DelayUs>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800873a:	2201      	movs	r2, #1
 800873c:	2104      	movs	r1, #4
 800873e:	480b      	ldr	r0, [pc, #44]	; (800876c <lcd_init+0x48>)
 8008740:	f003 f8a2 	bl	800b888 <HAL_GPIO_WritePin>
  DelayMs(2);
 8008744:	2002      	movs	r0, #2
 8008746:	f7ff f93f 	bl	80079c8 <DelayMs>

  lcd_reset();
 800874a:	f7ff fa55 	bl	8007bf8 <lcd_reset>
  lcd_clear();
 800874e:	f7ff fa7b 	bl	8007c48 <lcd_clear>
  lcd_update();
 8008752:	f7ff f9ed 	bl	8007b30 <lcd_update>

  font_init(lcd_rect_solid, 128, 64);
 8008756:	2240      	movs	r2, #64	; 0x40
 8008758:	2180      	movs	r1, #128	; 0x80
 800875a:	4805      	ldr	r0, [pc, #20]	; (8008770 <lcd_init+0x4c>)
 800875c:	f006 fe4e 	bl	800f3fc <font_init>
  font_setCR(0);
 8008760:	2000      	movs	r0, #0
 8008762:	f006 fe29 	bl	800f3b8 <font_setCR>

  //font_setFont(&rre_arialb_16); showFont("[rre_arialb_16]"); lcd_clear();
}
 8008766:	bf00      	nop
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	40020400 	.word	0x40020400
 8008770:	08007d69 	.word	0x08007d69

08008774 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800877c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <SCB_EnableICache+0x3c>)
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008788:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800878c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <SCB_EnableICache+0x3c>)
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	4a06      	ldr	r2, [pc, #24]	; (80087b0 <SCB_EnableICache+0x3c>)
 8008796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800879a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800879c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80087a0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80087a4:	bf00      	nop
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	e000ed00 	.word	0xe000ed00

080087b4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80087ba:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <SCB_EnableDCache+0x7c>)
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80087c2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80087c6:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <SCB_EnableDCache+0x7c>)
 80087c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087cc:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	0b5b      	lsrs	r3, r3, #13
 80087d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80087d6:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	08db      	lsrs	r3, r3, #3
 80087dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087e0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80087ea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80087f0:	490f      	ldr	r1, [pc, #60]	; (8008830 <SCB_EnableDCache+0x7c>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	1e5a      	subs	r2, r3, #1
 80087fc:	60ba      	str	r2, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1ef      	bne.n	80087e2 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1e5a      	subs	r2, r3, #1
 8008806:	60fa      	str	r2, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e5      	bne.n	80087d8 <SCB_EnableDCache+0x24>
 800880c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <SCB_EnableDCache+0x7c>)
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	4a06      	ldr	r2, [pc, #24]	; (8008830 <SCB_EnableDCache+0x7c>)
 8008816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800881a:	6153      	str	r3, [r2, #20]
 800881c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008820:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008824:	bf00      	nop
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	e000ed00 	.word	0xe000ed00

08008834 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM7_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a04      	ldr	r2, [pc, #16]	; (8008850 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d101      	bne.n	8008848 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    controls_irq();
 8008844:	f7fe fd02 	bl	800724c <controls_irq>
  }
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20010680 	.word	0x20010680

08008854 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fd73 	bl	800a348 <xDmaTxIrqHandler>
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fdce 	bl	800a414 <xDmaErIrqHandler>
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <showlogo>:

static void showlogo(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  font_setFont(&rre_ubuntu_32);
 8008884:	480e      	ldr	r0, [pc, #56]	; (80088c0 <showlogo+0x40>)
 8008886:	f006 fe01 	bl	800f48c <font_setFont>
  font_printStr(30,4,"ACIS");
 800888a:	4a0e      	ldr	r2, [pc, #56]	; (80088c4 <showlogo+0x44>)
 800888c:	2104      	movs	r1, #4
 800888e:	201e      	movs	r0, #30
 8008890:	f008 f83e 	bl	8010910 <font_printStr>
  font_setFont(&rre_arialb_16);
 8008894:	480c      	ldr	r0, [pc, #48]	; (80088c8 <showlogo+0x48>)
 8008896:	f006 fdf9 	bl	800f48c <font_setFont>
  font_printStr(2,32,"Advanced Car");
 800889a:	4a0c      	ldr	r2, [pc, #48]	; (80088cc <showlogo+0x4c>)
 800889c:	2120      	movs	r1, #32
 800889e:	2002      	movs	r0, #2
 80088a0:	f008 f836 	bl	8010910 <font_printStr>
  font_printStr(12,46,"Ignition System");
 80088a4:	4a0a      	ldr	r2, [pc, #40]	; (80088d0 <showlogo+0x50>)
 80088a6:	212e      	movs	r1, #46	; 0x2e
 80088a8:	200c      	movs	r0, #12
 80088aa:	f008 f831 	bl	8010910 <font_printStr>
  lcd_update();
 80088ae:	f7ff f93f 	bl	8007b30 <lcd_update>
  DelayMs(1000);
 80088b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088b6:	f7ff f887 	bl	80079c8 <DelayMs>
}
 80088ba:	bf00      	nop
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20002c10 	.word	0x20002c10
 80088c4:	08014a74 	.word	0x08014a74
 80088c8:	20002bf0 	.word	0x20002bf0
 80088cc:	08014a7c 	.word	0x08014a7c
 80088d0:	08014a8c 	.word	0x08014a8c

080088d4 <main>:

int main(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 80088d8:	f7ff ff4c 	bl	8008774 <SCB_EnableICache>
  SCB_EnableDCache();
 80088dc:	f7ff ff6a 	bl	80087b4 <SCB_EnableDCache>

  HAL_Init();
 80088e0:	f002 fa02 	bl	800ace8 <HAL_Init>

  SystemClock_Config();
 80088e4:	f000 f854 	bl	8008990 <SystemClock_Config>

  MX_GPIO_Init();
 80088e8:	f000 fb04 	bl	8008ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 80088ec:	f000 fac0 	bl	8008e70 <MX_DMA_Init>
  MX_TIM2_Init();
 80088f0:	f000 f976 	bl	8008be0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80088f4:	f000 f920 	bl	8008b38 <MX_ADC1_Init>
  MX_TIM10_Init();
 80088f8:	f000 fa02 	bl	8008d00 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80088fc:	f000 fa58 	bl	8008db0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008900:	f000 fa86 	bl	8008e10 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8008904:	f000 f8da 	bl	8008abc <MX_CRC_Init>
  MX_TIM7_Init();
 8008908:	f000 f9c4 	bl	8008c94 <MX_TIM7_Init>
  xFifosInit();
 800890c:	f001 fdbc 	bl	800a488 <xFifosInit>

  CRC16_RegisterHardware(&hcrc);
 8008910:	4815      	ldr	r0, [pc, #84]	; (8008968 <main+0x94>)
 8008912:	f7fe ff53 	bl	80077bc <CRC16_RegisterHardware>

  HAL_GPIO_WritePin(USB_RST_GPIO_Port, USB_RST_Pin, GPIO_PIN_SET);
 8008916:	2201      	movs	r2, #1
 8008918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800891c:	4813      	ldr	r0, [pc, #76]	; (800896c <main+0x98>)
 800891e:	f002 ffb3 	bl	800b888 <HAL_GPIO_WritePin>

  DelayInit();
 8008922:	f7fe ffdf 	bl	80078e4 <DelayInit>

  HAL_TIM_Base_Start_IT(&htim7);
 8008926:	4812      	ldr	r0, [pc, #72]	; (8008970 <main+0x9c>)
 8008928:	f003 fdbe 	bl	800c4a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800892c:	2108      	movs	r1, #8
 800892e:	4811      	ldr	r0, [pc, #68]	; (8008974 <main+0xa0>)
 8008930:	f004 f8d2 	bl	800cad8 <HAL_TIM_PWM_Start>
  lcd_init();
 8008934:	f7ff fef6 	bl	8008724 <lcd_init>

  showlogo();
 8008938:	f7ff ffa2 	bl	8008880 <showlogo>

  osKernelInitialize();
 800893c:	f004 fd00 	bl	800d340 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(acis_main_task, NULL, &defaultTask_attributes);
 8008940:	4a0d      	ldr	r2, [pc, #52]	; (8008978 <main+0xa4>)
 8008942:	2100      	movs	r1, #0
 8008944:	480d      	ldr	r0, [pc, #52]	; (800897c <main+0xa8>)
 8008946:	f004 fd35 	bl	800d3b4 <osThreadNew>
 800894a:	4602      	mov	r2, r0
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <main+0xac>)
 800894e:	601a      	str	r2, [r3, #0]
  getterTaskHandle = osThreadNew(xGetterTask, NULL, &getterTask_attributes);
 8008950:	4a0c      	ldr	r2, [pc, #48]	; (8008984 <main+0xb0>)
 8008952:	2100      	movs	r1, #0
 8008954:	480c      	ldr	r0, [pc, #48]	; (8008988 <main+0xb4>)
 8008956:	f004 fd2d 	bl	800d3b4 <osThreadNew>
 800895a:	4602      	mov	r2, r0
 800895c:	4b0b      	ldr	r3, [pc, #44]	; (800898c <main+0xb8>)
 800895e:	601a      	str	r2, [r3, #0]
  osKernelStart();
 8008960:	f004 fd08 	bl	800d374 <osKernelStart>

  while (1)
 8008964:	e7fe      	b.n	8008964 <main+0x90>
 8008966:	bf00      	nop
 8008968:	20010430 	.word	0x20010430
 800896c:	40020000 	.word	0x40020000
 8008970:	20010680 	.word	0x20010680
 8008974:	20010640 	.word	0x20010640
 8008978:	08015190 	.word	0x08015190
 800897c:	080060f9 	.word	0x080060f9
 8008980:	2001030c 	.word	0x2001030c
 8008984:	080151b4 	.word	0x080151b4
 8008988:	0800a801 	.word	0x0800a801
 800898c:	2001063c 	.word	0x2001063c

08008990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b0b4      	sub	sp, #208	; 0xd0
 8008994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008996:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800899a:	2230      	movs	r2, #48	; 0x30
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f008 f873 	bl	8010a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	609a      	str	r2, [r3, #8]
 80089b0:	60da      	str	r2, [r3, #12]
 80089b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089b4:	f107 030c 	add.w	r3, r7, #12
 80089b8:	2280      	movs	r2, #128	; 0x80
 80089ba:	2100      	movs	r1, #0
 80089bc:	4618      	mov	r0, r3
 80089be:	f008 f864 	bl	8010a8a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80089c2:	4b3c      	ldr	r3, [pc, #240]	; (8008ab4 <SystemClock_Config+0x124>)
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	4a3b      	ldr	r2, [pc, #236]	; (8008ab4 <SystemClock_Config+0x124>)
 80089c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089cc:	6413      	str	r3, [r2, #64]	; 0x40
 80089ce:	4b39      	ldr	r3, [pc, #228]	; (8008ab4 <SystemClock_Config+0x124>)
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089d6:	60bb      	str	r3, [r7, #8]
 80089d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80089da:	4b37      	ldr	r3, [pc, #220]	; (8008ab8 <SystemClock_Config+0x128>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a36      	ldr	r2, [pc, #216]	; (8008ab8 <SystemClock_Config+0x128>)
 80089e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	4b34      	ldr	r3, [pc, #208]	; (8008ab8 <SystemClock_Config+0x128>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089ee:	607b      	str	r3, [r7, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80089f2:	2302      	movs	r3, #2
 80089f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80089fe:	2310      	movs	r3, #16
 8008a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a04:	2302      	movs	r3, #2
 8008a06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008a10:	2308      	movs	r3, #8
 8008a12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008a16:	23d8      	movs	r3, #216	; 0xd8
 8008a18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008a22:	2302      	movs	r3, #2
 8008a24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f002 ff69 	bl	800b904 <HAL_RCC_OscConfig>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008a38:	f000 fb68 	bl	800910c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008a3c:	f002 ff2a 	bl	800b894 <HAL_PWREx_EnableOverDrive>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008a46:	f000 fb61 	bl	800910c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a4a:	230f      	movs	r3, #15
 8008a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a50:	2302      	movs	r3, #2
 8008a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a56:	2300      	movs	r3, #0
 8008a58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008a6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a70:	2107      	movs	r1, #7
 8008a72:	4618      	mov	r0, r3
 8008a74:	f003 f930 	bl	800bcd8 <HAL_RCC_ClockConfig>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008a7e:	f000 fb45 	bl	800910c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8008a82:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008a86:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	4618      	mov	r0, r3
 8008a96:	f003 f9dd 	bl	800be54 <HAL_RCCEx_PeriphCLKConfig>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d001      	beq.n	8008aa4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8008aa0:	f000 fb34 	bl	800910c <Error_Handler>
  }

  HAL_SetTickFreq(HAL_TICK_FREQ_10KHZ);
 8008aa4:	2001      	movs	r0, #1
 8008aa6:	f002 f943 	bl	800ad30 <HAL_SetTickFreq>
}
 8008aaa:	bf00      	nop
 8008aac:	37d0      	adds	r7, #208	; 0xd0
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	40007000 	.word	0x40007000

08008abc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  __HAL_RCC_CRC_CLK_ENABLE();
 8008ac2:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <MX_CRC_Init+0x70>)
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	4a19      	ldr	r2, [pc, #100]	; (8008b2c <MX_CRC_Init+0x70>)
 8008ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008acc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ace:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <MX_CRC_Init+0x70>)
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ad6:	607b      	str	r3, [r7, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008ada:	4b15      	ldr	r3, [pc, #84]	; (8008b30 <MX_CRC_Init+0x74>)
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <MX_CRC_Init+0x78>)
 8008ade:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8008ae0:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <MX_CRC_Init+0x74>)
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8008ae6:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <MX_CRC_Init+0x74>)
 8008ae8:	2201      	movs	r2, #1
 8008aea:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 8008aec:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <MX_CRC_Init+0x74>)
 8008aee:	f24a 0201 	movw	r2, #40961	; 0xa001
 8008af2:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8008af4:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <MX_CRC_Init+0x74>)
 8008af6:	2208      	movs	r2, #8
 8008af8:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <MX_CRC_Init+0x74>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <MX_CRC_Init+0x74>)
 8008b02:	2220      	movs	r2, #32
 8008b04:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8008b06:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <MX_CRC_Init+0x74>)
 8008b08:	2280      	movs	r2, #128	; 0x80
 8008b0a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <MX_CRC_Init+0x74>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008b12:	4807      	ldr	r0, [pc, #28]	; (8008b30 <MX_CRC_Init+0x74>)
 8008b14:	f002 fbba 	bl	800b28c <HAL_CRC_Init>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <MX_CRC_Init+0x66>
  {
    Error_Handler();
 8008b1e:	f000 faf5 	bl	800910c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	20010430 	.word	0x20010430
 8008b34:	40023000 	.word	0x40023000

08008b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008b3e:	463b      	mov	r3, r7
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008b4a:	4b21      	ldr	r3, [pc, #132]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b4c:	4a21      	ldr	r2, [pc, #132]	; (8008bd4 <MX_ADC1_Init+0x9c>)
 8008b4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b50:	4b1f      	ldr	r3, [pc, #124]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008b58:	4b1d      	ldr	r3, [pc, #116]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008b64:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008b6a:	4b19      	ldr	r3, [pc, #100]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b72:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b78:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <MX_ADC1_Init+0xa0>)
 8008b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b7e:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008b84:	4b12      	ldr	r3, [pc, #72]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b86:	2201      	movs	r2, #1
 8008b88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008b8a:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b92:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008b98:	480d      	ldr	r0, [pc, #52]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008b9a:	f002 f8dd 	bl	800ad58 <HAL_ADC_Init>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008ba4:	f000 fab2 	bl	800910c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008ba8:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <MX_ADC1_Init+0xa4>)
 8008baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008bac:	2301      	movs	r3, #1
 8008bae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008bb4:	463b      	mov	r3, r7
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4805      	ldr	r0, [pc, #20]	; (8008bd0 <MX_ADC1_Init+0x98>)
 8008bba:	f002 fa0b 	bl	800afd4 <HAL_ADC_ConfigChannel>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008bc4:	f000 faa2 	bl	800910c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008bc8:	bf00      	nop
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20010514 	.word	0x20010514
 8008bd4:	40012000 	.word	0x40012000
 8008bd8:	0f000001 	.word	0x0f000001
 8008bdc:	10000012 	.word	0x10000012

08008be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08a      	sub	sp, #40	; 0x28
 8008be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008be6:	f107 031c 	add.w	r3, r7, #28
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	605a      	str	r2, [r3, #4]
 8008bf0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	609a      	str	r2, [r3, #8]
 8008bfc:	60da      	str	r2, [r3, #12]
 8008bfe:	611a      	str	r2, [r3, #16]
 8008c00:	615a      	str	r2, [r3, #20]
 8008c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008c04:	4b22      	ldr	r3, [pc, #136]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 422;
 8008c0c:	4b20      	ldr	r3, [pc, #128]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c0e:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8008c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c14:	4b1e      	ldr	r3, [pc, #120]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8008c1a:	4b1d      	ldr	r3, [pc, #116]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c1c:	22ff      	movs	r2, #255	; 0xff
 8008c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c20:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c26:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008c2c:	4818      	ldr	r0, [pc, #96]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c2e:	f003 fd87 	bl	800c740 <HAL_TIM_PWM_Init>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8008c38:	f000 fa68 	bl	800910c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c40:	2300      	movs	r3, #0
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008c44:	f107 031c 	add.w	r3, r7, #28
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4811      	ldr	r0, [pc, #68]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c4c:	f003 ff46 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8008c56:	f000 fa59 	bl	800910c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c5a:	2360      	movs	r3, #96	; 0x60
 8008c5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4807      	ldr	r0, [pc, #28]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c72:	f003 fddb 	bl	800c82c <HAL_TIM_PWM_ConfigChannel>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8008c7c:	f000 fa46 	bl	800910c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008c80:	4803      	ldr	r0, [pc, #12]	; (8008c90 <MX_TIM2_Init+0xb0>)
 8008c82:	f000 faed 	bl	8009260 <HAL_TIM_MspPostInit>

}
 8008c86:	bf00      	nop
 8008c88:	3728      	adds	r7, #40	; 0x28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20010640 	.word	0x20010640

08008c94 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c9a:	1d3b      	adds	r3, r7, #4
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008ca4:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <MX_TIM7_Init+0x64>)
 8008ca6:	4a15      	ldr	r2, [pc, #84]	; (8008cfc <MX_TIM7_Init+0x68>)
 8008ca8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8008caa:	4b13      	ldr	r3, [pc, #76]	; (8008cf8 <MX_TIM7_Init+0x64>)
 8008cac:	226b      	movs	r2, #107	; 0x6b
 8008cae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cb0:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <MX_TIM7_Init+0x64>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8008cb6:	4b10      	ldr	r3, [pc, #64]	; (8008cf8 <MX_TIM7_Init+0x64>)
 8008cb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008cbc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cbe:	4b0e      	ldr	r3, [pc, #56]	; (8008cf8 <MX_TIM7_Init+0x64>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008cc4:	480c      	ldr	r0, [pc, #48]	; (8008cf8 <MX_TIM7_Init+0x64>)
 8008cc6:	f003 fd21 	bl	800c70c <HAL_TIM_Base_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8008cd0:	f000 fa1c 	bl	800910c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <MX_TIM7_Init+0x64>)
 8008ce2:	f003 fefb 	bl	800cadc <HAL_TIMEx_MasterConfigSynchronization>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8008cec:	f000 fa0e 	bl	800910c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20010680 	.word	0x20010680
 8008cfc:	40001400 	.word	0x40001400

08008d00 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	609a      	str	r2, [r3, #8]
 8008d10:	60da      	str	r2, [r3, #12]
 8008d12:	611a      	str	r2, [r3, #16]
 8008d14:	615a      	str	r2, [r3, #20]
 8008d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8008d18:	4b23      	ldr	r3, [pc, #140]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d1a:	4a24      	ldr	r2, [pc, #144]	; (8008dac <MX_TIM10_Init+0xac>)
 8008d1c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10799;
 8008d1e:	4b22      	ldr	r3, [pc, #136]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d20:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8008d24:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d26:	4b20      	ldr	r3, [pc, #128]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8008d2c:	4b1e      	ldr	r3, [pc, #120]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d2e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d32:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d34:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008d40:	4819      	ldr	r0, [pc, #100]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d42:	f003 fce3 	bl	800c70c <HAL_TIM_Base_Init>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8008d4c:	f000 f9de 	bl	800910c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8008d50:	4815      	ldr	r0, [pc, #84]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d52:	f003 fcf5 	bl	800c740 <HAL_TIM_PWM_Init>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8008d5c:	f000 f9d6 	bl	800910c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8008d60:	2108      	movs	r1, #8
 8008d62:	4811      	ldr	r0, [pc, #68]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d64:	f003 fd06 	bl	800c774 <HAL_TIM_OnePulse_Init>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <MX_TIM10_Init+0x72>
  {
    Error_Handler();
 8008d6e:	f000 f9cd 	bl	800910c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008d72:	2360      	movs	r3, #96	; 0x60
 8008d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000;
 8008d76:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008d7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008d84:	1d3b      	adds	r3, r7, #4
 8008d86:	2200      	movs	r2, #0
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4807      	ldr	r0, [pc, #28]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d8c:	f003 fd4e 	bl	800c82c <HAL_TIM_PWM_ConfigChannel>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_TIM10_Init+0x9a>
  {
    Error_Handler();
 8008d96:	f000 f9b9 	bl	800910c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8008d9a:	4803      	ldr	r0, [pc, #12]	; (8008da8 <MX_TIM10_Init+0xa8>)
 8008d9c:	f000 fa60 	bl	8009260 <HAL_TIM_MspPostInit>

}
 8008da0:	bf00      	nop
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	200103f0 	.word	0x200103f0
 8008dac:	40014400 	.word	0x40014400

08008db0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008db4:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008db6:	4a14      	ldr	r2, [pc, #80]	; (8008e08 <MX_USART1_UART_Init+0x58>)
 8008db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 8008dba:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008dbc:	4a13      	ldr	r2, [pc, #76]	; (8008e0c <MX_USART1_UART_Init+0x5c>)
 8008dbe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008dc0:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008dd4:	220c      	movs	r2, #12
 8008dd6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008de4:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008df0:	4804      	ldr	r0, [pc, #16]	; (8008e04 <MX_USART1_UART_Init+0x54>)
 8008df2:	f004 fa76 	bl	800d2e2 <HAL_UART_Init>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8008dfc:	f000 f986 	bl	800910c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e00:	bf00      	nop
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	200105bc 	.word	0x200105bc
 8008e08:	40011000 	.word	0x40011000
 8008e0c:	00337f98 	.word	0x00337f98

08008e10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008e14:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e16:	4a14      	ldr	r2, [pc, #80]	; (8008e68 <MX_USART3_UART_Init+0x58>)
 8008e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 960000;
 8008e1a:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e1c:	4a13      	ldr	r2, [pc, #76]	; (8008e6c <MX_USART3_UART_Init+0x5c>)
 8008e1e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008e20:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008e26:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008e32:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e34:	220c      	movs	r2, #12
 8008e36:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e38:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e3e:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e4a:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008e50:	4804      	ldr	r0, [pc, #16]	; (8008e64 <MX_USART3_UART_Init+0x54>)
 8008e52:	f004 fa46 	bl	800d2e2 <HAL_UART_Init>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8008e5c:	f000 f956 	bl	800910c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008e60:	bf00      	nop
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20010370 	.word	0x20010370
 8008e68:	40004800 	.word	0x40004800
 8008e6c:	000ea600 	.word	0x000ea600

08008e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008e76:	4b1e      	ldr	r3, [pc, #120]	; (8008ef0 <MX_DMA_Init+0x80>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	4a1d      	ldr	r2, [pc, #116]	; (8008ef0 <MX_DMA_Init+0x80>)
 8008e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e80:	6313      	str	r3, [r2, #48]	; 0x30
 8008e82:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <MX_DMA_Init+0x80>)
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e8a:	607b      	str	r3, [r7, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008e8e:	4b18      	ldr	r3, [pc, #96]	; (8008ef0 <MX_DMA_Init+0x80>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	4a17      	ldr	r2, [pc, #92]	; (8008ef0 <MX_DMA_Init+0x80>)
 8008e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e98:	6313      	str	r3, [r2, #48]	; 0x30
 8008e9a:	4b15      	ldr	r3, [pc, #84]	; (8008ef0 <MX_DMA_Init+0x80>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 9, 0); //PC
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2109      	movs	r1, #9
 8008eaa:	200c      	movs	r0, #12
 8008eac:	f002 f94a 	bl	800b144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008eb0:	200c      	movs	r0, #12
 8008eb2:	f002 f979 	bl	800b1a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 9, 0); //PC
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2109      	movs	r1, #9
 8008eba:	200e      	movs	r0, #14
 8008ebc:	f002 f942 	bl	800b144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8008ec0:	200e      	movs	r0, #14
 8008ec2:	f002 f971 	bl	800b1a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //ACIS
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2108      	movs	r1, #8
 8008eca:	203a      	movs	r0, #58	; 0x3a
 8008ecc:	f002 f93a 	bl	800b144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008ed0:	203a      	movs	r0, #58	; 0x3a
 8008ed2:	f002 f969 	bl	800b1a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //ACIS
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2108      	movs	r1, #8
 8008eda:	2046      	movs	r0, #70	; 0x46
 8008edc:	f002 f932 	bl	800b144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008ee0:	2046      	movs	r0, #70	; 0x46
 8008ee2:	f002 f961 	bl	800b1a8 <HAL_NVIC_EnableIRQ>

}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	40023800 	.word	0x40023800

08008ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008efa:	f107 0314 	add.w	r3, r7, #20
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	609a      	str	r2, [r3, #8]
 8008f06:	60da      	str	r2, [r3, #12]
 8008f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f0a:	4b7b      	ldr	r3, [pc, #492]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0e:	4a7a      	ldr	r2, [pc, #488]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f10:	f043 0301 	orr.w	r3, r3, #1
 8008f14:	6313      	str	r3, [r2, #48]	; 0x30
 8008f16:	4b78      	ldr	r3, [pc, #480]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	613b      	str	r3, [r7, #16]
 8008f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f22:	4b75      	ldr	r3, [pc, #468]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f26:	4a74      	ldr	r2, [pc, #464]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f28:	f043 0302 	orr.w	r3, r3, #2
 8008f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f2e:	4b72      	ldr	r3, [pc, #456]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008f3a:	4b6f      	ldr	r3, [pc, #444]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3e:	4a6e      	ldr	r2, [pc, #440]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f40:	f043 0304 	orr.w	r3, r3, #4
 8008f44:	6313      	str	r3, [r2, #48]	; 0x30
 8008f46:	4b6c      	ldr	r3, [pc, #432]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	60bb      	str	r3, [r7, #8]
 8008f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f52:	4b69      	ldr	r3, [pc, #420]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	4a68      	ldr	r2, [pc, #416]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f5e:	4b66      	ldr	r3, [pc, #408]	; (80090f8 <MX_GPIO_Init+0x204>)
 8008f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f62:	f003 0308 	and.w	r3, r3, #8
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin|LCD_CS1_Pin, GPIO_PIN_RESET);
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2116      	movs	r1, #22
 8008f6e:	4863      	ldr	r0, [pc, #396]	; (80090fc <MX_GPIO_Init+0x208>)
 8008f70:	f002 fc8a 	bl	800b888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 8008f74:	2200      	movs	r2, #0
 8008f76:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8008f7a:	4861      	ldr	r0, [pc, #388]	; (8009100 <MX_GPIO_Init+0x20c>)
 8008f7c:	f002 fc84 	bl	800b888 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
                          |USB_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8008f80:	2201      	movs	r2, #1
 8008f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f86:	485f      	ldr	r0, [pc, #380]	; (8009104 <MX_GPIO_Init+0x210>)
 8008f88:	f002 fc7e 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f92:	485c      	ldr	r0, [pc, #368]	; (8009104 <MX_GPIO_Init+0x210>)
 8008f94:	f002 fc78 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f9e:	4859      	ldr	r0, [pc, #356]	; (8009104 <MX_GPIO_Init+0x210>)
 8008fa0:	f002 fc72 	bl	800b888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008faa:	4856      	ldr	r0, [pc, #344]	; (8009104 <MX_GPIO_Init+0x210>)
 8008fac:	f002 fc6c 	bl	800b888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin|LCD_EN_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2107      	movs	r1, #7
 8008fb4:	4853      	ldr	r0, [pc, #332]	; (8009104 <MX_GPIO_Init+0x210>)
 8008fb6:	f002 fc67 	bl	800b888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8008fba:	2306      	movs	r3, #6
 8008fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fca:	f107 0314 	add.w	r3, r7, #20
 8008fce:	4619      	mov	r1, r3
 8008fd0:	484a      	ldr	r0, [pc, #296]	; (80090fc <MX_GPIO_Init+0x208>)
 8008fd2:	f002 fb7d 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fe6:	f107 0314 	add.w	r3, r7, #20
 8008fea:	4619      	mov	r1, r3
 8008fec:	4845      	ldr	r0, [pc, #276]	; (8009104 <MX_GPIO_Init+0x210>)
 8008fee:	f002 fb6f 	bl	800b6d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1G_Pin|LED2G_Pin|LED2R_Pin|LED1R_Pin;
 8008ff2:	f44f 4331 	mov.w	r3, #45312	; 0xb100
 8008ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008ff8:	2311      	movs	r3, #17
 8008ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009000:	2300      	movs	r3, #0
 8009002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009004:	f107 0314 	add.w	r3, r7, #20
 8009008:	4619      	mov	r1, r3
 800900a:	483e      	ldr	r0, [pc, #248]	; (8009104 <MX_GPIO_Init+0x210>)
 800900c:	f002 fb60 	bl	800b6d0 <HAL_GPIO_Init>


  /*Configure GPIO pins : LCD_DB0_LED1R_Pin LCD_DB1_LED1G_Pin LCD_DB2_LED2R_Pin LCD_DB3_LED2G_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 8009010:	23ff      	movs	r3, #255	; 0xff
 8009012:	617b      	str	r3, [r7, #20]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009014:	2301      	movs	r3, #1
 8009016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009018:	2300      	movs	r3, #0
 800901a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800901c:	2303      	movs	r3, #3
 800901e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009020:	f107 0314 	add.w	r3, r7, #20
 8009024:	4619      	mov	r1, r3
 8009026:	4836      	ldr	r0, [pc, #216]	; (8009100 <MX_GPIO_Init+0x20c>)
 8009028:	f002 fb52 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS1_Pin */
  GPIO_InitStruct.Pin = LCD_CS1_Pin;
 800902c:	2310      	movs	r3, #16
 800902e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009030:	2301      	movs	r3, #1
 8009032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009034:	2300      	movs	r3, #0
 8009036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009038:	2303      	movs	r3, #3
 800903a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS1_GPIO_Port, &GPIO_InitStruct);
 800903c:	f107 0314 	add.w	r3, r7, #20
 8009040:	4619      	mov	r1, r3
 8009042:	482e      	ldr	r0, [pc, #184]	; (80090fc <MX_GPIO_Init+0x208>)
 8009044:	f002 fb44 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS2_Pin|LCD_RST_Pin;
 8009048:	2305      	movs	r3, #5
 800904a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800904c:	2301      	movs	r3, #1
 800904e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009050:	2300      	movs	r3, #0
 8009052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009054:	2303      	movs	r3, #3
 8009056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009058:	f107 0314 	add.w	r3, r7, #20
 800905c:	4619      	mov	r1, r3
 800905e:	4829      	ldr	r0, [pc, #164]	; (8009104 <MX_GPIO_Init+0x210>)
 8009060:	f002 fb36 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_DISPLAY_Pin SW_FUEL2_Pin SW_FUEL1_Pin BUT_CANCEL_Pin */
  GPIO_InitStruct.Pin = SW_DISPLAY_Pin|SW_FUEL2_Pin|SW_FUEL1_Pin|BUT_CANCEL_Pin;
 8009064:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
 8009068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800906a:	2300      	movs	r3, #0
 800906c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800906e:	2301      	movs	r3, #1
 8009070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009072:	f107 0314 	add.w	r3, r7, #20
 8009076:	4619      	mov	r1, r3
 8009078:	4820      	ldr	r0, [pc, #128]	; (80090fc <MX_GPIO_Init+0x208>)
 800907a:	f002 fb29 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800907e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009084:	2302      	movs	r3, #2
 8009086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009088:	2300      	movs	r3, #0
 800908a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800908c:	2303      	movs	r3, #3
 800908e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009090:	230a      	movs	r3, #10
 8009092:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009094:	f107 0314 	add.w	r3, r7, #20
 8009098:	4619      	mov	r1, r3
 800909a:	4819      	ldr	r0, [pc, #100]	; (8009100 <MX_GPIO_Init+0x20c>)
 800909c:	f002 fb18 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_RST_Pin */
  GPIO_InitStruct.Pin = USB_RST_Pin;
 80090a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090a6:	2301      	movs	r3, #1
 80090a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090ae:	2300      	movs	r3, #0
 80090b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RST_GPIO_Port, &GPIO_InitStruct);
 80090b2:	f107 0314 	add.w	r3, r7, #20
 80090b6:	4619      	mov	r1, r3
 80090b8:	4811      	ldr	r0, [pc, #68]	; (8009100 <MX_GPIO_Init+0x20c>)
 80090ba:	f002 fb09 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_ENTER_Pin */
  GPIO_InitStruct.Pin = BUT_ENTER_Pin;
 80090be:	2304      	movs	r3, #4
 80090c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090c2:	2300      	movs	r3, #0
 80090c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80090c6:	2301      	movs	r3, #1
 80090c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_ENTER_GPIO_Port, &GPIO_InitStruct);
 80090ca:	f107 0314 	add.w	r3, r7, #20
 80090ce:	4619      	mov	r1, r3
 80090d0:	480d      	ldr	r0, [pc, #52]	; (8009108 <MX_GPIO_Init+0x214>)
 80090d2:	f002 fafd 	bl	800b6d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_UP_Pin BUT_DOWN_Pin */
  GPIO_InitStruct.Pin = BUT_LEFT_Pin|BUT_RIGHT_Pin|BUT_UP_Pin|BUT_DOWN_Pin;
 80090d6:	23f0      	movs	r3, #240	; 0xf0
 80090d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090da:	2300      	movs	r3, #0
 80090dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80090de:	2301      	movs	r3, #1
 80090e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090e2:	f107 0314 	add.w	r3, r7, #20
 80090e6:	4619      	mov	r1, r3
 80090e8:	4806      	ldr	r0, [pc, #24]	; (8009104 <MX_GPIO_Init+0x210>)
 80090ea:	f002 faf1 	bl	800b6d0 <HAL_GPIO_Init>

}
 80090ee:	bf00      	nop
 80090f0:	3728      	adds	r7, #40	; 0x28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40023800 	.word	0x40023800
 80090fc:	40020800 	.word	0x40020800
 8009100:	40020000 	.word	0x40020000
 8009104:	40020400 	.word	0x40020400
 8009108:	40020c00 	.word	0x40020c00

0800910c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009110:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009112:	e7fe      	b.n	8009112 <Error_Handler+0x6>

08009114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800911a:	4b11      	ldr	r3, [pc, #68]	; (8009160 <HAL_MspInit+0x4c>)
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	4a10      	ldr	r2, [pc, #64]	; (8009160 <HAL_MspInit+0x4c>)
 8009120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009124:	6413      	str	r3, [r2, #64]	; 0x40
 8009126:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <HAL_MspInit+0x4c>)
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912e:	607b      	str	r3, [r7, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009132:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <HAL_MspInit+0x4c>)
 8009134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009136:	4a0a      	ldr	r2, [pc, #40]	; (8009160 <HAL_MspInit+0x4c>)
 8009138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800913c:	6453      	str	r3, [r2, #68]	; 0x44
 800913e:	4b08      	ldr	r3, [pc, #32]	; (8009160 <HAL_MspInit+0x4c>)
 8009140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800914a:	2200      	movs	r2, #0
 800914c:	210f      	movs	r1, #15
 800914e:	f06f 0001 	mvn.w	r0, #1
 8009152:	f001 fff7 	bl	800b144 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009156:	bf00      	nop
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	40023800 	.word	0x40023800

08009164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0d      	ldr	r2, [pc, #52]	; (80091a8 <HAL_ADC_MspInit+0x44>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d113      	bne.n	800919e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009176:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <HAL_ADC_MspInit+0x48>)
 8009178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917a:	4a0c      	ldr	r2, [pc, #48]	; (80091ac <HAL_ADC_MspInit+0x48>)
 800917c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009180:	6453      	str	r3, [r2, #68]	; 0x44
 8009182:	4b0a      	ldr	r3, [pc, #40]	; (80091ac <HAL_ADC_MspInit+0x48>)
 8009184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800918e:	2200      	movs	r2, #0
 8009190:	2105      	movs	r1, #5
 8009192:	2012      	movs	r0, #18
 8009194:	f001 ffd6 	bl	800b144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009198:	2012      	movs	r0, #18
 800919a:	f002 f805 	bl	800b1a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	40012000 	.word	0x40012000
 80091ac:	40023800 	.word	0x40023800

080091b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c0:	d10b      	bne.n	80091da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80091c2:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <HAL_TIM_PWM_MspInit+0x38>)
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	4a08      	ldr	r2, [pc, #32]	; (80091e8 <HAL_TIM_PWM_MspInit+0x38>)
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	6413      	str	r3, [r2, #64]	; 0x40
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <HAL_TIM_PWM_MspInit+0x38>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40023800 	.word	0x40023800

080091ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a16      	ldr	r2, [pc, #88]	; (8009254 <HAL_TIM_Base_MspInit+0x68>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d114      	bne.n	8009228 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80091fe:	4b16      	ldr	r3, [pc, #88]	; (8009258 <HAL_TIM_Base_MspInit+0x6c>)
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	4a15      	ldr	r2, [pc, #84]	; (8009258 <HAL_TIM_Base_MspInit+0x6c>)
 8009204:	f043 0320 	orr.w	r3, r3, #32
 8009208:	6413      	str	r3, [r2, #64]	; 0x40
 800920a:	4b13      	ldr	r3, [pc, #76]	; (8009258 <HAL_TIM_Base_MspInit+0x6c>)
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8009216:	2200      	movs	r2, #0
 8009218:	2102      	movs	r1, #2
 800921a:	2037      	movs	r0, #55	; 0x37
 800921c:	f001 ff92 	bl	800b144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009220:	2037      	movs	r0, #55	; 0x37
 8009222:	f001 ffc1 	bl	800b1a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8009226:	e010      	b.n	800924a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a0b      	ldr	r2, [pc, #44]	; (800925c <HAL_TIM_Base_MspInit+0x70>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d10b      	bne.n	800924a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_TIM_Base_MspInit+0x6c>)
 8009234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009236:	4a08      	ldr	r2, [pc, #32]	; (8009258 <HAL_TIM_Base_MspInit+0x6c>)
 8009238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800923c:	6453      	str	r3, [r2, #68]	; 0x44
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <HAL_TIM_Base_MspInit+0x6c>)
 8009240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009246:	60bb      	str	r3, [r7, #8]
 8009248:	68bb      	ldr	r3, [r7, #8]
}
 800924a:	bf00      	nop
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	40001400 	.word	0x40001400
 8009258:	40023800 	.word	0x40023800
 800925c:	40014400 	.word	0x40014400

08009260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009268:	f107 0314 	add.w	r3, r7, #20
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	609a      	str	r2, [r3, #8]
 8009274:	60da      	str	r2, [r3, #12]
 8009276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009280:	d11d      	bne.n	80092be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009282:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <HAL_TIM_MspPostInit+0x88>)
 8009284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009286:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <HAL_TIM_MspPostInit+0x88>)
 8009288:	f043 0302 	orr.w	r3, r3, #2
 800928c:	6313      	str	r3, [r2, #48]	; 0x30
 800928e:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <HAL_TIM_MspPostInit+0x88>)
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LCD_LED_TIM2_CH3_Pin;
 800929a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092a0:	2302      	movs	r3, #2
 80092a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092a8:	2300      	movs	r3, #0
 80092aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80092ac:	2301      	movs	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LED_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 80092b0:	f107 0314 	add.w	r3, r7, #20
 80092b4:	4619      	mov	r1, r3
 80092b6:	480d      	ldr	r0, [pc, #52]	; (80092ec <HAL_TIM_MspPostInit+0x8c>)
 80092b8:	f002 fa0a 	bl	800b6d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80092bc:	e010      	b.n	80092e0 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM10)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a0b      	ldr	r2, [pc, #44]	; (80092f0 <HAL_TIM_MspPostInit+0x90>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d10b      	bne.n	80092e0 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <HAL_TIM_MspPostInit+0x88>)
 80092ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092cc:	4a06      	ldr	r2, [pc, #24]	; (80092e8 <HAL_TIM_MspPostInit+0x88>)
 80092ce:	f043 0302 	orr.w	r3, r3, #2
 80092d2:	6313      	str	r3, [r2, #48]	; 0x30
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <HAL_TIM_MspPostInit+0x88>)
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	68fb      	ldr	r3, [r7, #12]
}
 80092e0:	bf00      	nop
 80092e2:	3728      	adds	r7, #40	; 0x28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40023800 	.word	0x40023800
 80092ec:	40020400 	.word	0x40020400
 80092f0:	40014400 	.word	0x40014400

080092f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08c      	sub	sp, #48	; 0x30
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092fc:	f107 031c 	add.w	r3, r7, #28
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	605a      	str	r2, [r3, #4]
 8009306:	609a      	str	r2, [r3, #8]
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a96      	ldr	r2, [pc, #600]	; (800956c <HAL_UART_MspInit+0x278>)
 8009312:	4293      	cmp	r3, r2
 8009314:	f040 8091 	bne.w	800943a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009318:	4b95      	ldr	r3, [pc, #596]	; (8009570 <HAL_UART_MspInit+0x27c>)
 800931a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931c:	4a94      	ldr	r2, [pc, #592]	; (8009570 <HAL_UART_MspInit+0x27c>)
 800931e:	f043 0310 	orr.w	r3, r3, #16
 8009322:	6453      	str	r3, [r2, #68]	; 0x44
 8009324:	4b92      	ldr	r3, [pc, #584]	; (8009570 <HAL_UART_MspInit+0x27c>)
 8009326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009328:	f003 0310 	and.w	r3, r3, #16
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009330:	4b8f      	ldr	r3, [pc, #572]	; (8009570 <HAL_UART_MspInit+0x27c>)
 8009332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009334:	4a8e      	ldr	r2, [pc, #568]	; (8009570 <HAL_UART_MspInit+0x27c>)
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	6313      	str	r3, [r2, #48]	; 0x30
 800933c:	4b8c      	ldr	r3, [pc, #560]	; (8009570 <HAL_UART_MspInit+0x27c>)
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009348:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800934c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800934e:	2302      	movs	r3, #2
 8009350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009352:	2301      	movs	r3, #1
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009356:	2303      	movs	r3, #3
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800935a:	2307      	movs	r3, #7
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800935e:	f107 031c 	add.w	r3, r7, #28
 8009362:	4619      	mov	r1, r3
 8009364:	4883      	ldr	r0, [pc, #524]	; (8009574 <HAL_UART_MspInit+0x280>)
 8009366:	f002 f9b3 	bl	800b6d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800936a:	4b83      	ldr	r3, [pc, #524]	; (8009578 <HAL_UART_MspInit+0x284>)
 800936c:	4a83      	ldr	r2, [pc, #524]	; (800957c <HAL_UART_MspInit+0x288>)
 800936e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009370:	4b81      	ldr	r3, [pc, #516]	; (8009578 <HAL_UART_MspInit+0x284>)
 8009372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009376:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009378:	4b7f      	ldr	r3, [pc, #508]	; (8009578 <HAL_UART_MspInit+0x284>)
 800937a:	2200      	movs	r2, #0
 800937c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800937e:	4b7e      	ldr	r3, [pc, #504]	; (8009578 <HAL_UART_MspInit+0x284>)
 8009380:	2200      	movs	r2, #0
 8009382:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009384:	4b7c      	ldr	r3, [pc, #496]	; (8009578 <HAL_UART_MspInit+0x284>)
 8009386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800938a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800938c:	4b7a      	ldr	r3, [pc, #488]	; (8009578 <HAL_UART_MspInit+0x284>)
 800938e:	2200      	movs	r2, #0
 8009390:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009392:	4b79      	ldr	r3, [pc, #484]	; (8009578 <HAL_UART_MspInit+0x284>)
 8009394:	2200      	movs	r2, #0
 8009396:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009398:	4b77      	ldr	r3, [pc, #476]	; (8009578 <HAL_UART_MspInit+0x284>)
 800939a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800939e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80093a0:	4b75      	ldr	r3, [pc, #468]	; (8009578 <HAL_UART_MspInit+0x284>)
 80093a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80093a6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80093a8:	4b73      	ldr	r3, [pc, #460]	; (8009578 <HAL_UART_MspInit+0x284>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80093ae:	4872      	ldr	r0, [pc, #456]	; (8009578 <HAL_UART_MspInit+0x284>)
 80093b0:	f002 f802 	bl	800b3b8 <HAL_DMA_Init>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80093ba:	f7ff fea7 	bl	800910c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a6d      	ldr	r2, [pc, #436]	; (8009578 <HAL_UART_MspInit+0x284>)
 80093c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80093c4:	4a6c      	ldr	r2, [pc, #432]	; (8009578 <HAL_UART_MspInit+0x284>)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80093ca:	4b6d      	ldr	r3, [pc, #436]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093cc:	4a6d      	ldr	r2, [pc, #436]	; (8009584 <HAL_UART_MspInit+0x290>)
 80093ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80093d0:	4b6b      	ldr	r3, [pc, #428]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093d8:	4b69      	ldr	r3, [pc, #420]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093da:	2240      	movs	r2, #64	; 0x40
 80093dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093de:	4b68      	ldr	r3, [pc, #416]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80093e4:	4b66      	ldr	r3, [pc, #408]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80093ec:	4b64      	ldr	r3, [pc, #400]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093f2:	4b63      	ldr	r3, [pc, #396]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80093f8:	4b61      	ldr	r3, [pc, #388]	; (8009580 <HAL_UART_MspInit+0x28c>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80093fe:	4b60      	ldr	r3, [pc, #384]	; (8009580 <HAL_UART_MspInit+0x28c>)
 8009400:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009404:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009406:	4b5e      	ldr	r3, [pc, #376]	; (8009580 <HAL_UART_MspInit+0x28c>)
 8009408:	2200      	movs	r2, #0
 800940a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800940c:	485c      	ldr	r0, [pc, #368]	; (8009580 <HAL_UART_MspInit+0x28c>)
 800940e:	f001 ffd3 	bl	800b3b8 <HAL_DMA_Init>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8009418:	f7ff fe78 	bl	800910c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a58      	ldr	r2, [pc, #352]	; (8009580 <HAL_UART_MspInit+0x28c>)
 8009420:	669a      	str	r2, [r3, #104]	; 0x68
 8009422:	4a57      	ldr	r2, [pc, #348]	; (8009580 <HAL_UART_MspInit+0x28c>)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8009428:	2200      	movs	r2, #0
 800942a:	2105      	movs	r1, #5
 800942c:	2025      	movs	r0, #37	; 0x25
 800942e:	f001 fe89 	bl	800b144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009432:	2025      	movs	r0, #37	; 0x25
 8009434:	f001 feb8 	bl	800b1a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009438:	e093      	b.n	8009562 <HAL_UART_MspInit+0x26e>
  else if(huart->Instance==USART3)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a52      	ldr	r2, [pc, #328]	; (8009588 <HAL_UART_MspInit+0x294>)
 8009440:	4293      	cmp	r3, r2
 8009442:	f040 808e 	bne.w	8009562 <HAL_UART_MspInit+0x26e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009446:	4b4a      	ldr	r3, [pc, #296]	; (8009570 <HAL_UART_MspInit+0x27c>)
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	4a49      	ldr	r2, [pc, #292]	; (8009570 <HAL_UART_MspInit+0x27c>)
 800944c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009450:	6413      	str	r3, [r2, #64]	; 0x40
 8009452:	4b47      	ldr	r3, [pc, #284]	; (8009570 <HAL_UART_MspInit+0x27c>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800945e:	4b44      	ldr	r3, [pc, #272]	; (8009570 <HAL_UART_MspInit+0x27c>)
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	4a43      	ldr	r2, [pc, #268]	; (8009570 <HAL_UART_MspInit+0x27c>)
 8009464:	f043 0304 	orr.w	r3, r3, #4
 8009468:	6313      	str	r3, [r2, #48]	; 0x30
 800946a:	4b41      	ldr	r3, [pc, #260]	; (8009570 <HAL_UART_MspInit+0x27c>)
 800946c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009476:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800947a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800947c:	2302      	movs	r3, #2
 800947e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009480:	2301      	movs	r3, #1
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009484:	2303      	movs	r3, #3
 8009486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009488:	2307      	movs	r3, #7
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800948c:	f107 031c 	add.w	r3, r7, #28
 8009490:	4619      	mov	r1, r3
 8009492:	483e      	ldr	r0, [pc, #248]	; (800958c <HAL_UART_MspInit+0x298>)
 8009494:	f002 f91c 	bl	800b6d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8009498:	4b3d      	ldr	r3, [pc, #244]	; (8009590 <HAL_UART_MspInit+0x29c>)
 800949a:	4a3e      	ldr	r2, [pc, #248]	; (8009594 <HAL_UART_MspInit+0x2a0>)
 800949c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800949e:	4b3c      	ldr	r3, [pc, #240]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80094a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80094a6:	4b3a      	ldr	r3, [pc, #232]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094ac:	4b38      	ldr	r3, [pc, #224]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80094b2:	4b37      	ldr	r3, [pc, #220]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094ba:	4b35      	ldr	r3, [pc, #212]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094bc:	2200      	movs	r2, #0
 80094be:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094c0:	4b33      	ldr	r3, [pc, #204]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80094c6:	4b32      	ldr	r3, [pc, #200]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094cc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80094ce:	4b30      	ldr	r3, [pc, #192]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80094d4:	4b2e      	ldr	r3, [pc, #184]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80094da:	482d      	ldr	r0, [pc, #180]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094dc:	f001 ff6c 	bl	800b3b8 <HAL_DMA_Init>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 80094e6:	f7ff fe11 	bl	800910c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a28      	ldr	r2, [pc, #160]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80094f0:	4a27      	ldr	r2, [pc, #156]	; (8009590 <HAL_UART_MspInit+0x29c>)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80094f6:	4b28      	ldr	r3, [pc, #160]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 80094f8:	4a28      	ldr	r2, [pc, #160]	; (800959c <HAL_UART_MspInit+0x2a8>)
 80094fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80094fc:	4b26      	ldr	r3, [pc, #152]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 80094fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009502:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009504:	4b24      	ldr	r3, [pc, #144]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 8009506:	2240      	movs	r2, #64	; 0x40
 8009508:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800950a:	4b23      	ldr	r3, [pc, #140]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 800950c:	2200      	movs	r2, #0
 800950e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009510:	4b21      	ldr	r3, [pc, #132]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 8009512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009516:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009518:	4b1f      	ldr	r3, [pc, #124]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 800951a:	2200      	movs	r2, #0
 800951c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800951e:	4b1e      	ldr	r3, [pc, #120]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 8009520:	2200      	movs	r2, #0
 8009522:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8009524:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 8009526:	2200      	movs	r2, #0
 8009528:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800952a:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 800952c:	2200      	movs	r2, #0
 800952e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009530:	4b19      	ldr	r3, [pc, #100]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 8009532:	2200      	movs	r2, #0
 8009534:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8009536:	4818      	ldr	r0, [pc, #96]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 8009538:	f001 ff3e 	bl	800b3b8 <HAL_DMA_Init>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_UART_MspInit+0x252>
      Error_Handler();
 8009542:	f7ff fde3 	bl	800910c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a13      	ldr	r2, [pc, #76]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 800954a:	669a      	str	r2, [r3, #104]	; 0x68
 800954c:	4a12      	ldr	r2, [pc, #72]	; (8009598 <HAL_UART_MspInit+0x2a4>)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8009552:	2200      	movs	r2, #0
 8009554:	2105      	movs	r1, #5
 8009556:	2027      	movs	r0, #39	; 0x27
 8009558:	f001 fdf4 	bl	800b144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800955c:	2027      	movs	r0, #39	; 0x27
 800955e:	f001 fe23 	bl	800b1a8 <HAL_NVIC_EnableIRQ>
}
 8009562:	bf00      	nop
 8009564:	3730      	adds	r7, #48	; 0x30
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	40011000 	.word	0x40011000
 8009570:	40023800 	.word	0x40023800
 8009574:	40020000 	.word	0x40020000
 8009578:	2001055c 	.word	0x2001055c
 800957c:	40026440 	.word	0x40026440
 8009580:	200104b4 	.word	0x200104b4
 8009584:	400264b8 	.word	0x400264b8
 8009588:	40004800 	.word	0x40004800
 800958c:	40020800 	.word	0x40020800
 8009590:	20010310 	.word	0x20010310
 8009594:	40026028 	.word	0x40026028
 8009598:	20010454 	.word	0x20010454
 800959c:	40026058 	.word	0x40026058

080095a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80095a4:	e7fe      	b.n	80095a4 <NMI_Handler+0x4>

080095a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80095a6:	b480      	push	{r7}
 80095a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80095aa:	e7fe      	b.n	80095aa <HardFault_Handler+0x4>

080095ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80095b0:	e7fe      	b.n	80095b0 <MemManage_Handler+0x4>

080095b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80095b2:	b480      	push	{r7}
 80095b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80095b6:	e7fe      	b.n	80095b6 <BusFault_Handler+0x4>

080095b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80095bc:	e7fe      	b.n	80095bc <UsageFault_Handler+0x4>

080095be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80095be:	b480      	push	{r7}
 80095c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80095c2:	bf00      	nop
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80095d0:	f001 fb9c 	bl	800ad0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80095d4:	f005 f95a 	bl	800e88c <xTaskGetSchedulerState>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d001      	beq.n	80095e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80095de:	f005 fd31 	bl	800f044 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80095e2:	bf00      	nop
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80095ec:	4802      	ldr	r0, [pc, #8]	; (80095f8 <DMA1_Stream1_IRQHandler+0x10>)
 80095ee:	f001 ffb1 	bl	800b554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80095f2:	bf00      	nop
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20010310 	.word	0x20010310

080095fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009600:	4802      	ldr	r0, [pc, #8]	; (800960c <DMA1_Stream3_IRQHandler+0x10>)
 8009602:	f001 ffa7 	bl	800b554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8009606:	bf00      	nop
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20010454 	.word	0x20010454

08009610 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009614:	4802      	ldr	r0, [pc, #8]	; (8009620 <ADC_IRQHandler+0x10>)
 8009616:	f001 fc48 	bl	800aeaa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800961a:	bf00      	nop
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20010514 	.word	0x20010514

08009624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009628:	4802      	ldr	r0, [pc, #8]	; (8009634 <USART1_IRQHandler+0x10>)
 800962a:	f003 fbab 	bl	800cd84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800962e:	bf00      	nop
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200105bc 	.word	0x200105bc

08009638 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800963c:	4802      	ldr	r0, [pc, #8]	; (8009648 <USART3_IRQHandler+0x10>)
 800963e:	f003 fba1 	bl	800cd84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009642:	bf00      	nop
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20010370 	.word	0x20010370

0800964c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009650:	4802      	ldr	r0, [pc, #8]	; (800965c <TIM7_IRQHandler+0x10>)
 8009652:	f002 ff44 	bl	800c4de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009656:	bf00      	nop
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20010680 	.word	0x20010680

08009660 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009664:	4802      	ldr	r0, [pc, #8]	; (8009670 <DMA2_Stream2_IRQHandler+0x10>)
 8009666:	f001 ff75 	bl	800b554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800966a:	bf00      	nop
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	2001055c 	.word	0x2001055c

08009674 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009678:	4802      	ldr	r0, [pc, #8]	; (8009684 <DMA2_Stream7_IRQHandler+0x10>)
 800967a:	f001 ff6b 	bl	800b554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800967e:	bf00      	nop
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200104b4 	.word	0x200104b4

08009688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009690:	4a14      	ldr	r2, [pc, #80]	; (80096e4 <_sbrk+0x5c>)
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <_sbrk+0x60>)
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800969c:	4b13      	ldr	r3, [pc, #76]	; (80096ec <_sbrk+0x64>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80096a4:	4b11      	ldr	r3, [pc, #68]	; (80096ec <_sbrk+0x64>)
 80096a6:	4a12      	ldr	r2, [pc, #72]	; (80096f0 <_sbrk+0x68>)
 80096a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80096aa:	4b10      	ldr	r3, [pc, #64]	; (80096ec <_sbrk+0x64>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d207      	bcs.n	80096c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80096b8:	f007 f9b2 	bl	8010a20 <__errno>
 80096bc:	4602      	mov	r2, r0
 80096be:	230c      	movs	r3, #12
 80096c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80096c2:	f04f 33ff 	mov.w	r3, #4294967295
 80096c6:	e009      	b.n	80096dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80096c8:	4b08      	ldr	r3, [pc, #32]	; (80096ec <_sbrk+0x64>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <_sbrk+0x64>)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	4a05      	ldr	r2, [pc, #20]	; (80096ec <_sbrk+0x64>)
 80096d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20040000 	.word	0x20040000
 80096e8:	00000800 	.word	0x00000800
 80096ec:	2000699c 	.word	0x2000699c
 80096f0:	20010708 	.word	0x20010708

080096f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80096f4:	b480      	push	{r7}
 80096f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <SystemInit+0x28>)
 80096fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fe:	4a07      	ldr	r2, [pc, #28]	; (800971c <SystemInit+0x28>)
 8009700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <SystemInit+0x28>)
 800970a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800970e:	609a      	str	r2, [r3, #8]
#endif
}
 8009710:	bf00      	nop
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	e000ed00 	.word	0xe000ed00

08009720 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009732:	2320      	movs	r3, #32
 8009734:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009736:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800973a:	e00b      	b.n	8009754 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800973c:	4a0c      	ldr	r2, [pc, #48]	; (8009770 <SCB_InvalidateDCache_by_Addr+0x50>)
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4413      	add	r3, r2
 800974a:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	dcf0      	bgt.n	800973c <SCB_InvalidateDCache_by_Addr+0x1c>
 800975a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800975e:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	e000ed00 	.word	0xe000ed00

08009774 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8009786:	2320      	movs	r3, #32
 8009788:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800978a:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800978e:	e00b      	b.n	80097a8 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8009790:	4a0c      	ldr	r2, [pc, #48]	; (80097c4 <SCB_CleanDCache_by_Addr+0x50>)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	4413      	add	r3, r2
 800979e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dcf0      	bgt.n	8009790 <SCB_CleanDCache_by_Addr+0x1c>
 80097ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80097b2:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	e000ed00 	.word	0xe000ed00

080097c8 <Msg_GetSrc>:
static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, etrACIS },
    {{0},{0},{0},{0},{0},{0}, &huart3, etrPC },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	f003 0307 	and.w	r3, r3, #7
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	71fb      	strb	r3, [r7, #7]
 80097ee:	79fb      	ldrb	r3, [r7, #7]
 80097f0:	08db      	lsrs	r3, r3, #3
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0307 	and.w	r3, r3, #7
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d105      	bne.n	8009828 <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ff7d 	bl	8009720 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8009826:	e009      	b.n	800983c <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	4618      	mov	r0, r3
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	4413      	add	r3, r2
 8009836:	4619      	mov	r1, r3
 8009838:	f7ff ff72 	bl	8009720 <SCB_InvalidateDCache_by_Addr>
}
 800983c:	bf00      	nop
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d105      	bne.n	8009868 <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff87 	bl	8009774 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8009866:	e009      	b.n	800987c <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	4618      	mov	r0, r3
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	4619      	mov	r1, r3
 8009878:	f7ff ff7c 	bl	8009774 <SCB_CleanDCache_by_Addr>
}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <calculatePacketId>:

static inline uint16_t calculatePacketId(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
  static uint16_t counter = 0;
  uint16_t returnvalue;
  do
  {
    counter++;
 800988a:	4b19      	ldr	r3, [pc, #100]	; (80098f0 <calculatePacketId+0x6c>)
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	3301      	adds	r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	4b17      	ldr	r3, [pc, #92]	; (80098f0 <calculatePacketId+0x6c>)
 8009894:	801a      	strh	r2, [r3, #0]
    uint16_t localcounter = counter;
 8009896:	4b16      	ldr	r3, [pc, #88]	; (80098f0 <calculatePacketId+0x6c>)
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	81fb      	strh	r3, [r7, #14]
    uint32_t now = Delay_Tick;
 800989c:	4b15      	ldr	r3, [pc, #84]	; (80098f4 <calculatePacketId+0x70>)
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	60bb      	str	r3, [r7, #8]
    uint8_t crcdata[6] = {(localcounter >> 8) & 0xFF,localcounter & 0xFF, (now >> 24) & 0xFF, (now >> 16) & 0xFF, (now >> 8) & 0xFF, now & 0xFF } ;
 80098a2:	89fb      	ldrh	r3, [r7, #14]
 80098a4:	0a1b      	lsrs	r3, r3, #8
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	703b      	strb	r3, [r7, #0]
 80098ac:	89fb      	ldrh	r3, [r7, #14]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	707b      	strb	r3, [r7, #1]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	0e1b      	lsrs	r3, r3, #24
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	70bb      	strb	r3, [r7, #2]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	0c1b      	lsrs	r3, r3, #16
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	70fb      	strb	r3, [r7, #3]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	0a1b      	lsrs	r3, r3, #8
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	713b      	strb	r3, [r7, #4]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	717b      	strb	r3, [r7, #5]
    returnvalue = CRC16_Generate(crcdata, sizeof(crcdata));
 80098d0:	463b      	mov	r3, r7
 80098d2:	2106      	movs	r1, #6
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fd ff8d 	bl	80077f4 <CRC16_Generate>
 80098da:	4603      	mov	r3, r0
 80098dc:	80fb      	strh	r3, [r7, #6]
  } while(returnvalue == 0);
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d0d2      	beq.n	800988a <calculatePacketId+0x6>
  return returnvalue;
 80098e4:	88fb      	ldrh	r3, [r7, #6]

}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200069ac 	.word	0x200069ac
 80098f4:	40000c00 	.word	0x40000c00

080098f8 <packager>:

static inline void packager(sGetterHandle* xHandle, uint8_t* xMsgPtr, uint16_t xMsgLen, eTransChannels xChaDest, uint16_t aPacketId) {
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4611      	mov	r1, r2
 8009904:	461a      	mov	r2, r3
 8009906:	460b      	mov	r3, r1
 8009908:	80fb      	strh	r3, [r7, #6]
 800990a:	4613      	mov	r3, r2
 800990c:	717b      	strb	r3, [r7, #5]

    if (xHandle && xMsgLen<MAX_PACK_LEN)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 8106 	beq.w	8009b22 <packager+0x22a>
 8009916:	88fb      	ldrh	r3, [r7, #6]
 8009918:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800991c:	f080 8101 	bcs.w	8009b22 <packager+0x22a>
    {
        uint16_t aCrc15 = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	823b      	strh	r3, [r7, #16]
        uint16_t aTotLen = xMsgLen ? xMsgLen + 10 : 8;
 8009924:	88fb      	ldrh	r3, [r7, #6]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <packager+0x3a>
 800992a:	88fb      	ldrh	r3, [r7, #6]
 800992c:	330a      	adds	r3, #10
 800992e:	b29b      	uxth	r3, r3
 8009930:	e000      	b.n	8009934 <packager+0x3c>
 8009932:	2308      	movs	r3, #8
 8009934:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = ( etrCTRL | ( xChaDest << 3 ) ) & HEADER_MASK_BITS;
 8009936:	797b      	ldrb	r3, [r7, #5]
 8009938:	00db      	lsls	r3, r3, #3
 800993a:	b25b      	sxtb	r3, r3
 800993c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009940:	b25b      	sxtb	r3, r3
 8009942:	f043 0303 	orr.w	r3, r3, #3
 8009946:	b25b      	sxtb	r3, r3
 8009948:	74fb      	strb	r3, [r7, #19]


        xHandle->BufSender[0] = 0x55;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8009950:	2255      	movs	r2, #85	; 0x55
 8009952:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[1] = 0x55;
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	f241 0381 	movw	r3, #4225	; 0x1081
 800995a:	4413      	add	r3, r2
 800995c:	2255      	movs	r2, #85	; 0x55
 800995e:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[2] = aHeadByte;
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	f241 0382 	movw	r3, #4226	; 0x1082
 8009966:	4413      	add	r3, r2
 8009968:	7cfa      	ldrb	r2, [r7, #19]
 800996a:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[3] = aTotLen & 0xFF;
 800996c:	8abb      	ldrh	r3, [r7, #20]
 800996e:	b2d9      	uxtb	r1, r3
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	f241 0383 	movw	r3, #4227	; 0x1083
 8009976:	4413      	add	r3, r2
 8009978:	460a      	mov	r2, r1
 800997a:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[4] = (aTotLen >> 8) & 0xFF;
 800997c:	8abb      	ldrh	r3, [r7, #20]
 800997e:	0a1b      	lsrs	r3, r3, #8
 8009980:	b29b      	uxth	r3, r3
 8009982:	b2d9      	uxtb	r1, r3
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	f241 0384 	movw	r3, #4228	; 0x1084
 800998a:	4413      	add	r3, r2
 800998c:	460a      	mov	r2, r1
 800998e:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[5] = aPacketId & 0xFF;
 8009990:	8c3b      	ldrh	r3, [r7, #32]
 8009992:	b2d9      	uxtb	r1, r3
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	f241 0385 	movw	r3, #4229	; 0x1085
 800999a:	4413      	add	r3, r2
 800999c:	460a      	mov	r2, r1
 800999e:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[6] = (aPacketId >> 8) & 0xFF;
 80099a0:	8c3b      	ldrh	r3, [r7, #32]
 80099a2:	0a1b      	lsrs	r3, r3, #8
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	b2d9      	uxtb	r1, r3
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	f241 0386 	movw	r3, #4230	; 0x1086
 80099ae:	4413      	add	r3, r2
 80099b0:	460a      	mov	r2, r1
 80099b2:	701a      	strb	r2, [r3, #0]
        xHandle->BufSender[7] = CRC8_Generate(xHandle->BufSender, 7);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80099ba:	2107      	movs	r1, #7
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fd ff51 	bl	8007864 <CRC8_Generate>
 80099c2:	4603      	mov	r3, r0
 80099c4:	4619      	mov	r1, r3
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	f241 0387 	movw	r3, #4231	; 0x1087
 80099cc:	4413      	add	r3, r2
 80099ce:	460a      	mov	r2, r1
 80099d0:	701a      	strb	r2, [r3, #0]


        if (xMsgLen)
 80099d2:	88fb      	ldrh	r3, [r7, #6]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d013      	beq.n	8009a00 <packager+0x108>
        {
          memcpy(&xHandle->BufSender[8], xMsgPtr, xMsgLen);
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	f241 0388 	movw	r3, #4232	; 0x1088
 80099de:	4413      	add	r3, r2
 80099e0:	88fa      	ldrh	r2, [r7, #6]
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f007 f845 	bl	8010a74 <memcpy>
          aCrc15 = CRC16_Generate(xHandle->BufSender, xMsgLen + 8);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f503 5284 	add.w	r2, r3, #4224	; 0x1080
 80099f0:	88fb      	ldrh	r3, [r7, #6]
 80099f2:	3308      	adds	r3, #8
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fd fefc 	bl	80077f4 <CRC16_Generate>
 80099fc:	4603      	mov	r3, r0
 80099fe:	823b      	strh	r3, [r7, #16]
        }

        uint8_t handled = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	75fb      	strb	r3, [r7, #23]

        if(!protIsSome(&xHandle->xTxFifo))
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a0a:	4413      	add	r3, r2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 f909 	bl	800ac24 <protIsSome>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d149      	bne.n	8009aac <packager+0x1b4>
        {
          taskENTER_CRITICAL();
 8009a18:	f005 faa4 	bl	800ef64 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009a22:	4413      	add	r3, r2
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d13d      	bne.n	8009aa8 <packager+0x1b0>
          {
            xHandle->TxBusy = 1;
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009a32:	4413      	add	r3, r2
 8009a34:	2201      	movs	r2, #1
 8009a36:	701a      	strb	r2, [r3, #0]
            handled = 1;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8009a3c:	f005 fab8 	bl	800efb0 <vPortExitCritical>

            memcpy(&xHandle->BufTx[0],xHandle->BufSender,8);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	4619      	mov	r1, r3
 8009a50:	f007 f810 	bl	8010a74 <memcpy>
            if (xMsgLen) {
 8009a54:	88fb      	ldrh	r3, [r7, #6]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d012      	beq.n	8009a80 <packager+0x188>
              memcpy(&xHandle->BufTx[8], &xHandle->BufSender[8],xMsgLen);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	f241 0388 	movw	r3, #4232	; 0x1088
 8009a66:	4413      	add	r3, r2
 8009a68:	88fa      	ldrh	r2, [r7, #6]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	f007 f802 	bl	8010a74 <memcpy>
              memcpy(&xHandle->BufTx[xMsgLen+8], &aCrc15,2);
 8009a70:	88fb      	ldrh	r3, [r7, #6]
 8009a72:	3308      	adds	r3, #8
 8009a74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	8a3a      	ldrh	r2, [r7, #16]
 8009a7e:	801a      	strh	r2, [r3, #0]
            }

            CacheClean(xHandle->BufTx, aTotLen);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009a86:	8aba      	ldrh	r2, [r7, #20]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff feda 	bl	8009844 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, aTotLen);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009a9e:	8aba      	ldrh	r2, [r7, #20]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f003 f87b 	bl	800cb9c <HAL_UART_Transmit_DMA>
 8009aa6:	e001      	b.n	8009aac <packager+0x1b4>
          }
          else taskEXIT_CRITICAL();
 8009aa8:	f005 fa82 	bl	800efb0 <vPortExitCritical>
        }

        if(!handled)
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d137      	bne.n	8009b22 <packager+0x22a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	f241 339c 	movw	r3, #5020	; 0x139c
 8009ab8:	4413      	add	r3, r2
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f004 f93f 	bl	800dd44 <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,xHandle->BufSender,8);
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	f241 3388 	movw	r3, #5000	; 0x1388
 8009acc:	4413      	add	r3, r2
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	f502 5184 	add.w	r1, r2, #4224	; 0x1080
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 f830 	bl	800ab3c <protPushSequence>
          if (xMsgLen) {
 8009adc:	88fb      	ldrh	r3, [r7, #6]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d015      	beq.n	8009b0e <packager+0x216>
              protPushSequence(&xHandle->xTxFifo,&xHandle->BufSender[8],xMsgLen);
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ae8:	4413      	add	r3, r2
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	f241 0188 	movw	r1, #4232	; 0x1088
 8009af0:	4411      	add	r1, r2
 8009af2:	88fa      	ldrh	r2, [r7, #6]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f821 	bl	800ab3c <protPushSequence>
              protPushSequence(&xHandle->xTxFifo,&aCrc15,2);
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b00:	4413      	add	r3, r2
 8009b02:	f107 0110 	add.w	r1, r7, #16
 8009b06:	2202      	movs	r2, #2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 f817 	bl	800ab3c <protPushSequence>
          }
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	f241 339c 	movw	r3, #5020	; 0x139c
 8009b14:	4413      	add	r3, r2
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	f003 ff01 	bl	800d924 <xQueueGenericSend>
        }
    }
}
 8009b22:	bf00      	nop
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <acker>:

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b086      	sub	sp, #24
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	460b      	mov	r3, r1
 8009b34:	807b      	strh	r3, [r7, #2]
 8009b36:	4613      	mov	r3, r2
 8009b38:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 8089 	beq.w	8009c54 <acker+0x12a>
    {
        uint16_t aTotLen = 8;
 8009b42:	2308      	movs	r3, #8
 8009b44:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrCTRL | ( xChaDest << 3 ) ) | HEADER_ACK_BIT) & HEADER_MASK_BITS;
 8009b46:	787b      	ldrb	r3, [r7, #1]
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	b25b      	sxtb	r3, r3
 8009b4c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8009b50:	b25b      	sxtb	r3, r3
 8009b52:	f043 0303 	orr.w	r3, r3, #3
 8009b56:	b25b      	sxtb	r3, r3
 8009b58:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 8009b5a:	2355      	movs	r3, #85	; 0x55
 8009b5c:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 8009b5e:	2355      	movs	r3, #85	; 0x55
 8009b60:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 8009b62:	7cfb      	ldrb	r3, [r7, #19]
 8009b64:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 8009b66:	8abb      	ldrh	r3, [r7, #20]
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 8009b6c:	8abb      	ldrh	r3, [r7, #20]
 8009b6e:	0a1b      	lsrs	r3, r3, #8
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 8009b76:	887b      	ldrh	r3, [r7, #2]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 8009b7c:	887b      	ldrh	r3, [r7, #2]
 8009b7e:	0a1b      	lsrs	r3, r3, #8
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 8009b86:	f107 0308 	add.w	r3, r7, #8
 8009b8a:	2107      	movs	r1, #7
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fd fe69 	bl	8007864 <CRC8_Generate>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ba0:	4413      	add	r3, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 f83e 	bl	800ac24 <protIsSome>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d131      	bne.n	8009c12 <acker+0xe8>
        {
          taskENTER_CRITICAL();
 8009bae:	f005 f9d9 	bl	800ef64 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009bb8:	4413      	add	r3, r2
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d125      	bne.n	8009c0e <acker+0xe4>
          {
            xHandle->TxBusy = 1;
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009bc8:	4413      	add	r3, r2
 8009bca:	2201      	movs	r2, #1
 8009bcc:	701a      	strb	r2, [r3, #0]
            handled = 1;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8009bd2:	f005 f9ed 	bl	800efb0 <vPortExitCritical>
            memcpy(xHandle->BufTx,header,8);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f107 0308 	add.w	r3, r7, #8
 8009be2:	cb03      	ldmia	r3!, {r0, r1}
 8009be4:	6010      	str	r0, [r2, #0]
 8009be6:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009bee:	2108      	movs	r1, #8
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff fe27 	bl	8009844 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009c04:	2208      	movs	r2, #8
 8009c06:	4619      	mov	r1, r3
 8009c08:	f002 ffc8 	bl	800cb9c <HAL_UART_Transmit_DMA>
 8009c0c:	e001      	b.n	8009c12 <acker+0xe8>
          }
          else taskEXIT_CRITICAL();
 8009c0e:	f005 f9cf 	bl	800efb0 <vPortExitCritical>
        }

        if(!handled)
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11d      	bne.n	8009c54 <acker+0x12a>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	f241 339c 	movw	r3, #5020	; 0x139c
 8009c1e:	4413      	add	r3, r2
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f04f 31ff 	mov.w	r1, #4294967295
 8009c26:	4618      	mov	r0, r3
 8009c28:	f004 f88c 	bl	800dd44 <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,header,8);
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c32:	4413      	add	r3, r2
 8009c34:	f107 0108 	add.w	r1, r7, #8
 8009c38:	2208      	movs	r2, #8
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 ff7e 	bl	800ab3c <protPushSequence>
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	f241 339c 	movw	r3, #5020	; 0x139c
 8009c46:	4413      	add	r3, r2
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	2100      	movs	r1, #0
 8009c50:	f003 fe68 	bl	800d924 <xQueueGenericSend>
        }
    }
}
 8009c54:	bf00      	nop
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <xSender>:


int8_t xSender(eTransChannels xChaDest, uint8_t* xMsgPtr, uint32_t xMsgLen)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08a      	sub	sp, #40	; 0x28
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	4603      	mov	r3, r0
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	73fb      	strb	r3, [r7, #15]
  uint32_t now = Delay_Tick;
 8009c6a:	4b4d      	ldr	r3, [pc, #308]	; (8009da0 <xSender+0x144>)
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	617b      	str	r3, [r7, #20]

  sGetterHandle * handle = NULL;
 8009c70:	2300      	movs	r3, #0
 8009c72:	61fb      	str	r3, [r7, #28]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8009c74:	2300      	movs	r3, #0
 8009c76:	61bb      	str	r3, [r7, #24]
 8009c78:	e019      	b.n	8009cae <xSender+0x52>
  {
    if(xHandles[i].xChannel == xChaDest)
 8009c7a:	4a4a      	ldr	r2, [pc, #296]	; (8009da4 <xSender+0x148>)
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	f241 31d4 	movw	r1, #5076	; 0x13d4
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	441a      	add	r2, r3
 8009c88:	f241 3384 	movw	r3, #4996	; 0x1384
 8009c8c:	4413      	add	r3, r2
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	7bfa      	ldrb	r2, [r7, #15]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d108      	bne.n	8009ca8 <xSender+0x4c>
    {
      handle = &xHandles[i];
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8009c9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ca0:	4a40      	ldr	r2, [pc, #256]	; (8009da4 <xSender+0x148>)
 8009ca2:	4413      	add	r3, r2
 8009ca4:	61fb      	str	r3, [r7, #28]
      break;
 8009ca6:	e005      	b.n	8009cb4 <xSender+0x58>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	3301      	adds	r3, #1
 8009cac:	61bb      	str	r3, [r7, #24]
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d9e2      	bls.n	8009c7a <xSender+0x1e>
    }
  }

  if(handle)
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d06c      	beq.n	8009d94 <xSender+0x138>
  {
    taskENTER_CRITICAL();
 8009cba:	f005 f953 	bl	800ef64 <vPortEnterCritical>
    if(NeedAckPacket)
 8009cbe:	4b3a      	ldr	r3, [pc, #232]	; (8009da8 <xSender+0x14c>)
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d045      	beq.n	8009d54 <xSender+0xf8>
    {
      if(ReceivedAckPacket)
 8009cc8:	4b38      	ldr	r3, [pc, #224]	; (8009dac <xSender+0x150>)
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <xSender+0x8a>
      {
        NeedAckPacket = 0;
 8009cd2:	4b35      	ldr	r3, [pc, #212]	; (8009da8 <xSender+0x14c>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	801a      	strh	r2, [r3, #0]
        NeededAckPacketId = 0;
 8009cd8:	4b35      	ldr	r3, [pc, #212]	; (8009db0 <xSender+0x154>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	801a      	strh	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8009cde:	f005 f967 	bl	800efb0 <vPortExitCritical>
        return 1;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e057      	b.n	8009d96 <xSender+0x13a>
      }
      else
      {
        if(DelayDiff(now, LastNotAckedTime) > RETRIES_TIMEOUT)
 8009ce6:	4b33      	ldr	r3, [pc, #204]	; (8009db4 <xSender+0x158>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4619      	mov	r1, r3
 8009cec:	6978      	ldr	r0, [r7, #20]
 8009cee:	f7fd fe7b 	bl	80079e8 <DelayDiff>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d928      	bls.n	8009d4e <xSender+0xf2>
        {
          if(RetriesPacket > RETRIES_MAX)
 8009cfc:	4b2e      	ldr	r3, [pc, #184]	; (8009db8 <xSender+0x15c>)
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b14      	cmp	r3, #20
 8009d04:	d90a      	bls.n	8009d1c <xSender+0xc0>
          {
            NeedAckPacket = 0;
 8009d06:	4b28      	ldr	r3, [pc, #160]	; (8009da8 <xSender+0x14c>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	801a      	strh	r2, [r3, #0]
            NeededAckPacketId = 0;
 8009d0c:	4b28      	ldr	r3, [pc, #160]	; (8009db0 <xSender+0x154>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]
            taskEXIT_CRITICAL();
 8009d12:	f005 f94d 	bl	800efb0 <vPortExitCritical>
            return -1;
 8009d16:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1a:	e03c      	b.n	8009d96 <xSender+0x13a>
          }
          LastNotAckedTime = now;
 8009d1c:	4a25      	ldr	r2, [pc, #148]	; (8009db4 <xSender+0x158>)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	6013      	str	r3, [r2, #0]
          RetriesPacket++;
 8009d22:	4b25      	ldr	r3, [pc, #148]	; (8009db8 <xSender+0x15c>)
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	3301      	adds	r3, #1
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	4b22      	ldr	r3, [pc, #136]	; (8009db8 <xSender+0x15c>)
 8009d2e:	801a      	strh	r2, [r3, #0]
          taskEXIT_CRITICAL();
 8009d30:	f005 f93e 	bl	800efb0 <vPortExitCritical>
          packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <xSender+0x154>)
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	7bf9      	ldrb	r1, [r7, #15]
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	460b      	mov	r3, r1
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	69f8      	ldr	r0, [r7, #28]
 8009d48:	f7ff fdd6 	bl	80098f8 <packager>
 8009d4c:	e022      	b.n	8009d94 <xSender+0x138>
        }
        else taskEXIT_CRITICAL();
 8009d4e:	f005 f92f 	bl	800efb0 <vPortExitCritical>
 8009d52:	e01f      	b.n	8009d94 <xSender+0x138>
      }
    }
    else
    {
      ReceivedAckPacket = 0;
 8009d54:	4b15      	ldr	r3, [pc, #84]	; (8009dac <xSender+0x150>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	801a      	strh	r2, [r3, #0]
      NeedAckPacket = 1;
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <xSender+0x14c>)
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	801a      	strh	r2, [r3, #0]
      LastNotAckedTime = now;
 8009d60:	4a14      	ldr	r2, [pc, #80]	; (8009db4 <xSender+0x158>)
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6013      	str	r3, [r2, #0]
      RetriesPacket = 0;
 8009d66:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <xSender+0x15c>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	801a      	strh	r2, [r3, #0]
      taskEXIT_CRITICAL();
 8009d6c:	f005 f920 	bl	800efb0 <vPortExitCritical>
      NeededAckPacketId = calculatePacketId();
 8009d70:	f7ff fd88 	bl	8009884 <calculatePacketId>
 8009d74:	4603      	mov	r3, r0
 8009d76:	461a      	mov	r2, r3
 8009d78:	4b0d      	ldr	r3, [pc, #52]	; (8009db0 <xSender+0x154>)
 8009d7a:	801a      	strh	r2, [r3, #0]
      packager(handle, xMsgPtr, xMsgLen, xChaDest, NeededAckPacketId);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <xSender+0x154>)
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	7bf9      	ldrb	r1, [r7, #15]
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	69f8      	ldr	r0, [r7, #28]
 8009d90:	f7ff fdb2 	bl	80098f8 <packager>
    }
  }
  return 0;
 8009d94:	2300      	movs	r3, #0

}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	40000c00 	.word	0x40000c00
 8009da4:	200003e0 	.word	0x200003e0
 8009da8:	200069a2 	.word	0x200069a2
 8009dac:	200003d8 	.word	0x200003d8
 8009db0:	200069a4 	.word	0x200069a4
 8009db4:	200069a8 	.word	0x200069a8
 8009db8:	200069a0 	.word	0x200069a0

08009dbc <parser>:

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08c      	sub	sp, #48	; 0x30
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	70fb      	strb	r3, [r7, #3]

	uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
	sGetterHandle * hDest = NULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8009dce:	2300      	movs	r3, #0
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd2:	e019      	b.n	8009e08 <parser+0x4c>
  {
    if(xHandles[i].xChannel == xChaSrc)
 8009dd4:	4aa8      	ldr	r2, [pc, #672]	; (800a078 <parser+0x2bc>)
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	f241 31d4 	movw	r1, #5076	; 0x13d4
 8009ddc:	fb01 f303 	mul.w	r3, r1, r3
 8009de0:	441a      	add	r2, r3
 8009de2:	f241 3384 	movw	r3, #4996	; 0x1384
 8009de6:	4413      	add	r3, r2
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d108      	bne.n	8009e02 <parser+0x46>
    {
      hDest = &xHandles[i];
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	f241 32d4 	movw	r2, #5076	; 0x13d4
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	4a9f      	ldr	r2, [pc, #636]	; (800a078 <parser+0x2bc>)
 8009dfc:	4413      	add	r3, r2
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8009e00:	e005      	b.n	8009e0e <parser+0x52>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	3301      	adds	r3, #1
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d9e2      	bls.n	8009dd4 <parser+0x18>
    }
  }


    switch (xChaDest) {
 8009e0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	f2c0 8112 	blt.w	800a03c <parser+0x280>
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	f340 808e 	ble.w	8009f3a <parser+0x17e>
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	f040 810c 	bne.w	800a03c <parser+0x280>

        case etrCTRL:
        {
            if (xDataLen)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d04f      	beq.n	8009eca <parser+0x10e>
            {
                for(int i = 0; i < 8; i++)
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	623b      	str	r3, [r7, #32]
 8009e2e:	e00a      	b.n	8009e46 <parser+0x8a>
                  protPull(xFifo, &header[i]);
 8009e30:	f107 0210 	add.w	r2, r7, #16
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	4413      	add	r3, r2
 8009e38:	4619      	mov	r1, r3
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 feba 	bl	800abb4 <protPull>
                for(int i = 0; i < 8; i++)
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	3301      	adds	r3, #1
 8009e44:	623b      	str	r3, [r7, #32]
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	2b07      	cmp	r3, #7
 8009e4a:	ddf1      	ble.n	8009e30 <parser+0x74>

                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e50:	e010      	b.n	8009e74 <parser+0xb8>
                {
                  protPull(xFifo, &data);
 8009e52:	f107 0319 	add.w	r3, r7, #25
 8009e56:	4619      	mov	r1, r3
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 feab 	bl	800abb4 <protPull>
                  hDest->BufParser[aCount]=data;
 8009e5e:	7e79      	ldrb	r1, [r7, #25]
 8009e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8009e6a:	460a      	mov	r2, r1
 8009e6c:	701a      	strb	r2, [r3, #0]
                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8009e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e70:	3301      	adds	r3, #1
 8009e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3b0a      	subs	r3, #10
 8009e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d3e9      	bcc.n	8009e52 <parser+0x96>
                }
                protPull(xFifo, &data);
 8009e7e:	f107 0319 	add.w	r3, r7, #25
 8009e82:	4619      	mov	r1, r3
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fe95 	bl	800abb4 <protPull>
                protPull(xFifo, &data);
 8009e8a:	f107 0319 	add.w	r3, r7, #25
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 fe8f 	bl	800abb4 <protPull>

                hDest->BufParser[aCount]=0;
 8009e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	701a      	strb	r2, [r3, #0]

                if(hDest) acker(hDest,xPacketId,xChaSrc);
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <parser+0xfc>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	78fa      	ldrb	r2, [r7, #3]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb4:	f7ff fe39 	bl	8009b2a <acker>

                acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fc feda 	bl	8006c7c <acis_parse_command>
                }
                taskEXIT_CRITICAL();

            }

            break;
 8009ec8:	e0d2      	b.n	800a070 <parser+0x2b4>
                for (aCount = 0; aCount < 8; aCount++)
 8009eca:	2300      	movs	r3, #0
 8009ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ece:	e013      	b.n	8009ef8 <parser+0x13c>
                  for(int i = 0; i < 8; i++)
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e00a      	b.n	8009eec <parser+0x130>
                    protPull(xFifo, &header[i]);
 8009ed6:	f107 0210 	add.w	r2, r7, #16
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	4413      	add	r3, r2
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 fe67 	bl	800abb4 <protPull>
                  for(int i = 0; i < 8; i++)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	61fb      	str	r3, [r7, #28]
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	2b07      	cmp	r3, #7
 8009ef0:	ddf1      	ble.n	8009ed6 <parser+0x11a>
                for (aCount = 0; aCount < 8; aCount++)
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	2b07      	cmp	r3, #7
 8009efc:	d9e8      	bls.n	8009ed0 <parser+0x114>
                taskENTER_CRITICAL();
 8009efe:	f005 f831 	bl	800ef64 <vPortEnterCritical>
                if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 8009f02:	4b5e      	ldr	r3, [pc, #376]	; (800a07c <parser+0x2c0>)
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d013      	beq.n	8009f34 <parser+0x178>
 8009f0c:	4b5c      	ldr	r3, [pc, #368]	; (800a080 <parser+0x2c4>)
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00e      	beq.n	8009f34 <parser+0x178>
 8009f16:	4b5a      	ldr	r3, [pc, #360]	; (800a080 <parser+0x2c4>)
 8009f18:	881b      	ldrh	r3, [r3, #0]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d107      	bne.n	8009f34 <parser+0x178>
 8009f24:	4b57      	ldr	r3, [pc, #348]	; (800a084 <parser+0x2c8>)
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d102      	bne.n	8009f34 <parser+0x178>
                  ReceivedAckPacket = 1;
 8009f2e:	4b55      	ldr	r3, [pc, #340]	; (800a084 <parser+0x2c8>)
 8009f30:	2201      	movs	r2, #1
 8009f32:	801a      	strh	r2, [r3, #0]
                taskEXIT_CRITICAL();
 8009f34:	f005 f83c 	bl	800efb0 <vPortExitCritical>
            break;
 8009f38:	e09a      	b.n	800a070 <parser+0x2b4>
        }

        case etrACIS:
        case etrPC:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b0a      	cmp	r3, #10
 8009f3e:	d902      	bls.n	8009f46 <parser+0x18a>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	e000      	b.n	8009f48 <parser+0x18c>
 8009f46:	2308      	movs	r3, #8
 8009f48:	76bb      	strb	r3, [r7, #26]

          if(hDest)
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d075      	beq.n	800a03c <parser+0x280>
          {

            uint8_t handled = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	76fb      	strb	r3, [r7, #27]
            if(!protIsSome(&hDest->xTxFifo))
 8009f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f56:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f5a:	4413      	add	r3, r2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fe61 	bl	800ac24 <protIsSome>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d13d      	bne.n	8009fe4 <parser+0x228>
            {
              taskENTER_CRITICAL();
 8009f68:	f004 fffc 	bl	800ef64 <vPortEnterCritical>
              if(!hDest->TxBusy)
 8009f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6e:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009f72:	4413      	add	r3, r2
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d131      	bne.n	8009fe0 <parser+0x224>
              {
                hDest->TxBusy = 1;
 8009f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f7e:	f241 33d0 	movw	r3, #5072	; 0x13d0
 8009f82:	4413      	add	r3, r2
 8009f84:	2201      	movs	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
                handled = 1;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	76fb      	strb	r3, [r7, #27]
                taskEXIT_CRITICAL();
 8009f8c:	f005 f810 	bl	800efb0 <vPortExitCritical>

                for (aCount = 0; aCount < sCount; aCount++)
 8009f90:	2300      	movs	r3, #0
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f94:	e00b      	b.n	8009fae <parser+0x1f2>
                {
                  protPull(xFifo, &hDest->BufTx[aCount]);
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f9e:	4413      	add	r3, r2
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fe06 	bl	800abb4 <protPull>
                for (aCount = 0; aCount < sCount; aCount++)
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	3301      	adds	r3, #1
 8009fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fae:	7ebb      	ldrb	r3, [r7, #26]
 8009fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d3ef      	bcc.n	8009f96 <parser+0x1da>
                }

                CacheClean(hDest->BufTx, sCount);
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009fbc:	7eba      	ldrb	r2, [r7, #26]
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff fc3f 	bl	8009844 <CacheClean>
                HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009fd4:	7eba      	ldrb	r2, [r7, #26]
 8009fd6:	b292      	uxth	r2, r2
 8009fd8:	4619      	mov	r1, r3
 8009fda:	f002 fddf 	bl	800cb9c <HAL_UART_Transmit_DMA>
 8009fde:	e001      	b.n	8009fe4 <parser+0x228>
              }
              else taskEXIT_CRITICAL();
 8009fe0:	f004 ffe6 	bl	800efb0 <vPortExitCritical>
            }

            if(!handled)
 8009fe4:	7efb      	ldrb	r3, [r7, #27]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d141      	bne.n	800a06e <parser+0x2b2>
            {
              xSemaphoreTake(xFifo->info.globallock, portMAX_DELAY);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	f04f 31ff 	mov.w	r1, #4294967295
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f003 fea6 	bl	800dd44 <xQueueSemaphoreTake>
              for (aCount = 0; aCount < sCount; aCount++)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ffc:	e012      	b.n	800a024 <parser+0x268>
              {
                protPull(xFifo, &data);
 8009ffe:	f107 0319 	add.w	r3, r7, #25
 800a002:	4619      	mov	r1, r3
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 fdd5 	bl	800abb4 <protPull>
                protPush(&hDest->xTxFifo, &data);
 800a00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a00c:	f241 3388 	movw	r3, #5000	; 0x1388
 800a010:	4413      	add	r3, r2
 800a012:	f107 0219 	add.w	r2, r7, #25
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 fdae 	bl	800ab7a <protPush>
              for (aCount = 0; aCount < sCount; aCount++)
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a020:	3301      	adds	r3, #1
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a024:	7ebb      	ldrb	r3, [r7, #26]
 800a026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a028:	429a      	cmp	r2, r3
 800a02a:	d3e8      	bcc.n	8009ffe <parser+0x242>
              }
              xSemaphoreGive(xFifo->info.globallock);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6958      	ldr	r0, [r3, #20]
 800a030:	2300      	movs	r3, #0
 800a032:	2200      	movs	r2, #0
 800a034:	2100      	movs	r1, #0
 800a036:	f003 fc75 	bl	800d924 <xQueueGenericSend>
            }

            break;
 800a03a:	e018      	b.n	800a06e <parser+0x2b2>
        }
        /* no break */

        default:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b0a      	cmp	r3, #10
 800a040:	d902      	bls.n	800a048 <parser+0x28c>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	e000      	b.n	800a04a <parser+0x28e>
 800a048:	2308      	movs	r3, #8
 800a04a:	76bb      	strb	r3, [r7, #26]
          for (aCount = 0; aCount < sCount; aCount++)
 800a04c:	2300      	movs	r3, #0
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a050:	e008      	b.n	800a064 <parser+0x2a8>
          {
            protPull(xFifo, &data);
 800a052:	f107 0319 	add.w	r3, r7, #25
 800a056:	4619      	mov	r1, r3
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fdab 	bl	800abb4 <protPull>
          for (aCount = 0; aCount < sCount; aCount++)
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	3301      	adds	r3, #1
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a064:	7ebb      	ldrb	r3, [r7, #26]
 800a066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a068:	429a      	cmp	r2, r3
 800a06a:	d3f2      	bcc.n	800a052 <parser+0x296>
          }
          break;
 800a06c:	e000      	b.n	800a070 <parser+0x2b4>
            break;
 800a06e:	bf00      	nop
        }
    }
}
 800a070:	bf00      	nop
 800a072:	3730      	adds	r7, #48	; 0x30
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	200003e0 	.word	0x200003e0
 800a07c:	200069a2 	.word	0x200069a2
 800a080:	200069a4 	.word	0x200069a4
 800a084:	200003d8 	.word	0x200003d8

0800a088 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	f107 030f 	add.w	r3, r7, #15
 800a096:	461a      	mov	r2, r3
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fd99 	bl	800abd2 <protLook>
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	e013      	b.n	800a0e4 <countCRC8+0x3a>
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800a0c2:	4413      	add	r3, r2
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff ffde 	bl	800a088 <lookByte>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a0da:	460a      	mov	r2, r1
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b06      	cmp	r3, #6
 800a0e8:	d9e8      	bls.n	800a0bc <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a0f0:	2107      	movs	r1, #7
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fd fbb6 	bl	8007864 <CRC8_Generate>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 800a0fc:	7afb      	ldrb	r3, [r7, #11]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	e013      	b.n	800a142 <countCRC16+0x3c>
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800a120:	4413      	add	r3, r2
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff ffaf 	bl	800a088 <lookByte>
 800a12a:	4603      	mov	r3, r0
 800a12c:	4619      	mov	r1, r3
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4413      	add	r3, r2
 800a134:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a138:	460a      	mov	r2, r1
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	3b02      	subs	r3, #2
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d3e6      	bcc.n	800a11a <countCRC16+0x14>
    aCrc16 = CRC16_Generate(handle->BufParser, xLen-2);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f503 5290 	add.w	r2, r3, #4608	; 0x1200
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	3b02      	subs	r3, #2
 800a156:	4619      	mov	r1, r3
 800a158:	4610      	mov	r0, r2
 800a15a:	f7fd fb4b 	bl	80077f4 <CRC16_Generate>
 800a15e:	4603      	mov	r3, r0
 800a160:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 800a162:	68bb      	ldr	r3, [r7, #8]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <Getter>:

static void Getter(sGetterHandle * handle)
{
 800a16c:	b5b0      	push	{r4, r5, r7, lr}
 800a16e:	b08c      	sub	sp, #48	; 0x30
 800a170:	af02      	add	r7, sp, #8
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800a17e:	4413      	add	r3, r2
 800a180:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a188:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	f241 33c4 	movw	r3, #5060	; 0x13c4
 800a190:	4413      	add	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800a19a:	4413      	add	r3, r2
 800a19c:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d043      	beq.n	800a23e <Getter+0xd2>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 800a1b6:	6978      	ldr	r0, [r7, #20]
 800a1b8:	f000 fbb4 	bl	800a924 <protGetSize>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	f200 80ad 	bhi.w	800a320 <Getter+0x1b4>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 800a1c6:	69f9      	ldr	r1, [r7, #28]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff ff9c 	bl	800a106 <countCRC16>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	3b02      	subs	r3, #2
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6978      	ldr	r0, [r7, #20]
 800a1d8:	f7ff ff56 	bl	800a088 <lookByte>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	461d      	mov	r5, r3
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6978      	ldr	r0, [r7, #20]
 800a1e8:	f7ff ff4e 	bl	800a088 <lookByte>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	021b      	lsls	r3, r3, #8
 800a1f0:	442b      	add	r3, r5
 800a1f2:	429c      	cmp	r4, r3
 800a1f4:	d11c      	bne.n	800a230 <Getter+0xc4>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800a1f6:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	6978      	ldr	r0, [r7, #20]
 800a1fc:	f7ff ff44 	bl	800a088 <lookByte>
 800a200:	4603      	mov	r3, r0
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff fae0 	bl	80097c8 <Msg_GetSrc>
 800a208:	4603      	mov	r3, r0
 800a20a:	b2dd      	uxtb	r5, r3
 800a20c:	2102      	movs	r1, #2
 800a20e:	6978      	ldr	r0, [r7, #20]
 800a210:	f7ff ff3a 	bl	800a088 <lookByte>
 800a214:	4603      	mov	r3, r0
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fae4 	bl	80097e4 <Msg_GetDest>
 800a21c:	4603      	mov	r3, r0
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	462b      	mov	r3, r5
 800a224:	69fa      	ldr	r2, [r7, #28]
 800a226:	4621      	mov	r1, r4
 800a228:	6978      	ldr	r0, [r7, #20]
 800a22a:	f7ff fdc7 	bl	8009dbc <parser>
 800a22e:	e001      	b.n	800a234 <Getter+0xc8>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 800a230:	2301      	movs	r3, #1
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	61fb      	str	r3, [r7, #28]
 800a23c:	e070      	b.n	800a320 <Getter+0x1b4>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 800a23e:	6978      	ldr	r0, [r7, #20]
 800a240:	f000 fb70 	bl	800a924 <protGetSize>
 800a244:	4603      	mov	r3, r0
 800a246:	2b07      	cmp	r3, #7
 800a248:	d96a      	bls.n	800a320 <Getter+0x1b4>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 800a24a:	2100      	movs	r1, #0
 800a24c:	6978      	ldr	r0, [r7, #20]
 800a24e:	f7ff ff1b 	bl	800a088 <lookByte>
 800a252:	4603      	mov	r3, r0
 800a254:	2b55      	cmp	r3, #85	; 0x55
 800a256:	d161      	bne.n	800a31c <Getter+0x1b0>
 800a258:	2101      	movs	r1, #1
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	f7ff ff14 	bl	800a088 <lookByte>
 800a260:	4603      	mov	r3, r0
 800a262:	2b55      	cmp	r3, #85	; 0x55
 800a264:	d15a      	bne.n	800a31c <Getter+0x1b0>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff ff1f 	bl	800a0aa <countCRC8>
 800a26c:	4603      	mov	r3, r0
 800a26e:	461c      	mov	r4, r3
 800a270:	2107      	movs	r1, #7
 800a272:	6978      	ldr	r0, [r7, #20]
 800a274:	f7ff ff08 	bl	800a088 <lookByte>
 800a278:	4603      	mov	r3, r0
 800a27a:	429c      	cmp	r4, r3
 800a27c:	d14a      	bne.n	800a314 <Getter+0x1a8>
        {
          dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 800a27e:	2103      	movs	r1, #3
 800a280:	6978      	ldr	r0, [r7, #20]
 800a282:	f7ff ff01 	bl	800a088 <lookByte>
 800a286:	4603      	mov	r3, r0
 800a288:	461c      	mov	r4, r3
 800a28a:	2104      	movs	r1, #4
 800a28c:	6978      	ldr	r0, [r7, #20]
 800a28e:	f7ff fefb 	bl	800a088 <lookByte>
 800a292:	4603      	mov	r3, r0
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	4423      	add	r3, r4
 800a298:	61fb      	str	r3, [r7, #28]
          packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 800a29a:	2105      	movs	r1, #5
 800a29c:	6978      	ldr	r0, [r7, #20]
 800a29e:	f7ff fef3 	bl	800a088 <lookByte>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	b29c      	uxth	r4, r3
 800a2a6:	2106      	movs	r1, #6
 800a2a8:	6978      	ldr	r0, [r7, #20]
 800a2aa:	f7ff feed 	bl	800a088 <lookByte>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	4423      	add	r3, r4
 800a2b8:	847b      	strh	r3, [r7, #34]	; 0x22
          if (packetId > 0 && dataLen < MAX_PACK_LEN)
 800a2ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d026      	beq.n	800a30e <Getter+0x1a2>
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a2c6:	d222      	bcs.n	800a30e <Getter+0x1a2>
          {
              if (dataLen>10)
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	2b0a      	cmp	r3, #10
 800a2cc:	d902      	bls.n	800a2d4 <Getter+0x168>
              {
                dataReceiving = 1;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	61bb      	str	r3, [r7, #24]
              if (dataLen>10)
 800a2d2:	e022      	b.n	800a31a <Getter+0x1ae>
              }
              else
              {
                  // Got ShortPackage (Header Only)
                  parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 800a2d4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800a2d6:	2102      	movs	r1, #2
 800a2d8:	6978      	ldr	r0, [r7, #20]
 800a2da:	f7ff fed5 	bl	800a088 <lookByte>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff fa71 	bl	80097c8 <Msg_GetSrc>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	b2dd      	uxtb	r5, r3
 800a2ea:	2102      	movs	r1, #2
 800a2ec:	6978      	ldr	r0, [r7, #20]
 800a2ee:	f7ff fecb 	bl	800a088 <lookByte>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff fa75 	bl	80097e4 <Msg_GetDest>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	462b      	mov	r3, r5
 800a302:	2200      	movs	r2, #0
 800a304:	4621      	mov	r1, r4
 800a306:	6978      	ldr	r0, [r7, #20]
 800a308:	f7ff fd58 	bl	8009dbc <parser>
              if (dataLen>10)
 800a30c:	e005      	b.n	800a31a <Getter+0x1ae>
              }
          }
          else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 800a30e:	2301      	movs	r3, #1
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800a312:	e005      	b.n	800a320 <Getter+0x1b4>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 800a314:	2301      	movs	r3, #1
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 800a318:	e002      	b.n	800a320 <Getter+0x1b4>
 800a31a:	e001      	b.n	800a320 <Getter+0x1b4>
      }
      else { dataSkip=1; } // Wrong sync bytes
 800a31c:	2301      	movs	r3, #1
 800a31e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <Getter+0x1c2>
  {
    protMoveRead(xFifo,dataSkip);
 800a326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a328:	6978      	ldr	r0, [r7, #20]
 800a32a:	f000 fc6a 	bl	800ac02 <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	69ba      	ldr	r2, [r7, #24]
 800a332:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a33e:	801a      	strh	r2, [r3, #0]
}
 800a340:	bf00      	nop
 800a342:	3728      	adds	r7, #40	; 0x28
 800a344:	46bd      	mov	sp, r7
 800a346:	bdb0      	pop	{r4, r5, r7, pc}

0800a348 <xDmaTxIrqHandler>:



void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  uint32_t length = 0;;
 800a350:	2300      	movs	r3, #0
 800a352:	617b      	str	r3, [r7, #20]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a354:	2300      	movs	r3, #0
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	e053      	b.n	800a402 <xDmaTxIrqHandler+0xba>
  {
    handle = &xHandles[i];
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a360:	fb02 f303 	mul.w	r3, r2, r3
 800a364:	4a2a      	ldr	r2, [pc, #168]	; (800a410 <xDmaTxIrqHandler+0xc8>)
 800a366:	4413      	add	r3, r2
 800a368:	60fb      	str	r3, [r7, #12]
    if(huart == handle->xUart)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	429a      	cmp	r2, r3
 800a376:	d141      	bne.n	800a3fc <xDmaTxIrqHandler+0xb4>
    {
      if(protIsSome(&handle->xTxFifo))
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a37e:	4413      	add	r3, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f000 fc4f 	bl	800ac24 <protIsSome>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d030      	beq.n	800a3ee <xDmaTxIrqHandler+0xa6>
      {
        handle->TxBusy = 1;
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800a392:	4413      	add	r3, r2
 800a394:	2201      	movs	r2, #1
 800a396:	701a      	strb	r2, [r3, #0]
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800a398:	bf00      	nop
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	f241 3388 	movw	r3, #5000	; 0x1388
 800a3a0:	4413      	add	r3, r2
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	1c51      	adds	r1, r2, #1
 800a3a6:	6179      	str	r1, [r7, #20]
 800a3a8:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800a3ac:	68f9      	ldr	r1, [r7, #12]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fbfe 	bl	800abb4 <protPull>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <xDmaTxIrqHandler+0x7e>
            && length < MAX_PACK_LEN);
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a3c4:	d3e9      	bcc.n	800a39a <xDmaTxIrqHandler+0x52>
        CacheClean(handle->BufTx, length);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a3cc:	6979      	ldr	r1, [r7, #20]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fa38 	bl	8009844 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	f002 fbd8 	bl	800cb9c <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 800a3ec:	e00c      	b.n	800a408 <xDmaTxIrqHandler+0xc0>
      else handle->TxBusy = 0;
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800a3f4:	4413      	add	r3, r2
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	701a      	strb	r2, [r3, #0]
      break;
 800a3fa:	e005      	b.n	800a408 <xDmaTxIrqHandler+0xc0>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3301      	adds	r3, #1
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d9a8      	bls.n	800a35a <xDmaTxIrqHandler+0x12>
    }
  }
}
 800a408:	bf00      	nop
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	200003e0 	.word	0x200003e0

0800a414 <xDmaErIrqHandler>:

void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e028      	b.n	800a474 <xDmaErIrqHandler+0x60>
  {
    handle = &xHandles[i];
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	4a15      	ldr	r2, [pc, #84]	; (800a484 <xDmaErIrqHandler+0x70>)
 800a42e:	4413      	add	r3, r2
 800a430:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d116      	bne.n	800a46e <xDmaErIrqHandler+0x5a>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800a44e:	4618      	mov	r0, r3
 800a450:	f002 fbea 	bl	800cc28 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a460:	4619      	mov	r1, r3
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a468:	4413      	add	r3, r2
 800a46a:	6019      	str	r1, [r3, #0]
      break;
 800a46c:	e005      	b.n	800a47a <xDmaErIrqHandler+0x66>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d9d3      	bls.n	800a422 <xDmaErIrqHandler+0xe>
    }
  }
}
 800a47a:	bf00      	nop
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	200003e0 	.word	0x200003e0

0800a488 <xFifosInit>:


void xFifosInit(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a48e:	2300      	movs	r3, #0
 800a490:	607b      	str	r3, [r7, #4]
 800a492:	e03f      	b.n	800a514 <xFifosInit+0x8c>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,MAX_PACK_LEN*4);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a49a:	fb02 f203 	mul.w	r2, r2, r3
 800a49e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a4a2:	4413      	add	r3, r2
 800a4a4:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <xFifosInit+0x9c>)
 800a4a6:	1898      	adds	r0, r3, r2
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a4ae:	fb02 f303 	mul.w	r3, r2, r3
 800a4b2:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 800a4b6:	4a1b      	ldr	r2, [pc, #108]	; (800a524 <xFifosInit+0x9c>)
 800a4b8:	1899      	adds	r1, r3, r2
 800a4ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f000 fa4e 	bl	800a960 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,MAX_PACK_LEN*4);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a4ca:	fb02 f303 	mul.w	r3, r2, r3
 800a4ce:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800a4d2:	4a14      	ldr	r2, [pc, #80]	; (800a524 <xFifosInit+0x9c>)
 800a4d4:	4413      	add	r3, r2
 800a4d6:	1d18      	adds	r0, r3, #4
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a4de:	fb02 f303 	mul.w	r3, r2, r3
 800a4e2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800a4e6:	4a0f      	ldr	r2, [pc, #60]	; (800a524 <xFifosInit+0x9c>)
 800a4e8:	1899      	adds	r1, r3, r2
 800a4ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f000 fa36 	bl	800a960 <protInit>
    xHandles[i].RxPointer = 0xFFFFFFFF;
 800a4f4:	4a0b      	ldr	r2, [pc, #44]	; (800a524 <xFifosInit+0x9c>)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f241 31d4 	movw	r1, #5076	; 0x13d4
 800a4fc:	fb01 f303 	mul.w	r3, r1, r3
 800a500:	441a      	add	r2, r3
 800a502:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a506:	4413      	add	r3, r2
 800a508:	f04f 32ff 	mov.w	r2, #4294967295
 800a50c:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3301      	adds	r3, #1
 800a512:	607b      	str	r3, [r7, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d9bc      	bls.n	800a494 <xFifosInit+0xc>
  }
}
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	200003e0 	.word	0x200003e0

0800a528 <xGetterInit>:

void xGetterInit(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a52e:	2300      	movs	r3, #0
 800a530:	607b      	str	r3, [r7, #4]
 800a532:	e026      	b.n	800a582 <xGetterInit+0x5a>
  {
    handle = &xHandles[i];
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a53a:	fb02 f303 	mul.w	r3, r2, r3
 800a53e:	4a14      	ldr	r2, [pc, #80]	; (800a590 <xGetterInit+0x68>)
 800a540:	4413      	add	r3, r2
 800a542:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f44f 7140 	mov.w	r1, #768	; 0x300
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7ff f97a 	bl	8009844 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800a55e:	4618      	mov	r0, r3
 800a560:	f002 fb62 	bl	800cc28 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a570:	4619      	mov	r1, r3
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a578:	4413      	add	r3, r2
 800a57a:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3301      	adds	r3, #1
 800a580:	607b      	str	r3, [r7, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d9d5      	bls.n	800a534 <xGetterInit+0xc>
  }
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200003e0 	.word	0x200003e0

0800a594 <xGetterLoop>:

void xGetterLoop(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b0e6      	sub	sp, #408	; 0x198
 800a598:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a59a:	2300      	movs	r3, #0
 800a59c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a5a0:	e121      	b.n	800a7e6 <xGetterLoop+0x252>
  {
    handle = &xHandles[i];
 800a5a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a5a6:	f241 32d4 	movw	r2, #5076	; 0x13d4
 800a5aa:	fb02 f303 	mul.w	r3, r2, r3
 800a5ae:	4a93      	ldr	r2, [pc, #588]	; (800a7fc <xGetterLoop+0x268>)
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 800a5b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a5ba:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
      dmasize = handle->xUart->RxXferSize;
 800a5ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a5ce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a5d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      if(handle->RxPointer == 0xFFFFFFFF) handle->RxPointer = dmacnt;
 800a5dc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a5e0:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a5e4:	4413      	add	r3, r2
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ec:	d107      	bne.n	800a5fe <xGetterLoop+0x6a>
 800a5ee:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a5f2:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800a5fc:	601a      	str	r2, [r3, #0]
      if(dmacnt > handle->RxPointer)
 800a5fe:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a602:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a606:	4413      	add	r3, r2
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800a60e:	429a      	cmp	r2, r3
 800a610:	d90e      	bls.n	800a630 <xGetterLoop+0x9c>
        length = (dmasize-dmacnt)+handle->RxPointer;
 800a612:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800a616:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800a620:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a624:	440b      	add	r3, r1
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4413      	add	r3, r2
 800a62a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800a62e:	e00a      	b.n	800a646 <xGetterLoop+0xb2>
      else length = handle->RxPointer-dmacnt;
 800a630:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a634:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a638:	4413      	add	r3, r2
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

      if(length > MAX_PACK_LEN) length = MAX_PACK_LEN;
 800a646:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a64a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a64e:	d903      	bls.n	800a658 <xGetterLoop+0xc4>
 800a650:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a654:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      if(length > 0)
 800a658:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d050      	beq.n	800a702 <xGetterLoop+0x16e>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 800a660:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a664:	f44f 7140 	mov.w	r1, #768	; 0x300
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff f8cb 	bl	8009804 <CacheInvalidate>
        for(i=0;i<length;i++)
 800a66e:	2300      	movs	r3, #0
 800a670:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a674:	e034      	b.n	800a6e0 <xGetterLoop+0x14c>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 800a676:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a67a:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a67e:	4413      	add	r3, r2
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a68c:	5cd1      	ldrb	r1, [r2, r3]
 800a68e:	1d3a      	adds	r2, r7, #4
 800a690:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a694:	4413      	add	r3, r2
 800a696:	460a      	mov	r2, r1
 800a698:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 800a69a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a69e:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a6a2:	4413      	add	r3, r2
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d108      	bne.n	800a6bc <xGetterLoop+0x128>
 800a6aa:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a6ae:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	e00c      	b.n	800a6d6 <xGetterLoop+0x142>
          else handle->RxPointer--;
 800a6bc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a6c0:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a6c4:	4413      	add	r3, r2
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	1e5a      	subs	r2, r3, #1
 800a6ca:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800a6ce:	f241 33cc 	movw	r3, #5068	; 0x13cc
 800a6d2:	440b      	add	r3, r1
 800a6d4:	601a      	str	r2, [r3, #0]
        for(i=0;i<length;i++)
 800a6d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a6da:	3301      	adds	r3, #1
 800a6dc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a6e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a6e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d8c4      	bhi.n	800a676 <xGetterLoop+0xe2>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 800a6ec:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a6f0:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800a6f4:	4413      	add	r3, r2
 800a6f6:	1d39      	adds	r1, r7, #4
 800a6f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 fa1d 	bl	800ab3c <protPushSequence>
      }
    } while(length > 0);
 800a702:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a706:	2b00      	cmp	r3, #0
 800a708:	f47f af55 	bne.w	800a5b6 <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 800a70c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a710:	f241 33a4 	movw	r3, #5028	; 0x13a4
 800a714:	4413      	add	r3, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fa84 	bl	800ac24 <protIsSome>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <xGetterLoop+0x196>
    {
      Getter(handle);
 800a722:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800a726:	f7ff fd21 	bl	800a16c <Getter>
    }

    taskENTER_CRITICAL();
 800a72a:	f004 fc1b 	bl	800ef64 <vPortEnterCritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 800a72e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a732:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800a736:	4413      	add	r3, r2
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d14b      	bne.n	800a7d8 <xGetterLoop+0x244>
 800a740:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a744:	f241 3388 	movw	r3, #5000	; 0x1388
 800a748:	4413      	add	r3, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 fa6a 	bl	800ac24 <protIsSome>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d040      	beq.n	800a7d8 <xGetterLoop+0x244>
    {
      length = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
      handle->TxBusy = 1;
 800a75c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a760:	f241 33d0 	movw	r3, #5072	; 0x13d0
 800a764:	4413      	add	r3, r2
 800a766:	2201      	movs	r2, #1
 800a768:	701a      	strb	r2, [r3, #0]
      taskEXIT_CRITICAL();
 800a76a:	f004 fc21 	bl	800efb0 <vPortExitCritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800a76e:	bf00      	nop
 800a770:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800a774:	f241 3388 	movw	r3, #5000	; 0x1388
 800a778:	4413      	add	r3, r2
 800a77a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800a77e:	1c51      	adds	r1, r2, #1
 800a780:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 800a784:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800a788:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 800a78c:	440a      	add	r2, r1
 800a78e:	4611      	mov	r1, r2
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fa0f 	bl	800abb4 <protPull>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d004      	beq.n	800a7a6 <xGetterLoop+0x212>
          && length < MAX_PACK_LEN);
 800a79c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a7a0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a7a4:	d3e4      	bcc.n	800a770 <xGetterLoop+0x1dc>
      CacheClean(handle->BufTx, length);
 800a7a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a7aa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a7ae:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff f846 	bl	8009844 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 800a7b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a7bc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800a7c6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a7ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800a7ce:	b292      	uxth	r2, r2
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	f002 f9e3 	bl	800cb9c <HAL_UART_Transmit_DMA>
 800a7d6:	e001      	b.n	800a7dc <xGetterLoop+0x248>
    }
    else taskEXIT_CRITICAL();
 800a7d8:	f004 fbea 	bl	800efb0 <vPortExitCritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800a7dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a7e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	f67f aed9 	bls.w	800a5a2 <xGetterLoop+0xe>
  }
}
 800a7f0:	bf00      	nop
 800a7f2:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200003e0 	.word	0x200003e0

0800a800 <xGetterTask>:

void xGetterTask(void * arg)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  xGetterInit();
 800a808:	f7ff fe8e 	bl	800a528 <xGetterInit>
  for (;;)
  {
    xGetterLoop();
 800a80c:	f7ff fec2 	bl	800a594 <xGetterLoop>
    TASK_SLEEP;
 800a810:	2001      	movs	r0, #1
 800a812:	f002 fe27 	bl	800d464 <osDelay>
    xGetterLoop();
 800a816:	e7f9      	b.n	800a80c <xGetterTask+0xc>

0800a818 <infoGetSize>:
#include "cmsis_os.h"
#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d305      	bcc.n	800a838 <infoGetSize+0x20>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	e007      	b.n	800a848 <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	1ad2      	subs	r2, r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	4413      	add	r3, r2
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 800a854:	b590      	push	{r4, r7, lr}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681c      	ldr	r4, [r3, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7ff ffd9 	bl	800a818 <infoGetSize>
 800a866:	4603      	mov	r3, r0
 800a868:	1ae3      	subs	r3, r4, r3
 800a86a:	4618      	mov	r0, r3
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd90      	pop	{r4, r7, pc}

0800a872 <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 800a872:	b480      	push	{r7}
 800a874:	b085      	sub	sp, #20
 800a876:	af00      	add	r7, sp, #0
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	607a      	str	r2, [r7, #4]
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4413      	add	r3, r2
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	6812      	ldr	r2, [r2, #0]
 800a88a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88e:	fb02 f201 	mul.w	r2, r2, r1
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	68b9      	ldr	r1, [r7, #8]
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f7ff ffde 	bl	800a872 <infoCorrect>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	bf00      	nop
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	bf14      	ite	ne
 800a8d8:	2301      	movne	r3, #1
 800a8da:	2300      	moveq	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	60f8      	str	r0, [r7, #12]
 800a8f2:	60b9      	str	r1, [r7, #8]
 800a8f4:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(info->lock, portMAX_DELAY);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f04f 31ff 	mov.w	r1, #4294967295
 800a8fe:	4618      	mov	r0, r3
 800a900:	f003 fa20 	bl	800dd44 <xQueueSemaphoreTake>
        infoMovePar(info,param,move);
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	68b9      	ldr	r1, [r7, #8]
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff ffc9 	bl	800a8a0 <infoMovePar>
    xSemaphoreGive(info->lock);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	68d8      	ldr	r0, [r3, #12]
 800a912:	2300      	movs	r3, #0
 800a914:	2200      	movs	r2, #0
 800a916:	2100      	movs	r1, #0
 800a918:	f003 f804 	bl	800d924 <xQueueGenericSend>
}
 800a91c:	bf00      	nop
 800a91e:	3710      	adds	r7, #16
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
    uint32_t value;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	f04f 31ff 	mov.w	r1, #4294967295
 800a934:	4618      	mov	r0, r3
 800a936:	f003 fa05 	bl	800dd44 <xQueueSemaphoreTake>
        value = infoGetSize(&fifo->info);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3304      	adds	r3, #4
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff ff6a 	bl	800a818 <infoGetSize>
 800a944:	4603      	mov	r3, r0
 800a946:	60fb      	str	r3, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6918      	ldr	r0, [r3, #16]
 800a94c:	2300      	movs	r3, #0
 800a94e:	2200      	movs	r2, #0
 800a950:	2100      	movs	r1, #0
 800a952:	f002 ffe7 	bl	800d924 <xQueueGenericSend>
    return value;
 800a956:	68fb      	ldr	r3, [r7, #12]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <protInit>:
        value = infoGetAvail(&fifo->info);
    xSemaphoreGive(fifo->info.lock);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	4613      	mov	r3, r2
 800a96e:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	605a      	str	r2, [r3, #4]
    fifo->info.lock = xSemaphoreCreateMutex();
 800a97c:	2001      	movs	r0, #1
 800a97e:	f003 f8c0 	bl	800db02 <xQueueCreateMutex>
 800a982:	4602      	mov	r2, r0
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	611a      	str	r2, [r3, #16]
    fifo->info.globallock = xSemaphoreCreateMutex();
 800a988:	2001      	movs	r0, #1
 800a98a:	f003 f8ba 	bl	800db02 <xQueueCreateMutex>
 800a98e:	4602      	mov	r2, r0
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	615a      	str	r2, [r3, #20]
    fifo->info.read = 0;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	765a      	strb	r2, [r3, #25]
    fifo->info.elemsize = xElemSize;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	79fa      	ldrb	r2, [r7, #7]
 800a9aa:	761a      	strb	r2, [r3, #24]
}
 800a9ac:	bf00      	nop
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <interPut>:
        fifo->info.write = 0;
        fifo->info.overflow = 0;
    xSemaphoreGive(fifo->info.lock);
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	7e12      	ldrb	r2, [r2, #24]
 800a9cc:	fb02 f303 	mul.w	r3, r2, r3
 800a9d0:	440b      	add	r3, r1
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	7e1b      	ldrb	r3, [r3, #24]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	f006 f84a 	bl	8010a74 <memcpy>
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	7e12      	ldrb	r2, [r2, #24]
 800aa00:	fb02 f303 	mul.w	r3, r2, r3
 800aa04:	440b      	add	r3, r1
 800aa06:	4619      	mov	r1, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7e1b      	ldrb	r3, [r3, #24]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6838      	ldr	r0, [r7, #0]
 800aa10:	f006 f830 	bl	8010a74 <memcpy>
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	7e1b      	ldrb	r3, [r3, #24]
 800aa32:	4619      	mov	r1, r3
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	fb03 f301 	mul.w	r3, r3, r1
 800aa3a:	4413      	add	r3, r2
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	7e1b      	ldrb	r3, [r3, #24]
 800aa42:	461a      	mov	r2, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f006 f815 	bl	8010a74 <memcpy>
}
 800aa4a:	bf00      	nop
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <interPush>:

static inline uint32_t interPush(sProFIFO* fifo, void* xData) {
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff fef7 	bl	800a854 <infoGetAvail>
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00c      	beq.n	800aa88 <interPush+0x36>
        interPut(fifo,xData);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7ff ff9f 	bl	800a9b4 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	1d18      	adds	r0, r3, #4
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	330c      	adds	r3, #12
 800aa7e:	2201      	movs	r2, #1
 800aa80:	4619      	mov	r1, r3
 800aa82:	f7ff ff0d 	bl	800a8a0 <infoMovePar>
 800aa86:	e002      	b.n	800aa8e <interPush+0x3c>
    } else { fifo->info.overflow=1; }
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	765a      	strb	r2, [r3, #25]
    return retval;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <interPull>:

static inline uint32_t interPull(sProFIFO* fifo, void* xDest) {
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff ff0c 	bl	800a8c4 <infoIsSome>
 800aaac:	4603      	mov	r3, r0
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00b      	beq.n	800aace <interPull+0x36>
        interGet(fifo,xDest);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff ff95 	bl	800a9e8 <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	1d18      	adds	r0, r3, #4
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3308      	adds	r3, #8
 800aac6:	2201      	movs	r2, #1
 800aac8:	4619      	mov	r1, r3
 800aaca:	f7ff fee9 	bl	800a8a0 <infoMovePar>
    }
    return retval;
 800aace:	68fb      	ldr	r3, [r7, #12]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <interPushSequence>:

static inline uint32_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
    uint32_t retval = 0; uint32_t i;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
    if(infoGetAvail(&fifo->info) >= xCount)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff feb1 	bl	800a854 <infoGetAvail>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d81b      	bhi.n	800ab32 <interPushSequence+0x5a>
    {
      for (i=0; i<xCount; i++) {
 800aafa:	2300      	movs	r3, #0
 800aafc:	613b      	str	r3, [r7, #16]
 800aafe:	e012      	b.n	800ab26 <interPushSequence+0x4e>
          if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	7e1b      	ldrb	r3, [r3, #24]
 800ab04:	461a      	mov	r2, r3
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	fb03 f202 	mul.w	r2, r3, r2
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	4413      	add	r3, r2
 800ab10:	4619      	mov	r1, r3
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7ff ff9d 	bl	800aa52 <interPush>
 800ab18:	6178      	str	r0, [r7, #20]
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d007      	beq.n	800ab30 <interPushSequence+0x58>
      for (i=0; i<xCount; i++) {
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3301      	adds	r3, #1
 800ab24:	613b      	str	r3, [r7, #16]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d3e8      	bcc.n	800ab00 <interPushSequence+0x28>
 800ab2e:	e000      	b.n	800ab32 <interPushSequence+0x5a>
          if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 800ab30:	bf00      	nop
      }
    }
    return retval;
 800ab32:	697b      	ldr	r3, [r7, #20]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <protPushSequence>:

uint32_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	f04f 31ff 	mov.w	r1, #4294967295
 800ab50:	4618      	mov	r0, r3
 800ab52:	f003 f8f7 	bl	800dd44 <xQueueSemaphoreTake>
        retval=interPushSequence(fifo,xData,xCount);
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7ff ffbc 	bl	800aad8 <interPushSequence>
 800ab60:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(fifo->info.lock);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6918      	ldr	r0, [r3, #16]
 800ab66:	2300      	movs	r3, #0
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	f002 feda 	bl	800d924 <xQueueGenericSend>
    return retval;
 800ab70:	697b      	ldr	r3, [r7, #20]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <protPush>:

uint32_t protPush(sProFIFO* fifo, void* xData) {
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	6039      	str	r1, [r7, #0]
    uint32_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	f04f 31ff 	mov.w	r1, #4294967295
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f003 f8d9 	bl	800dd44 <xQueueSemaphoreTake>
        retval=interPush(fifo,xData);
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff ff5c 	bl	800aa52 <interPush>
 800ab9a:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6918      	ldr	r0, [r3, #16]
 800aba0:	2300      	movs	r3, #0
 800aba2:	2200      	movs	r2, #0
 800aba4:	2100      	movs	r1, #0
 800aba6:	f002 febd 	bl	800d924 <xQueueGenericSend>
    return retval;
 800abaa:	68fb      	ldr	r3, [r7, #12]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <protPull>:

uint32_t protPull(sProFIFO* fifo, void* xDest) {
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
    uint32_t retval;
        retval=interPull(fifo,xDest);
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff ff69 	bl	800aa98 <interPull>
 800abc6:	60f8      	str	r0, [r7, #12]
    return retval;
 800abc8:	68fb      	ldr	r3, [r7, #12]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b086      	sub	sp, #24
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	60b9      	str	r1, [r7, #8]
 800abdc:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	1d18      	adds	r0, r3, #4
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3308      	adds	r3, #8
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4619      	mov	r1, r3
 800abea:	f7ff fe42 	bl	800a872 <infoCorrect>
 800abee:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6979      	ldr	r1, [r7, #20]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff ff11 	bl	800aa1c <interLook>
}
 800abfa:	bf00      	nop
 800abfc:	3718      	adds	r7, #24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	1d18      	adds	r0, r3, #4
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3308      	adds	r3, #8
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4619      	mov	r1, r3
 800ac18:	f7ff fe67 	bl	800a8ea <protMovePar>
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	bf14      	ite	ne
 800ac38:	2301      	movne	r3, #1
 800ac3a:	2300      	moveq	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
	...

0800ac4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ac4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ac84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ac50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ac52:	e003      	b.n	800ac5c <LoopCopyDataInit>

0800ac54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ac54:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ac56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ac58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ac5a:	3104      	adds	r1, #4

0800ac5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ac5c:	480b      	ldr	r0, [pc, #44]	; (800ac8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ac5e:	4b0c      	ldr	r3, [pc, #48]	; (800ac90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ac60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ac62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ac64:	d3f6      	bcc.n	800ac54 <CopyDataInit>
  ldr  r2, =_sbss
 800ac66:	4a0b      	ldr	r2, [pc, #44]	; (800ac94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ac68:	e002      	b.n	800ac70 <LoopFillZerobss>

0800ac6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ac6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ac6c:	f842 3b04 	str.w	r3, [r2], #4

0800ac70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ac70:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ac72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ac74:	d3f9      	bcc.n	800ac6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ac76:	f7fe fd3d 	bl	80096f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ac7a:	f005 fed7 	bl	8010a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ac7e:	f7fd fe29 	bl	80088d4 <main>
  bx  lr    
 800ac82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ac84:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800ac88:	08017c98 	.word	0x08017c98
  ldr  r0, =_sdata
 800ac8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ac90:	20002df0 	.word	0x20002df0
  ldr  r2, =_sbss
 800ac94:	20002e00 	.word	0x20002e00
  ldr  r3, = _ebss
 800ac98:	20010708 	.word	0x20010708

0800ac9c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ac9c:	e7fe      	b.n	800ac9c <CAN1_RX0_IRQHandler>
	...

0800aca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aca0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 0.1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 800aca2:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <HAL_InitTick+0x3c>)
{
 800aca4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 800aca6:	4a0e      	ldr	r2, [pc, #56]	; (800ace0 <HAL_InitTick+0x40>)
 800aca8:	8818      	ldrh	r0, [r3, #0]
 800acaa:	f242 7310 	movw	r3, #10000	; 0x2710
 800acae:	fbb3 f3f0 	udiv	r3, r3, r0
 800acb2:	6810      	ldr	r0, [r2, #0]
 800acb4:	fbb0 f0f3 	udiv	r0, r0, r3
 800acb8:	f000 fa84 	bl	800b1c4 <HAL_SYSTICK_Config>
 800acbc:	4604      	mov	r4, r0
 800acbe:	b958      	cbnz	r0, 800acd8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800acc0:	2d0f      	cmp	r5, #15
 800acc2:	d809      	bhi.n	800acd8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800acc4:	4602      	mov	r2, r0
 800acc6:	4629      	mov	r1, r5
 800acc8:	f04f 30ff 	mov.w	r0, #4294967295
 800accc:	f000 fa3a 	bl	800b144 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800acd0:	4b04      	ldr	r3, [pc, #16]	; (800ace4 <HAL_InitTick+0x44>)
 800acd2:	4620      	mov	r0, r4
 800acd4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800acd8:	2001      	movs	r0, #1
 800acda:	e7fc      	b.n	800acd6 <HAL_InitTick+0x36>
 800acdc:	20002ba0 	.word	0x20002ba0
 800ace0:	200003d4 	.word	0x200003d4
 800ace4:	20002ba4 	.word	0x20002ba4

0800ace8 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 800ace8:	4a07      	ldr	r2, [pc, #28]	; (800ad08 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800acea:	2003      	movs	r0, #3
{
 800acec:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 800acee:	6813      	ldr	r3, [r2, #0]
 800acf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acf4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800acf6:	f000 fa13 	bl	800b120 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800acfa:	200f      	movs	r0, #15
 800acfc:	f7ff ffd0 	bl	800aca0 <HAL_InitTick>
  HAL_MspInit();
 800ad00:	f7fe fa08 	bl	8009114 <HAL_MspInit>
}
 800ad04:	2000      	movs	r0, #0
 800ad06:	bd08      	pop	{r3, pc}
 800ad08:	40023c00 	.word	0x40023c00

0800ad0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800ad0c:	4a03      	ldr	r2, [pc, #12]	; (800ad1c <HAL_IncTick+0x10>)
 800ad0e:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <HAL_IncTick+0x14>)
 800ad10:	6811      	ldr	r1, [r2, #0]
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	440b      	add	r3, r1
 800ad16:	6013      	str	r3, [r2, #0]
}
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	200106c0 	.word	0x200106c0
 800ad20:	20002ba0 	.word	0x20002ba0

0800ad24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ad24:	4b01      	ldr	r3, [pc, #4]	; (800ad2c <HAL_GetTick+0x8>)
 800ad26:	6818      	ldr	r0, [r3, #0]
}
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	200106c0 	.word	0x200106c0

0800ad30 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800ad30:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800ad32:	4c07      	ldr	r4, [pc, #28]	; (800ad50 <HAL_SetTickFreq+0x20>)
 800ad34:	8825      	ldrh	r5, [r4, #0]
 800ad36:	4285      	cmp	r5, r0
 800ad38:	d007      	beq.n	800ad4a <HAL_SetTickFreq+0x1a>

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800ad3a:	4b06      	ldr	r3, [pc, #24]	; (800ad54 <HAL_SetTickFreq+0x24>)
    uwTickFreq = Freq;
 800ad3c:	8020      	strh	r0, [r4, #0]
    status = HAL_InitTick(uwTickPrio);
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	f7ff ffae 	bl	800aca0 <HAL_InitTick>

    if (status != HAL_OK)
 800ad44:	b100      	cbz	r0, 800ad48 <HAL_SetTickFreq+0x18>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 800ad46:	8025      	strh	r5, [r4, #0]
    }
  }

  return status;
}
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e7fc      	b.n	800ad48 <HAL_SetTickFreq+0x18>
 800ad4e:	bf00      	nop
 800ad50:	20002ba0 	.word	0x20002ba0
 800ad54:	20002ba4 	.word	0x20002ba4

0800ad58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ad58:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	f000 809b 	beq.w	800ae98 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800ad62:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800ad64:	b925      	cbnz	r5, 800ad70 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ad66:	f7fe f9fd 	bl	8009164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ad6a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ad6c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ad70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad72:	06db      	lsls	r3, r3, #27
 800ad74:	f100 808e 	bmi.w	800ae94 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ad78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ad7e:	f023 0302 	bic.w	r3, r3, #2
 800ad82:	f043 0302 	orr.w	r3, r3, #2
 800ad86:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800ad88:	4b44      	ldr	r3, [pc, #272]	; (800ae9c <HAL_ADC_Init+0x144>)
 800ad8a:	685a      	ldr	r2, [r3, #4]
 800ad8c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800ad90:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800ad92:	685a      	ldr	r2, [r3, #4]
 800ad94:	6861      	ldr	r1, [r4, #4]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ad9a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ad9c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ada4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800adac:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800adae:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800adb6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800adbc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800adbe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800adcc:	4934      	ldr	r1, [pc, #208]	; (800aea0 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800adce:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800add0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800add2:	428a      	cmp	r2, r1
 800add4:	d052      	beq.n	800ae7c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800add6:	6899      	ldr	r1, [r3, #8]
 800add8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800addc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800adde:	6899      	ldr	r1, [r3, #8]
 800ade0:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ade2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ade4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ade6:	689a      	ldr	r2, [r3, #8]
 800ade8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800adec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800adf2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800adf4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800adf6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800adf8:	f022 0202 	bic.w	r2, r2, #2
 800adfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ae04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800ae06:	f894 2020 	ldrb.w	r2, [r4, #32]
 800ae0a:	2a00      	cmp	r2, #0
 800ae0c:	d03e      	beq.n	800ae8c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ae0e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ae10:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ae12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ae16:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ae18:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ae20:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ae28:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 800ae2a:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ae2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ae2e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ae30:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ae34:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ae36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ae38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ae3e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ae42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ae44:	689a      	ldr	r2, [r3, #8]
 800ae46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ae4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ae4c:	689a      	ldr	r2, [r3, #8]
 800ae4e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ae52:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ae54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ae56:	689a      	ldr	r2, [r3, #8]
 800ae58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800ae64:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ae66:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800ae68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae6a:	f023 0303 	bic.w	r3, r3, #3
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800ae74:	2300      	movs	r3, #0
 800ae76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae7c:	689a      	ldr	r2, [r3, #8]
 800ae7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ae82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae84:	689a      	ldr	r2, [r3, #8]
 800ae86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ae8a:	e7b2      	b.n	800adf2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae92:	e7c9      	b.n	800ae28 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800ae94:	2001      	movs	r0, #1
 800ae96:	e7ed      	b.n	800ae74 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 800ae98:	2001      	movs	r0, #1
 800ae9a:	e7ee      	b.n	800ae7a <HAL_ADC_Init+0x122>
 800ae9c:	40012300 	.word	0x40012300
 800aea0:	0f000001 	.word	0x0f000001

0800aea4 <HAL_ADC_ConvCpltCallback>:
 800aea4:	4770      	bx	lr

0800aea6 <HAL_ADC_LevelOutOfWindowCallback>:
 800aea6:	4770      	bx	lr

0800aea8 <HAL_ADC_ErrorCallback>:
 800aea8:	4770      	bx	lr

0800aeaa <HAL_ADC_IRQHandler>:
{
 800aeaa:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800aeac:	6803      	ldr	r3, [r0, #0]
{
 800aeae:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800aeb0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800aeb2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800aeb4:	078d      	lsls	r5, r1, #30
 800aeb6:	d52b      	bpl.n	800af10 <HAL_ADC_IRQHandler+0x66>
 800aeb8:	0690      	lsls	r0, r2, #26
 800aeba:	d529      	bpl.n	800af10 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800aebc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aebe:	06d1      	lsls	r1, r2, #27
 800aec0:	d403      	bmi.n	800aeca <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800aec2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aec8:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800aed0:	d117      	bne.n	800af02 <HAL_ADC_IRQHandler+0x58>
 800aed2:	69a2      	ldr	r2, [r4, #24]
 800aed4:	b9aa      	cbnz	r2, 800af02 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800aed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aed8:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800aedc:	d002      	beq.n	800aee4 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800aede:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800aee0:	0552      	lsls	r2, r2, #21
 800aee2:	d40e      	bmi.n	800af02 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	f022 0220 	bic.w	r2, r2, #32
 800aeea:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aeec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aeee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aef2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aef6:	04db      	lsls	r3, r3, #19
 800aef8:	d403      	bmi.n	800af02 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aefa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aefc:	f043 0301 	orr.w	r3, r3, #1
 800af00:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800af02:	4620      	mov	r0, r4
 800af04:	f7ff ffce 	bl	800aea4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	f06f 0212 	mvn.w	r2, #18
 800af0e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800af14:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800af16:	074d      	lsls	r5, r1, #29
 800af18:	d532      	bpl.n	800af80 <HAL_ADC_IRQHandler+0xd6>
 800af1a:	0610      	lsls	r0, r2, #24
 800af1c:	d530      	bpl.n	800af80 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800af1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af20:	06d1      	lsls	r1, r2, #27
 800af22:	d403      	bmi.n	800af2c <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800af24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af2a:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800af32:	d11e      	bne.n	800af72 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800af34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800af36:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800af3a:	d002      	beq.n	800af42 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800af3c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800af3e:	0552      	lsls	r2, r2, #21
 800af40:	d417      	bmi.n	800af72 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800af42:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800af44:	0555      	lsls	r5, r2, #21
 800af46:	d414      	bmi.n	800af72 <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800af48:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800af4a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800af4e:	d110      	bne.n	800af72 <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800af50:	69a2      	ldr	r2, [r4, #24]
 800af52:	b972      	cbnz	r2, 800af72 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af5a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800af5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af62:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800af64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af66:	05d8      	lsls	r0, r3, #23
 800af68:	d403      	bmi.n	800af72 <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800af6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af6c:	f043 0301 	orr.w	r3, r3, #1
 800af70:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800af72:	4620      	mov	r0, r4
 800af74:	f000 f8d2 	bl	800b11c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	f06f 020c 	mvn.w	r2, #12
 800af7e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800af84:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800af86:	07c9      	lsls	r1, r1, #31
 800af88:	d50f      	bpl.n	800afaa <HAL_ADC_IRQHandler+0x100>
 800af8a:	0655      	lsls	r5, r2, #25
 800af8c:	d50d      	bpl.n	800afaa <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	07d8      	lsls	r0, r3, #31
 800af92:	d50a      	bpl.n	800afaa <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800af94:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800af96:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800af98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9c:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800af9e:	f7ff ff82 	bl	800aea6 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	f06f 0201 	mvn.w	r2, #1
 800afa8:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800afae:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800afb0:	0689      	lsls	r1, r1, #26
 800afb2:	d50d      	bpl.n	800afd0 <HAL_ADC_IRQHandler+0x126>
 800afb4:	0152      	lsls	r2, r2, #5
 800afb6:	d50b      	bpl.n	800afd0 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800afb8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800afba:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 800afbe:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800afc0:	f042 0202 	orr.w	r2, r2, #2
 800afc4:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800afc6:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800afc8:	f7ff ff6e 	bl	800aea8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	601d      	str	r5, [r3, #0]
}
 800afd0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800afd4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800afd4:	2300      	movs	r3, #0
{
 800afd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800afd8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800afda:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d074      	beq.n	800b0cc <HAL_ADC_ConfigChannel+0xf8>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800afe2:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800afe4:	2301      	movs	r3, #1
 800afe6:	688a      	ldr	r2, [r1, #8]
 800afe8:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800afea:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800afec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800aff0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 800aff4:	6803      	ldr	r3, [r0, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800aff6:	d931      	bls.n	800b05c <HAL_ADC_ConfigChannel+0x88>
 800aff8:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800affc:	d02e      	beq.n	800b05c <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800affe:	3c1e      	subs	r4, #30
 800b000:	f04f 0c07 	mov.w	ip, #7
 800b004:	68df      	ldr	r7, [r3, #12]
 800b006:	fa0c fc04 	lsl.w	ip, ip, r4
 800b00a:	ea27 070c 	bic.w	r7, r7, ip
 800b00e:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b010:	4f3d      	ldr	r7, [pc, #244]	; (800b108 <HAL_ADC_ConfigChannel+0x134>)
 800b012:	42bd      	cmp	r5, r7
 800b014:	d11d      	bne.n	800b052 <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800b016:	68dc      	ldr	r4, [r3, #12]
 800b018:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b01c:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 800b01e:	6849      	ldr	r1, [r1, #4]
 800b020:	2906      	cmp	r1, #6
 800b022:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800b026:	d827      	bhi.n	800b078 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b028:	3a05      	subs	r2, #5
 800b02a:	241f      	movs	r4, #31
 800b02c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b02e:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b030:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b034:	ea21 0104 	bic.w	r1, r1, r4
 800b038:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b03a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b03c:	430a      	orrs	r2, r1
 800b03e:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800b040:	4a32      	ldr	r2, [pc, #200]	; (800b10c <HAL_ADC_ConfigChannel+0x138>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d034      	beq.n	800b0b0 <HAL_ADC_ConfigChannel+0xdc>
  __HAL_UNLOCK(hadc);
 800b046:	2300      	movs	r3, #0
 800b048:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800b04c:	4618      	mov	r0, r3
}
 800b04e:	b003      	add	sp, #12
 800b050:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b052:	68df      	ldr	r7, [r3, #12]
 800b054:	fa02 f404 	lsl.w	r4, r2, r4
 800b058:	433c      	orrs	r4, r7
 800b05a:	e7df      	b.n	800b01c <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b05c:	f04f 0c07 	mov.w	ip, #7
 800b060:	691f      	ldr	r7, [r3, #16]
 800b062:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b066:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b06a:	ea27 070c 	bic.w	r7, r7, ip
 800b06e:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b070:	691f      	ldr	r7, [r3, #16]
 800b072:	433c      	orrs	r4, r7
 800b074:	611c      	str	r4, [r3, #16]
 800b076:	e7d2      	b.n	800b01e <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 800b078:	290c      	cmp	r1, #12
 800b07a:	f04f 011f 	mov.w	r1, #31
 800b07e:	d80b      	bhi.n	800b098 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b080:	3a23      	subs	r2, #35	; 0x23
 800b082:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800b084:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b086:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b08a:	ea24 0101 	bic.w	r1, r4, r1
 800b08e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b090:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b092:	430a      	orrs	r2, r1
 800b094:	631a      	str	r2, [r3, #48]	; 0x30
 800b096:	e7d3      	b.n	800b040 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b098:	3a41      	subs	r2, #65	; 0x41
 800b09a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b09c:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b09e:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b0a2:	ea24 0101 	bic.w	r1, r4, r1
 800b0a6:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b0a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	62da      	str	r2, [r3, #44]	; 0x2c
 800b0ae:	e7c7      	b.n	800b040 <HAL_ADC_ConfigChannel+0x6c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800b0b0:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800b0b4:	d10c      	bne.n	800b0d0 <HAL_ADC_ConfigChannel+0xfc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800b0b6:	4a16      	ldr	r2, [pc, #88]	; (800b110 <HAL_ADC_ConfigChannel+0x13c>)
 800b0b8:	6853      	ldr	r3, [r2, #4]
 800b0ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    ADC->CCR |= ADC_CCR_VBATE;
 800b0be:	6053      	str	r3, [r2, #4]
 800b0c0:	e7c1      	b.n	800b046 <HAL_ADC_ConfigChannel+0x72>
 800b0c2:	4a13      	ldr	r2, [pc, #76]	; (800b110 <HAL_ADC_ConfigChannel+0x13c>)
 800b0c4:	6853      	ldr	r3, [r2, #4]
 800b0c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0ca:	e7f8      	b.n	800b0be <HAL_ADC_ConfigChannel+0xea>
  __HAL_LOCK(hadc);
 800b0cc:	2002      	movs	r0, #2
 800b0ce:	e7be      	b.n	800b04e <HAL_ADC_ConfigChannel+0x7a>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b0d0:	2d12      	cmp	r5, #18
 800b0d2:	d0f6      	beq.n	800b0c2 <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <HAL_ADC_ConfigChannel+0x134>)
 800b0d6:	429d      	cmp	r5, r3
 800b0d8:	d001      	beq.n	800b0de <HAL_ADC_ConfigChannel+0x10a>
 800b0da:	2d11      	cmp	r5, #17
 800b0dc:	d1b3      	bne.n	800b046 <HAL_ADC_ConfigChannel+0x72>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800b0de:	490c      	ldr	r1, [pc, #48]	; (800b110 <HAL_ADC_ConfigChannel+0x13c>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b0e0:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 800b0e2:	684a      	ldr	r2, [r1, #4]
 800b0e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b0e8:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b0ea:	d1ac      	bne.n	800b046 <HAL_ADC_ConfigChannel+0x72>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <HAL_ADC_ConfigChannel+0x140>)
 800b0ee:	4a0a      	ldr	r2, [pc, #40]	; (800b118 <HAL_ADC_ConfigChannel+0x144>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0f6:	230a      	movs	r3, #10
 800b0f8:	4353      	muls	r3, r2
        counter--;
 800b0fa:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800b0fc:	9b01      	ldr	r3, [sp, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d0a1      	beq.n	800b046 <HAL_ADC_ConfigChannel+0x72>
        counter--;
 800b102:	9b01      	ldr	r3, [sp, #4]
 800b104:	3b01      	subs	r3, #1
 800b106:	e7f8      	b.n	800b0fa <HAL_ADC_ConfigChannel+0x126>
 800b108:	10000012 	.word	0x10000012
 800b10c:	40012000 	.word	0x40012000
 800b110:	40012300 	.word	0x40012300
 800b114:	200003d4 	.word	0x200003d4
 800b118:	000f4240 	.word	0x000f4240

0800b11c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800b11c:	4770      	bx	lr
	...

0800b120 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b120:	4a07      	ldr	r2, [pc, #28]	; (800b140 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b122:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b124:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b126:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b12a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b12e:	041b      	lsls	r3, r3, #16
 800b130:	0c1b      	lsrs	r3, r3, #16
 800b132:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800b13a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800b13c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b13e:	4770      	bx	lr
 800b140:	e000ed00 	.word	0xe000ed00

0800b144 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b144:	4b16      	ldr	r3, [pc, #88]	; (800b1a0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b146:	b570      	push	{r4, r5, r6, lr}
 800b148:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b14a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b14e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b152:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b156:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b158:	2d04      	cmp	r5, #4
 800b15a:	bf28      	it	cs
 800b15c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b15e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b160:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b164:	bf8c      	ite	hi
 800b166:	3c03      	subhi	r4, #3
 800b168:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 800b16a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b16c:	ea21 0303 	bic.w	r3, r1, r3
 800b170:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b174:	fa06 f404 	lsl.w	r4, r6, r4
 800b178:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b17c:	ea43 0304 	orr.w	r3, r3, r4
 800b180:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800b184:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800b186:	db06      	blt.n	800b196 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b188:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800b18c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800b190:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b194:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b196:	f000 000f 	and.w	r0, r0, #15
 800b19a:	4a02      	ldr	r2, [pc, #8]	; (800b1a4 <HAL_NVIC_SetPriority+0x60>)
 800b19c:	5413      	strb	r3, [r2, r0]
 800b19e:	e7f9      	b.n	800b194 <HAL_NVIC_SetPriority+0x50>
 800b1a0:	e000ed00 	.word	0xe000ed00
 800b1a4:	e000ed14 	.word	0xe000ed14

0800b1a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	db08      	blt.n	800b1be <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b1ac:	0942      	lsrs	r2, r0, #5
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	f000 001f 	and.w	r0, r0, #31
 800b1b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b1b8:	4b01      	ldr	r3, [pc, #4]	; (800b1c0 <HAL_NVIC_EnableIRQ+0x18>)
 800b1ba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b1be:	4770      	bx	lr
 800b1c0:	e000e100 	.word	0xe000e100

0800b1c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1c4:	3801      	subs	r0, #1
 800b1c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800b1ca:	d20a      	bcs.n	800b1e2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1cc:	4b06      	ldr	r3, [pc, #24]	; (800b1e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1ce:	21f0      	movs	r1, #240	; 0xf0
 800b1d0:	4a06      	ldr	r2, [pc, #24]	; (800b1ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1d2:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1d4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1d6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800b1e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	e000e010 	.word	0xe000e010
 800b1ec:	e000ed00 	.word	0xe000ed00

0800b1f0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800b1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800b1f2:	0896      	lsrs	r6, r2, #2
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	6805      	ldr	r5, [r0, #0]
 800b1f8:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 800b1fc:	42bb      	cmp	r3, r7
 800b1fe:	d108      	bne.n	800b212 <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800b200:	f012 0203 	ands.w	r2, r2, #3
 800b204:	d01e      	beq.n	800b244 <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 800b206:	2a01      	cmp	r2, #1
 800b208:	d114      	bne.n	800b234 <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800b20a:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800b20e:	702b      	strb	r3, [r5, #0]
 800b210:	e018      	b.n	800b244 <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800b212:	785c      	ldrb	r4, [r3, #1]
 800b214:	3304      	adds	r3, #4
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b216:	f813 cc04 	ldrb.w	ip, [r3, #-4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800b21a:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800b21c:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800b220:	f813 cc01 	ldrb.w	ip, [r3, #-1]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800b224:	ea44 040c 	orr.w	r4, r4, ip
 800b228:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 800b22c:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800b230:	602c      	str	r4, [r5, #0]
 800b232:	e7e3      	b.n	800b1fc <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 800b234:	2a02      	cmp	r2, #2
 800b236:	d108      	bne.n	800b24a <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800b238:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 800b23c:	785b      	ldrb	r3, [r3, #1]
 800b23e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 800b242:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800b244:	6803      	ldr	r3, [r0, #0]
 800b246:	6818      	ldr	r0, [r3, #0]
}
 800b248:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800b24a:	785a      	ldrb	r2, [r3, #1]
 800b24c:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 800b250:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 800b254:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800b256:	789b      	ldrb	r3, [r3, #2]
 800b258:	e7d9      	b.n	800b20e <CRC_Handle_8+0x1e>

0800b25a <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800b25a:	b570      	push	{r4, r5, r6, lr}
 800b25c:	6800      	ldr	r0, [r0, #0]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800b25e:	0855      	lsrs	r5, r2, #1
 800b260:	2300      	movs	r3, #0
 800b262:	429d      	cmp	r5, r3
 800b264:	d106      	bne.n	800b274 <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 800b266:	07d3      	lsls	r3, r2, #31
 800b268:	d502      	bpl.n	800b270 <CRC_Handle_16+0x16>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 800b26a:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 800b26e:	8003      	strh	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800b270:	6800      	ldr	r0, [r0, #0]
}
 800b272:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800b274:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800b278:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800b27c:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800b27e:	8864      	ldrh	r4, [r4, #2]
 800b280:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800b284:	6004      	str	r4, [r0, #0]
 800b286:	e7ec      	b.n	800b262 <CRC_Handle_16+0x8>

0800b288 <HAL_CRC_MspInit>:
}
 800b288:	4770      	bx	lr
	...

0800b28c <HAL_CRC_Init>:
{
 800b28c:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 800b28e:	4604      	mov	r4, r0
 800b290:	b908      	cbnz	r0, 800b296 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800b292:	2001      	movs	r0, #1
}
 800b294:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b296:	7f43      	ldrb	r3, [r0, #29]
 800b298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b29c:	b913      	cbnz	r3, 800b2a4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800b29e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800b2a0:	f7ff fff2 	bl	800b288 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b2a8:	7923      	ldrb	r3, [r4, #4]
 800b2aa:	b9e3      	cbnz	r3, 800b2e6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	4a13      	ldr	r2, [pc, #76]	; (800b2fc <HAL_CRC_Init+0x70>)
 800b2b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	f022 0218 	bic.w	r2, r2, #24
 800b2b8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b2ba:	7962      	ldrb	r2, [r4, #5]
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	b9d2      	cbnz	r2, 800b2f6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b2c0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b2c4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800b2c6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	6961      	ldr	r1, [r4, #20]
 800b2cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b2d0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b2d2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b2d4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800b2e4:	e7d6      	b.n	800b294 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b2e6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 f82c 	bl	800b348 <HAL_CRCEx_Polynomial_Set>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d0e2      	beq.n	800b2ba <HAL_CRC_Init+0x2e>
 800b2f4:	e7cd      	b.n	800b292 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b2f6:	6922      	ldr	r2, [r4, #16]
 800b2f8:	e7e4      	b.n	800b2c4 <HAL_CRC_Init+0x38>
 800b2fa:	bf00      	nop
 800b2fc:	04c11db7 	.word	0x04c11db7

0800b300 <HAL_CRC_Calculate>:
{
 800b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b302:	2502      	movs	r5, #2
{
 800b304:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b306:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800b308:	6805      	ldr	r5, [r0, #0]
 800b30a:	68af      	ldr	r7, [r5, #8]
 800b30c:	f047 0701 	orr.w	r7, r7, #1
 800b310:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 800b312:	6a07      	ldr	r7, [r0, #32]
 800b314:	2f02      	cmp	r7, #2
 800b316:	d012      	beq.n	800b33e <HAL_CRC_Calculate+0x3e>
 800b318:	2f03      	cmp	r7, #3
 800b31a:	d004      	beq.n	800b326 <HAL_CRC_Calculate+0x26>
 800b31c:	2f01      	cmp	r7, #1
 800b31e:	d111      	bne.n	800b344 <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800b320:	f7ff ff66 	bl	800b1f0 <CRC_Handle_8>
      break;
 800b324:	e004      	b.n	800b330 <HAL_CRC_Calculate+0x30>
 800b326:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 800b32a:	42b1      	cmp	r1, r6
 800b32c:	d103      	bne.n	800b336 <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 800b32e:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800b330:	2301      	movs	r3, #1
 800b332:	7763      	strb	r3, [r4, #29]
}
 800b334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 800b336:	f851 3b04 	ldr.w	r3, [r1], #4
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	e7f5      	b.n	800b32a <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800b33e:	f7ff ff8c 	bl	800b25a <CRC_Handle_16>
      break;
 800b342:	e7f5      	b.n	800b330 <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800b344:	2000      	movs	r0, #0
 800b346:	e7f3      	b.n	800b330 <HAL_CRC_Calculate+0x30>

0800b348 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b348:	231f      	movs	r3, #31
{
 800b34a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b34c:	f113 33ff 	adds.w	r3, r3, #4294967295
 800b350:	d306      	bcc.n	800b360 <HAL_CRCEx_Polynomial_Set+0x18>
 800b352:	fa21 f403 	lsr.w	r4, r1, r3
 800b356:	07e4      	lsls	r4, r4, #31
 800b358:	d5f8      	bpl.n	800b34c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800b35a:	2a08      	cmp	r2, #8
 800b35c:	d014      	beq.n	800b388 <HAL_CRCEx_Polynomial_Set+0x40>
 800b35e:	d802      	bhi.n	800b366 <HAL_CRCEx_Polynomial_Set+0x1e>
 800b360:	b13a      	cbz	r2, 800b372 <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800b362:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800b364:	e00d      	b.n	800b382 <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 800b366:	2a10      	cmp	r2, #16
 800b368:	d00c      	beq.n	800b384 <HAL_CRCEx_Polynomial_Set+0x3c>
 800b36a:	2a18      	cmp	r2, #24
 800b36c:	d1f9      	bne.n	800b362 <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 800b36e:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800b370:	d8f7      	bhi.n	800b362 <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b372:	6800      	ldr	r0, [r0, #0]
 800b374:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b376:	6883      	ldr	r3, [r0, #8]
 800b378:	f023 0318 	bic.w	r3, r3, #24
 800b37c:	431a      	orrs	r2, r3
 800b37e:	6082      	str	r2, [r0, #8]
 800b380:	2000      	movs	r0, #0
}
 800b382:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800b384:	2b07      	cmp	r3, #7
 800b386:	e7f3      	b.n	800b370 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 800b388:	2b0f      	cmp	r3, #15
 800b38a:	e7f1      	b.n	800b370 <HAL_CRCEx_Polynomial_Set+0x28>

0800b38c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b38c:	6803      	ldr	r3, [r0, #0]
 800b38e:	2118      	movs	r1, #24
 800b390:	b2da      	uxtb	r2, r3
 800b392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b396:	3a10      	subs	r2, #16
 800b398:	f023 0303 	bic.w	r3, r3, #3
 800b39c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b3a0:	4904      	ldr	r1, [pc, #16]	; (800b3b4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800b3a2:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b3a4:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b3a6:	bf88      	it	hi
 800b3a8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b3aa:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b3ac:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800b3ae:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	080151f0 	.word	0x080151f0

0800b3b8 <HAL_DMA_Init>:
{
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b3bc:	f7ff fcb2 	bl	800ad24 <HAL_GetTick>
 800b3c0:	4605      	mov	r5, r0
  if(hdma == NULL)
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d071      	beq.n	800b4aa <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800b3c6:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 800b3c8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800b3ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800b3d4:	6813      	ldr	r3, [r2, #0]
 800b3d6:	f023 0301 	bic.w	r3, r3, #1
 800b3da:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b3dc:	6821      	ldr	r1, [r4, #0]
 800b3de:	680b      	ldr	r3, [r1, #0]
 800b3e0:	07d8      	lsls	r0, r3, #31
 800b3e2:	d43c      	bmi.n	800b45e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800b3e4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b3e6:	4d32      	ldr	r5, [pc, #200]	; (800b4b0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3e8:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b3ea:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b3ec:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	68e2      	ldr	r2, [r4, #12]
 800b3f4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b3f6:	6922      	ldr	r2, [r4, #16]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	6962      	ldr	r2, [r4, #20]
 800b3fc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b3fe:	69e2      	ldr	r2, [r4, #28]
 800b400:	4303      	orrs	r3, r0
 800b402:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800b404:	6a22      	ldr	r2, [r4, #32]
 800b406:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b408:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b40a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b40c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b410:	bf02      	ittt	eq
 800b412:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800b416:	4335      	orreq	r5, r6
 800b418:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b41a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800b41c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800b41e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b420:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800b424:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b428:	d10b      	bne.n	800b442 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800b42a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b42c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800b42e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b430:	b13d      	cbz	r5, 800b442 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b432:	b9f8      	cbnz	r0, 800b474 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800b434:	2a01      	cmp	r2, #1
 800b436:	d02d      	beq.n	800b494 <HAL_DMA_Init+0xdc>
 800b438:	d301      	bcc.n	800b43e <HAL_DMA_Init+0x86>
 800b43a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b43c:	d101      	bne.n	800b442 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b43e:	01ea      	lsls	r2, r5, #7
 800b440:	d42b      	bmi.n	800b49a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800b442:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b444:	4620      	mov	r0, r4
 800b446:	f7ff ffa1 	bl	800b38c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b44a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b44c:	233f      	movs	r3, #63	; 0x3f
 800b44e:	4093      	lsls	r3, r2
 800b450:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b452:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800b454:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b456:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800b458:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800b45c:	e009      	b.n	800b472 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b45e:	f7ff fc61 	bl	800ad24 <HAL_GetTick>
 800b462:	1b40      	subs	r0, r0, r5
 800b464:	2805      	cmp	r0, #5
 800b466:	d9b9      	bls.n	800b3dc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b468:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b46a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b46c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800b46e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800b472:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b474:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b478:	d113      	bne.n	800b4a2 <HAL_DMA_Init+0xea>
    switch (tmp)
 800b47a:	2a03      	cmp	r2, #3
 800b47c:	d8e1      	bhi.n	800b442 <HAL_DMA_Init+0x8a>
 800b47e:	a001      	add	r0, pc, #4	; (adr r0, 800b484 <HAL_DMA_Init+0xcc>)
 800b480:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800b484:	0800b49b 	.word	0x0800b49b
 800b488:	0800b43f 	.word	0x0800b43f
 800b48c:	0800b49b 	.word	0x0800b49b
 800b490:	0800b495 	.word	0x0800b495
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b494:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800b498:	d1d3      	bne.n	800b442 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b49a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800b49c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b49e:	6563      	str	r3, [r4, #84]	; 0x54
 800b4a0:	e7e5      	b.n	800b46e <HAL_DMA_Init+0xb6>
    switch (tmp)
 800b4a2:	2a02      	cmp	r2, #2
 800b4a4:	d9f9      	bls.n	800b49a <HAL_DMA_Init+0xe2>
 800b4a6:	2a03      	cmp	r2, #3
 800b4a8:	e7c8      	b.n	800b43c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7e1      	b.n	800b472 <HAL_DMA_Init+0xba>
 800b4ae:	bf00      	nop
 800b4b0:	e010803f 	.word	0xe010803f

0800b4b4 <HAL_DMA_Start_IT>:
{
 800b4b4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800b4b6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800b4ba:	2c01      	cmp	r4, #1
 800b4bc:	d035      	beq.n	800b52a <HAL_DMA_Start_IT+0x76>
 800b4be:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4c0:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800b4c2:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 800b4c4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800b4c8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800b4cc:	2c01      	cmp	r4, #1
 800b4ce:	f04f 0402 	mov.w	r4, #2
 800b4d2:	d128      	bne.n	800b526 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b4d4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b4d8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b4da:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b4dc:	6825      	ldr	r5, [r4, #0]
 800b4de:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800b4e2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800b4e4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b4e6:	6883      	ldr	r3, [r0, #8]
 800b4e8:	2b40      	cmp	r3, #64	; 0x40
 800b4ea:	d119      	bne.n	800b520 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 800b4ec:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800b4ee:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b4f0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800b4f2:	233f      	movs	r3, #63	; 0x3f
 800b4f4:	4093      	lsls	r3, r2
 800b4f6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	f043 0316 	orr.w	r3, r3, #22
 800b4fe:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b500:	6963      	ldr	r3, [r4, #20]
 800b502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b506:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800b508:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b50a:	b11b      	cbz	r3, 800b514 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	f043 0308 	orr.w	r3, r3, #8
 800b512:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800b514:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b516:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800b518:	f043 0301 	orr.w	r3, r3, #1
 800b51c:	6023      	str	r3, [r4, #0]
}
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800b520:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800b522:	60e2      	str	r2, [r4, #12]
 800b524:	e7e4      	b.n	800b4f0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800b526:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800b52a:	2002      	movs	r0, #2
 800b52c:	e7f7      	b.n	800b51e <HAL_DMA_Start_IT+0x6a>

0800b52e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b52e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800b532:	2b02      	cmp	r3, #2
 800b534:	d003      	beq.n	800b53e <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b536:	2380      	movs	r3, #128	; 0x80
 800b538:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800b53a:	2001      	movs	r0, #1
 800b53c:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800b53e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800b540:	2305      	movs	r3, #5
 800b542:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 800b546:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800b548:	6813      	ldr	r3, [r2, #0]
 800b54a:	f023 0301 	bic.w	r3, r3, #1
 800b54e:	6013      	str	r3, [r2, #0]
}
 800b550:	4770      	bx	lr
	...

0800b554 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800b554:	2300      	movs	r3, #0
{
 800b556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800b558:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b55a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800b55c:	4b5b      	ldr	r3, [pc, #364]	; (800b6cc <HAL_DMA_IRQHandler+0x178>)
{
 800b55e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b560:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800b562:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b564:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800b566:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b568:	409a      	lsls	r2, r3
 800b56a:	4232      	tst	r2, r6
 800b56c:	d00c      	beq.n	800b588 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b56e:	6801      	ldr	r1, [r0, #0]
 800b570:	6808      	ldr	r0, [r1, #0]
 800b572:	0740      	lsls	r0, r0, #29
 800b574:	d508      	bpl.n	800b588 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b576:	6808      	ldr	r0, [r1, #0]
 800b578:	f020 0004 	bic.w	r0, r0, #4
 800b57c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b57e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b580:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b582:	f042 0201 	orr.w	r2, r2, #1
 800b586:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b588:	2201      	movs	r2, #1
 800b58a:	409a      	lsls	r2, r3
 800b58c:	4232      	tst	r2, r6
 800b58e:	d008      	beq.n	800b5a2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b590:	6821      	ldr	r1, [r4, #0]
 800b592:	6949      	ldr	r1, [r1, #20]
 800b594:	0609      	lsls	r1, r1, #24
 800b596:	d504      	bpl.n	800b5a2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b598:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b59a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b59c:	f042 0202 	orr.w	r2, r2, #2
 800b5a0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b5a2:	2204      	movs	r2, #4
 800b5a4:	409a      	lsls	r2, r3
 800b5a6:	4232      	tst	r2, r6
 800b5a8:	d008      	beq.n	800b5bc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b5aa:	6821      	ldr	r1, [r4, #0]
 800b5ac:	6809      	ldr	r1, [r1, #0]
 800b5ae:	0788      	lsls	r0, r1, #30
 800b5b0:	d504      	bpl.n	800b5bc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b5b2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b5b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b5b6:	f042 0204 	orr.w	r2, r2, #4
 800b5ba:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b5bc:	2210      	movs	r2, #16
 800b5be:	409a      	lsls	r2, r3
 800b5c0:	4232      	tst	r2, r6
 800b5c2:	d010      	beq.n	800b5e6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	6819      	ldr	r1, [r3, #0]
 800b5c8:	0709      	lsls	r1, r1, #28
 800b5ca:	d50c      	bpl.n	800b5e6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b5cc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	0350      	lsls	r0, r2, #13
 800b5d2:	d537      	bpl.n	800b644 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	0319      	lsls	r1, r3, #12
 800b5d8:	d401      	bmi.n	800b5de <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800b5da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5dc:	e000      	b.n	800b5e0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b5de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800b5e0:	b10b      	cbz	r3, 800b5e6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b5e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	408a      	lsls	r2, r1
 800b5ec:	4232      	tst	r2, r6
 800b5ee:	d03a      	beq.n	800b666 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	6818      	ldr	r0, [r3, #0]
 800b5f4:	06c6      	lsls	r6, r0, #27
 800b5f6:	d536      	bpl.n	800b666 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b5f8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b5fa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800b5fe:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b600:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b602:	d127      	bne.n	800b654 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b604:	f022 0216 	bic.w	r2, r2, #22
 800b608:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b60a:	695a      	ldr	r2, [r3, #20]
 800b60c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b610:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b612:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b614:	b90a      	cbnz	r2, 800b61a <HAL_DMA_IRQHandler+0xc6>
 800b616:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800b618:	b11a      	cbz	r2, 800b622 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	f022 0208 	bic.w	r2, r2, #8
 800b620:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b622:	233f      	movs	r3, #63	; 0x3f
 800b624:	408b      	lsls	r3, r1
 800b626:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800b628:	2300      	movs	r3, #0
 800b62a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800b62e:	2301      	movs	r3, #1
 800b630:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800b634:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800b636:	2b00      	cmp	r3, #0
 800b638:	d045      	beq.n	800b6c6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800b63a:	4620      	mov	r0, r4
}
 800b63c:	b003      	add	sp, #12
 800b63e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800b642:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	05d2      	lsls	r2, r2, #23
 800b648:	d4c7      	bmi.n	800b5da <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	f022 0208 	bic.w	r2, r2, #8
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	e7c2      	b.n	800b5da <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b654:	0350      	lsls	r0, r2, #13
 800b656:	d527      	bpl.n	800b6a8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	0319      	lsls	r1, r3, #12
 800b65c:	d431      	bmi.n	800b6c2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800b65e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800b660:	b10b      	cbz	r3, 800b666 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800b662:	4620      	mov	r0, r4
 800b664:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b668:	b36b      	cbz	r3, 800b6c6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b66a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b66c:	07da      	lsls	r2, r3, #31
 800b66e:	d519      	bpl.n	800b6a4 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 800b670:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800b672:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800b674:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800b678:	6813      	ldr	r3, [r2, #0]
 800b67a:	f023 0301 	bic.w	r3, r3, #1
 800b67e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800b680:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800b684:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	3301      	adds	r3, #1
 800b68c:	42bb      	cmp	r3, r7
 800b68e:	9301      	str	r3, [sp, #4]
 800b690:	d802      	bhi.n	800b698 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b692:	6813      	ldr	r3, [r2, #0]
 800b694:	07db      	lsls	r3, r3, #31
 800b696:	d4f7      	bmi.n	800b688 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800b698:	2300      	movs	r3, #0
 800b69a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800b6a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b6a6:	e7c6      	b.n	800b636 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800b6ae:	d108      	bne.n	800b6c2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b6b0:	6819      	ldr	r1, [r3, #0]
 800b6b2:	f021 0110 	bic.w	r1, r1, #16
 800b6b6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800b6b8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800b6ba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800b6be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800b6c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6c4:	e7cc      	b.n	800b660 <HAL_DMA_IRQHandler+0x10c>
}
 800b6c6:	b003      	add	sp, #12
 800b6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	200003d4 	.word	0x200003d4

0800b6d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b6d4:	680b      	ldr	r3, [r1, #0]
{
 800b6d6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6d8:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b880 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b6dc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b6de:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b6e0:	4a65      	ldr	r2, [pc, #404]	; (800b878 <HAL_GPIO_Init+0x1a8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b6e2:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800b884 <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 800b6e6:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b6e8:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800b6ea:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b6ec:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800b6ee:	42ac      	cmp	r4, r5
 800b6f0:	f040 80ac 	bne.w	800b84c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b6f4:	684c      	ldr	r4, [r1, #4]
 800b6f6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800b6fa:	2603      	movs	r6, #3
 800b6fc:	f024 0c10 	bic.w	ip, r4, #16
 800b700:	fa06 f60e 	lsl.w	r6, r6, lr
 800b704:	f10c 37ff 	add.w	r7, ip, #4294967295
 800b708:	43f6      	mvns	r6, r6
 800b70a:	2f01      	cmp	r7, #1
 800b70c:	d811      	bhi.n	800b732 <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 800b70e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b710:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800b714:	68cf      	ldr	r7, [r1, #12]
 800b716:	fa07 f70e 	lsl.w	r7, r7, lr
 800b71a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800b71e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b720:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b722:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800b726:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800b72a:	409f      	lsls	r7, r3
 800b72c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800b730:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800b732:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b734:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b738:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800b73c:	688f      	ldr	r7, [r1, #8]
 800b73e:	fa07 f70e 	lsl.w	r7, r7, lr
 800b742:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 800b746:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b748:	d116      	bne.n	800b778 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 800b74a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b74e:	f003 0b07 	and.w	fp, r3, #7
 800b752:	f04f 0c0f 	mov.w	ip, #15
 800b756:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800b75a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800b75e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b762:	fa0c fc0b 	lsl.w	ip, ip, fp
 800b766:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b76a:	690f      	ldr	r7, [r1, #16]
 800b76c:	fa07 f70b 	lsl.w	r7, r7, fp
 800b770:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 800b774:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800b778:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b77a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b77c:	f004 0703 	and.w	r7, r4, #3
 800b780:	fa07 fe0e 	lsl.w	lr, r7, lr
 800b784:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800b788:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b78a:	00e6      	lsls	r6, r4, #3
 800b78c:	d55e      	bpl.n	800b84c <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b78e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800b792:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b796:	f003 0c03 	and.w	ip, r3, #3
 800b79a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b79e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800b7a2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b7a6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7aa:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 800b7ae:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800b7b2:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800b7b6:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800b7ba:	9603      	str	r6, [sp, #12]
 800b7bc:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b7be:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 800b7c2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b7c6:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b7ca:	4e2c      	ldr	r6, [pc, #176]	; (800b87c <HAL_GPIO_Init+0x1ac>)
 800b7cc:	42b0      	cmp	r0, r6
 800b7ce:	d044      	beq.n	800b85a <HAL_GPIO_Init+0x18a>
 800b7d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b7d4:	42b0      	cmp	r0, r6
 800b7d6:	d042      	beq.n	800b85e <HAL_GPIO_Init+0x18e>
 800b7d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b7dc:	42b0      	cmp	r0, r6
 800b7de:	d040      	beq.n	800b862 <HAL_GPIO_Init+0x192>
 800b7e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b7e4:	42b0      	cmp	r0, r6
 800b7e6:	d03e      	beq.n	800b866 <HAL_GPIO_Init+0x196>
 800b7e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b7ec:	42b0      	cmp	r0, r6
 800b7ee:	d03c      	beq.n	800b86a <HAL_GPIO_Init+0x19a>
 800b7f0:	4548      	cmp	r0, r9
 800b7f2:	d03c      	beq.n	800b86e <HAL_GPIO_Init+0x19e>
 800b7f4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800b7f8:	42b0      	cmp	r0, r6
 800b7fa:	d03a      	beq.n	800b872 <HAL_GPIO_Init+0x1a2>
 800b7fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b800:	42b0      	cmp	r0, r6
 800b802:	bf14      	ite	ne
 800b804:	2608      	movne	r6, #8
 800b806:	2607      	moveq	r6, #7
 800b808:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b80c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b810:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800b814:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800b816:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 800b81a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800b81c:	bf0c      	ite	eq
 800b81e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800b820:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b822:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800b826:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800b828:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800b82a:	bf0c      	ite	eq
 800b82c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800b82e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b830:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800b834:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800b836:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800b838:	bf0c      	ite	eq
 800b83a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800b83c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b83e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800b840:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800b842:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800b844:	bf54      	ite	pl
 800b846:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800b848:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800b84a:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b84c:	3301      	adds	r3, #1
 800b84e:	2b10      	cmp	r3, #16
 800b850:	f47f af49 	bne.w	800b6e6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800b854:	b005      	add	sp, #20
 800b856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b85a:	2600      	movs	r6, #0
 800b85c:	e7d4      	b.n	800b808 <HAL_GPIO_Init+0x138>
 800b85e:	2601      	movs	r6, #1
 800b860:	e7d2      	b.n	800b808 <HAL_GPIO_Init+0x138>
 800b862:	2602      	movs	r6, #2
 800b864:	e7d0      	b.n	800b808 <HAL_GPIO_Init+0x138>
 800b866:	2603      	movs	r6, #3
 800b868:	e7ce      	b.n	800b808 <HAL_GPIO_Init+0x138>
 800b86a:	2604      	movs	r6, #4
 800b86c:	e7cc      	b.n	800b808 <HAL_GPIO_Init+0x138>
 800b86e:	2605      	movs	r6, #5
 800b870:	e7ca      	b.n	800b808 <HAL_GPIO_Init+0x138>
 800b872:	2606      	movs	r6, #6
 800b874:	e7c8      	b.n	800b808 <HAL_GPIO_Init+0x138>
 800b876:	bf00      	nop
 800b878:	40013c00 	.word	0x40013c00
 800b87c:	40020000 	.word	0x40020000
 800b880:	40023800 	.word	0x40023800
 800b884:	40021400 	.word	0x40021400

0800b888 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b888:	b10a      	cbz	r2, 800b88e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b88a:	6181      	str	r1, [r0, #24]
  }
}
 800b88c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b88e:	0409      	lsls	r1, r1, #16
 800b890:	e7fb      	b.n	800b88a <HAL_GPIO_WritePin+0x2>
	...

0800b894 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b894:	4b19      	ldr	r3, [pc, #100]	; (800b8fc <HAL_PWREx_EnableOverDrive+0x68>)
{
 800b896:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b89a:	4c19      	ldr	r4, [pc, #100]	; (800b900 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800b89c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b8a0:	641a      	str	r2, [r3, #64]	; 0x40
 800b8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8b2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b8b4:	f7ff fa36 	bl	800ad24 <HAL_GetTick>
 800b8b8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b8ba:	6863      	ldr	r3, [r4, #4]
 800b8bc:	03da      	lsls	r2, r3, #15
 800b8be:	d50c      	bpl.n	800b8da <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b8c8:	f7ff fa2c 	bl	800ad24 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b8cc:	4c0c      	ldr	r4, [pc, #48]	; (800b900 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 800b8ce:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b8d0:	6863      	ldr	r3, [r4, #4]
 800b8d2:	039b      	lsls	r3, r3, #14
 800b8d4:	d50a      	bpl.n	800b8ec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e006      	b.n	800b8e8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b8da:	f7ff fa23 	bl	800ad24 <HAL_GetTick>
 800b8de:	1b40      	subs	r0, r0, r5
 800b8e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b8e4:	d9e9      	bls.n	800b8ba <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800b8e6:	2003      	movs	r0, #3
}
 800b8e8:	b003      	add	sp, #12
 800b8ea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b8ec:	f7ff fa1a 	bl	800ad24 <HAL_GetTick>
 800b8f0:	1b40      	subs	r0, r0, r5
 800b8f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b8f6:	d9eb      	bls.n	800b8d0 <HAL_PWREx_EnableOverDrive+0x3c>
 800b8f8:	e7f5      	b.n	800b8e6 <HAL_PWREx_EnableOverDrive+0x52>
 800b8fa:	bf00      	nop
 800b8fc:	40023800 	.word	0x40023800
 800b900:	40007000 	.word	0x40007000

0800b904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b908:	4604      	mov	r4, r0
 800b90a:	b908      	cbnz	r0, 800b910 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b90c:	2001      	movs	r0, #1
 800b90e:	e03f      	b.n	800b990 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b910:	6803      	ldr	r3, [r0, #0]
 800b912:	07d8      	lsls	r0, r3, #31
 800b914:	d410      	bmi.n	800b938 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	0799      	lsls	r1, r3, #30
 800b91a:	d460      	bmi.n	800b9de <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	0719      	lsls	r1, r3, #28
 800b920:	f100 80a5 	bmi.w	800ba6e <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	075a      	lsls	r2, r3, #29
 800b928:	f100 80c6 	bmi.w	800bab8 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b92c:	69a0      	ldr	r0, [r4, #24]
 800b92e:	2800      	cmp	r0, #0
 800b930:	f040 8130 	bne.w	800bb94 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 800b934:	2000      	movs	r0, #0
 800b936:	e02b      	b.n	800b990 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b938:	4b94      	ldr	r3, [pc, #592]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	f002 020c 	and.w	r2, r2, #12
 800b940:	2a04      	cmp	r2, #4
 800b942:	d007      	beq.n	800b954 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b944:	689a      	ldr	r2, [r3, #8]
 800b946:	f002 020c 	and.w	r2, r2, #12
 800b94a:	2a08      	cmp	r2, #8
 800b94c:	d10a      	bne.n	800b964 <HAL_RCC_OscConfig+0x60>
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	025a      	lsls	r2, r3, #9
 800b952:	d507      	bpl.n	800b964 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b954:	4b8d      	ldr	r3, [pc, #564]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	039b      	lsls	r3, r3, #14
 800b95a:	d5dc      	bpl.n	800b916 <HAL_RCC_OscConfig+0x12>
 800b95c:	6863      	ldr	r3, [r4, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1d9      	bne.n	800b916 <HAL_RCC_OscConfig+0x12>
 800b962:	e7d3      	b.n	800b90c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	4d89      	ldr	r5, [pc, #548]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800b968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b96c:	d113      	bne.n	800b996 <HAL_RCC_OscConfig+0x92>
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b974:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b976:	f7ff f9d5 	bl	800ad24 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b97a:	4d84      	ldr	r5, [pc, #528]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800b97c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	039f      	lsls	r7, r3, #14
 800b982:	d4c8      	bmi.n	800b916 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b984:	f7ff f9ce 	bl	800ad24 <HAL_GetTick>
 800b988:	1b80      	subs	r0, r0, r6
 800b98a:	2864      	cmp	r0, #100	; 0x64
 800b98c:	d9f7      	bls.n	800b97e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800b98e:	2003      	movs	r0, #3
}
 800b990:	b002      	add	sp, #8
 800b992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b996:	b99b      	cbnz	r3, 800b9c0 <HAL_RCC_OscConfig+0xbc>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b99e:	602b      	str	r3, [r5, #0]
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9a6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b9a8:	f7ff f9bc 	bl	800ad24 <HAL_GetTick>
 800b9ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b9ae:	682b      	ldr	r3, [r5, #0]
 800b9b0:	0398      	lsls	r0, r3, #14
 800b9b2:	d5b0      	bpl.n	800b916 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b9b4:	f7ff f9b6 	bl	800ad24 <HAL_GetTick>
 800b9b8:	1b80      	subs	r0, r0, r6
 800b9ba:	2864      	cmp	r0, #100	; 0x64
 800b9bc:	d9f7      	bls.n	800b9ae <HAL_RCC_OscConfig+0xaa>
 800b9be:	e7e6      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	d103      	bne.n	800b9d0 <HAL_RCC_OscConfig+0xcc>
 800b9c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	e7ce      	b.n	800b96e <HAL_RCC_OscConfig+0x6a>
 800b9d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9d4:	602b      	str	r3, [r5, #0]
 800b9d6:	682b      	ldr	r3, [r5, #0]
 800b9d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b9dc:	e7ca      	b.n	800b974 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b9de:	4b6b      	ldr	r3, [pc, #428]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800b9e0:	689a      	ldr	r2, [r3, #8]
 800b9e2:	f012 0f0c 	tst.w	r2, #12
 800b9e6:	d007      	beq.n	800b9f8 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b9e8:	689a      	ldr	r2, [r3, #8]
 800b9ea:	f002 020c 	and.w	r2, r2, #12
 800b9ee:	2a08      	cmp	r2, #8
 800b9f0:	d111      	bne.n	800ba16 <HAL_RCC_OscConfig+0x112>
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	0259      	lsls	r1, r3, #9
 800b9f6:	d40e      	bmi.n	800ba16 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b9f8:	4b64      	ldr	r3, [pc, #400]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	0792      	lsls	r2, r2, #30
 800b9fe:	d502      	bpl.n	800ba06 <HAL_RCC_OscConfig+0x102>
 800ba00:	68e2      	ldr	r2, [r4, #12]
 800ba02:	2a01      	cmp	r2, #1
 800ba04:	d182      	bne.n	800b90c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	6921      	ldr	r1, [r4, #16]
 800ba0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800ba0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800ba12:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba14:	e782      	b.n	800b91c <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ba16:	68e3      	ldr	r3, [r4, #12]
 800ba18:	4d5c      	ldr	r5, [pc, #368]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800ba1a:	b1bb      	cbz	r3, 800ba4c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ba24:	f7ff f97e 	bl	800ad24 <HAL_GetTick>
 800ba28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	079f      	lsls	r7, r3, #30
 800ba2e:	d507      	bpl.n	800ba40 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	6922      	ldr	r2, [r4, #16]
 800ba34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ba38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ba3c:	602b      	str	r3, [r5, #0]
 800ba3e:	e76d      	b.n	800b91c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba40:	f7ff f970 	bl	800ad24 <HAL_GetTick>
 800ba44:	1b80      	subs	r0, r0, r6
 800ba46:	2802      	cmp	r0, #2
 800ba48:	d9ef      	bls.n	800ba2a <HAL_RCC_OscConfig+0x126>
 800ba4a:	e7a0      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	f023 0301 	bic.w	r3, r3, #1
 800ba52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ba54:	f7ff f966 	bl	800ad24 <HAL_GetTick>
 800ba58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ba5a:	682b      	ldr	r3, [r5, #0]
 800ba5c:	0798      	lsls	r0, r3, #30
 800ba5e:	f57f af5d 	bpl.w	800b91c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba62:	f7ff f95f 	bl	800ad24 <HAL_GetTick>
 800ba66:	1b80      	subs	r0, r0, r6
 800ba68:	2802      	cmp	r0, #2
 800ba6a:	d9f6      	bls.n	800ba5a <HAL_RCC_OscConfig+0x156>
 800ba6c:	e78f      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba6e:	6963      	ldr	r3, [r4, #20]
 800ba70:	4d46      	ldr	r5, [pc, #280]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800ba72:	b183      	cbz	r3, 800ba96 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 800ba74:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ba76:	f043 0301 	orr.w	r3, r3, #1
 800ba7a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ba7c:	f7ff f952 	bl	800ad24 <HAL_GetTick>
 800ba80:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ba84:	079b      	lsls	r3, r3, #30
 800ba86:	f53f af4d 	bmi.w	800b924 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba8a:	f7ff f94b 	bl	800ad24 <HAL_GetTick>
 800ba8e:	1b80      	subs	r0, r0, r6
 800ba90:	2802      	cmp	r0, #2
 800ba92:	d9f6      	bls.n	800ba82 <HAL_RCC_OscConfig+0x17e>
 800ba94:	e77b      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 800ba96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ba98:	f023 0301 	bic.w	r3, r3, #1
 800ba9c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ba9e:	f7ff f941 	bl	800ad24 <HAL_GetTick>
 800baa2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800baa4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800baa6:	079f      	lsls	r7, r3, #30
 800baa8:	f57f af3c 	bpl.w	800b924 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800baac:	f7ff f93a 	bl	800ad24 <HAL_GetTick>
 800bab0:	1b80      	subs	r0, r0, r6
 800bab2:	2802      	cmp	r0, #2
 800bab4:	d9f6      	bls.n	800baa4 <HAL_RCC_OscConfig+0x1a0>
 800bab6:	e76a      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bab8:	4b34      	ldr	r3, [pc, #208]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800baba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800babc:	00d0      	lsls	r0, r2, #3
 800babe:	d427      	bmi.n	800bb10 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800bac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800bac2:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800bac4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bac8:	641a      	str	r2, [r3, #64]	; 0x40
 800baca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bacc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bad4:	4d2e      	ldr	r5, [pc, #184]	; (800bb90 <HAL_RCC_OscConfig+0x28c>)
 800bad6:	682b      	ldr	r3, [r5, #0]
 800bad8:	05d9      	lsls	r1, r3, #23
 800bada:	d51b      	bpl.n	800bb14 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800badc:	68a3      	ldr	r3, [r4, #8]
 800bade:	4d2b      	ldr	r5, [pc, #172]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d127      	bne.n	800bb34 <HAL_RCC_OscConfig+0x230>
 800bae4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bae6:	f043 0301 	orr.w	r3, r3, #1
 800baea:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baec:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800baf0:	f7ff f918 	bl	800ad24 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800baf4:	4f25      	ldr	r7, [pc, #148]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800baf6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800baf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bafa:	079b      	lsls	r3, r3, #30
 800bafc:	d53f      	bpl.n	800bb7e <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	f43f af14 	beq.w	800b92c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb04:	4a21      	ldr	r2, [pc, #132]	; (800bb8c <HAL_RCC_OscConfig+0x288>)
 800bb06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bb08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb0c:	6413      	str	r3, [r2, #64]	; 0x40
 800bb0e:	e70d      	b.n	800b92c <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 800bb10:	2600      	movs	r6, #0
 800bb12:	e7df      	b.n	800bad4 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb1a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800bb1c:	f7ff f902 	bl	800ad24 <HAL_GetTick>
 800bb20:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb22:	682b      	ldr	r3, [r5, #0]
 800bb24:	05da      	lsls	r2, r3, #23
 800bb26:	d4d9      	bmi.n	800badc <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb28:	f7ff f8fc 	bl	800ad24 <HAL_GetTick>
 800bb2c:	1bc0      	subs	r0, r0, r7
 800bb2e:	2864      	cmp	r0, #100	; 0x64
 800bb30:	d9f7      	bls.n	800bb22 <HAL_RCC_OscConfig+0x21e>
 800bb32:	e72c      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb34:	b9ab      	cbnz	r3, 800bb62 <HAL_RCC_OscConfig+0x25e>
 800bb36:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb3c:	f023 0301 	bic.w	r3, r3, #1
 800bb40:	672b      	str	r3, [r5, #112]	; 0x70
 800bb42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bb44:	f023 0304 	bic.w	r3, r3, #4
 800bb48:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800bb4a:	f7ff f8eb 	bl	800ad24 <HAL_GetTick>
 800bb4e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bb52:	0798      	lsls	r0, r3, #30
 800bb54:	d5d3      	bpl.n	800bafe <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb56:	f7ff f8e5 	bl	800ad24 <HAL_GetTick>
 800bb5a:	1bc0      	subs	r0, r0, r7
 800bb5c:	4540      	cmp	r0, r8
 800bb5e:	d9f7      	bls.n	800bb50 <HAL_RCC_OscConfig+0x24c>
 800bb60:	e715      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb62:	2b05      	cmp	r3, #5
 800bb64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bb66:	d103      	bne.n	800bb70 <HAL_RCC_OscConfig+0x26c>
 800bb68:	f043 0304 	orr.w	r3, r3, #4
 800bb6c:	672b      	str	r3, [r5, #112]	; 0x70
 800bb6e:	e7b9      	b.n	800bae4 <HAL_RCC_OscConfig+0x1e0>
 800bb70:	f023 0301 	bic.w	r3, r3, #1
 800bb74:	672b      	str	r3, [r5, #112]	; 0x70
 800bb76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bb78:	f023 0304 	bic.w	r3, r3, #4
 800bb7c:	e7b5      	b.n	800baea <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb7e:	f7ff f8d1 	bl	800ad24 <HAL_GetTick>
 800bb82:	eba0 0008 	sub.w	r0, r0, r8
 800bb86:	42a8      	cmp	r0, r5
 800bb88:	d9b6      	bls.n	800baf8 <HAL_RCC_OscConfig+0x1f4>
 800bb8a:	e700      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
 800bb8c:	40023800 	.word	0x40023800
 800bb90:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bb94:	4d38      	ldr	r5, [pc, #224]	; (800bc78 <HAL_RCC_OscConfig+0x374>)
 800bb96:	68ab      	ldr	r3, [r5, #8]
 800bb98:	f003 030c 	and.w	r3, r3, #12
 800bb9c:	2b08      	cmp	r3, #8
 800bb9e:	d041      	beq.n	800bc24 <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 800bba0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bba2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800bba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bba8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbaa:	d12e      	bne.n	800bc0a <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 800bbac:	f7ff f8ba 	bl	800ad24 <HAL_GetTick>
 800bbb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbb2:	682b      	ldr	r3, [r5, #0]
 800bbb4:	0199      	lsls	r1, r3, #6
 800bbb6:	d422      	bmi.n	800bbfe <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bbb8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bbc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbc4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800bbc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bbca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bbce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbd0:	4c29      	ldr	r4, [pc, #164]	; (800bc78 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bbd2:	0852      	lsrs	r2, r2, #1
 800bbd4:	3a01      	subs	r2, #1
 800bbd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbda:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800bbdc:	682b      	ldr	r3, [r5, #0]
 800bbde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbe2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bbe4:	f7ff f89e 	bl	800ad24 <HAL_GetTick>
 800bbe8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	019a      	lsls	r2, r3, #6
 800bbee:	f53f aea1 	bmi.w	800b934 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbf2:	f7ff f897 	bl	800ad24 <HAL_GetTick>
 800bbf6:	1b40      	subs	r0, r0, r5
 800bbf8:	2802      	cmp	r0, #2
 800bbfa:	d9f6      	bls.n	800bbea <HAL_RCC_OscConfig+0x2e6>
 800bbfc:	e6c7      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbfe:	f7ff f891 	bl	800ad24 <HAL_GetTick>
 800bc02:	1b80      	subs	r0, r0, r6
 800bc04:	2802      	cmp	r0, #2
 800bc06:	d9d4      	bls.n	800bbb2 <HAL_RCC_OscConfig+0x2ae>
 800bc08:	e6c1      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 800bc0a:	f7ff f88b 	bl	800ad24 <HAL_GetTick>
 800bc0e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	019b      	lsls	r3, r3, #6
 800bc14:	f57f ae8e 	bpl.w	800b934 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc18:	f7ff f884 	bl	800ad24 <HAL_GetTick>
 800bc1c:	1b00      	subs	r0, r0, r4
 800bc1e:	2802      	cmp	r0, #2
 800bc20:	d9f6      	bls.n	800bc10 <HAL_RCC_OscConfig+0x30c>
 800bc22:	e6b4      	b.n	800b98e <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc24:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800bc26:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc28:	f43f aeb2 	beq.w	800b990 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc30:	69e1      	ldr	r1, [r4, #28]
 800bc32:	428a      	cmp	r2, r1
 800bc34:	f47f ae6a 	bne.w	800b90c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc3c:	6a21      	ldr	r1, [r4, #32]
 800bc3e:	428a      	cmp	r2, r1
 800bc40:	f47f ae64 	bne.w	800b90c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc44:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bc48:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc4a:	401a      	ands	r2, r3
 800bc4c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800bc50:	f47f ae5c 	bne.w	800b90c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bc54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bc56:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800bc5a:	0852      	lsrs	r2, r2, #1
 800bc5c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bc5e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800bc62:	f47f ae53 	bne.w	800b90c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800bc66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bc68:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bc6c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 800bc70:	bf14      	ite	ne
 800bc72:	2001      	movne	r0, #1
 800bc74:	2000      	moveq	r0, #0
 800bc76:	e68b      	b.n	800b990 <HAL_RCC_OscConfig+0x8c>
 800bc78:	40023800 	.word	0x40023800

0800bc7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc7c:	4913      	ldr	r1, [pc, #76]	; (800bccc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800bc7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc80:	688b      	ldr	r3, [r1, #8]
 800bc82:	f003 030c 	and.w	r3, r3, #12
 800bc86:	2b04      	cmp	r3, #4
 800bc88:	d003      	beq.n	800bc92 <HAL_RCC_GetSysClockFreq+0x16>
 800bc8a:	2b08      	cmp	r3, #8
 800bc8c:	d003      	beq.n	800bc96 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bc8e:	4810      	ldr	r0, [pc, #64]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800bc90:	e000      	b.n	800bc94 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800bc92:	4810      	ldr	r0, [pc, #64]	; (800bcd4 <HAL_RCC_GetSysClockFreq+0x58>)
}
 800bc94:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc96:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bc98:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc9a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bca0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bca4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800bca8:	bf1a      	itte	ne
 800bcaa:	480a      	ldrne	r0, [pc, #40]	; (800bcd4 <HAL_RCC_GetSysClockFreq+0x58>)
 800bcac:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bcae:	4808      	ldreq	r0, [pc, #32]	; (800bcd0 <HAL_RCC_GetSysClockFreq+0x54>)
 800bcb0:	fba1 0100 	umull	r0, r1, r1, r0
 800bcb4:	f7f5 f810 	bl	8000cd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bcb8:	4b04      	ldr	r3, [pc, #16]	; (800bccc <HAL_RCC_GetSysClockFreq+0x50>)
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800bcc4:	fbb0 f0f3 	udiv	r0, r0, r3
 800bcc8:	e7e4      	b.n	800bc94 <HAL_RCC_GetSysClockFreq+0x18>
 800bcca:	bf00      	nop
 800bccc:	40023800 	.word	0x40023800
 800bcd0:	00f42400 	.word	0x00f42400
 800bcd4:	017d7840 	.word	0x017d7840

0800bcd8 <HAL_RCC_ClockConfig>:
{
 800bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcdc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800bcde:	4604      	mov	r4, r0
 800bce0:	b910      	cbnz	r0, 800bce8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800bce2:	2001      	movs	r0, #1
}
 800bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bce8:	4a45      	ldr	r2, [pc, #276]	; (800be00 <HAL_RCC_ClockConfig+0x128>)
 800bcea:	6813      	ldr	r3, [r2, #0]
 800bcec:	f003 030f 	and.w	r3, r3, #15
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	d328      	bcc.n	800bd46 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcf4:	6821      	ldr	r1, [r4, #0]
 800bcf6:	078f      	lsls	r7, r1, #30
 800bcf8:	d430      	bmi.n	800bd5c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bcfa:	07c8      	lsls	r0, r1, #31
 800bcfc:	d443      	bmi.n	800bd86 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bcfe:	4a40      	ldr	r2, [pc, #256]	; (800be00 <HAL_RCC_ClockConfig+0x128>)
 800bd00:	6813      	ldr	r3, [r2, #0]
 800bd02:	f003 030f 	and.w	r3, r3, #15
 800bd06:	42ab      	cmp	r3, r5
 800bd08:	d866      	bhi.n	800bdd8 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd0a:	6822      	ldr	r2, [r4, #0]
 800bd0c:	0751      	lsls	r1, r2, #29
 800bd0e:	d46f      	bmi.n	800bdf0 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd10:	0713      	lsls	r3, r2, #28
 800bd12:	d507      	bpl.n	800bd24 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bd14:	4a3b      	ldr	r2, [pc, #236]	; (800be04 <HAL_RCC_ClockConfig+0x12c>)
 800bd16:	6921      	ldr	r1, [r4, #16]
 800bd18:	6893      	ldr	r3, [r2, #8]
 800bd1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bd1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bd22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bd24:	f7ff ffaa 	bl	800bc7c <HAL_RCC_GetSysClockFreq>
 800bd28:	4b36      	ldr	r3, [pc, #216]	; (800be04 <HAL_RCC_ClockConfig+0x12c>)
 800bd2a:	4a37      	ldr	r2, [pc, #220]	; (800be08 <HAL_RCC_ClockConfig+0x130>)
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bd32:	5cd3      	ldrb	r3, [r2, r3]
 800bd34:	40d8      	lsrs	r0, r3
 800bd36:	4b35      	ldr	r3, [pc, #212]	; (800be0c <HAL_RCC_ClockConfig+0x134>)
 800bd38:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800bd3a:	4b35      	ldr	r3, [pc, #212]	; (800be10 <HAL_RCC_ClockConfig+0x138>)
 800bd3c:	6818      	ldr	r0, [r3, #0]
 800bd3e:	f7fe ffaf 	bl	800aca0 <HAL_InitTick>
  return HAL_OK;
 800bd42:	2000      	movs	r0, #0
 800bd44:	e7ce      	b.n	800bce4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd46:	6813      	ldr	r3, [r2, #0]
 800bd48:	f023 030f 	bic.w	r3, r3, #15
 800bd4c:	430b      	orrs	r3, r1
 800bd4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd50:	6813      	ldr	r3, [r2, #0]
 800bd52:	f003 030f 	and.w	r3, r3, #15
 800bd56:	428b      	cmp	r3, r1
 800bd58:	d1c3      	bne.n	800bce2 <HAL_RCC_ClockConfig+0xa>
 800bd5a:	e7cb      	b.n	800bcf4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd5c:	f011 0f04 	tst.w	r1, #4
 800bd60:	4b28      	ldr	r3, [pc, #160]	; (800be04 <HAL_RCC_ClockConfig+0x12c>)
 800bd62:	d003      	beq.n	800bd6c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800bd6a:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd6c:	070e      	lsls	r6, r1, #28
 800bd6e:	d503      	bpl.n	800bd78 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bd70:	689a      	ldr	r2, [r3, #8]
 800bd72:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800bd76:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd78:	689a      	ldr	r2, [r3, #8]
 800bd7a:	68a0      	ldr	r0, [r4, #8]
 800bd7c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800bd80:	4302      	orrs	r2, r0
 800bd82:	609a      	str	r2, [r3, #8]
 800bd84:	e7b9      	b.n	800bcfa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd86:	6861      	ldr	r1, [r4, #4]
 800bd88:	4b1e      	ldr	r3, [pc, #120]	; (800be04 <HAL_RCC_ClockConfig+0x12c>)
 800bd8a:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd8c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd8e:	d11b      	bne.n	800bdc8 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd90:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd94:	d0a5      	beq.n	800bce2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd96:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd98:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd9c:	4e19      	ldr	r6, [pc, #100]	; (800be04 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd9e:	f022 0203 	bic.w	r2, r2, #3
 800bda2:	430a      	orrs	r2, r1
 800bda4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800bda6:	f7fe ffbd 	bl	800ad24 <HAL_GetTick>
 800bdaa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdac:	68b3      	ldr	r3, [r6, #8]
 800bdae:	6862      	ldr	r2, [r4, #4]
 800bdb0:	f003 030c 	and.w	r3, r3, #12
 800bdb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bdb8:	d0a1      	beq.n	800bcfe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdba:	f7fe ffb3 	bl	800ad24 <HAL_GetTick>
 800bdbe:	1bc0      	subs	r0, r0, r7
 800bdc0:	4540      	cmp	r0, r8
 800bdc2:	d9f3      	bls.n	800bdac <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800bdc4:	2003      	movs	r0, #3
 800bdc6:	e78d      	b.n	800bce4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bdc8:	2902      	cmp	r1, #2
 800bdca:	d102      	bne.n	800bdd2 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdcc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800bdd0:	e7e0      	b.n	800bd94 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdd2:	f012 0f02 	tst.w	r2, #2
 800bdd6:	e7dd      	b.n	800bd94 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdd8:	6813      	ldr	r3, [r2, #0]
 800bdda:	f023 030f 	bic.w	r3, r3, #15
 800bdde:	432b      	orrs	r3, r5
 800bde0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bde2:	6813      	ldr	r3, [r2, #0]
 800bde4:	f003 030f 	and.w	r3, r3, #15
 800bde8:	42ab      	cmp	r3, r5
 800bdea:	f47f af7a 	bne.w	800bce2 <HAL_RCC_ClockConfig+0xa>
 800bdee:	e78c      	b.n	800bd0a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bdf0:	4904      	ldr	r1, [pc, #16]	; (800be04 <HAL_RCC_ClockConfig+0x12c>)
 800bdf2:	68e0      	ldr	r0, [r4, #12]
 800bdf4:	688b      	ldr	r3, [r1, #8]
 800bdf6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800bdfa:	4303      	orrs	r3, r0
 800bdfc:	608b      	str	r3, [r1, #8]
 800bdfe:	e787      	b.n	800bd10 <HAL_RCC_ClockConfig+0x38>
 800be00:	40023c00 	.word	0x40023c00
 800be04:	40023800 	.word	0x40023800
 800be08:	080151d8 	.word	0x080151d8
 800be0c:	200003d4 	.word	0x200003d4
 800be10:	20002ba4 	.word	0x20002ba4

0800be14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800be14:	4b04      	ldr	r3, [pc, #16]	; (800be28 <HAL_RCC_GetPCLK1Freq+0x14>)
 800be16:	4a05      	ldr	r2, [pc, #20]	; (800be2c <HAL_RCC_GetPCLK1Freq+0x18>)
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800be1e:	5cd3      	ldrb	r3, [r2, r3]
 800be20:	4a03      	ldr	r2, [pc, #12]	; (800be30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800be22:	6810      	ldr	r0, [r2, #0]
}
 800be24:	40d8      	lsrs	r0, r3
 800be26:	4770      	bx	lr
 800be28:	40023800 	.word	0x40023800
 800be2c:	080151e8 	.word	0x080151e8
 800be30:	200003d4 	.word	0x200003d4

0800be34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800be34:	4b04      	ldr	r3, [pc, #16]	; (800be48 <HAL_RCC_GetPCLK2Freq+0x14>)
 800be36:	4a05      	ldr	r2, [pc, #20]	; (800be4c <HAL_RCC_GetPCLK2Freq+0x18>)
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800be3e:	5cd3      	ldrb	r3, [r2, r3]
 800be40:	4a03      	ldr	r2, [pc, #12]	; (800be50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800be42:	6810      	ldr	r0, [r2, #0]
}
 800be44:	40d8      	lsrs	r0, r3
 800be46:	4770      	bx	lr
 800be48:	40023800 	.word	0x40023800
 800be4c:	080151e8 	.word	0x080151e8
 800be50:	200003d4 	.word	0x200003d4

0800be54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800be58:	6802      	ldr	r2, [r0, #0]
{
 800be5a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800be5c:	f012 0601 	ands.w	r6, r2, #1
 800be60:	d00b      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800be62:	4bb9      	ldr	r3, [pc, #740]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be64:	6899      	ldr	r1, [r3, #8]
 800be66:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800be6a:	6099      	str	r1, [r3, #8]
 800be6c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800be6e:	6899      	ldr	r1, [r3, #8]
 800be70:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800be72:	fab6 f686 	clz	r6, r6
 800be76:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800be78:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800be7a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800be7e:	d012      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be80:	49b1      	ldr	r1, [pc, #708]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800be82:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800be84:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800be88:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be8c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800be90:	bf08      	it	eq
 800be92:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be94:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800be98:	bf16      	itet	ne
 800be9a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800be9e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bea0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bea2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bea6:	02d7      	lsls	r7, r2, #11
 800bea8:	d510      	bpl.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800beaa:	48a7      	ldr	r0, [pc, #668]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800beac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800beae:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800beb2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800beb6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800beba:	ea43 0301 	orr.w	r3, r3, r1
 800bebe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bec2:	f000 814b 	beq.w	800c15c <HAL_RCCEx_PeriphCLKConfig+0x308>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800bec6:	2900      	cmp	r1, #0
 800bec8:	bf08      	it	eq
 800beca:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800becc:	0690      	lsls	r0, r2, #26
 800bece:	d531      	bpl.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bed0:	4b9d      	ldr	r3, [pc, #628]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bed2:	4f9e      	ldr	r7, [pc, #632]	; (800c14c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800bed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bed6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800beda:	641a      	str	r2, [r3, #64]	; 0x40
 800bedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beec:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beee:	f7fe ff19 	bl	800ad24 <HAL_GetTick>
 800bef2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	05d9      	lsls	r1, r3, #23
 800bef8:	f140 8132 	bpl.w	800c160 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800befc:	4f92      	ldr	r7, [pc, #584]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800befe:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bf00:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800bf04:	f040 8137 	bne.w	800c176 <HAL_RCCEx_PeriphCLKConfig+0x322>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf0a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800bf0e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800bf12:	4a8d      	ldr	r2, [pc, #564]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf14:	f040 8155 	bne.w	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800bf18:	6891      	ldr	r1, [r2, #8]
 800bf1a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800bf1e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800bf22:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800bf26:	4301      	orrs	r1, r0
 800bf28:	6091      	str	r1, [r2, #8]
 800bf2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf2e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800bf30:	430b      	orrs	r3, r1
 800bf32:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	06df      	lsls	r7, r3, #27
 800bf38:	d50c      	bpl.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bf3a:	4a83      	ldr	r2, [pc, #524]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf3c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800bf40:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800bf44:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800bf48:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800bf4c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bf4e:	4301      	orrs	r1, r0
 800bf50:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf54:	0458      	lsls	r0, r3, #17
 800bf56:	d508      	bpl.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf58:	497b      	ldr	r1, [pc, #492]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf5a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800bf5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf60:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800bf64:	4302      	orrs	r2, r0
 800bf66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bf6a:	0419      	lsls	r1, r3, #16
 800bf6c:	d508      	bpl.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf6e:	4976      	ldr	r1, [pc, #472]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf70:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bf72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf76:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800bf7a:	4302      	orrs	r2, r0
 800bf7c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf80:	03da      	lsls	r2, r3, #15
 800bf82:	d508      	bpl.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bf84:	4970      	ldr	r1, [pc, #448]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf86:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800bf88:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bf8c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800bf90:	4302      	orrs	r2, r0
 800bf92:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf96:	065f      	lsls	r7, r3, #25
 800bf98:	d508      	bpl.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf9a:	496b      	ldr	r1, [pc, #428]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bf9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800bf9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bfa2:	f022 0203 	bic.w	r2, r2, #3
 800bfa6:	4302      	orrs	r2, r0
 800bfa8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bfac:	0618      	lsls	r0, r3, #24
 800bfae:	d508      	bpl.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bfb0:	4965      	ldr	r1, [pc, #404]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bfb2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800bfb4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bfb8:	f022 020c 	bic.w	r2, r2, #12
 800bfbc:	4302      	orrs	r2, r0
 800bfbe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bfc2:	05d9      	lsls	r1, r3, #23
 800bfc4:	d508      	bpl.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bfc6:	4960      	ldr	r1, [pc, #384]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bfc8:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bfca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bfce:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800bfd2:	4302      	orrs	r2, r0
 800bfd4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bfd8:	059a      	lsls	r2, r3, #22
 800bfda:	d508      	bpl.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bfdc:	495a      	ldr	r1, [pc, #360]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bfde:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bfe0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bfe4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bfe8:	4302      	orrs	r2, r0
 800bfea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bfee:	055f      	lsls	r7, r3, #21
 800bff0:	d508      	bpl.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bff2:	4955      	ldr	r1, [pc, #340]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bff4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800bff6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800bffa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bffe:	4302      	orrs	r2, r0
 800c000:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c004:	0518      	lsls	r0, r3, #20
 800c006:	d508      	bpl.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c008:	494f      	ldr	r1, [pc, #316]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c00a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c00c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c010:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c014:	4302      	orrs	r2, r0
 800c016:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c01a:	04d9      	lsls	r1, r3, #19
 800c01c:	d508      	bpl.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c01e:	494a      	ldr	r1, [pc, #296]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c020:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c022:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c026:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c02a:	4302      	orrs	r2, r0
 800c02c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c030:	049a      	lsls	r2, r3, #18
 800c032:	d508      	bpl.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c034:	4944      	ldr	r1, [pc, #272]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c036:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c038:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c03c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c040:	4302      	orrs	r2, r0
 800c042:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c046:	029f      	lsls	r7, r3, #10
 800c048:	d50c      	bpl.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c04a:	483f      	ldr	r0, [pc, #252]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c04c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c04e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800c052:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c056:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800c05a:	bf08      	it	eq
 800c05c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c05e:	430a      	orrs	r2, r1
 800c060:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c064:	0358      	lsls	r0, r3, #13
 800c066:	d508      	bpl.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c068:	4937      	ldr	r1, [pc, #220]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c06a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c06c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c070:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c074:	4302      	orrs	r2, r0
 800c076:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c07a:	0219      	lsls	r1, r3, #8
 800c07c:	d508      	bpl.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c07e:	4932      	ldr	r1, [pc, #200]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c080:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c082:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c086:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c08a:	4302      	orrs	r2, r0
 800c08c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c090:	015a      	lsls	r2, r3, #5
 800c092:	d508      	bpl.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c094:	492c      	ldr	r1, [pc, #176]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c096:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800c098:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800c09c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800c0a0:	4302      	orrs	r2, r0
 800c0a2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800c0a6:	2e00      	cmp	r6, #0
 800c0a8:	f040 808f 	bne.w	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c0ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0b0:	f000 808b 	beq.w	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c0b4:	2d01      	cmp	r5, #1
 800c0b6:	d14f      	bne.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c0b8:	4d23      	ldr	r5, [pc, #140]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c0ba:	682b      	ldr	r3, [r5, #0]
 800c0bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0c0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0c2:	f7fe fe2f 	bl	800ad24 <HAL_GetTick>
 800c0c6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	009f      	lsls	r7, r3, #2
 800c0cc:	f100 80e0 	bmi.w	800c290 <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c0d0:	6820      	ldr	r0, [r4, #0]
 800c0d2:	0305      	lsls	r5, r0, #12
 800c0d4:	d501      	bpl.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x286>
 800c0d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0d8:	b11b      	cbz	r3, 800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800c0da:	02c1      	lsls	r1, r0, #11
 800c0dc:	d518      	bpl.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c0de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c0e0:	b9b3      	cbnz	r3, 800c110 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c0e2:	4919      	ldr	r1, [pc, #100]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800c0e4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c0e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800c0ec:	061b      	lsls	r3, r3, #24
 800c0ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800c0f2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c0fc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800c100:	6a22      	ldr	r2, [r4, #32]
 800c102:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c106:	3a01      	subs	r2, #1
 800c108:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c10c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c110:	0282      	lsls	r2, r0, #10
 800c112:	d510      	bpl.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c114:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c11a:	d10c      	bne.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c11c:	490a      	ldr	r1, [pc, #40]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800c11e:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c120:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800c124:	6920      	ldr	r0, [r4, #16]
 800c126:	041b      	lsls	r3, r3, #16
 800c128:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800c12c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c130:	4313      	orrs	r3, r2
 800c132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c136:	4c04      	ldr	r4, [pc, #16]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c13e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c140:	f7fe fdf0 	bl	800ad24 <HAL_GetTick>
 800c144:	4605      	mov	r5, r0
 800c146:	e003      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c148:	40023800 	.word	0x40023800
 800c14c:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	f140 80a3 	bpl.w	800c29e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c158:	2000      	movs	r0, #0
 800c15a:	e009      	b.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      plli2sused = 1;
 800c15c:	2601      	movs	r6, #1
 800c15e:	e6b5      	b.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c160:	f7fe fde0 	bl	800ad24 <HAL_GetTick>
 800c164:	eba0 0008 	sub.w	r0, r0, r8
 800c168:	2864      	cmp	r0, #100	; 0x64
 800c16a:	f67f aec3 	bls.w	800bef4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 800c16e:	2003      	movs	r0, #3
}
 800c170:	b003      	add	sp, #12
 800c172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c176:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c178:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800c17c:	4293      	cmp	r3, r2
 800c17e:	f43f aec3 	beq.w	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800c184:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800c18a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c18e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c190:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c192:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c196:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800c198:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c19a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c19c:	07da      	lsls	r2, r3, #31
 800c19e:	f57f aeb3 	bpl.w	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 800c1a2:	f7fe fdbf 	bl	800ad24 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1a6:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800c1aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ae:	079b      	lsls	r3, r3, #30
 800c1b0:	f53f aeaa 	bmi.w	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1b4:	f7fe fdb6 	bl	800ad24 <HAL_GetTick>
 800c1b8:	eba0 0008 	sub.w	r0, r0, r8
 800c1bc:	4548      	cmp	r0, r9
 800c1be:	d9f5      	bls.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x358>
 800c1c0:	e7d5      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1c2:	6891      	ldr	r1, [r2, #8]
 800c1c4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800c1c8:	e6ae      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 800c1ca:	4e38      	ldr	r6, [pc, #224]	; (800c2ac <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800c1cc:	6833      	ldr	r3, [r6, #0]
 800c1ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1d2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c1d4:	f7fe fda6 	bl	800ad24 <HAL_GetTick>
 800c1d8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c1da:	6833      	ldr	r3, [r6, #0]
 800c1dc:	011b      	lsls	r3, r3, #4
 800c1de:	d451      	bmi.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c1e0:	6822      	ldr	r2, [r4, #0]
 800c1e2:	07d7      	lsls	r7, r2, #31
 800c1e4:	d50d      	bpl.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800c1e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c1e8:	b95b      	cbnz	r3, 800c202 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c1ea:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1ee:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800c1f2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800c1f6:	071b      	lsls	r3, r3, #28
 800c1f8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c1fc:	430b      	orrs	r3, r1
 800c1fe:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c202:	0310      	lsls	r0, r2, #12
 800c204:	d503      	bpl.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c20c:	d005      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800c20e:	02d1      	lsls	r1, r2, #11
 800c210:	d519      	bpl.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c218:	d115      	bne.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c21a:	4924      	ldr	r1, [pc, #144]	; (800c2ac <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800c21c:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c21e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800c222:	6866      	ldr	r6, [r4, #4]
 800c224:	061b      	lsls	r3, r3, #24
 800c226:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800c22a:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800c22e:	4303      	orrs	r3, r0
 800c230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c234:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800c238:	69e3      	ldr	r3, [r4, #28]
 800c23a:	f020 001f 	bic.w	r0, r0, #31
 800c23e:	3b01      	subs	r3, #1
 800c240:	4303      	orrs	r3, r0
 800c242:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c246:	0192      	lsls	r2, r2, #6
 800c248:	d50a      	bpl.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c24a:	68e3      	ldr	r3, [r4, #12]
 800c24c:	6862      	ldr	r2, [r4, #4]
 800c24e:	061b      	lsls	r3, r3, #24
 800c250:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c254:	68a2      	ldr	r2, [r4, #8]
 800c256:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800c25a:	4a14      	ldr	r2, [pc, #80]	; (800c2ac <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800c25c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800c260:	4e12      	ldr	r6, [pc, #72]	; (800c2ac <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800c262:	6833      	ldr	r3, [r6, #0]
 800c264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c268:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800c26a:	f7fe fd5b 	bl	800ad24 <HAL_GetTick>
 800c26e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	011b      	lsls	r3, r3, #4
 800c274:	f53f af1e 	bmi.w	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c278:	f7fe fd54 	bl	800ad24 <HAL_GetTick>
 800c27c:	1bc0      	subs	r0, r0, r7
 800c27e:	2864      	cmp	r0, #100	; 0x64
 800c280:	d9f6      	bls.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800c282:	e774      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c284:	f7fe fd4e 	bl	800ad24 <HAL_GetTick>
 800c288:	1bc0      	subs	r0, r0, r7
 800c28a:	2864      	cmp	r0, #100	; 0x64
 800c28c:	d9a5      	bls.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x386>
 800c28e:	e76e      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c290:	f7fe fd48 	bl	800ad24 <HAL_GetTick>
 800c294:	1b80      	subs	r0, r0, r6
 800c296:	2864      	cmp	r0, #100	; 0x64
 800c298:	f67f af16 	bls.w	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800c29c:	e767      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c29e:	f7fe fd41 	bl	800ad24 <HAL_GetTick>
 800c2a2:	1b40      	subs	r0, r0, r5
 800c2a4:	2864      	cmp	r0, #100	; 0x64
 800c2a6:	f67f af53 	bls.w	800c150 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c2aa:	e760      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800c2ac:	40023800 	.word	0x40023800

0800c2b0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2b0:	6a03      	ldr	r3, [r0, #32]
 800c2b2:	f023 0301 	bic.w	r3, r3, #1
{
 800c2b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2bc:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2be:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2c0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 800c2c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2c6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800c2ca:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c2ce:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2d0:	688d      	ldr	r5, [r1, #8]
 800c2d2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2d4:	4d0e      	ldr	r5, [pc, #56]	; (800c310 <TIM_OC1_SetConfig+0x60>)
 800c2d6:	42a8      	cmp	r0, r5
 800c2d8:	d002      	beq.n	800c2e0 <TIM_OC1_SetConfig+0x30>
 800c2da:	4e0e      	ldr	r6, [pc, #56]	; (800c314 <TIM_OC1_SetConfig+0x64>)
 800c2dc:	42b0      	cmp	r0, r6
 800c2de:	d111      	bne.n	800c304 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2e0:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2e4:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2e6:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 800c2e8:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2ec:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f0:	d002      	beq.n	800c2f8 <TIM_OC1_SetConfig+0x48>
 800c2f2:	4d08      	ldr	r5, [pc, #32]	; (800c314 <TIM_OC1_SetConfig+0x64>)
 800c2f4:	42a8      	cmp	r0, r5
 800c2f6:	d105      	bne.n	800c304 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2fc:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c300:	4335      	orrs	r5, r6
 800c302:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c304:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c306:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c308:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c30a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c30c:	6203      	str	r3, [r0, #32]
}
 800c30e:	bd70      	pop	{r4, r5, r6, pc}
 800c310:	40010000 	.word	0x40010000
 800c314:	40010400 	.word	0x40010400

0800c318 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c318:	6a03      	ldr	r3, [r0, #32]
 800c31a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800c31e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c320:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c322:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c324:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c326:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800c32c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c32e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800c332:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800c336:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c338:	688d      	ldr	r5, [r1, #8]
 800c33a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c33e:	4d11      	ldr	r5, [pc, #68]	; (800c384 <TIM_OC3_SetConfig+0x6c>)
 800c340:	42a8      	cmp	r0, r5
 800c342:	d003      	beq.n	800c34c <TIM_OC3_SetConfig+0x34>
 800c344:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c348:	42a8      	cmp	r0, r5
 800c34a:	d114      	bne.n	800c376 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c34c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800c34e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c352:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c356:	4d0b      	ldr	r5, [pc, #44]	; (800c384 <TIM_OC3_SetConfig+0x6c>)
 800c358:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800c35a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c35e:	d003      	beq.n	800c368 <TIM_OC3_SetConfig+0x50>
 800c360:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c364:	42a8      	cmp	r0, r5
 800c366:	d106      	bne.n	800c376 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c368:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c36c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c370:	4335      	orrs	r5, r6
 800c372:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c376:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c378:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c37a:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c37c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c37e:	6203      	str	r3, [r0, #32]
}
 800c380:	bd70      	pop	{r4, r5, r6, pc}
 800c382:	bf00      	nop
 800c384:	40010000 	.word	0x40010000

0800c388 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c388:	6a03      	ldr	r3, [r0, #32]
 800c38a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800c38e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c390:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c392:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c394:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c396:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c39c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c39e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3a2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3aa:	688d      	ldr	r5, [r1, #8]
 800c3ac:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3b0:	4d08      	ldr	r5, [pc, #32]	; (800c3d4 <TIM_OC4_SetConfig+0x4c>)
 800c3b2:	42a8      	cmp	r0, r5
 800c3b4:	d003      	beq.n	800c3be <TIM_OC4_SetConfig+0x36>
 800c3b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c3ba:	42a8      	cmp	r0, r5
 800c3bc:	d104      	bne.n	800c3c8 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3be:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3c2:	694d      	ldr	r5, [r1, #20]
 800c3c4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ca:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3cc:	684b      	ldr	r3, [r1, #4]
 800c3ce:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d0:	6202      	str	r2, [r0, #32]
}
 800c3d2:	bd30      	pop	{r4, r5, pc}
 800c3d4:	40010000 	.word	0x40010000

0800c3d8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c3d8:	6a03      	ldr	r3, [r0, #32]
 800c3da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800c3de:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c3e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3e2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3e4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3e6:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c3e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800c3ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c3ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800c3f6:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c3f8:	688d      	ldr	r5, [r1, #8]
 800c3fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3fe:	4d09      	ldr	r5, [pc, #36]	; (800c424 <TIM_OC5_SetConfig+0x4c>)
 800c400:	42a8      	cmp	r0, r5
 800c402:	d003      	beq.n	800c40c <TIM_OC5_SetConfig+0x34>
 800c404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c408:	42a8      	cmp	r0, r5
 800c40a:	d104      	bne.n	800c416 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c40c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c410:	694d      	ldr	r5, [r1, #20]
 800c412:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c416:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c418:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c41a:	684b      	ldr	r3, [r1, #4]
 800c41c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c41e:	6202      	str	r2, [r0, #32]
}
 800c420:	bd30      	pop	{r4, r5, pc}
 800c422:	bf00      	nop
 800c424:	40010000 	.word	0x40010000

0800c428 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c428:	6a03      	ldr	r3, [r0, #32]
 800c42a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800c42e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c430:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c432:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c434:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c436:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c438:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c43c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c43e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c446:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c44a:	688d      	ldr	r5, [r1, #8]
 800c44c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c450:	4d08      	ldr	r5, [pc, #32]	; (800c474 <TIM_OC6_SetConfig+0x4c>)
 800c452:	42a8      	cmp	r0, r5
 800c454:	d003      	beq.n	800c45e <TIM_OC6_SetConfig+0x36>
 800c456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c45a:	42a8      	cmp	r0, r5
 800c45c:	d104      	bne.n	800c468 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c45e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c462:	694d      	ldr	r5, [r1, #20]
 800c464:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c468:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c46a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c46c:	684b      	ldr	r3, [r1, #4]
 800c46e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c470:	6202      	str	r2, [r0, #32]
}
 800c472:	bd30      	pop	{r4, r5, pc}
 800c474:	40010000 	.word	0x40010000

0800c478 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800c478:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c47a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c47c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c480:	4b08      	ldr	r3, [pc, #32]	; (800c4a4 <HAL_TIM_Base_Start+0x2c>)
 800c482:	6891      	ldr	r1, [r2, #8]
 800c484:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c486:	2b06      	cmp	r3, #6
 800c488:	d006      	beq.n	800c498 <HAL_TIM_Base_Start+0x20>
 800c48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c48e:	d003      	beq.n	800c498 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 800c490:	6813      	ldr	r3, [r2, #0]
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c498:	2301      	movs	r3, #1
 800c49a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800c49e:	2000      	movs	r0, #0
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	00010007 	.word	0x00010007

0800c4a8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4a8:	6803      	ldr	r3, [r0, #0]
 800c4aa:	68da      	ldr	r2, [r3, #12]
 800c4ac:	f042 0201 	orr.w	r2, r2, #1
 800c4b0:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4b2:	4a07      	ldr	r2, [pc, #28]	; (800c4d0 <HAL_TIM_Base_Start_IT+0x28>)
 800c4b4:	6899      	ldr	r1, [r3, #8]
 800c4b6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4b8:	2a06      	cmp	r2, #6
 800c4ba:	d006      	beq.n	800c4ca <HAL_TIM_Base_Start_IT+0x22>
 800c4bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c4c0:	d003      	beq.n	800c4ca <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	f042 0201 	orr.w	r2, r2, #1
 800c4c8:	601a      	str	r2, [r3, #0]
}
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	00010007 	.word	0x00010007

0800c4d4 <HAL_TIM_OnePulse_MspInit>:
 800c4d4:	4770      	bx	lr

0800c4d6 <HAL_TIM_OC_DelayElapsedCallback>:
 800c4d6:	4770      	bx	lr

0800c4d8 <HAL_TIM_IC_CaptureCallback>:
 800c4d8:	4770      	bx	lr

0800c4da <HAL_TIM_PWM_PulseFinishedCallback>:
 800c4da:	4770      	bx	lr

0800c4dc <HAL_TIM_TriggerCallback>:
 800c4dc:	4770      	bx	lr

0800c4de <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4de:	6803      	ldr	r3, [r0, #0]
 800c4e0:	691a      	ldr	r2, [r3, #16]
 800c4e2:	0791      	lsls	r1, r2, #30
{
 800c4e4:	b510      	push	{r4, lr}
 800c4e6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4e8:	d50f      	bpl.n	800c50a <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	0792      	lsls	r2, r2, #30
 800c4ee:	d50c      	bpl.n	800c50a <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c4f0:	f06f 0202 	mvn.w	r2, #2
 800c4f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4f6:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4f8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4fa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4fc:	0799      	lsls	r1, r3, #30
 800c4fe:	f000 8085 	beq.w	800c60c <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c502:	f7ff ffe9 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c506:	2300      	movs	r3, #0
 800c508:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	691a      	ldr	r2, [r3, #16]
 800c50e:	0752      	lsls	r2, r2, #29
 800c510:	d510      	bpl.n	800c534 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c512:	68da      	ldr	r2, [r3, #12]
 800c514:	0750      	lsls	r0, r2, #29
 800c516:	d50d      	bpl.n	800c534 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c518:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c51c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c51e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c520:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c522:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c524:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c526:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c52a:	d075      	beq.n	800c618 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c52c:	f7ff ffd4 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c530:	2300      	movs	r3, #0
 800c532:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	691a      	ldr	r2, [r3, #16]
 800c538:	0711      	lsls	r1, r2, #28
 800c53a:	d50f      	bpl.n	800c55c <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c53c:	68da      	ldr	r2, [r3, #12]
 800c53e:	0712      	lsls	r2, r2, #28
 800c540:	d50c      	bpl.n	800c55c <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c542:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c546:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c54a:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c54c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c54e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c550:	079b      	lsls	r3, r3, #30
 800c552:	d067      	beq.n	800c624 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800c554:	f7ff ffc0 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c558:	2300      	movs	r3, #0
 800c55a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	691a      	ldr	r2, [r3, #16]
 800c560:	06d0      	lsls	r0, r2, #27
 800c562:	d510      	bpl.n	800c586 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	06d1      	lsls	r1, r2, #27
 800c568:	d50d      	bpl.n	800c586 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c56a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c56e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c572:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c574:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c576:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c578:	f413 7f40 	tst.w	r3, #768	; 0x300
 800c57c:	d058      	beq.n	800c630 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800c57e:	f7ff ffab 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c582:	2300      	movs	r3, #0
 800c584:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	691a      	ldr	r2, [r3, #16]
 800c58a:	07d2      	lsls	r2, r2, #31
 800c58c:	d508      	bpl.n	800c5a0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c58e:	68da      	ldr	r2, [r3, #12]
 800c590:	07d0      	lsls	r0, r2, #31
 800c592:	d505      	bpl.n	800c5a0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c594:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c598:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c59a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c59c:	f7fc f94a 	bl	8008834 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	691a      	ldr	r2, [r3, #16]
 800c5a4:	0611      	lsls	r1, r2, #24
 800c5a6:	d508      	bpl.n	800c5ba <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5a8:	68da      	ldr	r2, [r3, #12]
 800c5aa:	0612      	lsls	r2, r2, #24
 800c5ac:	d505      	bpl.n	800c5ba <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800c5b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c5b6:	f000 fae0 	bl	800cb7a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	691a      	ldr	r2, [r3, #16]
 800c5be:	05d0      	lsls	r0, r2, #23
 800c5c0:	d508      	bpl.n	800c5d4 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5c2:	68da      	ldr	r2, [r3, #12]
 800c5c4:	0611      	lsls	r1, r2, #24
 800c5c6:	d505      	bpl.n	800c5d4 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c5cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c5ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c5d0:	f000 fad4 	bl	800cb7c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	691a      	ldr	r2, [r3, #16]
 800c5d8:	0652      	lsls	r2, r2, #25
 800c5da:	d508      	bpl.n	800c5ee <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	0650      	lsls	r0, r2, #25
 800c5e0:	d505      	bpl.n	800c5ee <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800c5e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c5ea:	f7ff ff77 	bl	800c4dc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	691a      	ldr	r2, [r3, #16]
 800c5f2:	0691      	lsls	r1, r2, #26
 800c5f4:	d522      	bpl.n	800c63c <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5f6:	68da      	ldr	r2, [r3, #12]
 800c5f8:	0692      	lsls	r2, r2, #26
 800c5fa:	d51f      	bpl.n	800c63c <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5fc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c600:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c602:	611a      	str	r2, [r3, #16]
}
 800c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c608:	f000 bab6 	b.w	800cb78 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c60c:	f7ff ff63 	bl	800c4d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c610:	4620      	mov	r0, r4
 800c612:	f7ff ff62 	bl	800c4da <HAL_TIM_PWM_PulseFinishedCallback>
 800c616:	e776      	b.n	800c506 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c618:	f7ff ff5d 	bl	800c4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c61c:	4620      	mov	r0, r4
 800c61e:	f7ff ff5c 	bl	800c4da <HAL_TIM_PWM_PulseFinishedCallback>
 800c622:	e785      	b.n	800c530 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c624:	f7ff ff57 	bl	800c4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c628:	4620      	mov	r0, r4
 800c62a:	f7ff ff56 	bl	800c4da <HAL_TIM_PWM_PulseFinishedCallback>
 800c62e:	e793      	b.n	800c558 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c630:	f7ff ff51 	bl	800c4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c634:	4620      	mov	r0, r4
 800c636:	f7ff ff50 	bl	800c4da <HAL_TIM_PWM_PulseFinishedCallback>
 800c63a:	e7a2      	b.n	800c582 <HAL_TIM_IRQHandler+0xa4>
}
 800c63c:	bd10      	pop	{r4, pc}
	...

0800c640 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c640:	4a30      	ldr	r2, [pc, #192]	; (800c704 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800c642:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c644:	4290      	cmp	r0, r2
 800c646:	d012      	beq.n	800c66e <TIM_Base_SetConfig+0x2e>
 800c648:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c64c:	d00f      	beq.n	800c66e <TIM_Base_SetConfig+0x2e>
 800c64e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c652:	4290      	cmp	r0, r2
 800c654:	d00b      	beq.n	800c66e <TIM_Base_SetConfig+0x2e>
 800c656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c65a:	4290      	cmp	r0, r2
 800c65c:	d007      	beq.n	800c66e <TIM_Base_SetConfig+0x2e>
 800c65e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c662:	4290      	cmp	r0, r2
 800c664:	d003      	beq.n	800c66e <TIM_Base_SetConfig+0x2e>
 800c666:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c66a:	4290      	cmp	r0, r2
 800c66c:	d119      	bne.n	800c6a2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 800c66e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c674:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c676:	4a23      	ldr	r2, [pc, #140]	; (800c704 <TIM_Base_SetConfig+0xc4>)
 800c678:	4290      	cmp	r0, r2
 800c67a:	d029      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c67c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c680:	d026      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c682:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800c686:	4290      	cmp	r0, r2
 800c688:	d022      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c68a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c68e:	4290      	cmp	r0, r2
 800c690:	d01e      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c696:	4290      	cmp	r0, r2
 800c698:	d01a      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c69a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800c69e:	4290      	cmp	r0, r2
 800c6a0:	d016      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c6a2:	4a19      	ldr	r2, [pc, #100]	; (800c708 <TIM_Base_SetConfig+0xc8>)
 800c6a4:	4290      	cmp	r0, r2
 800c6a6:	d013      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c6a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6ac:	4290      	cmp	r0, r2
 800c6ae:	d00f      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c6b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6b4:	4290      	cmp	r0, r2
 800c6b6:	d00b      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c6b8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800c6bc:	4290      	cmp	r0, r2
 800c6be:	d007      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c6c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6c4:	4290      	cmp	r0, r2
 800c6c6:	d003      	beq.n	800c6d0 <TIM_Base_SetConfig+0x90>
 800c6c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6cc:	4290      	cmp	r0, r2
 800c6ce:	d103      	bne.n	800c6d8 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6d4:	68ca      	ldr	r2, [r1, #12]
 800c6d6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6d8:	694a      	ldr	r2, [r1, #20]
 800c6da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800c6e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6e2:	688b      	ldr	r3, [r1, #8]
 800c6e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800c6e6:	680b      	ldr	r3, [r1, #0]
 800c6e8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <TIM_Base_SetConfig+0xc4>)
 800c6ec:	4298      	cmp	r0, r3
 800c6ee:	d003      	beq.n	800c6f8 <TIM_Base_SetConfig+0xb8>
 800c6f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6f4:	4298      	cmp	r0, r3
 800c6f6:	d101      	bne.n	800c6fc <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800c6f8:	690b      	ldr	r3, [r1, #16]
 800c6fa:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	6143      	str	r3, [r0, #20]
}
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	40010000 	.word	0x40010000
 800c708:	40014000 	.word	0x40014000

0800c70c <HAL_TIM_Base_Init>:
{
 800c70c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c70e:	4604      	mov	r4, r0
 800c710:	b1a0      	cbz	r0, 800c73c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c712:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c716:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c71a:	b91b      	cbnz	r3, 800c724 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c71c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c720:	f7fc fd64 	bl	80091ec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c724:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c72a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c72e:	f7ff ff87 	bl	800c640 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c732:	2301      	movs	r3, #1
  return HAL_OK;
 800c734:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c736:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c73a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c73c:	2001      	movs	r0, #1
 800c73e:	e7fc      	b.n	800c73a <HAL_TIM_Base_Init+0x2e>

0800c740 <HAL_TIM_PWM_Init>:
{
 800c740:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c742:	4604      	mov	r4, r0
 800c744:	b1a0      	cbz	r0, 800c770 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c746:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c74a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c74e:	b91b      	cbnz	r3, 800c758 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c750:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800c754:	f7fc fd2c 	bl	80091b0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c758:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c75a:	6820      	ldr	r0, [r4, #0]
 800c75c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c75e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c762:	f7ff ff6d 	bl	800c640 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800c766:	2301      	movs	r3, #1
  return HAL_OK;
 800c768:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c76a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c76e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c770:	2001      	movs	r0, #1
 800c772:	e7fc      	b.n	800c76e <HAL_TIM_PWM_Init+0x2e>

0800c774 <HAL_TIM_OnePulse_Init>:
{
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	460d      	mov	r5, r1
  if (htim == NULL)
 800c778:	4604      	mov	r4, r0
 800c77a:	b1e0      	cbz	r0, 800c7b6 <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c77c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c780:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c784:	b91b      	cbnz	r3, 800c78e <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 800c786:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800c78a:	f7ff fea3 	bl	800c4d4 <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c78e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c790:	1d21      	adds	r1, r4, #4
 800c792:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800c794:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c798:	f7ff ff52 	bl	800c640 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c79c:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800c79e:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	f022 0208 	bic.w	r2, r2, #8
 800c7a6:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800c7a8:	6819      	ldr	r1, [r3, #0]
 800c7aa:	4329      	orrs	r1, r5
 800c7ac:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c7b6:	2001      	movs	r0, #1
 800c7b8:	e7fc      	b.n	800c7b4 <HAL_TIM_OnePulse_Init+0x40>
	...

0800c7bc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7bc:	6a03      	ldr	r3, [r0, #32]
 800c7be:	f023 0310 	bic.w	r3, r3, #16
{
 800c7c2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7c4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800c7c6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c7c8:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800c7ca:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800c7cc:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7d2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800c7d6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7da:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7de:	688d      	ldr	r5, [r1, #8]
 800c7e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7e4:	4d10      	ldr	r5, [pc, #64]	; (800c828 <TIM_OC2_SetConfig+0x6c>)
 800c7e6:	42a8      	cmp	r0, r5
 800c7e8:	d003      	beq.n	800c7f2 <TIM_OC2_SetConfig+0x36>
 800c7ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c7ee:	42a8      	cmp	r0, r5
 800c7f0:	d114      	bne.n	800c81c <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7fc:	4d0a      	ldr	r5, [pc, #40]	; (800c828 <TIM_OC2_SetConfig+0x6c>)
 800c7fe:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800c800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c804:	d003      	beq.n	800c80e <TIM_OC2_SetConfig+0x52>
 800c806:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c80a:	42a8      	cmp	r0, r5
 800c80c:	d106      	bne.n	800c81c <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c80e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c812:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800c816:	4335      	orrs	r5, r6
 800c818:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800c81c:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800c81e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c820:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800c822:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800c824:	6203      	str	r3, [r0, #32]
}
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	40010000 	.word	0x40010000

0800c82c <HAL_TIM_PWM_ConfigChannel>:
{
 800c82c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800c82e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800c832:	4604      	mov	r4, r0
 800c834:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800c836:	2b01      	cmp	r3, #1
 800c838:	d010      	beq.n	800c85c <HAL_TIM_PWM_ConfigChannel+0x30>
 800c83a:	2301      	movs	r3, #1
  switch (Channel)
 800c83c:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 800c83e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800c842:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800c846:	d043      	beq.n	800c8d0 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800c848:	d809      	bhi.n	800c85e <HAL_TIM_PWM_ConfigChannel+0x32>
 800c84a:	b1fa      	cbz	r2, 800c88c <HAL_TIM_PWM_ConfigChannel+0x60>
 800c84c:	2a04      	cmp	r2, #4
 800c84e:	d02e      	beq.n	800c8ae <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 800c850:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800c852:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c858:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c85c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800c85e:	2a10      	cmp	r2, #16
 800c860:	d047      	beq.n	800c8f2 <HAL_TIM_PWM_ConfigChannel+0xc6>
 800c862:	2a14      	cmp	r2, #20
 800c864:	d056      	beq.n	800c914 <HAL_TIM_PWM_ConfigChannel+0xe8>
 800c866:	2a0c      	cmp	r2, #12
 800c868:	d1f2      	bne.n	800c850 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c86a:	6820      	ldr	r0, [r4, #0]
 800c86c:	f7ff fd8c 	bl	800c388 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c870:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c872:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c874:	69da      	ldr	r2, [r3, #28]
 800c876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c87a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c87c:	69da      	ldr	r2, [r3, #28]
 800c87e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c882:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c884:	69da      	ldr	r2, [r3, #28]
 800c886:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c88a:	e030      	b.n	800c8ee <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c88c:	6820      	ldr	r0, [r4, #0]
 800c88e:	f7ff fd0f 	bl	800c2b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c892:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c894:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c896:	699a      	ldr	r2, [r3, #24]
 800c898:	f042 0208 	orr.w	r2, r2, #8
 800c89c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c89e:	699a      	ldr	r2, [r3, #24]
 800c8a0:	f022 0204 	bic.w	r2, r2, #4
 800c8a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c8a6:	699a      	ldr	r2, [r3, #24]
 800c8a8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8aa:	619a      	str	r2, [r3, #24]
      break;
 800c8ac:	e7d0      	b.n	800c850 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8ae:	6820      	ldr	r0, [r4, #0]
 800c8b0:	f7ff ff84 	bl	800c7bc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c8b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8b6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c8b8:	699a      	ldr	r2, [r3, #24]
 800c8ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c8c0:	699a      	ldr	r2, [r3, #24]
 800c8c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8c8:	699a      	ldr	r2, [r3, #24]
 800c8ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c8ce:	e7ec      	b.n	800c8aa <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8d0:	6820      	ldr	r0, [r4, #0]
 800c8d2:	f7ff fd21 	bl	800c318 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8d8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8da:	69da      	ldr	r2, [r3, #28]
 800c8dc:	f042 0208 	orr.w	r2, r2, #8
 800c8e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8e2:	69da      	ldr	r2, [r3, #28]
 800c8e4:	f022 0204 	bic.w	r2, r2, #4
 800c8e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8ea:	69da      	ldr	r2, [r3, #28]
 800c8ec:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8ee:	61da      	str	r2, [r3, #28]
      break;
 800c8f0:	e7ae      	b.n	800c850 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c8f2:	6820      	ldr	r0, [r4, #0]
 800c8f4:	f7ff fd70 	bl	800c3d8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8fa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c8fe:	f042 0208 	orr.w	r2, r2, #8
 800c902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c906:	f022 0204 	bic.w	r2, r2, #4
 800c90a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c90c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c90e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c910:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c912:	e79d      	b.n	800c850 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c914:	6820      	ldr	r0, [r4, #0]
 800c916:	f7ff fd87 	bl	800c428 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c91a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c91c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c91e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c924:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c92c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c92e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c930:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c934:	e7ec      	b.n	800c910 <HAL_TIM_PWM_ConfigChannel+0xe4>

0800c936 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c936:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c938:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 800c93a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c93c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c940:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c944:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c946:	6083      	str	r3, [r0, #8]
}
 800c948:	bd10      	pop	{r4, pc}
	...

0800c94c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800c94c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c950:	2b01      	cmp	r3, #1
{
 800c952:	b570      	push	{r4, r5, r6, lr}
 800c954:	4604      	mov	r4, r0
 800c956:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800c95a:	d017      	beq.n	800c98c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 800c95c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800c960:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 800c962:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800c964:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800c968:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c96a:	4b41      	ldr	r3, [pc, #260]	; (800ca70 <HAL_TIM_ConfigClockSource+0x124>)
 800c96c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800c96e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800c970:	680b      	ldr	r3, [r1, #0]
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d065      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0xf6>
 800c976:	d815      	bhi.n	800c9a4 <HAL_TIM_ConfigClockSource+0x58>
 800c978:	2b10      	cmp	r3, #16
 800c97a:	d00c      	beq.n	800c996 <HAL_TIM_ConfigClockSource+0x4a>
 800c97c:	d807      	bhi.n	800c98e <HAL_TIM_ConfigClockSource+0x42>
 800c97e:	b153      	cbz	r3, 800c996 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 800c980:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800c982:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800c984:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800c988:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800c98e:	2b20      	cmp	r3, #32
 800c990:	d001      	beq.n	800c996 <HAL_TIM_ConfigClockSource+0x4a>
 800c992:	2b30      	cmp	r3, #48	; 0x30
 800c994:	d1f4      	bne.n	800c980 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800c996:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c998:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800c99c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	e01a      	b.n	800c9da <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 800c9a4:	2b60      	cmp	r3, #96	; 0x60
 800c9a6:	d034      	beq.n	800ca12 <HAL_TIM_ConfigClockSource+0xc6>
 800c9a8:	d819      	bhi.n	800c9de <HAL_TIM_ConfigClockSource+0x92>
 800c9aa:	2b50      	cmp	r3, #80	; 0x50
 800c9ac:	d1e8      	bne.n	800c980 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9ae:	684a      	ldr	r2, [r1, #4]
 800c9b0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800c9b2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9b4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9b6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9ba:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800c9be:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9c0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9c2:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9c8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c9cc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800c9ce:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800c9d0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9d6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800c9da:	6083      	str	r3, [r0, #8]
 800c9dc:	e7d0      	b.n	800c980 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 800c9de:	2b70      	cmp	r3, #112	; 0x70
 800c9e0:	d00c      	beq.n	800c9fc <HAL_TIM_ConfigClockSource+0xb0>
 800c9e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9e6:	d1cb      	bne.n	800c980 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800c9e8:	68cb      	ldr	r3, [r1, #12]
 800c9ea:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800c9ee:	f7ff ffa2 	bl	800c936 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9f2:	6822      	ldr	r2, [r4, #0]
 800c9f4:	6893      	ldr	r3, [r2, #8]
 800c9f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c9fa:	e008      	b.n	800ca0e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800c9fc:	68cb      	ldr	r3, [r1, #12]
 800c9fe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ca02:	f7ff ff98 	bl	800c936 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca06:	6822      	ldr	r2, [r4, #0]
 800ca08:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca0e:	6093      	str	r3, [r2, #8]
      break;
 800ca10:	e7b6      	b.n	800c980 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca12:	684d      	ldr	r5, [r1, #4]
 800ca14:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca16:	6a01      	ldr	r1, [r0, #32]
 800ca18:	f021 0110 	bic.w	r1, r1, #16
 800ca1c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca1e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800ca20:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca22:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca2a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ca32:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ca34:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ca36:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca3c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800ca40:	e7cb      	b.n	800c9da <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca42:	684a      	ldr	r2, [r1, #4]
 800ca44:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800ca46:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca48:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca4a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca4e:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800ca52:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca54:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca56:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca5c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ca60:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800ca62:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ca64:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca6a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800ca6e:	e7b4      	b.n	800c9da <HAL_TIM_ConfigClockSource+0x8e>
 800ca70:	fffe0088 	.word	0xfffe0088

0800ca74 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca74:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca78:	6a03      	ldr	r3, [r0, #32]
{
 800ca7a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca7c:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca7e:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca80:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800ca82:	ea23 0304 	bic.w	r3, r3, r4
 800ca86:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca88:	6a03      	ldr	r3, [r0, #32]
 800ca8a:	431a      	orrs	r2, r3
 800ca8c:	6202      	str	r2, [r0, #32]
}
 800ca8e:	bd10      	pop	{r4, pc}

0800ca90 <HAL_TIM_OC_Start>:
{
 800ca90:	b510      	push	{r4, lr}
 800ca92:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca94:	2201      	movs	r2, #1
 800ca96:	6800      	ldr	r0, [r0, #0]
 800ca98:	f7ff ffec 	bl	800ca74 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	4a0c      	ldr	r2, [pc, #48]	; (800cad0 <HAL_TIM_OC_Start+0x40>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d003      	beq.n	800caac <HAL_TIM_OC_Start+0x1c>
 800caa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d103      	bne.n	800cab4 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800caac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cab2:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cab4:	6899      	ldr	r1, [r3, #8]
 800cab6:	4a07      	ldr	r2, [pc, #28]	; (800cad4 <HAL_TIM_OC_Start+0x44>)
 800cab8:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caba:	2a06      	cmp	r2, #6
 800cabc:	d006      	beq.n	800cacc <HAL_TIM_OC_Start+0x3c>
 800cabe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cac2:	d003      	beq.n	800cacc <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	f042 0201 	orr.w	r2, r2, #1
 800caca:	601a      	str	r2, [r3, #0]
}
 800cacc:	2000      	movs	r0, #0
 800cace:	bd10      	pop	{r4, pc}
 800cad0:	40010000 	.word	0x40010000
 800cad4:	00010007 	.word	0x00010007

0800cad8 <HAL_TIM_PWM_Start>:
 800cad8:	f7ff bfda 	b.w	800ca90 <HAL_TIM_OC_Start>

0800cadc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cadc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	f04f 0302 	mov.w	r3, #2
{
 800cae6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800cae8:	d03e      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800caee:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800caf0:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800caf2:	4d1e      	ldr	r5, [pc, #120]	; (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 800caf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800caf8:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800cafa:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800cafc:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cafe:	d002      	beq.n	800cb06 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 800cb00:	4e1b      	ldr	r6, [pc, #108]	; (800cb70 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 800cb02:	42b3      	cmp	r3, r6
 800cb04:	d103      	bne.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb0a:	684e      	ldr	r6, [r1, #4]
 800cb0c:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb0e:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb10:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb14:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb16:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 800cb1a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb1c:	d019      	beq.n	800cb52 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800cb1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb22:	d016      	beq.n	800cb52 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800cb24:	4a13      	ldr	r2, [pc, #76]	; (800cb74 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d013      	beq.n	800cb52 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800cb2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d00f      	beq.n	800cb52 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800cb32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d00b      	beq.n	800cb52 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800cb3a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d007      	beq.n	800cb52 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800cb42:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d003      	beq.n	800cb52 <HAL_TIMEx_MasterConfigSynchronization+0x76>
 800cb4a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d104      	bne.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb52:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb54:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb58:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb62:	2300      	movs	r3, #0
 800cb64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800cb68:	4618      	mov	r0, r3

  return HAL_OK;
}
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	40010000 	.word	0x40010000
 800cb70:	40010400 	.word	0x40010400
 800cb74:	40000400 	.word	0x40000400

0800cb78 <HAL_TIMEx_CommutCallback>:
 800cb78:	4770      	bx	lr

0800cb7a <HAL_TIMEx_BreakCallback>:
 800cb7a:	4770      	bx	lr

0800cb7c <HAL_TIMEx_Break2Callback>:
 800cb7c:	4770      	bx	lr

0800cb7e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb7e:	6803      	ldr	r3, [r0, #0]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cb86:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	f022 0201 	bic.w	r2, r2, #1
 800cb8e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb90:	2320      	movs	r3, #32
 800cb92:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	6603      	str	r3, [r0, #96]	; 0x60
}
 800cb98:	4770      	bx	lr
	...

0800cb9c <HAL_UART_Transmit_DMA>:
{
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800cba2:	6f67      	ldr	r7, [r4, #116]	; 0x74
 800cba4:	2f20      	cmp	r7, #32
 800cba6:	d136      	bne.n	800cc16 <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 800cba8:	b341      	cbz	r1, 800cbfc <HAL_UART_Transmit_DMA+0x60>
 800cbaa:	b33a      	cbz	r2, 800cbfc <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800cbac:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800cbb0:	2a01      	cmp	r2, #1
 800cbb2:	d030      	beq.n	800cc16 <HAL_UART_Transmit_DMA+0x7a>
 800cbb4:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb6:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbb8:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800cbba:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 800cbbc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 800cbc0:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbc4:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 800cbc6:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800cbc8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbcc:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800cbce:	b1b8      	cbz	r0, 800cc00 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cbd0:	f8df c048 	ldr.w	ip, [pc, #72]	; 800cc1c <HAL_UART_Transmit_DMA+0x80>
 800cbd4:	6822      	ldr	r2, [r4, #0]
 800cbd6:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cbda:	f8df c044 	ldr.w	ip, [pc, #68]	; 800cc20 <HAL_UART_Transmit_DMA+0x84>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cbde:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cbe0:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cbe4:	f8df c03c 	ldr.w	ip, [pc, #60]	; 800cc24 <HAL_UART_Transmit_DMA+0x88>
      huart->hdmatx->XferAbortCallback = NULL;
 800cbe8:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cbec:	f7fe fc62 	bl	800b4b4 <HAL_DMA_Start_IT>
 800cbf0:	b130      	cbz	r0, 800cc00 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cbf2:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800cbf4:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cbf8:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800cbfa:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 800cbfc:	2001      	movs	r0, #1
 800cbfe:	e009      	b.n	800cc14 <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800cc04:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cc06:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc08:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 800cc0a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cc12:	609a      	str	r2, [r3, #8]
}
 800cc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800cc16:	2002      	movs	r0, #2
 800cc18:	e7fc      	b.n	800cc14 <HAL_UART_Transmit_DMA+0x78>
 800cc1a:	bf00      	nop
 800cc1c:	0800ccb9 	.word	0x0800ccb9
 800cc20:	0800cce9 	.word	0x0800cce9
 800cc24:	0800cd39 	.word	0x0800cd39

0800cc28 <HAL_UART_Receive_DMA>:
{
 800cc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc2a:	6f87      	ldr	r7, [r0, #120]	; 0x78
{
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc30:	2f20      	cmp	r7, #32
 800cc32:	d138      	bne.n	800cca6 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800cc34:	b321      	cbz	r1, 800cc80 <HAL_UART_Receive_DMA+0x58>
 800cc36:	b31a      	cbz	r2, 800cc80 <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 800cc38:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 800cc3c:	2a01      	cmp	r2, #1
 800cc3e:	d032      	beq.n	800cca6 <HAL_UART_Receive_DMA+0x7e>
 800cc40:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc42:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc44:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 800cc46:	6541      	str	r1, [r0, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc48:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800cc4a:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    huart->RxXferSize = Size;
 800cc4e:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cc52:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800cc54:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800cc56:	b1a8      	cbz	r0, 800cc84 <HAL_UART_Receive_DMA+0x5c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cc58:	4a14      	ldr	r2, [pc, #80]	; (800ccac <HAL_UART_Receive_DMA+0x84>)
 800cc5a:	f8d4 c000 	ldr.w	ip, [r4]
 800cc5e:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cc60:	4a13      	ldr	r2, [pc, #76]	; (800ccb0 <HAL_UART_Receive_DMA+0x88>)
 800cc62:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cc64:	4a13      	ldr	r2, [pc, #76]	; (800ccb4 <HAL_UART_Receive_DMA+0x8c>)
      huart->hdmarx->XferAbortCallback = NULL;
 800cc66:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cc6a:	460a      	mov	r2, r1
 800cc6c:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800cc70:	f7fe fc20 	bl	800b4b4 <HAL_DMA_Start_IT>
 800cc74:	b130      	cbz	r0, 800cc84 <HAL_UART_Receive_DMA+0x5c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc76:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800cc78:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc7c:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800cc7e:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 800cc80:	2001      	movs	r0, #1
 800cc82:	e00f      	b.n	800cca4 <HAL_UART_Receive_DMA+0x7c>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc84:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800cc86:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc88:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800cc8a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc92:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc94:	689a      	ldr	r2, [r3, #8]
 800cc96:	f042 0201 	orr.w	r2, r2, #1
 800cc9a:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc9c:	689a      	ldr	r2, [r3, #8]
 800cc9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cca2:	609a      	str	r2, [r3, #8]
}
 800cca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800cca6:	2002      	movs	r0, #2
 800cca8:	e7fc      	b.n	800cca4 <HAL_UART_Receive_DMA+0x7c>
 800ccaa:	bf00      	nop
 800ccac:	0800ccf5 	.word	0x0800ccf5
 800ccb0:	0800cd2f 	.word	0x0800cd2f
 800ccb4:	0800cd39 	.word	0x0800cd39

0800ccb8 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ccb8:	69c2      	ldr	r2, [r0, #28]
 800ccba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 800ccbe:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ccc2:	d00c      	beq.n	800ccde <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	689a      	ldr	r2, [r3, #8]
 800ccce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccd2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccda:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccdc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fb fdb8 	bl	8008854 <HAL_UART_TxCpltCallback>
}
 800cce4:	e7fa      	b.n	800ccdc <UART_DMATransmitCplt+0x24>

0800cce6 <HAL_UART_TxHalfCpltCallback>:
 800cce6:	4770      	bx	lr

0800cce8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cce8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ccea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ccec:	f7ff fffb 	bl	800cce6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccf0:	bd08      	pop	{r3, pc}

0800ccf2 <HAL_UART_RxCpltCallback>:
 800ccf2:	4770      	bx	lr

0800ccf4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ccf4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ccf6:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccf8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ccfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccfe:	d011      	beq.n	800cd24 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd06:	6813      	ldr	r3, [r2, #0]
 800cd08:	6819      	ldr	r1, [r3, #0]
 800cd0a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800cd0e:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd10:	6899      	ldr	r1, [r3, #8]
 800cd12:	f021 0101 	bic.w	r1, r1, #1
 800cd16:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd18:	6899      	ldr	r1, [r3, #8]
 800cd1a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800cd1e:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd20:	2320      	movs	r3, #32
 800cd22:	6793      	str	r3, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800cd24:	4610      	mov	r0, r2
 800cd26:	f7ff ffe4 	bl	800ccf2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd2a:	bd08      	pop	{r3, pc}

0800cd2c <HAL_UART_RxHalfCpltCallback>:
 800cd2c:	4770      	bx	lr

0800cd2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd2e:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800cd30:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800cd32:	f7ff fffb 	bl	800cd2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd36:	bd08      	pop	{r3, pc}

0800cd38 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd38:	6b81      	ldr	r1, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd3a:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd3c:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd3e:	6f88      	ldr	r0, [r1, #120]	; 0x78
{
 800cd40:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd42:	689c      	ldr	r4, [r3, #8]
 800cd44:	0624      	lsls	r4, r4, #24
 800cd46:	d50a      	bpl.n	800cd5e <UART_DMAError+0x26>
 800cd48:	2a21      	cmp	r2, #33	; 0x21
 800cd4a:	d108      	bne.n	800cd5e <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cd58:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cd5a:	2220      	movs	r2, #32
 800cd5c:	674a      	str	r2, [r1, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	065b      	lsls	r3, r3, #25
 800cd62:	d507      	bpl.n	800cd74 <UART_DMAError+0x3c>
 800cd64:	2822      	cmp	r0, #34	; 0x22
 800cd66:	d105      	bne.n	800cd74 <UART_DMAError+0x3c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cd68:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800cd6a:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 800cd6c:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800cd70:	f7ff ff05 	bl	800cb7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd74:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd76:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd78:	f043 0310 	orr.w	r3, r3, #16
 800cd7c:	67cb      	str	r3, [r1, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800cd7e:	f7fb fd74 	bl	800886a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd82:	bd10      	pop	{r4, pc}

0800cd84 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd84:	6803      	ldr	r3, [r0, #0]
{
 800cd86:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd88:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800cd8a:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd8e:	6819      	ldr	r1, [r3, #0]
{
 800cd90:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800cd92:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd94:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800cd96:	d109      	bne.n	800cdac <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd98:	0696      	lsls	r6, r2, #26
 800cd9a:	d56e      	bpl.n	800ce7a <HAL_UART_IRQHandler+0xf6>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cd9c:	068d      	lsls	r5, r1, #26
 800cd9e:	d56c      	bpl.n	800ce7a <HAL_UART_IRQHandler+0xf6>
      if (huart->RxISR != NULL)
 800cda0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d064      	beq.n	800ce70 <HAL_UART_IRQHandler+0xec>
}
 800cda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800cdaa:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cdac:	f015 0001 	ands.w	r0, r5, #1
 800cdb0:	d102      	bne.n	800cdb8 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800cdb2:	f411 7f90 	tst.w	r1, #288	; 0x120
 800cdb6:	d060      	beq.n	800ce7a <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdb8:	07d6      	lsls	r6, r2, #31
 800cdba:	d507      	bpl.n	800cdcc <HAL_UART_IRQHandler+0x48>
 800cdbc:	05cd      	lsls	r5, r1, #23
 800cdbe:	d505      	bpl.n	800cdcc <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdc0:	2501      	movs	r5, #1
 800cdc2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdc4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800cdc6:	f045 0501 	orr.w	r5, r5, #1
 800cdca:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdcc:	0796      	lsls	r6, r2, #30
 800cdce:	d506      	bpl.n	800cdde <HAL_UART_IRQHandler+0x5a>
 800cdd0:	b128      	cbz	r0, 800cdde <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cdd2:	2502      	movs	r5, #2
 800cdd4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cdd6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800cdd8:	f045 0504 	orr.w	r5, r5, #4
 800cddc:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdde:	0755      	lsls	r5, r2, #29
 800cde0:	d506      	bpl.n	800cdf0 <HAL_UART_IRQHandler+0x6c>
 800cde2:	b128      	cbz	r0, 800cdf0 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cde4:	2504      	movs	r5, #4
 800cde6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cde8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800cdea:	f045 0502 	orr.w	r5, r5, #2
 800cdee:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cdf0:	0716      	lsls	r6, r2, #28
 800cdf2:	d508      	bpl.n	800ce06 <HAL_UART_IRQHandler+0x82>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cdf4:	068d      	lsls	r5, r1, #26
 800cdf6:	d400      	bmi.n	800cdfa <HAL_UART_IRQHandler+0x76>
 800cdf8:	b128      	cbz	r0, 800ce06 <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdfa:	2008      	movs	r0, #8
 800cdfc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cdfe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ce00:	f040 0008 	orr.w	r0, r0, #8
 800ce04:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ce06:	0510      	lsls	r0, r2, #20
 800ce08:	d508      	bpl.n	800ce1c <HAL_UART_IRQHandler+0x98>
 800ce0a:	014e      	lsls	r6, r1, #5
 800ce0c:	d506      	bpl.n	800ce1c <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce0e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ce12:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ce14:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ce16:	f043 0320 	orr.w	r3, r3, #32
 800ce1a:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce1c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ce1e:	b33b      	cbz	r3, 800ce70 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ce20:	0695      	lsls	r5, r2, #26
 800ce22:	d505      	bpl.n	800ce30 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ce24:	0688      	lsls	r0, r1, #26
 800ce26:	d503      	bpl.n	800ce30 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 800ce28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ce2a:	b10b      	cbz	r3, 800ce30 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce30:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 800ce32:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800ce34:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce36:	6892      	ldr	r2, [r2, #8]
 800ce38:	0651      	lsls	r1, r2, #25
 800ce3a:	d402      	bmi.n	800ce42 <HAL_UART_IRQHandler+0xbe>
 800ce3c:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800ce40:	d017      	beq.n	800ce72 <HAL_UART_IRQHandler+0xee>
        UART_EndRxTransfer(huart);
 800ce42:	f7ff fe9c 	bl	800cb7e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	689a      	ldr	r2, [r3, #8]
 800ce4a:	0652      	lsls	r2, r2, #25
 800ce4c:	d50d      	bpl.n	800ce6a <HAL_UART_IRQHandler+0xe6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce4e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800ce50:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce56:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800ce58:	b138      	cbz	r0, 800ce6a <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce5a:	4b14      	ldr	r3, [pc, #80]	; (800ceac <HAL_UART_IRQHandler+0x128>)
 800ce5c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce5e:	f7fe fb66 	bl	800b52e <HAL_DMA_Abort_IT>
 800ce62:	b128      	cbz	r0, 800ce70 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce64:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ce66:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ce68:	e79d      	b.n	800cda6 <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f7fb fcfd 	bl	800886a <HAL_UART_ErrorCallback>
}
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800ce72:	f7fb fcfa 	bl	800886a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce76:	67e5      	str	r5, [r4, #124]	; 0x7c
 800ce78:	e7fa      	b.n	800ce70 <HAL_UART_IRQHandler+0xec>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ce7a:	0616      	lsls	r6, r2, #24
 800ce7c:	d506      	bpl.n	800ce8c <HAL_UART_IRQHandler+0x108>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ce7e:	060d      	lsls	r5, r1, #24
 800ce80:	d504      	bpl.n	800ce8c <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 800ce82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d0f3      	beq.n	800ce70 <HAL_UART_IRQHandler+0xec>
      huart->TxISR(huart);
 800ce88:	4620      	mov	r0, r4
 800ce8a:	e78c      	b.n	800cda6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce8c:	0650      	lsls	r0, r2, #25
 800ce8e:	d5ef      	bpl.n	800ce70 <HAL_UART_IRQHandler+0xec>
 800ce90:	064a      	lsls	r2, r1, #25
 800ce92:	d5ed      	bpl.n	800ce70 <HAL_UART_IRQHandler+0xec>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce94:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce96:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce9c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ce9e:	2320      	movs	r3, #32
 800cea0:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800cea6:	f7fb fcd5 	bl	8008854 <HAL_UART_TxCpltCallback>
 800ceaa:	e7e1      	b.n	800ce70 <HAL_UART_IRQHandler+0xec>
 800ceac:	0800ceb1 	.word	0x0800ceb1

0800ceb0 <UART_DMAAbortOnError>:
{
 800ceb0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ceb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ceba:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800cebe:	f7fb fcd4 	bl	800886a <HAL_UART_ErrorCallback>
}
 800cec2:	bd08      	pop	{r3, pc}

0800cec4 <UART_SetConfig>:
{
 800cec4:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cec6:	69c2      	ldr	r2, [r0, #28]
{
 800cec8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ceca:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cecc:	6881      	ldr	r1, [r0, #8]
 800cece:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ced0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ced2:	4301      	orrs	r1, r0
 800ced4:	6960      	ldr	r0, [r4, #20]
 800ced6:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ced8:	489a      	ldr	r0, [pc, #616]	; (800d144 <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ceda:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cedc:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 800cede:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cee0:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cee2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cee4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cee6:	6859      	ldr	r1, [r3, #4]
 800cee8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800ceec:	4301      	orrs	r1, r0
 800ceee:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cef0:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cef2:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800cef4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cef6:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 800cefa:	4301      	orrs	r1, r0
 800cefc:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cefe:	4992      	ldr	r1, [pc, #584]	; (800d148 <UART_SetConfig+0x284>)
 800cf00:	428b      	cmp	r3, r1
 800cf02:	d118      	bne.n	800cf36 <UART_SetConfig+0x72>
 800cf04:	4b91      	ldr	r3, [pc, #580]	; (800d14c <UART_SetConfig+0x288>)
 800cf06:	4992      	ldr	r1, [pc, #584]	; (800d150 <UART_SetConfig+0x28c>)
 800cf08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf0c:	f003 0303 	and.w	r3, r3, #3
 800cf10:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf12:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800cf16:	f040 80bd 	bne.w	800d094 <UART_SetConfig+0x1d0>
    switch (clocksource)
 800cf1a:	2b08      	cmp	r3, #8
 800cf1c:	f200 80af 	bhi.w	800d07e <UART_SetConfig+0x1ba>
 800cf20:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cf24:	00aa0095 	.word	0x00aa0095
 800cf28:	00ad00f9 	.word	0x00ad00f9
 800cf2c:	00ad0105 	.word	0x00ad0105
 800cf30:	00ad00ad 	.word	0x00ad00ad
 800cf34:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf36:	4987      	ldr	r1, [pc, #540]	; (800d154 <UART_SetConfig+0x290>)
 800cf38:	428b      	cmp	r3, r1
 800cf3a:	d106      	bne.n	800cf4a <UART_SetConfig+0x86>
 800cf3c:	4b83      	ldr	r3, [pc, #524]	; (800d14c <UART_SetConfig+0x288>)
 800cf3e:	4986      	ldr	r1, [pc, #536]	; (800d158 <UART_SetConfig+0x294>)
 800cf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf44:	f003 030c 	and.w	r3, r3, #12
 800cf48:	e7e2      	b.n	800cf10 <UART_SetConfig+0x4c>
 800cf4a:	4984      	ldr	r1, [pc, #528]	; (800d15c <UART_SetConfig+0x298>)
 800cf4c:	428b      	cmp	r3, r1
 800cf4e:	d118      	bne.n	800cf82 <UART_SetConfig+0xbe>
 800cf50:	4b7e      	ldr	r3, [pc, #504]	; (800d14c <UART_SetConfig+0x288>)
 800cf52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cf5a:	2b10      	cmp	r3, #16
 800cf5c:	f000 80e4 	beq.w	800d128 <UART_SetConfig+0x264>
 800cf60:	d802      	bhi.n	800cf68 <UART_SetConfig+0xa4>
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d0d5      	beq.n	800cf12 <UART_SetConfig+0x4e>
 800cf66:	e005      	b.n	800cf74 <UART_SetConfig+0xb0>
 800cf68:	2b20      	cmp	r3, #32
 800cf6a:	f000 80d1 	beq.w	800d110 <UART_SetConfig+0x24c>
 800cf6e:	2b30      	cmp	r3, #48	; 0x30
 800cf70:	f000 80e0 	beq.w	800d134 <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800cf78:	f000 8081 	beq.w	800d07e <UART_SetConfig+0x1ba>
        ret = HAL_ERROR;
 800cf7c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	e0a9      	b.n	800d0d6 <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf82:	4977      	ldr	r1, [pc, #476]	; (800d160 <UART_SetConfig+0x29c>)
 800cf84:	428b      	cmp	r3, r1
 800cf86:	d10d      	bne.n	800cfa4 <UART_SetConfig+0xe0>
 800cf88:	4b70      	ldr	r3, [pc, #448]	; (800d14c <UART_SetConfig+0x288>)
 800cf8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cf92:	2b40      	cmp	r3, #64	; 0x40
 800cf94:	f000 80c8 	beq.w	800d128 <UART_SetConfig+0x264>
 800cf98:	d9e3      	bls.n	800cf62 <UART_SetConfig+0x9e>
 800cf9a:	2b80      	cmp	r3, #128	; 0x80
 800cf9c:	f000 80b8 	beq.w	800d110 <UART_SetConfig+0x24c>
 800cfa0:	2bc0      	cmp	r3, #192	; 0xc0
 800cfa2:	e7e5      	b.n	800cf70 <UART_SetConfig+0xac>
 800cfa4:	496f      	ldr	r1, [pc, #444]	; (800d164 <UART_SetConfig+0x2a0>)
 800cfa6:	428b      	cmp	r3, r1
 800cfa8:	d110      	bne.n	800cfcc <UART_SetConfig+0x108>
 800cfaa:	4b68      	ldr	r3, [pc, #416]	; (800d14c <UART_SetConfig+0x288>)
 800cfac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfb8:	f000 80b6 	beq.w	800d128 <UART_SetConfig+0x264>
 800cfbc:	d9d1      	bls.n	800cf62 <UART_SetConfig+0x9e>
 800cfbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfc2:	f000 80a5 	beq.w	800d110 <UART_SetConfig+0x24c>
 800cfc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfca:	e7d1      	b.n	800cf70 <UART_SetConfig+0xac>
 800cfcc:	4966      	ldr	r1, [pc, #408]	; (800d168 <UART_SetConfig+0x2a4>)
 800cfce:	428b      	cmp	r3, r1
 800cfd0:	d114      	bne.n	800cffc <UART_SetConfig+0x138>
 800cfd2:	4b5e      	ldr	r3, [pc, #376]	; (800d14c <UART_SetConfig+0x288>)
 800cfd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cfdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfe0:	f000 80a2 	beq.w	800d128 <UART_SetConfig+0x264>
 800cfe4:	d803      	bhi.n	800cfee <UART_SetConfig+0x12a>
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1c4      	bne.n	800cf74 <UART_SetConfig+0xb0>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e791      	b.n	800cf12 <UART_SetConfig+0x4e>
 800cfee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cff2:	f000 808d 	beq.w	800d110 <UART_SetConfig+0x24c>
 800cff6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cffa:	e7b9      	b.n	800cf70 <UART_SetConfig+0xac>
 800cffc:	495b      	ldr	r1, [pc, #364]	; (800d16c <UART_SetConfig+0x2a8>)
 800cffe:	428b      	cmp	r3, r1
 800d000:	d113      	bne.n	800d02a <UART_SetConfig+0x166>
 800d002:	4b52      	ldr	r3, [pc, #328]	; (800d14c <UART_SetConfig+0x288>)
 800d004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d008:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d010:	f000 808a 	beq.w	800d128 <UART_SetConfig+0x264>
 800d014:	d803      	bhi.n	800d01e <UART_SetConfig+0x15a>
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1ac      	bne.n	800cf74 <UART_SetConfig+0xb0>
 800d01a:	2300      	movs	r3, #0
 800d01c:	e779      	b.n	800cf12 <UART_SetConfig+0x4e>
 800d01e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d022:	d075      	beq.n	800d110 <UART_SetConfig+0x24c>
 800d024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d028:	e7a2      	b.n	800cf70 <UART_SetConfig+0xac>
 800d02a:	4951      	ldr	r1, [pc, #324]	; (800d170 <UART_SetConfig+0x2ac>)
 800d02c:	428b      	cmp	r3, r1
 800d02e:	d1a1      	bne.n	800cf74 <UART_SetConfig+0xb0>
 800d030:	4b46      	ldr	r3, [pc, #280]	; (800d14c <UART_SetConfig+0x288>)
 800d032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d036:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d03e:	d073      	beq.n	800d128 <UART_SetConfig+0x264>
 800d040:	d98f      	bls.n	800cf62 <UART_SetConfig+0x9e>
 800d042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d046:	d063      	beq.n	800d110 <UART_SetConfig+0x24c>
 800d048:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d04c:	e790      	b.n	800cf70 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d04e:	f7fe fee1 	bl	800be14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d052:	6861      	ldr	r1, [r4, #4]
 800d054:	084a      	lsrs	r2, r1, #1
 800d056:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800d05a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d05e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800d060:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d062:	f1a3 0110 	sub.w	r1, r3, #16
 800d066:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d06a:	4291      	cmp	r1, r2
 800d06c:	d90a      	bls.n	800d084 <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 800d06e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800d070:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800d072:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800d076:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800d078:	f7fe fedc 	bl	800be34 <HAL_RCC_GetPCLK2Freq>
 800d07c:	e7e9      	b.n	800d052 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 800d07e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800d080:	2300      	movs	r3, #0
 800d082:	e7ee      	b.n	800d062 <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d084:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d088:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800d08c:	6821      	ldr	r1, [r4, #0]
 800d08e:	4313      	orrs	r3, r2
 800d090:	60cb      	str	r3, [r1, #12]
 800d092:	e7ed      	b.n	800d070 <UART_SetConfig+0x1ac>
    switch (clocksource)
 800d094:	2b08      	cmp	r3, #8
 800d096:	f63f af71 	bhi.w	800cf7c <UART_SetConfig+0xb8>
 800d09a:	a201      	add	r2, pc, #4	; (adr r2, 800d0a0 <UART_SetConfig+0x1dc>)
 800d09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a0:	0800d0c5 	.word	0x0800d0c5
 800d0a4:	0800d0e9 	.word	0x0800d0e9
 800d0a8:	0800d0ef 	.word	0x0800d0ef
 800d0ac:	0800cf7d 	.word	0x0800cf7d
 800d0b0:	0800d101 	.word	0x0800d101
 800d0b4:	0800cf7d 	.word	0x0800cf7d
 800d0b8:	0800cf7d 	.word	0x0800cf7d
 800d0bc:	0800cf7d 	.word	0x0800cf7d
 800d0c0:	0800d107 	.word	0x0800d107
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0c4:	f7fe fea6 	bl	800be14 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d0c8:	6862      	ldr	r2, [r4, #4]
 800d0ca:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800d0ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0d4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0d6:	f1a3 0110 	sub.w	r1, r3, #16
 800d0da:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800d0de:	4291      	cmp	r1, r2
 800d0e0:	d8c5      	bhi.n	800d06e <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 800d0e2:	6822      	ldr	r2, [r4, #0]
 800d0e4:	60d3      	str	r3, [r2, #12]
 800d0e6:	e7c3      	b.n	800d070 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0e8:	f7fe fea4 	bl	800be34 <HAL_RCC_GetPCLK2Freq>
 800d0ec:	e7ec      	b.n	800d0c8 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d0ee:	6860      	ldr	r0, [r4, #4]
 800d0f0:	0843      	lsrs	r3, r0, #1
 800d0f2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800d0f6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d0fa:	fbb3 f3f0 	udiv	r3, r3, r0
 800d0fe:	e7e8      	b.n	800d0d2 <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 800d100:	f7fe fdbc 	bl	800bc7c <HAL_RCC_GetSysClockFreq>
 800d104:	e7e0      	b.n	800d0c8 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d106:	6860      	ldr	r0, [r4, #4]
 800d108:	0843      	lsrs	r3, r0, #1
 800d10a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d10e:	e7f4      	b.n	800d0fa <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d110:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d114:	d1eb      	bne.n	800d0ee <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d116:	6860      	ldr	r0, [r4, #4]
 800d118:	0843      	lsrs	r3, r0, #1
 800d11a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800d11e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d122:	fbb3 f3f0 	udiv	r3, r3, r0
 800d126:	e79a      	b.n	800d05e <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d128:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d12c:	d1e8      	bne.n	800d100 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 800d12e:	f7fe fda5 	bl	800bc7c <HAL_RCC_GetSysClockFreq>
 800d132:	e78e      	b.n	800d052 <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d134:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d138:	d1e5      	bne.n	800d106 <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d13a:	6860      	ldr	r0, [r4, #4]
 800d13c:	0843      	lsrs	r3, r0, #1
 800d13e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d142:	e7ee      	b.n	800d122 <UART_SetConfig+0x25e>
 800d144:	efff69f3 	.word	0xefff69f3
 800d148:	40011000 	.word	0x40011000
 800d14c:	40023800 	.word	0x40023800
 800d150:	080151f8 	.word	0x080151f8
 800d154:	40004400 	.word	0x40004400
 800d158:	080151fc 	.word	0x080151fc
 800d15c:	40004800 	.word	0x40004800
 800d160:	40004c00 	.word	0x40004c00
 800d164:	40005000 	.word	0x40005000
 800d168:	40011400 	.word	0x40011400
 800d16c:	40007800 	.word	0x40007800
 800d170:	40007c00 	.word	0x40007c00

0800d174 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d174:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d176:	07da      	lsls	r2, r3, #31
{
 800d178:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d17a:	d506      	bpl.n	800d18a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d17c:	6801      	ldr	r1, [r0, #0]
 800d17e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d180:	684a      	ldr	r2, [r1, #4]
 800d182:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d186:	4322      	orrs	r2, r4
 800d188:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d18a:	079c      	lsls	r4, r3, #30
 800d18c:	d506      	bpl.n	800d19c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d18e:	6801      	ldr	r1, [r0, #0]
 800d190:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800d192:	684a      	ldr	r2, [r1, #4]
 800d194:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d198:	4322      	orrs	r2, r4
 800d19a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d19c:	0759      	lsls	r1, r3, #29
 800d19e:	d506      	bpl.n	800d1ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d1a0:	6801      	ldr	r1, [r0, #0]
 800d1a2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d1a4:	684a      	ldr	r2, [r1, #4]
 800d1a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d1aa:	4322      	orrs	r2, r4
 800d1ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d1ae:	071a      	lsls	r2, r3, #28
 800d1b0:	d506      	bpl.n	800d1c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d1b2:	6801      	ldr	r1, [r0, #0]
 800d1b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d1b6:	684a      	ldr	r2, [r1, #4]
 800d1b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d1bc:	4322      	orrs	r2, r4
 800d1be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d1c0:	06dc      	lsls	r4, r3, #27
 800d1c2:	d506      	bpl.n	800d1d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d1c4:	6801      	ldr	r1, [r0, #0]
 800d1c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800d1c8:	688a      	ldr	r2, [r1, #8]
 800d1ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d1ce:	4322      	orrs	r2, r4
 800d1d0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1d2:	0699      	lsls	r1, r3, #26
 800d1d4:	d506      	bpl.n	800d1e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1d6:	6801      	ldr	r1, [r0, #0]
 800d1d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800d1da:	688a      	ldr	r2, [r1, #8]
 800d1dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1e0:	4322      	orrs	r2, r4
 800d1e2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1e4:	065a      	lsls	r2, r3, #25
 800d1e6:	d510      	bpl.n	800d20a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1e8:	6801      	ldr	r1, [r0, #0]
 800d1ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d1ec:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1ee:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1f2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800d1f6:	ea42 0204 	orr.w	r2, r2, r4
 800d1fa:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1fc:	d105      	bne.n	800d20a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d1fe:	684a      	ldr	r2, [r1, #4]
 800d200:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800d202:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800d206:	4322      	orrs	r2, r4
 800d208:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d20a:	061b      	lsls	r3, r3, #24
 800d20c:	d506      	bpl.n	800d21c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d20e:	6802      	ldr	r2, [r0, #0]
 800d210:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800d212:	6853      	ldr	r3, [r2, #4]
 800d214:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800d218:	430b      	orrs	r3, r1
 800d21a:	6053      	str	r3, [r2, #4]
}
 800d21c:	bd10      	pop	{r4, pc}

0800d21e <UART_WaitOnFlagUntilTimeout>:
{
 800d21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d222:	9d06      	ldr	r5, [sp, #24]
 800d224:	4604      	mov	r4, r0
 800d226:	460f      	mov	r7, r1
 800d228:	4616      	mov	r6, r2
 800d22a:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d22c:	6821      	ldr	r1, [r4, #0]
 800d22e:	69ca      	ldr	r2, [r1, #28]
 800d230:	ea37 0302 	bics.w	r3, r7, r2
 800d234:	bf0c      	ite	eq
 800d236:	2201      	moveq	r2, #1
 800d238:	2200      	movne	r2, #0
 800d23a:	42b2      	cmp	r2, r6
 800d23c:	d001      	beq.n	800d242 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800d23e:	2000      	movs	r0, #0
 800d240:	e018      	b.n	800d274 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800d242:	1c68      	adds	r0, r5, #1
 800d244:	d0f3      	beq.n	800d22e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d246:	f7fd fd6d 	bl	800ad24 <HAL_GetTick>
 800d24a:	eba0 0008 	sub.w	r0, r0, r8
 800d24e:	42a8      	cmp	r0, r5
 800d250:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d252:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d254:	d800      	bhi.n	800d258 <UART_WaitOnFlagUntilTimeout+0x3a>
 800d256:	b97d      	cbnz	r5, 800d278 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d25c:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d25e:	6883      	ldr	r3, [r0, #8]
 800d260:	f023 0301 	bic.w	r3, r3, #1
 800d264:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d266:	2320      	movs	r3, #32
 800d268:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d26a:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800d26c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800d26e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800d270:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 800d274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d278:	075a      	lsls	r2, r3, #29
 800d27a:	d5d7      	bpl.n	800d22c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d27c:	69c3      	ldr	r3, [r0, #28]
 800d27e:	051b      	lsls	r3, r3, #20
 800d280:	d5d4      	bpl.n	800d22c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d286:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d288:	6803      	ldr	r3, [r0, #0]
 800d28a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d28e:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d290:	6883      	ldr	r3, [r0, #8]
 800d292:	f023 0301 	bic.w	r3, r3, #1
 800d296:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800d298:	2320      	movs	r3, #32
 800d29a:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800d29c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d29e:	67e3      	str	r3, [r4, #124]	; 0x7c
 800d2a0:	e7e4      	b.n	800d26c <UART_WaitOnFlagUntilTimeout+0x4e>

0800d2a2 <UART_CheckIdleState>:
{
 800d2a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2a4:	2500      	movs	r5, #0
{
 800d2a6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2a8:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800d2aa:	f7fd fd3b 	bl	800ad24 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2ae:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800d2b0:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2b2:	6812      	ldr	r2, [r2, #0]
 800d2b4:	0712      	lsls	r2, r2, #28
 800d2b6:	d407      	bmi.n	800d2c8 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 800d2b8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800d2ba:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800d2bc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800d2be:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800d2c2:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800d2c4:	b003      	add	sp, #12
 800d2c6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2c8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800d2cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	9200      	str	r2, [sp, #0]
 800d2d4:	462a      	mov	r2, r5
 800d2d6:	f7ff ffa2 	bl	800d21e <UART_WaitOnFlagUntilTimeout>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d0ec      	beq.n	800d2b8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800d2de:	2003      	movs	r0, #3
 800d2e0:	e7f0      	b.n	800d2c4 <UART_CheckIdleState+0x22>

0800d2e2 <HAL_UART_Init>:
{
 800d2e2:	b510      	push	{r4, lr}
  if (huart == NULL)
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	b340      	cbz	r0, 800d33a <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d2e8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800d2ea:	b91b      	cbnz	r3, 800d2f4 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800d2ec:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800d2f0:	f7fc f800 	bl	80092f4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800d2f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d2f6:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2f8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800d2fa:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800d2fc:	6813      	ldr	r3, [r2, #0]
 800d2fe:	f023 0301 	bic.w	r3, r3, #1
 800d302:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d304:	f7ff fdde 	bl	800cec4 <UART_SetConfig>
 800d308:	2801      	cmp	r0, #1
 800d30a:	d016      	beq.n	800d33a <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d30c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d30e:	b113      	cbz	r3, 800d316 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800d310:	4620      	mov	r0, r4
 800d312:	f7ff ff2f 	bl	800d174 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d316:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800d318:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d320:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d322:	689a      	ldr	r2, [r3, #8]
 800d324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d328:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	f042 0201 	orr.w	r2, r2, #1
}
 800d330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800d334:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800d336:	f7ff bfb4 	b.w	800d2a2 <UART_CheckIdleState>
}
 800d33a:	2001      	movs	r0, #1
 800d33c:	bd10      	pop	{r4, pc}
	...

0800d340 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d340:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800d344:	b113      	cbz	r3, 800d34c <osKernelInitialize+0xc>
    stat = osErrorISR;
 800d346:	f06f 0005 	mvn.w	r0, #5
 800d34a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d34c:	f3ef 8210 	mrs	r2, PRIMASK
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800d352:	b912      	cbnz	r2, 800d35a <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d354:	f3ef 8211 	mrs	r2, BASEPRI
 800d358:	b112      	cbz	r2, 800d360 <osKernelInitialize+0x20>
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	2a02      	cmp	r2, #2
 800d35e:	d0f2      	beq.n	800d346 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d360:	6818      	ldr	r0, [r3, #0]
 800d362:	b910      	cbnz	r0, 800d36a <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d364:	2201      	movs	r2, #1
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 800d36a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800d36e:	4770      	bx	lr
 800d370:	20006e14 	.word	0x20006e14

0800d374 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d374:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d376:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800d37a:	b113      	cbz	r3, 800d382 <osKernelStart+0xe>
    stat = osErrorISR;
 800d37c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 800d380:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d382:	f3ef 8210 	mrs	r2, PRIMASK
 800d386:	4b0a      	ldr	r3, [pc, #40]	; (800d3b0 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 800d388:	b912      	cbnz	r2, 800d390 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d38a:	f3ef 8211 	mrs	r2, BASEPRI
 800d38e:	b112      	cbz	r2, 800d396 <osKernelStart+0x22>
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	2a02      	cmp	r2, #2
 800d394:	d0f2      	beq.n	800d37c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	2a01      	cmp	r2, #1
 800d39a:	d105      	bne.n	800d3a8 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800d39c:	2202      	movs	r2, #2
 800d39e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800d3a0:	f000 ffc6 	bl	800e330 <vTaskStartScheduler>
      stat = osOK;
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	e7eb      	b.n	800d380 <osKernelStart+0xc>
      stat = osError;
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800d3ac:	e7e8      	b.n	800d380 <osKernelStart+0xc>
 800d3ae:	bf00      	nop
 800d3b0:	20006e14 	.word	0x20006e14

0800d3b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b6:	4614      	mov	r4, r2
 800d3b8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d3ba:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d3bc:	460b      	mov	r3, r1
  hTask = NULL;
 800d3be:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3c0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800d3c4:	bb32      	cbnz	r2, 800d414 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3c6:	f3ef 8210 	mrs	r2, PRIMASK
 800d3ca:	b912      	cbnz	r2, 800d3d2 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3cc:	f3ef 8211 	mrs	r2, BASEPRI
 800d3d0:	b11a      	cbz	r2, 800d3da <osThreadNew+0x26>
 800d3d2:	4a23      	ldr	r2, [pc, #140]	; (800d460 <osThreadNew+0xac>)
 800d3d4:	6812      	ldr	r2, [r2, #0]
 800d3d6:	2a02      	cmp	r2, #2
 800d3d8:	d01c      	beq.n	800d414 <osThreadNew+0x60>
 800d3da:	b1d8      	cbz	r0, 800d414 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800d3dc:	2c00      	cmp	r4, #0
 800d3de:	d037      	beq.n	800d450 <osThreadNew+0x9c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800d3e0:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 800d3e2:	6821      	ldr	r1, [r4, #0]
 800d3e4:	2d00      	cmp	r5, #0
 800d3e6:	bf08      	it	eq
 800d3e8:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d3ea:	1e6a      	subs	r2, r5, #1
 800d3ec:	462f      	mov	r7, r5
 800d3ee:	2a37      	cmp	r2, #55	; 0x37
 800d3f0:	d833      	bhi.n	800d45a <osThreadNew+0xa6>
 800d3f2:	6862      	ldr	r2, [r4, #4]
 800d3f4:	07d2      	lsls	r2, r2, #31
 800d3f6:	d430      	bmi.n	800d45a <osThreadNew+0xa6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800d3f8:	6966      	ldr	r6, [r4, #20]
 800d3fa:	b176      	cbz	r6, 800d41a <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d3fc:	08b2      	lsrs	r2, r6, #2
 800d3fe:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d402:	f1bc 0f00 	cmp.w	ip, #0
 800d406:	d00b      	beq.n	800d420 <osThreadNew+0x6c>
 800d408:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 800d40c:	d902      	bls.n	800d414 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d40e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d410:	b104      	cbz	r4, 800d414 <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d412:	b9b6      	cbnz	r6, 800d442 <osThreadNew+0x8e>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d414:	9805      	ldr	r0, [sp, #20]
}
 800d416:	b007      	add	sp, #28
 800d418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800d41a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d41e:	e7ee      	b.n	800d3fe <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d420:	f1be 0f00 	cmp.w	lr, #0
 800d424:	d1f6      	bne.n	800d414 <osThreadNew+0x60>
      if (mem == 0) {
 800d426:	6924      	ldr	r4, [r4, #16]
 800d428:	2c00      	cmp	r4, #0
 800d42a:	d1f3      	bne.n	800d414 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d42c:	ac05      	add	r4, sp, #20
 800d42e:	b292      	uxth	r2, r2
 800d430:	e9cd 7400 	strd	r7, r4, [sp]
 800d434:	f000 ff4e 	bl	800e2d4 <xTaskCreate>
 800d438:	2801      	cmp	r0, #1
          hTask = NULL;
 800d43a:	bf1c      	itt	ne
 800d43c:	2300      	movne	r3, #0
 800d43e:	9305      	strne	r3, [sp, #20]
 800d440:	e7e8      	b.n	800d414 <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d442:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 800d446:	9500      	str	r5, [sp, #0]
 800d448:	f000 ff06 	bl	800e258 <xTaskCreateStatic>
 800d44c:	9005      	str	r0, [sp, #20]
 800d44e:	e7e1      	b.n	800d414 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 800d450:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800d452:	f44f 7280 	mov.w	r2, #256	; 0x100
    name = NULL;
 800d456:	4621      	mov	r1, r4
 800d458:	e7e8      	b.n	800d42c <osThreadNew+0x78>
        return (NULL);
 800d45a:	2000      	movs	r0, #0
 800d45c:	e7db      	b.n	800d416 <osThreadNew+0x62>
 800d45e:	bf00      	nop
 800d460:	20006e14 	.word	0x20006e14

0800d464 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d464:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d466:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800d46a:	b113      	cbz	r3, 800d472 <osDelay+0xe>
    stat = osErrorISR;
 800d46c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800d470:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d472:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800d476:	b913      	cbnz	r3, 800d47e <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d478:	f3ef 8311 	mrs	r3, BASEPRI
 800d47c:	b11b      	cbz	r3, 800d486 <osDelay+0x22>
 800d47e:	4b05      	ldr	r3, [pc, #20]	; (800d494 <osDelay+0x30>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b02      	cmp	r3, #2
 800d484:	d0f2      	beq.n	800d46c <osDelay+0x8>
    if (ticks != 0U) {
 800d486:	2800      	cmp	r0, #0
 800d488:	d0f2      	beq.n	800d470 <osDelay+0xc>
      vTaskDelay(ticks);
 800d48a:	f001 f8af 	bl	800e5ec <vTaskDelay>
    stat = osOK;
 800d48e:	2000      	movs	r0, #0
 800d490:	e7ee      	b.n	800d470 <osDelay+0xc>
 800d492:	bf00      	nop
 800d494:	20006e14 	.word	0x20006e14

0800d498 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d49c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800d4a0:	b113      	cbz	r3, 800d4a8 <osMutexNew+0x10>
  hMutex = NULL;
 800d4a2:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4a8:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 800d4ac:	b912      	cbnz	r2, 800d4b4 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4ae:	f3ef 8211 	mrs	r2, BASEPRI
 800d4b2:	b11a      	cbz	r2, 800d4bc <osMutexNew+0x24>
 800d4b4:	4a18      	ldr	r2, [pc, #96]	; (800d518 <osMutexNew+0x80>)
 800d4b6:	6812      	ldr	r2, [r2, #0]
 800d4b8:	2a02      	cmp	r2, #2
 800d4ba:	d0f2      	beq.n	800d4a2 <osMutexNew+0xa>
    if (attr != NULL) {
 800d4bc:	b104      	cbz	r4, 800d4c0 <osMutexNew+0x28>
      type = attr->attr_bits;
 800d4be:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d4c0:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 800d4c4:	071b      	lsls	r3, r3, #28
 800d4c6:	d4ec      	bmi.n	800d4a2 <osMutexNew+0xa>
      if (attr != NULL) {
 800d4c8:	b1b4      	cbz	r4, 800d4f8 <osMutexNew+0x60>
 800d4ca:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d4ce:	b189      	cbz	r1, 800d4f4 <osMutexNew+0x5c>
 800d4d0:	2b4f      	cmp	r3, #79	; 0x4f
 800d4d2:	d9e6      	bls.n	800d4a2 <osMutexNew+0xa>
        if (rmtx != 0U) {
 800d4d4:	b1de      	cbz	r6, 800d50e <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d4d6:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d4d8:	f000 fade 	bl	800da98 <xQueueCreateMutexStatic>
 800d4dc:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d0df      	beq.n	800d4a2 <osMutexNew+0xa>
          name = attr->name;
 800d4e2:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f000 fd1b 	bl	800df20 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d4ea:	2e00      	cmp	r6, #0
 800d4ec:	d0da      	beq.n	800d4a4 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d4ee:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 800d4f2:	e7d7      	b.n	800d4a4 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1d4      	bne.n	800d4a2 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800d4f8:	b15e      	cbz	r6, 800d512 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d4fa:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 800d4fc:	f000 fb01 	bl	800db02 <xQueueCreateMutex>
 800d500:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 800d502:	2800      	cmp	r0, #0
 800d504:	d0cd      	beq.n	800d4a2 <osMutexNew+0xa>
        if (attr != NULL) {
 800d506:	2c00      	cmp	r4, #0
 800d508:	d1eb      	bne.n	800d4e2 <osMutexNew+0x4a>
          name = NULL;
 800d50a:	4621      	mov	r1, r4
 800d50c:	e7ea      	b.n	800d4e4 <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d50e:	2001      	movs	r0, #1
 800d510:	e7e2      	b.n	800d4d8 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 800d512:	2001      	movs	r0, #1
 800d514:	e7f2      	b.n	800d4fc <osMutexNew+0x64>
 800d516:	bf00      	nop
 800d518:	20006e14 	.word	0x20006e14

0800d51c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d51c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d51e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d522:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800d524:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d528:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d52a:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800d52e:	b112      	cbz	r2, 800d536 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800d530:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800d534:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d536:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800d53a:	b912      	cbnz	r2, 800d542 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d53c:	f3ef 8211 	mrs	r2, BASEPRI
 800d540:	b11a      	cbz	r2, 800d54a <osMutexAcquire+0x2e>
 800d542:	4a0d      	ldr	r2, [pc, #52]	; (800d578 <osMutexAcquire+0x5c>)
 800d544:	6812      	ldr	r2, [r2, #0]
 800d546:	2a02      	cmp	r2, #2
 800d548:	d0f2      	beq.n	800d530 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 800d54a:	b188      	cbz	r0, 800d570 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d54c:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800d54e:	b163      	cbz	r3, 800d56a <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d550:	f000 fcc2 	bl	800ded8 <xQueueTakeMutexRecursive>
 800d554:	2801      	cmp	r0, #1
 800d556:	d101      	bne.n	800d55c <osMutexAcquire+0x40>
  stat = osOK;
 800d558:	2000      	movs	r0, #0
 800d55a:	e7eb      	b.n	800d534 <osMutexAcquire+0x18>
          stat = osErrorResource;
 800d55c:	2c00      	cmp	r4, #0
 800d55e:	bf14      	ite	ne
 800d560:	f06f 0001 	mvnne.w	r0, #1
 800d564:	f06f 0002 	mvneq.w	r0, #2
 800d568:	e7e4      	b.n	800d534 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d56a:	f000 fbeb 	bl	800dd44 <xQueueSemaphoreTake>
 800d56e:	e7f1      	b.n	800d554 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800d570:	f06f 0003 	mvn.w	r0, #3
 800d574:	e7de      	b.n	800d534 <osMutexAcquire+0x18>
 800d576:	bf00      	nop
 800d578:	20006e14 	.word	0x20006e14

0800d57c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d57c:	b508      	push	{r3, lr}
 800d57e:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d580:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800d584:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d588:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800d58c:	b112      	cbz	r2, 800d594 <osMutexRelease+0x18>
    stat = osErrorISR;
 800d58e:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800d592:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d594:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800d598:	b912      	cbnz	r2, 800d5a0 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d59a:	f3ef 8211 	mrs	r2, BASEPRI
 800d59e:	b11a      	cbz	r2, 800d5a8 <osMutexRelease+0x2c>
 800d5a0:	4a0a      	ldr	r2, [pc, #40]	; (800d5cc <osMutexRelease+0x50>)
 800d5a2:	6812      	ldr	r2, [r2, #0]
 800d5a4:	2a02      	cmp	r2, #2
 800d5a6:	d0f2      	beq.n	800d58e <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 800d5a8:	b168      	cbz	r0, 800d5c6 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 800d5aa:	b13b      	cbz	r3, 800d5bc <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d5ac:	f000 fa89 	bl	800dac2 <xQueueGiveMutexRecursive>
 800d5b0:	2801      	cmp	r0, #1
  stat = osOK;
 800d5b2:	bf0c      	ite	eq
 800d5b4:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800d5b6:	f06f 0002 	mvnne.w	r0, #2
 800d5ba:	e7ea      	b.n	800d592 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d5bc:	461a      	mov	r2, r3
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f000 f9b0 	bl	800d924 <xQueueGenericSend>
 800d5c4:	e7f4      	b.n	800d5b0 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800d5c6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d5ca:	e7e2      	b.n	800d592 <osMutexRelease+0x16>
 800d5cc:	20006e14 	.word	0x20006e14

0800d5d0 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d5d0:	4b03      	ldr	r3, [pc, #12]	; (800d5e0 <vApplicationGetIdleTaskMemory+0x10>)
 800d5d2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d5d4:	4b03      	ldr	r3, [pc, #12]	; (800d5e4 <vApplicationGetIdleTaskMemory+0x14>)
 800d5d6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d5d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5dc:	6013      	str	r3, [r2, #0]
}
 800d5de:	4770      	bx	lr
 800d5e0:	20006db0 	.word	0x20006db0
 800d5e4:	200069b0 	.word	0x200069b0

0800d5e8 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d5e8:	4b03      	ldr	r3, [pc, #12]	; (800d5f8 <vApplicationGetTimerTaskMemory+0x10>)
 800d5ea:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d5ec:	4b03      	ldr	r3, [pc, #12]	; (800d5fc <vApplicationGetTimerTaskMemory+0x14>)
 800d5ee:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5f4:	6013      	str	r3, [r2, #0]
}
 800d5f6:	4770      	bx	lr
 800d5f8:	20007618 	.word	0x20007618
 800d5fc:	20006e18 	.word	0x20006e18

0800d600 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d600:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d604:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d608:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d60a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d60c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d610:	2300      	movs	r3, #0
 800d612:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d614:	4770      	bx	lr

0800d616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d61a:	4770      	bx	lr

0800d61c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d61c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d61e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d620:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d622:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d624:	689a      	ldr	r2, [r3, #8]
 800d626:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d628:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d62a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d62c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d62e:	3301      	adds	r3, #1
 800d630:	6003      	str	r3, [r0, #0]
}
 800d632:	4770      	bx	lr

0800d634 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d634:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d636:	1c53      	adds	r3, r2, #1
{
 800d638:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800d63a:	d10a      	bne.n	800d652 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d63c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d642:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d644:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d646:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d648:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d64a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d64c:	3301      	adds	r3, #1
 800d64e:	6003      	str	r3, [r0, #0]
}
 800d650:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d652:	f100 0308 	add.w	r3, r0, #8
 800d656:	685c      	ldr	r4, [r3, #4]
 800d658:	6825      	ldr	r5, [r4, #0]
 800d65a:	4295      	cmp	r5, r2
 800d65c:	d8ef      	bhi.n	800d63e <vListInsert+0xa>
 800d65e:	4623      	mov	r3, r4
 800d660:	e7f9      	b.n	800d656 <vListInsert+0x22>

0800d662 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d662:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800d666:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d668:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d66a:	6882      	ldr	r2, [r0, #8]
 800d66c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d66e:	6859      	ldr	r1, [r3, #4]
 800d670:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d672:	bf08      	it	eq
 800d674:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d676:	2200      	movs	r2, #0
 800d678:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	3a01      	subs	r2, #1
 800d67e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d680:	6818      	ldr	r0, [r3, #0]
}
 800d682:	4770      	bx	lr

0800d684 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d684:	b510      	push	{r4, lr}
 800d686:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d688:	f001 fc6c 	bl	800ef64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d68c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d68e:	f001 fc8f 	bl	800efb0 <vPortExitCritical>

	return xReturn;
}
 800d692:	fab4 f084 	clz	r0, r4
 800d696:	0940      	lsrs	r0, r0, #5
 800d698:	bd10      	pop	{r4, pc}

0800d69a <prvCopyDataToQueue>:
{
 800d69a:	b570      	push	{r4, r5, r6, lr}
 800d69c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d69e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800d6a0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6a2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d6a4:	b942      	cbnz	r2, 800d6b8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6a6:	6805      	ldr	r5, [r0, #0]
 800d6a8:	b99d      	cbnz	r5, 800d6d2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6aa:	6880      	ldr	r0, [r0, #8]
 800d6ac:	f001 f93e 	bl	800e92c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6b0:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6b2:	3601      	adds	r6, #1
 800d6b4:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d6b8:	b96d      	cbnz	r5, 800d6d6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6ba:	6840      	ldr	r0, [r0, #4]
 800d6bc:	f003 f9da 	bl	8010a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6c0:	6863      	ldr	r3, [r4, #4]
 800d6c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d6c4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6c6:	68a2      	ldr	r2, [r4, #8]
 800d6c8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6ca:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6cc:	d301      	bcc.n	800d6d2 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	e7ed      	b.n	800d6b2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6d6:	68c0      	ldr	r0, [r0, #12]
 800d6d8:	f003 f9cc 	bl	8010a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6de:	68e2      	ldr	r2, [r4, #12]
 800d6e0:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6e2:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6e4:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6e6:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d6e8:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d6ea:	bf3e      	ittt	cc
 800d6ec:	68a2      	ldrcc	r2, [r4, #8]
 800d6ee:	189b      	addcc	r3, r3, r2
 800d6f0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d6f2:	2d02      	cmp	r5, #2
 800d6f4:	d1ed      	bne.n	800d6d2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6f6:	b10e      	cbz	r6, 800d6fc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d6f8:	3e01      	subs	r6, #1
 800d6fa:	e7ea      	b.n	800d6d2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	e7d8      	b.n	800d6b2 <prvCopyDataToQueue+0x18>

0800d700 <prvCopyDataFromQueue>:
{
 800d700:	4603      	mov	r3, r0
 800d702:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800d706:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d708:	b162      	cbz	r2, 800d724 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d70a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d70c:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d70e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d710:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d712:	60d9      	str	r1, [r3, #12]
}
 800d714:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d718:	bf24      	itt	cs
 800d71a:	6819      	ldrcs	r1, [r3, #0]
 800d71c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d71e:	68d9      	ldr	r1, [r3, #12]
 800d720:	f003 b9a8 	b.w	8010a74 <memcpy>
}
 800d724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <prvUnlockQueue>:
{
 800d72a:	b570      	push	{r4, r5, r6, lr}
 800d72c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d72e:	f001 fc19 	bl	800ef64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d732:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d736:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d73a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d73c:	2d00      	cmp	r5, #0
 800d73e:	dc14      	bgt.n	800d76a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d740:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d742:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800d74a:	f001 fc31 	bl	800efb0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d74e:	f001 fc09 	bl	800ef64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d752:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800d756:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d758:	2d00      	cmp	r5, #0
 800d75a:	dc12      	bgt.n	800d782 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d75c:	23ff      	movs	r3, #255	; 0xff
 800d75e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800d762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d766:	f001 bc23 	b.w	800efb0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d0e7      	beq.n	800d740 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d770:	4630      	mov	r0, r6
 800d772:	f000 ffef 	bl	800e754 <xTaskRemoveFromEventList>
 800d776:	b108      	cbz	r0, 800d77c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d778:	f001 f87c 	bl	800e874 <vTaskMissedYield>
 800d77c:	3d01      	subs	r5, #1
 800d77e:	b26d      	sxtb	r5, r5
 800d780:	e7dc      	b.n	800d73c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d0e9      	beq.n	800d75c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d788:	4630      	mov	r0, r6
 800d78a:	f000 ffe3 	bl	800e754 <xTaskRemoveFromEventList>
 800d78e:	b108      	cbz	r0, 800d794 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d790:	f001 f870 	bl	800e874 <vTaskMissedYield>
 800d794:	3d01      	subs	r5, #1
 800d796:	b26d      	sxtb	r5, r5
 800d798:	e7de      	b.n	800d758 <prvUnlockQueue+0x2e>
	...

0800d79c <xQueueGenericReset>:
{
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	b950      	cbnz	r0, 800d7ba <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a8:	b672      	cpsid	i
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	b662      	cpsie	i
 800d7b8:	e7fe      	b.n	800d7b8 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800d7ba:	f001 fbd3 	bl	800ef64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7be:	6822      	ldr	r2, [r4, #0]
 800d7c0:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7c4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7c6:	4343      	muls	r3, r0
 800d7c8:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7ca:	1a1b      	subs	r3, r3, r0
 800d7cc:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7ce:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7d0:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7d2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d7d4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7d6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d7d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d7dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800d7e0:	b995      	cbnz	r5, 800d808 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7e2:	6923      	ldr	r3, [r4, #16]
 800d7e4:	b163      	cbz	r3, 800d800 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7e6:	f104 0010 	add.w	r0, r4, #16
 800d7ea:	f000 ffb3 	bl	800e754 <xTaskRemoveFromEventList>
 800d7ee:	b138      	cbz	r0, 800d800 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d7f0:	4b0a      	ldr	r3, [pc, #40]	; (800d81c <xQueueGenericReset+0x80>)
 800d7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d800:	f001 fbd6 	bl	800efb0 <vPortExitCritical>
}
 800d804:	2001      	movs	r0, #1
 800d806:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d808:	f104 0010 	add.w	r0, r4, #16
 800d80c:	f7ff fef8 	bl	800d600 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d810:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d814:	f7ff fef4 	bl	800d600 <vListInitialise>
 800d818:	e7f2      	b.n	800d800 <xQueueGenericReset+0x64>
 800d81a:	bf00      	nop
 800d81c:	e000ed04 	.word	0xe000ed04

0800d820 <xQueueGenericCreateStatic>:
	{
 800d820:	b513      	push	{r0, r1, r4, lr}
 800d822:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d824:	b950      	cbnz	r0, 800d83c <xQueueGenericCreateStatic+0x1c>
 800d826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82a:	b672      	cpsid	i
 800d82c:	f383 8811 	msr	BASEPRI, r3
 800d830:	f3bf 8f6f 	isb	sy
 800d834:	f3bf 8f4f 	dsb	sy
 800d838:	b662      	cpsie	i
 800d83a:	e7fe      	b.n	800d83a <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800d83c:	b953      	cbnz	r3, 800d854 <xQueueGenericCreateStatic+0x34>
 800d83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d842:	b672      	cpsid	i
 800d844:	f383 8811 	msr	BASEPRI, r3
 800d848:	f3bf 8f6f 	isb	sy
 800d84c:	f3bf 8f4f 	dsb	sy
 800d850:	b662      	cpsie	i
 800d852:	e7fe      	b.n	800d852 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d854:	b15a      	cbz	r2, 800d86e <xQueueGenericCreateStatic+0x4e>
 800d856:	b9b1      	cbnz	r1, 800d886 <xQueueGenericCreateStatic+0x66>
 800d858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85c:	b672      	cpsid	i
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	b662      	cpsie	i
 800d86c:	e7fe      	b.n	800d86c <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d86e:	b151      	cbz	r1, 800d886 <xQueueGenericCreateStatic+0x66>
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	b672      	cpsid	i
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	b662      	cpsie	i
 800d884:	e7fe      	b.n	800d884 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d886:	2350      	movs	r3, #80	; 0x50
 800d888:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d88a:	9b01      	ldr	r3, [sp, #4]
 800d88c:	2b50      	cmp	r3, #80	; 0x50
 800d88e:	d00a      	beq.n	800d8a6 <xQueueGenericCreateStatic+0x86>
 800d890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d894:	b672      	cpsid	i
 800d896:	f383 8811 	msr	BASEPRI, r3
 800d89a:	f3bf 8f6f 	isb	sy
 800d89e:	f3bf 8f4f 	dsb	sy
 800d8a2:	b662      	cpsie	i
 800d8a4:	e7fe      	b.n	800d8a4 <xQueueGenericCreateStatic+0x84>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8a6:	2900      	cmp	r1, #0
 800d8a8:	bf08      	it	eq
 800d8aa:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d8ac:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d8ae:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8b0:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d8b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d8b6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f7ff ff6d 	bl	800d79c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d8c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800d8c6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d8c8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800d8cc:	b002      	add	sp, #8
 800d8ce:	bd10      	pop	{r4, pc}

0800d8d0 <xQueueGenericCreate>:
	{
 800d8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d2:	460d      	mov	r5, r1
 800d8d4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	b950      	cbnz	r0, 800d8f0 <xQueueGenericCreate+0x20>
 800d8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8de:	b672      	cpsid	i
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	b662      	cpsie	i
 800d8ee:	e7fe      	b.n	800d8ee <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8f0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8f2:	3050      	adds	r0, #80	; 0x50
 800d8f4:	f001 fc94 	bl	800f220 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	b160      	cbz	r0, 800d916 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d902:	b955      	cbnz	r5, 800d91a <xQueueGenericCreate+0x4a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d904:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d906:	2101      	movs	r1, #1
 800d908:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800d90a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d90e:	f7ff ff45 	bl	800d79c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d912:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800d916:	4620      	mov	r0, r4
 800d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d91a:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d91e:	6003      	str	r3, [r0, #0]
 800d920:	e7f1      	b.n	800d906 <xQueueGenericCreate+0x36>
	...

0800d924 <xQueueGenericSend>:
{
 800d924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d928:	4688      	mov	r8, r1
 800d92a:	9201      	str	r2, [sp, #4]
 800d92c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800d92e:	4604      	mov	r4, r0
 800d930:	b950      	cbnz	r0, 800d948 <xQueueGenericSend+0x24>
 800d932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d936:	b672      	cpsid	i
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	b662      	cpsie	i
 800d946:	e7fe      	b.n	800d946 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d948:	b961      	cbnz	r1, 800d964 <xQueueGenericSend+0x40>
 800d94a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d94c:	b153      	cbz	r3, 800d964 <xQueueGenericSend+0x40>
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	b672      	cpsid	i
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	b662      	cpsie	i
 800d962:	e7fe      	b.n	800d962 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d964:	2f02      	cmp	r7, #2
 800d966:	d10d      	bne.n	800d984 <xQueueGenericSend+0x60>
 800d968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d00a      	beq.n	800d984 <xQueueGenericSend+0x60>
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	b672      	cpsid	i
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	b662      	cpsie	i
 800d982:	e7fe      	b.n	800d982 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d984:	f000 ff82 	bl	800e88c <xTaskGetSchedulerState>
 800d988:	b960      	cbnz	r0, 800d9a4 <xQueueGenericSend+0x80>
 800d98a:	9e01      	ldr	r6, [sp, #4]
 800d98c:	b15e      	cbz	r6, 800d9a6 <xQueueGenericSend+0x82>
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	b672      	cpsid	i
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	b662      	cpsie	i
 800d9a2:	e7fe      	b.n	800d9a2 <xQueueGenericSend+0x7e>
 800d9a4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800d9a6:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800d9aa:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800da94 <xQueueGenericSend+0x170>
 800d9ae:	e037      	b.n	800da20 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9b0:	9d01      	ldr	r5, [sp, #4]
 800d9b2:	b91d      	cbnz	r5, 800d9bc <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 800d9b4:	f001 fafc 	bl	800efb0 <vPortExitCritical>
			return errQUEUE_FULL;
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	e050      	b.n	800da5e <xQueueGenericSend+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 800d9bc:	b916      	cbnz	r6, 800d9c4 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9be:	a802      	add	r0, sp, #8
 800d9c0:	f000 ff0c 	bl	800e7dc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d9c4:	f001 faf4 	bl	800efb0 <vPortExitCritical>
		vTaskSuspendAll();
 800d9c8:	f000 fcfa 	bl	800e3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9cc:	f001 faca 	bl	800ef64 <vPortEnterCritical>
 800d9d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d9d4:	2bff      	cmp	r3, #255	; 0xff
 800d9d6:	d101      	bne.n	800d9dc <xQueueGenericSend+0xb8>
 800d9d8:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800d9dc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d9e0:	2bff      	cmp	r3, #255	; 0xff
 800d9e2:	d101      	bne.n	800d9e8 <xQueueGenericSend+0xc4>
 800d9e4:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800d9e8:	f001 fae2 	bl	800efb0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9ec:	a901      	add	r1, sp, #4
 800d9ee:	a802      	add	r0, sp, #8
 800d9f0:	f000 ff00 	bl	800e7f4 <xTaskCheckForTimeOut>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d146      	bne.n	800da86 <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9f8:	f001 fab4 	bl	800ef64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d9fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800da00:	429a      	cmp	r2, r3
 800da02:	d12f      	bne.n	800da64 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800da04:	f001 fad4 	bl	800efb0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da08:	9901      	ldr	r1, [sp, #4]
 800da0a:	f104 0010 	add.w	r0, r4, #16
 800da0e:	f000 fe65 	bl	800e6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da12:	4620      	mov	r0, r4
 800da14:	f7ff fe89 	bl	800d72a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da18:	f000 fd72 	bl	800e500 <xTaskResumeAll>
 800da1c:	b350      	cbz	r0, 800da74 <xQueueGenericSend+0x150>
 800da1e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800da20:	f001 faa0 	bl	800ef64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800da26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800da28:	429a      	cmp	r2, r3
 800da2a:	d301      	bcc.n	800da30 <xQueueGenericSend+0x10c>
 800da2c:	2f02      	cmp	r7, #2
 800da2e:	d1bf      	bne.n	800d9b0 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da30:	463a      	mov	r2, r7
 800da32:	4641      	mov	r1, r8
 800da34:	4620      	mov	r0, r4
 800da36:	f7ff fe30 	bl	800d69a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da3c:	b11b      	cbz	r3, 800da46 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da42:	f000 fe87 	bl	800e754 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800da46:	b138      	cbz	r0, 800da58 <xQueueGenericSend+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800da48:	4b12      	ldr	r3, [pc, #72]	; (800da94 <xQueueGenericSend+0x170>)
 800da4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800da58:	f001 faaa 	bl	800efb0 <vPortExitCritical>
				return pdPASS;
 800da5c:	2001      	movs	r0, #1
}
 800da5e:	b004      	add	sp, #16
 800da60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800da64:	f001 faa4 	bl	800efb0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800da68:	4620      	mov	r0, r4
 800da6a:	f7ff fe5e 	bl	800d72a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da6e:	f000 fd47 	bl	800e500 <xTaskResumeAll>
 800da72:	e7d4      	b.n	800da1e <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800da74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da78:	f8ca 3000 	str.w	r3, [sl]
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	e7cb      	b.n	800da1e <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800da86:	4620      	mov	r0, r4
 800da88:	f7ff fe4f 	bl	800d72a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da8c:	f000 fd38 	bl	800e500 <xTaskResumeAll>
 800da90:	e792      	b.n	800d9b8 <xQueueGenericSend+0x94>
 800da92:	bf00      	nop
 800da94:	e000ed04 	.word	0xe000ed04

0800da98 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800da98:	2200      	movs	r2, #0
 800da9a:	460b      	mov	r3, r1
	{
 800da9c:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800da9e:	4611      	mov	r1, r2
 800daa0:	9000      	str	r0, [sp, #0]
 800daa2:	2001      	movs	r0, #1
 800daa4:	f7ff febc 	bl	800d820 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800daa8:	4604      	mov	r4, r0
 800daaa:	b138      	cbz	r0, 800dabc <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800daac:	2300      	movs	r3, #0
 800daae:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dab0:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dab2:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dab4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dab6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dab8:	f7ff ff34 	bl	800d924 <xQueueGenericSend>
	}
 800dabc:	4620      	mov	r0, r4
 800dabe:	b002      	add	sp, #8
 800dac0:	bd10      	pop	{r4, pc}

0800dac2 <xQueueGiveMutexRecursive>:
	{
 800dac2:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800dac4:	4604      	mov	r4, r0
 800dac6:	b950      	cbnz	r0, 800dade <xQueueGiveMutexRecursive+0x1c>
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	b672      	cpsid	i
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	b662      	cpsie	i
 800dadc:	e7fe      	b.n	800dadc <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dade:	6885      	ldr	r5, [r0, #8]
 800dae0:	f000 fece 	bl	800e880 <xTaskGetCurrentTaskHandle>
 800dae4:	4285      	cmp	r5, r0
 800dae6:	d10a      	bne.n	800dafe <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dae8:	68e3      	ldr	r3, [r4, #12]
 800daea:	3b01      	subs	r3, #1
 800daec:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800daee:	b923      	cbnz	r3, 800dafa <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800daf0:	461a      	mov	r2, r3
 800daf2:	4619      	mov	r1, r3
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7ff ff15 	bl	800d924 <xQueueGenericSend>
			xReturn = pdPASS;
 800dafa:	2001      	movs	r0, #1
		return xReturn;
 800dafc:	e000      	b.n	800db00 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 800dafe:	2000      	movs	r0, #0
	}
 800db00:	bd38      	pop	{r3, r4, r5, pc}

0800db02 <xQueueCreateMutex>:
	{
 800db02:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800db04:	4602      	mov	r2, r0
 800db06:	2100      	movs	r1, #0
 800db08:	2001      	movs	r0, #1
 800db0a:	f7ff fee1 	bl	800d8d0 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800db0e:	4604      	mov	r4, r0
 800db10:	b138      	cbz	r0, 800db22 <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db12:	2300      	movs	r3, #0
 800db14:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db16:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db18:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db1a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db1c:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db1e:	f7ff ff01 	bl	800d924 <xQueueGenericSend>
	}
 800db22:	4620      	mov	r0, r4
 800db24:	bd10      	pop	{r4, pc}

0800db26 <xQueueGenericSendFromISR>:
{
 800db26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db2a:	4689      	mov	r9, r1
 800db2c:	4690      	mov	r8, r2
 800db2e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800db30:	4604      	mov	r4, r0
 800db32:	b950      	cbnz	r0, 800db4a <xQueueGenericSendFromISR+0x24>
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	b672      	cpsid	i
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	b662      	cpsie	i
 800db48:	e7fe      	b.n	800db48 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db4a:	b961      	cbnz	r1, 800db66 <xQueueGenericSendFromISR+0x40>
 800db4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800db4e:	b153      	cbz	r3, 800db66 <xQueueGenericSendFromISR+0x40>
 800db50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db54:	b672      	cpsid	i
 800db56:	f383 8811 	msr	BASEPRI, r3
 800db5a:	f3bf 8f6f 	isb	sy
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	b662      	cpsie	i
 800db64:	e7fe      	b.n	800db64 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db66:	2f02      	cmp	r7, #2
 800db68:	d10d      	bne.n	800db86 <xQueueGenericSendFromISR+0x60>
 800db6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d00a      	beq.n	800db86 <xQueueGenericSendFromISR+0x60>
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	b672      	cpsid	i
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	b662      	cpsie	i
 800db84:	e7fe      	b.n	800db84 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db86:	f001 faf5 	bl	800f174 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db8a:	f3ef 8611 	mrs	r6, BASEPRI
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	b672      	cpsid	i
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d301      	bcc.n	800dbae <xQueueGenericSendFromISR+0x88>
 800dbaa:	2f02      	cmp	r7, #2
 800dbac:	d122      	bne.n	800dbf4 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbae:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbb2:	463a      	mov	r2, r7
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbb8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbba:	f7ff fd6e 	bl	800d69a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800dbbe:	1c6b      	adds	r3, r5, #1
 800dbc0:	d113      	bne.n	800dbea <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbc4:	b90b      	cbnz	r3, 800dbca <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	e00b      	b.n	800dbe2 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dbce:	f000 fdc1 	bl	800e754 <xTaskRemoveFromEventList>
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d0f7      	beq.n	800dbc6 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	d0f4      	beq.n	800dbc6 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbdc:	2001      	movs	r0, #1
 800dbde:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dbe2:	f386 8811 	msr	BASEPRI, r6
}
 800dbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbea:	3501      	adds	r5, #1
 800dbec:	b26d      	sxtb	r5, r5
 800dbee:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800dbf2:	e7e8      	b.n	800dbc6 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	e7f4      	b.n	800dbe2 <xQueueGenericSendFromISR+0xbc>

0800dbf8 <xQueueReceive>:
{
 800dbf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbfc:	b085      	sub	sp, #20
 800dbfe:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800dc00:	4604      	mov	r4, r0
{
 800dc02:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dc04:	b950      	cbnz	r0, 800dc1c <xQueueReceive+0x24>
	__asm volatile
 800dc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0a:	b672      	cpsid	i
 800dc0c:	f383 8811 	msr	BASEPRI, r3
 800dc10:	f3bf 8f6f 	isb	sy
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	b662      	cpsie	i
 800dc1a:	e7fe      	b.n	800dc1a <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc1c:	b961      	cbnz	r1, 800dc38 <xQueueReceive+0x40>
 800dc1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dc20:	b153      	cbz	r3, 800dc38 <xQueueReceive+0x40>
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	b672      	cpsid	i
 800dc28:	f383 8811 	msr	BASEPRI, r3
 800dc2c:	f3bf 8f6f 	isb	sy
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	b662      	cpsie	i
 800dc36:	e7fe      	b.n	800dc36 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc38:	f000 fe28 	bl	800e88c <xTaskGetSchedulerState>
 800dc3c:	b960      	cbnz	r0, 800dc58 <xQueueReceive+0x60>
 800dc3e:	9e01      	ldr	r6, [sp, #4]
 800dc40:	b15e      	cbz	r6, 800dc5a <xQueueReceive+0x62>
 800dc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc46:	b672      	cpsid	i
 800dc48:	f383 8811 	msr	BASEPRI, r3
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	b662      	cpsie	i
 800dc56:	e7fe      	b.n	800dc56 <xQueueReceive+0x5e>
 800dc58:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800dc5a:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800dc5e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800dd40 <xQueueReceive+0x148>
 800dc62:	e03b      	b.n	800dcdc <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc64:	9d01      	ldr	r5, [sp, #4]
 800dc66:	b91d      	cbnz	r5, 800dc70 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 800dc68:	f001 f9a2 	bl	800efb0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e052      	b.n	800dd16 <xQueueReceive+0x11e>
				else if( xEntryTimeSet == pdFALSE )
 800dc70:	b916      	cbnz	r6, 800dc78 <xQueueReceive+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc72:	a802      	add	r0, sp, #8
 800dc74:	f000 fdb2 	bl	800e7dc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dc78:	f001 f99a 	bl	800efb0 <vPortExitCritical>
		vTaskSuspendAll();
 800dc7c:	f000 fba0 	bl	800e3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc80:	f001 f970 	bl	800ef64 <vPortEnterCritical>
 800dc84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc88:	2bff      	cmp	r3, #255	; 0xff
 800dc8a:	d101      	bne.n	800dc90 <xQueueReceive+0x98>
 800dc8c:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800dc90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc94:	2bff      	cmp	r3, #255	; 0xff
 800dc96:	d101      	bne.n	800dc9c <xQueueReceive+0xa4>
 800dc98:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800dc9c:	f001 f988 	bl	800efb0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dca0:	a901      	add	r1, sp, #4
 800dca2:	a802      	add	r0, sp, #8
 800dca4:	f000 fda6 	bl	800e7f4 <xTaskCheckForTimeOut>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d13d      	bne.n	800dd28 <xQueueReceive+0x130>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dcac:	4620      	mov	r0, r4
 800dcae:	f7ff fce9 	bl	800d684 <prvIsQueueEmpty>
 800dcb2:	b398      	cbz	r0, 800dd1c <xQueueReceive+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcb4:	9901      	ldr	r1, [sp, #4]
 800dcb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dcba:	f000 fd0f 	bl	800e6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7ff fd33 	bl	800d72a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dcc4:	f000 fc1c 	bl	800e500 <xTaskResumeAll>
 800dcc8:	b938      	cbnz	r0, 800dcda <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800dcca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcce:	f8c9 3000 	str.w	r3, [r9]
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800dcdc:	f001 f942 	bl	800ef64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dce0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dce2:	2d00      	cmp	r5, #0
 800dce4:	d0be      	beq.n	800dc64 <xQueueReceive+0x6c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dce6:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dce8:	4639      	mov	r1, r7
 800dcea:	4620      	mov	r0, r4
 800dcec:	f7ff fd08 	bl	800d700 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcf0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf2:	6923      	ldr	r3, [r4, #16]
 800dcf4:	b163      	cbz	r3, 800dd10 <xQueueReceive+0x118>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcf6:	f104 0010 	add.w	r0, r4, #16
 800dcfa:	f000 fd2b 	bl	800e754 <xTaskRemoveFromEventList>
 800dcfe:	b138      	cbz	r0, 800dd10 <xQueueReceive+0x118>
						queueYIELD_IF_USING_PREEMPTION();
 800dd00:	4b0f      	ldr	r3, [pc, #60]	; (800dd40 <xQueueReceive+0x148>)
 800dd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800dd10:	f001 f94e 	bl	800efb0 <vPortExitCritical>
				return pdPASS;
 800dd14:	2001      	movs	r0, #1
}
 800dd16:	b005      	add	sp, #20
 800dd18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f7ff fd04 	bl	800d72a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd22:	f000 fbed 	bl	800e500 <xTaskResumeAll>
 800dd26:	e7d8      	b.n	800dcda <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f7ff fcfe 	bl	800d72a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd2e:	f000 fbe7 	bl	800e500 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd32:	4620      	mov	r0, r4
 800dd34:	f7ff fca6 	bl	800d684 <prvIsQueueEmpty>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d0ce      	beq.n	800dcda <xQueueReceive+0xe2>
 800dd3c:	e796      	b.n	800dc6c <xQueueReceive+0x74>
 800dd3e:	bf00      	nop
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <xQueueSemaphoreTake>:
{
 800dd44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800dd48:	4604      	mov	r4, r0
{
 800dd4a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dd4c:	b950      	cbnz	r0, 800dd64 <xQueueSemaphoreTake+0x20>
 800dd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd52:	b672      	cpsid	i
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	b662      	cpsie	i
 800dd62:	e7fe      	b.n	800dd62 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 800dd64:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800dd66:	b155      	cbz	r5, 800dd7e <xQueueSemaphoreTake+0x3a>
 800dd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6c:	b672      	cpsid	i
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	b662      	cpsie	i
 800dd7c:	e7fe      	b.n	800dd7c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd7e:	f000 fd85 	bl	800e88c <xTaskGetSchedulerState>
 800dd82:	b960      	cbnz	r0, 800dd9e <xQueueSemaphoreTake+0x5a>
 800dd84:	9d01      	ldr	r5, [sp, #4]
 800dd86:	b155      	cbz	r5, 800dd9e <xQueueSemaphoreTake+0x5a>
 800dd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8c:	b672      	cpsid	i
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	b662      	cpsie	i
 800dd9c:	e7fe      	b.n	800dd9c <xQueueSemaphoreTake+0x58>
 800dd9e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800dda0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800dda2:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800ded4 <xQueueSemaphoreTake+0x190>
 800dda6:	e051      	b.n	800de4c <xQueueSemaphoreTake+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dda8:	9b01      	ldr	r3, [sp, #4]
 800ddaa:	b973      	cbnz	r3, 800ddca <xQueueSemaphoreTake+0x86>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ddac:	b155      	cbz	r5, 800ddc4 <xQueueSemaphoreTake+0x80>
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	b672      	cpsid	i
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	b662      	cpsie	i
 800ddc2:	e7fe      	b.n	800ddc2 <xQueueSemaphoreTake+0x7e>
					taskEXIT_CRITICAL();
 800ddc4:	f001 f8f4 	bl	800efb0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ddc8:	e05e      	b.n	800de88 <xQueueSemaphoreTake+0x144>
				else if( xEntryTimeSet == pdFALSE )
 800ddca:	b916      	cbnz	r6, 800ddd2 <xQueueSemaphoreTake+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddcc:	a802      	add	r0, sp, #8
 800ddce:	f000 fd05 	bl	800e7dc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ddd2:	f001 f8ed 	bl	800efb0 <vPortExitCritical>
		vTaskSuspendAll();
 800ddd6:	f000 faf3 	bl	800e3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddda:	f001 f8c3 	bl	800ef64 <vPortEnterCritical>
 800ddde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dde2:	2bff      	cmp	r3, #255	; 0xff
 800dde4:	d101      	bne.n	800ddea <xQueueSemaphoreTake+0xa6>
 800dde6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800ddea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ddee:	2bff      	cmp	r3, #255	; 0xff
 800ddf0:	d101      	bne.n	800ddf6 <xQueueSemaphoreTake+0xb2>
 800ddf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ddf6:	f001 f8db 	bl	800efb0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ddfa:	a901      	add	r1, sp, #4
 800ddfc:	a802      	add	r0, sp, #8
 800ddfe:	f000 fcf9 	bl	800e7f4 <xTaskCheckForTimeOut>
 800de02:	2800      	cmp	r0, #0
 800de04:	d14a      	bne.n	800de9c <xQueueSemaphoreTake+0x158>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de06:	4620      	mov	r0, r4
 800de08:	f7ff fc3c 	bl	800d684 <prvIsQueueEmpty>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	d03f      	beq.n	800de90 <xQueueSemaphoreTake+0x14c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	b93b      	cbnz	r3, 800de24 <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 800de14:	f001 f8a6 	bl	800ef64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de18:	68a0      	ldr	r0, [r4, #8]
 800de1a:	f000 fd47 	bl	800e8ac <xTaskPriorityInherit>
 800de1e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800de20:	f001 f8c6 	bl	800efb0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de24:	9901      	ldr	r1, [sp, #4]
 800de26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800de2a:	f000 fc57 	bl	800e6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de2e:	4620      	mov	r0, r4
 800de30:	f7ff fc7b 	bl	800d72a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de34:	f000 fb64 	bl	800e500 <xTaskResumeAll>
 800de38:	b938      	cbnz	r0, 800de4a <xQueueSemaphoreTake+0x106>
					portYIELD_WITHIN_API();
 800de3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de3e:	f8c8 3000 	str.w	r3, [r8]
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800de4c:	f001 f88a 	bl	800ef64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de52:	2b00      	cmp	r3, #0
 800de54:	d0a8      	beq.n	800dda8 <xQueueSemaphoreTake+0x64>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de56:	3b01      	subs	r3, #1
 800de58:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	b913      	cbnz	r3, 800de64 <xQueueSemaphoreTake+0x120>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de5e:	f000 fdfd 	bl	800ea5c <pvTaskIncrementMutexHeldCount>
 800de62:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de64:	6923      	ldr	r3, [r4, #16]
 800de66:	b163      	cbz	r3, 800de82 <xQueueSemaphoreTake+0x13e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de68:	f104 0010 	add.w	r0, r4, #16
 800de6c:	f000 fc72 	bl	800e754 <xTaskRemoveFromEventList>
 800de70:	b138      	cbz	r0, 800de82 <xQueueSemaphoreTake+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 800de72:	4b18      	ldr	r3, [pc, #96]	; (800ded4 <xQueueSemaphoreTake+0x190>)
 800de74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800de82:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800de84:	f001 f894 	bl	800efb0 <vPortExitCritical>
}
 800de88:	4628      	mov	r0, r5
 800de8a:	b004      	add	sp, #16
 800de8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800de90:	4620      	mov	r0, r4
 800de92:	f7ff fc4a 	bl	800d72a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de96:	f000 fb33 	bl	800e500 <xTaskResumeAll>
 800de9a:	e7d6      	b.n	800de4a <xQueueSemaphoreTake+0x106>
			prvUnlockQueue( pxQueue );
 800de9c:	4620      	mov	r0, r4
 800de9e:	f7ff fc44 	bl	800d72a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dea2:	f000 fb2d 	bl	800e500 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dea6:	4620      	mov	r0, r4
 800dea8:	f7ff fbec 	bl	800d684 <prvIsQueueEmpty>
 800deac:	2800      	cmp	r0, #0
 800deae:	d0cc      	beq.n	800de4a <xQueueSemaphoreTake+0x106>
					if( xInheritanceOccurred != pdFALSE )
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	d0e9      	beq.n	800de88 <xQueueSemaphoreTake+0x144>
						taskENTER_CRITICAL();
 800deb4:	f001 f856 	bl	800ef64 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800deb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800deba:	b119      	cbz	r1, 800dec4 <xQueueSemaphoreTake+0x180>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800debc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800debe:	6819      	ldr	r1, [r3, #0]
 800dec0:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dec4:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800dec6:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dec8:	f000 fd76 	bl	800e9b8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800decc:	f001 f870 	bl	800efb0 <vPortExitCritical>
 800ded0:	e7da      	b.n	800de88 <xQueueSemaphoreTake+0x144>
 800ded2:	bf00      	nop
 800ded4:	e000ed04 	.word	0xe000ed04

0800ded8 <xQueueTakeMutexRecursive>:
	{
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800dedc:	4604      	mov	r4, r0
 800dede:	b950      	cbnz	r0, 800def6 <xQueueTakeMutexRecursive+0x1e>
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	b672      	cpsid	i
 800dee6:	f383 8811 	msr	BASEPRI, r3
 800deea:	f3bf 8f6f 	isb	sy
 800deee:	f3bf 8f4f 	dsb	sy
 800def2:	b662      	cpsie	i
 800def4:	e7fe      	b.n	800def4 <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800def6:	6886      	ldr	r6, [r0, #8]
 800def8:	f000 fcc2 	bl	800e880 <xTaskGetCurrentTaskHandle>
 800defc:	4286      	cmp	r6, r0
 800defe:	d104      	bne.n	800df0a <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df00:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800df02:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df04:	3301      	adds	r3, #1
 800df06:	60e3      	str	r3, [r4, #12]
	}
 800df08:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800df0a:	4629      	mov	r1, r5
 800df0c:	4620      	mov	r0, r4
 800df0e:	f7ff ff19 	bl	800dd44 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800df12:	2800      	cmp	r0, #0
 800df14:	d0f8      	beq.n	800df08 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800df16:	68e3      	ldr	r3, [r4, #12]
 800df18:	3301      	adds	r3, #1
 800df1a:	60e3      	str	r3, [r4, #12]
		return xReturn;
 800df1c:	e7f4      	b.n	800df08 <xQueueTakeMutexRecursive+0x30>
	...

0800df20 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df20:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df22:	4a07      	ldr	r2, [pc, #28]	; (800df40 <vQueueAddToRegistry+0x20>)
	{
 800df24:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df26:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800df2a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800df2e:	b91d      	cbnz	r5, 800df38 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df34:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df36:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df38:	3301      	adds	r3, #1
 800df3a:	2b08      	cmp	r3, #8
 800df3c:	d1f3      	bne.n	800df26 <vQueueAddToRegistry+0x6>
 800df3e:	e7fa      	b.n	800df36 <vQueueAddToRegistry+0x16>
 800df40:	200106c4 	.word	0x200106c4

0800df44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	4604      	mov	r4, r0
 800df48:	460d      	mov	r5, r1
 800df4a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df4c:	f001 f80a 	bl	800ef64 <vPortEnterCritical>
 800df50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800df54:	2bff      	cmp	r3, #255	; 0xff
 800df56:	d102      	bne.n	800df5e <vQueueWaitForMessageRestricted+0x1a>
 800df58:	2300      	movs	r3, #0
 800df5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800df5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800df62:	2bff      	cmp	r3, #255	; 0xff
 800df64:	d102      	bne.n	800df6c <vQueueWaitForMessageRestricted+0x28>
 800df66:	2300      	movs	r3, #0
 800df68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df6c:	f001 f820 	bl	800efb0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df72:	b92b      	cbnz	r3, 800df80 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df74:	4632      	mov	r2, r6
 800df76:	4629      	mov	r1, r5
 800df78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df7c:	f000 fbca 	bl	800e714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df80:	4620      	mov	r0, r4
	}
 800df82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800df86:	f7ff bbd0 	b.w	800d72a <prvUnlockQueue>
	...

0800df8c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df92:	f000 ffe7 	bl	800ef64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df96:	4b2e      	ldr	r3, [pc, #184]	; (800e050 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800df98:	4d2e      	ldr	r5, [pc, #184]	; (800e054 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	4f2e      	ldr	r7, [pc, #184]	; (800e058 <prvAddNewTaskToReadyList+0xcc>)
 800df9e:	3201      	adds	r2, #1
 800dfa0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800dfa2:	682e      	ldr	r6, [r5, #0]
 800dfa4:	2e00      	cmp	r6, #0
 800dfa6:	d148      	bne.n	800e03a <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dfa8:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d11f      	bne.n	800dff0 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfb0:	f04f 0814 	mov.w	r8, #20
 800dfb4:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfb8:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfba:	f7ff fb21 	bl	800d600 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfbe:	2e38      	cmp	r6, #56	; 0x38
 800dfc0:	d1f8      	bne.n	800dfb4 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dfc2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800e084 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800dfc6:	4e25      	ldr	r6, [pc, #148]	; (800e05c <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800dfc8:	4640      	mov	r0, r8
 800dfca:	f7ff fb19 	bl	800d600 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f7ff fb16 	bl	800d600 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dfd4:	4822      	ldr	r0, [pc, #136]	; (800e060 <prvAddNewTaskToReadyList+0xd4>)
 800dfd6:	f7ff fb13 	bl	800d600 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dfda:	4822      	ldr	r0, [pc, #136]	; (800e064 <prvAddNewTaskToReadyList+0xd8>)
 800dfdc:	f7ff fb10 	bl	800d600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dfe0:	4821      	ldr	r0, [pc, #132]	; (800e068 <prvAddNewTaskToReadyList+0xdc>)
 800dfe2:	f7ff fb0d 	bl	800d600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dfe6:	4b21      	ldr	r3, [pc, #132]	; (800e06c <prvAddNewTaskToReadyList+0xe0>)
 800dfe8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dfec:	4b20      	ldr	r3, [pc, #128]	; (800e070 <prvAddNewTaskToReadyList+0xe4>)
 800dfee:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 800dff0:	4a20      	ldr	r2, [pc, #128]	; (800e074 <prvAddNewTaskToReadyList+0xe8>)
 800dff2:	6813      	ldr	r3, [r2, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800dff8:	4a1f      	ldr	r2, [pc, #124]	; (800e078 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dffa:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800dffc:	6811      	ldr	r1, [r2, #0]
 800dffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e000:	428b      	cmp	r3, r1
 800e002:	d900      	bls.n	800e006 <prvAddNewTaskToReadyList+0x7a>
 800e004:	6013      	str	r3, [r2, #0]
 800e006:	2014      	movs	r0, #20
 800e008:	1d21      	adds	r1, r4, #4
 800e00a:	fb00 7003 	mla	r0, r0, r3, r7
 800e00e:	f7ff fb05 	bl	800d61c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e012:	f000 ffcd 	bl	800efb0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e016:	4b19      	ldr	r3, [pc, #100]	; (800e07c <prvAddNewTaskToReadyList+0xf0>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	b163      	cbz	r3, 800e036 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e022:	429a      	cmp	r2, r3
 800e024:	d207      	bcs.n	800e036 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800e026:	4b16      	ldr	r3, [pc, #88]	; (800e080 <prvAddNewTaskToReadyList+0xf4>)
 800e028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	f3bf 8f6f 	isb	sy
}
 800e036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e03a:	4b10      	ldr	r3, [pc, #64]	; (800e07c <prvAddNewTaskToReadyList+0xf0>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1d6      	bne.n	800dff0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e042:	682b      	ldr	r3, [r5, #0]
 800e044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e048:	429a      	cmp	r2, r3
 800e04a:	d8d1      	bhi.n	800dff0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e04c:	602c      	str	r4, [r5, #0]
 800e04e:	e7cf      	b.n	800dff0 <prvAddNewTaskToReadyList+0x64>
 800e050:	20007aec 	.word	0x20007aec
 800e054:	2000767c 	.word	0x2000767c
 800e058:	20007688 	.word	0x20007688
 800e05c:	20007b18 	.word	0x20007b18
 800e060:	20007b34 	.word	0x20007b34
 800e064:	20007b60 	.word	0x20007b60
 800e068:	20007b4c 	.word	0x20007b4c
 800e06c:	20007680 	.word	0x20007680
 800e070:	20007684 	.word	0x20007684
 800e074:	20007afc 	.word	0x20007afc
 800e078:	20007b00 	.word	0x20007b00
 800e07c:	20007b48 	.word	0x20007b48
 800e080:	e000ed04 	.word	0xe000ed04
 800e084:	20007b04 	.word	0x20007b04

0800e088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e088:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e08a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 800e08e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e090:	b93b      	cbnz	r3, 800e0a2 <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e092:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800e094:	f001 f954 	bl	800f340 <vPortFree>
				vPortFree( pxTCB );
 800e098:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e09e:	f001 b94f 	b.w	800f340 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d0f9      	beq.n	800e09a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d00a      	beq.n	800e0c0 <prvDeleteTCB+0x38>
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	b672      	cpsid	i
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	b662      	cpsie	i
 800e0be:	e7fe      	b.n	800e0be <prvDeleteTCB+0x36>
	}
 800e0c0:	bd10      	pop	{r4, pc}
	...

0800e0c4 <prvIdleTask>:
{
 800e0c4:	b580      	push	{r7, lr}
				taskYIELD();
 800e0c6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800e124 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ca:	4f12      	ldr	r7, [pc, #72]	; (800e114 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0cc:	4c12      	ldr	r4, [pc, #72]	; (800e118 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800e0ce:	4d13      	ldr	r5, [pc, #76]	; (800e11c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	b963      	cbnz	r3, 800e0ee <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e0d4:	4b12      	ldr	r3, [pc, #72]	; (800e120 <prvIdleTask+0x5c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d9f8      	bls.n	800e0ce <prvIdleTask+0xa>
				taskYIELD();
 800e0dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0e0:	f8c8 3000 	str.w	r3, [r8]
 800e0e4:	f3bf 8f4f 	dsb	sy
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	e7ee      	b.n	800e0cc <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800e0ee:	f000 ff39 	bl	800ef64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0f6:	1d30      	adds	r0, r6, #4
 800e0f8:	f7ff fab3 	bl	800d662 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	3b01      	subs	r3, #1
 800e100:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	3b01      	subs	r3, #1
 800e106:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e108:	f000 ff52 	bl	800efb0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e10c:	4630      	mov	r0, r6
 800e10e:	f7ff ffbb 	bl	800e088 <prvDeleteTCB>
 800e112:	e7dd      	b.n	800e0d0 <prvIdleTask+0xc>
 800e114:	20007b60 	.word	0x20007b60
 800e118:	20007af0 	.word	0x20007af0
 800e11c:	20007aec 	.word	0x20007aec
 800e120:	20007688 	.word	0x20007688
 800e124:	e000ed04 	.word	0xe000ed04

0800e128 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e128:	4a06      	ldr	r2, [pc, #24]	; (800e144 <prvResetNextTaskUnblockTime+0x1c>)
 800e12a:	6813      	ldr	r3, [r2, #0]
 800e12c:	6819      	ldr	r1, [r3, #0]
 800e12e:	4b06      	ldr	r3, [pc, #24]	; (800e148 <prvResetNextTaskUnblockTime+0x20>)
 800e130:	b919      	cbnz	r1, 800e13a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e132:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e136:	601a      	str	r2, [r3, #0]
	}
}
 800e138:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e13a:	6812      	ldr	r2, [r2, #0]
 800e13c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e13e:	68d2      	ldr	r2, [r2, #12]
 800e140:	6852      	ldr	r2, [r2, #4]
 800e142:	e7f8      	b.n	800e136 <prvResetNextTaskUnblockTime+0xe>
 800e144:	20007680 	.word	0x20007680
 800e148:	20007b2c 	.word	0x20007b2c

0800e14c <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e150:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e152:	4680      	mov	r8, r0
 800e154:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e156:	21a5      	movs	r1, #165	; 0xa5
 800e158:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e15a:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e15c:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e15e:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e162:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e164:	f002 fc91 	bl	8010a8a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e16a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e16c:	f026 0607 	bic.w	r6, r6, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e170:	6466      	str	r6, [r4, #68]	; 0x44
	if( pcName != NULL )
 800e172:	b3a5      	cbz	r5, 800e1de <prvInitialiseNewTask.isra.2+0x92>
 800e174:	1e6b      	subs	r3, r5, #1
 800e176:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800e17a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e17c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e180:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800e184:	7819      	ldrb	r1, [r3, #0]
 800e186:	b109      	cbz	r1, 800e18c <prvInitialiseNewTask.isra.2+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e188:	42ab      	cmp	r3, r5
 800e18a:	d1f7      	bne.n	800e17c <prvInitialiseNewTask.isra.2+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e18c:	2300      	movs	r3, #0
 800e18e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e192:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e194:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e198:	1d20      	adds	r0, r4, #4
 800e19a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e19c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 800e1a0:	bf28      	it	cs
 800e1a2:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e1a4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e1a6:	6525      	str	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a8:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1ac:	f7ff fa33 	bl	800d616 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1b0:	f104 0018 	add.w	r0, r4, #24
 800e1b4:	f7ff fa2f 	bl	800d616 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e1b8:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1bc:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1be:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1c0:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1c2:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1c4:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1c6:	4630      	mov	r0, r6
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e1c8:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1cc:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1d0:	f000 fe9e 	bl	800ef10 <pxPortInitialiseStack>
 800e1d4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e1d6:	b107      	cbz	r7, 800e1da <prvInitialiseNewTask.isra.2+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1d8:	603c      	str	r4, [r7, #0]
}
 800e1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e1de:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800e1e2:	e7d6      	b.n	800e192 <prvInitialiseNewTask.isra.2+0x46>

0800e1e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1e6:	4b16      	ldr	r3, [pc, #88]	; (800e240 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e1e8:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1ea:	4e16      	ldr	r6, [pc, #88]	; (800e244 <prvAddCurrentTaskToDelayedList+0x60>)
{
 800e1ec:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e1ee:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1f0:	6830      	ldr	r0, [r6, #0]
 800e1f2:	3004      	adds	r0, #4
 800e1f4:	f7ff fa35 	bl	800d662 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1f8:	1c6b      	adds	r3, r5, #1
 800e1fa:	4633      	mov	r3, r6
 800e1fc:	d107      	bne.n	800e20e <prvAddCurrentTaskToDelayedList+0x2a>
 800e1fe:	b137      	cbz	r7, 800e20e <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e200:	6831      	ldr	r1, [r6, #0]
 800e202:	4811      	ldr	r0, [pc, #68]	; (800e248 <prvAddCurrentTaskToDelayedList+0x64>)
 800e204:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e20a:	f7ff ba07 	b.w	800d61c <vListInsertEnd>
 800e20e:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800e214:	d307      	bcc.n	800e226 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e216:	4a0d      	ldr	r2, [pc, #52]	; (800e24c <prvAddCurrentTaskToDelayedList+0x68>)
 800e218:	6810      	ldr	r0, [r2, #0]
 800e21a:	6819      	ldr	r1, [r3, #0]
}
 800e21c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e220:	3104      	adds	r1, #4
 800e222:	f7ff ba07 	b.w	800d634 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e226:	4a0a      	ldr	r2, [pc, #40]	; (800e250 <prvAddCurrentTaskToDelayedList+0x6c>)
 800e228:	6810      	ldr	r0, [r2, #0]
 800e22a:	6819      	ldr	r1, [r3, #0]
 800e22c:	3104      	adds	r1, #4
 800e22e:	f7ff fa01 	bl	800d634 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e232:	4b08      	ldr	r3, [pc, #32]	; (800e254 <prvAddCurrentTaskToDelayedList+0x70>)
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	42a2      	cmp	r2, r4
 800e238:	d900      	bls.n	800e23c <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 800e23a:	601c      	str	r4, [r3, #0]
}
 800e23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e23e:	bf00      	nop
 800e240:	20007b74 	.word	0x20007b74
 800e244:	2000767c 	.word	0x2000767c
 800e248:	20007b4c 	.word	0x20007b4c
 800e24c:	20007684 	.word	0x20007684
 800e250:	20007680 	.word	0x20007680
 800e254:	20007b2c 	.word	0x20007b2c

0800e258 <xTaskCreateStatic>:
	{
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e260:	b955      	cbnz	r5, 800e278 <xTaskCreateStatic+0x20>
 800e262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e266:	b672      	cpsid	i
 800e268:	f383 8811 	msr	BASEPRI, r3
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f3bf 8f4f 	dsb	sy
 800e274:	b662      	cpsie	i
 800e276:	e7fe      	b.n	800e276 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800e278:	b954      	cbnz	r4, 800e290 <xTaskCreateStatic+0x38>
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	b672      	cpsid	i
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	b662      	cpsie	i
 800e28e:	e7fe      	b.n	800e28e <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e290:	2664      	movs	r6, #100	; 0x64
 800e292:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e294:	9e05      	ldr	r6, [sp, #20]
 800e296:	2e64      	cmp	r6, #100	; 0x64
 800e298:	d00a      	beq.n	800e2b0 <xTaskCreateStatic+0x58>
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	b672      	cpsid	i
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	b662      	cpsie	i
 800e2ae:	e7fe      	b.n	800e2ae <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e2b0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e2b2:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e2b4:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e2b6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e2ba:	ad04      	add	r5, sp, #16
 800e2bc:	9402      	str	r4, [sp, #8]
 800e2be:	9501      	str	r5, [sp, #4]
 800e2c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e2c2:	9500      	str	r5, [sp, #0]
 800e2c4:	f7ff ff42 	bl	800e14c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f7ff fe5f 	bl	800df8c <prvAddNewTaskToReadyList>
	}
 800e2ce:	9804      	ldr	r0, [sp, #16]
 800e2d0:	b006      	add	sp, #24
 800e2d2:	bd70      	pop	{r4, r5, r6, pc}

0800e2d4 <xTaskCreate>:
	{
 800e2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2d8:	4607      	mov	r7, r0
 800e2da:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e2dc:	0090      	lsls	r0, r2, #2
	{
 800e2de:	4688      	mov	r8, r1
 800e2e0:	4616      	mov	r6, r2
 800e2e2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e2e4:	f000 ff9c 	bl	800f220 <pvPortMalloc>
			if( pxStack != NULL )
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	b1e8      	cbz	r0, 800e328 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e2ec:	2064      	movs	r0, #100	; 0x64
 800e2ee:	f000 ff97 	bl	800f220 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	b1a8      	cbz	r0, 800e322 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e2f6:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e2f8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e2fa:	4632      	mov	r2, r6
 800e2fc:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e2fe:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e304:	9002      	str	r0, [sp, #8]
 800e306:	4638      	mov	r0, r7
 800e308:	9301      	str	r3, [sp, #4]
 800e30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	464b      	mov	r3, r9
 800e310:	f7ff ff1c 	bl	800e14c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e314:	4620      	mov	r0, r4
 800e316:	f7ff fe39 	bl	800df8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e31a:	2001      	movs	r0, #1
	}
 800e31c:	b005      	add	sp, #20
 800e31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800e322:	4628      	mov	r0, r5
 800e324:	f001 f80c 	bl	800f340 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e328:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800e32c:	e7f6      	b.n	800e31c <xTaskCreate+0x48>
	...

0800e330 <vTaskStartScheduler>:
{
 800e330:	b510      	push	{r4, lr}
 800e332:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e334:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e336:	aa07      	add	r2, sp, #28
 800e338:	a906      	add	r1, sp, #24
 800e33a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e33c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e340:	f7ff f946 	bl	800d5d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e344:	9b05      	ldr	r3, [sp, #20]
 800e346:	9a07      	ldr	r2, [sp, #28]
 800e348:	9302      	str	r3, [sp, #8]
 800e34a:	9b06      	ldr	r3, [sp, #24]
 800e34c:	4917      	ldr	r1, [pc, #92]	; (800e3ac <vTaskStartScheduler+0x7c>)
 800e34e:	4818      	ldr	r0, [pc, #96]	; (800e3b0 <vTaskStartScheduler+0x80>)
 800e350:	e9cd 4300 	strd	r4, r3, [sp]
 800e354:	4623      	mov	r3, r4
 800e356:	f7ff ff7f 	bl	800e258 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e35a:	b1b8      	cbz	r0, 800e38c <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 800e35c:	f000 fbdc 	bl	800eb18 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e360:	2801      	cmp	r0, #1
 800e362:	d115      	bne.n	800e390 <vTaskStartScheduler+0x60>
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	b672      	cpsid	i
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800e378:	4b0e      	ldr	r3, [pc, #56]	; (800e3b4 <vTaskStartScheduler+0x84>)
 800e37a:	f04f 32ff 	mov.w	r2, #4294967295
 800e37e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e380:	4b0d      	ldr	r3, [pc, #52]	; (800e3b8 <vTaskStartScheduler+0x88>)
 800e382:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e384:	4b0d      	ldr	r3, [pc, #52]	; (800e3bc <vTaskStartScheduler+0x8c>)
 800e386:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800e388:	f000 fe8e 	bl	800f0a8 <xPortStartScheduler>
}
 800e38c:	b008      	add	sp, #32
 800e38e:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e390:	3001      	adds	r0, #1
 800e392:	d1fb      	bne.n	800e38c <vTaskStartScheduler+0x5c>
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	b672      	cpsid	i
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	b662      	cpsie	i
 800e3a8:	e7fe      	b.n	800e3a8 <vTaskStartScheduler+0x78>
 800e3aa:	bf00      	nop
 800e3ac:	08015209 	.word	0x08015209
 800e3b0:	0800e0c5 	.word	0x0800e0c5
 800e3b4:	20007b2c 	.word	0x20007b2c
 800e3b8:	20007b48 	.word	0x20007b48
 800e3bc:	20007b74 	.word	0x20007b74

0800e3c0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e3c0:	4a02      	ldr	r2, [pc, #8]	; (800e3cc <vTaskSuspendAll+0xc>)
 800e3c2:	6813      	ldr	r3, [r2, #0]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	6013      	str	r3, [r2, #0]
}
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	20007af8 	.word	0x20007af8

0800e3d0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e3d0:	4b01      	ldr	r3, [pc, #4]	; (800e3d8 <xTaskGetTickCount+0x8>)
 800e3d2:	6818      	ldr	r0, [r3, #0]
}
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	20007b74 	.word	0x20007b74

0800e3dc <xTaskIncrementTick>:
{
 800e3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e0:	4b3c      	ldr	r3, [pc, #240]	; (800e4d4 <xTaskIncrementTick+0xf8>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d16d      	bne.n	800e4c4 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3e8:	4b3b      	ldr	r3, [pc, #236]	; (800e4d8 <xTaskIncrementTick+0xfc>)
 800e3ea:	681c      	ldr	r4, [r3, #0]
 800e3ec:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e3ee:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3f0:	b9cc      	cbnz	r4, 800e426 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 800e3f2:	4b3a      	ldr	r3, [pc, #232]	; (800e4dc <xTaskIncrementTick+0x100>)
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	6812      	ldr	r2, [r2, #0]
 800e3f8:	b152      	cbz	r2, 800e410 <xTaskIncrementTick+0x34>
 800e3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fe:	b672      	cpsid	i
 800e400:	f383 8811 	msr	BASEPRI, r3
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	b662      	cpsie	i
 800e40e:	e7fe      	b.n	800e40e <xTaskIncrementTick+0x32>
 800e410:	4a33      	ldr	r2, [pc, #204]	; (800e4e0 <xTaskIncrementTick+0x104>)
 800e412:	6819      	ldr	r1, [r3, #0]
 800e414:	6810      	ldr	r0, [r2, #0]
 800e416:	6018      	str	r0, [r3, #0]
 800e418:	6011      	str	r1, [r2, #0]
 800e41a:	4a32      	ldr	r2, [pc, #200]	; (800e4e4 <xTaskIncrementTick+0x108>)
 800e41c:	6813      	ldr	r3, [r2, #0]
 800e41e:	3301      	adds	r3, #1
 800e420:	6013      	str	r3, [r2, #0]
 800e422:	f7ff fe81 	bl	800e128 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e426:	4d30      	ldr	r5, [pc, #192]	; (800e4e8 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e428:	f04f 0b00 	mov.w	fp, #0
 800e42c:	4f2f      	ldr	r7, [pc, #188]	; (800e4ec <xTaskIncrementTick+0x110>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	42a3      	cmp	r3, r4
 800e432:	d911      	bls.n	800e458 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e434:	683a      	ldr	r2, [r7, #0]
 800e436:	4b2e      	ldr	r3, [pc, #184]	; (800e4f0 <xTaskIncrementTick+0x114>)
 800e438:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e43a:	2214      	movs	r2, #20
 800e43c:	434a      	muls	r2, r1
 800e43e:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800e440:	2a02      	cmp	r2, #2
 800e442:	bf28      	it	cs
 800e444:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800e448:	4a2a      	ldr	r2, [pc, #168]	; (800e4f4 <xTaskIncrementTick+0x118>)
 800e44a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800e44c:	2a00      	cmp	r2, #0
}
 800e44e:	bf0c      	ite	eq
 800e450:	4658      	moveq	r0, fp
 800e452:	2001      	movne	r0, #1
 800e454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e458:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800e4dc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800e45c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800e4fc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e460:	f8d9 2000 	ldr.w	r2, [r9]
 800e464:	6812      	ldr	r2, [r2, #0]
 800e466:	b91a      	cbnz	r2, 800e470 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e468:	f04f 32ff 	mov.w	r2, #4294967295
 800e46c:	602a      	str	r2, [r5, #0]
					break;
 800e46e:	e7e1      	b.n	800e434 <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e470:	f8d9 2000 	ldr.w	r2, [r9]
 800e474:	68d2      	ldr	r2, [r2, #12]
 800e476:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e478:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800e47a:	428c      	cmp	r4, r1
 800e47c:	d201      	bcs.n	800e482 <xTaskIncrementTick+0xa6>
						xNextTaskUnblockTime = xItemValue;
 800e47e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e480:	e7d8      	b.n	800e434 <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e482:	f106 0804 	add.w	r8, r6, #4
 800e486:	4640      	mov	r0, r8
 800e488:	f7ff f8eb 	bl	800d662 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e48c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800e48e:	b119      	cbz	r1, 800e498 <xTaskIncrementTick+0xbc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e490:	f106 0018 	add.w	r0, r6, #24
 800e494:	f7ff f8e5 	bl	800d662 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e498:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800e49a:	f8da 1000 	ldr.w	r1, [sl]
 800e49e:	4288      	cmp	r0, r1
 800e4a0:	d901      	bls.n	800e4a6 <xTaskIncrementTick+0xca>
 800e4a2:	f8ca 0000 	str.w	r0, [sl]
 800e4a6:	2214      	movs	r2, #20
 800e4a8:	4b11      	ldr	r3, [pc, #68]	; (800e4f0 <xTaskIncrementTick+0x114>)
 800e4aa:	4641      	mov	r1, r8
 800e4ac:	fb02 3000 	mla	r0, r2, r0, r3
 800e4b0:	f7ff f8b4 	bl	800d61c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4b4:	6838      	ldr	r0, [r7, #0]
 800e4b6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800e4b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800e4ba:	4291      	cmp	r1, r2
 800e4bc:	bf28      	it	cs
 800e4be:	f04f 0b01 	movcs.w	fp, #1
 800e4c2:	e7cd      	b.n	800e460 <xTaskIncrementTick+0x84>
		++uxPendedTicks;
 800e4c4:	4a0c      	ldr	r2, [pc, #48]	; (800e4f8 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e4c6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800e4ca:	6813      	ldr	r3, [r2, #0]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	6013      	str	r3, [r2, #0]
 800e4d0:	e7ba      	b.n	800e448 <xTaskIncrementTick+0x6c>
 800e4d2:	bf00      	nop
 800e4d4:	20007af8 	.word	0x20007af8
 800e4d8:	20007b74 	.word	0x20007b74
 800e4dc:	20007680 	.word	0x20007680
 800e4e0:	20007684 	.word	0x20007684
 800e4e4:	20007b30 	.word	0x20007b30
 800e4e8:	20007b2c 	.word	0x20007b2c
 800e4ec:	2000767c 	.word	0x2000767c
 800e4f0:	20007688 	.word	0x20007688
 800e4f4:	20007b78 	.word	0x20007b78
 800e4f8:	20007af4 	.word	0x20007af4
 800e4fc:	20007b00 	.word	0x20007b00

0800e500 <xTaskResumeAll>:
{
 800e500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e504:	4c30      	ldr	r4, [pc, #192]	; (800e5c8 <xTaskResumeAll+0xc8>)
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	b953      	cbnz	r3, 800e520 <xTaskResumeAll+0x20>
 800e50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50e:	b672      	cpsid	i
 800e510:	f383 8811 	msr	BASEPRI, r3
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	f3bf 8f4f 	dsb	sy
 800e51c:	b662      	cpsie	i
 800e51e:	e7fe      	b.n	800e51e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800e520:	f000 fd20 	bl	800ef64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	3b01      	subs	r3, #1
 800e528:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e52a:	6824      	ldr	r4, [r4, #0]
 800e52c:	b12c      	cbz	r4, 800e53a <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800e52e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e530:	f000 fd3e 	bl	800efb0 <vPortExitCritical>
}
 800e534:	4620      	mov	r0, r4
 800e536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e53a:	4b24      	ldr	r3, [pc, #144]	; (800e5cc <xTaskResumeAll+0xcc>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d0f5      	beq.n	800e52e <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e542:	4d23      	ldr	r5, [pc, #140]	; (800e5d0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e544:	4e23      	ldr	r6, [pc, #140]	; (800e5d4 <xTaskResumeAll+0xd4>)
 800e546:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800e5e8 <xTaskResumeAll+0xe8>
 800e54a:	e01d      	b.n	800e588 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e54c:	68eb      	ldr	r3, [r5, #12]
 800e54e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e550:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e552:	f104 0018 	add.w	r0, r4, #24
 800e556:	f7ff f884 	bl	800d662 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e55a:	4638      	mov	r0, r7
 800e55c:	f7ff f881 	bl	800d662 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e562:	6832      	ldr	r2, [r6, #0]
 800e564:	4293      	cmp	r3, r2
 800e566:	d900      	bls.n	800e56a <xTaskResumeAll+0x6a>
 800e568:	6033      	str	r3, [r6, #0]
 800e56a:	2014      	movs	r0, #20
 800e56c:	4639      	mov	r1, r7
 800e56e:	fb00 8003 	mla	r0, r0, r3, r8
 800e572:	f7ff f853 	bl	800d61c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e576:	4b18      	ldr	r3, [pc, #96]	; (800e5d8 <xTaskResumeAll+0xd8>)
 800e578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57e:	429a      	cmp	r2, r3
 800e580:	d302      	bcc.n	800e588 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800e582:	4b16      	ldr	r3, [pc, #88]	; (800e5dc <xTaskResumeAll+0xdc>)
 800e584:	2201      	movs	r2, #1
 800e586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e588:	682b      	ldr	r3, [r5, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1de      	bne.n	800e54c <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 800e58e:	b10c      	cbz	r4, 800e594 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800e590:	f7ff fdca 	bl	800e128 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e594:	4d12      	ldr	r5, [pc, #72]	; (800e5e0 <xTaskResumeAll+0xe0>)
 800e596:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e598:	b144      	cbz	r4, 800e5ac <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800e59a:	4e10      	ldr	r6, [pc, #64]	; (800e5dc <xTaskResumeAll+0xdc>)
 800e59c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e59e:	f7ff ff1d 	bl	800e3dc <xTaskIncrementTick>
 800e5a2:	b100      	cbz	r0, 800e5a6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800e5a4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e5a6:	3c01      	subs	r4, #1
 800e5a8:	d1f9      	bne.n	800e59e <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800e5aa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e5ac:	4b0b      	ldr	r3, [pc, #44]	; (800e5dc <xTaskResumeAll+0xdc>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d0bc      	beq.n	800e52e <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800e5b4:	4b0b      	ldr	r3, [pc, #44]	; (800e5e4 <xTaskResumeAll+0xe4>)
 800e5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5ba:	601a      	str	r2, [r3, #0]
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e5c4:	2401      	movs	r4, #1
 800e5c6:	e7b3      	b.n	800e530 <xTaskResumeAll+0x30>
 800e5c8:	20007af8 	.word	0x20007af8
 800e5cc:	20007aec 	.word	0x20007aec
 800e5d0:	20007b34 	.word	0x20007b34
 800e5d4:	20007b00 	.word	0x20007b00
 800e5d8:	2000767c 	.word	0x2000767c
 800e5dc:	20007b78 	.word	0x20007b78
 800e5e0:	20007af4 	.word	0x20007af4
 800e5e4:	e000ed04 	.word	0xe000ed04
 800e5e8:	20007688 	.word	0x20007688

0800e5ec <vTaskDelay>:
	{
 800e5ec:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e5ee:	b940      	cbnz	r0, 800e602 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800e5f0:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <vTaskDelay+0x44>)
 800e5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f6:	601a      	str	r2, [r3, #0]
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	f3bf 8f6f 	isb	sy
	}
 800e600:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800e602:	4b0c      	ldr	r3, [pc, #48]	; (800e634 <vTaskDelay+0x48>)
 800e604:	6819      	ldr	r1, [r3, #0]
 800e606:	b151      	cbz	r1, 800e61e <vTaskDelay+0x32>
 800e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60c:	b672      	cpsid	i
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	b662      	cpsie	i
 800e61c:	e7fe      	b.n	800e61c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e61e:	f7ff fecf 	bl	800e3c0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e622:	f7ff fddf 	bl	800e1e4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800e626:	f7ff ff6b 	bl	800e500 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800e62a:	2800      	cmp	r0, #0
 800e62c:	d0e0      	beq.n	800e5f0 <vTaskDelay+0x4>
 800e62e:	e7e7      	b.n	800e600 <vTaskDelay+0x14>
 800e630:	e000ed04 	.word	0xe000ed04
 800e634:	20007af8 	.word	0x20007af8

0800e638 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e638:	4b21      	ldr	r3, [pc, #132]	; (800e6c0 <vTaskSwitchContext+0x88>)
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	4b21      	ldr	r3, [pc, #132]	; (800e6c4 <vTaskSwitchContext+0x8c>)
{
 800e63e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e640:	b112      	cbz	r2, 800e648 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e642:	2201      	movs	r2, #1
 800e644:	601a      	str	r2, [r3, #0]
}
 800e646:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 800e648:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e64a:	221b      	movs	r2, #27
 800e64c:	4b1e      	ldr	r3, [pc, #120]	; (800e6c8 <vTaskSwitchContext+0x90>)
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e64e:	491f      	ldr	r1, [pc, #124]	; (800e6cc <vTaskSwitchContext+0x94>)
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e652:	680c      	ldr	r4, [r1, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e654:	fbb3 f3f2 	udiv	r3, r3, r2
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e658:	42a3      	cmp	r3, r4
 800e65a:	d905      	bls.n	800e668 <vTaskSwitchContext+0x30>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e65c:	4a1c      	ldr	r2, [pc, #112]	; (800e6d0 <vTaskSwitchContext+0x98>)
 800e65e:	6810      	ldr	r0, [r2, #0]
 800e660:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800e662:	441a      	add	r2, r3
 800e664:	1b12      	subs	r2, r2, r4
 800e666:	6582      	str	r2, [r0, #88]	; 0x58
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e668:	4d1a      	ldr	r5, [pc, #104]	; (800e6d4 <vTaskSwitchContext+0x9c>)
 800e66a:	2714      	movs	r7, #20
 800e66c:	4a1a      	ldr	r2, [pc, #104]	; (800e6d8 <vTaskSwitchContext+0xa0>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e66e:	600b      	str	r3, [r1, #0]
 800e670:	4616      	mov	r6, r2
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e672:	682b      	ldr	r3, [r5, #0]
 800e674:	fb07 f103 	mul.w	r1, r7, r3
 800e678:	5854      	ldr	r4, [r2, r1]
 800e67a:	1850      	adds	r0, r2, r1
 800e67c:	b18c      	cbz	r4, 800e6a2 <vTaskSwitchContext+0x6a>
 800e67e:	6844      	ldr	r4, [r0, #4]
 800e680:	3108      	adds	r1, #8
 800e682:	6864      	ldr	r4, [r4, #4]
 800e684:	440a      	add	r2, r1
 800e686:	4294      	cmp	r4, r2
 800e688:	6044      	str	r4, [r0, #4]
 800e68a:	bf04      	itt	eq
 800e68c:	6862      	ldreq	r2, [r4, #4]
 800e68e:	6042      	streq	r2, [r0, #4]
 800e690:	2214      	movs	r2, #20
 800e692:	fb02 6203 	mla	r2, r2, r3, r6
 800e696:	6852      	ldr	r2, [r2, #4]
 800e698:	68d1      	ldr	r1, [r2, #12]
 800e69a:	4a0d      	ldr	r2, [pc, #52]	; (800e6d0 <vTaskSwitchContext+0x98>)
 800e69c:	6011      	str	r1, [r2, #0]
 800e69e:	602b      	str	r3, [r5, #0]
}
 800e6a0:	e7d1      	b.n	800e646 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a2:	b953      	cbnz	r3, 800e6ba <vTaskSwitchContext+0x82>
 800e6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a8:	b672      	cpsid	i
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	b662      	cpsie	i
 800e6b8:	e7fe      	b.n	800e6b8 <vTaskSwitchContext+0x80>
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	e7da      	b.n	800e674 <vTaskSwitchContext+0x3c>
 800e6be:	bf00      	nop
 800e6c0:	20007af8 	.word	0x20007af8
 800e6c4:	20007b78 	.word	0x20007b78
 800e6c8:	40000c00 	.word	0x40000c00
 800e6cc:	20007ae8 	.word	0x20007ae8
 800e6d0:	2000767c 	.word	0x2000767c
 800e6d4:	20007b00 	.word	0x20007b00
 800e6d8:	20007688 	.word	0x20007688

0800e6dc <vTaskPlaceOnEventList>:
{
 800e6dc:	b510      	push	{r4, lr}
 800e6de:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e6e0:	b950      	cbnz	r0, 800e6f8 <vTaskPlaceOnEventList+0x1c>
 800e6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e6:	b672      	cpsid	i
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	b662      	cpsie	i
 800e6f6:	e7fe      	b.n	800e6f6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6f8:	4b05      	ldr	r3, [pc, #20]	; (800e710 <vTaskPlaceOnEventList+0x34>)
 800e6fa:	6819      	ldr	r1, [r3, #0]
 800e6fc:	3118      	adds	r1, #24
 800e6fe:	f7fe ff99 	bl	800d634 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e702:	4620      	mov	r0, r4
 800e704:	2101      	movs	r1, #1
}
 800e706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e70a:	f7ff bd6b 	b.w	800e1e4 <prvAddCurrentTaskToDelayedList>
 800e70e:	bf00      	nop
 800e710:	2000767c 	.word	0x2000767c

0800e714 <vTaskPlaceOnEventListRestricted>:
	{
 800e714:	b538      	push	{r3, r4, r5, lr}
 800e716:	460d      	mov	r5, r1
 800e718:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e71a:	b950      	cbnz	r0, 800e732 <vTaskPlaceOnEventListRestricted+0x1e>
 800e71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e720:	b672      	cpsid	i
 800e722:	f383 8811 	msr	BASEPRI, r3
 800e726:	f3bf 8f6f 	isb	sy
 800e72a:	f3bf 8f4f 	dsb	sy
 800e72e:	b662      	cpsie	i
 800e730:	e7fe      	b.n	800e730 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e732:	4b07      	ldr	r3, [pc, #28]	; (800e750 <vTaskPlaceOnEventListRestricted+0x3c>)
 800e734:	6819      	ldr	r1, [r3, #0]
 800e736:	3118      	adds	r1, #24
 800e738:	f7fe ff70 	bl	800d61c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e73c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e73e:	4621      	mov	r1, r4
 800e740:	bf0c      	ite	eq
 800e742:	4628      	moveq	r0, r5
 800e744:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e74c:	f7ff bd4a 	b.w	800e1e4 <prvAddCurrentTaskToDelayedList>
 800e750:	2000767c 	.word	0x2000767c

0800e754 <xTaskRemoveFromEventList>:
{
 800e754:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e756:	68c3      	ldr	r3, [r0, #12]
 800e758:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e75a:	b954      	cbnz	r4, 800e772 <xTaskRemoveFromEventList+0x1e>
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	b672      	cpsid	i
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	b662      	cpsie	i
 800e770:	e7fe      	b.n	800e770 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e772:	f104 0518 	add.w	r5, r4, #24
 800e776:	4628      	mov	r0, r5
 800e778:	f7fe ff73 	bl	800d662 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e77c:	4b11      	ldr	r3, [pc, #68]	; (800e7c4 <xTaskRemoveFromEventList+0x70>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	b9d3      	cbnz	r3, 800e7b8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e782:	1d25      	adds	r5, r4, #4
 800e784:	4628      	mov	r0, r5
 800e786:	f7fe ff6c 	bl	800d662 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e78a:	4a0f      	ldr	r2, [pc, #60]	; (800e7c8 <xTaskRemoveFromEventList+0x74>)
 800e78c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e78e:	6811      	ldr	r1, [r2, #0]
 800e790:	428b      	cmp	r3, r1
 800e792:	d900      	bls.n	800e796 <xTaskRemoveFromEventList+0x42>
 800e794:	6013      	str	r3, [r2, #0]
 800e796:	4a0d      	ldr	r2, [pc, #52]	; (800e7cc <xTaskRemoveFromEventList+0x78>)
 800e798:	2014      	movs	r0, #20
 800e79a:	4629      	mov	r1, r5
 800e79c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7a0:	f7fe ff3c 	bl	800d61c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7a4:	4b0a      	ldr	r3, [pc, #40]	; (800e7d0 <xTaskRemoveFromEventList+0x7c>)
 800e7a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d906      	bls.n	800e7be <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	4b08      	ldr	r3, [pc, #32]	; (800e7d4 <xTaskRemoveFromEventList+0x80>)
 800e7b4:	6018      	str	r0, [r3, #0]
}
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4807      	ldr	r0, [pc, #28]	; (800e7d8 <xTaskRemoveFromEventList+0x84>)
 800e7bc:	e7f0      	b.n	800e7a0 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 800e7be:	2000      	movs	r0, #0
	return xReturn;
 800e7c0:	e7f9      	b.n	800e7b6 <xTaskRemoveFromEventList+0x62>
 800e7c2:	bf00      	nop
 800e7c4:	20007af8 	.word	0x20007af8
 800e7c8:	20007b00 	.word	0x20007b00
 800e7cc:	20007688 	.word	0x20007688
 800e7d0:	2000767c 	.word	0x2000767c
 800e7d4:	20007b78 	.word	0x20007b78
 800e7d8:	20007b34 	.word	0x20007b34

0800e7dc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7dc:	4b03      	ldr	r3, [pc, #12]	; (800e7ec <vTaskInternalSetTimeOutState+0x10>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7e2:	4b03      	ldr	r3, [pc, #12]	; (800e7f0 <vTaskInternalSetTimeOutState+0x14>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	6043      	str	r3, [r0, #4]
}
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	20007b30 	.word	0x20007b30
 800e7f0:	20007b74 	.word	0x20007b74

0800e7f4 <xTaskCheckForTimeOut>:
{
 800e7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7f6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	b950      	cbnz	r0, 800e812 <xTaskCheckForTimeOut+0x1e>
 800e7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e800:	b672      	cpsid	i
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	b662      	cpsie	i
 800e810:	e7fe      	b.n	800e810 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800e812:	b951      	cbnz	r1, 800e82a <xTaskCheckForTimeOut+0x36>
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	b672      	cpsid	i
 800e81a:	f383 8811 	msr	BASEPRI, r3
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f3bf 8f4f 	dsb	sy
 800e826:	b662      	cpsie	i
 800e828:	e7fe      	b.n	800e828 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800e82a:	f000 fb9b 	bl	800ef64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e82e:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e830:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800e832:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e834:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e836:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800e838:	1c5e      	adds	r6, r3, #1
 800e83a:	d00d      	beq.n	800e858 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e83c:	4e0c      	ldr	r6, [pc, #48]	; (800e870 <xTaskCheckForTimeOut+0x7c>)
 800e83e:	682f      	ldr	r7, [r5, #0]
 800e840:	6836      	ldr	r6, [r6, #0]
 800e842:	42b7      	cmp	r7, r6
 800e844:	d001      	beq.n	800e84a <xTaskCheckForTimeOut+0x56>
 800e846:	4288      	cmp	r0, r1
 800e848:	d90d      	bls.n	800e866 <xTaskCheckForTimeOut+0x72>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d909      	bls.n	800e862 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 800e84e:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e850:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800e852:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e854:	f7ff ffc2 	bl	800e7dc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800e858:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e85a:	f000 fba9 	bl	800efb0 <vPortExitCritical>
}
 800e85e:	4620      	mov	r0, r4
 800e860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e866:	2401      	movs	r4, #1
 800e868:	e7f7      	b.n	800e85a <xTaskCheckForTimeOut+0x66>
 800e86a:	bf00      	nop
 800e86c:	20007b74 	.word	0x20007b74
 800e870:	20007b30 	.word	0x20007b30

0800e874 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e874:	4b01      	ldr	r3, [pc, #4]	; (800e87c <vTaskMissedYield+0x8>)
 800e876:	2201      	movs	r2, #1
 800e878:	601a      	str	r2, [r3, #0]
}
 800e87a:	4770      	bx	lr
 800e87c:	20007b78 	.word	0x20007b78

0800e880 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800e880:	4b01      	ldr	r3, [pc, #4]	; (800e888 <xTaskGetCurrentTaskHandle+0x8>)
 800e882:	6818      	ldr	r0, [r3, #0]
	}
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	2000767c 	.word	0x2000767c

0800e88c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e88c:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <xTaskGetSchedulerState+0x18>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	b133      	cbz	r3, 800e8a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <xTaskGetSchedulerState+0x1c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800e898:	bf0c      	ite	eq
 800e89a:	2002      	moveq	r0, #2
 800e89c:	2000      	movne	r0, #0
 800e89e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e8a0:	2001      	movs	r0, #1
	}
 800e8a2:	4770      	bx	lr
 800e8a4:	20007b48 	.word	0x20007b48
 800e8a8:	20007af8 	.word	0x20007af8

0800e8ac <xTaskPriorityInherit>:
	{
 800e8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	b340      	cbz	r0, 800e904 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e8b2:	4a1b      	ldr	r2, [pc, #108]	; (800e920 <xTaskPriorityInherit+0x74>)
 800e8b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e8b6:	6811      	ldr	r1, [r2, #0]
 800e8b8:	4616      	mov	r6, r2
 800e8ba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	d226      	bcs.n	800e90e <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8c0:	6982      	ldr	r2, [r0, #24]
 800e8c2:	2a00      	cmp	r2, #0
 800e8c4:	db04      	blt.n	800e8d0 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8c6:	6832      	ldr	r2, [r6, #0]
 800e8c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e8ca:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e8ce:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e8d0:	2214      	movs	r2, #20
 800e8d2:	4d14      	ldr	r5, [pc, #80]	; (800e924 <xTaskPriorityInherit+0x78>)
 800e8d4:	fb02 5303 	mla	r3, r2, r3, r5
 800e8d8:	6962      	ldr	r2, [r4, #20]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d113      	bne.n	800e906 <xTaskPriorityInherit+0x5a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8de:	1d27      	adds	r7, r4, #4
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	f7fe febe 	bl	800d662 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e8e6:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e8e8:	4a0f      	ldr	r2, [pc, #60]	; (800e928 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e8ec:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e8ee:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e8f0:	428b      	cmp	r3, r1
 800e8f2:	d900      	bls.n	800e8f6 <xTaskPriorityInherit+0x4a>
 800e8f4:	6013      	str	r3, [r2, #0]
 800e8f6:	2014      	movs	r0, #20
 800e8f8:	4639      	mov	r1, r7
 800e8fa:	fb00 5003 	mla	r0, r0, r3, r5
 800e8fe:	f7fe fe8d 	bl	800d61c <vListInsertEnd>
				xReturn = pdTRUE;
 800e902:	2001      	movs	r0, #1
	}
 800e904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e906:	6833      	ldr	r3, [r6, #0]
 800e908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e90a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e90c:	e7f9      	b.n	800e902 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e90e:	6813      	ldr	r3, [r2, #0]
 800e910:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800e912:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e914:	42a0      	cmp	r0, r4
 800e916:	bf2c      	ite	cs
 800e918:	2000      	movcs	r0, #0
 800e91a:	2001      	movcc	r0, #1
 800e91c:	e7f2      	b.n	800e904 <xTaskPriorityInherit+0x58>
 800e91e:	bf00      	nop
 800e920:	2000767c 	.word	0x2000767c
 800e924:	20007688 	.word	0x20007688
 800e928:	20007b00 	.word	0x20007b00

0800e92c <xTaskPriorityDisinherit>:
	{
 800e92c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800e92e:	b908      	cbnz	r0, 800e934 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800e930:	2000      	movs	r0, #0
	}
 800e932:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800e934:	4b1d      	ldr	r3, [pc, #116]	; (800e9ac <xTaskPriorityDisinherit+0x80>)
 800e936:	681c      	ldr	r4, [r3, #0]
 800e938:	4284      	cmp	r4, r0
 800e93a:	d00a      	beq.n	800e952 <xTaskPriorityDisinherit+0x26>
 800e93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e940:	b672      	cpsid	i
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	b662      	cpsie	i
 800e950:	e7fe      	b.n	800e950 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800e952:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e954:	b953      	cbnz	r3, 800e96c <xTaskPriorityDisinherit+0x40>
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	b672      	cpsid	i
 800e95c:	f383 8811 	msr	BASEPRI, r3
 800e960:	f3bf 8f6f 	isb	sy
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	b662      	cpsie	i
 800e96a:	e7fe      	b.n	800e96a <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e96c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800e96e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e970:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 800e972:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e974:	4291      	cmp	r1, r2
 800e976:	d0db      	beq.n	800e930 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1d9      	bne.n	800e930 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e97c:	1d25      	adds	r5, r4, #4
 800e97e:	4628      	mov	r0, r5
 800e980:	f7fe fe6f 	bl	800d662 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e984:	6d23      	ldr	r3, [r4, #80]	; 0x50
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e986:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e98a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e98c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e98e:	4a08      	ldr	r2, [pc, #32]	; (800e9b0 <xTaskPriorityDisinherit+0x84>)
 800e990:	6811      	ldr	r1, [r2, #0]
 800e992:	428b      	cmp	r3, r1
 800e994:	d900      	bls.n	800e998 <xTaskPriorityDisinherit+0x6c>
 800e996:	6013      	str	r3, [r2, #0]
 800e998:	4a06      	ldr	r2, [pc, #24]	; (800e9b4 <xTaskPriorityDisinherit+0x88>)
 800e99a:	2014      	movs	r0, #20
 800e99c:	4629      	mov	r1, r5
 800e99e:	fb00 2003 	mla	r0, r0, r3, r2
 800e9a2:	f7fe fe3b 	bl	800d61c <vListInsertEnd>
					xReturn = pdTRUE;
 800e9a6:	2001      	movs	r0, #1
		return xReturn;
 800e9a8:	e7c3      	b.n	800e932 <xTaskPriorityDisinherit+0x6>
 800e9aa:	bf00      	nop
 800e9ac:	2000767c 	.word	0x2000767c
 800e9b0:	20007b00 	.word	0x20007b00
 800e9b4:	20007688 	.word	0x20007688

0800e9b8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800e9b8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d046      	beq.n	800ea4e <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9c0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800e9c2:	b952      	cbnz	r2, 800e9da <vTaskPriorityDisinheritAfterTimeout+0x22>
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	b672      	cpsid	i
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	b662      	cpsie	i
 800e9d8:	e7fe      	b.n	800e9d8 <vTaskPriorityDisinheritAfterTimeout+0x20>
 800e9da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e9dc:	4299      	cmp	r1, r3
 800e9de:	bf38      	it	cc
 800e9e0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e9e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e9e4:	428b      	cmp	r3, r1
 800e9e6:	d032      	beq.n	800ea4e <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e9e8:	2a01      	cmp	r2, #1
 800e9ea:	d130      	bne.n	800ea4e <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 800e9ec:	4a18      	ldr	r2, [pc, #96]	; (800ea50 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e9ee:	6812      	ldr	r2, [r2, #0]
 800e9f0:	4282      	cmp	r2, r0
 800e9f2:	d10a      	bne.n	800ea0a <vTaskPriorityDisinheritAfterTimeout+0x52>
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	b672      	cpsid	i
 800e9fa:	f383 8811 	msr	BASEPRI, r3
 800e9fe:	f3bf 8f6f 	isb	sy
 800ea02:	f3bf 8f4f 	dsb	sy
 800ea06:	b662      	cpsie	i
 800ea08:	e7fe      	b.n	800ea08 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea0a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea0c:	4d11      	ldr	r5, [pc, #68]	; (800ea54 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea0e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea10:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ea14:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea16:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea1a:	bfa8      	it	ge
 800ea1c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea20:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea22:	bfa8      	it	ge
 800ea24:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d111      	bne.n	800ea4e <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea2a:	1d06      	adds	r6, r0, #4
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f7fe fe18 	bl	800d662 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ea32:	4a09      	ldr	r2, [pc, #36]	; (800ea58 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800ea34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ea36:	6811      	ldr	r1, [r2, #0]
 800ea38:	428b      	cmp	r3, r1
 800ea3a:	d900      	bls.n	800ea3e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800ea3c:	6013      	str	r3, [r2, #0]
 800ea3e:	2014      	movs	r0, #20
 800ea40:	4631      	mov	r1, r6
 800ea42:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ea46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ea4a:	f7fe bde7 	b.w	800d61c <vListInsertEnd>
	}
 800ea4e:	bd70      	pop	{r4, r5, r6, pc}
 800ea50:	2000767c 	.word	0x2000767c
 800ea54:	20007688 	.word	0x20007688
 800ea58:	20007b00 	.word	0x20007b00

0800ea5c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ea5c:	4b04      	ldr	r3, [pc, #16]	; (800ea70 <pvTaskIncrementMutexHeldCount+0x14>)
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	b11a      	cbz	r2, 800ea6a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ea62:	6819      	ldr	r1, [r3, #0]
 800ea64:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800ea66:	3201      	adds	r2, #1
 800ea68:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 800ea6a:	6818      	ldr	r0, [r3, #0]
	}
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	2000767c 	.word	0x2000767c

0800ea74 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ea76:	4c11      	ldr	r4, [pc, #68]	; (800eabc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ea78:	f000 fa74 	bl	800ef64 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ea7c:	6825      	ldr	r5, [r4, #0]
 800ea7e:	b9bd      	cbnz	r5, 800eab0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea80:	4f0f      	ldr	r7, [pc, #60]	; (800eac0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ea82:	4e10      	ldr	r6, [pc, #64]	; (800eac4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ea84:	4638      	mov	r0, r7
 800ea86:	f7fe fdbb 	bl	800d600 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea8a:	4630      	mov	r0, r6
 800ea8c:	f7fe fdb8 	bl	800d600 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea90:	4b0d      	ldr	r3, [pc, #52]	; (800eac8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea92:	4a0e      	ldr	r2, [pc, #56]	; (800eacc <prvCheckForValidListAndQueue+0x58>)
 800ea94:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ea96:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea98:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ea9a:	4b0d      	ldr	r3, [pc, #52]	; (800ead0 <prvCheckForValidListAndQueue+0x5c>)
 800ea9c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea9e:	9500      	str	r5, [sp, #0]
 800eaa0:	4b0c      	ldr	r3, [pc, #48]	; (800ead4 <prvCheckForValidListAndQueue+0x60>)
 800eaa2:	f7fe febd 	bl	800d820 <xQueueGenericCreateStatic>
 800eaa6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eaa8:	b110      	cbz	r0, 800eab0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eaaa:	490b      	ldr	r1, [pc, #44]	; (800ead8 <prvCheckForValidListAndQueue+0x64>)
 800eaac:	f7ff fa38 	bl	800df20 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800eab0:	b003      	add	sp, #12
 800eab2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800eab6:	f000 ba7b 	b.w	800efb0 <vPortExitCritical>
 800eaba:	bf00      	nop
 800eabc:	20007ca0 	.word	0x20007ca0
 800eac0:	20007c24 	.word	0x20007c24
 800eac4:	20007c38 	.word	0x20007c38
 800eac8:	20007b7c 	.word	0x20007b7c
 800eacc:	20007b84 	.word	0x20007b84
 800ead0:	20007b80 	.word	0x20007b80
 800ead4:	20007c50 	.word	0x20007c50
 800ead8:	0801520e 	.word	0x0801520e

0800eadc <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800eadc:	4291      	cmp	r1, r2
{
 800eade:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eae0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eae2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800eae4:	d80a      	bhi.n	800eafc <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae6:	1ad2      	subs	r2, r2, r3
 800eae8:	6983      	ldr	r3, [r0, #24]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d20d      	bcs.n	800eb0a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eaee:	1d01      	adds	r1, r0, #4
 800eaf0:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaf2:	6818      	ldr	r0, [r3, #0]
 800eaf4:	f7fe fd9e 	bl	800d634 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800eaf8:	2000      	movs	r0, #0
}
 800eafa:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d201      	bcs.n	800eb04 <prvInsertTimerInActiveList+0x28>
 800eb00:	4299      	cmp	r1, r3
 800eb02:	d202      	bcs.n	800eb0a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb04:	1d01      	adds	r1, r0, #4
 800eb06:	4b03      	ldr	r3, [pc, #12]	; (800eb14 <prvInsertTimerInActiveList+0x38>)
 800eb08:	e7f3      	b.n	800eaf2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800eb0a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800eb0c:	e7f5      	b.n	800eafa <prvInsertTimerInActiveList+0x1e>
 800eb0e:	bf00      	nop
 800eb10:	20007b80 	.word	0x20007b80
 800eb14:	20007b7c 	.word	0x20007b7c

0800eb18 <xTimerCreateTimerTask>:
{
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800eb1c:	f7ff ffaa 	bl	800ea74 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800eb20:	4b13      	ldr	r3, [pc, #76]	; (800eb70 <xTimerCreateTimerTask+0x58>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	b1b3      	cbz	r3, 800eb54 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eb26:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb28:	aa07      	add	r2, sp, #28
 800eb2a:	a906      	add	r1, sp, #24
 800eb2c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eb2e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb32:	f7fe fd59 	bl	800d5e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eb36:	9b05      	ldr	r3, [sp, #20]
 800eb38:	9a07      	ldr	r2, [sp, #28]
 800eb3a:	9302      	str	r3, [sp, #8]
 800eb3c:	9b06      	ldr	r3, [sp, #24]
 800eb3e:	490d      	ldr	r1, [pc, #52]	; (800eb74 <xTimerCreateTimerTask+0x5c>)
 800eb40:	9301      	str	r3, [sp, #4]
 800eb42:	2302      	movs	r3, #2
 800eb44:	480c      	ldr	r0, [pc, #48]	; (800eb78 <xTimerCreateTimerTask+0x60>)
 800eb46:	9300      	str	r3, [sp, #0]
 800eb48:	4623      	mov	r3, r4
 800eb4a:	f7ff fb85 	bl	800e258 <xTaskCreateStatic>
 800eb4e:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <xTimerCreateTimerTask+0x64>)
 800eb50:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800eb52:	b950      	cbnz	r0, 800eb6a <xTimerCreateTimerTask+0x52>
 800eb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb58:	b672      	cpsid	i
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	b662      	cpsie	i
 800eb68:	e7fe      	b.n	800eb68 <xTimerCreateTimerTask+0x50>
}
 800eb6a:	2001      	movs	r0, #1
 800eb6c:	b008      	add	sp, #32
 800eb6e:	bd10      	pop	{r4, pc}
 800eb70:	20007ca0 	.word	0x20007ca0
 800eb74:	08015213 	.word	0x08015213
 800eb78:	0800ec61 	.word	0x0800ec61
 800eb7c:	20007ca4 	.word	0x20007ca4

0800eb80 <xTimerGenericCommand>:
{
 800eb80:	b530      	push	{r4, r5, lr}
 800eb82:	4615      	mov	r5, r2
 800eb84:	b085      	sub	sp, #20
 800eb86:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800eb88:	4603      	mov	r3, r0
 800eb8a:	b950      	cbnz	r0, 800eba2 <xTimerGenericCommand+0x22>
 800eb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb90:	b672      	cpsid	i
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	b662      	cpsie	i
 800eba0:	e7fe      	b.n	800eba0 <xTimerGenericCommand+0x20>
	if( xTimerQueue != NULL )
 800eba2:	4c0d      	ldr	r4, [pc, #52]	; (800ebd8 <xTimerGenericCommand+0x58>)
 800eba4:	6820      	ldr	r0, [r4, #0]
 800eba6:	b178      	cbz	r0, 800ebc8 <xTimerGenericCommand+0x48>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eba8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ebaa:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ebac:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ebb0:	dc0c      	bgt.n	800ebcc <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ebb2:	f7ff fe6b 	bl	800e88c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ebb6:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ebb8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ebba:	4669      	mov	r1, sp
 800ebbc:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ebbe:	bf0c      	ite	eq
 800ebc0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ebc2:	461a      	movne	r2, r3
 800ebc4:	f7fe feae 	bl	800d924 <xQueueGenericSend>
}
 800ebc8:	b005      	add	sp, #20
 800ebca:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ebcc:	2300      	movs	r3, #0
 800ebce:	4669      	mov	r1, sp
 800ebd0:	f7fe ffa9 	bl	800db26 <xQueueGenericSendFromISR>
 800ebd4:	e7f8      	b.n	800ebc8 <xTimerGenericCommand+0x48>
 800ebd6:	bf00      	nop
 800ebd8:	20007ca0 	.word	0x20007ca0

0800ebdc <prvSwitchTimerLists>:
{
 800ebdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebe0:	4d1d      	ldr	r5, [pc, #116]	; (800ec58 <prvSwitchTimerLists+0x7c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebe2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebe6:	682b      	ldr	r3, [r5, #0]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	b932      	cbnz	r2, 800ebfa <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 800ebec:	4a1b      	ldr	r2, [pc, #108]	; (800ec5c <prvSwitchTimerLists+0x80>)
 800ebee:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ebf0:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800ebf2:	6029      	str	r1, [r5, #0]
}
 800ebf4:	b002      	add	sp, #8
 800ebf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebfa:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebfc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebfe:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec00:	1d27      	adds	r7, r4, #4
 800ec02:	4638      	mov	r0, r7
 800ec04:	f7fe fd2d 	bl	800d662 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec08:	6a23      	ldr	r3, [r4, #32]
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ec12:	075b      	lsls	r3, r3, #29
 800ec14:	d5e7      	bpl.n	800ebe6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ec16:	69a3      	ldr	r3, [r4, #24]
 800ec18:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800ec1a:	429e      	cmp	r6, r3
 800ec1c:	d206      	bcs.n	800ec2c <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec1e:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec20:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec22:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec24:	6828      	ldr	r0, [r5, #0]
 800ec26:	f7fe fd05 	bl	800d634 <vListInsert>
 800ec2a:	e7dc      	b.n	800ebe6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f8cd 8000 	str.w	r8, [sp]
 800ec32:	4632      	mov	r2, r6
 800ec34:	4620      	mov	r0, r4
 800ec36:	4619      	mov	r1, r3
 800ec38:	f7ff ffa2 	bl	800eb80 <xTimerGenericCommand>
				configASSERT( xResult );
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	d1d2      	bne.n	800ebe6 <prvSwitchTimerLists+0xa>
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	b672      	cpsid	i
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	b662      	cpsie	i
 800ec54:	e7fe      	b.n	800ec54 <prvSwitchTimerLists+0x78>
 800ec56:	bf00      	nop
 800ec58:	20007b7c 	.word	0x20007b7c
 800ec5c:	20007b80 	.word	0x20007b80

0800ec60 <prvTimerTask>:
{
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec64:	4d84      	ldr	r5, [pc, #528]	; (800ee78 <prvTimerTask+0x218>)
{
 800ec66:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800ec68:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800ee84 <prvTimerTask+0x224>
 800ec6c:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec6e:	682a      	ldr	r2, [r5, #0]
 800ec70:	6813      	ldr	r3, [r2, #0]
 800ec72:	b353      	cbz	r3, 800ecca <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec74:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec76:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec78:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 800ec7c:	f8df b208 	ldr.w	fp, [pc, #520]	; 800ee88 <prvTimerTask+0x228>
	vTaskSuspendAll();
 800ec80:	f7ff fb9e 	bl	800e3c0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800ec84:	f7ff fba4 	bl	800e3d0 <xTaskGetTickCount>
 800ec88:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800ec8a:	f8db 3000 	ldr.w	r3, [fp]
 800ec8e:	465e      	mov	r6, fp
 800ec90:	4298      	cmp	r0, r3
 800ec92:	d31d      	bcc.n	800ecd0 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800ec94:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec98:	b32c      	cbz	r4, 800ece6 <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec9a:	4b78      	ldr	r3, [pc, #480]	; (800ee7c <prvTimerTask+0x21c>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	fab2 f282 	clz	r2, r2
 800eca4:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eca6:	4b76      	ldr	r3, [pc, #472]	; (800ee80 <prvTimerTask+0x220>)
 800eca8:	eba9 010a 	sub.w	r1, r9, sl
 800ecac:	6818      	ldr	r0, [r3, #0]
 800ecae:	f7ff f949 	bl	800df44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ecb2:	f7ff fc25 	bl	800e500 <xTaskResumeAll>
 800ecb6:	b988      	cbnz	r0, 800ecdc <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 800ecb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ecbc:	f8c8 3000 	str.w	r3, [r8]
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	e008      	b.n	800ecdc <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecca:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 800eccc:	4699      	mov	r9, r3
 800ecce:	e7d5      	b.n	800ec7c <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 800ecd0:	f7ff ff84 	bl	800ebdc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800ecd4:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 800ecd8:	f7ff fc12 	bl	800e500 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecdc:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800ee80 <prvTimerTask+0x220>
 800ece0:	f04f 0a00 	mov.w	sl, #0
 800ece4:	e083      	b.n	800edee <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ece6:	4581      	cmp	r9, r0
 800ece8:	d832      	bhi.n	800ed50 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 800ecea:	f7ff fc09 	bl	800e500 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecf6:	f10b 0004 	add.w	r0, fp, #4
 800ecfa:	f7fe fcb2 	bl	800d662 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecfe:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 800ed02:	0758      	lsls	r0, r3, #29
 800ed04:	d51b      	bpl.n	800ed3e <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ed06:	f8db 1018 	ldr.w	r1, [fp, #24]
 800ed0a:	464b      	mov	r3, r9
 800ed0c:	4652      	mov	r2, sl
 800ed0e:	4658      	mov	r0, fp
 800ed10:	4449      	add	r1, r9
 800ed12:	f7ff fee3 	bl	800eadc <prvInsertTimerInActiveList>
 800ed16:	b1b0      	cbz	r0, 800ed46 <prvTimerTask+0xe6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed18:	9400      	str	r4, [sp, #0]
 800ed1a:	4623      	mov	r3, r4
 800ed1c:	464a      	mov	r2, r9
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4658      	mov	r0, fp
 800ed22:	f7ff ff2d 	bl	800eb80 <xTimerGenericCommand>
			configASSERT( xResult );
 800ed26:	b970      	cbnz	r0, 800ed46 <prvTimerTask+0xe6>
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	b672      	cpsid	i
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	b662      	cpsie	i
 800ed3c:	e7fe      	b.n	800ed3c <prvTimerTask+0xdc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed3e:	f023 0301 	bic.w	r3, r3, #1
 800ed42:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed46:	f8db 3020 	ldr.w	r3, [fp, #32]
 800ed4a:	4658      	mov	r0, fp
 800ed4c:	4798      	blx	r3
 800ed4e:	e7c5      	b.n	800ecdc <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ed50:	4622      	mov	r2, r4
 800ed52:	e7a8      	b.n	800eca6 <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed58:	465a      	mov	r2, fp
 800ed5a:	69a1      	ldr	r1, [r4, #24]
 800ed5c:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed5e:	f043 0301 	orr.w	r3, r3, #1
 800ed62:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed66:	9b03      	ldr	r3, [sp, #12]
 800ed68:	4419      	add	r1, r3
 800ed6a:	f7ff feb7 	bl	800eadc <prvInsertTimerInActiveList>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d03d      	beq.n	800edee <prvTimerTask+0x18e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed72:	6a23      	ldr	r3, [r4, #32]
 800ed74:	4620      	mov	r0, r4
 800ed76:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed78:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ed7c:	0759      	lsls	r1, r3, #29
 800ed7e:	d536      	bpl.n	800edee <prvTimerTask+0x18e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed80:	69a2      	ldr	r2, [r4, #24]
 800ed82:	2300      	movs	r3, #0
 800ed84:	9903      	ldr	r1, [sp, #12]
 800ed86:	4620      	mov	r0, r4
 800ed88:	f8cd a000 	str.w	sl, [sp]
 800ed8c:	440a      	add	r2, r1
 800ed8e:	4619      	mov	r1, r3
 800ed90:	f7ff fef6 	bl	800eb80 <xTimerGenericCommand>
							configASSERT( xResult );
 800ed94:	bb58      	cbnz	r0, 800edee <prvTimerTask+0x18e>
 800ed96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9a:	b672      	cpsid	i
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	b662      	cpsie	i
 800edaa:	e7fe      	b.n	800edaa <prvTimerTask+0x14a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edb0:	f023 0301 	bic.w	r3, r3, #1
 800edb4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800edb8:	e019      	b.n	800edee <prvTimerTask+0x18e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edbe:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edc0:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edc4:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edc6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edca:	b951      	cbnz	r1, 800ede2 <prvTimerTask+0x182>
 800edcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd0:	b672      	cpsid	i
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	b662      	cpsie	i
 800ede0:	e7fe      	b.n	800ede0 <prvTimerTask+0x180>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ede2:	465b      	mov	r3, fp
 800ede4:	465a      	mov	r2, fp
 800ede6:	4459      	add	r1, fp
 800ede8:	4620      	mov	r0, r4
 800edea:	f7ff fe77 	bl	800eadc <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edee:	2200      	movs	r2, #0
 800edf0:	a902      	add	r1, sp, #8
 800edf2:	f8d9 0000 	ldr.w	r0, [r9]
 800edf6:	f7fe feff 	bl	800dbf8 <xQueueReceive>
 800edfa:	2800      	cmp	r0, #0
 800edfc:	f43f af37 	beq.w	800ec6e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ee00:	9b02      	ldr	r3, [sp, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	da03      	bge.n	800ee0e <prvTimerTask+0x1ae>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee06:	9b03      	ldr	r3, [sp, #12]
 800ee08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee0c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee0e:	9b02      	ldr	r3, [sp, #8]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	dbec      	blt.n	800edee <prvTimerTask+0x18e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee14:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee16:	6963      	ldr	r3, [r4, #20]
 800ee18:	b113      	cbz	r3, 800ee20 <prvTimerTask+0x1c0>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee1a:	1d20      	adds	r0, r4, #4
 800ee1c:	f7fe fc21 	bl	800d662 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800ee20:	f7ff fad6 	bl	800e3d0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800ee24:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800ee26:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800ee28:	4298      	cmp	r0, r3
 800ee2a:	d201      	bcs.n	800ee30 <prvTimerTask+0x1d0>
		prvSwitchTimerLists();
 800ee2c:	f7ff fed6 	bl	800ebdc <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 800ee30:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800ee32:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 800ee36:	2b09      	cmp	r3, #9
 800ee38:	d8d9      	bhi.n	800edee <prvTimerTask+0x18e>
 800ee3a:	a201      	add	r2, pc, #4	; (adr r2, 800ee40 <prvTimerTask+0x1e0>)
 800ee3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee40:	0800ed55 	.word	0x0800ed55
 800ee44:	0800ed55 	.word	0x0800ed55
 800ee48:	0800ed55 	.word	0x0800ed55
 800ee4c:	0800edad 	.word	0x0800edad
 800ee50:	0800edbb 	.word	0x0800edbb
 800ee54:	0800ee69 	.word	0x0800ee69
 800ee58:	0800ed55 	.word	0x0800ed55
 800ee5c:	0800ed55 	.word	0x0800ed55
 800ee60:	0800edad 	.word	0x0800edad
 800ee64:	0800edbb 	.word	0x0800edbb
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee68:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ee6c:	079a      	lsls	r2, r3, #30
 800ee6e:	d49f      	bmi.n	800edb0 <prvTimerTask+0x150>
							vPortFree( pxTimer );
 800ee70:	4620      	mov	r0, r4
 800ee72:	f000 fa65 	bl	800f340 <vPortFree>
 800ee76:	e7ba      	b.n	800edee <prvTimerTask+0x18e>
 800ee78:	20007b7c 	.word	0x20007b7c
 800ee7c:	20007b80 	.word	0x20007b80
 800ee80:	20007ca0 	.word	0x20007ca0
 800ee84:	e000ed04 	.word	0xe000ed04
 800ee88:	20007c4c 	.word	0x20007c4c

0800ee8c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800ee8c:	2300      	movs	r3, #0
{
 800ee8e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800ee90:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee92:	4b0f      	ldr	r3, [pc, #60]	; (800eed0 <prvTaskExitError+0x44>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	3301      	adds	r3, #1
 800ee98:	d00a      	beq.n	800eeb0 <prvTaskExitError+0x24>
 800ee9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9e:	b672      	cpsid	i
 800eea0:	f383 8811 	msr	BASEPRI, r3
 800eea4:	f3bf 8f6f 	isb	sy
 800eea8:	f3bf 8f4f 	dsb	sy
 800eeac:	b662      	cpsie	i
 800eeae:	e7fe      	b.n	800eeae <prvTaskExitError+0x22>
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	b672      	cpsid	i
 800eeb6:	f383 8811 	msr	BASEPRI, r3
 800eeba:	f3bf 8f6f 	isb	sy
 800eebe:	f3bf 8f4f 	dsb	sy
 800eec2:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eec4:	9b01      	ldr	r3, [sp, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d0fc      	beq.n	800eec4 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eeca:	b002      	add	sp, #8
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	20002ba8 	.word	0x20002ba8

0800eed4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eed4:	4808      	ldr	r0, [pc, #32]	; (800eef8 <prvPortStartFirstTask+0x24>)
 800eed6:	6800      	ldr	r0, [r0, #0]
 800eed8:	6800      	ldr	r0, [r0, #0]
 800eeda:	f380 8808 	msr	MSP, r0
 800eede:	f04f 0000 	mov.w	r0, #0
 800eee2:	f380 8814 	msr	CONTROL, r0
 800eee6:	b662      	cpsie	i
 800eee8:	b661      	cpsie	f
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	df00      	svc	0
 800eef4:	bf00      	nop
 800eef6:	0000      	.short	0x0000
 800eef8:	e000ed08 	.word	0xe000ed08

0800eefc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eefc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef0c <vPortEnableVFP+0x10>
 800ef00:	6801      	ldr	r1, [r0, #0]
 800ef02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef06:	6001      	str	r1, [r0, #0]
 800ef08:	4770      	bx	lr
 800ef0a:	0000      	.short	0x0000
 800ef0c:	e000ed88 	.word	0xe000ed88

0800ef10 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef14:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef18:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800ef1c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ef1e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef20:	4b03      	ldr	r3, [pc, #12]	; (800ef30 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef22:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef24:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef26:	f06f 0302 	mvn.w	r3, #2
 800ef2a:	6203      	str	r3, [r0, #32]
}
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	0800ee8d 	.word	0x0800ee8d
	...

0800ef40 <SVC_Handler>:
	__asm volatile (
 800ef40:	4b07      	ldr	r3, [pc, #28]	; (800ef60 <pxCurrentTCBConst2>)
 800ef42:	6819      	ldr	r1, [r3, #0]
 800ef44:	6808      	ldr	r0, [r1, #0]
 800ef46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4a:	f380 8809 	msr	PSP, r0
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f04f 0000 	mov.w	r0, #0
 800ef56:	f380 8811 	msr	BASEPRI, r0
 800ef5a:	4770      	bx	lr
 800ef5c:	f3af 8000 	nop.w

0800ef60 <pxCurrentTCBConst2>:
 800ef60:	2000767c 	.word	0x2000767c

0800ef64 <vPortEnterCritical>:
 800ef64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef68:	b672      	cpsid	i
 800ef6a:	f383 8811 	msr	BASEPRI, r3
 800ef6e:	f3bf 8f6f 	isb	sy
 800ef72:	f3bf 8f4f 	dsb	sy
 800ef76:	b662      	cpsie	i
	uxCriticalNesting++;
 800ef78:	4a0b      	ldr	r2, [pc, #44]	; (800efa8 <vPortEnterCritical+0x44>)
 800ef7a:	6813      	ldr	r3, [r2, #0]
 800ef7c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ef7e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ef80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ef82:	d10f      	bne.n	800efa4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef84:	4b09      	ldr	r3, [pc, #36]	; (800efac <vPortEnterCritical+0x48>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ef8c:	d00a      	beq.n	800efa4 <vPortEnterCritical+0x40>
 800ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef92:	b672      	cpsid	i
 800ef94:	f383 8811 	msr	BASEPRI, r3
 800ef98:	f3bf 8f6f 	isb	sy
 800ef9c:	f3bf 8f4f 	dsb	sy
 800efa0:	b662      	cpsie	i
 800efa2:	e7fe      	b.n	800efa2 <vPortEnterCritical+0x3e>
}
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	20002ba8 	.word	0x20002ba8
 800efac:	e000ed04 	.word	0xe000ed04

0800efb0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800efb0:	4a09      	ldr	r2, [pc, #36]	; (800efd8 <vPortExitCritical+0x28>)
 800efb2:	6813      	ldr	r3, [r2, #0]
 800efb4:	b953      	cbnz	r3, 800efcc <vPortExitCritical+0x1c>
 800efb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efba:	b672      	cpsid	i
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	b662      	cpsie	i
 800efca:	e7fe      	b.n	800efca <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800efcc:	3b01      	subs	r3, #1
 800efce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800efd0:	b90b      	cbnz	r3, 800efd6 <vPortExitCritical+0x26>
	__asm volatile
 800efd2:	f383 8811 	msr	BASEPRI, r3
}
 800efd6:	4770      	bx	lr
 800efd8:	20002ba8 	.word	0x20002ba8
 800efdc:	00000000 	.word	0x00000000

0800efe0 <PendSV_Handler>:
	__asm volatile
 800efe0:	f3ef 8009 	mrs	r0, PSP
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	4b15      	ldr	r3, [pc, #84]	; (800f040 <pxCurrentTCBConst>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	f01e 0f10 	tst.w	lr, #16
 800eff0:	bf08      	it	eq
 800eff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effa:	6010      	str	r0, [r2, #0]
 800effc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f004:	b672      	cpsid	i
 800f006:	f380 8811 	msr	BASEPRI, r0
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	b662      	cpsie	i
 800f014:	f7ff fb10 	bl	800e638 <vTaskSwitchContext>
 800f018:	f04f 0000 	mov.w	r0, #0
 800f01c:	f380 8811 	msr	BASEPRI, r0
 800f020:	bc09      	pop	{r0, r3}
 800f022:	6819      	ldr	r1, [r3, #0]
 800f024:	6808      	ldr	r0, [r1, #0]
 800f026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02a:	f01e 0f10 	tst.w	lr, #16
 800f02e:	bf08      	it	eq
 800f030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f034:	f380 8809 	msr	PSP, r0
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	4770      	bx	lr
 800f03e:	bf00      	nop

0800f040 <pxCurrentTCBConst>:
 800f040:	2000767c 	.word	0x2000767c

0800f044 <xPortSysTickHandler>:
{
 800f044:	b508      	push	{r3, lr}
	__asm volatile
 800f046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04a:	b672      	cpsid	i
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800f05a:	f7ff f9bf 	bl	800e3dc <xTaskIncrementTick>
 800f05e:	b118      	cbz	r0, 800f068 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f060:	4b03      	ldr	r3, [pc, #12]	; (800f070 <xPortSysTickHandler+0x2c>)
 800f062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f066:	601a      	str	r2, [r3, #0]
	__asm volatile
 800f068:	2300      	movs	r3, #0
 800f06a:	f383 8811 	msr	BASEPRI, r3
}
 800f06e:	bd08      	pop	{r3, pc}
 800f070:	e000ed04 	.word	0xe000ed04

0800f074 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f074:	2300      	movs	r3, #0
 800f076:	4a08      	ldr	r2, [pc, #32]	; (800f098 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f078:	4908      	ldr	r1, [pc, #32]	; (800f09c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f07a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f07c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f07e:	f242 7110 	movw	r1, #10000	; 0x2710
 800f082:	4b07      	ldr	r3, [pc, #28]	; (800f0a0 <vPortSetupTimerInterrupt+0x2c>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	fbb3 f3f1 	udiv	r3, r3, r1
 800f08a:	4906      	ldr	r1, [pc, #24]	; (800f0a4 <vPortSetupTimerInterrupt+0x30>)
 800f08c:	3b01      	subs	r3, #1
 800f08e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f090:	2307      	movs	r3, #7
 800f092:	6013      	str	r3, [r2, #0]
}
 800f094:	4770      	bx	lr
 800f096:	bf00      	nop
 800f098:	e000e010 	.word	0xe000e010
 800f09c:	e000e018 	.word	0xe000e018
 800f0a0:	200003d4 	.word	0x200003d4
 800f0a4:	e000e014 	.word	0xe000e014

0800f0a8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0a8:	4b2c      	ldr	r3, [pc, #176]	; (800f15c <xPortStartScheduler+0xb4>)
{
 800f0aa:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0ac:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0ae:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0b0:	b2d2      	uxtb	r2, r2
 800f0b2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0b4:	22ff      	movs	r2, #255	; 0xff
 800f0b6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0b8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0ba:	4a29      	ldr	r2, [pc, #164]	; (800f160 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f0c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f0ca:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0cc:	2207      	movs	r2, #7
 800f0ce:	4b25      	ldr	r3, [pc, #148]	; (800f164 <xPortStartScheduler+0xbc>)
 800f0d0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f0d2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f0d6:	1e54      	subs	r4, r2, #1
 800f0d8:	0600      	lsls	r0, r0, #24
 800f0da:	d40f      	bmi.n	800f0fc <xPortStartScheduler+0x54>
 800f0dc:	b101      	cbz	r1, 800f0e0 <xPortStartScheduler+0x38>
 800f0de:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	2a03      	cmp	r2, #3
 800f0e4:	d013      	beq.n	800f10e <xPortStartScheduler+0x66>
	__asm volatile
 800f0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ea:	b672      	cpsid	i
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	b662      	cpsie	i
 800f0fa:	e7fe      	b.n	800f0fa <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f0fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f100:	2101      	movs	r1, #1
 800f102:	0052      	lsls	r2, r2, #1
 800f104:	b2d2      	uxtb	r2, r2
 800f106:	f88d 2003 	strb.w	r2, [sp, #3]
 800f10a:	4622      	mov	r2, r4
 800f10c:	e7e1      	b.n	800f0d2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f10e:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 800f110:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f112:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f116:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f118:	9b01      	ldr	r3, [sp, #4]
 800f11a:	4a10      	ldr	r2, [pc, #64]	; (800f15c <xPortStartScheduler+0xb4>)
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f120:	4b11      	ldr	r3, [pc, #68]	; (800f168 <xPortStartScheduler+0xc0>)
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800f128:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800f130:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800f132:	f7ff ff9f 	bl	800f074 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800f136:	4b0d      	ldr	r3, [pc, #52]	; (800f16c <xPortStartScheduler+0xc4>)
 800f138:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800f13a:	f7ff fedf 	bl	800eefc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f13e:	4a0c      	ldr	r2, [pc, #48]	; (800f170 <xPortStartScheduler+0xc8>)
 800f140:	6813      	ldr	r3, [r2, #0]
 800f142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f146:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800f148:	f7ff fec4 	bl	800eed4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800f14c:	f7ff fa74 	bl	800e638 <vTaskSwitchContext>
	prvTaskExitError();
 800f150:	f7ff fe9c 	bl	800ee8c <prvTaskExitError>
}
 800f154:	4620      	mov	r0, r4
 800f156:	b002      	add	sp, #8
 800f158:	bd10      	pop	{r4, pc}
 800f15a:	bf00      	nop
 800f15c:	e000e400 	.word	0xe000e400
 800f160:	20007ca8 	.word	0x20007ca8
 800f164:	20007cac 	.word	0x20007cac
 800f168:	e000ed20 	.word	0xe000ed20
 800f16c:	20002ba8 	.word	0x20002ba8
 800f170:	e000ef34 	.word	0xe000ef34

0800f174 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f174:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f178:	2b0f      	cmp	r3, #15
 800f17a:	d910      	bls.n	800f19e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f17c:	4a12      	ldr	r2, [pc, #72]	; (800f1c8 <vPortValidateInterruptPriority+0x54>)
 800f17e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f180:	4a12      	ldr	r2, [pc, #72]	; (800f1cc <vPortValidateInterruptPriority+0x58>)
 800f182:	7812      	ldrb	r2, [r2, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d90a      	bls.n	800f19e <vPortValidateInterruptPriority+0x2a>
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	b672      	cpsid	i
 800f18e:	f383 8811 	msr	BASEPRI, r3
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	b662      	cpsie	i
 800f19c:	e7fe      	b.n	800f19c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f19e:	4b0c      	ldr	r3, [pc, #48]	; (800f1d0 <vPortValidateInterruptPriority+0x5c>)
 800f1a0:	4a0c      	ldr	r2, [pc, #48]	; (800f1d4 <vPortValidateInterruptPriority+0x60>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6812      	ldr	r2, [r2, #0]
 800f1a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d90a      	bls.n	800f1c4 <vPortValidateInterruptPriority+0x50>
 800f1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b2:	b672      	cpsid	i
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	b662      	cpsie	i
 800f1c2:	e7fe      	b.n	800f1c2 <vPortValidateInterruptPriority+0x4e>
	}
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop
 800f1c8:	e000e3f0 	.word	0xe000e3f0
 800f1cc:	20007ca8 	.word	0x20007ca8
 800f1d0:	e000ed0c 	.word	0xe000ed0c
 800f1d4:	20007cac 	.word	0x20007cac

0800f1d8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1d8:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <prvInsertBlockIntoFreeList+0x40>)
{
 800f1da:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	4282      	cmp	r2, r0
 800f1e0:	d318      	bcc.n	800f214 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1e2:	685c      	ldr	r4, [r3, #4]
 800f1e4:	1919      	adds	r1, r3, r4
 800f1e6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1e8:	bf01      	itttt	eq
 800f1ea:	6841      	ldreq	r1, [r0, #4]
 800f1ec:	4618      	moveq	r0, r3
 800f1ee:	1909      	addeq	r1, r1, r4
 800f1f0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1f2:	6844      	ldr	r4, [r0, #4]
 800f1f4:	1901      	adds	r1, r0, r4
 800f1f6:	428a      	cmp	r2, r1
 800f1f8:	d107      	bne.n	800f20a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1fa:	4908      	ldr	r1, [pc, #32]	; (800f21c <prvInsertBlockIntoFreeList+0x44>)
 800f1fc:	6809      	ldr	r1, [r1, #0]
 800f1fe:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f200:	bf1f      	itttt	ne
 800f202:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f204:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f206:	1909      	addne	r1, r1, r4
 800f208:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f20a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f20c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f20e:	bf18      	it	ne
 800f210:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f212:	bd10      	pop	{r4, pc}
 800f214:	4613      	mov	r3, r2
 800f216:	e7e1      	b.n	800f1dc <prvInsertBlockIntoFreeList+0x4>
 800f218:	2000fcc0 	.word	0x2000fcc0
 800f21c:	20007cb0 	.word	0x20007cb0

0800f220 <pvPortMalloc>:
{
 800f220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f224:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800f226:	f7ff f8cb 	bl	800e3c0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f22a:	493f      	ldr	r1, [pc, #252]	; (800f328 <pvPortMalloc+0x108>)
 800f22c:	4d3f      	ldr	r5, [pc, #252]	; (800f32c <pvPortMalloc+0x10c>)
 800f22e:	680b      	ldr	r3, [r1, #0]
 800f230:	bb03      	cbnz	r3, 800f274 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 800f232:	4a3f      	ldr	r2, [pc, #252]	; (800f330 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;
 800f234:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f236:	0756      	lsls	r6, r2, #29
 800f238:	f502 4300 	add.w	r3, r2, #32768	; 0x8000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f23c:	4e3d      	ldr	r6, [pc, #244]	; (800f334 <pvPortMalloc+0x114>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f23e:	bf14      	ite	ne
 800f240:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f242:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	xStart.xBlockSize = ( size_t ) 0;
 800f246:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f248:	bf1c      	itt	ne
 800f24a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f24e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f250:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f252:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800f254:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f256:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800f25a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f25e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800f260:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f262:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f266:	4b34      	ldr	r3, [pc, #208]	; (800f338 <pvPortMalloc+0x118>)
 800f268:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f26a:	4b34      	ldr	r3, [pc, #208]	; (800f33c <pvPortMalloc+0x11c>)
 800f26c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f26e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f272:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f274:	682f      	ldr	r7, [r5, #0]
 800f276:	4227      	tst	r7, r4
 800f278:	d151      	bne.n	800f31e <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 800f27a:	2c00      	cmp	r4, #0
 800f27c:	d040      	beq.n	800f300 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 800f27e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f282:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f284:	bf1c      	itt	ne
 800f286:	f023 0307 	bicne.w	r3, r3, #7
 800f28a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d046      	beq.n	800f31e <pvPortMalloc+0xfe>
 800f290:	4a2a      	ldr	r2, [pc, #168]	; (800f33c <pvPortMalloc+0x11c>)
 800f292:	6816      	ldr	r6, [r2, #0]
 800f294:	4690      	mov	r8, r2
 800f296:	429e      	cmp	r6, r3
 800f298:	d341      	bcc.n	800f31e <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 800f29a:	4a26      	ldr	r2, [pc, #152]	; (800f334 <pvPortMalloc+0x114>)
 800f29c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f29e:	6868      	ldr	r0, [r5, #4]
 800f2a0:	4298      	cmp	r0, r3
 800f2a2:	d201      	bcs.n	800f2a8 <pvPortMalloc+0x88>
 800f2a4:	682c      	ldr	r4, [r5, #0]
 800f2a6:	b9b4      	cbnz	r4, 800f2d6 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 800f2a8:	6809      	ldr	r1, [r1, #0]
 800f2aa:	42a9      	cmp	r1, r5
 800f2ac:	d037      	beq.n	800f31e <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f2ae:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2b0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f2b2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f2b4:	1ac2      	subs	r2, r0, r3
 800f2b6:	2a10      	cmp	r2, #16
 800f2b8:	d914      	bls.n	800f2e4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f2ba:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2bc:	0741      	lsls	r1, r0, #29
 800f2be:	d00d      	beq.n	800f2dc <pvPortMalloc+0xbc>
 800f2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c4:	b672      	cpsid	i
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	b662      	cpsie	i
 800f2d4:	e7fe      	b.n	800f2d4 <pvPortMalloc+0xb4>
 800f2d6:	462a      	mov	r2, r5
 800f2d8:	4625      	mov	r5, r4
 800f2da:	e7e0      	b.n	800f29e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f2dc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f2de:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f2e0:	f7ff ff7a 	bl	800f1d8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2e4:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2e6:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2e8:	4913      	ldr	r1, [pc, #76]	; (800f338 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2ea:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2ec:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2ee:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800f2f0:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2f2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2f6:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2f8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f2fa:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2fc:	bf38      	it	cc
 800f2fe:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 800f300:	f7ff f8fe 	bl	800e500 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f304:	0763      	lsls	r3, r4, #29
 800f306:	d00c      	beq.n	800f322 <pvPortMalloc+0x102>
 800f308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30c:	b672      	cpsid	i
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	b662      	cpsie	i
 800f31c:	e7fe      	b.n	800f31c <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 800f31e:	2400      	movs	r4, #0
 800f320:	e7ee      	b.n	800f300 <pvPortMalloc+0xe0>
}
 800f322:	4620      	mov	r0, r4
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f328:	20007cb0 	.word	0x20007cb0
 800f32c:	2000fcb4 	.word	0x2000fcb4
 800f330:	20007cb4 	.word	0x20007cb4
 800f334:	2000fcc0 	.word	0x2000fcc0
 800f338:	2000fcbc 	.word	0x2000fcbc
 800f33c:	2000fcb8 	.word	0x2000fcb8

0800f340 <vPortFree>:
{
 800f340:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f342:	4604      	mov	r4, r0
 800f344:	2800      	cmp	r0, #0
 800f346:	d032      	beq.n	800f3ae <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f348:	4a19      	ldr	r2, [pc, #100]	; (800f3b0 <vPortFree+0x70>)
 800f34a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f34e:	6812      	ldr	r2, [r2, #0]
 800f350:	4213      	tst	r3, r2
 800f352:	d10a      	bne.n	800f36a <vPortFree+0x2a>
 800f354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f358:	b672      	cpsid	i
 800f35a:	f383 8811 	msr	BASEPRI, r3
 800f35e:	f3bf 8f6f 	isb	sy
 800f362:	f3bf 8f4f 	dsb	sy
 800f366:	b662      	cpsie	i
 800f368:	e7fe      	b.n	800f368 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f36a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f36e:	b151      	cbz	r1, 800f386 <vPortFree+0x46>
 800f370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f374:	b672      	cpsid	i
 800f376:	f383 8811 	msr	BASEPRI, r3
 800f37a:	f3bf 8f6f 	isb	sy
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	b662      	cpsie	i
 800f384:	e7fe      	b.n	800f384 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f386:	ea23 0302 	bic.w	r3, r3, r2
 800f38a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f38e:	f7ff f817 	bl	800e3c0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f392:	4a08      	ldr	r2, [pc, #32]	; (800f3b4 <vPortFree+0x74>)
 800f394:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f398:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f39c:	6811      	ldr	r1, [r2, #0]
 800f39e:	440b      	add	r3, r1
 800f3a0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f3a2:	f7ff ff19 	bl	800f1d8 <prvInsertBlockIntoFreeList>
}
 800f3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800f3aa:	f7ff b8a9 	b.w	800e500 <xTaskResumeAll>
}
 800f3ae:	bd10      	pop	{r4, pc}
 800f3b0:	2000fcb4 	.word	0x2000fcb4
 800f3b4:	2000fcb8 	.word	0x2000fcb8

0800f3b8 <font_setCR>:
static unsigned char minDigitWd;
static unsigned char dualChar;

void font_setScale2(unsigned char _sx, unsigned char _sy) { sx = _sx; sy = _sy; }
void font_setScale1(unsigned char s) { sx = sy = s; }
void font_setCR(unsigned char _cr) { cr = _cr; }
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	71fb      	strb	r3, [r7, #7]
 800f3c2:	79fb      	ldrb	r3, [r7, #7]
 800f3c4:	4a03      	ldr	r2, [pc, #12]	; (800f3d4 <font_setCR+0x1c>)
 800f3c6:	6013      	str	r3, [r2, #0]
 800f3c8:	bf00      	nop
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	2000fcf4 	.word	0x2000fcf4

0800f3d8 <font_getHeight>:
void font_setSpacingY(unsigned char sp) { spacingY = sp; }
void font_setFontMinWd(unsigned char wd) { minCharWd = wd; }
void font_setCharMinWd(unsigned char wd) { minCharWd = wd; }
void font_setDigitMinWd(unsigned char wd) { minDigitWd = wd; }
int font_getWidth() { return rFont ? rFont->wd : 0; }
int font_getHeight() { return rFont ? rFont->ht : 0; }
 800f3d8:	b480      	push	{r7}
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	4b06      	ldr	r3, [pc, #24]	; (800f3f8 <font_getHeight+0x20>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d003      	beq.n	800f3ec <font_getHeight+0x14>
 800f3e4:	4b04      	ldr	r3, [pc, #16]	; (800f3f8 <font_getHeight+0x20>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	789b      	ldrb	r3, [r3, #2]
 800f3ea:	e000      	b.n	800f3ee <font_getHeight+0x16>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr
 800f3f8:	2000fcd0 	.word	0x2000fcd0

0800f3fc <font_init>:
void font_setFillRectFun(void (*fun)(int x, int y, int w, int h, int c)) { fillRectFun=fun; }

// ----------------------------------------------------------------
// fillRect function callback and screen width and height is necessary to initialize the library
void font_init(void (*rectFun)(int x, int y, int w, int h, int c), int swd, int sht)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
  fillRectFun = rectFun;
 800f408:	4a14      	ldr	r2, [pc, #80]	; (800f45c <font_init+0x60>)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	6013      	str	r3, [r2, #0]
  scrWd = swd;
 800f40e:	4a14      	ldr	r2, [pc, #80]	; (800f460 <font_init+0x64>)
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	6013      	str	r3, [r2, #0]
  scrHt = sht;
 800f414:	4a13      	ldr	r2, [pc, #76]	; (800f464 <font_init+0x68>)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6013      	str	r3, [r2, #0]
  cr = bold = dualChar = 0;
 800f41a:	4b13      	ldr	r3, [pc, #76]	; (800f468 <font_init+0x6c>)
 800f41c:	2200      	movs	r2, #0
 800f41e:	701a      	strb	r2, [r3, #0]
 800f420:	4b12      	ldr	r3, [pc, #72]	; (800f46c <font_init+0x70>)
 800f422:	2200      	movs	r2, #0
 800f424:	601a      	str	r2, [r3, #0]
 800f426:	4b11      	ldr	r3, [pc, #68]	; (800f46c <font_init+0x70>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a11      	ldr	r2, [pc, #68]	; (800f470 <font_init+0x74>)
 800f42c:	6013      	str	r3, [r2, #0]
  isNumberFun = &font_isNumber;
 800f42e:	4b11      	ldr	r3, [pc, #68]	; (800f474 <font_init+0x78>)
 800f430:	4a11      	ldr	r2, [pc, #68]	; (800f478 <font_init+0x7c>)
 800f432:	601a      	str	r2, [r3, #0]
  sx = sy = 1;
 800f434:	4b11      	ldr	r3, [pc, #68]	; (800f47c <font_init+0x80>)
 800f436:	2201      	movs	r2, #1
 800f438:	601a      	str	r2, [r3, #0]
 800f43a:	4b10      	ldr	r3, [pc, #64]	; (800f47c <font_init+0x80>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4a10      	ldr	r2, [pc, #64]	; (800f480 <font_init+0x84>)
 800f440:	6013      	str	r3, [r2, #0]
  fg = bg = 1;
 800f442:	4b10      	ldr	r3, [pc, #64]	; (800f484 <font_init+0x88>)
 800f444:	2201      	movs	r2, #1
 800f446:	601a      	str	r2, [r3, #0]
 800f448:	4b0e      	ldr	r3, [pc, #56]	; (800f484 <font_init+0x88>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a0e      	ldr	r2, [pc, #56]	; (800f488 <font_init+0x8c>)
 800f44e:	6013      	str	r3, [r2, #0]
}
 800f450:	bf00      	nop
 800f452:	3714      	adds	r7, #20
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr
 800f45c:	2000fccc 	.word	0x2000fccc
 800f460:	2000fce4 	.word	0x2000fce4
 800f464:	2000fce8 	.word	0x2000fce8
 800f468:	2000fcfa 	.word	0x2000fcfa
 800f46c:	2000fcf0 	.word	0x2000fcf0
 800f470:	2000fcf4 	.word	0x2000fcf4
 800f474:	2000fcc8 	.word	0x2000fcc8
 800f478:	080109ed 	.word	0x080109ed
 800f47c:	20002bb4 	.word	0x20002bb4
 800f480:	20002bb0 	.word	0x20002bb0
 800f484:	20002bbc 	.word	0x20002bbc
 800f488:	20002bb8 	.word	0x20002bb8

0800f48c <font_setFont>:

// ---------------------------------
void font_setFont(RRE_Font *f)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  rFont = f;
 800f494:	4a0a      	ldr	r2, [pc, #40]	; (800f4c0 <font_setFont+0x34>)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6013      	str	r3, [r2, #0]
  minCharWd = minDigitWd = 0;
 800f49a:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <font_setFont+0x38>)
 800f49c:	2200      	movs	r2, #0
 800f49e:	701a      	strb	r2, [r3, #0]
 800f4a0:	4b08      	ldr	r3, [pc, #32]	; (800f4c4 <font_setFont+0x38>)
 800f4a2:	781a      	ldrb	r2, [r3, #0]
 800f4a4:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <font_setFont+0x3c>)
 800f4a6:	701a      	strb	r2, [r3, #0]
  spacing = 1;
 800f4a8:	4b08      	ldr	r3, [pc, #32]	; (800f4cc <font_setFont+0x40>)
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	601a      	str	r2, [r3, #0]
  spacingY = 0;
 800f4ae:	4b08      	ldr	r3, [pc, #32]	; (800f4d0 <font_setFont+0x44>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]
}
 800f4b4:	bf00      	nop
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr
 800f4c0:	2000fcd0 	.word	0x2000fcd0
 800f4c4:	2000fcf9 	.word	0x2000fcf9
 800f4c8:	2000fcf8 	.word	0x2000fcf8
 800f4cc:	20002bac 	.word	0x20002bac
 800f4d0:	2000fcec 	.word	0x2000fcec

0800f4d4 <font_charWidthOptim>:
  return xmax-xmin;
}

// ----------------------------------------------------------------
int font_charWidthOptim(unsigned char c, int *_xmin)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b08f      	sub	sp, #60	; 0x3c
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	6039      	str	r1, [r7, #0]
 800f4de:	71fb      	strb	r3, [r7, #7]
  if(c<rFont->firstCh || c>rFont->lastCh) return c==' '? rFont->wd/2 : 0;
 800f4e0:	4b7e      	ldr	r3, [pc, #504]	; (800f6dc <font_charWidthOptim+0x208>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	78db      	ldrb	r3, [r3, #3]
 800f4e6:	79fa      	ldrb	r2, [r7, #7]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d305      	bcc.n	800f4f8 <font_charWidthOptim+0x24>
 800f4ec:	4b7b      	ldr	r3, [pc, #492]	; (800f6dc <font_charWidthOptim+0x208>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	791b      	ldrb	r3, [r3, #4]
 800f4f2:	79fa      	ldrb	r2, [r7, #7]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d90a      	bls.n	800f50e <font_charWidthOptim+0x3a>
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	2b20      	cmp	r3, #32
 800f4fc:	d105      	bne.n	800f50a <font_charWidthOptim+0x36>
 800f4fe:	4b77      	ldr	r3, [pc, #476]	; (800f6dc <font_charWidthOptim+0x208>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	785b      	ldrb	r3, [r3, #1]
 800f504:	085b      	lsrs	r3, r3, #1
 800f506:	b2db      	uxtb	r3, r3
 800f508:	e0e2      	b.n	800f6d0 <font_charWidthOptim+0x1fc>
 800f50a:	2300      	movs	r3, #0
 800f50c:	e0e0      	b.n	800f6d0 <font_charWidthOptim+0x1fc>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 800f50e:	4b73      	ldr	r3, [pc, #460]	; (800f6dc <font_charWidthOptim+0x208>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68da      	ldr	r2, [r3, #12]
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	4971      	ldr	r1, [pc, #452]	; (800f6dc <font_charWidthOptim+0x208>)
 800f518:	6809      	ldr	r1, [r1, #0]
 800f51a:	78c9      	ldrb	r1, [r1, #3]
 800f51c:	1a5b      	subs	r3, r3, r1
 800f51e:	005b      	lsls	r3, r3, #1
 800f520:	4413      	add	r3, r2
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	867b      	strh	r3, [r7, #50]	; 0x32
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 800f526:	4b6d      	ldr	r3, [pc, #436]	; (800f6dc <font_charWidthOptim+0x208>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	68da      	ldr	r2, [r3, #12]
 800f52c:	79fb      	ldrb	r3, [r7, #7]
 800f52e:	496b      	ldr	r1, [pc, #428]	; (800f6dc <font_charWidthOptim+0x208>)
 800f530:	6809      	ldr	r1, [r1, #0]
 800f532:	78c9      	ldrb	r1, [r1, #3]
 800f534:	1a5b      	subs	r3, r3, r1
 800f536:	3301      	adds	r3, #1
 800f538:	005b      	lsls	r3, r3, #1
 800f53a:	4413      	add	r3, r2
 800f53c:	881a      	ldrh	r2, [r3, #0]
 800f53e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f540:	1ad3      	subs	r3, r2, r3
 800f542:	863b      	strh	r3, [r7, #48]	; 0x30
  if(!recNum) return rFont->wd/2;
 800f544:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f546:	2b00      	cmp	r3, #0
 800f548:	d105      	bne.n	800f556 <font_charWidthOptim+0x82>
 800f54a:	4b64      	ldr	r3, [pc, #400]	; (800f6dc <font_charWidthOptim+0x208>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	785b      	ldrb	r3, [r3, #1]
 800f550:	085b      	lsrs	r3, r3, #1
 800f552:	b2db      	uxtb	r3, r3
 800f554:	e0bc      	b.n	800f6d0 <font_charWidthOptim+0x1fc>
  if(_xmin) *_xmin=0;
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d002      	beq.n	800f562 <font_charWidthOptim+0x8e>
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	2200      	movs	r2, #0
 800f560:	601a      	str	r2, [r3, #0]
  int chWd = rFont->wd;
 800f562:	4b5e      	ldr	r3, [pc, #376]	; (800f6dc <font_charWidthOptim+0x208>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	785b      	ldrb	r3, [r3, #1]
 800f568:	637b      	str	r3, [r7, #52]	; 0x34
  switch(rFont->type & 7) {
 800f56a:	4b5c      	ldr	r3, [pc, #368]	; (800f6dc <font_charWidthOptim+0x208>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	f003 0307 	and.w	r3, r3, #7
 800f574:	2b06      	cmp	r3, #6
 800f576:	f200 80a9 	bhi.w	800f6cc <font_charWidthOptim+0x1f8>
 800f57a:	a201      	add	r2, pc, #4	; (adr r2, 800f580 <font_charWidthOptim+0xac>)
 800f57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f580:	0800f59d 	.word	0x0800f59d
 800f584:	0800f627 	.word	0x0800f627
 800f588:	0800f64d 	.word	0x0800f64d
 800f58c:	0800f5cd 	.word	0x0800f5cd
 800f590:	0800f67f 	.word	0x0800f67f
 800f594:	0800f6a1 	.word	0x0800f6a1
 800f598:	0800f5ff 	.word	0x0800f5ff
#if ENABLE_RRE_16B==1
    case RRE_16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 800f59c:	4b4f      	ldr	r3, [pc, #316]	; (800f6dc <font_charWidthOptim+0x208>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	60fb      	str	r3, [r7, #12]
      unsigned short v = (rects[recNum-1+recIdx]);
 800f5a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f5a6:	1e5a      	subs	r2, r3, #1
 800f5a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f5aa:	4413      	add	r3, r2
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	817b      	strh	r3, [r7, #10]
      chWd = (v & 0x000f)+1+((v & 0x0f00)>>8);
 800f5b6:	897b      	ldrh	r3, [r7, #10]
 800f5b8:	f003 030f 	and.w	r3, r3, #15
 800f5bc:	1c5a      	adds	r2, r3, #1
 800f5be:	897b      	ldrh	r3, [r7, #10]
 800f5c0:	121b      	asrs	r3, r3, #8
 800f5c2:	f003 030f 	and.w	r3, r3, #15
 800f5c6:	4413      	add	r3, r2
 800f5c8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800f5ca:	e080      	b.n	800f6ce <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 800f5cc:	4b43      	ldr	r3, [pc, #268]	; (800f6dc <font_charWidthOptim+0x208>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	6899      	ldr	r1, [r3, #8]
 800f5d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f5d4:	1e5a      	subs	r2, r3, #1
 800f5d6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f5d8:	441a      	add	r2, r3
 800f5da:	4613      	mov	r3, r2
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	4413      	add	r3, r2
 800f5e0:	440b      	add	r3, r1
 800f5e2:	623b      	str	r3, [r7, #32]
      chWd = ((rects[0]) & 0x3f)+((rects[2]) & 0x3f)+1;
 800f5e4:	6a3b      	ldr	r3, [r7, #32]
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f5ec:	6a3b      	ldr	r3, [r7, #32]
 800f5ee:	3302      	adds	r3, #2
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5f6:	4413      	add	r3, r2
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800f5fc:	e067      	b.n	800f6ce <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*4;
 800f5fe:	4b37      	ldr	r3, [pc, #220]	; (800f6dc <font_charWidthOptim+0x208>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	689b      	ldr	r3, [r3, #8]
 800f604:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f606:	1e51      	subs	r1, r2, #1
 800f608:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800f60a:	440a      	add	r2, r1
 800f60c:	0092      	lsls	r2, r2, #2
 800f60e:	4413      	add	r3, r2
 800f610:	62fb      	str	r3, [r7, #44]	; 0x2c
      chWd = (rects[0])+(rects[2])+1;
 800f612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61a:	3302      	adds	r3, #2
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	4413      	add	r3, r2
 800f620:	3301      	adds	r3, #1
 800f622:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800f624:	e053      	b.n	800f6ce <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 800f626:	4b2d      	ldr	r3, [pc, #180]	; (800f6dc <font_charWidthOptim+0x208>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	617b      	str	r3, [r7, #20]
      unsigned short v = (rects[recNum-1+recIdx]);
 800f62e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f630:	1e5a      	subs	r2, r3, #1
 800f632:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f634:	4413      	add	r3, r2
 800f636:	005b      	lsls	r3, r3, #1
 800f638:	697a      	ldr	r2, [r7, #20]
 800f63a:	4413      	add	r3, r2
 800f63c:	881b      	ldrh	r3, [r3, #0]
 800f63e:	827b      	strh	r3, [r7, #18]
      chWd = (v & 0x3f)+1;
 800f640:	8a7b      	ldrh	r3, [r7, #18]
 800f642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f646:	3301      	adds	r3, #1
 800f648:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800f64a:	e040      	b.n	800f6ce <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 800f64c:	4b23      	ldr	r3, [pc, #140]	; (800f6dc <font_charWidthOptim+0x208>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	61fb      	str	r3, [r7, #28]
      unsigned short v = (rects[recNum-1+recIdx]);
 800f654:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f656:	1e5a      	subs	r2, r3, #1
 800f658:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f65a:	4413      	add	r3, r2
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	69fa      	ldr	r2, [r7, #28]
 800f660:	4413      	add	r3, r2
 800f662:	881b      	ldrh	r3, [r3, #0]
 800f664:	837b      	strh	r3, [r7, #26]
      chWd = (v & 0x1f)+((v>>11) & 0x1f)+1;
 800f666:	8b7b      	ldrh	r3, [r7, #26]
 800f668:	f003 021f 	and.w	r2, r3, #31
 800f66c:	8b7b      	ldrh	r3, [r7, #26]
 800f66e:	0adb      	lsrs	r3, r3, #11
 800f670:	b29b      	uxth	r3, r3
 800f672:	f003 031f 	and.w	r3, r3, #31
 800f676:	4413      	add	r3, r2
 800f678:	3301      	adds	r3, #1
 800f67a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800f67c:	e027      	b.n	800f6ce <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 800f67e:	4b17      	ldr	r3, [pc, #92]	; (800f6dc <font_charWidthOptim+0x208>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6899      	ldr	r1, [r3, #8]
 800f684:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f686:	1e5a      	subs	r2, r3, #1
 800f688:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f68a:	441a      	add	r2, r3
 800f68c:	4613      	mov	r3, r2
 800f68e:	005b      	lsls	r3, r3, #1
 800f690:	4413      	add	r3, r2
 800f692:	440b      	add	r3, r1
 800f694:	627b      	str	r3, [r7, #36]	; 0x24
      chWd = (rects[0])+1;
 800f696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	3301      	adds	r3, #1
 800f69c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800f69e:	e016      	b.n	800f6ce <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 800f6a0:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <font_charWidthOptim+0x208>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6899      	ldr	r1, [r3, #8]
 800f6a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f6a8:	1e5a      	subs	r2, r3, #1
 800f6aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f6ac:	441a      	add	r2, r3
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	005b      	lsls	r3, r3, #1
 800f6b2:	4413      	add	r3, r2
 800f6b4:	440b      	add	r3, r1
 800f6b6:	62bb      	str	r3, [r7, #40]	; 0x28
      chWd = (rects[0])+(rects[2])+1;
 800f6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	461a      	mov	r2, r3
 800f6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c0:	3302      	adds	r3, #2
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800f6ca:	e000      	b.n	800f6ce <font_charWidthOptim+0x1fa>
#endif
    default: break;
 800f6cc:	bf00      	nop
  }
  return chWd;
 800f6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	373c      	adds	r7, #60	; 0x3c
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	2000fcd0 	.word	0x2000fcd0

0800f6e0 <font_charWidth>:

// ----------------------------------------------------------------
int font_charWidth(unsigned char c)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	71fb      	strb	r3, [r7, #7]
  c = convertPolish(c);
#endif
#if ENABLE_NOSORT==1
  int wd = (rFont->type & RRE_NO_SORT) ? charWidthNoSort(c,_xmin) : charWidthOptim(c,_xmin);
#else
  int wd = font_charWidthOptim(c, 0);
 800f6ea:	79fb      	ldrb	r3, [r7, #7]
 800f6ec:	2100      	movs	r1, #0
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7ff fef0 	bl	800f4d4 <font_charWidthOptim>
 800f6f4:	60f8      	str	r0, [r7, #12]
#endif
  int wdL = 0, wdR = spacing; // default spacing before and behind char
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	617b      	str	r3, [r7, #20]
 800f6fa:	4b2a      	ldr	r3, [pc, #168]	; (800f7a4 <font_charWidth+0xc4>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	613b      	str	r3, [r7, #16]
  if((*isNumberFun)(c) && minDigitWd>0) {
 800f700:	4b29      	ldr	r3, [pc, #164]	; (800f7a8 <font_charWidth+0xc8>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	79fa      	ldrb	r2, [r7, #7]
 800f706:	4610      	mov	r0, r2
 800f708:	4798      	blx	r3
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d01e      	beq.n	800f74e <font_charWidth+0x6e>
 800f710:	4b26      	ldr	r3, [pc, #152]	; (800f7ac <font_charWidth+0xcc>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d01a      	beq.n	800f74e <font_charWidth+0x6e>
    if(minDigitWd>wd) {
 800f718:	4b24      	ldr	r3, [pc, #144]	; (800f7ac <font_charWidth+0xcc>)
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	461a      	mov	r2, r3
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	4293      	cmp	r3, r2
 800f722:	da2e      	bge.n	800f782 <font_charWidth+0xa2>
      wdL = (minDigitWd-wd)/2;
 800f724:	4b21      	ldr	r3, [pc, #132]	; (800f7ac <font_charWidth+0xcc>)
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	461a      	mov	r2, r3
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	da00      	bge.n	800f734 <font_charWidth+0x54>
 800f732:	3301      	adds	r3, #1
 800f734:	105b      	asrs	r3, r3, #1
 800f736:	617b      	str	r3, [r7, #20]
      wdR += (minDigitWd-wd-wdL);
 800f738:	4b1c      	ldr	r3, [pc, #112]	; (800f7ac <font_charWidth+0xcc>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	461a      	mov	r2, r3
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	1ad2      	subs	r2, r2, r3
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	4413      	add	r3, r2
 800f74a:	613b      	str	r3, [r7, #16]
    if(minDigitWd>wd) {
 800f74c:	e019      	b.n	800f782 <font_charWidth+0xa2>
    }
  } else if(minCharWd>wd) {
 800f74e:	4b18      	ldr	r3, [pc, #96]	; (800f7b0 <font_charWidth+0xd0>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	461a      	mov	r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	4293      	cmp	r3, r2
 800f758:	da13      	bge.n	800f782 <font_charWidth+0xa2>
    wdL = (minCharWd-wd)/2;
 800f75a:	4b15      	ldr	r3, [pc, #84]	; (800f7b0 <font_charWidth+0xd0>)
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	1ad3      	subs	r3, r2, r3
 800f764:	2b00      	cmp	r3, #0
 800f766:	da00      	bge.n	800f76a <font_charWidth+0x8a>
 800f768:	3301      	adds	r3, #1
 800f76a:	105b      	asrs	r3, r3, #1
 800f76c:	617b      	str	r3, [r7, #20]
    wdR += (minCharWd-wd-wdL);
 800f76e:	4b10      	ldr	r3, [pc, #64]	; (800f7b0 <font_charWidth+0xd0>)
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	461a      	mov	r2, r3
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	1ad2      	subs	r2, r2, r3
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	1ad3      	subs	r3, r2, r3
 800f77c:	693a      	ldr	r2, [r7, #16]
 800f77e:	4413      	add	r3, r2
 800f780:	613b      	str	r3, [r7, #16]
  }
  return (wd+wdL+wdR+bold)*sx;
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	441a      	add	r2, r3
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	441a      	add	r2, r3
 800f78c:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <font_charWidth+0xd4>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	4413      	add	r3, r2
 800f792:	4a09      	ldr	r2, [pc, #36]	; (800f7b8 <font_charWidth+0xd8>)
 800f794:	6812      	ldr	r2, [r2, #0]
 800f796:	fb02 f303 	mul.w	r3, r2, r3
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3718      	adds	r7, #24
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	20002bac 	.word	0x20002bac
 800f7a8:	2000fcc8 	.word	0x2000fcc8
 800f7ac:	2000fcf9 	.word	0x2000fcf9
 800f7b0:	2000fcf8 	.word	0x2000fcf8
 800f7b4:	2000fcf0 	.word	0x2000fcf0
 800f7b8:	20002bb0 	.word	0x20002bb0

0800f7bc <font_drawChar>:

// ----------------------------------------------------------------
int font_drawChar(int x, int y, unsigned char c)
{
 800f7bc:	b5b0      	push	{r4, r5, r7, lr}
 800f7be:	b0ac      	sub	sp, #176	; 0xb0
 800f7c0:	af02      	add	r7, sp, #8
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	71fb      	strb	r3, [r7, #7]
#if CONVERT_PL_CHARS==1
  c = convertPolish(c);
#endif
  if(x>=scrWd || y>=scrHt || x+rFont->wd*sx-1<0 || y+rFont->ht*sy-1<0) return 0;
 800f7ca:	4bac      	ldr	r3, [pc, #688]	; (800fa7c <font_drawChar+0x2c0>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	da1e      	bge.n	800f812 <font_drawChar+0x56>
 800f7d4:	4baa      	ldr	r3, [pc, #680]	; (800fa80 <font_drawChar+0x2c4>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68ba      	ldr	r2, [r7, #8]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	da19      	bge.n	800f812 <font_drawChar+0x56>
 800f7de:	4ba9      	ldr	r3, [pc, #676]	; (800fa84 <font_drawChar+0x2c8>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	785b      	ldrb	r3, [r3, #1]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	4ba8      	ldr	r3, [pc, #672]	; (800fa88 <font_drawChar+0x2cc>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	fb03 f202 	mul.w	r2, r3, r2
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	3b01      	subs	r3, #1
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	db0c      	blt.n	800f812 <font_drawChar+0x56>
 800f7f8:	4ba2      	ldr	r3, [pc, #648]	; (800fa84 <font_drawChar+0x2c8>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	789b      	ldrb	r3, [r3, #2]
 800f7fe:	461a      	mov	r2, r3
 800f800:	4ba2      	ldr	r3, [pc, #648]	; (800fa8c <font_drawChar+0x2d0>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	fb03 f202 	mul.w	r2, r3, r2
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	4413      	add	r3, r2
 800f80c:	3b01      	subs	r3, #1
 800f80e:	2b00      	cmp	r3, #0
 800f810:	da02      	bge.n	800f818 <font_drawChar+0x5c>
 800f812:	2300      	movs	r3, #0
 800f814:	f001 b828 	b.w	8010868 <font_drawChar+0x10ac>
  if(c<rFont->firstCh || c>rFont->lastCh) return font_charWidth(c);
 800f818:	4b9a      	ldr	r3, [pc, #616]	; (800fa84 <font_drawChar+0x2c8>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	78db      	ldrb	r3, [r3, #3]
 800f81e:	79fa      	ldrb	r2, [r7, #7]
 800f820:	429a      	cmp	r2, r3
 800f822:	d305      	bcc.n	800f830 <font_drawChar+0x74>
 800f824:	4b97      	ldr	r3, [pc, #604]	; (800fa84 <font_drawChar+0x2c8>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	791b      	ldrb	r3, [r3, #4]
 800f82a:	79fa      	ldrb	r2, [r7, #7]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d906      	bls.n	800f83e <font_drawChar+0x82>
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff ff54 	bl	800f6e0 <font_charWidth>
 800f838:	4603      	mov	r3, r0
 800f83a:	f001 b815 	b.w	8010868 <font_drawChar+0x10ac>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 800f83e:	4b91      	ldr	r3, [pc, #580]	; (800fa84 <font_drawChar+0x2c8>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	68da      	ldr	r2, [r3, #12]
 800f844:	79fb      	ldrb	r3, [r7, #7]
 800f846:	498f      	ldr	r1, [pc, #572]	; (800fa84 <font_drawChar+0x2c8>)
 800f848:	6809      	ldr	r1, [r1, #0]
 800f84a:	78c9      	ldrb	r1, [r1, #3]
 800f84c:	1a5b      	subs	r3, r3, r1
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	4413      	add	r3, r2
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 800f858:	4b8a      	ldr	r3, [pc, #552]	; (800fa84 <font_drawChar+0x2c8>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	68da      	ldr	r2, [r3, #12]
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	4988      	ldr	r1, [pc, #544]	; (800fa84 <font_drawChar+0x2c8>)
 800f862:	6809      	ldr	r1, [r1, #0]
 800f864:	78c9      	ldrb	r1, [r1, #3]
 800f866:	1a5b      	subs	r3, r3, r1
 800f868:	3301      	adds	r3, #1
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	4413      	add	r3, r2
 800f86e:	881a      	ldrh	r2, [r3, #0]
 800f870:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if ENABLE_NOSORT==1
  int xmin, chWd = (rFont->type & RRE_NO_SORT) ? font_charWidthNoSort(c,&xmin) : font_charWidthOptim(c,&xmin);
#else
  int xmin, chWd = font_charWidthOptim(c,&xmin);
 800f87a:	f107 0210 	add.w	r2, r7, #16
 800f87e:	79fb      	ldrb	r3, [r7, #7]
 800f880:	4611      	mov	r1, r2
 800f882:	4618      	mov	r0, r3
 800f884:	f7ff fe26 	bl	800f4d4 <font_charWidthOptim>
 800f888:	65b8      	str	r0, [r7, #88]	; 0x58
#endif
  int wd=chWd, wdL = 0, wdR = spacing;
 800f88a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f88c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f890:	2300      	movs	r3, #0
 800f892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f896:	4b7e      	ldr	r3, [pc, #504]	; (800fa90 <font_drawChar+0x2d4>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if((*isNumberFun)(c) && minDigitWd>0) {
 800f89e:	4b7d      	ldr	r3, [pc, #500]	; (800fa94 <font_drawChar+0x2d8>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	79fa      	ldrb	r2, [r7, #7]
 800f8a4:	4610      	mov	r0, r2
 800f8a6:	4798      	blx	r3
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d025      	beq.n	800f8fa <font_drawChar+0x13e>
 800f8ae:	4b7a      	ldr	r3, [pc, #488]	; (800fa98 <font_drawChar+0x2dc>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d021      	beq.n	800f8fa <font_drawChar+0x13e>
    if(minDigitWd>wd) {
 800f8b6:	4b78      	ldr	r3, [pc, #480]	; (800fa98 <font_drawChar+0x2dc>)
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	da3b      	bge.n	800f93c <font_drawChar+0x180>
      wdL = (minDigitWd-wd)/2;
 800f8c4:	4b74      	ldr	r3, [pc, #464]	; (800fa98 <font_drawChar+0x2dc>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	da00      	bge.n	800f8d6 <font_drawChar+0x11a>
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	105b      	asrs	r3, r3, #1
 800f8d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      wdR += (minDigitWd-wd-wdL);
 800f8dc:	4b6e      	ldr	r3, [pc, #440]	; (800fa98 <font_drawChar+0x2dc>)
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f8e6:	1ad2      	subs	r2, r2, r3
 800f8e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f8f2:	4413      	add	r3, r2
 800f8f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(minDigitWd>wd) {
 800f8f8:	e020      	b.n	800f93c <font_drawChar+0x180>
    }
  } else if(minCharWd>wd) {
 800f8fa:	4b68      	ldr	r3, [pc, #416]	; (800fa9c <font_drawChar+0x2e0>)
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	461a      	mov	r2, r3
 800f900:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f904:	4293      	cmp	r3, r2
 800f906:	da19      	bge.n	800f93c <font_drawChar+0x180>
    wdL = (minCharWd-wd)/2;
 800f908:	4b64      	ldr	r3, [pc, #400]	; (800fa9c <font_drawChar+0x2e0>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	461a      	mov	r2, r3
 800f90e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	2b00      	cmp	r3, #0
 800f916:	da00      	bge.n	800f91a <font_drawChar+0x15e>
 800f918:	3301      	adds	r3, #1
 800f91a:	105b      	asrs	r3, r3, #1
 800f91c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    wdR += (minCharWd-wd-wdL);
 800f920:	4b5e      	ldr	r3, [pc, #376]	; (800fa9c <font_drawChar+0x2e0>)
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	461a      	mov	r2, r3
 800f926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f92a:	1ad2      	subs	r2, r2, r3
 800f92c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f936:	4413      	add	r3, r2
 800f938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  if(x+wd+wdL+wdR>scrWd) wdR = max(scrWd-x-wdL-wd, 0);
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f942:	441a      	add	r2, r3
 800f944:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f948:	441a      	add	r2, r3
 800f94a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f94e:	441a      	add	r2, r3
 800f950:	4b4a      	ldr	r3, [pc, #296]	; (800fa7c <font_drawChar+0x2c0>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	429a      	cmp	r2, r3
 800f956:	dd0d      	ble.n	800f974 <font_drawChar+0x1b8>
 800f958:	4b48      	ldr	r3, [pc, #288]	; (800fa7c <font_drawChar+0x2c0>)
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	1ad2      	subs	r2, r2, r3
 800f960:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f964:	1ad2      	subs	r2, r2, r3
 800f966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f96a:	1ad3      	subs	r3, r2, r3
 800f96c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if(x+wd+wdL+wdR>scrWd) wd  = max(scrWd-x-wdL, 0);
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f97a:	441a      	add	r2, r3
 800f97c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f980:	441a      	add	r2, r3
 800f982:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f986:	441a      	add	r2, r3
 800f988:	4b3c      	ldr	r3, [pc, #240]	; (800fa7c <font_drawChar+0x2c0>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	dd0a      	ble.n	800f9a6 <font_drawChar+0x1ea>
 800f990:	4b3a      	ldr	r3, [pc, #232]	; (800fa7c <font_drawChar+0x2c0>)
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	1ad2      	subs	r2, r2, r3
 800f998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f9a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if(x+wd+wdL+wdR>scrWd) wdL = max(scrWd-x, 0);
 800f9a6:	68fa      	ldr	r2, [r7, #12]
 800f9a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f9ac:	441a      	add	r2, r3
 800f9ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f9b2:	441a      	add	r2, r3
 800f9b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f9b8:	441a      	add	r2, r3
 800f9ba:	4b30      	ldr	r3, [pc, #192]	; (800fa7c <font_drawChar+0x2c0>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	dd07      	ble.n	800f9d2 <font_drawChar+0x216>
 800f9c2:	4b2e      	ldr	r3, [pc, #184]	; (800fa7c <font_drawChar+0x2c0>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f9ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  wd+=wdR+wdL;
 800f9d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f9d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f9da:	4413      	add	r3, r2
 800f9dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f9e0:	4413      	add	r3, r2
 800f9e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int type=rFont->type & 7;
 800f9e6:	4b27      	ldr	r3, [pc, #156]	; (800fa84 <font_drawChar+0x2c8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	f003 0307 	and.w	r3, r3, #7
 800f9f0:	657b      	str	r3, [r7, #84]	; 0x54
  if(bg!=fg && (type==RRE_16B ||type==RRE_24B ||type==RRE_32B || !recNum)) (*fillRectFun)(x, y, (wd+bold)*sx, rFont->ht*sy, bg);
 800f9f2:	4b2b      	ldr	r3, [pc, #172]	; (800faa0 <font_drawChar+0x2e4>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	4b2b      	ldr	r3, [pc, #172]	; (800faa4 <font_drawChar+0x2e8>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d026      	beq.n	800fa4c <font_drawChar+0x290>
 800f9fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d009      	beq.n	800fa18 <font_drawChar+0x25c>
 800fa04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	d006      	beq.n	800fa18 <font_drawChar+0x25c>
 800fa0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa0c:	2b06      	cmp	r3, #6
 800fa0e:	d003      	beq.n	800fa18 <font_drawChar+0x25c>
 800fa10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d119      	bne.n	800fa4c <font_drawChar+0x290>
 800fa18:	4b23      	ldr	r3, [pc, #140]	; (800faa8 <font_drawChar+0x2ec>)
 800fa1a:	681c      	ldr	r4, [r3, #0]
 800fa1c:	4b23      	ldr	r3, [pc, #140]	; (800faac <font_drawChar+0x2f0>)
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa24:	4413      	add	r3, r2
 800fa26:	4a18      	ldr	r2, [pc, #96]	; (800fa88 <font_drawChar+0x2cc>)
 800fa28:	6812      	ldr	r2, [r2, #0]
 800fa2a:	fb02 f203 	mul.w	r2, r2, r3
 800fa2e:	4b15      	ldr	r3, [pc, #84]	; (800fa84 <font_drawChar+0x2c8>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	789b      	ldrb	r3, [r3, #2]
 800fa34:	4619      	mov	r1, r3
 800fa36:	4b15      	ldr	r3, [pc, #84]	; (800fa8c <font_drawChar+0x2d0>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	fb03 f101 	mul.w	r1, r3, r1
 800fa3e:	4b18      	ldr	r3, [pc, #96]	; (800faa0 <font_drawChar+0x2e4>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	460b      	mov	r3, r1
 800fa46:	68b9      	ldr	r1, [r7, #8]
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	47a0      	blx	r4
  x+=wdL*sx;
 800fa4c:	4b0e      	ldr	r3, [pc, #56]	; (800fa88 <font_drawChar+0x2cc>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fa54:	fb02 f303 	mul.w	r3, r2, r3
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	60fb      	str	r3, [r7, #12]
  if(!recNum) return (wd+bold)*sx;
 800fa5e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d124      	bne.n	800fab0 <font_drawChar+0x2f4>
 800fa66:	4b11      	ldr	r3, [pc, #68]	; (800faac <font_drawChar+0x2f0>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa6e:	4413      	add	r3, r2
 800fa70:	4a05      	ldr	r2, [pc, #20]	; (800fa88 <font_drawChar+0x2cc>)
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	fb02 f303 	mul.w	r3, r2, r3
 800fa78:	f000 bef6 	b.w	8010868 <font_drawChar+0x10ac>
 800fa7c:	2000fce4 	.word	0x2000fce4
 800fa80:	2000fce8 	.word	0x2000fce8
 800fa84:	2000fcd0 	.word	0x2000fcd0
 800fa88:	20002bb0 	.word	0x20002bb0
 800fa8c:	20002bb4 	.word	0x20002bb4
 800fa90:	20002bac 	.word	0x20002bac
 800fa94:	2000fcc8 	.word	0x2000fcc8
 800fa98:	2000fcf9 	.word	0x2000fcf9
 800fa9c:	2000fcf8 	.word	0x2000fcf8
 800faa0:	20002bbc 	.word	0x20002bbc
 800faa4:	20002bb8 	.word	0x20002bb8
 800faa8:	2000fccc 	.word	0x2000fccc
 800faac:	2000fcf0 	.word	0x2000fcf0
  switch(type) {
 800fab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fab2:	2b06      	cmp	r3, #6
 800fab4:	f200 86c8 	bhi.w	8010848 <font_drawChar+0x108c>
 800fab8:	a201      	add	r2, pc, #4	; (adr r2, 800fac0 <font_drawChar+0x304>)
 800faba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fabe:	bf00      	nop
 800fac0:	0800fadd 	.word	0x0800fadd
 800fac4:	0800fd61 	.word	0x0800fd61
 800fac8:	08010099 	.word	0x08010099
 800facc:	0800fb9d 	.word	0x0800fb9d
 800fad0:	0801047d 	.word	0x0801047d
 800fad4:	08010773 	.word	0x08010773
 800fad8:	0800fc81 	.word	0x0800fc81
#if ENABLE_RRE_16B==1
    case RRE_16B:
      for(int i=0; i<recNum; i++) {
 800fadc:	2300      	movs	r3, #0
 800fade:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fae2:	e053      	b.n	800fb8c <font_drawChar+0x3d0>
        unsigned short *rects = (unsigned short*)rFont->rects;
 800fae4:	4b94      	ldr	r3, [pc, #592]	; (800fd38 <font_drawChar+0x57c>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	61bb      	str	r3, [r7, #24]
        unsigned short v = (rects[i+recIdx]);
 800faec:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800faf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800faf4:	4413      	add	r3, r2
 800faf6:	005b      	lsls	r3, r3, #1
 800faf8:	69ba      	ldr	r2, [r7, #24]
 800fafa:	4413      	add	r3, r2
 800fafc:	881b      	ldrh	r3, [r3, #0]
 800fafe:	82fb      	strh	r3, [r7, #22]
        xf = (v & 0x000f)-xmin;
 800fb00:	8afb      	ldrh	r3, [r7, #22]
 800fb02:	f003 020f 	and.w	r2, r3, #15
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	1ad3      	subs	r3, r2, r3
 800fb0a:	4a8c      	ldr	r2, [pc, #560]	; (800fd3c <font_drawChar+0x580>)
 800fb0c:	6013      	str	r3, [r2, #0]
        yf = (v & 0x00f0)>>4;
 800fb0e:	8afb      	ldrh	r3, [r7, #22]
 800fb10:	111b      	asrs	r3, r3, #4
 800fb12:	f003 030f 	and.w	r3, r3, #15
 800fb16:	4a8a      	ldr	r2, [pc, #552]	; (800fd40 <font_drawChar+0x584>)
 800fb18:	6013      	str	r3, [r2, #0]
        wf = ((v & 0x0f00)>>8)+1;
 800fb1a:	8afb      	ldrh	r3, [r7, #22]
 800fb1c:	121b      	asrs	r3, r3, #8
 800fb1e:	f003 030f 	and.w	r3, r3, #15
 800fb22:	3301      	adds	r3, #1
 800fb24:	4a87      	ldr	r2, [pc, #540]	; (800fd44 <font_drawChar+0x588>)
 800fb26:	6013      	str	r3, [r2, #0]
        hf = ((v & 0xf000)>>12)+1;
 800fb28:	8afb      	ldrh	r3, [r7, #22]
 800fb2a:	0b1b      	lsrs	r3, r3, #12
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	3301      	adds	r3, #1
 800fb30:	4a85      	ldr	r2, [pc, #532]	; (800fd48 <font_drawChar+0x58c>)
 800fb32:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 800fb34:	4b85      	ldr	r3, [pc, #532]	; (800fd4c <font_drawChar+0x590>)
 800fb36:	681c      	ldr	r4, [r3, #0]
 800fb38:	4b80      	ldr	r3, [pc, #512]	; (800fd3c <font_drawChar+0x580>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4a84      	ldr	r2, [pc, #528]	; (800fd50 <font_drawChar+0x594>)
 800fb3e:	6812      	ldr	r2, [r2, #0]
 800fb40:	fb02 f203 	mul.w	r2, r2, r3
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	18d0      	adds	r0, r2, r3
 800fb48:	4b7d      	ldr	r3, [pc, #500]	; (800fd40 <font_drawChar+0x584>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a81      	ldr	r2, [pc, #516]	; (800fd54 <font_drawChar+0x598>)
 800fb4e:	6812      	ldr	r2, [r2, #0]
 800fb50:	fb02 f203 	mul.w	r2, r2, r3
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	18d1      	adds	r1, r2, r3
 800fb58:	4b7a      	ldr	r3, [pc, #488]	; (800fd44 <font_drawChar+0x588>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a7c      	ldr	r2, [pc, #496]	; (800fd50 <font_drawChar+0x594>)
 800fb5e:	6812      	ldr	r2, [r2, #0]
 800fb60:	fb02 f203 	mul.w	r2, r2, r3
 800fb64:	4b7c      	ldr	r3, [pc, #496]	; (800fd58 <font_drawChar+0x59c>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	18d5      	adds	r5, r2, r3
 800fb6a:	4b77      	ldr	r3, [pc, #476]	; (800fd48 <font_drawChar+0x58c>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4a79      	ldr	r2, [pc, #484]	; (800fd54 <font_drawChar+0x598>)
 800fb70:	6812      	ldr	r2, [r2, #0]
 800fb72:	fb02 f203 	mul.w	r2, r2, r3
 800fb76:	4b79      	ldr	r3, [pc, #484]	; (800fd5c <font_drawChar+0x5a0>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	462a      	mov	r2, r5
 800fb80:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800fb82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fb86:	3301      	adds	r3, #1
 800fb88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fb8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800fb90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fb94:	429a      	cmp	r2, r3
 800fb96:	dba5      	blt.n	800fae4 <font_drawChar+0x328>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 800fb98:	f000 be5d 	b.w	8010856 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B:
      for(int i=0; i<recNum; i++) {
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fba2:	e065      	b.n	800fc70 <font_drawChar+0x4b4>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 800fba4:	4b64      	ldr	r3, [pc, #400]	; (800fd38 <font_drawChar+0x57c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6899      	ldr	r1, [r3, #8]
 800fbaa:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800fbae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbb2:	441a      	add	r2, r3
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	005b      	lsls	r3, r3, #1
 800fbb8:	4413      	add	r3, r2
 800fbba:	440b      	add	r3, r1
 800fbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        xf = ((rects[0]) & 0x3f)-xmin;
 800fbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	1ad3      	subs	r3, r2, r3
 800fbca:	4a5c      	ldr	r2, [pc, #368]	; (800fd3c <font_drawChar+0x580>)
 800fbcc:	6013      	str	r3, [r2, #0]
        yf = ((rects[1]) & 0x3f);
 800fbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbd8:	4a59      	ldr	r2, [pc, #356]	; (800fd40 <font_drawChar+0x584>)
 800fbda:	6013      	str	r3, [r2, #0]
        wf = ((rects[2]) & 0x3f)+1;
 800fbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbde:	3302      	adds	r3, #2
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	4a56      	ldr	r2, [pc, #344]	; (800fd44 <font_drawChar+0x588>)
 800fbea:	6013      	str	r3, [r2, #0]
        hf = 1+((((rects[0]) & 0xc0)>>6) | (((rects[1]) & 0xc0)>>4) | (((rects[2]) & 0xc0)>>2));
 800fbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	099b      	lsrs	r3, r3, #6
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	111b      	asrs	r3, r3, #4
 800fbfe:	f003 030c 	and.w	r3, r3, #12
 800fc02:	431a      	orrs	r2, r3
 800fc04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc06:	3302      	adds	r3, #2
 800fc08:	781b      	ldrb	r3, [r3, #0]
 800fc0a:	109b      	asrs	r3, r3, #2
 800fc0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fc10:	4313      	orrs	r3, r2
 800fc12:	3301      	adds	r3, #1
 800fc14:	4a4c      	ldr	r2, [pc, #304]	; (800fd48 <font_drawChar+0x58c>)
 800fc16:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 800fc18:	4b4c      	ldr	r3, [pc, #304]	; (800fd4c <font_drawChar+0x590>)
 800fc1a:	681c      	ldr	r4, [r3, #0]
 800fc1c:	4b47      	ldr	r3, [pc, #284]	; (800fd3c <font_drawChar+0x580>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a4b      	ldr	r2, [pc, #300]	; (800fd50 <font_drawChar+0x594>)
 800fc22:	6812      	ldr	r2, [r2, #0]
 800fc24:	fb02 f203 	mul.w	r2, r2, r3
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	18d0      	adds	r0, r2, r3
 800fc2c:	4b44      	ldr	r3, [pc, #272]	; (800fd40 <font_drawChar+0x584>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a48      	ldr	r2, [pc, #288]	; (800fd54 <font_drawChar+0x598>)
 800fc32:	6812      	ldr	r2, [r2, #0]
 800fc34:	fb02 f203 	mul.w	r2, r2, r3
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	18d1      	adds	r1, r2, r3
 800fc3c:	4b41      	ldr	r3, [pc, #260]	; (800fd44 <font_drawChar+0x588>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a43      	ldr	r2, [pc, #268]	; (800fd50 <font_drawChar+0x594>)
 800fc42:	6812      	ldr	r2, [r2, #0]
 800fc44:	fb02 f203 	mul.w	r2, r2, r3
 800fc48:	4b43      	ldr	r3, [pc, #268]	; (800fd58 <font_drawChar+0x59c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	18d5      	adds	r5, r2, r3
 800fc4e:	4b3e      	ldr	r3, [pc, #248]	; (800fd48 <font_drawChar+0x58c>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	4a40      	ldr	r2, [pc, #256]	; (800fd54 <font_drawChar+0x598>)
 800fc54:	6812      	ldr	r2, [r2, #0]
 800fc56:	fb02 f203 	mul.w	r2, r2, r3
 800fc5a:	4b40      	ldr	r3, [pc, #256]	; (800fd5c <font_drawChar+0x5a0>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	4613      	mov	r3, r2
 800fc62:	462a      	mov	r2, r5
 800fc64:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800fc66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc70:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800fc74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	db93      	blt.n	800fba4 <font_drawChar+0x3e8>
      }
      break;
 800fc7c:	f000 bdeb 	b.w	8010856 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B:
      for(int i=0; i<recNum; i++) {
 800fc80:	2300      	movs	r3, #0
 800fc82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fc86:	e04f      	b.n	800fd28 <font_drawChar+0x56c>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*4;
 800fc88:	4b2b      	ldr	r3, [pc, #172]	; (800fd38 <font_drawChar+0x57c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800fc92:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fc96:	440a      	add	r2, r1
 800fc98:	0092      	lsls	r2, r2, #2
 800fc9a:	4413      	add	r3, r2
 800fc9c:	653b      	str	r3, [r7, #80]	; 0x50
        xf = (rects[0])-xmin;
 800fc9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	461a      	mov	r2, r3
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	4a24      	ldr	r2, [pc, #144]	; (800fd3c <font_drawChar+0x580>)
 800fcaa:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800fcac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcae:	3301      	adds	r3, #1
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	4b22      	ldr	r3, [pc, #136]	; (800fd40 <font_drawChar+0x584>)
 800fcb6:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 800fcb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcba:	3302      	adds	r3, #2
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	4a20      	ldr	r2, [pc, #128]	; (800fd44 <font_drawChar+0x588>)
 800fcc2:	6013      	str	r3, [r2, #0]
        hf = (rects[3])+1;
 800fcc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc6:	3303      	adds	r3, #3
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	3301      	adds	r3, #1
 800fccc:	4a1e      	ldr	r2, [pc, #120]	; (800fd48 <font_drawChar+0x58c>)
 800fcce:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 800fcd0:	4b1e      	ldr	r3, [pc, #120]	; (800fd4c <font_drawChar+0x590>)
 800fcd2:	681c      	ldr	r4, [r3, #0]
 800fcd4:	4b19      	ldr	r3, [pc, #100]	; (800fd3c <font_drawChar+0x580>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a1d      	ldr	r2, [pc, #116]	; (800fd50 <font_drawChar+0x594>)
 800fcda:	6812      	ldr	r2, [r2, #0]
 800fcdc:	fb02 f203 	mul.w	r2, r2, r3
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	18d0      	adds	r0, r2, r3
 800fce4:	4b16      	ldr	r3, [pc, #88]	; (800fd40 <font_drawChar+0x584>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a1a      	ldr	r2, [pc, #104]	; (800fd54 <font_drawChar+0x598>)
 800fcea:	6812      	ldr	r2, [r2, #0]
 800fcec:	fb02 f203 	mul.w	r2, r2, r3
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	18d1      	adds	r1, r2, r3
 800fcf4:	4b13      	ldr	r3, [pc, #76]	; (800fd44 <font_drawChar+0x588>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a15      	ldr	r2, [pc, #84]	; (800fd50 <font_drawChar+0x594>)
 800fcfa:	6812      	ldr	r2, [r2, #0]
 800fcfc:	fb02 f203 	mul.w	r2, r2, r3
 800fd00:	4b15      	ldr	r3, [pc, #84]	; (800fd58 <font_drawChar+0x59c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	18d5      	adds	r5, r2, r3
 800fd06:	4b10      	ldr	r3, [pc, #64]	; (800fd48 <font_drawChar+0x58c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a12      	ldr	r2, [pc, #72]	; (800fd54 <font_drawChar+0x598>)
 800fd0c:	6812      	ldr	r2, [r2, #0]
 800fd0e:	fb02 f203 	mul.w	r2, r2, r3
 800fd12:	4b12      	ldr	r3, [pc, #72]	; (800fd5c <font_drawChar+0x5a0>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	462a      	mov	r2, r5
 800fd1c:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800fd1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd22:	3301      	adds	r3, #1
 800fd24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fd28:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800fd2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fd30:	429a      	cmp	r2, r3
 800fd32:	dba9      	blt.n	800fc88 <font_drawChar+0x4cc>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 800fd34:	f000 bd8f 	b.w	8010856 <font_drawChar+0x109a>
 800fd38:	2000fcd0 	.word	0x2000fcd0
 800fd3c:	2000fcd4 	.word	0x2000fcd4
 800fd40:	2000fcd8 	.word	0x2000fcd8
 800fd44:	2000fcdc 	.word	0x2000fcdc
 800fd48:	2000fce0 	.word	0x2000fce0
 800fd4c:	2000fccc 	.word	0x2000fccc
 800fd50:	20002bb0 	.word	0x20002bb0
 800fd54:	20002bb4 	.word	0x20002bb4
 800fd58:	2000fcf0 	.word	0x2000fcf0
 800fd5c:	20002bb8 	.word	0x20002bb8
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B:
      if(bg!=fg) {
 800fd60:	4b96      	ldr	r3, [pc, #600]	; (800ffbc <font_drawChar+0x800>)
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	4b96      	ldr	r3, [pc, #600]	; (800ffc0 <font_drawChar+0x804>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	f000 8123 	beq.w	800ffb4 <font_drawChar+0x7f8>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 800fd6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	dd1d      	ble.n	800fdb2 <font_drawChar+0x5f6>
 800fd76:	4b93      	ldr	r3, [pc, #588]	; (800ffc4 <font_drawChar+0x808>)
 800fd78:	681c      	ldr	r4, [r3, #0]
 800fd7a:	4b93      	ldr	r3, [pc, #588]	; (800ffc8 <font_drawChar+0x80c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fd82:	fb02 f303 	mul.w	r3, r2, r3
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	1ad0      	subs	r0, r2, r3
 800fd8a:	4b8f      	ldr	r3, [pc, #572]	; (800ffc8 <font_drawChar+0x80c>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fd92:	fb02 f203 	mul.w	r2, r2, r3
 800fd96:	4b8d      	ldr	r3, [pc, #564]	; (800ffcc <font_drawChar+0x810>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	789b      	ldrb	r3, [r3, #2]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	4b8c      	ldr	r3, [pc, #560]	; (800ffd0 <font_drawChar+0x814>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	fb03 f101 	mul.w	r1, r3, r1
 800fda6:	4b85      	ldr	r3, [pc, #532]	; (800ffbc <font_drawChar+0x800>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	460b      	mov	r3, r1
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects+recIdx;
 800fdb2:	4b86      	ldr	r3, [pc, #536]	; (800ffcc <font_drawChar+0x810>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	689a      	ldr	r2, [r3, #8]
 800fdb8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800fdbc:	005b      	lsls	r3, r3, #1
 800fdbe:	4413      	add	r3, r2
 800fdc0:	627b      	str	r3, [r7, #36]	; 0x24
        int idx=0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while(idx<recNum) {
 800fdc8:	e0c9      	b.n	800ff5e <font_drawChar+0x7a2>
          unsigned short v = *(rects+idx);
 800fdca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdce:	005b      	lsls	r3, r3, #1
 800fdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdd2:	4413      	add	r3, r2
 800fdd4:	881b      	ldrh	r3, [r3, #0]
 800fdd6:	847b      	strh	r3, [r7, #34]	; 0x22
          xf = (v & 0x3f)-xmin;
 800fdd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	4a7c      	ldr	r2, [pc, #496]	; (800ffd4 <font_drawChar+0x818>)
 800fde4:	6013      	str	r3, [r2, #0]
          int ybg=0,xfCur=xf;
 800fde6:	2300      	movs	r3, #0
 800fde8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fdec:	4b79      	ldr	r3, [pc, #484]	; (800ffd4 <font_drawChar+0x818>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	61fb      	str	r3, [r7, #28]
          while(xf==xfCur && idx<recNum) {
 800fdf2:	e079      	b.n	800fee8 <font_drawChar+0x72c>
            v = *(rects+idx);
 800fdf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdfc:	4413      	add	r3, r2
 800fdfe:	881b      	ldrh	r3, [r3, #0]
 800fe00:	847b      	strh	r3, [r7, #34]	; 0x22
            yf = (v>>6) & 0x1f;
 800fe02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe04:	099b      	lsrs	r3, r3, #6
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	f003 031f 	and.w	r3, r3, #31
 800fe0c:	4a72      	ldr	r2, [pc, #456]	; (800ffd8 <font_drawChar+0x81c>)
 800fe0e:	6013      	str	r3, [r2, #0]
            hf = ((v>>11) & 0x1f)+1;
 800fe10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe12:	0adb      	lsrs	r3, r3, #11
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	f003 031f 	and.w	r3, r3, #31
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	4a6f      	ldr	r2, [pc, #444]	; (800ffdc <font_drawChar+0x820>)
 800fe1e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 800fe20:	4b6d      	ldr	r3, [pc, #436]	; (800ffd8 <font_drawChar+0x81c>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	da21      	bge.n	800fe70 <font_drawChar+0x6b4>
 800fe2c:	4b65      	ldr	r3, [pc, #404]	; (800ffc4 <font_drawChar+0x808>)
 800fe2e:	681c      	ldr	r4, [r3, #0]
 800fe30:	4b65      	ldr	r3, [pc, #404]	; (800ffc8 <font_drawChar+0x80c>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	69fa      	ldr	r2, [r7, #28]
 800fe36:	fb02 f203 	mul.w	r2, r2, r3
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	18d0      	adds	r0, r2, r3
 800fe3e:	4b64      	ldr	r3, [pc, #400]	; (800ffd0 <font_drawChar+0x814>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fe46:	fb02 f203 	mul.w	r2, r2, r3
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	18d1      	adds	r1, r2, r3
 800fe4e:	4b5e      	ldr	r3, [pc, #376]	; (800ffc8 <font_drawChar+0x80c>)
 800fe50:	681d      	ldr	r5, [r3, #0]
 800fe52:	4b61      	ldr	r3, [pc, #388]	; (800ffd8 <font_drawChar+0x81c>)
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	4a5c      	ldr	r2, [pc, #368]	; (800ffd0 <font_drawChar+0x814>)
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	fb02 f203 	mul.w	r2, r2, r3
 800fe64:	4b55      	ldr	r3, [pc, #340]	; (800ffbc <font_drawChar+0x800>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	462a      	mov	r2, r5
 800fe6e:	47a0      	blx	r4
            ybg = yf+hf;
 800fe70:	4b59      	ldr	r3, [pc, #356]	; (800ffd8 <font_drawChar+0x81c>)
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	4b59      	ldr	r3, [pc, #356]	; (800ffdc <font_drawChar+0x820>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4413      	add	r3, r2
 800fe7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 800fe7e:	4b51      	ldr	r3, [pc, #324]	; (800ffc4 <font_drawChar+0x808>)
 800fe80:	681c      	ldr	r4, [r3, #0]
 800fe82:	4b51      	ldr	r3, [pc, #324]	; (800ffc8 <font_drawChar+0x80c>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	69fa      	ldr	r2, [r7, #28]
 800fe88:	fb02 f203 	mul.w	r2, r2, r3
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	18d0      	adds	r0, r2, r3
 800fe90:	4b51      	ldr	r3, [pc, #324]	; (800ffd8 <font_drawChar+0x81c>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4a4e      	ldr	r2, [pc, #312]	; (800ffd0 <font_drawChar+0x814>)
 800fe96:	6812      	ldr	r2, [r2, #0]
 800fe98:	fb02 f203 	mul.w	r2, r2, r3
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	18d1      	adds	r1, r2, r3
 800fea0:	4b4f      	ldr	r3, [pc, #316]	; (800ffe0 <font_drawChar+0x824>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	4b48      	ldr	r3, [pc, #288]	; (800ffc8 <font_drawChar+0x80c>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	18d5      	adds	r5, r2, r3
 800feaa:	4b4c      	ldr	r3, [pc, #304]	; (800ffdc <font_drawChar+0x820>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4a48      	ldr	r2, [pc, #288]	; (800ffd0 <font_drawChar+0x814>)
 800feb0:	6812      	ldr	r2, [r2, #0]
 800feb2:	fb02 f203 	mul.w	r2, r2, r3
 800feb6:	4b42      	ldr	r3, [pc, #264]	; (800ffc0 <font_drawChar+0x804>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	4613      	mov	r3, r2
 800febe:	462a      	mov	r2, r5
 800fec0:	47a0      	blx	r4
            idx++;
 800fec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fec6:	3301      	adds	r3, #1
 800fec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            v = *(rects+idx);
 800fecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fed4:	4413      	add	r3, r2
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	847b      	strh	r3, [r7, #34]	; 0x22
            xf = (v & 0x3f)-xmin;
 800feda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fedc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	4a3b      	ldr	r2, [pc, #236]	; (800ffd4 <font_drawChar+0x818>)
 800fee6:	6013      	str	r3, [r2, #0]
          while(xf==xfCur && idx<recNum) {
 800fee8:	4b3a      	ldr	r3, [pc, #232]	; (800ffd4 <font_drawChar+0x818>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	69fa      	ldr	r2, [r7, #28]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d106      	bne.n	800ff00 <font_drawChar+0x744>
 800fef2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800fef6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fefa:	429a      	cmp	r2, r3
 800fefc:	f6ff af7a 	blt.w	800fdf4 <font_drawChar+0x638>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 800ff00:	4b32      	ldr	r3, [pc, #200]	; (800ffcc <font_drawChar+0x810>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	789b      	ldrb	r3, [r3, #2]
 800ff06:	461a      	mov	r2, r3
 800ff08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	da26      	bge.n	800ff5e <font_drawChar+0x7a2>
 800ff10:	4b2c      	ldr	r3, [pc, #176]	; (800ffc4 <font_drawChar+0x808>)
 800ff12:	681c      	ldr	r4, [r3, #0]
 800ff14:	4b2c      	ldr	r3, [pc, #176]	; (800ffc8 <font_drawChar+0x80c>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	69fa      	ldr	r2, [r7, #28]
 800ff1a:	fb02 f203 	mul.w	r2, r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	18d0      	adds	r0, r2, r3
 800ff22:	4b2b      	ldr	r3, [pc, #172]	; (800ffd0 <font_drawChar+0x814>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff2a:	fb02 f203 	mul.w	r2, r2, r3
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	18d1      	adds	r1, r2, r3
 800ff32:	4b2b      	ldr	r3, [pc, #172]	; (800ffe0 <font_drawChar+0x824>)
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	4b24      	ldr	r3, [pc, #144]	; (800ffc8 <font_drawChar+0x80c>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	18d5      	adds	r5, r2, r3
 800ff3c:	4b23      	ldr	r3, [pc, #140]	; (800ffcc <font_drawChar+0x810>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	789b      	ldrb	r3, [r3, #2]
 800ff42:	461a      	mov	r2, r3
 800ff44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	4a21      	ldr	r2, [pc, #132]	; (800ffd0 <font_drawChar+0x814>)
 800ff4c:	6812      	ldr	r2, [r2, #0]
 800ff4e:	fb02 f203 	mul.w	r2, r2, r3
 800ff52:	4b1a      	ldr	r3, [pc, #104]	; (800ffbc <font_drawChar+0x800>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	4613      	mov	r3, r2
 800ff5a:	462a      	mov	r2, r5
 800ff5c:	47a0      	blx	r4
        while(idx<recNum) {
 800ff5e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ff62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff66:	429a      	cmp	r2, r3
 800ff68:	f6ff af2f 	blt.w	800fdca <font_drawChar+0x60e>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 800ff6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f340 846b 	ble.w	801084c <font_drawChar+0x1090>
 800ff76:	4b13      	ldr	r3, [pc, #76]	; (800ffc4 <font_drawChar+0x808>)
 800ff78:	681c      	ldr	r4, [r3, #0]
 800ff7a:	4b13      	ldr	r3, [pc, #76]	; (800ffc8 <font_drawChar+0x80c>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff80:	fb02 f203 	mul.w	r2, r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	18d0      	adds	r0, r2, r3
 800ff88:	4b0f      	ldr	r3, [pc, #60]	; (800ffc8 <font_drawChar+0x80c>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ff90:	fb02 f203 	mul.w	r2, r2, r3
 800ff94:	4b0d      	ldr	r3, [pc, #52]	; (800ffcc <font_drawChar+0x810>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	789b      	ldrb	r3, [r3, #2]
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	4b0c      	ldr	r3, [pc, #48]	; (800ffd0 <font_drawChar+0x814>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	fb03 f101 	mul.w	r1, r3, r1
 800ffa4:	4b05      	ldr	r3, [pc, #20]	; (800ffbc <font_drawChar+0x800>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	460b      	mov	r3, r1
 800ffac:	68b9      	ldr	r1, [r7, #8]
 800ffae:	47a0      	blx	r4
        yf = (v>>6) & 0x1f;
        hf = ((v>>11) & 0x1f)+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 800ffb0:	f000 bc4c 	b.w	801084c <font_drawChar+0x1090>
      for(int i=0; i<recNum; i++) {
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ffba:	e066      	b.n	801008a <font_drawChar+0x8ce>
 800ffbc:	20002bbc 	.word	0x20002bbc
 800ffc0:	20002bb8 	.word	0x20002bb8
 800ffc4:	2000fccc 	.word	0x2000fccc
 800ffc8:	20002bb0 	.word	0x20002bb0
 800ffcc:	2000fcd0 	.word	0x2000fcd0
 800ffd0:	20002bb4 	.word	0x20002bb4
 800ffd4:	2000fcd4 	.word	0x2000fcd4
 800ffd8:	2000fcd8 	.word	0x2000fcd8
 800ffdc:	2000fce0 	.word	0x2000fce0
 800ffe0:	2000fcf0 	.word	0x2000fcf0
        unsigned short *rects = (unsigned short*)rFont->rects;
 800ffe4:	4b64      	ldr	r3, [pc, #400]	; (8010178 <font_drawChar+0x9bc>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	62fb      	str	r3, [r7, #44]	; 0x2c
        unsigned short v = (rects[i+recIdx]);
 800ffec:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800fff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fff4:	4413      	add	r3, r2
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fffa:	4413      	add	r3, r2
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	857b      	strh	r3, [r7, #42]	; 0x2a
        xf = (v & 0x3f)-xmin;
 8010000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	4a5c      	ldr	r2, [pc, #368]	; (801017c <font_drawChar+0x9c0>)
 801000c:	6013      	str	r3, [r2, #0]
        yf = (v>>6) & 0x1f;
 801000e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010010:	099b      	lsrs	r3, r3, #6
 8010012:	b29b      	uxth	r3, r3
 8010014:	f003 031f 	and.w	r3, r3, #31
 8010018:	4a59      	ldr	r2, [pc, #356]	; (8010180 <font_drawChar+0x9c4>)
 801001a:	6013      	str	r3, [r2, #0]
        hf = ((v>>11) & 0x1f)+1;
 801001c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801001e:	0adb      	lsrs	r3, r3, #11
 8010020:	b29b      	uxth	r3, r3
 8010022:	f003 031f 	and.w	r3, r3, #31
 8010026:	3301      	adds	r3, #1
 8010028:	4a56      	ldr	r2, [pc, #344]	; (8010184 <font_drawChar+0x9c8>)
 801002a:	6013      	str	r3, [r2, #0]
        wf = 1;
 801002c:	4b56      	ldr	r3, [pc, #344]	; (8010188 <font_drawChar+0x9cc>)
 801002e:	2201      	movs	r2, #1
 8010030:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8010032:	4b56      	ldr	r3, [pc, #344]	; (801018c <font_drawChar+0x9d0>)
 8010034:	681c      	ldr	r4, [r3, #0]
 8010036:	4b51      	ldr	r3, [pc, #324]	; (801017c <font_drawChar+0x9c0>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a55      	ldr	r2, [pc, #340]	; (8010190 <font_drawChar+0x9d4>)
 801003c:	6812      	ldr	r2, [r2, #0]
 801003e:	fb02 f203 	mul.w	r2, r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	18d0      	adds	r0, r2, r3
 8010046:	4b4e      	ldr	r3, [pc, #312]	; (8010180 <font_drawChar+0x9c4>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a52      	ldr	r2, [pc, #328]	; (8010194 <font_drawChar+0x9d8>)
 801004c:	6812      	ldr	r2, [r2, #0]
 801004e:	fb02 f203 	mul.w	r2, r2, r3
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	18d1      	adds	r1, r2, r3
 8010056:	4b4c      	ldr	r3, [pc, #304]	; (8010188 <font_drawChar+0x9cc>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a4d      	ldr	r2, [pc, #308]	; (8010190 <font_drawChar+0x9d4>)
 801005c:	6812      	ldr	r2, [r2, #0]
 801005e:	fb02 f203 	mul.w	r2, r2, r3
 8010062:	4b4d      	ldr	r3, [pc, #308]	; (8010198 <font_drawChar+0x9dc>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	18d5      	adds	r5, r2, r3
 8010068:	4b46      	ldr	r3, [pc, #280]	; (8010184 <font_drawChar+0x9c8>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a49      	ldr	r2, [pc, #292]	; (8010194 <font_drawChar+0x9d8>)
 801006e:	6812      	ldr	r2, [r2, #0]
 8010070:	fb02 f203 	mul.w	r2, r2, r3
 8010074:	4b49      	ldr	r3, [pc, #292]	; (801019c <font_drawChar+0x9e0>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	4613      	mov	r3, r2
 801007c:	462a      	mov	r2, r5
 801007e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8010080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010084:	3301      	adds	r3, #1
 8010086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801008a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801008e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010092:	429a      	cmp	r2, r3
 8010094:	dba6      	blt.n	800ffe4 <font_drawChar+0x828>
      break;
 8010096:	e3d9      	b.n	801084c <font_drawChar+0x1090>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B:
      if(bg!=fg) {
 8010098:	4b41      	ldr	r3, [pc, #260]	; (80101a0 <font_drawChar+0x9e4>)
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	4b3f      	ldr	r3, [pc, #252]	; (801019c <font_drawChar+0x9e0>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	f000 817e 	beq.w	80103a2 <font_drawChar+0xbe6>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 80100a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	dd1d      	ble.n	80100ea <font_drawChar+0x92e>
 80100ae:	4b37      	ldr	r3, [pc, #220]	; (801018c <font_drawChar+0x9d0>)
 80100b0:	681c      	ldr	r4, [r3, #0]
 80100b2:	4b37      	ldr	r3, [pc, #220]	; (8010190 <font_drawChar+0x9d4>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80100ba:	fb02 f303 	mul.w	r3, r2, r3
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	1ad0      	subs	r0, r2, r3
 80100c2:	4b33      	ldr	r3, [pc, #204]	; (8010190 <font_drawChar+0x9d4>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80100ca:	fb02 f203 	mul.w	r2, r2, r3
 80100ce:	4b2a      	ldr	r3, [pc, #168]	; (8010178 <font_drawChar+0x9bc>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	789b      	ldrb	r3, [r3, #2]
 80100d4:	4619      	mov	r1, r3
 80100d6:	4b2f      	ldr	r3, [pc, #188]	; (8010194 <font_drawChar+0x9d8>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	fb03 f101 	mul.w	r1, r3, r1
 80100de:	4b30      	ldr	r3, [pc, #192]	; (80101a0 <font_drawChar+0x9e4>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	460b      	mov	r3, r1
 80100e6:	68b9      	ldr	r1, [r7, #8]
 80100e8:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects;
 80100ea:	4b23      	ldr	r3, [pc, #140]	; (8010178 <font_drawChar+0x9bc>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	633b      	str	r3, [r7, #48]	; 0x30
        int idx=0,yfCur=0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80100f8:	2300      	movs	r3, #0
 80100fa:	67fb      	str	r3, [r7, #124]	; 0x7c
        while(idx<recNum) {
 80100fc:	e127      	b.n	801034e <font_drawChar+0xb92>
          unsigned short v = *(rects+idx+recIdx);
 80100fe:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8010102:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010106:	4413      	add	r3, r2
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801010c:	4413      	add	r3, r2
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
          yf = (v>>5) & 0x3f;
 8010114:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010118:	095b      	lsrs	r3, r3, #5
 801011a:	b29b      	uxth	r3, r3
 801011c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010120:	4a17      	ldr	r2, [pc, #92]	; (8010180 <font_drawChar+0x9c4>)
 8010122:	6013      	str	r3, [r2, #0]
          if(yf-yfCur>1 /*|| (yf-yfCur>0 && yfCur==0)*/) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yf-yfCur)*sy, bg);
 8010124:	4b16      	ldr	r3, [pc, #88]	; (8010180 <font_drawChar+0x9c4>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	2b01      	cmp	r3, #1
 801012e:	dd1c      	ble.n	801016a <font_drawChar+0x9ae>
 8010130:	4b16      	ldr	r3, [pc, #88]	; (801018c <font_drawChar+0x9d0>)
 8010132:	681c      	ldr	r4, [r3, #0]
 8010134:	4b17      	ldr	r3, [pc, #92]	; (8010194 <font_drawChar+0x9d8>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801013a:	fb02 f203 	mul.w	r2, r2, r3
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	18d1      	adds	r1, r2, r3
 8010142:	4b13      	ldr	r3, [pc, #76]	; (8010190 <font_drawChar+0x9d4>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010148:	fb02 f003 	mul.w	r0, r2, r3
 801014c:	4b0c      	ldr	r3, [pc, #48]	; (8010180 <font_drawChar+0x9c4>)
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010152:	1ad3      	subs	r3, r2, r3
 8010154:	4a0f      	ldr	r2, [pc, #60]	; (8010194 <font_drawChar+0x9d8>)
 8010156:	6812      	ldr	r2, [r2, #0]
 8010158:	fb02 f203 	mul.w	r2, r2, r3
 801015c:	4b10      	ldr	r3, [pc, #64]	; (80101a0 <font_drawChar+0x9e4>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	9300      	str	r3, [sp, #0]
 8010162:	4613      	mov	r3, r2
 8010164:	4602      	mov	r2, r0
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	47a0      	blx	r4
          //Serial.print(idx); Serial.print("  "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          yfCur=yf;
 801016a:	4b05      	ldr	r3, [pc, #20]	; (8010180 <font_drawChar+0x9c4>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	67fb      	str	r3, [r7, #124]	; 0x7c
          int xbg=0;
 8010170:	2300      	movs	r3, #0
 8010172:	677b      	str	r3, [r7, #116]	; 0x74
          while(yf==yfCur && idx<recNum) {
 8010174:	e08a      	b.n	801028c <font_drawChar+0xad0>
 8010176:	bf00      	nop
 8010178:	2000fcd0 	.word	0x2000fcd0
 801017c:	2000fcd4 	.word	0x2000fcd4
 8010180:	2000fcd8 	.word	0x2000fcd8
 8010184:	2000fce0 	.word	0x2000fce0
 8010188:	2000fcdc 	.word	0x2000fcdc
 801018c:	2000fccc 	.word	0x2000fccc
 8010190:	20002bb0 	.word	0x20002bb0
 8010194:	20002bb4 	.word	0x20002bb4
 8010198:	2000fcf0 	.word	0x2000fcf0
 801019c:	20002bb8 	.word	0x20002bb8
 80101a0:	20002bbc 	.word	0x20002bbc
            xf = v & 0x1f;
 80101a4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80101a8:	f003 031f 	and.w	r3, r3, #31
 80101ac:	4a7e      	ldr	r2, [pc, #504]	; (80103a8 <font_drawChar+0xbec>)
 80101ae:	6013      	str	r3, [r2, #0]
            wf = ((v>>11) & 0x1f)+1;
 80101b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80101b4:	0adb      	lsrs	r3, r3, #11
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	f003 031f 	and.w	r3, r3, #31
 80101bc:	3301      	adds	r3, #1
 80101be:	4a7b      	ldr	r2, [pc, #492]	; (80103ac <font_drawChar+0xbf0>)
 80101c0:	6013      	str	r3, [r2, #0]
            if(xf>xbg) (*fillRectFun)(x+xbg*sx, y+yf*sy, (xf-xbg)*sx, 1*sy, bg);
 80101c2:	4b79      	ldr	r3, [pc, #484]	; (80103a8 <font_drawChar+0xbec>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80101c8:	429a      	cmp	r2, r3
 80101ca:	da1f      	bge.n	801020c <font_drawChar+0xa50>
 80101cc:	4b78      	ldr	r3, [pc, #480]	; (80103b0 <font_drawChar+0xbf4>)
 80101ce:	681c      	ldr	r4, [r3, #0]
 80101d0:	4b78      	ldr	r3, [pc, #480]	; (80103b4 <font_drawChar+0xbf8>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80101d6:	fb02 f203 	mul.w	r2, r2, r3
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	18d0      	adds	r0, r2, r3
 80101de:	4b76      	ldr	r3, [pc, #472]	; (80103b8 <font_drawChar+0xbfc>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	4a76      	ldr	r2, [pc, #472]	; (80103bc <font_drawChar+0xc00>)
 80101e4:	6812      	ldr	r2, [r2, #0]
 80101e6:	fb02 f203 	mul.w	r2, r2, r3
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	18d1      	adds	r1, r2, r3
 80101ee:	4b6e      	ldr	r3, [pc, #440]	; (80103a8 <font_drawChar+0xbec>)
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101f4:	1ad3      	subs	r3, r2, r3
 80101f6:	4a6f      	ldr	r2, [pc, #444]	; (80103b4 <font_drawChar+0xbf8>)
 80101f8:	6812      	ldr	r2, [r2, #0]
 80101fa:	fb02 f203 	mul.w	r2, r2, r3
 80101fe:	4b6f      	ldr	r3, [pc, #444]	; (80103bc <font_drawChar+0xc00>)
 8010200:	681d      	ldr	r5, [r3, #0]
 8010202:	4b6f      	ldr	r3, [pc, #444]	; (80103c0 <font_drawChar+0xc04>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	462b      	mov	r3, r5
 801020a:	47a0      	blx	r4
            xbg = xf+wf;
 801020c:	4b66      	ldr	r3, [pc, #408]	; (80103a8 <font_drawChar+0xbec>)
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	4b66      	ldr	r3, [pc, #408]	; (80103ac <font_drawChar+0xbf0>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4413      	add	r3, r2
 8010216:	677b      	str	r3, [r7, #116]	; 0x74
            //if(idx==recNum-1) fg=0x07E0; else fg=0xffff;
            (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, 1*sy, fg);
 8010218:	4b65      	ldr	r3, [pc, #404]	; (80103b0 <font_drawChar+0xbf4>)
 801021a:	681c      	ldr	r4, [r3, #0]
 801021c:	4b62      	ldr	r3, [pc, #392]	; (80103a8 <font_drawChar+0xbec>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4a64      	ldr	r2, [pc, #400]	; (80103b4 <font_drawChar+0xbf8>)
 8010222:	6812      	ldr	r2, [r2, #0]
 8010224:	fb02 f203 	mul.w	r2, r2, r3
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	18d0      	adds	r0, r2, r3
 801022c:	4b62      	ldr	r3, [pc, #392]	; (80103b8 <font_drawChar+0xbfc>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	4a62      	ldr	r2, [pc, #392]	; (80103bc <font_drawChar+0xc00>)
 8010232:	6812      	ldr	r2, [r2, #0]
 8010234:	fb02 f203 	mul.w	r2, r2, r3
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	18d1      	adds	r1, r2, r3
 801023c:	4b5b      	ldr	r3, [pc, #364]	; (80103ac <font_drawChar+0xbf0>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a5c      	ldr	r2, [pc, #368]	; (80103b4 <font_drawChar+0xbf8>)
 8010242:	6812      	ldr	r2, [r2, #0]
 8010244:	fb02 f203 	mul.w	r2, r2, r3
 8010248:	4b5e      	ldr	r3, [pc, #376]	; (80103c4 <font_drawChar+0xc08>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	441a      	add	r2, r3
 801024e:	4b5b      	ldr	r3, [pc, #364]	; (80103bc <font_drawChar+0xc00>)
 8010250:	681d      	ldr	r5, [r3, #0]
 8010252:	4b5d      	ldr	r3, [pc, #372]	; (80103c8 <font_drawChar+0xc0c>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	462b      	mov	r3, r5
 801025a:	47a0      	blx	r4
            idx++;
 801025c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010260:	3301      	adds	r3, #1
 8010262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            v = *(rects+idx+recIdx);
 8010266:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801026a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801026e:	4413      	add	r3, r2
 8010270:	005b      	lsls	r3, r3, #1
 8010272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010274:	4413      	add	r3, r2
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            yf = (v>>5) & 0x3f;
 801027c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010280:	095b      	lsrs	r3, r3, #5
 8010282:	b29b      	uxth	r3, r3
 8010284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010288:	4a4b      	ldr	r2, [pc, #300]	; (80103b8 <font_drawChar+0xbfc>)
 801028a:	6013      	str	r3, [r2, #0]
          while(yf==yfCur && idx<recNum) {
 801028c:	4b4a      	ldr	r3, [pc, #296]	; (80103b8 <font_drawChar+0xbfc>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010292:	429a      	cmp	r2, r3
 8010294:	d105      	bne.n	80102a2 <font_drawChar+0xae6>
 8010296:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801029a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801029e:	429a      	cmp	r2, r3
 80102a0:	db80      	blt.n	80101a4 <font_drawChar+0x9e8>
          }
          // last bg line
          if(xbg<chWd) (*fillRectFun)(x+xbg*sx, y+yfCur*sy, (chWd-xbg)*sx, 1*sy, bg);
 80102a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80102a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102a6:	429a      	cmp	r2, r3
 80102a8:	da1d      	bge.n	80102e6 <font_drawChar+0xb2a>
 80102aa:	4b41      	ldr	r3, [pc, #260]	; (80103b0 <font_drawChar+0xbf4>)
 80102ac:	681c      	ldr	r4, [r3, #0]
 80102ae:	4b41      	ldr	r3, [pc, #260]	; (80103b4 <font_drawChar+0xbf8>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80102b4:	fb02 f203 	mul.w	r2, r2, r3
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	18d0      	adds	r0, r2, r3
 80102bc:	4b3f      	ldr	r3, [pc, #252]	; (80103bc <font_drawChar+0xc00>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80102c2:	fb02 f203 	mul.w	r2, r2, r3
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	18d1      	adds	r1, r2, r3
 80102ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	4a38      	ldr	r2, [pc, #224]	; (80103b4 <font_drawChar+0xbf8>)
 80102d2:	6812      	ldr	r2, [r2, #0]
 80102d4:	fb02 f203 	mul.w	r2, r2, r3
 80102d8:	4b38      	ldr	r3, [pc, #224]	; (80103bc <font_drawChar+0xc00>)
 80102da:	681d      	ldr	r5, [r3, #0]
 80102dc:	4b38      	ldr	r3, [pc, #224]	; (80103c0 <font_drawChar+0xc04>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	462b      	mov	r3, r5
 80102e4:	47a0      	blx	r4
          //Serial.print(idx); Serial.print(" ++ "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          if(idx==recNum-1 && yfCur<rFont->ht) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yfCur<rFont->ht-yfCur)*sy, bg);
 80102e6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80102ea:	3b01      	subs	r3, #1
 80102ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d12c      	bne.n	801034e <font_drawChar+0xb92>
 80102f4:	4b35      	ldr	r3, [pc, #212]	; (80103cc <font_drawChar+0xc10>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	789b      	ldrb	r3, [r3, #2]
 80102fa:	461a      	mov	r2, r3
 80102fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80102fe:	4293      	cmp	r3, r2
 8010300:	da25      	bge.n	801034e <font_drawChar+0xb92>
 8010302:	4b2b      	ldr	r3, [pc, #172]	; (80103b0 <font_drawChar+0xbf4>)
 8010304:	681c      	ldr	r4, [r3, #0]
 8010306:	4b2d      	ldr	r3, [pc, #180]	; (80103bc <font_drawChar+0xc00>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801030c:	fb02 f203 	mul.w	r2, r2, r3
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	18d1      	adds	r1, r2, r3
 8010314:	4b27      	ldr	r3, [pc, #156]	; (80103b4 <font_drawChar+0xbf8>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801031a:	fb02 f003 	mul.w	r0, r2, r3
 801031e:	4b2b      	ldr	r3, [pc, #172]	; (80103cc <font_drawChar+0xc10>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	789b      	ldrb	r3, [r3, #2]
 8010324:	461a      	mov	r2, r3
 8010326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801032c:	429a      	cmp	r2, r3
 801032e:	bfb4      	ite	lt
 8010330:	2301      	movlt	r3, #1
 8010332:	2300      	movge	r3, #0
 8010334:	b2db      	uxtb	r3, r3
 8010336:	461a      	mov	r2, r3
 8010338:	4b20      	ldr	r3, [pc, #128]	; (80103bc <font_drawChar+0xc00>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	fb03 f202 	mul.w	r2, r3, r2
 8010340:	4b1f      	ldr	r3, [pc, #124]	; (80103c0 <font_drawChar+0xc04>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	4613      	mov	r3, r2
 8010348:	4602      	mov	r2, r0
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	47a0      	blx	r4
        while(idx<recNum) {
 801034e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8010352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010356:	429a      	cmp	r2, r3
 8010358:	f6ff aed1 	blt.w	80100fe <font_drawChar+0x942>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 801035c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010360:	2b00      	cmp	r3, #0
 8010362:	f340 8275 	ble.w	8010850 <font_drawChar+0x1094>
 8010366:	4b12      	ldr	r3, [pc, #72]	; (80103b0 <font_drawChar+0xbf4>)
 8010368:	681c      	ldr	r4, [r3, #0]
 801036a:	4b12      	ldr	r3, [pc, #72]	; (80103b4 <font_drawChar+0xbf8>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010370:	fb02 f203 	mul.w	r2, r2, r3
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	18d0      	adds	r0, r2, r3
 8010378:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <font_drawChar+0xbf8>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010380:	fb02 f203 	mul.w	r2, r2, r3
 8010384:	4b11      	ldr	r3, [pc, #68]	; (80103cc <font_drawChar+0xc10>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	789b      	ldrb	r3, [r3, #2]
 801038a:	4619      	mov	r1, r3
 801038c:	4b0b      	ldr	r3, [pc, #44]	; (80103bc <font_drawChar+0xc00>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	fb03 f101 	mul.w	r1, r3, r1
 8010394:	4b0a      	ldr	r3, [pc, #40]	; (80103c0 <font_drawChar+0xc04>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	460b      	mov	r3, r1
 801039c:	68b9      	ldr	r1, [r7, #8]
 801039e:	47a0      	blx	r4
        yf = (v>>5) & 0x3f;
        wf = ((v>>11) & 0x1f)+1;
        hf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 80103a0:	e256      	b.n	8010850 <font_drawChar+0x1094>
      for(int i=0; i<recNum; i++) {
 80103a2:	2300      	movs	r3, #0
 80103a4:	673b      	str	r3, [r7, #112]	; 0x70
 80103a6:	e063      	b.n	8010470 <font_drawChar+0xcb4>
 80103a8:	2000fcd4 	.word	0x2000fcd4
 80103ac:	2000fcdc 	.word	0x2000fcdc
 80103b0:	2000fccc 	.word	0x2000fccc
 80103b4:	20002bb0 	.word	0x20002bb0
 80103b8:	2000fcd8 	.word	0x2000fcd8
 80103bc:	20002bb4 	.word	0x20002bb4
 80103c0:	20002bbc 	.word	0x20002bbc
 80103c4:	2000fcf0 	.word	0x2000fcf0
 80103c8:	20002bb8 	.word	0x20002bb8
 80103cc:	2000fcd0 	.word	0x2000fcd0
        unsigned short *rects = (unsigned short*)rFont->rects;
 80103d0:	4b4c      	ldr	r3, [pc, #304]	; (8010504 <font_drawChar+0xd48>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	689b      	ldr	r3, [r3, #8]
 80103d6:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned short v = (rects[i+recIdx]);
 80103d8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80103dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103de:	4413      	add	r3, r2
 80103e0:	005b      	lsls	r3, r3, #1
 80103e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103e4:	4413      	add	r3, r2
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        xf = (v & 0x1f)-xmin;
 80103ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103ec:	f003 021f 	and.w	r2, r3, #31
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	1ad3      	subs	r3, r2, r3
 80103f4:	4a44      	ldr	r2, [pc, #272]	; (8010508 <font_drawChar+0xd4c>)
 80103f6:	6013      	str	r3, [r2, #0]
        yf = (v>>5) & 0x3f;
 80103f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103fa:	095b      	lsrs	r3, r3, #5
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010402:	4a42      	ldr	r2, [pc, #264]	; (801050c <font_drawChar+0xd50>)
 8010404:	6013      	str	r3, [r2, #0]
        wf = ((v>>11) & 0x1f)+1;
 8010406:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010408:	0adb      	lsrs	r3, r3, #11
 801040a:	b29b      	uxth	r3, r3
 801040c:	f003 031f 	and.w	r3, r3, #31
 8010410:	3301      	adds	r3, #1
 8010412:	4a3f      	ldr	r2, [pc, #252]	; (8010510 <font_drawChar+0xd54>)
 8010414:	6013      	str	r3, [r2, #0]
        hf = 1;
 8010416:	4b3f      	ldr	r3, [pc, #252]	; (8010514 <font_drawChar+0xd58>)
 8010418:	2201      	movs	r2, #1
 801041a:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 801041c:	4b3e      	ldr	r3, [pc, #248]	; (8010518 <font_drawChar+0xd5c>)
 801041e:	681c      	ldr	r4, [r3, #0]
 8010420:	4b39      	ldr	r3, [pc, #228]	; (8010508 <font_drawChar+0xd4c>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a3d      	ldr	r2, [pc, #244]	; (801051c <font_drawChar+0xd60>)
 8010426:	6812      	ldr	r2, [r2, #0]
 8010428:	fb02 f203 	mul.w	r2, r2, r3
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	18d0      	adds	r0, r2, r3
 8010430:	4b36      	ldr	r3, [pc, #216]	; (801050c <font_drawChar+0xd50>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a3a      	ldr	r2, [pc, #232]	; (8010520 <font_drawChar+0xd64>)
 8010436:	6812      	ldr	r2, [r2, #0]
 8010438:	fb02 f203 	mul.w	r2, r2, r3
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	18d1      	adds	r1, r2, r3
 8010440:	4b33      	ldr	r3, [pc, #204]	; (8010510 <font_drawChar+0xd54>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4a35      	ldr	r2, [pc, #212]	; (801051c <font_drawChar+0xd60>)
 8010446:	6812      	ldr	r2, [r2, #0]
 8010448:	fb02 f203 	mul.w	r2, r2, r3
 801044c:	4b35      	ldr	r3, [pc, #212]	; (8010524 <font_drawChar+0xd68>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	18d5      	adds	r5, r2, r3
 8010452:	4b30      	ldr	r3, [pc, #192]	; (8010514 <font_drawChar+0xd58>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a32      	ldr	r2, [pc, #200]	; (8010520 <font_drawChar+0xd64>)
 8010458:	6812      	ldr	r2, [r2, #0]
 801045a:	fb02 f203 	mul.w	r2, r2, r3
 801045e:	4b32      	ldr	r3, [pc, #200]	; (8010528 <font_drawChar+0xd6c>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	4613      	mov	r3, r2
 8010466:	462a      	mov	r2, r5
 8010468:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 801046a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801046c:	3301      	adds	r3, #1
 801046e:	673b      	str	r3, [r7, #112]	; 0x70
 8010470:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8010474:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010476:	429a      	cmp	r2, r3
 8010478:	dbaa      	blt.n	80103d0 <font_drawChar+0xc14>
      break;
 801047a:	e1e9      	b.n	8010850 <font_drawChar+0x1094>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B:
      if(bg!=fg) {
 801047c:	4b2b      	ldr	r3, [pc, #172]	; (801052c <font_drawChar+0xd70>)
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	4b29      	ldr	r3, [pc, #164]	; (8010528 <font_drawChar+0xd6c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	429a      	cmp	r2, r3
 8010486:	f000 811f 	beq.w	80106c8 <font_drawChar+0xf0c>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 801048a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801048e:	2b00      	cmp	r3, #0
 8010490:	dd1d      	ble.n	80104ce <font_drawChar+0xd12>
 8010492:	4b21      	ldr	r3, [pc, #132]	; (8010518 <font_drawChar+0xd5c>)
 8010494:	681c      	ldr	r4, [r3, #0]
 8010496:	4b21      	ldr	r3, [pc, #132]	; (801051c <font_drawChar+0xd60>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801049e:	fb02 f303 	mul.w	r3, r2, r3
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	1ad0      	subs	r0, r2, r3
 80104a6:	4b1d      	ldr	r3, [pc, #116]	; (801051c <font_drawChar+0xd60>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80104ae:	fb02 f203 	mul.w	r2, r2, r3
 80104b2:	4b14      	ldr	r3, [pc, #80]	; (8010504 <font_drawChar+0xd48>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	789b      	ldrb	r3, [r3, #2]
 80104b8:	4619      	mov	r1, r3
 80104ba:	4b19      	ldr	r3, [pc, #100]	; (8010520 <font_drawChar+0xd64>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	fb03 f101 	mul.w	r1, r3, r1
 80104c2:	4b1a      	ldr	r3, [pc, #104]	; (801052c <font_drawChar+0xd70>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	460b      	mov	r3, r1
 80104ca:	68b9      	ldr	r1, [r7, #8]
 80104cc:	47a0      	blx	r4
        unsigned char *rects = (unsigned char*)rFont->rects + recIdx*3;
 80104ce:	4b0d      	ldr	r3, [pc, #52]	; (8010504 <font_drawChar+0xd48>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	6899      	ldr	r1, [r3, #8]
 80104d4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80104d8:	4613      	mov	r3, r2
 80104da:	005b      	lsls	r3, r3, #1
 80104dc:	4413      	add	r3, r2
 80104de:	440b      	add	r3, r1
 80104e0:	647b      	str	r3, [r7, #68]	; 0x44
        int idx=0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(idx<recNum*3) {
 80104e6:	e0c3      	b.n	8010670 <font_drawChar+0xeb4>
          xf = *(rects+idx+0);
 80104e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104ec:	4413      	add	r3, r2
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	461a      	mov	r2, r3
 80104f2:	4b05      	ldr	r3, [pc, #20]	; (8010508 <font_drawChar+0xd4c>)
 80104f4:	601a      	str	r2, [r3, #0]
          int ybg=0,xfCur=xf;
 80104f6:	2300      	movs	r3, #0
 80104f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80104fa:	4b03      	ldr	r3, [pc, #12]	; (8010508 <font_drawChar+0xd4c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	643b      	str	r3, [r7, #64]	; 0x40
          while(xf==xfCur && idx<recNum*3) {
 8010500:	e07d      	b.n	80105fe <font_drawChar+0xe42>
 8010502:	bf00      	nop
 8010504:	2000fcd0 	.word	0x2000fcd0
 8010508:	2000fcd4 	.word	0x2000fcd4
 801050c:	2000fcd8 	.word	0x2000fcd8
 8010510:	2000fcdc 	.word	0x2000fcdc
 8010514:	2000fce0 	.word	0x2000fce0
 8010518:	2000fccc 	.word	0x2000fccc
 801051c:	20002bb0 	.word	0x20002bb0
 8010520:	20002bb4 	.word	0x20002bb4
 8010524:	2000fcf0 	.word	0x2000fcf0
 8010528:	20002bb8 	.word	0x20002bb8
 801052c:	20002bbc 	.word	0x20002bbc
            yf = *(rects+idx+1);
 8010530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010532:	3301      	adds	r3, #1
 8010534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010536:	4413      	add	r3, r2
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	461a      	mov	r2, r3
 801053c:	4b8e      	ldr	r3, [pc, #568]	; (8010778 <font_drawChar+0xfbc>)
 801053e:	601a      	str	r2, [r3, #0]
            hf = *(rects+idx+2)+1;
 8010540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010542:	3302      	adds	r3, #2
 8010544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010546:	4413      	add	r3, r2
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	3301      	adds	r3, #1
 801054c:	4a8b      	ldr	r2, [pc, #556]	; (801077c <font_drawChar+0xfc0>)
 801054e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8010550:	4b89      	ldr	r3, [pc, #548]	; (8010778 <font_drawChar+0xfbc>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010556:	429a      	cmp	r2, r3
 8010558:	da1f      	bge.n	801059a <font_drawChar+0xdde>
 801055a:	4b89      	ldr	r3, [pc, #548]	; (8010780 <font_drawChar+0xfc4>)
 801055c:	681c      	ldr	r4, [r3, #0]
 801055e:	4b89      	ldr	r3, [pc, #548]	; (8010784 <font_drawChar+0xfc8>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010564:	fb02 f203 	mul.w	r2, r2, r3
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	18d0      	adds	r0, r2, r3
 801056c:	4b86      	ldr	r3, [pc, #536]	; (8010788 <font_drawChar+0xfcc>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010572:	fb02 f203 	mul.w	r2, r2, r3
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	18d1      	adds	r1, r2, r3
 801057a:	4b82      	ldr	r3, [pc, #520]	; (8010784 <font_drawChar+0xfc8>)
 801057c:	681d      	ldr	r5, [r3, #0]
 801057e:	4b7e      	ldr	r3, [pc, #504]	; (8010778 <font_drawChar+0xfbc>)
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010584:	1ad3      	subs	r3, r2, r3
 8010586:	4a80      	ldr	r2, [pc, #512]	; (8010788 <font_drawChar+0xfcc>)
 8010588:	6812      	ldr	r2, [r2, #0]
 801058a:	fb02 f203 	mul.w	r2, r2, r3
 801058e:	4b7f      	ldr	r3, [pc, #508]	; (801078c <font_drawChar+0xfd0>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	4613      	mov	r3, r2
 8010596:	462a      	mov	r2, r5
 8010598:	47a0      	blx	r4
            ybg = yf+hf;
 801059a:	4b77      	ldr	r3, [pc, #476]	; (8010778 <font_drawChar+0xfbc>)
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	4b77      	ldr	r3, [pc, #476]	; (801077c <font_drawChar+0xfc0>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	4413      	add	r3, r2
 80105a4:	66bb      	str	r3, [r7, #104]	; 0x68
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 80105a6:	4b76      	ldr	r3, [pc, #472]	; (8010780 <font_drawChar+0xfc4>)
 80105a8:	681c      	ldr	r4, [r3, #0]
 80105aa:	4b76      	ldr	r3, [pc, #472]	; (8010784 <font_drawChar+0xfc8>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105b0:	fb02 f203 	mul.w	r2, r2, r3
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	18d0      	adds	r0, r2, r3
 80105b8:	4b6f      	ldr	r3, [pc, #444]	; (8010778 <font_drawChar+0xfbc>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4a72      	ldr	r2, [pc, #456]	; (8010788 <font_drawChar+0xfcc>)
 80105be:	6812      	ldr	r2, [r2, #0]
 80105c0:	fb02 f203 	mul.w	r2, r2, r3
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	18d1      	adds	r1, r2, r3
 80105c8:	4b71      	ldr	r3, [pc, #452]	; (8010790 <font_drawChar+0xfd4>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	4b6d      	ldr	r3, [pc, #436]	; (8010784 <font_drawChar+0xfc8>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	18d5      	adds	r5, r2, r3
 80105d2:	4b6a      	ldr	r3, [pc, #424]	; (801077c <font_drawChar+0xfc0>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a6c      	ldr	r2, [pc, #432]	; (8010788 <font_drawChar+0xfcc>)
 80105d8:	6812      	ldr	r2, [r2, #0]
 80105da:	fb02 f203 	mul.w	r2, r2, r3
 80105de:	4b6d      	ldr	r3, [pc, #436]	; (8010794 <font_drawChar+0xfd8>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	4613      	mov	r3, r2
 80105e6:	462a      	mov	r2, r5
 80105e8:	47a0      	blx	r4
            idx += 3;
 80105ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105ec:	3303      	adds	r3, #3
 80105ee:	66fb      	str	r3, [r7, #108]	; 0x6c
            xf = *(rects+idx+0);
 80105f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105f4:	4413      	add	r3, r2
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	461a      	mov	r2, r3
 80105fa:	4b67      	ldr	r3, [pc, #412]	; (8010798 <font_drawChar+0xfdc>)
 80105fc:	601a      	str	r2, [r3, #0]
          while(xf==xfCur && idx<recNum*3) {
 80105fe:	4b66      	ldr	r3, [pc, #408]	; (8010798 <font_drawChar+0xfdc>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010604:	429a      	cmp	r2, r3
 8010606:	d107      	bne.n	8010618 <font_drawChar+0xe5c>
 8010608:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801060c:	4613      	mov	r3, r2
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	4413      	add	r3, r2
 8010612:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010614:	429a      	cmp	r2, r3
 8010616:	db8b      	blt.n	8010530 <font_drawChar+0xd74>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 8010618:	4b60      	ldr	r3, [pc, #384]	; (801079c <font_drawChar+0xfe0>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	789b      	ldrb	r3, [r3, #2]
 801061e:	461a      	mov	r2, r3
 8010620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010622:	4293      	cmp	r3, r2
 8010624:	da24      	bge.n	8010670 <font_drawChar+0xeb4>
 8010626:	4b56      	ldr	r3, [pc, #344]	; (8010780 <font_drawChar+0xfc4>)
 8010628:	681c      	ldr	r4, [r3, #0]
 801062a:	4b56      	ldr	r3, [pc, #344]	; (8010784 <font_drawChar+0xfc8>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010630:	fb02 f203 	mul.w	r2, r2, r3
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	18d0      	adds	r0, r2, r3
 8010638:	4b53      	ldr	r3, [pc, #332]	; (8010788 <font_drawChar+0xfcc>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801063e:	fb02 f203 	mul.w	r2, r2, r3
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	18d1      	adds	r1, r2, r3
 8010646:	4b52      	ldr	r3, [pc, #328]	; (8010790 <font_drawChar+0xfd4>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	4b4e      	ldr	r3, [pc, #312]	; (8010784 <font_drawChar+0xfc8>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	18d5      	adds	r5, r2, r3
 8010650:	4b52      	ldr	r3, [pc, #328]	; (801079c <font_drawChar+0xfe0>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	789b      	ldrb	r3, [r3, #2]
 8010656:	461a      	mov	r2, r3
 8010658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	4a4a      	ldr	r2, [pc, #296]	; (8010788 <font_drawChar+0xfcc>)
 801065e:	6812      	ldr	r2, [r2, #0]
 8010660:	fb02 f203 	mul.w	r2, r2, r3
 8010664:	4b49      	ldr	r3, [pc, #292]	; (801078c <font_drawChar+0xfd0>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	9300      	str	r3, [sp, #0]
 801066a:	4613      	mov	r3, r2
 801066c:	462a      	mov	r2, r5
 801066e:	47a0      	blx	r4
        while(idx<recNum*3) {
 8010670:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010674:	4613      	mov	r3, r2
 8010676:	005b      	lsls	r3, r3, #1
 8010678:	4413      	add	r3, r2
 801067a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801067c:	429a      	cmp	r2, r3
 801067e:	f6ff af33 	blt.w	80104e8 <font_drawChar+0xd2c>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8010682:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010686:	2b00      	cmp	r3, #0
 8010688:	f340 80e4 	ble.w	8010854 <font_drawChar+0x1098>
 801068c:	4b3c      	ldr	r3, [pc, #240]	; (8010780 <font_drawChar+0xfc4>)
 801068e:	681c      	ldr	r4, [r3, #0]
 8010690:	4b3c      	ldr	r3, [pc, #240]	; (8010784 <font_drawChar+0xfc8>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010696:	fb02 f203 	mul.w	r2, r2, r3
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	18d0      	adds	r0, r2, r3
 801069e:	4b39      	ldr	r3, [pc, #228]	; (8010784 <font_drawChar+0xfc8>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80106a6:	fb02 f203 	mul.w	r2, r2, r3
 80106aa:	4b3c      	ldr	r3, [pc, #240]	; (801079c <font_drawChar+0xfe0>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	789b      	ldrb	r3, [r3, #2]
 80106b0:	4619      	mov	r1, r3
 80106b2:	4b35      	ldr	r3, [pc, #212]	; (8010788 <font_drawChar+0xfcc>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	fb03 f101 	mul.w	r1, r3, r1
 80106ba:	4b34      	ldr	r3, [pc, #208]	; (801078c <font_drawChar+0xfd0>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	460b      	mov	r3, r1
 80106c2:	68b9      	ldr	r1, [r7, #8]
 80106c4:	47a0      	blx	r4
        yf = (rects[1]);
        hf = (rects[2])+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 80106c6:	e0c5      	b.n	8010854 <font_drawChar+0x1098>
      for(int i=0; i<recNum; i++) {
 80106c8:	2300      	movs	r3, #0
 80106ca:	667b      	str	r3, [r7, #100]	; 0x64
 80106cc:	e04b      	b.n	8010766 <font_drawChar+0xfaa>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 80106ce:	4b33      	ldr	r3, [pc, #204]	; (801079c <font_drawChar+0xfe0>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	6899      	ldr	r1, [r3, #8]
 80106d4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80106d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106da:	441a      	add	r2, r3
 80106dc:	4613      	mov	r3, r2
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	4413      	add	r3, r2
 80106e2:	440b      	add	r3, r1
 80106e4:	64bb      	str	r3, [r7, #72]	; 0x48
        xf = (rects[0])-xmin;
 80106e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	4a29      	ldr	r2, [pc, #164]	; (8010798 <font_drawChar+0xfdc>)
 80106f2:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 80106f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106f6:	3301      	adds	r3, #1
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	461a      	mov	r2, r3
 80106fc:	4b1e      	ldr	r3, [pc, #120]	; (8010778 <font_drawChar+0xfbc>)
 80106fe:	601a      	str	r2, [r3, #0]
        hf = (rects[2])+1;
 8010700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010702:	3302      	adds	r3, #2
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	3301      	adds	r3, #1
 8010708:	4a1c      	ldr	r2, [pc, #112]	; (801077c <font_drawChar+0xfc0>)
 801070a:	6013      	str	r3, [r2, #0]
        wf = 1;
 801070c:	4b24      	ldr	r3, [pc, #144]	; (80107a0 <font_drawChar+0xfe4>)
 801070e:	2201      	movs	r2, #1
 8010710:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8010712:	4b1b      	ldr	r3, [pc, #108]	; (8010780 <font_drawChar+0xfc4>)
 8010714:	681c      	ldr	r4, [r3, #0]
 8010716:	4b20      	ldr	r3, [pc, #128]	; (8010798 <font_drawChar+0xfdc>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a1a      	ldr	r2, [pc, #104]	; (8010784 <font_drawChar+0xfc8>)
 801071c:	6812      	ldr	r2, [r2, #0]
 801071e:	fb02 f203 	mul.w	r2, r2, r3
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	18d0      	adds	r0, r2, r3
 8010726:	4b14      	ldr	r3, [pc, #80]	; (8010778 <font_drawChar+0xfbc>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a17      	ldr	r2, [pc, #92]	; (8010788 <font_drawChar+0xfcc>)
 801072c:	6812      	ldr	r2, [r2, #0]
 801072e:	fb02 f203 	mul.w	r2, r2, r3
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	18d1      	adds	r1, r2, r3
 8010736:	4b1a      	ldr	r3, [pc, #104]	; (80107a0 <font_drawChar+0xfe4>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4a12      	ldr	r2, [pc, #72]	; (8010784 <font_drawChar+0xfc8>)
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	fb02 f203 	mul.w	r2, r2, r3
 8010742:	4b13      	ldr	r3, [pc, #76]	; (8010790 <font_drawChar+0xfd4>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	18d5      	adds	r5, r2, r3
 8010748:	4b0c      	ldr	r3, [pc, #48]	; (801077c <font_drawChar+0xfc0>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	4a0e      	ldr	r2, [pc, #56]	; (8010788 <font_drawChar+0xfcc>)
 801074e:	6812      	ldr	r2, [r2, #0]
 8010750:	fb02 f203 	mul.w	r2, r2, r3
 8010754:	4b0f      	ldr	r3, [pc, #60]	; (8010794 <font_drawChar+0xfd8>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	4613      	mov	r3, r2
 801075c:	462a      	mov	r2, r5
 801075e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8010760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010762:	3301      	adds	r3, #1
 8010764:	667b      	str	r3, [r7, #100]	; 0x64
 8010766:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801076a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801076c:	429a      	cmp	r2, r3
 801076e:	dbae      	blt.n	80106ce <font_drawChar+0xf12>
      break;
 8010770:	e070      	b.n	8010854 <font_drawChar+0x1098>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B:
      for(int i=0; i<recNum; i++) {
 8010772:	2300      	movs	r3, #0
 8010774:	663b      	str	r3, [r7, #96]	; 0x60
 8010776:	e061      	b.n	801083c <font_drawChar+0x1080>
 8010778:	2000fcd8 	.word	0x2000fcd8
 801077c:	2000fce0 	.word	0x2000fce0
 8010780:	2000fccc 	.word	0x2000fccc
 8010784:	20002bb0 	.word	0x20002bb0
 8010788:	20002bb4 	.word	0x20002bb4
 801078c:	20002bbc 	.word	0x20002bbc
 8010790:	2000fcf0 	.word	0x2000fcf0
 8010794:	20002bb8 	.word	0x20002bb8
 8010798:	2000fcd4 	.word	0x2000fcd4
 801079c:	2000fcd0 	.word	0x2000fcd0
 80107a0:	2000fcdc 	.word	0x2000fcdc
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 80107a4:	4b32      	ldr	r3, [pc, #200]	; (8010870 <font_drawChar+0x10b4>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	6899      	ldr	r1, [r3, #8]
 80107aa:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80107ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107b0:	441a      	add	r2, r3
 80107b2:	4613      	mov	r3, r2
 80107b4:	005b      	lsls	r3, r3, #1
 80107b6:	4413      	add	r3, r2
 80107b8:	440b      	add	r3, r1
 80107ba:	64fb      	str	r3, [r7, #76]	; 0x4c
        xf = (rects[0])-xmin;
 80107bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	461a      	mov	r2, r3
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	1ad3      	subs	r3, r2, r3
 80107c6:	4a2b      	ldr	r2, [pc, #172]	; (8010874 <font_drawChar+0x10b8>)
 80107c8:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 80107ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107cc:	3301      	adds	r3, #1
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	461a      	mov	r2, r3
 80107d2:	4b29      	ldr	r3, [pc, #164]	; (8010878 <font_drawChar+0x10bc>)
 80107d4:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 80107d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d8:	3302      	adds	r3, #2
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	3301      	adds	r3, #1
 80107de:	4a27      	ldr	r2, [pc, #156]	; (801087c <font_drawChar+0x10c0>)
 80107e0:	6013      	str	r3, [r2, #0]
        hf = 1;
 80107e2:	4b27      	ldr	r3, [pc, #156]	; (8010880 <font_drawChar+0x10c4>)
 80107e4:	2201      	movs	r2, #1
 80107e6:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80107e8:	4b26      	ldr	r3, [pc, #152]	; (8010884 <font_drawChar+0x10c8>)
 80107ea:	681c      	ldr	r4, [r3, #0]
 80107ec:	4b21      	ldr	r3, [pc, #132]	; (8010874 <font_drawChar+0x10b8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4a25      	ldr	r2, [pc, #148]	; (8010888 <font_drawChar+0x10cc>)
 80107f2:	6812      	ldr	r2, [r2, #0]
 80107f4:	fb02 f203 	mul.w	r2, r2, r3
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	18d0      	adds	r0, r2, r3
 80107fc:	4b1e      	ldr	r3, [pc, #120]	; (8010878 <font_drawChar+0x10bc>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4a22      	ldr	r2, [pc, #136]	; (801088c <font_drawChar+0x10d0>)
 8010802:	6812      	ldr	r2, [r2, #0]
 8010804:	fb02 f203 	mul.w	r2, r2, r3
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	18d1      	adds	r1, r2, r3
 801080c:	4b1b      	ldr	r3, [pc, #108]	; (801087c <font_drawChar+0x10c0>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a1d      	ldr	r2, [pc, #116]	; (8010888 <font_drawChar+0x10cc>)
 8010812:	6812      	ldr	r2, [r2, #0]
 8010814:	fb02 f203 	mul.w	r2, r2, r3
 8010818:	4b1d      	ldr	r3, [pc, #116]	; (8010890 <font_drawChar+0x10d4>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	18d5      	adds	r5, r2, r3
 801081e:	4b18      	ldr	r3, [pc, #96]	; (8010880 <font_drawChar+0x10c4>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4a1a      	ldr	r2, [pc, #104]	; (801088c <font_drawChar+0x10d0>)
 8010824:	6812      	ldr	r2, [r2, #0]
 8010826:	fb02 f203 	mul.w	r2, r2, r3
 801082a:	4b1a      	ldr	r3, [pc, #104]	; (8010894 <font_drawChar+0x10d8>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	4613      	mov	r3, r2
 8010832:	462a      	mov	r2, r5
 8010834:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8010836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010838:	3301      	adds	r3, #1
 801083a:	663b      	str	r3, [r7, #96]	; 0x60
 801083c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8010840:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010842:	429a      	cmp	r2, r3
 8010844:	dbae      	blt.n	80107a4 <font_drawChar+0xfe8>
      }
      break;
 8010846:	e006      	b.n	8010856 <font_drawChar+0x109a>
    default: break;
 8010848:	bf00      	nop
 801084a:	e004      	b.n	8010856 <font_drawChar+0x109a>
      break;
 801084c:	bf00      	nop
 801084e:	e002      	b.n	8010856 <font_drawChar+0x109a>
      break;
 8010850:	bf00      	nop
 8010852:	e000      	b.n	8010856 <font_drawChar+0x109a>
      break;
 8010854:	bf00      	nop
#endif
  }
  return (wd+bold)*sx;
 8010856:	4b0e      	ldr	r3, [pc, #56]	; (8010890 <font_drawChar+0x10d4>)
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801085e:	4413      	add	r3, r2
 8010860:	4a09      	ldr	r2, [pc, #36]	; (8010888 <font_drawChar+0x10cc>)
 8010862:	6812      	ldr	r2, [r2, #0]
 8010864:	fb02 f303 	mul.w	r3, r2, r3
}
 8010868:	4618      	mov	r0, r3
 801086a:	37a8      	adds	r7, #168	; 0xa8
 801086c:	46bd      	mov	sp, r7
 801086e:	bdb0      	pop	{r4, r5, r7, pc}
 8010870:	2000fcd0 	.word	0x2000fcd0
 8010874:	2000fcd4 	.word	0x2000fcd4
 8010878:	2000fcd8 	.word	0x2000fcd8
 801087c:	2000fcdc 	.word	0x2000fcdc
 8010880:	2000fce0 	.word	0x2000fce0
 8010884:	2000fccc 	.word	0x2000fccc
 8010888:	20002bb0 	.word	0x20002bb0
 801088c:	20002bb4 	.word	0x20002bb4
 8010890:	2000fcf0 	.word	0x2000fcf0
 8010894:	20002bb8 	.word	0x20002bb8

08010898 <font_strWidth>:

// ----------------------------------------------------------------
int font_strWidth(const char *str)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  int wd = 0;
 80108a0:	2300      	movs	r3, #0
 80108a2:	60fb      	str	r3, [r7, #12]
  while (*str) wd += font_charWidth(*str++);
 80108a4:	e00a      	b.n	80108bc <font_strWidth+0x24>
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	1c5a      	adds	r2, r3, #1
 80108aa:	607a      	str	r2, [r7, #4]
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fe ff16 	bl	800f6e0 <font_charWidth>
 80108b4:	4602      	mov	r2, r0
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	4413      	add	r3, r2
 80108ba:	60fb      	str	r3, [r7, #12]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1f0      	bne.n	80108a6 <font_strWidth+0xe>
  return wd;
 80108c4:	68fb      	ldr	r3, [r7, #12]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
	...

080108d0 <font_printf>:

static char printfbuffer[512];

int font_printf(int xpos, int ypos, const char *str, ...)
{
 80108d0:	b40c      	push	{r2, r3}
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b084      	sub	sp, #16
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, str);
 80108dc:	f107 031c 	add.w	r3, r7, #28
 80108e0:	60fb      	str	r3, [r7, #12]
  vsnprintf(printfbuffer, sizeof(printfbuffer), str, args);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	69ba      	ldr	r2, [r7, #24]
 80108e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80108ea:	4808      	ldr	r0, [pc, #32]	; (801090c <font_printf+0x3c>)
 80108ec:	f001 fe1e 	bl	801252c <vsniprintf>
  va_end(args);
  return font_printStr(xpos, ypos,printfbuffer);
 80108f0:	4a06      	ldr	r2, [pc, #24]	; (801090c <font_printf+0x3c>)
 80108f2:	6839      	ldr	r1, [r7, #0]
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f000 f80b 	bl	8010910 <font_printStr>
 80108fa:	4603      	mov	r3, r0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010906:	b002      	add	sp, #8
 8010908:	4770      	bx	lr
 801090a:	bf00      	nop
 801090c:	2000fcfc 	.word	0x2000fcfc

08010910 <font_printStr>:

// ----------------------------------------------------------------
int font_printStr(int xpos, int ypos, const char *str)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b08a      	sub	sp, #40	; 0x28
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	607a      	str	r2, [r7, #4]
  unsigned char ch;
  int stl, row;
  int x = xpos;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	627b      	str	r3, [r7, #36]	; 0x24
  int y = ypos;
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	623b      	str	r3, [r7, #32]
  int wd = font_strWidth(str);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7ff ffb7 	bl	8010898 <font_strWidth>
 801092a:	61f8      	str	r0, [r7, #28]

  //fillRectFun(xpos, ypos, wd, font_getHeight(), 0);

  if(x < 0)
 801092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092e:	2b00      	cmp	r3, #0
 8010930:	da04      	bge.n	801093c <font_printStr+0x2c>
  {
    x = -x - wd;
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	425a      	negs	r2, r3
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	1ad3      	subs	r3, r2, r3
 801093a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(x == 0)
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	2b00      	cmp	r3, #0
 8010940:	d108      	bne.n	8010954 <font_printStr+0x44>
    x = (scrWd - wd) / 2;
 8010942:	4b25      	ldr	r3, [pc, #148]	; (80109d8 <font_printStr+0xc8>)
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	2b00      	cmp	r3, #0
 801094c:	da00      	bge.n	8010950 <font_printStr+0x40>
 801094e:	3301      	adds	r3, #1
 8010950:	105b      	asrs	r3, r3, #1
 8010952:	627b      	str	r3, [r7, #36]	; 0x24

  if(x<0) x = 0; // left
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	2b00      	cmp	r3, #0
 8010958:	da34      	bge.n	80109c4 <font_printStr+0xb4>
 801095a:	2300      	movs	r3, #0
 801095c:	627b      	str	r3, [r7, #36]	; 0x24

  while(*str) {
 801095e:	e031      	b.n	80109c4 <font_printStr+0xb4>
    char ch = *str++;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	1c5a      	adds	r2, r3, #1
 8010964:	607a      	str	r2, [r7, #4]
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	76fb      	strb	r3, [r7, #27]
    int wd = font_drawChar(x,y,ch);
 801096a:	7efb      	ldrb	r3, [r7, #27]
 801096c:	461a      	mov	r2, r3
 801096e:	6a39      	ldr	r1, [r7, #32]
 8010970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010972:	f7fe ff23 	bl	800f7bc <font_drawChar>
 8010976:	6178      	str	r0, [r7, #20]
    x+=wd;
 8010978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	4413      	add	r3, r2
 801097e:	627b      	str	r3, [r7, #36]	; 0x24
    if((cr && x>=scrWd) || ch==10) { 
 8010980:	4b16      	ldr	r3, [pc, #88]	; (80109dc <font_printStr+0xcc>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d004      	beq.n	8010992 <font_printStr+0x82>
 8010988:	4b13      	ldr	r3, [pc, #76]	; (80109d8 <font_printStr+0xc8>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801098e:	429a      	cmp	r2, r3
 8010990:	da02      	bge.n	8010998 <font_printStr+0x88>
 8010992:	7efb      	ldrb	r3, [r7, #27]
 8010994:	2b0a      	cmp	r3, #10
 8010996:	d115      	bne.n	80109c4 <font_printStr+0xb4>
      x = cr ? 0 : xpos; 
 8010998:	4b10      	ldr	r3, [pc, #64]	; (80109dc <font_printStr+0xcc>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d101      	bne.n	80109a4 <font_printStr+0x94>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	e000      	b.n	80109a6 <font_printStr+0x96>
 80109a4:	2300      	movs	r3, #0
 80109a6:	627b      	str	r3, [r7, #36]	; 0x24
      y += rFont->ht * sy + spacingY; 
 80109a8:	4b0d      	ldr	r3, [pc, #52]	; (80109e0 <font_printStr+0xd0>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	789b      	ldrb	r3, [r3, #2]
 80109ae:	461a      	mov	r2, r3
 80109b0:	4b0c      	ldr	r3, [pc, #48]	; (80109e4 <font_printStr+0xd4>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	fb03 f202 	mul.w	r2, r3, r2
 80109b8:	4b0b      	ldr	r3, [pc, #44]	; (80109e8 <font_printStr+0xd8>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4413      	add	r3, r2
 80109be:	6a3a      	ldr	r2, [r7, #32]
 80109c0:	4413      	add	r3, r2
 80109c2:	623b      	str	r3, [r7, #32]
  while(*str) {
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1c9      	bne.n	8010960 <font_printStr+0x50>
    }
  }
  return wd;
 80109cc:	69fb      	ldr	r3, [r7, #28]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3728      	adds	r7, #40	; 0x28
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	2000fce4 	.word	0x2000fce4
 80109dc:	2000fcf4 	.word	0x2000fcf4
 80109e0:	2000fcd0 	.word	0x2000fcd0
 80109e4:	20002bb4 	.word	0x20002bb4
 80109e8:	2000fcec 	.word	0x2000fcec

080109ec <font_isNumber>:
// ----------------------------------------------------------------
// callbacks
bool font_isNumber(unsigned char ch)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	4603      	mov	r3, r0
 80109f4:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) || ch==' ' || ch=='-';
 80109f6:	79fb      	ldrb	r3, [r7, #7]
 80109f8:	2b2f      	cmp	r3, #47	; 0x2f
 80109fa:	d902      	bls.n	8010a02 <font_isNumber+0x16>
 80109fc:	79fb      	ldrb	r3, [r7, #7]
 80109fe:	2b39      	cmp	r3, #57	; 0x39
 8010a00:	d905      	bls.n	8010a0e <font_isNumber+0x22>
 8010a02:	79fb      	ldrb	r3, [r7, #7]
 8010a04:	2b20      	cmp	r3, #32
 8010a06:	d002      	beq.n	8010a0e <font_isNumber+0x22>
 8010a08:	79fb      	ldrb	r3, [r7, #7]
 8010a0a:	2b2d      	cmp	r3, #45	; 0x2d
 8010a0c:	d101      	bne.n	8010a12 <font_isNumber+0x26>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	e000      	b.n	8010a14 <font_isNumber+0x28>
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <__errno>:
 8010a20:	4b01      	ldr	r3, [pc, #4]	; (8010a28 <__errno+0x8>)
 8010a22:	6818      	ldr	r0, [r3, #0]
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	20002c20 	.word	0x20002c20

08010a2c <__libc_init_array>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	4e0d      	ldr	r6, [pc, #52]	; (8010a64 <__libc_init_array+0x38>)
 8010a30:	4c0d      	ldr	r4, [pc, #52]	; (8010a68 <__libc_init_array+0x3c>)
 8010a32:	1ba4      	subs	r4, r4, r6
 8010a34:	10a4      	asrs	r4, r4, #2
 8010a36:	2500      	movs	r5, #0
 8010a38:	42a5      	cmp	r5, r4
 8010a3a:	d109      	bne.n	8010a50 <__libc_init_array+0x24>
 8010a3c:	4e0b      	ldr	r6, [pc, #44]	; (8010a6c <__libc_init_array+0x40>)
 8010a3e:	4c0c      	ldr	r4, [pc, #48]	; (8010a70 <__libc_init_array+0x44>)
 8010a40:	f003 fdc0 	bl	80145c4 <_init>
 8010a44:	1ba4      	subs	r4, r4, r6
 8010a46:	10a4      	asrs	r4, r4, #2
 8010a48:	2500      	movs	r5, #0
 8010a4a:	42a5      	cmp	r5, r4
 8010a4c:	d105      	bne.n	8010a5a <__libc_init_array+0x2e>
 8010a4e:	bd70      	pop	{r4, r5, r6, pc}
 8010a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a54:	4798      	blx	r3
 8010a56:	3501      	adds	r5, #1
 8010a58:	e7ee      	b.n	8010a38 <__libc_init_array+0xc>
 8010a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a5e:	4798      	blx	r3
 8010a60:	3501      	adds	r5, #1
 8010a62:	e7f2      	b.n	8010a4a <__libc_init_array+0x1e>
 8010a64:	08017c90 	.word	0x08017c90
 8010a68:	08017c90 	.word	0x08017c90
 8010a6c:	08017c90 	.word	0x08017c90
 8010a70:	08017c94 	.word	0x08017c94

08010a74 <memcpy>:
 8010a74:	b510      	push	{r4, lr}
 8010a76:	1e43      	subs	r3, r0, #1
 8010a78:	440a      	add	r2, r1
 8010a7a:	4291      	cmp	r1, r2
 8010a7c:	d100      	bne.n	8010a80 <memcpy+0xc>
 8010a7e:	bd10      	pop	{r4, pc}
 8010a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a88:	e7f7      	b.n	8010a7a <memcpy+0x6>

08010a8a <memset>:
 8010a8a:	4402      	add	r2, r0
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d100      	bne.n	8010a94 <memset+0xa>
 8010a92:	4770      	bx	lr
 8010a94:	f803 1b01 	strb.w	r1, [r3], #1
 8010a98:	e7f9      	b.n	8010a8e <memset+0x4>

08010a9a <__cvt>:
 8010a9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a9e:	ec55 4b10 	vmov	r4, r5, d0
 8010aa2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010aa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	460e      	mov	r6, r1
 8010aac:	4691      	mov	r9, r2
 8010aae:	4619      	mov	r1, r3
 8010ab0:	bfb8      	it	lt
 8010ab2:	4622      	movlt	r2, r4
 8010ab4:	462b      	mov	r3, r5
 8010ab6:	f027 0720 	bic.w	r7, r7, #32
 8010aba:	bfbb      	ittet	lt
 8010abc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010ac0:	461d      	movlt	r5, r3
 8010ac2:	2300      	movge	r3, #0
 8010ac4:	232d      	movlt	r3, #45	; 0x2d
 8010ac6:	bfb8      	it	lt
 8010ac8:	4614      	movlt	r4, r2
 8010aca:	2f46      	cmp	r7, #70	; 0x46
 8010acc:	700b      	strb	r3, [r1, #0]
 8010ace:	d004      	beq.n	8010ada <__cvt+0x40>
 8010ad0:	2f45      	cmp	r7, #69	; 0x45
 8010ad2:	d100      	bne.n	8010ad6 <__cvt+0x3c>
 8010ad4:	3601      	adds	r6, #1
 8010ad6:	2102      	movs	r1, #2
 8010ad8:	e000      	b.n	8010adc <__cvt+0x42>
 8010ada:	2103      	movs	r1, #3
 8010adc:	ab03      	add	r3, sp, #12
 8010ade:	9301      	str	r3, [sp, #4]
 8010ae0:	ab02      	add	r3, sp, #8
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	4632      	mov	r2, r6
 8010ae6:	4653      	mov	r3, sl
 8010ae8:	ec45 4b10 	vmov	d0, r4, r5
 8010aec:	f001 fdb8 	bl	8012660 <_dtoa_r>
 8010af0:	2f47      	cmp	r7, #71	; 0x47
 8010af2:	4680      	mov	r8, r0
 8010af4:	d102      	bne.n	8010afc <__cvt+0x62>
 8010af6:	f019 0f01 	tst.w	r9, #1
 8010afa:	d026      	beq.n	8010b4a <__cvt+0xb0>
 8010afc:	2f46      	cmp	r7, #70	; 0x46
 8010afe:	eb08 0906 	add.w	r9, r8, r6
 8010b02:	d111      	bne.n	8010b28 <__cvt+0x8e>
 8010b04:	f898 3000 	ldrb.w	r3, [r8]
 8010b08:	2b30      	cmp	r3, #48	; 0x30
 8010b0a:	d10a      	bne.n	8010b22 <__cvt+0x88>
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	2300      	movs	r3, #0
 8010b10:	4620      	mov	r0, r4
 8010b12:	4629      	mov	r1, r5
 8010b14:	f7f0 f800 	bl	8000b18 <__aeabi_dcmpeq>
 8010b18:	b918      	cbnz	r0, 8010b22 <__cvt+0x88>
 8010b1a:	f1c6 0601 	rsb	r6, r6, #1
 8010b1e:	f8ca 6000 	str.w	r6, [sl]
 8010b22:	f8da 3000 	ldr.w	r3, [sl]
 8010b26:	4499      	add	r9, r3
 8010b28:	2200      	movs	r2, #0
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	4629      	mov	r1, r5
 8010b30:	f7ef fff2 	bl	8000b18 <__aeabi_dcmpeq>
 8010b34:	b938      	cbnz	r0, 8010b46 <__cvt+0xac>
 8010b36:	2230      	movs	r2, #48	; 0x30
 8010b38:	9b03      	ldr	r3, [sp, #12]
 8010b3a:	454b      	cmp	r3, r9
 8010b3c:	d205      	bcs.n	8010b4a <__cvt+0xb0>
 8010b3e:	1c59      	adds	r1, r3, #1
 8010b40:	9103      	str	r1, [sp, #12]
 8010b42:	701a      	strb	r2, [r3, #0]
 8010b44:	e7f8      	b.n	8010b38 <__cvt+0x9e>
 8010b46:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b4a:	9b03      	ldr	r3, [sp, #12]
 8010b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b4e:	eba3 0308 	sub.w	r3, r3, r8
 8010b52:	4640      	mov	r0, r8
 8010b54:	6013      	str	r3, [r2, #0]
 8010b56:	b004      	add	sp, #16
 8010b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010b5c <__exponent>:
 8010b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b5e:	2900      	cmp	r1, #0
 8010b60:	4604      	mov	r4, r0
 8010b62:	bfba      	itte	lt
 8010b64:	4249      	neglt	r1, r1
 8010b66:	232d      	movlt	r3, #45	; 0x2d
 8010b68:	232b      	movge	r3, #43	; 0x2b
 8010b6a:	2909      	cmp	r1, #9
 8010b6c:	f804 2b02 	strb.w	r2, [r4], #2
 8010b70:	7043      	strb	r3, [r0, #1]
 8010b72:	dd20      	ble.n	8010bb6 <__exponent+0x5a>
 8010b74:	f10d 0307 	add.w	r3, sp, #7
 8010b78:	461f      	mov	r7, r3
 8010b7a:	260a      	movs	r6, #10
 8010b7c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010b80:	fb06 1115 	mls	r1, r6, r5, r1
 8010b84:	3130      	adds	r1, #48	; 0x30
 8010b86:	2d09      	cmp	r5, #9
 8010b88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010b8c:	f103 32ff 	add.w	r2, r3, #4294967295
 8010b90:	4629      	mov	r1, r5
 8010b92:	dc09      	bgt.n	8010ba8 <__exponent+0x4c>
 8010b94:	3130      	adds	r1, #48	; 0x30
 8010b96:	3b02      	subs	r3, #2
 8010b98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010b9c:	42bb      	cmp	r3, r7
 8010b9e:	4622      	mov	r2, r4
 8010ba0:	d304      	bcc.n	8010bac <__exponent+0x50>
 8010ba2:	1a10      	subs	r0, r2, r0
 8010ba4:	b003      	add	sp, #12
 8010ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ba8:	4613      	mov	r3, r2
 8010baa:	e7e7      	b.n	8010b7c <__exponent+0x20>
 8010bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bb0:	f804 2b01 	strb.w	r2, [r4], #1
 8010bb4:	e7f2      	b.n	8010b9c <__exponent+0x40>
 8010bb6:	2330      	movs	r3, #48	; 0x30
 8010bb8:	4419      	add	r1, r3
 8010bba:	7083      	strb	r3, [r0, #2]
 8010bbc:	1d02      	adds	r2, r0, #4
 8010bbe:	70c1      	strb	r1, [r0, #3]
 8010bc0:	e7ef      	b.n	8010ba2 <__exponent+0x46>
	...

08010bc4 <_printf_float>:
 8010bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc8:	b08d      	sub	sp, #52	; 0x34
 8010bca:	460c      	mov	r4, r1
 8010bcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010bd0:	4616      	mov	r6, r2
 8010bd2:	461f      	mov	r7, r3
 8010bd4:	4605      	mov	r5, r0
 8010bd6:	f002 fe27 	bl	8013828 <_localeconv_r>
 8010bda:	6803      	ldr	r3, [r0, #0]
 8010bdc:	9304      	str	r3, [sp, #16]
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7ef fb1e 	bl	8000220 <strlen>
 8010be4:	2300      	movs	r3, #0
 8010be6:	930a      	str	r3, [sp, #40]	; 0x28
 8010be8:	f8d8 3000 	ldr.w	r3, [r8]
 8010bec:	9005      	str	r0, [sp, #20]
 8010bee:	3307      	adds	r3, #7
 8010bf0:	f023 0307 	bic.w	r3, r3, #7
 8010bf4:	f103 0208 	add.w	r2, r3, #8
 8010bf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010bfc:	f8d4 b000 	ldr.w	fp, [r4]
 8010c00:	f8c8 2000 	str.w	r2, [r8]
 8010c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c0c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010c10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c14:	9307      	str	r3, [sp, #28]
 8010c16:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c1e:	4ba7      	ldr	r3, [pc, #668]	; (8010ebc <_printf_float+0x2f8>)
 8010c20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c24:	f7ef ffaa 	bl	8000b7c <__aeabi_dcmpun>
 8010c28:	bb70      	cbnz	r0, 8010c88 <_printf_float+0xc4>
 8010c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c2e:	4ba3      	ldr	r3, [pc, #652]	; (8010ebc <_printf_float+0x2f8>)
 8010c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c34:	f7ef ff84 	bl	8000b40 <__aeabi_dcmple>
 8010c38:	bb30      	cbnz	r0, 8010c88 <_printf_float+0xc4>
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	4640      	mov	r0, r8
 8010c40:	4649      	mov	r1, r9
 8010c42:	f7ef ff73 	bl	8000b2c <__aeabi_dcmplt>
 8010c46:	b110      	cbz	r0, 8010c4e <_printf_float+0x8a>
 8010c48:	232d      	movs	r3, #45	; 0x2d
 8010c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c4e:	4a9c      	ldr	r2, [pc, #624]	; (8010ec0 <_printf_float+0x2fc>)
 8010c50:	4b9c      	ldr	r3, [pc, #624]	; (8010ec4 <_printf_float+0x300>)
 8010c52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010c56:	bf8c      	ite	hi
 8010c58:	4690      	movhi	r8, r2
 8010c5a:	4698      	movls	r8, r3
 8010c5c:	2303      	movs	r3, #3
 8010c5e:	f02b 0204 	bic.w	r2, fp, #4
 8010c62:	6123      	str	r3, [r4, #16]
 8010c64:	6022      	str	r2, [r4, #0]
 8010c66:	f04f 0900 	mov.w	r9, #0
 8010c6a:	9700      	str	r7, [sp, #0]
 8010c6c:	4633      	mov	r3, r6
 8010c6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c70:	4621      	mov	r1, r4
 8010c72:	4628      	mov	r0, r5
 8010c74:	f000 f9e6 	bl	8011044 <_printf_common>
 8010c78:	3001      	adds	r0, #1
 8010c7a:	f040 808d 	bne.w	8010d98 <_printf_float+0x1d4>
 8010c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c82:	b00d      	add	sp, #52	; 0x34
 8010c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c88:	4642      	mov	r2, r8
 8010c8a:	464b      	mov	r3, r9
 8010c8c:	4640      	mov	r0, r8
 8010c8e:	4649      	mov	r1, r9
 8010c90:	f7ef ff74 	bl	8000b7c <__aeabi_dcmpun>
 8010c94:	b110      	cbz	r0, 8010c9c <_printf_float+0xd8>
 8010c96:	4a8c      	ldr	r2, [pc, #560]	; (8010ec8 <_printf_float+0x304>)
 8010c98:	4b8c      	ldr	r3, [pc, #560]	; (8010ecc <_printf_float+0x308>)
 8010c9a:	e7da      	b.n	8010c52 <_printf_float+0x8e>
 8010c9c:	6861      	ldr	r1, [r4, #4]
 8010c9e:	1c4b      	adds	r3, r1, #1
 8010ca0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010ca4:	a80a      	add	r0, sp, #40	; 0x28
 8010ca6:	d13e      	bne.n	8010d26 <_printf_float+0x162>
 8010ca8:	2306      	movs	r3, #6
 8010caa:	6063      	str	r3, [r4, #4]
 8010cac:	2300      	movs	r3, #0
 8010cae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010cb2:	ab09      	add	r3, sp, #36	; 0x24
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	ec49 8b10 	vmov	d0, r8, r9
 8010cba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010cbe:	6022      	str	r2, [r4, #0]
 8010cc0:	f8cd a004 	str.w	sl, [sp, #4]
 8010cc4:	6861      	ldr	r1, [r4, #4]
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	f7ff fee7 	bl	8010a9a <__cvt>
 8010ccc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010cd0:	2b47      	cmp	r3, #71	; 0x47
 8010cd2:	4680      	mov	r8, r0
 8010cd4:	d109      	bne.n	8010cea <_printf_float+0x126>
 8010cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cd8:	1cd8      	adds	r0, r3, #3
 8010cda:	db02      	blt.n	8010ce2 <_printf_float+0x11e>
 8010cdc:	6862      	ldr	r2, [r4, #4]
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	dd47      	ble.n	8010d72 <_printf_float+0x1ae>
 8010ce2:	f1aa 0a02 	sub.w	sl, sl, #2
 8010ce6:	fa5f fa8a 	uxtb.w	sl, sl
 8010cea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010cee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cf0:	d824      	bhi.n	8010d3c <_printf_float+0x178>
 8010cf2:	3901      	subs	r1, #1
 8010cf4:	4652      	mov	r2, sl
 8010cf6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010cfa:	9109      	str	r1, [sp, #36]	; 0x24
 8010cfc:	f7ff ff2e 	bl	8010b5c <__exponent>
 8010d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d02:	1813      	adds	r3, r2, r0
 8010d04:	2a01      	cmp	r2, #1
 8010d06:	4681      	mov	r9, r0
 8010d08:	6123      	str	r3, [r4, #16]
 8010d0a:	dc02      	bgt.n	8010d12 <_printf_float+0x14e>
 8010d0c:	6822      	ldr	r2, [r4, #0]
 8010d0e:	07d1      	lsls	r1, r2, #31
 8010d10:	d501      	bpl.n	8010d16 <_printf_float+0x152>
 8010d12:	3301      	adds	r3, #1
 8010d14:	6123      	str	r3, [r4, #16]
 8010d16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d0a5      	beq.n	8010c6a <_printf_float+0xa6>
 8010d1e:	232d      	movs	r3, #45	; 0x2d
 8010d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d24:	e7a1      	b.n	8010c6a <_printf_float+0xa6>
 8010d26:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010d2a:	f000 8177 	beq.w	801101c <_printf_float+0x458>
 8010d2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010d32:	d1bb      	bne.n	8010cac <_printf_float+0xe8>
 8010d34:	2900      	cmp	r1, #0
 8010d36:	d1b9      	bne.n	8010cac <_printf_float+0xe8>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e7b6      	b.n	8010caa <_printf_float+0xe6>
 8010d3c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010d40:	d119      	bne.n	8010d76 <_printf_float+0x1b2>
 8010d42:	2900      	cmp	r1, #0
 8010d44:	6863      	ldr	r3, [r4, #4]
 8010d46:	dd0c      	ble.n	8010d62 <_printf_float+0x19e>
 8010d48:	6121      	str	r1, [r4, #16]
 8010d4a:	b913      	cbnz	r3, 8010d52 <_printf_float+0x18e>
 8010d4c:	6822      	ldr	r2, [r4, #0]
 8010d4e:	07d2      	lsls	r2, r2, #31
 8010d50:	d502      	bpl.n	8010d58 <_printf_float+0x194>
 8010d52:	3301      	adds	r3, #1
 8010d54:	440b      	add	r3, r1
 8010d56:	6123      	str	r3, [r4, #16]
 8010d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8010d5c:	f04f 0900 	mov.w	r9, #0
 8010d60:	e7d9      	b.n	8010d16 <_printf_float+0x152>
 8010d62:	b913      	cbnz	r3, 8010d6a <_printf_float+0x1a6>
 8010d64:	6822      	ldr	r2, [r4, #0]
 8010d66:	07d0      	lsls	r0, r2, #31
 8010d68:	d501      	bpl.n	8010d6e <_printf_float+0x1aa>
 8010d6a:	3302      	adds	r3, #2
 8010d6c:	e7f3      	b.n	8010d56 <_printf_float+0x192>
 8010d6e:	2301      	movs	r3, #1
 8010d70:	e7f1      	b.n	8010d56 <_printf_float+0x192>
 8010d72:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010d76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	db05      	blt.n	8010d8a <_printf_float+0x1c6>
 8010d7e:	6822      	ldr	r2, [r4, #0]
 8010d80:	6123      	str	r3, [r4, #16]
 8010d82:	07d1      	lsls	r1, r2, #31
 8010d84:	d5e8      	bpl.n	8010d58 <_printf_float+0x194>
 8010d86:	3301      	adds	r3, #1
 8010d88:	e7e5      	b.n	8010d56 <_printf_float+0x192>
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	bfd4      	ite	le
 8010d8e:	f1c3 0302 	rsble	r3, r3, #2
 8010d92:	2301      	movgt	r3, #1
 8010d94:	4413      	add	r3, r2
 8010d96:	e7de      	b.n	8010d56 <_printf_float+0x192>
 8010d98:	6823      	ldr	r3, [r4, #0]
 8010d9a:	055a      	lsls	r2, r3, #21
 8010d9c:	d407      	bmi.n	8010dae <_printf_float+0x1ea>
 8010d9e:	6923      	ldr	r3, [r4, #16]
 8010da0:	4642      	mov	r2, r8
 8010da2:	4631      	mov	r1, r6
 8010da4:	4628      	mov	r0, r5
 8010da6:	47b8      	blx	r7
 8010da8:	3001      	adds	r0, #1
 8010daa:	d12b      	bne.n	8010e04 <_printf_float+0x240>
 8010dac:	e767      	b.n	8010c7e <_printf_float+0xba>
 8010dae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010db2:	f240 80dc 	bls.w	8010f6e <_printf_float+0x3aa>
 8010db6:	2200      	movs	r2, #0
 8010db8:	2300      	movs	r3, #0
 8010dba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010dbe:	f7ef feab 	bl	8000b18 <__aeabi_dcmpeq>
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	d033      	beq.n	8010e2e <_printf_float+0x26a>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	4a41      	ldr	r2, [pc, #260]	; (8010ed0 <_printf_float+0x30c>)
 8010dca:	4631      	mov	r1, r6
 8010dcc:	4628      	mov	r0, r5
 8010dce:	47b8      	blx	r7
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	f43f af54 	beq.w	8010c7e <_printf_float+0xba>
 8010dd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	db02      	blt.n	8010de4 <_printf_float+0x220>
 8010dde:	6823      	ldr	r3, [r4, #0]
 8010de0:	07d8      	lsls	r0, r3, #31
 8010de2:	d50f      	bpl.n	8010e04 <_printf_float+0x240>
 8010de4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010de8:	4631      	mov	r1, r6
 8010dea:	4628      	mov	r0, r5
 8010dec:	47b8      	blx	r7
 8010dee:	3001      	adds	r0, #1
 8010df0:	f43f af45 	beq.w	8010c7e <_printf_float+0xba>
 8010df4:	f04f 0800 	mov.w	r8, #0
 8010df8:	f104 091a 	add.w	r9, r4, #26
 8010dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	4543      	cmp	r3, r8
 8010e02:	dc09      	bgt.n	8010e18 <_printf_float+0x254>
 8010e04:	6823      	ldr	r3, [r4, #0]
 8010e06:	079b      	lsls	r3, r3, #30
 8010e08:	f100 8103 	bmi.w	8011012 <_printf_float+0x44e>
 8010e0c:	68e0      	ldr	r0, [r4, #12]
 8010e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e10:	4298      	cmp	r0, r3
 8010e12:	bfb8      	it	lt
 8010e14:	4618      	movlt	r0, r3
 8010e16:	e734      	b.n	8010c82 <_printf_float+0xbe>
 8010e18:	2301      	movs	r3, #1
 8010e1a:	464a      	mov	r2, r9
 8010e1c:	4631      	mov	r1, r6
 8010e1e:	4628      	mov	r0, r5
 8010e20:	47b8      	blx	r7
 8010e22:	3001      	adds	r0, #1
 8010e24:	f43f af2b 	beq.w	8010c7e <_printf_float+0xba>
 8010e28:	f108 0801 	add.w	r8, r8, #1
 8010e2c:	e7e6      	b.n	8010dfc <_printf_float+0x238>
 8010e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	dc2b      	bgt.n	8010e8c <_printf_float+0x2c8>
 8010e34:	2301      	movs	r3, #1
 8010e36:	4a26      	ldr	r2, [pc, #152]	; (8010ed0 <_printf_float+0x30c>)
 8010e38:	4631      	mov	r1, r6
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	47b8      	blx	r7
 8010e3e:	3001      	adds	r0, #1
 8010e40:	f43f af1d 	beq.w	8010c7e <_printf_float+0xba>
 8010e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e46:	b923      	cbnz	r3, 8010e52 <_printf_float+0x28e>
 8010e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e4a:	b913      	cbnz	r3, 8010e52 <_printf_float+0x28e>
 8010e4c:	6823      	ldr	r3, [r4, #0]
 8010e4e:	07d9      	lsls	r1, r3, #31
 8010e50:	d5d8      	bpl.n	8010e04 <_printf_float+0x240>
 8010e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e56:	4631      	mov	r1, r6
 8010e58:	4628      	mov	r0, r5
 8010e5a:	47b8      	blx	r7
 8010e5c:	3001      	adds	r0, #1
 8010e5e:	f43f af0e 	beq.w	8010c7e <_printf_float+0xba>
 8010e62:	f04f 0900 	mov.w	r9, #0
 8010e66:	f104 0a1a 	add.w	sl, r4, #26
 8010e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e6c:	425b      	negs	r3, r3
 8010e6e:	454b      	cmp	r3, r9
 8010e70:	dc01      	bgt.n	8010e76 <_printf_float+0x2b2>
 8010e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e74:	e794      	b.n	8010da0 <_printf_float+0x1dc>
 8010e76:	2301      	movs	r3, #1
 8010e78:	4652      	mov	r2, sl
 8010e7a:	4631      	mov	r1, r6
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	47b8      	blx	r7
 8010e80:	3001      	adds	r0, #1
 8010e82:	f43f aefc 	beq.w	8010c7e <_printf_float+0xba>
 8010e86:	f109 0901 	add.w	r9, r9, #1
 8010e8a:	e7ee      	b.n	8010e6a <_printf_float+0x2a6>
 8010e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e90:	429a      	cmp	r2, r3
 8010e92:	bfa8      	it	ge
 8010e94:	461a      	movge	r2, r3
 8010e96:	2a00      	cmp	r2, #0
 8010e98:	4691      	mov	r9, r2
 8010e9a:	dd07      	ble.n	8010eac <_printf_float+0x2e8>
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	4631      	mov	r1, r6
 8010ea0:	4642      	mov	r2, r8
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	47b8      	blx	r7
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	f43f aee9 	beq.w	8010c7e <_printf_float+0xba>
 8010eac:	f104 031a 	add.w	r3, r4, #26
 8010eb0:	f04f 0b00 	mov.w	fp, #0
 8010eb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010eb8:	9306      	str	r3, [sp, #24]
 8010eba:	e015      	b.n	8010ee8 <_printf_float+0x324>
 8010ebc:	7fefffff 	.word	0x7fefffff
 8010ec0:	080179d6 	.word	0x080179d6
 8010ec4:	080179d2 	.word	0x080179d2
 8010ec8:	080179de 	.word	0x080179de
 8010ecc:	080179da 	.word	0x080179da
 8010ed0:	080179e2 	.word	0x080179e2
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	9a06      	ldr	r2, [sp, #24]
 8010ed8:	4631      	mov	r1, r6
 8010eda:	4628      	mov	r0, r5
 8010edc:	47b8      	blx	r7
 8010ede:	3001      	adds	r0, #1
 8010ee0:	f43f aecd 	beq.w	8010c7e <_printf_float+0xba>
 8010ee4:	f10b 0b01 	add.w	fp, fp, #1
 8010ee8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010eec:	ebaa 0309 	sub.w	r3, sl, r9
 8010ef0:	455b      	cmp	r3, fp
 8010ef2:	dcef      	bgt.n	8010ed4 <_printf_float+0x310>
 8010ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	44d0      	add	r8, sl
 8010efc:	db15      	blt.n	8010f2a <_printf_float+0x366>
 8010efe:	6823      	ldr	r3, [r4, #0]
 8010f00:	07da      	lsls	r2, r3, #31
 8010f02:	d412      	bmi.n	8010f2a <_printf_float+0x366>
 8010f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f08:	eba3 020a 	sub.w	r2, r3, sl
 8010f0c:	eba3 0a01 	sub.w	sl, r3, r1
 8010f10:	4592      	cmp	sl, r2
 8010f12:	bfa8      	it	ge
 8010f14:	4692      	movge	sl, r2
 8010f16:	f1ba 0f00 	cmp.w	sl, #0
 8010f1a:	dc0e      	bgt.n	8010f3a <_printf_float+0x376>
 8010f1c:	f04f 0800 	mov.w	r8, #0
 8010f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f24:	f104 091a 	add.w	r9, r4, #26
 8010f28:	e019      	b.n	8010f5e <_printf_float+0x39a>
 8010f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f2e:	4631      	mov	r1, r6
 8010f30:	4628      	mov	r0, r5
 8010f32:	47b8      	blx	r7
 8010f34:	3001      	adds	r0, #1
 8010f36:	d1e5      	bne.n	8010f04 <_printf_float+0x340>
 8010f38:	e6a1      	b.n	8010c7e <_printf_float+0xba>
 8010f3a:	4653      	mov	r3, sl
 8010f3c:	4642      	mov	r2, r8
 8010f3e:	4631      	mov	r1, r6
 8010f40:	4628      	mov	r0, r5
 8010f42:	47b8      	blx	r7
 8010f44:	3001      	adds	r0, #1
 8010f46:	d1e9      	bne.n	8010f1c <_printf_float+0x358>
 8010f48:	e699      	b.n	8010c7e <_printf_float+0xba>
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	464a      	mov	r2, r9
 8010f4e:	4631      	mov	r1, r6
 8010f50:	4628      	mov	r0, r5
 8010f52:	47b8      	blx	r7
 8010f54:	3001      	adds	r0, #1
 8010f56:	f43f ae92 	beq.w	8010c7e <_printf_float+0xba>
 8010f5a:	f108 0801 	add.w	r8, r8, #1
 8010f5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f62:	1a9b      	subs	r3, r3, r2
 8010f64:	eba3 030a 	sub.w	r3, r3, sl
 8010f68:	4543      	cmp	r3, r8
 8010f6a:	dcee      	bgt.n	8010f4a <_printf_float+0x386>
 8010f6c:	e74a      	b.n	8010e04 <_printf_float+0x240>
 8010f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f70:	2a01      	cmp	r2, #1
 8010f72:	dc01      	bgt.n	8010f78 <_printf_float+0x3b4>
 8010f74:	07db      	lsls	r3, r3, #31
 8010f76:	d53a      	bpl.n	8010fee <_printf_float+0x42a>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	4642      	mov	r2, r8
 8010f7c:	4631      	mov	r1, r6
 8010f7e:	4628      	mov	r0, r5
 8010f80:	47b8      	blx	r7
 8010f82:	3001      	adds	r0, #1
 8010f84:	f43f ae7b 	beq.w	8010c7e <_printf_float+0xba>
 8010f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f8c:	4631      	mov	r1, r6
 8010f8e:	4628      	mov	r0, r5
 8010f90:	47b8      	blx	r7
 8010f92:	3001      	adds	r0, #1
 8010f94:	f108 0801 	add.w	r8, r8, #1
 8010f98:	f43f ae71 	beq.w	8010c7e <_printf_float+0xba>
 8010f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f103 3aff 	add.w	sl, r3, #4294967295
 8010fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fa8:	2300      	movs	r3, #0
 8010faa:	f7ef fdb5 	bl	8000b18 <__aeabi_dcmpeq>
 8010fae:	b9c8      	cbnz	r0, 8010fe4 <_printf_float+0x420>
 8010fb0:	4653      	mov	r3, sl
 8010fb2:	4642      	mov	r2, r8
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	47b8      	blx	r7
 8010fba:	3001      	adds	r0, #1
 8010fbc:	d10e      	bne.n	8010fdc <_printf_float+0x418>
 8010fbe:	e65e      	b.n	8010c7e <_printf_float+0xba>
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	4652      	mov	r2, sl
 8010fc4:	4631      	mov	r1, r6
 8010fc6:	4628      	mov	r0, r5
 8010fc8:	47b8      	blx	r7
 8010fca:	3001      	adds	r0, #1
 8010fcc:	f43f ae57 	beq.w	8010c7e <_printf_float+0xba>
 8010fd0:	f108 0801 	add.w	r8, r8, #1
 8010fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	4543      	cmp	r3, r8
 8010fda:	dcf1      	bgt.n	8010fc0 <_printf_float+0x3fc>
 8010fdc:	464b      	mov	r3, r9
 8010fde:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010fe2:	e6de      	b.n	8010da2 <_printf_float+0x1de>
 8010fe4:	f04f 0800 	mov.w	r8, #0
 8010fe8:	f104 0a1a 	add.w	sl, r4, #26
 8010fec:	e7f2      	b.n	8010fd4 <_printf_float+0x410>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e7df      	b.n	8010fb2 <_printf_float+0x3ee>
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	464a      	mov	r2, r9
 8010ff6:	4631      	mov	r1, r6
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	47b8      	blx	r7
 8010ffc:	3001      	adds	r0, #1
 8010ffe:	f43f ae3e 	beq.w	8010c7e <_printf_float+0xba>
 8011002:	f108 0801 	add.w	r8, r8, #1
 8011006:	68e3      	ldr	r3, [r4, #12]
 8011008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801100a:	1a9b      	subs	r3, r3, r2
 801100c:	4543      	cmp	r3, r8
 801100e:	dcf0      	bgt.n	8010ff2 <_printf_float+0x42e>
 8011010:	e6fc      	b.n	8010e0c <_printf_float+0x248>
 8011012:	f04f 0800 	mov.w	r8, #0
 8011016:	f104 0919 	add.w	r9, r4, #25
 801101a:	e7f4      	b.n	8011006 <_printf_float+0x442>
 801101c:	2900      	cmp	r1, #0
 801101e:	f43f ae8b 	beq.w	8010d38 <_printf_float+0x174>
 8011022:	2300      	movs	r3, #0
 8011024:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011028:	ab09      	add	r3, sp, #36	; 0x24
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	ec49 8b10 	vmov	d0, r8, r9
 8011030:	6022      	str	r2, [r4, #0]
 8011032:	f8cd a004 	str.w	sl, [sp, #4]
 8011036:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801103a:	4628      	mov	r0, r5
 801103c:	f7ff fd2d 	bl	8010a9a <__cvt>
 8011040:	4680      	mov	r8, r0
 8011042:	e648      	b.n	8010cd6 <_printf_float+0x112>

08011044 <_printf_common>:
 8011044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011048:	4691      	mov	r9, r2
 801104a:	461f      	mov	r7, r3
 801104c:	688a      	ldr	r2, [r1, #8]
 801104e:	690b      	ldr	r3, [r1, #16]
 8011050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011054:	4293      	cmp	r3, r2
 8011056:	bfb8      	it	lt
 8011058:	4613      	movlt	r3, r2
 801105a:	f8c9 3000 	str.w	r3, [r9]
 801105e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011062:	4606      	mov	r6, r0
 8011064:	460c      	mov	r4, r1
 8011066:	b112      	cbz	r2, 801106e <_printf_common+0x2a>
 8011068:	3301      	adds	r3, #1
 801106a:	f8c9 3000 	str.w	r3, [r9]
 801106e:	6823      	ldr	r3, [r4, #0]
 8011070:	0699      	lsls	r1, r3, #26
 8011072:	bf42      	ittt	mi
 8011074:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011078:	3302      	addmi	r3, #2
 801107a:	f8c9 3000 	strmi.w	r3, [r9]
 801107e:	6825      	ldr	r5, [r4, #0]
 8011080:	f015 0506 	ands.w	r5, r5, #6
 8011084:	d107      	bne.n	8011096 <_printf_common+0x52>
 8011086:	f104 0a19 	add.w	sl, r4, #25
 801108a:	68e3      	ldr	r3, [r4, #12]
 801108c:	f8d9 2000 	ldr.w	r2, [r9]
 8011090:	1a9b      	subs	r3, r3, r2
 8011092:	42ab      	cmp	r3, r5
 8011094:	dc28      	bgt.n	80110e8 <_printf_common+0xa4>
 8011096:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801109a:	6822      	ldr	r2, [r4, #0]
 801109c:	3300      	adds	r3, #0
 801109e:	bf18      	it	ne
 80110a0:	2301      	movne	r3, #1
 80110a2:	0692      	lsls	r2, r2, #26
 80110a4:	d42d      	bmi.n	8011102 <_printf_common+0xbe>
 80110a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110aa:	4639      	mov	r1, r7
 80110ac:	4630      	mov	r0, r6
 80110ae:	47c0      	blx	r8
 80110b0:	3001      	adds	r0, #1
 80110b2:	d020      	beq.n	80110f6 <_printf_common+0xb2>
 80110b4:	6823      	ldr	r3, [r4, #0]
 80110b6:	68e5      	ldr	r5, [r4, #12]
 80110b8:	f8d9 2000 	ldr.w	r2, [r9]
 80110bc:	f003 0306 	and.w	r3, r3, #6
 80110c0:	2b04      	cmp	r3, #4
 80110c2:	bf08      	it	eq
 80110c4:	1aad      	subeq	r5, r5, r2
 80110c6:	68a3      	ldr	r3, [r4, #8]
 80110c8:	6922      	ldr	r2, [r4, #16]
 80110ca:	bf0c      	ite	eq
 80110cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110d0:	2500      	movne	r5, #0
 80110d2:	4293      	cmp	r3, r2
 80110d4:	bfc4      	itt	gt
 80110d6:	1a9b      	subgt	r3, r3, r2
 80110d8:	18ed      	addgt	r5, r5, r3
 80110da:	f04f 0900 	mov.w	r9, #0
 80110de:	341a      	adds	r4, #26
 80110e0:	454d      	cmp	r5, r9
 80110e2:	d11a      	bne.n	801111a <_printf_common+0xd6>
 80110e4:	2000      	movs	r0, #0
 80110e6:	e008      	b.n	80110fa <_printf_common+0xb6>
 80110e8:	2301      	movs	r3, #1
 80110ea:	4652      	mov	r2, sl
 80110ec:	4639      	mov	r1, r7
 80110ee:	4630      	mov	r0, r6
 80110f0:	47c0      	blx	r8
 80110f2:	3001      	adds	r0, #1
 80110f4:	d103      	bne.n	80110fe <_printf_common+0xba>
 80110f6:	f04f 30ff 	mov.w	r0, #4294967295
 80110fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110fe:	3501      	adds	r5, #1
 8011100:	e7c3      	b.n	801108a <_printf_common+0x46>
 8011102:	18e1      	adds	r1, r4, r3
 8011104:	1c5a      	adds	r2, r3, #1
 8011106:	2030      	movs	r0, #48	; 0x30
 8011108:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801110c:	4422      	add	r2, r4
 801110e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011112:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011116:	3302      	adds	r3, #2
 8011118:	e7c5      	b.n	80110a6 <_printf_common+0x62>
 801111a:	2301      	movs	r3, #1
 801111c:	4622      	mov	r2, r4
 801111e:	4639      	mov	r1, r7
 8011120:	4630      	mov	r0, r6
 8011122:	47c0      	blx	r8
 8011124:	3001      	adds	r0, #1
 8011126:	d0e6      	beq.n	80110f6 <_printf_common+0xb2>
 8011128:	f109 0901 	add.w	r9, r9, #1
 801112c:	e7d8      	b.n	80110e0 <_printf_common+0x9c>
	...

08011130 <_printf_i>:
 8011130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011134:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011138:	460c      	mov	r4, r1
 801113a:	7e09      	ldrb	r1, [r1, #24]
 801113c:	b085      	sub	sp, #20
 801113e:	296e      	cmp	r1, #110	; 0x6e
 8011140:	4617      	mov	r7, r2
 8011142:	4606      	mov	r6, r0
 8011144:	4698      	mov	r8, r3
 8011146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011148:	f000 80b3 	beq.w	80112b2 <_printf_i+0x182>
 801114c:	d822      	bhi.n	8011194 <_printf_i+0x64>
 801114e:	2963      	cmp	r1, #99	; 0x63
 8011150:	d036      	beq.n	80111c0 <_printf_i+0x90>
 8011152:	d80a      	bhi.n	801116a <_printf_i+0x3a>
 8011154:	2900      	cmp	r1, #0
 8011156:	f000 80b9 	beq.w	80112cc <_printf_i+0x19c>
 801115a:	2958      	cmp	r1, #88	; 0x58
 801115c:	f000 8083 	beq.w	8011266 <_printf_i+0x136>
 8011160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011164:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011168:	e032      	b.n	80111d0 <_printf_i+0xa0>
 801116a:	2964      	cmp	r1, #100	; 0x64
 801116c:	d001      	beq.n	8011172 <_printf_i+0x42>
 801116e:	2969      	cmp	r1, #105	; 0x69
 8011170:	d1f6      	bne.n	8011160 <_printf_i+0x30>
 8011172:	6820      	ldr	r0, [r4, #0]
 8011174:	6813      	ldr	r3, [r2, #0]
 8011176:	0605      	lsls	r5, r0, #24
 8011178:	f103 0104 	add.w	r1, r3, #4
 801117c:	d52a      	bpl.n	80111d4 <_printf_i+0xa4>
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6011      	str	r1, [r2, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	da03      	bge.n	801118e <_printf_i+0x5e>
 8011186:	222d      	movs	r2, #45	; 0x2d
 8011188:	425b      	negs	r3, r3
 801118a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801118e:	486f      	ldr	r0, [pc, #444]	; (801134c <_printf_i+0x21c>)
 8011190:	220a      	movs	r2, #10
 8011192:	e039      	b.n	8011208 <_printf_i+0xd8>
 8011194:	2973      	cmp	r1, #115	; 0x73
 8011196:	f000 809d 	beq.w	80112d4 <_printf_i+0x1a4>
 801119a:	d808      	bhi.n	80111ae <_printf_i+0x7e>
 801119c:	296f      	cmp	r1, #111	; 0x6f
 801119e:	d020      	beq.n	80111e2 <_printf_i+0xb2>
 80111a0:	2970      	cmp	r1, #112	; 0x70
 80111a2:	d1dd      	bne.n	8011160 <_printf_i+0x30>
 80111a4:	6823      	ldr	r3, [r4, #0]
 80111a6:	f043 0320 	orr.w	r3, r3, #32
 80111aa:	6023      	str	r3, [r4, #0]
 80111ac:	e003      	b.n	80111b6 <_printf_i+0x86>
 80111ae:	2975      	cmp	r1, #117	; 0x75
 80111b0:	d017      	beq.n	80111e2 <_printf_i+0xb2>
 80111b2:	2978      	cmp	r1, #120	; 0x78
 80111b4:	d1d4      	bne.n	8011160 <_printf_i+0x30>
 80111b6:	2378      	movs	r3, #120	; 0x78
 80111b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80111bc:	4864      	ldr	r0, [pc, #400]	; (8011350 <_printf_i+0x220>)
 80111be:	e055      	b.n	801126c <_printf_i+0x13c>
 80111c0:	6813      	ldr	r3, [r2, #0]
 80111c2:	1d19      	adds	r1, r3, #4
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	6011      	str	r1, [r2, #0]
 80111c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111d0:	2301      	movs	r3, #1
 80111d2:	e08c      	b.n	80112ee <_printf_i+0x1be>
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	6011      	str	r1, [r2, #0]
 80111d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80111dc:	bf18      	it	ne
 80111de:	b21b      	sxthne	r3, r3
 80111e0:	e7cf      	b.n	8011182 <_printf_i+0x52>
 80111e2:	6813      	ldr	r3, [r2, #0]
 80111e4:	6825      	ldr	r5, [r4, #0]
 80111e6:	1d18      	adds	r0, r3, #4
 80111e8:	6010      	str	r0, [r2, #0]
 80111ea:	0628      	lsls	r0, r5, #24
 80111ec:	d501      	bpl.n	80111f2 <_printf_i+0xc2>
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	e002      	b.n	80111f8 <_printf_i+0xc8>
 80111f2:	0668      	lsls	r0, r5, #25
 80111f4:	d5fb      	bpl.n	80111ee <_printf_i+0xbe>
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	4854      	ldr	r0, [pc, #336]	; (801134c <_printf_i+0x21c>)
 80111fa:	296f      	cmp	r1, #111	; 0x6f
 80111fc:	bf14      	ite	ne
 80111fe:	220a      	movne	r2, #10
 8011200:	2208      	moveq	r2, #8
 8011202:	2100      	movs	r1, #0
 8011204:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011208:	6865      	ldr	r5, [r4, #4]
 801120a:	60a5      	str	r5, [r4, #8]
 801120c:	2d00      	cmp	r5, #0
 801120e:	f2c0 8095 	blt.w	801133c <_printf_i+0x20c>
 8011212:	6821      	ldr	r1, [r4, #0]
 8011214:	f021 0104 	bic.w	r1, r1, #4
 8011218:	6021      	str	r1, [r4, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d13d      	bne.n	801129a <_printf_i+0x16a>
 801121e:	2d00      	cmp	r5, #0
 8011220:	f040 808e 	bne.w	8011340 <_printf_i+0x210>
 8011224:	4665      	mov	r5, ip
 8011226:	2a08      	cmp	r2, #8
 8011228:	d10b      	bne.n	8011242 <_printf_i+0x112>
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	07db      	lsls	r3, r3, #31
 801122e:	d508      	bpl.n	8011242 <_printf_i+0x112>
 8011230:	6923      	ldr	r3, [r4, #16]
 8011232:	6862      	ldr	r2, [r4, #4]
 8011234:	429a      	cmp	r2, r3
 8011236:	bfde      	ittt	le
 8011238:	2330      	movle	r3, #48	; 0x30
 801123a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801123e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011242:	ebac 0305 	sub.w	r3, ip, r5
 8011246:	6123      	str	r3, [r4, #16]
 8011248:	f8cd 8000 	str.w	r8, [sp]
 801124c:	463b      	mov	r3, r7
 801124e:	aa03      	add	r2, sp, #12
 8011250:	4621      	mov	r1, r4
 8011252:	4630      	mov	r0, r6
 8011254:	f7ff fef6 	bl	8011044 <_printf_common>
 8011258:	3001      	adds	r0, #1
 801125a:	d14d      	bne.n	80112f8 <_printf_i+0x1c8>
 801125c:	f04f 30ff 	mov.w	r0, #4294967295
 8011260:	b005      	add	sp, #20
 8011262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011266:	4839      	ldr	r0, [pc, #228]	; (801134c <_printf_i+0x21c>)
 8011268:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801126c:	6813      	ldr	r3, [r2, #0]
 801126e:	6821      	ldr	r1, [r4, #0]
 8011270:	1d1d      	adds	r5, r3, #4
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	6015      	str	r5, [r2, #0]
 8011276:	060a      	lsls	r2, r1, #24
 8011278:	d50b      	bpl.n	8011292 <_printf_i+0x162>
 801127a:	07ca      	lsls	r2, r1, #31
 801127c:	bf44      	itt	mi
 801127e:	f041 0120 	orrmi.w	r1, r1, #32
 8011282:	6021      	strmi	r1, [r4, #0]
 8011284:	b91b      	cbnz	r3, 801128e <_printf_i+0x15e>
 8011286:	6822      	ldr	r2, [r4, #0]
 8011288:	f022 0220 	bic.w	r2, r2, #32
 801128c:	6022      	str	r2, [r4, #0]
 801128e:	2210      	movs	r2, #16
 8011290:	e7b7      	b.n	8011202 <_printf_i+0xd2>
 8011292:	064d      	lsls	r5, r1, #25
 8011294:	bf48      	it	mi
 8011296:	b29b      	uxthmi	r3, r3
 8011298:	e7ef      	b.n	801127a <_printf_i+0x14a>
 801129a:	4665      	mov	r5, ip
 801129c:	fbb3 f1f2 	udiv	r1, r3, r2
 80112a0:	fb02 3311 	mls	r3, r2, r1, r3
 80112a4:	5cc3      	ldrb	r3, [r0, r3]
 80112a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80112aa:	460b      	mov	r3, r1
 80112ac:	2900      	cmp	r1, #0
 80112ae:	d1f5      	bne.n	801129c <_printf_i+0x16c>
 80112b0:	e7b9      	b.n	8011226 <_printf_i+0xf6>
 80112b2:	6813      	ldr	r3, [r2, #0]
 80112b4:	6825      	ldr	r5, [r4, #0]
 80112b6:	6961      	ldr	r1, [r4, #20]
 80112b8:	1d18      	adds	r0, r3, #4
 80112ba:	6010      	str	r0, [r2, #0]
 80112bc:	0628      	lsls	r0, r5, #24
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	d501      	bpl.n	80112c6 <_printf_i+0x196>
 80112c2:	6019      	str	r1, [r3, #0]
 80112c4:	e002      	b.n	80112cc <_printf_i+0x19c>
 80112c6:	066a      	lsls	r2, r5, #25
 80112c8:	d5fb      	bpl.n	80112c2 <_printf_i+0x192>
 80112ca:	8019      	strh	r1, [r3, #0]
 80112cc:	2300      	movs	r3, #0
 80112ce:	6123      	str	r3, [r4, #16]
 80112d0:	4665      	mov	r5, ip
 80112d2:	e7b9      	b.n	8011248 <_printf_i+0x118>
 80112d4:	6813      	ldr	r3, [r2, #0]
 80112d6:	1d19      	adds	r1, r3, #4
 80112d8:	6011      	str	r1, [r2, #0]
 80112da:	681d      	ldr	r5, [r3, #0]
 80112dc:	6862      	ldr	r2, [r4, #4]
 80112de:	2100      	movs	r1, #0
 80112e0:	4628      	mov	r0, r5
 80112e2:	f7ee ffa5 	bl	8000230 <memchr>
 80112e6:	b108      	cbz	r0, 80112ec <_printf_i+0x1bc>
 80112e8:	1b40      	subs	r0, r0, r5
 80112ea:	6060      	str	r0, [r4, #4]
 80112ec:	6863      	ldr	r3, [r4, #4]
 80112ee:	6123      	str	r3, [r4, #16]
 80112f0:	2300      	movs	r3, #0
 80112f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112f6:	e7a7      	b.n	8011248 <_printf_i+0x118>
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	462a      	mov	r2, r5
 80112fc:	4639      	mov	r1, r7
 80112fe:	4630      	mov	r0, r6
 8011300:	47c0      	blx	r8
 8011302:	3001      	adds	r0, #1
 8011304:	d0aa      	beq.n	801125c <_printf_i+0x12c>
 8011306:	6823      	ldr	r3, [r4, #0]
 8011308:	079b      	lsls	r3, r3, #30
 801130a:	d413      	bmi.n	8011334 <_printf_i+0x204>
 801130c:	68e0      	ldr	r0, [r4, #12]
 801130e:	9b03      	ldr	r3, [sp, #12]
 8011310:	4298      	cmp	r0, r3
 8011312:	bfb8      	it	lt
 8011314:	4618      	movlt	r0, r3
 8011316:	e7a3      	b.n	8011260 <_printf_i+0x130>
 8011318:	2301      	movs	r3, #1
 801131a:	464a      	mov	r2, r9
 801131c:	4639      	mov	r1, r7
 801131e:	4630      	mov	r0, r6
 8011320:	47c0      	blx	r8
 8011322:	3001      	adds	r0, #1
 8011324:	d09a      	beq.n	801125c <_printf_i+0x12c>
 8011326:	3501      	adds	r5, #1
 8011328:	68e3      	ldr	r3, [r4, #12]
 801132a:	9a03      	ldr	r2, [sp, #12]
 801132c:	1a9b      	subs	r3, r3, r2
 801132e:	42ab      	cmp	r3, r5
 8011330:	dcf2      	bgt.n	8011318 <_printf_i+0x1e8>
 8011332:	e7eb      	b.n	801130c <_printf_i+0x1dc>
 8011334:	2500      	movs	r5, #0
 8011336:	f104 0919 	add.w	r9, r4, #25
 801133a:	e7f5      	b.n	8011328 <_printf_i+0x1f8>
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1ac      	bne.n	801129a <_printf_i+0x16a>
 8011340:	7803      	ldrb	r3, [r0, #0]
 8011342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011346:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801134a:	e76c      	b.n	8011226 <_printf_i+0xf6>
 801134c:	080179e4 	.word	0x080179e4
 8011350:	080179f5 	.word	0x080179f5

08011354 <_scanf_float>:
 8011354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	469a      	mov	sl, r3
 801135a:	688b      	ldr	r3, [r1, #8]
 801135c:	4616      	mov	r6, r2
 801135e:	1e5a      	subs	r2, r3, #1
 8011360:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011364:	b087      	sub	sp, #28
 8011366:	bf83      	ittte	hi
 8011368:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801136c:	189b      	addhi	r3, r3, r2
 801136e:	9301      	strhi	r3, [sp, #4]
 8011370:	2300      	movls	r3, #0
 8011372:	bf86      	itte	hi
 8011374:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011378:	608b      	strhi	r3, [r1, #8]
 801137a:	9301      	strls	r3, [sp, #4]
 801137c:	680b      	ldr	r3, [r1, #0]
 801137e:	4688      	mov	r8, r1
 8011380:	f04f 0b00 	mov.w	fp, #0
 8011384:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011388:	f848 3b1c 	str.w	r3, [r8], #28
 801138c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011390:	4607      	mov	r7, r0
 8011392:	460c      	mov	r4, r1
 8011394:	4645      	mov	r5, r8
 8011396:	465a      	mov	r2, fp
 8011398:	46d9      	mov	r9, fp
 801139a:	f8cd b008 	str.w	fp, [sp, #8]
 801139e:	68a1      	ldr	r1, [r4, #8]
 80113a0:	b181      	cbz	r1, 80113c4 <_scanf_float+0x70>
 80113a2:	6833      	ldr	r3, [r6, #0]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b49      	cmp	r3, #73	; 0x49
 80113a8:	d071      	beq.n	801148e <_scanf_float+0x13a>
 80113aa:	d84d      	bhi.n	8011448 <_scanf_float+0xf4>
 80113ac:	2b39      	cmp	r3, #57	; 0x39
 80113ae:	d840      	bhi.n	8011432 <_scanf_float+0xde>
 80113b0:	2b31      	cmp	r3, #49	; 0x31
 80113b2:	f080 8088 	bcs.w	80114c6 <_scanf_float+0x172>
 80113b6:	2b2d      	cmp	r3, #45	; 0x2d
 80113b8:	f000 8090 	beq.w	80114dc <_scanf_float+0x188>
 80113bc:	d815      	bhi.n	80113ea <_scanf_float+0x96>
 80113be:	2b2b      	cmp	r3, #43	; 0x2b
 80113c0:	f000 808c 	beq.w	80114dc <_scanf_float+0x188>
 80113c4:	f1b9 0f00 	cmp.w	r9, #0
 80113c8:	d003      	beq.n	80113d2 <_scanf_float+0x7e>
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113d0:	6023      	str	r3, [r4, #0]
 80113d2:	3a01      	subs	r2, #1
 80113d4:	2a01      	cmp	r2, #1
 80113d6:	f200 80ea 	bhi.w	80115ae <_scanf_float+0x25a>
 80113da:	4545      	cmp	r5, r8
 80113dc:	f200 80dc 	bhi.w	8011598 <_scanf_float+0x244>
 80113e0:	2601      	movs	r6, #1
 80113e2:	4630      	mov	r0, r6
 80113e4:	b007      	add	sp, #28
 80113e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ea:	2b2e      	cmp	r3, #46	; 0x2e
 80113ec:	f000 809f 	beq.w	801152e <_scanf_float+0x1da>
 80113f0:	2b30      	cmp	r3, #48	; 0x30
 80113f2:	d1e7      	bne.n	80113c4 <_scanf_float+0x70>
 80113f4:	6820      	ldr	r0, [r4, #0]
 80113f6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80113fa:	d064      	beq.n	80114c6 <_scanf_float+0x172>
 80113fc:	9b01      	ldr	r3, [sp, #4]
 80113fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011402:	6020      	str	r0, [r4, #0]
 8011404:	f109 0901 	add.w	r9, r9, #1
 8011408:	b11b      	cbz	r3, 8011412 <_scanf_float+0xbe>
 801140a:	3b01      	subs	r3, #1
 801140c:	3101      	adds	r1, #1
 801140e:	9301      	str	r3, [sp, #4]
 8011410:	60a1      	str	r1, [r4, #8]
 8011412:	68a3      	ldr	r3, [r4, #8]
 8011414:	3b01      	subs	r3, #1
 8011416:	60a3      	str	r3, [r4, #8]
 8011418:	6923      	ldr	r3, [r4, #16]
 801141a:	3301      	adds	r3, #1
 801141c:	6123      	str	r3, [r4, #16]
 801141e:	6873      	ldr	r3, [r6, #4]
 8011420:	3b01      	subs	r3, #1
 8011422:	2b00      	cmp	r3, #0
 8011424:	6073      	str	r3, [r6, #4]
 8011426:	f340 80ac 	ble.w	8011582 <_scanf_float+0x22e>
 801142a:	6833      	ldr	r3, [r6, #0]
 801142c:	3301      	adds	r3, #1
 801142e:	6033      	str	r3, [r6, #0]
 8011430:	e7b5      	b.n	801139e <_scanf_float+0x4a>
 8011432:	2b45      	cmp	r3, #69	; 0x45
 8011434:	f000 8085 	beq.w	8011542 <_scanf_float+0x1ee>
 8011438:	2b46      	cmp	r3, #70	; 0x46
 801143a:	d06a      	beq.n	8011512 <_scanf_float+0x1be>
 801143c:	2b41      	cmp	r3, #65	; 0x41
 801143e:	d1c1      	bne.n	80113c4 <_scanf_float+0x70>
 8011440:	2a01      	cmp	r2, #1
 8011442:	d1bf      	bne.n	80113c4 <_scanf_float+0x70>
 8011444:	2202      	movs	r2, #2
 8011446:	e046      	b.n	80114d6 <_scanf_float+0x182>
 8011448:	2b65      	cmp	r3, #101	; 0x65
 801144a:	d07a      	beq.n	8011542 <_scanf_float+0x1ee>
 801144c:	d818      	bhi.n	8011480 <_scanf_float+0x12c>
 801144e:	2b54      	cmp	r3, #84	; 0x54
 8011450:	d066      	beq.n	8011520 <_scanf_float+0x1cc>
 8011452:	d811      	bhi.n	8011478 <_scanf_float+0x124>
 8011454:	2b4e      	cmp	r3, #78	; 0x4e
 8011456:	d1b5      	bne.n	80113c4 <_scanf_float+0x70>
 8011458:	2a00      	cmp	r2, #0
 801145a:	d146      	bne.n	80114ea <_scanf_float+0x196>
 801145c:	f1b9 0f00 	cmp.w	r9, #0
 8011460:	d145      	bne.n	80114ee <_scanf_float+0x19a>
 8011462:	6821      	ldr	r1, [r4, #0]
 8011464:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011468:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801146c:	d13f      	bne.n	80114ee <_scanf_float+0x19a>
 801146e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011472:	6021      	str	r1, [r4, #0]
 8011474:	2201      	movs	r2, #1
 8011476:	e02e      	b.n	80114d6 <_scanf_float+0x182>
 8011478:	2b59      	cmp	r3, #89	; 0x59
 801147a:	d01e      	beq.n	80114ba <_scanf_float+0x166>
 801147c:	2b61      	cmp	r3, #97	; 0x61
 801147e:	e7de      	b.n	801143e <_scanf_float+0xea>
 8011480:	2b6e      	cmp	r3, #110	; 0x6e
 8011482:	d0e9      	beq.n	8011458 <_scanf_float+0x104>
 8011484:	d815      	bhi.n	80114b2 <_scanf_float+0x15e>
 8011486:	2b66      	cmp	r3, #102	; 0x66
 8011488:	d043      	beq.n	8011512 <_scanf_float+0x1be>
 801148a:	2b69      	cmp	r3, #105	; 0x69
 801148c:	d19a      	bne.n	80113c4 <_scanf_float+0x70>
 801148e:	f1bb 0f00 	cmp.w	fp, #0
 8011492:	d138      	bne.n	8011506 <_scanf_float+0x1b2>
 8011494:	f1b9 0f00 	cmp.w	r9, #0
 8011498:	d197      	bne.n	80113ca <_scanf_float+0x76>
 801149a:	6821      	ldr	r1, [r4, #0]
 801149c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80114a0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80114a4:	d195      	bne.n	80113d2 <_scanf_float+0x7e>
 80114a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80114aa:	6021      	str	r1, [r4, #0]
 80114ac:	f04f 0b01 	mov.w	fp, #1
 80114b0:	e011      	b.n	80114d6 <_scanf_float+0x182>
 80114b2:	2b74      	cmp	r3, #116	; 0x74
 80114b4:	d034      	beq.n	8011520 <_scanf_float+0x1cc>
 80114b6:	2b79      	cmp	r3, #121	; 0x79
 80114b8:	d184      	bne.n	80113c4 <_scanf_float+0x70>
 80114ba:	f1bb 0f07 	cmp.w	fp, #7
 80114be:	d181      	bne.n	80113c4 <_scanf_float+0x70>
 80114c0:	f04f 0b08 	mov.w	fp, #8
 80114c4:	e007      	b.n	80114d6 <_scanf_float+0x182>
 80114c6:	eb12 0f0b 	cmn.w	r2, fp
 80114ca:	f47f af7b 	bne.w	80113c4 <_scanf_float+0x70>
 80114ce:	6821      	ldr	r1, [r4, #0]
 80114d0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80114d4:	6021      	str	r1, [r4, #0]
 80114d6:	702b      	strb	r3, [r5, #0]
 80114d8:	3501      	adds	r5, #1
 80114da:	e79a      	b.n	8011412 <_scanf_float+0xbe>
 80114dc:	6821      	ldr	r1, [r4, #0]
 80114de:	0608      	lsls	r0, r1, #24
 80114e0:	f57f af70 	bpl.w	80113c4 <_scanf_float+0x70>
 80114e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80114e8:	e7f4      	b.n	80114d4 <_scanf_float+0x180>
 80114ea:	2a02      	cmp	r2, #2
 80114ec:	d047      	beq.n	801157e <_scanf_float+0x22a>
 80114ee:	f1bb 0f01 	cmp.w	fp, #1
 80114f2:	d003      	beq.n	80114fc <_scanf_float+0x1a8>
 80114f4:	f1bb 0f04 	cmp.w	fp, #4
 80114f8:	f47f af64 	bne.w	80113c4 <_scanf_float+0x70>
 80114fc:	f10b 0b01 	add.w	fp, fp, #1
 8011500:	fa5f fb8b 	uxtb.w	fp, fp
 8011504:	e7e7      	b.n	80114d6 <_scanf_float+0x182>
 8011506:	f1bb 0f03 	cmp.w	fp, #3
 801150a:	d0f7      	beq.n	80114fc <_scanf_float+0x1a8>
 801150c:	f1bb 0f05 	cmp.w	fp, #5
 8011510:	e7f2      	b.n	80114f8 <_scanf_float+0x1a4>
 8011512:	f1bb 0f02 	cmp.w	fp, #2
 8011516:	f47f af55 	bne.w	80113c4 <_scanf_float+0x70>
 801151a:	f04f 0b03 	mov.w	fp, #3
 801151e:	e7da      	b.n	80114d6 <_scanf_float+0x182>
 8011520:	f1bb 0f06 	cmp.w	fp, #6
 8011524:	f47f af4e 	bne.w	80113c4 <_scanf_float+0x70>
 8011528:	f04f 0b07 	mov.w	fp, #7
 801152c:	e7d3      	b.n	80114d6 <_scanf_float+0x182>
 801152e:	6821      	ldr	r1, [r4, #0]
 8011530:	0588      	lsls	r0, r1, #22
 8011532:	f57f af47 	bpl.w	80113c4 <_scanf_float+0x70>
 8011536:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801153a:	6021      	str	r1, [r4, #0]
 801153c:	f8cd 9008 	str.w	r9, [sp, #8]
 8011540:	e7c9      	b.n	80114d6 <_scanf_float+0x182>
 8011542:	6821      	ldr	r1, [r4, #0]
 8011544:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011548:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801154c:	d006      	beq.n	801155c <_scanf_float+0x208>
 801154e:	0548      	lsls	r0, r1, #21
 8011550:	f57f af38 	bpl.w	80113c4 <_scanf_float+0x70>
 8011554:	f1b9 0f00 	cmp.w	r9, #0
 8011558:	f43f af3b 	beq.w	80113d2 <_scanf_float+0x7e>
 801155c:	0588      	lsls	r0, r1, #22
 801155e:	bf58      	it	pl
 8011560:	9802      	ldrpl	r0, [sp, #8]
 8011562:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011566:	bf58      	it	pl
 8011568:	eba9 0000 	subpl.w	r0, r9, r0
 801156c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8011570:	bf58      	it	pl
 8011572:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011576:	6021      	str	r1, [r4, #0]
 8011578:	f04f 0900 	mov.w	r9, #0
 801157c:	e7ab      	b.n	80114d6 <_scanf_float+0x182>
 801157e:	2203      	movs	r2, #3
 8011580:	e7a9      	b.n	80114d6 <_scanf_float+0x182>
 8011582:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011586:	9205      	str	r2, [sp, #20]
 8011588:	4631      	mov	r1, r6
 801158a:	4638      	mov	r0, r7
 801158c:	4798      	blx	r3
 801158e:	9a05      	ldr	r2, [sp, #20]
 8011590:	2800      	cmp	r0, #0
 8011592:	f43f af04 	beq.w	801139e <_scanf_float+0x4a>
 8011596:	e715      	b.n	80113c4 <_scanf_float+0x70>
 8011598:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801159c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80115a0:	4632      	mov	r2, r6
 80115a2:	4638      	mov	r0, r7
 80115a4:	4798      	blx	r3
 80115a6:	6923      	ldr	r3, [r4, #16]
 80115a8:	3b01      	subs	r3, #1
 80115aa:	6123      	str	r3, [r4, #16]
 80115ac:	e715      	b.n	80113da <_scanf_float+0x86>
 80115ae:	f10b 33ff 	add.w	r3, fp, #4294967295
 80115b2:	2b06      	cmp	r3, #6
 80115b4:	d80a      	bhi.n	80115cc <_scanf_float+0x278>
 80115b6:	f1bb 0f02 	cmp.w	fp, #2
 80115ba:	d968      	bls.n	801168e <_scanf_float+0x33a>
 80115bc:	f1ab 0b03 	sub.w	fp, fp, #3
 80115c0:	fa5f fb8b 	uxtb.w	fp, fp
 80115c4:	eba5 0b0b 	sub.w	fp, r5, fp
 80115c8:	455d      	cmp	r5, fp
 80115ca:	d14b      	bne.n	8011664 <_scanf_float+0x310>
 80115cc:	6823      	ldr	r3, [r4, #0]
 80115ce:	05da      	lsls	r2, r3, #23
 80115d0:	d51f      	bpl.n	8011612 <_scanf_float+0x2be>
 80115d2:	055b      	lsls	r3, r3, #21
 80115d4:	d468      	bmi.n	80116a8 <_scanf_float+0x354>
 80115d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80115da:	6923      	ldr	r3, [r4, #16]
 80115dc:	2965      	cmp	r1, #101	; 0x65
 80115de:	f103 33ff 	add.w	r3, r3, #4294967295
 80115e2:	f105 3bff 	add.w	fp, r5, #4294967295
 80115e6:	6123      	str	r3, [r4, #16]
 80115e8:	d00d      	beq.n	8011606 <_scanf_float+0x2b2>
 80115ea:	2945      	cmp	r1, #69	; 0x45
 80115ec:	d00b      	beq.n	8011606 <_scanf_float+0x2b2>
 80115ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115f2:	4632      	mov	r2, r6
 80115f4:	4638      	mov	r0, r7
 80115f6:	4798      	blx	r3
 80115f8:	6923      	ldr	r3, [r4, #16]
 80115fa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80115fe:	3b01      	subs	r3, #1
 8011600:	f1a5 0b02 	sub.w	fp, r5, #2
 8011604:	6123      	str	r3, [r4, #16]
 8011606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801160a:	4632      	mov	r2, r6
 801160c:	4638      	mov	r0, r7
 801160e:	4798      	blx	r3
 8011610:	465d      	mov	r5, fp
 8011612:	6826      	ldr	r6, [r4, #0]
 8011614:	f016 0610 	ands.w	r6, r6, #16
 8011618:	d17a      	bne.n	8011710 <_scanf_float+0x3bc>
 801161a:	702e      	strb	r6, [r5, #0]
 801161c:	6823      	ldr	r3, [r4, #0]
 801161e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011626:	d142      	bne.n	80116ae <_scanf_float+0x35a>
 8011628:	9b02      	ldr	r3, [sp, #8]
 801162a:	eba9 0303 	sub.w	r3, r9, r3
 801162e:	425a      	negs	r2, r3
 8011630:	2b00      	cmp	r3, #0
 8011632:	d149      	bne.n	80116c8 <_scanf_float+0x374>
 8011634:	2200      	movs	r2, #0
 8011636:	4641      	mov	r1, r8
 8011638:	4638      	mov	r0, r7
 801163a:	f000 fead 	bl	8012398 <_strtod_r>
 801163e:	6825      	ldr	r5, [r4, #0]
 8011640:	f8da 3000 	ldr.w	r3, [sl]
 8011644:	f015 0f02 	tst.w	r5, #2
 8011648:	f103 0204 	add.w	r2, r3, #4
 801164c:	ec59 8b10 	vmov	r8, r9, d0
 8011650:	f8ca 2000 	str.w	r2, [sl]
 8011654:	d043      	beq.n	80116de <_scanf_float+0x38a>
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	e9c3 8900 	strd	r8, r9, [r3]
 801165c:	68e3      	ldr	r3, [r4, #12]
 801165e:	3301      	adds	r3, #1
 8011660:	60e3      	str	r3, [r4, #12]
 8011662:	e6be      	b.n	80113e2 <_scanf_float+0x8e>
 8011664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011668:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801166c:	4632      	mov	r2, r6
 801166e:	4638      	mov	r0, r7
 8011670:	4798      	blx	r3
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	3b01      	subs	r3, #1
 8011676:	6123      	str	r3, [r4, #16]
 8011678:	e7a6      	b.n	80115c8 <_scanf_float+0x274>
 801167a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801167e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011682:	4632      	mov	r2, r6
 8011684:	4638      	mov	r0, r7
 8011686:	4798      	blx	r3
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	3b01      	subs	r3, #1
 801168c:	6123      	str	r3, [r4, #16]
 801168e:	4545      	cmp	r5, r8
 8011690:	d8f3      	bhi.n	801167a <_scanf_float+0x326>
 8011692:	e6a5      	b.n	80113e0 <_scanf_float+0x8c>
 8011694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011698:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801169c:	4632      	mov	r2, r6
 801169e:	4638      	mov	r0, r7
 80116a0:	4798      	blx	r3
 80116a2:	6923      	ldr	r3, [r4, #16]
 80116a4:	3b01      	subs	r3, #1
 80116a6:	6123      	str	r3, [r4, #16]
 80116a8:	4545      	cmp	r5, r8
 80116aa:	d8f3      	bhi.n	8011694 <_scanf_float+0x340>
 80116ac:	e698      	b.n	80113e0 <_scanf_float+0x8c>
 80116ae:	9b03      	ldr	r3, [sp, #12]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d0bf      	beq.n	8011634 <_scanf_float+0x2e0>
 80116b4:	9904      	ldr	r1, [sp, #16]
 80116b6:	230a      	movs	r3, #10
 80116b8:	4632      	mov	r2, r6
 80116ba:	3101      	adds	r1, #1
 80116bc:	4638      	mov	r0, r7
 80116be:	f000 fef7 	bl	80124b0 <_strtol_r>
 80116c2:	9b03      	ldr	r3, [sp, #12]
 80116c4:	9d04      	ldr	r5, [sp, #16]
 80116c6:	1ac2      	subs	r2, r0, r3
 80116c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80116cc:	429d      	cmp	r5, r3
 80116ce:	bf28      	it	cs
 80116d0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80116d4:	490f      	ldr	r1, [pc, #60]	; (8011714 <_scanf_float+0x3c0>)
 80116d6:	4628      	mov	r0, r5
 80116d8:	f000 f824 	bl	8011724 <siprintf>
 80116dc:	e7aa      	b.n	8011634 <_scanf_float+0x2e0>
 80116de:	f015 0504 	ands.w	r5, r5, #4
 80116e2:	d1b8      	bne.n	8011656 <_scanf_float+0x302>
 80116e4:	681f      	ldr	r7, [r3, #0]
 80116e6:	ee10 2a10 	vmov	r2, s0
 80116ea:	464b      	mov	r3, r9
 80116ec:	ee10 0a10 	vmov	r0, s0
 80116f0:	4649      	mov	r1, r9
 80116f2:	f7ef fa43 	bl	8000b7c <__aeabi_dcmpun>
 80116f6:	b128      	cbz	r0, 8011704 <_scanf_float+0x3b0>
 80116f8:	4628      	mov	r0, r5
 80116fa:	f000 f80d 	bl	8011718 <nanf>
 80116fe:	ed87 0a00 	vstr	s0, [r7]
 8011702:	e7ab      	b.n	801165c <_scanf_float+0x308>
 8011704:	4640      	mov	r0, r8
 8011706:	4649      	mov	r1, r9
 8011708:	f7ef fa96 	bl	8000c38 <__aeabi_d2f>
 801170c:	6038      	str	r0, [r7, #0]
 801170e:	e7a5      	b.n	801165c <_scanf_float+0x308>
 8011710:	2600      	movs	r6, #0
 8011712:	e666      	b.n	80113e2 <_scanf_float+0x8e>
 8011714:	08017a06 	.word	0x08017a06

08011718 <nanf>:
 8011718:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011720 <nanf+0x8>
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	7fc00000 	.word	0x7fc00000

08011724 <siprintf>:
 8011724:	b40e      	push	{r1, r2, r3}
 8011726:	b500      	push	{lr}
 8011728:	b09c      	sub	sp, #112	; 0x70
 801172a:	ab1d      	add	r3, sp, #116	; 0x74
 801172c:	9002      	str	r0, [sp, #8]
 801172e:	9006      	str	r0, [sp, #24]
 8011730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011734:	4809      	ldr	r0, [pc, #36]	; (801175c <siprintf+0x38>)
 8011736:	9107      	str	r1, [sp, #28]
 8011738:	9104      	str	r1, [sp, #16]
 801173a:	4909      	ldr	r1, [pc, #36]	; (8011760 <siprintf+0x3c>)
 801173c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011740:	9105      	str	r1, [sp, #20]
 8011742:	6800      	ldr	r0, [r0, #0]
 8011744:	9301      	str	r3, [sp, #4]
 8011746:	a902      	add	r1, sp, #8
 8011748:	f002 fda6 	bl	8014298 <_svfiprintf_r>
 801174c:	9b02      	ldr	r3, [sp, #8]
 801174e:	2200      	movs	r2, #0
 8011750:	701a      	strb	r2, [r3, #0]
 8011752:	b01c      	add	sp, #112	; 0x70
 8011754:	f85d eb04 	ldr.w	lr, [sp], #4
 8011758:	b003      	add	sp, #12
 801175a:	4770      	bx	lr
 801175c:	20002c20 	.word	0x20002c20
 8011760:	ffff0208 	.word	0xffff0208

08011764 <strcpy>:
 8011764:	4603      	mov	r3, r0
 8011766:	f811 2b01 	ldrb.w	r2, [r1], #1
 801176a:	f803 2b01 	strb.w	r2, [r3], #1
 801176e:	2a00      	cmp	r2, #0
 8011770:	d1f9      	bne.n	8011766 <strcpy+0x2>
 8011772:	4770      	bx	lr

08011774 <sulp>:
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	4604      	mov	r4, r0
 8011778:	460d      	mov	r5, r1
 801177a:	ec45 4b10 	vmov	d0, r4, r5
 801177e:	4616      	mov	r6, r2
 8011780:	f002 fb46 	bl	8013e10 <__ulp>
 8011784:	ec51 0b10 	vmov	r0, r1, d0
 8011788:	b17e      	cbz	r6, 80117aa <sulp+0x36>
 801178a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801178e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011792:	2b00      	cmp	r3, #0
 8011794:	dd09      	ble.n	80117aa <sulp+0x36>
 8011796:	051b      	lsls	r3, r3, #20
 8011798:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801179c:	2400      	movs	r4, #0
 801179e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80117a2:	4622      	mov	r2, r4
 80117a4:	462b      	mov	r3, r5
 80117a6:	f7ee ff4f 	bl	8000648 <__aeabi_dmul>
 80117aa:	bd70      	pop	{r4, r5, r6, pc}
 80117ac:	0000      	movs	r0, r0
	...

080117b0 <_strtod_l>:
 80117b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b4:	461f      	mov	r7, r3
 80117b6:	b0a1      	sub	sp, #132	; 0x84
 80117b8:	2300      	movs	r3, #0
 80117ba:	4681      	mov	r9, r0
 80117bc:	4638      	mov	r0, r7
 80117be:	460e      	mov	r6, r1
 80117c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80117c2:	931c      	str	r3, [sp, #112]	; 0x70
 80117c4:	f002 f82d 	bl	8013822 <__localeconv_l>
 80117c8:	4680      	mov	r8, r0
 80117ca:	6800      	ldr	r0, [r0, #0]
 80117cc:	f7ee fd28 	bl	8000220 <strlen>
 80117d0:	f04f 0a00 	mov.w	sl, #0
 80117d4:	4604      	mov	r4, r0
 80117d6:	f04f 0b00 	mov.w	fp, #0
 80117da:	961b      	str	r6, [sp, #108]	; 0x6c
 80117dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117de:	781a      	ldrb	r2, [r3, #0]
 80117e0:	2a0d      	cmp	r2, #13
 80117e2:	d832      	bhi.n	801184a <_strtod_l+0x9a>
 80117e4:	2a09      	cmp	r2, #9
 80117e6:	d236      	bcs.n	8011856 <_strtod_l+0xa6>
 80117e8:	2a00      	cmp	r2, #0
 80117ea:	d03e      	beq.n	801186a <_strtod_l+0xba>
 80117ec:	2300      	movs	r3, #0
 80117ee:	930d      	str	r3, [sp, #52]	; 0x34
 80117f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80117f2:	782b      	ldrb	r3, [r5, #0]
 80117f4:	2b30      	cmp	r3, #48	; 0x30
 80117f6:	f040 80ac 	bne.w	8011952 <_strtod_l+0x1a2>
 80117fa:	786b      	ldrb	r3, [r5, #1]
 80117fc:	2b58      	cmp	r3, #88	; 0x58
 80117fe:	d001      	beq.n	8011804 <_strtod_l+0x54>
 8011800:	2b78      	cmp	r3, #120	; 0x78
 8011802:	d167      	bne.n	80118d4 <_strtod_l+0x124>
 8011804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011806:	9301      	str	r3, [sp, #4]
 8011808:	ab1c      	add	r3, sp, #112	; 0x70
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	9702      	str	r7, [sp, #8]
 801180e:	ab1d      	add	r3, sp, #116	; 0x74
 8011810:	4a88      	ldr	r2, [pc, #544]	; (8011a34 <_strtod_l+0x284>)
 8011812:	a91b      	add	r1, sp, #108	; 0x6c
 8011814:	4648      	mov	r0, r9
 8011816:	f001 fd2a 	bl	801326e <__gethex>
 801181a:	f010 0407 	ands.w	r4, r0, #7
 801181e:	4606      	mov	r6, r0
 8011820:	d005      	beq.n	801182e <_strtod_l+0x7e>
 8011822:	2c06      	cmp	r4, #6
 8011824:	d12b      	bne.n	801187e <_strtod_l+0xce>
 8011826:	3501      	adds	r5, #1
 8011828:	2300      	movs	r3, #0
 801182a:	951b      	str	r5, [sp, #108]	; 0x6c
 801182c:	930d      	str	r3, [sp, #52]	; 0x34
 801182e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011830:	2b00      	cmp	r3, #0
 8011832:	f040 859a 	bne.w	801236a <_strtod_l+0xbba>
 8011836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011838:	b1e3      	cbz	r3, 8011874 <_strtod_l+0xc4>
 801183a:	4652      	mov	r2, sl
 801183c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011840:	ec43 2b10 	vmov	d0, r2, r3
 8011844:	b021      	add	sp, #132	; 0x84
 8011846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801184a:	2a2b      	cmp	r2, #43	; 0x2b
 801184c:	d015      	beq.n	801187a <_strtod_l+0xca>
 801184e:	2a2d      	cmp	r2, #45	; 0x2d
 8011850:	d004      	beq.n	801185c <_strtod_l+0xac>
 8011852:	2a20      	cmp	r2, #32
 8011854:	d1ca      	bne.n	80117ec <_strtod_l+0x3c>
 8011856:	3301      	adds	r3, #1
 8011858:	931b      	str	r3, [sp, #108]	; 0x6c
 801185a:	e7bf      	b.n	80117dc <_strtod_l+0x2c>
 801185c:	2201      	movs	r2, #1
 801185e:	920d      	str	r2, [sp, #52]	; 0x34
 8011860:	1c5a      	adds	r2, r3, #1
 8011862:	921b      	str	r2, [sp, #108]	; 0x6c
 8011864:	785b      	ldrb	r3, [r3, #1]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d1c2      	bne.n	80117f0 <_strtod_l+0x40>
 801186a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801186c:	961b      	str	r6, [sp, #108]	; 0x6c
 801186e:	2b00      	cmp	r3, #0
 8011870:	f040 8579 	bne.w	8012366 <_strtod_l+0xbb6>
 8011874:	4652      	mov	r2, sl
 8011876:	465b      	mov	r3, fp
 8011878:	e7e2      	b.n	8011840 <_strtod_l+0x90>
 801187a:	2200      	movs	r2, #0
 801187c:	e7ef      	b.n	801185e <_strtod_l+0xae>
 801187e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011880:	b13a      	cbz	r2, 8011892 <_strtod_l+0xe2>
 8011882:	2135      	movs	r1, #53	; 0x35
 8011884:	a81e      	add	r0, sp, #120	; 0x78
 8011886:	f002 fbbb 	bl	8014000 <__copybits>
 801188a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801188c:	4648      	mov	r0, r9
 801188e:	f002 f827 	bl	80138e0 <_Bfree>
 8011892:	3c01      	subs	r4, #1
 8011894:	2c04      	cmp	r4, #4
 8011896:	d806      	bhi.n	80118a6 <_strtod_l+0xf6>
 8011898:	e8df f004 	tbb	[pc, r4]
 801189c:	1714030a 	.word	0x1714030a
 80118a0:	0a          	.byte	0x0a
 80118a1:	00          	.byte	0x00
 80118a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80118a6:	0730      	lsls	r0, r6, #28
 80118a8:	d5c1      	bpl.n	801182e <_strtod_l+0x7e>
 80118aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80118ae:	e7be      	b.n	801182e <_strtod_l+0x7e>
 80118b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80118b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80118b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80118ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80118be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80118c2:	e7f0      	b.n	80118a6 <_strtod_l+0xf6>
 80118c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011a38 <_strtod_l+0x288>
 80118c8:	e7ed      	b.n	80118a6 <_strtod_l+0xf6>
 80118ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80118ce:	f04f 3aff 	mov.w	sl, #4294967295
 80118d2:	e7e8      	b.n	80118a6 <_strtod_l+0xf6>
 80118d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80118da:	785b      	ldrb	r3, [r3, #1]
 80118dc:	2b30      	cmp	r3, #48	; 0x30
 80118de:	d0f9      	beq.n	80118d4 <_strtod_l+0x124>
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d0a4      	beq.n	801182e <_strtod_l+0x7e>
 80118e4:	2301      	movs	r3, #1
 80118e6:	2500      	movs	r5, #0
 80118e8:	9306      	str	r3, [sp, #24]
 80118ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118ec:	9308      	str	r3, [sp, #32]
 80118ee:	9507      	str	r5, [sp, #28]
 80118f0:	9505      	str	r5, [sp, #20]
 80118f2:	220a      	movs	r2, #10
 80118f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80118f6:	7807      	ldrb	r7, [r0, #0]
 80118f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80118fc:	b2d9      	uxtb	r1, r3
 80118fe:	2909      	cmp	r1, #9
 8011900:	d929      	bls.n	8011956 <_strtod_l+0x1a6>
 8011902:	4622      	mov	r2, r4
 8011904:	f8d8 1000 	ldr.w	r1, [r8]
 8011908:	f002 fdce 	bl	80144a8 <strncmp>
 801190c:	2800      	cmp	r0, #0
 801190e:	d031      	beq.n	8011974 <_strtod_l+0x1c4>
 8011910:	2000      	movs	r0, #0
 8011912:	9c05      	ldr	r4, [sp, #20]
 8011914:	9004      	str	r0, [sp, #16]
 8011916:	463b      	mov	r3, r7
 8011918:	4602      	mov	r2, r0
 801191a:	2b65      	cmp	r3, #101	; 0x65
 801191c:	d001      	beq.n	8011922 <_strtod_l+0x172>
 801191e:	2b45      	cmp	r3, #69	; 0x45
 8011920:	d114      	bne.n	801194c <_strtod_l+0x19c>
 8011922:	b924      	cbnz	r4, 801192e <_strtod_l+0x17e>
 8011924:	b910      	cbnz	r0, 801192c <_strtod_l+0x17c>
 8011926:	9b06      	ldr	r3, [sp, #24]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d09e      	beq.n	801186a <_strtod_l+0xba>
 801192c:	2400      	movs	r4, #0
 801192e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011930:	1c73      	adds	r3, r6, #1
 8011932:	931b      	str	r3, [sp, #108]	; 0x6c
 8011934:	7873      	ldrb	r3, [r6, #1]
 8011936:	2b2b      	cmp	r3, #43	; 0x2b
 8011938:	d078      	beq.n	8011a2c <_strtod_l+0x27c>
 801193a:	2b2d      	cmp	r3, #45	; 0x2d
 801193c:	d070      	beq.n	8011a20 <_strtod_l+0x270>
 801193e:	f04f 0c00 	mov.w	ip, #0
 8011942:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011946:	2f09      	cmp	r7, #9
 8011948:	d97c      	bls.n	8011a44 <_strtod_l+0x294>
 801194a:	961b      	str	r6, [sp, #108]	; 0x6c
 801194c:	f04f 0e00 	mov.w	lr, #0
 8011950:	e09a      	b.n	8011a88 <_strtod_l+0x2d8>
 8011952:	2300      	movs	r3, #0
 8011954:	e7c7      	b.n	80118e6 <_strtod_l+0x136>
 8011956:	9905      	ldr	r1, [sp, #20]
 8011958:	2908      	cmp	r1, #8
 801195a:	bfdd      	ittte	le
 801195c:	9907      	ldrle	r1, [sp, #28]
 801195e:	fb02 3301 	mlale	r3, r2, r1, r3
 8011962:	9307      	strle	r3, [sp, #28]
 8011964:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011968:	9b05      	ldr	r3, [sp, #20]
 801196a:	3001      	adds	r0, #1
 801196c:	3301      	adds	r3, #1
 801196e:	9305      	str	r3, [sp, #20]
 8011970:	901b      	str	r0, [sp, #108]	; 0x6c
 8011972:	e7bf      	b.n	80118f4 <_strtod_l+0x144>
 8011974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011976:	191a      	adds	r2, r3, r4
 8011978:	921b      	str	r2, [sp, #108]	; 0x6c
 801197a:	9a05      	ldr	r2, [sp, #20]
 801197c:	5d1b      	ldrb	r3, [r3, r4]
 801197e:	2a00      	cmp	r2, #0
 8011980:	d037      	beq.n	80119f2 <_strtod_l+0x242>
 8011982:	9c05      	ldr	r4, [sp, #20]
 8011984:	4602      	mov	r2, r0
 8011986:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801198a:	2909      	cmp	r1, #9
 801198c:	d913      	bls.n	80119b6 <_strtod_l+0x206>
 801198e:	2101      	movs	r1, #1
 8011990:	9104      	str	r1, [sp, #16]
 8011992:	e7c2      	b.n	801191a <_strtod_l+0x16a>
 8011994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011996:	1c5a      	adds	r2, r3, #1
 8011998:	921b      	str	r2, [sp, #108]	; 0x6c
 801199a:	785b      	ldrb	r3, [r3, #1]
 801199c:	3001      	adds	r0, #1
 801199e:	2b30      	cmp	r3, #48	; 0x30
 80119a0:	d0f8      	beq.n	8011994 <_strtod_l+0x1e4>
 80119a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80119a6:	2a08      	cmp	r2, #8
 80119a8:	f200 84e4 	bhi.w	8012374 <_strtod_l+0xbc4>
 80119ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80119ae:	9208      	str	r2, [sp, #32]
 80119b0:	4602      	mov	r2, r0
 80119b2:	2000      	movs	r0, #0
 80119b4:	4604      	mov	r4, r0
 80119b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80119ba:	f100 0101 	add.w	r1, r0, #1
 80119be:	d012      	beq.n	80119e6 <_strtod_l+0x236>
 80119c0:	440a      	add	r2, r1
 80119c2:	eb00 0c04 	add.w	ip, r0, r4
 80119c6:	4621      	mov	r1, r4
 80119c8:	270a      	movs	r7, #10
 80119ca:	458c      	cmp	ip, r1
 80119cc:	d113      	bne.n	80119f6 <_strtod_l+0x246>
 80119ce:	1821      	adds	r1, r4, r0
 80119d0:	2908      	cmp	r1, #8
 80119d2:	f104 0401 	add.w	r4, r4, #1
 80119d6:	4404      	add	r4, r0
 80119d8:	dc19      	bgt.n	8011a0e <_strtod_l+0x25e>
 80119da:	9b07      	ldr	r3, [sp, #28]
 80119dc:	210a      	movs	r1, #10
 80119de:	fb01 e303 	mla	r3, r1, r3, lr
 80119e2:	9307      	str	r3, [sp, #28]
 80119e4:	2100      	movs	r1, #0
 80119e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119e8:	1c58      	adds	r0, r3, #1
 80119ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80119ec:	785b      	ldrb	r3, [r3, #1]
 80119ee:	4608      	mov	r0, r1
 80119f0:	e7c9      	b.n	8011986 <_strtod_l+0x1d6>
 80119f2:	9805      	ldr	r0, [sp, #20]
 80119f4:	e7d3      	b.n	801199e <_strtod_l+0x1ee>
 80119f6:	2908      	cmp	r1, #8
 80119f8:	f101 0101 	add.w	r1, r1, #1
 80119fc:	dc03      	bgt.n	8011a06 <_strtod_l+0x256>
 80119fe:	9b07      	ldr	r3, [sp, #28]
 8011a00:	437b      	muls	r3, r7
 8011a02:	9307      	str	r3, [sp, #28]
 8011a04:	e7e1      	b.n	80119ca <_strtod_l+0x21a>
 8011a06:	2910      	cmp	r1, #16
 8011a08:	bfd8      	it	le
 8011a0a:	437d      	mulle	r5, r7
 8011a0c:	e7dd      	b.n	80119ca <_strtod_l+0x21a>
 8011a0e:	2c10      	cmp	r4, #16
 8011a10:	bfdc      	itt	le
 8011a12:	210a      	movle	r1, #10
 8011a14:	fb01 e505 	mlale	r5, r1, r5, lr
 8011a18:	e7e4      	b.n	80119e4 <_strtod_l+0x234>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	9304      	str	r3, [sp, #16]
 8011a1e:	e781      	b.n	8011924 <_strtod_l+0x174>
 8011a20:	f04f 0c01 	mov.w	ip, #1
 8011a24:	1cb3      	adds	r3, r6, #2
 8011a26:	931b      	str	r3, [sp, #108]	; 0x6c
 8011a28:	78b3      	ldrb	r3, [r6, #2]
 8011a2a:	e78a      	b.n	8011942 <_strtod_l+0x192>
 8011a2c:	f04f 0c00 	mov.w	ip, #0
 8011a30:	e7f8      	b.n	8011a24 <_strtod_l+0x274>
 8011a32:	bf00      	nop
 8011a34:	08017a0c 	.word	0x08017a0c
 8011a38:	7ff00000 	.word	0x7ff00000
 8011a3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a3e:	1c5f      	adds	r7, r3, #1
 8011a40:	971b      	str	r7, [sp, #108]	; 0x6c
 8011a42:	785b      	ldrb	r3, [r3, #1]
 8011a44:	2b30      	cmp	r3, #48	; 0x30
 8011a46:	d0f9      	beq.n	8011a3c <_strtod_l+0x28c>
 8011a48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011a4c:	2f08      	cmp	r7, #8
 8011a4e:	f63f af7d 	bhi.w	801194c <_strtod_l+0x19c>
 8011a52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011a56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a58:	930a      	str	r3, [sp, #40]	; 0x28
 8011a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a5c:	1c5f      	adds	r7, r3, #1
 8011a5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8011a60:	785b      	ldrb	r3, [r3, #1]
 8011a62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011a66:	f1b8 0f09 	cmp.w	r8, #9
 8011a6a:	d937      	bls.n	8011adc <_strtod_l+0x32c>
 8011a6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011a6e:	1a7f      	subs	r7, r7, r1
 8011a70:	2f08      	cmp	r7, #8
 8011a72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011a76:	dc37      	bgt.n	8011ae8 <_strtod_l+0x338>
 8011a78:	45be      	cmp	lr, r7
 8011a7a:	bfa8      	it	ge
 8011a7c:	46be      	movge	lr, r7
 8011a7e:	f1bc 0f00 	cmp.w	ip, #0
 8011a82:	d001      	beq.n	8011a88 <_strtod_l+0x2d8>
 8011a84:	f1ce 0e00 	rsb	lr, lr, #0
 8011a88:	2c00      	cmp	r4, #0
 8011a8a:	d151      	bne.n	8011b30 <_strtod_l+0x380>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	f47f aece 	bne.w	801182e <_strtod_l+0x7e>
 8011a92:	9a06      	ldr	r2, [sp, #24]
 8011a94:	2a00      	cmp	r2, #0
 8011a96:	f47f aeca 	bne.w	801182e <_strtod_l+0x7e>
 8011a9a:	9a04      	ldr	r2, [sp, #16]
 8011a9c:	2a00      	cmp	r2, #0
 8011a9e:	f47f aee4 	bne.w	801186a <_strtod_l+0xba>
 8011aa2:	2b4e      	cmp	r3, #78	; 0x4e
 8011aa4:	d027      	beq.n	8011af6 <_strtod_l+0x346>
 8011aa6:	dc21      	bgt.n	8011aec <_strtod_l+0x33c>
 8011aa8:	2b49      	cmp	r3, #73	; 0x49
 8011aaa:	f47f aede 	bne.w	801186a <_strtod_l+0xba>
 8011aae:	49a0      	ldr	r1, [pc, #640]	; (8011d30 <_strtod_l+0x580>)
 8011ab0:	a81b      	add	r0, sp, #108	; 0x6c
 8011ab2:	f001 fe0f 	bl	80136d4 <__match>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	f43f aed7 	beq.w	801186a <_strtod_l+0xba>
 8011abc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011abe:	499d      	ldr	r1, [pc, #628]	; (8011d34 <_strtod_l+0x584>)
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	a81b      	add	r0, sp, #108	; 0x6c
 8011ac4:	931b      	str	r3, [sp, #108]	; 0x6c
 8011ac6:	f001 fe05 	bl	80136d4 <__match>
 8011aca:	b910      	cbnz	r0, 8011ad2 <_strtod_l+0x322>
 8011acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ace:	3301      	adds	r3, #1
 8011ad0:	931b      	str	r3, [sp, #108]	; 0x6c
 8011ad2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011d48 <_strtod_l+0x598>
 8011ad6:	f04f 0a00 	mov.w	sl, #0
 8011ada:	e6a8      	b.n	801182e <_strtod_l+0x7e>
 8011adc:	210a      	movs	r1, #10
 8011ade:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011ae2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011ae6:	e7b8      	b.n	8011a5a <_strtod_l+0x2aa>
 8011ae8:	46be      	mov	lr, r7
 8011aea:	e7c8      	b.n	8011a7e <_strtod_l+0x2ce>
 8011aec:	2b69      	cmp	r3, #105	; 0x69
 8011aee:	d0de      	beq.n	8011aae <_strtod_l+0x2fe>
 8011af0:	2b6e      	cmp	r3, #110	; 0x6e
 8011af2:	f47f aeba 	bne.w	801186a <_strtod_l+0xba>
 8011af6:	4990      	ldr	r1, [pc, #576]	; (8011d38 <_strtod_l+0x588>)
 8011af8:	a81b      	add	r0, sp, #108	; 0x6c
 8011afa:	f001 fdeb 	bl	80136d4 <__match>
 8011afe:	2800      	cmp	r0, #0
 8011b00:	f43f aeb3 	beq.w	801186a <_strtod_l+0xba>
 8011b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	2b28      	cmp	r3, #40	; 0x28
 8011b0a:	d10e      	bne.n	8011b2a <_strtod_l+0x37a>
 8011b0c:	aa1e      	add	r2, sp, #120	; 0x78
 8011b0e:	498b      	ldr	r1, [pc, #556]	; (8011d3c <_strtod_l+0x58c>)
 8011b10:	a81b      	add	r0, sp, #108	; 0x6c
 8011b12:	f001 fdf3 	bl	80136fc <__hexnan>
 8011b16:	2805      	cmp	r0, #5
 8011b18:	d107      	bne.n	8011b2a <_strtod_l+0x37a>
 8011b1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011b1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011b20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011b24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011b28:	e681      	b.n	801182e <_strtod_l+0x7e>
 8011b2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011d50 <_strtod_l+0x5a0>
 8011b2e:	e7d2      	b.n	8011ad6 <_strtod_l+0x326>
 8011b30:	ebae 0302 	sub.w	r3, lr, r2
 8011b34:	9306      	str	r3, [sp, #24]
 8011b36:	9b05      	ldr	r3, [sp, #20]
 8011b38:	9807      	ldr	r0, [sp, #28]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	bf08      	it	eq
 8011b3e:	4623      	moveq	r3, r4
 8011b40:	2c10      	cmp	r4, #16
 8011b42:	9305      	str	r3, [sp, #20]
 8011b44:	46a0      	mov	r8, r4
 8011b46:	bfa8      	it	ge
 8011b48:	f04f 0810 	movge.w	r8, #16
 8011b4c:	f7ee fd02 	bl	8000554 <__aeabi_ui2d>
 8011b50:	2c09      	cmp	r4, #9
 8011b52:	4682      	mov	sl, r0
 8011b54:	468b      	mov	fp, r1
 8011b56:	dc13      	bgt.n	8011b80 <_strtod_l+0x3d0>
 8011b58:	9b06      	ldr	r3, [sp, #24]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	f43f ae67 	beq.w	801182e <_strtod_l+0x7e>
 8011b60:	9b06      	ldr	r3, [sp, #24]
 8011b62:	dd7a      	ble.n	8011c5a <_strtod_l+0x4aa>
 8011b64:	2b16      	cmp	r3, #22
 8011b66:	dc61      	bgt.n	8011c2c <_strtod_l+0x47c>
 8011b68:	4a75      	ldr	r2, [pc, #468]	; (8011d40 <_strtod_l+0x590>)
 8011b6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011b6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8011b72:	4652      	mov	r2, sl
 8011b74:	465b      	mov	r3, fp
 8011b76:	f7ee fd67 	bl	8000648 <__aeabi_dmul>
 8011b7a:	4682      	mov	sl, r0
 8011b7c:	468b      	mov	fp, r1
 8011b7e:	e656      	b.n	801182e <_strtod_l+0x7e>
 8011b80:	4b6f      	ldr	r3, [pc, #444]	; (8011d40 <_strtod_l+0x590>)
 8011b82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011b86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011b8a:	f7ee fd5d 	bl	8000648 <__aeabi_dmul>
 8011b8e:	4606      	mov	r6, r0
 8011b90:	4628      	mov	r0, r5
 8011b92:	460f      	mov	r7, r1
 8011b94:	f7ee fcde 	bl	8000554 <__aeabi_ui2d>
 8011b98:	4602      	mov	r2, r0
 8011b9a:	460b      	mov	r3, r1
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	f7ee fb9c 	bl	80002dc <__adddf3>
 8011ba4:	2c0f      	cmp	r4, #15
 8011ba6:	4682      	mov	sl, r0
 8011ba8:	468b      	mov	fp, r1
 8011baa:	ddd5      	ble.n	8011b58 <_strtod_l+0x3a8>
 8011bac:	9b06      	ldr	r3, [sp, #24]
 8011bae:	eba4 0808 	sub.w	r8, r4, r8
 8011bb2:	4498      	add	r8, r3
 8011bb4:	f1b8 0f00 	cmp.w	r8, #0
 8011bb8:	f340 8096 	ble.w	8011ce8 <_strtod_l+0x538>
 8011bbc:	f018 030f 	ands.w	r3, r8, #15
 8011bc0:	d00a      	beq.n	8011bd8 <_strtod_l+0x428>
 8011bc2:	495f      	ldr	r1, [pc, #380]	; (8011d40 <_strtod_l+0x590>)
 8011bc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011bc8:	4652      	mov	r2, sl
 8011bca:	465b      	mov	r3, fp
 8011bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bd0:	f7ee fd3a 	bl	8000648 <__aeabi_dmul>
 8011bd4:	4682      	mov	sl, r0
 8011bd6:	468b      	mov	fp, r1
 8011bd8:	f038 080f 	bics.w	r8, r8, #15
 8011bdc:	d073      	beq.n	8011cc6 <_strtod_l+0x516>
 8011bde:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011be2:	dd47      	ble.n	8011c74 <_strtod_l+0x4c4>
 8011be4:	2400      	movs	r4, #0
 8011be6:	46a0      	mov	r8, r4
 8011be8:	9407      	str	r4, [sp, #28]
 8011bea:	9405      	str	r4, [sp, #20]
 8011bec:	2322      	movs	r3, #34	; 0x22
 8011bee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011d48 <_strtod_l+0x598>
 8011bf2:	f8c9 3000 	str.w	r3, [r9]
 8011bf6:	f04f 0a00 	mov.w	sl, #0
 8011bfa:	9b07      	ldr	r3, [sp, #28]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	f43f ae16 	beq.w	801182e <_strtod_l+0x7e>
 8011c02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011c04:	4648      	mov	r0, r9
 8011c06:	f001 fe6b 	bl	80138e0 <_Bfree>
 8011c0a:	9905      	ldr	r1, [sp, #20]
 8011c0c:	4648      	mov	r0, r9
 8011c0e:	f001 fe67 	bl	80138e0 <_Bfree>
 8011c12:	4641      	mov	r1, r8
 8011c14:	4648      	mov	r0, r9
 8011c16:	f001 fe63 	bl	80138e0 <_Bfree>
 8011c1a:	9907      	ldr	r1, [sp, #28]
 8011c1c:	4648      	mov	r0, r9
 8011c1e:	f001 fe5f 	bl	80138e0 <_Bfree>
 8011c22:	4621      	mov	r1, r4
 8011c24:	4648      	mov	r0, r9
 8011c26:	f001 fe5b 	bl	80138e0 <_Bfree>
 8011c2a:	e600      	b.n	801182e <_strtod_l+0x7e>
 8011c2c:	9a06      	ldr	r2, [sp, #24]
 8011c2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011c32:	4293      	cmp	r3, r2
 8011c34:	dbba      	blt.n	8011bac <_strtod_l+0x3fc>
 8011c36:	4d42      	ldr	r5, [pc, #264]	; (8011d40 <_strtod_l+0x590>)
 8011c38:	f1c4 040f 	rsb	r4, r4, #15
 8011c3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011c40:	4652      	mov	r2, sl
 8011c42:	465b      	mov	r3, fp
 8011c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c48:	f7ee fcfe 	bl	8000648 <__aeabi_dmul>
 8011c4c:	9b06      	ldr	r3, [sp, #24]
 8011c4e:	1b1c      	subs	r4, r3, r4
 8011c50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011c54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c58:	e78d      	b.n	8011b76 <_strtod_l+0x3c6>
 8011c5a:	f113 0f16 	cmn.w	r3, #22
 8011c5e:	dba5      	blt.n	8011bac <_strtod_l+0x3fc>
 8011c60:	4a37      	ldr	r2, [pc, #220]	; (8011d40 <_strtod_l+0x590>)
 8011c62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011c66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011c6a:	4650      	mov	r0, sl
 8011c6c:	4659      	mov	r1, fp
 8011c6e:	f7ee fe15 	bl	800089c <__aeabi_ddiv>
 8011c72:	e782      	b.n	8011b7a <_strtod_l+0x3ca>
 8011c74:	2300      	movs	r3, #0
 8011c76:	4e33      	ldr	r6, [pc, #204]	; (8011d44 <_strtod_l+0x594>)
 8011c78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011c7c:	4650      	mov	r0, sl
 8011c7e:	4659      	mov	r1, fp
 8011c80:	461d      	mov	r5, r3
 8011c82:	f1b8 0f01 	cmp.w	r8, #1
 8011c86:	dc21      	bgt.n	8011ccc <_strtod_l+0x51c>
 8011c88:	b10b      	cbz	r3, 8011c8e <_strtod_l+0x4de>
 8011c8a:	4682      	mov	sl, r0
 8011c8c:	468b      	mov	fp, r1
 8011c8e:	4b2d      	ldr	r3, [pc, #180]	; (8011d44 <_strtod_l+0x594>)
 8011c90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011c94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011c98:	4652      	mov	r2, sl
 8011c9a:	465b      	mov	r3, fp
 8011c9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011ca0:	f7ee fcd2 	bl	8000648 <__aeabi_dmul>
 8011ca4:	4b28      	ldr	r3, [pc, #160]	; (8011d48 <_strtod_l+0x598>)
 8011ca6:	460a      	mov	r2, r1
 8011ca8:	400b      	ands	r3, r1
 8011caa:	4928      	ldr	r1, [pc, #160]	; (8011d4c <_strtod_l+0x59c>)
 8011cac:	428b      	cmp	r3, r1
 8011cae:	4682      	mov	sl, r0
 8011cb0:	d898      	bhi.n	8011be4 <_strtod_l+0x434>
 8011cb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011cb6:	428b      	cmp	r3, r1
 8011cb8:	bf86      	itte	hi
 8011cba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011d54 <_strtod_l+0x5a4>
 8011cbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8011cc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	9304      	str	r3, [sp, #16]
 8011cca:	e077      	b.n	8011dbc <_strtod_l+0x60c>
 8011ccc:	f018 0f01 	tst.w	r8, #1
 8011cd0:	d006      	beq.n	8011ce0 <_strtod_l+0x530>
 8011cd2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8011cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cda:	f7ee fcb5 	bl	8000648 <__aeabi_dmul>
 8011cde:	2301      	movs	r3, #1
 8011ce0:	3501      	adds	r5, #1
 8011ce2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011ce6:	e7cc      	b.n	8011c82 <_strtod_l+0x4d2>
 8011ce8:	d0ed      	beq.n	8011cc6 <_strtod_l+0x516>
 8011cea:	f1c8 0800 	rsb	r8, r8, #0
 8011cee:	f018 020f 	ands.w	r2, r8, #15
 8011cf2:	d00a      	beq.n	8011d0a <_strtod_l+0x55a>
 8011cf4:	4b12      	ldr	r3, [pc, #72]	; (8011d40 <_strtod_l+0x590>)
 8011cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cfa:	4650      	mov	r0, sl
 8011cfc:	4659      	mov	r1, fp
 8011cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d02:	f7ee fdcb 	bl	800089c <__aeabi_ddiv>
 8011d06:	4682      	mov	sl, r0
 8011d08:	468b      	mov	fp, r1
 8011d0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011d0e:	d0da      	beq.n	8011cc6 <_strtod_l+0x516>
 8011d10:	f1b8 0f1f 	cmp.w	r8, #31
 8011d14:	dd20      	ble.n	8011d58 <_strtod_l+0x5a8>
 8011d16:	2400      	movs	r4, #0
 8011d18:	46a0      	mov	r8, r4
 8011d1a:	9407      	str	r4, [sp, #28]
 8011d1c:	9405      	str	r4, [sp, #20]
 8011d1e:	2322      	movs	r3, #34	; 0x22
 8011d20:	f04f 0a00 	mov.w	sl, #0
 8011d24:	f04f 0b00 	mov.w	fp, #0
 8011d28:	f8c9 3000 	str.w	r3, [r9]
 8011d2c:	e765      	b.n	8011bfa <_strtod_l+0x44a>
 8011d2e:	bf00      	nop
 8011d30:	080179d7 	.word	0x080179d7
 8011d34:	08017a63 	.word	0x08017a63
 8011d38:	080179df 	.word	0x080179df
 8011d3c:	08017a20 	.word	0x08017a20
 8011d40:	08017aa0 	.word	0x08017aa0
 8011d44:	08017a78 	.word	0x08017a78
 8011d48:	7ff00000 	.word	0x7ff00000
 8011d4c:	7ca00000 	.word	0x7ca00000
 8011d50:	fff80000 	.word	0xfff80000
 8011d54:	7fefffff 	.word	0x7fefffff
 8011d58:	f018 0310 	ands.w	r3, r8, #16
 8011d5c:	bf18      	it	ne
 8011d5e:	236a      	movne	r3, #106	; 0x6a
 8011d60:	4da0      	ldr	r5, [pc, #640]	; (8011fe4 <_strtod_l+0x834>)
 8011d62:	9304      	str	r3, [sp, #16]
 8011d64:	4650      	mov	r0, sl
 8011d66:	4659      	mov	r1, fp
 8011d68:	2300      	movs	r3, #0
 8011d6a:	f1b8 0f00 	cmp.w	r8, #0
 8011d6e:	f300 810a 	bgt.w	8011f86 <_strtod_l+0x7d6>
 8011d72:	b10b      	cbz	r3, 8011d78 <_strtod_l+0x5c8>
 8011d74:	4682      	mov	sl, r0
 8011d76:	468b      	mov	fp, r1
 8011d78:	9b04      	ldr	r3, [sp, #16]
 8011d7a:	b1bb      	cbz	r3, 8011dac <_strtod_l+0x5fc>
 8011d7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011d80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	4659      	mov	r1, fp
 8011d88:	dd10      	ble.n	8011dac <_strtod_l+0x5fc>
 8011d8a:	2b1f      	cmp	r3, #31
 8011d8c:	f340 8107 	ble.w	8011f9e <_strtod_l+0x7ee>
 8011d90:	2b34      	cmp	r3, #52	; 0x34
 8011d92:	bfde      	ittt	le
 8011d94:	3b20      	suble	r3, #32
 8011d96:	f04f 32ff 	movle.w	r2, #4294967295
 8011d9a:	fa02 f303 	lslle.w	r3, r2, r3
 8011d9e:	f04f 0a00 	mov.w	sl, #0
 8011da2:	bfcc      	ite	gt
 8011da4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011da8:	ea03 0b01 	andle.w	fp, r3, r1
 8011dac:	2200      	movs	r2, #0
 8011dae:	2300      	movs	r3, #0
 8011db0:	4650      	mov	r0, sl
 8011db2:	4659      	mov	r1, fp
 8011db4:	f7ee feb0 	bl	8000b18 <__aeabi_dcmpeq>
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d1ac      	bne.n	8011d16 <_strtod_l+0x566>
 8011dbc:	9b07      	ldr	r3, [sp, #28]
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	9a05      	ldr	r2, [sp, #20]
 8011dc2:	9908      	ldr	r1, [sp, #32]
 8011dc4:	4623      	mov	r3, r4
 8011dc6:	4648      	mov	r0, r9
 8011dc8:	f001 fddc 	bl	8013984 <__s2b>
 8011dcc:	9007      	str	r0, [sp, #28]
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	f43f af08 	beq.w	8011be4 <_strtod_l+0x434>
 8011dd4:	9a06      	ldr	r2, [sp, #24]
 8011dd6:	9b06      	ldr	r3, [sp, #24]
 8011dd8:	2a00      	cmp	r2, #0
 8011dda:	f1c3 0300 	rsb	r3, r3, #0
 8011dde:	bfa8      	it	ge
 8011de0:	2300      	movge	r3, #0
 8011de2:	930e      	str	r3, [sp, #56]	; 0x38
 8011de4:	2400      	movs	r4, #0
 8011de6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011dea:	9316      	str	r3, [sp, #88]	; 0x58
 8011dec:	46a0      	mov	r8, r4
 8011dee:	9b07      	ldr	r3, [sp, #28]
 8011df0:	4648      	mov	r0, r9
 8011df2:	6859      	ldr	r1, [r3, #4]
 8011df4:	f001 fd40 	bl	8013878 <_Balloc>
 8011df8:	9005      	str	r0, [sp, #20]
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	f43f aef6 	beq.w	8011bec <_strtod_l+0x43c>
 8011e00:	9b07      	ldr	r3, [sp, #28]
 8011e02:	691a      	ldr	r2, [r3, #16]
 8011e04:	3202      	adds	r2, #2
 8011e06:	f103 010c 	add.w	r1, r3, #12
 8011e0a:	0092      	lsls	r2, r2, #2
 8011e0c:	300c      	adds	r0, #12
 8011e0e:	f7fe fe31 	bl	8010a74 <memcpy>
 8011e12:	aa1e      	add	r2, sp, #120	; 0x78
 8011e14:	a91d      	add	r1, sp, #116	; 0x74
 8011e16:	ec4b ab10 	vmov	d0, sl, fp
 8011e1a:	4648      	mov	r0, r9
 8011e1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011e20:	f002 f86c 	bl	8013efc <__d2b>
 8011e24:	901c      	str	r0, [sp, #112]	; 0x70
 8011e26:	2800      	cmp	r0, #0
 8011e28:	f43f aee0 	beq.w	8011bec <_strtod_l+0x43c>
 8011e2c:	2101      	movs	r1, #1
 8011e2e:	4648      	mov	r0, r9
 8011e30:	f001 fe34 	bl	8013a9c <__i2b>
 8011e34:	4680      	mov	r8, r0
 8011e36:	2800      	cmp	r0, #0
 8011e38:	f43f aed8 	beq.w	8011bec <_strtod_l+0x43c>
 8011e3c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011e3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011e40:	2e00      	cmp	r6, #0
 8011e42:	bfab      	itete	ge
 8011e44:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011e46:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011e48:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011e4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011e4c:	bfac      	ite	ge
 8011e4e:	18f7      	addge	r7, r6, r3
 8011e50:	1b9d      	sublt	r5, r3, r6
 8011e52:	9b04      	ldr	r3, [sp, #16]
 8011e54:	1af6      	subs	r6, r6, r3
 8011e56:	4416      	add	r6, r2
 8011e58:	4b63      	ldr	r3, [pc, #396]	; (8011fe8 <_strtod_l+0x838>)
 8011e5a:	3e01      	subs	r6, #1
 8011e5c:	429e      	cmp	r6, r3
 8011e5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011e62:	f280 80af 	bge.w	8011fc4 <_strtod_l+0x814>
 8011e66:	1b9b      	subs	r3, r3, r6
 8011e68:	2b1f      	cmp	r3, #31
 8011e6a:	eba2 0203 	sub.w	r2, r2, r3
 8011e6e:	f04f 0101 	mov.w	r1, #1
 8011e72:	f300 809b 	bgt.w	8011fac <_strtod_l+0x7fc>
 8011e76:	fa01 f303 	lsl.w	r3, r1, r3
 8011e7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8011e80:	18be      	adds	r6, r7, r2
 8011e82:	9b04      	ldr	r3, [sp, #16]
 8011e84:	42b7      	cmp	r7, r6
 8011e86:	4415      	add	r5, r2
 8011e88:	441d      	add	r5, r3
 8011e8a:	463b      	mov	r3, r7
 8011e8c:	bfa8      	it	ge
 8011e8e:	4633      	movge	r3, r6
 8011e90:	42ab      	cmp	r3, r5
 8011e92:	bfa8      	it	ge
 8011e94:	462b      	movge	r3, r5
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	bfc2      	ittt	gt
 8011e9a:	1af6      	subgt	r6, r6, r3
 8011e9c:	1aed      	subgt	r5, r5, r3
 8011e9e:	1aff      	subgt	r7, r7, r3
 8011ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ea2:	b1bb      	cbz	r3, 8011ed4 <_strtod_l+0x724>
 8011ea4:	4641      	mov	r1, r8
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	4648      	mov	r0, r9
 8011eaa:	f001 fe97 	bl	8013bdc <__pow5mult>
 8011eae:	4680      	mov	r8, r0
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	f43f ae9b 	beq.w	8011bec <_strtod_l+0x43c>
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011eba:	4648      	mov	r0, r9
 8011ebc:	f001 fdf7 	bl	8013aae <__multiply>
 8011ec0:	900c      	str	r0, [sp, #48]	; 0x30
 8011ec2:	2800      	cmp	r0, #0
 8011ec4:	f43f ae92 	beq.w	8011bec <_strtod_l+0x43c>
 8011ec8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011eca:	4648      	mov	r0, r9
 8011ecc:	f001 fd08 	bl	80138e0 <_Bfree>
 8011ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ed2:	931c      	str	r3, [sp, #112]	; 0x70
 8011ed4:	2e00      	cmp	r6, #0
 8011ed6:	dc7a      	bgt.n	8011fce <_strtod_l+0x81e>
 8011ed8:	9b06      	ldr	r3, [sp, #24]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	dd08      	ble.n	8011ef0 <_strtod_l+0x740>
 8011ede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011ee0:	9905      	ldr	r1, [sp, #20]
 8011ee2:	4648      	mov	r0, r9
 8011ee4:	f001 fe7a 	bl	8013bdc <__pow5mult>
 8011ee8:	9005      	str	r0, [sp, #20]
 8011eea:	2800      	cmp	r0, #0
 8011eec:	f43f ae7e 	beq.w	8011bec <_strtod_l+0x43c>
 8011ef0:	2d00      	cmp	r5, #0
 8011ef2:	dd08      	ble.n	8011f06 <_strtod_l+0x756>
 8011ef4:	462a      	mov	r2, r5
 8011ef6:	9905      	ldr	r1, [sp, #20]
 8011ef8:	4648      	mov	r0, r9
 8011efa:	f001 febd 	bl	8013c78 <__lshift>
 8011efe:	9005      	str	r0, [sp, #20]
 8011f00:	2800      	cmp	r0, #0
 8011f02:	f43f ae73 	beq.w	8011bec <_strtod_l+0x43c>
 8011f06:	2f00      	cmp	r7, #0
 8011f08:	dd08      	ble.n	8011f1c <_strtod_l+0x76c>
 8011f0a:	4641      	mov	r1, r8
 8011f0c:	463a      	mov	r2, r7
 8011f0e:	4648      	mov	r0, r9
 8011f10:	f001 feb2 	bl	8013c78 <__lshift>
 8011f14:	4680      	mov	r8, r0
 8011f16:	2800      	cmp	r0, #0
 8011f18:	f43f ae68 	beq.w	8011bec <_strtod_l+0x43c>
 8011f1c:	9a05      	ldr	r2, [sp, #20]
 8011f1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011f20:	4648      	mov	r0, r9
 8011f22:	f001 ff17 	bl	8013d54 <__mdiff>
 8011f26:	4604      	mov	r4, r0
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	f43f ae5f 	beq.w	8011bec <_strtod_l+0x43c>
 8011f2e:	68c3      	ldr	r3, [r0, #12]
 8011f30:	930c      	str	r3, [sp, #48]	; 0x30
 8011f32:	2300      	movs	r3, #0
 8011f34:	60c3      	str	r3, [r0, #12]
 8011f36:	4641      	mov	r1, r8
 8011f38:	f001 fef2 	bl	8013d20 <__mcmp>
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	da55      	bge.n	8011fec <_strtod_l+0x83c>
 8011f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f42:	b9e3      	cbnz	r3, 8011f7e <_strtod_l+0x7ce>
 8011f44:	f1ba 0f00 	cmp.w	sl, #0
 8011f48:	d119      	bne.n	8011f7e <_strtod_l+0x7ce>
 8011f4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f4e:	b9b3      	cbnz	r3, 8011f7e <_strtod_l+0x7ce>
 8011f50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011f54:	0d1b      	lsrs	r3, r3, #20
 8011f56:	051b      	lsls	r3, r3, #20
 8011f58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011f5c:	d90f      	bls.n	8011f7e <_strtod_l+0x7ce>
 8011f5e:	6963      	ldr	r3, [r4, #20]
 8011f60:	b913      	cbnz	r3, 8011f68 <_strtod_l+0x7b8>
 8011f62:	6923      	ldr	r3, [r4, #16]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	dd0a      	ble.n	8011f7e <_strtod_l+0x7ce>
 8011f68:	4621      	mov	r1, r4
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	4648      	mov	r0, r9
 8011f6e:	f001 fe83 	bl	8013c78 <__lshift>
 8011f72:	4641      	mov	r1, r8
 8011f74:	4604      	mov	r4, r0
 8011f76:	f001 fed3 	bl	8013d20 <__mcmp>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	dc67      	bgt.n	801204e <_strtod_l+0x89e>
 8011f7e:	9b04      	ldr	r3, [sp, #16]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d171      	bne.n	8012068 <_strtod_l+0x8b8>
 8011f84:	e63d      	b.n	8011c02 <_strtod_l+0x452>
 8011f86:	f018 0f01 	tst.w	r8, #1
 8011f8a:	d004      	beq.n	8011f96 <_strtod_l+0x7e6>
 8011f8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f90:	f7ee fb5a 	bl	8000648 <__aeabi_dmul>
 8011f94:	2301      	movs	r3, #1
 8011f96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011f9a:	3508      	adds	r5, #8
 8011f9c:	e6e5      	b.n	8011d6a <_strtod_l+0x5ba>
 8011f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fa6:	ea03 0a0a 	and.w	sl, r3, sl
 8011faa:	e6ff      	b.n	8011dac <_strtod_l+0x5fc>
 8011fac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011fb0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011fb4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011fb8:	36e2      	adds	r6, #226	; 0xe2
 8011fba:	fa01 f306 	lsl.w	r3, r1, r6
 8011fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8011fc0:	910f      	str	r1, [sp, #60]	; 0x3c
 8011fc2:	e75d      	b.n	8011e80 <_strtod_l+0x6d0>
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8011fc8:	2301      	movs	r3, #1
 8011fca:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fcc:	e758      	b.n	8011e80 <_strtod_l+0x6d0>
 8011fce:	4632      	mov	r2, r6
 8011fd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011fd2:	4648      	mov	r0, r9
 8011fd4:	f001 fe50 	bl	8013c78 <__lshift>
 8011fd8:	901c      	str	r0, [sp, #112]	; 0x70
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	f47f af7c 	bne.w	8011ed8 <_strtod_l+0x728>
 8011fe0:	e604      	b.n	8011bec <_strtod_l+0x43c>
 8011fe2:	bf00      	nop
 8011fe4:	08017a38 	.word	0x08017a38
 8011fe8:	fffffc02 	.word	0xfffffc02
 8011fec:	465d      	mov	r5, fp
 8011fee:	f040 8086 	bne.w	80120fe <_strtod_l+0x94e>
 8011ff2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ff8:	b32a      	cbz	r2, 8012046 <_strtod_l+0x896>
 8011ffa:	4aaf      	ldr	r2, [pc, #700]	; (80122b8 <_strtod_l+0xb08>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d153      	bne.n	80120a8 <_strtod_l+0x8f8>
 8012000:	9b04      	ldr	r3, [sp, #16]
 8012002:	4650      	mov	r0, sl
 8012004:	b1d3      	cbz	r3, 801203c <_strtod_l+0x88c>
 8012006:	4aad      	ldr	r2, [pc, #692]	; (80122bc <_strtod_l+0xb0c>)
 8012008:	402a      	ands	r2, r5
 801200a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801200e:	f04f 31ff 	mov.w	r1, #4294967295
 8012012:	d816      	bhi.n	8012042 <_strtod_l+0x892>
 8012014:	0d12      	lsrs	r2, r2, #20
 8012016:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801201a:	fa01 f303 	lsl.w	r3, r1, r3
 801201e:	4298      	cmp	r0, r3
 8012020:	d142      	bne.n	80120a8 <_strtod_l+0x8f8>
 8012022:	4ba7      	ldr	r3, [pc, #668]	; (80122c0 <_strtod_l+0xb10>)
 8012024:	429d      	cmp	r5, r3
 8012026:	d102      	bne.n	801202e <_strtod_l+0x87e>
 8012028:	3001      	adds	r0, #1
 801202a:	f43f addf 	beq.w	8011bec <_strtod_l+0x43c>
 801202e:	4ba3      	ldr	r3, [pc, #652]	; (80122bc <_strtod_l+0xb0c>)
 8012030:	402b      	ands	r3, r5
 8012032:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012036:	f04f 0a00 	mov.w	sl, #0
 801203a:	e7a0      	b.n	8011f7e <_strtod_l+0x7ce>
 801203c:	f04f 33ff 	mov.w	r3, #4294967295
 8012040:	e7ed      	b.n	801201e <_strtod_l+0x86e>
 8012042:	460b      	mov	r3, r1
 8012044:	e7eb      	b.n	801201e <_strtod_l+0x86e>
 8012046:	bb7b      	cbnz	r3, 80120a8 <_strtod_l+0x8f8>
 8012048:	f1ba 0f00 	cmp.w	sl, #0
 801204c:	d12c      	bne.n	80120a8 <_strtod_l+0x8f8>
 801204e:	9904      	ldr	r1, [sp, #16]
 8012050:	4a9a      	ldr	r2, [pc, #616]	; (80122bc <_strtod_l+0xb0c>)
 8012052:	465b      	mov	r3, fp
 8012054:	b1f1      	cbz	r1, 8012094 <_strtod_l+0x8e4>
 8012056:	ea02 010b 	and.w	r1, r2, fp
 801205a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801205e:	dc19      	bgt.n	8012094 <_strtod_l+0x8e4>
 8012060:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012064:	f77f ae5b 	ble.w	8011d1e <_strtod_l+0x56e>
 8012068:	4a96      	ldr	r2, [pc, #600]	; (80122c4 <_strtod_l+0xb14>)
 801206a:	2300      	movs	r3, #0
 801206c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012070:	4650      	mov	r0, sl
 8012072:	4659      	mov	r1, fp
 8012074:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012078:	f7ee fae6 	bl	8000648 <__aeabi_dmul>
 801207c:	4682      	mov	sl, r0
 801207e:	468b      	mov	fp, r1
 8012080:	2900      	cmp	r1, #0
 8012082:	f47f adbe 	bne.w	8011c02 <_strtod_l+0x452>
 8012086:	2800      	cmp	r0, #0
 8012088:	f47f adbb 	bne.w	8011c02 <_strtod_l+0x452>
 801208c:	2322      	movs	r3, #34	; 0x22
 801208e:	f8c9 3000 	str.w	r3, [r9]
 8012092:	e5b6      	b.n	8011c02 <_strtod_l+0x452>
 8012094:	4013      	ands	r3, r2
 8012096:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801209a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801209e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80120a2:	f04f 3aff 	mov.w	sl, #4294967295
 80120a6:	e76a      	b.n	8011f7e <_strtod_l+0x7ce>
 80120a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120aa:	b193      	cbz	r3, 80120d2 <_strtod_l+0x922>
 80120ac:	422b      	tst	r3, r5
 80120ae:	f43f af66 	beq.w	8011f7e <_strtod_l+0x7ce>
 80120b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120b4:	9a04      	ldr	r2, [sp, #16]
 80120b6:	4650      	mov	r0, sl
 80120b8:	4659      	mov	r1, fp
 80120ba:	b173      	cbz	r3, 80120da <_strtod_l+0x92a>
 80120bc:	f7ff fb5a 	bl	8011774 <sulp>
 80120c0:	4602      	mov	r2, r0
 80120c2:	460b      	mov	r3, r1
 80120c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80120c8:	f7ee f908 	bl	80002dc <__adddf3>
 80120cc:	4682      	mov	sl, r0
 80120ce:	468b      	mov	fp, r1
 80120d0:	e755      	b.n	8011f7e <_strtod_l+0x7ce>
 80120d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120d4:	ea13 0f0a 	tst.w	r3, sl
 80120d8:	e7e9      	b.n	80120ae <_strtod_l+0x8fe>
 80120da:	f7ff fb4b 	bl	8011774 <sulp>
 80120de:	4602      	mov	r2, r0
 80120e0:	460b      	mov	r3, r1
 80120e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80120e6:	f7ee f8f7 	bl	80002d8 <__aeabi_dsub>
 80120ea:	2200      	movs	r2, #0
 80120ec:	2300      	movs	r3, #0
 80120ee:	4682      	mov	sl, r0
 80120f0:	468b      	mov	fp, r1
 80120f2:	f7ee fd11 	bl	8000b18 <__aeabi_dcmpeq>
 80120f6:	2800      	cmp	r0, #0
 80120f8:	f47f ae11 	bne.w	8011d1e <_strtod_l+0x56e>
 80120fc:	e73f      	b.n	8011f7e <_strtod_l+0x7ce>
 80120fe:	4641      	mov	r1, r8
 8012100:	4620      	mov	r0, r4
 8012102:	f001 ff4a 	bl	8013f9a <__ratio>
 8012106:	ec57 6b10 	vmov	r6, r7, d0
 801210a:	2200      	movs	r2, #0
 801210c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012110:	ee10 0a10 	vmov	r0, s0
 8012114:	4639      	mov	r1, r7
 8012116:	f7ee fd13 	bl	8000b40 <__aeabi_dcmple>
 801211a:	2800      	cmp	r0, #0
 801211c:	d077      	beq.n	801220e <_strtod_l+0xa5e>
 801211e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012120:	2b00      	cmp	r3, #0
 8012122:	d04a      	beq.n	80121ba <_strtod_l+0xa0a>
 8012124:	4b68      	ldr	r3, [pc, #416]	; (80122c8 <_strtod_l+0xb18>)
 8012126:	2200      	movs	r2, #0
 8012128:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801212c:	4f66      	ldr	r7, [pc, #408]	; (80122c8 <_strtod_l+0xb18>)
 801212e:	2600      	movs	r6, #0
 8012130:	4b62      	ldr	r3, [pc, #392]	; (80122bc <_strtod_l+0xb0c>)
 8012132:	402b      	ands	r3, r5
 8012134:	930f      	str	r3, [sp, #60]	; 0x3c
 8012136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012138:	4b64      	ldr	r3, [pc, #400]	; (80122cc <_strtod_l+0xb1c>)
 801213a:	429a      	cmp	r2, r3
 801213c:	f040 80ce 	bne.w	80122dc <_strtod_l+0xb2c>
 8012140:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012144:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012148:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801214c:	ec4b ab10 	vmov	d0, sl, fp
 8012150:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012154:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012158:	f001 fe5a 	bl	8013e10 <__ulp>
 801215c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012160:	ec53 2b10 	vmov	r2, r3, d0
 8012164:	f7ee fa70 	bl	8000648 <__aeabi_dmul>
 8012168:	4652      	mov	r2, sl
 801216a:	465b      	mov	r3, fp
 801216c:	f7ee f8b6 	bl	80002dc <__adddf3>
 8012170:	460b      	mov	r3, r1
 8012172:	4952      	ldr	r1, [pc, #328]	; (80122bc <_strtod_l+0xb0c>)
 8012174:	4a56      	ldr	r2, [pc, #344]	; (80122d0 <_strtod_l+0xb20>)
 8012176:	4019      	ands	r1, r3
 8012178:	4291      	cmp	r1, r2
 801217a:	4682      	mov	sl, r0
 801217c:	d95b      	bls.n	8012236 <_strtod_l+0xa86>
 801217e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012180:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012184:	4293      	cmp	r3, r2
 8012186:	d103      	bne.n	8012190 <_strtod_l+0x9e0>
 8012188:	9b08      	ldr	r3, [sp, #32]
 801218a:	3301      	adds	r3, #1
 801218c:	f43f ad2e 	beq.w	8011bec <_strtod_l+0x43c>
 8012190:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80122c0 <_strtod_l+0xb10>
 8012194:	f04f 3aff 	mov.w	sl, #4294967295
 8012198:	991c      	ldr	r1, [sp, #112]	; 0x70
 801219a:	4648      	mov	r0, r9
 801219c:	f001 fba0 	bl	80138e0 <_Bfree>
 80121a0:	9905      	ldr	r1, [sp, #20]
 80121a2:	4648      	mov	r0, r9
 80121a4:	f001 fb9c 	bl	80138e0 <_Bfree>
 80121a8:	4641      	mov	r1, r8
 80121aa:	4648      	mov	r0, r9
 80121ac:	f001 fb98 	bl	80138e0 <_Bfree>
 80121b0:	4621      	mov	r1, r4
 80121b2:	4648      	mov	r0, r9
 80121b4:	f001 fb94 	bl	80138e0 <_Bfree>
 80121b8:	e619      	b.n	8011dee <_strtod_l+0x63e>
 80121ba:	f1ba 0f00 	cmp.w	sl, #0
 80121be:	d11a      	bne.n	80121f6 <_strtod_l+0xa46>
 80121c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121c4:	b9eb      	cbnz	r3, 8012202 <_strtod_l+0xa52>
 80121c6:	2200      	movs	r2, #0
 80121c8:	4b3f      	ldr	r3, [pc, #252]	; (80122c8 <_strtod_l+0xb18>)
 80121ca:	4630      	mov	r0, r6
 80121cc:	4639      	mov	r1, r7
 80121ce:	f7ee fcad 	bl	8000b2c <__aeabi_dcmplt>
 80121d2:	b9c8      	cbnz	r0, 8012208 <_strtod_l+0xa58>
 80121d4:	4630      	mov	r0, r6
 80121d6:	4639      	mov	r1, r7
 80121d8:	2200      	movs	r2, #0
 80121da:	4b3e      	ldr	r3, [pc, #248]	; (80122d4 <_strtod_l+0xb24>)
 80121dc:	f7ee fa34 	bl	8000648 <__aeabi_dmul>
 80121e0:	4606      	mov	r6, r0
 80121e2:	460f      	mov	r7, r1
 80121e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80121e8:	9618      	str	r6, [sp, #96]	; 0x60
 80121ea:	9319      	str	r3, [sp, #100]	; 0x64
 80121ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80121f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80121f4:	e79c      	b.n	8012130 <_strtod_l+0x980>
 80121f6:	f1ba 0f01 	cmp.w	sl, #1
 80121fa:	d102      	bne.n	8012202 <_strtod_l+0xa52>
 80121fc:	2d00      	cmp	r5, #0
 80121fe:	f43f ad8e 	beq.w	8011d1e <_strtod_l+0x56e>
 8012202:	2200      	movs	r2, #0
 8012204:	4b34      	ldr	r3, [pc, #208]	; (80122d8 <_strtod_l+0xb28>)
 8012206:	e78f      	b.n	8012128 <_strtod_l+0x978>
 8012208:	2600      	movs	r6, #0
 801220a:	4f32      	ldr	r7, [pc, #200]	; (80122d4 <_strtod_l+0xb24>)
 801220c:	e7ea      	b.n	80121e4 <_strtod_l+0xa34>
 801220e:	4b31      	ldr	r3, [pc, #196]	; (80122d4 <_strtod_l+0xb24>)
 8012210:	4630      	mov	r0, r6
 8012212:	4639      	mov	r1, r7
 8012214:	2200      	movs	r2, #0
 8012216:	f7ee fa17 	bl	8000648 <__aeabi_dmul>
 801221a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801221c:	4606      	mov	r6, r0
 801221e:	460f      	mov	r7, r1
 8012220:	b933      	cbnz	r3, 8012230 <_strtod_l+0xa80>
 8012222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012226:	9010      	str	r0, [sp, #64]	; 0x40
 8012228:	9311      	str	r3, [sp, #68]	; 0x44
 801222a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801222e:	e7df      	b.n	80121f0 <_strtod_l+0xa40>
 8012230:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012234:	e7f9      	b.n	801222a <_strtod_l+0xa7a>
 8012236:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801223a:	9b04      	ldr	r3, [sp, #16]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d1ab      	bne.n	8012198 <_strtod_l+0x9e8>
 8012240:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012244:	0d1b      	lsrs	r3, r3, #20
 8012246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012248:	051b      	lsls	r3, r3, #20
 801224a:	429a      	cmp	r2, r3
 801224c:	465d      	mov	r5, fp
 801224e:	d1a3      	bne.n	8012198 <_strtod_l+0x9e8>
 8012250:	4639      	mov	r1, r7
 8012252:	4630      	mov	r0, r6
 8012254:	f7ee fca8 	bl	8000ba8 <__aeabi_d2iz>
 8012258:	f7ee f98c 	bl	8000574 <__aeabi_i2d>
 801225c:	460b      	mov	r3, r1
 801225e:	4602      	mov	r2, r0
 8012260:	4639      	mov	r1, r7
 8012262:	4630      	mov	r0, r6
 8012264:	f7ee f838 	bl	80002d8 <__aeabi_dsub>
 8012268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801226a:	4606      	mov	r6, r0
 801226c:	460f      	mov	r7, r1
 801226e:	b933      	cbnz	r3, 801227e <_strtod_l+0xace>
 8012270:	f1ba 0f00 	cmp.w	sl, #0
 8012274:	d103      	bne.n	801227e <_strtod_l+0xace>
 8012276:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801227a:	2d00      	cmp	r5, #0
 801227c:	d06d      	beq.n	801235a <_strtod_l+0xbaa>
 801227e:	a30a      	add	r3, pc, #40	; (adr r3, 80122a8 <_strtod_l+0xaf8>)
 8012280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012284:	4630      	mov	r0, r6
 8012286:	4639      	mov	r1, r7
 8012288:	f7ee fc50 	bl	8000b2c <__aeabi_dcmplt>
 801228c:	2800      	cmp	r0, #0
 801228e:	f47f acb8 	bne.w	8011c02 <_strtod_l+0x452>
 8012292:	a307      	add	r3, pc, #28	; (adr r3, 80122b0 <_strtod_l+0xb00>)
 8012294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012298:	4630      	mov	r0, r6
 801229a:	4639      	mov	r1, r7
 801229c:	f7ee fc64 	bl	8000b68 <__aeabi_dcmpgt>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	f43f af79 	beq.w	8012198 <_strtod_l+0x9e8>
 80122a6:	e4ac      	b.n	8011c02 <_strtod_l+0x452>
 80122a8:	94a03595 	.word	0x94a03595
 80122ac:	3fdfffff 	.word	0x3fdfffff
 80122b0:	35afe535 	.word	0x35afe535
 80122b4:	3fe00000 	.word	0x3fe00000
 80122b8:	000fffff 	.word	0x000fffff
 80122bc:	7ff00000 	.word	0x7ff00000
 80122c0:	7fefffff 	.word	0x7fefffff
 80122c4:	39500000 	.word	0x39500000
 80122c8:	3ff00000 	.word	0x3ff00000
 80122cc:	7fe00000 	.word	0x7fe00000
 80122d0:	7c9fffff 	.word	0x7c9fffff
 80122d4:	3fe00000 	.word	0x3fe00000
 80122d8:	bff00000 	.word	0xbff00000
 80122dc:	9b04      	ldr	r3, [sp, #16]
 80122de:	b333      	cbz	r3, 801232e <_strtod_l+0xb7e>
 80122e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80122e6:	d822      	bhi.n	801232e <_strtod_l+0xb7e>
 80122e8:	a327      	add	r3, pc, #156	; (adr r3, 8012388 <_strtod_l+0xbd8>)
 80122ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ee:	4630      	mov	r0, r6
 80122f0:	4639      	mov	r1, r7
 80122f2:	f7ee fc25 	bl	8000b40 <__aeabi_dcmple>
 80122f6:	b1a0      	cbz	r0, 8012322 <_strtod_l+0xb72>
 80122f8:	4639      	mov	r1, r7
 80122fa:	4630      	mov	r0, r6
 80122fc:	f7ee fc7c 	bl	8000bf8 <__aeabi_d2uiz>
 8012300:	2800      	cmp	r0, #0
 8012302:	bf08      	it	eq
 8012304:	2001      	moveq	r0, #1
 8012306:	f7ee f925 	bl	8000554 <__aeabi_ui2d>
 801230a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801230c:	4606      	mov	r6, r0
 801230e:	460f      	mov	r7, r1
 8012310:	bb03      	cbnz	r3, 8012354 <_strtod_l+0xba4>
 8012312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012316:	9012      	str	r0, [sp, #72]	; 0x48
 8012318:	9313      	str	r3, [sp, #76]	; 0x4c
 801231a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801231e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012326:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801232a:	1a9b      	subs	r3, r3, r2
 801232c:	930b      	str	r3, [sp, #44]	; 0x2c
 801232e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012332:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8012336:	f001 fd6b 	bl	8013e10 <__ulp>
 801233a:	4650      	mov	r0, sl
 801233c:	ec53 2b10 	vmov	r2, r3, d0
 8012340:	4659      	mov	r1, fp
 8012342:	f7ee f981 	bl	8000648 <__aeabi_dmul>
 8012346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801234a:	f7ed ffc7 	bl	80002dc <__adddf3>
 801234e:	4682      	mov	sl, r0
 8012350:	468b      	mov	fp, r1
 8012352:	e772      	b.n	801223a <_strtod_l+0xa8a>
 8012354:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012358:	e7df      	b.n	801231a <_strtod_l+0xb6a>
 801235a:	a30d      	add	r3, pc, #52	; (adr r3, 8012390 <_strtod_l+0xbe0>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	f7ee fbe4 	bl	8000b2c <__aeabi_dcmplt>
 8012364:	e79c      	b.n	80122a0 <_strtod_l+0xaf0>
 8012366:	2300      	movs	r3, #0
 8012368:	930d      	str	r3, [sp, #52]	; 0x34
 801236a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801236c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801236e:	6013      	str	r3, [r2, #0]
 8012370:	f7ff ba61 	b.w	8011836 <_strtod_l+0x86>
 8012374:	2b65      	cmp	r3, #101	; 0x65
 8012376:	f04f 0200 	mov.w	r2, #0
 801237a:	f43f ab4e 	beq.w	8011a1a <_strtod_l+0x26a>
 801237e:	2101      	movs	r1, #1
 8012380:	4614      	mov	r4, r2
 8012382:	9104      	str	r1, [sp, #16]
 8012384:	f7ff bacb 	b.w	801191e <_strtod_l+0x16e>
 8012388:	ffc00000 	.word	0xffc00000
 801238c:	41dfffff 	.word	0x41dfffff
 8012390:	94a03595 	.word	0x94a03595
 8012394:	3fcfffff 	.word	0x3fcfffff

08012398 <_strtod_r>:
 8012398:	4b05      	ldr	r3, [pc, #20]	; (80123b0 <_strtod_r+0x18>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	b410      	push	{r4}
 801239e:	6a1b      	ldr	r3, [r3, #32]
 80123a0:	4c04      	ldr	r4, [pc, #16]	; (80123b4 <_strtod_r+0x1c>)
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	bf08      	it	eq
 80123a6:	4623      	moveq	r3, r4
 80123a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123ac:	f7ff ba00 	b.w	80117b0 <_strtod_l>
 80123b0:	20002c20 	.word	0x20002c20
 80123b4:	20002c84 	.word	0x20002c84

080123b8 <_strtol_l.isra.0>:
 80123b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123bc:	4680      	mov	r8, r0
 80123be:	4689      	mov	r9, r1
 80123c0:	4692      	mov	sl, r2
 80123c2:	461e      	mov	r6, r3
 80123c4:	460f      	mov	r7, r1
 80123c6:	463d      	mov	r5, r7
 80123c8:	9808      	ldr	r0, [sp, #32]
 80123ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123ce:	f001 fa25 	bl	801381c <__locale_ctype_ptr_l>
 80123d2:	4420      	add	r0, r4
 80123d4:	7843      	ldrb	r3, [r0, #1]
 80123d6:	f013 0308 	ands.w	r3, r3, #8
 80123da:	d132      	bne.n	8012442 <_strtol_l.isra.0+0x8a>
 80123dc:	2c2d      	cmp	r4, #45	; 0x2d
 80123de:	d132      	bne.n	8012446 <_strtol_l.isra.0+0x8e>
 80123e0:	787c      	ldrb	r4, [r7, #1]
 80123e2:	1cbd      	adds	r5, r7, #2
 80123e4:	2201      	movs	r2, #1
 80123e6:	2e00      	cmp	r6, #0
 80123e8:	d05d      	beq.n	80124a6 <_strtol_l.isra.0+0xee>
 80123ea:	2e10      	cmp	r6, #16
 80123ec:	d109      	bne.n	8012402 <_strtol_l.isra.0+0x4a>
 80123ee:	2c30      	cmp	r4, #48	; 0x30
 80123f0:	d107      	bne.n	8012402 <_strtol_l.isra.0+0x4a>
 80123f2:	782b      	ldrb	r3, [r5, #0]
 80123f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80123f8:	2b58      	cmp	r3, #88	; 0x58
 80123fa:	d14f      	bne.n	801249c <_strtol_l.isra.0+0xe4>
 80123fc:	786c      	ldrb	r4, [r5, #1]
 80123fe:	2610      	movs	r6, #16
 8012400:	3502      	adds	r5, #2
 8012402:	2a00      	cmp	r2, #0
 8012404:	bf14      	ite	ne
 8012406:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801240a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801240e:	2700      	movs	r7, #0
 8012410:	fbb1 fcf6 	udiv	ip, r1, r6
 8012414:	4638      	mov	r0, r7
 8012416:	fb06 1e1c 	mls	lr, r6, ip, r1
 801241a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801241e:	2b09      	cmp	r3, #9
 8012420:	d817      	bhi.n	8012452 <_strtol_l.isra.0+0x9a>
 8012422:	461c      	mov	r4, r3
 8012424:	42a6      	cmp	r6, r4
 8012426:	dd23      	ble.n	8012470 <_strtol_l.isra.0+0xb8>
 8012428:	1c7b      	adds	r3, r7, #1
 801242a:	d007      	beq.n	801243c <_strtol_l.isra.0+0x84>
 801242c:	4584      	cmp	ip, r0
 801242e:	d31c      	bcc.n	801246a <_strtol_l.isra.0+0xb2>
 8012430:	d101      	bne.n	8012436 <_strtol_l.isra.0+0x7e>
 8012432:	45a6      	cmp	lr, r4
 8012434:	db19      	blt.n	801246a <_strtol_l.isra.0+0xb2>
 8012436:	fb00 4006 	mla	r0, r0, r6, r4
 801243a:	2701      	movs	r7, #1
 801243c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012440:	e7eb      	b.n	801241a <_strtol_l.isra.0+0x62>
 8012442:	462f      	mov	r7, r5
 8012444:	e7bf      	b.n	80123c6 <_strtol_l.isra.0+0xe>
 8012446:	2c2b      	cmp	r4, #43	; 0x2b
 8012448:	bf04      	itt	eq
 801244a:	1cbd      	addeq	r5, r7, #2
 801244c:	787c      	ldrbeq	r4, [r7, #1]
 801244e:	461a      	mov	r2, r3
 8012450:	e7c9      	b.n	80123e6 <_strtol_l.isra.0+0x2e>
 8012452:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012456:	2b19      	cmp	r3, #25
 8012458:	d801      	bhi.n	801245e <_strtol_l.isra.0+0xa6>
 801245a:	3c37      	subs	r4, #55	; 0x37
 801245c:	e7e2      	b.n	8012424 <_strtol_l.isra.0+0x6c>
 801245e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012462:	2b19      	cmp	r3, #25
 8012464:	d804      	bhi.n	8012470 <_strtol_l.isra.0+0xb8>
 8012466:	3c57      	subs	r4, #87	; 0x57
 8012468:	e7dc      	b.n	8012424 <_strtol_l.isra.0+0x6c>
 801246a:	f04f 37ff 	mov.w	r7, #4294967295
 801246e:	e7e5      	b.n	801243c <_strtol_l.isra.0+0x84>
 8012470:	1c7b      	adds	r3, r7, #1
 8012472:	d108      	bne.n	8012486 <_strtol_l.isra.0+0xce>
 8012474:	2322      	movs	r3, #34	; 0x22
 8012476:	f8c8 3000 	str.w	r3, [r8]
 801247a:	4608      	mov	r0, r1
 801247c:	f1ba 0f00 	cmp.w	sl, #0
 8012480:	d107      	bne.n	8012492 <_strtol_l.isra.0+0xda>
 8012482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012486:	b102      	cbz	r2, 801248a <_strtol_l.isra.0+0xd2>
 8012488:	4240      	negs	r0, r0
 801248a:	f1ba 0f00 	cmp.w	sl, #0
 801248e:	d0f8      	beq.n	8012482 <_strtol_l.isra.0+0xca>
 8012490:	b10f      	cbz	r7, 8012496 <_strtol_l.isra.0+0xde>
 8012492:	f105 39ff 	add.w	r9, r5, #4294967295
 8012496:	f8ca 9000 	str.w	r9, [sl]
 801249a:	e7f2      	b.n	8012482 <_strtol_l.isra.0+0xca>
 801249c:	2430      	movs	r4, #48	; 0x30
 801249e:	2e00      	cmp	r6, #0
 80124a0:	d1af      	bne.n	8012402 <_strtol_l.isra.0+0x4a>
 80124a2:	2608      	movs	r6, #8
 80124a4:	e7ad      	b.n	8012402 <_strtol_l.isra.0+0x4a>
 80124a6:	2c30      	cmp	r4, #48	; 0x30
 80124a8:	d0a3      	beq.n	80123f2 <_strtol_l.isra.0+0x3a>
 80124aa:	260a      	movs	r6, #10
 80124ac:	e7a9      	b.n	8012402 <_strtol_l.isra.0+0x4a>
	...

080124b0 <_strtol_r>:
 80124b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124b2:	4c06      	ldr	r4, [pc, #24]	; (80124cc <_strtol_r+0x1c>)
 80124b4:	4d06      	ldr	r5, [pc, #24]	; (80124d0 <_strtol_r+0x20>)
 80124b6:	6824      	ldr	r4, [r4, #0]
 80124b8:	6a24      	ldr	r4, [r4, #32]
 80124ba:	2c00      	cmp	r4, #0
 80124bc:	bf08      	it	eq
 80124be:	462c      	moveq	r4, r5
 80124c0:	9400      	str	r4, [sp, #0]
 80124c2:	f7ff ff79 	bl	80123b8 <_strtol_l.isra.0>
 80124c6:	b003      	add	sp, #12
 80124c8:	bd30      	pop	{r4, r5, pc}
 80124ca:	bf00      	nop
 80124cc:	20002c20 	.word	0x20002c20
 80124d0:	20002c84 	.word	0x20002c84

080124d4 <_vsniprintf_r>:
 80124d4:	b530      	push	{r4, r5, lr}
 80124d6:	1e14      	subs	r4, r2, #0
 80124d8:	4605      	mov	r5, r0
 80124da:	b09b      	sub	sp, #108	; 0x6c
 80124dc:	4618      	mov	r0, r3
 80124de:	da05      	bge.n	80124ec <_vsniprintf_r+0x18>
 80124e0:	238b      	movs	r3, #139	; 0x8b
 80124e2:	602b      	str	r3, [r5, #0]
 80124e4:	f04f 30ff 	mov.w	r0, #4294967295
 80124e8:	b01b      	add	sp, #108	; 0x6c
 80124ea:	bd30      	pop	{r4, r5, pc}
 80124ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80124f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80124f4:	bf14      	ite	ne
 80124f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80124fa:	4623      	moveq	r3, r4
 80124fc:	9302      	str	r3, [sp, #8]
 80124fe:	9305      	str	r3, [sp, #20]
 8012500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012504:	9100      	str	r1, [sp, #0]
 8012506:	9104      	str	r1, [sp, #16]
 8012508:	f8ad 300e 	strh.w	r3, [sp, #14]
 801250c:	4602      	mov	r2, r0
 801250e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012510:	4669      	mov	r1, sp
 8012512:	4628      	mov	r0, r5
 8012514:	f001 fec0 	bl	8014298 <_svfiprintf_r>
 8012518:	1c43      	adds	r3, r0, #1
 801251a:	bfbc      	itt	lt
 801251c:	238b      	movlt	r3, #139	; 0x8b
 801251e:	602b      	strlt	r3, [r5, #0]
 8012520:	2c00      	cmp	r4, #0
 8012522:	d0e1      	beq.n	80124e8 <_vsniprintf_r+0x14>
 8012524:	9b00      	ldr	r3, [sp, #0]
 8012526:	2200      	movs	r2, #0
 8012528:	701a      	strb	r2, [r3, #0]
 801252a:	e7dd      	b.n	80124e8 <_vsniprintf_r+0x14>

0801252c <vsniprintf>:
 801252c:	b507      	push	{r0, r1, r2, lr}
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	4613      	mov	r3, r2
 8012532:	460a      	mov	r2, r1
 8012534:	4601      	mov	r1, r0
 8012536:	4803      	ldr	r0, [pc, #12]	; (8012544 <vsniprintf+0x18>)
 8012538:	6800      	ldr	r0, [r0, #0]
 801253a:	f7ff ffcb 	bl	80124d4 <_vsniprintf_r>
 801253e:	b003      	add	sp, #12
 8012540:	f85d fb04 	ldr.w	pc, [sp], #4
 8012544:	20002c20 	.word	0x20002c20

08012548 <quorem>:
 8012548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801254c:	6903      	ldr	r3, [r0, #16]
 801254e:	690c      	ldr	r4, [r1, #16]
 8012550:	42a3      	cmp	r3, r4
 8012552:	4680      	mov	r8, r0
 8012554:	f2c0 8082 	blt.w	801265c <quorem+0x114>
 8012558:	3c01      	subs	r4, #1
 801255a:	f101 0714 	add.w	r7, r1, #20
 801255e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012562:	f100 0614 	add.w	r6, r0, #20
 8012566:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801256a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801256e:	eb06 030c 	add.w	r3, r6, ip
 8012572:	3501      	adds	r5, #1
 8012574:	eb07 090c 	add.w	r9, r7, ip
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	fbb0 f5f5 	udiv	r5, r0, r5
 801257e:	b395      	cbz	r5, 80125e6 <quorem+0x9e>
 8012580:	f04f 0a00 	mov.w	sl, #0
 8012584:	4638      	mov	r0, r7
 8012586:	46b6      	mov	lr, r6
 8012588:	46d3      	mov	fp, sl
 801258a:	f850 2b04 	ldr.w	r2, [r0], #4
 801258e:	b293      	uxth	r3, r2
 8012590:	fb05 a303 	mla	r3, r5, r3, sl
 8012594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012598:	b29b      	uxth	r3, r3
 801259a:	ebab 0303 	sub.w	r3, fp, r3
 801259e:	0c12      	lsrs	r2, r2, #16
 80125a0:	f8de b000 	ldr.w	fp, [lr]
 80125a4:	fb05 a202 	mla	r2, r5, r2, sl
 80125a8:	fa13 f38b 	uxtah	r3, r3, fp
 80125ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80125b0:	fa1f fb82 	uxth.w	fp, r2
 80125b4:	f8de 2000 	ldr.w	r2, [lr]
 80125b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80125bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125c6:	4581      	cmp	r9, r0
 80125c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80125cc:	f84e 3b04 	str.w	r3, [lr], #4
 80125d0:	d2db      	bcs.n	801258a <quorem+0x42>
 80125d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80125d6:	b933      	cbnz	r3, 80125e6 <quorem+0x9e>
 80125d8:	9b01      	ldr	r3, [sp, #4]
 80125da:	3b04      	subs	r3, #4
 80125dc:	429e      	cmp	r6, r3
 80125de:	461a      	mov	r2, r3
 80125e0:	d330      	bcc.n	8012644 <quorem+0xfc>
 80125e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80125e6:	4640      	mov	r0, r8
 80125e8:	f001 fb9a 	bl	8013d20 <__mcmp>
 80125ec:	2800      	cmp	r0, #0
 80125ee:	db25      	blt.n	801263c <quorem+0xf4>
 80125f0:	3501      	adds	r5, #1
 80125f2:	4630      	mov	r0, r6
 80125f4:	f04f 0c00 	mov.w	ip, #0
 80125f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80125fc:	f8d0 e000 	ldr.w	lr, [r0]
 8012600:	b293      	uxth	r3, r2
 8012602:	ebac 0303 	sub.w	r3, ip, r3
 8012606:	0c12      	lsrs	r2, r2, #16
 8012608:	fa13 f38e 	uxtah	r3, r3, lr
 801260c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012614:	b29b      	uxth	r3, r3
 8012616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801261a:	45b9      	cmp	r9, r7
 801261c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012620:	f840 3b04 	str.w	r3, [r0], #4
 8012624:	d2e8      	bcs.n	80125f8 <quorem+0xb0>
 8012626:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801262a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801262e:	b92a      	cbnz	r2, 801263c <quorem+0xf4>
 8012630:	3b04      	subs	r3, #4
 8012632:	429e      	cmp	r6, r3
 8012634:	461a      	mov	r2, r3
 8012636:	d30b      	bcc.n	8012650 <quorem+0x108>
 8012638:	f8c8 4010 	str.w	r4, [r8, #16]
 801263c:	4628      	mov	r0, r5
 801263e:	b003      	add	sp, #12
 8012640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012644:	6812      	ldr	r2, [r2, #0]
 8012646:	3b04      	subs	r3, #4
 8012648:	2a00      	cmp	r2, #0
 801264a:	d1ca      	bne.n	80125e2 <quorem+0x9a>
 801264c:	3c01      	subs	r4, #1
 801264e:	e7c5      	b.n	80125dc <quorem+0x94>
 8012650:	6812      	ldr	r2, [r2, #0]
 8012652:	3b04      	subs	r3, #4
 8012654:	2a00      	cmp	r2, #0
 8012656:	d1ef      	bne.n	8012638 <quorem+0xf0>
 8012658:	3c01      	subs	r4, #1
 801265a:	e7ea      	b.n	8012632 <quorem+0xea>
 801265c:	2000      	movs	r0, #0
 801265e:	e7ee      	b.n	801263e <quorem+0xf6>

08012660 <_dtoa_r>:
 8012660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012664:	ec57 6b10 	vmov	r6, r7, d0
 8012668:	b097      	sub	sp, #92	; 0x5c
 801266a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801266c:	9106      	str	r1, [sp, #24]
 801266e:	4604      	mov	r4, r0
 8012670:	920b      	str	r2, [sp, #44]	; 0x2c
 8012672:	9312      	str	r3, [sp, #72]	; 0x48
 8012674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012678:	e9cd 6700 	strd	r6, r7, [sp]
 801267c:	b93d      	cbnz	r5, 801268e <_dtoa_r+0x2e>
 801267e:	2010      	movs	r0, #16
 8012680:	f001 f8e0 	bl	8013844 <malloc>
 8012684:	6260      	str	r0, [r4, #36]	; 0x24
 8012686:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801268a:	6005      	str	r5, [r0, #0]
 801268c:	60c5      	str	r5, [r0, #12]
 801268e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012690:	6819      	ldr	r1, [r3, #0]
 8012692:	b151      	cbz	r1, 80126aa <_dtoa_r+0x4a>
 8012694:	685a      	ldr	r2, [r3, #4]
 8012696:	604a      	str	r2, [r1, #4]
 8012698:	2301      	movs	r3, #1
 801269a:	4093      	lsls	r3, r2
 801269c:	608b      	str	r3, [r1, #8]
 801269e:	4620      	mov	r0, r4
 80126a0:	f001 f91e 	bl	80138e0 <_Bfree>
 80126a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126a6:	2200      	movs	r2, #0
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	1e3b      	subs	r3, r7, #0
 80126ac:	bfbb      	ittet	lt
 80126ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80126b2:	9301      	strlt	r3, [sp, #4]
 80126b4:	2300      	movge	r3, #0
 80126b6:	2201      	movlt	r2, #1
 80126b8:	bfac      	ite	ge
 80126ba:	f8c8 3000 	strge.w	r3, [r8]
 80126be:	f8c8 2000 	strlt.w	r2, [r8]
 80126c2:	4baf      	ldr	r3, [pc, #700]	; (8012980 <_dtoa_r+0x320>)
 80126c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80126c8:	ea33 0308 	bics.w	r3, r3, r8
 80126cc:	d114      	bne.n	80126f8 <_dtoa_r+0x98>
 80126ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80126d4:	6013      	str	r3, [r2, #0]
 80126d6:	9b00      	ldr	r3, [sp, #0]
 80126d8:	b923      	cbnz	r3, 80126e4 <_dtoa_r+0x84>
 80126da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80126de:	2800      	cmp	r0, #0
 80126e0:	f000 8542 	beq.w	8013168 <_dtoa_r+0xb08>
 80126e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012994 <_dtoa_r+0x334>
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	f000 8544 	beq.w	8013178 <_dtoa_r+0xb18>
 80126f0:	f10b 0303 	add.w	r3, fp, #3
 80126f4:	f000 bd3e 	b.w	8013174 <_dtoa_r+0xb14>
 80126f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80126fc:	2200      	movs	r2, #0
 80126fe:	2300      	movs	r3, #0
 8012700:	4630      	mov	r0, r6
 8012702:	4639      	mov	r1, r7
 8012704:	f7ee fa08 	bl	8000b18 <__aeabi_dcmpeq>
 8012708:	4681      	mov	r9, r0
 801270a:	b168      	cbz	r0, 8012728 <_dtoa_r+0xc8>
 801270c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801270e:	2301      	movs	r3, #1
 8012710:	6013      	str	r3, [r2, #0]
 8012712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012714:	2b00      	cmp	r3, #0
 8012716:	f000 8524 	beq.w	8013162 <_dtoa_r+0xb02>
 801271a:	4b9a      	ldr	r3, [pc, #616]	; (8012984 <_dtoa_r+0x324>)
 801271c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801271e:	f103 3bff 	add.w	fp, r3, #4294967295
 8012722:	6013      	str	r3, [r2, #0]
 8012724:	f000 bd28 	b.w	8013178 <_dtoa_r+0xb18>
 8012728:	aa14      	add	r2, sp, #80	; 0x50
 801272a:	a915      	add	r1, sp, #84	; 0x54
 801272c:	ec47 6b10 	vmov	d0, r6, r7
 8012730:	4620      	mov	r0, r4
 8012732:	f001 fbe3 	bl	8013efc <__d2b>
 8012736:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801273a:	9004      	str	r0, [sp, #16]
 801273c:	2d00      	cmp	r5, #0
 801273e:	d07c      	beq.n	801283a <_dtoa_r+0x1da>
 8012740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012744:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012748:	46b2      	mov	sl, r6
 801274a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801274e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012752:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012756:	2200      	movs	r2, #0
 8012758:	4b8b      	ldr	r3, [pc, #556]	; (8012988 <_dtoa_r+0x328>)
 801275a:	4650      	mov	r0, sl
 801275c:	4659      	mov	r1, fp
 801275e:	f7ed fdbb 	bl	80002d8 <__aeabi_dsub>
 8012762:	a381      	add	r3, pc, #516	; (adr r3, 8012968 <_dtoa_r+0x308>)
 8012764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012768:	f7ed ff6e 	bl	8000648 <__aeabi_dmul>
 801276c:	a380      	add	r3, pc, #512	; (adr r3, 8012970 <_dtoa_r+0x310>)
 801276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012772:	f7ed fdb3 	bl	80002dc <__adddf3>
 8012776:	4606      	mov	r6, r0
 8012778:	4628      	mov	r0, r5
 801277a:	460f      	mov	r7, r1
 801277c:	f7ed fefa 	bl	8000574 <__aeabi_i2d>
 8012780:	a37d      	add	r3, pc, #500	; (adr r3, 8012978 <_dtoa_r+0x318>)
 8012782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012786:	f7ed ff5f 	bl	8000648 <__aeabi_dmul>
 801278a:	4602      	mov	r2, r0
 801278c:	460b      	mov	r3, r1
 801278e:	4630      	mov	r0, r6
 8012790:	4639      	mov	r1, r7
 8012792:	f7ed fda3 	bl	80002dc <__adddf3>
 8012796:	4606      	mov	r6, r0
 8012798:	460f      	mov	r7, r1
 801279a:	f7ee fa05 	bl	8000ba8 <__aeabi_d2iz>
 801279e:	2200      	movs	r2, #0
 80127a0:	4682      	mov	sl, r0
 80127a2:	2300      	movs	r3, #0
 80127a4:	4630      	mov	r0, r6
 80127a6:	4639      	mov	r1, r7
 80127a8:	f7ee f9c0 	bl	8000b2c <__aeabi_dcmplt>
 80127ac:	b148      	cbz	r0, 80127c2 <_dtoa_r+0x162>
 80127ae:	4650      	mov	r0, sl
 80127b0:	f7ed fee0 	bl	8000574 <__aeabi_i2d>
 80127b4:	4632      	mov	r2, r6
 80127b6:	463b      	mov	r3, r7
 80127b8:	f7ee f9ae 	bl	8000b18 <__aeabi_dcmpeq>
 80127bc:	b908      	cbnz	r0, 80127c2 <_dtoa_r+0x162>
 80127be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127c2:	f1ba 0f16 	cmp.w	sl, #22
 80127c6:	d859      	bhi.n	801287c <_dtoa_r+0x21c>
 80127c8:	4970      	ldr	r1, [pc, #448]	; (801298c <_dtoa_r+0x32c>)
 80127ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80127ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127d6:	f7ee f9c7 	bl	8000b68 <__aeabi_dcmpgt>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d050      	beq.n	8012880 <_dtoa_r+0x220>
 80127de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127e2:	2300      	movs	r3, #0
 80127e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80127e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127e8:	1b5d      	subs	r5, r3, r5
 80127ea:	f1b5 0801 	subs.w	r8, r5, #1
 80127ee:	bf49      	itett	mi
 80127f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80127f4:	2300      	movpl	r3, #0
 80127f6:	9305      	strmi	r3, [sp, #20]
 80127f8:	f04f 0800 	movmi.w	r8, #0
 80127fc:	bf58      	it	pl
 80127fe:	9305      	strpl	r3, [sp, #20]
 8012800:	f1ba 0f00 	cmp.w	sl, #0
 8012804:	db3e      	blt.n	8012884 <_dtoa_r+0x224>
 8012806:	2300      	movs	r3, #0
 8012808:	44d0      	add	r8, sl
 801280a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801280e:	9307      	str	r3, [sp, #28]
 8012810:	9b06      	ldr	r3, [sp, #24]
 8012812:	2b09      	cmp	r3, #9
 8012814:	f200 8090 	bhi.w	8012938 <_dtoa_r+0x2d8>
 8012818:	2b05      	cmp	r3, #5
 801281a:	bfc4      	itt	gt
 801281c:	3b04      	subgt	r3, #4
 801281e:	9306      	strgt	r3, [sp, #24]
 8012820:	9b06      	ldr	r3, [sp, #24]
 8012822:	f1a3 0302 	sub.w	r3, r3, #2
 8012826:	bfcc      	ite	gt
 8012828:	2500      	movgt	r5, #0
 801282a:	2501      	movle	r5, #1
 801282c:	2b03      	cmp	r3, #3
 801282e:	f200 808f 	bhi.w	8012950 <_dtoa_r+0x2f0>
 8012832:	e8df f003 	tbb	[pc, r3]
 8012836:	7f7d      	.short	0x7f7d
 8012838:	7131      	.short	0x7131
 801283a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801283e:	441d      	add	r5, r3
 8012840:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012844:	2820      	cmp	r0, #32
 8012846:	dd13      	ble.n	8012870 <_dtoa_r+0x210>
 8012848:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801284c:	9b00      	ldr	r3, [sp, #0]
 801284e:	fa08 f800 	lsl.w	r8, r8, r0
 8012852:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012856:	fa23 f000 	lsr.w	r0, r3, r0
 801285a:	ea48 0000 	orr.w	r0, r8, r0
 801285e:	f7ed fe79 	bl	8000554 <__aeabi_ui2d>
 8012862:	2301      	movs	r3, #1
 8012864:	4682      	mov	sl, r0
 8012866:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801286a:	3d01      	subs	r5, #1
 801286c:	9313      	str	r3, [sp, #76]	; 0x4c
 801286e:	e772      	b.n	8012756 <_dtoa_r+0xf6>
 8012870:	9b00      	ldr	r3, [sp, #0]
 8012872:	f1c0 0020 	rsb	r0, r0, #32
 8012876:	fa03 f000 	lsl.w	r0, r3, r0
 801287a:	e7f0      	b.n	801285e <_dtoa_r+0x1fe>
 801287c:	2301      	movs	r3, #1
 801287e:	e7b1      	b.n	80127e4 <_dtoa_r+0x184>
 8012880:	900f      	str	r0, [sp, #60]	; 0x3c
 8012882:	e7b0      	b.n	80127e6 <_dtoa_r+0x186>
 8012884:	9b05      	ldr	r3, [sp, #20]
 8012886:	eba3 030a 	sub.w	r3, r3, sl
 801288a:	9305      	str	r3, [sp, #20]
 801288c:	f1ca 0300 	rsb	r3, sl, #0
 8012890:	9307      	str	r3, [sp, #28]
 8012892:	2300      	movs	r3, #0
 8012894:	930e      	str	r3, [sp, #56]	; 0x38
 8012896:	e7bb      	b.n	8012810 <_dtoa_r+0x1b0>
 8012898:	2301      	movs	r3, #1
 801289a:	930a      	str	r3, [sp, #40]	; 0x28
 801289c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801289e:	2b00      	cmp	r3, #0
 80128a0:	dd59      	ble.n	8012956 <_dtoa_r+0x2f6>
 80128a2:	9302      	str	r3, [sp, #8]
 80128a4:	4699      	mov	r9, r3
 80128a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128a8:	2200      	movs	r2, #0
 80128aa:	6072      	str	r2, [r6, #4]
 80128ac:	2204      	movs	r2, #4
 80128ae:	f102 0014 	add.w	r0, r2, #20
 80128b2:	4298      	cmp	r0, r3
 80128b4:	6871      	ldr	r1, [r6, #4]
 80128b6:	d953      	bls.n	8012960 <_dtoa_r+0x300>
 80128b8:	4620      	mov	r0, r4
 80128ba:	f000 ffdd 	bl	8013878 <_Balloc>
 80128be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128c0:	6030      	str	r0, [r6, #0]
 80128c2:	f1b9 0f0e 	cmp.w	r9, #14
 80128c6:	f8d3 b000 	ldr.w	fp, [r3]
 80128ca:	f200 80e6 	bhi.w	8012a9a <_dtoa_r+0x43a>
 80128ce:	2d00      	cmp	r5, #0
 80128d0:	f000 80e3 	beq.w	8012a9a <_dtoa_r+0x43a>
 80128d4:	ed9d 7b00 	vldr	d7, [sp]
 80128d8:	f1ba 0f00 	cmp.w	sl, #0
 80128dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80128e0:	dd74      	ble.n	80129cc <_dtoa_r+0x36c>
 80128e2:	4a2a      	ldr	r2, [pc, #168]	; (801298c <_dtoa_r+0x32c>)
 80128e4:	f00a 030f 	and.w	r3, sl, #15
 80128e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80128ec:	ed93 7b00 	vldr	d7, [r3]
 80128f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80128f4:	06f0      	lsls	r0, r6, #27
 80128f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80128fa:	d565      	bpl.n	80129c8 <_dtoa_r+0x368>
 80128fc:	4b24      	ldr	r3, [pc, #144]	; (8012990 <_dtoa_r+0x330>)
 80128fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012902:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012906:	f7ed ffc9 	bl	800089c <__aeabi_ddiv>
 801290a:	e9cd 0100 	strd	r0, r1, [sp]
 801290e:	f006 060f 	and.w	r6, r6, #15
 8012912:	2503      	movs	r5, #3
 8012914:	4f1e      	ldr	r7, [pc, #120]	; (8012990 <_dtoa_r+0x330>)
 8012916:	e04c      	b.n	80129b2 <_dtoa_r+0x352>
 8012918:	2301      	movs	r3, #1
 801291a:	930a      	str	r3, [sp, #40]	; 0x28
 801291c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801291e:	4453      	add	r3, sl
 8012920:	f103 0901 	add.w	r9, r3, #1
 8012924:	9302      	str	r3, [sp, #8]
 8012926:	464b      	mov	r3, r9
 8012928:	2b01      	cmp	r3, #1
 801292a:	bfb8      	it	lt
 801292c:	2301      	movlt	r3, #1
 801292e:	e7ba      	b.n	80128a6 <_dtoa_r+0x246>
 8012930:	2300      	movs	r3, #0
 8012932:	e7b2      	b.n	801289a <_dtoa_r+0x23a>
 8012934:	2300      	movs	r3, #0
 8012936:	e7f0      	b.n	801291a <_dtoa_r+0x2ba>
 8012938:	2501      	movs	r5, #1
 801293a:	2300      	movs	r3, #0
 801293c:	9306      	str	r3, [sp, #24]
 801293e:	950a      	str	r5, [sp, #40]	; 0x28
 8012940:	f04f 33ff 	mov.w	r3, #4294967295
 8012944:	9302      	str	r3, [sp, #8]
 8012946:	4699      	mov	r9, r3
 8012948:	2200      	movs	r2, #0
 801294a:	2312      	movs	r3, #18
 801294c:	920b      	str	r2, [sp, #44]	; 0x2c
 801294e:	e7aa      	b.n	80128a6 <_dtoa_r+0x246>
 8012950:	2301      	movs	r3, #1
 8012952:	930a      	str	r3, [sp, #40]	; 0x28
 8012954:	e7f4      	b.n	8012940 <_dtoa_r+0x2e0>
 8012956:	2301      	movs	r3, #1
 8012958:	9302      	str	r3, [sp, #8]
 801295a:	4699      	mov	r9, r3
 801295c:	461a      	mov	r2, r3
 801295e:	e7f5      	b.n	801294c <_dtoa_r+0x2ec>
 8012960:	3101      	adds	r1, #1
 8012962:	6071      	str	r1, [r6, #4]
 8012964:	0052      	lsls	r2, r2, #1
 8012966:	e7a2      	b.n	80128ae <_dtoa_r+0x24e>
 8012968:	636f4361 	.word	0x636f4361
 801296c:	3fd287a7 	.word	0x3fd287a7
 8012970:	8b60c8b3 	.word	0x8b60c8b3
 8012974:	3fc68a28 	.word	0x3fc68a28
 8012978:	509f79fb 	.word	0x509f79fb
 801297c:	3fd34413 	.word	0x3fd34413
 8012980:	7ff00000 	.word	0x7ff00000
 8012984:	080179e3 	.word	0x080179e3
 8012988:	3ff80000 	.word	0x3ff80000
 801298c:	08017aa0 	.word	0x08017aa0
 8012990:	08017a78 	.word	0x08017a78
 8012994:	08017a69 	.word	0x08017a69
 8012998:	07f1      	lsls	r1, r6, #31
 801299a:	d508      	bpl.n	80129ae <_dtoa_r+0x34e>
 801299c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80129a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80129a4:	f7ed fe50 	bl	8000648 <__aeabi_dmul>
 80129a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80129ac:	3501      	adds	r5, #1
 80129ae:	1076      	asrs	r6, r6, #1
 80129b0:	3708      	adds	r7, #8
 80129b2:	2e00      	cmp	r6, #0
 80129b4:	d1f0      	bne.n	8012998 <_dtoa_r+0x338>
 80129b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80129ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129be:	f7ed ff6d 	bl	800089c <__aeabi_ddiv>
 80129c2:	e9cd 0100 	strd	r0, r1, [sp]
 80129c6:	e01a      	b.n	80129fe <_dtoa_r+0x39e>
 80129c8:	2502      	movs	r5, #2
 80129ca:	e7a3      	b.n	8012914 <_dtoa_r+0x2b4>
 80129cc:	f000 80a0 	beq.w	8012b10 <_dtoa_r+0x4b0>
 80129d0:	f1ca 0600 	rsb	r6, sl, #0
 80129d4:	4b9f      	ldr	r3, [pc, #636]	; (8012c54 <_dtoa_r+0x5f4>)
 80129d6:	4fa0      	ldr	r7, [pc, #640]	; (8012c58 <_dtoa_r+0x5f8>)
 80129d8:	f006 020f 	and.w	r2, r6, #15
 80129dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80129e8:	f7ed fe2e 	bl	8000648 <__aeabi_dmul>
 80129ec:	e9cd 0100 	strd	r0, r1, [sp]
 80129f0:	1136      	asrs	r6, r6, #4
 80129f2:	2300      	movs	r3, #0
 80129f4:	2502      	movs	r5, #2
 80129f6:	2e00      	cmp	r6, #0
 80129f8:	d17f      	bne.n	8012afa <_dtoa_r+0x49a>
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1e1      	bne.n	80129c2 <_dtoa_r+0x362>
 80129fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 8087 	beq.w	8012b14 <_dtoa_r+0x4b4>
 8012a06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	4b93      	ldr	r3, [pc, #588]	; (8012c5c <_dtoa_r+0x5fc>)
 8012a0e:	4630      	mov	r0, r6
 8012a10:	4639      	mov	r1, r7
 8012a12:	f7ee f88b 	bl	8000b2c <__aeabi_dcmplt>
 8012a16:	2800      	cmp	r0, #0
 8012a18:	d07c      	beq.n	8012b14 <_dtoa_r+0x4b4>
 8012a1a:	f1b9 0f00 	cmp.w	r9, #0
 8012a1e:	d079      	beq.n	8012b14 <_dtoa_r+0x4b4>
 8012a20:	9b02      	ldr	r3, [sp, #8]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	dd35      	ble.n	8012a92 <_dtoa_r+0x432>
 8012a26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012a2a:	9308      	str	r3, [sp, #32]
 8012a2c:	4639      	mov	r1, r7
 8012a2e:	2200      	movs	r2, #0
 8012a30:	4b8b      	ldr	r3, [pc, #556]	; (8012c60 <_dtoa_r+0x600>)
 8012a32:	4630      	mov	r0, r6
 8012a34:	f7ed fe08 	bl	8000648 <__aeabi_dmul>
 8012a38:	e9cd 0100 	strd	r0, r1, [sp]
 8012a3c:	9f02      	ldr	r7, [sp, #8]
 8012a3e:	3501      	adds	r5, #1
 8012a40:	4628      	mov	r0, r5
 8012a42:	f7ed fd97 	bl	8000574 <__aeabi_i2d>
 8012a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a4a:	f7ed fdfd 	bl	8000648 <__aeabi_dmul>
 8012a4e:	2200      	movs	r2, #0
 8012a50:	4b84      	ldr	r3, [pc, #528]	; (8012c64 <_dtoa_r+0x604>)
 8012a52:	f7ed fc43 	bl	80002dc <__adddf3>
 8012a56:	4605      	mov	r5, r0
 8012a58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012a5c:	2f00      	cmp	r7, #0
 8012a5e:	d15d      	bne.n	8012b1c <_dtoa_r+0x4bc>
 8012a60:	2200      	movs	r2, #0
 8012a62:	4b81      	ldr	r3, [pc, #516]	; (8012c68 <_dtoa_r+0x608>)
 8012a64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a68:	f7ed fc36 	bl	80002d8 <__aeabi_dsub>
 8012a6c:	462a      	mov	r2, r5
 8012a6e:	4633      	mov	r3, r6
 8012a70:	e9cd 0100 	strd	r0, r1, [sp]
 8012a74:	f7ee f878 	bl	8000b68 <__aeabi_dcmpgt>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	f040 8288 	bne.w	8012f8e <_dtoa_r+0x92e>
 8012a7e:	462a      	mov	r2, r5
 8012a80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a88:	f7ee f850 	bl	8000b2c <__aeabi_dcmplt>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	f040 827c 	bne.w	8012f8a <_dtoa_r+0x92a>
 8012a92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012a96:	e9cd 2300 	strd	r2, r3, [sp]
 8012a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f2c0 8150 	blt.w	8012d42 <_dtoa_r+0x6e2>
 8012aa2:	f1ba 0f0e 	cmp.w	sl, #14
 8012aa6:	f300 814c 	bgt.w	8012d42 <_dtoa_r+0x6e2>
 8012aaa:	4b6a      	ldr	r3, [pc, #424]	; (8012c54 <_dtoa_r+0x5f4>)
 8012aac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012ab0:	ed93 7b00 	vldr	d7, [r3]
 8012ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012abc:	f280 80d8 	bge.w	8012c70 <_dtoa_r+0x610>
 8012ac0:	f1b9 0f00 	cmp.w	r9, #0
 8012ac4:	f300 80d4 	bgt.w	8012c70 <_dtoa_r+0x610>
 8012ac8:	f040 825e 	bne.w	8012f88 <_dtoa_r+0x928>
 8012acc:	2200      	movs	r2, #0
 8012ace:	4b66      	ldr	r3, [pc, #408]	; (8012c68 <_dtoa_r+0x608>)
 8012ad0:	ec51 0b17 	vmov	r0, r1, d7
 8012ad4:	f7ed fdb8 	bl	8000648 <__aeabi_dmul>
 8012ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012adc:	f7ee f83a 	bl	8000b54 <__aeabi_dcmpge>
 8012ae0:	464f      	mov	r7, r9
 8012ae2:	464e      	mov	r6, r9
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	f040 8234 	bne.w	8012f52 <_dtoa_r+0x8f2>
 8012aea:	2331      	movs	r3, #49	; 0x31
 8012aec:	f10b 0501 	add.w	r5, fp, #1
 8012af0:	f88b 3000 	strb.w	r3, [fp]
 8012af4:	f10a 0a01 	add.w	sl, sl, #1
 8012af8:	e22f      	b.n	8012f5a <_dtoa_r+0x8fa>
 8012afa:	07f2      	lsls	r2, r6, #31
 8012afc:	d505      	bpl.n	8012b0a <_dtoa_r+0x4aa>
 8012afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012b02:	f7ed fda1 	bl	8000648 <__aeabi_dmul>
 8012b06:	3501      	adds	r5, #1
 8012b08:	2301      	movs	r3, #1
 8012b0a:	1076      	asrs	r6, r6, #1
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	e772      	b.n	80129f6 <_dtoa_r+0x396>
 8012b10:	2502      	movs	r5, #2
 8012b12:	e774      	b.n	80129fe <_dtoa_r+0x39e>
 8012b14:	f8cd a020 	str.w	sl, [sp, #32]
 8012b18:	464f      	mov	r7, r9
 8012b1a:	e791      	b.n	8012a40 <_dtoa_r+0x3e0>
 8012b1c:	4b4d      	ldr	r3, [pc, #308]	; (8012c54 <_dtoa_r+0x5f4>)
 8012b1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012b22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d047      	beq.n	8012bbc <_dtoa_r+0x55c>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	460b      	mov	r3, r1
 8012b30:	2000      	movs	r0, #0
 8012b32:	494e      	ldr	r1, [pc, #312]	; (8012c6c <_dtoa_r+0x60c>)
 8012b34:	f7ed feb2 	bl	800089c <__aeabi_ddiv>
 8012b38:	462a      	mov	r2, r5
 8012b3a:	4633      	mov	r3, r6
 8012b3c:	f7ed fbcc 	bl	80002d8 <__aeabi_dsub>
 8012b40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012b44:	465d      	mov	r5, fp
 8012b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b4a:	f7ee f82d 	bl	8000ba8 <__aeabi_d2iz>
 8012b4e:	4606      	mov	r6, r0
 8012b50:	f7ed fd10 	bl	8000574 <__aeabi_i2d>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b5c:	f7ed fbbc 	bl	80002d8 <__aeabi_dsub>
 8012b60:	3630      	adds	r6, #48	; 0x30
 8012b62:	f805 6b01 	strb.w	r6, [r5], #1
 8012b66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012b6a:	e9cd 0100 	strd	r0, r1, [sp]
 8012b6e:	f7ed ffdd 	bl	8000b2c <__aeabi_dcmplt>
 8012b72:	2800      	cmp	r0, #0
 8012b74:	d163      	bne.n	8012c3e <_dtoa_r+0x5de>
 8012b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b7a:	2000      	movs	r0, #0
 8012b7c:	4937      	ldr	r1, [pc, #220]	; (8012c5c <_dtoa_r+0x5fc>)
 8012b7e:	f7ed fbab 	bl	80002d8 <__aeabi_dsub>
 8012b82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012b86:	f7ed ffd1 	bl	8000b2c <__aeabi_dcmplt>
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	f040 80b7 	bne.w	8012cfe <_dtoa_r+0x69e>
 8012b90:	eba5 030b 	sub.w	r3, r5, fp
 8012b94:	429f      	cmp	r7, r3
 8012b96:	f77f af7c 	ble.w	8012a92 <_dtoa_r+0x432>
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	4b30      	ldr	r3, [pc, #192]	; (8012c60 <_dtoa_r+0x600>)
 8012b9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012ba2:	f7ed fd51 	bl	8000648 <__aeabi_dmul>
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012bac:	4b2c      	ldr	r3, [pc, #176]	; (8012c60 <_dtoa_r+0x600>)
 8012bae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bb2:	f7ed fd49 	bl	8000648 <__aeabi_dmul>
 8012bb6:	e9cd 0100 	strd	r0, r1, [sp]
 8012bba:	e7c4      	b.n	8012b46 <_dtoa_r+0x4e6>
 8012bbc:	462a      	mov	r2, r5
 8012bbe:	4633      	mov	r3, r6
 8012bc0:	f7ed fd42 	bl	8000648 <__aeabi_dmul>
 8012bc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012bc8:	eb0b 0507 	add.w	r5, fp, r7
 8012bcc:	465e      	mov	r6, fp
 8012bce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bd2:	f7ed ffe9 	bl	8000ba8 <__aeabi_d2iz>
 8012bd6:	4607      	mov	r7, r0
 8012bd8:	f7ed fccc 	bl	8000574 <__aeabi_i2d>
 8012bdc:	3730      	adds	r7, #48	; 0x30
 8012bde:	4602      	mov	r2, r0
 8012be0:	460b      	mov	r3, r1
 8012be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012be6:	f7ed fb77 	bl	80002d8 <__aeabi_dsub>
 8012bea:	f806 7b01 	strb.w	r7, [r6], #1
 8012bee:	42ae      	cmp	r6, r5
 8012bf0:	e9cd 0100 	strd	r0, r1, [sp]
 8012bf4:	f04f 0200 	mov.w	r2, #0
 8012bf8:	d126      	bne.n	8012c48 <_dtoa_r+0x5e8>
 8012bfa:	4b1c      	ldr	r3, [pc, #112]	; (8012c6c <_dtoa_r+0x60c>)
 8012bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012c00:	f7ed fb6c 	bl	80002dc <__adddf3>
 8012c04:	4602      	mov	r2, r0
 8012c06:	460b      	mov	r3, r1
 8012c08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c0c:	f7ed ffac 	bl	8000b68 <__aeabi_dcmpgt>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d174      	bne.n	8012cfe <_dtoa_r+0x69e>
 8012c14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012c18:	2000      	movs	r0, #0
 8012c1a:	4914      	ldr	r1, [pc, #80]	; (8012c6c <_dtoa_r+0x60c>)
 8012c1c:	f7ed fb5c 	bl	80002d8 <__aeabi_dsub>
 8012c20:	4602      	mov	r2, r0
 8012c22:	460b      	mov	r3, r1
 8012c24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c28:	f7ed ff80 	bl	8000b2c <__aeabi_dcmplt>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	f43f af30 	beq.w	8012a92 <_dtoa_r+0x432>
 8012c32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012c36:	2b30      	cmp	r3, #48	; 0x30
 8012c38:	f105 32ff 	add.w	r2, r5, #4294967295
 8012c3c:	d002      	beq.n	8012c44 <_dtoa_r+0x5e4>
 8012c3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012c42:	e04a      	b.n	8012cda <_dtoa_r+0x67a>
 8012c44:	4615      	mov	r5, r2
 8012c46:	e7f4      	b.n	8012c32 <_dtoa_r+0x5d2>
 8012c48:	4b05      	ldr	r3, [pc, #20]	; (8012c60 <_dtoa_r+0x600>)
 8012c4a:	f7ed fcfd 	bl	8000648 <__aeabi_dmul>
 8012c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8012c52:	e7bc      	b.n	8012bce <_dtoa_r+0x56e>
 8012c54:	08017aa0 	.word	0x08017aa0
 8012c58:	08017a78 	.word	0x08017a78
 8012c5c:	3ff00000 	.word	0x3ff00000
 8012c60:	40240000 	.word	0x40240000
 8012c64:	401c0000 	.word	0x401c0000
 8012c68:	40140000 	.word	0x40140000
 8012c6c:	3fe00000 	.word	0x3fe00000
 8012c70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012c74:	465d      	mov	r5, fp
 8012c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	f7ed fe0d 	bl	800089c <__aeabi_ddiv>
 8012c82:	f7ed ff91 	bl	8000ba8 <__aeabi_d2iz>
 8012c86:	4680      	mov	r8, r0
 8012c88:	f7ed fc74 	bl	8000574 <__aeabi_i2d>
 8012c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c90:	f7ed fcda 	bl	8000648 <__aeabi_dmul>
 8012c94:	4602      	mov	r2, r0
 8012c96:	460b      	mov	r3, r1
 8012c98:	4630      	mov	r0, r6
 8012c9a:	4639      	mov	r1, r7
 8012c9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012ca0:	f7ed fb1a 	bl	80002d8 <__aeabi_dsub>
 8012ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8012ca8:	eba5 060b 	sub.w	r6, r5, fp
 8012cac:	45b1      	cmp	r9, r6
 8012cae:	4602      	mov	r2, r0
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	d139      	bne.n	8012d28 <_dtoa_r+0x6c8>
 8012cb4:	f7ed fb12 	bl	80002dc <__adddf3>
 8012cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cbc:	4606      	mov	r6, r0
 8012cbe:	460f      	mov	r7, r1
 8012cc0:	f7ed ff52 	bl	8000b68 <__aeabi_dcmpgt>
 8012cc4:	b9c8      	cbnz	r0, 8012cfa <_dtoa_r+0x69a>
 8012cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cca:	4630      	mov	r0, r6
 8012ccc:	4639      	mov	r1, r7
 8012cce:	f7ed ff23 	bl	8000b18 <__aeabi_dcmpeq>
 8012cd2:	b110      	cbz	r0, 8012cda <_dtoa_r+0x67a>
 8012cd4:	f018 0f01 	tst.w	r8, #1
 8012cd8:	d10f      	bne.n	8012cfa <_dtoa_r+0x69a>
 8012cda:	9904      	ldr	r1, [sp, #16]
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f000 fdff 	bl	80138e0 <_Bfree>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ce6:	702b      	strb	r3, [r5, #0]
 8012ce8:	f10a 0301 	add.w	r3, sl, #1
 8012cec:	6013      	str	r3, [r2, #0]
 8012cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	f000 8241 	beq.w	8013178 <_dtoa_r+0xb18>
 8012cf6:	601d      	str	r5, [r3, #0]
 8012cf8:	e23e      	b.n	8013178 <_dtoa_r+0xb18>
 8012cfa:	f8cd a020 	str.w	sl, [sp, #32]
 8012cfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012d02:	2a39      	cmp	r2, #57	; 0x39
 8012d04:	f105 33ff 	add.w	r3, r5, #4294967295
 8012d08:	d108      	bne.n	8012d1c <_dtoa_r+0x6bc>
 8012d0a:	459b      	cmp	fp, r3
 8012d0c:	d10a      	bne.n	8012d24 <_dtoa_r+0x6c4>
 8012d0e:	9b08      	ldr	r3, [sp, #32]
 8012d10:	3301      	adds	r3, #1
 8012d12:	9308      	str	r3, [sp, #32]
 8012d14:	2330      	movs	r3, #48	; 0x30
 8012d16:	f88b 3000 	strb.w	r3, [fp]
 8012d1a:	465b      	mov	r3, fp
 8012d1c:	781a      	ldrb	r2, [r3, #0]
 8012d1e:	3201      	adds	r2, #1
 8012d20:	701a      	strb	r2, [r3, #0]
 8012d22:	e78c      	b.n	8012c3e <_dtoa_r+0x5de>
 8012d24:	461d      	mov	r5, r3
 8012d26:	e7ea      	b.n	8012cfe <_dtoa_r+0x69e>
 8012d28:	2200      	movs	r2, #0
 8012d2a:	4b9b      	ldr	r3, [pc, #620]	; (8012f98 <_dtoa_r+0x938>)
 8012d2c:	f7ed fc8c 	bl	8000648 <__aeabi_dmul>
 8012d30:	2200      	movs	r2, #0
 8012d32:	2300      	movs	r3, #0
 8012d34:	4606      	mov	r6, r0
 8012d36:	460f      	mov	r7, r1
 8012d38:	f7ed feee 	bl	8000b18 <__aeabi_dcmpeq>
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	d09a      	beq.n	8012c76 <_dtoa_r+0x616>
 8012d40:	e7cb      	b.n	8012cda <_dtoa_r+0x67a>
 8012d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d44:	2a00      	cmp	r2, #0
 8012d46:	f000 808b 	beq.w	8012e60 <_dtoa_r+0x800>
 8012d4a:	9a06      	ldr	r2, [sp, #24]
 8012d4c:	2a01      	cmp	r2, #1
 8012d4e:	dc6e      	bgt.n	8012e2e <_dtoa_r+0x7ce>
 8012d50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012d52:	2a00      	cmp	r2, #0
 8012d54:	d067      	beq.n	8012e26 <_dtoa_r+0x7c6>
 8012d56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012d5a:	9f07      	ldr	r7, [sp, #28]
 8012d5c:	9d05      	ldr	r5, [sp, #20]
 8012d5e:	9a05      	ldr	r2, [sp, #20]
 8012d60:	2101      	movs	r1, #1
 8012d62:	441a      	add	r2, r3
 8012d64:	4620      	mov	r0, r4
 8012d66:	9205      	str	r2, [sp, #20]
 8012d68:	4498      	add	r8, r3
 8012d6a:	f000 fe97 	bl	8013a9c <__i2b>
 8012d6e:	4606      	mov	r6, r0
 8012d70:	2d00      	cmp	r5, #0
 8012d72:	dd0c      	ble.n	8012d8e <_dtoa_r+0x72e>
 8012d74:	f1b8 0f00 	cmp.w	r8, #0
 8012d78:	dd09      	ble.n	8012d8e <_dtoa_r+0x72e>
 8012d7a:	4545      	cmp	r5, r8
 8012d7c:	9a05      	ldr	r2, [sp, #20]
 8012d7e:	462b      	mov	r3, r5
 8012d80:	bfa8      	it	ge
 8012d82:	4643      	movge	r3, r8
 8012d84:	1ad2      	subs	r2, r2, r3
 8012d86:	9205      	str	r2, [sp, #20]
 8012d88:	1aed      	subs	r5, r5, r3
 8012d8a:	eba8 0803 	sub.w	r8, r8, r3
 8012d8e:	9b07      	ldr	r3, [sp, #28]
 8012d90:	b1eb      	cbz	r3, 8012dce <_dtoa_r+0x76e>
 8012d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d067      	beq.n	8012e68 <_dtoa_r+0x808>
 8012d98:	b18f      	cbz	r7, 8012dbe <_dtoa_r+0x75e>
 8012d9a:	4631      	mov	r1, r6
 8012d9c:	463a      	mov	r2, r7
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f000 ff1c 	bl	8013bdc <__pow5mult>
 8012da4:	9a04      	ldr	r2, [sp, #16]
 8012da6:	4601      	mov	r1, r0
 8012da8:	4606      	mov	r6, r0
 8012daa:	4620      	mov	r0, r4
 8012dac:	f000 fe7f 	bl	8013aae <__multiply>
 8012db0:	9904      	ldr	r1, [sp, #16]
 8012db2:	9008      	str	r0, [sp, #32]
 8012db4:	4620      	mov	r0, r4
 8012db6:	f000 fd93 	bl	80138e0 <_Bfree>
 8012dba:	9b08      	ldr	r3, [sp, #32]
 8012dbc:	9304      	str	r3, [sp, #16]
 8012dbe:	9b07      	ldr	r3, [sp, #28]
 8012dc0:	1bda      	subs	r2, r3, r7
 8012dc2:	d004      	beq.n	8012dce <_dtoa_r+0x76e>
 8012dc4:	9904      	ldr	r1, [sp, #16]
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f000 ff08 	bl	8013bdc <__pow5mult>
 8012dcc:	9004      	str	r0, [sp, #16]
 8012dce:	2101      	movs	r1, #1
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f000 fe63 	bl	8013a9c <__i2b>
 8012dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dd8:	4607      	mov	r7, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f000 81d0 	beq.w	8013180 <_dtoa_r+0xb20>
 8012de0:	461a      	mov	r2, r3
 8012de2:	4601      	mov	r1, r0
 8012de4:	4620      	mov	r0, r4
 8012de6:	f000 fef9 	bl	8013bdc <__pow5mult>
 8012dea:	9b06      	ldr	r3, [sp, #24]
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	4607      	mov	r7, r0
 8012df0:	dc40      	bgt.n	8012e74 <_dtoa_r+0x814>
 8012df2:	9b00      	ldr	r3, [sp, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d139      	bne.n	8012e6c <_dtoa_r+0x80c>
 8012df8:	9b01      	ldr	r3, [sp, #4]
 8012dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d136      	bne.n	8012e70 <_dtoa_r+0x810>
 8012e02:	9b01      	ldr	r3, [sp, #4]
 8012e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e08:	0d1b      	lsrs	r3, r3, #20
 8012e0a:	051b      	lsls	r3, r3, #20
 8012e0c:	b12b      	cbz	r3, 8012e1a <_dtoa_r+0x7ba>
 8012e0e:	9b05      	ldr	r3, [sp, #20]
 8012e10:	3301      	adds	r3, #1
 8012e12:	9305      	str	r3, [sp, #20]
 8012e14:	f108 0801 	add.w	r8, r8, #1
 8012e18:	2301      	movs	r3, #1
 8012e1a:	9307      	str	r3, [sp, #28]
 8012e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d12a      	bne.n	8012e78 <_dtoa_r+0x818>
 8012e22:	2001      	movs	r0, #1
 8012e24:	e030      	b.n	8012e88 <_dtoa_r+0x828>
 8012e26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012e28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012e2c:	e795      	b.n	8012d5a <_dtoa_r+0x6fa>
 8012e2e:	9b07      	ldr	r3, [sp, #28]
 8012e30:	f109 37ff 	add.w	r7, r9, #4294967295
 8012e34:	42bb      	cmp	r3, r7
 8012e36:	bfbf      	itttt	lt
 8012e38:	9b07      	ldrlt	r3, [sp, #28]
 8012e3a:	9707      	strlt	r7, [sp, #28]
 8012e3c:	1afa      	sublt	r2, r7, r3
 8012e3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012e40:	bfbb      	ittet	lt
 8012e42:	189b      	addlt	r3, r3, r2
 8012e44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012e46:	1bdf      	subge	r7, r3, r7
 8012e48:	2700      	movlt	r7, #0
 8012e4a:	f1b9 0f00 	cmp.w	r9, #0
 8012e4e:	bfb5      	itete	lt
 8012e50:	9b05      	ldrlt	r3, [sp, #20]
 8012e52:	9d05      	ldrge	r5, [sp, #20]
 8012e54:	eba3 0509 	sublt.w	r5, r3, r9
 8012e58:	464b      	movge	r3, r9
 8012e5a:	bfb8      	it	lt
 8012e5c:	2300      	movlt	r3, #0
 8012e5e:	e77e      	b.n	8012d5e <_dtoa_r+0x6fe>
 8012e60:	9f07      	ldr	r7, [sp, #28]
 8012e62:	9d05      	ldr	r5, [sp, #20]
 8012e64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012e66:	e783      	b.n	8012d70 <_dtoa_r+0x710>
 8012e68:	9a07      	ldr	r2, [sp, #28]
 8012e6a:	e7ab      	b.n	8012dc4 <_dtoa_r+0x764>
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	e7d4      	b.n	8012e1a <_dtoa_r+0x7ba>
 8012e70:	9b00      	ldr	r3, [sp, #0]
 8012e72:	e7d2      	b.n	8012e1a <_dtoa_r+0x7ba>
 8012e74:	2300      	movs	r3, #0
 8012e76:	9307      	str	r3, [sp, #28]
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012e7e:	6918      	ldr	r0, [r3, #16]
 8012e80:	f000 fdbe 	bl	8013a00 <__hi0bits>
 8012e84:	f1c0 0020 	rsb	r0, r0, #32
 8012e88:	4440      	add	r0, r8
 8012e8a:	f010 001f 	ands.w	r0, r0, #31
 8012e8e:	d047      	beq.n	8012f20 <_dtoa_r+0x8c0>
 8012e90:	f1c0 0320 	rsb	r3, r0, #32
 8012e94:	2b04      	cmp	r3, #4
 8012e96:	dd3b      	ble.n	8012f10 <_dtoa_r+0x8b0>
 8012e98:	9b05      	ldr	r3, [sp, #20]
 8012e9a:	f1c0 001c 	rsb	r0, r0, #28
 8012e9e:	4403      	add	r3, r0
 8012ea0:	9305      	str	r3, [sp, #20]
 8012ea2:	4405      	add	r5, r0
 8012ea4:	4480      	add	r8, r0
 8012ea6:	9b05      	ldr	r3, [sp, #20]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	dd05      	ble.n	8012eb8 <_dtoa_r+0x858>
 8012eac:	461a      	mov	r2, r3
 8012eae:	9904      	ldr	r1, [sp, #16]
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	f000 fee1 	bl	8013c78 <__lshift>
 8012eb6:	9004      	str	r0, [sp, #16]
 8012eb8:	f1b8 0f00 	cmp.w	r8, #0
 8012ebc:	dd05      	ble.n	8012eca <_dtoa_r+0x86a>
 8012ebe:	4639      	mov	r1, r7
 8012ec0:	4642      	mov	r2, r8
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	f000 fed8 	bl	8013c78 <__lshift>
 8012ec8:	4607      	mov	r7, r0
 8012eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ecc:	b353      	cbz	r3, 8012f24 <_dtoa_r+0x8c4>
 8012ece:	4639      	mov	r1, r7
 8012ed0:	9804      	ldr	r0, [sp, #16]
 8012ed2:	f000 ff25 	bl	8013d20 <__mcmp>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	da24      	bge.n	8012f24 <_dtoa_r+0x8c4>
 8012eda:	2300      	movs	r3, #0
 8012edc:	220a      	movs	r2, #10
 8012ede:	9904      	ldr	r1, [sp, #16]
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 fd14 	bl	801390e <__multadd>
 8012ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ee8:	9004      	str	r0, [sp, #16]
 8012eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f000 814d 	beq.w	801318e <_dtoa_r+0xb2e>
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	4631      	mov	r1, r6
 8012ef8:	220a      	movs	r2, #10
 8012efa:	4620      	mov	r0, r4
 8012efc:	f000 fd07 	bl	801390e <__multadd>
 8012f00:	9b02      	ldr	r3, [sp, #8]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	4606      	mov	r6, r0
 8012f06:	dc4f      	bgt.n	8012fa8 <_dtoa_r+0x948>
 8012f08:	9b06      	ldr	r3, [sp, #24]
 8012f0a:	2b02      	cmp	r3, #2
 8012f0c:	dd4c      	ble.n	8012fa8 <_dtoa_r+0x948>
 8012f0e:	e011      	b.n	8012f34 <_dtoa_r+0x8d4>
 8012f10:	d0c9      	beq.n	8012ea6 <_dtoa_r+0x846>
 8012f12:	9a05      	ldr	r2, [sp, #20]
 8012f14:	331c      	adds	r3, #28
 8012f16:	441a      	add	r2, r3
 8012f18:	9205      	str	r2, [sp, #20]
 8012f1a:	441d      	add	r5, r3
 8012f1c:	4498      	add	r8, r3
 8012f1e:	e7c2      	b.n	8012ea6 <_dtoa_r+0x846>
 8012f20:	4603      	mov	r3, r0
 8012f22:	e7f6      	b.n	8012f12 <_dtoa_r+0x8b2>
 8012f24:	f1b9 0f00 	cmp.w	r9, #0
 8012f28:	dc38      	bgt.n	8012f9c <_dtoa_r+0x93c>
 8012f2a:	9b06      	ldr	r3, [sp, #24]
 8012f2c:	2b02      	cmp	r3, #2
 8012f2e:	dd35      	ble.n	8012f9c <_dtoa_r+0x93c>
 8012f30:	f8cd 9008 	str.w	r9, [sp, #8]
 8012f34:	9b02      	ldr	r3, [sp, #8]
 8012f36:	b963      	cbnz	r3, 8012f52 <_dtoa_r+0x8f2>
 8012f38:	4639      	mov	r1, r7
 8012f3a:	2205      	movs	r2, #5
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f000 fce6 	bl	801390e <__multadd>
 8012f42:	4601      	mov	r1, r0
 8012f44:	4607      	mov	r7, r0
 8012f46:	9804      	ldr	r0, [sp, #16]
 8012f48:	f000 feea 	bl	8013d20 <__mcmp>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	f73f adcc 	bgt.w	8012aea <_dtoa_r+0x48a>
 8012f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f54:	465d      	mov	r5, fp
 8012f56:	ea6f 0a03 	mvn.w	sl, r3
 8012f5a:	f04f 0900 	mov.w	r9, #0
 8012f5e:	4639      	mov	r1, r7
 8012f60:	4620      	mov	r0, r4
 8012f62:	f000 fcbd 	bl	80138e0 <_Bfree>
 8012f66:	2e00      	cmp	r6, #0
 8012f68:	f43f aeb7 	beq.w	8012cda <_dtoa_r+0x67a>
 8012f6c:	f1b9 0f00 	cmp.w	r9, #0
 8012f70:	d005      	beq.n	8012f7e <_dtoa_r+0x91e>
 8012f72:	45b1      	cmp	r9, r6
 8012f74:	d003      	beq.n	8012f7e <_dtoa_r+0x91e>
 8012f76:	4649      	mov	r1, r9
 8012f78:	4620      	mov	r0, r4
 8012f7a:	f000 fcb1 	bl	80138e0 <_Bfree>
 8012f7e:	4631      	mov	r1, r6
 8012f80:	4620      	mov	r0, r4
 8012f82:	f000 fcad 	bl	80138e0 <_Bfree>
 8012f86:	e6a8      	b.n	8012cda <_dtoa_r+0x67a>
 8012f88:	2700      	movs	r7, #0
 8012f8a:	463e      	mov	r6, r7
 8012f8c:	e7e1      	b.n	8012f52 <_dtoa_r+0x8f2>
 8012f8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012f92:	463e      	mov	r6, r7
 8012f94:	e5a9      	b.n	8012aea <_dtoa_r+0x48a>
 8012f96:	bf00      	nop
 8012f98:	40240000 	.word	0x40240000
 8012f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	f000 80fa 	beq.w	801319c <_dtoa_r+0xb3c>
 8012fa8:	2d00      	cmp	r5, #0
 8012faa:	dd05      	ble.n	8012fb8 <_dtoa_r+0x958>
 8012fac:	4631      	mov	r1, r6
 8012fae:	462a      	mov	r2, r5
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f000 fe61 	bl	8013c78 <__lshift>
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	9b07      	ldr	r3, [sp, #28]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d04c      	beq.n	8013058 <_dtoa_r+0x9f8>
 8012fbe:	6871      	ldr	r1, [r6, #4]
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	f000 fc59 	bl	8013878 <_Balloc>
 8012fc6:	6932      	ldr	r2, [r6, #16]
 8012fc8:	3202      	adds	r2, #2
 8012fca:	4605      	mov	r5, r0
 8012fcc:	0092      	lsls	r2, r2, #2
 8012fce:	f106 010c 	add.w	r1, r6, #12
 8012fd2:	300c      	adds	r0, #12
 8012fd4:	f7fd fd4e 	bl	8010a74 <memcpy>
 8012fd8:	2201      	movs	r2, #1
 8012fda:	4629      	mov	r1, r5
 8012fdc:	4620      	mov	r0, r4
 8012fde:	f000 fe4b 	bl	8013c78 <__lshift>
 8012fe2:	9b00      	ldr	r3, [sp, #0]
 8012fe4:	f8cd b014 	str.w	fp, [sp, #20]
 8012fe8:	f003 0301 	and.w	r3, r3, #1
 8012fec:	46b1      	mov	r9, r6
 8012fee:	9307      	str	r3, [sp, #28]
 8012ff0:	4606      	mov	r6, r0
 8012ff2:	4639      	mov	r1, r7
 8012ff4:	9804      	ldr	r0, [sp, #16]
 8012ff6:	f7ff faa7 	bl	8012548 <quorem>
 8012ffa:	4649      	mov	r1, r9
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013002:	9804      	ldr	r0, [sp, #16]
 8013004:	f000 fe8c 	bl	8013d20 <__mcmp>
 8013008:	4632      	mov	r2, r6
 801300a:	9000      	str	r0, [sp, #0]
 801300c:	4639      	mov	r1, r7
 801300e:	4620      	mov	r0, r4
 8013010:	f000 fea0 	bl	8013d54 <__mdiff>
 8013014:	68c3      	ldr	r3, [r0, #12]
 8013016:	4602      	mov	r2, r0
 8013018:	bb03      	cbnz	r3, 801305c <_dtoa_r+0x9fc>
 801301a:	4601      	mov	r1, r0
 801301c:	9008      	str	r0, [sp, #32]
 801301e:	9804      	ldr	r0, [sp, #16]
 8013020:	f000 fe7e 	bl	8013d20 <__mcmp>
 8013024:	9a08      	ldr	r2, [sp, #32]
 8013026:	4603      	mov	r3, r0
 8013028:	4611      	mov	r1, r2
 801302a:	4620      	mov	r0, r4
 801302c:	9308      	str	r3, [sp, #32]
 801302e:	f000 fc57 	bl	80138e0 <_Bfree>
 8013032:	9b08      	ldr	r3, [sp, #32]
 8013034:	b9a3      	cbnz	r3, 8013060 <_dtoa_r+0xa00>
 8013036:	9a06      	ldr	r2, [sp, #24]
 8013038:	b992      	cbnz	r2, 8013060 <_dtoa_r+0xa00>
 801303a:	9a07      	ldr	r2, [sp, #28]
 801303c:	b982      	cbnz	r2, 8013060 <_dtoa_r+0xa00>
 801303e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013042:	d029      	beq.n	8013098 <_dtoa_r+0xa38>
 8013044:	9b00      	ldr	r3, [sp, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	dd01      	ble.n	801304e <_dtoa_r+0x9ee>
 801304a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801304e:	9b05      	ldr	r3, [sp, #20]
 8013050:	1c5d      	adds	r5, r3, #1
 8013052:	f883 8000 	strb.w	r8, [r3]
 8013056:	e782      	b.n	8012f5e <_dtoa_r+0x8fe>
 8013058:	4630      	mov	r0, r6
 801305a:	e7c2      	b.n	8012fe2 <_dtoa_r+0x982>
 801305c:	2301      	movs	r3, #1
 801305e:	e7e3      	b.n	8013028 <_dtoa_r+0x9c8>
 8013060:	9a00      	ldr	r2, [sp, #0]
 8013062:	2a00      	cmp	r2, #0
 8013064:	db04      	blt.n	8013070 <_dtoa_r+0xa10>
 8013066:	d125      	bne.n	80130b4 <_dtoa_r+0xa54>
 8013068:	9a06      	ldr	r2, [sp, #24]
 801306a:	bb1a      	cbnz	r2, 80130b4 <_dtoa_r+0xa54>
 801306c:	9a07      	ldr	r2, [sp, #28]
 801306e:	bb0a      	cbnz	r2, 80130b4 <_dtoa_r+0xa54>
 8013070:	2b00      	cmp	r3, #0
 8013072:	ddec      	ble.n	801304e <_dtoa_r+0x9ee>
 8013074:	2201      	movs	r2, #1
 8013076:	9904      	ldr	r1, [sp, #16]
 8013078:	4620      	mov	r0, r4
 801307a:	f000 fdfd 	bl	8013c78 <__lshift>
 801307e:	4639      	mov	r1, r7
 8013080:	9004      	str	r0, [sp, #16]
 8013082:	f000 fe4d 	bl	8013d20 <__mcmp>
 8013086:	2800      	cmp	r0, #0
 8013088:	dc03      	bgt.n	8013092 <_dtoa_r+0xa32>
 801308a:	d1e0      	bne.n	801304e <_dtoa_r+0x9ee>
 801308c:	f018 0f01 	tst.w	r8, #1
 8013090:	d0dd      	beq.n	801304e <_dtoa_r+0x9ee>
 8013092:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013096:	d1d8      	bne.n	801304a <_dtoa_r+0x9ea>
 8013098:	9b05      	ldr	r3, [sp, #20]
 801309a:	9a05      	ldr	r2, [sp, #20]
 801309c:	1c5d      	adds	r5, r3, #1
 801309e:	2339      	movs	r3, #57	; 0x39
 80130a0:	7013      	strb	r3, [r2, #0]
 80130a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80130a6:	2b39      	cmp	r3, #57	; 0x39
 80130a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80130ac:	d04f      	beq.n	801314e <_dtoa_r+0xaee>
 80130ae:	3301      	adds	r3, #1
 80130b0:	7013      	strb	r3, [r2, #0]
 80130b2:	e754      	b.n	8012f5e <_dtoa_r+0x8fe>
 80130b4:	9a05      	ldr	r2, [sp, #20]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f102 0501 	add.w	r5, r2, #1
 80130bc:	dd06      	ble.n	80130cc <_dtoa_r+0xa6c>
 80130be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80130c2:	d0e9      	beq.n	8013098 <_dtoa_r+0xa38>
 80130c4:	f108 0801 	add.w	r8, r8, #1
 80130c8:	9b05      	ldr	r3, [sp, #20]
 80130ca:	e7c2      	b.n	8013052 <_dtoa_r+0x9f2>
 80130cc:	9a02      	ldr	r2, [sp, #8]
 80130ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80130d2:	eba5 030b 	sub.w	r3, r5, fp
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d021      	beq.n	801311e <_dtoa_r+0xabe>
 80130da:	2300      	movs	r3, #0
 80130dc:	220a      	movs	r2, #10
 80130de:	9904      	ldr	r1, [sp, #16]
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 fc14 	bl	801390e <__multadd>
 80130e6:	45b1      	cmp	r9, r6
 80130e8:	9004      	str	r0, [sp, #16]
 80130ea:	f04f 0300 	mov.w	r3, #0
 80130ee:	f04f 020a 	mov.w	r2, #10
 80130f2:	4649      	mov	r1, r9
 80130f4:	4620      	mov	r0, r4
 80130f6:	d105      	bne.n	8013104 <_dtoa_r+0xaa4>
 80130f8:	f000 fc09 	bl	801390e <__multadd>
 80130fc:	4681      	mov	r9, r0
 80130fe:	4606      	mov	r6, r0
 8013100:	9505      	str	r5, [sp, #20]
 8013102:	e776      	b.n	8012ff2 <_dtoa_r+0x992>
 8013104:	f000 fc03 	bl	801390e <__multadd>
 8013108:	4631      	mov	r1, r6
 801310a:	4681      	mov	r9, r0
 801310c:	2300      	movs	r3, #0
 801310e:	220a      	movs	r2, #10
 8013110:	4620      	mov	r0, r4
 8013112:	f000 fbfc 	bl	801390e <__multadd>
 8013116:	4606      	mov	r6, r0
 8013118:	e7f2      	b.n	8013100 <_dtoa_r+0xaa0>
 801311a:	f04f 0900 	mov.w	r9, #0
 801311e:	2201      	movs	r2, #1
 8013120:	9904      	ldr	r1, [sp, #16]
 8013122:	4620      	mov	r0, r4
 8013124:	f000 fda8 	bl	8013c78 <__lshift>
 8013128:	4639      	mov	r1, r7
 801312a:	9004      	str	r0, [sp, #16]
 801312c:	f000 fdf8 	bl	8013d20 <__mcmp>
 8013130:	2800      	cmp	r0, #0
 8013132:	dcb6      	bgt.n	80130a2 <_dtoa_r+0xa42>
 8013134:	d102      	bne.n	801313c <_dtoa_r+0xadc>
 8013136:	f018 0f01 	tst.w	r8, #1
 801313a:	d1b2      	bne.n	80130a2 <_dtoa_r+0xa42>
 801313c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013140:	2b30      	cmp	r3, #48	; 0x30
 8013142:	f105 32ff 	add.w	r2, r5, #4294967295
 8013146:	f47f af0a 	bne.w	8012f5e <_dtoa_r+0x8fe>
 801314a:	4615      	mov	r5, r2
 801314c:	e7f6      	b.n	801313c <_dtoa_r+0xadc>
 801314e:	4593      	cmp	fp, r2
 8013150:	d105      	bne.n	801315e <_dtoa_r+0xafe>
 8013152:	2331      	movs	r3, #49	; 0x31
 8013154:	f10a 0a01 	add.w	sl, sl, #1
 8013158:	f88b 3000 	strb.w	r3, [fp]
 801315c:	e6ff      	b.n	8012f5e <_dtoa_r+0x8fe>
 801315e:	4615      	mov	r5, r2
 8013160:	e79f      	b.n	80130a2 <_dtoa_r+0xa42>
 8013162:	f8df b064 	ldr.w	fp, [pc, #100]	; 80131c8 <_dtoa_r+0xb68>
 8013166:	e007      	b.n	8013178 <_dtoa_r+0xb18>
 8013168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801316a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80131cc <_dtoa_r+0xb6c>
 801316e:	b11b      	cbz	r3, 8013178 <_dtoa_r+0xb18>
 8013170:	f10b 0308 	add.w	r3, fp, #8
 8013174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013176:	6013      	str	r3, [r2, #0]
 8013178:	4658      	mov	r0, fp
 801317a:	b017      	add	sp, #92	; 0x5c
 801317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013180:	9b06      	ldr	r3, [sp, #24]
 8013182:	2b01      	cmp	r3, #1
 8013184:	f77f ae35 	ble.w	8012df2 <_dtoa_r+0x792>
 8013188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801318a:	9307      	str	r3, [sp, #28]
 801318c:	e649      	b.n	8012e22 <_dtoa_r+0x7c2>
 801318e:	9b02      	ldr	r3, [sp, #8]
 8013190:	2b00      	cmp	r3, #0
 8013192:	dc03      	bgt.n	801319c <_dtoa_r+0xb3c>
 8013194:	9b06      	ldr	r3, [sp, #24]
 8013196:	2b02      	cmp	r3, #2
 8013198:	f73f aecc 	bgt.w	8012f34 <_dtoa_r+0x8d4>
 801319c:	465d      	mov	r5, fp
 801319e:	4639      	mov	r1, r7
 80131a0:	9804      	ldr	r0, [sp, #16]
 80131a2:	f7ff f9d1 	bl	8012548 <quorem>
 80131a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80131aa:	f805 8b01 	strb.w	r8, [r5], #1
 80131ae:	9a02      	ldr	r2, [sp, #8]
 80131b0:	eba5 030b 	sub.w	r3, r5, fp
 80131b4:	429a      	cmp	r2, r3
 80131b6:	ddb0      	ble.n	801311a <_dtoa_r+0xaba>
 80131b8:	2300      	movs	r3, #0
 80131ba:	220a      	movs	r2, #10
 80131bc:	9904      	ldr	r1, [sp, #16]
 80131be:	4620      	mov	r0, r4
 80131c0:	f000 fba5 	bl	801390e <__multadd>
 80131c4:	9004      	str	r0, [sp, #16]
 80131c6:	e7ea      	b.n	801319e <_dtoa_r+0xb3e>
 80131c8:	080179e2 	.word	0x080179e2
 80131cc:	08017a60 	.word	0x08017a60

080131d0 <rshift>:
 80131d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d2:	6906      	ldr	r6, [r0, #16]
 80131d4:	114b      	asrs	r3, r1, #5
 80131d6:	429e      	cmp	r6, r3
 80131d8:	f100 0414 	add.w	r4, r0, #20
 80131dc:	dd30      	ble.n	8013240 <rshift+0x70>
 80131de:	f011 011f 	ands.w	r1, r1, #31
 80131e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80131e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80131ea:	d108      	bne.n	80131fe <rshift+0x2e>
 80131ec:	4621      	mov	r1, r4
 80131ee:	42b2      	cmp	r2, r6
 80131f0:	460b      	mov	r3, r1
 80131f2:	d211      	bcs.n	8013218 <rshift+0x48>
 80131f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80131f8:	f841 3b04 	str.w	r3, [r1], #4
 80131fc:	e7f7      	b.n	80131ee <rshift+0x1e>
 80131fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013202:	f1c1 0c20 	rsb	ip, r1, #32
 8013206:	40cd      	lsrs	r5, r1
 8013208:	3204      	adds	r2, #4
 801320a:	4623      	mov	r3, r4
 801320c:	42b2      	cmp	r2, r6
 801320e:	4617      	mov	r7, r2
 8013210:	d30c      	bcc.n	801322c <rshift+0x5c>
 8013212:	601d      	str	r5, [r3, #0]
 8013214:	b105      	cbz	r5, 8013218 <rshift+0x48>
 8013216:	3304      	adds	r3, #4
 8013218:	1b1a      	subs	r2, r3, r4
 801321a:	42a3      	cmp	r3, r4
 801321c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013220:	bf08      	it	eq
 8013222:	2300      	moveq	r3, #0
 8013224:	6102      	str	r2, [r0, #16]
 8013226:	bf08      	it	eq
 8013228:	6143      	streq	r3, [r0, #20]
 801322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322c:	683f      	ldr	r7, [r7, #0]
 801322e:	fa07 f70c 	lsl.w	r7, r7, ip
 8013232:	433d      	orrs	r5, r7
 8013234:	f843 5b04 	str.w	r5, [r3], #4
 8013238:	f852 5b04 	ldr.w	r5, [r2], #4
 801323c:	40cd      	lsrs	r5, r1
 801323e:	e7e5      	b.n	801320c <rshift+0x3c>
 8013240:	4623      	mov	r3, r4
 8013242:	e7e9      	b.n	8013218 <rshift+0x48>

08013244 <__hexdig_fun>:
 8013244:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013248:	2b09      	cmp	r3, #9
 801324a:	d802      	bhi.n	8013252 <__hexdig_fun+0xe>
 801324c:	3820      	subs	r0, #32
 801324e:	b2c0      	uxtb	r0, r0
 8013250:	4770      	bx	lr
 8013252:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013256:	2b05      	cmp	r3, #5
 8013258:	d801      	bhi.n	801325e <__hexdig_fun+0x1a>
 801325a:	3847      	subs	r0, #71	; 0x47
 801325c:	e7f7      	b.n	801324e <__hexdig_fun+0xa>
 801325e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013262:	2b05      	cmp	r3, #5
 8013264:	d801      	bhi.n	801326a <__hexdig_fun+0x26>
 8013266:	3827      	subs	r0, #39	; 0x27
 8013268:	e7f1      	b.n	801324e <__hexdig_fun+0xa>
 801326a:	2000      	movs	r0, #0
 801326c:	4770      	bx	lr

0801326e <__gethex>:
 801326e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013272:	b08b      	sub	sp, #44	; 0x2c
 8013274:	468a      	mov	sl, r1
 8013276:	9002      	str	r0, [sp, #8]
 8013278:	9816      	ldr	r0, [sp, #88]	; 0x58
 801327a:	9306      	str	r3, [sp, #24]
 801327c:	4690      	mov	r8, r2
 801327e:	f000 fad0 	bl	8013822 <__localeconv_l>
 8013282:	6803      	ldr	r3, [r0, #0]
 8013284:	9303      	str	r3, [sp, #12]
 8013286:	4618      	mov	r0, r3
 8013288:	f7ec ffca 	bl	8000220 <strlen>
 801328c:	9b03      	ldr	r3, [sp, #12]
 801328e:	9001      	str	r0, [sp, #4]
 8013290:	4403      	add	r3, r0
 8013292:	f04f 0b00 	mov.w	fp, #0
 8013296:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801329a:	9307      	str	r3, [sp, #28]
 801329c:	f8da 3000 	ldr.w	r3, [sl]
 80132a0:	3302      	adds	r3, #2
 80132a2:	461f      	mov	r7, r3
 80132a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80132a8:	2830      	cmp	r0, #48	; 0x30
 80132aa:	d06c      	beq.n	8013386 <__gethex+0x118>
 80132ac:	f7ff ffca 	bl	8013244 <__hexdig_fun>
 80132b0:	4604      	mov	r4, r0
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d16a      	bne.n	801338c <__gethex+0x11e>
 80132b6:	9a01      	ldr	r2, [sp, #4]
 80132b8:	9903      	ldr	r1, [sp, #12]
 80132ba:	4638      	mov	r0, r7
 80132bc:	f001 f8f4 	bl	80144a8 <strncmp>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d166      	bne.n	8013392 <__gethex+0x124>
 80132c4:	9b01      	ldr	r3, [sp, #4]
 80132c6:	5cf8      	ldrb	r0, [r7, r3]
 80132c8:	18fe      	adds	r6, r7, r3
 80132ca:	f7ff ffbb 	bl	8013244 <__hexdig_fun>
 80132ce:	2800      	cmp	r0, #0
 80132d0:	d062      	beq.n	8013398 <__gethex+0x12a>
 80132d2:	4633      	mov	r3, r6
 80132d4:	7818      	ldrb	r0, [r3, #0]
 80132d6:	2830      	cmp	r0, #48	; 0x30
 80132d8:	461f      	mov	r7, r3
 80132da:	f103 0301 	add.w	r3, r3, #1
 80132de:	d0f9      	beq.n	80132d4 <__gethex+0x66>
 80132e0:	f7ff ffb0 	bl	8013244 <__hexdig_fun>
 80132e4:	fab0 f580 	clz	r5, r0
 80132e8:	096d      	lsrs	r5, r5, #5
 80132ea:	4634      	mov	r4, r6
 80132ec:	f04f 0b01 	mov.w	fp, #1
 80132f0:	463a      	mov	r2, r7
 80132f2:	4616      	mov	r6, r2
 80132f4:	3201      	adds	r2, #1
 80132f6:	7830      	ldrb	r0, [r6, #0]
 80132f8:	f7ff ffa4 	bl	8013244 <__hexdig_fun>
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d1f8      	bne.n	80132f2 <__gethex+0x84>
 8013300:	9a01      	ldr	r2, [sp, #4]
 8013302:	9903      	ldr	r1, [sp, #12]
 8013304:	4630      	mov	r0, r6
 8013306:	f001 f8cf 	bl	80144a8 <strncmp>
 801330a:	b950      	cbnz	r0, 8013322 <__gethex+0xb4>
 801330c:	b954      	cbnz	r4, 8013324 <__gethex+0xb6>
 801330e:	9b01      	ldr	r3, [sp, #4]
 8013310:	18f4      	adds	r4, r6, r3
 8013312:	4622      	mov	r2, r4
 8013314:	4616      	mov	r6, r2
 8013316:	3201      	adds	r2, #1
 8013318:	7830      	ldrb	r0, [r6, #0]
 801331a:	f7ff ff93 	bl	8013244 <__hexdig_fun>
 801331e:	2800      	cmp	r0, #0
 8013320:	d1f8      	bne.n	8013314 <__gethex+0xa6>
 8013322:	b10c      	cbz	r4, 8013328 <__gethex+0xba>
 8013324:	1ba4      	subs	r4, r4, r6
 8013326:	00a4      	lsls	r4, r4, #2
 8013328:	7833      	ldrb	r3, [r6, #0]
 801332a:	2b50      	cmp	r3, #80	; 0x50
 801332c:	d001      	beq.n	8013332 <__gethex+0xc4>
 801332e:	2b70      	cmp	r3, #112	; 0x70
 8013330:	d140      	bne.n	80133b4 <__gethex+0x146>
 8013332:	7873      	ldrb	r3, [r6, #1]
 8013334:	2b2b      	cmp	r3, #43	; 0x2b
 8013336:	d031      	beq.n	801339c <__gethex+0x12e>
 8013338:	2b2d      	cmp	r3, #45	; 0x2d
 801333a:	d033      	beq.n	80133a4 <__gethex+0x136>
 801333c:	1c71      	adds	r1, r6, #1
 801333e:	f04f 0900 	mov.w	r9, #0
 8013342:	7808      	ldrb	r0, [r1, #0]
 8013344:	f7ff ff7e 	bl	8013244 <__hexdig_fun>
 8013348:	1e43      	subs	r3, r0, #1
 801334a:	b2db      	uxtb	r3, r3
 801334c:	2b18      	cmp	r3, #24
 801334e:	d831      	bhi.n	80133b4 <__gethex+0x146>
 8013350:	f1a0 0210 	sub.w	r2, r0, #16
 8013354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013358:	f7ff ff74 	bl	8013244 <__hexdig_fun>
 801335c:	1e43      	subs	r3, r0, #1
 801335e:	b2db      	uxtb	r3, r3
 8013360:	2b18      	cmp	r3, #24
 8013362:	d922      	bls.n	80133aa <__gethex+0x13c>
 8013364:	f1b9 0f00 	cmp.w	r9, #0
 8013368:	d000      	beq.n	801336c <__gethex+0xfe>
 801336a:	4252      	negs	r2, r2
 801336c:	4414      	add	r4, r2
 801336e:	f8ca 1000 	str.w	r1, [sl]
 8013372:	b30d      	cbz	r5, 80133b8 <__gethex+0x14a>
 8013374:	f1bb 0f00 	cmp.w	fp, #0
 8013378:	bf0c      	ite	eq
 801337a:	2706      	moveq	r7, #6
 801337c:	2700      	movne	r7, #0
 801337e:	4638      	mov	r0, r7
 8013380:	b00b      	add	sp, #44	; 0x2c
 8013382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013386:	f10b 0b01 	add.w	fp, fp, #1
 801338a:	e78a      	b.n	80132a2 <__gethex+0x34>
 801338c:	2500      	movs	r5, #0
 801338e:	462c      	mov	r4, r5
 8013390:	e7ae      	b.n	80132f0 <__gethex+0x82>
 8013392:	463e      	mov	r6, r7
 8013394:	2501      	movs	r5, #1
 8013396:	e7c7      	b.n	8013328 <__gethex+0xba>
 8013398:	4604      	mov	r4, r0
 801339a:	e7fb      	b.n	8013394 <__gethex+0x126>
 801339c:	f04f 0900 	mov.w	r9, #0
 80133a0:	1cb1      	adds	r1, r6, #2
 80133a2:	e7ce      	b.n	8013342 <__gethex+0xd4>
 80133a4:	f04f 0901 	mov.w	r9, #1
 80133a8:	e7fa      	b.n	80133a0 <__gethex+0x132>
 80133aa:	230a      	movs	r3, #10
 80133ac:	fb03 0202 	mla	r2, r3, r2, r0
 80133b0:	3a10      	subs	r2, #16
 80133b2:	e7cf      	b.n	8013354 <__gethex+0xe6>
 80133b4:	4631      	mov	r1, r6
 80133b6:	e7da      	b.n	801336e <__gethex+0x100>
 80133b8:	1bf3      	subs	r3, r6, r7
 80133ba:	3b01      	subs	r3, #1
 80133bc:	4629      	mov	r1, r5
 80133be:	2b07      	cmp	r3, #7
 80133c0:	dc49      	bgt.n	8013456 <__gethex+0x1e8>
 80133c2:	9802      	ldr	r0, [sp, #8]
 80133c4:	f000 fa58 	bl	8013878 <_Balloc>
 80133c8:	9b01      	ldr	r3, [sp, #4]
 80133ca:	f100 0914 	add.w	r9, r0, #20
 80133ce:	f04f 0b00 	mov.w	fp, #0
 80133d2:	f1c3 0301 	rsb	r3, r3, #1
 80133d6:	4605      	mov	r5, r0
 80133d8:	f8cd 9010 	str.w	r9, [sp, #16]
 80133dc:	46da      	mov	sl, fp
 80133de:	9308      	str	r3, [sp, #32]
 80133e0:	42b7      	cmp	r7, r6
 80133e2:	d33b      	bcc.n	801345c <__gethex+0x1ee>
 80133e4:	9804      	ldr	r0, [sp, #16]
 80133e6:	f840 ab04 	str.w	sl, [r0], #4
 80133ea:	eba0 0009 	sub.w	r0, r0, r9
 80133ee:	1080      	asrs	r0, r0, #2
 80133f0:	6128      	str	r0, [r5, #16]
 80133f2:	0147      	lsls	r7, r0, #5
 80133f4:	4650      	mov	r0, sl
 80133f6:	f000 fb03 	bl	8013a00 <__hi0bits>
 80133fa:	f8d8 6000 	ldr.w	r6, [r8]
 80133fe:	1a3f      	subs	r7, r7, r0
 8013400:	42b7      	cmp	r7, r6
 8013402:	dd64      	ble.n	80134ce <__gethex+0x260>
 8013404:	1bbf      	subs	r7, r7, r6
 8013406:	4639      	mov	r1, r7
 8013408:	4628      	mov	r0, r5
 801340a:	f000 fe13 	bl	8014034 <__any_on>
 801340e:	4682      	mov	sl, r0
 8013410:	b178      	cbz	r0, 8013432 <__gethex+0x1c4>
 8013412:	1e7b      	subs	r3, r7, #1
 8013414:	1159      	asrs	r1, r3, #5
 8013416:	f003 021f 	and.w	r2, r3, #31
 801341a:	f04f 0a01 	mov.w	sl, #1
 801341e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013422:	fa0a f202 	lsl.w	r2, sl, r2
 8013426:	420a      	tst	r2, r1
 8013428:	d003      	beq.n	8013432 <__gethex+0x1c4>
 801342a:	4553      	cmp	r3, sl
 801342c:	dc46      	bgt.n	80134bc <__gethex+0x24e>
 801342e:	f04f 0a02 	mov.w	sl, #2
 8013432:	4639      	mov	r1, r7
 8013434:	4628      	mov	r0, r5
 8013436:	f7ff fecb 	bl	80131d0 <rshift>
 801343a:	443c      	add	r4, r7
 801343c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013440:	42a3      	cmp	r3, r4
 8013442:	da52      	bge.n	80134ea <__gethex+0x27c>
 8013444:	4629      	mov	r1, r5
 8013446:	9802      	ldr	r0, [sp, #8]
 8013448:	f000 fa4a 	bl	80138e0 <_Bfree>
 801344c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801344e:	2300      	movs	r3, #0
 8013450:	6013      	str	r3, [r2, #0]
 8013452:	27a3      	movs	r7, #163	; 0xa3
 8013454:	e793      	b.n	801337e <__gethex+0x110>
 8013456:	3101      	adds	r1, #1
 8013458:	105b      	asrs	r3, r3, #1
 801345a:	e7b0      	b.n	80133be <__gethex+0x150>
 801345c:	1e73      	subs	r3, r6, #1
 801345e:	9305      	str	r3, [sp, #20]
 8013460:	9a07      	ldr	r2, [sp, #28]
 8013462:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013466:	4293      	cmp	r3, r2
 8013468:	d018      	beq.n	801349c <__gethex+0x22e>
 801346a:	f1bb 0f20 	cmp.w	fp, #32
 801346e:	d107      	bne.n	8013480 <__gethex+0x212>
 8013470:	9b04      	ldr	r3, [sp, #16]
 8013472:	f8c3 a000 	str.w	sl, [r3]
 8013476:	3304      	adds	r3, #4
 8013478:	f04f 0a00 	mov.w	sl, #0
 801347c:	9304      	str	r3, [sp, #16]
 801347e:	46d3      	mov	fp, sl
 8013480:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013484:	f7ff fede 	bl	8013244 <__hexdig_fun>
 8013488:	f000 000f 	and.w	r0, r0, #15
 801348c:	fa00 f00b 	lsl.w	r0, r0, fp
 8013490:	ea4a 0a00 	orr.w	sl, sl, r0
 8013494:	f10b 0b04 	add.w	fp, fp, #4
 8013498:	9b05      	ldr	r3, [sp, #20]
 801349a:	e00d      	b.n	80134b8 <__gethex+0x24a>
 801349c:	9b05      	ldr	r3, [sp, #20]
 801349e:	9a08      	ldr	r2, [sp, #32]
 80134a0:	4413      	add	r3, r2
 80134a2:	42bb      	cmp	r3, r7
 80134a4:	d3e1      	bcc.n	801346a <__gethex+0x1fc>
 80134a6:	4618      	mov	r0, r3
 80134a8:	9a01      	ldr	r2, [sp, #4]
 80134aa:	9903      	ldr	r1, [sp, #12]
 80134ac:	9309      	str	r3, [sp, #36]	; 0x24
 80134ae:	f000 fffb 	bl	80144a8 <strncmp>
 80134b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d1d8      	bne.n	801346a <__gethex+0x1fc>
 80134b8:	461e      	mov	r6, r3
 80134ba:	e791      	b.n	80133e0 <__gethex+0x172>
 80134bc:	1eb9      	subs	r1, r7, #2
 80134be:	4628      	mov	r0, r5
 80134c0:	f000 fdb8 	bl	8014034 <__any_on>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d0b2      	beq.n	801342e <__gethex+0x1c0>
 80134c8:	f04f 0a03 	mov.w	sl, #3
 80134cc:	e7b1      	b.n	8013432 <__gethex+0x1c4>
 80134ce:	da09      	bge.n	80134e4 <__gethex+0x276>
 80134d0:	1bf7      	subs	r7, r6, r7
 80134d2:	4629      	mov	r1, r5
 80134d4:	463a      	mov	r2, r7
 80134d6:	9802      	ldr	r0, [sp, #8]
 80134d8:	f000 fbce 	bl	8013c78 <__lshift>
 80134dc:	1be4      	subs	r4, r4, r7
 80134de:	4605      	mov	r5, r0
 80134e0:	f100 0914 	add.w	r9, r0, #20
 80134e4:	f04f 0a00 	mov.w	sl, #0
 80134e8:	e7a8      	b.n	801343c <__gethex+0x1ce>
 80134ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80134ee:	42a0      	cmp	r0, r4
 80134f0:	dd6a      	ble.n	80135c8 <__gethex+0x35a>
 80134f2:	1b04      	subs	r4, r0, r4
 80134f4:	42a6      	cmp	r6, r4
 80134f6:	dc2e      	bgt.n	8013556 <__gethex+0x2e8>
 80134f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80134fc:	2b02      	cmp	r3, #2
 80134fe:	d022      	beq.n	8013546 <__gethex+0x2d8>
 8013500:	2b03      	cmp	r3, #3
 8013502:	d024      	beq.n	801354e <__gethex+0x2e0>
 8013504:	2b01      	cmp	r3, #1
 8013506:	d115      	bne.n	8013534 <__gethex+0x2c6>
 8013508:	42a6      	cmp	r6, r4
 801350a:	d113      	bne.n	8013534 <__gethex+0x2c6>
 801350c:	2e01      	cmp	r6, #1
 801350e:	dc0b      	bgt.n	8013528 <__gethex+0x2ba>
 8013510:	9a06      	ldr	r2, [sp, #24]
 8013512:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013516:	6013      	str	r3, [r2, #0]
 8013518:	2301      	movs	r3, #1
 801351a:	612b      	str	r3, [r5, #16]
 801351c:	f8c9 3000 	str.w	r3, [r9]
 8013520:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013522:	2762      	movs	r7, #98	; 0x62
 8013524:	601d      	str	r5, [r3, #0]
 8013526:	e72a      	b.n	801337e <__gethex+0x110>
 8013528:	1e71      	subs	r1, r6, #1
 801352a:	4628      	mov	r0, r5
 801352c:	f000 fd82 	bl	8014034 <__any_on>
 8013530:	2800      	cmp	r0, #0
 8013532:	d1ed      	bne.n	8013510 <__gethex+0x2a2>
 8013534:	4629      	mov	r1, r5
 8013536:	9802      	ldr	r0, [sp, #8]
 8013538:	f000 f9d2 	bl	80138e0 <_Bfree>
 801353c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801353e:	2300      	movs	r3, #0
 8013540:	6013      	str	r3, [r2, #0]
 8013542:	2750      	movs	r7, #80	; 0x50
 8013544:	e71b      	b.n	801337e <__gethex+0x110>
 8013546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013548:	2b00      	cmp	r3, #0
 801354a:	d0e1      	beq.n	8013510 <__gethex+0x2a2>
 801354c:	e7f2      	b.n	8013534 <__gethex+0x2c6>
 801354e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1dd      	bne.n	8013510 <__gethex+0x2a2>
 8013554:	e7ee      	b.n	8013534 <__gethex+0x2c6>
 8013556:	1e67      	subs	r7, r4, #1
 8013558:	f1ba 0f00 	cmp.w	sl, #0
 801355c:	d131      	bne.n	80135c2 <__gethex+0x354>
 801355e:	b127      	cbz	r7, 801356a <__gethex+0x2fc>
 8013560:	4639      	mov	r1, r7
 8013562:	4628      	mov	r0, r5
 8013564:	f000 fd66 	bl	8014034 <__any_on>
 8013568:	4682      	mov	sl, r0
 801356a:	117a      	asrs	r2, r7, #5
 801356c:	2301      	movs	r3, #1
 801356e:	f007 071f 	and.w	r7, r7, #31
 8013572:	fa03 f707 	lsl.w	r7, r3, r7
 8013576:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801357a:	4621      	mov	r1, r4
 801357c:	421f      	tst	r7, r3
 801357e:	4628      	mov	r0, r5
 8013580:	bf18      	it	ne
 8013582:	f04a 0a02 	orrne.w	sl, sl, #2
 8013586:	1b36      	subs	r6, r6, r4
 8013588:	f7ff fe22 	bl	80131d0 <rshift>
 801358c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013590:	2702      	movs	r7, #2
 8013592:	f1ba 0f00 	cmp.w	sl, #0
 8013596:	d048      	beq.n	801362a <__gethex+0x3bc>
 8013598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801359c:	2b02      	cmp	r3, #2
 801359e:	d015      	beq.n	80135cc <__gethex+0x35e>
 80135a0:	2b03      	cmp	r3, #3
 80135a2:	d017      	beq.n	80135d4 <__gethex+0x366>
 80135a4:	2b01      	cmp	r3, #1
 80135a6:	d109      	bne.n	80135bc <__gethex+0x34e>
 80135a8:	f01a 0f02 	tst.w	sl, #2
 80135ac:	d006      	beq.n	80135bc <__gethex+0x34e>
 80135ae:	f8d9 3000 	ldr.w	r3, [r9]
 80135b2:	ea4a 0a03 	orr.w	sl, sl, r3
 80135b6:	f01a 0f01 	tst.w	sl, #1
 80135ba:	d10e      	bne.n	80135da <__gethex+0x36c>
 80135bc:	f047 0710 	orr.w	r7, r7, #16
 80135c0:	e033      	b.n	801362a <__gethex+0x3bc>
 80135c2:	f04f 0a01 	mov.w	sl, #1
 80135c6:	e7d0      	b.n	801356a <__gethex+0x2fc>
 80135c8:	2701      	movs	r7, #1
 80135ca:	e7e2      	b.n	8013592 <__gethex+0x324>
 80135cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135ce:	f1c3 0301 	rsb	r3, r3, #1
 80135d2:	9315      	str	r3, [sp, #84]	; 0x54
 80135d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d0f0      	beq.n	80135bc <__gethex+0x34e>
 80135da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80135de:	f105 0314 	add.w	r3, r5, #20
 80135e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80135e6:	eb03 010a 	add.w	r1, r3, sl
 80135ea:	f04f 0c00 	mov.w	ip, #0
 80135ee:	4618      	mov	r0, r3
 80135f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80135f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80135f8:	d01c      	beq.n	8013634 <__gethex+0x3c6>
 80135fa:	3201      	adds	r2, #1
 80135fc:	6002      	str	r2, [r0, #0]
 80135fe:	2f02      	cmp	r7, #2
 8013600:	f105 0314 	add.w	r3, r5, #20
 8013604:	d138      	bne.n	8013678 <__gethex+0x40a>
 8013606:	f8d8 2000 	ldr.w	r2, [r8]
 801360a:	3a01      	subs	r2, #1
 801360c:	42b2      	cmp	r2, r6
 801360e:	d10a      	bne.n	8013626 <__gethex+0x3b8>
 8013610:	1171      	asrs	r1, r6, #5
 8013612:	2201      	movs	r2, #1
 8013614:	f006 061f 	and.w	r6, r6, #31
 8013618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801361c:	fa02 f606 	lsl.w	r6, r2, r6
 8013620:	421e      	tst	r6, r3
 8013622:	bf18      	it	ne
 8013624:	4617      	movne	r7, r2
 8013626:	f047 0720 	orr.w	r7, r7, #32
 801362a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801362c:	601d      	str	r5, [r3, #0]
 801362e:	9b06      	ldr	r3, [sp, #24]
 8013630:	601c      	str	r4, [r3, #0]
 8013632:	e6a4      	b.n	801337e <__gethex+0x110>
 8013634:	4299      	cmp	r1, r3
 8013636:	f843 cc04 	str.w	ip, [r3, #-4]
 801363a:	d8d8      	bhi.n	80135ee <__gethex+0x380>
 801363c:	68ab      	ldr	r3, [r5, #8]
 801363e:	4599      	cmp	r9, r3
 8013640:	db12      	blt.n	8013668 <__gethex+0x3fa>
 8013642:	6869      	ldr	r1, [r5, #4]
 8013644:	9802      	ldr	r0, [sp, #8]
 8013646:	3101      	adds	r1, #1
 8013648:	f000 f916 	bl	8013878 <_Balloc>
 801364c:	692a      	ldr	r2, [r5, #16]
 801364e:	3202      	adds	r2, #2
 8013650:	f105 010c 	add.w	r1, r5, #12
 8013654:	4683      	mov	fp, r0
 8013656:	0092      	lsls	r2, r2, #2
 8013658:	300c      	adds	r0, #12
 801365a:	f7fd fa0b 	bl	8010a74 <memcpy>
 801365e:	4629      	mov	r1, r5
 8013660:	9802      	ldr	r0, [sp, #8]
 8013662:	f000 f93d 	bl	80138e0 <_Bfree>
 8013666:	465d      	mov	r5, fp
 8013668:	692b      	ldr	r3, [r5, #16]
 801366a:	1c5a      	adds	r2, r3, #1
 801366c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013670:	612a      	str	r2, [r5, #16]
 8013672:	2201      	movs	r2, #1
 8013674:	615a      	str	r2, [r3, #20]
 8013676:	e7c2      	b.n	80135fe <__gethex+0x390>
 8013678:	692a      	ldr	r2, [r5, #16]
 801367a:	454a      	cmp	r2, r9
 801367c:	dd0b      	ble.n	8013696 <__gethex+0x428>
 801367e:	2101      	movs	r1, #1
 8013680:	4628      	mov	r0, r5
 8013682:	f7ff fda5 	bl	80131d0 <rshift>
 8013686:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801368a:	3401      	adds	r4, #1
 801368c:	42a3      	cmp	r3, r4
 801368e:	f6ff aed9 	blt.w	8013444 <__gethex+0x1d6>
 8013692:	2701      	movs	r7, #1
 8013694:	e7c7      	b.n	8013626 <__gethex+0x3b8>
 8013696:	f016 061f 	ands.w	r6, r6, #31
 801369a:	d0fa      	beq.n	8013692 <__gethex+0x424>
 801369c:	449a      	add	sl, r3
 801369e:	f1c6 0620 	rsb	r6, r6, #32
 80136a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80136a6:	f000 f9ab 	bl	8013a00 <__hi0bits>
 80136aa:	42b0      	cmp	r0, r6
 80136ac:	dbe7      	blt.n	801367e <__gethex+0x410>
 80136ae:	e7f0      	b.n	8013692 <__gethex+0x424>

080136b0 <L_shift>:
 80136b0:	f1c2 0208 	rsb	r2, r2, #8
 80136b4:	0092      	lsls	r2, r2, #2
 80136b6:	b570      	push	{r4, r5, r6, lr}
 80136b8:	f1c2 0620 	rsb	r6, r2, #32
 80136bc:	6843      	ldr	r3, [r0, #4]
 80136be:	6804      	ldr	r4, [r0, #0]
 80136c0:	fa03 f506 	lsl.w	r5, r3, r6
 80136c4:	432c      	orrs	r4, r5
 80136c6:	40d3      	lsrs	r3, r2
 80136c8:	6004      	str	r4, [r0, #0]
 80136ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80136ce:	4288      	cmp	r0, r1
 80136d0:	d3f4      	bcc.n	80136bc <L_shift+0xc>
 80136d2:	bd70      	pop	{r4, r5, r6, pc}

080136d4 <__match>:
 80136d4:	b530      	push	{r4, r5, lr}
 80136d6:	6803      	ldr	r3, [r0, #0]
 80136d8:	3301      	adds	r3, #1
 80136da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136de:	b914      	cbnz	r4, 80136e6 <__match+0x12>
 80136e0:	6003      	str	r3, [r0, #0]
 80136e2:	2001      	movs	r0, #1
 80136e4:	bd30      	pop	{r4, r5, pc}
 80136e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80136ee:	2d19      	cmp	r5, #25
 80136f0:	bf98      	it	ls
 80136f2:	3220      	addls	r2, #32
 80136f4:	42a2      	cmp	r2, r4
 80136f6:	d0f0      	beq.n	80136da <__match+0x6>
 80136f8:	2000      	movs	r0, #0
 80136fa:	e7f3      	b.n	80136e4 <__match+0x10>

080136fc <__hexnan>:
 80136fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013700:	680b      	ldr	r3, [r1, #0]
 8013702:	6801      	ldr	r1, [r0, #0]
 8013704:	115f      	asrs	r7, r3, #5
 8013706:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801370a:	f013 031f 	ands.w	r3, r3, #31
 801370e:	b087      	sub	sp, #28
 8013710:	bf18      	it	ne
 8013712:	3704      	addne	r7, #4
 8013714:	2500      	movs	r5, #0
 8013716:	1f3e      	subs	r6, r7, #4
 8013718:	4682      	mov	sl, r0
 801371a:	4690      	mov	r8, r2
 801371c:	9301      	str	r3, [sp, #4]
 801371e:	f847 5c04 	str.w	r5, [r7, #-4]
 8013722:	46b1      	mov	r9, r6
 8013724:	4634      	mov	r4, r6
 8013726:	9502      	str	r5, [sp, #8]
 8013728:	46ab      	mov	fp, r5
 801372a:	784a      	ldrb	r2, [r1, #1]
 801372c:	1c4b      	adds	r3, r1, #1
 801372e:	9303      	str	r3, [sp, #12]
 8013730:	b342      	cbz	r2, 8013784 <__hexnan+0x88>
 8013732:	4610      	mov	r0, r2
 8013734:	9105      	str	r1, [sp, #20]
 8013736:	9204      	str	r2, [sp, #16]
 8013738:	f7ff fd84 	bl	8013244 <__hexdig_fun>
 801373c:	2800      	cmp	r0, #0
 801373e:	d143      	bne.n	80137c8 <__hexnan+0xcc>
 8013740:	9a04      	ldr	r2, [sp, #16]
 8013742:	9905      	ldr	r1, [sp, #20]
 8013744:	2a20      	cmp	r2, #32
 8013746:	d818      	bhi.n	801377a <__hexnan+0x7e>
 8013748:	9b02      	ldr	r3, [sp, #8]
 801374a:	459b      	cmp	fp, r3
 801374c:	dd13      	ble.n	8013776 <__hexnan+0x7a>
 801374e:	454c      	cmp	r4, r9
 8013750:	d206      	bcs.n	8013760 <__hexnan+0x64>
 8013752:	2d07      	cmp	r5, #7
 8013754:	dc04      	bgt.n	8013760 <__hexnan+0x64>
 8013756:	462a      	mov	r2, r5
 8013758:	4649      	mov	r1, r9
 801375a:	4620      	mov	r0, r4
 801375c:	f7ff ffa8 	bl	80136b0 <L_shift>
 8013760:	4544      	cmp	r4, r8
 8013762:	d944      	bls.n	80137ee <__hexnan+0xf2>
 8013764:	2300      	movs	r3, #0
 8013766:	f1a4 0904 	sub.w	r9, r4, #4
 801376a:	f844 3c04 	str.w	r3, [r4, #-4]
 801376e:	f8cd b008 	str.w	fp, [sp, #8]
 8013772:	464c      	mov	r4, r9
 8013774:	461d      	mov	r5, r3
 8013776:	9903      	ldr	r1, [sp, #12]
 8013778:	e7d7      	b.n	801372a <__hexnan+0x2e>
 801377a:	2a29      	cmp	r2, #41	; 0x29
 801377c:	d14a      	bne.n	8013814 <__hexnan+0x118>
 801377e:	3102      	adds	r1, #2
 8013780:	f8ca 1000 	str.w	r1, [sl]
 8013784:	f1bb 0f00 	cmp.w	fp, #0
 8013788:	d044      	beq.n	8013814 <__hexnan+0x118>
 801378a:	454c      	cmp	r4, r9
 801378c:	d206      	bcs.n	801379c <__hexnan+0xa0>
 801378e:	2d07      	cmp	r5, #7
 8013790:	dc04      	bgt.n	801379c <__hexnan+0xa0>
 8013792:	462a      	mov	r2, r5
 8013794:	4649      	mov	r1, r9
 8013796:	4620      	mov	r0, r4
 8013798:	f7ff ff8a 	bl	80136b0 <L_shift>
 801379c:	4544      	cmp	r4, r8
 801379e:	d928      	bls.n	80137f2 <__hexnan+0xf6>
 80137a0:	4643      	mov	r3, r8
 80137a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80137a6:	f843 2b04 	str.w	r2, [r3], #4
 80137aa:	42a6      	cmp	r6, r4
 80137ac:	d2f9      	bcs.n	80137a2 <__hexnan+0xa6>
 80137ae:	2200      	movs	r2, #0
 80137b0:	f843 2b04 	str.w	r2, [r3], #4
 80137b4:	429e      	cmp	r6, r3
 80137b6:	d2fb      	bcs.n	80137b0 <__hexnan+0xb4>
 80137b8:	6833      	ldr	r3, [r6, #0]
 80137ba:	b91b      	cbnz	r3, 80137c4 <__hexnan+0xc8>
 80137bc:	4546      	cmp	r6, r8
 80137be:	d127      	bne.n	8013810 <__hexnan+0x114>
 80137c0:	2301      	movs	r3, #1
 80137c2:	6033      	str	r3, [r6, #0]
 80137c4:	2005      	movs	r0, #5
 80137c6:	e026      	b.n	8013816 <__hexnan+0x11a>
 80137c8:	3501      	adds	r5, #1
 80137ca:	2d08      	cmp	r5, #8
 80137cc:	f10b 0b01 	add.w	fp, fp, #1
 80137d0:	dd06      	ble.n	80137e0 <__hexnan+0xe4>
 80137d2:	4544      	cmp	r4, r8
 80137d4:	d9cf      	bls.n	8013776 <__hexnan+0x7a>
 80137d6:	2300      	movs	r3, #0
 80137d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80137dc:	2501      	movs	r5, #1
 80137de:	3c04      	subs	r4, #4
 80137e0:	6822      	ldr	r2, [r4, #0]
 80137e2:	f000 000f 	and.w	r0, r0, #15
 80137e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80137ea:	6020      	str	r0, [r4, #0]
 80137ec:	e7c3      	b.n	8013776 <__hexnan+0x7a>
 80137ee:	2508      	movs	r5, #8
 80137f0:	e7c1      	b.n	8013776 <__hexnan+0x7a>
 80137f2:	9b01      	ldr	r3, [sp, #4]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d0df      	beq.n	80137b8 <__hexnan+0xbc>
 80137f8:	f04f 32ff 	mov.w	r2, #4294967295
 80137fc:	f1c3 0320 	rsb	r3, r3, #32
 8013800:	fa22 f303 	lsr.w	r3, r2, r3
 8013804:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013808:	401a      	ands	r2, r3
 801380a:	f847 2c04 	str.w	r2, [r7, #-4]
 801380e:	e7d3      	b.n	80137b8 <__hexnan+0xbc>
 8013810:	3e04      	subs	r6, #4
 8013812:	e7d1      	b.n	80137b8 <__hexnan+0xbc>
 8013814:	2004      	movs	r0, #4
 8013816:	b007      	add	sp, #28
 8013818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801381c <__locale_ctype_ptr_l>:
 801381c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013820:	4770      	bx	lr

08013822 <__localeconv_l>:
 8013822:	30f0      	adds	r0, #240	; 0xf0
 8013824:	4770      	bx	lr
	...

08013828 <_localeconv_r>:
 8013828:	4b04      	ldr	r3, [pc, #16]	; (801383c <_localeconv_r+0x14>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	6a18      	ldr	r0, [r3, #32]
 801382e:	4b04      	ldr	r3, [pc, #16]	; (8013840 <_localeconv_r+0x18>)
 8013830:	2800      	cmp	r0, #0
 8013832:	bf08      	it	eq
 8013834:	4618      	moveq	r0, r3
 8013836:	30f0      	adds	r0, #240	; 0xf0
 8013838:	4770      	bx	lr
 801383a:	bf00      	nop
 801383c:	20002c20 	.word	0x20002c20
 8013840:	20002c84 	.word	0x20002c84

08013844 <malloc>:
 8013844:	4b02      	ldr	r3, [pc, #8]	; (8013850 <malloc+0xc>)
 8013846:	4601      	mov	r1, r0
 8013848:	6818      	ldr	r0, [r3, #0]
 801384a:	f000 bc71 	b.w	8014130 <_malloc_r>
 801384e:	bf00      	nop
 8013850:	20002c20 	.word	0x20002c20

08013854 <__ascii_mbtowc>:
 8013854:	b082      	sub	sp, #8
 8013856:	b901      	cbnz	r1, 801385a <__ascii_mbtowc+0x6>
 8013858:	a901      	add	r1, sp, #4
 801385a:	b142      	cbz	r2, 801386e <__ascii_mbtowc+0x1a>
 801385c:	b14b      	cbz	r3, 8013872 <__ascii_mbtowc+0x1e>
 801385e:	7813      	ldrb	r3, [r2, #0]
 8013860:	600b      	str	r3, [r1, #0]
 8013862:	7812      	ldrb	r2, [r2, #0]
 8013864:	1c10      	adds	r0, r2, #0
 8013866:	bf18      	it	ne
 8013868:	2001      	movne	r0, #1
 801386a:	b002      	add	sp, #8
 801386c:	4770      	bx	lr
 801386e:	4610      	mov	r0, r2
 8013870:	e7fb      	b.n	801386a <__ascii_mbtowc+0x16>
 8013872:	f06f 0001 	mvn.w	r0, #1
 8013876:	e7f8      	b.n	801386a <__ascii_mbtowc+0x16>

08013878 <_Balloc>:
 8013878:	b570      	push	{r4, r5, r6, lr}
 801387a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801387c:	4604      	mov	r4, r0
 801387e:	460e      	mov	r6, r1
 8013880:	b93d      	cbnz	r5, 8013892 <_Balloc+0x1a>
 8013882:	2010      	movs	r0, #16
 8013884:	f7ff ffde 	bl	8013844 <malloc>
 8013888:	6260      	str	r0, [r4, #36]	; 0x24
 801388a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801388e:	6005      	str	r5, [r0, #0]
 8013890:	60c5      	str	r5, [r0, #12]
 8013892:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013894:	68eb      	ldr	r3, [r5, #12]
 8013896:	b183      	cbz	r3, 80138ba <_Balloc+0x42>
 8013898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80138a0:	b9b8      	cbnz	r0, 80138d2 <_Balloc+0x5a>
 80138a2:	2101      	movs	r1, #1
 80138a4:	fa01 f506 	lsl.w	r5, r1, r6
 80138a8:	1d6a      	adds	r2, r5, #5
 80138aa:	0092      	lsls	r2, r2, #2
 80138ac:	4620      	mov	r0, r4
 80138ae:	f000 fbe2 	bl	8014076 <_calloc_r>
 80138b2:	b160      	cbz	r0, 80138ce <_Balloc+0x56>
 80138b4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80138b8:	e00e      	b.n	80138d8 <_Balloc+0x60>
 80138ba:	2221      	movs	r2, #33	; 0x21
 80138bc:	2104      	movs	r1, #4
 80138be:	4620      	mov	r0, r4
 80138c0:	f000 fbd9 	bl	8014076 <_calloc_r>
 80138c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138c6:	60e8      	str	r0, [r5, #12]
 80138c8:	68db      	ldr	r3, [r3, #12]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d1e4      	bne.n	8013898 <_Balloc+0x20>
 80138ce:	2000      	movs	r0, #0
 80138d0:	bd70      	pop	{r4, r5, r6, pc}
 80138d2:	6802      	ldr	r2, [r0, #0]
 80138d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80138d8:	2300      	movs	r3, #0
 80138da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138de:	e7f7      	b.n	80138d0 <_Balloc+0x58>

080138e0 <_Bfree>:
 80138e0:	b570      	push	{r4, r5, r6, lr}
 80138e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80138e4:	4606      	mov	r6, r0
 80138e6:	460d      	mov	r5, r1
 80138e8:	b93c      	cbnz	r4, 80138fa <_Bfree+0x1a>
 80138ea:	2010      	movs	r0, #16
 80138ec:	f7ff ffaa 	bl	8013844 <malloc>
 80138f0:	6270      	str	r0, [r6, #36]	; 0x24
 80138f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80138f6:	6004      	str	r4, [r0, #0]
 80138f8:	60c4      	str	r4, [r0, #12]
 80138fa:	b13d      	cbz	r5, 801390c <_Bfree+0x2c>
 80138fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80138fe:	686a      	ldr	r2, [r5, #4]
 8013900:	68db      	ldr	r3, [r3, #12]
 8013902:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013906:	6029      	str	r1, [r5, #0]
 8013908:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801390c:	bd70      	pop	{r4, r5, r6, pc}

0801390e <__multadd>:
 801390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013912:	690d      	ldr	r5, [r1, #16]
 8013914:	461f      	mov	r7, r3
 8013916:	4606      	mov	r6, r0
 8013918:	460c      	mov	r4, r1
 801391a:	f101 0c14 	add.w	ip, r1, #20
 801391e:	2300      	movs	r3, #0
 8013920:	f8dc 0000 	ldr.w	r0, [ip]
 8013924:	b281      	uxth	r1, r0
 8013926:	fb02 7101 	mla	r1, r2, r1, r7
 801392a:	0c0f      	lsrs	r7, r1, #16
 801392c:	0c00      	lsrs	r0, r0, #16
 801392e:	fb02 7000 	mla	r0, r2, r0, r7
 8013932:	b289      	uxth	r1, r1
 8013934:	3301      	adds	r3, #1
 8013936:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801393a:	429d      	cmp	r5, r3
 801393c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013940:	f84c 1b04 	str.w	r1, [ip], #4
 8013944:	dcec      	bgt.n	8013920 <__multadd+0x12>
 8013946:	b1d7      	cbz	r7, 801397e <__multadd+0x70>
 8013948:	68a3      	ldr	r3, [r4, #8]
 801394a:	42ab      	cmp	r3, r5
 801394c:	dc12      	bgt.n	8013974 <__multadd+0x66>
 801394e:	6861      	ldr	r1, [r4, #4]
 8013950:	4630      	mov	r0, r6
 8013952:	3101      	adds	r1, #1
 8013954:	f7ff ff90 	bl	8013878 <_Balloc>
 8013958:	6922      	ldr	r2, [r4, #16]
 801395a:	3202      	adds	r2, #2
 801395c:	f104 010c 	add.w	r1, r4, #12
 8013960:	4680      	mov	r8, r0
 8013962:	0092      	lsls	r2, r2, #2
 8013964:	300c      	adds	r0, #12
 8013966:	f7fd f885 	bl	8010a74 <memcpy>
 801396a:	4621      	mov	r1, r4
 801396c:	4630      	mov	r0, r6
 801396e:	f7ff ffb7 	bl	80138e0 <_Bfree>
 8013972:	4644      	mov	r4, r8
 8013974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013978:	3501      	adds	r5, #1
 801397a:	615f      	str	r7, [r3, #20]
 801397c:	6125      	str	r5, [r4, #16]
 801397e:	4620      	mov	r0, r4
 8013980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013984 <__s2b>:
 8013984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013988:	460c      	mov	r4, r1
 801398a:	4615      	mov	r5, r2
 801398c:	461f      	mov	r7, r3
 801398e:	2209      	movs	r2, #9
 8013990:	3308      	adds	r3, #8
 8013992:	4606      	mov	r6, r0
 8013994:	fb93 f3f2 	sdiv	r3, r3, r2
 8013998:	2100      	movs	r1, #0
 801399a:	2201      	movs	r2, #1
 801399c:	429a      	cmp	r2, r3
 801399e:	db20      	blt.n	80139e2 <__s2b+0x5e>
 80139a0:	4630      	mov	r0, r6
 80139a2:	f7ff ff69 	bl	8013878 <_Balloc>
 80139a6:	9b08      	ldr	r3, [sp, #32]
 80139a8:	6143      	str	r3, [r0, #20]
 80139aa:	2d09      	cmp	r5, #9
 80139ac:	f04f 0301 	mov.w	r3, #1
 80139b0:	6103      	str	r3, [r0, #16]
 80139b2:	dd19      	ble.n	80139e8 <__s2b+0x64>
 80139b4:	f104 0809 	add.w	r8, r4, #9
 80139b8:	46c1      	mov	r9, r8
 80139ba:	442c      	add	r4, r5
 80139bc:	f819 3b01 	ldrb.w	r3, [r9], #1
 80139c0:	4601      	mov	r1, r0
 80139c2:	3b30      	subs	r3, #48	; 0x30
 80139c4:	220a      	movs	r2, #10
 80139c6:	4630      	mov	r0, r6
 80139c8:	f7ff ffa1 	bl	801390e <__multadd>
 80139cc:	45a1      	cmp	r9, r4
 80139ce:	d1f5      	bne.n	80139bc <__s2b+0x38>
 80139d0:	eb08 0405 	add.w	r4, r8, r5
 80139d4:	3c08      	subs	r4, #8
 80139d6:	1b2d      	subs	r5, r5, r4
 80139d8:	1963      	adds	r3, r4, r5
 80139da:	42bb      	cmp	r3, r7
 80139dc:	db07      	blt.n	80139ee <__s2b+0x6a>
 80139de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139e2:	0052      	lsls	r2, r2, #1
 80139e4:	3101      	adds	r1, #1
 80139e6:	e7d9      	b.n	801399c <__s2b+0x18>
 80139e8:	340a      	adds	r4, #10
 80139ea:	2509      	movs	r5, #9
 80139ec:	e7f3      	b.n	80139d6 <__s2b+0x52>
 80139ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80139f2:	4601      	mov	r1, r0
 80139f4:	3b30      	subs	r3, #48	; 0x30
 80139f6:	220a      	movs	r2, #10
 80139f8:	4630      	mov	r0, r6
 80139fa:	f7ff ff88 	bl	801390e <__multadd>
 80139fe:	e7eb      	b.n	80139d8 <__s2b+0x54>

08013a00 <__hi0bits>:
 8013a00:	0c02      	lsrs	r2, r0, #16
 8013a02:	0412      	lsls	r2, r2, #16
 8013a04:	4603      	mov	r3, r0
 8013a06:	b9b2      	cbnz	r2, 8013a36 <__hi0bits+0x36>
 8013a08:	0403      	lsls	r3, r0, #16
 8013a0a:	2010      	movs	r0, #16
 8013a0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013a10:	bf04      	itt	eq
 8013a12:	021b      	lsleq	r3, r3, #8
 8013a14:	3008      	addeq	r0, #8
 8013a16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013a1a:	bf04      	itt	eq
 8013a1c:	011b      	lsleq	r3, r3, #4
 8013a1e:	3004      	addeq	r0, #4
 8013a20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013a24:	bf04      	itt	eq
 8013a26:	009b      	lsleq	r3, r3, #2
 8013a28:	3002      	addeq	r0, #2
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	db06      	blt.n	8013a3c <__hi0bits+0x3c>
 8013a2e:	005b      	lsls	r3, r3, #1
 8013a30:	d503      	bpl.n	8013a3a <__hi0bits+0x3a>
 8013a32:	3001      	adds	r0, #1
 8013a34:	4770      	bx	lr
 8013a36:	2000      	movs	r0, #0
 8013a38:	e7e8      	b.n	8013a0c <__hi0bits+0xc>
 8013a3a:	2020      	movs	r0, #32
 8013a3c:	4770      	bx	lr

08013a3e <__lo0bits>:
 8013a3e:	6803      	ldr	r3, [r0, #0]
 8013a40:	f013 0207 	ands.w	r2, r3, #7
 8013a44:	4601      	mov	r1, r0
 8013a46:	d00b      	beq.n	8013a60 <__lo0bits+0x22>
 8013a48:	07da      	lsls	r2, r3, #31
 8013a4a:	d423      	bmi.n	8013a94 <__lo0bits+0x56>
 8013a4c:	0798      	lsls	r0, r3, #30
 8013a4e:	bf49      	itett	mi
 8013a50:	085b      	lsrmi	r3, r3, #1
 8013a52:	089b      	lsrpl	r3, r3, #2
 8013a54:	2001      	movmi	r0, #1
 8013a56:	600b      	strmi	r3, [r1, #0]
 8013a58:	bf5c      	itt	pl
 8013a5a:	600b      	strpl	r3, [r1, #0]
 8013a5c:	2002      	movpl	r0, #2
 8013a5e:	4770      	bx	lr
 8013a60:	b298      	uxth	r0, r3
 8013a62:	b9a8      	cbnz	r0, 8013a90 <__lo0bits+0x52>
 8013a64:	0c1b      	lsrs	r3, r3, #16
 8013a66:	2010      	movs	r0, #16
 8013a68:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a6c:	bf04      	itt	eq
 8013a6e:	0a1b      	lsreq	r3, r3, #8
 8013a70:	3008      	addeq	r0, #8
 8013a72:	071a      	lsls	r2, r3, #28
 8013a74:	bf04      	itt	eq
 8013a76:	091b      	lsreq	r3, r3, #4
 8013a78:	3004      	addeq	r0, #4
 8013a7a:	079a      	lsls	r2, r3, #30
 8013a7c:	bf04      	itt	eq
 8013a7e:	089b      	lsreq	r3, r3, #2
 8013a80:	3002      	addeq	r0, #2
 8013a82:	07da      	lsls	r2, r3, #31
 8013a84:	d402      	bmi.n	8013a8c <__lo0bits+0x4e>
 8013a86:	085b      	lsrs	r3, r3, #1
 8013a88:	d006      	beq.n	8013a98 <__lo0bits+0x5a>
 8013a8a:	3001      	adds	r0, #1
 8013a8c:	600b      	str	r3, [r1, #0]
 8013a8e:	4770      	bx	lr
 8013a90:	4610      	mov	r0, r2
 8013a92:	e7e9      	b.n	8013a68 <__lo0bits+0x2a>
 8013a94:	2000      	movs	r0, #0
 8013a96:	4770      	bx	lr
 8013a98:	2020      	movs	r0, #32
 8013a9a:	4770      	bx	lr

08013a9c <__i2b>:
 8013a9c:	b510      	push	{r4, lr}
 8013a9e:	460c      	mov	r4, r1
 8013aa0:	2101      	movs	r1, #1
 8013aa2:	f7ff fee9 	bl	8013878 <_Balloc>
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	6144      	str	r4, [r0, #20]
 8013aaa:	6102      	str	r2, [r0, #16]
 8013aac:	bd10      	pop	{r4, pc}

08013aae <__multiply>:
 8013aae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ab2:	4614      	mov	r4, r2
 8013ab4:	690a      	ldr	r2, [r1, #16]
 8013ab6:	6923      	ldr	r3, [r4, #16]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	bfb8      	it	lt
 8013abc:	460b      	movlt	r3, r1
 8013abe:	4688      	mov	r8, r1
 8013ac0:	bfbc      	itt	lt
 8013ac2:	46a0      	movlt	r8, r4
 8013ac4:	461c      	movlt	r4, r3
 8013ac6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013aca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013ace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013ad2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013ad6:	eb07 0609 	add.w	r6, r7, r9
 8013ada:	42b3      	cmp	r3, r6
 8013adc:	bfb8      	it	lt
 8013ade:	3101      	addlt	r1, #1
 8013ae0:	f7ff feca 	bl	8013878 <_Balloc>
 8013ae4:	f100 0514 	add.w	r5, r0, #20
 8013ae8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013aec:	462b      	mov	r3, r5
 8013aee:	2200      	movs	r2, #0
 8013af0:	4573      	cmp	r3, lr
 8013af2:	d316      	bcc.n	8013b22 <__multiply+0x74>
 8013af4:	f104 0214 	add.w	r2, r4, #20
 8013af8:	f108 0114 	add.w	r1, r8, #20
 8013afc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013b00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	9b00      	ldr	r3, [sp, #0]
 8013b08:	9201      	str	r2, [sp, #4]
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d80c      	bhi.n	8013b28 <__multiply+0x7a>
 8013b0e:	2e00      	cmp	r6, #0
 8013b10:	dd03      	ble.n	8013b1a <__multiply+0x6c>
 8013b12:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d05d      	beq.n	8013bd6 <__multiply+0x128>
 8013b1a:	6106      	str	r6, [r0, #16]
 8013b1c:	b003      	add	sp, #12
 8013b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b22:	f843 2b04 	str.w	r2, [r3], #4
 8013b26:	e7e3      	b.n	8013af0 <__multiply+0x42>
 8013b28:	f8b2 b000 	ldrh.w	fp, [r2]
 8013b2c:	f1bb 0f00 	cmp.w	fp, #0
 8013b30:	d023      	beq.n	8013b7a <__multiply+0xcc>
 8013b32:	4689      	mov	r9, r1
 8013b34:	46ac      	mov	ip, r5
 8013b36:	f04f 0800 	mov.w	r8, #0
 8013b3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8013b3e:	f8dc a000 	ldr.w	sl, [ip]
 8013b42:	b2a3      	uxth	r3, r4
 8013b44:	fa1f fa8a 	uxth.w	sl, sl
 8013b48:	fb0b a303 	mla	r3, fp, r3, sl
 8013b4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013b50:	f8dc 4000 	ldr.w	r4, [ip]
 8013b54:	4443      	add	r3, r8
 8013b56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013b5a:	fb0b 840a 	mla	r4, fp, sl, r8
 8013b5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013b62:	46e2      	mov	sl, ip
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013b6a:	454f      	cmp	r7, r9
 8013b6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013b70:	f84a 3b04 	str.w	r3, [sl], #4
 8013b74:	d82b      	bhi.n	8013bce <__multiply+0x120>
 8013b76:	f8cc 8004 	str.w	r8, [ip, #4]
 8013b7a:	9b01      	ldr	r3, [sp, #4]
 8013b7c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013b80:	3204      	adds	r2, #4
 8013b82:	f1ba 0f00 	cmp.w	sl, #0
 8013b86:	d020      	beq.n	8013bca <__multiply+0x11c>
 8013b88:	682b      	ldr	r3, [r5, #0]
 8013b8a:	4689      	mov	r9, r1
 8013b8c:	46a8      	mov	r8, r5
 8013b8e:	f04f 0b00 	mov.w	fp, #0
 8013b92:	f8b9 c000 	ldrh.w	ip, [r9]
 8013b96:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013b9a:	fb0a 440c 	mla	r4, sl, ip, r4
 8013b9e:	445c      	add	r4, fp
 8013ba0:	46c4      	mov	ip, r8
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013ba8:	f84c 3b04 	str.w	r3, [ip], #4
 8013bac:	f859 3b04 	ldr.w	r3, [r9], #4
 8013bb0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013bb4:	0c1b      	lsrs	r3, r3, #16
 8013bb6:	fb0a b303 	mla	r3, sl, r3, fp
 8013bba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013bbe:	454f      	cmp	r7, r9
 8013bc0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013bc4:	d805      	bhi.n	8013bd2 <__multiply+0x124>
 8013bc6:	f8c8 3004 	str.w	r3, [r8, #4]
 8013bca:	3504      	adds	r5, #4
 8013bcc:	e79b      	b.n	8013b06 <__multiply+0x58>
 8013bce:	46d4      	mov	ip, sl
 8013bd0:	e7b3      	b.n	8013b3a <__multiply+0x8c>
 8013bd2:	46e0      	mov	r8, ip
 8013bd4:	e7dd      	b.n	8013b92 <__multiply+0xe4>
 8013bd6:	3e01      	subs	r6, #1
 8013bd8:	e799      	b.n	8013b0e <__multiply+0x60>
	...

08013bdc <__pow5mult>:
 8013bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013be0:	4615      	mov	r5, r2
 8013be2:	f012 0203 	ands.w	r2, r2, #3
 8013be6:	4606      	mov	r6, r0
 8013be8:	460f      	mov	r7, r1
 8013bea:	d007      	beq.n	8013bfc <__pow5mult+0x20>
 8013bec:	3a01      	subs	r2, #1
 8013bee:	4c21      	ldr	r4, [pc, #132]	; (8013c74 <__pow5mult+0x98>)
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013bf6:	f7ff fe8a 	bl	801390e <__multadd>
 8013bfa:	4607      	mov	r7, r0
 8013bfc:	10ad      	asrs	r5, r5, #2
 8013bfe:	d035      	beq.n	8013c6c <__pow5mult+0x90>
 8013c00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c02:	b93c      	cbnz	r4, 8013c14 <__pow5mult+0x38>
 8013c04:	2010      	movs	r0, #16
 8013c06:	f7ff fe1d 	bl	8013844 <malloc>
 8013c0a:	6270      	str	r0, [r6, #36]	; 0x24
 8013c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c10:	6004      	str	r4, [r0, #0]
 8013c12:	60c4      	str	r4, [r0, #12]
 8013c14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c1c:	b94c      	cbnz	r4, 8013c32 <__pow5mult+0x56>
 8013c1e:	f240 2171 	movw	r1, #625	; 0x271
 8013c22:	4630      	mov	r0, r6
 8013c24:	f7ff ff3a 	bl	8013a9c <__i2b>
 8013c28:	2300      	movs	r3, #0
 8013c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c2e:	4604      	mov	r4, r0
 8013c30:	6003      	str	r3, [r0, #0]
 8013c32:	f04f 0800 	mov.w	r8, #0
 8013c36:	07eb      	lsls	r3, r5, #31
 8013c38:	d50a      	bpl.n	8013c50 <__pow5mult+0x74>
 8013c3a:	4639      	mov	r1, r7
 8013c3c:	4622      	mov	r2, r4
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f7ff ff35 	bl	8013aae <__multiply>
 8013c44:	4639      	mov	r1, r7
 8013c46:	4681      	mov	r9, r0
 8013c48:	4630      	mov	r0, r6
 8013c4a:	f7ff fe49 	bl	80138e0 <_Bfree>
 8013c4e:	464f      	mov	r7, r9
 8013c50:	106d      	asrs	r5, r5, #1
 8013c52:	d00b      	beq.n	8013c6c <__pow5mult+0x90>
 8013c54:	6820      	ldr	r0, [r4, #0]
 8013c56:	b938      	cbnz	r0, 8013c68 <__pow5mult+0x8c>
 8013c58:	4622      	mov	r2, r4
 8013c5a:	4621      	mov	r1, r4
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	f7ff ff26 	bl	8013aae <__multiply>
 8013c62:	6020      	str	r0, [r4, #0]
 8013c64:	f8c0 8000 	str.w	r8, [r0]
 8013c68:	4604      	mov	r4, r0
 8013c6a:	e7e4      	b.n	8013c36 <__pow5mult+0x5a>
 8013c6c:	4638      	mov	r0, r7
 8013c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c72:	bf00      	nop
 8013c74:	08017b68 	.word	0x08017b68

08013c78 <__lshift>:
 8013c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c7c:	460c      	mov	r4, r1
 8013c7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c82:	6923      	ldr	r3, [r4, #16]
 8013c84:	6849      	ldr	r1, [r1, #4]
 8013c86:	eb0a 0903 	add.w	r9, sl, r3
 8013c8a:	68a3      	ldr	r3, [r4, #8]
 8013c8c:	4607      	mov	r7, r0
 8013c8e:	4616      	mov	r6, r2
 8013c90:	f109 0501 	add.w	r5, r9, #1
 8013c94:	42ab      	cmp	r3, r5
 8013c96:	db32      	blt.n	8013cfe <__lshift+0x86>
 8013c98:	4638      	mov	r0, r7
 8013c9a:	f7ff fded 	bl	8013878 <_Balloc>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	4680      	mov	r8, r0
 8013ca2:	f100 0114 	add.w	r1, r0, #20
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	4553      	cmp	r3, sl
 8013caa:	db2b      	blt.n	8013d04 <__lshift+0x8c>
 8013cac:	6920      	ldr	r0, [r4, #16]
 8013cae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013cb2:	f104 0314 	add.w	r3, r4, #20
 8013cb6:	f016 021f 	ands.w	r2, r6, #31
 8013cba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013cbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013cc2:	d025      	beq.n	8013d10 <__lshift+0x98>
 8013cc4:	f1c2 0e20 	rsb	lr, r2, #32
 8013cc8:	2000      	movs	r0, #0
 8013cca:	681e      	ldr	r6, [r3, #0]
 8013ccc:	468a      	mov	sl, r1
 8013cce:	4096      	lsls	r6, r2
 8013cd0:	4330      	orrs	r0, r6
 8013cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8013cd6:	f853 0b04 	ldr.w	r0, [r3], #4
 8013cda:	459c      	cmp	ip, r3
 8013cdc:	fa20 f00e 	lsr.w	r0, r0, lr
 8013ce0:	d814      	bhi.n	8013d0c <__lshift+0x94>
 8013ce2:	6048      	str	r0, [r1, #4]
 8013ce4:	b108      	cbz	r0, 8013cea <__lshift+0x72>
 8013ce6:	f109 0502 	add.w	r5, r9, #2
 8013cea:	3d01      	subs	r5, #1
 8013cec:	4638      	mov	r0, r7
 8013cee:	f8c8 5010 	str.w	r5, [r8, #16]
 8013cf2:	4621      	mov	r1, r4
 8013cf4:	f7ff fdf4 	bl	80138e0 <_Bfree>
 8013cf8:	4640      	mov	r0, r8
 8013cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cfe:	3101      	adds	r1, #1
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	e7c7      	b.n	8013c94 <__lshift+0x1c>
 8013d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013d08:	3301      	adds	r3, #1
 8013d0a:	e7cd      	b.n	8013ca8 <__lshift+0x30>
 8013d0c:	4651      	mov	r1, sl
 8013d0e:	e7dc      	b.n	8013cca <__lshift+0x52>
 8013d10:	3904      	subs	r1, #4
 8013d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d16:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d1a:	459c      	cmp	ip, r3
 8013d1c:	d8f9      	bhi.n	8013d12 <__lshift+0x9a>
 8013d1e:	e7e4      	b.n	8013cea <__lshift+0x72>

08013d20 <__mcmp>:
 8013d20:	6903      	ldr	r3, [r0, #16]
 8013d22:	690a      	ldr	r2, [r1, #16]
 8013d24:	1a9b      	subs	r3, r3, r2
 8013d26:	b530      	push	{r4, r5, lr}
 8013d28:	d10c      	bne.n	8013d44 <__mcmp+0x24>
 8013d2a:	0092      	lsls	r2, r2, #2
 8013d2c:	3014      	adds	r0, #20
 8013d2e:	3114      	adds	r1, #20
 8013d30:	1884      	adds	r4, r0, r2
 8013d32:	4411      	add	r1, r2
 8013d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013d38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013d3c:	4295      	cmp	r5, r2
 8013d3e:	d003      	beq.n	8013d48 <__mcmp+0x28>
 8013d40:	d305      	bcc.n	8013d4e <__mcmp+0x2e>
 8013d42:	2301      	movs	r3, #1
 8013d44:	4618      	mov	r0, r3
 8013d46:	bd30      	pop	{r4, r5, pc}
 8013d48:	42a0      	cmp	r0, r4
 8013d4a:	d3f3      	bcc.n	8013d34 <__mcmp+0x14>
 8013d4c:	e7fa      	b.n	8013d44 <__mcmp+0x24>
 8013d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d52:	e7f7      	b.n	8013d44 <__mcmp+0x24>

08013d54 <__mdiff>:
 8013d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d58:	460d      	mov	r5, r1
 8013d5a:	4607      	mov	r7, r0
 8013d5c:	4611      	mov	r1, r2
 8013d5e:	4628      	mov	r0, r5
 8013d60:	4614      	mov	r4, r2
 8013d62:	f7ff ffdd 	bl	8013d20 <__mcmp>
 8013d66:	1e06      	subs	r6, r0, #0
 8013d68:	d108      	bne.n	8013d7c <__mdiff+0x28>
 8013d6a:	4631      	mov	r1, r6
 8013d6c:	4638      	mov	r0, r7
 8013d6e:	f7ff fd83 	bl	8013878 <_Balloc>
 8013d72:	2301      	movs	r3, #1
 8013d74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d7c:	bfa4      	itt	ge
 8013d7e:	4623      	movge	r3, r4
 8013d80:	462c      	movge	r4, r5
 8013d82:	4638      	mov	r0, r7
 8013d84:	6861      	ldr	r1, [r4, #4]
 8013d86:	bfa6      	itte	ge
 8013d88:	461d      	movge	r5, r3
 8013d8a:	2600      	movge	r6, #0
 8013d8c:	2601      	movlt	r6, #1
 8013d8e:	f7ff fd73 	bl	8013878 <_Balloc>
 8013d92:	692b      	ldr	r3, [r5, #16]
 8013d94:	60c6      	str	r6, [r0, #12]
 8013d96:	6926      	ldr	r6, [r4, #16]
 8013d98:	f105 0914 	add.w	r9, r5, #20
 8013d9c:	f104 0214 	add.w	r2, r4, #20
 8013da0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013da4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013da8:	f100 0514 	add.w	r5, r0, #20
 8013dac:	f04f 0e00 	mov.w	lr, #0
 8013db0:	f852 ab04 	ldr.w	sl, [r2], #4
 8013db4:	f859 4b04 	ldr.w	r4, [r9], #4
 8013db8:	fa1e f18a 	uxtah	r1, lr, sl
 8013dbc:	b2a3      	uxth	r3, r4
 8013dbe:	1ac9      	subs	r1, r1, r3
 8013dc0:	0c23      	lsrs	r3, r4, #16
 8013dc2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013dc6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013dca:	b289      	uxth	r1, r1
 8013dcc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013dd0:	45c8      	cmp	r8, r9
 8013dd2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013dd6:	4694      	mov	ip, r2
 8013dd8:	f845 3b04 	str.w	r3, [r5], #4
 8013ddc:	d8e8      	bhi.n	8013db0 <__mdiff+0x5c>
 8013dde:	45bc      	cmp	ip, r7
 8013de0:	d304      	bcc.n	8013dec <__mdiff+0x98>
 8013de2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013de6:	b183      	cbz	r3, 8013e0a <__mdiff+0xb6>
 8013de8:	6106      	str	r6, [r0, #16]
 8013dea:	e7c5      	b.n	8013d78 <__mdiff+0x24>
 8013dec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013df0:	fa1e f381 	uxtah	r3, lr, r1
 8013df4:	141a      	asrs	r2, r3, #16
 8013df6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013e04:	f845 3b04 	str.w	r3, [r5], #4
 8013e08:	e7e9      	b.n	8013dde <__mdiff+0x8a>
 8013e0a:	3e01      	subs	r6, #1
 8013e0c:	e7e9      	b.n	8013de2 <__mdiff+0x8e>
	...

08013e10 <__ulp>:
 8013e10:	4b12      	ldr	r3, [pc, #72]	; (8013e5c <__ulp+0x4c>)
 8013e12:	ee10 2a90 	vmov	r2, s1
 8013e16:	401a      	ands	r2, r3
 8013e18:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	dd04      	ble.n	8013e2a <__ulp+0x1a>
 8013e20:	2000      	movs	r0, #0
 8013e22:	4619      	mov	r1, r3
 8013e24:	ec41 0b10 	vmov	d0, r0, r1
 8013e28:	4770      	bx	lr
 8013e2a:	425b      	negs	r3, r3
 8013e2c:	151b      	asrs	r3, r3, #20
 8013e2e:	2b13      	cmp	r3, #19
 8013e30:	f04f 0000 	mov.w	r0, #0
 8013e34:	f04f 0100 	mov.w	r1, #0
 8013e38:	dc04      	bgt.n	8013e44 <__ulp+0x34>
 8013e3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013e3e:	fa42 f103 	asr.w	r1, r2, r3
 8013e42:	e7ef      	b.n	8013e24 <__ulp+0x14>
 8013e44:	3b14      	subs	r3, #20
 8013e46:	2b1e      	cmp	r3, #30
 8013e48:	f04f 0201 	mov.w	r2, #1
 8013e4c:	bfda      	itte	le
 8013e4e:	f1c3 031f 	rsble	r3, r3, #31
 8013e52:	fa02 f303 	lslle.w	r3, r2, r3
 8013e56:	4613      	movgt	r3, r2
 8013e58:	4618      	mov	r0, r3
 8013e5a:	e7e3      	b.n	8013e24 <__ulp+0x14>
 8013e5c:	7ff00000 	.word	0x7ff00000

08013e60 <__b2d>:
 8013e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e62:	6905      	ldr	r5, [r0, #16]
 8013e64:	f100 0714 	add.w	r7, r0, #20
 8013e68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013e6c:	1f2e      	subs	r6, r5, #4
 8013e6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013e72:	4620      	mov	r0, r4
 8013e74:	f7ff fdc4 	bl	8013a00 <__hi0bits>
 8013e78:	f1c0 0320 	rsb	r3, r0, #32
 8013e7c:	280a      	cmp	r0, #10
 8013e7e:	600b      	str	r3, [r1, #0]
 8013e80:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013ef8 <__b2d+0x98>
 8013e84:	dc14      	bgt.n	8013eb0 <__b2d+0x50>
 8013e86:	f1c0 0e0b 	rsb	lr, r0, #11
 8013e8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8013e8e:	42b7      	cmp	r7, r6
 8013e90:	ea41 030c 	orr.w	r3, r1, ip
 8013e94:	bf34      	ite	cc
 8013e96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013e9a:	2100      	movcs	r1, #0
 8013e9c:	3015      	adds	r0, #21
 8013e9e:	fa04 f000 	lsl.w	r0, r4, r0
 8013ea2:	fa21 f10e 	lsr.w	r1, r1, lr
 8013ea6:	ea40 0201 	orr.w	r2, r0, r1
 8013eaa:	ec43 2b10 	vmov	d0, r2, r3
 8013eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eb0:	42b7      	cmp	r7, r6
 8013eb2:	bf3a      	itte	cc
 8013eb4:	f1a5 0608 	subcc.w	r6, r5, #8
 8013eb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013ebc:	2100      	movcs	r1, #0
 8013ebe:	380b      	subs	r0, #11
 8013ec0:	d015      	beq.n	8013eee <__b2d+0x8e>
 8013ec2:	4084      	lsls	r4, r0
 8013ec4:	f1c0 0520 	rsb	r5, r0, #32
 8013ec8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013ecc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013ed0:	42be      	cmp	r6, r7
 8013ed2:	fa21 fc05 	lsr.w	ip, r1, r5
 8013ed6:	ea44 030c 	orr.w	r3, r4, ip
 8013eda:	bf8c      	ite	hi
 8013edc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013ee0:	2400      	movls	r4, #0
 8013ee2:	fa01 f000 	lsl.w	r0, r1, r0
 8013ee6:	40ec      	lsrs	r4, r5
 8013ee8:	ea40 0204 	orr.w	r2, r0, r4
 8013eec:	e7dd      	b.n	8013eaa <__b2d+0x4a>
 8013eee:	ea44 030c 	orr.w	r3, r4, ip
 8013ef2:	460a      	mov	r2, r1
 8013ef4:	e7d9      	b.n	8013eaa <__b2d+0x4a>
 8013ef6:	bf00      	nop
 8013ef8:	3ff00000 	.word	0x3ff00000

08013efc <__d2b>:
 8013efc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f00:	460e      	mov	r6, r1
 8013f02:	2101      	movs	r1, #1
 8013f04:	ec59 8b10 	vmov	r8, r9, d0
 8013f08:	4615      	mov	r5, r2
 8013f0a:	f7ff fcb5 	bl	8013878 <_Balloc>
 8013f0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013f12:	4607      	mov	r7, r0
 8013f14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f18:	bb34      	cbnz	r4, 8013f68 <__d2b+0x6c>
 8013f1a:	9301      	str	r3, [sp, #4]
 8013f1c:	f1b8 0300 	subs.w	r3, r8, #0
 8013f20:	d027      	beq.n	8013f72 <__d2b+0x76>
 8013f22:	a802      	add	r0, sp, #8
 8013f24:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013f28:	f7ff fd89 	bl	8013a3e <__lo0bits>
 8013f2c:	9900      	ldr	r1, [sp, #0]
 8013f2e:	b1f0      	cbz	r0, 8013f6e <__d2b+0x72>
 8013f30:	9a01      	ldr	r2, [sp, #4]
 8013f32:	f1c0 0320 	rsb	r3, r0, #32
 8013f36:	fa02 f303 	lsl.w	r3, r2, r3
 8013f3a:	430b      	orrs	r3, r1
 8013f3c:	40c2      	lsrs	r2, r0
 8013f3e:	617b      	str	r3, [r7, #20]
 8013f40:	9201      	str	r2, [sp, #4]
 8013f42:	9b01      	ldr	r3, [sp, #4]
 8013f44:	61bb      	str	r3, [r7, #24]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	bf14      	ite	ne
 8013f4a:	2102      	movne	r1, #2
 8013f4c:	2101      	moveq	r1, #1
 8013f4e:	6139      	str	r1, [r7, #16]
 8013f50:	b1c4      	cbz	r4, 8013f84 <__d2b+0x88>
 8013f52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013f56:	4404      	add	r4, r0
 8013f58:	6034      	str	r4, [r6, #0]
 8013f5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f5e:	6028      	str	r0, [r5, #0]
 8013f60:	4638      	mov	r0, r7
 8013f62:	b003      	add	sp, #12
 8013f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f6c:	e7d5      	b.n	8013f1a <__d2b+0x1e>
 8013f6e:	6179      	str	r1, [r7, #20]
 8013f70:	e7e7      	b.n	8013f42 <__d2b+0x46>
 8013f72:	a801      	add	r0, sp, #4
 8013f74:	f7ff fd63 	bl	8013a3e <__lo0bits>
 8013f78:	9b01      	ldr	r3, [sp, #4]
 8013f7a:	617b      	str	r3, [r7, #20]
 8013f7c:	2101      	movs	r1, #1
 8013f7e:	6139      	str	r1, [r7, #16]
 8013f80:	3020      	adds	r0, #32
 8013f82:	e7e5      	b.n	8013f50 <__d2b+0x54>
 8013f84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013f88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013f8c:	6030      	str	r0, [r6, #0]
 8013f8e:	6918      	ldr	r0, [r3, #16]
 8013f90:	f7ff fd36 	bl	8013a00 <__hi0bits>
 8013f94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013f98:	e7e1      	b.n	8013f5e <__d2b+0x62>

08013f9a <__ratio>:
 8013f9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9e:	4688      	mov	r8, r1
 8013fa0:	4669      	mov	r1, sp
 8013fa2:	4681      	mov	r9, r0
 8013fa4:	f7ff ff5c 	bl	8013e60 <__b2d>
 8013fa8:	a901      	add	r1, sp, #4
 8013faa:	4640      	mov	r0, r8
 8013fac:	ec57 6b10 	vmov	r6, r7, d0
 8013fb0:	f7ff ff56 	bl	8013e60 <__b2d>
 8013fb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013fb8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013fbc:	eba3 0c02 	sub.w	ip, r3, r2
 8013fc0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013fc4:	1a9b      	subs	r3, r3, r2
 8013fc6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013fca:	ec5b ab10 	vmov	sl, fp, d0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	bfce      	itee	gt
 8013fd2:	463a      	movgt	r2, r7
 8013fd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013fd8:	465a      	movle	r2, fp
 8013fda:	4659      	mov	r1, fp
 8013fdc:	463d      	mov	r5, r7
 8013fde:	bfd4      	ite	le
 8013fe0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013fe4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013fe8:	4630      	mov	r0, r6
 8013fea:	ee10 2a10 	vmov	r2, s0
 8013fee:	460b      	mov	r3, r1
 8013ff0:	4629      	mov	r1, r5
 8013ff2:	f7ec fc53 	bl	800089c <__aeabi_ddiv>
 8013ff6:	ec41 0b10 	vmov	d0, r0, r1
 8013ffa:	b003      	add	sp, #12
 8013ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014000 <__copybits>:
 8014000:	3901      	subs	r1, #1
 8014002:	b510      	push	{r4, lr}
 8014004:	1149      	asrs	r1, r1, #5
 8014006:	6914      	ldr	r4, [r2, #16]
 8014008:	3101      	adds	r1, #1
 801400a:	f102 0314 	add.w	r3, r2, #20
 801400e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014012:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014016:	42a3      	cmp	r3, r4
 8014018:	4602      	mov	r2, r0
 801401a:	d303      	bcc.n	8014024 <__copybits+0x24>
 801401c:	2300      	movs	r3, #0
 801401e:	428a      	cmp	r2, r1
 8014020:	d305      	bcc.n	801402e <__copybits+0x2e>
 8014022:	bd10      	pop	{r4, pc}
 8014024:	f853 2b04 	ldr.w	r2, [r3], #4
 8014028:	f840 2b04 	str.w	r2, [r0], #4
 801402c:	e7f3      	b.n	8014016 <__copybits+0x16>
 801402e:	f842 3b04 	str.w	r3, [r2], #4
 8014032:	e7f4      	b.n	801401e <__copybits+0x1e>

08014034 <__any_on>:
 8014034:	f100 0214 	add.w	r2, r0, #20
 8014038:	6900      	ldr	r0, [r0, #16]
 801403a:	114b      	asrs	r3, r1, #5
 801403c:	4298      	cmp	r0, r3
 801403e:	b510      	push	{r4, lr}
 8014040:	db11      	blt.n	8014066 <__any_on+0x32>
 8014042:	dd0a      	ble.n	801405a <__any_on+0x26>
 8014044:	f011 011f 	ands.w	r1, r1, #31
 8014048:	d007      	beq.n	801405a <__any_on+0x26>
 801404a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801404e:	fa24 f001 	lsr.w	r0, r4, r1
 8014052:	fa00 f101 	lsl.w	r1, r0, r1
 8014056:	428c      	cmp	r4, r1
 8014058:	d10b      	bne.n	8014072 <__any_on+0x3e>
 801405a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801405e:	4293      	cmp	r3, r2
 8014060:	d803      	bhi.n	801406a <__any_on+0x36>
 8014062:	2000      	movs	r0, #0
 8014064:	bd10      	pop	{r4, pc}
 8014066:	4603      	mov	r3, r0
 8014068:	e7f7      	b.n	801405a <__any_on+0x26>
 801406a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801406e:	2900      	cmp	r1, #0
 8014070:	d0f5      	beq.n	801405e <__any_on+0x2a>
 8014072:	2001      	movs	r0, #1
 8014074:	e7f6      	b.n	8014064 <__any_on+0x30>

08014076 <_calloc_r>:
 8014076:	b538      	push	{r3, r4, r5, lr}
 8014078:	fb02 f401 	mul.w	r4, r2, r1
 801407c:	4621      	mov	r1, r4
 801407e:	f000 f857 	bl	8014130 <_malloc_r>
 8014082:	4605      	mov	r5, r0
 8014084:	b118      	cbz	r0, 801408e <_calloc_r+0x18>
 8014086:	4622      	mov	r2, r4
 8014088:	2100      	movs	r1, #0
 801408a:	f7fc fcfe 	bl	8010a8a <memset>
 801408e:	4628      	mov	r0, r5
 8014090:	bd38      	pop	{r3, r4, r5, pc}
	...

08014094 <_free_r>:
 8014094:	b538      	push	{r3, r4, r5, lr}
 8014096:	4605      	mov	r5, r0
 8014098:	2900      	cmp	r1, #0
 801409a:	d045      	beq.n	8014128 <_free_r+0x94>
 801409c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140a0:	1f0c      	subs	r4, r1, #4
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	bfb8      	it	lt
 80140a6:	18e4      	addlt	r4, r4, r3
 80140a8:	f000 fa36 	bl	8014518 <__malloc_lock>
 80140ac:	4a1f      	ldr	r2, [pc, #124]	; (801412c <_free_r+0x98>)
 80140ae:	6813      	ldr	r3, [r2, #0]
 80140b0:	4610      	mov	r0, r2
 80140b2:	b933      	cbnz	r3, 80140c2 <_free_r+0x2e>
 80140b4:	6063      	str	r3, [r4, #4]
 80140b6:	6014      	str	r4, [r2, #0]
 80140b8:	4628      	mov	r0, r5
 80140ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140be:	f000 ba2c 	b.w	801451a <__malloc_unlock>
 80140c2:	42a3      	cmp	r3, r4
 80140c4:	d90c      	bls.n	80140e0 <_free_r+0x4c>
 80140c6:	6821      	ldr	r1, [r4, #0]
 80140c8:	1862      	adds	r2, r4, r1
 80140ca:	4293      	cmp	r3, r2
 80140cc:	bf04      	itt	eq
 80140ce:	681a      	ldreq	r2, [r3, #0]
 80140d0:	685b      	ldreq	r3, [r3, #4]
 80140d2:	6063      	str	r3, [r4, #4]
 80140d4:	bf04      	itt	eq
 80140d6:	1852      	addeq	r2, r2, r1
 80140d8:	6022      	streq	r2, [r4, #0]
 80140da:	6004      	str	r4, [r0, #0]
 80140dc:	e7ec      	b.n	80140b8 <_free_r+0x24>
 80140de:	4613      	mov	r3, r2
 80140e0:	685a      	ldr	r2, [r3, #4]
 80140e2:	b10a      	cbz	r2, 80140e8 <_free_r+0x54>
 80140e4:	42a2      	cmp	r2, r4
 80140e6:	d9fa      	bls.n	80140de <_free_r+0x4a>
 80140e8:	6819      	ldr	r1, [r3, #0]
 80140ea:	1858      	adds	r0, r3, r1
 80140ec:	42a0      	cmp	r0, r4
 80140ee:	d10b      	bne.n	8014108 <_free_r+0x74>
 80140f0:	6820      	ldr	r0, [r4, #0]
 80140f2:	4401      	add	r1, r0
 80140f4:	1858      	adds	r0, r3, r1
 80140f6:	4282      	cmp	r2, r0
 80140f8:	6019      	str	r1, [r3, #0]
 80140fa:	d1dd      	bne.n	80140b8 <_free_r+0x24>
 80140fc:	6810      	ldr	r0, [r2, #0]
 80140fe:	6852      	ldr	r2, [r2, #4]
 8014100:	605a      	str	r2, [r3, #4]
 8014102:	4401      	add	r1, r0
 8014104:	6019      	str	r1, [r3, #0]
 8014106:	e7d7      	b.n	80140b8 <_free_r+0x24>
 8014108:	d902      	bls.n	8014110 <_free_r+0x7c>
 801410a:	230c      	movs	r3, #12
 801410c:	602b      	str	r3, [r5, #0]
 801410e:	e7d3      	b.n	80140b8 <_free_r+0x24>
 8014110:	6820      	ldr	r0, [r4, #0]
 8014112:	1821      	adds	r1, r4, r0
 8014114:	428a      	cmp	r2, r1
 8014116:	bf04      	itt	eq
 8014118:	6811      	ldreq	r1, [r2, #0]
 801411a:	6852      	ldreq	r2, [r2, #4]
 801411c:	6062      	str	r2, [r4, #4]
 801411e:	bf04      	itt	eq
 8014120:	1809      	addeq	r1, r1, r0
 8014122:	6021      	streq	r1, [r4, #0]
 8014124:	605c      	str	r4, [r3, #4]
 8014126:	e7c7      	b.n	80140b8 <_free_r+0x24>
 8014128:	bd38      	pop	{r3, r4, r5, pc}
 801412a:	bf00      	nop
 801412c:	2000fefc 	.word	0x2000fefc

08014130 <_malloc_r>:
 8014130:	b570      	push	{r4, r5, r6, lr}
 8014132:	1ccd      	adds	r5, r1, #3
 8014134:	f025 0503 	bic.w	r5, r5, #3
 8014138:	3508      	adds	r5, #8
 801413a:	2d0c      	cmp	r5, #12
 801413c:	bf38      	it	cc
 801413e:	250c      	movcc	r5, #12
 8014140:	2d00      	cmp	r5, #0
 8014142:	4606      	mov	r6, r0
 8014144:	db01      	blt.n	801414a <_malloc_r+0x1a>
 8014146:	42a9      	cmp	r1, r5
 8014148:	d903      	bls.n	8014152 <_malloc_r+0x22>
 801414a:	230c      	movs	r3, #12
 801414c:	6033      	str	r3, [r6, #0]
 801414e:	2000      	movs	r0, #0
 8014150:	bd70      	pop	{r4, r5, r6, pc}
 8014152:	f000 f9e1 	bl	8014518 <__malloc_lock>
 8014156:	4a21      	ldr	r2, [pc, #132]	; (80141dc <_malloc_r+0xac>)
 8014158:	6814      	ldr	r4, [r2, #0]
 801415a:	4621      	mov	r1, r4
 801415c:	b991      	cbnz	r1, 8014184 <_malloc_r+0x54>
 801415e:	4c20      	ldr	r4, [pc, #128]	; (80141e0 <_malloc_r+0xb0>)
 8014160:	6823      	ldr	r3, [r4, #0]
 8014162:	b91b      	cbnz	r3, 801416c <_malloc_r+0x3c>
 8014164:	4630      	mov	r0, r6
 8014166:	f000 f98f 	bl	8014488 <_sbrk_r>
 801416a:	6020      	str	r0, [r4, #0]
 801416c:	4629      	mov	r1, r5
 801416e:	4630      	mov	r0, r6
 8014170:	f000 f98a 	bl	8014488 <_sbrk_r>
 8014174:	1c43      	adds	r3, r0, #1
 8014176:	d124      	bne.n	80141c2 <_malloc_r+0x92>
 8014178:	230c      	movs	r3, #12
 801417a:	6033      	str	r3, [r6, #0]
 801417c:	4630      	mov	r0, r6
 801417e:	f000 f9cc 	bl	801451a <__malloc_unlock>
 8014182:	e7e4      	b.n	801414e <_malloc_r+0x1e>
 8014184:	680b      	ldr	r3, [r1, #0]
 8014186:	1b5b      	subs	r3, r3, r5
 8014188:	d418      	bmi.n	80141bc <_malloc_r+0x8c>
 801418a:	2b0b      	cmp	r3, #11
 801418c:	d90f      	bls.n	80141ae <_malloc_r+0x7e>
 801418e:	600b      	str	r3, [r1, #0]
 8014190:	50cd      	str	r5, [r1, r3]
 8014192:	18cc      	adds	r4, r1, r3
 8014194:	4630      	mov	r0, r6
 8014196:	f000 f9c0 	bl	801451a <__malloc_unlock>
 801419a:	f104 000b 	add.w	r0, r4, #11
 801419e:	1d23      	adds	r3, r4, #4
 80141a0:	f020 0007 	bic.w	r0, r0, #7
 80141a4:	1ac3      	subs	r3, r0, r3
 80141a6:	d0d3      	beq.n	8014150 <_malloc_r+0x20>
 80141a8:	425a      	negs	r2, r3
 80141aa:	50e2      	str	r2, [r4, r3]
 80141ac:	e7d0      	b.n	8014150 <_malloc_r+0x20>
 80141ae:	428c      	cmp	r4, r1
 80141b0:	684b      	ldr	r3, [r1, #4]
 80141b2:	bf16      	itet	ne
 80141b4:	6063      	strne	r3, [r4, #4]
 80141b6:	6013      	streq	r3, [r2, #0]
 80141b8:	460c      	movne	r4, r1
 80141ba:	e7eb      	b.n	8014194 <_malloc_r+0x64>
 80141bc:	460c      	mov	r4, r1
 80141be:	6849      	ldr	r1, [r1, #4]
 80141c0:	e7cc      	b.n	801415c <_malloc_r+0x2c>
 80141c2:	1cc4      	adds	r4, r0, #3
 80141c4:	f024 0403 	bic.w	r4, r4, #3
 80141c8:	42a0      	cmp	r0, r4
 80141ca:	d005      	beq.n	80141d8 <_malloc_r+0xa8>
 80141cc:	1a21      	subs	r1, r4, r0
 80141ce:	4630      	mov	r0, r6
 80141d0:	f000 f95a 	bl	8014488 <_sbrk_r>
 80141d4:	3001      	adds	r0, #1
 80141d6:	d0cf      	beq.n	8014178 <_malloc_r+0x48>
 80141d8:	6025      	str	r5, [r4, #0]
 80141da:	e7db      	b.n	8014194 <_malloc_r+0x64>
 80141dc:	2000fefc 	.word	0x2000fefc
 80141e0:	2000ff00 	.word	0x2000ff00

080141e4 <__ssputs_r>:
 80141e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141e8:	688e      	ldr	r6, [r1, #8]
 80141ea:	429e      	cmp	r6, r3
 80141ec:	4682      	mov	sl, r0
 80141ee:	460c      	mov	r4, r1
 80141f0:	4690      	mov	r8, r2
 80141f2:	4699      	mov	r9, r3
 80141f4:	d837      	bhi.n	8014266 <__ssputs_r+0x82>
 80141f6:	898a      	ldrh	r2, [r1, #12]
 80141f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80141fc:	d031      	beq.n	8014262 <__ssputs_r+0x7e>
 80141fe:	6825      	ldr	r5, [r4, #0]
 8014200:	6909      	ldr	r1, [r1, #16]
 8014202:	1a6f      	subs	r7, r5, r1
 8014204:	6965      	ldr	r5, [r4, #20]
 8014206:	2302      	movs	r3, #2
 8014208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801420c:	fb95 f5f3 	sdiv	r5, r5, r3
 8014210:	f109 0301 	add.w	r3, r9, #1
 8014214:	443b      	add	r3, r7
 8014216:	429d      	cmp	r5, r3
 8014218:	bf38      	it	cc
 801421a:	461d      	movcc	r5, r3
 801421c:	0553      	lsls	r3, r2, #21
 801421e:	d530      	bpl.n	8014282 <__ssputs_r+0x9e>
 8014220:	4629      	mov	r1, r5
 8014222:	f7ff ff85 	bl	8014130 <_malloc_r>
 8014226:	4606      	mov	r6, r0
 8014228:	b950      	cbnz	r0, 8014240 <__ssputs_r+0x5c>
 801422a:	230c      	movs	r3, #12
 801422c:	f8ca 3000 	str.w	r3, [sl]
 8014230:	89a3      	ldrh	r3, [r4, #12]
 8014232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014236:	81a3      	strh	r3, [r4, #12]
 8014238:	f04f 30ff 	mov.w	r0, #4294967295
 801423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014240:	463a      	mov	r2, r7
 8014242:	6921      	ldr	r1, [r4, #16]
 8014244:	f7fc fc16 	bl	8010a74 <memcpy>
 8014248:	89a3      	ldrh	r3, [r4, #12]
 801424a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014252:	81a3      	strh	r3, [r4, #12]
 8014254:	6126      	str	r6, [r4, #16]
 8014256:	6165      	str	r5, [r4, #20]
 8014258:	443e      	add	r6, r7
 801425a:	1bed      	subs	r5, r5, r7
 801425c:	6026      	str	r6, [r4, #0]
 801425e:	60a5      	str	r5, [r4, #8]
 8014260:	464e      	mov	r6, r9
 8014262:	454e      	cmp	r6, r9
 8014264:	d900      	bls.n	8014268 <__ssputs_r+0x84>
 8014266:	464e      	mov	r6, r9
 8014268:	4632      	mov	r2, r6
 801426a:	4641      	mov	r1, r8
 801426c:	6820      	ldr	r0, [r4, #0]
 801426e:	f000 f93a 	bl	80144e6 <memmove>
 8014272:	68a3      	ldr	r3, [r4, #8]
 8014274:	1b9b      	subs	r3, r3, r6
 8014276:	60a3      	str	r3, [r4, #8]
 8014278:	6823      	ldr	r3, [r4, #0]
 801427a:	441e      	add	r6, r3
 801427c:	6026      	str	r6, [r4, #0]
 801427e:	2000      	movs	r0, #0
 8014280:	e7dc      	b.n	801423c <__ssputs_r+0x58>
 8014282:	462a      	mov	r2, r5
 8014284:	f000 f94a 	bl	801451c <_realloc_r>
 8014288:	4606      	mov	r6, r0
 801428a:	2800      	cmp	r0, #0
 801428c:	d1e2      	bne.n	8014254 <__ssputs_r+0x70>
 801428e:	6921      	ldr	r1, [r4, #16]
 8014290:	4650      	mov	r0, sl
 8014292:	f7ff feff 	bl	8014094 <_free_r>
 8014296:	e7c8      	b.n	801422a <__ssputs_r+0x46>

08014298 <_svfiprintf_r>:
 8014298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801429c:	461d      	mov	r5, r3
 801429e:	898b      	ldrh	r3, [r1, #12]
 80142a0:	061f      	lsls	r7, r3, #24
 80142a2:	b09d      	sub	sp, #116	; 0x74
 80142a4:	4680      	mov	r8, r0
 80142a6:	460c      	mov	r4, r1
 80142a8:	4616      	mov	r6, r2
 80142aa:	d50f      	bpl.n	80142cc <_svfiprintf_r+0x34>
 80142ac:	690b      	ldr	r3, [r1, #16]
 80142ae:	b96b      	cbnz	r3, 80142cc <_svfiprintf_r+0x34>
 80142b0:	2140      	movs	r1, #64	; 0x40
 80142b2:	f7ff ff3d 	bl	8014130 <_malloc_r>
 80142b6:	6020      	str	r0, [r4, #0]
 80142b8:	6120      	str	r0, [r4, #16]
 80142ba:	b928      	cbnz	r0, 80142c8 <_svfiprintf_r+0x30>
 80142bc:	230c      	movs	r3, #12
 80142be:	f8c8 3000 	str.w	r3, [r8]
 80142c2:	f04f 30ff 	mov.w	r0, #4294967295
 80142c6:	e0c8      	b.n	801445a <_svfiprintf_r+0x1c2>
 80142c8:	2340      	movs	r3, #64	; 0x40
 80142ca:	6163      	str	r3, [r4, #20]
 80142cc:	2300      	movs	r3, #0
 80142ce:	9309      	str	r3, [sp, #36]	; 0x24
 80142d0:	2320      	movs	r3, #32
 80142d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142d6:	2330      	movs	r3, #48	; 0x30
 80142d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142dc:	9503      	str	r5, [sp, #12]
 80142de:	f04f 0b01 	mov.w	fp, #1
 80142e2:	4637      	mov	r7, r6
 80142e4:	463d      	mov	r5, r7
 80142e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80142ea:	b10b      	cbz	r3, 80142f0 <_svfiprintf_r+0x58>
 80142ec:	2b25      	cmp	r3, #37	; 0x25
 80142ee:	d13e      	bne.n	801436e <_svfiprintf_r+0xd6>
 80142f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80142f4:	d00b      	beq.n	801430e <_svfiprintf_r+0x76>
 80142f6:	4653      	mov	r3, sl
 80142f8:	4632      	mov	r2, r6
 80142fa:	4621      	mov	r1, r4
 80142fc:	4640      	mov	r0, r8
 80142fe:	f7ff ff71 	bl	80141e4 <__ssputs_r>
 8014302:	3001      	adds	r0, #1
 8014304:	f000 80a4 	beq.w	8014450 <_svfiprintf_r+0x1b8>
 8014308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801430a:	4453      	add	r3, sl
 801430c:	9309      	str	r3, [sp, #36]	; 0x24
 801430e:	783b      	ldrb	r3, [r7, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	f000 809d 	beq.w	8014450 <_svfiprintf_r+0x1b8>
 8014316:	2300      	movs	r3, #0
 8014318:	f04f 32ff 	mov.w	r2, #4294967295
 801431c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014320:	9304      	str	r3, [sp, #16]
 8014322:	9307      	str	r3, [sp, #28]
 8014324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014328:	931a      	str	r3, [sp, #104]	; 0x68
 801432a:	462f      	mov	r7, r5
 801432c:	2205      	movs	r2, #5
 801432e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014332:	4850      	ldr	r0, [pc, #320]	; (8014474 <_svfiprintf_r+0x1dc>)
 8014334:	f7eb ff7c 	bl	8000230 <memchr>
 8014338:	9b04      	ldr	r3, [sp, #16]
 801433a:	b9d0      	cbnz	r0, 8014372 <_svfiprintf_r+0xda>
 801433c:	06d9      	lsls	r1, r3, #27
 801433e:	bf44      	itt	mi
 8014340:	2220      	movmi	r2, #32
 8014342:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014346:	071a      	lsls	r2, r3, #28
 8014348:	bf44      	itt	mi
 801434a:	222b      	movmi	r2, #43	; 0x2b
 801434c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014350:	782a      	ldrb	r2, [r5, #0]
 8014352:	2a2a      	cmp	r2, #42	; 0x2a
 8014354:	d015      	beq.n	8014382 <_svfiprintf_r+0xea>
 8014356:	9a07      	ldr	r2, [sp, #28]
 8014358:	462f      	mov	r7, r5
 801435a:	2000      	movs	r0, #0
 801435c:	250a      	movs	r5, #10
 801435e:	4639      	mov	r1, r7
 8014360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014364:	3b30      	subs	r3, #48	; 0x30
 8014366:	2b09      	cmp	r3, #9
 8014368:	d94d      	bls.n	8014406 <_svfiprintf_r+0x16e>
 801436a:	b1b8      	cbz	r0, 801439c <_svfiprintf_r+0x104>
 801436c:	e00f      	b.n	801438e <_svfiprintf_r+0xf6>
 801436e:	462f      	mov	r7, r5
 8014370:	e7b8      	b.n	80142e4 <_svfiprintf_r+0x4c>
 8014372:	4a40      	ldr	r2, [pc, #256]	; (8014474 <_svfiprintf_r+0x1dc>)
 8014374:	1a80      	subs	r0, r0, r2
 8014376:	fa0b f000 	lsl.w	r0, fp, r0
 801437a:	4318      	orrs	r0, r3
 801437c:	9004      	str	r0, [sp, #16]
 801437e:	463d      	mov	r5, r7
 8014380:	e7d3      	b.n	801432a <_svfiprintf_r+0x92>
 8014382:	9a03      	ldr	r2, [sp, #12]
 8014384:	1d11      	adds	r1, r2, #4
 8014386:	6812      	ldr	r2, [r2, #0]
 8014388:	9103      	str	r1, [sp, #12]
 801438a:	2a00      	cmp	r2, #0
 801438c:	db01      	blt.n	8014392 <_svfiprintf_r+0xfa>
 801438e:	9207      	str	r2, [sp, #28]
 8014390:	e004      	b.n	801439c <_svfiprintf_r+0x104>
 8014392:	4252      	negs	r2, r2
 8014394:	f043 0302 	orr.w	r3, r3, #2
 8014398:	9207      	str	r2, [sp, #28]
 801439a:	9304      	str	r3, [sp, #16]
 801439c:	783b      	ldrb	r3, [r7, #0]
 801439e:	2b2e      	cmp	r3, #46	; 0x2e
 80143a0:	d10c      	bne.n	80143bc <_svfiprintf_r+0x124>
 80143a2:	787b      	ldrb	r3, [r7, #1]
 80143a4:	2b2a      	cmp	r3, #42	; 0x2a
 80143a6:	d133      	bne.n	8014410 <_svfiprintf_r+0x178>
 80143a8:	9b03      	ldr	r3, [sp, #12]
 80143aa:	1d1a      	adds	r2, r3, #4
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	9203      	str	r2, [sp, #12]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	bfb8      	it	lt
 80143b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80143b8:	3702      	adds	r7, #2
 80143ba:	9305      	str	r3, [sp, #20]
 80143bc:	4d2e      	ldr	r5, [pc, #184]	; (8014478 <_svfiprintf_r+0x1e0>)
 80143be:	7839      	ldrb	r1, [r7, #0]
 80143c0:	2203      	movs	r2, #3
 80143c2:	4628      	mov	r0, r5
 80143c4:	f7eb ff34 	bl	8000230 <memchr>
 80143c8:	b138      	cbz	r0, 80143da <_svfiprintf_r+0x142>
 80143ca:	2340      	movs	r3, #64	; 0x40
 80143cc:	1b40      	subs	r0, r0, r5
 80143ce:	fa03 f000 	lsl.w	r0, r3, r0
 80143d2:	9b04      	ldr	r3, [sp, #16]
 80143d4:	4303      	orrs	r3, r0
 80143d6:	3701      	adds	r7, #1
 80143d8:	9304      	str	r3, [sp, #16]
 80143da:	7839      	ldrb	r1, [r7, #0]
 80143dc:	4827      	ldr	r0, [pc, #156]	; (801447c <_svfiprintf_r+0x1e4>)
 80143de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143e2:	2206      	movs	r2, #6
 80143e4:	1c7e      	adds	r6, r7, #1
 80143e6:	f7eb ff23 	bl	8000230 <memchr>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d038      	beq.n	8014460 <_svfiprintf_r+0x1c8>
 80143ee:	4b24      	ldr	r3, [pc, #144]	; (8014480 <_svfiprintf_r+0x1e8>)
 80143f0:	bb13      	cbnz	r3, 8014438 <_svfiprintf_r+0x1a0>
 80143f2:	9b03      	ldr	r3, [sp, #12]
 80143f4:	3307      	adds	r3, #7
 80143f6:	f023 0307 	bic.w	r3, r3, #7
 80143fa:	3308      	adds	r3, #8
 80143fc:	9303      	str	r3, [sp, #12]
 80143fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014400:	444b      	add	r3, r9
 8014402:	9309      	str	r3, [sp, #36]	; 0x24
 8014404:	e76d      	b.n	80142e2 <_svfiprintf_r+0x4a>
 8014406:	fb05 3202 	mla	r2, r5, r2, r3
 801440a:	2001      	movs	r0, #1
 801440c:	460f      	mov	r7, r1
 801440e:	e7a6      	b.n	801435e <_svfiprintf_r+0xc6>
 8014410:	2300      	movs	r3, #0
 8014412:	3701      	adds	r7, #1
 8014414:	9305      	str	r3, [sp, #20]
 8014416:	4619      	mov	r1, r3
 8014418:	250a      	movs	r5, #10
 801441a:	4638      	mov	r0, r7
 801441c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014420:	3a30      	subs	r2, #48	; 0x30
 8014422:	2a09      	cmp	r2, #9
 8014424:	d903      	bls.n	801442e <_svfiprintf_r+0x196>
 8014426:	2b00      	cmp	r3, #0
 8014428:	d0c8      	beq.n	80143bc <_svfiprintf_r+0x124>
 801442a:	9105      	str	r1, [sp, #20]
 801442c:	e7c6      	b.n	80143bc <_svfiprintf_r+0x124>
 801442e:	fb05 2101 	mla	r1, r5, r1, r2
 8014432:	2301      	movs	r3, #1
 8014434:	4607      	mov	r7, r0
 8014436:	e7f0      	b.n	801441a <_svfiprintf_r+0x182>
 8014438:	ab03      	add	r3, sp, #12
 801443a:	9300      	str	r3, [sp, #0]
 801443c:	4622      	mov	r2, r4
 801443e:	4b11      	ldr	r3, [pc, #68]	; (8014484 <_svfiprintf_r+0x1ec>)
 8014440:	a904      	add	r1, sp, #16
 8014442:	4640      	mov	r0, r8
 8014444:	f7fc fbbe 	bl	8010bc4 <_printf_float>
 8014448:	f1b0 3fff 	cmp.w	r0, #4294967295
 801444c:	4681      	mov	r9, r0
 801444e:	d1d6      	bne.n	80143fe <_svfiprintf_r+0x166>
 8014450:	89a3      	ldrh	r3, [r4, #12]
 8014452:	065b      	lsls	r3, r3, #25
 8014454:	f53f af35 	bmi.w	80142c2 <_svfiprintf_r+0x2a>
 8014458:	9809      	ldr	r0, [sp, #36]	; 0x24
 801445a:	b01d      	add	sp, #116	; 0x74
 801445c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014460:	ab03      	add	r3, sp, #12
 8014462:	9300      	str	r3, [sp, #0]
 8014464:	4622      	mov	r2, r4
 8014466:	4b07      	ldr	r3, [pc, #28]	; (8014484 <_svfiprintf_r+0x1ec>)
 8014468:	a904      	add	r1, sp, #16
 801446a:	4640      	mov	r0, r8
 801446c:	f7fc fe60 	bl	8011130 <_printf_i>
 8014470:	e7ea      	b.n	8014448 <_svfiprintf_r+0x1b0>
 8014472:	bf00      	nop
 8014474:	08017b74 	.word	0x08017b74
 8014478:	08017b7a 	.word	0x08017b7a
 801447c:	08017b7e 	.word	0x08017b7e
 8014480:	08010bc5 	.word	0x08010bc5
 8014484:	080141e5 	.word	0x080141e5

08014488 <_sbrk_r>:
 8014488:	b538      	push	{r3, r4, r5, lr}
 801448a:	4c06      	ldr	r4, [pc, #24]	; (80144a4 <_sbrk_r+0x1c>)
 801448c:	2300      	movs	r3, #0
 801448e:	4605      	mov	r5, r0
 8014490:	4608      	mov	r0, r1
 8014492:	6023      	str	r3, [r4, #0]
 8014494:	f7f5 f8f8 	bl	8009688 <_sbrk>
 8014498:	1c43      	adds	r3, r0, #1
 801449a:	d102      	bne.n	80144a2 <_sbrk_r+0x1a>
 801449c:	6823      	ldr	r3, [r4, #0]
 801449e:	b103      	cbz	r3, 80144a2 <_sbrk_r+0x1a>
 80144a0:	602b      	str	r3, [r5, #0]
 80144a2:	bd38      	pop	{r3, r4, r5, pc}
 80144a4:	20010704 	.word	0x20010704

080144a8 <strncmp>:
 80144a8:	b510      	push	{r4, lr}
 80144aa:	b16a      	cbz	r2, 80144c8 <strncmp+0x20>
 80144ac:	3901      	subs	r1, #1
 80144ae:	1884      	adds	r4, r0, r2
 80144b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80144b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80144b8:	4293      	cmp	r3, r2
 80144ba:	d103      	bne.n	80144c4 <strncmp+0x1c>
 80144bc:	42a0      	cmp	r0, r4
 80144be:	d001      	beq.n	80144c4 <strncmp+0x1c>
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d1f5      	bne.n	80144b0 <strncmp+0x8>
 80144c4:	1a98      	subs	r0, r3, r2
 80144c6:	bd10      	pop	{r4, pc}
 80144c8:	4610      	mov	r0, r2
 80144ca:	e7fc      	b.n	80144c6 <strncmp+0x1e>

080144cc <__ascii_wctomb>:
 80144cc:	b149      	cbz	r1, 80144e2 <__ascii_wctomb+0x16>
 80144ce:	2aff      	cmp	r2, #255	; 0xff
 80144d0:	bf85      	ittet	hi
 80144d2:	238a      	movhi	r3, #138	; 0x8a
 80144d4:	6003      	strhi	r3, [r0, #0]
 80144d6:	700a      	strbls	r2, [r1, #0]
 80144d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80144dc:	bf98      	it	ls
 80144de:	2001      	movls	r0, #1
 80144e0:	4770      	bx	lr
 80144e2:	4608      	mov	r0, r1
 80144e4:	4770      	bx	lr

080144e6 <memmove>:
 80144e6:	4288      	cmp	r0, r1
 80144e8:	b510      	push	{r4, lr}
 80144ea:	eb01 0302 	add.w	r3, r1, r2
 80144ee:	d807      	bhi.n	8014500 <memmove+0x1a>
 80144f0:	1e42      	subs	r2, r0, #1
 80144f2:	4299      	cmp	r1, r3
 80144f4:	d00a      	beq.n	801450c <memmove+0x26>
 80144f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80144fe:	e7f8      	b.n	80144f2 <memmove+0xc>
 8014500:	4283      	cmp	r3, r0
 8014502:	d9f5      	bls.n	80144f0 <memmove+0xa>
 8014504:	1881      	adds	r1, r0, r2
 8014506:	1ad2      	subs	r2, r2, r3
 8014508:	42d3      	cmn	r3, r2
 801450a:	d100      	bne.n	801450e <memmove+0x28>
 801450c:	bd10      	pop	{r4, pc}
 801450e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014512:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014516:	e7f7      	b.n	8014508 <memmove+0x22>

08014518 <__malloc_lock>:
 8014518:	4770      	bx	lr

0801451a <__malloc_unlock>:
 801451a:	4770      	bx	lr

0801451c <_realloc_r>:
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451e:	4607      	mov	r7, r0
 8014520:	4614      	mov	r4, r2
 8014522:	460e      	mov	r6, r1
 8014524:	b921      	cbnz	r1, 8014530 <_realloc_r+0x14>
 8014526:	4611      	mov	r1, r2
 8014528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801452c:	f7ff be00 	b.w	8014130 <_malloc_r>
 8014530:	b922      	cbnz	r2, 801453c <_realloc_r+0x20>
 8014532:	f7ff fdaf 	bl	8014094 <_free_r>
 8014536:	4625      	mov	r5, r4
 8014538:	4628      	mov	r0, r5
 801453a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801453c:	f000 f814 	bl	8014568 <_malloc_usable_size_r>
 8014540:	42a0      	cmp	r0, r4
 8014542:	d20f      	bcs.n	8014564 <_realloc_r+0x48>
 8014544:	4621      	mov	r1, r4
 8014546:	4638      	mov	r0, r7
 8014548:	f7ff fdf2 	bl	8014130 <_malloc_r>
 801454c:	4605      	mov	r5, r0
 801454e:	2800      	cmp	r0, #0
 8014550:	d0f2      	beq.n	8014538 <_realloc_r+0x1c>
 8014552:	4631      	mov	r1, r6
 8014554:	4622      	mov	r2, r4
 8014556:	f7fc fa8d 	bl	8010a74 <memcpy>
 801455a:	4631      	mov	r1, r6
 801455c:	4638      	mov	r0, r7
 801455e:	f7ff fd99 	bl	8014094 <_free_r>
 8014562:	e7e9      	b.n	8014538 <_realloc_r+0x1c>
 8014564:	4635      	mov	r5, r6
 8014566:	e7e7      	b.n	8014538 <_realloc_r+0x1c>

08014568 <_malloc_usable_size_r>:
 8014568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801456c:	1f18      	subs	r0, r3, #4
 801456e:	2b00      	cmp	r3, #0
 8014570:	bfbc      	itt	lt
 8014572:	580b      	ldrlt	r3, [r1, r0]
 8014574:	18c0      	addlt	r0, r0, r3
 8014576:	4770      	bx	lr

08014578 <roundf>:
 8014578:	ee10 0a10 	vmov	r0, s0
 801457c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8014580:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8014584:	2a16      	cmp	r2, #22
 8014586:	dc15      	bgt.n	80145b4 <roundf+0x3c>
 8014588:	2a00      	cmp	r2, #0
 801458a:	da08      	bge.n	801459e <roundf+0x26>
 801458c:	3201      	adds	r2, #1
 801458e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8014592:	d101      	bne.n	8014598 <roundf+0x20>
 8014594:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8014598:	ee00 3a10 	vmov	s0, r3
 801459c:	4770      	bx	lr
 801459e:	4908      	ldr	r1, [pc, #32]	; (80145c0 <roundf+0x48>)
 80145a0:	4111      	asrs	r1, r2
 80145a2:	4208      	tst	r0, r1
 80145a4:	d0fa      	beq.n	801459c <roundf+0x24>
 80145a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80145aa:	4113      	asrs	r3, r2
 80145ac:	4403      	add	r3, r0
 80145ae:	ea23 0301 	bic.w	r3, r3, r1
 80145b2:	e7f1      	b.n	8014598 <roundf+0x20>
 80145b4:	2a80      	cmp	r2, #128	; 0x80
 80145b6:	d1f1      	bne.n	801459c <roundf+0x24>
 80145b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80145bc:	4770      	bx	lr
 80145be:	bf00      	nop
 80145c0:	007fffff 	.word	0x007fffff

080145c4 <_init>:
 80145c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145c6:	bf00      	nop
 80145c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ca:	bc08      	pop	{r3}
 80145cc:	469e      	mov	lr, r3
 80145ce:	4770      	bx	lr

080145d0 <_fini>:
 80145d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d2:	bf00      	nop
 80145d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145d6:	bc08      	pop	{r3}
 80145d8:	469e      	mov	lr, r3
 80145da:	4770      	bx	lr
