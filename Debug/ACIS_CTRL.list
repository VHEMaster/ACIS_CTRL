
ACIS_CTRL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d560  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022a8  0800d740  0800d740  0001d740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9e8  0800f9e8  00021810  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9e8  0800f9e8  0001f9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9f0  0800f9f0  00021810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9f0  0800f9f0  0001f9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9f4  0800f9f4  0001f9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001810  20000000  0800f9f8  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a20  20001810  08011208  00021810  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007230  08011208  00027230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021810  2**0
                  CONTENTS, READONLY
 12 .debug_info   000295ab  00000000  00000000  00021840  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005767  00000000  00000000  0004adeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017f8  00000000  00000000  00050558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ca0  00000000  00000000  00051d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000271c9  00000000  00000000  000539f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017817  00000000  00000000  0007abb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec96e  00000000  00000000  000923d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017ed3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  0017edbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ebc2  00000000  00000000  001845cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001810 	.word	0x20001810
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d728 	.word	0x0800d728

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001814 	.word	0x20001814
 800021c:	0800d728 	.word	0x0800d728

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <acis_gui_task>:
  MenuUndefined = 0,
  MenuMain,
}eMenuItem_t;

static void acis_gui_task(void * argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
  eMenuItem_t eMenuItem = MenuMain;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	75fb      	strb	r3, [r7, #23]
  eMenuItem_t eOldMenu = MenuUndefined;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	75bb      	strb	r3, [r7, #22]
  uint32_t display_timeout = Delay_Tick;
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <acis_gui_task+0xc0>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t now;

  uint16_t rpm = 990;
 8000fee:	f240 33de 	movw	r3, #990	; 0x3de
 8000ff2:	81fb      	strh	r3, [r7, #14]


  while(1)
  {
    now = Delay_Tick;
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <acis_gui_task+0xc0>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	60bb      	str	r3, [r7, #8]
    if(eMenuItem != eOldMenu)
 8000ffa:	7dfa      	ldrb	r2, [r7, #23]
 8000ffc:	7dbb      	ldrb	r3, [r7, #22]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d102      	bne.n	8001008 <acis_gui_task+0x30>
    {
    }
    else
    {
      osDelay(1);
 8001002:	2001      	movs	r0, #1
 8001004:	f005 fb22 	bl	800664c <osDelay>
    }

    switch (eMenuItem)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d13d      	bne.n	800108a <acis_gui_task+0xb2>
    {
      case MenuMain :
      {

        if(DelayDiff(now, display_timeout) > 300000)
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	68b8      	ldr	r0, [r7, #8]
 8001012:	f000 fc43 	bl	800189c <DelayDiff>
 8001016:	4602      	mov	r2, r0
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <acis_gui_task+0xc4>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d938      	bls.n	8001090 <acis_gui_task+0xb8>
        {
          display_timeout = now;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	613b      	str	r3, [r7, #16]
          lcd_clear();
 8001022:	f000 fd69 	bl	8001af8 <lcd_clear>
          lcd_rect(0,0,128,64,1);
 8001026:	2301      	movs	r3, #1
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	2100      	movs	r1, #0
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fe4c 	bl	8001cce <lcd_rect>
          font_setFont(&rre_12x16);
 8001036:	481a      	ldr	r0, [pc, #104]	; (80010a0 <acis_gui_task+0xc8>)
 8001038:	f007 fb08 	bl	800864c <font_setFont>
          font_printf(4,4,"RPM:   %5d",rpm++);
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	81fa      	strh	r2, [r7, #14]
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <acis_gui_task+0xcc>)
 8001044:	2104      	movs	r1, #4
 8001046:	2004      	movs	r0, #4
 8001048:	f008 fd22 	bl	8009a90 <font_printf>
          font_printf(4,4+font_getHeight(),"Ign:       %3dd", 180);
 800104c:	f007 faa4 	bl	8008598 <font_getHeight>
 8001050:	4603      	mov	r3, r0
 8001052:	1d19      	adds	r1, r3, #4
 8001054:	23b4      	movs	r3, #180	; 0xb4
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <acis_gui_task+0xd0>)
 8001058:	2004      	movs	r0, #4
 800105a:	f008 fd19 	bl	8009a90 <font_printf>
          font_printf(4,4+font_getHeight()*2,"Load:    %3d%%", 100);
 800105e:	f007 fa9b 	bl	8008598 <font_getHeight>
 8001062:	4603      	mov	r3, r0
 8001064:	3302      	adds	r3, #2
 8001066:	0059      	lsls	r1, r3, #1
 8001068:	2364      	movs	r3, #100	; 0x64
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <acis_gui_task+0xd4>)
 800106c:	2004      	movs	r0, #4
 800106e:	f008 fd0f 	bl	8009a90 <font_printf>
          font_setFont(&rre_5x8);
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <acis_gui_task+0xd8>)
 8001074:	f007 faea 	bl	800864c <font_setFont>
          font_printf(4,53,"Fuel type: %s", "fuel 1");
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <acis_gui_task+0xdc>)
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <acis_gui_task+0xe0>)
 800107c:	2135      	movs	r1, #53	; 0x35
 800107e:	2004      	movs	r0, #4
 8001080:	f008 fd06 	bl	8009a90 <font_printf>
          lcd_update();
 8001084:	f000 fcac 	bl	80019e0 <lcd_update>
        }

        break;
 8001088:	e002      	b.n	8001090 <acis_gui_task+0xb8>
      }
      default :
        eMenuItem = MenuMain;
 800108a:	2301      	movs	r3, #1
 800108c:	75fb      	strb	r3, [r7, #23]
        break;
 800108e:	e000      	b.n	8001092 <acis_gui_task+0xba>
        break;
 8001090:	bf00      	nop
    }

    eOldMenu = eMenuItem;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	75bb      	strb	r3, [r7, #22]
    now = Delay_Tick;
 8001096:	e7ad      	b.n	8000ff4 <acis_gui_task+0x1c>
 8001098:	40000c00 	.word	0x40000c00
 800109c:	000493e0 	.word	0x000493e0
 80010a0:	20001600 	.word	0x20001600
 80010a4:	0800d74c 	.word	0x0800d74c
 80010a8:	0800d758 	.word	0x0800d758
 80010ac:	0800d768 	.word	0x0800d768
 80010b0:	20001610 	.word	0x20001610
 80010b4:	0800d778 	.word	0x0800d778
 80010b8:	0800d780 	.word	0x0800d780

080010bc <acis_main_task>:
  }
}

void acis_main_task(void * argument)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  tGuiHandler = osThreadNew(acis_gui_task, NULL, &cTaskAttributes);
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <acis_main_task+0x20>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <acis_main_task+0x24>)
 80010ca:	f005 fa67 	bl	800659c <osThreadNew>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <acis_main_task+0x28>)
 80010d2:	601a      	str	r2, [r3, #0]
  while(1)
  {
    osDelay(100);
 80010d4:	2064      	movs	r0, #100	; 0x64
 80010d6:	f005 fab9 	bl	800664c <osDelay>
 80010da:	e7fb      	b.n	80010d4 <acis_main_task+0x18>
 80010dc:	0800d7e8 	.word	0x0800d7e8
 80010e0:	08000fd9 	.word	0x08000fd9
 80010e4:	20006a30 	.word	0x20006a30

080010e8 <acis_parse_command>:
  }

}

void acis_parse_command(eTransChannels xChaSrc, uint8_t * msgBuf, uint32_t length)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	73fb      	strb	r3, [r7, #15]

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <controls_irq>:
static uint32_t sw_display_ftime = 0;
static uint8_t sw_display_delay = 0;


void controls_irq(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  //Fuel1
  if(ISSWITCH(SW_CTRL(FUEL1)))
 8001108:	4b87      	ldr	r3, [pc, #540]	; (8001328 <controls_irq+0x224>)
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d11d      	bne.n	8001150 <controls_irq+0x4c>
  {
    if(sw_fuel1_delay > SW_PRESS_DELAY)
 8001114:	4b85      	ldr	r3, [pc, #532]	; (800132c <controls_irq+0x228>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b32      	cmp	r3, #50	; 0x32
 800111a:	d912      	bls.n	8001142 <controls_irq+0x3e>
    {
      if(sw_fuel1_ftime == 0) sw_fuel1_ftime = TIM_CNT;
 800111c:	4b84      	ldr	r3, [pc, #528]	; (8001330 <controls_irq+0x22c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <controls_irq+0x28>
 8001124:	4b83      	ldr	r3, [pc, #524]	; (8001334 <controls_irq+0x230>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a81      	ldr	r2, [pc, #516]	; (8001330 <controls_irq+0x22c>)
 800112a:	6013      	str	r3, [r2, #0]
      SW_FUEL1_TIME = TIM_CNT-sw_fuel1_ftime;
 800112c:	4b81      	ldr	r3, [pc, #516]	; (8001334 <controls_irq+0x230>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b7f      	ldr	r3, [pc, #508]	; (8001330 <controls_irq+0x22c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4a80      	ldr	r2, [pc, #512]	; (8001338 <controls_irq+0x234>)
 8001138:	6013      	str	r3, [r2, #0]
      SW_FUEL1 = 1;
 800113a:	4b80      	ldr	r3, [pc, #512]	; (800133c <controls_irq+0x238>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e010      	b.n	8001164 <controls_irq+0x60>
    } else sw_fuel1_delay+=TIM_STEP;
 8001142:	4b7a      	ldr	r3, [pc, #488]	; (800132c <controls_irq+0x228>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b78      	ldr	r3, [pc, #480]	; (800132c <controls_irq+0x228>)
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e009      	b.n	8001164 <controls_irq+0x60>
  } else SW_FUEL1 = sw_fuel1_delay = sw_fuel1_ftime = 0;
 8001150:	4b77      	ldr	r3, [pc, #476]	; (8001330 <controls_irq+0x22c>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	4b75      	ldr	r3, [pc, #468]	; (800132c <controls_irq+0x228>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <controls_irq+0x228>)
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	4b76      	ldr	r3, [pc, #472]	; (800133c <controls_irq+0x238>)
 8001162:	701a      	strb	r2, [r3, #0]

  //Fuel2
  if(ISSWITCH(SW_CTRL(FUEL2)))
 8001164:	4b70      	ldr	r3, [pc, #448]	; (8001328 <controls_irq+0x224>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116c:	2b00      	cmp	r3, #0
 800116e:	d11d      	bne.n	80011ac <controls_irq+0xa8>
  {
    if(sw_fuel2_delay > SW_PRESS_DELAY)
 8001170:	4b73      	ldr	r3, [pc, #460]	; (8001340 <controls_irq+0x23c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b32      	cmp	r3, #50	; 0x32
 8001176:	d912      	bls.n	800119e <controls_irq+0x9a>
    {
      if(sw_fuel2_ftime == 0) sw_fuel2_ftime = TIM_CNT;
 8001178:	4b72      	ldr	r3, [pc, #456]	; (8001344 <controls_irq+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <controls_irq+0x84>
 8001180:	4b6c      	ldr	r3, [pc, #432]	; (8001334 <controls_irq+0x230>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a6f      	ldr	r2, [pc, #444]	; (8001344 <controls_irq+0x240>)
 8001186:	6013      	str	r3, [r2, #0]
      SW_FUEL2_TIME = TIM_CNT-sw_fuel2_ftime;
 8001188:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <controls_irq+0x230>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <controls_irq+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a6d      	ldr	r2, [pc, #436]	; (8001348 <controls_irq+0x244>)
 8001194:	6013      	str	r3, [r2, #0]
      SW_FUEL2 = 1;
 8001196:	4b6d      	ldr	r3, [pc, #436]	; (800134c <controls_irq+0x248>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e010      	b.n	80011c0 <controls_irq+0xbc>
    } else sw_fuel2_delay+=TIM_STEP;
 800119e:	4b68      	ldr	r3, [pc, #416]	; (8001340 <controls_irq+0x23c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b66      	ldr	r3, [pc, #408]	; (8001340 <controls_irq+0x23c>)
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e009      	b.n	80011c0 <controls_irq+0xbc>
  } else SW_FUEL2 = sw_fuel2_delay = sw_fuel2_ftime = 0;
 80011ac:	4b65      	ldr	r3, [pc, #404]	; (8001344 <controls_irq+0x240>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <controls_irq+0x23c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	4b61      	ldr	r3, [pc, #388]	; (8001340 <controls_irq+0x23c>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b63      	ldr	r3, [pc, #396]	; (800134c <controls_irq+0x248>)
 80011be:	701a      	strb	r2, [r3, #0]

  //Display
  if(ISSWITCH(SW_CTRL(DISPLAY)))
 80011c0:	4b59      	ldr	r3, [pc, #356]	; (8001328 <controls_irq+0x224>)
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d11d      	bne.n	8001208 <controls_irq+0x104>
  {
    if(sw_display_delay > SW_PRESS_DELAY)
 80011cc:	4b60      	ldr	r3, [pc, #384]	; (8001350 <controls_irq+0x24c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b32      	cmp	r3, #50	; 0x32
 80011d2:	d912      	bls.n	80011fa <controls_irq+0xf6>
    {
      if(sw_display_ftime == 0) sw_display_ftime = TIM_CNT;
 80011d4:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <controls_irq+0x250>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <controls_irq+0xe0>
 80011dc:	4b55      	ldr	r3, [pc, #340]	; (8001334 <controls_irq+0x230>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a5c      	ldr	r2, [pc, #368]	; (8001354 <controls_irq+0x250>)
 80011e2:	6013      	str	r3, [r2, #0]
      SW_DISPLAY_TIME = TIM_CNT-sw_display_ftime;
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <controls_irq+0x230>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <controls_irq+0x250>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4a5a      	ldr	r2, [pc, #360]	; (8001358 <controls_irq+0x254>)
 80011f0:	6013      	str	r3, [r2, #0]
      SW_DISPLAY = 1;
 80011f2:	4b5a      	ldr	r3, [pc, #360]	; (800135c <controls_irq+0x258>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e010      	b.n	800121c <controls_irq+0x118>
    } else sw_display_delay+=TIM_STEP;
 80011fa:	4b55      	ldr	r3, [pc, #340]	; (8001350 <controls_irq+0x24c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b53      	ldr	r3, [pc, #332]	; (8001350 <controls_irq+0x24c>)
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e009      	b.n	800121c <controls_irq+0x118>
  } else SW_DISPLAY = sw_display_delay = sw_display_ftime = 0;
 8001208:	4b52      	ldr	r3, [pc, #328]	; (8001354 <controls_irq+0x250>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	4b50      	ldr	r3, [pc, #320]	; (8001350 <controls_irq+0x24c>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	4b4e      	ldr	r3, [pc, #312]	; (8001350 <controls_irq+0x24c>)
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <controls_irq+0x258>)
 800121a:	701a      	strb	r2, [r3, #0]

  if(SW_DISPLAY)
 800121c:	4b4f      	ldr	r3, [pc, #316]	; (800135c <controls_irq+0x258>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 81ea 	beq.w	80015fc <controls_irq+0x4f8>
  {
    //UP
    if(ISPRESS(BUT_CTRL(UP)))
 8001228:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <controls_irq+0x25c>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d034      	beq.n	800129e <controls_irq+0x19a>
    {
      if(but_up_delay > BUT_PRESS_DELAY)
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <controls_irq+0x260>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b14      	cmp	r3, #20
 800123a:	d929      	bls.n	8001290 <controls_irq+0x18c>
      {
        if(but_up_ftime == 0) but_up_ftime = TIM_CNT;
 800123c:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <controls_irq+0x264>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <controls_irq+0x148>
 8001244:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <controls_irq+0x230>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a47      	ldr	r2, [pc, #284]	; (8001368 <controls_irq+0x264>)
 800124a:	6013      	str	r3, [r2, #0]
        BUT_UP_TIME = TIM_CNT-but_up_ftime;
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <controls_irq+0x230>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <controls_irq+0x264>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	4a45      	ldr	r2, [pc, #276]	; (800136c <controls_irq+0x268>)
 8001258:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <controls_irq+0x26c>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d111      	bne.n	8001288 <controls_irq+0x184>
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <controls_irq+0x270>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <controls_irq+0x184>
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <controls_irq+0x274>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d107      	bne.n	8001288 <controls_irq+0x184>
 8001278:	4b40      	ldr	r3, [pc, #256]	; (800137c <controls_irq+0x278>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <controls_irq+0x184>
          BUT_UP = 1;
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <controls_irq+0x27c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
        BUT_UP_PRESS = 1;
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <controls_irq+0x274>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e010      	b.n	80012b2 <controls_irq+0x1ae>
      } else but_up_delay+=TIM_STEP;
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <controls_irq+0x260>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <controls_irq+0x260>)
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e009      	b.n	80012b2 <controls_irq+0x1ae>
    } else BUT_UP_PRESS = but_up_delay = but_up_ftime = 0;
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <controls_irq+0x264>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <controls_irq+0x260>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <controls_irq+0x260>)
 80012ac:	781a      	ldrb	r2, [r3, #0]
 80012ae:	4b32      	ldr	r3, [pc, #200]	; (8001378 <controls_irq+0x274>)
 80012b0:	701a      	strb	r2, [r3, #0]

    //DOWN
    if(ISPRESS(BUT_CTRL(DOWN)))
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <controls_irq+0x25c>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06a      	beq.n	8001394 <controls_irq+0x290>
    {
      if(but_down_delay > BUT_PRESS_DELAY)
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <controls_irq+0x280>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b14      	cmp	r3, #20
 80012c4:	d929      	bls.n	800131a <controls_irq+0x216>
      {
        if(but_down_ftime == 0) but_down_ftime = TIM_CNT;
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <controls_irq+0x284>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <controls_irq+0x1d2>
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <controls_irq+0x230>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <controls_irq+0x284>)
 80012d4:	6013      	str	r3, [r2, #0]
        BUT_DOWN_TIME = TIM_CNT-but_down_ftime;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <controls_irq+0x230>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <controls_irq+0x284>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4a2a      	ldr	r2, [pc, #168]	; (800138c <controls_irq+0x288>)
 80012e2:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <controls_irq+0x26c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d111      	bne.n	8001312 <controls_irq+0x20e>
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <controls_irq+0x270>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10c      	bne.n	8001312 <controls_irq+0x20e>
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <controls_irq+0x274>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d107      	bne.n	8001312 <controls_irq+0x20e>
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <controls_irq+0x278>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <controls_irq+0x20e>
          BUT_DOWN = 1;
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <controls_irq+0x28c>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
        BUT_DOWN_PRESS = 1;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <controls_irq+0x278>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e046      	b.n	80013a8 <controls_irq+0x2a4>
      } else but_down_delay+=TIM_STEP;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <controls_irq+0x280>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <controls_irq+0x280>)
 8001324:	701a      	strb	r2, [r3, #0]
 8001326:	e03f      	b.n	80013a8 <controls_irq+0x2a4>
 8001328:	40020800 	.word	0x40020800
 800132c:	20001880 	.word	0x20001880
 8001330:	2000187c 	.word	0x2000187c
 8001334:	2000182c 	.word	0x2000182c
 8001338:	20001878 	.word	0x20001878
 800133c:	20001874 	.word	0x20001874
 8001340:	2000188c 	.word	0x2000188c
 8001344:	20001888 	.word	0x20001888
 8001348:	20001884 	.word	0x20001884
 800134c:	20001881 	.word	0x20001881
 8001350:	20001898 	.word	0x20001898
 8001354:	20001894 	.word	0x20001894
 8001358:	20001890 	.word	0x20001890
 800135c:	2000188d 	.word	0x2000188d
 8001360:	40020400 	.word	0x40020400
 8001364:	20001858 	.word	0x20001858
 8001368:	20001864 	.word	0x20001864
 800136c:	20001840 	.word	0x20001840
 8001370:	20001830 	.word	0x20001830
 8001374:	20001831 	.word	0x20001831
 8001378:	20001832 	.word	0x20001832
 800137c:	20001833 	.word	0x20001833
 8001380:	20001852 	.word	0x20001852
 8001384:	20001859 	.word	0x20001859
 8001388:	20001868 	.word	0x20001868
 800138c:	20001844 	.word	0x20001844
 8001390:	20001853 	.word	0x20001853
    } else BUT_DOWN_PRESS = but_down_delay = but_down_ftime = 0;
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <controls_irq+0x488>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <controls_irq+0x48c>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <controls_irq+0x48c>)
 80013a2:	781a      	ldrb	r2, [r3, #0]
 80013a4:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <controls_irq+0x490>)
 80013a6:	701a      	strb	r2, [r3, #0]

    //LEFT
    if(ISPRESS(BUT_CTRL(LEFT)))
 80013a8:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <controls_irq+0x494>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d034      	beq.n	800141e <controls_irq+0x31a>
    {
      if(but_left_delay > BUT_PRESS_DELAY)
 80013b4:	4b79      	ldr	r3, [pc, #484]	; (800159c <controls_irq+0x498>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b14      	cmp	r3, #20
 80013ba:	d929      	bls.n	8001410 <controls_irq+0x30c>
      {
        if(but_left_ftime == 0) but_left_ftime = TIM_CNT;
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <controls_irq+0x49c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d103      	bne.n	80013cc <controls_irq+0x2c8>
 80013c4:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <controls_irq+0x4a0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <controls_irq+0x49c>)
 80013ca:	6013      	str	r3, [r2, #0]
        BUT_LEFT_TIME = TIM_CNT-but_left_ftime;
 80013cc:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <controls_irq+0x4a0>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <controls_irq+0x49c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	4a74      	ldr	r2, [pc, #464]	; (80015a8 <controls_irq+0x4a4>)
 80013d8:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 80013da:	4b74      	ldr	r3, [pc, #464]	; (80015ac <controls_irq+0x4a8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <controls_irq+0x304>
 80013e4:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <controls_irq+0x4ac>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <controls_irq+0x304>
 80013ee:	4b71      	ldr	r3, [pc, #452]	; (80015b4 <controls_irq+0x4b0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d107      	bne.n	8001408 <controls_irq+0x304>
 80013f8:	4b66      	ldr	r3, [pc, #408]	; (8001594 <controls_irq+0x490>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <controls_irq+0x304>
          BUT_LEFT = 1;
 8001402:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <controls_irq+0x4b4>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
        BUT_LEFT_PRESS = 1;
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <controls_irq+0x4a8>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e010      	b.n	8001432 <controls_irq+0x32e>
      } else but_left_delay+=TIM_STEP;
 8001410:	4b62      	ldr	r3, [pc, #392]	; (800159c <controls_irq+0x498>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b60      	ldr	r3, [pc, #384]	; (800159c <controls_irq+0x498>)
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	e009      	b.n	8001432 <controls_irq+0x32e>
    } else BUT_LEFT_PRESS = but_left_delay = but_left_ftime = 0;
 800141e:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <controls_irq+0x49c>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	4b5d      	ldr	r3, [pc, #372]	; (800159c <controls_irq+0x498>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	4b5c      	ldr	r3, [pc, #368]	; (800159c <controls_irq+0x498>)
 800142c:	781a      	ldrb	r2, [r3, #0]
 800142e:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <controls_irq+0x4a8>)
 8001430:	701a      	strb	r2, [r3, #0]

    //RIGHT
    if(ISPRESS(BUT_CTRL(RIGHT)))
 8001432:	4b59      	ldr	r3, [pc, #356]	; (8001598 <controls_irq+0x494>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d034      	beq.n	80014a8 <controls_irq+0x3a4>
    {
      if(but_right_delay > BUT_PRESS_DELAY)
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <controls_irq+0x4b8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b14      	cmp	r3, #20
 8001444:	d929      	bls.n	800149a <controls_irq+0x396>
      {
        if(but_right_ftime == 0) but_right_ftime = TIM_CNT;
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <controls_irq+0x4bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d103      	bne.n	8001456 <controls_irq+0x352>
 800144e:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <controls_irq+0x4a0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <controls_irq+0x4bc>)
 8001454:	6013      	str	r3, [r2, #0]
        BUT_RIGHT_TIME = TIM_CNT-but_right_ftime;
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <controls_irq+0x4a0>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <controls_irq+0x4bc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <controls_irq+0x4c0>)
 8001462:	6013      	str	r3, [r2, #0]
        if(BUT_LEFT_PRESS == 0 && BUT_RIGHT_PRESS == 0 && BUT_UP_PRESS == 0 && BUT_DOWN_PRESS == 0)
 8001464:	4b51      	ldr	r3, [pc, #324]	; (80015ac <controls_irq+0x4a8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d111      	bne.n	8001492 <controls_irq+0x38e>
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <controls_irq+0x4ac>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10c      	bne.n	8001492 <controls_irq+0x38e>
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <controls_irq+0x4b0>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d107      	bne.n	8001492 <controls_irq+0x38e>
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <controls_irq+0x490>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <controls_irq+0x38e>
          BUT_RIGHT = 1;
 800148c:	4b4e      	ldr	r3, [pc, #312]	; (80015c8 <controls_irq+0x4c4>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
        BUT_RIGHT_PRESS = 1;
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <controls_irq+0x4ac>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e010      	b.n	80014bc <controls_irq+0x3b8>
      } else but_right_delay+=TIM_STEP;
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <controls_irq+0x4b8>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <controls_irq+0x4b8>)
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e009      	b.n	80014bc <controls_irq+0x3b8>
    } else BUT_RIGHT_PRESS = but_right_delay = but_right_ftime = 0;
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <controls_irq+0x4bc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <controls_irq+0x4b8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	4b41      	ldr	r3, [pc, #260]	; (80015bc <controls_irq+0x4b8>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <controls_irq+0x4ac>)
 80014ba:	701a      	strb	r2, [r3, #0]

    //CANCEL
    if(ISPRESS(BUT_CTRL(CANCEL)))
 80014bc:	4b43      	ldr	r3, [pc, #268]	; (80015cc <controls_irq+0x4c8>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <controls_irq+0x406>
    {
      if(but_cancel_delay > BUT_PRESS_DELAY)
 80014c8:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <controls_irq+0x4cc>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b14      	cmp	r3, #20
 80014ce:	d915      	bls.n	80014fc <controls_irq+0x3f8>
      {
        if(but_cancel_ftime == 0) but_cancel_ftime = TIM_CNT;
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <controls_irq+0x4d0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d103      	bne.n	80014e0 <controls_irq+0x3dc>
 80014d8:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <controls_irq+0x4a0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a3d      	ldr	r2, [pc, #244]	; (80015d4 <controls_irq+0x4d0>)
 80014de:	6013      	str	r3, [r2, #0]
        BUT_CANCEL_TIME = TIM_CNT-but_cancel_ftime;
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <controls_irq+0x4a0>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <controls_irq+0x4d0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	4a3b      	ldr	r2, [pc, #236]	; (80015d8 <controls_irq+0x4d4>)
 80014ec:	6013      	str	r3, [r2, #0]
        BUT_CANCEL = 1;
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <controls_irq+0x4d8>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
        BUT_CANCEL_PRESS = 1;
 80014f4:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <controls_irq+0x4dc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	e010      	b.n	800151e <controls_irq+0x41a>
      } else but_cancel_delay+=TIM_STEP;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <controls_irq+0x4cc>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <controls_irq+0x4cc>)
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	e009      	b.n	800151e <controls_irq+0x41a>
    } else BUT_CANCEL_PRESS = but_cancel_delay = but_cancel_ftime = 0;
 800150a:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <controls_irq+0x4d0>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <controls_irq+0x4cc>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <controls_irq+0x4cc>)
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <controls_irq+0x4dc>)
 800151c:	701a      	strb	r2, [r3, #0]

    //ENTER
    if(ISPRESS(BUT_CTRL(ENTER)))
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <controls_irq+0x4e0>)
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d020      	beq.n	800156c <controls_irq+0x468>
    {
      if(but_enter_delay > BUT_PRESS_DELAY)
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <controls_irq+0x4e4>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b14      	cmp	r3, #20
 8001530:	d915      	bls.n	800155e <controls_irq+0x45a>
      {
        if(but_enter_ftime == 0) but_enter_ftime = TIM_CNT;
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <controls_irq+0x4e8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <controls_irq+0x43e>
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <controls_irq+0x4a0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <controls_irq+0x4e8>)
 8001540:	6013      	str	r3, [r2, #0]
        BUT_ENTER_TIME = TIM_CNT-but_enter_ftime;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <controls_irq+0x4a0>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <controls_irq+0x4e8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <controls_irq+0x4ec>)
 800154e:	6013      	str	r3, [r2, #0]
        BUT_ENTER = 1;
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <controls_irq+0x4f0>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
        BUT_ENTER_PRESS = 1;
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <controls_irq+0x4f4>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	e010      	b.n	8001580 <controls_irq+0x47c>
      } else but_enter_delay+=TIM_STEP;
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <controls_irq+0x4e4>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <controls_irq+0x4e4>)
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e009      	b.n	8001580 <controls_irq+0x47c>
    } else BUT_ENTER_PRESS = but_enter_delay = but_enter_ftime = 0;
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <controls_irq+0x4e8>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <controls_irq+0x4e4>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <controls_irq+0x4e4>)
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <controls_irq+0x4f4>)
 800157e:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 255;
 8001580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001584:	22ff      	movs	r2, #255	; 0xff
 8001586:	63da      	str	r2, [r3, #60]	; 0x3c
 8001588:	e060      	b.n	800164c <controls_irq+0x548>
 800158a:	bf00      	nop
 800158c:	20001868 	.word	0x20001868
 8001590:	20001859 	.word	0x20001859
 8001594:	20001833 	.word	0x20001833
 8001598:	40020400 	.word	0x40020400
 800159c:	20001856 	.word	0x20001856
 80015a0:	2000185c 	.word	0x2000185c
 80015a4:	2000182c 	.word	0x2000182c
 80015a8:	20001838 	.word	0x20001838
 80015ac:	20001830 	.word	0x20001830
 80015b0:	20001831 	.word	0x20001831
 80015b4:	20001832 	.word	0x20001832
 80015b8:	20001850 	.word	0x20001850
 80015bc:	20001857 	.word	0x20001857
 80015c0:	20001860 	.word	0x20001860
 80015c4:	2000183c 	.word	0x2000183c
 80015c8:	20001851 	.word	0x20001851
 80015cc:	40020800 	.word	0x40020800
 80015d0:	2000185b 	.word	0x2000185b
 80015d4:	20001870 	.word	0x20001870
 80015d8:	2000184c 	.word	0x2000184c
 80015dc:	20001855 	.word	0x20001855
 80015e0:	20001835 	.word	0x20001835
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	2000185a 	.word	0x2000185a
 80015ec:	2000186c 	.word	0x2000186c
 80015f0:	20001848 	.word	0x20001848
 80015f4:	20001854 	.word	0x20001854
 80015f8:	20001834 	.word	0x20001834
  }
  else
  {
    BUT_CANCEL = 0;
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <controls_irq+0x5bc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
    BUT_ENTER = 0;
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <controls_irq+0x5c0>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
    BUT_LEFT = 0;
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <controls_irq+0x5c4>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT = 0;
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <controls_irq+0x5c8>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
    BUT_UP = 0;
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <controls_irq+0x5cc>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    BUT_DOWN = 0;
 800161a:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <controls_irq+0x5d0>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    BUT_CANCEL_PRESS = 0;
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <controls_irq+0x5d4>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
    BUT_ENTER_PRESS = 0;
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <controls_irq+0x5d8>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    BUT_LEFT_PRESS = 0;
 800162c:	4b2c      	ldr	r3, [pc, #176]	; (80016e0 <controls_irq+0x5dc>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    BUT_RIGHT_PRESS = 0;
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <controls_irq+0x5e0>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    BUT_UP_PRESS = 0;
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <controls_irq+0x5e4>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    BUT_DOWN_PRESS = 0;
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <controls_irq+0x5e8>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
    TIM2->CCR3 = 0;
 8001644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001648:	2200      	movs	r2, #0
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, !BUT_LEFT_PRESS);
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <controls_irq+0x5dc>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf0c      	ite	eq
 8001656:	2301      	moveq	r3, #1
 8001658:	2300      	movne	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001662:	4823      	ldr	r0, [pc, #140]	; (80016f0 <controls_irq+0x5ec>)
 8001664:	f003 fa04 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, !BUT_RIGHT_PRESS);
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <controls_irq+0x5e0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf0c      	ite	eq
 8001672:	2301      	moveq	r3, #1
 8001674:	2300      	movne	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <controls_irq+0x5ec>)
 8001680:	f003 f9f6 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, !BUT_UP_PRESS);
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <controls_irq+0x5e4>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <controls_irq+0x5ec>)
 800169c:	f003 f9e8 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, !BUT_DOWN_PRESS);
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <controls_irq+0x5e8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf0c      	ite	eq
 80016aa:	2301      	moveq	r3, #1
 80016ac:	2300      	movne	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <controls_irq+0x5ec>)
 80016b8:	f003 f9da 	bl	8004a70 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20001855 	.word	0x20001855
 80016c4:	20001854 	.word	0x20001854
 80016c8:	20001850 	.word	0x20001850
 80016cc:	20001851 	.word	0x20001851
 80016d0:	20001852 	.word	0x20001852
 80016d4:	20001853 	.word	0x20001853
 80016d8:	20001835 	.word	0x20001835
 80016dc:	20001834 	.word	0x20001834
 80016e0:	20001830 	.word	0x20001830
 80016e4:	20001831 	.word	0x20001831
 80016e8:	20001832 	.word	0x20001832
 80016ec:	20001833 	.word	0x20001833
 80016f0:	40020400 	.word	0x40020400

080016f4 <CRC16_RegisterHardware>:
  .cb_size = 0
};


void CRC16_RegisterHardware(CRC_HandleTypeDef * hcrc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(mutexCrc == NULL)
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <CRC16_RegisterHardware+0x2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <CRC16_RegisterHardware+0x1c>
    mutexCrc = osMutexNew(&mutexAttrs);
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <CRC16_RegisterHardware+0x30>)
 8001706:	f004 ffbb 	bl	8006680 <osMutexNew>
 800170a:	4602      	mov	r2, r0
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <CRC16_RegisterHardware+0x2c>)
 800170e:	601a      	str	r2, [r3, #0]
  handle_crc = hcrc;
 8001710:	4a05      	ldr	r2, [pc, #20]	; (8001728 <CRC16_RegisterHardware+0x34>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200018a0 	.word	0x200018a0
 8001724:	0800d80c 	.word	0x0800d80c
 8001728:	2000189c 	.word	0x2000189c

0800172c <CRC8_Generate>:
  }
  return result;
}

inline uint8_t CRC8_Generate(uint8_t * input, uint32_t size)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint16_t result = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	81fb      	strh	r3, [r7, #14]
  osStatus_t status;
  if(mutexCrc == NULL)
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <CRC8_Generate+0x74>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <CRC8_Generate+0x22>
    mutexCrc = osMutexNew(&mutexAttrs);
 8001742:	4818      	ldr	r0, [pc, #96]	; (80017a4 <CRC8_Generate+0x78>)
 8001744:	f004 ff9c 	bl	8006680 <osMutexNew>
 8001748:	4602      	mov	r2, r0
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <CRC8_Generate+0x74>)
 800174c:	601a      	str	r2, [r3, #0]
  if(handle_crc != NULL)
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <CRC8_Generate+0x7c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d017      	beq.n	8001786 <CRC8_Generate+0x5a>
  {
    status = osMutexAcquire(mutexCrc, 0);
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <CRC8_Generate+0x74>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f004 ffd1 	bl	8006704 <osMutexAcquire>
 8001762:	60b8      	str	r0, [r7, #8]
    if(status == osOK)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <CRC8_Generate+0x5a>
    {
      result = HAL_CRC_Calculate(handle_crc, (uint32_t*)input, size);
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <CRC8_Generate+0x7c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 feb8 	bl	80044e8 <HAL_CRC_Calculate>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
      osMutexRelease(mutexCrc);
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <CRC8_Generate+0x74>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f004 ffef 	bl	8006764 <osMutexRelease>
    }
  }
  return (result & 0xFF) ^ (result >> 8);
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	b25a      	sxtb	r2, r3
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b29b      	uxth	r3, r3
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4053      	eors	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2db      	uxtb	r3, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200018a0 	.word	0x200018a0
 80017a4:	0800d80c 	.word	0x0800d80c
 80017a8:	2000189c 	.word	0x2000189c

080017ac <DelayInit>:

volatile uint32_t DelStart[COUNTERS];
static volatile uint32_t prescaller = 0;

void DelayInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
  __DELAY_TIM_CLK_ENABLE();
 80017b2:	4b21      	ldr	r3, [pc, #132]	; (8001838 <DelayInit+0x8c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a20      	ldr	r2, [pc, #128]	; (8001838 <DelayInit+0x8c>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <DelayInit+0x8c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig;
    TIM_MasterConfigTypeDef sMasterConfig;

    htim_delay.Instance = DelayTimer;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <DelayInit+0x90>)
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <DelayInit+0x94>)
 80017ce:	601a      	str	r2, [r3, #0]
    prescaller = (HAL_RCC_GetPCLK1Freq() * 2 / 1000000);
 80017d0:	f003 fc14 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80017d4:	4603      	mov	r3, r0
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <DelayInit+0x98>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0c9b      	lsrs	r3, r3, #18
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <DelayInit+0x9c>)
 80017e2:	6013      	str	r3, [r2, #0]
    htim_delay.Init.Prescaler = 0;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <DelayInit+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
    htim_delay.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <DelayInit+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
    htim_delay.Init.Period = 0xFFFFFFFF;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <DelayInit+0x90>)
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295
 80017f6:	60da      	str	r2, [r3, #12]
    htim_delay.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <DelayInit+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim_delay);
 80017fe:	480f      	ldr	r0, [pc, #60]	; (800183c <DelayInit+0x90>)
 8001800:	f004 f878 	bl	80058f4 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim_delay, &sClockSourceConfig);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	480a      	ldr	r0, [pc, #40]	; (800183c <DelayInit+0x90>)
 8001812:	f004 f98f 	bl	8005b34 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim_delay, &sMasterConfig);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <DelayInit+0x90>)
 8001824:	f004 fa4e 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>

    HAL_TIM_Base_Start(&htim_delay);
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <DelayInit+0x90>)
 800182a:	f003 ff19 	bl	8005660 <HAL_TIM_Base_Start>

}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	200018a4 	.word	0x200018a4
 8001840:	40000c00 	.word	0x40000c00
 8001844:	431bde83 	.word	0x431bde83
 8001848:	200018e4 	.word	0x200018e4

0800184c <DelayUs>:
  uint32_t tickstart = Delay_Tick * 1000;
  while(DelayDiff(Delay_Tick * 1000, tickstart) < val) {}
}

inline void DelayUs(uint32_t val)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = Delay_Tick;
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <DelayUs+0x2c>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	60fb      	str	r3, [r7, #12]
  while(DelayDiff(Delay_Tick, tickstart) < val) {}
 800185a:	bf00      	nop
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <DelayUs+0x2c>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f81a 	bl	800189c <DelayDiff>
 8001868:	4602      	mov	r2, r0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4293      	cmp	r3, r2
 800186e:	d8f5      	bhi.n	800185c <DelayUs+0x10>
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40000c00 	.word	0x40000c00

0800187c <DelayMs>:
 
inline void DelayMs(uint32_t val)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  DelayUs(val * 1000);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ffdc 	bl	800184c <DelayUs>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <DelayDiff>:

inline uint32_t DelayDiff(uint32_t a, uint32_t b)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	if(a >= b)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d307      	bcc.n	80018be <DelayDiff+0x22>
		return (a - b) / prescaller;
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	1ad2      	subs	r2, r2, r3
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <DelayDiff+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	e007      	b.n	80018ce <DelayDiff+0x32>
	return ((0xFFFFFFFF - b) + a) / prescaller;
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <DelayDiff+0x40>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200018e4 	.word	0x200018e4

080018e0 <lcd_data>:
#include "cmsis_os.h"

uint8_t lcd_buffer[8][128];

static inline void lcd_data(uint8_t value)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2102      	movs	r1, #2
 80018fc:	4815      	ldr	r0, [pc, #84]	; (8001954 <lcd_data+0x74>)
 80018fe:	f003 f8b7 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2104      	movs	r1, #4
 8001906:	4814      	ldr	r0, [pc, #80]	; (8001958 <lcd_data+0x78>)
 8001908:	f003 f8b2 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	2102      	movs	r1, #2
 8001910:	4811      	ldr	r0, [pc, #68]	; (8001958 <lcd_data+0x78>)
 8001912:	f003 f8ad 	bl	8004a70 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <lcd_data+0x7c>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 800191c:	2002      	movs	r0, #2
 800191e:	f7ff ff95 	bl	800184c <DelayUs>
  taskENTER_CRITICAL();
 8001922:	f006 fbff 	bl	8008124 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	2102      	movs	r1, #2
 800192a:	480a      	ldr	r0, [pc, #40]	; (8001954 <lcd_data+0x74>)
 800192c:	f003 f8a0 	bl	8004a70 <HAL_GPIO_WritePin>
  DelayUs(2);
 8001930:	2002      	movs	r0, #2
 8001932:	f7ff ff8b 	bl	800184c <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2102      	movs	r1, #2
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <lcd_data+0x74>)
 800193c:	f003 f898 	bl	8004a70 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 8001940:	f006 fc16 	bl	8008170 <vPortExitCritical>
  DelayUs(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff ff81 	bl	800184c <DelayUs>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020000 	.word	0x40020000

08001960 <lcd_command>:

static inline void lcd_command(uint8_t value)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  uint32_t bsrr = value | ((value ^ 0xFF) << 16);
 800196a:	79fa      	ldrb	r2, [r7, #7]
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	43db      	mvns	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	041b      	lsls	r3, r3, #16
 8001974:	4313      	orrs	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2102      	movs	r1, #2
 800197c:	4815      	ldr	r0, [pc, #84]	; (80019d4 <lcd_command+0x74>)
 800197e:	f003 f877 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2104      	movs	r1, #4
 8001986:	4814      	ldr	r0, [pc, #80]	; (80019d8 <lcd_command+0x78>)
 8001988:	f003 f872 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2102      	movs	r1, #2
 8001990:	4811      	ldr	r0, [pc, #68]	; (80019d8 <lcd_command+0x78>)
 8001992:	f003 f86d 	bl	8004a70 <HAL_GPIO_WritePin>
  GPIOA->BSRR = bsrr;
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <lcd_command+0x7c>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6193      	str	r3, [r2, #24]
  DelayUs(2);
 800199c:	2002      	movs	r0, #2
 800199e:	f7ff ff55 	bl	800184c <DelayUs>
  taskENTER_CRITICAL();
 80019a2:	f006 fbbf 	bl	8008124 <vPortEnterCritical>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2102      	movs	r1, #2
 80019aa:	480a      	ldr	r0, [pc, #40]	; (80019d4 <lcd_command+0x74>)
 80019ac:	f003 f860 	bl	8004a70 <HAL_GPIO_WritePin>
  DelayUs(2);
 80019b0:	2002      	movs	r0, #2
 80019b2:	f7ff ff4b 	bl	800184c <DelayUs>
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2102      	movs	r1, #2
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <lcd_command+0x74>)
 80019bc:	f003 f858 	bl	8004a70 <HAL_GPIO_WritePin>
  taskEXIT_CRITICAL();
 80019c0:	f006 fbd6 	bl	8008170 <vPortExitCritical>
  DelayUs(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ff41 	bl	800184c <DelayUs>
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020000 	.word	0x40020000

080019e0 <lcd_update>:

inline void lcd_update(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0

  for(int j = 0; j < 8; j++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e050      	b.n	8001a8e <lcd_update+0xae>
  {
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2110      	movs	r1, #16
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <lcd_update+0xbc>)
 80019f2:	f003 f83d 	bl	8004a70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2101      	movs	r1, #1
 80019fa:	4829      	ldr	r0, [pc, #164]	; (8001aa0 <lcd_update+0xc0>)
 80019fc:	f003 f838 	bl	8004a70 <HAL_GPIO_WritePin>

    lcd_command(0x40);
 8001a00:	2040      	movs	r0, #64	; 0x40
 8001a02:	f7ff ffad 	bl	8001960 <lcd_command>
    lcd_command(0xB8 + j);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	3b48      	subs	r3, #72	; 0x48
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffa6 	bl	8001960 <lcd_command>

    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2110      	movs	r1, #16
 8001a18:	4820      	ldr	r0, [pc, #128]	; (8001a9c <lcd_update+0xbc>)
 8001a1a:	f003 f829 	bl	8004a70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	481f      	ldr	r0, [pc, #124]	; (8001aa0 <lcd_update+0xc0>)
 8001a24:	f003 f824 	bl	8004a70 <HAL_GPIO_WritePin>
    for(int i = 0; i < 64; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	e00c      	b.n	8001a48 <lcd_update+0x68>
    {
      lcd_data(lcd_buffer[j][i]);
 8001a2e:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <lcd_update+0xc4>)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	01db      	lsls	r3, r3, #7
 8001a34:	441a      	add	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff4f 	bl	80018e0 <lcd_data>
    for(int i = 0; i < 64; i++)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a4c:	ddef      	ble.n	8001a2e <lcd_update+0x4e>
    }
    HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2110      	movs	r1, #16
 8001a52:	4812      	ldr	r0, [pc, #72]	; (8001a9c <lcd_update+0xbc>)
 8001a54:	f003 f80c 	bl	8004a70 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <lcd_update+0xc0>)
 8001a5e:	f003 f807 	bl	8004a70 <HAL_GPIO_WritePin>
    for(int i = 64; i < 128; i++)
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	e00c      	b.n	8001a82 <lcd_update+0xa2>
    {
      lcd_data(lcd_buffer[j][i]);
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <lcd_update+0xc4>)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	01db      	lsls	r3, r3, #7
 8001a6e:	441a      	add	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff32 	bl	80018e0 <lcd_data>
    for(int i = 64; i < 128; i++)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b7f      	cmp	r3, #127	; 0x7f
 8001a86:	ddef      	ble.n	8001a68 <lcd_update+0x88>
  for(int j = 0; j < 8; j++)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b07      	cmp	r3, #7
 8001a92:	ddab      	ble.n	80019ec <lcd_update+0xc>
    }
  }
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	20006a34 	.word	0x20006a34

08001aa8 <lcd_reset>:

inline void lcd_reset(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2110      	movs	r1, #16
 8001ab0:	480f      	ldr	r0, [pc, #60]	; (8001af0 <lcd_reset+0x48>)
 8001ab2:	f002 ffdd 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2101      	movs	r1, #1
 8001aba:	480e      	ldr	r0, [pc, #56]	; (8001af4 <lcd_reset+0x4c>)
 8001abc:	f002 ffd8 	bl	8004a70 <HAL_GPIO_WritePin>
  lcd_command(0x3F); //Display ON
 8001ac0:	203f      	movs	r0, #63	; 0x3f
 8001ac2:	f7ff ff4d 	bl	8001960 <lcd_command>
  lcd_command(0x40); //Set Y address = 0
 8001ac6:	2040      	movs	r0, #64	; 0x40
 8001ac8:	f7ff ff4a 	bl	8001960 <lcd_command>
  lcd_command(0xB8); //Set X page = 0
 8001acc:	20b8      	movs	r0, #184	; 0xb8
 8001ace:	f7ff ff47 	bl	8001960 <lcd_command>
  lcd_command(0xC0); //Set Z scrolling = 0
 8001ad2:	20c0      	movs	r0, #192	; 0xc0
 8001ad4:	f7ff ff44 	bl	8001960 <lcd_command>
  HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2110      	movs	r1, #16
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <lcd_reset+0x48>)
 8001ade:	f002 ffc7 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <lcd_reset+0x4c>)
 8001ae8:	f002 ffc2 	bl	8004a70 <HAL_GPIO_WritePin>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40020800 	.word	0x40020800
 8001af4:	40020400 	.word	0x40020400

08001af8 <lcd_clear>:

inline void lcd_clear(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
  for(int i = 0; i < 8; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e013      	b.n	8001b2c <lcd_clear+0x34>
    for(int j = 0; j < 128; j++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	e00a      	b.n	8001b20 <lcd_clear+0x28>
      lcd_buffer[i][j] = 0;
 8001b0a:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <lcd_clear+0x48>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	01db      	lsls	r3, r3, #7
 8001b10:	441a      	add	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 128; j++)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2b7f      	cmp	r3, #127	; 0x7f
 8001b24:	ddf1      	ble.n	8001b0a <lcd_clear+0x12>
  for(int i = 0; i < 8; i++)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b07      	cmp	r3, #7
 8001b30:	dde8      	ble.n	8001b04 <lcd_clear+0xc>
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20006a34 	.word	0x20006a34

08001b44 <lcd_drawpoint>:

inline void lcd_drawpoint(uint8_t x, uint8_t y)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db1f      	blt.n	8001b9c <lcd_drawpoint+0x58>
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b60:	d81c      	bhi.n	8001b9c <lcd_drawpoint+0x58>
    lcd_buffer[y / 8][x] |= 1 << (y % 8);
 8001b62:	79bb      	ldrb	r3, [r7, #6]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	b2d8      	uxtb	r0, r3
 8001b68:	4602      	mov	r2, r0
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	490e      	ldr	r1, [pc, #56]	; (8001ba8 <lcd_drawpoint+0x64>)
 8001b6e:	01d2      	lsls	r2, r2, #7
 8001b70:	440a      	add	r2, r1
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25a      	sxtb	r2, r3
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b259      	sxtb	r1, r3
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	b2c8      	uxtb	r0, r1
 8001b90:	4905      	ldr	r1, [pc, #20]	; (8001ba8 <lcd_drawpoint+0x64>)
 8001b92:	01d2      	lsls	r2, r2, #7
 8001b94:	440a      	add	r2, r1
 8001b96:	4413      	add	r3, r2
 8001b98:	4602      	mov	r2, r0
 8001b9a:	701a      	strb	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20006a34 	.word	0x20006a34

08001bac <lcd_clearpoint>:

inline void lcd_clearpoint(uint8_t x, uint8_t y)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	71bb      	strb	r3, [r7, #6]
  if(x < 128 && y < 64)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db21      	blt.n	8001c08 <lcd_clearpoint+0x5c>
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc8:	d81e      	bhi.n	8001c08 <lcd_clearpoint+0x5c>
    lcd_buffer[y / 8][x] &= ~(1 << (y % 8));
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	b2d8      	uxtb	r0, r3
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	490f      	ldr	r1, [pc, #60]	; (8001c14 <lcd_clearpoint+0x68>)
 8001bd6:	01d2      	lsls	r2, r2, #7
 8001bd8:	440a      	add	r2, r1
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b25a      	sxtb	r2, r3
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b259      	sxtb	r1, r3
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	b2c8      	uxtb	r0, r1
 8001bfc:	4905      	ldr	r1, [pc, #20]	; (8001c14 <lcd_clearpoint+0x68>)
 8001bfe:	01d2      	lsls	r2, r2, #7
 8001c00:	440a      	add	r2, r1
 8001c02:	4413      	add	r3, r2
 8001c04:	4602      	mov	r2, r0
 8001c06:	701a      	strb	r2, [r3, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20006a34 	.word	0x20006a34

08001c18 <lcd_rect_solid>:


void lcd_rect_solid(int x, int y, int w, int h, int c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  if(c)
 8001c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d026      	beq.n	8001c7a <lcd_rect_solid+0x62>
  {
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c34:	e01c      	b.n	8001c70 <lcd_rect_solid+0x58>
    {
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	e00d      	b.n	8001c5c <lcd_rect_solid+0x44>
      {
          lcd_drawpoint(j,i);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff7a 	bl	8001b44 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	3301      	adds	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbed      	blt.n	8001c40 <lcd_rect_solid+0x28>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	3301      	adds	r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbde      	blt.n	8001c36 <lcd_rect_solid+0x1e>
      {
          lcd_clearpoint(j,i);
      }
    }
  }
}
 8001c78:	e025      	b.n	8001cc6 <lcd_rect_solid+0xae>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	e01c      	b.n	8001cbe <lcd_rect_solid+0xa6>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e00d      	b.n	8001caa <lcd_rect_solid+0x92>
          lcd_clearpoint(j,i);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff87 	bl	8001bac <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dbed      	blt.n	8001c8e <lcd_rect_solid+0x76>
    for(int i = y, ii = 0; ii < h; ii++, i++)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbde      	blt.n	8001c84 <lcd_rect_solid+0x6c>
}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	; 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <lcd_rect>:


void lcd_rect(int x, int y, int w, int h, int c)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b08c      	sub	sp, #48	; 0x30
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
  if(w > 0 && h > 0)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f340 809a 	ble.w	8001e18 <lcd_rect+0x14a>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f340 8096 	ble.w	8001e18 <lcd_rect+0x14a>
  {
    if(c)
 8001cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d049      	beq.n	8001d86 <lcd_rect+0xb8>
    {
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfa:	e01b      	b.n	8001d34 <lcd_rect+0x66>
      {
        lcd_drawpoint(x,i);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff1c 	bl	8001b44 <lcd_drawpoint>
        lcd_drawpoint(x+w-1,i);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff0e 	bl	8001b44 <lcd_drawpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	3301      	adds	r3, #1
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbdf      	blt.n	8001cfc <lcd_rect+0x2e>
      }
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	e01a      	b.n	8001d7c <lcd_rect+0xae>
      {
        lcd_drawpoint(j,y);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fef7 	bl	8001b44 <lcd_drawpoint>
        lcd_drawpoint(j,y+h-1);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	b2d8      	uxtb	r0, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7ff feea 	bl	8001b44 <lcd_drawpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	3301      	adds	r3, #1
 8001d74:	623b      	str	r3, [r7, #32]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7c:	6a3a      	ldr	r2, [r7, #32]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbe0      	blt.n	8001d46 <lcd_rect+0x78>
        lcd_clearpoint(j,y);
        lcd_clearpoint(j,y+h-1);
      }
    }
  }
}
 8001d84:	e048      	b.n	8001e18 <lcd_rect+0x14a>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	e01b      	b.n	8001dc8 <lcd_rect+0xfa>
        lcd_clearpoint(x,i);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff ff06 	bl	8001bac <lcd_clearpoint>
        lcd_clearpoint(x+w-1,i);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fef8 	bl	8001bac <lcd_clearpoint>
      for(int i = y, ii = 0; ii < h; ii++, i++)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbdf      	blt.n	8001d90 <lcd_rect+0xc2>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e01a      	b.n	8001e10 <lcd_rect+0x142>
        lcd_clearpoint(j,y);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fee1 	bl	8001bac <lcd_clearpoint>
        lcd_clearpoint(j,y+h-1);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	b2d8      	uxtb	r0, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7ff fed4 	bl	8001bac <lcd_clearpoint>
      for(int j = x, jj = 0; jj < w; jj++, j++)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3301      	adds	r3, #1
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbe0      	blt.n	8001dda <lcd_rect+0x10c>
}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <lcd_init>:
  DelayMs(3000);
  TIM2->CCR3 = 0;
}

void lcd_init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2104      	movs	r1, #4
 8001e28:	480f      	ldr	r0, [pc, #60]	; (8001e68 <lcd_init+0x48>)
 8001e2a:	f002 fe21 	bl	8004a70 <HAL_GPIO_WritePin>
  DelayUs(500);
 8001e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e32:	f7ff fd0b 	bl	800184c <DelayUs>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2104      	movs	r1, #4
 8001e3a:	480b      	ldr	r0, [pc, #44]	; (8001e68 <lcd_init+0x48>)
 8001e3c:	f002 fe18 	bl	8004a70 <HAL_GPIO_WritePin>
  DelayMs(2);
 8001e40:	2002      	movs	r0, #2
 8001e42:	f7ff fd1b 	bl	800187c <DelayMs>

  lcd_reset();
 8001e46:	f7ff fe2f 	bl	8001aa8 <lcd_reset>
  lcd_clear();
 8001e4a:	f7ff fe55 	bl	8001af8 <lcd_clear>
  lcd_update();
 8001e4e:	f7ff fdc7 	bl	80019e0 <lcd_update>

  font_init(lcd_rect_solid, 128, 64);
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <lcd_init+0x4c>)
 8001e58:	f006 fbb0 	bl	80085bc <font_init>
  font_setCR(0);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f006 fb8b 	bl	8008578 <font_setCR>


  //font_setFont(&rre_ubuntu_32); showFont("[rre_ubuntu_32]");

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	08001c19 	.word	0x08001c19

08001e70 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <SCB_EnableICache+0x3c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e88:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <SCB_EnableICache+0x3c>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <SCB_EnableICache+0x3c>)
 8001e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e96:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e9c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <SCB_EnableDCache+0x7c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ebe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <SCB_EnableDCache+0x7c>)
 8001ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0b5b      	lsrs	r3, r3, #13
 8001ece:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ed2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001edc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ee6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001eec:	490f      	ldr	r1, [pc, #60]	; (8001f2c <SCB_EnableDCache+0x7c>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1e5a      	subs	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ef      	bne.n	8001ede <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	60fa      	str	r2, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e5      	bne.n	8001ed4 <SCB_EnableDCache+0x24>
 8001f08:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <SCB_EnableDCache+0x7c>)
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <SCB_EnableDCache+0x7c>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	6153      	str	r3, [r2, #20]
 8001f18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f1c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM7_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    controls_irq();
 8001f40:	f7ff f8e0 	bl	8001104 <controls_irq>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200071a8 	.word	0x200071a8

08001f50 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  xDmaTxIrqHandler(huart);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f001 fb41 	bl	80035e0 <xDmaTxIrqHandler>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  xDmaErIrqHandler(huart);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f001 fb94 	bl	800369c <xDmaErIrqHandler>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <showlogo>:

static void showlogo(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  font_setFont(&rre_ubuntu_32);
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <showlogo+0x40>)
 8001f82:	f006 fb63 	bl	800864c <font_setFont>
  font_printStr(30,4,"ACIS");
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <showlogo+0x44>)
 8001f88:	2104      	movs	r1, #4
 8001f8a:	201e      	movs	r0, #30
 8001f8c:	f007 fda0 	bl	8009ad0 <font_printStr>
  font_setFont(&rre_arialb_16);
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <showlogo+0x48>)
 8001f92:	f006 fb5b 	bl	800864c <font_setFont>
  font_printStr(0,32,"Advanced Car");
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <showlogo+0x4c>)
 8001f98:	2120      	movs	r1, #32
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f007 fd98 	bl	8009ad0 <font_printStr>
  font_printStr(13,46,"Ignition System");
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <showlogo+0x50>)
 8001fa2:	212e      	movs	r1, #46	; 0x2e
 8001fa4:	200d      	movs	r0, #13
 8001fa6:	f007 fd93 	bl	8009ad0 <font_printStr>
  lcd_update();
 8001faa:	f7ff fd19 	bl	80019e0 <lcd_update>
  DelayMs(1000);
 8001fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fb2:	f7ff fc63 	bl	800187c <DelayMs>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20001630 	.word	0x20001630
 8001fc0:	0800d7c0 	.word	0x0800d7c0
 8001fc4:	20001620 	.word	0x20001620
 8001fc8:	0800d7c8 	.word	0x0800d7c8
 8001fcc:	0800d7d8 	.word	0x0800d7d8

08001fd0 <main>:

int main(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8001fd4:	f7ff ff4c 	bl	8001e70 <SCB_EnableICache>
  SCB_EnableDCache();
 8001fd8:	f7ff ff6a 	bl	8001eb0 <SCB_EnableDCache>

  HAL_Init();
 8001fdc:	f001 ff78 	bl	8003ed0 <HAL_Init>

  SystemClock_Config();
 8001fe0:	f000 f854 	bl	800208c <SystemClock_Config>

  MX_GPIO_Init();
 8001fe4:	f000 faf2 	bl	80025cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001fe8:	f000 faae 	bl	8002548 <MX_DMA_Init>
  MX_TIM2_Init();
 8001fec:	f000 f964 	bl	80022b8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001ff0:	f000 f90e 	bl	8002210 <MX_ADC1_Init>
  MX_TIM10_Init();
 8001ff4:	f000 f9f0 	bl	80023d8 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001ff8:	f000 fa46 	bl	8002488 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001ffc:	f000 fa74 	bl	80024e8 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8002000:	f000 f8da 	bl	80021b8 <MX_CRC_Init>
  MX_TIM7_Init();
 8002004:	f000 f9b2 	bl	800236c <MX_TIM7_Init>
  xFifosInit();
 8002008:	f001 fb7c 	bl	8003704 <xFifosInit>

  CRC16_RegisterHardware(&hcrc);
 800200c:	4815      	ldr	r0, [pc, #84]	; (8002064 <main+0x94>)
 800200e:	f7ff fb71 	bl	80016f4 <CRC16_RegisterHardware>

  HAL_GPIO_WritePin(USB_RST_GPIO_Port, USB_RST_Pin, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002018:	4813      	ldr	r0, [pc, #76]	; (8002068 <main+0x98>)
 800201a:	f002 fd29 	bl	8004a70 <HAL_GPIO_WritePin>

  DelayInit();
 800201e:	f7ff fbc5 	bl	80017ac <DelayInit>

  HAL_TIM_Base_Start_IT(&htim7);
 8002022:	4812      	ldr	r0, [pc, #72]	; (800206c <main+0x9c>)
 8002024:	f003 fb34 	bl	8005690 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002028:	2108      	movs	r1, #8
 800202a:	4811      	ldr	r0, [pc, #68]	; (8002070 <main+0xa0>)
 800202c:	f003 fe48 	bl	8005cc0 <HAL_TIM_PWM_Start>
  lcd_init();
 8002030:	f7ff fef6 	bl	8001e20 <lcd_init>

  showlogo();
 8002034:	f7ff ffa2 	bl	8001f7c <showlogo>

  osKernelInitialize();
 8002038:	f004 fa76 	bl	8006528 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(acis_main_task, NULL, &defaultTask_attributes);
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <main+0xa4>)
 800203e:	2100      	movs	r1, #0
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <main+0xa8>)
 8002042:	f004 faab 	bl	800659c <osThreadNew>
 8002046:	4602      	mov	r2, r0
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <main+0xac>)
 800204a:	601a      	str	r2, [r3, #0]
  getterTaskHandle = osThreadNew(xGetterTask, NULL, &getterTask_attributes);
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <main+0xb0>)
 800204e:	2100      	movs	r1, #0
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <main+0xb4>)
 8002052:	f004 faa3 	bl	800659c <osThreadNew>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <main+0xb8>)
 800205a:	601a      	str	r2, [r3, #0]
  osKernelStart();
 800205c:	f004 fa7e 	bl	800655c <osKernelStart>

  while (1)
 8002060:	e7fe      	b.n	8002060 <main+0x90>
 8002062:	bf00      	nop
 8002064:	20006f58 	.word	0x20006f58
 8002068:	40020000 	.word	0x40020000
 800206c:	200071a8 	.word	0x200071a8
 8002070:	20007168 	.word	0x20007168
 8002074:	0800d81c 	.word	0x0800d81c
 8002078:	080010bd 	.word	0x080010bd
 800207c:	20006e34 	.word	0x20006e34
 8002080:	0800d840 	.word	0x0800d840
 8002084:	080039f5 	.word	0x080039f5
 8002088:	20007164 	.word	0x20007164

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0b4      	sub	sp, #208	; 0xd0
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002096:	2230      	movs	r2, #48	; 0x30
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f007 fdd7 	bl	8009c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f007 fdc8 	bl	8009c4e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <SystemClock_Config+0x124>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <SystemClock_Config+0x124>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <SystemClock_Config+0x124>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <SystemClock_Config+0x128>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a36      	ldr	r2, [pc, #216]	; (80021b4 <SystemClock_Config+0x128>)
 80020dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <SystemClock_Config+0x128>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ee:	2302      	movs	r3, #2
 80020f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020fa:	2310      	movs	r3, #16
 80020fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800210c:	2308      	movs	r3, #8
 800210e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002112:	23d8      	movs	r3, #216	; 0xd8
 8002114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002118:	2302      	movs	r3, #2
 800211a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002124:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002128:	4618      	mov	r0, r3
 800212a:	f002 fcdf 	bl	8004aec <HAL_RCC_OscConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002134:	f000 fb56 	bl	80027e4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002138:	f002 fca0 	bl	8004a7c <HAL_PWREx_EnableOverDrive>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002142:	f000 fb4f 	bl	80027e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002146:	230f      	movs	r3, #15
 8002148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002158:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800215c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002168:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800216c:	2107      	movs	r1, #7
 800216e:	4618      	mov	r0, r3
 8002170:	f002 fea6 	bl	8004ec0 <HAL_RCC_ClockConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800217a:	f000 fb33 	bl	80027e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 800217e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002182:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002184:	2300      	movs	r3, #0
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002188:	2300      	movs	r3, #0
 800218a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4618      	mov	r0, r3
 8002192:	f002 ff53 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 800219c:	f000 fb22 	bl	80027e4 <Error_Handler>
  }

  HAL_SetTickFreq(HAL_TICK_FREQ_10KHZ);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f001 feb9 	bl	8003f18 <HAL_SetTickFreq>
}
 80021a6:	bf00      	nop
 80021a8:	37d0      	adds	r7, #208	; 0xd0
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40007000 	.word	0x40007000

080021b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_CRC_Init+0x50>)
 80021be:	4a13      	ldr	r2, [pc, #76]	; (800220c <MX_CRC_Init+0x54>)
 80021c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_CRC_Init+0x50>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_CRC_Init+0x50>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = CRC_POLY;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_CRC_Init+0x50>)
 80021d0:	f24a 0201 	movw	r2, #40961	; 0xa001
 80021d4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_CRC_Init+0x50>)
 80021d8:	2208      	movs	r2, #8
 80021da:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_CRC_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_CRC_Init+0x50>)
 80021e4:	2220      	movs	r2, #32
 80021e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MX_CRC_Init+0x50>)
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_CRC_Init+0x50>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_CRC_Init+0x50>)
 80021f6:	f002 f93d 	bl	8004474 <HAL_CRC_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8002200:	f000 faf0 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20006f58 	.word	0x20006f58
 800220c:	40023000 	.word	0x40023000

08002210 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002216:	463b      	mov	r3, r7
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002224:	4a21      	ldr	r2, [pc, #132]	; (80022ac <MX_ADC1_Init+0x9c>)
 8002226:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <MX_ADC1_Init+0x98>)
 800222a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800222e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002236:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <MX_ADC1_Init+0x98>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002242:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <MX_ADC1_Init+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <MX_ADC1_Init+0xa0>)
 8002254:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <MX_ADC1_Init+0x98>)
 800225e:	2201      	movs	r2, #1
 8002260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_ADC1_Init+0x98>)
 800226c:	2201      	movs	r2, #1
 800226e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002272:	f001 fe65 	bl	8003f40 <HAL_ADC_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800227c:	f000 fab2 	bl	80027e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_ADC1_Init+0xa4>)
 8002282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002284:	2301      	movs	r3, #1
 8002286:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_ADC1_Init+0x98>)
 8002292:	f001 ff93 	bl	80041bc <HAL_ADC_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800229c:	f000 faa2 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	2000703c 	.word	0x2000703c
 80022ac:	40012000 	.word	0x40012000
 80022b0:	0f000001 	.word	0x0f000001
 80022b4:	10000012 	.word	0x10000012

080022b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ca:	463b      	mov	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]
 80022da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <MX_TIM2_Init+0xb0>)
 80022de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 422;
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <MX_TIM2_Init+0xb0>)
 80022e6:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 80022ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <MX_TIM2_Init+0xb0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <MX_TIM2_Init+0xb0>)
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <MX_TIM2_Init+0xb0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_TIM2_Init+0xb0>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002304:	4818      	ldr	r0, [pc, #96]	; (8002368 <MX_TIM2_Init+0xb0>)
 8002306:	f003 fb0f 	bl	8005928 <HAL_TIM_PWM_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002310:	f000 fa68 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4811      	ldr	r0, [pc, #68]	; (8002368 <MX_TIM2_Init+0xb0>)
 8002324:	f003 fcce 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800232e:	f000 fa59 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002332:	2360      	movs	r3, #96	; 0x60
 8002334:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	2208      	movs	r2, #8
 8002346:	4619      	mov	r1, r3
 8002348:	4807      	ldr	r0, [pc, #28]	; (8002368 <MX_TIM2_Init+0xb0>)
 800234a:	f003 fb63 	bl	8005a14 <HAL_TIM_PWM_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002354:	f000 fa46 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <MX_TIM2_Init+0xb0>)
 800235a:	f000 faed 	bl	8002938 <HAL_TIM_MspPostInit>

}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20007168 	.word	0x20007168

0800236c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <MX_TIM7_Init+0x64>)
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <MX_TIM7_Init+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <MX_TIM7_Init+0x64>)
 8002384:	226b      	movs	r2, #107	; 0x6b
 8002386:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <MX_TIM7_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <MX_TIM7_Init+0x64>)
 8002390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002394:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <MX_TIM7_Init+0x64>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <MX_TIM7_Init+0x64>)
 800239e:	f003 faa9 	bl	80058f4 <HAL_TIM_Base_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80023a8:	f000 fa1c 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_TIM7_Init+0x64>)
 80023ba:	f003 fc83 	bl	8005cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023c4:	f000 fa0e 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	200071a8 	.word	0x200071a8
 80023d4:	40001400 	.word	0x40001400

080023d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <MX_TIM10_Init+0xa8>)
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <MX_TIM10_Init+0xac>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10799;
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <MX_TIM10_Init+0xa8>)
 80023f8:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80023fc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <MX_TIM10_Init+0xa8>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <MX_TIM10_Init+0xa8>)
 8002406:	f242 720f 	movw	r2, #9999	; 0x270f
 800240a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_TIM10_Init+0xa8>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_TIM10_Init+0xa8>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002418:	4819      	ldr	r0, [pc, #100]	; (8002480 <MX_TIM10_Init+0xa8>)
 800241a:	f003 fa6b 	bl	80058f4 <HAL_TIM_Base_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002424:	f000 f9de 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002428:	4815      	ldr	r0, [pc, #84]	; (8002480 <MX_TIM10_Init+0xa8>)
 800242a:	f003 fa7d 	bl	8005928 <HAL_TIM_PWM_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002434:	f000 f9d6 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8002438:	2108      	movs	r1, #8
 800243a:	4811      	ldr	r0, [pc, #68]	; (8002480 <MX_TIM10_Init+0xa8>)
 800243c:	f003 fa8e 	bl	800595c <HAL_TIM_OnePulse_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM10_Init+0x72>
  {
    Error_Handler();
 8002446:	f000 f9cd 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244a:	2360      	movs	r3, #96	; 0x60
 800244c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000;
 800244e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	2200      	movs	r2, #0
 8002460:	4619      	mov	r1, r3
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <MX_TIM10_Init+0xa8>)
 8002464:	f003 fad6 	bl	8005a14 <HAL_TIM_PWM_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM10_Init+0x9a>
  {
    Error_Handler();
 800246e:	f000 f9b9 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002472:	4803      	ldr	r0, [pc, #12]	; (8002480 <MX_TIM10_Init+0xa8>)
 8002474:	f000 fa60 	bl	8002938 <HAL_TIM_MspPostInit>

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20006f18 	.word	0x20006f18
 8002484:	40014400 	.word	0x40014400

08002488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800248c:	4b13      	ldr	r3, [pc, #76]	; (80024dc <MX_USART1_UART_Init+0x54>)
 800248e:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <MX_USART1_UART_Init+0x58>)
 8002490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 3375000;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <MX_USART1_UART_Init+0x54>)
 8002494:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <MX_USART1_UART_Init+0x5c>)
 8002496:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <MX_USART1_UART_Init+0x54>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024ac:	220c      	movs	r2, #12
 80024ae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024be:	2200      	movs	r2, #0
 80024c0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <MX_USART1_UART_Init+0x54>)
 80024ca:	f003 fffe 	bl	80064ca <HAL_UART_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80024d4:	f000 f986 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200070e4 	.word	0x200070e4
 80024e0:	40011000 	.word	0x40011000
 80024e4:	00337f98 	.word	0x00337f98

080024e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <MX_USART3_UART_Init+0x54>)
 80024ee:	4a14      	ldr	r2, [pc, #80]	; (8002540 <MX_USART3_UART_Init+0x58>)
 80024f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 960000;
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_USART3_UART_Init+0x54>)
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <MX_USART3_UART_Init+0x5c>)
 80024f6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <MX_USART3_UART_Init+0x54>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_USART3_UART_Init+0x54>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <MX_USART3_UART_Init+0x54>)
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_USART3_UART_Init+0x54>)
 800250c:	220c      	movs	r2, #12
 800250e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <MX_USART3_UART_Init+0x54>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_USART3_UART_Init+0x54>)
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <MX_USART3_UART_Init+0x54>)
 800251e:	2200      	movs	r2, #0
 8002520:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_USART3_UART_Init+0x54>)
 8002524:	2200      	movs	r2, #0
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <MX_USART3_UART_Init+0x54>)
 800252a:	f003 ffce 	bl	80064ca <HAL_UART_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8002534:	f000 f956 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20006e98 	.word	0x20006e98
 8002540:	40004800 	.word	0x40004800
 8002544:	000ea600 	.word	0x000ea600

08002548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <MX_DMA_Init+0x80>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <MX_DMA_Init+0x80>)
 8002554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <MX_DMA_Init+0x80>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <MX_DMA_Init+0x80>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <MX_DMA_Init+0x80>)
 800256c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <MX_DMA_Init+0x80>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 9, 0); //PC
 800257e:	2200      	movs	r2, #0
 8002580:	2109      	movs	r1, #9
 8002582:	200c      	movs	r0, #12
 8002584:	f001 fed2 	bl	800432c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002588:	200c      	movs	r0, #12
 800258a:	f001 ff01 	bl	8004390 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 9, 0); //PC
 800258e:	2200      	movs	r2, #0
 8002590:	2109      	movs	r1, #9
 8002592:	200e      	movs	r0, #14
 8002594:	f001 feca 	bl	800432c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002598:	200e      	movs	r0, #14
 800259a:	f001 fef9 	bl	8004390 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0); //ACIS
 800259e:	2200      	movs	r2, #0
 80025a0:	2108      	movs	r1, #8
 80025a2:	203a      	movs	r0, #58	; 0x3a
 80025a4:	f001 fec2 	bl	800432c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80025a8:	203a      	movs	r0, #58	; 0x3a
 80025aa:	f001 fef1 	bl	8004390 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 8, 0); //ACIS
 80025ae:	2200      	movs	r2, #0
 80025b0:	2108      	movs	r1, #8
 80025b2:	2046      	movs	r0, #70	; 0x46
 80025b4:	f001 feba 	bl	800432c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025b8:	2046      	movs	r0, #70	; 0x46
 80025ba:	f001 fee9 	bl	8004390 <HAL_NVIC_EnableIRQ>

}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <MX_GPIO_Init+0x204>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <MX_GPIO_Init+0x204>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b78      	ldr	r3, [pc, #480]	; (80027d0 <MX_GPIO_Init+0x204>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <MX_GPIO_Init+0x204>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a74      	ldr	r2, [pc, #464]	; (80027d0 <MX_GPIO_Init+0x204>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b72      	ldr	r3, [pc, #456]	; (80027d0 <MX_GPIO_Init+0x204>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002612:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <MX_GPIO_Init+0x204>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <MX_GPIO_Init+0x204>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <MX_GPIO_Init+0x204>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800262a:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <MX_GPIO_Init+0x204>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a68      	ldr	r2, [pc, #416]	; (80027d0 <MX_GPIO_Init+0x204>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <MX_GPIO_Init+0x204>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin|LCD_CS1_Pin, GPIO_PIN_RESET);
 8002642:	2200      	movs	r2, #0
 8002644:	2116      	movs	r1, #22
 8002646:	4863      	ldr	r0, [pc, #396]	; (80027d4 <MX_GPIO_Init+0x208>)
 8002648:	f002 fa12 	bl	8004a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 800264c:	2200      	movs	r2, #0
 800264e:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8002652:	4861      	ldr	r0, [pc, #388]	; (80027d8 <MX_GPIO_Init+0x20c>)
 8002654:	f002 fa0c 	bl	8004a70 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin
                          |USB_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1G_GPIO_Port, LED1G_Pin, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265e:	485f      	ldr	r0, [pc, #380]	; (80027dc <MX_GPIO_Init+0x210>)
 8002660:	f002 fa06 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2G_GPIO_Port, LED2G_Pin, GPIO_PIN_SET);
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800266a:	485c      	ldr	r0, [pc, #368]	; (80027dc <MX_GPIO_Init+0x210>)
 800266c:	f002 fa00 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1R_GPIO_Port, LED1R_Pin, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002676:	4859      	ldr	r0, [pc, #356]	; (80027dc <MX_GPIO_Init+0x210>)
 8002678:	f002 f9fa 	bl	8004a70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2R_GPIO_Port, LED2R_Pin, GPIO_PIN_SET);
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002682:	4856      	ldr	r0, [pc, #344]	; (80027dc <MX_GPIO_Init+0x210>)
 8002684:	f002 f9f4 	bl	8004a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS2_Pin|LCD_EN_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	2107      	movs	r1, #7
 800268c:	4853      	ldr	r0, [pc, #332]	; (80027dc <MX_GPIO_Init+0x210>)
 800268e:	f002 f9ef 	bl	8004a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8002692:	2306      	movs	r3, #6
 8002694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002696:	2301      	movs	r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	484a      	ldr	r0, [pc, #296]	; (80027d4 <MX_GPIO_Init+0x208>)
 80026aa:	f002 f905 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80026ae:	2302      	movs	r3, #2
 80026b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	4845      	ldr	r0, [pc, #276]	; (80027dc <MX_GPIO_Init+0x210>)
 80026c6:	f002 f8f7 	bl	80048b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LED1G_Pin|LED2G_Pin|LED2R_Pin|LED1R_Pin;
 80026ca:	f44f 4331 	mov.w	r3, #45312	; 0xb100
 80026ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026d0:	2311      	movs	r3, #17
 80026d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4619      	mov	r1, r3
 80026e2:	483e      	ldr	r0, [pc, #248]	; (80027dc <MX_GPIO_Init+0x210>)
 80026e4:	f002 f8e8 	bl	80048b8 <HAL_GPIO_Init>


  /*Configure GPIO pins : LCD_DB0_LED1R_Pin LCD_DB1_LED1G_Pin LCD_DB2_LED2R_Pin LCD_DB3_LED2G_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
 80026e8:	23ff      	movs	r3, #255	; 0xff
 80026ea:	617b      	str	r3, [r7, #20]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4836      	ldr	r0, [pc, #216]	; (80027d8 <MX_GPIO_Init+0x20c>)
 8002700:	f002 f8da 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS1_Pin */
  GPIO_InitStruct.Pin = LCD_CS1_Pin;
 8002704:	2310      	movs	r3, #16
 8002706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	2301      	movs	r3, #1
 800270a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS1_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	482e      	ldr	r0, [pc, #184]	; (80027d4 <MX_GPIO_Init+0x208>)
 800271c:	f002 f8cc 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS2_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS2_Pin|LCD_RST_Pin;
 8002720:	2305      	movs	r3, #5
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4829      	ldr	r0, [pc, #164]	; (80027dc <MX_GPIO_Init+0x210>)
 8002738:	f002 f8be 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_DISPLAY_Pin SW_FUEL2_Pin SW_FUEL1_Pin BUT_CANCEL_Pin */
  GPIO_InitStruct.Pin = SW_DISPLAY_Pin|SW_FUEL2_Pin|SW_FUEL1_Pin|BUT_CANCEL_Pin;
 800273c:	f44f 538e 	mov.w	r3, #4544	; 0x11c0
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4820      	ldr	r0, [pc, #128]	; (80027d4 <MX_GPIO_Init+0x208>)
 8002752:	f002 f8b1 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002756:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800275a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002768:	230a      	movs	r3, #10
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	4819      	ldr	r0, [pc, #100]	; (80027d8 <MX_GPIO_Init+0x20c>)
 8002774:	f002 f8a0 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_RST_Pin */
  GPIO_InitStruct.Pin = USB_RST_Pin;
 8002778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800277c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	2301      	movs	r3, #1
 8002780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_RST_GPIO_Port, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	4811      	ldr	r0, [pc, #68]	; (80027d8 <MX_GPIO_Init+0x20c>)
 8002792:	f002 f891 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_ENTER_Pin */
  GPIO_InitStruct.Pin = BUT_ENTER_Pin;
 8002796:	2304      	movs	r3, #4
 8002798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800279e:	2301      	movs	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_ENTER_GPIO_Port, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	480d      	ldr	r0, [pc, #52]	; (80027e0 <MX_GPIO_Init+0x214>)
 80027aa:	f002 f885 	bl	80048b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_UP_Pin BUT_DOWN_Pin */
  GPIO_InitStruct.Pin = BUT_LEFT_Pin|BUT_RIGHT_Pin|BUT_UP_Pin|BUT_DOWN_Pin;
 80027ae:	23f0      	movs	r3, #240	; 0xf0
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4806      	ldr	r0, [pc, #24]	; (80027dc <MX_GPIO_Init+0x210>)
 80027c2:	f002 f879 	bl	80048b8 <HAL_GPIO_Init>

}
 80027c6:	bf00      	nop
 80027c8:	3728      	adds	r7, #40	; 0x28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020c00 	.word	0x40020c00

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ea:	e7fe      	b.n	80027ea <Error_Handler+0x6>

080027ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_MspInit+0x4c>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_MspInit+0x4c>)
 80027f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_MspInit+0x4c>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_MspInit+0x4c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_MspInit+0x4c>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_MspInit+0x4c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	210f      	movs	r1, #15
 8002826:	f06f 0001 	mvn.w	r0, #1
 800282a:	f001 fd7f 	bl	800432c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_ADC_MspInit+0x44>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d113      	bne.n	8002876 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_ADC_MspInit+0x48>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_ADC_MspInit+0x48>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_ADC_MspInit+0x48>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2105      	movs	r1, #5
 800286a:	2012      	movs	r0, #18
 800286c:	f001 fd5e 	bl	800432c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002870:	2012      	movs	r0, #18
 8002872:	f001 fd8d 	bl	8004390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40012000 	.word	0x40012000
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002898:	d10b      	bne.n	80028b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_TIM_PWM_MspInit+0x38>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_TIM_PWM_MspInit+0x38>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_TIM_PWM_MspInit+0x38>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_TIM_Base_MspInit+0x68>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d114      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_TIM_Base_MspInit+0x6c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_TIM_Base_MspInit+0x6c>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_TIM_Base_MspInit+0x6c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2102      	movs	r1, #2
 80028f2:	2037      	movs	r0, #55	; 0x37
 80028f4:	f001 fd1a 	bl	800432c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80028f8:	2037      	movs	r0, #55	; 0x37
 80028fa:	f001 fd49 	bl	8004390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80028fe:	e010      	b.n	8002922 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <HAL_TIM_Base_MspInit+0x70>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10b      	bne.n	8002922 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_TIM_Base_MspInit+0x6c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a08      	ldr	r2, [pc, #32]	; (8002930 <HAL_TIM_Base_MspInit+0x6c>)
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_TIM_Base_MspInit+0x6c>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40001400 	.word	0x40001400
 8002930:	40023800 	.word	0x40023800
 8002934:	40014400 	.word	0x40014400

08002938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d11d      	bne.n	8002996 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_TIM_MspPostInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_TIM_MspPostInit+0x88>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_TIM_MspPostInit+0x88>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LCD_LED_TIM2_CH3_Pin;
 8002972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002984:	2301      	movs	r3, #1
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_LED_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <HAL_TIM_MspPostInit+0x8c>)
 8002990:	f001 ff92 	bl	80048b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002994:	e010      	b.n	80029b8 <HAL_TIM_MspPostInit+0x80>
  else if(htim->Instance==TIM10)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <HAL_TIM_MspPostInit+0x90>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d10b      	bne.n	80029b8 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_TIM_MspPostInit+0x88>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <HAL_TIM_MspPostInit+0x88>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_TIM_MspPostInit+0x88>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40014400 	.word	0x40014400

080029cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a92      	ldr	r2, [pc, #584]	; (8002c34 <HAL_UART_MspInit+0x268>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	f040 8089 	bne.w	8002b02 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029f0:	4b91      	ldr	r3, [pc, #580]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	4a90      	ldr	r2, [pc, #576]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 80029f6:	f043 0310 	orr.w	r3, r3, #16
 80029fa:	6453      	str	r3, [r2, #68]	; 0x44
 80029fc:	4b8e      	ldr	r3, [pc, #568]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	4a8a      	ldr	r2, [pc, #552]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6313      	str	r3, [r2, #48]	; 0x30
 8002a14:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a32:	2307      	movs	r3, #7
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	487f      	ldr	r0, [pc, #508]	; (8002c3c <HAL_UART_MspInit+0x270>)
 8002a3e:	f001 ff3b 	bl	80048b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002a42:	4b7f      	ldr	r3, [pc, #508]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a44:	4a7f      	ldr	r2, [pc, #508]	; (8002c44 <HAL_UART_MspInit+0x278>)
 8002a46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002a48:	4b7d      	ldr	r3, [pc, #500]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a50:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a56:	4b7a      	ldr	r3, [pc, #488]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a5c:	4b78      	ldr	r3, [pc, #480]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a64:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a6a:	4b75      	ldr	r3, [pc, #468]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a76:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a78:	4b71      	ldr	r3, [pc, #452]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a7e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a86:	486e      	ldr	r0, [pc, #440]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a88:	f001 fd8a 	bl	80045a0 <HAL_DMA_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002a92:	f7ff fea7 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a69      	ldr	r2, [pc, #420]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a9c:	4a68      	ldr	r2, [pc, #416]	; (8002c40 <HAL_UART_MspInit+0x274>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002aa2:	4b69      	ldr	r3, [pc, #420]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002aa4:	4a69      	ldr	r2, [pc, #420]	; (8002c4c <HAL_UART_MspInit+0x280>)
 8002aa6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002aa8:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab0:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002ab2:	2240      	movs	r2, #64	; 0x40
 8002ab4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab6:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002abc:	4b62      	ldr	r3, [pc, #392]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002adc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ae4:	4858      	ldr	r0, [pc, #352]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002ae6:	f001 fd5b 	bl	80045a0 <HAL_DMA_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002af0:	f7ff fe78 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002af8:	669a      	str	r2, [r3, #104]	; 0x68
 8002afa:	4a53      	ldr	r2, [pc, #332]	; (8002c48 <HAL_UART_MspInit+0x27c>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b00:	e093      	b.n	8002c2a <HAL_UART_MspInit+0x25e>
  else if(huart->Instance==USART3)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a52      	ldr	r2, [pc, #328]	; (8002c50 <HAL_UART_MspInit+0x284>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	f040 808e 	bne.w	8002c2a <HAL_UART_MspInit+0x25e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a49      	ldr	r2, [pc, #292]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a43      	ldr	r2, [pc, #268]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_UART_MspInit+0x26c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b50:	2307      	movs	r3, #7
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	4619      	mov	r1, r3
 8002b5a:	483e      	ldr	r0, [pc, #248]	; (8002c54 <HAL_UART_MspInit+0x288>)
 8002b5c:	f001 feac 	bl	80048b8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b62:	4a3e      	ldr	r2, [pc, #248]	; (8002c5c <HAL_UART_MspInit+0x290>)
 8002b64:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b38      	ldr	r3, [pc, #224]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b82:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002b8e:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b94:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ba2:	482d      	ldr	r0, [pc, #180]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002ba4:	f001 fcfc 	bl	80045a0 <HAL_DMA_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_UART_MspInit+0x1e6>
      Error_Handler();
 8002bae:	f7ff fe19 	bl	80027e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002bb6:	66da      	str	r2, [r3, #108]	; 0x6c
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_UART_MspInit+0x28c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bc0:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <HAL_UART_MspInit+0x298>)
 8002bc2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bcc:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bde:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002be6:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002bfe:	4818      	ldr	r0, [pc, #96]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002c00:	f001 fcce 	bl	80045a0 <HAL_DMA_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_UART_MspInit+0x242>
      Error_Handler();
 8002c0a:	f7ff fdeb 	bl	80027e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002c12:	669a      	str	r2, [r3, #104]	; 0x68
 8002c14:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <HAL_UART_MspInit+0x294>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2105      	movs	r1, #5
 8002c1e:	2027      	movs	r0, #39	; 0x27
 8002c20:	f001 fb84 	bl	800432c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c24:	2027      	movs	r0, #39	; 0x27
 8002c26:	f001 fbb3 	bl	8004390 <HAL_NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3730      	adds	r7, #48	; 0x30
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	20007084 	.word	0x20007084
 8002c44:	40026440 	.word	0x40026440
 8002c48:	20006fdc 	.word	0x20006fdc
 8002c4c:	400264b8 	.word	0x400264b8
 8002c50:	40004800 	.word	0x40004800
 8002c54:	40020800 	.word	0x40020800
 8002c58:	20006e38 	.word	0x20006e38
 8002c5c:	40026028 	.word	0x40026028
 8002c60:	20006f7c 	.word	0x20006f7c
 8002c64:	40026058 	.word	0x40026058

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <NMI_Handler+0x4>

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c98:	f001 f92c 	bl	8003ef4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002c9c:	f004 fed6 	bl	8007a4c <xTaskGetSchedulerState>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d001      	beq.n	8002caa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002ca6:	f005 faad 	bl	8008204 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA1_Stream1_IRQHandler+0x10>)
 8002cb6:	f001 fd41 	bl	800473c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20006e38 	.word	0x20006e38

08002cc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <DMA1_Stream3_IRQHandler+0x10>)
 8002cca:	f001 fd37 	bl	800473c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20006f7c 	.word	0x20006f7c

08002cd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <ADC_IRQHandler+0x10>)
 8002cde:	f001 f9d8 	bl	8004092 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000703c 	.word	0x2000703c

08002cec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <USART3_IRQHandler+0x10>)
 8002cf2:	f003 f93b 	bl	8005f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20006e98 	.word	0x20006e98

08002d00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <TIM7_IRQHandler+0x10>)
 8002d06:	f002 fcde 	bl	80056c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200071a8 	.word	0x200071a8

08002d14 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <DMA2_Stream2_IRQHandler+0x10>)
 8002d1a:	f001 fd0f 	bl	800473c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20007084 	.word	0x20007084

08002d28 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <DMA2_Stream7_IRQHandler+0x10>)
 8002d2e:	f001 fd05 	bl	800473c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20006fdc 	.word	0x20006fdc

08002d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <_sbrk+0x5c>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <_sbrk+0x60>)
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <_sbrk+0x64>)
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <_sbrk+0x68>)
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <_sbrk+0x64>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d207      	bcs.n	8002d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d6c:	f006 ff3a 	bl	8009be4 <__errno>
 8002d70:	4602      	mov	r2, r0
 8002d72:	230c      	movs	r3, #12
 8002d74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e009      	b.n	8002d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <_sbrk+0x64>)
 8002d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20040000 	.word	0x20040000
 8002d9c:	00000400 	.word	0x00000400
 8002da0:	200018e8 	.word	0x200018e8
 8002da4:	20007230 	.word	0x20007230

08002da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <SystemInit+0x28>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <SystemInit+0x28>)
 8002db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <SystemInit+0x28>)
 8002dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8002de6:	2320      	movs	r3, #32
 8002de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dea:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8002dee:	e00b      	b.n	8002e08 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <SCB_InvalidateDCache_by_Addr+0x50>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	dcf0      	bgt.n	8002df0 <SCB_InvalidateDCache_by_Addr+0x1c>
 8002e0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e12:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e3e:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8002e42:	e00b      	b.n	8002e5c <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8002e44:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <SCB_CleanDCache_by_Addr+0x50>)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	dcf0      	bgt.n	8002e44 <SCB_CleanDCache_by_Addr+0x1c>
 8002e62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e66:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <Msg_GetSrc>:
static sGetterHandle xHandles[] = {
    {{0},{0},{0},{0},{0},{0}, &huart1, etrACIS },
    {{0},{0},{0},{0},{0},{0}, &huart3, etrPC },
};

static inline int Msg_GetSrc(uint8_t xValue) { return (xValue & 7); }
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <Msg_GetDest>:
static inline int Msg_GetDest(uint8_t xValue) { return ((xValue >> 3) & 7); }
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <CacheInvalidate>:

static inline void CacheInvalidate(void * buffer, uint32_t size)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <CacheInvalidate+0x24>
    SCB_InvalidateDCache_by_Addr((uint32_t*)buffer, size);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff7d 	bl	8002dd4 <SCB_InvalidateDCache_by_Addr>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8002eda:	e009      	b.n	8002ef0 <CacheInvalidate+0x38>
  else SCB_InvalidateDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7ff ff72 	bl	8002dd4 <SCB_InvalidateDCache_by_Addr>
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <CacheClean>:

static inline void CacheClean(void * buffer, uint32_t size)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t aligned = (uint32_t)buffer % 32;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	60fb      	str	r3, [r7, #12]
  if(aligned == 0)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <CacheClean+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)buffer, size);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff87 	bl	8002e28 <SCB_CleanDCache_by_Addr>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
}
 8002f1a:	e009      	b.n	8002f30 <CacheClean+0x38>
  else SCB_CleanDCache_by_Addr((uint32_t*)((uint32_t)buffer - aligned), size + aligned);
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f7ff ff7c 	bl	8002e28 <SCB_CleanDCache_by_Addr>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <acker>:
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
        }
    }
}

static inline void acker(sGetterHandle* xHandle, uint16_t aPacketId, eTransChannels xChaDest) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]

    if (xHandle)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d07d      	beq.n	800304a <acker+0x112>
    {
        uint16_t aTotLen = 8;
 8002f4e:	2308      	movs	r3, #8
 8002f50:	82bb      	strh	r3, [r7, #20]
        uint8_t aHeadByte = (( etrCTRL | ( xChaDest << 3 ) ) | HEADER_ACK_BIT) & HEADER_MASK_BITS;
 8002f52:	787b      	ldrb	r3, [r7, #1]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	f043 0303 	orr.w	r3, r3, #3
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	74fb      	strb	r3, [r7, #19]
        uint8_t header[8];

        header[0] = 0x55;
 8002f66:	2355      	movs	r3, #85	; 0x55
 8002f68:	723b      	strb	r3, [r7, #8]
        header[1] = 0x55;
 8002f6a:	2355      	movs	r3, #85	; 0x55
 8002f6c:	727b      	strb	r3, [r7, #9]
        header[2] = aHeadByte;
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	72bb      	strb	r3, [r7, #10]
        header[3] = aTotLen & 0xFF;
 8002f72:	8abb      	ldrh	r3, [r7, #20]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	72fb      	strb	r3, [r7, #11]
        header[4] = (aTotLen >> 8) & 0xFF;
 8002f78:	8abb      	ldrh	r3, [r7, #20]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	733b      	strb	r3, [r7, #12]
        header[5] = aPacketId & 0xFF;
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	737b      	strb	r3, [r7, #13]
        header[6] = (aPacketId >> 8) & 0xFF;
 8002f88:	887b      	ldrh	r3, [r7, #2]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	73bb      	strb	r3, [r7, #14]
        header[7] = CRC8_Generate(header, 7);
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	2107      	movs	r1, #7
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe fbc7 	bl	800172c <CRC8_Generate>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	73fb      	strb	r3, [r7, #15]

        uint8_t handled = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]
        if(!protIsSome(&xHandle->xTxFifo))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 ff2d 	bl	8003e0c <protIsSome>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d12c      	bne.n	8003012 <acker+0xda>
        {
          taskENTER_CRITICAL();
 8002fb8:	f005 f8b4 	bl	8008124 <vPortEnterCritical>
          if(!xHandle->TxBusy)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d122      	bne.n	800300e <acker+0xd6>
          {
            xHandle->TxBusy = 1;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2ad0 	strb.w	r2, [r3, #2768]	; 0xad0
            handled = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	75fb      	strb	r3, [r7, #23]
            taskEXIT_CRITICAL();
 8002fd4:	f005 f8cc 	bl	8008170 <vPortExitCritical>
            memcpy(&xHandle->BufTx[0],header,8);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	cb03      	ldmia	r3!, {r0, r1}
 8002fe6:	6010      	str	r0, [r2, #0]
 8002fe8:	6051      	str	r1, [r2, #4]
            CacheClean(xHandle->BufTx, 8);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff80 	bl	8002ef8 <CacheClean>
            HAL_UART_Transmit_DMA(xHandle->xUart, xHandle->BufTx, 8);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003004:	2208      	movs	r2, #8
 8003006:	4619      	mov	r1, r3
 8003008:	f002 febc 	bl	8005d84 <HAL_UART_Transmit_DMA>
 800300c:	e001      	b.n	8003012 <acker+0xda>
          }
          else taskEXIT_CRITICAL();
 800300e:	f005 f8af 	bl	8008170 <vPortExitCritical>
        }

        if(!handled)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d118      	bne.n	800304a <acker+0x112>
        {
          xSemaphoreTake(xHandle->xTxFifo.info.globallock, portMAX_DELAY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3a9c 	ldr.w	r3, [r3, #2716]	; 0xa9c
 800301e:	f04f 31ff 	mov.w	r1, #4294967295
 8003022:	4618      	mov	r0, r3
 8003024:	f003 ff82 	bl	8006f2c <xQueueSemaphoreTake>
          protPushSequence(&xHandle->xTxFifo,header,8);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 800302e:	f107 0108 	add.w	r1, r7, #8
 8003032:	2208      	movs	r2, #8
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fe72 	bl	8003d1e <protPushSequence>
          xSemaphoreGive(xHandle->xTxFifo.info.globallock);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 0a9c 	ldr.w	r0, [r3, #2716]	; 0xa9c
 8003040:	2300      	movs	r3, #0
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	f003 fd61 	bl	8006b0c <xQueueGenericSend>
        }
    }
}
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <parser>:
  }
  return 0;

}

static inline void parser(sProFIFO* xFifo, uint32_t xPacketId, uint32_t xDataLen, eTransChannels xChaSrc, eTransChannels xChaDest) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	70fb      	strb	r3, [r7, #3]

	uint32_t aCount;
  uint8_t data;
  uint8_t sCount;
	sGetterHandle * hDest = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t header[8];
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	e019      	b.n	80030a0 <parser+0x4c>
  {
    if(xHandles[i].xChannel == xChaDest)
 800306c:	4aa5      	ldr	r2, [pc, #660]	; (8003304 <parser+0x2b0>)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f640 21d4 	movw	r1, #2772	; 0xad4
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003084:	429a      	cmp	r2, r3
 8003086:	d108      	bne.n	800309a <parser+0x46>
    {
      hDest = &xHandles[i];
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f640 22d4 	movw	r2, #2772	; 0xad4
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a9c      	ldr	r2, [pc, #624]	; (8003304 <parser+0x2b0>)
 8003094:	4413      	add	r3, r2
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003098:	e005      	b.n	80030a6 <parser+0x52>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	3301      	adds	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d9e2      	bls.n	800306c <parser+0x18>
    }
  }


    switch (xChaDest) {
 80030a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f2c0 810b 	blt.w	80032c6 <parser+0x272>
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	f340 808e 	ble.w	80031d2 <parser+0x17e>
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	f040 8105 	bne.w	80032c6 <parser+0x272>

        case etrCTRL:
        {
            if (xDataLen)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d04f      	beq.n	8003162 <parser+0x10e>
            {
                for(int i = 0; i < 8; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	e00a      	b.n	80030de <parser+0x8a>
                  protPull(xFifo, &header[i]);
 80030c8:	f107 0210 	add.w	r2, r7, #16
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	4413      	add	r3, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fe61 	bl	8003d9a <protPull>
                for(int i = 0; i < 8; i++)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	3301      	adds	r3, #1
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	2b07      	cmp	r3, #7
 80030e2:	ddf1      	ble.n	80030c8 <parser+0x74>

                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e8:	e010      	b.n	800310c <parser+0xb8>
                {
                  protPull(xFifo, &data);
 80030ea:	f107 0319 	add.w	r3, r7, #25
 80030ee:	4619      	mov	r1, r3
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fe52 	bl	8003d9a <protPull>
                  hDest->BufParser[aCount]=data;
 80030f6:	7e79      	ldrb	r1, [r7, #25]
 80030f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	460a      	mov	r2, r1
 8003104:	701a      	strb	r2, [r3, #0]
                for (aCount = 0; aCount < xDataLen - 10; aCount++)
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	3301      	adds	r3, #1
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b0a      	subs	r3, #10
 8003110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003112:	429a      	cmp	r2, r3
 8003114:	d3e9      	bcc.n	80030ea <parser+0x96>
                }
                protPull(xFifo, &data);
 8003116:	f107 0319 	add.w	r3, r7, #25
 800311a:	4619      	mov	r1, r3
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fe3c 	bl	8003d9a <protPull>
                protPull(xFifo, &data);
 8003122:	f107 0319 	add.w	r3, r7, #25
 8003126:	4619      	mov	r1, r3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fe36 	bl	8003d9a <protPull>

                hDest->BufParser[aCount]=0;
 800312e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]

                if(hDest) acker(hDest,xPacketId,xChaSrc);
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <parser+0xfc>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	b29b      	uxth	r3, r3
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4619      	mov	r1, r3
 800314a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800314c:	f7ff fef4 	bl	8002f38 <acker>

                acis_parse_command(xChaSrc, hDest->BufParser, aCount);
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	f503 6110 	add.w	r1, r3, #2304	; 0x900
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd ffc4 	bl	80010e8 <acis_parse_command>
                }
                taskEXIT_CRITICAL();

            }

            break;
 8003160:	e0cb      	b.n	80032fa <parser+0x2a6>
                for (aCount = 0; aCount < 8; aCount++)
 8003162:	2300      	movs	r3, #0
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	e013      	b.n	8003190 <parser+0x13c>
                  for(int i = 0; i < 8; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e00a      	b.n	8003184 <parser+0x130>
                    protPull(xFifo, &header[i]);
 800316e:	f107 0210 	add.w	r2, r7, #16
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	4619      	mov	r1, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fe0e 	bl	8003d9a <protPull>
                  for(int i = 0; i < 8; i++)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3301      	adds	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b07      	cmp	r3, #7
 8003188:	ddf1      	ble.n	800316e <parser+0x11a>
                for (aCount = 0; aCount < 8; aCount++)
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	3301      	adds	r3, #1
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	2b07      	cmp	r3, #7
 8003194:	d9e8      	bls.n	8003168 <parser+0x114>
                taskENTER_CRITICAL();
 8003196:	f004 ffc5 	bl	8008124 <vPortEnterCritical>
                if(NeedAckPacket && NeededAckPacketId != 0 && NeededAckPacketId == xPacketId && !ReceivedAckPacket)
 800319a:	4b5b      	ldr	r3, [pc, #364]	; (8003308 <parser+0x2b4>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <parser+0x178>
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <parser+0x2b8>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00e      	beq.n	80031cc <parser+0x178>
 80031ae:	4b57      	ldr	r3, [pc, #348]	; (800330c <parser+0x2b8>)
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d107      	bne.n	80031cc <parser+0x178>
 80031bc:	4b54      	ldr	r3, [pc, #336]	; (8003310 <parser+0x2bc>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <parser+0x178>
                  ReceivedAckPacket = 1;
 80031c6:	4b52      	ldr	r3, [pc, #328]	; (8003310 <parser+0x2bc>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	801a      	strh	r2, [r3, #0]
                taskEXIT_CRITICAL();
 80031cc:	f004 ffd0 	bl	8008170 <vPortExitCritical>
            break;
 80031d0:	e093      	b.n	80032fa <parser+0x2a6>
        }

        case etrACIS:
        case etrPC:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b0a      	cmp	r3, #10
 80031d6:	d902      	bls.n	80031de <parser+0x18a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	e000      	b.n	80031e0 <parser+0x18c>
 80031de:	2308      	movs	r3, #8
 80031e0:	76bb      	strb	r3, [r7, #26]

          if(hDest)
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d06e      	beq.n	80032c6 <parser+0x272>
          {

            uint8_t handled = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	76fb      	strb	r3, [r7, #27]
            if(!protIsSome(&hDest->xTxFifo))
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fe0a 	bl	8003e0c <protIsSome>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d138      	bne.n	8003270 <parser+0x21c>
            {
              taskENTER_CRITICAL();
 80031fe:	f004 ff91 	bl	8008124 <vPortEnterCritical>
              if(!hDest->TxBusy)
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d12e      	bne.n	800326c <parser+0x218>
              {
                hDest->TxBusy = 1;
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2ad0 	strb.w	r2, [r3, #2768]	; 0xad0
                handled = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	76fb      	strb	r3, [r7, #27]
                taskEXIT_CRITICAL();
 800321a:	f004 ffa9 	bl	8008170 <vPortExitCritical>

                for (aCount = 0; aCount < sCount; aCount++)
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003222:	e00b      	b.n	800323c <parser+0x1e8>
                {
                  protPull(xFifo, &hDest->BufTx[aCount]);
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800322a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322c:	4413      	add	r3, r2
 800322e:	4619      	mov	r1, r3
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fdb2 	bl	8003d9a <protPull>
                for (aCount = 0; aCount < sCount; aCount++)
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	3301      	adds	r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	7ebb      	ldrb	r3, [r7, #26]
 800323e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003240:	429a      	cmp	r2, r3
 8003242:	d3ef      	bcc.n	8003224 <parser+0x1d0>
                }

                CacheClean(hDest->BufTx, sCount);
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800324a:	7eba      	ldrb	r2, [r7, #26]
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fe52 	bl	8002ef8 <CacheClean>
                HAL_UART_Transmit_DMA(hDest->xUart, hDest->BufTx, sCount);
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003260:	7eba      	ldrb	r2, [r7, #26]
 8003262:	b292      	uxth	r2, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f002 fd8d 	bl	8005d84 <HAL_UART_Transmit_DMA>
 800326a:	e001      	b.n	8003270 <parser+0x21c>
              }
              else taskEXIT_CRITICAL();
 800326c:	f004 ff80 	bl	8008170 <vPortExitCritical>
            }

            if(!handled)
 8003270:	7efb      	ldrb	r3, [r7, #27]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d140      	bne.n	80032f8 <parser+0x2a4>
            {
              xSemaphoreTake(xFifo->info.globallock, portMAX_DELAY);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f04f 31ff 	mov.w	r1, #4294967295
 800327e:	4618      	mov	r0, r3
 8003280:	f003 fe54 	bl	8006f2c <xQueueSemaphoreTake>
              for (aCount = 0; aCount < sCount; aCount++)
 8003284:	2300      	movs	r3, #0
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003288:	e011      	b.n	80032ae <parser+0x25a>
              {
                protPull(xFifo, &data);
 800328a:	f107 0319 	add.w	r3, r7, #25
 800328e:	4619      	mov	r1, r3
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fd82 	bl	8003d9a <protPull>
                protPush(&hDest->xTxFifo, &data);
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 800329c:	f107 0219 	add.w	r2, r7, #25
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fd5b 	bl	8003d5e <protPush>
              for (aCount = 0; aCount < sCount; aCount++)
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	3301      	adds	r3, #1
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ae:	7ebb      	ldrb	r3, [r7, #26]
 80032b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d3e9      	bcc.n	800328a <parser+0x236>
              }
              xSemaphoreGive(xFifo->info.globallock);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6958      	ldr	r0, [r3, #20]
 80032ba:	2300      	movs	r3, #0
 80032bc:	2200      	movs	r2, #0
 80032be:	2100      	movs	r1, #0
 80032c0:	f003 fc24 	bl	8006b0c <xQueueGenericSend>
            }

            break;
 80032c4:	e018      	b.n	80032f8 <parser+0x2a4>
        }
        /* no break */

        default:
        {
          sCount = (xDataLen > 10) ? xDataLen : 8;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b0a      	cmp	r3, #10
 80032ca:	d902      	bls.n	80032d2 <parser+0x27e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e000      	b.n	80032d4 <parser+0x280>
 80032d2:	2308      	movs	r3, #8
 80032d4:	76bb      	strb	r3, [r7, #26]
          for (aCount = 0; aCount < sCount; aCount++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032da:	e008      	b.n	80032ee <parser+0x29a>
          {
            protPull(xFifo, &data);
 80032dc:	f107 0319 	add.w	r3, r7, #25
 80032e0:	4619      	mov	r1, r3
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fd59 	bl	8003d9a <protPull>
          for (aCount = 0; aCount < sCount; aCount++)
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	3301      	adds	r3, #1
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ee:	7ebb      	ldrb	r3, [r7, #26]
 80032f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d3f2      	bcc.n	80032dc <parser+0x288>
          }
          break;
 80032f6:	e000      	b.n	80032fa <parser+0x2a6>
            break;
 80032f8:	bf00      	nop
        }
    }
}
 80032fa:	bf00      	nop
 80032fc:	3730      	adds	r7, #48	; 0x30
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000020 	.word	0x20000020
 8003308:	200018ec 	.word	0x200018ec
 800330c:	200018ee 	.word	0x200018ee
 8003310:	20000004 	.word	0x20000004

08003314 <lookByte>:

static inline uint8_t lookByte(sProFIFO* xFifo, uint32_t xOffset) { uint8_t aByte; protLook(xFifo,xOffset,&aByte); return aByte; }
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	f107 030f 	add.w	r3, r7, #15
 8003322:	461a      	mov	r2, r3
 8003324:	6839      	ldr	r1, [r7, #0]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fd47 	bl	8003dba <protLook>
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <countCRC8>:

static inline uint8_t countCRC8(sGetterHandle * handle) {
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
    uint32_t i; uint8_t aCrc8 = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	72fb      	strb	r3, [r7, #11]
    for (i=0; i<7; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e012      	b.n	800336e <countCRC8+0x38>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ffdf 	bl	8003314 <lookByte>
 8003356:	4603      	mov	r3, r0
 8003358:	4619      	mov	r1, r3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	460a      	mov	r2, r1
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d9e9      	bls.n	8003348 <countCRC8+0x12>
    aCrc8 = CRC8_Generate(handle->BufParser, 7);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	2107      	movs	r1, #7
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe f9d5 	bl	800172c <CRC8_Generate>
 8003382:	4603      	mov	r3, r0
 8003384:	72fb      	strb	r3, [r7, #11]
    return aCrc8;
 8003386:	7afb      	ldrb	r3, [r7, #11]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <countCRC16>:

static inline int32_t countCRC16(sGetterHandle * handle, uint32_t xLen) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
    uint32_t i; int32_t aCrc16 = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
    for (i=0; i<xLen-2; i++) { handle->BufParser[i] = lookByte(&handle->xRxFifo,i); }
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e012      	b.n	80033ca <countCRC16+0x3a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ffb1 	bl	8003314 <lookByte>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4619      	mov	r1, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c0:	460a      	mov	r2, r1
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	3b02      	subs	r3, #2
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d3e7      	bcc.n	80033a4 <countCRC16+0x14>
    aCrc16 = CRC8_Generate(handle->BufParser, xLen-2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	3b02      	subs	r3, #2
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fe f9a3 	bl	800172c <CRC8_Generate>
 80033e6:	4603      	mov	r3, r0
 80033e8:	60bb      	str	r3, [r7, #8]
    return aCrc16;
 80033ea:	68bb      	ldr	r3, [r7, #8]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <Getter>:

static void Getter(sGetterHandle * handle)
{
 80033f4:	b5b0      	push	{r4, r5, r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t dataSkip = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
  sProFIFO* xFifo = &handle->xRxFifo;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 8003406:	617b      	str	r3, [r7, #20]
  uint32_t * pDataReceiving = &handle->dataReceiving;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800340e:	613b      	str	r3, [r7, #16]
  uint32_t * pDataLen = &handle->dataLen;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8003416:	60fb      	str	r3, [r7, #12]
  uint16_t * pPacketId = &handle->packetId;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 800341e:	60bb      	str	r3, [r7, #8]

  uint16_t packetId = *pPacketId;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t dataLen = *pDataLen;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t dataReceiving = *pDataReceiving;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
  if(dataReceiving)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d043      	beq.n	80034c0 <Getter+0xcc>
  {
    // Check if we got a data
    if (protGetSize(xFifo) >= dataLen)
 8003438:	6978      	ldr	r0, [r7, #20]
 800343a:	f000 fb6d 	bl	8003b18 <protGetSize>
 800343e:	4602      	mov	r2, r0
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4293      	cmp	r3, r2
 8003444:	f200 80b7 	bhi.w	80035b6 <Getter+0x1c2>
    {
        if (countCRC16(handle,dataLen) == lookByte(xFifo,dataLen-2) + (lookByte(xFifo,dataLen-1) << 8))
 8003448:	69f9      	ldr	r1, [r7, #28]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff ffa0 	bl	8003390 <countCRC16>
 8003450:	4604      	mov	r4, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b02      	subs	r3, #2
 8003456:	4619      	mov	r1, r3
 8003458:	6978      	ldr	r0, [r7, #20]
 800345a:	f7ff ff5b 	bl	8003314 <lookByte>
 800345e:	4603      	mov	r3, r0
 8003460:	461d      	mov	r5, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b01      	subs	r3, #1
 8003466:	4619      	mov	r1, r3
 8003468:	6978      	ldr	r0, [r7, #20]
 800346a:	f7ff ff53 	bl	8003314 <lookByte>
 800346e:	4603      	mov	r3, r0
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	442b      	add	r3, r5
 8003474:	429c      	cmp	r4, r3
 8003476:	d11c      	bne.n	80034b2 <Getter+0xbe>
        {
            // Got True package
            parser(xFifo,packetId,dataLen,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003478:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800347a:	2102      	movs	r1, #2
 800347c:	6978      	ldr	r0, [r7, #20]
 800347e:	f7ff ff49 	bl	8003314 <lookByte>
 8003482:	4603      	mov	r3, r0
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fcf9 	bl	8002e7c <Msg_GetSrc>
 800348a:	4603      	mov	r3, r0
 800348c:	b2dd      	uxtb	r5, r3
 800348e:	2102      	movs	r1, #2
 8003490:	6978      	ldr	r0, [r7, #20]
 8003492:	f7ff ff3f 	bl	8003314 <lookByte>
 8003496:	4603      	mov	r3, r0
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fcfd 	bl	8002e98 <Msg_GetDest>
 800349e:	4603      	mov	r3, r0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	462b      	mov	r3, r5
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	4621      	mov	r1, r4
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f7ff fdd2 	bl	8003054 <parser>
 80034b0:	e001      	b.n	80034b6 <Getter+0xc2>
        }
        else { dataSkip=1; } // Wrong CRC16, so skip 1 byte
 80034b2:	2301      	movs	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
        dataReceiving = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
        dataLen = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	e07a      	b.n	80035b6 <Getter+0x1c2>
    }
  }
  else
  {
    if (protGetSize(xFifo) > 7)
 80034c0:	6978      	ldr	r0, [r7, #20]
 80034c2:	f000 fb29 	bl	8003b18 <protGetSize>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b07      	cmp	r3, #7
 80034ca:	d974      	bls.n	80035b6 <Getter+0x1c2>
    {
      if(lookByte(xFifo,0) == 0x55 && lookByte(xFifo,1) == 0x55)
 80034cc:	2100      	movs	r1, #0
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff20 	bl	8003314 <lookByte>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b55      	cmp	r3, #85	; 0x55
 80034d8:	d16b      	bne.n	80035b2 <Getter+0x1be>
 80034da:	2101      	movs	r1, #1
 80034dc:	6978      	ldr	r0, [r7, #20]
 80034de:	f7ff ff19 	bl	8003314 <lookByte>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b55      	cmp	r3, #85	; 0x55
 80034e6:	d164      	bne.n	80035b2 <Getter+0x1be>
      {
        if (countCRC8(handle) == lookByte(xFifo,7))
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff24 	bl	8003336 <countCRC8>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461c      	mov	r4, r3
 80034f2:	2107      	movs	r1, #7
 80034f4:	6978      	ldr	r0, [r7, #20]
 80034f6:	f7ff ff0d 	bl	8003314 <lookByte>
 80034fa:	4603      	mov	r3, r0
 80034fc:	429c      	cmp	r4, r3
 80034fe:	d154      	bne.n	80035aa <Getter+0x1b6>
        {
            if (lookByte(xFifo,0) < HEADER_MASK_BITS)
 8003500:	2100      	movs	r1, #0
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff06 	bl	8003314 <lookByte>
 8003508:	4603      	mov	r3, r0
 800350a:	2b3e      	cmp	r3, #62	; 0x3e
 800350c:	d84a      	bhi.n	80035a4 <Getter+0x1b0>
            {
                dataLen = lookByte(xFifo,3) + (lookByte(xFifo,4) << 8);
 800350e:	2103      	movs	r1, #3
 8003510:	6978      	ldr	r0, [r7, #20]
 8003512:	f7ff feff 	bl	8003314 <lookByte>
 8003516:	4603      	mov	r3, r0
 8003518:	461c      	mov	r4, r3
 800351a:	2104      	movs	r1, #4
 800351c:	6978      	ldr	r0, [r7, #20]
 800351e:	f7ff fef9 	bl	8003314 <lookByte>
 8003522:	4603      	mov	r3, r0
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4423      	add	r3, r4
 8003528:	61fb      	str	r3, [r7, #28]
                packetId = lookByte(xFifo,5) + (lookByte(xFifo,6) << 8);
 800352a:	2105      	movs	r1, #5
 800352c:	6978      	ldr	r0, [r7, #20]
 800352e:	f7ff fef1 	bl	8003314 <lookByte>
 8003532:	4603      	mov	r3, r0
 8003534:	b29c      	uxth	r4, r3
 8003536:	2106      	movs	r1, #6
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f7ff feeb 	bl	8003314 <lookByte>
 800353e:	4603      	mov	r3, r0
 8003540:	b29b      	uxth	r3, r3
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	b29b      	uxth	r3, r3
 8003546:	4423      	add	r3, r4
 8003548:	847b      	strh	r3, [r7, #34]	; 0x22
                if (packetId > 0 && dataLen < MAX_PACK_LEN)
 800354a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800354c:	2b00      	cmp	r3, #0
 800354e:	d026      	beq.n	800359e <Getter+0x1aa>
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003556:	d222      	bcs.n	800359e <Getter+0x1aa>
                {
                    if (dataLen>10)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b0a      	cmp	r3, #10
 800355c:	d902      	bls.n	8003564 <Getter+0x170>
                    {
                      dataReceiving = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
                    if (dataLen>10)
 8003562:	e025      	b.n	80035b0 <Getter+0x1bc>
                    }
                    else
                    {
                        // Got ShortPackage (Header Only)
                        parser(xFifo,packetId,0,Msg_GetSrc(lookByte(xFifo,2)),Msg_GetDest(lookByte(xFifo,2)));
 8003564:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003566:	2102      	movs	r1, #2
 8003568:	6978      	ldr	r0, [r7, #20]
 800356a:	f7ff fed3 	bl	8003314 <lookByte>
 800356e:	4603      	mov	r3, r0
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fc83 	bl	8002e7c <Msg_GetSrc>
 8003576:	4603      	mov	r3, r0
 8003578:	b2dd      	uxtb	r5, r3
 800357a:	2102      	movs	r1, #2
 800357c:	6978      	ldr	r0, [r7, #20]
 800357e:	f7ff fec9 	bl	8003314 <lookByte>
 8003582:	4603      	mov	r3, r0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fc87 	bl	8002e98 <Msg_GetDest>
 800358a:	4603      	mov	r3, r0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	462b      	mov	r3, r5
 8003592:	2200      	movs	r2, #0
 8003594:	4621      	mov	r1, r4
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff fd5c 	bl	8003054 <parser>
                    if (dataLen>10)
 800359c:	e008      	b.n	80035b0 <Getter+0x1bc>
                    }
                }
                else { dataSkip=1; } // Wrong data length or packet id, so skip 1 byte
 800359e:	2301      	movs	r3, #1
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 80035a2:	e008      	b.n	80035b6 <Getter+0x1c2>
            }
            else { dataSkip=1; } // Wrong marker bits, so skip 1 byte
 80035a4:	2301      	movs	r3, #1
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 80035a8:	e005      	b.n	80035b6 <Getter+0x1c2>
        }
        else { dataSkip=1; } // Wrong CRC8, so skip 1 byte
 80035aa:	2301      	movs	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
        if (countCRC8(handle) == lookByte(xFifo,7))
 80035ae:	e002      	b.n	80035b6 <Getter+0x1c2>
 80035b0:	e001      	b.n	80035b6 <Getter+0x1c2>
      }
      else { dataSkip=1; } // Wrong sync bytes
 80035b2:	2301      	movs	r3, #1
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (dataSkip)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <Getter+0x1d0>
  {
    protMoveRead(xFifo,dataSkip);
 80035bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f000 fc13 	bl	8003dea <protMoveRead>
  }

  *pDataReceiving = dataReceiving;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	601a      	str	r2, [r3, #0]
  *pDataLen = dataLen;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	601a      	str	r2, [r3, #0]
  *pPacketId = packetId;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80035d4:	801a      	strh	r2, [r3, #0]
}
 80035d6:	bf00      	nop
 80035d8:	3728      	adds	r7, #40	; 0x28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080035e0 <xDmaTxIrqHandler>:



void xDmaTxIrqHandler(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  uint32_t length = 0;;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e04a      	b.n	8003688 <xDmaTxIrqHandler+0xa8>
  {
    handle = &xHandles[i];
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f640 22d4 	movw	r2, #2772	; 0xad4
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	4a26      	ldr	r2, [pc, #152]	; (8003698 <xDmaTxIrqHandler+0xb8>)
 80035fe:	4413      	add	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
    if(huart == handle->xUart)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	429a      	cmp	r2, r3
 800360c:	d139      	bne.n	8003682 <xDmaTxIrqHandler+0xa2>
    {
      if(protIsSome(&handle->xTxFifo))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fbf9 	bl	8003e0c <protIsSome>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02b      	beq.n	8003678 <xDmaTxIrqHandler+0x98>
      {
        handle->TxBusy = 1;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2ad0 	strb.w	r2, [r3, #2768]	; 0xad0
        while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 8003628:	bf00      	nop
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	617a      	str	r2, [r7, #20]
 8003636:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	4619      	mov	r1, r3
 8003640:	f000 fbab 	bl	8003d9a <protPull>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <xDmaTxIrqHandler+0x72>
            && length < MAX_PACK_LEN);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003650:	d3eb      	bcc.n	800362a <xDmaTxIrqHandler+0x4a>
        CacheClean(handle->BufTx, length);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003658:	6979      	ldr	r1, [r7, #20]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fc4c 	bl	8002ef8 <CacheClean>
        HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	b292      	uxth	r2, r2
 8003670:	4619      	mov	r1, r3
 8003672:	f002 fb87 	bl	8005d84 <HAL_UART_Transmit_DMA>
      }
      else handle->TxBusy = 0;
      break;
 8003676:	e00a      	b.n	800368e <xDmaTxIrqHandler+0xae>
      else handle->TxBusy = 0;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2ad0 	strb.w	r2, [r3, #2768]	; 0xad0
      break;
 8003680:	e005      	b.n	800368e <xDmaTxIrqHandler+0xae>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3301      	adds	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d9b1      	bls.n	80035f2 <xDmaTxIrqHandler+0x12>
    }
  }
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000020 	.word	0x20000020

0800369c <xDmaErIrqHandler>:

void xDmaErIrqHandler(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  sGetterHandle * handle;
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e023      	b.n	80036f2 <xDmaErIrqHandler+0x56>
  {
    handle = &xHandles[i];
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f640 22d4 	movw	r2, #2772	; 0xad4
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <xDmaErIrqHandler+0x64>)
 80036b6:	4413      	add	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]
    if(huart == handle->xUart)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d112      	bne.n	80036ec <xDmaErIrqHandler+0x50>
    {
      HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fb9c 	bl	8005e10 <HAL_UART_Receive_DMA>
      handle->RxPointer = handle->xUart->RxXferSize;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80036de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036e2:	461a      	mov	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f8c3 2acc 	str.w	r2, [r3, #2764]	; 0xacc
      break;
 80036ea:	e005      	b.n	80036f8 <xDmaErIrqHandler+0x5c>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d9d8      	bls.n	80036aa <xDmaErIrqHandler+0xe>
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20000020 	.word	0x20000020

08003704 <xFifosInit>:


void xFifosInit(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	e02f      	b.n	8003770 <xFifosInit+0x6c>
  {
    protInit(&xHandles[i].xTxFifo,xHandles[i].xTxFifoBuf,1,sizeof(MAX_PACK_LEN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f640 22d4 	movw	r2, #2772	; 0xad4
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 800371e:	4a18      	ldr	r2, [pc, #96]	; (8003780 <xFifosInit+0x7c>)
 8003720:	1898      	adds	r0, r3, r2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f640 22d4 	movw	r2, #2772	; 0xad4
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <xFifosInit+0x7c>)
 8003732:	1899      	adds	r1, r3, r2
 8003734:	2304      	movs	r3, #4
 8003736:	2201      	movs	r2, #1
 8003738:	f000 fa0c 	bl	8003b54 <protInit>
    protInit(&xHandles[i].xRxFifo,xHandles[i].xRxFifoBuf,1,sizeof(MAX_PACK_LEN));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f640 22d4 	movw	r2, #2772	; 0xad4
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 800374a:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <xFifosInit+0x7c>)
 800374c:	4413      	add	r3, r2
 800374e:	1d18      	adds	r0, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f640 22d4 	movw	r2, #2772	; 0xad4
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800375e:	4a08      	ldr	r2, [pc, #32]	; (8003780 <xFifosInit+0x7c>)
 8003760:	1899      	adds	r1, r3, r2
 8003762:	2304      	movs	r3, #4
 8003764:	2201      	movs	r2, #1
 8003766:	f000 f9f5 	bl	8003b54 <protInit>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3301      	adds	r3, #1
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d9cc      	bls.n	8003710 <xFifosInit+0xc>
  }
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000020 	.word	0x20000020

08003784 <xGetterInit>:

void xGetterInit(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
  sGetterHandle * handle;

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	e022      	b.n	80037d6 <xGetterInit+0x52>
  {
    handle = &xHandles[i];
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f640 22d4 	movw	r2, #2772	; 0xad4
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <xGetterInit+0x60>)
 800379c:	4413      	add	r3, r2
 800379e:	603b      	str	r3, [r7, #0]
    CacheClean(handle->BufRx, UART_DMA_BUFFER);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fba6 	bl	8002ef8 <CacheClean>
    HAL_UART_Receive_DMA(handle->xUart, handle->BufRx, UART_DMA_BUFFER);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fb29 	bl	8005e10 <HAL_UART_Receive_DMA>
    handle->RxPointer = handle->xUart->RxXferSize;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80037c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037c8:	461a      	mov	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	f8c3 2acc 	str.w	r2, [r3, #2764]	; 0xacc
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d9d9      	bls.n	8003790 <xGetterInit+0xc>
  }
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000020 	.word	0x20000020

080037e8 <xGetterLoop>:

void xGetterLoop(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b0b6      	sub	sp, #216	; 0xd8
 80037ec:	af00      	add	r7, sp, #0
  uint32_t dmacnt;
  uint32_t length;
  uint32_t dmasize;
  uint8_t tempbuffer[MAX_PACK_LEN / 2];

  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f4:	e0f2      	b.n	80039dc <xGetterLoop+0x1f4>
  {
    handle = &xHandles[i];
 80037f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037fa:	f640 22d4 	movw	r2, #2772	; 0xad4
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	4a7b      	ldr	r2, [pc, #492]	; (80039f0 <xGetterLoop+0x208>)
 8003804:	4413      	add	r3, r2
 8003806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    do
    {
      dmacnt = handle->xUart->hdmarx->Instance->NDTR;
 800380a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800380e:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      dmasize = handle->xUart->RxXferSize;
 800381c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003820:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 8003824:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      if(dmacnt > handle->RxPointer)
 800382c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003830:	f8d3 3acc 	ldr.w	r3, [r3, #2764]	; 0xacc
 8003834:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003838:	429a      	cmp	r2, r3
 800383a:	d90c      	bls.n	8003856 <xGetterLoop+0x6e>
        length = (dmasize-dmacnt)+handle->RxPointer;
 800383c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003844:	1ad2      	subs	r2, r2, r3
 8003846:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800384a:	f8d3 3acc 	ldr.w	r3, [r3, #2764]	; 0xacc
 800384e:	4413      	add	r3, r2
 8003850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003854:	e008      	b.n	8003868 <xGetterLoop+0x80>
      else length = handle->RxPointer-dmacnt;
 8003856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800385a:	f8d3 2acc 	ldr.w	r2, [r3, #2764]	; 0xacc
 800385e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if(length > MAX_PACK_LEN / 2) length = MAX_PACK_LEN / 2;
 8003868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800386c:	2bc0      	cmp	r3, #192	; 0xc0
 800386e:	d902      	bls.n	8003876 <xGetterLoop+0x8e>
 8003870:	23c0      	movs	r3, #192	; 0xc0
 8003872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if(length > 0)
 8003876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d045      	beq.n	800390a <xGetterLoop+0x122>
      {
        CacheInvalidate(handle->BufRx, UART_DMA_BUFFER);
 800387e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003882:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fb16 	bl	8002eb8 <CacheInvalidate>
        for(i=0;i<length;i++)
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003892:	e02a      	b.n	80038ea <xGetterLoop+0x102>
        {
          tempbuffer[i] = handle->BufRx[dmasize-handle->RxPointer];
 8003894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003898:	f8d3 3acc 	ldr.w	r3, [r3, #2764]	; 0xacc
 800389c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80038a6:	5cd1      	ldrb	r1, [r2, r3]
 80038a8:	1d3a      	adds	r2, r7, #4
 80038aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038ae:	4413      	add	r3, r2
 80038b0:	460a      	mov	r2, r1
 80038b2:	701a      	strb	r2, [r3, #0]
          if(handle->RxPointer == 1) handle->RxPointer = dmasize;
 80038b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038b8:	f8d3 3acc 	ldr.w	r3, [r3, #2764]	; 0xacc
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d106      	bne.n	80038ce <xGetterLoop+0xe6>
 80038c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038c8:	f8c3 2acc 	str.w	r2, [r3, #2764]	; 0xacc
 80038cc:	e008      	b.n	80038e0 <xGetterLoop+0xf8>
          else handle->RxPointer--;
 80038ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038d2:	f8d3 3acc 	ldr.w	r3, [r3, #2764]	; 0xacc
 80038d6:	1e5a      	subs	r2, r3, #1
 80038d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038dc:	f8c3 2acc 	str.w	r2, [r3, #2764]	; 0xacc
        for(i=0;i<length;i++)
 80038e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038e4:	3301      	adds	r3, #1
 80038e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d8ce      	bhi.n	8003894 <xGetterLoop+0xac>
        }

        protPushSequence(&handle->xRxFifo, tempbuffer, length);
 80038f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038fa:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 80038fe:	1d39      	adds	r1, r7, #4
 8003900:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fa0a 	bl	8003d1e <protPushSequence>
      }
    } while(length > 0);
 800390a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800390e:	2b00      	cmp	r3, #0
 8003910:	f47f af7b 	bne.w	800380a <xGetterLoop+0x22>

    if(protIsSome(&handle->xRxFifo))
 8003914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003918:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fa75 	bl	8003e0c <protIsSome>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <xGetterLoop+0x148>
    {
      Getter(handle);
 8003928:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800392c:	f7ff fd62 	bl	80033f4 <Getter>
    }

    taskENTER_CRITICAL();
 8003930:	f004 fbf8 	bl	8008124 <vPortEnterCritical>
    if(!handle->TxBusy && protIsSome(&handle->xTxFifo))
 8003934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003938:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d145      	bne.n	80039ce <xGetterLoop+0x1e6>
 8003942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003946:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fa5e 	bl	8003e0c <protIsSome>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d03b      	beq.n	80039ce <xGetterLoop+0x1e6>
    {
      length = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      handle->TxBusy = 1;
 800395c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2ad0 	strb.w	r2, [r3, #2768]	; 0xad0
      taskEXIT_CRITICAL();
 8003966:	f004 fc03 	bl	8008170 <vPortExitCritical>
      while(protPull(&handle->xTxFifo, &handle->BufTx[length++])
 800396a:	bf00      	nop
 800396c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003970:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8003974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800397e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003982:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003986:	4413      	add	r3, r2
 8003988:	4619      	mov	r1, r3
 800398a:	f000 fa06 	bl	8003d9a <protPull>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <xGetterLoop+0x1b6>
          && length < MAX_PACK_LEN);
 8003994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003998:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800399c:	d3e6      	bcc.n	800396c <xGetterLoop+0x184>
      CacheClean(handle->BufTx, length);
 800399e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80039a6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff faa4 	bl	8002ef8 <CacheClean>
      HAL_UART_Transmit_DMA(handle->xUart, handle->BufTx, length);
 80039b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039b4:	f8d3 0a80 	ldr.w	r0, [r3, #2688]	; 0xa80
 80039b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80039c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80039c4:	b292      	uxth	r2, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f002 f9dc 	bl	8005d84 <HAL_UART_Transmit_DMA>
 80039cc:	e001      	b.n	80039d2 <xGetterLoop+0x1ea>
    }
    else taskEXIT_CRITICAL();
 80039ce:	f004 fbcf 	bl	8008170 <vPortExitCritical>
  for(int i = 0; i < sizeof(xHandles) / sizeof(xHandles[0]); i++)
 80039d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039d6:	3301      	adds	r3, #1
 80039d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	f67f af08 	bls.w	80037f6 <xGetterLoop+0xe>
  }
}
 80039e6:	bf00      	nop
 80039e8:	37d8      	adds	r7, #216	; 0xd8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000020 	.word	0x20000020

080039f4 <xGetterTask>:

void xGetterTask(void * arg)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  xGetterInit();
 80039fc:	f7ff fec2 	bl	8003784 <xGetterInit>
  for (;;)
  {
    xGetterLoop();
 8003a00:	f7ff fef2 	bl	80037e8 <xGetterLoop>
    TASK_SLEEP;
 8003a04:	2001      	movs	r0, #1
 8003a06:	f002 fe21 	bl	800664c <osDelay>
    xGetterLoop();
 8003a0a:	e7f9      	b.n	8003a00 <xGetterTask+0xc>

08003a0c <infoGetSize>:
#include "cmsis_os.h"
#include "xProFIFO.h"
#include <string.h>


static inline int infoGetSize(sProInfo* info) {
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    if(info->write >= info->read) return (info->write - info->read);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d305      	bcc.n	8003a2c <infoGetSize+0x20>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	e007      	b.n	8003a3c <infoGetSize+0x30>
    else return (info->capacity - info->read + info->write);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	1ad2      	subs	r2, r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4413      	add	r3, r2
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <infoGetAvail>:

static uint32_t infoGetAvail(sProInfo* info) { return info->capacity-infoGetSize(info); }
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681c      	ldr	r4, [r3, #0]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ffd9 	bl	8003a0c <infoGetSize>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	1ae3      	subs	r3, r4, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd90      	pop	{r4, r7, pc}

08003a66 <infoCorrect>:
static inline uint32_t infoCorrect(sProInfo* info, uint32_t* param, uint32_t move) { return ((*param + move) % info->capacity); }
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a82:	fb02 f201 	mul.w	r2, r2, r1
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <infoMovePar>:
static inline void infoMovePar(sProInfo* info, uint32_t* param, uint32_t move) { *param = (uint32_t)infoCorrect(info,param,move); }
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff ffde 	bl	8003a66 <infoCorrect>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <infoIsSome>:
static uint8_t infoIsSome(sProInfo* info) { return info->read != info->write; }
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <protMovePar>:

static void protMovePar(sProInfo* info, uint32_t* param, uint32_t move) {
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
    xSemaphoreTake(info->lock, portMAX_DELAY);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f04f 31ff 	mov.w	r1, #4294967295
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 fa1a 	bl	8006f2c <xQueueSemaphoreTake>
        infoMovePar(info,param,move);
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff ffc9 	bl	8003a94 <infoMovePar>
    xSemaphoreGive(info->lock);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	68d8      	ldr	r0, [r3, #12]
 8003b06:	2300      	movs	r3, #0
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	f002 fffe 	bl	8006b0c <xQueueGenericSend>
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <protGetSize>:


uint32_t protGetSize(sProFIFO* fifo) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    uint32_t value;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f003 f9ff 	bl	8006f2c <xQueueSemaphoreTake>
        value = infoGetSize(&fifo->info);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff6a 	bl	8003a0c <infoGetSize>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	60fb      	str	r3, [r7, #12]
    xSemaphoreGive(fifo->info.lock);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6918      	ldr	r0, [r3, #16]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2200      	movs	r2, #0
 8003b44:	2100      	movs	r1, #0
 8003b46:	f002 ffe1 	bl	8006b0c <xQueueGenericSend>
    return value;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <protInit>:
        value = infoGetAvail(&fifo->info);
    xSemaphoreGive(fifo->info.lock);
    return value;
}

void protInit(sProFIFO* fifo, void* xBuffer, uint8_t xElemSize, int xCapacity) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]
    fifo->buffer = xBuffer;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	601a      	str	r2, [r3, #0]
    fifo->info.capacity = xCapacity;
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	605a      	str	r2, [r3, #4]
    fifo->info.lock = xSemaphoreCreateMutex();
 8003b70:	2001      	movs	r0, #1
 8003b72:	f003 f8ba 	bl	8006cea <xQueueCreateMutex>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
    fifo->info.globallock = xSemaphoreCreateMutex();
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f003 f8b4 	bl	8006cea <xQueueCreateMutex>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	615a      	str	r2, [r3, #20]
    fifo->info.read = 0;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
    fifo->info.write = 0;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	60da      	str	r2, [r3, #12]
    fifo->info.overflow = 0;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	765a      	strb	r2, [r3, #25]
    fifo->info.elemsize = xElemSize;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	79fa      	ldrb	r2, [r7, #7]
 8003b9e:	761a      	strb	r2, [r3, #24]
}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <interPut>:
        fifo->info.write = 0;
        fifo->info.overflow = 0;
    xSemaphoreGive(fifo->info.lock);
}

static inline void interPut(sProFIFO* fifo, void* xData) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)((uint32_t)fifo->buffer + fifo->info.write * fifo->info.elemsize), (uint8_t*)xData, fifo->info.elemsize);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	7e12      	ldrb	r2, [r2, #24]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	440b      	add	r3, r1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	7e1b      	ldrb	r3, [r3, #24]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6839      	ldr	r1, [r7, #0]
 8003bd0:	f006 f832 	bl	8009c38 <memcpy>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <interGet>:

static inline void interGet(sProFIFO* fifo, void* xData) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + fifo->info.read * fifo->info.elemsize), fifo->info.elemsize);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	7e12      	ldrb	r2, [r2, #24]
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7e1b      	ldrb	r3, [r3, #24]
 8003c00:	461a      	mov	r2, r3
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	f006 f818 	bl	8009c38 <memcpy>
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <interLook>:

static inline void interLook(sProFIFO* fifo, uint32_t xIndex, void* xData) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
    memcpy((uint8_t*)xData, (uint8_t*)((uint32_t)fifo->buffer + xIndex * fifo->info.elemsize), fifo->info.elemsize);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	7e1b      	ldrb	r3, [r3, #24]
 8003c26:	4619      	mov	r1, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	fb03 f301 	mul.w	r3, r3, r1
 8003c2e:	4413      	add	r3, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	7e1b      	ldrb	r3, [r3, #24]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f005 fffd 	bl	8009c38 <memcpy>
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <interPush>:

static inline uint8_t interPush(sProFIFO* fifo, void* xData) {
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    if ((retval = infoGetAvail(&fifo->info))) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fef7 	bl	8003a48 <infoGetAvail>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <interPush+0x38>
        interPut(fifo,xData);
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ff9e 	bl	8003ba8 <interPut>
        infoMovePar(&fifo->info, &fifo->info.write, 1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	1d18      	adds	r0, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	330c      	adds	r3, #12
 8003c74:	2201      	movs	r2, #1
 8003c76:	4619      	mov	r1, r3
 8003c78:	f7ff ff0c 	bl	8003a94 <infoMovePar>
 8003c7c:	e002      	b.n	8003c84 <interPush+0x3e>
    } else { fifo->info.overflow=1; }
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	765a      	strb	r2, [r3, #25]
    return retval;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <interPull>:

static inline uint8_t interPull(sProFIFO* fifo, void* xDest) {
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    if ((retval = infoIsSome(&fifo->info))) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff0b 	bl	8003ab8 <infoIsSome>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	73fb      	strb	r3, [r7, #15]
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <interPull+0x36>
        interGet(fifo,xDest);
 8003cac:	6839      	ldr	r1, [r7, #0]
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff94 	bl	8003bdc <interGet>
        infoMovePar(&fifo->info, &fifo->info.read, 1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	1d18      	adds	r0, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f7ff fee8 	bl	8003a94 <infoMovePar>
    }
    return retval;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <interPushSequence>:

static inline uint8_t interPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
    uint8_t retval; uint32_t i;
    for (i=0; i<xCount; i++) {
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e013      	b.n	8003d08 <interPushSequence+0x3a>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	7e1b      	ldrb	r3, [r3, #24]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	fb03 f202 	mul.w	r2, r3, r2
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4413      	add	r3, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ffa7 	bl	8003c46 <interPush>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	75fb      	strb	r3, [r7, #23]
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <interPushSequence+0x44>
    for (i=0; i<xCount; i++) {
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d3e7      	bcc.n	8003ce0 <interPushSequence+0x12>
 8003d10:	e000      	b.n	8003d14 <interPushSequence+0x46>
        if (!(retval = interPush(fifo, (void*)((uint32_t)xData + i * fifo->info.elemsize)))) { break; }
 8003d12:	bf00      	nop
    }
    return retval;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <protPushSequence>:

uint8_t protPushSequence(sProFIFO* fifo, void* xData, uint32_t xCount) {
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
    uint8_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003d32:	4618      	mov	r0, r3
 8003d34:	f003 f8fa 	bl	8006f2c <xQueueSemaphoreTake>
        retval=interPushSequence(fifo,xData,xCount);
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff ffc6 	bl	8003cce <interPushSequence>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]
    xSemaphoreGive(fifo->info.lock);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6918      	ldr	r0, [r3, #16]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2100      	movs	r1, #0
 8003d50:	f002 fedc 	bl	8006b0c <xQueueGenericSend>
    return retval;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <protPush>:

uint8_t protPush(sProFIFO* fifo, void* xData) {
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
    uint8_t retval;
    xSemaphoreTake(fifo->info.lock, portMAX_DELAY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d70:	4618      	mov	r0, r3
 8003d72:	f003 f8db 	bl	8006f2c <xQueueSemaphoreTake>
        retval=interPush(fifo,xData);
 8003d76:	6839      	ldr	r1, [r7, #0]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff64 	bl	8003c46 <interPush>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
    xSemaphoreGive(fifo->info.lock);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6918      	ldr	r0, [r3, #16]
 8003d86:	2300      	movs	r3, #0
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f002 febe 	bl	8006b0c <xQueueGenericSend>
    return retval;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <protPull>:

uint8_t protPull(sProFIFO* fifo, void* xDest) {
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
    uint8_t retval;
        retval=interPull(fifo,xDest);
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ff71 	bl	8003c8e <interPull>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
    return retval;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <protLook>:

void protLook(sProFIFO* fifo, uint32_t xOffset, void* xDest) {
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
        uint32_t aIndex = infoCorrect(&fifo->info, &fifo->info.read, xOffset);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1d18      	adds	r0, r3, #4
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f7ff fe48 	bl	8003a66 <infoCorrect>
 8003dd6:	6178      	str	r0, [r7, #20]
        interLook(fifo,aIndex,xDest);
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6979      	ldr	r1, [r7, #20]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff ff17 	bl	8003c10 <interLook>
}
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <protMoveRead>:

void protMoveWrite(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.write, amove); }
void protMoveRead(sProFIFO* fifo, uint32_t amove) { protMovePar(&fifo->info, &fifo->info.read, amove); }
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1d18      	adds	r0, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7ff fe6d 	bl	8003ade <protMovePar>
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <protIsSome>:

uint8_t protIsSome(sProFIFO* fifo) { return fifo->info.read != fifo->info.write; }
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e3a:	e003      	b.n	8003e44 <LoopCopyDataInit>

08003e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e42:	3104      	adds	r1, #4

08003e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e44:	480b      	ldr	r0, [pc, #44]	; (8003e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e4c:	d3f6      	bcc.n	8003e3c <CopyDataInit>
  ldr  r2, =_sbss
 8003e4e:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e50:	e002      	b.n	8003e58 <LoopFillZerobss>

08003e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e54:	f842 3b04 	str.w	r3, [r2], #4

08003e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e58:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e5c:	d3f9      	bcc.n	8003e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e5e:	f7fe ffa3 	bl	8002da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e62:	f005 fec5 	bl	8009bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e66:	f7fe f8b3 	bl	8001fd0 <main>
  bx  lr    
 8003e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e6c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8003e70:	0800f9f8 	.word	0x0800f9f8
  ldr  r0, =_sdata
 8003e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e78:	20001810 	.word	0x20001810
  ldr  r2, =_sbss
 8003e7c:	20001810 	.word	0x20001810
  ldr  r3, = _ebss
 8003e80:	20007230 	.word	0x20007230

08003e84 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e84:	e7fe      	b.n	8003e84 <CAN1_RX0_IRQHandler>
	...

08003e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e88:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 0.1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_InitTick+0x3c>)
{
 8003e8c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (10000U / uwTickFreq)) > 0U)
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <HAL_InitTick+0x40>)
 8003e90:	8818      	ldrh	r0, [r3, #0]
 8003e92:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e96:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e9a:	6810      	ldr	r0, [r2, #0]
 8003e9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ea0:	f000 fa84 	bl	80043ac <HAL_SYSTICK_Config>
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	b958      	cbnz	r0, 8003ec0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ea8:	2d0f      	cmp	r5, #15
 8003eaa:	d809      	bhi.n	8003ec0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eac:	4602      	mov	r2, r0
 8003eae:	4629      	mov	r1, r5
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f000 fa3a 	bl	800432c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <HAL_InitTick+0x44>)
 8003eba:	4620      	mov	r0, r4
 8003ebc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	e7fc      	b.n	8003ebe <HAL_InitTick+0x36>
 8003ec4:	200015e0 	.word	0x200015e0
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	200015e4 	.word	0x200015e4

08003ed0 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8003ed0:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ed2:	2003      	movs	r0, #3
{
 8003ed4:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003edc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ede:	f000 fa13 	bl	8004308 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ee2:	200f      	movs	r0, #15
 8003ee4:	f7ff ffd0 	bl	8003e88 <HAL_InitTick>
  HAL_MspInit();
 8003ee8:	f7fe fc80 	bl	80027ec <HAL_MspInit>
}
 8003eec:	2000      	movs	r0, #0
 8003eee:	bd08      	pop	{r3, pc}
 8003ef0:	40023c00 	.word	0x40023c00

08003ef4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003ef4:	4a03      	ldr	r2, [pc, #12]	; (8003f04 <HAL_IncTick+0x10>)
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <HAL_IncTick+0x14>)
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	440b      	add	r3, r1
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	200071e8 	.word	0x200071e8
 8003f08:	200015e0 	.word	0x200015e0

08003f0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f0c:	4b01      	ldr	r3, [pc, #4]	; (8003f14 <HAL_GetTick+0x8>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
}
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	200071e8 	.word	0x200071e8

08003f18 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8003f18:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8003f1a:	4c07      	ldr	r4, [pc, #28]	; (8003f38 <HAL_SetTickFreq+0x20>)
 8003f1c:	8825      	ldrh	r5, [r4, #0]
 8003f1e:	4285      	cmp	r5, r0
 8003f20:	d007      	beq.n	8003f32 <HAL_SetTickFreq+0x1a>

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_SetTickFreq+0x24>)
    uwTickFreq = Freq;
 8003f24:	8020      	strh	r0, [r4, #0]
    status = HAL_InitTick(uwTickPrio);
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	f7ff ffae 	bl	8003e88 <HAL_InitTick>

    if (status != HAL_OK)
 8003f2c:	b100      	cbz	r0, 8003f30 <HAL_SetTickFreq+0x18>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8003f2e:	8025      	strh	r5, [r4, #0]
    }
  }

  return status;
}
 8003f30:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 8003f32:	2000      	movs	r0, #0
 8003f34:	e7fc      	b.n	8003f30 <HAL_SetTickFreq+0x18>
 8003f36:	bf00      	nop
 8003f38:	200015e0 	.word	0x200015e0
 8003f3c:	200015e4 	.word	0x200015e4

08003f40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f40:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f42:	4604      	mov	r4, r0
 8003f44:	2800      	cmp	r0, #0
 8003f46:	f000 809b 	beq.w	8004080 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f4a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003f4c:	b925      	cbnz	r5, 8003f58 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f4e:	f7fe fc75 	bl	800283c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f52:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f54:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f5a:	06db      	lsls	r3, r3, #27
 8003f5c:	f100 808e 	bmi.w	800407c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f66:	f023 0302 	bic.w	r3, r3, #2
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f70:	4b44      	ldr	r3, [pc, #272]	; (8004084 <HAL_ADC_Init+0x144>)
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003f78:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	6861      	ldr	r1, [r4, #4]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f82:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f84:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f94:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f96:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f9e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fa4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fa6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb4:	4934      	ldr	r1, [pc, #208]	; (8004088 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fb6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003fba:	428a      	cmp	r2, r1
 8003fbc:	d052      	beq.n	8004064 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8003fc4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc6:	6899      	ldr	r1, [r3, #8]
 8003fc8:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fda:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fdc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fde:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fe0:	f022 0202 	bic.w	r2, r2, #2
 8003fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fee:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003ff2:	2a00      	cmp	r2, #0
 8003ff4:	d03e      	beq.n	8004074 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ff6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ff8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffe:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004000:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004008:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004010:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8004012:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004016:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004018:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800401c:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004026:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800403a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800403c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800404c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800404e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800405c:	2300      	movs	r3, #0
 800405e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004062:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800406a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004072:	e7b2      	b.n	8003fda <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800407a:	e7c9      	b.n	8004010 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800407c:	2001      	movs	r0, #1
 800407e:	e7ed      	b.n	800405c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8004080:	2001      	movs	r0, #1
 8004082:	e7ee      	b.n	8004062 <HAL_ADC_Init+0x122>
 8004084:	40012300 	.word	0x40012300
 8004088:	0f000001 	.word	0x0f000001

0800408c <HAL_ADC_ConvCpltCallback>:
 800408c:	4770      	bx	lr

0800408e <HAL_ADC_LevelOutOfWindowCallback>:
 800408e:	4770      	bx	lr

08004090 <HAL_ADC_ErrorCallback>:
 8004090:	4770      	bx	lr

08004092 <HAL_ADC_IRQHandler>:
{
 8004092:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004094:	6803      	ldr	r3, [r0, #0]
{
 8004096:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004098:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800409a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800409c:	078d      	lsls	r5, r1, #30
 800409e:	d52b      	bpl.n	80040f8 <HAL_ADC_IRQHandler+0x66>
 80040a0:	0690      	lsls	r0, r2, #26
 80040a2:	d529      	bpl.n	80040f8 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040a6:	06d1      	lsls	r1, r2, #27
 80040a8:	d403      	bmi.n	80040b2 <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80040aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b0:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80040b8:	d117      	bne.n	80040ea <HAL_ADC_IRQHandler+0x58>
 80040ba:	69a2      	ldr	r2, [r4, #24]
 80040bc:	b9aa      	cbnz	r2, 80040ea <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040c0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80040c4:	d002      	beq.n	80040cc <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040c6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040c8:	0552      	lsls	r2, r2, #21
 80040ca:	d40e      	bmi.n	80040ea <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	f022 0220 	bic.w	r2, r2, #32
 80040d2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040da:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040de:	04db      	lsls	r3, r3, #19
 80040e0:	d403      	bmi.n	80040ea <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ffce 	bl	800408c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	f06f 0212 	mvn.w	r2, #18
 80040f6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80040fc:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80040fe:	074d      	lsls	r5, r1, #29
 8004100:	d532      	bpl.n	8004168 <HAL_ADC_IRQHandler+0xd6>
 8004102:	0610      	lsls	r0, r2, #24
 8004104:	d530      	bpl.n	8004168 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004106:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004108:	06d1      	lsls	r1, r2, #27
 800410a:	d403      	bmi.n	8004114 <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800410c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800410e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004112:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800411a:	d11e      	bne.n	800415a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800411c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800411e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8004122:	d002      	beq.n	800412a <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004124:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004126:	0552      	lsls	r2, r2, #21
 8004128:	d417      	bmi.n	800415a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800412a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800412c:	0555      	lsls	r5, r2, #21
 800412e:	d414      	bmi.n	800415a <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004130:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004132:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8004136:	d110      	bne.n	800415a <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004138:	69a2      	ldr	r2, [r4, #24]
 800413a:	b972      	cbnz	r2, 800415a <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004142:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800414a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800414c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800414e:	05d8      	lsls	r0, r3, #23
 8004150:	d403      	bmi.n	800415a <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800415a:	4620      	mov	r0, r4
 800415c:	f000 f8d2 	bl	8004304 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f06f 020c 	mvn.w	r2, #12
 8004166:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800416c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800416e:	07c9      	lsls	r1, r1, #31
 8004170:	d50f      	bpl.n	8004192 <HAL_ADC_IRQHandler+0x100>
 8004172:	0655      	lsls	r5, r2, #25
 8004174:	d50d      	bpl.n	8004192 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	07d8      	lsls	r0, r3, #31
 800417a:	d50a      	bpl.n	8004192 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800417c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800417e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004186:	f7ff ff82 	bl	800408e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	f06f 0201 	mvn.w	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004196:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8004198:	0689      	lsls	r1, r1, #26
 800419a:	d50d      	bpl.n	80041b8 <HAL_ADC_IRQHandler+0x126>
 800419c:	0152      	lsls	r2, r2, #5
 800419e:	d50b      	bpl.n	80041b8 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041a2:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 80041a6:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041a8:	f042 0202 	orr.w	r2, r2, #2
 80041ac:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041ae:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80041b0:	f7ff ff6e 	bl	8004090 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	601d      	str	r5, [r3, #0]
}
 80041b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080041bc <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80041bc:	2300      	movs	r3, #0
{
 80041be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80041c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80041c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d074      	beq.n	80042b4 <HAL_ADC_ConfigChannel+0xf8>
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80041ca:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80041cc:	2301      	movs	r3, #1
 80041ce:	688a      	ldr	r2, [r1, #8]
 80041d0:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80041d2:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80041d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80041d8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 80041dc:	6803      	ldr	r3, [r0, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80041de:	d931      	bls.n	8004244 <HAL_ADC_ConfigChannel+0x88>
 80041e0:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80041e4:	d02e      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041e6:	3c1e      	subs	r4, #30
 80041e8:	f04f 0c07 	mov.w	ip, #7
 80041ec:	68df      	ldr	r7, [r3, #12]
 80041ee:	fa0c fc04 	lsl.w	ip, ip, r4
 80041f2:	ea27 070c 	bic.w	r7, r7, ip
 80041f6:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041f8:	4f3d      	ldr	r7, [pc, #244]	; (80042f0 <HAL_ADC_ConfigChannel+0x134>)
 80041fa:	42bd      	cmp	r5, r7
 80041fc:	d11d      	bne.n	800423a <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80041fe:	68dc      	ldr	r4, [r3, #12]
 8004200:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004204:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8004206:	6849      	ldr	r1, [r1, #4]
 8004208:	2906      	cmp	r1, #6
 800420a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800420e:	d827      	bhi.n	8004260 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004210:	3a05      	subs	r2, #5
 8004212:	241f      	movs	r4, #31
 8004214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004216:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004218:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800421c:	ea21 0104 	bic.w	r1, r1, r4
 8004220:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004222:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004224:	430a      	orrs	r2, r1
 8004226:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004228:	4a32      	ldr	r2, [pc, #200]	; (80042f4 <HAL_ADC_ConfigChannel+0x138>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d034      	beq.n	8004298 <HAL_ADC_ConfigChannel+0xdc>
  __HAL_UNLOCK(hadc);
 800422e:	2300      	movs	r3, #0
 8004230:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004234:	4618      	mov	r0, r3
}
 8004236:	b003      	add	sp, #12
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800423a:	68df      	ldr	r7, [r3, #12]
 800423c:	fa02 f404 	lsl.w	r4, r2, r4
 8004240:	433c      	orrs	r4, r7
 8004242:	e7df      	b.n	8004204 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004244:	f04f 0c07 	mov.w	ip, #7
 8004248:	691f      	ldr	r7, [r3, #16]
 800424a:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800424e:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004252:	ea27 070c 	bic.w	r7, r7, ip
 8004256:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004258:	691f      	ldr	r7, [r3, #16]
 800425a:	433c      	orrs	r4, r7
 800425c:	611c      	str	r4, [r3, #16]
 800425e:	e7d2      	b.n	8004206 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8004260:	290c      	cmp	r1, #12
 8004262:	f04f 011f 	mov.w	r1, #31
 8004266:	d80b      	bhi.n	8004280 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004268:	3a23      	subs	r2, #35	; 0x23
 800426a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800426c:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800426e:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004272:	ea24 0101 	bic.w	r1, r4, r1
 8004276:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004278:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800427a:	430a      	orrs	r2, r1
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
 800427e:	e7d3      	b.n	8004228 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004280:	3a41      	subs	r2, #65	; 0x41
 8004282:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004284:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004286:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800428a:	ea24 0101 	bic.w	r1, r4, r1
 800428e:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004292:	430a      	orrs	r2, r1
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c
 8004296:	e7c7      	b.n	8004228 <HAL_ADC_ConfigChannel+0x6c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004298:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800429c:	d10c      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0xfc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_ADC_ConfigChannel+0x13c>)
 80042a0:	6853      	ldr	r3, [r2, #4]
 80042a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    ADC->CCR |= ADC_CCR_VBATE;
 80042a6:	6053      	str	r3, [r2, #4]
 80042a8:	e7c1      	b.n	800422e <HAL_ADC_ConfigChannel+0x72>
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <HAL_ADC_ConfigChannel+0x13c>)
 80042ac:	6853      	ldr	r3, [r2, #4]
 80042ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042b2:	e7f8      	b.n	80042a6 <HAL_ADC_ConfigChannel+0xea>
  __HAL_LOCK(hadc);
 80042b4:	2002      	movs	r0, #2
 80042b6:	e7be      	b.n	8004236 <HAL_ADC_ConfigChannel+0x7a>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042b8:	2d12      	cmp	r5, #18
 80042ba:	d0f6      	beq.n	80042aa <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_ADC_ConfigChannel+0x134>)
 80042be:	429d      	cmp	r5, r3
 80042c0:	d001      	beq.n	80042c6 <HAL_ADC_ConfigChannel+0x10a>
 80042c2:	2d11      	cmp	r5, #17
 80042c4:	d1b3      	bne.n	800422e <HAL_ADC_ConfigChannel+0x72>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80042c6:	490c      	ldr	r1, [pc, #48]	; (80042f8 <HAL_ADC_ConfigChannel+0x13c>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042c8:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 80042ca:	684a      	ldr	r2, [r1, #4]
 80042cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042d0:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042d2:	d1ac      	bne.n	800422e <HAL_ADC_ConfigChannel+0x72>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_ADC_ConfigChannel+0x140>)
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <HAL_ADC_ConfigChannel+0x144>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	fbb3 f2f2 	udiv	r2, r3, r2
 80042de:	230a      	movs	r3, #10
 80042e0:	4353      	muls	r3, r2
        counter--;
 80042e2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80042e4:	9b01      	ldr	r3, [sp, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0a1      	beq.n	800422e <HAL_ADC_ConfigChannel+0x72>
        counter--;
 80042ea:	9b01      	ldr	r3, [sp, #4]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	e7f8      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x126>
 80042f0:	10000012 	.word	0x10000012
 80042f4:	40012000 	.word	0x40012000
 80042f8:	40012300 	.word	0x40012300
 80042fc:	20000000 	.word	0x20000000
 8004300:	000f4240 	.word	0x000f4240

08004304 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004304:	4770      	bx	lr
	...

08004308 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004308:	4a07      	ldr	r2, [pc, #28]	; (8004328 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800430a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800430c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800430e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004312:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800431e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004322:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004324:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800432e:	b570      	push	{r4, r5, r6, lr}
 8004330:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004332:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004336:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800433a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004340:	2d04      	cmp	r5, #4
 8004342:	bf28      	it	cs
 8004344:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004346:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434c:	bf8c      	ite	hi
 800434e:	3c03      	subhi	r4, #3
 8004350:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8004352:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	ea21 0303 	bic.w	r3, r1, r3
 8004358:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800435c:	fa06 f404 	lsl.w	r4, r6, r4
 8004360:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	ea43 0304 	orr.w	r3, r3, r4
 8004368:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800436c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800436e:	db06      	blt.n	800437e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004370:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004374:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004378:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800437c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437e:	f000 000f 	and.w	r0, r0, #15
 8004382:	4a02      	ldr	r2, [pc, #8]	; (800438c <HAL_NVIC_SetPriority+0x60>)
 8004384:	5413      	strb	r3, [r2, r0]
 8004386:	e7f9      	b.n	800437c <HAL_NVIC_SetPriority+0x50>
 8004388:	e000ed00 	.word	0xe000ed00
 800438c:	e000ed14 	.word	0xe000ed14

08004390 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004390:	2800      	cmp	r0, #0
 8004392:	db08      	blt.n	80043a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004394:	0942      	lsrs	r2, r0, #5
 8004396:	2301      	movs	r3, #1
 8004398:	f000 001f 	and.w	r0, r0, #31
 800439c:	fa03 f000 	lsl.w	r0, r3, r0
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <HAL_NVIC_EnableIRQ+0x18>)
 80043a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043a6:	4770      	bx	lr
 80043a8:	e000e100 	.word	0xe000e100

080043ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043ac:	3801      	subs	r0, #1
 80043ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80043b2:	d20a      	bcs.n	80043ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	21f0      	movs	r1, #240	; 0xf0
 80043b8:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ba:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043bc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043be:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80043ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80043da:	0896      	lsrs	r6, r2, #2
 80043dc:	460b      	mov	r3, r1
 80043de:	6805      	ldr	r5, [r0, #0]
 80043e0:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80043e4:	42bb      	cmp	r3, r7
 80043e6:	d108      	bne.n	80043fa <CRC_Handle_8+0x22>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80043e8:	f012 0203 	ands.w	r2, r2, #3
 80043ec:	d01e      	beq.n	800442c <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 80043ee:	2a01      	cmp	r2, #1
 80043f0:	d114      	bne.n	800441c <CRC_Handle_8+0x44>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80043f2:	f811 3026 	ldrb.w	r3, [r1, r6, lsl #2]
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80043f6:	702b      	strb	r3, [r5, #0]
 80043f8:	e018      	b.n	800442c <CRC_Handle_8+0x54>
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80043fa:	785c      	ldrb	r4, [r3, #1]
 80043fc:	3304      	adds	r3, #4
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80043fe:	f813 cc04 	ldrb.w	ip, [r3, #-4]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004402:	0424      	lsls	r4, r4, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004404:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004408:	f813 cc01 	ldrb.w	ip, [r3, #-1]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800440c:	ea44 040c 	orr.w	r4, r4, ip
 8004410:	f813 cc02 	ldrb.w	ip, [r3, #-2]
 8004414:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004418:	602c      	str	r4, [r5, #0]
 800441a:	e7e3      	b.n	80043e4 <CRC_Handle_8+0xc>
    if ((BufferLength % 4U) == 2U)
 800441c:	2a02      	cmp	r2, #2
 800441e:	d108      	bne.n	8004432 <CRC_Handle_8+0x5a>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004420:	f811 2026 	ldrb.w	r2, [r1, r6, lsl #2]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 800442a:	802b      	strh	r3, [r5, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800442c:	6803      	ldr	r3, [r0, #0]
 800442e:	6818      	ldr	r0, [r3, #0]
}
 8004430:	bdf0      	pop	{r4, r5, r6, r7, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004432:	785a      	ldrb	r2, [r3, #1]
 8004434:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 8004438:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      *pReg = data;
 800443c:	802a      	strh	r2, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800443e:	789b      	ldrb	r3, [r3, #2]
 8004440:	e7d9      	b.n	80043f6 <CRC_Handle_8+0x1e>

08004442 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004442:	b570      	push	{r4, r5, r6, lr}
 8004444:	6800      	ldr	r0, [r0, #0]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004446:	0855      	lsrs	r5, r2, #1
 8004448:	2300      	movs	r3, #0
 800444a:	429d      	cmp	r5, r3
 800444c:	d106      	bne.n	800445c <CRC_Handle_16+0x1a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
 800444e:	07d3      	lsls	r3, r2, #31
 8004450:	d502      	bpl.n	8004458 <CRC_Handle_16+0x16>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8004452:	f831 3025 	ldrh.w	r3, [r1, r5, lsl #2]
 8004456:	8003      	strh	r3, [r0, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004458:	6800      	ldr	r0, [r0, #0]
}
 800445a:	bd70      	pop	{r4, r5, r6, pc}
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800445c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8004460:	f831 6023 	ldrh.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004464:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004466:	8864      	ldrh	r4, [r4, #2]
 8004468:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800446c:	6004      	str	r4, [r0, #0]
 800446e:	e7ec      	b.n	800444a <CRC_Handle_16+0x8>

08004470 <HAL_CRC_MspInit>:
}
 8004470:	4770      	bx	lr
	...

08004474 <HAL_CRC_Init>:
{
 8004474:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8004476:	4604      	mov	r4, r0
 8004478:	b908      	cbnz	r0, 800447e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800447a:	2001      	movs	r0, #1
}
 800447c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800447e:	7f43      	ldrb	r3, [r0, #29]
 8004480:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004484:	b913      	cbnz	r3, 800448c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004486:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004488:	f7ff fff2 	bl	8004470 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800448c:	2302      	movs	r3, #2
 800448e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004490:	7923      	ldrb	r3, [r4, #4]
 8004492:	b9e3      	cbnz	r3, 80044ce <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <HAL_CRC_Init+0x70>)
 8004498:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	f022 0218 	bic.w	r2, r2, #24
 80044a0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80044a2:	7962      	ldrb	r2, [r4, #5]
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	b9d2      	cbnz	r2, 80044de <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80044ac:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80044ae:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	6961      	ldr	r1, [r4, #20]
 80044b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044b8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80044ba:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80044bc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c4:	430a      	orrs	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80044c8:	2301      	movs	r3, #1
 80044ca:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80044cc:	e7d6      	b.n	800447c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80044ce:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 f82c 	bl	8004530 <HAL_CRCEx_Polynomial_Set>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d0e2      	beq.n	80044a2 <HAL_CRC_Init+0x2e>
 80044dc:	e7cd      	b.n	800447a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80044de:	6922      	ldr	r2, [r4, #16]
 80044e0:	e7e4      	b.n	80044ac <HAL_CRC_Init+0x38>
 80044e2:	bf00      	nop
 80044e4:	04c11db7 	.word	0x04c11db7

080044e8 <HAL_CRC_Calculate>:
{
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 80044ea:	2502      	movs	r5, #2
{
 80044ec:	4604      	mov	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 80044ee:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80044f0:	6805      	ldr	r5, [r0, #0]
 80044f2:	68af      	ldr	r7, [r5, #8]
 80044f4:	f047 0701 	orr.w	r7, r7, #1
 80044f8:	60af      	str	r7, [r5, #8]
  switch (hcrc->InputDataFormat)
 80044fa:	6a07      	ldr	r7, [r0, #32]
 80044fc:	2f02      	cmp	r7, #2
 80044fe:	d012      	beq.n	8004526 <HAL_CRC_Calculate+0x3e>
 8004500:	2f03      	cmp	r7, #3
 8004502:	d004      	beq.n	800450e <HAL_CRC_Calculate+0x26>
 8004504:	2f01      	cmp	r7, #1
 8004506:	d111      	bne.n	800452c <HAL_CRC_Calculate+0x44>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004508:	f7ff ff66 	bl	80043d8 <CRC_Handle_8>
      break;
 800450c:	e004      	b.n	8004518 <HAL_CRC_Calculate+0x30>
 800450e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
      for (index = 0U; index < BufferLength; index++)
 8004512:	42b1      	cmp	r1, r6
 8004514:	d103      	bne.n	800451e <HAL_CRC_Calculate+0x36>
      temp = hcrc->Instance->DR;
 8004516:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8004518:	2301      	movs	r3, #1
 800451a:	7763      	strb	r3, [r4, #29]
}
 800451c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcrc->Instance->DR = pBuffer[index];
 800451e:	f851 3b04 	ldr.w	r3, [r1], #4
 8004522:	602b      	str	r3, [r5, #0]
 8004524:	e7f5      	b.n	8004512 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004526:	f7ff ff8c 	bl	8004442 <CRC_Handle_16>
      break;
 800452a:	e7f5      	b.n	8004518 <HAL_CRC_Calculate+0x30>
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800452c:	2000      	movs	r0, #0
 800452e:	e7f3      	b.n	8004518 <HAL_CRC_Calculate+0x30>

08004530 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004530:	231f      	movs	r3, #31
{
 8004532:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004534:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004538:	d306      	bcc.n	8004548 <HAL_CRCEx_Polynomial_Set+0x18>
 800453a:	fa21 f403 	lsr.w	r4, r1, r3
 800453e:	07e4      	lsls	r4, r4, #31
 8004540:	d5f8      	bpl.n	8004534 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004542:	2a08      	cmp	r2, #8
 8004544:	d014      	beq.n	8004570 <HAL_CRCEx_Polynomial_Set+0x40>
 8004546:	d802      	bhi.n	800454e <HAL_CRCEx_Polynomial_Set+0x1e>
 8004548:	b13a      	cbz	r2, 800455a <HAL_CRCEx_Polynomial_Set+0x2a>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800454a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800454c:	e00d      	b.n	800456a <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 800454e:	2a10      	cmp	r2, #16
 8004550:	d00c      	beq.n	800456c <HAL_CRCEx_Polynomial_Set+0x3c>
 8004552:	2a18      	cmp	r2, #24
 8004554:	d1f9      	bne.n	800454a <HAL_CRCEx_Polynomial_Set+0x1a>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004556:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004558:	d8f7      	bhi.n	800454a <HAL_CRCEx_Polynomial_Set+0x1a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800455e:	6883      	ldr	r3, [r0, #8]
 8004560:	f023 0318 	bic.w	r3, r3, #24
 8004564:	431a      	orrs	r2, r3
 8004566:	6082      	str	r2, [r0, #8]
 8004568:	2000      	movs	r0, #0
}
 800456a:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800456c:	2b07      	cmp	r3, #7
 800456e:	e7f3      	b.n	8004558 <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004570:	2b0f      	cmp	r3, #15
 8004572:	e7f1      	b.n	8004558 <HAL_CRCEx_Polynomial_Set+0x28>

08004574 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004574:	6803      	ldr	r3, [r0, #0]
 8004576:	2118      	movs	r1, #24
 8004578:	b2da      	uxtb	r2, r3
 800457a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457e:	3a10      	subs	r2, #16
 8004580:	f023 0303 	bic.w	r3, r3, #3
 8004584:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004588:	4904      	ldr	r1, [pc, #16]	; (800459c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800458a:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800458c:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800458e:	bf88      	it	hi
 8004590:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004592:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004594:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8004596:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	0800d87c 	.word	0x0800d87c

080045a0 <HAL_DMA_Init>:
{
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045a4:	f7ff fcb2 	bl	8003f0c <HAL_GetTick>
 80045a8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80045aa:	2c00      	cmp	r4, #0
 80045ac:	d071      	beq.n	8004692 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80045ae:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80045b0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80045b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80045bc:	6813      	ldr	r3, [r2, #0]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	680b      	ldr	r3, [r1, #0]
 80045c8:	07d8      	lsls	r0, r3, #31
 80045ca:	d43c      	bmi.n	8004646 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80045cc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045ce:	4d32      	ldr	r5, [pc, #200]	; (8004698 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045d2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80045d8:	4313      	orrs	r3, r2
 80045da:	68e2      	ldr	r2, [r4, #12]
 80045dc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045de:	6922      	ldr	r2, [r4, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	6962      	ldr	r2, [r4, #20]
 80045e4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e6:	69e2      	ldr	r2, [r4, #28]
 80045e8:	4303      	orrs	r3, r0
 80045ea:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ec:	6a22      	ldr	r2, [r4, #32]
 80045ee:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045f2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045f4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045f8:	bf02      	ittt	eq
 80045fa:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80045fe:	4335      	orreq	r5, r6
 8004600:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004602:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8004604:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8004606:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004608:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800460c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004610:	d10b      	bne.n	800462a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8004612:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004614:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8004616:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004618:	b13d      	cbz	r5, 800462a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800461a:	b9f8      	cbnz	r0, 800465c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800461c:	2a01      	cmp	r2, #1
 800461e:	d02d      	beq.n	800467c <HAL_DMA_Init+0xdc>
 8004620:	d301      	bcc.n	8004626 <HAL_DMA_Init+0x86>
 8004622:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004624:	d101      	bne.n	800462a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004626:	01ea      	lsls	r2, r5, #7
 8004628:	d42b      	bmi.n	8004682 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800462a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff ffa1 	bl	8004574 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004632:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004634:	233f      	movs	r3, #63	; 0x3f
 8004636:	4093      	lsls	r3, r2
 8004638:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800463c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004640:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004644:	e009      	b.n	800465a <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004646:	f7ff fc61 	bl	8003f0c <HAL_GetTick>
 800464a:	1b40      	subs	r0, r0, r5
 800464c:	2805      	cmp	r0, #5
 800464e:	d9b9      	bls.n	80045c4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004650:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004652:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004654:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004656:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800465a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800465c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004660:	d113      	bne.n	800468a <HAL_DMA_Init+0xea>
    switch (tmp)
 8004662:	2a03      	cmp	r2, #3
 8004664:	d8e1      	bhi.n	800462a <HAL_DMA_Init+0x8a>
 8004666:	a001      	add	r0, pc, #4	; (adr r0, 800466c <HAL_DMA_Init+0xcc>)
 8004668:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800466c:	08004683 	.word	0x08004683
 8004670:	08004627 	.word	0x08004627
 8004674:	08004683 	.word	0x08004683
 8004678:	0800467d 	.word	0x0800467d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800467c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004680:	d1d3      	bne.n	800462a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004682:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8004684:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004686:	6563      	str	r3, [r4, #84]	; 0x54
 8004688:	e7e5      	b.n	8004656 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800468a:	2a02      	cmp	r2, #2
 800468c:	d9f9      	bls.n	8004682 <HAL_DMA_Init+0xe2>
 800468e:	2a03      	cmp	r2, #3
 8004690:	e7c8      	b.n	8004624 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8004692:	2001      	movs	r0, #1
 8004694:	e7e1      	b.n	800465a <HAL_DMA_Init+0xba>
 8004696:	bf00      	nop
 8004698:	e010803f 	.word	0xe010803f

0800469c <HAL_DMA_Start_IT>:
{
 800469c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800469e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80046a2:	2c01      	cmp	r4, #1
 80046a4:	d035      	beq.n	8004712 <HAL_DMA_Start_IT+0x76>
 80046a6:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046a8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80046aa:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 80046ac:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80046b0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80046b4:	2c01      	cmp	r4, #1
 80046b6:	f04f 0402 	mov.w	r4, #2
 80046ba:	d128      	bne.n	800470e <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80046bc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046c0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c2:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046c4:	6825      	ldr	r5, [r4, #0]
 80046c6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80046ca:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80046cc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ce:	6883      	ldr	r3, [r0, #8]
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	d119      	bne.n	8004708 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80046d4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80046d6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80046da:	233f      	movs	r3, #63	; 0x3f
 80046dc:	4093      	lsls	r3, r2
 80046de:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	f043 0316 	orr.w	r3, r3, #22
 80046e6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80046e8:	6963      	ldr	r3, [r4, #20]
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80046f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80046f2:	b11b      	cbz	r3, 80046fc <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	f043 0308 	orr.w	r3, r3, #8
 80046fa:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80046fc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6023      	str	r3, [r4, #0]
}
 8004706:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8004708:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800470a:	60e2      	str	r2, [r4, #12]
 800470c:	e7e4      	b.n	80046d8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800470e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8004712:	2002      	movs	r0, #2
 8004714:	e7f7      	b.n	8004706 <HAL_DMA_Start_IT+0x6a>

08004716 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004716:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800471a:	2b02      	cmp	r3, #2
 800471c:	d003      	beq.n	8004726 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004722:	2001      	movs	r0, #1
 8004724:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004726:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004728:	2305      	movs	r3, #5
 800472a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 800472e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	6013      	str	r3, [r2, #0]
}
 8004738:	4770      	bx	lr
	...

0800473c <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 800473c:	2300      	movs	r3, #0
{
 800473e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8004740:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004742:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8004744:	4b5b      	ldr	r3, [pc, #364]	; (80048b4 <HAL_DMA_IRQHandler+0x178>)
{
 8004746:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004748:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 800474a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800474c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800474e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004750:	409a      	lsls	r2, r3
 8004752:	4232      	tst	r2, r6
 8004754:	d00c      	beq.n	8004770 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004756:	6801      	ldr	r1, [r0, #0]
 8004758:	6808      	ldr	r0, [r1, #0]
 800475a:	0740      	lsls	r0, r0, #29
 800475c:	d508      	bpl.n	8004770 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800475e:	6808      	ldr	r0, [r1, #0]
 8004760:	f020 0004 	bic.w	r0, r0, #4
 8004764:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004766:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004768:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004770:	2201      	movs	r2, #1
 8004772:	409a      	lsls	r2, r3
 8004774:	4232      	tst	r2, r6
 8004776:	d008      	beq.n	800478a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004778:	6821      	ldr	r1, [r4, #0]
 800477a:	6949      	ldr	r1, [r1, #20]
 800477c:	0609      	lsls	r1, r1, #24
 800477e:	d504      	bpl.n	800478a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004780:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004782:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004784:	f042 0202 	orr.w	r2, r2, #2
 8004788:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800478a:	2204      	movs	r2, #4
 800478c:	409a      	lsls	r2, r3
 800478e:	4232      	tst	r2, r6
 8004790:	d008      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004792:	6821      	ldr	r1, [r4, #0]
 8004794:	6809      	ldr	r1, [r1, #0]
 8004796:	0788      	lsls	r0, r1, #30
 8004798:	d504      	bpl.n	80047a4 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800479a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800479c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800479e:	f042 0204 	orr.w	r2, r2, #4
 80047a2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047a4:	2210      	movs	r2, #16
 80047a6:	409a      	lsls	r2, r3
 80047a8:	4232      	tst	r2, r6
 80047aa:	d010      	beq.n	80047ce <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	6819      	ldr	r1, [r3, #0]
 80047b0:	0709      	lsls	r1, r1, #28
 80047b2:	d50c      	bpl.n	80047ce <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047b4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	0350      	lsls	r0, r2, #13
 80047ba:	d537      	bpl.n	800482c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	0319      	lsls	r1, r3, #12
 80047c0:	d401      	bmi.n	80047c6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80047c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c4:	e000      	b.n	80047c8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80047c8:	b10b      	cbz	r3, 80047ce <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80047ca:	4620      	mov	r0, r4
 80047cc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047ce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80047d0:	2220      	movs	r2, #32
 80047d2:	408a      	lsls	r2, r1
 80047d4:	4232      	tst	r2, r6
 80047d6:	d03a      	beq.n	800484e <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	06c6      	lsls	r6, r0, #27
 80047de:	d536      	bpl.n	800484e <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047e0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047e2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80047e6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047e8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ea:	d127      	bne.n	800483c <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ec:	f022 0216 	bic.w	r2, r2, #22
 80047f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047fc:	b90a      	cbnz	r2, 8004802 <HAL_DMA_IRQHandler+0xc6>
 80047fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004800:	b11a      	cbz	r2, 800480a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	f022 0208 	bic.w	r2, r2, #8
 8004808:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800480a:	233f      	movs	r3, #63	; 0x3f
 800480c:	408b      	lsls	r3, r1
 800480e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8004810:	2300      	movs	r3, #0
 8004812:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004816:	2301      	movs	r3, #1
 8004818:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800481c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800481e:	2b00      	cmp	r3, #0
 8004820:	d045      	beq.n	80048ae <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8004822:	4620      	mov	r0, r4
}
 8004824:	b003      	add	sp, #12
 8004826:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800482a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	05d2      	lsls	r2, r2, #23
 8004830:	d4c7      	bmi.n	80047c2 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	f022 0208 	bic.w	r2, r2, #8
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e7c2      	b.n	80047c2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800483c:	0350      	lsls	r0, r2, #13
 800483e:	d527      	bpl.n	8004890 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	0319      	lsls	r1, r3, #12
 8004844:	d431      	bmi.n	80048aa <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8004846:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004848:	b10b      	cbz	r3, 800484e <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800484a:	4620      	mov	r0, r4
 800484c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800484e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004850:	b36b      	cbz	r3, 80048ae <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004852:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004854:	07da      	lsls	r2, r3, #31
 8004856:	d519      	bpl.n	800488c <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004858:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800485a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800485c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004860:	6813      	ldr	r3, [r2, #0]
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8004868:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800486c:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8004870:	9b01      	ldr	r3, [sp, #4]
 8004872:	3301      	adds	r3, #1
 8004874:	42bb      	cmp	r3, r7
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	d802      	bhi.n	8004880 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	07db      	lsls	r3, r3, #31
 800487e:	d4f7      	bmi.n	8004870 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8004880:	2300      	movs	r3, #0
 8004882:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004886:	2301      	movs	r3, #1
 8004888:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800488c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800488e:	e7c6      	b.n	800481e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004896:	d108      	bne.n	80048aa <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	f021 0110 	bic.w	r1, r1, #16
 800489e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80048a0:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80048a2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80048a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80048aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048ac:	e7cc      	b.n	8004848 <HAL_DMA_IRQHandler+0x10c>
}
 80048ae:	b003      	add	sp, #12
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000000 	.word	0x20000000

080048b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048bc:	680b      	ldr	r3, [r1, #0]
{
 80048be:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a68 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048c4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048c6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048c8:	4a65      	ldr	r2, [pc, #404]	; (8004a60 <HAL_GPIO_Init+0x1a8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80048ca:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8004a6c <HAL_GPIO_Init+0x1b4>
    ioposition = ((uint32_t)0x01) << position;
 80048ce:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048d0:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80048d2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048d4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80048d6:	42ac      	cmp	r4, r5
 80048d8:	f040 80ac 	bne.w	8004a34 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048dc:	684c      	ldr	r4, [r1, #4]
 80048de:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80048e2:	2603      	movs	r6, #3
 80048e4:	f024 0c10 	bic.w	ip, r4, #16
 80048e8:	fa06 f60e 	lsl.w	r6, r6, lr
 80048ec:	f10c 37ff 	add.w	r7, ip, #4294967295
 80048f0:	43f6      	mvns	r6, r6
 80048f2:	2f01      	cmp	r7, #1
 80048f4:	d811      	bhi.n	800491a <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 80048f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80048f8:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80048fc:	68cf      	ldr	r7, [r1, #12]
 80048fe:	fa07 f70e 	lsl.w	r7, r7, lr
 8004902:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004906:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004908:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800490a:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800490e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8004912:	409f      	lsls	r7, r3
 8004914:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8004918:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800491a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800491c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004920:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004924:	688f      	ldr	r7, [r1, #8]
 8004926:	fa07 f70e 	lsl.w	r7, r7, lr
 800492a:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 800492e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004930:	d116      	bne.n	8004960 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8004932:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004936:	f003 0b07 	and.w	fp, r3, #7
 800493a:	f04f 0c0f 	mov.w	ip, #15
 800493e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004942:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004946:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800494a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800494e:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004952:	690f      	ldr	r7, [r1, #16]
 8004954:	fa07 f70b 	lsl.w	r7, r7, fp
 8004958:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 800495c:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8004960:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004962:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004964:	f004 0703 	and.w	r7, r4, #3
 8004968:	fa07 fe0e 	lsl.w	lr, r7, lr
 800496c:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8004970:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004972:	00e6      	lsls	r6, r4, #3
 8004974:	d55e      	bpl.n	8004a34 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004976:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800497a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800497e:	f003 0c03 	and.w	ip, r3, #3
 8004982:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004986:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800498a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800498e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004992:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8004996:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800499a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800499e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80049a2:	9603      	str	r6, [sp, #12]
 80049a4:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049a6:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80049aa:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049ae:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049b2:	4e2c      	ldr	r6, [pc, #176]	; (8004a64 <HAL_GPIO_Init+0x1ac>)
 80049b4:	42b0      	cmp	r0, r6
 80049b6:	d044      	beq.n	8004a42 <HAL_GPIO_Init+0x18a>
 80049b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80049bc:	42b0      	cmp	r0, r6
 80049be:	d042      	beq.n	8004a46 <HAL_GPIO_Init+0x18e>
 80049c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80049c4:	42b0      	cmp	r0, r6
 80049c6:	d040      	beq.n	8004a4a <HAL_GPIO_Init+0x192>
 80049c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80049cc:	42b0      	cmp	r0, r6
 80049ce:	d03e      	beq.n	8004a4e <HAL_GPIO_Init+0x196>
 80049d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80049d4:	42b0      	cmp	r0, r6
 80049d6:	d03c      	beq.n	8004a52 <HAL_GPIO_Init+0x19a>
 80049d8:	4548      	cmp	r0, r9
 80049da:	d03c      	beq.n	8004a56 <HAL_GPIO_Init+0x19e>
 80049dc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80049e0:	42b0      	cmp	r0, r6
 80049e2:	d03a      	beq.n	8004a5a <HAL_GPIO_Init+0x1a2>
 80049e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80049e8:	42b0      	cmp	r0, r6
 80049ea:	bf14      	ite	ne
 80049ec:	2608      	movne	r6, #8
 80049ee:	2607      	moveq	r6, #7
 80049f0:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049f4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80049f8:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80049fc:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80049fe:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8004a02:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004a04:	bf0c      	ite	eq
 8004a06:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004a08:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a0a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8004a0e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8004a10:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004a12:	bf0c      	ite	eq
 8004a14:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004a16:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a18:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8004a1c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8004a1e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	bf0c      	ite	eq
 8004a22:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004a24:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a26:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8004a28:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8004a2a:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004a2c:	bf54      	ite	pl
 8004a2e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8004a30:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8004a32:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a34:	3301      	adds	r3, #1
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	f47f af49 	bne.w	80048ce <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8004a3c:	b005      	add	sp, #20
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004a42:	2600      	movs	r6, #0
 8004a44:	e7d4      	b.n	80049f0 <HAL_GPIO_Init+0x138>
 8004a46:	2601      	movs	r6, #1
 8004a48:	e7d2      	b.n	80049f0 <HAL_GPIO_Init+0x138>
 8004a4a:	2602      	movs	r6, #2
 8004a4c:	e7d0      	b.n	80049f0 <HAL_GPIO_Init+0x138>
 8004a4e:	2603      	movs	r6, #3
 8004a50:	e7ce      	b.n	80049f0 <HAL_GPIO_Init+0x138>
 8004a52:	2604      	movs	r6, #4
 8004a54:	e7cc      	b.n	80049f0 <HAL_GPIO_Init+0x138>
 8004a56:	2605      	movs	r6, #5
 8004a58:	e7ca      	b.n	80049f0 <HAL_GPIO_Init+0x138>
 8004a5a:	2606      	movs	r6, #6
 8004a5c:	e7c8      	b.n	80049f0 <HAL_GPIO_Init+0x138>
 8004a5e:	bf00      	nop
 8004a60:	40013c00 	.word	0x40013c00
 8004a64:	40020000 	.word	0x40020000
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40021400 	.word	0x40021400

08004a70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a70:	b10a      	cbz	r2, 8004a76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a72:	6181      	str	r1, [r0, #24]
  }
}
 8004a74:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a76:	0409      	lsls	r1, r1, #16
 8004a78:	e7fb      	b.n	8004a72 <HAL_GPIO_WritePin+0x2>
	...

08004a7c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7c:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8004a7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a82:	4c19      	ldr	r4, [pc, #100]	; (8004ae8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a9c:	f7ff fa36 	bl	8003f0c <HAL_GetTick>
 8004aa0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	03da      	lsls	r2, r3, #15
 8004aa6:	d50c      	bpl.n	8004ac2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aae:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ab0:	f7ff fa2c 	bl	8003f0c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ab4:	4c0c      	ldr	r4, [pc, #48]	; (8004ae8 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8004ab6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	039b      	lsls	r3, r3, #14
 8004abc:	d50a      	bpl.n	8004ad4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e006      	b.n	8004ad0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ac2:	f7ff fa23 	bl	8003f0c <HAL_GetTick>
 8004ac6:	1b40      	subs	r0, r0, r5
 8004ac8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004acc:	d9e9      	bls.n	8004aa2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8004ace:	2003      	movs	r0, #3
}
 8004ad0:	b003      	add	sp, #12
 8004ad2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ad4:	f7ff fa1a 	bl	8003f0c <HAL_GetTick>
 8004ad8:	1b40      	subs	r0, r0, r5
 8004ada:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004ade:	d9eb      	bls.n	8004ab8 <HAL_PWREx_EnableOverDrive+0x3c>
 8004ae0:	e7f5      	b.n	8004ace <HAL_PWREx_EnableOverDrive+0x52>
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40007000 	.word	0x40007000

08004aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004af0:	4604      	mov	r4, r0
 8004af2:	b908      	cbnz	r0, 8004af8 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004af4:	2001      	movs	r0, #1
 8004af6:	e03f      	b.n	8004b78 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	07d8      	lsls	r0, r3, #31
 8004afc:	d410      	bmi.n	8004b20 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	0799      	lsls	r1, r3, #30
 8004b02:	d460      	bmi.n	8004bc6 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	0719      	lsls	r1, r3, #28
 8004b08:	f100 80a5 	bmi.w	8004c56 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	075a      	lsls	r2, r3, #29
 8004b10:	f100 80c6 	bmi.w	8004ca0 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b14:	69a0      	ldr	r0, [r4, #24]
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f040 8130 	bne.w	8004d7c <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	e02b      	b.n	8004b78 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b20:	4b94      	ldr	r3, [pc, #592]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	f002 020c 	and.w	r2, r2, #12
 8004b28:	2a04      	cmp	r2, #4
 8004b2a:	d007      	beq.n	8004b3c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	f002 020c 	and.w	r2, r2, #12
 8004b32:	2a08      	cmp	r2, #8
 8004b34:	d10a      	bne.n	8004b4c <HAL_RCC_OscConfig+0x60>
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	025a      	lsls	r2, r3, #9
 8004b3a:	d507      	bpl.n	8004b4c <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	4b8d      	ldr	r3, [pc, #564]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	039b      	lsls	r3, r3, #14
 8004b42:	d5dc      	bpl.n	8004afe <HAL_RCC_OscConfig+0x12>
 8004b44:	6863      	ldr	r3, [r4, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1d9      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
 8004b4a:	e7d3      	b.n	8004af4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	6863      	ldr	r3, [r4, #4]
 8004b4e:	4d89      	ldr	r5, [pc, #548]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d113      	bne.n	8004b7e <HAL_RCC_OscConfig+0x92>
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b5e:	f7ff f9d5 	bl	8003f0c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b62:	4d84      	ldr	r5, [pc, #528]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8004b64:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	039f      	lsls	r7, r3, #14
 8004b6a:	d4c8      	bmi.n	8004afe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7ff f9ce 	bl	8003f0c <HAL_GetTick>
 8004b70:	1b80      	subs	r0, r0, r6
 8004b72:	2864      	cmp	r0, #100	; 0x64
 8004b74:	d9f7      	bls.n	8004b66 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8004b76:	2003      	movs	r0, #3
}
 8004b78:	b002      	add	sp, #8
 8004b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7e:	b99b      	cbnz	r3, 8004ba8 <HAL_RCC_OscConfig+0xbc>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004b90:	f7ff f9bc 	bl	8003f0c <HAL_GetTick>
 8004b94:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	682b      	ldr	r3, [r5, #0]
 8004b98:	0398      	lsls	r0, r3, #14
 8004b9a:	d5b0      	bpl.n	8004afe <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7ff f9b6 	bl	8003f0c <HAL_GetTick>
 8004ba0:	1b80      	subs	r0, r0, r6
 8004ba2:	2864      	cmp	r0, #100	; 0x64
 8004ba4:	d9f7      	bls.n	8004b96 <HAL_RCC_OscConfig+0xaa>
 8004ba6:	e7e6      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	d103      	bne.n	8004bb8 <HAL_RCC_OscConfig+0xcc>
 8004bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb4:	602b      	str	r3, [r5, #0]
 8004bb6:	e7ce      	b.n	8004b56 <HAL_RCC_OscConfig+0x6a>
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	682b      	ldr	r3, [r5, #0]
 8004bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc4:	e7ca      	b.n	8004b5c <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc6:	4b6b      	ldr	r3, [pc, #428]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	f012 0f0c 	tst.w	r2, #12
 8004bce:	d007      	beq.n	8004be0 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	f002 020c 	and.w	r2, r2, #12
 8004bd6:	2a08      	cmp	r2, #8
 8004bd8:	d111      	bne.n	8004bfe <HAL_RCC_OscConfig+0x112>
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0259      	lsls	r1, r3, #9
 8004bde:	d40e      	bmi.n	8004bfe <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be0:	4b64      	ldr	r3, [pc, #400]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	0792      	lsls	r2, r2, #30
 8004be6:	d502      	bpl.n	8004bee <HAL_RCC_OscConfig+0x102>
 8004be8:	68e2      	ldr	r2, [r4, #12]
 8004bea:	2a01      	cmp	r2, #1
 8004bec:	d182      	bne.n	8004af4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	6921      	ldr	r1, [r4, #16]
 8004bf2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004bf6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004bfa:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfc:	e782      	b.n	8004b04 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	4d5c      	ldr	r5, [pc, #368]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004c02:	b1bb      	cbz	r3, 8004c34 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c0c:	f7ff f97e 	bl	8003f0c <HAL_GetTick>
 8004c10:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	079f      	lsls	r7, r3, #30
 8004c16:	d507      	bpl.n	8004c28 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	6922      	ldr	r2, [r4, #16]
 8004c1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	e76d      	b.n	8004b04 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c28:	f7ff f970 	bl	8003f0c <HAL_GetTick>
 8004c2c:	1b80      	subs	r0, r0, r6
 8004c2e:	2802      	cmp	r0, #2
 8004c30:	d9ef      	bls.n	8004c12 <HAL_RCC_OscConfig+0x126>
 8004c32:	e7a0      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c3c:	f7ff f966 	bl	8003f0c <HAL_GetTick>
 8004c40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	0798      	lsls	r0, r3, #30
 8004c46:	f57f af5d 	bpl.w	8004b04 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7ff f95f 	bl	8003f0c <HAL_GetTick>
 8004c4e:	1b80      	subs	r0, r0, r6
 8004c50:	2802      	cmp	r0, #2
 8004c52:	d9f6      	bls.n	8004c42 <HAL_RCC_OscConfig+0x156>
 8004c54:	e78f      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c56:	6963      	ldr	r3, [r4, #20]
 8004c58:	4d46      	ldr	r5, [pc, #280]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	b183      	cbz	r3, 8004c7e <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8004c5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004c64:	f7ff f952 	bl	8003f0c <HAL_GetTick>
 8004c68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	f53f af4d 	bmi.w	8004b0c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c72:	f7ff f94b 	bl	8003f0c <HAL_GetTick>
 8004c76:	1b80      	subs	r0, r0, r6
 8004c78:	2802      	cmp	r0, #2
 8004c7a:	d9f6      	bls.n	8004c6a <HAL_RCC_OscConfig+0x17e>
 8004c7c:	e77b      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8004c7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004c86:	f7ff f941 	bl	8003f0c <HAL_GetTick>
 8004c8a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004c8e:	079f      	lsls	r7, r3, #30
 8004c90:	f57f af3c 	bpl.w	8004b0c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c94:	f7ff f93a 	bl	8003f0c <HAL_GetTick>
 8004c98:	1b80      	subs	r0, r0, r6
 8004c9a:	2802      	cmp	r0, #2
 8004c9c:	d9f6      	bls.n	8004c8c <HAL_RCC_OscConfig+0x1a0>
 8004c9e:	e76a      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca0:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ca4:	00d0      	lsls	r0, r2, #3
 8004ca6:	d427      	bmi.n	8004cf8 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8004caa:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbc:	4d2e      	ldr	r5, [pc, #184]	; (8004d78 <HAL_RCC_OscConfig+0x28c>)
 8004cbe:	682b      	ldr	r3, [r5, #0]
 8004cc0:	05d9      	lsls	r1, r3, #23
 8004cc2:	d51b      	bpl.n	8004cfc <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc4:	68a3      	ldr	r3, [r4, #8]
 8004cc6:	4d2b      	ldr	r5, [pc, #172]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d127      	bne.n	8004d1c <HAL_RCC_OscConfig+0x230>
 8004ccc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004cd8:	f7ff f918 	bl	8003f0c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cdc:	4f25      	ldr	r7, [pc, #148]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8004cde:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ce2:	079b      	lsls	r3, r3, #30
 8004ce4:	d53f      	bpl.n	8004d66 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	f43f af14 	beq.w	8004b14 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cec:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <HAL_RCC_OscConfig+0x288>)
 8004cee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf6:	e70d      	b.n	8004b14 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8004cf8:	2600      	movs	r6, #0
 8004cfa:	e7df      	b.n	8004cbc <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d02:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004d04:	f7ff f902 	bl	8003f0c <HAL_GetTick>
 8004d08:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d0a:	682b      	ldr	r3, [r5, #0]
 8004d0c:	05da      	lsls	r2, r3, #23
 8004d0e:	d4d9      	bmi.n	8004cc4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7ff f8fc 	bl	8003f0c <HAL_GetTick>
 8004d14:	1bc0      	subs	r0, r0, r7
 8004d16:	2864      	cmp	r0, #100	; 0x64
 8004d18:	d9f7      	bls.n	8004d0a <HAL_RCC_OscConfig+0x21e>
 8004d1a:	e72c      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	b9ab      	cbnz	r3, 8004d4a <HAL_RCC_OscConfig+0x25e>
 8004d1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	672b      	str	r3, [r5, #112]	; 0x70
 8004d2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d2c:	f023 0304 	bic.w	r3, r3, #4
 8004d30:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004d32:	f7ff f8eb 	bl	8003f0c <HAL_GetTick>
 8004d36:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d3a:	0798      	lsls	r0, r3, #30
 8004d3c:	d5d3      	bpl.n	8004ce6 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7ff f8e5 	bl	8003f0c <HAL_GetTick>
 8004d42:	1bc0      	subs	r0, r0, r7
 8004d44:	4540      	cmp	r0, r8
 8004d46:	d9f7      	bls.n	8004d38 <HAL_RCC_OscConfig+0x24c>
 8004d48:	e715      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d4e:	d103      	bne.n	8004d58 <HAL_RCC_OscConfig+0x26c>
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	672b      	str	r3, [r5, #112]	; 0x70
 8004d56:	e7b9      	b.n	8004ccc <HAL_RCC_OscConfig+0x1e0>
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	672b      	str	r3, [r5, #112]	; 0x70
 8004d5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d60:	f023 0304 	bic.w	r3, r3, #4
 8004d64:	e7b5      	b.n	8004cd2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7ff f8d1 	bl	8003f0c <HAL_GetTick>
 8004d6a:	eba0 0008 	sub.w	r0, r0, r8
 8004d6e:	42a8      	cmp	r0, r5
 8004d70:	d9b6      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x1f4>
 8004d72:	e700      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d7c:	4d38      	ldr	r5, [pc, #224]	; (8004e60 <HAL_RCC_OscConfig+0x374>)
 8004d7e:	68ab      	ldr	r3, [r5, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d041      	beq.n	8004e0c <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8004d88:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d90:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d92:	d12e      	bne.n	8004df2 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8004d94:	f7ff f8ba 	bl	8003f0c <HAL_GetTick>
 8004d98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	0199      	lsls	r1, r3, #6
 8004d9e:	d422      	bmi.n	8004de6 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004db0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004db2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004db6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db8:	4c29      	ldr	r4, [pc, #164]	; (8004e60 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dba:	0852      	lsrs	r2, r2, #1
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dc2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004dcc:	f7ff f89e 	bl	8003f0c <HAL_GetTick>
 8004dd0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	019a      	lsls	r2, r3, #6
 8004dd6:	f53f aea1 	bmi.w	8004b1c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dda:	f7ff f897 	bl	8003f0c <HAL_GetTick>
 8004dde:	1b40      	subs	r0, r0, r5
 8004de0:	2802      	cmp	r0, #2
 8004de2:	d9f6      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x2e6>
 8004de4:	e6c7      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de6:	f7ff f891 	bl	8003f0c <HAL_GetTick>
 8004dea:	1b80      	subs	r0, r0, r6
 8004dec:	2802      	cmp	r0, #2
 8004dee:	d9d4      	bls.n	8004d9a <HAL_RCC_OscConfig+0x2ae>
 8004df0:	e6c1      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8004df2:	f7ff f88b 	bl	8003f0c <HAL_GetTick>
 8004df6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	019b      	lsls	r3, r3, #6
 8004dfc:	f57f ae8e 	bpl.w	8004b1c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e00:	f7ff f884 	bl	8003f0c <HAL_GetTick>
 8004e04:	1b00      	subs	r0, r0, r4
 8004e06:	2802      	cmp	r0, #2
 8004e08:	d9f6      	bls.n	8004df8 <HAL_RCC_OscConfig+0x30c>
 8004e0a:	e6b4      	b.n	8004b76 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0c:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8004e0e:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e10:	f43f aeb2 	beq.w	8004b78 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e18:	69e1      	ldr	r1, [r4, #28]
 8004e1a:	428a      	cmp	r2, r1
 8004e1c:	f47f ae6a 	bne.w	8004af4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e24:	6a21      	ldr	r1, [r4, #32]
 8004e26:	428a      	cmp	r2, r1
 8004e28:	f47f ae64 	bne.w	8004af4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e2c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e30:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e32:	401a      	ands	r2, r3
 8004e34:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004e38:	f47f ae5c 	bne.w	8004af4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004e3e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e46:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004e4a:	f47f ae53 	bne.w	8004af4 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e50:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e54:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8004e58:	bf14      	ite	ne
 8004e5a:	2001      	movne	r0, #1
 8004e5c:	2000      	moveq	r0, #0
 8004e5e:	e68b      	b.n	8004b78 <HAL_RCC_OscConfig+0x8c>
 8004e60:	40023800 	.word	0x40023800

08004e64 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e64:	4913      	ldr	r1, [pc, #76]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004e66:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e68:	688b      	ldr	r3, [r1, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x16>
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e76:	4810      	ldr	r0, [pc, #64]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8004e78:	e000      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8004e7a:	4810      	ldr	r0, [pc, #64]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x58>)
}
 8004e7c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e7e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e80:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e82:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e88:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004e90:	bf1a      	itte	ne
 8004e92:	480a      	ldrne	r0, [pc, #40]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x58>)
 8004e94:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e96:	4808      	ldreq	r0, [pc, #32]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x54>)
 8004e98:	fba1 0100 	umull	r0, r1, r1, r0
 8004e9c:	f7fb ff1c 	bl	8000cd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0x50>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8004eac:	fbb0 f0f3 	udiv	r0, r0, r3
 8004eb0:	e7e4      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x18>
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	017d7840 	.word	0x017d7840

08004ec0 <HAL_RCC_ClockConfig>:
{
 8004ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	b910      	cbnz	r0, 8004ed0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004eca:	2001      	movs	r0, #1
}
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed0:	4a45      	ldr	r2, [pc, #276]	; (8004fe8 <HAL_RCC_ClockConfig+0x128>)
 8004ed2:	6813      	ldr	r3, [r2, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	d328      	bcc.n	8004f2e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	078f      	lsls	r7, r1, #30
 8004ee0:	d430      	bmi.n	8004f44 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	07c8      	lsls	r0, r1, #31
 8004ee4:	d443      	bmi.n	8004f6e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee6:	4a40      	ldr	r2, [pc, #256]	; (8004fe8 <HAL_RCC_ClockConfig+0x128>)
 8004ee8:	6813      	ldr	r3, [r2, #0]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	42ab      	cmp	r3, r5
 8004ef0:	d866      	bhi.n	8004fc0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef2:	6822      	ldr	r2, [r4, #0]
 8004ef4:	0751      	lsls	r1, r2, #29
 8004ef6:	d46f      	bmi.n	8004fd8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef8:	0713      	lsls	r3, r2, #28
 8004efa:	d507      	bpl.n	8004f0c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004efc:	4a3b      	ldr	r2, [pc, #236]	; (8004fec <HAL_RCC_ClockConfig+0x12c>)
 8004efe:	6921      	ldr	r1, [r4, #16]
 8004f00:	6893      	ldr	r3, [r2, #8]
 8004f02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004f06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004f0a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f0c:	f7ff ffaa 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004f10:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCC_ClockConfig+0x12c>)
 8004f12:	4a37      	ldr	r2, [pc, #220]	; (8004ff0 <HAL_RCC_ClockConfig+0x130>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	40d8      	lsrs	r0, r3
 8004f1e:	4b35      	ldr	r3, [pc, #212]	; (8004ff4 <HAL_RCC_ClockConfig+0x134>)
 8004f20:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004f22:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <HAL_RCC_ClockConfig+0x138>)
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f7fe ffaf 	bl	8003e88 <HAL_InitTick>
  return HAL_OK;
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e7ce      	b.n	8004ecc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	f023 030f 	bic.w	r3, r3, #15
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f38:	6813      	ldr	r3, [r2, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	428b      	cmp	r3, r1
 8004f40:	d1c3      	bne.n	8004eca <HAL_RCC_ClockConfig+0xa>
 8004f42:	e7cb      	b.n	8004edc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	f011 0f04 	tst.w	r1, #4
 8004f48:	4b28      	ldr	r3, [pc, #160]	; (8004fec <HAL_RCC_ClockConfig+0x12c>)
 8004f4a:	d003      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004f52:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f54:	070e      	lsls	r6, r1, #28
 8004f56:	d503      	bpl.n	8004f60 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004f5e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	68a0      	ldr	r0, [r4, #8]
 8004f64:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f68:	4302      	orrs	r2, r0
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	e7b9      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6e:	6861      	ldr	r1, [r4, #4]
 8004f70:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <HAL_RCC_ClockConfig+0x12c>)
 8004f72:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f74:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f76:	d11b      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f78:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7c:	d0a5      	beq.n	8004eca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f80:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f84:	4e19      	ldr	r6, [pc, #100]	; (8004fec <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	f022 0203 	bic.w	r2, r2, #3
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004f8e:	f7fe ffbd 	bl	8003f0c <HAL_GetTick>
 8004f92:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f94:	68b3      	ldr	r3, [r6, #8]
 8004f96:	6862      	ldr	r2, [r4, #4]
 8004f98:	f003 030c 	and.w	r3, r3, #12
 8004f9c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004fa0:	d0a1      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa2:	f7fe ffb3 	bl	8003f0c <HAL_GetTick>
 8004fa6:	1bc0      	subs	r0, r0, r7
 8004fa8:	4540      	cmp	r0, r8
 8004faa:	d9f3      	bls.n	8004f94 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004fac:	2003      	movs	r0, #3
 8004fae:	e78d      	b.n	8004ecc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb0:	2902      	cmp	r1, #2
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004fb8:	e7e0      	b.n	8004f7c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fba:	f012 0f02 	tst.w	r2, #2
 8004fbe:	e7dd      	b.n	8004f7c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	f023 030f 	bic.w	r3, r3, #15
 8004fc6:	432b      	orrs	r3, r5
 8004fc8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	6813      	ldr	r3, [r2, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	f47f af7a 	bne.w	8004eca <HAL_RCC_ClockConfig+0xa>
 8004fd6:	e78c      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd8:	4904      	ldr	r1, [pc, #16]	; (8004fec <HAL_RCC_ClockConfig+0x12c>)
 8004fda:	68e0      	ldr	r0, [r4, #12]
 8004fdc:	688b      	ldr	r3, [r1, #8]
 8004fde:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004fe2:	4303      	orrs	r3, r0
 8004fe4:	608b      	str	r3, [r1, #8]
 8004fe6:	e787      	b.n	8004ef8 <HAL_RCC_ClockConfig+0x38>
 8004fe8:	40023c00 	.word	0x40023c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	0800d864 	.word	0x0800d864
 8004ff4:	20000000 	.word	0x20000000
 8004ff8:	200015e4 	.word	0x200015e4

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004ffe:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005006:	5cd3      	ldrb	r3, [r2, r3]
 8005008:	4a03      	ldr	r2, [pc, #12]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800500a:	6810      	ldr	r0, [r2, #0]
}
 800500c:	40d8      	lsrs	r0, r3
 800500e:	4770      	bx	lr
 8005010:	40023800 	.word	0x40023800
 8005014:	0800d874 	.word	0x0800d874
 8005018:	20000000 	.word	0x20000000

0800501c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x14>)
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005026:	5cd3      	ldrb	r3, [r2, r3]
 8005028:	4a03      	ldr	r2, [pc, #12]	; (8005038 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800502a:	6810      	ldr	r0, [r2, #0]
}
 800502c:	40d8      	lsrs	r0, r3
 800502e:	4770      	bx	lr
 8005030:	40023800 	.word	0x40023800
 8005034:	0800d874 	.word	0x0800d874
 8005038:	20000000 	.word	0x20000000

0800503c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005040:	6802      	ldr	r2, [r0, #0]
{
 8005042:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005044:	f012 0601 	ands.w	r6, r2, #1
 8005048:	d00b      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800504a:	4bb9      	ldr	r3, [pc, #740]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800504c:	6899      	ldr	r1, [r3, #8]
 800504e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005052:	6099      	str	r1, [r3, #8]
 8005054:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8005056:	6899      	ldr	r1, [r3, #8]
 8005058:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800505a:	fab6 f686 	clz	r6, r6
 800505e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005060:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005062:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8005066:	d012      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005068:	49b1      	ldr	r1, [pc, #708]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800506a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800506c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005070:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005074:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8005078:	bf08      	it	eq
 800507a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800507c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005080:	bf16      	itet	ne
 8005082:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8005086:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005088:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800508a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800508e:	02d7      	lsls	r7, r2, #11
 8005090:	d510      	bpl.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005092:	48a7      	ldr	r0, [pc, #668]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005094:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005096:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800509a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800509e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80050a2:	ea43 0301 	orr.w	r3, r3, r1
 80050a6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050aa:	f000 814b 	beq.w	8005344 <HAL_RCCEx_PeriphCLKConfig+0x308>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80050ae:	2900      	cmp	r1, #0
 80050b0:	bf08      	it	eq
 80050b2:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050b4:	0690      	lsls	r0, r2, #26
 80050b6:	d531      	bpl.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b9d      	ldr	r3, [pc, #628]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050ba:	4f9e      	ldr	r7, [pc, #632]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80050bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d6:	f7fe ff19 	bl	8003f0c <HAL_GetTick>
 80050da:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	05d9      	lsls	r1, r3, #23
 80050e0:	f140 8132 	bpl.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050e4:	4f92      	ldr	r7, [pc, #584]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050e8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80050ec:	f040 8137 	bne.w	800535e <HAL_RCCEx_PeriphCLKConfig+0x322>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050f2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80050f6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80050fa:	4a8d      	ldr	r2, [pc, #564]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80050fc:	f040 8155 	bne.w	80053aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005100:	6891      	ldr	r1, [r2, #8]
 8005102:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8005106:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800510a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800510e:	4301      	orrs	r1, r0
 8005110:	6091      	str	r1, [r2, #8]
 8005112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005116:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005118:	430b      	orrs	r3, r1
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	06df      	lsls	r7, r3, #27
 8005120:	d50c      	bpl.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005122:	4a83      	ldr	r2, [pc, #524]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005124:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005128:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800512c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005130:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005134:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005136:	4301      	orrs	r1, r0
 8005138:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800513c:	0458      	lsls	r0, r3, #17
 800513e:	d508      	bpl.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005140:	497b      	ldr	r1, [pc, #492]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005142:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005144:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005148:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800514c:	4302      	orrs	r2, r0
 800514e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005152:	0419      	lsls	r1, r3, #16
 8005154:	d508      	bpl.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005156:	4976      	ldr	r1, [pc, #472]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005158:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800515a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800515e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005162:	4302      	orrs	r2, r0
 8005164:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005168:	03da      	lsls	r2, r3, #15
 800516a:	d508      	bpl.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800516c:	4970      	ldr	r1, [pc, #448]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800516e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005170:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005174:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005178:	4302      	orrs	r2, r0
 800517a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800517e:	065f      	lsls	r7, r3, #25
 8005180:	d508      	bpl.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005182:	496b      	ldr	r1, [pc, #428]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005184:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005186:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800518a:	f022 0203 	bic.w	r2, r2, #3
 800518e:	4302      	orrs	r2, r0
 8005190:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005194:	0618      	lsls	r0, r3, #24
 8005196:	d508      	bpl.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005198:	4965      	ldr	r1, [pc, #404]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800519a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800519c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80051a0:	f022 020c 	bic.w	r2, r2, #12
 80051a4:	4302      	orrs	r2, r0
 80051a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051aa:	05d9      	lsls	r1, r3, #23
 80051ac:	d508      	bpl.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051ae:	4960      	ldr	r1, [pc, #384]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051b0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80051b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80051b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80051ba:	4302      	orrs	r2, r0
 80051bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051c0:	059a      	lsls	r2, r3, #22
 80051c2:	d508      	bpl.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051c4:	495a      	ldr	r1, [pc, #360]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80051c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80051cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80051d0:	4302      	orrs	r2, r0
 80051d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051d6:	055f      	lsls	r7, r3, #21
 80051d8:	d508      	bpl.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051da:	4955      	ldr	r1, [pc, #340]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80051de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80051e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051e6:	4302      	orrs	r2, r0
 80051e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051ec:	0518      	lsls	r0, r3, #20
 80051ee:	d508      	bpl.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051f0:	494f      	ldr	r1, [pc, #316]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80051f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80051f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80051f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051fc:	4302      	orrs	r2, r0
 80051fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005202:	04d9      	lsls	r1, r3, #19
 8005204:	d508      	bpl.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005206:	494a      	ldr	r1, [pc, #296]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005208:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800520a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800520e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005212:	4302      	orrs	r2, r0
 8005214:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005218:	049a      	lsls	r2, r3, #18
 800521a:	d508      	bpl.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800521c:	4944      	ldr	r1, [pc, #272]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800521e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005220:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005224:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005228:	4302      	orrs	r2, r0
 800522a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800522e:	029f      	lsls	r7, r3, #10
 8005230:	d50c      	bpl.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005232:	483f      	ldr	r0, [pc, #252]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005234:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005236:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800523a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800523e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8005242:	bf08      	it	eq
 8005244:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005246:	430a      	orrs	r2, r1
 8005248:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800524c:	0358      	lsls	r0, r3, #13
 800524e:	d508      	bpl.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005250:	4937      	ldr	r1, [pc, #220]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005252:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005254:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005258:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800525c:	4302      	orrs	r2, r0
 800525e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005262:	0219      	lsls	r1, r3, #8
 8005264:	d508      	bpl.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005266:	4932      	ldr	r1, [pc, #200]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005268:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800526a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800526e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005272:	4302      	orrs	r2, r0
 8005274:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	d508      	bpl.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800527c:	492c      	ldr	r1, [pc, #176]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800527e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005280:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005284:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005288:	4302      	orrs	r2, r0
 800528a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800528e:	2e00      	cmp	r6, #0
 8005290:	f040 808f 	bne.w	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005298:	f000 808b 	beq.w	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800529c:	2d01      	cmp	r5, #1
 800529e:	d14f      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052a0:	4d23      	ldr	r5, [pc, #140]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052aa:	f7fe fe2f 	bl	8003f0c <HAL_GetTick>
 80052ae:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	009f      	lsls	r7, r3, #2
 80052b4:	f100 80e0 	bmi.w	8005478 <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	0305      	lsls	r5, r0, #12
 80052bc:	d501      	bpl.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80052be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052c0:	b11b      	cbz	r3, 80052ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80052c2:	02c1      	lsls	r1, r0, #11
 80052c4:	d518      	bpl.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052c8:	b9b3      	cbnz	r3, 80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052ca:	4919      	ldr	r1, [pc, #100]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80052cc:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80052da:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052e4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80052e8:	6a22      	ldr	r2, [r4, #32]
 80052ea:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80052ee:	3a01      	subs	r2, #1
 80052f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80052f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052f8:	0282      	lsls	r2, r0, #10
 80052fa:	d510      	bpl.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80052fc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80052fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005302:	d10c      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005304:	490a      	ldr	r1, [pc, #40]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005306:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005308:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800530c:	6920      	ldr	r0, [r4, #16]
 800530e:	041b      	lsls	r3, r3, #16
 8005310:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005314:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800531e:	4c04      	ldr	r4, [pc, #16]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005326:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005328:	f7fe fdf0 	bl	8003f0c <HAL_GetTick>
 800532c:	4605      	mov	r5, r0
 800532e:	e003      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005330:	40023800 	.word	0x40023800
 8005334:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	f140 80a3 	bpl.w	8005486 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005340:	2000      	movs	r0, #0
 8005342:	e009      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      plli2sused = 1;
 8005344:	2601      	movs	r6, #1
 8005346:	e6b5      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005348:	f7fe fde0 	bl	8003f0c <HAL_GetTick>
 800534c:	eba0 0008 	sub.w	r0, r0, r8
 8005350:	2864      	cmp	r0, #100	; 0x64
 8005352:	f67f aec3 	bls.w	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8005356:	2003      	movs	r0, #3
}
 8005358:	b003      	add	sp, #12
 800535a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800535e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005360:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005364:	4293      	cmp	r3, r2
 8005366:	f43f aec3 	beq.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800536a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800536c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005372:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005376:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005378:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800537a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800537e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005380:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005384:	07da      	lsls	r2, r3, #31
 8005386:	f57f aeb3 	bpl.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 800538a:	f7fe fdbf 	bl	8003f0c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005392:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005396:	079b      	lsls	r3, r3, #30
 8005398:	f53f aeaa 	bmi.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fe fdb6 	bl	8003f0c <HAL_GetTick>
 80053a0:	eba0 0008 	sub.w	r0, r0, r8
 80053a4:	4548      	cmp	r0, r9
 80053a6:	d9f5      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80053a8:	e7d5      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053aa:	6891      	ldr	r1, [r2, #8]
 80053ac:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80053b0:	e6ae      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 80053b2:	4e38      	ldr	r6, [pc, #224]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80053bc:	f7fe fda6 	bl	8003f0c <HAL_GetTick>
 80053c0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053c2:	6833      	ldr	r3, [r6, #0]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	d451      	bmi.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	07d7      	lsls	r7, r2, #31
 80053cc:	d50d      	bpl.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80053ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053d0:	b95b      	cbnz	r3, 80053ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053d2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80053d6:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80053da:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80053de:	071b      	lsls	r3, r3, #28
 80053e0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80053e4:	430b      	orrs	r3, r1
 80053e6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053ea:	0310      	lsls	r0, r2, #12
 80053ec:	d503      	bpl.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80053ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f4:	d005      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80053f6:	02d1      	lsls	r1, r2, #11
 80053f8:	d519      	bpl.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80053fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005400:	d115      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005402:	4924      	ldr	r1, [pc, #144]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005404:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005406:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800540a:	6866      	ldr	r6, [r4, #4]
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005412:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8005416:	4303      	orrs	r3, r0
 8005418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800541c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005420:	69e3      	ldr	r3, [r4, #28]
 8005422:	f020 001f 	bic.w	r0, r0, #31
 8005426:	3b01      	subs	r3, #1
 8005428:	4303      	orrs	r3, r0
 800542a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800542e:	0192      	lsls	r2, r2, #6
 8005430:	d50a      	bpl.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005432:	68e3      	ldr	r3, [r4, #12]
 8005434:	6862      	ldr	r2, [r4, #4]
 8005436:	061b      	lsls	r3, r3, #24
 8005438:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800543c:	68a2      	ldr	r2, [r4, #8]
 800543e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005442:	4a14      	ldr	r2, [pc, #80]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005444:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005448:	4e12      	ldr	r6, [pc, #72]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800544a:	6833      	ldr	r3, [r6, #0]
 800544c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005450:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005452:	f7fe fd5b 	bl	8003f0c <HAL_GetTick>
 8005456:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005458:	6833      	ldr	r3, [r6, #0]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	f53f af1e 	bmi.w	800529c <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005460:	f7fe fd54 	bl	8003f0c <HAL_GetTick>
 8005464:	1bc0      	subs	r0, r0, r7
 8005466:	2864      	cmp	r0, #100	; 0x64
 8005468:	d9f6      	bls.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800546a:	e774      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800546c:	f7fe fd4e 	bl	8003f0c <HAL_GetTick>
 8005470:	1bc0      	subs	r0, r0, r7
 8005472:	2864      	cmp	r0, #100	; 0x64
 8005474:	d9a5      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005476:	e76e      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005478:	f7fe fd48 	bl	8003f0c <HAL_GetTick>
 800547c:	1b80      	subs	r0, r0, r6
 800547e:	2864      	cmp	r0, #100	; 0x64
 8005480:	f67f af16 	bls.w	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005484:	e767      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005486:	f7fe fd41 	bl	8003f0c <HAL_GetTick>
 800548a:	1b40      	subs	r0, r0, r5
 800548c:	2864      	cmp	r0, #100	; 0x64
 800548e:	f67f af53 	bls.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005492:	e760      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8005494:	40023800 	.word	0x40023800

08005498 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005498:	6a03      	ldr	r3, [r0, #32]
 800549a:	f023 0301 	bic.w	r3, r3, #1
{
 800549e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054a8:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 80054ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ae:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80054b2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80054b6:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054b8:	688d      	ldr	r5, [r1, #8]
 80054ba:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054bc:	4d0e      	ldr	r5, [pc, #56]	; (80054f8 <TIM_OC1_SetConfig+0x60>)
 80054be:	42a8      	cmp	r0, r5
 80054c0:	d002      	beq.n	80054c8 <TIM_OC1_SetConfig+0x30>
 80054c2:	4e0e      	ldr	r6, [pc, #56]	; (80054fc <TIM_OC1_SetConfig+0x64>)
 80054c4:	42b0      	cmp	r0, r6
 80054c6:	d111      	bne.n	80054ec <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054cc:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ce:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 80054d0:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80054d4:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d8:	d002      	beq.n	80054e0 <TIM_OC1_SetConfig+0x48>
 80054da:	4d08      	ldr	r5, [pc, #32]	; (80054fc <TIM_OC1_SetConfig+0x64>)
 80054dc:	42a8      	cmp	r0, r5
 80054de:	d105      	bne.n	80054ec <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054e4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80054e8:	4335      	orrs	r5, r6
 80054ea:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ee:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80054f0:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80054f2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	6203      	str	r3, [r0, #32]
}
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40010400 	.word	0x40010400

08005500 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005500:	6a03      	ldr	r3, [r0, #32]
 8005502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8005506:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005508:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550e:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8005514:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005516:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800551a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800551e:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005520:	688d      	ldr	r5, [r1, #8]
 8005522:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005526:	4d11      	ldr	r5, [pc, #68]	; (800556c <TIM_OC3_SetConfig+0x6c>)
 8005528:	42a8      	cmp	r0, r5
 800552a:	d003      	beq.n	8005534 <TIM_OC3_SetConfig+0x34>
 800552c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005530:	42a8      	cmp	r0, r5
 8005532:	d114      	bne.n	800555e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005534:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553e:	4d0b      	ldr	r5, [pc, #44]	; (800556c <TIM_OC3_SetConfig+0x6c>)
 8005540:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	d003      	beq.n	8005550 <TIM_OC3_SetConfig+0x50>
 8005548:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800554c:	42a8      	cmp	r0, r5
 800554e:	d106      	bne.n	800555e <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005550:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005554:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005558:	4335      	orrs	r5, r6
 800555a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005560:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005562:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005564:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005566:	6203      	str	r3, [r0, #32]
}
 8005568:	bd70      	pop	{r4, r5, r6, pc}
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000

08005570 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005570:	6a03      	ldr	r3, [r0, #32]
 8005572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8005576:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005578:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005584:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800558a:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800558e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005592:	688d      	ldr	r5, [r1, #8]
 8005594:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005598:	4d08      	ldr	r5, [pc, #32]	; (80055bc <TIM_OC4_SetConfig+0x4c>)
 800559a:	42a8      	cmp	r0, r5
 800559c:	d003      	beq.n	80055a6 <TIM_OC4_SetConfig+0x36>
 800559e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055a2:	42a8      	cmp	r0, r5
 80055a4:	d104      	bne.n	80055b0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055aa:	694d      	ldr	r5, [r1, #20]
 80055ac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b4:	684b      	ldr	r3, [r1, #4]
 80055b6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	6202      	str	r2, [r0, #32]
}
 80055ba:	bd30      	pop	{r4, r5, pc}
 80055bc:	40010000 	.word	0x40010000

080055c0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055c0:	6a03      	ldr	r3, [r0, #32]
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80055c6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055d0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 80055d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80055de:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055e0:	688d      	ldr	r5, [r1, #8]
 80055e2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e6:	4d09      	ldr	r5, [pc, #36]	; (800560c <TIM_OC5_SetConfig+0x4c>)
 80055e8:	42a8      	cmp	r0, r5
 80055ea:	d003      	beq.n	80055f4 <TIM_OC5_SetConfig+0x34>
 80055ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055f0:	42a8      	cmp	r0, r5
 80055f2:	d104      	bne.n	80055fe <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055f4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055f8:	694d      	ldr	r5, [r1, #20]
 80055fa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005600:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005602:	684b      	ldr	r3, [r1, #4]
 8005604:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	6202      	str	r2, [r0, #32]
}
 8005608:	bd30      	pop	{r4, r5, pc}
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000

08005610 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005610:	6a03      	ldr	r3, [r0, #32]
 8005612:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8005616:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005618:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800561e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005620:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005624:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800562e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005632:	688d      	ldr	r5, [r1, #8]
 8005634:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	4d08      	ldr	r5, [pc, #32]	; (800565c <TIM_OC6_SetConfig+0x4c>)
 800563a:	42a8      	cmp	r0, r5
 800563c:	d003      	beq.n	8005646 <TIM_OC6_SetConfig+0x36>
 800563e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005642:	42a8      	cmp	r0, r5
 8005644:	d104      	bne.n	8005650 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005646:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800564a:	694d      	ldr	r5, [r1, #20]
 800564c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005652:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005654:	684b      	ldr	r3, [r1, #4]
 8005656:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	6202      	str	r2, [r0, #32]
}
 800565a:	bd30      	pop	{r4, r5, pc}
 800565c:	40010000 	.word	0x40010000

08005660 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005662:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005668:	4b08      	ldr	r3, [pc, #32]	; (800568c <HAL_TIM_Base_Start+0x2c>)
 800566a:	6891      	ldr	r1, [r2, #8]
 800566c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	2b06      	cmp	r3, #6
 8005670:	d006      	beq.n	8005680 <HAL_TIM_Base_Start+0x20>
 8005672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005676:	d003      	beq.n	8005680 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8005678:	6813      	ldr	r3, [r2, #0]
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005680:	2301      	movs	r3, #1
 8005682:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005686:	2000      	movs	r0, #0
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	00010007 	.word	0x00010007

08005690 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005690:	6803      	ldr	r3, [r0, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800569a:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <HAL_TIM_Base_Start_IT+0x28>)
 800569c:	6899      	ldr	r1, [r3, #8]
 800569e:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a0:	2a06      	cmp	r2, #6
 80056a2:	d006      	beq.n	80056b2 <HAL_TIM_Base_Start_IT+0x22>
 80056a4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_Base_Start_IT+0x22>
    __HAL_TIM_ENABLE(htim);
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
}
 80056b2:	2000      	movs	r0, #0
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	00010007 	.word	0x00010007

080056bc <HAL_TIM_OnePulse_MspInit>:
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_OC_DelayElapsedCallback>:
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_IC_CaptureCallback>:
 80056c0:	4770      	bx	lr

080056c2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_TriggerCallback>:
 80056c4:	4770      	bx	lr

080056c6 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056c6:	6803      	ldr	r3, [r0, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	0791      	lsls	r1, r2, #30
{
 80056cc:	b510      	push	{r4, lr}
 80056ce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d0:	d50f      	bpl.n	80056f2 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	0792      	lsls	r2, r2, #30
 80056d6:	d50c      	bpl.n	80056f2 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056d8:	f06f 0202 	mvn.w	r2, #2
 80056dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056de:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056e2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e4:	0799      	lsls	r1, r3, #30
 80056e6:	f000 8085 	beq.w	80057f4 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	f7ff ffe9 	bl	80056c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ee:	2300      	movs	r3, #0
 80056f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	0752      	lsls	r2, r2, #29
 80056f8:	d510      	bpl.n	800571c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	0750      	lsls	r0, r2, #29
 80056fe:	d50d      	bpl.n	800571c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005700:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005704:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005708:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800570a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800570c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800570e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005712:	d075      	beq.n	8005800 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005714:	f7ff ffd4 	bl	80056c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005718:	2300      	movs	r3, #0
 800571a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	0711      	lsls	r1, r2, #28
 8005722:	d50f      	bpl.n	8005744 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	0712      	lsls	r2, r2, #28
 8005728:	d50c      	bpl.n	8005744 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800572a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800572e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005732:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005734:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005736:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005738:	079b      	lsls	r3, r3, #30
 800573a:	d067      	beq.n	800580c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800573c:	f7ff ffc0 	bl	80056c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005740:	2300      	movs	r3, #0
 8005742:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	06d0      	lsls	r0, r2, #27
 800574a:	d510      	bpl.n	800576e <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	06d1      	lsls	r1, r2, #27
 8005750:	d50d      	bpl.n	800576e <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005752:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800575a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800575c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800575e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005760:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005764:	d058      	beq.n	8005818 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	f7ff ffab 	bl	80056c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	2300      	movs	r3, #0
 800576c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	07d2      	lsls	r2, r2, #31
 8005774:	d508      	bpl.n	8005788 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	07d0      	lsls	r0, r2, #31
 800577a:	d505      	bpl.n	8005788 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800577c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005780:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005782:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005784:	f7fc fbd4 	bl	8001f30 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	0611      	lsls	r1, r2, #24
 800578e:	d508      	bpl.n	80057a2 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	0612      	lsls	r2, r2, #24
 8005794:	d505      	bpl.n	80057a2 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005796:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800579a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800579c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800579e:	f000 fae0 	bl	8005d62 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	05d0      	lsls	r0, r2, #23
 80057a8:	d508      	bpl.n	80057bc <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	0611      	lsls	r1, r2, #24
 80057ae:	d505      	bpl.n	80057bc <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 80057b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80057b8:	f000 fad4 	bl	8005d64 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	0652      	lsls	r2, r2, #25
 80057c2:	d508      	bpl.n	80057d6 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	0650      	lsls	r0, r2, #25
 80057c8:	d505      	bpl.n	80057d6 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80057ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80057d2:	f7ff ff77 	bl	80056c4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	0691      	lsls	r1, r2, #26
 80057dc:	d522      	bpl.n	8005824 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	0692      	lsls	r2, r2, #26
 80057e2:	d51f      	bpl.n	8005824 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80057e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ea:	611a      	str	r2, [r3, #16]
}
 80057ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80057f0:	f000 bab6 	b.w	8005d60 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f4:	f7ff ff63 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	4620      	mov	r0, r4
 80057fa:	f7ff ff62 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80057fe:	e776      	b.n	80056ee <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005800:	f7ff ff5d 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff ff5c 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
 800580a:	e785      	b.n	8005718 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580c:	f7ff ff57 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff ff56 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005816:	e793      	b.n	8005740 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005818:	f7ff ff51 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff ff50 	bl	80056c2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005822:	e7a2      	b.n	800576a <HAL_TIM_IRQHandler+0xa4>
}
 8005824:	bd10      	pop	{r4, pc}
	...

08005828 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	4a30      	ldr	r2, [pc, #192]	; (80058ec <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800582a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800582c:	4290      	cmp	r0, r2
 800582e:	d012      	beq.n	8005856 <TIM_Base_SetConfig+0x2e>
 8005830:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005834:	d00f      	beq.n	8005856 <TIM_Base_SetConfig+0x2e>
 8005836:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800583a:	4290      	cmp	r0, r2
 800583c:	d00b      	beq.n	8005856 <TIM_Base_SetConfig+0x2e>
 800583e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005842:	4290      	cmp	r0, r2
 8005844:	d007      	beq.n	8005856 <TIM_Base_SetConfig+0x2e>
 8005846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800584a:	4290      	cmp	r0, r2
 800584c:	d003      	beq.n	8005856 <TIM_Base_SetConfig+0x2e>
 800584e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005852:	4290      	cmp	r0, r2
 8005854:	d119      	bne.n	800588a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005856:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800585c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585e:	4a23      	ldr	r2, [pc, #140]	; (80058ec <TIM_Base_SetConfig+0xc4>)
 8005860:	4290      	cmp	r0, r2
 8005862:	d029      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 8005864:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005868:	d026      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 800586a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800586e:	4290      	cmp	r0, r2
 8005870:	d022      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 8005872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005876:	4290      	cmp	r0, r2
 8005878:	d01e      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 800587a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800587e:	4290      	cmp	r0, r2
 8005880:	d01a      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 8005882:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005886:	4290      	cmp	r0, r2
 8005888:	d016      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 800588a:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <TIM_Base_SetConfig+0xc8>)
 800588c:	4290      	cmp	r0, r2
 800588e:	d013      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 8005890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005894:	4290      	cmp	r0, r2
 8005896:	d00f      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 8005898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800589c:	4290      	cmp	r0, r2
 800589e:	d00b      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 80058a0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80058a4:	4290      	cmp	r0, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 80058a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058ac:	4290      	cmp	r0, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_Base_SetConfig+0x90>
 80058b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058b4:	4290      	cmp	r0, r2
 80058b6:	d103      	bne.n	80058c0 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058bc:	68ca      	ldr	r2, [r1, #12]
 80058be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c0:	694a      	ldr	r2, [r1, #20]
 80058c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80058c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ca:	688b      	ldr	r3, [r1, #8]
 80058cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058ce:	680b      	ldr	r3, [r1, #0]
 80058d0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <TIM_Base_SetConfig+0xc4>)
 80058d4:	4298      	cmp	r0, r3
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0xb8>
 80058d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058dc:	4298      	cmp	r0, r3
 80058de:	d101      	bne.n	80058e4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 80058e0:	690b      	ldr	r3, [r1, #16]
 80058e2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	2301      	movs	r3, #1
 80058e6:	6143      	str	r3, [r0, #20]
}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40014000 	.word	0x40014000

080058f4 <HAL_TIM_Base_Init>:
{
 80058f4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80058f6:	4604      	mov	r4, r0
 80058f8:	b1a0      	cbz	r0, 8005924 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80058fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005902:	b91b      	cbnz	r3, 800590c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005904:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005908:	f7fc ffdc 	bl	80028c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8005912:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005916:	f7ff ff87 	bl	8005828 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800591a:	2301      	movs	r3, #1
  return HAL_OK;
 800591c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800591e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005922:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005924:	2001      	movs	r0, #1
 8005926:	e7fc      	b.n	8005922 <HAL_TIM_Base_Init+0x2e>

08005928 <HAL_TIM_PWM_Init>:
{
 8005928:	b510      	push	{r4, lr}
  if (htim == NULL)
 800592a:	4604      	mov	r4, r0
 800592c:	b1a0      	cbz	r0, 8005958 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800592e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005932:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005936:	b91b      	cbnz	r3, 8005940 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005938:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800593c:	f7fc ffa4 	bl	8002888 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8005946:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800594a:	f7ff ff6d 	bl	8005828 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800594e:	2301      	movs	r3, #1
  return HAL_OK;
 8005950:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005952:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005956:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005958:	2001      	movs	r0, #1
 800595a:	e7fc      	b.n	8005956 <HAL_TIM_PWM_Init+0x2e>

0800595c <HAL_TIM_OnePulse_Init>:
{
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	460d      	mov	r5, r1
  if (htim == NULL)
 8005960:	4604      	mov	r4, r0
 8005962:	b1e0      	cbz	r0, 800599e <HAL_TIM_OnePulse_Init+0x42>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005964:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005968:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800596c:	b91b      	cbnz	r3, 8005976 <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 800596e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8005972:	f7ff fea3 	bl	80056bc <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005976:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005978:	1d21      	adds	r1, r4, #4
 800597a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005980:	f7ff ff52 	bl	8005828 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005984:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8005986:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	f022 0208 	bic.w	r2, r2, #8
 800598e:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	4329      	orrs	r1, r5
 8005994:	6019      	str	r1, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005996:	2301      	movs	r3, #1
 8005998:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800599c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800599e:	2001      	movs	r0, #1
 80059a0:	e7fc      	b.n	800599c <HAL_TIM_OnePulse_Init+0x40>
	...

080059a4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a4:	6a03      	ldr	r3, [r0, #32]
 80059a6:	f023 0310 	bic.w	r3, r3, #16
{
 80059aa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ac:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80059ae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80059b0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80059b2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80059b4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059ba:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80059be:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059c6:	688d      	ldr	r5, [r1, #8]
 80059c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059cc:	4d10      	ldr	r5, [pc, #64]	; (8005a10 <TIM_OC2_SetConfig+0x6c>)
 80059ce:	42a8      	cmp	r0, r5
 80059d0:	d003      	beq.n	80059da <TIM_OC2_SetConfig+0x36>
 80059d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059d6:	42a8      	cmp	r0, r5
 80059d8:	d114      	bne.n	8005a04 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e4:	4d0a      	ldr	r5, [pc, #40]	; (8005a10 <TIM_OC2_SetConfig+0x6c>)
 80059e6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80059e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ec:	d003      	beq.n	80059f6 <TIM_OC2_SetConfig+0x52>
 80059ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059f2:	42a8      	cmp	r0, r5
 80059f4:	d106      	bne.n	8005a04 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059fa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80059fe:	4335      	orrs	r5, r6
 8005a00:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005a04:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005a06:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005a08:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005a0a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005a0c:	6203      	str	r3, [r0, #32]
}
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	40010000 	.word	0x40010000

08005a14 <HAL_TIM_PWM_ConfigChannel>:
{
 8005a14:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005a16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d010      	beq.n	8005a44 <HAL_TIM_PWM_ConfigChannel+0x30>
 8005a22:	2301      	movs	r3, #1
  switch (Channel)
 8005a24:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8005a26:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005a2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8005a2e:	d043      	beq.n	8005ab8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8005a30:	d809      	bhi.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005a32:	b1fa      	cbz	r2, 8005a74 <HAL_TIM_PWM_ConfigChannel+0x60>
 8005a34:	2a04      	cmp	r2, #4
 8005a36:	d02e      	beq.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x82>
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005a3a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005a40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005a44:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005a46:	2a10      	cmp	r2, #16
 8005a48:	d047      	beq.n	8005ada <HAL_TIM_PWM_ConfigChannel+0xc6>
 8005a4a:	2a14      	cmp	r2, #20
 8005a4c:	d056      	beq.n	8005afc <HAL_TIM_PWM_ConfigChannel+0xe8>
 8005a4e:	2a0c      	cmp	r2, #12
 8005a50:	d1f2      	bne.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	f7ff fd8c 	bl	8005570 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a58:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a5a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005a72:	e030      	b.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0xc2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	f7ff fd0f 	bl	8005498 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a7c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	f042 0208 	orr.w	r2, r2, #8
 8005a84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	f022 0204 	bic.w	r2, r2, #4
 8005a8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a92:	619a      	str	r2, [r3, #24]
      break;
 8005a94:	e7d0      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	f7ff ff84 	bl	80059a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a9c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a9e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ab6:	e7ec      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ab8:	6820      	ldr	r0, [r4, #0]
 8005aba:	f7ff fd21 	bl	8005500 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005abe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ac0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	f042 0208 	orr.w	r2, r2, #8
 8005ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	f022 0204 	bic.w	r2, r2, #4
 8005ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ad6:	61da      	str	r2, [r3, #28]
      break;
 8005ad8:	e7ae      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	f7ff fd70 	bl	80055c0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ae0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ae2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aee:	f022 0204 	bic.w	r2, r2, #4
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005af6:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005afa:	e79d      	b.n	8005a38 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	f7ff fd87 	bl	8005610 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b02:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b04:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b1c:	e7ec      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0xe4>

08005b1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b1e:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b20:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8005b22:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b24:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b28:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b2c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b2e:	6083      	str	r3, [r0, #8]
}
 8005b30:	bd10      	pop	{r4, pc}
	...

08005b34 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005b34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b38:	2b01      	cmp	r3, #1
{
 8005b3a:	b570      	push	{r4, r5, r6, lr}
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005b42:	d017      	beq.n	8005b74 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005b48:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8005b4a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005b4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005b50:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b52:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_TIM_ConfigClockSource+0x124>)
 8005b54:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005b56:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b58:	680b      	ldr	r3, [r1, #0]
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d065      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0xf6>
 8005b5e:	d815      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x58>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d00c      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x4a>
 8005b64:	d807      	bhi.n	8005b76 <HAL_TIM_ConfigClockSource+0x42>
 8005b66:	b153      	cbz	r3, 8005b7e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005b6a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b70:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d001      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x4a>
 8005b7a:	2b30      	cmp	r3, #48	; 0x30
 8005b7c:	d1f4      	bne.n	8005b68 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8005b7e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b80:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	e01a      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8005b8c:	2b60      	cmp	r3, #96	; 0x60
 8005b8e:	d034      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0xc6>
 8005b90:	d819      	bhi.n	8005bc6 <HAL_TIM_ConfigClockSource+0x92>
 8005b92:	2b50      	cmp	r3, #80	; 0x50
 8005b94:	d1e8      	bne.n	8005b68 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	684a      	ldr	r2, [r1, #4]
 8005b98:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005b9a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b9e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba2:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8005ba6:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005baa:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bb0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005bb4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005bb6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005bb8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bbe:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005bc2:	6083      	str	r3, [r0, #8]
 8005bc4:	e7d0      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8005bc6:	2b70      	cmp	r3, #112	; 0x70
 8005bc8:	d00c      	beq.n	8005be4 <HAL_TIM_ConfigClockSource+0xb0>
 8005bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bce:	d1cb      	bne.n	8005b68 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8005bd0:	68cb      	ldr	r3, [r1, #12]
 8005bd2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005bd6:	f7ff ffa2 	bl	8005b1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	6893      	ldr	r3, [r2, #8]
 8005bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be2:	e008      	b.n	8005bf6 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8005be4:	68cb      	ldr	r3, [r1, #12]
 8005be6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005bea:	f7ff ff98 	bl	8005b1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bf2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf6:	6093      	str	r3, [r2, #8]
      break;
 8005bf8:	e7b6      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfa:	684d      	ldr	r5, [r1, #4]
 8005bfc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bfe:	6a01      	ldr	r1, [r0, #32]
 8005c00:	f021 0110 	bic.w	r1, r1, #16
 8005c04:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c06:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005c08:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c0a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c12:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005c1a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c1c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005c1e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c24:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8005c28:	e7cb      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2a:	684a      	ldr	r2, [r1, #4]
 8005c2c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c2e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c30:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c32:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c36:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8005c3a:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005c48:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c4a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005c4c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c52:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8005c56:	e7b4      	b.n	8005bc2 <HAL_TIM_ConfigClockSource+0x8e>
 8005c58:	fffe0088 	.word	0xfffe0088

08005c5c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c5c:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c60:	6a03      	ldr	r3, [r0, #32]
{
 8005c62:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c64:	2401      	movs	r4, #1

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c66:	408a      	lsls	r2, r1
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c68:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005c6a:	ea23 0304 	bic.w	r3, r3, r4
 8005c6e:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c70:	6a03      	ldr	r3, [r0, #32]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	6202      	str	r2, [r0, #32]
}
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <HAL_TIM_OC_Start>:
{
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	6800      	ldr	r0, [r0, #0]
 8005c80:	f7ff ffec 	bl	8005c5c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <HAL_TIM_OC_Start+0x40>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <HAL_TIM_OC_Start+0x1c>
 8005c8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d103      	bne.n	8005c9c <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8005c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c9a:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <HAL_TIM_OC_Start+0x44>)
 8005ca0:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca2:	2a06      	cmp	r2, #6
 8005ca4:	d006      	beq.n	8005cb4 <HAL_TIM_OC_Start+0x3c>
 8005ca6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005caa:	d003      	beq.n	8005cb4 <HAL_TIM_OC_Start+0x3c>
    __HAL_TIM_ENABLE(htim);
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	bd10      	pop	{r4, pc}
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	00010007 	.word	0x00010007

08005cc0 <HAL_TIM_PWM_Start>:
 8005cc0:	f7ff bfda 	b.w	8005c78 <HAL_TIM_OC_Start>

08005cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	f04f 0302 	mov.w	r3, #2
{
 8005cce:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005cd0:	d03e      	beq.n	8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005cd6:	2201      	movs	r2, #1

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd8:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cda:	4d1e      	ldr	r5, [pc, #120]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  __HAL_LOCK(htim);
 8005cdc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce0:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005ce2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005ce4:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce6:	d002      	beq.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8005ce8:	4e1b      	ldr	r6, [pc, #108]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8005cea:	42b3      	cmp	r3, r6
 8005cec:	d103      	bne.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf2:	684e      	ldr	r6, [r1, #4]
 8005cf4:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cf6:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cfe:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8005d02:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d04:	d019      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d016      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005d0c:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005d22:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005d2a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x76>
 8005d32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d104      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3a:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d3c:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d40:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005d50:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40010400 	.word	0x40010400
 8005d5c:	40000400 	.word	0x40000400

08005d60 <HAL_TIMEx_CommutCallback>:
 8005d60:	4770      	bx	lr

08005d62 <HAL_TIMEx_BreakCallback>:
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIMEx_Break2Callback>:
 8005d64:	4770      	bx	lr

08005d66 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d66:	6803      	ldr	r3, [r0, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d78:	2320      	movs	r3, #32
 8005d7a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005d80:	4770      	bx	lr
	...

08005d84 <HAL_UART_Transmit_DMA>:
{
 8005d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d86:	4604      	mov	r4, r0
 8005d88:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8a:	6f67      	ldr	r7, [r4, #116]	; 0x74
 8005d8c:	2f20      	cmp	r7, #32
 8005d8e:	d136      	bne.n	8005dfe <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 8005d90:	b341      	cbz	r1, 8005de4 <HAL_UART_Transmit_DMA+0x60>
 8005d92:	b33a      	cbz	r2, 8005de4 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8005d94:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8005d98:	2a01      	cmp	r2, #1
 8005d9a:	d030      	beq.n	8005dfe <HAL_UART_Transmit_DMA+0x7a>
 8005d9c:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9e:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005da0:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8005da2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 8005da4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 8005da8:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dac:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 8005dae:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005db0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005db4:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8005db6:	b1b8      	cbz	r0, 8005de8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005db8:	f8df c048 	ldr.w	ip, [pc, #72]	; 8005e04 <HAL_UART_Transmit_DMA+0x80>
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dc2:	f8df c044 	ldr.w	ip, [pc, #68]	; 8005e08 <HAL_UART_Transmit_DMA+0x84>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005dc6:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dc8:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005dcc:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8005e0c <HAL_UART_Transmit_DMA+0x88>
      huart->hdmatx->XferAbortCallback = NULL;
 8005dd0:	e9c0 c613 	strd	ip, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005dd4:	f7fe fc62 	bl	800469c <HAL_DMA_Start_IT>
 8005dd8:	b130      	cbz	r0, 8005de8 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dda:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8005ddc:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005de0:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8005de2:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 8005de4:	2001      	movs	r0, #1
 8005de6:	e009      	b.n	8005dfc <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8005dec:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005dee:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005df0:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8005df2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005dfe:	2002      	movs	r0, #2
 8005e00:	e7fc      	b.n	8005dfc <HAL_UART_Transmit_DMA+0x78>
 8005e02:	bf00      	nop
 8005e04:	08005ea1 	.word	0x08005ea1
 8005e08:	08005ed1 	.word	0x08005ed1
 8005e0c:	08005f21 	.word	0x08005f21

08005e10 <HAL_UART_Receive_DMA>:
{
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e12:	6f87      	ldr	r7, [r0, #120]	; 0x78
{
 8005e14:	4604      	mov	r4, r0
 8005e16:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e18:	2f20      	cmp	r7, #32
 8005e1a:	d138      	bne.n	8005e8e <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	b321      	cbz	r1, 8005e68 <HAL_UART_Receive_DMA+0x58>
 8005e1e:	b31a      	cbz	r2, 8005e68 <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 8005e20:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 8005e24:	2a01      	cmp	r2, #1
 8005e26:	d032      	beq.n	8005e8e <HAL_UART_Receive_DMA+0x7e>
 8005e28:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2a:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e2c:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8005e2e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e30:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8005e32:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    huart->RxXferSize = Size;
 8005e36:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e3a:	6782      	str	r2, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 8005e3c:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8005e3e:	b1a8      	cbz	r0, 8005e6c <HAL_UART_Receive_DMA+0x5c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e40:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <HAL_UART_Receive_DMA+0x84>)
 8005e42:	f8d4 c000 	ldr.w	ip, [r4]
 8005e46:	63c2      	str	r2, [r0, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e48:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <HAL_UART_Receive_DMA+0x88>)
 8005e4a:	6402      	str	r2, [r0, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e4c:	4a13      	ldr	r2, [pc, #76]	; (8005e9c <HAL_UART_Receive_DMA+0x8c>)
      huart->hdmarx->XferAbortCallback = NULL;
 8005e4e:	e9c0 2613 	strd	r2, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e52:	460a      	mov	r2, r1
 8005e54:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 8005e58:	f7fe fc20 	bl	800469c <HAL_DMA_Start_IT>
 8005e5c:	b130      	cbz	r0, 8005e6c <HAL_UART_Receive_DMA+0x5c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e5e:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8005e60:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e64:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8005e66:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 8005e68:	2001      	movs	r0, #1
 8005e6a:	e00f      	b.n	8005e8c <HAL_UART_Receive_DMA+0x7c>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e6c:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8005e6e:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e70:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8005e72:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e7a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005e8e:	2002      	movs	r0, #2
 8005e90:	e7fc      	b.n	8005e8c <HAL_UART_Receive_DMA+0x7c>
 8005e92:	bf00      	nop
 8005e94:	08005edd 	.word	0x08005edd
 8005e98:	08005f17 	.word	0x08005f17
 8005e9c:	08005f21 	.word	0x08005f21

08005ea0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ea0:	69c2      	ldr	r2, [r0, #28]
 8005ea2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8005ea6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ea8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005eaa:	d00c      	beq.n	8005ec6 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eba:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ec4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fc f842 	bl	8001f50 <HAL_UART_TxCpltCallback>
}
 8005ecc:	e7fa      	b.n	8005ec4 <UART_DMATransmitCplt+0x24>

08005ece <HAL_UART_TxHalfCpltCallback>:
 8005ece:	4770      	bx	lr

08005ed0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ed2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005ed4:	f7ff fffb 	bl	8005ece <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed8:	bd08      	pop	{r3, pc}

08005eda <HAL_UART_RxCpltCallback>:
 8005eda:	4770      	bx	lr

08005edc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005edc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ede:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ee0:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee6:	d011      	beq.n	8005f0c <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eee:	6813      	ldr	r3, [r2, #0]
 8005ef0:	6819      	ldr	r1, [r3, #0]
 8005ef2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005ef6:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef8:	6899      	ldr	r1, [r3, #8]
 8005efa:	f021 0101 	bic.w	r1, r1, #1
 8005efe:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f00:	6899      	ldr	r1, [r3, #8]
 8005f02:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005f06:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f08:	2320      	movs	r3, #32
 8005f0a:	6793      	str	r3, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f7ff ffe4 	bl	8005eda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f12:	bd08      	pop	{r3, pc}

08005f14 <HAL_UART_RxHalfCpltCallback>:
 8005f14:	4770      	bx	lr

08005f16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f16:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005f18:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005f1a:	f7ff fffb 	bl	8005f14 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f1e:	bd08      	pop	{r3, pc}

08005f20 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f20:	6b81      	ldr	r1, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005f22:	680b      	ldr	r3, [r1, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005f24:	6f4a      	ldr	r2, [r1, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005f26:	6f88      	ldr	r0, [r1, #120]	; 0x78
{
 8005f28:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005f2a:	689c      	ldr	r4, [r3, #8]
 8005f2c:	0624      	lsls	r4, r4, #24
 8005f2e:	d50a      	bpl.n	8005f46 <UART_DMAError+0x26>
 8005f30:	2a21      	cmp	r2, #33	; 0x21
 8005f32:	d108      	bne.n	8005f46 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005f40:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005f42:	2220      	movs	r2, #32
 8005f44:	674a      	str	r2, [r1, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	065b      	lsls	r3, r3, #25
 8005f4a:	d507      	bpl.n	8005f5c <UART_DMAError+0x3c>
 8005f4c:	2822      	cmp	r0, #34	; 0x22
 8005f4e:	d105      	bne.n	8005f5c <UART_DMAError+0x3c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005f50:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8005f52:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8005f54:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005f58:	f7ff ff05 	bl	8005d66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f5c:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f5e:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f60:	f043 0310 	orr.w	r3, r3, #16
 8005f64:	67cb      	str	r3, [r1, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8005f66:	f7fb fffe 	bl	8001f66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f6a:	bd10      	pop	{r4, pc}

08005f6c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f6c:	6803      	ldr	r3, [r0, #0]
{
 8005f6e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f70:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8005f72:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f76:	6819      	ldr	r1, [r3, #0]
{
 8005f78:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8005f7a:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f7c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8005f7e:	d109      	bne.n	8005f94 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f80:	0696      	lsls	r6, r2, #26
 8005f82:	d56e      	bpl.n	8006062 <HAL_UART_IRQHandler+0xf6>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f84:	068d      	lsls	r5, r1, #26
 8005f86:	d56c      	bpl.n	8006062 <HAL_UART_IRQHandler+0xf6>
      if (huart->RxISR != NULL)
 8005f88:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d064      	beq.n	8006058 <HAL_UART_IRQHandler+0xec>
}
 8005f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005f92:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f94:	f015 0001 	ands.w	r0, r5, #1
 8005f98:	d102      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005f9a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005f9e:	d060      	beq.n	8006062 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fa0:	07d6      	lsls	r6, r2, #31
 8005fa2:	d507      	bpl.n	8005fb4 <HAL_UART_IRQHandler+0x48>
 8005fa4:	05cd      	lsls	r5, r1, #23
 8005fa6:	d505      	bpl.n	8005fb4 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fa8:	2501      	movs	r5, #1
 8005faa:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fac:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8005fae:	f045 0501 	orr.w	r5, r5, #1
 8005fb2:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fb4:	0796      	lsls	r6, r2, #30
 8005fb6:	d506      	bpl.n	8005fc6 <HAL_UART_IRQHandler+0x5a>
 8005fb8:	b128      	cbz	r0, 8005fc6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fba:	2502      	movs	r5, #2
 8005fbc:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fbe:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8005fc0:	f045 0504 	orr.w	r5, r5, #4
 8005fc4:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fc6:	0755      	lsls	r5, r2, #29
 8005fc8:	d506      	bpl.n	8005fd8 <HAL_UART_IRQHandler+0x6c>
 8005fca:	b128      	cbz	r0, 8005fd8 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fcc:	2504      	movs	r5, #4
 8005fce:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fd0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8005fd2:	f045 0502 	orr.w	r5, r5, #2
 8005fd6:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fd8:	0716      	lsls	r6, r2, #28
 8005fda:	d508      	bpl.n	8005fee <HAL_UART_IRQHandler+0x82>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fdc:	068d      	lsls	r5, r1, #26
 8005fde:	d400      	bmi.n	8005fe2 <HAL_UART_IRQHandler+0x76>
 8005fe0:	b128      	cbz	r0, 8005fee <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe2:	2008      	movs	r0, #8
 8005fe4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005fe8:	f040 0008 	orr.w	r0, r0, #8
 8005fec:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fee:	0510      	lsls	r0, r2, #20
 8005ff0:	d508      	bpl.n	8006004 <HAL_UART_IRQHandler+0x98>
 8005ff2:	014e      	lsls	r6, r1, #5
 8005ff4:	d506      	bpl.n	8006004 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ff6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ffa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ffc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005ffe:	f043 0320 	orr.w	r3, r3, #32
 8006002:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006004:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006006:	b33b      	cbz	r3, 8006058 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006008:	0695      	lsls	r5, r2, #26
 800600a:	d505      	bpl.n	8006018 <HAL_UART_IRQHandler+0xac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800600c:	0688      	lsls	r0, r1, #26
 800600e:	d503      	bpl.n	8006018 <HAL_UART_IRQHandler+0xac>
        if (huart->RxISR != NULL)
 8006010:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006012:	b10b      	cbz	r3, 8006018 <HAL_UART_IRQHandler+0xac>
          huart->RxISR(huart);
 8006014:	4620      	mov	r0, r4
 8006016:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006018:	6822      	ldr	r2, [r4, #0]
        UART_EndRxTransfer(huart);
 800601a:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800601c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800601e:	6892      	ldr	r2, [r2, #8]
 8006020:	0651      	lsls	r1, r2, #25
 8006022:	d402      	bmi.n	800602a <HAL_UART_IRQHandler+0xbe>
 8006024:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8006028:	d017      	beq.n	800605a <HAL_UART_IRQHandler+0xee>
        UART_EndRxTransfer(huart);
 800602a:	f7ff fe9c 	bl	8005d66 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	0652      	lsls	r2, r2, #25
 8006034:	d50d      	bpl.n	8006052 <HAL_UART_IRQHandler+0xe6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006036:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006038:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800603a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006040:	b138      	cbz	r0, 8006052 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <HAL_UART_IRQHandler+0x128>)
 8006044:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006046:	f7fe fb66 	bl	8004716 <HAL_DMA_Abort_IT>
 800604a:	b128      	cbz	r0, 8006058 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800604c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800604e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006050:	e79d      	b.n	8005f8e <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 8006052:	4620      	mov	r0, r4
 8006054:	f7fb ff87 	bl	8001f66 <HAL_UART_ErrorCallback>
}
 8006058:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800605a:	f7fb ff84 	bl	8001f66 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8006060:	e7fa      	b.n	8006058 <HAL_UART_IRQHandler+0xec>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006062:	0616      	lsls	r6, r2, #24
 8006064:	d506      	bpl.n	8006074 <HAL_UART_IRQHandler+0x108>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006066:	060d      	lsls	r5, r1, #24
 8006068:	d504      	bpl.n	8006074 <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 800606a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f3      	beq.n	8006058 <HAL_UART_IRQHandler+0xec>
      huart->TxISR(huart);
 8006070:	4620      	mov	r0, r4
 8006072:	e78c      	b.n	8005f8e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006074:	0650      	lsls	r0, r2, #25
 8006076:	d5ef      	bpl.n	8006058 <HAL_UART_IRQHandler+0xec>
 8006078:	064a      	lsls	r2, r1, #25
 800607a:	d5ed      	bpl.n	8006058 <HAL_UART_IRQHandler+0xec>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800607c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800607e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006084:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006086:	2320      	movs	r3, #32
 8006088:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800608e:	f7fb ff5f 	bl	8001f50 <HAL_UART_TxCpltCallback>
 8006092:	e7e1      	b.n	8006058 <HAL_UART_IRQHandler+0xec>
 8006094:	08006099 	.word	0x08006099

08006098 <UART_DMAAbortOnError>:
{
 8006098:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800609a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060a2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80060a6:	f7fb ff5e 	bl	8001f66 <HAL_UART_ErrorCallback>
}
 80060aa:	bd08      	pop	{r3, pc}

080060ac <UART_SetConfig>:
{
 80060ac:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ae:	69c2      	ldr	r2, [r0, #28]
{
 80060b0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b2:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060b4:	6881      	ldr	r1, [r0, #8]
 80060b6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060b8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060ba:	4301      	orrs	r1, r0
 80060bc:	6960      	ldr	r0, [r4, #20]
 80060be:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c0:	489a      	ldr	r0, [pc, #616]	; (800632c <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c2:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c4:	4028      	ands	r0, r5
  tmpreg |= huart->Init.OneBitSampling;
 80060c6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ca:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060cc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ce:	6859      	ldr	r1, [r3, #4]
 80060d0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80060d4:	4301      	orrs	r1, r0
 80060d6:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060d8:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060da:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80060dc:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060de:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80060e2:	4301      	orrs	r1, r0
 80060e4:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060e6:	4992      	ldr	r1, [pc, #584]	; (8006330 <UART_SetConfig+0x284>)
 80060e8:	428b      	cmp	r3, r1
 80060ea:	d118      	bne.n	800611e <UART_SetConfig+0x72>
 80060ec:	4b91      	ldr	r3, [pc, #580]	; (8006334 <UART_SetConfig+0x288>)
 80060ee:	4992      	ldr	r1, [pc, #584]	; (8006338 <UART_SetConfig+0x28c>)
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	5ccb      	ldrb	r3, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80060fe:	f040 80bd 	bne.w	800627c <UART_SetConfig+0x1d0>
    switch (clocksource)
 8006102:	2b08      	cmp	r3, #8
 8006104:	f200 80af 	bhi.w	8006266 <UART_SetConfig+0x1ba>
 8006108:	e8df f013 	tbh	[pc, r3, lsl #1]
 800610c:	00aa0095 	.word	0x00aa0095
 8006110:	00ad00f9 	.word	0x00ad00f9
 8006114:	00ad0105 	.word	0x00ad0105
 8006118:	00ad00ad 	.word	0x00ad00ad
 800611c:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 800611e:	4987      	ldr	r1, [pc, #540]	; (800633c <UART_SetConfig+0x290>)
 8006120:	428b      	cmp	r3, r1
 8006122:	d106      	bne.n	8006132 <UART_SetConfig+0x86>
 8006124:	4b83      	ldr	r3, [pc, #524]	; (8006334 <UART_SetConfig+0x288>)
 8006126:	4986      	ldr	r1, [pc, #536]	; (8006340 <UART_SetConfig+0x294>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	e7e2      	b.n	80060f8 <UART_SetConfig+0x4c>
 8006132:	4984      	ldr	r1, [pc, #528]	; (8006344 <UART_SetConfig+0x298>)
 8006134:	428b      	cmp	r3, r1
 8006136:	d118      	bne.n	800616a <UART_SetConfig+0xbe>
 8006138:	4b7e      	ldr	r3, [pc, #504]	; (8006334 <UART_SetConfig+0x288>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006142:	2b10      	cmp	r3, #16
 8006144:	f000 80e4 	beq.w	8006310 <UART_SetConfig+0x264>
 8006148:	d802      	bhi.n	8006150 <UART_SetConfig+0xa4>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0d5      	beq.n	80060fa <UART_SetConfig+0x4e>
 800614e:	e005      	b.n	800615c <UART_SetConfig+0xb0>
 8006150:	2b20      	cmp	r3, #32
 8006152:	f000 80d1 	beq.w	80062f8 <UART_SetConfig+0x24c>
 8006156:	2b30      	cmp	r3, #48	; 0x30
 8006158:	f000 80e0 	beq.w	800631c <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006160:	f000 8081 	beq.w	8006266 <UART_SetConfig+0x1ba>
        ret = HAL_ERROR;
 8006164:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006166:	2300      	movs	r3, #0
 8006168:	e0a9      	b.n	80062be <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800616a:	4977      	ldr	r1, [pc, #476]	; (8006348 <UART_SetConfig+0x29c>)
 800616c:	428b      	cmp	r3, r1
 800616e:	d10d      	bne.n	800618c <UART_SetConfig+0xe0>
 8006170:	4b70      	ldr	r3, [pc, #448]	; (8006334 <UART_SetConfig+0x288>)
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	f000 80c8 	beq.w	8006310 <UART_SetConfig+0x264>
 8006180:	d9e3      	bls.n	800614a <UART_SetConfig+0x9e>
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	f000 80b8 	beq.w	80062f8 <UART_SetConfig+0x24c>
 8006188:	2bc0      	cmp	r3, #192	; 0xc0
 800618a:	e7e5      	b.n	8006158 <UART_SetConfig+0xac>
 800618c:	496f      	ldr	r1, [pc, #444]	; (800634c <UART_SetConfig+0x2a0>)
 800618e:	428b      	cmp	r3, r1
 8006190:	d110      	bne.n	80061b4 <UART_SetConfig+0x108>
 8006192:	4b68      	ldr	r3, [pc, #416]	; (8006334 <UART_SetConfig+0x288>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a0:	f000 80b6 	beq.w	8006310 <UART_SetConfig+0x264>
 80061a4:	d9d1      	bls.n	800614a <UART_SetConfig+0x9e>
 80061a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061aa:	f000 80a5 	beq.w	80062f8 <UART_SetConfig+0x24c>
 80061ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b2:	e7d1      	b.n	8006158 <UART_SetConfig+0xac>
 80061b4:	4966      	ldr	r1, [pc, #408]	; (8006350 <UART_SetConfig+0x2a4>)
 80061b6:	428b      	cmp	r3, r1
 80061b8:	d114      	bne.n	80061e4 <UART_SetConfig+0x138>
 80061ba:	4b5e      	ldr	r3, [pc, #376]	; (8006334 <UART_SetConfig+0x288>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c8:	f000 80a2 	beq.w	8006310 <UART_SetConfig+0x264>
 80061cc:	d803      	bhi.n	80061d6 <UART_SetConfig+0x12a>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1c4      	bne.n	800615c <UART_SetConfig+0xb0>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e791      	b.n	80060fa <UART_SetConfig+0x4e>
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061da:	f000 808d 	beq.w	80062f8 <UART_SetConfig+0x24c>
 80061de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e2:	e7b9      	b.n	8006158 <UART_SetConfig+0xac>
 80061e4:	495b      	ldr	r1, [pc, #364]	; (8006354 <UART_SetConfig+0x2a8>)
 80061e6:	428b      	cmp	r3, r1
 80061e8:	d113      	bne.n	8006212 <UART_SetConfig+0x166>
 80061ea:	4b52      	ldr	r3, [pc, #328]	; (8006334 <UART_SetConfig+0x288>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f8:	f000 808a 	beq.w	8006310 <UART_SetConfig+0x264>
 80061fc:	d803      	bhi.n	8006206 <UART_SetConfig+0x15a>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1ac      	bne.n	800615c <UART_SetConfig+0xb0>
 8006202:	2300      	movs	r3, #0
 8006204:	e779      	b.n	80060fa <UART_SetConfig+0x4e>
 8006206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620a:	d075      	beq.n	80062f8 <UART_SetConfig+0x24c>
 800620c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006210:	e7a2      	b.n	8006158 <UART_SetConfig+0xac>
 8006212:	4951      	ldr	r1, [pc, #324]	; (8006358 <UART_SetConfig+0x2ac>)
 8006214:	428b      	cmp	r3, r1
 8006216:	d1a1      	bne.n	800615c <UART_SetConfig+0xb0>
 8006218:	4b46      	ldr	r3, [pc, #280]	; (8006334 <UART_SetConfig+0x288>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006226:	d073      	beq.n	8006310 <UART_SetConfig+0x264>
 8006228:	d98f      	bls.n	800614a <UART_SetConfig+0x9e>
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622e:	d063      	beq.n	80062f8 <UART_SetConfig+0x24c>
 8006230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006234:	e790      	b.n	8006158 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006236:	f7fe fee1 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800623a:	6861      	ldr	r1, [r4, #4]
 800623c:	084a      	lsrs	r2, r1, #1
 800623e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8006242:	fbb3 f3f1 	udiv	r3, r3, r1
 8006246:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006248:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800624a:	f1a3 0110 	sub.w	r1, r3, #16
 800624e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006252:	4291      	cmp	r1, r2
 8006254:	d90a      	bls.n	800626c <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 8006256:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006258:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800625a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800625e:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006260:	f7fe fedc 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 8006264:	e7e9      	b.n	800623a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8006266:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006268:	2300      	movs	r3, #0
 800626a:	e7ee      	b.n	800624a <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800626c:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006270:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8006274:	6821      	ldr	r1, [r4, #0]
 8006276:	4313      	orrs	r3, r2
 8006278:	60cb      	str	r3, [r1, #12]
 800627a:	e7ed      	b.n	8006258 <UART_SetConfig+0x1ac>
    switch (clocksource)
 800627c:	2b08      	cmp	r3, #8
 800627e:	f63f af71 	bhi.w	8006164 <UART_SetConfig+0xb8>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x1dc>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062d1 	.word	0x080062d1
 8006290:	080062d7 	.word	0x080062d7
 8006294:	08006165 	.word	0x08006165
 8006298:	080062e9 	.word	0x080062e9
 800629c:	08006165 	.word	0x08006165
 80062a0:	08006165 	.word	0x08006165
 80062a4:	08006165 	.word	0x08006165
 80062a8:	080062ef 	.word	0x080062ef
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7fe fea6 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062b0:	6862      	ldr	r2, [r4, #4]
 80062b2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80062b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ba:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80062bc:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062be:	f1a3 0110 	sub.w	r1, r3, #16
 80062c2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80062c6:	4291      	cmp	r1, r2
 80062c8:	d8c5      	bhi.n	8006256 <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	60d3      	str	r3, [r2, #12]
 80062ce:	e7c3      	b.n	8006258 <UART_SetConfig+0x1ac>
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d0:	f7fe fea4 	bl	800501c <HAL_RCC_GetPCLK2Freq>
 80062d4:	e7ec      	b.n	80062b0 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80062d6:	6860      	ldr	r0, [r4, #4]
 80062d8:	0843      	lsrs	r3, r0, #1
 80062da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80062de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80062e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80062e6:	e7e8      	b.n	80062ba <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 80062e8:	f7fe fdbc 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 80062ec:	e7e0      	b.n	80062b0 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80062ee:	6860      	ldr	r0, [r4, #4]
 80062f0:	0843      	lsrs	r3, r0, #1
 80062f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80062f6:	e7f4      	b.n	80062e2 <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80062fc:	d1eb      	bne.n	80062d6 <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80062fe:	6860      	ldr	r0, [r4, #4]
 8006300:	0843      	lsrs	r3, r0, #1
 8006302:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006306:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800630a:	fbb3 f3f0 	udiv	r3, r3, r0
 800630e:	e79a      	b.n	8006246 <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006310:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006314:	d1e8      	bne.n	80062e8 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006316:	f7fe fda5 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 800631a:	e78e      	b.n	800623a <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006320:	d1e5      	bne.n	80062ee <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006322:	6860      	ldr	r0, [r4, #4]
 8006324:	0843      	lsrs	r3, r0, #1
 8006326:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800632a:	e7ee      	b.n	800630a <UART_SetConfig+0x25e>
 800632c:	efff69f3 	.word	0xefff69f3
 8006330:	40011000 	.word	0x40011000
 8006334:	40023800 	.word	0x40023800
 8006338:	0800d884 	.word	0x0800d884
 800633c:	40004400 	.word	0x40004400
 8006340:	0800d888 	.word	0x0800d888
 8006344:	40004800 	.word	0x40004800
 8006348:	40004c00 	.word	0x40004c00
 800634c:	40005000 	.word	0x40005000
 8006350:	40011400 	.word	0x40011400
 8006354:	40007800 	.word	0x40007800
 8006358:	40007c00 	.word	0x40007c00

0800635c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800635c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800635e:	07da      	lsls	r2, r3, #31
{
 8006360:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006362:	d506      	bpl.n	8006372 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006364:	6801      	ldr	r1, [r0, #0]
 8006366:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006368:	684a      	ldr	r2, [r1, #4]
 800636a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800636e:	4322      	orrs	r2, r4
 8006370:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006372:	079c      	lsls	r4, r3, #30
 8006374:	d506      	bpl.n	8006384 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006376:	6801      	ldr	r1, [r0, #0]
 8006378:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800637a:	684a      	ldr	r2, [r1, #4]
 800637c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006380:	4322      	orrs	r2, r4
 8006382:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006384:	0759      	lsls	r1, r3, #29
 8006386:	d506      	bpl.n	8006396 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006388:	6801      	ldr	r1, [r0, #0]
 800638a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800638c:	684a      	ldr	r2, [r1, #4]
 800638e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006392:	4322      	orrs	r2, r4
 8006394:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006396:	071a      	lsls	r2, r3, #28
 8006398:	d506      	bpl.n	80063a8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800639a:	6801      	ldr	r1, [r0, #0]
 800639c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800639e:	684a      	ldr	r2, [r1, #4]
 80063a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a4:	4322      	orrs	r2, r4
 80063a6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063a8:	06dc      	lsls	r4, r3, #27
 80063aa:	d506      	bpl.n	80063ba <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063ac:	6801      	ldr	r1, [r0, #0]
 80063ae:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80063b0:	688a      	ldr	r2, [r1, #8]
 80063b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063b6:	4322      	orrs	r2, r4
 80063b8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ba:	0699      	lsls	r1, r3, #26
 80063bc:	d506      	bpl.n	80063cc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063be:	6801      	ldr	r1, [r0, #0]
 80063c0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80063c2:	688a      	ldr	r2, [r1, #8]
 80063c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063c8:	4322      	orrs	r2, r4
 80063ca:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063cc:	065a      	lsls	r2, r3, #25
 80063ce:	d510      	bpl.n	80063f2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063d0:	6801      	ldr	r1, [r0, #0]
 80063d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80063d4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063d6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80063de:	ea42 0204 	orr.w	r2, r2, r4
 80063e2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063e4:	d105      	bne.n	80063f2 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063e6:	684a      	ldr	r2, [r1, #4]
 80063e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80063ea:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80063ee:	4322      	orrs	r2, r4
 80063f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063f2:	061b      	lsls	r3, r3, #24
 80063f4:	d506      	bpl.n	8006404 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063f6:	6802      	ldr	r2, [r0, #0]
 80063f8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80063fa:	6853      	ldr	r3, [r2, #4]
 80063fc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006400:	430b      	orrs	r3, r1
 8006402:	6053      	str	r3, [r2, #4]
}
 8006404:	bd10      	pop	{r4, pc}

08006406 <UART_WaitOnFlagUntilTimeout>:
{
 8006406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640a:	9d06      	ldr	r5, [sp, #24]
 800640c:	4604      	mov	r4, r0
 800640e:	460f      	mov	r7, r1
 8006410:	4616      	mov	r6, r2
 8006412:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006414:	6821      	ldr	r1, [r4, #0]
 8006416:	69ca      	ldr	r2, [r1, #28]
 8006418:	ea37 0302 	bics.w	r3, r7, r2
 800641c:	bf0c      	ite	eq
 800641e:	2201      	moveq	r2, #1
 8006420:	2200      	movne	r2, #0
 8006422:	42b2      	cmp	r2, r6
 8006424:	d001      	beq.n	800642a <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8006426:	2000      	movs	r0, #0
 8006428:	e018      	b.n	800645c <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800642a:	1c68      	adds	r0, r5, #1
 800642c:	d0f3      	beq.n	8006416 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642e:	f7fd fd6d 	bl	8003f0c <HAL_GetTick>
 8006432:	eba0 0008 	sub.w	r0, r0, r8
 8006436:	42a8      	cmp	r0, r5
 8006438:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800643a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643c:	d800      	bhi.n	8006440 <UART_WaitOnFlagUntilTimeout+0x3a>
 800643e:	b97d      	cbnz	r5, 8006460 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006440:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006444:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	6883      	ldr	r3, [r0, #8]
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800644e:	2320      	movs	r3, #32
 8006450:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006452:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8006454:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8006456:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006458:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 800645c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006460:	075a      	lsls	r2, r3, #29
 8006462:	d5d7      	bpl.n	8006414 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006464:	69c3      	ldr	r3, [r0, #28]
 8006466:	051b      	lsls	r3, r3, #20
 8006468:	d5d4      	bpl.n	8006414 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800646e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006470:	6803      	ldr	r3, [r0, #0]
 8006472:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006476:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006478:	6883      	ldr	r3, [r0, #8]
 800647a:	f023 0301 	bic.w	r3, r3, #1
 800647e:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006480:	2320      	movs	r3, #32
 8006482:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006484:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006486:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006488:	e7e4      	b.n	8006454 <UART_WaitOnFlagUntilTimeout+0x4e>

0800648a <UART_CheckIdleState>:
{
 800648a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	2500      	movs	r5, #0
{
 800648e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006492:	f7fd fd3b 	bl	8003f0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006496:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006498:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	0712      	lsls	r2, r2, #28
 800649e:	d407      	bmi.n	80064b0 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 80064a0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80064a2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80064a4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80064a6:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80064aa:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80064ac:	b003      	add	sp, #12
 80064ae:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80064b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064b8:	4620      	mov	r0, r4
 80064ba:	9200      	str	r2, [sp, #0]
 80064bc:	462a      	mov	r2, r5
 80064be:	f7ff ffa2 	bl	8006406 <UART_WaitOnFlagUntilTimeout>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d0ec      	beq.n	80064a0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80064c6:	2003      	movs	r0, #3
 80064c8:	e7f0      	b.n	80064ac <UART_CheckIdleState+0x22>

080064ca <HAL_UART_Init>:
{
 80064ca:	b510      	push	{r4, lr}
  if (huart == NULL)
 80064cc:	4604      	mov	r4, r0
 80064ce:	b340      	cbz	r0, 8006522 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80064d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80064d2:	b91b      	cbnz	r3, 80064dc <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80064d4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80064d8:	f7fc fa78 	bl	80029cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80064dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80064de:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064e0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80064e2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80064e4:	6813      	ldr	r3, [r2, #0]
 80064e6:	f023 0301 	bic.w	r3, r3, #1
 80064ea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ec:	f7ff fdde 	bl	80060ac <UART_SetConfig>
 80064f0:	2801      	cmp	r0, #1
 80064f2:	d016      	beq.n	8006522 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f6:	b113      	cbz	r3, 80064fe <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7ff ff2f 	bl	800635c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fe:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006500:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006508:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006510:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
}
 8006518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800651c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800651e:	f7ff bfb4 	b.w	800648a <UART_CheckIdleState>
}
 8006522:	2001      	movs	r0, #1
 8006524:	bd10      	pop	{r4, pc}
	...

08006528 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006528:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800652c:	b113      	cbz	r3, 8006534 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800652e:	f06f 0005 	mvn.w	r0, #5
 8006532:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006534:	f3ef 8210 	mrs	r2, PRIMASK
 8006538:	4b07      	ldr	r3, [pc, #28]	; (8006558 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 800653a:	b912      	cbnz	r2, 8006542 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653c:	f3ef 8211 	mrs	r2, BASEPRI
 8006540:	b112      	cbz	r2, 8006548 <osKernelInitialize+0x20>
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	2a02      	cmp	r2, #2
 8006546:	d0f2      	beq.n	800652e <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	b910      	cbnz	r0, 8006552 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8006552:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006556:	4770      	bx	lr
 8006558:	20001d4c 	.word	0x20001d4c

0800655c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800655c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800655e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006562:	b113      	cbz	r3, 800656a <osKernelStart+0xe>
    stat = osErrorISR;
 8006564:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8006568:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656a:	f3ef 8210 	mrs	r2, PRIMASK
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8006570:	b912      	cbnz	r2, 8006578 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006572:	f3ef 8211 	mrs	r2, BASEPRI
 8006576:	b112      	cbz	r2, 800657e <osKernelStart+0x22>
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	2a02      	cmp	r2, #2
 800657c:	d0f2      	beq.n	8006564 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	2a01      	cmp	r2, #1
 8006582:	d105      	bne.n	8006590 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8006584:	2202      	movs	r2, #2
 8006586:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006588:	f000 ffc6 	bl	8007518 <vTaskStartScheduler>
      stat = osOK;
 800658c:	2000      	movs	r0, #0
 800658e:	e7eb      	b.n	8006568 <osKernelStart+0xc>
      stat = osError;
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006594:	e7e8      	b.n	8006568 <osKernelStart+0xc>
 8006596:	bf00      	nop
 8006598:	20001d4c 	.word	0x20001d4c

0800659c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	4614      	mov	r4, r2
 80065a0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065a2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065a4:	460b      	mov	r3, r1
  hTask = NULL;
 80065a6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80065ac:	bb32      	cbnz	r2, 80065fc <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ae:	f3ef 8210 	mrs	r2, PRIMASK
 80065b2:	b912      	cbnz	r2, 80065ba <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065b4:	f3ef 8211 	mrs	r2, BASEPRI
 80065b8:	b11a      	cbz	r2, 80065c2 <osThreadNew+0x26>
 80065ba:	4a23      	ldr	r2, [pc, #140]	; (8006648 <osThreadNew+0xac>)
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	2a02      	cmp	r2, #2
 80065c0:	d01c      	beq.n	80065fc <osThreadNew+0x60>
 80065c2:	b1d8      	cbz	r0, 80065fc <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80065c4:	2c00      	cmp	r4, #0
 80065c6:	d037      	beq.n	8006638 <osThreadNew+0x9c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80065c8:	69a5      	ldr	r5, [r4, #24]
      if (attr->name != NULL) {
 80065ca:	6821      	ldr	r1, [r4, #0]
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	bf08      	it	eq
 80065d0:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065d2:	1e6a      	subs	r2, r5, #1
 80065d4:	462f      	mov	r7, r5
 80065d6:	2a37      	cmp	r2, #55	; 0x37
 80065d8:	d833      	bhi.n	8006642 <osThreadNew+0xa6>
 80065da:	6862      	ldr	r2, [r4, #4]
 80065dc:	07d2      	lsls	r2, r2, #31
 80065de:	d430      	bmi.n	8006642 <osThreadNew+0xa6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80065e0:	6966      	ldr	r6, [r4, #20]
 80065e2:	b176      	cbz	r6, 8006602 <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065e4:	08b2      	lsrs	r2, r6, #2
 80065e6:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065ea:	f1bc 0f00 	cmp.w	ip, #0
 80065ee:	d00b      	beq.n	8006608 <osThreadNew+0x6c>
 80065f0:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 80065f4:	d902      	bls.n	80065fc <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065f6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065f8:	b104      	cbz	r4, 80065fc <osThreadNew+0x60>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065fa:	b9b6      	cbnz	r6, 800662a <osThreadNew+0x8e>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065fc:	9805      	ldr	r0, [sp, #20]
}
 80065fe:	b007      	add	sp, #28
 8006600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006606:	e7ee      	b.n	80065e6 <osThreadNew+0x4a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006608:	f1be 0f00 	cmp.w	lr, #0
 800660c:	d1f6      	bne.n	80065fc <osThreadNew+0x60>
      if (mem == 0) {
 800660e:	6924      	ldr	r4, [r4, #16]
 8006610:	2c00      	cmp	r4, #0
 8006612:	d1f3      	bne.n	80065fc <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006614:	ac05      	add	r4, sp, #20
 8006616:	b292      	uxth	r2, r2
 8006618:	e9cd 7400 	strd	r7, r4, [sp]
 800661c:	f000 ff4e 	bl	80074bc <xTaskCreate>
 8006620:	2801      	cmp	r0, #1
          hTask = NULL;
 8006622:	bf1c      	itt	ne
 8006624:	2300      	movne	r3, #0
 8006626:	9305      	strne	r3, [sp, #20]
 8006628:	e7e8      	b.n	80065fc <osThreadNew+0x60>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800662a:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 800662e:	9500      	str	r5, [sp, #0]
 8006630:	f000 ff06 	bl	8007440 <xTaskCreateStatic>
 8006634:	9005      	str	r0, [sp, #20]
 8006636:	e7e1      	b.n	80065fc <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;
 8006638:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800663a:	f44f 7280 	mov.w	r2, #256	; 0x100
    name = NULL;
 800663e:	4621      	mov	r1, r4
 8006640:	e7e8      	b.n	8006614 <osThreadNew+0x78>
        return (NULL);
 8006642:	2000      	movs	r0, #0
 8006644:	e7db      	b.n	80065fe <osThreadNew+0x62>
 8006646:	bf00      	nop
 8006648:	20001d4c 	.word	0x20001d4c

0800664c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800664c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800664e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006652:	b113      	cbz	r3, 800665a <osDelay+0xe>
    stat = osErrorISR;
 8006654:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006658:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800665e:	b913      	cbnz	r3, 8006666 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006660:	f3ef 8311 	mrs	r3, BASEPRI
 8006664:	b11b      	cbz	r3, 800666e <osDelay+0x22>
 8006666:	4b05      	ldr	r3, [pc, #20]	; (800667c <osDelay+0x30>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d0f2      	beq.n	8006654 <osDelay+0x8>
    if (ticks != 0U) {
 800666e:	2800      	cmp	r0, #0
 8006670:	d0f2      	beq.n	8006658 <osDelay+0xc>
      vTaskDelay(ticks);
 8006672:	f001 f8af 	bl	80077d4 <vTaskDelay>
    stat = osOK;
 8006676:	2000      	movs	r0, #0
 8006678:	e7ee      	b.n	8006658 <osDelay+0xc>
 800667a:	bf00      	nop
 800667c:	20001d4c 	.word	0x20001d4c

08006680 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006684:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006688:	b113      	cbz	r3, 8006690 <osMutexNew+0x10>
  hMutex = NULL;
 800668a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800668c:	4628      	mov	r0, r5
 800668e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006690:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8006694:	b912      	cbnz	r2, 800669c <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006696:	f3ef 8211 	mrs	r2, BASEPRI
 800669a:	b11a      	cbz	r2, 80066a4 <osMutexNew+0x24>
 800669c:	4a18      	ldr	r2, [pc, #96]	; (8006700 <osMutexNew+0x80>)
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	2a02      	cmp	r2, #2
 80066a2:	d0f2      	beq.n	800668a <osMutexNew+0xa>
    if (attr != NULL) {
 80066a4:	b104      	cbz	r4, 80066a8 <osMutexNew+0x28>
      type = attr->attr_bits;
 80066a6:	6863      	ldr	r3, [r4, #4]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80066a8:	f003 0601 	and.w	r6, r3, #1
    if ((type & osMutexRobust) != osMutexRobust) {
 80066ac:	071b      	lsls	r3, r3, #28
 80066ae:	d4ec      	bmi.n	800668a <osMutexNew+0xa>
      if (attr != NULL) {
 80066b0:	b1b4      	cbz	r4, 80066e0 <osMutexNew+0x60>
 80066b2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80066b6:	b189      	cbz	r1, 80066dc <osMutexNew+0x5c>
 80066b8:	2b4f      	cmp	r3, #79	; 0x4f
 80066ba:	d9e6      	bls.n	800668a <osMutexNew+0xa>
        if (rmtx != 0U) {
 80066bc:	b1de      	cbz	r6, 80066f6 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80066be:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80066c0:	f000 fade 	bl	8006c80 <xQueueCreateMutexStatic>
 80066c4:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0df      	beq.n	800668a <osMutexNew+0xa>
          name = attr->name;
 80066ca:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hMutex, name);
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 fd1b 	bl	8007108 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	d0da      	beq.n	800668c <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80066d6:	f045 0501 	orr.w	r5, r5, #1
  return ((osMutexId_t)hMutex);
 80066da:	e7d7      	b.n	800668c <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1d4      	bne.n	800668a <osMutexNew+0xa>
          if (rmtx != 0U) {
 80066e0:	b15e      	cbz	r6, 80066fa <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80066e2:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 80066e4:	f000 fb01 	bl	8006cea <xQueueCreateMutex>
 80066e8:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d0cd      	beq.n	800668a <osMutexNew+0xa>
        if (attr != NULL) {
 80066ee:	2c00      	cmp	r4, #0
 80066f0:	d1eb      	bne.n	80066ca <osMutexNew+0x4a>
          name = NULL;
 80066f2:	4621      	mov	r1, r4
 80066f4:	e7ea      	b.n	80066cc <osMutexNew+0x4c>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80066f6:	2001      	movs	r0, #1
 80066f8:	e7e2      	b.n	80066c0 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 80066fa:	2001      	movs	r0, #1
 80066fc:	e7f2      	b.n	80066e4 <osMutexNew+0x64>
 80066fe:	bf00      	nop
 8006700:	20001d4c 	.word	0x20001d4c

08006704 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006704:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006706:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800670a:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800670c:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006710:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006712:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006716:	b112      	cbz	r2, 800671e <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8006718:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800671c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006722:	b912      	cbnz	r2, 800672a <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006724:	f3ef 8211 	mrs	r2, BASEPRI
 8006728:	b11a      	cbz	r2, 8006732 <osMutexAcquire+0x2e>
 800672a:	4a0d      	ldr	r2, [pc, #52]	; (8006760 <osMutexAcquire+0x5c>)
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	2a02      	cmp	r2, #2
 8006730:	d0f2      	beq.n	8006718 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8006732:	b188      	cbz	r0, 8006758 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006734:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8006736:	b163      	cbz	r3, 8006752 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006738:	f000 fcc2 	bl	80070c0 <xQueueTakeMutexRecursive>
 800673c:	2801      	cmp	r0, #1
 800673e:	d101      	bne.n	8006744 <osMutexAcquire+0x40>
  stat = osOK;
 8006740:	2000      	movs	r0, #0
 8006742:	e7eb      	b.n	800671c <osMutexAcquire+0x18>
          stat = osErrorResource;
 8006744:	2c00      	cmp	r4, #0
 8006746:	bf14      	ite	ne
 8006748:	f06f 0001 	mvnne.w	r0, #1
 800674c:	f06f 0002 	mvneq.w	r0, #2
 8006750:	e7e4      	b.n	800671c <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006752:	f000 fbeb 	bl	8006f2c <xQueueSemaphoreTake>
 8006756:	e7f1      	b.n	800673c <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8006758:	f06f 0003 	mvn.w	r0, #3
 800675c:	e7de      	b.n	800671c <osMutexAcquire+0x18>
 800675e:	bf00      	nop
 8006760:	20001d4c 	.word	0x20001d4c

08006764 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006764:	b508      	push	{r3, lr}
 8006766:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006768:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800676c:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006770:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006774:	b112      	cbz	r2, 800677c <osMutexRelease+0x18>
    stat = osErrorISR;
 8006776:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800677a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006780:	b912      	cbnz	r2, 8006788 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006782:	f3ef 8211 	mrs	r2, BASEPRI
 8006786:	b11a      	cbz	r2, 8006790 <osMutexRelease+0x2c>
 8006788:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <osMutexRelease+0x50>)
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	2a02      	cmp	r2, #2
 800678e:	d0f2      	beq.n	8006776 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8006790:	b168      	cbz	r0, 80067ae <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8006792:	b13b      	cbz	r3, 80067a4 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006794:	f000 fa89 	bl	8006caa <xQueueGiveMutexRecursive>
 8006798:	2801      	cmp	r0, #1
  stat = osOK;
 800679a:	bf0c      	ite	eq
 800679c:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800679e:	f06f 0002 	mvnne.w	r0, #2
 80067a2:	e7ea      	b.n	800677a <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80067a4:	461a      	mov	r2, r3
 80067a6:	4619      	mov	r1, r3
 80067a8:	f000 f9b0 	bl	8006b0c <xQueueGenericSend>
 80067ac:	e7f4      	b.n	8006798 <osMutexRelease+0x34>
    stat = osErrorParameter;
 80067ae:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80067b2:	e7e2      	b.n	800677a <osMutexRelease+0x16>
 80067b4:	20001d4c 	.word	0x20001d4c

080067b8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <vApplicationGetIdleTaskMemory+0x10>)
 80067ba:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067bc:	4b03      	ldr	r3, [pc, #12]	; (80067cc <vApplicationGetIdleTaskMemory+0x14>)
 80067be:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067c4:	6013      	str	r3, [r2, #0]
}
 80067c6:	4770      	bx	lr
 80067c8:	20001cf0 	.word	0x20001cf0
 80067cc:	200018f0 	.word	0x200018f0

080067d0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <vApplicationGetTimerTaskMemory+0x10>)
 80067d2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067d4:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <vApplicationGetTimerTaskMemory+0x14>)
 80067d6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067dc:	6013      	str	r3, [r2, #0]
}
 80067de:	4770      	bx	lr
 80067e0:	20002550 	.word	0x20002550
 80067e4:	20001d50 	.word	0x20001d50

080067e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f2:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f4:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067fc:	4770      	bx	lr

080067fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006802:	4770      	bx	lr

08006804 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006804:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006806:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006808:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800680a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006810:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006812:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006814:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006816:	3301      	adds	r3, #1
 8006818:	6003      	str	r3, [r0, #0]
}
 800681a:	4770      	bx	lr

0800681c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800681c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800681e:	1c53      	adds	r3, r2, #1
{
 8006820:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8006822:	d10a      	bne.n	800683a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006824:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800682a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800682c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800682e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006830:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006832:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006834:	3301      	adds	r3, #1
 8006836:	6003      	str	r3, [r0, #0]
}
 8006838:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800683a:	f100 0308 	add.w	r3, r0, #8
 800683e:	685c      	ldr	r4, [r3, #4]
 8006840:	6825      	ldr	r5, [r4, #0]
 8006842:	4295      	cmp	r5, r2
 8006844:	d8ef      	bhi.n	8006826 <vListInsert+0xa>
 8006846:	4623      	mov	r3, r4
 8006848:	e7f9      	b.n	800683e <vListInsert+0x22>

0800684a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800684a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 800684e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006850:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006852:	6882      	ldr	r2, [r0, #8]
 8006854:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800685a:	bf08      	it	eq
 800685c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800685e:	2200      	movs	r2, #0
 8006860:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	3a01      	subs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006868:	6818      	ldr	r0, [r3, #0]
}
 800686a:	4770      	bx	lr

0800686c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800686c:	b510      	push	{r4, lr}
 800686e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006870:	f001 fc58 	bl	8008124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006874:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006876:	f001 fc7b 	bl	8008170 <vPortExitCritical>

	return xReturn;
}
 800687a:	fab4 f084 	clz	r0, r4
 800687e:	0940      	lsrs	r0, r0, #5
 8006880:	bd10      	pop	{r4, pc}

08006882 <prvCopyDataToQueue>:
{
 8006882:	b570      	push	{r4, r5, r6, lr}
 8006884:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006886:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8006888:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800688a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800688c:	b942      	cbnz	r2, 80068a0 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800688e:	6805      	ldr	r5, [r0, #0]
 8006890:	b99d      	cbnz	r5, 80068ba <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006892:	6880      	ldr	r0, [r0, #8]
 8006894:	f001 f92a 	bl	8007aec <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006898:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800689a:	3601      	adds	r6, #1
 800689c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800689e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80068a0:	b96d      	cbnz	r5, 80068be <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a2:	6840      	ldr	r0, [r0, #4]
 80068a4:	f003 f9c8 	bl	8009c38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068ac:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ae:	68a2      	ldr	r2, [r4, #8]
 80068b0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b4:	d301      	bcc.n	80068ba <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80068ba:	2000      	movs	r0, #0
 80068bc:	e7ed      	b.n	800689a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068be:	68c0      	ldr	r0, [r0, #12]
 80068c0:	f003 f9ba 	bl	8009c38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068c6:	68e2      	ldr	r2, [r4, #12]
 80068c8:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ca:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068cc:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ce:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068d0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068d2:	bf3e      	ittt	cc
 80068d4:	68a2      	ldrcc	r2, [r4, #8]
 80068d6:	189b      	addcc	r3, r3, r2
 80068d8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80068da:	2d02      	cmp	r5, #2
 80068dc:	d1ed      	bne.n	80068ba <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068de:	b10e      	cbz	r6, 80068e4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80068e0:	3e01      	subs	r6, #1
 80068e2:	e7ea      	b.n	80068ba <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80068e4:	4630      	mov	r0, r6
 80068e6:	e7d8      	b.n	800689a <prvCopyDataToQueue+0x18>

080068e8 <prvCopyDataFromQueue>:
{
 80068e8:	4603      	mov	r3, r0
 80068ea:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80068ee:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068f0:	b162      	cbz	r2, 800690c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f2:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068f4:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068f8:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068fa:	60d9      	str	r1, [r3, #12]
}
 80068fc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006900:	bf24      	itt	cs
 8006902:	6819      	ldrcs	r1, [r3, #0]
 8006904:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006906:	68d9      	ldr	r1, [r3, #12]
 8006908:	f003 b996 	b.w	8009c38 <memcpy>
}
 800690c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006910:	4770      	bx	lr

08006912 <prvUnlockQueue>:
{
 8006912:	b570      	push	{r4, r5, r6, lr}
 8006914:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006916:	f001 fc05 	bl	8008124 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800691a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800691e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006922:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006924:	2d00      	cmp	r5, #0
 8006926:	dc14      	bgt.n	8006952 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8006928:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800692a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800692e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006932:	f001 fc1d 	bl	8008170 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006936:	f001 fbf5 	bl	8008124 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800693a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800693e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006940:	2d00      	cmp	r5, #0
 8006942:	dc12      	bgt.n	800696a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8006944:	23ff      	movs	r3, #255	; 0xff
 8006946:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800694a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800694e:	f001 bc0f 	b.w	8008170 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0e7      	beq.n	8006928 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006958:	4630      	mov	r0, r6
 800695a:	f000 ffdb 	bl	8007914 <xTaskRemoveFromEventList>
 800695e:	b108      	cbz	r0, 8006964 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8006960:	f001 f868 	bl	8007a34 <vTaskMissedYield>
 8006964:	3d01      	subs	r5, #1
 8006966:	b26d      	sxtb	r5, r5
 8006968:	e7dc      	b.n	8006924 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0e9      	beq.n	8006944 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006970:	4630      	mov	r0, r6
 8006972:	f000 ffcf 	bl	8007914 <xTaskRemoveFromEventList>
 8006976:	b108      	cbz	r0, 800697c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006978:	f001 f85c 	bl	8007a34 <vTaskMissedYield>
 800697c:	3d01      	subs	r5, #1
 800697e:	b26d      	sxtb	r5, r5
 8006980:	e7de      	b.n	8006940 <prvUnlockQueue+0x2e>
	...

08006984 <xQueueGenericReset>:
{
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006988:	4604      	mov	r4, r0
 800698a:	b950      	cbnz	r0, 80069a2 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	b672      	cpsid	i
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	b662      	cpsie	i
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80069a2:	f001 fbbf 	bl	8008124 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ac:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ae:	4343      	muls	r3, r0
 80069b0:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069b2:	1a1b      	subs	r3, r3, r0
 80069b4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069b6:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069b8:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ba:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069bc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069be:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80069c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80069c8:	b995      	cbnz	r5, 80069f0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	b163      	cbz	r3, 80069e8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ce:	f104 0010 	add.w	r0, r4, #16
 80069d2:	f000 ff9f 	bl	8007914 <xTaskRemoveFromEventList>
 80069d6:	b138      	cbz	r0, 80069e8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <xQueueGenericReset+0x80>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80069e8:	f001 fbc2 	bl	8008170 <vPortExitCritical>
}
 80069ec:	2001      	movs	r0, #1
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069f0:	f104 0010 	add.w	r0, r4, #16
 80069f4:	f7ff fef8 	bl	80067e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80069fc:	f7ff fef4 	bl	80067e8 <vListInitialise>
 8006a00:	e7f2      	b.n	80069e8 <xQueueGenericReset+0x64>
 8006a02:	bf00      	nop
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xQueueGenericCreateStatic>:
	{
 8006a08:	b513      	push	{r0, r1, r4, lr}
 8006a0a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a0c:	b950      	cbnz	r0, 8006a24 <xQueueGenericCreateStatic+0x1c>
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	b672      	cpsid	i
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	b662      	cpsie	i
 8006a22:	e7fe      	b.n	8006a22 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8006a24:	b953      	cbnz	r3, 8006a3c <xQueueGenericCreateStatic+0x34>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	b672      	cpsid	i
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	b662      	cpsie	i
 8006a3a:	e7fe      	b.n	8006a3a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a3c:	b15a      	cbz	r2, 8006a56 <xQueueGenericCreateStatic+0x4e>
 8006a3e:	b9b1      	cbnz	r1, 8006a6e <xQueueGenericCreateStatic+0x66>
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a56:	b151      	cbz	r1, 8006a6e <xQueueGenericCreateStatic+0x66>
 8006a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5c:	b672      	cpsid	i
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	b662      	cpsie	i
 8006a6c:	e7fe      	b.n	8006a6c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a6e:	2350      	movs	r3, #80	; 0x50
 8006a70:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a72:	9b01      	ldr	r3, [sp, #4]
 8006a74:	2b50      	cmp	r3, #80	; 0x50
 8006a76:	d00a      	beq.n	8006a8e <xQueueGenericCreateStatic+0x86>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	b672      	cpsid	i
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	b662      	cpsie	i
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericCreateStatic+0x84>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	bf08      	it	eq
 8006a92:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a94:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a96:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a98:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8006a9e:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f7ff ff6d 	bl	8006984 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006aaa:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8006aae:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8006ab0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd10      	pop	{r4, pc}

08006ab8 <xQueueGenericCreate>:
	{
 8006ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aba:	460d      	mov	r5, r1
 8006abc:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006abe:	4606      	mov	r6, r0
 8006ac0:	b950      	cbnz	r0, 8006ad8 <xQueueGenericCreate+0x20>
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	b672      	cpsid	i
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	b662      	cpsie	i
 8006ad6:	e7fe      	b.n	8006ad6 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ada:	3050      	adds	r0, #80	; 0x50
 8006adc:	f001 fc80 	bl	80083e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	b160      	cbz	r0, 8006afe <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006aea:	b955      	cbnz	r5, 8006b02 <xQueueGenericCreate+0x4a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aec:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006aee:	2101      	movs	r1, #1
 8006af0:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8006af2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006af6:	f7ff ff45 	bl	8006984 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006afa:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8006afe:	4620      	mov	r0, r4
 8006b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b02:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b06:	6003      	str	r3, [r0, #0]
 8006b08:	e7f1      	b.n	8006aee <xQueueGenericCreate+0x36>
	...

08006b0c <xQueueGenericSend>:
{
 8006b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	4688      	mov	r8, r1
 8006b12:	9201      	str	r2, [sp, #4]
 8006b14:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006b16:	4604      	mov	r4, r0
 8006b18:	b950      	cbnz	r0, 8006b30 <xQueueGenericSend+0x24>
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	b672      	cpsid	i
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	b662      	cpsie	i
 8006b2e:	e7fe      	b.n	8006b2e <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b30:	b961      	cbnz	r1, 8006b4c <xQueueGenericSend+0x40>
 8006b32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b34:	b153      	cbz	r3, 8006b4c <xQueueGenericSend+0x40>
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	b672      	cpsid	i
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	b662      	cpsie	i
 8006b4a:	e7fe      	b.n	8006b4a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b4c:	2f02      	cmp	r7, #2
 8006b4e:	d10d      	bne.n	8006b6c <xQueueGenericSend+0x60>
 8006b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d00a      	beq.n	8006b6c <xQueueGenericSend+0x60>
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	b672      	cpsid	i
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	b662      	cpsie	i
 8006b6a:	e7fe      	b.n	8006b6a <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6c:	f000 ff6e 	bl	8007a4c <xTaskGetSchedulerState>
 8006b70:	b960      	cbnz	r0, 8006b8c <xQueueGenericSend+0x80>
 8006b72:	9e01      	ldr	r6, [sp, #4]
 8006b74:	b15e      	cbz	r6, 8006b8e <xQueueGenericSend+0x82>
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	b672      	cpsid	i
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	b662      	cpsie	i
 8006b8a:	e7fe      	b.n	8006b8a <xQueueGenericSend+0x7e>
 8006b8c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006b8e:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8006b92:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8006c7c <xQueueGenericSend+0x170>
 8006b96:	e037      	b.n	8006c08 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b98:	9d01      	ldr	r5, [sp, #4]
 8006b9a:	b91d      	cbnz	r5, 8006ba4 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8006b9c:	f001 fae8 	bl	8008170 <vPortExitCritical>
			return errQUEUE_FULL;
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e050      	b.n	8006c46 <xQueueGenericSend+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8006ba4:	b916      	cbnz	r6, 8006bac <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ba6:	a802      	add	r0, sp, #8
 8006ba8:	f000 fef8 	bl	800799c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006bac:	f001 fae0 	bl	8008170 <vPortExitCritical>
		vTaskSuspendAll();
 8006bb0:	f000 fcfa 	bl	80075a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb4:	f001 fab6 	bl	8008124 <vPortEnterCritical>
 8006bb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006bbc:	2bff      	cmp	r3, #255	; 0xff
 8006bbe:	d101      	bne.n	8006bc4 <xQueueGenericSend+0xb8>
 8006bc0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8006bc4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006bc8:	2bff      	cmp	r3, #255	; 0xff
 8006bca:	d101      	bne.n	8006bd0 <xQueueGenericSend+0xc4>
 8006bcc:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8006bd0:	f001 face 	bl	8008170 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bd4:	a901      	add	r1, sp, #4
 8006bd6:	a802      	add	r0, sp, #8
 8006bd8:	f000 feec 	bl	80079b4 <xTaskCheckForTimeOut>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d146      	bne.n	8006c6e <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006be0:	f001 faa0 	bl	8008124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006be6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d12f      	bne.n	8006c4c <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006bec:	f001 fac0 	bl	8008170 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bf0:	9901      	ldr	r1, [sp, #4]
 8006bf2:	f104 0010 	add.w	r0, r4, #16
 8006bf6:	f000 fe51 	bl	800789c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f7ff fe89 	bl	8006912 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c00:	f000 fd72 	bl	80076e8 <xTaskResumeAll>
 8006c04:	b350      	cbz	r0, 8006c5c <xQueueGenericSend+0x150>
 8006c06:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006c08:	f001 fa8c 	bl	8008124 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d301      	bcc.n	8006c18 <xQueueGenericSend+0x10c>
 8006c14:	2f02      	cmp	r7, #2
 8006c16:	d1bf      	bne.n	8006b98 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c18:	463a      	mov	r2, r7
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7ff fe30 	bl	8006882 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c24:	b11b      	cbz	r3, 8006c2e <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c2a:	f000 fe73 	bl	8007914 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006c2e:	b138      	cbz	r0, 8006c40 <xQueueGenericSend+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <xQueueGenericSend+0x170>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006c40:	f001 fa96 	bl	8008170 <vPortExitCritical>
				return pdPASS;
 8006c44:	2001      	movs	r0, #1
}
 8006c46:	b004      	add	sp, #16
 8006c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8006c4c:	f001 fa90 	bl	8008170 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7ff fe5e 	bl	8006912 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c56:	f000 fd47 	bl	80076e8 <xTaskResumeAll>
 8006c5a:	e7d4      	b.n	8006c06 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8006c5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c60:	f8ca 3000 	str.w	r3, [sl]
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	e7cb      	b.n	8006c06 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f7ff fe4f 	bl	8006912 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c74:	f000 fd38 	bl	80076e8 <xTaskResumeAll>
 8006c78:	e792      	b.n	8006ba0 <xQueueGenericSend+0x94>
 8006c7a:	bf00      	nop
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c80:	2200      	movs	r2, #0
 8006c82:	460b      	mov	r3, r1
	{
 8006c84:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c86:	4611      	mov	r1, r2
 8006c88:	9000      	str	r0, [sp, #0]
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	f7ff febc 	bl	8006a08 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8006c90:	4604      	mov	r4, r0
 8006c92:	b138      	cbz	r0, 8006ca4 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c98:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c9a:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c9c:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c9e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ca0:	f7ff ff34 	bl	8006b0c <xQueueGenericSend>
	}
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	b002      	add	sp, #8
 8006ca8:	bd10      	pop	{r4, pc}

08006caa <xQueueGiveMutexRecursive>:
	{
 8006caa:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006cac:	4604      	mov	r4, r0
 8006cae:	b950      	cbnz	r0, 8006cc6 <xQueueGiveMutexRecursive+0x1c>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	b672      	cpsid	i
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	b662      	cpsie	i
 8006cc4:	e7fe      	b.n	8006cc4 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006cc6:	6885      	ldr	r5, [r0, #8]
 8006cc8:	f000 feba 	bl	8007a40 <xTaskGetCurrentTaskHandle>
 8006ccc:	4285      	cmp	r5, r0
 8006cce:	d10a      	bne.n	8006ce6 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006cd0:	68e3      	ldr	r3, [r4, #12]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006cd6:	b923      	cbnz	r3, 8006ce2 <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff ff15 	bl	8006b0c <xQueueGenericSend>
			xReturn = pdPASS;
 8006ce2:	2001      	movs	r0, #1
		return xReturn;
 8006ce4:	e000      	b.n	8006ce8 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8006ce6:	2000      	movs	r0, #0
	}
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}

08006cea <xQueueCreateMutex>:
	{
 8006cea:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006cec:	4602      	mov	r2, r0
 8006cee:	2100      	movs	r1, #0
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	f7ff fee1 	bl	8006ab8 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	b138      	cbz	r0, 8006d0a <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006cfe:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d00:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d02:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d04:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d06:	f7ff ff01 	bl	8006b0c <xQueueGenericSend>
	}
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <xQueueGenericSendFromISR>:
{
 8006d0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d12:	4689      	mov	r9, r1
 8006d14:	4690      	mov	r8, r2
 8006d16:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006d18:	4604      	mov	r4, r0
 8006d1a:	b950      	cbnz	r0, 8006d32 <xQueueGenericSendFromISR+0x24>
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	b672      	cpsid	i
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	b662      	cpsie	i
 8006d30:	e7fe      	b.n	8006d30 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d32:	b961      	cbnz	r1, 8006d4e <xQueueGenericSendFromISR+0x40>
 8006d34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d36:	b153      	cbz	r3, 8006d4e <xQueueGenericSendFromISR+0x40>
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	b672      	cpsid	i
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	b662      	cpsie	i
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d4e:	2f02      	cmp	r7, #2
 8006d50:	d10d      	bne.n	8006d6e <xQueueGenericSendFromISR+0x60>
 8006d52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d00a      	beq.n	8006d6e <xQueueGenericSendFromISR+0x60>
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	b672      	cpsid	i
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	b662      	cpsie	i
 8006d6c:	e7fe      	b.n	8006d6c <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d6e:	f001 fae1 	bl	8008334 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d72:	f3ef 8611 	mrs	r6, BASEPRI
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	b672      	cpsid	i
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006d8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d301      	bcc.n	8006d96 <xQueueGenericSendFromISR+0x88>
 8006d92:	2f02      	cmp	r7, #2
 8006d94:	d122      	bne.n	8006ddc <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d96:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8006da0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006da2:	f7ff fd6e 	bl	8006882 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006da6:	1c6b      	adds	r3, r5, #1
 8006da8:	d113      	bne.n	8006dd2 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dac:	b90b      	cbnz	r3, 8006db2 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8006dae:	2001      	movs	r0, #1
 8006db0:	e00b      	b.n	8006dca <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006db6:	f000 fdad 	bl	8007914 <xTaskRemoveFromEventList>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d0f7      	beq.n	8006dae <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8006dbe:	f1b8 0f00 	cmp.w	r8, #0
 8006dc2:	d0f4      	beq.n	8006dae <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dca:	f386 8811 	msr	BASEPRI, r6
}
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dd2:	3501      	adds	r5, #1
 8006dd4:	b26d      	sxtb	r5, r5
 8006dd6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006dda:	e7e8      	b.n	8006dae <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8006ddc:	2000      	movs	r0, #0
 8006dde:	e7f4      	b.n	8006dca <xQueueGenericSendFromISR+0xbc>

08006de0 <xQueueReceive>:
{
 8006de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006de4:	b085      	sub	sp, #20
 8006de6:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8006de8:	4604      	mov	r4, r0
{
 8006dea:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006dec:	b950      	cbnz	r0, 8006e04 <xQueueReceive+0x24>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	b672      	cpsid	i
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	b662      	cpsie	i
 8006e02:	e7fe      	b.n	8006e02 <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e04:	b961      	cbnz	r1, 8006e20 <xQueueReceive+0x40>
 8006e06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e08:	b153      	cbz	r3, 8006e20 <xQueueReceive+0x40>
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	b672      	cpsid	i
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	b662      	cpsie	i
 8006e1e:	e7fe      	b.n	8006e1e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e20:	f000 fe14 	bl	8007a4c <xTaskGetSchedulerState>
 8006e24:	b960      	cbnz	r0, 8006e40 <xQueueReceive+0x60>
 8006e26:	9e01      	ldr	r6, [sp, #4]
 8006e28:	b15e      	cbz	r6, 8006e42 <xQueueReceive+0x62>
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	b672      	cpsid	i
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	b662      	cpsie	i
 8006e3e:	e7fe      	b.n	8006e3e <xQueueReceive+0x5e>
 8006e40:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006e42:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8006e46:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8006f28 <xQueueReceive+0x148>
 8006e4a:	e03b      	b.n	8006ec4 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e4c:	9d01      	ldr	r5, [sp, #4]
 8006e4e:	b91d      	cbnz	r5, 8006e58 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8006e50:	f001 f98e 	bl	8008170 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006e54:	2000      	movs	r0, #0
 8006e56:	e052      	b.n	8006efe <xQueueReceive+0x11e>
				else if( xEntryTimeSet == pdFALSE )
 8006e58:	b916      	cbnz	r6, 8006e60 <xQueueReceive+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e5a:	a802      	add	r0, sp, #8
 8006e5c:	f000 fd9e 	bl	800799c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006e60:	f001 f986 	bl	8008170 <vPortExitCritical>
		vTaskSuspendAll();
 8006e64:	f000 fba0 	bl	80075a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e68:	f001 f95c 	bl	8008124 <vPortEnterCritical>
 8006e6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e70:	2bff      	cmp	r3, #255	; 0xff
 8006e72:	d101      	bne.n	8006e78 <xQueueReceive+0x98>
 8006e74:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006e78:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006e7c:	2bff      	cmp	r3, #255	; 0xff
 8006e7e:	d101      	bne.n	8006e84 <xQueueReceive+0xa4>
 8006e80:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8006e84:	f001 f974 	bl	8008170 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e88:	a901      	add	r1, sp, #4
 8006e8a:	a802      	add	r0, sp, #8
 8006e8c:	f000 fd92 	bl	80079b4 <xTaskCheckForTimeOut>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d13d      	bne.n	8006f10 <xQueueReceive+0x130>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e94:	4620      	mov	r0, r4
 8006e96:	f7ff fce9 	bl	800686c <prvIsQueueEmpty>
 8006e9a:	b398      	cbz	r0, 8006f04 <xQueueReceive+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e9c:	9901      	ldr	r1, [sp, #4]
 8006e9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006ea2:	f000 fcfb 	bl	800789c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7ff fd33 	bl	8006912 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eac:	f000 fc1c 	bl	80076e8 <xTaskResumeAll>
 8006eb0:	b938      	cbnz	r0, 8006ec2 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8006eb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006eb6:	f8c9 3000 	str.w	r3, [r9]
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006ec4:	f001 f92e 	bl	8008124 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eca:	2d00      	cmp	r5, #0
 8006ecc:	d0be      	beq.n	8006e4c <xQueueReceive+0x6c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ece:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff fd08 	bl	80068e8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ed8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	b163      	cbz	r3, 8006ef8 <xQueueReceive+0x118>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ede:	f104 0010 	add.w	r0, r4, #16
 8006ee2:	f000 fd17 	bl	8007914 <xTaskRemoveFromEventList>
 8006ee6:	b138      	cbz	r0, 8006ef8 <xQueueReceive+0x118>
						queueYIELD_IF_USING_PREEMPTION();
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <xQueueReceive+0x148>)
 8006eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006ef8:	f001 f93a 	bl	8008170 <vPortExitCritical>
				return pdPASS;
 8006efc:	2001      	movs	r0, #1
}
 8006efe:	b005      	add	sp, #20
 8006f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff fd04 	bl	8006912 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f0a:	f000 fbed 	bl	80076e8 <xTaskResumeAll>
 8006f0e:	e7d8      	b.n	8006ec2 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8006f10:	4620      	mov	r0, r4
 8006f12:	f7ff fcfe 	bl	8006912 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f16:	f000 fbe7 	bl	80076e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7ff fca6 	bl	800686c <prvIsQueueEmpty>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d0ce      	beq.n	8006ec2 <xQueueReceive+0xe2>
 8006f24:	e796      	b.n	8006e54 <xQueueReceive+0x74>
 8006f26:	bf00      	nop
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <xQueueSemaphoreTake>:
{
 8006f2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8006f30:	4604      	mov	r4, r0
{
 8006f32:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006f34:	b950      	cbnz	r0, 8006f4c <xQueueSemaphoreTake+0x20>
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	b672      	cpsid	i
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	b662      	cpsie	i
 8006f4a:	e7fe      	b.n	8006f4a <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f4c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006f4e:	b155      	cbz	r5, 8006f66 <xQueueSemaphoreTake+0x3a>
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	b672      	cpsid	i
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	b662      	cpsie	i
 8006f64:	e7fe      	b.n	8006f64 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f66:	f000 fd71 	bl	8007a4c <xTaskGetSchedulerState>
 8006f6a:	b960      	cbnz	r0, 8006f86 <xQueueSemaphoreTake+0x5a>
 8006f6c:	9d01      	ldr	r5, [sp, #4]
 8006f6e:	b155      	cbz	r5, 8006f86 <xQueueSemaphoreTake+0x5a>
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	b672      	cpsid	i
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	b662      	cpsie	i
 8006f84:	e7fe      	b.n	8006f84 <xQueueSemaphoreTake+0x58>
 8006f86:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006f88:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8006f8a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80070bc <xQueueSemaphoreTake+0x190>
 8006f8e:	e051      	b.n	8007034 <xQueueSemaphoreTake+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	b973      	cbnz	r3, 8006fb2 <xQueueSemaphoreTake+0x86>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f94:	b155      	cbz	r5, 8006fac <xQueueSemaphoreTake+0x80>
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	b672      	cpsid	i
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	b662      	cpsie	i
 8006faa:	e7fe      	b.n	8006faa <xQueueSemaphoreTake+0x7e>
					taskEXIT_CRITICAL();
 8006fac:	f001 f8e0 	bl	8008170 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006fb0:	e05e      	b.n	8007070 <xQueueSemaphoreTake+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8006fb2:	b916      	cbnz	r6, 8006fba <xQueueSemaphoreTake+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb4:	a802      	add	r0, sp, #8
 8006fb6:	f000 fcf1 	bl	800799c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006fba:	f001 f8d9 	bl	8008170 <vPortExitCritical>
		vTaskSuspendAll();
 8006fbe:	f000 faf3 	bl	80075a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fc2:	f001 f8af 	bl	8008124 <vPortEnterCritical>
 8006fc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006fca:	2bff      	cmp	r3, #255	; 0xff
 8006fcc:	d101      	bne.n	8006fd2 <xQueueSemaphoreTake+0xa6>
 8006fce:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8006fd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006fd6:	2bff      	cmp	r3, #255	; 0xff
 8006fd8:	d101      	bne.n	8006fde <xQueueSemaphoreTake+0xb2>
 8006fda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fde:	f001 f8c7 	bl	8008170 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fe2:	a901      	add	r1, sp, #4
 8006fe4:	a802      	add	r0, sp, #8
 8006fe6:	f000 fce5 	bl	80079b4 <xTaskCheckForTimeOut>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d14a      	bne.n	8007084 <xQueueSemaphoreTake+0x158>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7ff fc3c 	bl	800686c <prvIsQueueEmpty>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d03f      	beq.n	8007078 <xQueueSemaphoreTake+0x14c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	b93b      	cbnz	r3, 800700c <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 8006ffc:	f001 f892 	bl	8008124 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007000:	68a0      	ldr	r0, [r4, #8]
 8007002:	f000 fd33 	bl	8007a6c <xTaskPriorityInherit>
 8007006:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007008:	f001 f8b2 	bl	8008170 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800700c:	9901      	ldr	r1, [sp, #4]
 800700e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007012:	f000 fc43 	bl	800789c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007016:	4620      	mov	r0, r4
 8007018:	f7ff fc7b 	bl	8006912 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800701c:	f000 fb64 	bl	80076e8 <xTaskResumeAll>
 8007020:	b938      	cbnz	r0, 8007032 <xQueueSemaphoreTake+0x106>
					portYIELD_WITHIN_API();
 8007022:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007026:	f8c8 3000 	str.w	r3, [r8]
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007034:	f001 f876 	bl	8008124 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0a8      	beq.n	8006f90 <xQueueSemaphoreTake+0x64>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800703e:	3b01      	subs	r3, #1
 8007040:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	b913      	cbnz	r3, 800704c <xQueueSemaphoreTake+0x120>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007046:	f000 fde9 	bl	8007c1c <pvTaskIncrementMutexHeldCount>
 800704a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	b163      	cbz	r3, 800706a <xQueueSemaphoreTake+0x13e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007050:	f104 0010 	add.w	r0, r4, #16
 8007054:	f000 fc5e 	bl	8007914 <xTaskRemoveFromEventList>
 8007058:	b138      	cbz	r0, 800706a <xQueueSemaphoreTake+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <xQueueSemaphoreTake+0x190>)
 800705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800706a:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800706c:	f001 f880 	bl	8008170 <vPortExitCritical>
}
 8007070:	4628      	mov	r0, r5
 8007072:	b004      	add	sp, #16
 8007074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8007078:	4620      	mov	r0, r4
 800707a:	f7ff fc4a 	bl	8006912 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800707e:	f000 fb33 	bl	80076e8 <xTaskResumeAll>
 8007082:	e7d6      	b.n	8007032 <xQueueSemaphoreTake+0x106>
			prvUnlockQueue( pxQueue );
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff fc44 	bl	8006912 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800708a:	f000 fb2d 	bl	80076e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff fbec 	bl	800686c <prvIsQueueEmpty>
 8007094:	2800      	cmp	r0, #0
 8007096:	d0cc      	beq.n	8007032 <xQueueSemaphoreTake+0x106>
					if( xInheritanceOccurred != pdFALSE )
 8007098:	2d00      	cmp	r5, #0
 800709a:	d0e9      	beq.n	8007070 <xQueueSemaphoreTake+0x144>
						taskENTER_CRITICAL();
 800709c:	f001 f842 	bl	8008124 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070a2:	b119      	cbz	r1, 80070ac <xQueueSemaphoreTake+0x180>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070a6:	6819      	ldr	r1, [r3, #0]
 80070a8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070ac:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80070ae:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070b0:	f000 fd62 	bl	8007b78 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80070b4:	f001 f85c 	bl	8008170 <vPortExitCritical>
 80070b8:	e7da      	b.n	8007070 <xQueueSemaphoreTake+0x144>
 80070ba:	bf00      	nop
 80070bc:	e000ed04 	.word	0xe000ed04

080070c0 <xQueueTakeMutexRecursive>:
	{
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 80070c4:	4604      	mov	r4, r0
 80070c6:	b950      	cbnz	r0, 80070de <xQueueTakeMutexRecursive+0x1e>
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	b672      	cpsid	i
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	b662      	cpsie	i
 80070dc:	e7fe      	b.n	80070dc <xQueueTakeMutexRecursive+0x1c>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80070de:	6886      	ldr	r6, [r0, #8]
 80070e0:	f000 fcae 	bl	8007a40 <xTaskGetCurrentTaskHandle>
 80070e4:	4286      	cmp	r6, r0
 80070e6:	d104      	bne.n	80070f2 <xQueueTakeMutexRecursive+0x32>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070e8:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80070ea:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070ec:	3301      	adds	r3, #1
 80070ee:	60e3      	str	r3, [r4, #12]
	}
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80070f2:	4629      	mov	r1, r5
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff ff19 	bl	8006f2c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d0f8      	beq.n	80070f0 <xQueueTakeMutexRecursive+0x30>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	3301      	adds	r3, #1
 8007102:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8007104:	e7f4      	b.n	80070f0 <xQueueTakeMutexRecursive+0x30>
	...

08007108 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007108:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800710a:	4a07      	ldr	r2, [pc, #28]	; (8007128 <vQueueAddToRegistry+0x20>)
	{
 800710c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800710e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007112:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007116:	b91d      	cbnz	r5, 8007120 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007118:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800711c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800711e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007120:	3301      	adds	r3, #1
 8007122:	2b08      	cmp	r3, #8
 8007124:	d1f3      	bne.n	800710e <vQueueAddToRegistry+0x6>
 8007126:	e7fa      	b.n	800711e <vQueueAddToRegistry+0x16>
 8007128:	200071ec 	.word	0x200071ec

0800712c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	4604      	mov	r4, r0
 8007130:	460d      	mov	r5, r1
 8007132:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007134:	f000 fff6 	bl	8008124 <vPortEnterCritical>
 8007138:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800713c:	2bff      	cmp	r3, #255	; 0xff
 800713e:	d102      	bne.n	8007146 <vQueueWaitForMessageRestricted+0x1a>
 8007140:	2300      	movs	r3, #0
 8007142:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007146:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800714a:	2bff      	cmp	r3, #255	; 0xff
 800714c:	d102      	bne.n	8007154 <vQueueWaitForMessageRestricted+0x28>
 800714e:	2300      	movs	r3, #0
 8007150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007154:	f001 f80c 	bl	8008170 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007158:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800715a:	b92b      	cbnz	r3, 8007168 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800715c:	4632      	mov	r2, r6
 800715e:	4629      	mov	r1, r5
 8007160:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007164:	f000 fbb6 	bl	80078d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007168:	4620      	mov	r0, r4
	}
 800716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800716e:	f7ff bbd0 	b.w	8006912 <prvUnlockQueue>
	...

08007174 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007178:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800717a:	f000 ffd3 	bl	8008124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800717e:	4b2e      	ldr	r3, [pc, #184]	; (8007238 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8007180:	4d2e      	ldr	r5, [pc, #184]	; (800723c <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	4f2e      	ldr	r7, [pc, #184]	; (8007240 <prvAddNewTaskToReadyList+0xcc>)
 8007186:	3201      	adds	r2, #1
 8007188:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800718a:	682e      	ldr	r6, [r5, #0]
 800718c:	2e00      	cmp	r6, #0
 800718e:	d148      	bne.n	8007222 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007190:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d11f      	bne.n	80071d8 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007198:	f04f 0814 	mov.w	r8, #20
 800719c:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071a0:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071a2:	f7ff fb21 	bl	80067e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071a6:	2e38      	cmp	r6, #56	; 0x38
 80071a8:	d1f8      	bne.n	800719c <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071aa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800726c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80071ae:	4e25      	ldr	r6, [pc, #148]	; (8007244 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 80071b0:	4640      	mov	r0, r8
 80071b2:	f7ff fb19 	bl	80067e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff fb16 	bl	80067e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071bc:	4822      	ldr	r0, [pc, #136]	; (8007248 <prvAddNewTaskToReadyList+0xd4>)
 80071be:	f7ff fb13 	bl	80067e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071c2:	4822      	ldr	r0, [pc, #136]	; (800724c <prvAddNewTaskToReadyList+0xd8>)
 80071c4:	f7ff fb10 	bl	80067e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071c8:	4821      	ldr	r0, [pc, #132]	; (8007250 <prvAddNewTaskToReadyList+0xdc>)
 80071ca:	f7ff fb0d 	bl	80067e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071ce:	4b21      	ldr	r3, [pc, #132]	; (8007254 <prvAddNewTaskToReadyList+0xe0>)
 80071d0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071d4:	4b20      	ldr	r3, [pc, #128]	; (8007258 <prvAddNewTaskToReadyList+0xe4>)
 80071d6:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 80071d8:	4a20      	ldr	r2, [pc, #128]	; (800725c <prvAddNewTaskToReadyList+0xe8>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80071e0:	4a1f      	ldr	r2, [pc, #124]	; (8007260 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071e2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80071e4:	6811      	ldr	r1, [r2, #0]
 80071e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80071e8:	428b      	cmp	r3, r1
 80071ea:	d900      	bls.n	80071ee <prvAddNewTaskToReadyList+0x7a>
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	2014      	movs	r0, #20
 80071f0:	1d21      	adds	r1, r4, #4
 80071f2:	fb00 7003 	mla	r0, r0, r3, r7
 80071f6:	f7ff fb05 	bl	8006804 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80071fa:	f000 ffb9 	bl	8008170 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80071fe:	4b19      	ldr	r3, [pc, #100]	; (8007264 <prvAddNewTaskToReadyList+0xf0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	b163      	cbz	r3, 800721e <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800720a:	429a      	cmp	r2, r3
 800720c:	d207      	bcs.n	800721e <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800720e:	4b16      	ldr	r3, [pc, #88]	; (8007268 <prvAddNewTaskToReadyList+0xf4>)
 8007210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	f3bf 8f6f 	isb	sy
}
 800721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007222:	4b10      	ldr	r3, [pc, #64]	; (8007264 <prvAddNewTaskToReadyList+0xf0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1d6      	bne.n	80071d8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007230:	429a      	cmp	r2, r3
 8007232:	d8d1      	bhi.n	80071d8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8007234:	602c      	str	r4, [r5, #0]
 8007236:	e7cf      	b.n	80071d8 <prvAddNewTaskToReadyList+0x64>
 8007238:	20002a18 	.word	0x20002a18
 800723c:	200025ac 	.word	0x200025ac
 8007240:	200025b8 	.word	0x200025b8
 8007244:	20002a44 	.word	0x20002a44
 8007248:	20002a60 	.word	0x20002a60
 800724c:	20002a8c 	.word	0x20002a8c
 8007250:	20002a78 	.word	0x20002a78
 8007254:	200025b0 	.word	0x200025b0
 8007258:	200025b4 	.word	0x200025b4
 800725c:	20002a28 	.word	0x20002a28
 8007260:	20002a2c 	.word	0x20002a2c
 8007264:	20002a74 	.word	0x20002a74
 8007268:	e000ed04 	.word	0xe000ed04
 800726c:	20002a30 	.word	0x20002a30

08007270 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007270:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007272:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8007276:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007278:	b93b      	cbnz	r3, 800728a <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800727a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800727c:	f001 f940 	bl	8008500 <vPortFree>
				vPortFree( pxTCB );
 8007280:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007286:	f001 b93b 	b.w	8008500 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800728a:	2b01      	cmp	r3, #1
 800728c:	d0f9      	beq.n	8007282 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800728e:	2b02      	cmp	r3, #2
 8007290:	d00a      	beq.n	80072a8 <prvDeleteTCB+0x38>
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	b672      	cpsid	i
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	b662      	cpsie	i
 80072a6:	e7fe      	b.n	80072a6 <prvDeleteTCB+0x36>
	}
 80072a8:	bd10      	pop	{r4, pc}
	...

080072ac <prvIdleTask>:
{
 80072ac:	b580      	push	{r7, lr}
				taskYIELD();
 80072ae:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800730c <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b2:	4f12      	ldr	r7, [pc, #72]	; (80072fc <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072b4:	4c12      	ldr	r4, [pc, #72]	; (8007300 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80072b6:	4d13      	ldr	r5, [pc, #76]	; (8007304 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	b963      	cbnz	r3, 80072d6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072bc:	4b12      	ldr	r3, [pc, #72]	; (8007308 <prvIdleTask+0x5c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d9f8      	bls.n	80072b6 <prvIdleTask+0xa>
				taskYIELD();
 80072c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072c8:	f8c8 3000 	str.w	r3, [r8]
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	e7ee      	b.n	80072b4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80072d6:	f000 ff25 	bl	8008124 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072de:	1d30      	adds	r0, r6, #4
 80072e0:	f7ff fab3 	bl	800684a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80072f0:	f000 ff3e 	bl	8008170 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff ffbb 	bl	8007270 <prvDeleteTCB>
 80072fa:	e7dd      	b.n	80072b8 <prvIdleTask+0xc>
 80072fc:	20002a8c 	.word	0x20002a8c
 8007300:	20002a1c 	.word	0x20002a1c
 8007304:	20002a18 	.word	0x20002a18
 8007308:	200025b8 	.word	0x200025b8
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007310:	4a06      	ldr	r2, [pc, #24]	; (800732c <prvResetNextTaskUnblockTime+0x1c>)
 8007312:	6813      	ldr	r3, [r2, #0]
 8007314:	6819      	ldr	r1, [r3, #0]
 8007316:	4b06      	ldr	r3, [pc, #24]	; (8007330 <prvResetNextTaskUnblockTime+0x20>)
 8007318:	b919      	cbnz	r1, 8007322 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800731a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800731e:	601a      	str	r2, [r3, #0]
	}
}
 8007320:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007326:	68d2      	ldr	r2, [r2, #12]
 8007328:	6852      	ldr	r2, [r2, #4]
 800732a:	e7f8      	b.n	800731e <prvResetNextTaskUnblockTime+0xe>
 800732c:	200025b0 	.word	0x200025b0
 8007330:	20002a58 	.word	0x20002a58

08007334 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007338:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800733c:	4607      	mov	r7, r0
 800733e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007340:	21a5      	movs	r1, #165	; 0xa5
 8007342:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007344:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007346:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800734a:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800734e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007350:	f002 fc7d 	bl	8009c4e <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007354:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007356:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007358:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800735c:	b395      	cbz	r5, 80073c4 <prvInitialiseNewTask.isra.2+0x90>
 800735e:	1e6b      	subs	r3, r5, #1
 8007360:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8007364:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007366:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800736a:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800736e:	7819      	ldrb	r1, [r3, #0]
 8007370:	b109      	cbz	r1, 8007376 <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007372:	42ab      	cmp	r3, r5
 8007374:	d1f7      	bne.n	8007366 <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007376:	2300      	movs	r3, #0
 8007378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800737c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800737e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007382:	1d20      	adds	r0, r4, #4
 8007384:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007386:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800738a:	bf28      	it	cs
 800738c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800738e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007390:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007392:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007396:	f7ff fa32 	bl	80067fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800739a:	f104 0018 	add.w	r0, r4, #24
 800739e:	f7ff fa2e 	bl	80067fe <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80073a2:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073a6:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073a8:	4642      	mov	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073aa:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ac:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073ae:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073b0:	4648      	mov	r0, r9
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073b2:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073b6:	f000 fe8b 	bl	80080d0 <pxPortInitialiseStack>
 80073ba:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80073bc:	b106      	cbz	r6, 80073c0 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073be:	6034      	str	r4, [r6, #0]
}
 80073c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073c4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80073c8:	e7d8      	b.n	800737c <prvInitialiseNewTask.isra.2+0x48>
	...

080073cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ce:	4b16      	ldr	r3, [pc, #88]	; (8007428 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80073d0:	4605      	mov	r5, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d2:	4e16      	ldr	r6, [pc, #88]	; (800742c <prvAddCurrentTaskToDelayedList+0x60>)
{
 80073d4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80073d6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d8:	6830      	ldr	r0, [r6, #0]
 80073da:	3004      	adds	r0, #4
 80073dc:	f7ff fa35 	bl	800684a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073e0:	1c6b      	adds	r3, r5, #1
 80073e2:	4633      	mov	r3, r6
 80073e4:	d107      	bne.n	80073f6 <prvAddCurrentTaskToDelayedList+0x2a>
 80073e6:	b137      	cbz	r7, 80073f6 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e8:	6831      	ldr	r1, [r6, #0]
 80073ea:	4811      	ldr	r0, [pc, #68]	; (8007430 <prvAddCurrentTaskToDelayedList+0x64>)
 80073ec:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f2:	f7ff ba07 	b.w	8006804 <vListInsertEnd>
 80073f6:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80073fc:	d307      	bcc.n	800740e <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073fe:	4a0d      	ldr	r2, [pc, #52]	; (8007434 <prvAddCurrentTaskToDelayedList+0x68>)
 8007400:	6810      	ldr	r0, [r2, #0]
 8007402:	6819      	ldr	r1, [r3, #0]
}
 8007404:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007408:	3104      	adds	r1, #4
 800740a:	f7ff ba07 	b.w	800681c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007410:	6810      	ldr	r0, [r2, #0]
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	3104      	adds	r1, #4
 8007416:	f7ff fa01 	bl	800681c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <prvAddCurrentTaskToDelayedList+0x70>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	42a2      	cmp	r2, r4
 8007420:	d900      	bls.n	8007424 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8007422:	601c      	str	r4, [r3, #0]
}
 8007424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007426:	bf00      	nop
 8007428:	20002aa0 	.word	0x20002aa0
 800742c:	200025ac 	.word	0x200025ac
 8007430:	20002a78 	.word	0x20002a78
 8007434:	200025b4 	.word	0x200025b4
 8007438:	200025b0 	.word	0x200025b0
 800743c:	20002a58 	.word	0x20002a58

08007440 <xTaskCreateStatic>:
	{
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007448:	b955      	cbnz	r5, 8007460 <xTaskCreateStatic+0x20>
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	b672      	cpsid	i
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	b662      	cpsie	i
 800745e:	e7fe      	b.n	800745e <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8007460:	b954      	cbnz	r4, 8007478 <xTaskCreateStatic+0x38>
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	b672      	cpsid	i
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	b662      	cpsie	i
 8007476:	e7fe      	b.n	8007476 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007478:	265c      	movs	r6, #92	; 0x5c
 800747a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800747c:	9e05      	ldr	r6, [sp, #20]
 800747e:	2e5c      	cmp	r6, #92	; 0x5c
 8007480:	d00a      	beq.n	8007498 <xTaskCreateStatic+0x58>
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	b672      	cpsid	i
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	b662      	cpsie	i
 8007496:	e7fe      	b.n	8007496 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007498:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800749a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800749c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800749e:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074a2:	ad04      	add	r5, sp, #16
 80074a4:	9402      	str	r4, [sp, #8]
 80074a6:	9501      	str	r5, [sp, #4]
 80074a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80074aa:	9500      	str	r5, [sp, #0]
 80074ac:	f7ff ff42 	bl	8007334 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b0:	4620      	mov	r0, r4
 80074b2:	f7ff fe5f 	bl	8007174 <prvAddNewTaskToReadyList>
	}
 80074b6:	9804      	ldr	r0, [sp, #16]
 80074b8:	b006      	add	sp, #24
 80074ba:	bd70      	pop	{r4, r5, r6, pc}

080074bc <xTaskCreate>:
	{
 80074bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074c0:	4607      	mov	r7, r0
 80074c2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074c4:	0090      	lsls	r0, r2, #2
	{
 80074c6:	4688      	mov	r8, r1
 80074c8:	4616      	mov	r6, r2
 80074ca:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074cc:	f000 ff88 	bl	80083e0 <pvPortMalloc>
			if( pxStack != NULL )
 80074d0:	4605      	mov	r5, r0
 80074d2:	b1e8      	cbz	r0, 8007510 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074d4:	205c      	movs	r0, #92	; 0x5c
 80074d6:	f000 ff83 	bl	80083e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80074da:	4604      	mov	r4, r0
 80074dc:	b1a8      	cbz	r0, 800750a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074de:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80074e0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074e2:	4632      	mov	r2, r6
 80074e4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e6:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ec:	9002      	str	r0, [sp, #8]
 80074ee:	4638      	mov	r0, r7
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	464b      	mov	r3, r9
 80074f8:	f7ff ff1c 	bl	8007334 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7ff fe39 	bl	8007174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007502:	2001      	movs	r0, #1
	}
 8007504:	b005      	add	sp, #20
 8007506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800750a:	4628      	mov	r0, r5
 800750c:	f000 fff8 	bl	8008500 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8007514:	e7f6      	b.n	8007504 <xTaskCreate+0x48>
	...

08007518 <vTaskStartScheduler>:
{
 8007518:	b510      	push	{r4, lr}
 800751a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800751c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800751e:	aa07      	add	r2, sp, #28
 8007520:	a906      	add	r1, sp, #24
 8007522:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007524:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007528:	f7ff f946 	bl	80067b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800752c:	9b05      	ldr	r3, [sp, #20]
 800752e:	9a07      	ldr	r2, [sp, #28]
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	4917      	ldr	r1, [pc, #92]	; (8007594 <vTaskStartScheduler+0x7c>)
 8007536:	4818      	ldr	r0, [pc, #96]	; (8007598 <vTaskStartScheduler+0x80>)
 8007538:	e9cd 4300 	strd	r4, r3, [sp]
 800753c:	4623      	mov	r3, r4
 800753e:	f7ff ff7f 	bl	8007440 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007542:	b1b8      	cbz	r0, 8007574 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8007544:	f000 fbc8 	bl	8007cd8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007548:	2801      	cmp	r0, #1
 800754a:	d115      	bne.n	8007578 <vTaskStartScheduler+0x60>
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	b672      	cpsid	i
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007560:	4b0e      	ldr	r3, [pc, #56]	; (800759c <vTaskStartScheduler+0x84>)
 8007562:	f04f 32ff 	mov.w	r2, #4294967295
 8007566:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007568:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <vTaskStartScheduler+0x88>)
 800756a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <vTaskStartScheduler+0x8c>)
 800756e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007570:	f000 fe7a 	bl	8008268 <xPortStartScheduler>
}
 8007574:	b008      	add	sp, #32
 8007576:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007578:	3001      	adds	r0, #1
 800757a:	d1fb      	bne.n	8007574 <vTaskStartScheduler+0x5c>
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	b672      	cpsid	i
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	b662      	cpsie	i
 8007590:	e7fe      	b.n	8007590 <vTaskStartScheduler+0x78>
 8007592:	bf00      	nop
 8007594:	0800d895 	.word	0x0800d895
 8007598:	080072ad 	.word	0x080072ad
 800759c:	20002a58 	.word	0x20002a58
 80075a0:	20002a74 	.word	0x20002a74
 80075a4:	20002aa0 	.word	0x20002aa0

080075a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80075a8:	4a02      	ldr	r2, [pc, #8]	; (80075b4 <vTaskSuspendAll+0xc>)
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	3301      	adds	r3, #1
 80075ae:	6013      	str	r3, [r2, #0]
}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20002a24 	.word	0x20002a24

080075b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80075b8:	4b01      	ldr	r3, [pc, #4]	; (80075c0 <xTaskGetTickCount+0x8>)
 80075ba:	6818      	ldr	r0, [r3, #0]
}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20002aa0 	.word	0x20002aa0

080075c4 <xTaskIncrementTick>:
{
 80075c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c8:	4b3c      	ldr	r3, [pc, #240]	; (80076bc <xTaskIncrementTick+0xf8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d16d      	bne.n	80076ac <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075d0:	4b3b      	ldr	r3, [pc, #236]	; (80076c0 <xTaskIncrementTick+0xfc>)
 80075d2:	681c      	ldr	r4, [r3, #0]
 80075d4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80075d6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075d8:	b9cc      	cbnz	r4, 800760e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80075da:	4b3a      	ldr	r3, [pc, #232]	; (80076c4 <xTaskIncrementTick+0x100>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	b152      	cbz	r2, 80075f8 <xTaskIncrementTick+0x34>
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	b672      	cpsid	i
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	b662      	cpsie	i
 80075f6:	e7fe      	b.n	80075f6 <xTaskIncrementTick+0x32>
 80075f8:	4a33      	ldr	r2, [pc, #204]	; (80076c8 <xTaskIncrementTick+0x104>)
 80075fa:	6819      	ldr	r1, [r3, #0]
 80075fc:	6810      	ldr	r0, [r2, #0]
 80075fe:	6018      	str	r0, [r3, #0]
 8007600:	6011      	str	r1, [r2, #0]
 8007602:	4a32      	ldr	r2, [pc, #200]	; (80076cc <xTaskIncrementTick+0x108>)
 8007604:	6813      	ldr	r3, [r2, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	f7ff fe81 	bl	8007310 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800760e:	4d30      	ldr	r5, [pc, #192]	; (80076d0 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007610:	f04f 0b00 	mov.w	fp, #0
 8007614:	4f2f      	ldr	r7, [pc, #188]	; (80076d4 <xTaskIncrementTick+0x110>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	42a3      	cmp	r3, r4
 800761a:	d911      	bls.n	8007640 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	4b2e      	ldr	r3, [pc, #184]	; (80076d8 <xTaskIncrementTick+0x114>)
 8007620:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007622:	2214      	movs	r2, #20
 8007624:	434a      	muls	r2, r1
 8007626:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8007628:	2a02      	cmp	r2, #2
 800762a:	bf28      	it	cs
 800762c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8007630:	4a2a      	ldr	r2, [pc, #168]	; (80076dc <xTaskIncrementTick+0x118>)
 8007632:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8007634:	2a00      	cmp	r2, #0
}
 8007636:	bf0c      	ite	eq
 8007638:	4658      	moveq	r0, fp
 800763a:	2001      	movne	r0, #1
 800763c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007640:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80076c4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8007644:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80076e4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007648:	f8d9 2000 	ldr.w	r2, [r9]
 800764c:	6812      	ldr	r2, [r2, #0]
 800764e:	b91a      	cbnz	r2, 8007658 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	f04f 32ff 	mov.w	r2, #4294967295
 8007654:	602a      	str	r2, [r5, #0]
					break;
 8007656:	e7e1      	b.n	800761c <xTaskIncrementTick+0x58>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007658:	f8d9 2000 	ldr.w	r2, [r9]
 800765c:	68d2      	ldr	r2, [r2, #12]
 800765e:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007660:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007662:	428c      	cmp	r4, r1
 8007664:	d201      	bcs.n	800766a <xTaskIncrementTick+0xa6>
						xNextTaskUnblockTime = xItemValue;
 8007666:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007668:	e7d8      	b.n	800761c <xTaskIncrementTick+0x58>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766a:	f106 0804 	add.w	r8, r6, #4
 800766e:	4640      	mov	r0, r8
 8007670:	f7ff f8eb 	bl	800684a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007674:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8007676:	b119      	cbz	r1, 8007680 <xTaskIncrementTick+0xbc>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007678:	f106 0018 	add.w	r0, r6, #24
 800767c:	f7ff f8e5 	bl	800684a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007680:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007682:	f8da 1000 	ldr.w	r1, [sl]
 8007686:	4288      	cmp	r0, r1
 8007688:	d901      	bls.n	800768e <xTaskIncrementTick+0xca>
 800768a:	f8ca 0000 	str.w	r0, [sl]
 800768e:	2214      	movs	r2, #20
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <xTaskIncrementTick+0x114>)
 8007692:	4641      	mov	r1, r8
 8007694:	fb02 3000 	mla	r0, r2, r0, r3
 8007698:	f7ff f8b4 	bl	8006804 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800769c:	6838      	ldr	r0, [r7, #0]
 800769e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80076a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80076a2:	4291      	cmp	r1, r2
 80076a4:	bf28      	it	cs
 80076a6:	f04f 0b01 	movcs.w	fp, #1
 80076aa:	e7cd      	b.n	8007648 <xTaskIncrementTick+0x84>
		++uxPendedTicks;
 80076ac:	4a0c      	ldr	r2, [pc, #48]	; (80076e0 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80076ae:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	3301      	adds	r3, #1
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	e7ba      	b.n	8007630 <xTaskIncrementTick+0x6c>
 80076ba:	bf00      	nop
 80076bc:	20002a24 	.word	0x20002a24
 80076c0:	20002aa0 	.word	0x20002aa0
 80076c4:	200025b0 	.word	0x200025b0
 80076c8:	200025b4 	.word	0x200025b4
 80076cc:	20002a5c 	.word	0x20002a5c
 80076d0:	20002a58 	.word	0x20002a58
 80076d4:	200025ac 	.word	0x200025ac
 80076d8:	200025b8 	.word	0x200025b8
 80076dc:	20002aa4 	.word	0x20002aa4
 80076e0:	20002a20 	.word	0x20002a20
 80076e4:	20002a2c 	.word	0x20002a2c

080076e8 <xTaskResumeAll>:
{
 80076e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80076ec:	4c30      	ldr	r4, [pc, #192]	; (80077b0 <xTaskResumeAll+0xc8>)
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	b953      	cbnz	r3, 8007708 <xTaskResumeAll+0x20>
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	b672      	cpsid	i
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	b662      	cpsie	i
 8007706:	e7fe      	b.n	8007706 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8007708:	f000 fd0c 	bl	8008124 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	3b01      	subs	r3, #1
 8007710:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007712:	6824      	ldr	r4, [r4, #0]
 8007714:	b12c      	cbz	r4, 8007722 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8007716:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007718:	f000 fd2a 	bl	8008170 <vPortExitCritical>
}
 800771c:	4620      	mov	r0, r4
 800771e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007722:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <xTaskResumeAll+0xcc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0f5      	beq.n	8007716 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800772a:	4d23      	ldr	r5, [pc, #140]	; (80077b8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800772c:	4e23      	ldr	r6, [pc, #140]	; (80077bc <xTaskResumeAll+0xd4>)
 800772e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80077d0 <xTaskResumeAll+0xe8>
 8007732:	e01d      	b.n	8007770 <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007734:	68eb      	ldr	r3, [r5, #12]
 8007736:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007738:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800773a:	f104 0018 	add.w	r0, r4, #24
 800773e:	f7ff f884 	bl	800684a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff f881 	bl	800684a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007748:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800774a:	6832      	ldr	r2, [r6, #0]
 800774c:	4293      	cmp	r3, r2
 800774e:	d900      	bls.n	8007752 <xTaskResumeAll+0x6a>
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	2014      	movs	r0, #20
 8007754:	4639      	mov	r1, r7
 8007756:	fb00 8003 	mla	r0, r0, r3, r8
 800775a:	f7ff f853 	bl	8006804 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800775e:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <xTaskResumeAll+0xd8>)
 8007760:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800776a:	4b16      	ldr	r3, [pc, #88]	; (80077c4 <xTaskResumeAll+0xdc>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1de      	bne.n	8007734 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
 8007776:	b10c      	cbz	r4, 800777c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8007778:	f7ff fdca 	bl	8007310 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800777c:	4d12      	ldr	r5, [pc, #72]	; (80077c8 <xTaskResumeAll+0xe0>)
 800777e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007780:	b144      	cbz	r4, 8007794 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8007782:	4e10      	ldr	r6, [pc, #64]	; (80077c4 <xTaskResumeAll+0xdc>)
 8007784:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007786:	f7ff ff1d 	bl	80075c4 <xTaskIncrementTick>
 800778a:	b100      	cbz	r0, 800778e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800778c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800778e:	3c01      	subs	r4, #1
 8007790:	d1f9      	bne.n	8007786 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8007792:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <xTaskResumeAll+0xdc>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0bc      	beq.n	8007716 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <xTaskResumeAll+0xe4>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80077ac:	2401      	movs	r4, #1
 80077ae:	e7b3      	b.n	8007718 <xTaskResumeAll+0x30>
 80077b0:	20002a24 	.word	0x20002a24
 80077b4:	20002a18 	.word	0x20002a18
 80077b8:	20002a60 	.word	0x20002a60
 80077bc:	20002a2c 	.word	0x20002a2c
 80077c0:	200025ac 	.word	0x200025ac
 80077c4:	20002aa4 	.word	0x20002aa4
 80077c8:	20002a20 	.word	0x20002a20
 80077cc:	e000ed04 	.word	0xe000ed04
 80077d0:	200025b8 	.word	0x200025b8

080077d4 <vTaskDelay>:
	{
 80077d4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077d6:	b940      	cbnz	r0, 80077ea <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80077d8:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <vTaskDelay+0x44>)
 80077da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	f3bf 8f6f 	isb	sy
	}
 80077e8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80077ea:	4b0c      	ldr	r3, [pc, #48]	; (800781c <vTaskDelay+0x48>)
 80077ec:	6819      	ldr	r1, [r3, #0]
 80077ee:	b151      	cbz	r1, 8007806 <vTaskDelay+0x32>
 80077f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f4:	b672      	cpsid	i
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	b662      	cpsie	i
 8007804:	e7fe      	b.n	8007804 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007806:	f7ff fecf 	bl	80075a8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800780a:	f7ff fddf 	bl	80073cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800780e:	f7ff ff6b 	bl	80076e8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007812:	2800      	cmp	r0, #0
 8007814:	d0e0      	beq.n	80077d8 <vTaskDelay+0x4>
 8007816:	e7e7      	b.n	80077e8 <vTaskDelay+0x14>
 8007818:	e000ed04 	.word	0xe000ed04
 800781c:	20002a24 	.word	0x20002a24

08007820 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007820:	4b19      	ldr	r3, [pc, #100]	; (8007888 <vTaskSwitchContext+0x68>)
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	4b19      	ldr	r3, [pc, #100]	; (800788c <vTaskSwitchContext+0x6c>)
{
 8007826:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007828:	b112      	cbz	r2, 8007830 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800782a:	2201      	movs	r2, #1
 800782c:	601a      	str	r2, [r3, #0]
}
 800782e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8007830:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007832:	2714      	movs	r7, #20
 8007834:	4d16      	ldr	r5, [pc, #88]	; (8007890 <vTaskSwitchContext+0x70>)
 8007836:	4a17      	ldr	r2, [pc, #92]	; (8007894 <vTaskSwitchContext+0x74>)
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	4616      	mov	r6, r2
 800783c:	fb07 f103 	mul.w	r1, r7, r3
 8007840:	5854      	ldr	r4, [r2, r1]
 8007842:	1850      	adds	r0, r2, r1
 8007844:	b18c      	cbz	r4, 800786a <vTaskSwitchContext+0x4a>
 8007846:	6844      	ldr	r4, [r0, #4]
 8007848:	3108      	adds	r1, #8
 800784a:	6864      	ldr	r4, [r4, #4]
 800784c:	440a      	add	r2, r1
 800784e:	4294      	cmp	r4, r2
 8007850:	6044      	str	r4, [r0, #4]
 8007852:	bf04      	itt	eq
 8007854:	6862      	ldreq	r2, [r4, #4]
 8007856:	6042      	streq	r2, [r0, #4]
 8007858:	2214      	movs	r2, #20
 800785a:	fb02 6203 	mla	r2, r2, r3, r6
 800785e:	6852      	ldr	r2, [r2, #4]
 8007860:	68d1      	ldr	r1, [r2, #12]
 8007862:	4a0d      	ldr	r2, [pc, #52]	; (8007898 <vTaskSwitchContext+0x78>)
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	602b      	str	r3, [r5, #0]
}
 8007868:	e7e1      	b.n	800782e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800786a:	b953      	cbnz	r3, 8007882 <vTaskSwitchContext+0x62>
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	b672      	cpsid	i
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	b662      	cpsie	i
 8007880:	e7fe      	b.n	8007880 <vTaskSwitchContext+0x60>
 8007882:	3b01      	subs	r3, #1
 8007884:	e7da      	b.n	800783c <vTaskSwitchContext+0x1c>
 8007886:	bf00      	nop
 8007888:	20002a24 	.word	0x20002a24
 800788c:	20002aa4 	.word	0x20002aa4
 8007890:	20002a2c 	.word	0x20002a2c
 8007894:	200025b8 	.word	0x200025b8
 8007898:	200025ac 	.word	0x200025ac

0800789c <vTaskPlaceOnEventList>:
{
 800789c:	b510      	push	{r4, lr}
 800789e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80078a0:	b950      	cbnz	r0, 80078b8 <vTaskPlaceOnEventList+0x1c>
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	b672      	cpsid	i
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	b662      	cpsie	i
 80078b6:	e7fe      	b.n	80078b6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078b8:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <vTaskPlaceOnEventList+0x34>)
 80078ba:	6819      	ldr	r1, [r3, #0]
 80078bc:	3118      	adds	r1, #24
 80078be:	f7fe ffad 	bl	800681c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078c2:	4620      	mov	r0, r4
 80078c4:	2101      	movs	r1, #1
}
 80078c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078ca:	f7ff bd7f 	b.w	80073cc <prvAddCurrentTaskToDelayedList>
 80078ce:	bf00      	nop
 80078d0:	200025ac 	.word	0x200025ac

080078d4 <vTaskPlaceOnEventListRestricted>:
	{
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	460d      	mov	r5, r1
 80078d8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80078da:	b950      	cbnz	r0, 80078f2 <vTaskPlaceOnEventListRestricted+0x1e>
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	b672      	cpsid	i
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	b662      	cpsie	i
 80078f0:	e7fe      	b.n	80078f0 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078f2:	4b07      	ldr	r3, [pc, #28]	; (8007910 <vTaskPlaceOnEventListRestricted+0x3c>)
 80078f4:	6819      	ldr	r1, [r3, #0]
 80078f6:	3118      	adds	r1, #24
 80078f8:	f7fe ff84 	bl	8006804 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80078fc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078fe:	4621      	mov	r1, r4
 8007900:	bf0c      	ite	eq
 8007902:	4628      	moveq	r0, r5
 8007904:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800790c:	f7ff bd5e 	b.w	80073cc <prvAddCurrentTaskToDelayedList>
 8007910:	200025ac 	.word	0x200025ac

08007914 <xTaskRemoveFromEventList>:
{
 8007914:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007916:	68c3      	ldr	r3, [r0, #12]
 8007918:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800791a:	b954      	cbnz	r4, 8007932 <xTaskRemoveFromEventList+0x1e>
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	b672      	cpsid	i
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	b662      	cpsie	i
 8007930:	e7fe      	b.n	8007930 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007932:	f104 0518 	add.w	r5, r4, #24
 8007936:	4628      	mov	r0, r5
 8007938:	f7fe ff87 	bl	800684a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800793c:	4b11      	ldr	r3, [pc, #68]	; (8007984 <xTaskRemoveFromEventList+0x70>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	b9d3      	cbnz	r3, 8007978 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007942:	1d25      	adds	r5, r4, #4
 8007944:	4628      	mov	r0, r5
 8007946:	f7fe ff80 	bl	800684a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800794a:	4a0f      	ldr	r2, [pc, #60]	; (8007988 <xTaskRemoveFromEventList+0x74>)
 800794c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800794e:	6811      	ldr	r1, [r2, #0]
 8007950:	428b      	cmp	r3, r1
 8007952:	d900      	bls.n	8007956 <xTaskRemoveFromEventList+0x42>
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4a0d      	ldr	r2, [pc, #52]	; (800798c <xTaskRemoveFromEventList+0x78>)
 8007958:	2014      	movs	r0, #20
 800795a:	4629      	mov	r1, r5
 800795c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007960:	f7fe ff50 	bl	8006804 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007964:	4b0a      	ldr	r3, [pc, #40]	; (8007990 <xTaskRemoveFromEventList+0x7c>)
 8007966:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	429a      	cmp	r2, r3
 800796e:	d906      	bls.n	800797e <xTaskRemoveFromEventList+0x6a>
		xYieldPending = pdTRUE;
 8007970:	2001      	movs	r0, #1
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <xTaskRemoveFromEventList+0x80>)
 8007974:	6018      	str	r0, [r3, #0]
}
 8007976:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007978:	4629      	mov	r1, r5
 800797a:	4807      	ldr	r0, [pc, #28]	; (8007998 <xTaskRemoveFromEventList+0x84>)
 800797c:	e7f0      	b.n	8007960 <xTaskRemoveFromEventList+0x4c>
		xReturn = pdFALSE;
 800797e:	2000      	movs	r0, #0
	return xReturn;
 8007980:	e7f9      	b.n	8007976 <xTaskRemoveFromEventList+0x62>
 8007982:	bf00      	nop
 8007984:	20002a24 	.word	0x20002a24
 8007988:	20002a2c 	.word	0x20002a2c
 800798c:	200025b8 	.word	0x200025b8
 8007990:	200025ac 	.word	0x200025ac
 8007994:	20002aa4 	.word	0x20002aa4
 8007998:	20002a60 	.word	0x20002a60

0800799c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800799c:	4b03      	ldr	r3, [pc, #12]	; (80079ac <vTaskInternalSetTimeOutState+0x10>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079a2:	4b03      	ldr	r3, [pc, #12]	; (80079b0 <vTaskInternalSetTimeOutState+0x14>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6043      	str	r3, [r0, #4]
}
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	20002a5c 	.word	0x20002a5c
 80079b0:	20002aa0 	.word	0x20002aa0

080079b4 <xTaskCheckForTimeOut>:
{
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80079b8:	4605      	mov	r5, r0
 80079ba:	b950      	cbnz	r0, 80079d2 <xTaskCheckForTimeOut+0x1e>
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	b672      	cpsid	i
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	b662      	cpsie	i
 80079d0:	e7fe      	b.n	80079d0 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80079d2:	b951      	cbnz	r1, 80079ea <xTaskCheckForTimeOut+0x36>
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	b672      	cpsid	i
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	b662      	cpsie	i
 80079e8:	e7fe      	b.n	80079e8 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 80079ea:	f000 fb9b 	bl	8008124 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079f0:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80079f2:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80079f4:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079f6:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 80079f8:	1c5e      	adds	r6, r3, #1
 80079fa:	d00d      	beq.n	8007a18 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079fc:	4e0c      	ldr	r6, [pc, #48]	; (8007a30 <xTaskCheckForTimeOut+0x7c>)
 80079fe:	682f      	ldr	r7, [r5, #0]
 8007a00:	6836      	ldr	r6, [r6, #0]
 8007a02:	42b7      	cmp	r7, r6
 8007a04:	d001      	beq.n	8007a0a <xTaskCheckForTimeOut+0x56>
 8007a06:	4288      	cmp	r0, r1
 8007a08:	d90d      	bls.n	8007a26 <xTaskCheckForTimeOut+0x72>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d909      	bls.n	8007a22 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 8007a0e:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a10:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8007a12:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a14:	f7ff ffc2 	bl	800799c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8007a18:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007a1a:	f000 fba9 	bl	8008170 <vPortExitCritical>
}
 8007a1e:	4620      	mov	r0, r4
 8007a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007a26:	2401      	movs	r4, #1
 8007a28:	e7f7      	b.n	8007a1a <xTaskCheckForTimeOut+0x66>
 8007a2a:	bf00      	nop
 8007a2c:	20002aa0 	.word	0x20002aa0
 8007a30:	20002a5c 	.word	0x20002a5c

08007a34 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007a34:	4b01      	ldr	r3, [pc, #4]	; (8007a3c <vTaskMissedYield+0x8>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
}
 8007a3a:	4770      	bx	lr
 8007a3c:	20002aa4 	.word	0x20002aa4

08007a40 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007a40:	4b01      	ldr	r3, [pc, #4]	; (8007a48 <xTaskGetCurrentTaskHandle+0x8>)
 8007a42:	6818      	ldr	r0, [r3, #0]
	}
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	200025ac 	.word	0x200025ac

08007a4c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007a4c:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <xTaskGetSchedulerState+0x18>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	b133      	cbz	r3, 8007a60 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <xTaskGetSchedulerState+0x1c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a58:	bf0c      	ite	eq
 8007a5a:	2002      	moveq	r0, #2
 8007a5c:	2000      	movne	r0, #0
 8007a5e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a60:	2001      	movs	r0, #1
	}
 8007a62:	4770      	bx	lr
 8007a64:	20002a74 	.word	0x20002a74
 8007a68:	20002a24 	.word	0x20002a24

08007a6c <xTaskPriorityInherit>:
	{
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007a6e:	4604      	mov	r4, r0
 8007a70:	b340      	cbz	r0, 8007ac4 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a72:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <xTaskPriorityInherit+0x74>)
 8007a74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007a76:	6811      	ldr	r1, [r2, #0]
 8007a78:	4616      	mov	r6, r2
 8007a7a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	d226      	bcs.n	8007ace <xTaskPriorityInherit+0x62>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a80:	6982      	ldr	r2, [r0, #24]
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	db04      	blt.n	8007a90 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a86:	6832      	ldr	r2, [r6, #0]
 8007a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a8a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007a8e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a90:	2214      	movs	r2, #20
 8007a92:	4d14      	ldr	r5, [pc, #80]	; (8007ae4 <xTaskPriorityInherit+0x78>)
 8007a94:	fb02 5303 	mla	r3, r2, r3, r5
 8007a98:	6962      	ldr	r2, [r4, #20]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d113      	bne.n	8007ac6 <xTaskPriorityInherit+0x5a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a9e:	1d27      	adds	r7, r4, #4
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7fe fed2 	bl	800684a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007aa6:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007aa8:	4a0f      	ldr	r2, [pc, #60]	; (8007ae8 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007aac:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007aae:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ab0:	428b      	cmp	r3, r1
 8007ab2:	d900      	bls.n	8007ab6 <xTaskPriorityInherit+0x4a>
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	2014      	movs	r0, #20
 8007ab8:	4639      	mov	r1, r7
 8007aba:	fb00 5003 	mla	r0, r0, r3, r5
 8007abe:	f7fe fea1 	bl	8006804 <vListInsertEnd>
				xReturn = pdTRUE;
 8007ac2:	2001      	movs	r0, #1
	}
 8007ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ac6:	6833      	ldr	r3, [r6, #0]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007acc:	e7f9      	b.n	8007ac2 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ace:	6813      	ldr	r3, [r2, #0]
 8007ad0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007ad2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007ad4:	42a0      	cmp	r0, r4
 8007ad6:	bf2c      	ite	cs
 8007ad8:	2000      	movcs	r0, #0
 8007ada:	2001      	movcc	r0, #1
 8007adc:	e7f2      	b.n	8007ac4 <xTaskPriorityInherit+0x58>
 8007ade:	bf00      	nop
 8007ae0:	200025ac 	.word	0x200025ac
 8007ae4:	200025b8 	.word	0x200025b8
 8007ae8:	20002a2c 	.word	0x20002a2c

08007aec <xTaskPriorityDisinherit>:
	{
 8007aec:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8007aee:	b908      	cbnz	r0, 8007af4 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8007af0:	2000      	movs	r0, #0
	}
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007af4:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <xTaskPriorityDisinherit+0x80>)
 8007af6:	681c      	ldr	r4, [r3, #0]
 8007af8:	4284      	cmp	r4, r0
 8007afa:	d00a      	beq.n	8007b12 <xTaskPriorityDisinherit+0x26>
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	b672      	cpsid	i
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	b662      	cpsie	i
 8007b10:	e7fe      	b.n	8007b10 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b12:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007b14:	b953      	cbnz	r3, 8007b2c <xTaskPriorityDisinherit+0x40>
 8007b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1a:	b672      	cpsid	i
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	b662      	cpsie	i
 8007b2a:	e7fe      	b.n	8007b2a <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8007b2e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8007b32:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b34:	4291      	cmp	r1, r2
 8007b36:	d0db      	beq.n	8007af0 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1d9      	bne.n	8007af0 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b3c:	1d25      	adds	r5, r4, #4
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7fe fe83 	bl	800684a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b4e:	4a08      	ldr	r2, [pc, #32]	; (8007b70 <xTaskPriorityDisinherit+0x84>)
 8007b50:	6811      	ldr	r1, [r2, #0]
 8007b52:	428b      	cmp	r3, r1
 8007b54:	d900      	bls.n	8007b58 <xTaskPriorityDisinherit+0x6c>
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	4a06      	ldr	r2, [pc, #24]	; (8007b74 <xTaskPriorityDisinherit+0x88>)
 8007b5a:	2014      	movs	r0, #20
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	fb00 2003 	mla	r0, r0, r3, r2
 8007b62:	f7fe fe4f 	bl	8006804 <vListInsertEnd>
					xReturn = pdTRUE;
 8007b66:	2001      	movs	r0, #1
		return xReturn;
 8007b68:	e7c3      	b.n	8007af2 <xTaskPriorityDisinherit+0x6>
 8007b6a:	bf00      	nop
 8007b6c:	200025ac 	.word	0x200025ac
 8007b70:	20002a2c 	.word	0x20002a2c
 8007b74:	200025b8 	.word	0x200025b8

08007b78 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007b78:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d046      	beq.n	8007c0e <vTaskPriorityDisinheritAfterTimeout+0x96>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b80:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007b82:	b952      	cbnz	r2, 8007b9a <vTaskPriorityDisinheritAfterTimeout+0x22>
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	b672      	cpsid	i
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	b662      	cpsie	i
 8007b98:	e7fe      	b.n	8007b98 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8007b9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	bf38      	it	cc
 8007ba0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007ba2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	d032      	beq.n	8007c0e <vTaskPriorityDisinheritAfterTimeout+0x96>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ba8:	2a01      	cmp	r2, #1
 8007baa:	d130      	bne.n	8007c0e <vTaskPriorityDisinheritAfterTimeout+0x96>
					configASSERT( pxTCB != pxCurrentTCB );
 8007bac:	4a18      	ldr	r2, [pc, #96]	; (8007c10 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007bae:	6812      	ldr	r2, [r2, #0]
 8007bb0:	4282      	cmp	r2, r0
 8007bb2:	d10a      	bne.n	8007bca <vTaskPriorityDisinheritAfterTimeout+0x52>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	b672      	cpsid	i
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	b662      	cpsie	i
 8007bc8:	e7fe      	b.n	8007bc8 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bca:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bcc:	4d11      	ldr	r5, [pc, #68]	; (8007c14 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bce:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bd0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8007bd4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bd6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bda:	bfa8      	it	ge
 8007bdc:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007be0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be2:	bfa8      	it	ge
 8007be4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d111      	bne.n	8007c0e <vTaskPriorityDisinheritAfterTimeout+0x96>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bea:	1d06      	adds	r6, r0, #4
 8007bec:	4630      	mov	r0, r6
 8007bee:	f7fe fe2c 	bl	800684a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007bf2:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8007bf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007bf6:	6811      	ldr	r1, [r2, #0]
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	d900      	bls.n	8007bfe <vTaskPriorityDisinheritAfterTimeout+0x86>
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	2014      	movs	r0, #20
 8007c00:	4631      	mov	r1, r6
 8007c02:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8007c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8007c0a:	f7fe bdfb 	b.w	8006804 <vListInsertEnd>
	}
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	200025ac 	.word	0x200025ac
 8007c14:	200025b8 	.word	0x200025b8
 8007c18:	20002a2c 	.word	0x20002a2c

08007c1c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007c1c:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <pvTaskIncrementMutexHeldCount+0x14>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	b11a      	cbz	r2, 8007c2a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007c26:	3201      	adds	r2, #1
 8007c28:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8007c2a:	6818      	ldr	r0, [r3, #0]
	}
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	200025ac 	.word	0x200025ac

08007c34 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007c36:	4c11      	ldr	r4, [pc, #68]	; (8007c7c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8007c38:	f000 fa74 	bl	8008124 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	b9bd      	cbnz	r5, 8007c70 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c40:	4f0f      	ldr	r7, [pc, #60]	; (8007c80 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8007c42:	4e10      	ldr	r6, [pc, #64]	; (8007c84 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7fe fdcf 	bl	80067e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7fe fdcc 	bl	80067e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c52:	4a0e      	ldr	r2, [pc, #56]	; (8007c8c <prvCheckForValidListAndQueue+0x58>)
 8007c54:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8007c56:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c58:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <prvCheckForValidListAndQueue+0x5c>)
 8007c5c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c5e:	9500      	str	r5, [sp, #0]
 8007c60:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <prvCheckForValidListAndQueue+0x60>)
 8007c62:	f7fe fed1 	bl	8006a08 <xQueueGenericCreateStatic>
 8007c66:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c68:	b110      	cbz	r0, 8007c70 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c6a:	490b      	ldr	r1, [pc, #44]	; (8007c98 <prvCheckForValidListAndQueue+0x64>)
 8007c6c:	f7ff fa4c 	bl	8007108 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8007c70:	b003      	add	sp, #12
 8007c72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8007c76:	f000 ba7b 	b.w	8008170 <vPortExitCritical>
 8007c7a:	bf00      	nop
 8007c7c:	20002bcc 	.word	0x20002bcc
 8007c80:	20002b50 	.word	0x20002b50
 8007c84:	20002b64 	.word	0x20002b64
 8007c88:	20002aa8 	.word	0x20002aa8
 8007c8c:	20002ab0 	.word	0x20002ab0
 8007c90:	20002aac 	.word	0x20002aac
 8007c94:	20002b7c 	.word	0x20002b7c
 8007c98:	0800d89a 	.word	0x0800d89a

08007c9c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8007c9c:	4291      	cmp	r1, r2
{
 8007c9e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ca0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ca2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8007ca4:	d80a      	bhi.n	8007cbc <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	6983      	ldr	r3, [r0, #24]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d20d      	bcs.n	8007cca <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cae:	1d01      	adds	r1, r0, #4
 8007cb0:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	f7fe fdb2 	bl	800681c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007cb8:	2000      	movs	r0, #0
}
 8007cba:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d201      	bcs.n	8007cc4 <prvInsertTimerInActiveList+0x28>
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	d202      	bcs.n	8007cca <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cc4:	1d01      	adds	r1, r0, #4
 8007cc6:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <prvInsertTimerInActiveList+0x38>)
 8007cc8:	e7f3      	b.n	8007cb2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8007cca:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007ccc:	e7f5      	b.n	8007cba <prvInsertTimerInActiveList+0x1e>
 8007cce:	bf00      	nop
 8007cd0:	20002aac 	.word	0x20002aac
 8007cd4:	20002aa8 	.word	0x20002aa8

08007cd8 <xTimerCreateTimerTask>:
{
 8007cd8:	b510      	push	{r4, lr}
 8007cda:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007cdc:	f7ff ffaa 	bl	8007c34 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007ce0:	4b13      	ldr	r3, [pc, #76]	; (8007d30 <xTimerCreateTimerTask+0x58>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	b1b3      	cbz	r3, 8007d14 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ce6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ce8:	aa07      	add	r2, sp, #28
 8007cea:	a906      	add	r1, sp, #24
 8007cec:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cee:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cf2:	f7fe fd6d 	bl	80067d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cf6:	9b05      	ldr	r3, [sp, #20]
 8007cf8:	9a07      	ldr	r2, [sp, #28]
 8007cfa:	9302      	str	r3, [sp, #8]
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	490d      	ldr	r1, [pc, #52]	; (8007d34 <xTimerCreateTimerTask+0x5c>)
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	2302      	movs	r3, #2
 8007d04:	480c      	ldr	r0, [pc, #48]	; (8007d38 <xTimerCreateTimerTask+0x60>)
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	4623      	mov	r3, r4
 8007d0a:	f7ff fb99 	bl	8007440 <xTaskCreateStatic>
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <xTimerCreateTimerTask+0x64>)
 8007d10:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007d12:	b950      	cbnz	r0, 8007d2a <xTimerCreateTimerTask+0x52>
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	b672      	cpsid	i
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	b662      	cpsie	i
 8007d28:	e7fe      	b.n	8007d28 <xTimerCreateTimerTask+0x50>
}
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	b008      	add	sp, #32
 8007d2e:	bd10      	pop	{r4, pc}
 8007d30:	20002bcc 	.word	0x20002bcc
 8007d34:	0800d89f 	.word	0x0800d89f
 8007d38:	08007e21 	.word	0x08007e21
 8007d3c:	20002bd0 	.word	0x20002bd0

08007d40 <xTimerGenericCommand>:
{
 8007d40:	b530      	push	{r4, r5, lr}
 8007d42:	4615      	mov	r5, r2
 8007d44:	b085      	sub	sp, #20
 8007d46:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8007d48:	4603      	mov	r3, r0
 8007d4a:	b950      	cbnz	r0, 8007d62 <xTimerGenericCommand+0x22>
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	b672      	cpsid	i
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	b662      	cpsie	i
 8007d60:	e7fe      	b.n	8007d60 <xTimerGenericCommand+0x20>
	if( xTimerQueue != NULL )
 8007d62:	4c0d      	ldr	r4, [pc, #52]	; (8007d98 <xTimerGenericCommand+0x58>)
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	b178      	cbz	r0, 8007d88 <xTimerGenericCommand+0x48>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d68:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d6a:	9302      	str	r3, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d6c:	e9cd 1500 	strd	r1, r5, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d70:	dc0c      	bgt.n	8007d8c <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d72:	f7ff fe6b 	bl	8007a4c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d76:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d78:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d7a:	4669      	mov	r1, sp
 8007d7c:	6820      	ldr	r0, [r4, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d7e:	bf0c      	ite	eq
 8007d80:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d82:	461a      	movne	r2, r3
 8007d84:	f7fe fec2 	bl	8006b0c <xQueueGenericSend>
}
 8007d88:	b005      	add	sp, #20
 8007d8a:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4669      	mov	r1, sp
 8007d90:	f7fe ffbd 	bl	8006d0e <xQueueGenericSendFromISR>
 8007d94:	e7f8      	b.n	8007d88 <xTimerGenericCommand+0x48>
 8007d96:	bf00      	nop
 8007d98:	20002bcc 	.word	0x20002bcc

08007d9c <prvSwitchTimerLists>:
{
 8007d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007da0:	4d1d      	ldr	r5, [pc, #116]	; (8007e18 <prvSwitchTimerLists+0x7c>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007da2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	b932      	cbnz	r2, 8007dba <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8007dac:	4a1b      	ldr	r2, [pc, #108]	; (8007e1c <prvSwitchTimerLists+0x80>)
 8007dae:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007db0:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8007db2:	6029      	str	r1, [r5, #0]
}
 8007db4:	b002      	add	sp, #8
 8007db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dba:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dbc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dbe:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc0:	1d27      	adds	r7, r4, #4
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f7fe fd41 	bl	800684a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc8:	6a23      	ldr	r3, [r4, #32]
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007dd2:	075b      	lsls	r3, r3, #29
 8007dd4:	d5e7      	bpl.n	8007da6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dd6:	69a3      	ldr	r3, [r4, #24]
 8007dd8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8007dda:	429e      	cmp	r6, r3
 8007ddc:	d206      	bcs.n	8007dec <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dde:	6063      	str	r3, [r4, #4]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007de0:	4639      	mov	r1, r7
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007de2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007de4:	6828      	ldr	r0, [r5, #0]
 8007de6:	f7fe fd19 	bl	800681c <vListInsert>
 8007dea:	e7dc      	b.n	8007da6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8cd 8000 	str.w	r8, [sp]
 8007df2:	4632      	mov	r2, r6
 8007df4:	4620      	mov	r0, r4
 8007df6:	4619      	mov	r1, r3
 8007df8:	f7ff ffa2 	bl	8007d40 <xTimerGenericCommand>
				configASSERT( xResult );
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d1d2      	bne.n	8007da6 <prvSwitchTimerLists+0xa>
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	b672      	cpsid	i
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	b662      	cpsie	i
 8007e14:	e7fe      	b.n	8007e14 <prvSwitchTimerLists+0x78>
 8007e16:	bf00      	nop
 8007e18:	20002aa8 	.word	0x20002aa8
 8007e1c:	20002aac 	.word	0x20002aac

08007e20 <prvTimerTask>:
{
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e24:	4d84      	ldr	r5, [pc, #528]	; (8008038 <prvTimerTask+0x218>)
{
 8007e26:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8007e28:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8008044 <prvTimerTask+0x224>
 8007e2c:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e2e:	682a      	ldr	r2, [r5, #0]
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	b353      	cbz	r3, 8007e8a <prvTimerTask+0x6a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e34:	68d3      	ldr	r3, [r2, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e36:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e38:	f8d3 9000 	ldr.w	r9, [r3]
	if( xTimeNow < xLastTime )
 8007e3c:	f8df b208 	ldr.w	fp, [pc, #520]	; 8008048 <prvTimerTask+0x228>
	vTaskSuspendAll();
 8007e40:	f7ff fbb2 	bl	80075a8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007e44:	f7ff fbb8 	bl	80075b8 <xTaskGetTickCount>
 8007e48:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8007e4a:	f8db 3000 	ldr.w	r3, [fp]
 8007e4e:	465e      	mov	r6, fp
 8007e50:	4298      	cmp	r0, r3
 8007e52:	d31d      	bcc.n	8007e90 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8007e54:	f8cb 0000 	str.w	r0, [fp]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e58:	b32c      	cbz	r4, 8007ea6 <prvTimerTask+0x86>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e5a:	4b78      	ldr	r3, [pc, #480]	; (800803c <prvTimerTask+0x21c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	fab2 f282 	clz	r2, r2
 8007e64:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e66:	4b76      	ldr	r3, [pc, #472]	; (8008040 <prvTimerTask+0x220>)
 8007e68:	eba9 010a 	sub.w	r1, r9, sl
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f7ff f95d 	bl	800712c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e72:	f7ff fc39 	bl	80076e8 <xTaskResumeAll>
 8007e76:	b988      	cbnz	r0, 8007e9c <prvTimerTask+0x7c>
					portYIELD_WITHIN_API();
 8007e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e7c:	f8c8 3000 	str.w	r3, [r8]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	e008      	b.n	8007e9c <prvTimerTask+0x7c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e8a:	2401      	movs	r4, #1
		xNextExpireTime = ( TickType_t ) 0U;
 8007e8c:	4699      	mov	r9, r3
 8007e8e:	e7d5      	b.n	8007e3c <prvTimerTask+0x1c>
		prvSwitchTimerLists();
 8007e90:	f7ff ff84 	bl	8007d9c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8007e94:	f8cb a000 	str.w	sl, [fp]
			( void ) xTaskResumeAll();
 8007e98:	f7ff fc26 	bl	80076e8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e9c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8008040 <prvTimerTask+0x220>
 8007ea0:	f04f 0a00 	mov.w	sl, #0
 8007ea4:	e083      	b.n	8007fae <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ea6:	4581      	cmp	r9, r0
 8007ea8:	d832      	bhi.n	8007f10 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 8007eaa:	f7ff fc1d 	bl	80076e8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007eb6:	f10b 0004 	add.w	r0, fp, #4
 8007eba:	f7fe fcc6 	bl	800684a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ebe:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 8007ec2:	0758      	lsls	r0, r3, #29
 8007ec4:	d51b      	bpl.n	8007efe <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ec6:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007eca:	464b      	mov	r3, r9
 8007ecc:	4652      	mov	r2, sl
 8007ece:	4658      	mov	r0, fp
 8007ed0:	4449      	add	r1, r9
 8007ed2:	f7ff fee3 	bl	8007c9c <prvInsertTimerInActiveList>
 8007ed6:	b1b0      	cbz	r0, 8007f06 <prvTimerTask+0xe6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed8:	9400      	str	r4, [sp, #0]
 8007eda:	4623      	mov	r3, r4
 8007edc:	464a      	mov	r2, r9
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4658      	mov	r0, fp
 8007ee2:	f7ff ff2d 	bl	8007d40 <xTimerGenericCommand>
			configASSERT( xResult );
 8007ee6:	b970      	cbnz	r0, 8007f06 <prvTimerTask+0xe6>
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	b672      	cpsid	i
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	b662      	cpsie	i
 8007efc:	e7fe      	b.n	8007efc <prvTimerTask+0xdc>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007efe:	f023 0301 	bic.w	r3, r3, #1
 8007f02:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f06:	f8db 3020 	ldr.w	r3, [fp, #32]
 8007f0a:	4658      	mov	r0, fp
 8007f0c:	4798      	blx	r3
 8007f0e:	e7c5      	b.n	8007e9c <prvTimerTask+0x7c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f10:	4622      	mov	r2, r4
 8007f12:	e7a8      	b.n	8007e66 <prvTimerTask+0x46>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f14:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f18:	465a      	mov	r2, fp
 8007f1a:	69a1      	ldr	r1, [r4, #24]
 8007f1c:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	4419      	add	r1, r3
 8007f2a:	f7ff feb7 	bl	8007c9c <prvInsertTimerInActiveList>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d03d      	beq.n	8007fae <prvTimerTask+0x18e>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f32:	6a23      	ldr	r3, [r4, #32]
 8007f34:	4620      	mov	r0, r4
 8007f36:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f38:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007f3c:	0759      	lsls	r1, r3, #29
 8007f3e:	d536      	bpl.n	8007fae <prvTimerTask+0x18e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f40:	69a2      	ldr	r2, [r4, #24]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9903      	ldr	r1, [sp, #12]
 8007f46:	4620      	mov	r0, r4
 8007f48:	f8cd a000 	str.w	sl, [sp]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	4619      	mov	r1, r3
 8007f50:	f7ff fef6 	bl	8007d40 <xTimerGenericCommand>
							configASSERT( xResult );
 8007f54:	bb58      	cbnz	r0, 8007fae <prvTimerTask+0x18e>
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	b672      	cpsid	i
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	b662      	cpsie	i
 8007f6a:	e7fe      	b.n	8007f6a <prvTimerTask+0x14a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f6c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8007f78:	e019      	b.n	8007fae <prvTimerTask+0x18e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f7e:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f80:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f84:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f86:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f8a:	b951      	cbnz	r1, 8007fa2 <prvTimerTask+0x182>
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	b672      	cpsid	i
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	b662      	cpsie	i
 8007fa0:	e7fe      	b.n	8007fa0 <prvTimerTask+0x180>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fa2:	465b      	mov	r3, fp
 8007fa4:	465a      	mov	r2, fp
 8007fa6:	4459      	add	r1, fp
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7ff fe77 	bl	8007c9c <prvInsertTimerInActiveList>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fae:	2200      	movs	r2, #0
 8007fb0:	a902      	add	r1, sp, #8
 8007fb2:	f8d9 0000 	ldr.w	r0, [r9]
 8007fb6:	f7fe ff13 	bl	8006de0 <xQueueReceive>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	f43f af37 	beq.w	8007e2e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fc0:	9b02      	ldr	r3, [sp, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	da03      	bge.n	8007fce <prvTimerTask+0x1ae>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fcc:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fce:	9b02      	ldr	r3, [sp, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dbec      	blt.n	8007fae <prvTimerTask+0x18e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fd4:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fd6:	6963      	ldr	r3, [r4, #20]
 8007fd8:	b113      	cbz	r3, 8007fe0 <prvTimerTask+0x1c0>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fda:	1d20      	adds	r0, r4, #4
 8007fdc:	f7fe fc35 	bl	800684a <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8007fe0:	f7ff faea 	bl	80075b8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007fe4:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8007fe6:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8007fe8:	4298      	cmp	r0, r3
 8007fea:	d201      	bcs.n	8007ff0 <prvTimerTask+0x1d0>
		prvSwitchTimerLists();
 8007fec:	f7ff fed6 	bl	8007d9c <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8007ff0:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8007ff2:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	d8d9      	bhi.n	8007fae <prvTimerTask+0x18e>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <prvTimerTask+0x1e0>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08007f15 	.word	0x08007f15
 8008004:	08007f15 	.word	0x08007f15
 8008008:	08007f15 	.word	0x08007f15
 800800c:	08007f6d 	.word	0x08007f6d
 8008010:	08007f7b 	.word	0x08007f7b
 8008014:	08008029 	.word	0x08008029
 8008018:	08007f15 	.word	0x08007f15
 800801c:	08007f15 	.word	0x08007f15
 8008020:	08007f6d 	.word	0x08007f6d
 8008024:	08007f7b 	.word	0x08007f7b
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008028:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800802c:	079a      	lsls	r2, r3, #30
 800802e:	d49f      	bmi.n	8007f70 <prvTimerTask+0x150>
							vPortFree( pxTimer );
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fa65 	bl	8008500 <vPortFree>
 8008036:	e7ba      	b.n	8007fae <prvTimerTask+0x18e>
 8008038:	20002aa8 	.word	0x20002aa8
 800803c:	20002aac 	.word	0x20002aac
 8008040:	20002bcc 	.word	0x20002bcc
 8008044:	e000ed04 	.word	0xe000ed04
 8008048:	20002b78 	.word	0x20002b78

0800804c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 800804c:	2300      	movs	r3, #0
{
 800804e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008050:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008052:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <prvTaskExitError+0x44>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	d00a      	beq.n	8008070 <prvTaskExitError+0x24>
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	b672      	cpsid	i
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	b662      	cpsie	i
 800806e:	e7fe      	b.n	800806e <prvTaskExitError+0x22>
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	b672      	cpsid	i
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0fc      	beq.n	8008084 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800808a:	b002      	add	sp, #8
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	200015e8 	.word	0x200015e8

08008094 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008094:	4808      	ldr	r0, [pc, #32]	; (80080b8 <prvPortStartFirstTask+0x24>)
 8008096:	6800      	ldr	r0, [r0, #0]
 8008098:	6800      	ldr	r0, [r0, #0]
 800809a:	f380 8808 	msr	MSP, r0
 800809e:	f04f 0000 	mov.w	r0, #0
 80080a2:	f380 8814 	msr	CONTROL, r0
 80080a6:	b662      	cpsie	i
 80080a8:	b661      	cpsie	f
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	df00      	svc	0
 80080b4:	bf00      	nop
 80080b6:	0000      	.short	0x0000
 80080b8:	e000ed08 	.word	0xe000ed08

080080bc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080bc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080cc <vPortEnableVFP+0x10>
 80080c0:	6801      	ldr	r1, [r0, #0]
 80080c2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080c6:	6001      	str	r1, [r0, #0]
 80080c8:	4770      	bx	lr
 80080ca:	0000      	.short	0x0000
 80080cc:	e000ed88 	.word	0xe000ed88

080080d0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080d4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080d8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80080dc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080de:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080e0:	4b03      	ldr	r3, [pc, #12]	; (80080f0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080e2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080e4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080e6:	f06f 0302 	mvn.w	r3, #2
 80080ea:	6203      	str	r3, [r0, #32]
}
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	0800804d 	.word	0x0800804d
	...

08008100 <SVC_Handler>:
	__asm volatile (
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <pxCurrentTCBConst2>)
 8008102:	6819      	ldr	r1, [r3, #0]
 8008104:	6808      	ldr	r0, [r1, #0]
 8008106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	f380 8809 	msr	PSP, r0
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f380 8811 	msr	BASEPRI, r0
 800811a:	4770      	bx	lr
 800811c:	f3af 8000 	nop.w

08008120 <pxCurrentTCBConst2>:
 8008120:	200025ac 	.word	0x200025ac

08008124 <vPortEnterCritical>:
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	b672      	cpsid	i
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	b662      	cpsie	i
	uxCriticalNesting++;
 8008138:	4a0b      	ldr	r2, [pc, #44]	; (8008168 <vPortEnterCritical+0x44>)
 800813a:	6813      	ldr	r3, [r2, #0]
 800813c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800813e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008142:	d10f      	bne.n	8008164 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008144:	4b09      	ldr	r3, [pc, #36]	; (800816c <vPortEnterCritical+0x48>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f013 0fff 	tst.w	r3, #255	; 0xff
 800814c:	d00a      	beq.n	8008164 <vPortEnterCritical+0x40>
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	b672      	cpsid	i
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	b662      	cpsie	i
 8008162:	e7fe      	b.n	8008162 <vPortEnterCritical+0x3e>
}
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	200015e8 	.word	0x200015e8
 800816c:	e000ed04 	.word	0xe000ed04

08008170 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008170:	4a09      	ldr	r2, [pc, #36]	; (8008198 <vPortExitCritical+0x28>)
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	b953      	cbnz	r3, 800818c <vPortExitCritical+0x1c>
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	b672      	cpsid	i
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	b662      	cpsie	i
 800818a:	e7fe      	b.n	800818a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800818c:	3b01      	subs	r3, #1
 800818e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008190:	b90b      	cbnz	r3, 8008196 <vPortExitCritical+0x26>
	__asm volatile
 8008192:	f383 8811 	msr	BASEPRI, r3
}
 8008196:	4770      	bx	lr
 8008198:	200015e8 	.word	0x200015e8
 800819c:	00000000 	.word	0x00000000

080081a0 <PendSV_Handler>:
	__asm volatile
 80081a0:	f3ef 8009 	mrs	r0, PSP
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4b15      	ldr	r3, [pc, #84]	; (8008200 <pxCurrentTCBConst>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	f01e 0f10 	tst.w	lr, #16
 80081b0:	bf08      	it	eq
 80081b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	6010      	str	r0, [r2, #0]
 80081bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	f7ff fb24 	bl	8007820 <vTaskSwitchContext>
 80081d8:	f04f 0000 	mov.w	r0, #0
 80081dc:	f380 8811 	msr	BASEPRI, r0
 80081e0:	bc09      	pop	{r0, r3}
 80081e2:	6819      	ldr	r1, [r3, #0]
 80081e4:	6808      	ldr	r0, [r1, #0]
 80081e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	f01e 0f10 	tst.w	lr, #16
 80081ee:	bf08      	it	eq
 80081f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081f4:	f380 8809 	msr	PSP, r0
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop

08008200 <pxCurrentTCBConst>:
 8008200:	200025ac 	.word	0x200025ac

08008204 <xPortSysTickHandler>:
{
 8008204:	b508      	push	{r3, lr}
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	b672      	cpsid	i
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800821a:	f7ff f9d3 	bl	80075c4 <xTaskIncrementTick>
 800821e:	b118      	cbz	r0, 8008228 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008220:	4b03      	ldr	r3, [pc, #12]	; (8008230 <xPortSysTickHandler+0x2c>)
 8008222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008226:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008228:	2300      	movs	r3, #0
 800822a:	f383 8811 	msr	BASEPRI, r3
}
 800822e:	bd08      	pop	{r3, pc}
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008234:	2300      	movs	r3, #0
 8008236:	4a08      	ldr	r2, [pc, #32]	; (8008258 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008238:	4908      	ldr	r1, [pc, #32]	; (800825c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800823a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800823c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800823e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <vPortSetupTimerInterrupt+0x2c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	fbb3 f3f1 	udiv	r3, r3, r1
 800824a:	4906      	ldr	r1, [pc, #24]	; (8008264 <vPortSetupTimerInterrupt+0x30>)
 800824c:	3b01      	subs	r3, #1
 800824e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008250:	2307      	movs	r3, #7
 8008252:	6013      	str	r3, [r2, #0]
}
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	e000e010 	.word	0xe000e010
 800825c:	e000e018 	.word	0xe000e018
 8008260:	20000000 	.word	0x20000000
 8008264:	e000e014 	.word	0xe000e014

08008268 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008268:	4b2c      	ldr	r3, [pc, #176]	; (800831c <xPortStartScheduler+0xb4>)
{
 800826a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800826c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008274:	22ff      	movs	r2, #255	; 0xff
 8008276:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008278:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800827a:	4a29      	ldr	r2, [pc, #164]	; (8008320 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008282:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008286:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800828a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800828c:	2207      	movs	r2, #7
 800828e:	4b25      	ldr	r3, [pc, #148]	; (8008324 <xPortStartScheduler+0xbc>)
 8008290:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008292:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008296:	1e54      	subs	r4, r2, #1
 8008298:	0600      	lsls	r0, r0, #24
 800829a:	d40f      	bmi.n	80082bc <xPortStartScheduler+0x54>
 800829c:	b101      	cbz	r1, 80082a0 <xPortStartScheduler+0x38>
 800829e:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	2a03      	cmp	r2, #3
 80082a4:	d013      	beq.n	80082ce <xPortStartScheduler+0x66>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	b672      	cpsid	i
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	b662      	cpsie	i
 80082ba:	e7fe      	b.n	80082ba <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80082c0:	2101      	movs	r1, #1
 80082c2:	0052      	lsls	r2, r2, #1
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	f88d 2003 	strb.w	r2, [sp, #3]
 80082ca:	4622      	mov	r2, r4
 80082cc:	e7e1      	b.n	8008292 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082ce:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 80082d0:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80082d6:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	4a10      	ldr	r2, [pc, #64]	; (800831c <xPortStartScheduler+0xb4>)
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <xPortStartScheduler+0xc0>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80082e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80082f0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80082f2:	f7ff ff9f 	bl	8008234 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <xPortStartScheduler+0xc4>)
 80082f8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80082fa:	f7ff fedf 	bl	80080bc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082fe:	4a0c      	ldr	r2, [pc, #48]	; (8008330 <xPortStartScheduler+0xc8>)
 8008300:	6813      	ldr	r3, [r2, #0]
 8008302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008306:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8008308:	f7ff fec4 	bl	8008094 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800830c:	f7ff fa88 	bl	8007820 <vTaskSwitchContext>
	prvTaskExitError();
 8008310:	f7ff fe9c 	bl	800804c <prvTaskExitError>
}
 8008314:	4620      	mov	r0, r4
 8008316:	b002      	add	sp, #8
 8008318:	bd10      	pop	{r4, pc}
 800831a:	bf00      	nop
 800831c:	e000e400 	.word	0xe000e400
 8008320:	20002bd4 	.word	0x20002bd4
 8008324:	20002bd8 	.word	0x20002bd8
 8008328:	e000ed20 	.word	0xe000ed20
 800832c:	200015e8 	.word	0x200015e8
 8008330:	e000ef34 	.word	0xe000ef34

08008334 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008334:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008338:	2b0f      	cmp	r3, #15
 800833a:	d910      	bls.n	800835e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800833c:	4a12      	ldr	r2, [pc, #72]	; (8008388 <vPortValidateInterruptPriority+0x54>)
 800833e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008340:	4a12      	ldr	r2, [pc, #72]	; (800838c <vPortValidateInterruptPriority+0x58>)
 8008342:	7812      	ldrb	r2, [r2, #0]
 8008344:	429a      	cmp	r2, r3
 8008346:	d90a      	bls.n	800835e <vPortValidateInterruptPriority+0x2a>
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	b672      	cpsid	i
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	b662      	cpsie	i
 800835c:	e7fe      	b.n	800835c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800835e:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <vPortValidateInterruptPriority+0x5c>)
 8008360:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <vPortValidateInterruptPriority+0x60>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6812      	ldr	r2, [r2, #0]
 8008366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800836a:	4293      	cmp	r3, r2
 800836c:	d90a      	bls.n	8008384 <vPortValidateInterruptPriority+0x50>
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	b672      	cpsid	i
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	b662      	cpsie	i
 8008382:	e7fe      	b.n	8008382 <vPortValidateInterruptPriority+0x4e>
	}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	e000e3f0 	.word	0xe000e3f0
 800838c:	20002bd4 	.word	0x20002bd4
 8008390:	e000ed0c 	.word	0xe000ed0c
 8008394:	20002bd8 	.word	0x20002bd8

08008398 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <prvInsertBlockIntoFreeList+0x40>)
{
 800839a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4282      	cmp	r2, r0
 80083a0:	d318      	bcc.n	80083d4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083a2:	685c      	ldr	r4, [r3, #4]
 80083a4:	1919      	adds	r1, r3, r4
 80083a6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083a8:	bf01      	itttt	eq
 80083aa:	6841      	ldreq	r1, [r0, #4]
 80083ac:	4618      	moveq	r0, r3
 80083ae:	1909      	addeq	r1, r1, r4
 80083b0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083b2:	6844      	ldr	r4, [r0, #4]
 80083b4:	1901      	adds	r1, r0, r4
 80083b6:	428a      	cmp	r2, r1
 80083b8:	d107      	bne.n	80083ca <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ba:	4908      	ldr	r1, [pc, #32]	; (80083dc <prvInsertBlockIntoFreeList+0x44>)
 80083bc:	6809      	ldr	r1, [r1, #0]
 80083be:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083c0:	bf1f      	itttt	ne
 80083c2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083c4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083c6:	1909      	addne	r1, r1, r4
 80083c8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083ca:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083cc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083ce:	bf18      	it	ne
 80083d0:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083d2:	bd10      	pop	{r4, pc}
 80083d4:	4613      	mov	r3, r2
 80083d6:	e7e1      	b.n	800839c <prvInsertBlockIntoFreeList+0x4>
 80083d8:	200067ec 	.word	0x200067ec
 80083dc:	20002bdc 	.word	0x20002bdc

080083e0 <pvPortMalloc>:
{
 80083e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80083e6:	f7ff f8df 	bl	80075a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80083ea:	493f      	ldr	r1, [pc, #252]	; (80084e8 <pvPortMalloc+0x108>)
 80083ec:	4d3f      	ldr	r5, [pc, #252]	; (80084ec <pvPortMalloc+0x10c>)
 80083ee:	680b      	ldr	r3, [r1, #0]
 80083f0:	bb03      	cbnz	r3, 8008434 <pvPortMalloc+0x54>
	uxAddress = ( size_t ) ucHeap;
 80083f2:	4a3f      	ldr	r2, [pc, #252]	; (80084f0 <pvPortMalloc+0x110>)
	xStart.xBlockSize = ( size_t ) 0;
 80083f4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083f6:	0756      	lsls	r6, r2, #29
 80083f8:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083fc:	4e3d      	ldr	r6, [pc, #244]	; (80084f4 <pvPortMalloc+0x114>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083fe:	bf14      	ite	ne
 8008400:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008402:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.xBlockSize = ( size_t ) 0;
 8008406:	6070      	str	r0, [r6, #4]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008408:	bf1c      	itt	ne
 800840a:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800840e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008410:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008412:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008414:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008416:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800841a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800841e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8008420:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008422:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008426:	4b34      	ldr	r3, [pc, #208]	; (80084f8 <pvPortMalloc+0x118>)
 8008428:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800842a:	4b34      	ldr	r3, [pc, #208]	; (80084fc <pvPortMalloc+0x11c>)
 800842c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800842e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008432:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008434:	682f      	ldr	r7, [r5, #0]
 8008436:	4227      	tst	r7, r4
 8008438:	d151      	bne.n	80084de <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 800843a:	2c00      	cmp	r4, #0
 800843c:	d040      	beq.n	80084c0 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 800843e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008442:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008444:	bf1c      	itt	ne
 8008446:	f023 0307 	bicne.w	r3, r3, #7
 800844a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800844c:	2b00      	cmp	r3, #0
 800844e:	d046      	beq.n	80084de <pvPortMalloc+0xfe>
 8008450:	4a2a      	ldr	r2, [pc, #168]	; (80084fc <pvPortMalloc+0x11c>)
 8008452:	6816      	ldr	r6, [r2, #0]
 8008454:	4690      	mov	r8, r2
 8008456:	429e      	cmp	r6, r3
 8008458:	d341      	bcc.n	80084de <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 800845a:	4a26      	ldr	r2, [pc, #152]	; (80084f4 <pvPortMalloc+0x114>)
 800845c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800845e:	6868      	ldr	r0, [r5, #4]
 8008460:	4298      	cmp	r0, r3
 8008462:	d201      	bcs.n	8008468 <pvPortMalloc+0x88>
 8008464:	682c      	ldr	r4, [r5, #0]
 8008466:	b9b4      	cbnz	r4, 8008496 <pvPortMalloc+0xb6>
				if( pxBlock != pxEnd )
 8008468:	6809      	ldr	r1, [r1, #0]
 800846a:	42a9      	cmp	r1, r5
 800846c:	d037      	beq.n	80084de <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800846e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008470:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008472:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008474:	1ac2      	subs	r2, r0, r3
 8008476:	2a10      	cmp	r2, #16
 8008478:	d914      	bls.n	80084a4 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800847a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800847c:	0741      	lsls	r1, r0, #29
 800847e:	d00d      	beq.n	800849c <pvPortMalloc+0xbc>
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	b672      	cpsid	i
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	b662      	cpsie	i
 8008494:	e7fe      	b.n	8008494 <pvPortMalloc+0xb4>
 8008496:	462a      	mov	r2, r5
 8008498:	4625      	mov	r5, r4
 800849a:	e7e0      	b.n	800845e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800849c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800849e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084a0:	f7ff ff7a 	bl	8008398 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084a4:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084a6:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084a8:	4913      	ldr	r1, [pc, #76]	; (80084f8 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084aa:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ac:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084ae:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80084b0:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084b2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084b6:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084b8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084ba:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084bc:	bf38      	it	cc
 80084be:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80084c0:	f7ff f912 	bl	80076e8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c4:	0763      	lsls	r3, r4, #29
 80084c6:	d00c      	beq.n	80084e2 <pvPortMalloc+0x102>
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	b672      	cpsid	i
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	b662      	cpsie	i
 80084dc:	e7fe      	b.n	80084dc <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 80084de:	2400      	movs	r4, #0
 80084e0:	e7ee      	b.n	80084c0 <pvPortMalloc+0xe0>
}
 80084e2:	4620      	mov	r0, r4
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	20002bdc 	.word	0x20002bdc
 80084ec:	200067e0 	.word	0x200067e0
 80084f0:	20002be0 	.word	0x20002be0
 80084f4:	200067ec 	.word	0x200067ec
 80084f8:	200067e8 	.word	0x200067e8
 80084fc:	200067e4 	.word	0x200067e4

08008500 <vPortFree>:
{
 8008500:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008502:	4604      	mov	r4, r0
 8008504:	2800      	cmp	r0, #0
 8008506:	d032      	beq.n	800856e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008508:	4a19      	ldr	r2, [pc, #100]	; (8008570 <vPortFree+0x70>)
 800850a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	4213      	tst	r3, r2
 8008512:	d10a      	bne.n	800852a <vPortFree+0x2a>
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	b672      	cpsid	i
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	b662      	cpsie	i
 8008528:	e7fe      	b.n	8008528 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800852a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800852e:	b151      	cbz	r1, 8008546 <vPortFree+0x46>
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	b672      	cpsid	i
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	b662      	cpsie	i
 8008544:	e7fe      	b.n	8008544 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008546:	ea23 0302 	bic.w	r3, r3, r2
 800854a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800854e:	f7ff f82b 	bl	80075a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008552:	4a08      	ldr	r2, [pc, #32]	; (8008574 <vPortFree+0x74>)
 8008554:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008558:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800855c:	6811      	ldr	r1, [r2, #0]
 800855e:	440b      	add	r3, r1
 8008560:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008562:	f7ff ff19 	bl	8008398 <prvInsertBlockIntoFreeList>
}
 8008566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800856a:	f7ff b8bd 	b.w	80076e8 <xTaskResumeAll>
}
 800856e:	bd10      	pop	{r4, pc}
 8008570:	200067e0 	.word	0x200067e0
 8008574:	200067e4 	.word	0x200067e4

08008578 <font_setCR>:
static unsigned char minDigitWd;
static unsigned char dualChar;

void font_setScale2(unsigned char _sx, unsigned char _sy) { sx = _sx; sy = _sy; }
void font_setScale1(unsigned char s) { sx = sy = s; }
void font_setCR(unsigned char _cr) { cr = _cr; }
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	71fb      	strb	r3, [r7, #7]
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	4a03      	ldr	r2, [pc, #12]	; (8008594 <font_setCR+0x1c>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	20006820 	.word	0x20006820

08008598 <font_getHeight>:
void font_setSpacingY(unsigned char sp) { spacingY = sp; }
void font_setFontMinWd(unsigned char wd) { minCharWd = wd; }
void font_setCharMinWd(unsigned char wd) { minCharWd = wd; }
void font_setDigitMinWd(unsigned char wd) { minDigitWd = wd; }
int font_getWidth() { return rFont ? rFont->wd : 0; }
int font_getHeight() { return rFont ? rFont->ht : 0; }
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
 800859c:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <font_getHeight+0x20>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <font_getHeight+0x14>
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <font_getHeight+0x20>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	789b      	ldrb	r3, [r3, #2]
 80085aa:	e000      	b.n	80085ae <font_getHeight+0x16>
 80085ac:	2300      	movs	r3, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	200067fc 	.word	0x200067fc

080085bc <font_init>:
void font_setFillRectFun(void (*fun)(int x, int y, int w, int h, int c)) { fillRectFun=fun; }

// ----------------------------------------------------------------
// fillRect function callback and screen width and height is necessary to initialize the library
void font_init(void (*rectFun)(int x, int y, int w, int h, int c), int swd, int sht)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  fillRectFun = rectFun;
 80085c8:	4a14      	ldr	r2, [pc, #80]	; (800861c <font_init+0x60>)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6013      	str	r3, [r2, #0]
  scrWd = swd;
 80085ce:	4a14      	ldr	r2, [pc, #80]	; (8008620 <font_init+0x64>)
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	6013      	str	r3, [r2, #0]
  scrHt = sht;
 80085d4:	4a13      	ldr	r2, [pc, #76]	; (8008624 <font_init+0x68>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6013      	str	r3, [r2, #0]
  cr = bold = dualChar = 0;
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <font_init+0x6c>)
 80085dc:	2200      	movs	r2, #0
 80085de:	701a      	strb	r2, [r3, #0]
 80085e0:	4b12      	ldr	r3, [pc, #72]	; (800862c <font_init+0x70>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	4b11      	ldr	r3, [pc, #68]	; (800862c <font_init+0x70>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a11      	ldr	r2, [pc, #68]	; (8008630 <font_init+0x74>)
 80085ec:	6013      	str	r3, [r2, #0]
  isNumberFun = &font_isNumber;
 80085ee:	4b11      	ldr	r3, [pc, #68]	; (8008634 <font_init+0x78>)
 80085f0:	4a11      	ldr	r2, [pc, #68]	; (8008638 <font_init+0x7c>)
 80085f2:	601a      	str	r2, [r3, #0]
  sx = sy = 1;
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <font_init+0x80>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	4b10      	ldr	r3, [pc, #64]	; (800863c <font_init+0x80>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a10      	ldr	r2, [pc, #64]	; (8008640 <font_init+0x84>)
 8008600:	6013      	str	r3, [r2, #0]
  fg = bg = 1;
 8008602:	4b10      	ldr	r3, [pc, #64]	; (8008644 <font_init+0x88>)
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <font_init+0x88>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a0e      	ldr	r2, [pc, #56]	; (8008648 <font_init+0x8c>)
 800860e:	6013      	str	r3, [r2, #0]
}
 8008610:	bf00      	nop
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	200067f8 	.word	0x200067f8
 8008620:	20006810 	.word	0x20006810
 8008624:	20006814 	.word	0x20006814
 8008628:	20006826 	.word	0x20006826
 800862c:	2000681c 	.word	0x2000681c
 8008630:	20006820 	.word	0x20006820
 8008634:	200067f4 	.word	0x200067f4
 8008638:	08009bb1 	.word	0x08009bb1
 800863c:	200015f4 	.word	0x200015f4
 8008640:	200015f0 	.word	0x200015f0
 8008644:	200015fc 	.word	0x200015fc
 8008648:	200015f8 	.word	0x200015f8

0800864c <font_setFont>:

// ---------------------------------
void font_setFont(RRE_Font *f)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  rFont = f;
 8008654:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <font_setFont+0x34>)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6013      	str	r3, [r2, #0]
  minCharWd = minDigitWd = 0;
 800865a:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <font_setFont+0x38>)
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	4b08      	ldr	r3, [pc, #32]	; (8008684 <font_setFont+0x38>)
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	4b08      	ldr	r3, [pc, #32]	; (8008688 <font_setFont+0x3c>)
 8008666:	701a      	strb	r2, [r3, #0]
  spacing = 1;
 8008668:	4b08      	ldr	r3, [pc, #32]	; (800868c <font_setFont+0x40>)
 800866a:	2201      	movs	r2, #1
 800866c:	601a      	str	r2, [r3, #0]
  spacingY = 0;
 800866e:	4b08      	ldr	r3, [pc, #32]	; (8008690 <font_setFont+0x44>)
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	200067fc 	.word	0x200067fc
 8008684:	20006825 	.word	0x20006825
 8008688:	20006824 	.word	0x20006824
 800868c:	200015ec 	.word	0x200015ec
 8008690:	20006818 	.word	0x20006818

08008694 <font_charWidthOptim>:
  return xmax-xmin;
}

// ----------------------------------------------------------------
int font_charWidthOptim(unsigned char c, int *_xmin)
{
 8008694:	b480      	push	{r7}
 8008696:	b08f      	sub	sp, #60	; 0x3c
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
  if(c<rFont->firstCh || c>rFont->lastCh) return c==' '? rFont->wd/2 : 0;
 80086a0:	4b7e      	ldr	r3, [pc, #504]	; (800889c <font_charWidthOptim+0x208>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	79fa      	ldrb	r2, [r7, #7]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d305      	bcc.n	80086b8 <font_charWidthOptim+0x24>
 80086ac:	4b7b      	ldr	r3, [pc, #492]	; (800889c <font_charWidthOptim+0x208>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	79fa      	ldrb	r2, [r7, #7]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d90a      	bls.n	80086ce <font_charWidthOptim+0x3a>
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d105      	bne.n	80086ca <font_charWidthOptim+0x36>
 80086be:	4b77      	ldr	r3, [pc, #476]	; (800889c <font_charWidthOptim+0x208>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	e0e2      	b.n	8008890 <font_charWidthOptim+0x1fc>
 80086ca:	2300      	movs	r3, #0
 80086cc:	e0e0      	b.n	8008890 <font_charWidthOptim+0x1fc>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 80086ce:	4b73      	ldr	r3, [pc, #460]	; (800889c <font_charWidthOptim+0x208>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	4971      	ldr	r1, [pc, #452]	; (800889c <font_charWidthOptim+0x208>)
 80086d8:	6809      	ldr	r1, [r1, #0]
 80086da:	78c9      	ldrb	r1, [r1, #3]
 80086dc:	1a5b      	subs	r3, r3, r1
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	867b      	strh	r3, [r7, #50]	; 0x32
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 80086e6:	4b6d      	ldr	r3, [pc, #436]	; (800889c <font_charWidthOptim+0x208>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	496b      	ldr	r1, [pc, #428]	; (800889c <font_charWidthOptim+0x208>)
 80086f0:	6809      	ldr	r1, [r1, #0]
 80086f2:	78c9      	ldrb	r1, [r1, #3]
 80086f4:	1a5b      	subs	r3, r3, r1
 80086f6:	3301      	adds	r3, #1
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	4413      	add	r3, r2
 80086fc:	881a      	ldrh	r2, [r3, #0]
 80086fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	863b      	strh	r3, [r7, #48]	; 0x30
  if(!recNum) return rFont->wd/2;
 8008704:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008706:	2b00      	cmp	r3, #0
 8008708:	d105      	bne.n	8008716 <font_charWidthOptim+0x82>
 800870a:	4b64      	ldr	r3, [pc, #400]	; (800889c <font_charWidthOptim+0x208>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	785b      	ldrb	r3, [r3, #1]
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	e0bc      	b.n	8008890 <font_charWidthOptim+0x1fc>
  if(_xmin) *_xmin=0;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <font_charWidthOptim+0x8e>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
  int chWd = rFont->wd;
 8008722:	4b5e      	ldr	r3, [pc, #376]	; (800889c <font_charWidthOptim+0x208>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
  switch(rFont->type & 7) {
 800872a:	4b5c      	ldr	r3, [pc, #368]	; (800889c <font_charWidthOptim+0x208>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	f003 0307 	and.w	r3, r3, #7
 8008734:	2b06      	cmp	r3, #6
 8008736:	f200 80a9 	bhi.w	800888c <font_charWidthOptim+0x1f8>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <font_charWidthOptim+0xac>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	0800875d 	.word	0x0800875d
 8008744:	080087e7 	.word	0x080087e7
 8008748:	0800880d 	.word	0x0800880d
 800874c:	0800878d 	.word	0x0800878d
 8008750:	0800883f 	.word	0x0800883f
 8008754:	08008861 	.word	0x08008861
 8008758:	080087bf 	.word	0x080087bf
#if ENABLE_RRE_16B==1
    case RRE_16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 800875c:	4b4f      	ldr	r3, [pc, #316]	; (800889c <font_charWidthOptim+0x208>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	60fb      	str	r3, [r7, #12]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008764:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008766:	1e5a      	subs	r2, r3, #1
 8008768:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800876a:	4413      	add	r3, r2
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	4413      	add	r3, r2
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	817b      	strh	r3, [r7, #10]
      chWd = (v & 0x000f)+1+((v & 0x0f00)>>8);
 8008776:	897b      	ldrh	r3, [r7, #10]
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	897b      	ldrh	r3, [r7, #10]
 8008780:	121b      	asrs	r3, r3, #8
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	4413      	add	r3, r2
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800878a:	e080      	b.n	800888e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 800878c:	4b43      	ldr	r3, [pc, #268]	; (800889c <font_charWidthOptim+0x208>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6899      	ldr	r1, [r3, #8]
 8008792:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008794:	1e5a      	subs	r2, r3, #1
 8008796:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008798:	441a      	add	r2, r3
 800879a:	4613      	mov	r3, r2
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	4413      	add	r3, r2
 80087a0:	440b      	add	r3, r1
 80087a2:	623b      	str	r3, [r7, #32]
      chWd = ((rects[0]) & 0x3f)+((rects[2]) & 0x3f)+1;
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	3302      	adds	r3, #2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087b6:	4413      	add	r3, r2
 80087b8:	3301      	adds	r3, #1
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 80087bc:	e067      	b.n	800888e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*4;
 80087be:	4b37      	ldr	r3, [pc, #220]	; (800889c <font_charWidthOptim+0x208>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80087c6:	1e51      	subs	r1, r2, #1
 80087c8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80087ca:	440a      	add	r2, r1
 80087cc:	0092      	lsls	r2, r2, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      chWd = (rects[0])+(rects[2])+1;
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	3302      	adds	r3, #2
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	4413      	add	r3, r2
 80087e0:	3301      	adds	r3, #1
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 80087e4:	e053      	b.n	800888e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 80087e6:	4b2d      	ldr	r3, [pc, #180]	; (800889c <font_charWidthOptim+0x208>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	617b      	str	r3, [r7, #20]
      unsigned short v = (rects[recNum-1+recIdx]);
 80087ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80087f0:	1e5a      	subs	r2, r3, #1
 80087f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80087f4:	4413      	add	r3, r2
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	4413      	add	r3, r2
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	827b      	strh	r3, [r7, #18]
      chWd = (v & 0x3f)+1;
 8008800:	8a7b      	ldrh	r3, [r7, #18]
 8008802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008806:	3301      	adds	r3, #1
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800880a:	e040      	b.n	800888e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B: {
      unsigned short *rects = (unsigned short*)rFont->rects;
 800880c:	4b23      	ldr	r3, [pc, #140]	; (800889c <font_charWidthOptim+0x208>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	61fb      	str	r3, [r7, #28]
      unsigned short v = (rects[recNum-1+recIdx]);
 8008814:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800881a:	4413      	add	r3, r2
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	837b      	strh	r3, [r7, #26]
      chWd = (v & 0x1f)+((v>>11) & 0x1f)+1;
 8008826:	8b7b      	ldrh	r3, [r7, #26]
 8008828:	f003 021f 	and.w	r2, r3, #31
 800882c:	8b7b      	ldrh	r3, [r7, #26]
 800882e:	0adb      	lsrs	r3, r3, #11
 8008830:	b29b      	uxth	r3, r3
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	4413      	add	r3, r2
 8008838:	3301      	adds	r3, #1
 800883a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800883c:	e027      	b.n	800888e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 800883e:	4b17      	ldr	r3, [pc, #92]	; (800889c <font_charWidthOptim+0x208>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6899      	ldr	r1, [r3, #8]
 8008844:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008846:	1e5a      	subs	r2, r3, #1
 8008848:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800884a:	441a      	add	r2, r3
 800884c:	4613      	mov	r3, r2
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	4413      	add	r3, r2
 8008852:	440b      	add	r3, r1
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
      chWd = (rects[0])+1;
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800885e:	e016      	b.n	800888e <font_charWidthOptim+0x1fa>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B: {
      unsigned char *rects = (unsigned char*)rFont->rects + (recNum-1+recIdx)*3;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <font_charWidthOptim+0x208>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6899      	ldr	r1, [r3, #8]
 8008866:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008868:	1e5a      	subs	r2, r3, #1
 800886a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800886c:	441a      	add	r2, r3
 800886e:	4613      	mov	r3, r2
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	4413      	add	r3, r2
 8008874:	440b      	add	r3, r1
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
      chWd = (rects[0])+(rects[2])+1;
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	3302      	adds	r3, #2
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4413      	add	r3, r2
 8008886:	3301      	adds	r3, #1
 8008888:	637b      	str	r3, [r7, #52]	; 0x34
      }
      break;
 800888a:	e000      	b.n	800888e <font_charWidthOptim+0x1fa>
#endif
    default: break;
 800888c:	bf00      	nop
  }
  return chWd;
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008890:	4618      	mov	r0, r3
 8008892:	373c      	adds	r7, #60	; 0x3c
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	200067fc 	.word	0x200067fc

080088a0 <font_charWidth>:

// ----------------------------------------------------------------
int font_charWidth(unsigned char c)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
  c = convertPolish(c);
#endif
#if ENABLE_NOSORT==1
  int wd = (rFont->type & RRE_NO_SORT) ? charWidthNoSort(c,_xmin) : charWidthOptim(c,_xmin);
#else
  int wd = font_charWidthOptim(c, 0);
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	2100      	movs	r1, #0
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff fef0 	bl	8008694 <font_charWidthOptim>
 80088b4:	60f8      	str	r0, [r7, #12]
#endif
  int wdL = 0, wdR = spacing; // default spacing before and behind char
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <font_charWidth+0xc4>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	613b      	str	r3, [r7, #16]
  if((*isNumberFun)(c) && minDigitWd>0) {
 80088c0:	4b29      	ldr	r3, [pc, #164]	; (8008968 <font_charWidth+0xc8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	79fa      	ldrb	r2, [r7, #7]
 80088c6:	4610      	mov	r0, r2
 80088c8:	4798      	blx	r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01e      	beq.n	800890e <font_charWidth+0x6e>
 80088d0:	4b26      	ldr	r3, [pc, #152]	; (800896c <font_charWidth+0xcc>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01a      	beq.n	800890e <font_charWidth+0x6e>
    if(minDigitWd>wd) {
 80088d8:	4b24      	ldr	r3, [pc, #144]	; (800896c <font_charWidth+0xcc>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4293      	cmp	r3, r2
 80088e2:	da2e      	bge.n	8008942 <font_charWidth+0xa2>
      wdL = (minDigitWd-wd)/2;
 80088e4:	4b21      	ldr	r3, [pc, #132]	; (800896c <font_charWidth+0xcc>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da00      	bge.n	80088f4 <font_charWidth+0x54>
 80088f2:	3301      	adds	r3, #1
 80088f4:	105b      	asrs	r3, r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
      wdR += (minDigitWd-wd-wdL);
 80088f8:	4b1c      	ldr	r3, [pc, #112]	; (800896c <font_charWidth+0xcc>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad2      	subs	r2, r2, r3
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4413      	add	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
    if(minDigitWd>wd) {
 800890c:	e019      	b.n	8008942 <font_charWidth+0xa2>
    }
  } else if(minCharWd>wd) {
 800890e:	4b18      	ldr	r3, [pc, #96]	; (8008970 <font_charWidth+0xd0>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4293      	cmp	r3, r2
 8008918:	da13      	bge.n	8008942 <font_charWidth+0xa2>
    wdL = (minCharWd-wd)/2;
 800891a:	4b15      	ldr	r3, [pc, #84]	; (8008970 <font_charWidth+0xd0>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	da00      	bge.n	800892a <font_charWidth+0x8a>
 8008928:	3301      	adds	r3, #1
 800892a:	105b      	asrs	r3, r3, #1
 800892c:	617b      	str	r3, [r7, #20]
    wdR += (minCharWd-wd-wdL);
 800892e:	4b10      	ldr	r3, [pc, #64]	; (8008970 <font_charWidth+0xd0>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4413      	add	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
  }
  return (wd+wdL+wdR+bold)*sx;
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	441a      	add	r2, r3
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	441a      	add	r2, r3
 800894c:	4b09      	ldr	r3, [pc, #36]	; (8008974 <font_charWidth+0xd4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4413      	add	r3, r2
 8008952:	4a09      	ldr	r2, [pc, #36]	; (8008978 <font_charWidth+0xd8>)
 8008954:	6812      	ldr	r2, [r2, #0]
 8008956:	fb02 f303 	mul.w	r3, r2, r3
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200015ec 	.word	0x200015ec
 8008968:	200067f4 	.word	0x200067f4
 800896c:	20006825 	.word	0x20006825
 8008970:	20006824 	.word	0x20006824
 8008974:	2000681c 	.word	0x2000681c
 8008978:	200015f0 	.word	0x200015f0

0800897c <font_drawChar>:

// ----------------------------------------------------------------
int font_drawChar(int x, int y, unsigned char c)
{
 800897c:	b5b0      	push	{r4, r5, r7, lr}
 800897e:	b0ac      	sub	sp, #176	; 0xb0
 8008980:	af02      	add	r7, sp, #8
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	71fb      	strb	r3, [r7, #7]
#if CONVERT_PL_CHARS==1
  c = convertPolish(c);
#endif
  if(x>=scrWd || y>=scrHt || x+rFont->wd*sx-1<0 || y+rFont->ht*sy-1<0) return 0;
 800898a:	4bac      	ldr	r3, [pc, #688]	; (8008c3c <font_drawChar+0x2c0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	429a      	cmp	r2, r3
 8008992:	da1e      	bge.n	80089d2 <font_drawChar+0x56>
 8008994:	4baa      	ldr	r3, [pc, #680]	; (8008c40 <font_drawChar+0x2c4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	429a      	cmp	r2, r3
 800899c:	da19      	bge.n	80089d2 <font_drawChar+0x56>
 800899e:	4ba9      	ldr	r3, [pc, #676]	; (8008c44 <font_drawChar+0x2c8>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	785b      	ldrb	r3, [r3, #1]
 80089a4:	461a      	mov	r2, r3
 80089a6:	4ba8      	ldr	r3, [pc, #672]	; (8008c48 <font_drawChar+0x2cc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	fb03 f202 	mul.w	r2, r3, r2
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	db0c      	blt.n	80089d2 <font_drawChar+0x56>
 80089b8:	4ba2      	ldr	r3, [pc, #648]	; (8008c44 <font_drawChar+0x2c8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	461a      	mov	r2, r3
 80089c0:	4ba2      	ldr	r3, [pc, #648]	; (8008c4c <font_drawChar+0x2d0>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	fb03 f202 	mul.w	r2, r3, r2
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4413      	add	r3, r2
 80089cc:	3b01      	subs	r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da02      	bge.n	80089d8 <font_drawChar+0x5c>
 80089d2:	2300      	movs	r3, #0
 80089d4:	f001 b828 	b.w	8009a28 <font_drawChar+0x10ac>
  if(c<rFont->firstCh || c>rFont->lastCh) return font_charWidth(c);
 80089d8:	4b9a      	ldr	r3, [pc, #616]	; (8008c44 <font_drawChar+0x2c8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	78db      	ldrb	r3, [r3, #3]
 80089de:	79fa      	ldrb	r2, [r7, #7]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d305      	bcc.n	80089f0 <font_drawChar+0x74>
 80089e4:	4b97      	ldr	r3, [pc, #604]	; (8008c44 <font_drawChar+0x2c8>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	791b      	ldrb	r3, [r3, #4]
 80089ea:	79fa      	ldrb	r2, [r7, #7]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d906      	bls.n	80089fe <font_drawChar+0x82>
 80089f0:	79fb      	ldrb	r3, [r7, #7]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff ff54 	bl	80088a0 <font_charWidth>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f001 b815 	b.w	8009a28 <font_drawChar+0x10ac>
  unsigned short recIdx = ((rFont->offs[c-rFont->firstCh]));
 80089fe:	4b91      	ldr	r3, [pc, #580]	; (8008c44 <font_drawChar+0x2c8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68da      	ldr	r2, [r3, #12]
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	498f      	ldr	r1, [pc, #572]	; (8008c44 <font_drawChar+0x2c8>)
 8008a08:	6809      	ldr	r1, [r1, #0]
 8008a0a:	78c9      	ldrb	r1, [r1, #3]
 8008a0c:	1a5b      	subs	r3, r3, r1
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	4413      	add	r3, r2
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  unsigned short recNum = ((rFont->offs[c-rFont->firstCh+1]))-recIdx;
 8008a18:	4b8a      	ldr	r3, [pc, #552]	; (8008c44 <font_drawChar+0x2c8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	4988      	ldr	r1, [pc, #544]	; (8008c44 <font_drawChar+0x2c8>)
 8008a22:	6809      	ldr	r1, [r1, #0]
 8008a24:	78c9      	ldrb	r1, [r1, #3]
 8008a26:	1a5b      	subs	r3, r3, r1
 8008a28:	3301      	adds	r3, #1
 8008a2a:	005b      	lsls	r3, r3, #1
 8008a2c:	4413      	add	r3, r2
 8008a2e:	881a      	ldrh	r2, [r3, #0]
 8008a30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if ENABLE_NOSORT==1
  int xmin, chWd = (rFont->type & RRE_NO_SORT) ? font_charWidthNoSort(c,&xmin) : font_charWidthOptim(c,&xmin);
#else
  int xmin, chWd = font_charWidthOptim(c,&xmin);
 8008a3a:	f107 0210 	add.w	r2, r7, #16
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	4611      	mov	r1, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff fe26 	bl	8008694 <font_charWidthOptim>
 8008a48:	65b8      	str	r0, [r7, #88]	; 0x58
#endif
  int wd=chWd, wdL = 0, wdR = spacing;
 8008a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a50:	2300      	movs	r3, #0
 8008a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a56:	4b7e      	ldr	r3, [pc, #504]	; (8008c50 <font_drawChar+0x2d4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if((*isNumberFun)(c) && minDigitWd>0) {
 8008a5e:	4b7d      	ldr	r3, [pc, #500]	; (8008c54 <font_drawChar+0x2d8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	79fa      	ldrb	r2, [r7, #7]
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d025      	beq.n	8008aba <font_drawChar+0x13e>
 8008a6e:	4b7a      	ldr	r3, [pc, #488]	; (8008c58 <font_drawChar+0x2dc>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d021      	beq.n	8008aba <font_drawChar+0x13e>
    if(minDigitWd>wd) {
 8008a76:	4b78      	ldr	r3, [pc, #480]	; (8008c58 <font_drawChar+0x2dc>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a80:	4293      	cmp	r3, r2
 8008a82:	da3b      	bge.n	8008afc <font_drawChar+0x180>
      wdL = (minDigitWd-wd)/2;
 8008a84:	4b74      	ldr	r3, [pc, #464]	; (8008c58 <font_drawChar+0x2dc>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	da00      	bge.n	8008a96 <font_drawChar+0x11a>
 8008a94:	3301      	adds	r3, #1
 8008a96:	105b      	asrs	r3, r3, #1
 8008a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      wdR += (minDigitWd-wd-wdL);
 8008a9c:	4b6e      	ldr	r3, [pc, #440]	; (8008c58 <font_drawChar+0x2dc>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aa6:	1ad2      	subs	r2, r2, r3
 8008aa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(minDigitWd>wd) {
 8008ab8:	e020      	b.n	8008afc <font_drawChar+0x180>
    }
  } else if(minCharWd>wd) {
 8008aba:	4b68      	ldr	r3, [pc, #416]	; (8008c5c <font_drawChar+0x2e0>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	da19      	bge.n	8008afc <font_drawChar+0x180>
    wdL = (minCharWd-wd)/2;
 8008ac8:	4b64      	ldr	r3, [pc, #400]	; (8008c5c <font_drawChar+0x2e0>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da00      	bge.n	8008ada <font_drawChar+0x15e>
 8008ad8:	3301      	adds	r3, #1
 8008ada:	105b      	asrs	r3, r3, #1
 8008adc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    wdR += (minCharWd-wd-wdL);
 8008ae0:	4b5e      	ldr	r3, [pc, #376]	; (8008c5c <font_drawChar+0x2e0>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008af6:	4413      	add	r3, r2
 8008af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  if(x+wd+wdL+wdR>scrWd) wdR = max(scrWd-x-wdL-wd, 0);
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b02:	441a      	add	r2, r3
 8008b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b08:	441a      	add	r2, r3
 8008b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b0e:	441a      	add	r2, r3
 8008b10:	4b4a      	ldr	r3, [pc, #296]	; (8008c3c <font_drawChar+0x2c0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	dd0d      	ble.n	8008b34 <font_drawChar+0x1b8>
 8008b18:	4b48      	ldr	r3, [pc, #288]	; (8008c3c <font_drawChar+0x2c0>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	1ad2      	subs	r2, r2, r3
 8008b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b24:	1ad2      	subs	r2, r2, r3
 8008b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if(x+wd+wdL+wdR>scrWd) wd  = max(scrWd-x-wdL, 0);
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b3a:	441a      	add	r2, r3
 8008b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b40:	441a      	add	r2, r3
 8008b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b46:	441a      	add	r2, r3
 8008b48:	4b3c      	ldr	r3, [pc, #240]	; (8008c3c <font_drawChar+0x2c0>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	dd0a      	ble.n	8008b66 <font_drawChar+0x1ea>
 8008b50:	4b3a      	ldr	r3, [pc, #232]	; (8008c3c <font_drawChar+0x2c0>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if(x+wd+wdL+wdR>scrWd) wdL = max(scrWd-x, 0);
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b6c:	441a      	add	r2, r3
 8008b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b72:	441a      	add	r2, r3
 8008b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b78:	441a      	add	r2, r3
 8008b7a:	4b30      	ldr	r3, [pc, #192]	; (8008c3c <font_drawChar+0x2c0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	dd07      	ble.n	8008b92 <font_drawChar+0x216>
 8008b82:	4b2e      	ldr	r3, [pc, #184]	; (8008c3c <font_drawChar+0x2c0>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  wd+=wdR+wdL;
 8008b92:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int type=rFont->type & 7;
 8008ba6:	4b27      	ldr	r3, [pc, #156]	; (8008c44 <font_drawChar+0x2c8>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	657b      	str	r3, [r7, #84]	; 0x54
  if(bg!=fg && (type==RRE_16B ||type==RRE_24B ||type==RRE_32B || !recNum)) (*fillRectFun)(x, y, (wd+bold)*sx, rFont->ht*sy, bg);
 8008bb2:	4b2b      	ldr	r3, [pc, #172]	; (8008c60 <font_drawChar+0x2e4>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b2b      	ldr	r3, [pc, #172]	; (8008c64 <font_drawChar+0x2e8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d026      	beq.n	8008c0c <font_drawChar+0x290>
 8008bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d009      	beq.n	8008bd8 <font_drawChar+0x25c>
 8008bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d006      	beq.n	8008bd8 <font_drawChar+0x25c>
 8008bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bcc:	2b06      	cmp	r3, #6
 8008bce:	d003      	beq.n	8008bd8 <font_drawChar+0x25c>
 8008bd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d119      	bne.n	8008c0c <font_drawChar+0x290>
 8008bd8:	4b23      	ldr	r3, [pc, #140]	; (8008c68 <font_drawChar+0x2ec>)
 8008bda:	681c      	ldr	r4, [r3, #0]
 8008bdc:	4b23      	ldr	r3, [pc, #140]	; (8008c6c <font_drawChar+0x2f0>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008be4:	4413      	add	r3, r2
 8008be6:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <font_drawChar+0x2cc>)
 8008be8:	6812      	ldr	r2, [r2, #0]
 8008bea:	fb02 f203 	mul.w	r2, r2, r3
 8008bee:	4b15      	ldr	r3, [pc, #84]	; (8008c44 <font_drawChar+0x2c8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	789b      	ldrb	r3, [r3, #2]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4b15      	ldr	r3, [pc, #84]	; (8008c4c <font_drawChar+0x2d0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	fb03 f101 	mul.w	r1, r3, r1
 8008bfe:	4b18      	ldr	r3, [pc, #96]	; (8008c60 <font_drawChar+0x2e4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	460b      	mov	r3, r1
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	47a0      	blx	r4
  x+=wdL*sx;
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <font_drawChar+0x2cc>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008c14:	fb02 f303 	mul.w	r3, r2, r3
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
  if(!recNum) return (wd+bold)*sx;
 8008c1e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d124      	bne.n	8008c70 <font_drawChar+0x2f4>
 8008c26:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <font_drawChar+0x2f0>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c2e:	4413      	add	r3, r2
 8008c30:	4a05      	ldr	r2, [pc, #20]	; (8008c48 <font_drawChar+0x2cc>)
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	fb02 f303 	mul.w	r3, r2, r3
 8008c38:	f000 bef6 	b.w	8009a28 <font_drawChar+0x10ac>
 8008c3c:	20006810 	.word	0x20006810
 8008c40:	20006814 	.word	0x20006814
 8008c44:	200067fc 	.word	0x200067fc
 8008c48:	200015f0 	.word	0x200015f0
 8008c4c:	200015f4 	.word	0x200015f4
 8008c50:	200015ec 	.word	0x200015ec
 8008c54:	200067f4 	.word	0x200067f4
 8008c58:	20006825 	.word	0x20006825
 8008c5c:	20006824 	.word	0x20006824
 8008c60:	200015fc 	.word	0x200015fc
 8008c64:	200015f8 	.word	0x200015f8
 8008c68:	200067f8 	.word	0x200067f8
 8008c6c:	2000681c 	.word	0x2000681c
  switch(type) {
 8008c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c72:	2b06      	cmp	r3, #6
 8008c74:	f200 86c8 	bhi.w	8009a08 <font_drawChar+0x108c>
 8008c78:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <font_drawChar+0x304>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	08008f21 	.word	0x08008f21
 8008c88:	08009259 	.word	0x08009259
 8008c8c:	08008d5d 	.word	0x08008d5d
 8008c90:	0800963d 	.word	0x0800963d
 8008c94:	08009933 	.word	0x08009933
 8008c98:	08008e41 	.word	0x08008e41
#if ENABLE_RRE_16B==1
    case RRE_16B:
      for(int i=0; i<recNum; i++) {
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ca2:	e053      	b.n	8008d4c <font_drawChar+0x3d0>
        unsigned short *rects = (unsigned short*)rFont->rects;
 8008ca4:	4b94      	ldr	r3, [pc, #592]	; (8008ef8 <font_drawChar+0x57c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	61bb      	str	r3, [r7, #24]
        unsigned short v = (rects[i+recIdx]);
 8008cac:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008cb4:	4413      	add	r3, r2
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4413      	add	r3, r2
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	82fb      	strh	r3, [r7, #22]
        xf = (v & 0x000f)-xmin;
 8008cc0:	8afb      	ldrh	r3, [r7, #22]
 8008cc2:	f003 020f 	and.w	r2, r3, #15
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	4a8c      	ldr	r2, [pc, #560]	; (8008efc <font_drawChar+0x580>)
 8008ccc:	6013      	str	r3, [r2, #0]
        yf = (v & 0x00f0)>>4;
 8008cce:	8afb      	ldrh	r3, [r7, #22]
 8008cd0:	111b      	asrs	r3, r3, #4
 8008cd2:	f003 030f 	and.w	r3, r3, #15
 8008cd6:	4a8a      	ldr	r2, [pc, #552]	; (8008f00 <font_drawChar+0x584>)
 8008cd8:	6013      	str	r3, [r2, #0]
        wf = ((v & 0x0f00)>>8)+1;
 8008cda:	8afb      	ldrh	r3, [r7, #22]
 8008cdc:	121b      	asrs	r3, r3, #8
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	4a87      	ldr	r2, [pc, #540]	; (8008f04 <font_drawChar+0x588>)
 8008ce6:	6013      	str	r3, [r2, #0]
        hf = ((v & 0xf000)>>12)+1;
 8008ce8:	8afb      	ldrh	r3, [r7, #22]
 8008cea:	0b1b      	lsrs	r3, r3, #12
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3301      	adds	r3, #1
 8008cf0:	4a85      	ldr	r2, [pc, #532]	; (8008f08 <font_drawChar+0x58c>)
 8008cf2:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008cf4:	4b85      	ldr	r3, [pc, #532]	; (8008f0c <font_drawChar+0x590>)
 8008cf6:	681c      	ldr	r4, [r3, #0]
 8008cf8:	4b80      	ldr	r3, [pc, #512]	; (8008efc <font_drawChar+0x580>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a84      	ldr	r2, [pc, #528]	; (8008f10 <font_drawChar+0x594>)
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	fb02 f203 	mul.w	r2, r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	18d0      	adds	r0, r2, r3
 8008d08:	4b7d      	ldr	r3, [pc, #500]	; (8008f00 <font_drawChar+0x584>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a81      	ldr	r2, [pc, #516]	; (8008f14 <font_drawChar+0x598>)
 8008d0e:	6812      	ldr	r2, [r2, #0]
 8008d10:	fb02 f203 	mul.w	r2, r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	18d1      	adds	r1, r2, r3
 8008d18:	4b7a      	ldr	r3, [pc, #488]	; (8008f04 <font_drawChar+0x588>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a7c      	ldr	r2, [pc, #496]	; (8008f10 <font_drawChar+0x594>)
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	fb02 f203 	mul.w	r2, r2, r3
 8008d24:	4b7c      	ldr	r3, [pc, #496]	; (8008f18 <font_drawChar+0x59c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	18d5      	adds	r5, r2, r3
 8008d2a:	4b77      	ldr	r3, [pc, #476]	; (8008f08 <font_drawChar+0x58c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a79      	ldr	r2, [pc, #484]	; (8008f14 <font_drawChar+0x598>)
 8008d30:	6812      	ldr	r2, [r2, #0]
 8008d32:	fb02 f203 	mul.w	r2, r2, r3
 8008d36:	4b79      	ldr	r3, [pc, #484]	; (8008f1c <font_drawChar+0x5a0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	462a      	mov	r2, r5
 8008d40:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8008d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d46:	3301      	adds	r3, #1
 8008d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d4c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008d50:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008d54:	429a      	cmp	r2, r3
 8008d56:	dba5      	blt.n	8008ca4 <font_drawChar+0x328>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8008d58:	f000 be5d 	b.w	8009a16 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_24B==1
    case RRE_24B:
      for(int i=0; i<recNum; i++) {
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d62:	e065      	b.n	8008e30 <font_drawChar+0x4b4>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8008d64:	4b64      	ldr	r3, [pc, #400]	; (8008ef8 <font_drawChar+0x57c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6899      	ldr	r1, [r3, #8]
 8008d6a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8008d6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d72:	441a      	add	r2, r3
 8008d74:	4613      	mov	r3, r2
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	4413      	add	r3, r2
 8008d7a:	440b      	add	r3, r1
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        xf = ((rects[0]) & 0x3f)-xmin;
 8008d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	4a5c      	ldr	r2, [pc, #368]	; (8008efc <font_drawChar+0x580>)
 8008d8c:	6013      	str	r3, [r2, #0]
        yf = ((rects[1]) & 0x3f);
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	3301      	adds	r3, #1
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d98:	4a59      	ldr	r2, [pc, #356]	; (8008f00 <font_drawChar+0x584>)
 8008d9a:	6013      	str	r3, [r2, #0]
        wf = ((rects[2]) & 0x3f)+1;
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9e:	3302      	adds	r3, #2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da6:	3301      	adds	r3, #1
 8008da8:	4a56      	ldr	r2, [pc, #344]	; (8008f04 <font_drawChar+0x588>)
 8008daa:	6013      	str	r3, [r2, #0]
        hf = 1+((((rects[0]) & 0xc0)>>6) | (((rects[1]) & 0xc0)>>4) | (((rects[2]) & 0xc0)>>2));
 8008dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	099b      	lsrs	r3, r3, #6
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	461a      	mov	r2, r3
 8008db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db8:	3301      	adds	r3, #1
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	111b      	asrs	r3, r3, #4
 8008dbe:	f003 030c 	and.w	r3, r3, #12
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc6:	3302      	adds	r3, #2
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	109b      	asrs	r3, r3, #2
 8008dcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	4a4c      	ldr	r2, [pc, #304]	; (8008f08 <font_drawChar+0x58c>)
 8008dd6:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008dd8:	4b4c      	ldr	r3, [pc, #304]	; (8008f0c <font_drawChar+0x590>)
 8008dda:	681c      	ldr	r4, [r3, #0]
 8008ddc:	4b47      	ldr	r3, [pc, #284]	; (8008efc <font_drawChar+0x580>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a4b      	ldr	r2, [pc, #300]	; (8008f10 <font_drawChar+0x594>)
 8008de2:	6812      	ldr	r2, [r2, #0]
 8008de4:	fb02 f203 	mul.w	r2, r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	18d0      	adds	r0, r2, r3
 8008dec:	4b44      	ldr	r3, [pc, #272]	; (8008f00 <font_drawChar+0x584>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a48      	ldr	r2, [pc, #288]	; (8008f14 <font_drawChar+0x598>)
 8008df2:	6812      	ldr	r2, [r2, #0]
 8008df4:	fb02 f203 	mul.w	r2, r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	18d1      	adds	r1, r2, r3
 8008dfc:	4b41      	ldr	r3, [pc, #260]	; (8008f04 <font_drawChar+0x588>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a43      	ldr	r2, [pc, #268]	; (8008f10 <font_drawChar+0x594>)
 8008e02:	6812      	ldr	r2, [r2, #0]
 8008e04:	fb02 f203 	mul.w	r2, r2, r3
 8008e08:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <font_drawChar+0x59c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	18d5      	adds	r5, r2, r3
 8008e0e:	4b3e      	ldr	r3, [pc, #248]	; (8008f08 <font_drawChar+0x58c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a40      	ldr	r2, [pc, #256]	; (8008f14 <font_drawChar+0x598>)
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	fb02 f203 	mul.w	r2, r2, r3
 8008e1a:	4b40      	ldr	r3, [pc, #256]	; (8008f1c <font_drawChar+0x5a0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	4613      	mov	r3, r2
 8008e22:	462a      	mov	r2, r5
 8008e24:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8008e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008e34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	db93      	blt.n	8008d64 <font_drawChar+0x3e8>
      }
      break;
 8008e3c:	f000 bdeb 	b.w	8009a16 <font_drawChar+0x109a>
#endif
#if ENABLE_RRE_32B==1
    case RRE_32B:
      for(int i=0; i<recNum; i++) {
 8008e40:	2300      	movs	r3, #0
 8008e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e46:	e04f      	b.n	8008ee8 <font_drawChar+0x56c>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*4;
 8008e48:	4b2b      	ldr	r3, [pc, #172]	; (8008ef8 <font_drawChar+0x57c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8008e52:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008e56:	440a      	add	r2, r1
 8008e58:	0092      	lsls	r2, r2, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	653b      	str	r3, [r7, #80]	; 0x50
        xf = (rects[0])-xmin;
 8008e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	4a24      	ldr	r2, [pc, #144]	; (8008efc <font_drawChar+0x580>)
 8008e6a:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 8008e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6e:	3301      	adds	r3, #1
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	4b22      	ldr	r3, [pc, #136]	; (8008f00 <font_drawChar+0x584>)
 8008e76:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 8008e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e7a:	3302      	adds	r3, #2
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	4a20      	ldr	r2, [pc, #128]	; (8008f04 <font_drawChar+0x588>)
 8008e82:	6013      	str	r3, [r2, #0]
        hf = (rects[3])+1;
 8008e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e86:	3303      	adds	r3, #3
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <font_drawChar+0x58c>)
 8008e8e:	6013      	str	r3, [r2, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 8008e90:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <font_drawChar+0x590>)
 8008e92:	681c      	ldr	r4, [r3, #0]
 8008e94:	4b19      	ldr	r3, [pc, #100]	; (8008efc <font_drawChar+0x580>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <font_drawChar+0x594>)
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	fb02 f203 	mul.w	r2, r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	18d0      	adds	r0, r2, r3
 8008ea4:	4b16      	ldr	r3, [pc, #88]	; (8008f00 <font_drawChar+0x584>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a1a      	ldr	r2, [pc, #104]	; (8008f14 <font_drawChar+0x598>)
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	fb02 f203 	mul.w	r2, r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	18d1      	adds	r1, r2, r3
 8008eb4:	4b13      	ldr	r3, [pc, #76]	; (8008f04 <font_drawChar+0x588>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <font_drawChar+0x594>)
 8008eba:	6812      	ldr	r2, [r2, #0]
 8008ebc:	fb02 f203 	mul.w	r2, r2, r3
 8008ec0:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <font_drawChar+0x59c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	18d5      	adds	r5, r2, r3
 8008ec6:	4b10      	ldr	r3, [pc, #64]	; (8008f08 <font_drawChar+0x58c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a12      	ldr	r2, [pc, #72]	; (8008f14 <font_drawChar+0x598>)
 8008ecc:	6812      	ldr	r2, [r2, #0]
 8008ece:	fb02 f203 	mul.w	r2, r2, r3
 8008ed2:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <font_drawChar+0x5a0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	462a      	mov	r2, r5
 8008edc:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8008ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ee8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008eec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	dba9      	blt.n	8008e48 <font_drawChar+0x4cc>
        //Serial.println(String(i)+" "+xf+" "+yf+" "+wf+" "+hf);
      }
      break;
 8008ef4:	f000 bd8f 	b.w	8009a16 <font_drawChar+0x109a>
 8008ef8:	200067fc 	.word	0x200067fc
 8008efc:	20006800 	.word	0x20006800
 8008f00:	20006804 	.word	0x20006804
 8008f04:	20006808 	.word	0x20006808
 8008f08:	2000680c 	.word	0x2000680c
 8008f0c:	200067f8 	.word	0x200067f8
 8008f10:	200015f0 	.word	0x200015f0
 8008f14:	200015f4 	.word	0x200015f4
 8008f18:	2000681c 	.word	0x2000681c
 8008f1c:	200015f8 	.word	0x200015f8
#endif
#if ENABLE_RRE_V16B==1
    case RRE_V16B:
      if(bg!=fg) {
 8008f20:	4b96      	ldr	r3, [pc, #600]	; (800917c <font_drawChar+0x800>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	4b96      	ldr	r3, [pc, #600]	; (8009180 <font_drawChar+0x804>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	f000 8123 	beq.w	8009174 <font_drawChar+0x7f8>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8008f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	dd1d      	ble.n	8008f72 <font_drawChar+0x5f6>
 8008f36:	4b93      	ldr	r3, [pc, #588]	; (8009184 <font_drawChar+0x808>)
 8008f38:	681c      	ldr	r4, [r3, #0]
 8008f3a:	4b93      	ldr	r3, [pc, #588]	; (8009188 <font_drawChar+0x80c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f42:	fb02 f303 	mul.w	r3, r2, r3
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	1ad0      	subs	r0, r2, r3
 8008f4a:	4b8f      	ldr	r3, [pc, #572]	; (8009188 <font_drawChar+0x80c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008f52:	fb02 f203 	mul.w	r2, r2, r3
 8008f56:	4b8d      	ldr	r3, [pc, #564]	; (800918c <font_drawChar+0x810>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	789b      	ldrb	r3, [r3, #2]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4b8c      	ldr	r3, [pc, #560]	; (8009190 <font_drawChar+0x814>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	fb03 f101 	mul.w	r1, r3, r1
 8008f66:	4b85      	ldr	r3, [pc, #532]	; (800917c <font_drawChar+0x800>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	68b9      	ldr	r1, [r7, #8]
 8008f70:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects+recIdx;
 8008f72:	4b86      	ldr	r3, [pc, #536]	; (800918c <font_drawChar+0x810>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	4413      	add	r3, r2
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
        int idx=0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while(idx<recNum) {
 8008f88:	e0c9      	b.n	800911e <font_drawChar+0x7a2>
          unsigned short v = *(rects+idx);
 8008f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f92:	4413      	add	r3, r2
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	847b      	strh	r3, [r7, #34]	; 0x22
          xf = (v & 0x3f)-xmin;
 8008f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	4a7c      	ldr	r2, [pc, #496]	; (8009194 <font_drawChar+0x818>)
 8008fa4:	6013      	str	r3, [r2, #0]
          int ybg=0,xfCur=xf;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fac:	4b79      	ldr	r3, [pc, #484]	; (8009194 <font_drawChar+0x818>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	61fb      	str	r3, [r7, #28]
          while(xf==xfCur && idx<recNum) {
 8008fb2:	e079      	b.n	80090a8 <font_drawChar+0x72c>
            v = *(rects+idx);
 8008fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbc:	4413      	add	r3, r2
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	847b      	strh	r3, [r7, #34]	; 0x22
            yf = (v>>6) & 0x1f;
 8008fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fc4:	099b      	lsrs	r3, r3, #6
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	4a72      	ldr	r2, [pc, #456]	; (8009198 <font_drawChar+0x81c>)
 8008fce:	6013      	str	r3, [r2, #0]
            hf = ((v>>11) & 0x1f)+1;
 8008fd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fd2:	0adb      	lsrs	r3, r3, #11
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	3301      	adds	r3, #1
 8008fdc:	4a6f      	ldr	r2, [pc, #444]	; (800919c <font_drawChar+0x820>)
 8008fde:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8008fe0:	4b6d      	ldr	r3, [pc, #436]	; (8009198 <font_drawChar+0x81c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	da21      	bge.n	8009030 <font_drawChar+0x6b4>
 8008fec:	4b65      	ldr	r3, [pc, #404]	; (8009184 <font_drawChar+0x808>)
 8008fee:	681c      	ldr	r4, [r3, #0]
 8008ff0:	4b65      	ldr	r3, [pc, #404]	; (8009188 <font_drawChar+0x80c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69fa      	ldr	r2, [r7, #28]
 8008ff6:	fb02 f203 	mul.w	r2, r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	18d0      	adds	r0, r2, r3
 8008ffe:	4b64      	ldr	r3, [pc, #400]	; (8009190 <font_drawChar+0x814>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009006:	fb02 f203 	mul.w	r2, r2, r3
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	18d1      	adds	r1, r2, r3
 800900e:	4b5e      	ldr	r3, [pc, #376]	; (8009188 <font_drawChar+0x80c>)
 8009010:	681d      	ldr	r5, [r3, #0]
 8009012:	4b61      	ldr	r3, [pc, #388]	; (8009198 <font_drawChar+0x81c>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	4a5c      	ldr	r2, [pc, #368]	; (8009190 <font_drawChar+0x814>)
 800901e:	6812      	ldr	r2, [r2, #0]
 8009020:	fb02 f203 	mul.w	r2, r2, r3
 8009024:	4b55      	ldr	r3, [pc, #340]	; (800917c <font_drawChar+0x800>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	4613      	mov	r3, r2
 800902c:	462a      	mov	r2, r5
 800902e:	47a0      	blx	r4
            ybg = yf+hf;
 8009030:	4b59      	ldr	r3, [pc, #356]	; (8009198 <font_drawChar+0x81c>)
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	4b59      	ldr	r3, [pc, #356]	; (800919c <font_drawChar+0x820>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4413      	add	r3, r2
 800903a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 800903e:	4b51      	ldr	r3, [pc, #324]	; (8009184 <font_drawChar+0x808>)
 8009040:	681c      	ldr	r4, [r3, #0]
 8009042:	4b51      	ldr	r3, [pc, #324]	; (8009188 <font_drawChar+0x80c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	fb02 f203 	mul.w	r2, r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	18d0      	adds	r0, r2, r3
 8009050:	4b51      	ldr	r3, [pc, #324]	; (8009198 <font_drawChar+0x81c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a4e      	ldr	r2, [pc, #312]	; (8009190 <font_drawChar+0x814>)
 8009056:	6812      	ldr	r2, [r2, #0]
 8009058:	fb02 f203 	mul.w	r2, r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	18d1      	adds	r1, r2, r3
 8009060:	4b4f      	ldr	r3, [pc, #316]	; (80091a0 <font_drawChar+0x824>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	4b48      	ldr	r3, [pc, #288]	; (8009188 <font_drawChar+0x80c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	18d5      	adds	r5, r2, r3
 800906a:	4b4c      	ldr	r3, [pc, #304]	; (800919c <font_drawChar+0x820>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a48      	ldr	r2, [pc, #288]	; (8009190 <font_drawChar+0x814>)
 8009070:	6812      	ldr	r2, [r2, #0]
 8009072:	fb02 f203 	mul.w	r2, r2, r3
 8009076:	4b42      	ldr	r3, [pc, #264]	; (8009180 <font_drawChar+0x804>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	4613      	mov	r3, r2
 800907e:	462a      	mov	r2, r5
 8009080:	47a0      	blx	r4
            idx++;
 8009082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009086:	3301      	adds	r3, #1
 8009088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            v = *(rects+idx);
 800908c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009094:	4413      	add	r3, r2
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	847b      	strh	r3, [r7, #34]	; 0x22
            xf = (v & 0x3f)-xmin;
 800909a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800909c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	4a3b      	ldr	r2, [pc, #236]	; (8009194 <font_drawChar+0x818>)
 80090a6:	6013      	str	r3, [r2, #0]
          while(xf==xfCur && idx<recNum) {
 80090a8:	4b3a      	ldr	r3, [pc, #232]	; (8009194 <font_drawChar+0x818>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d106      	bne.n	80090c0 <font_drawChar+0x744>
 80090b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80090b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	f6ff af7a 	blt.w	8008fb4 <font_drawChar+0x638>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 80090c0:	4b32      	ldr	r3, [pc, #200]	; (800918c <font_drawChar+0x810>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	789b      	ldrb	r3, [r3, #2]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090cc:	4293      	cmp	r3, r2
 80090ce:	da26      	bge.n	800911e <font_drawChar+0x7a2>
 80090d0:	4b2c      	ldr	r3, [pc, #176]	; (8009184 <font_drawChar+0x808>)
 80090d2:	681c      	ldr	r4, [r3, #0]
 80090d4:	4b2c      	ldr	r3, [pc, #176]	; (8009188 <font_drawChar+0x80c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	fb02 f203 	mul.w	r2, r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	18d0      	adds	r0, r2, r3
 80090e2:	4b2b      	ldr	r3, [pc, #172]	; (8009190 <font_drawChar+0x814>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80090ea:	fb02 f203 	mul.w	r2, r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	18d1      	adds	r1, r2, r3
 80090f2:	4b2b      	ldr	r3, [pc, #172]	; (80091a0 <font_drawChar+0x824>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <font_drawChar+0x80c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	18d5      	adds	r5, r2, r3
 80090fc:	4b23      	ldr	r3, [pc, #140]	; (800918c <font_drawChar+0x810>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	789b      	ldrb	r3, [r3, #2]
 8009102:	461a      	mov	r2, r3
 8009104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	4a21      	ldr	r2, [pc, #132]	; (8009190 <font_drawChar+0x814>)
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	fb02 f203 	mul.w	r2, r2, r3
 8009112:	4b1a      	ldr	r3, [pc, #104]	; (800917c <font_drawChar+0x800>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	462a      	mov	r2, r5
 800911c:	47a0      	blx	r4
        while(idx<recNum) {
 800911e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009122:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009126:	429a      	cmp	r2, r3
 8009128:	f6ff af2f 	blt.w	8008f8a <font_drawChar+0x60e>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 800912c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009130:	2b00      	cmp	r3, #0
 8009132:	f340 846b 	ble.w	8009a0c <font_drawChar+0x1090>
 8009136:	4b13      	ldr	r3, [pc, #76]	; (8009184 <font_drawChar+0x808>)
 8009138:	681c      	ldr	r4, [r3, #0]
 800913a:	4b13      	ldr	r3, [pc, #76]	; (8009188 <font_drawChar+0x80c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009140:	fb02 f203 	mul.w	r2, r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	18d0      	adds	r0, r2, r3
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <font_drawChar+0x80c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009150:	fb02 f203 	mul.w	r2, r2, r3
 8009154:	4b0d      	ldr	r3, [pc, #52]	; (800918c <font_drawChar+0x810>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	789b      	ldrb	r3, [r3, #2]
 800915a:	4619      	mov	r1, r3
 800915c:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <font_drawChar+0x814>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	fb03 f101 	mul.w	r1, r3, r1
 8009164:	4b05      	ldr	r3, [pc, #20]	; (800917c <font_drawChar+0x800>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	460b      	mov	r3, r1
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	47a0      	blx	r4
        yf = (v>>6) & 0x1f;
        hf = ((v>>11) & 0x1f)+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009170:	f000 bc4c 	b.w	8009a0c <font_drawChar+0x1090>
      for(int i=0; i<recNum; i++) {
 8009174:	2300      	movs	r3, #0
 8009176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800917a:	e066      	b.n	800924a <font_drawChar+0x8ce>
 800917c:	200015fc 	.word	0x200015fc
 8009180:	200015f8 	.word	0x200015f8
 8009184:	200067f8 	.word	0x200067f8
 8009188:	200015f0 	.word	0x200015f0
 800918c:	200067fc 	.word	0x200067fc
 8009190:	200015f4 	.word	0x200015f4
 8009194:	20006800 	.word	0x20006800
 8009198:	20006804 	.word	0x20006804
 800919c:	2000680c 	.word	0x2000680c
 80091a0:	2000681c 	.word	0x2000681c
        unsigned short *rects = (unsigned short*)rFont->rects;
 80091a4:	4b64      	ldr	r3, [pc, #400]	; (8009338 <font_drawChar+0x9bc>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        unsigned short v = (rects[i+recIdx]);
 80091ac:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80091b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b4:	4413      	add	r3, r2
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	857b      	strh	r3, [r7, #42]	; 0x2a
        xf = (v & 0x3f)-xmin;
 80091c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	4a5c      	ldr	r2, [pc, #368]	; (800933c <font_drawChar+0x9c0>)
 80091cc:	6013      	str	r3, [r2, #0]
        yf = (v>>6) & 0x1f;
 80091ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091d0:	099b      	lsrs	r3, r3, #6
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	4a59      	ldr	r2, [pc, #356]	; (8009340 <font_drawChar+0x9c4>)
 80091da:	6013      	str	r3, [r2, #0]
        hf = ((v>>11) & 0x1f)+1;
 80091dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091de:	0adb      	lsrs	r3, r3, #11
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f003 031f 	and.w	r3, r3, #31
 80091e6:	3301      	adds	r3, #1
 80091e8:	4a56      	ldr	r2, [pc, #344]	; (8009344 <font_drawChar+0x9c8>)
 80091ea:	6013      	str	r3, [r2, #0]
        wf = 1;
 80091ec:	4b56      	ldr	r3, [pc, #344]	; (8009348 <font_drawChar+0x9cc>)
 80091ee:	2201      	movs	r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80091f2:	4b56      	ldr	r3, [pc, #344]	; (800934c <font_drawChar+0x9d0>)
 80091f4:	681c      	ldr	r4, [r3, #0]
 80091f6:	4b51      	ldr	r3, [pc, #324]	; (800933c <font_drawChar+0x9c0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a55      	ldr	r2, [pc, #340]	; (8009350 <font_drawChar+0x9d4>)
 80091fc:	6812      	ldr	r2, [r2, #0]
 80091fe:	fb02 f203 	mul.w	r2, r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	18d0      	adds	r0, r2, r3
 8009206:	4b4e      	ldr	r3, [pc, #312]	; (8009340 <font_drawChar+0x9c4>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a52      	ldr	r2, [pc, #328]	; (8009354 <font_drawChar+0x9d8>)
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	fb02 f203 	mul.w	r2, r2, r3
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	18d1      	adds	r1, r2, r3
 8009216:	4b4c      	ldr	r3, [pc, #304]	; (8009348 <font_drawChar+0x9cc>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a4d      	ldr	r2, [pc, #308]	; (8009350 <font_drawChar+0x9d4>)
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	fb02 f203 	mul.w	r2, r2, r3
 8009222:	4b4d      	ldr	r3, [pc, #308]	; (8009358 <font_drawChar+0x9dc>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	18d5      	adds	r5, r2, r3
 8009228:	4b46      	ldr	r3, [pc, #280]	; (8009344 <font_drawChar+0x9c8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a49      	ldr	r2, [pc, #292]	; (8009354 <font_drawChar+0x9d8>)
 800922e:	6812      	ldr	r2, [r2, #0]
 8009230:	fb02 f203 	mul.w	r2, r2, r3
 8009234:	4b49      	ldr	r3, [pc, #292]	; (800935c <font_drawChar+0x9e0>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	4613      	mov	r3, r2
 800923c:	462a      	mov	r2, r5
 800923e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009244:	3301      	adds	r3, #1
 8009246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800924a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800924e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009252:	429a      	cmp	r2, r3
 8009254:	dba6      	blt.n	80091a4 <font_drawChar+0x828>
      break;
 8009256:	e3d9      	b.n	8009a0c <font_drawChar+0x1090>
#endif
#if ENABLE_RRE_H16B==1
    case RRE_H16B:
      if(bg!=fg) {
 8009258:	4b41      	ldr	r3, [pc, #260]	; (8009360 <font_drawChar+0x9e4>)
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	4b3f      	ldr	r3, [pc, #252]	; (800935c <font_drawChar+0x9e0>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	f000 817e 	beq.w	8009562 <font_drawChar+0xbe6>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 8009266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800926a:	2b00      	cmp	r3, #0
 800926c:	dd1d      	ble.n	80092aa <font_drawChar+0x92e>
 800926e:	4b37      	ldr	r3, [pc, #220]	; (800934c <font_drawChar+0x9d0>)
 8009270:	681c      	ldr	r4, [r3, #0]
 8009272:	4b37      	ldr	r3, [pc, #220]	; (8009350 <font_drawChar+0x9d4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800927a:	fb02 f303 	mul.w	r3, r2, r3
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	1ad0      	subs	r0, r2, r3
 8009282:	4b33      	ldr	r3, [pc, #204]	; (8009350 <font_drawChar+0x9d4>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800928a:	fb02 f203 	mul.w	r2, r2, r3
 800928e:	4b2a      	ldr	r3, [pc, #168]	; (8009338 <font_drawChar+0x9bc>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	789b      	ldrb	r3, [r3, #2]
 8009294:	4619      	mov	r1, r3
 8009296:	4b2f      	ldr	r3, [pc, #188]	; (8009354 <font_drawChar+0x9d8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	fb03 f101 	mul.w	r1, r3, r1
 800929e:	4b30      	ldr	r3, [pc, #192]	; (8009360 <font_drawChar+0x9e4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	460b      	mov	r3, r1
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	47a0      	blx	r4
        unsigned short *rects = (unsigned short*)rFont->rects;
 80092aa:	4b23      	ldr	r3, [pc, #140]	; (8009338 <font_drawChar+0x9bc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
        int idx=0,yfCur=0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092b8:	2300      	movs	r3, #0
 80092ba:	67fb      	str	r3, [r7, #124]	; 0x7c
        while(idx<recNum) {
 80092bc:	e127      	b.n	800950e <font_drawChar+0xb92>
          unsigned short v = *(rects+idx+recIdx);
 80092be:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80092c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092c6:	4413      	add	r3, r2
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092cc:	4413      	add	r3, r2
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
          yf = (v>>5) & 0x3f;
 80092d4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092e0:	4a17      	ldr	r2, [pc, #92]	; (8009340 <font_drawChar+0x9c4>)
 80092e2:	6013      	str	r3, [r2, #0]
          if(yf-yfCur>1 /*|| (yf-yfCur>0 && yfCur==0)*/) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yf-yfCur)*sy, bg);
 80092e4:	4b16      	ldr	r3, [pc, #88]	; (8009340 <font_drawChar+0x9c4>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	dd1c      	ble.n	800932a <font_drawChar+0x9ae>
 80092f0:	4b16      	ldr	r3, [pc, #88]	; (800934c <font_drawChar+0x9d0>)
 80092f2:	681c      	ldr	r4, [r3, #0]
 80092f4:	4b17      	ldr	r3, [pc, #92]	; (8009354 <font_drawChar+0x9d8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092fa:	fb02 f203 	mul.w	r2, r2, r3
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	18d1      	adds	r1, r2, r3
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <font_drawChar+0x9d4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009308:	fb02 f003 	mul.w	r0, r2, r3
 800930c:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <font_drawChar+0x9c4>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	4a0f      	ldr	r2, [pc, #60]	; (8009354 <font_drawChar+0x9d8>)
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	fb02 f203 	mul.w	r2, r2, r3
 800931c:	4b10      	ldr	r3, [pc, #64]	; (8009360 <font_drawChar+0x9e4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	4613      	mov	r3, r2
 8009324:	4602      	mov	r2, r0
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	47a0      	blx	r4
          //Serial.print(idx); Serial.print("  "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          yfCur=yf;
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <font_drawChar+0x9c4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	67fb      	str	r3, [r7, #124]	; 0x7c
          int xbg=0;
 8009330:	2300      	movs	r3, #0
 8009332:	677b      	str	r3, [r7, #116]	; 0x74
          while(yf==yfCur && idx<recNum) {
 8009334:	e08a      	b.n	800944c <font_drawChar+0xad0>
 8009336:	bf00      	nop
 8009338:	200067fc 	.word	0x200067fc
 800933c:	20006800 	.word	0x20006800
 8009340:	20006804 	.word	0x20006804
 8009344:	2000680c 	.word	0x2000680c
 8009348:	20006808 	.word	0x20006808
 800934c:	200067f8 	.word	0x200067f8
 8009350:	200015f0 	.word	0x200015f0
 8009354:	200015f4 	.word	0x200015f4
 8009358:	2000681c 	.word	0x2000681c
 800935c:	200015f8 	.word	0x200015f8
 8009360:	200015fc 	.word	0x200015fc
            xf = v & 0x1f;
 8009364:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	4a7e      	ldr	r2, [pc, #504]	; (8009568 <font_drawChar+0xbec>)
 800936e:	6013      	str	r3, [r2, #0]
            wf = ((v>>11) & 0x1f)+1;
 8009370:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009374:	0adb      	lsrs	r3, r3, #11
 8009376:	b29b      	uxth	r3, r3
 8009378:	f003 031f 	and.w	r3, r3, #31
 800937c:	3301      	adds	r3, #1
 800937e:	4a7b      	ldr	r2, [pc, #492]	; (800956c <font_drawChar+0xbf0>)
 8009380:	6013      	str	r3, [r2, #0]
            if(xf>xbg) (*fillRectFun)(x+xbg*sx, y+yf*sy, (xf-xbg)*sx, 1*sy, bg);
 8009382:	4b79      	ldr	r3, [pc, #484]	; (8009568 <font_drawChar+0xbec>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009388:	429a      	cmp	r2, r3
 800938a:	da1f      	bge.n	80093cc <font_drawChar+0xa50>
 800938c:	4b78      	ldr	r3, [pc, #480]	; (8009570 <font_drawChar+0xbf4>)
 800938e:	681c      	ldr	r4, [r3, #0]
 8009390:	4b78      	ldr	r3, [pc, #480]	; (8009574 <font_drawChar+0xbf8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009396:	fb02 f203 	mul.w	r2, r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	18d0      	adds	r0, r2, r3
 800939e:	4b76      	ldr	r3, [pc, #472]	; (8009578 <font_drawChar+0xbfc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a76      	ldr	r2, [pc, #472]	; (800957c <font_drawChar+0xc00>)
 80093a4:	6812      	ldr	r2, [r2, #0]
 80093a6:	fb02 f203 	mul.w	r2, r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	18d1      	adds	r1, r2, r3
 80093ae:	4b6e      	ldr	r3, [pc, #440]	; (8009568 <font_drawChar+0xbec>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	4a6f      	ldr	r2, [pc, #444]	; (8009574 <font_drawChar+0xbf8>)
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	fb02 f203 	mul.w	r2, r2, r3
 80093be:	4b6f      	ldr	r3, [pc, #444]	; (800957c <font_drawChar+0xc00>)
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	4b6f      	ldr	r3, [pc, #444]	; (8009580 <font_drawChar+0xc04>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	462b      	mov	r3, r5
 80093ca:	47a0      	blx	r4
            xbg = xf+wf;
 80093cc:	4b66      	ldr	r3, [pc, #408]	; (8009568 <font_drawChar+0xbec>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	4b66      	ldr	r3, [pc, #408]	; (800956c <font_drawChar+0xbf0>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4413      	add	r3, r2
 80093d6:	677b      	str	r3, [r7, #116]	; 0x74
            //if(idx==recNum-1) fg=0x07E0; else fg=0xffff;
            (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, 1*sy, fg);
 80093d8:	4b65      	ldr	r3, [pc, #404]	; (8009570 <font_drawChar+0xbf4>)
 80093da:	681c      	ldr	r4, [r3, #0]
 80093dc:	4b62      	ldr	r3, [pc, #392]	; (8009568 <font_drawChar+0xbec>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a64      	ldr	r2, [pc, #400]	; (8009574 <font_drawChar+0xbf8>)
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	fb02 f203 	mul.w	r2, r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	18d0      	adds	r0, r2, r3
 80093ec:	4b62      	ldr	r3, [pc, #392]	; (8009578 <font_drawChar+0xbfc>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a62      	ldr	r2, [pc, #392]	; (800957c <font_drawChar+0xc00>)
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	fb02 f203 	mul.w	r2, r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	18d1      	adds	r1, r2, r3
 80093fc:	4b5b      	ldr	r3, [pc, #364]	; (800956c <font_drawChar+0xbf0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a5c      	ldr	r2, [pc, #368]	; (8009574 <font_drawChar+0xbf8>)
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	fb02 f203 	mul.w	r2, r2, r3
 8009408:	4b5e      	ldr	r3, [pc, #376]	; (8009584 <font_drawChar+0xc08>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	441a      	add	r2, r3
 800940e:	4b5b      	ldr	r3, [pc, #364]	; (800957c <font_drawChar+0xc00>)
 8009410:	681d      	ldr	r5, [r3, #0]
 8009412:	4b5d      	ldr	r3, [pc, #372]	; (8009588 <font_drawChar+0xc0c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	462b      	mov	r3, r5
 800941a:	47a0      	blx	r4
            idx++;
 800941c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009420:	3301      	adds	r3, #1
 8009422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            v = *(rects+idx+recIdx);
 8009426:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800942a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800942e:	4413      	add	r3, r2
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            yf = (v>>5) & 0x3f;
 800943c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	b29b      	uxth	r3, r3
 8009444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009448:	4a4b      	ldr	r2, [pc, #300]	; (8009578 <font_drawChar+0xbfc>)
 800944a:	6013      	str	r3, [r2, #0]
          while(yf==yfCur && idx<recNum) {
 800944c:	4b4a      	ldr	r3, [pc, #296]	; (8009578 <font_drawChar+0xbfc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009452:	429a      	cmp	r2, r3
 8009454:	d105      	bne.n	8009462 <font_drawChar+0xae6>
 8009456:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800945a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800945e:	429a      	cmp	r2, r3
 8009460:	db80      	blt.n	8009364 <font_drawChar+0x9e8>
          }
          // last bg line
          if(xbg<chWd) (*fillRectFun)(x+xbg*sx, y+yfCur*sy, (chWd-xbg)*sx, 1*sy, bg);
 8009462:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009466:	429a      	cmp	r2, r3
 8009468:	da1d      	bge.n	80094a6 <font_drawChar+0xb2a>
 800946a:	4b41      	ldr	r3, [pc, #260]	; (8009570 <font_drawChar+0xbf4>)
 800946c:	681c      	ldr	r4, [r3, #0]
 800946e:	4b41      	ldr	r3, [pc, #260]	; (8009574 <font_drawChar+0xbf8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009474:	fb02 f203 	mul.w	r2, r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	18d0      	adds	r0, r2, r3
 800947c:	4b3f      	ldr	r3, [pc, #252]	; (800957c <font_drawChar+0xc00>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009482:	fb02 f203 	mul.w	r2, r2, r3
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	18d1      	adds	r1, r2, r3
 800948a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800948c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	4a38      	ldr	r2, [pc, #224]	; (8009574 <font_drawChar+0xbf8>)
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	fb02 f203 	mul.w	r2, r2, r3
 8009498:	4b38      	ldr	r3, [pc, #224]	; (800957c <font_drawChar+0xc00>)
 800949a:	681d      	ldr	r5, [r3, #0]
 800949c:	4b38      	ldr	r3, [pc, #224]	; (8009580 <font_drawChar+0xc04>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	462b      	mov	r3, r5
 80094a4:	47a0      	blx	r4
          //Serial.print(idx); Serial.print(" ++ "); Serial.print(yf); Serial.print("  "); Serial.println(yfCur);
          if(idx==recNum-1 && yfCur<rFont->ht) (*fillRectFun)(x+0*sx, y+yfCur*sy, chWd*sx, (yfCur<rFont->ht-yfCur)*sy, bg);
 80094a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80094aa:	3b01      	subs	r3, #1
 80094ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d12c      	bne.n	800950e <font_drawChar+0xb92>
 80094b4:	4b35      	ldr	r3, [pc, #212]	; (800958c <font_drawChar+0xc10>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	789b      	ldrb	r3, [r3, #2]
 80094ba:	461a      	mov	r2, r3
 80094bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094be:	4293      	cmp	r3, r2
 80094c0:	da25      	bge.n	800950e <font_drawChar+0xb92>
 80094c2:	4b2b      	ldr	r3, [pc, #172]	; (8009570 <font_drawChar+0xbf4>)
 80094c4:	681c      	ldr	r4, [r3, #0]
 80094c6:	4b2d      	ldr	r3, [pc, #180]	; (800957c <font_drawChar+0xc00>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80094cc:	fb02 f203 	mul.w	r2, r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	18d1      	adds	r1, r2, r3
 80094d4:	4b27      	ldr	r3, [pc, #156]	; (8009574 <font_drawChar+0xbf8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094da:	fb02 f003 	mul.w	r0, r2, r3
 80094de:	4b2b      	ldr	r3, [pc, #172]	; (800958c <font_drawChar+0xc10>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	789b      	ldrb	r3, [r3, #2]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80094ec:	429a      	cmp	r2, r3
 80094ee:	bfb4      	ite	lt
 80094f0:	2301      	movlt	r3, #1
 80094f2:	2300      	movge	r3, #0
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b20      	ldr	r3, [pc, #128]	; (800957c <font_drawChar+0xc00>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	fb03 f202 	mul.w	r2, r3, r2
 8009500:	4b1f      	ldr	r3, [pc, #124]	; (8009580 <font_drawChar+0xc04>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	4613      	mov	r3, r2
 8009508:	4602      	mov	r2, r0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	47a0      	blx	r4
        while(idx<recNum) {
 800950e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009512:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009516:	429a      	cmp	r2, r3
 8009518:	f6ff aed1 	blt.w	80092be <font_drawChar+0x942>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 800951c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009520:	2b00      	cmp	r3, #0
 8009522:	f340 8275 	ble.w	8009a10 <font_drawChar+0x1094>
 8009526:	4b12      	ldr	r3, [pc, #72]	; (8009570 <font_drawChar+0xbf4>)
 8009528:	681c      	ldr	r4, [r3, #0]
 800952a:	4b12      	ldr	r3, [pc, #72]	; (8009574 <font_drawChar+0xbf8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009530:	fb02 f203 	mul.w	r2, r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	18d0      	adds	r0, r2, r3
 8009538:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <font_drawChar+0xbf8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009540:	fb02 f203 	mul.w	r2, r2, r3
 8009544:	4b11      	ldr	r3, [pc, #68]	; (800958c <font_drawChar+0xc10>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	789b      	ldrb	r3, [r3, #2]
 800954a:	4619      	mov	r1, r3
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <font_drawChar+0xc00>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	fb03 f101 	mul.w	r1, r3, r1
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <font_drawChar+0xc04>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	460b      	mov	r3, r1
 800955c:	68b9      	ldr	r1, [r7, #8]
 800955e:	47a0      	blx	r4
        yf = (v>>5) & 0x3f;
        wf = ((v>>11) & 0x1f)+1;
        hf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009560:	e256      	b.n	8009a10 <font_drawChar+0x1094>
      for(int i=0; i<recNum; i++) {
 8009562:	2300      	movs	r3, #0
 8009564:	673b      	str	r3, [r7, #112]	; 0x70
 8009566:	e063      	b.n	8009630 <font_drawChar+0xcb4>
 8009568:	20006800 	.word	0x20006800
 800956c:	20006808 	.word	0x20006808
 8009570:	200067f8 	.word	0x200067f8
 8009574:	200015f0 	.word	0x200015f0
 8009578:	20006804 	.word	0x20006804
 800957c:	200015f4 	.word	0x200015f4
 8009580:	200015fc 	.word	0x200015fc
 8009584:	2000681c 	.word	0x2000681c
 8009588:	200015f8 	.word	0x200015f8
 800958c:	200067fc 	.word	0x200067fc
        unsigned short *rects = (unsigned short*)rFont->rects;
 8009590:	4b4c      	ldr	r3, [pc, #304]	; (80096c4 <font_drawChar+0xd48>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned short v = (rects[i+recIdx]);
 8009598:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800959c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800959e:	4413      	add	r3, r2
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095a4:	4413      	add	r3, r2
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        xf = (v & 0x1f)-xmin;
 80095aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095ac:	f003 021f 	and.w	r2, r3, #31
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	4a44      	ldr	r2, [pc, #272]	; (80096c8 <font_drawChar+0xd4c>)
 80095b6:	6013      	str	r3, [r2, #0]
        yf = (v>>5) & 0x3f;
 80095b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095ba:	095b      	lsrs	r3, r3, #5
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095c2:	4a42      	ldr	r2, [pc, #264]	; (80096cc <font_drawChar+0xd50>)
 80095c4:	6013      	str	r3, [r2, #0]
        wf = ((v>>11) & 0x1f)+1;
 80095c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095c8:	0adb      	lsrs	r3, r3, #11
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	f003 031f 	and.w	r3, r3, #31
 80095d0:	3301      	adds	r3, #1
 80095d2:	4a3f      	ldr	r2, [pc, #252]	; (80096d0 <font_drawChar+0xd54>)
 80095d4:	6013      	str	r3, [r2, #0]
        hf = 1;
 80095d6:	4b3f      	ldr	r3, [pc, #252]	; (80096d4 <font_drawChar+0xd58>)
 80095d8:	2201      	movs	r2, #1
 80095da:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80095dc:	4b3e      	ldr	r3, [pc, #248]	; (80096d8 <font_drawChar+0xd5c>)
 80095de:	681c      	ldr	r4, [r3, #0]
 80095e0:	4b39      	ldr	r3, [pc, #228]	; (80096c8 <font_drawChar+0xd4c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a3d      	ldr	r2, [pc, #244]	; (80096dc <font_drawChar+0xd60>)
 80095e6:	6812      	ldr	r2, [r2, #0]
 80095e8:	fb02 f203 	mul.w	r2, r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	18d0      	adds	r0, r2, r3
 80095f0:	4b36      	ldr	r3, [pc, #216]	; (80096cc <font_drawChar+0xd50>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a3a      	ldr	r2, [pc, #232]	; (80096e0 <font_drawChar+0xd64>)
 80095f6:	6812      	ldr	r2, [r2, #0]
 80095f8:	fb02 f203 	mul.w	r2, r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	18d1      	adds	r1, r2, r3
 8009600:	4b33      	ldr	r3, [pc, #204]	; (80096d0 <font_drawChar+0xd54>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a35      	ldr	r2, [pc, #212]	; (80096dc <font_drawChar+0xd60>)
 8009606:	6812      	ldr	r2, [r2, #0]
 8009608:	fb02 f203 	mul.w	r2, r2, r3
 800960c:	4b35      	ldr	r3, [pc, #212]	; (80096e4 <font_drawChar+0xd68>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	18d5      	adds	r5, r2, r3
 8009612:	4b30      	ldr	r3, [pc, #192]	; (80096d4 <font_drawChar+0xd58>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a32      	ldr	r2, [pc, #200]	; (80096e0 <font_drawChar+0xd64>)
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	fb02 f203 	mul.w	r2, r2, r3
 800961e:	4b32      	ldr	r3, [pc, #200]	; (80096e8 <font_drawChar+0xd6c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	4613      	mov	r3, r2
 8009626:	462a      	mov	r2, r5
 8009628:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 800962a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800962c:	3301      	adds	r3, #1
 800962e:	673b      	str	r3, [r7, #112]	; 0x70
 8009630:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009634:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009636:	429a      	cmp	r2, r3
 8009638:	dbaa      	blt.n	8009590 <font_drawChar+0xc14>
      break;
 800963a:	e1e9      	b.n	8009a10 <font_drawChar+0x1094>
#endif
#if ENABLE_RRE_V24B==1
    case RRE_V24B:
      if(bg!=fg) {
 800963c:	4b2b      	ldr	r3, [pc, #172]	; (80096ec <font_drawChar+0xd70>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	4b29      	ldr	r3, [pc, #164]	; (80096e8 <font_drawChar+0xd6c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	429a      	cmp	r2, r3
 8009646:	f000 811f 	beq.w	8009888 <font_drawChar+0xf0c>
        if(wdL>0) (*fillRectFun)(x-wdL*sx, y, wdL*sx, rFont->ht*sy, bg);
 800964a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800964e:	2b00      	cmp	r3, #0
 8009650:	dd1d      	ble.n	800968e <font_drawChar+0xd12>
 8009652:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <font_drawChar+0xd5c>)
 8009654:	681c      	ldr	r4, [r3, #0]
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <font_drawChar+0xd60>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800965e:	fb02 f303 	mul.w	r3, r2, r3
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	1ad0      	subs	r0, r2, r3
 8009666:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <font_drawChar+0xd60>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800966e:	fb02 f203 	mul.w	r2, r2, r3
 8009672:	4b14      	ldr	r3, [pc, #80]	; (80096c4 <font_drawChar+0xd48>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	789b      	ldrb	r3, [r3, #2]
 8009678:	4619      	mov	r1, r3
 800967a:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <font_drawChar+0xd64>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	fb03 f101 	mul.w	r1, r3, r1
 8009682:	4b1a      	ldr	r3, [pc, #104]	; (80096ec <font_drawChar+0xd70>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	460b      	mov	r3, r1
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	47a0      	blx	r4
        unsigned char *rects = (unsigned char*)rFont->rects + recIdx*3;
 800968e:	4b0d      	ldr	r3, [pc, #52]	; (80096c4 <font_drawChar+0xd48>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6899      	ldr	r1, [r3, #8]
 8009694:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009698:	4613      	mov	r3, r2
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	4413      	add	r3, r2
 800969e:	440b      	add	r3, r1
 80096a0:	647b      	str	r3, [r7, #68]	; 0x44
        int idx=0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(idx<recNum*3) {
 80096a6:	e0c3      	b.n	8009830 <font_drawChar+0xeb4>
          xf = *(rects+idx+0);
 80096a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ac:	4413      	add	r3, r2
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <font_drawChar+0xd4c>)
 80096b4:	601a      	str	r2, [r3, #0]
          int ybg=0,xfCur=xf;
 80096b6:	2300      	movs	r3, #0
 80096b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80096ba:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <font_drawChar+0xd4c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	643b      	str	r3, [r7, #64]	; 0x40
          while(xf==xfCur && idx<recNum*3) {
 80096c0:	e07d      	b.n	80097be <font_drawChar+0xe42>
 80096c2:	bf00      	nop
 80096c4:	200067fc 	.word	0x200067fc
 80096c8:	20006800 	.word	0x20006800
 80096cc:	20006804 	.word	0x20006804
 80096d0:	20006808 	.word	0x20006808
 80096d4:	2000680c 	.word	0x2000680c
 80096d8:	200067f8 	.word	0x200067f8
 80096dc:	200015f0 	.word	0x200015f0
 80096e0:	200015f4 	.word	0x200015f4
 80096e4:	2000681c 	.word	0x2000681c
 80096e8:	200015f8 	.word	0x200015f8
 80096ec:	200015fc 	.word	0x200015fc
            yf = *(rects+idx+1);
 80096f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f2:	3301      	adds	r3, #1
 80096f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096f6:	4413      	add	r3, r2
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	4b8e      	ldr	r3, [pc, #568]	; (8009938 <font_drawChar+0xfbc>)
 80096fe:	601a      	str	r2, [r3, #0]
            hf = *(rects+idx+2)+1;
 8009700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009702:	3302      	adds	r3, #2
 8009704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009706:	4413      	add	r3, r2
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	4a8b      	ldr	r2, [pc, #556]	; (800993c <font_drawChar+0xfc0>)
 800970e:	6013      	str	r3, [r2, #0]
            if(yf>ybg) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, 1*sx, (yf-ybg)*sy, bg);
 8009710:	4b89      	ldr	r3, [pc, #548]	; (8009938 <font_drawChar+0xfbc>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009716:	429a      	cmp	r2, r3
 8009718:	da1f      	bge.n	800975a <font_drawChar+0xdde>
 800971a:	4b89      	ldr	r3, [pc, #548]	; (8009940 <font_drawChar+0xfc4>)
 800971c:	681c      	ldr	r4, [r3, #0]
 800971e:	4b89      	ldr	r3, [pc, #548]	; (8009944 <font_drawChar+0xfc8>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009724:	fb02 f203 	mul.w	r2, r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	18d0      	adds	r0, r2, r3
 800972c:	4b86      	ldr	r3, [pc, #536]	; (8009948 <font_drawChar+0xfcc>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009732:	fb02 f203 	mul.w	r2, r2, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	18d1      	adds	r1, r2, r3
 800973a:	4b82      	ldr	r3, [pc, #520]	; (8009944 <font_drawChar+0xfc8>)
 800973c:	681d      	ldr	r5, [r3, #0]
 800973e:	4b7e      	ldr	r3, [pc, #504]	; (8009938 <font_drawChar+0xfbc>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	4a80      	ldr	r2, [pc, #512]	; (8009948 <font_drawChar+0xfcc>)
 8009748:	6812      	ldr	r2, [r2, #0]
 800974a:	fb02 f203 	mul.w	r2, r2, r3
 800974e:	4b7f      	ldr	r3, [pc, #508]	; (800994c <font_drawChar+0xfd0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	4613      	mov	r3, r2
 8009756:	462a      	mov	r2, r5
 8009758:	47a0      	blx	r4
            ybg = yf+hf;
 800975a:	4b77      	ldr	r3, [pc, #476]	; (8009938 <font_drawChar+0xfbc>)
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	4b77      	ldr	r3, [pc, #476]	; (800993c <font_drawChar+0xfc0>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4413      	add	r3, r2
 8009764:	66bb      	str	r3, [r7, #104]	; 0x68
            (*fillRectFun)(x+xfCur*sx, y+yf*sy, bold+1*sx, hf*sy, fg);
 8009766:	4b76      	ldr	r3, [pc, #472]	; (8009940 <font_drawChar+0xfc4>)
 8009768:	681c      	ldr	r4, [r3, #0]
 800976a:	4b76      	ldr	r3, [pc, #472]	; (8009944 <font_drawChar+0xfc8>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009770:	fb02 f203 	mul.w	r2, r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	18d0      	adds	r0, r2, r3
 8009778:	4b6f      	ldr	r3, [pc, #444]	; (8009938 <font_drawChar+0xfbc>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a72      	ldr	r2, [pc, #456]	; (8009948 <font_drawChar+0xfcc>)
 800977e:	6812      	ldr	r2, [r2, #0]
 8009780:	fb02 f203 	mul.w	r2, r2, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	18d1      	adds	r1, r2, r3
 8009788:	4b71      	ldr	r3, [pc, #452]	; (8009950 <font_drawChar+0xfd4>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	4b6d      	ldr	r3, [pc, #436]	; (8009944 <font_drawChar+0xfc8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	18d5      	adds	r5, r2, r3
 8009792:	4b6a      	ldr	r3, [pc, #424]	; (800993c <font_drawChar+0xfc0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a6c      	ldr	r2, [pc, #432]	; (8009948 <font_drawChar+0xfcc>)
 8009798:	6812      	ldr	r2, [r2, #0]
 800979a:	fb02 f203 	mul.w	r2, r2, r3
 800979e:	4b6d      	ldr	r3, [pc, #436]	; (8009954 <font_drawChar+0xfd8>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	4613      	mov	r3, r2
 80097a6:	462a      	mov	r2, r5
 80097a8:	47a0      	blx	r4
            idx += 3;
 80097aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ac:	3303      	adds	r3, #3
 80097ae:	66fb      	str	r3, [r7, #108]	; 0x6c
            xf = *(rects+idx+0);
 80097b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097b4:	4413      	add	r3, r2
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	4b67      	ldr	r3, [pc, #412]	; (8009958 <font_drawChar+0xfdc>)
 80097bc:	601a      	str	r2, [r3, #0]
          while(xf==xfCur && idx<recNum*3) {
 80097be:	4b66      	ldr	r3, [pc, #408]	; (8009958 <font_drawChar+0xfdc>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d107      	bne.n	80097d8 <font_drawChar+0xe5c>
 80097c8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80097cc:	4613      	mov	r3, r2
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	4413      	add	r3, r2
 80097d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097d4:	429a      	cmp	r2, r3
 80097d6:	db8b      	blt.n	80096f0 <font_drawChar+0xd74>
          }
          // last bg line
          if(ybg<rFont->ht) (*fillRectFun)(x+xfCur*sx, y+ybg*sy, bold+1*sx, (rFont->ht-ybg)*sy, bg);
 80097d8:	4b60      	ldr	r3, [pc, #384]	; (800995c <font_drawChar+0xfe0>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	789b      	ldrb	r3, [r3, #2]
 80097de:	461a      	mov	r2, r3
 80097e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097e2:	4293      	cmp	r3, r2
 80097e4:	da24      	bge.n	8009830 <font_drawChar+0xeb4>
 80097e6:	4b56      	ldr	r3, [pc, #344]	; (8009940 <font_drawChar+0xfc4>)
 80097e8:	681c      	ldr	r4, [r3, #0]
 80097ea:	4b56      	ldr	r3, [pc, #344]	; (8009944 <font_drawChar+0xfc8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097f0:	fb02 f203 	mul.w	r2, r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	18d0      	adds	r0, r2, r3
 80097f8:	4b53      	ldr	r3, [pc, #332]	; (8009948 <font_drawChar+0xfcc>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097fe:	fb02 f203 	mul.w	r2, r2, r3
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	18d1      	adds	r1, r2, r3
 8009806:	4b52      	ldr	r3, [pc, #328]	; (8009950 <font_drawChar+0xfd4>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	4b4e      	ldr	r3, [pc, #312]	; (8009944 <font_drawChar+0xfc8>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	18d5      	adds	r5, r2, r3
 8009810:	4b52      	ldr	r3, [pc, #328]	; (800995c <font_drawChar+0xfe0>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	789b      	ldrb	r3, [r3, #2]
 8009816:	461a      	mov	r2, r3
 8009818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	4a4a      	ldr	r2, [pc, #296]	; (8009948 <font_drawChar+0xfcc>)
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	fb02 f203 	mul.w	r2, r2, r3
 8009824:	4b49      	ldr	r3, [pc, #292]	; (800994c <font_drawChar+0xfd0>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4613      	mov	r3, r2
 800982c:	462a      	mov	r2, r5
 800982e:	47a0      	blx	r4
        while(idx<recNum*3) {
 8009830:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009834:	4613      	mov	r3, r2
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	4413      	add	r3, r2
 800983a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800983c:	429a      	cmp	r2, r3
 800983e:	f6ff af33 	blt.w	80096a8 <font_drawChar+0xd2c>
        }
        if(wdR>0) (*fillRectFun)(x+chWd*sx, y, wdR*sx, rFont->ht*sy, bg);
 8009842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009846:	2b00      	cmp	r3, #0
 8009848:	f340 80e4 	ble.w	8009a14 <font_drawChar+0x1098>
 800984c:	4b3c      	ldr	r3, [pc, #240]	; (8009940 <font_drawChar+0xfc4>)
 800984e:	681c      	ldr	r4, [r3, #0]
 8009850:	4b3c      	ldr	r3, [pc, #240]	; (8009944 <font_drawChar+0xfc8>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009856:	fb02 f203 	mul.w	r2, r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	18d0      	adds	r0, r2, r3
 800985e:	4b39      	ldr	r3, [pc, #228]	; (8009944 <font_drawChar+0xfc8>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009866:	fb02 f203 	mul.w	r2, r2, r3
 800986a:	4b3c      	ldr	r3, [pc, #240]	; (800995c <font_drawChar+0xfe0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	789b      	ldrb	r3, [r3, #2]
 8009870:	4619      	mov	r1, r3
 8009872:	4b35      	ldr	r3, [pc, #212]	; (8009948 <font_drawChar+0xfcc>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	fb03 f101 	mul.w	r1, r3, r1
 800987a:	4b34      	ldr	r3, [pc, #208]	; (800994c <font_drawChar+0xfd0>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	460b      	mov	r3, r1
 8009882:	68b9      	ldr	r1, [r7, #8]
 8009884:	47a0      	blx	r4
        yf = (rects[1]);
        hf = (rects[2])+1;
        wf = 1;
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
      }
      break;
 8009886:	e0c5      	b.n	8009a14 <font_drawChar+0x1098>
      for(int i=0; i<recNum; i++) {
 8009888:	2300      	movs	r3, #0
 800988a:	667b      	str	r3, [r7, #100]	; 0x64
 800988c:	e04b      	b.n	8009926 <font_drawChar+0xfaa>
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 800988e:	4b33      	ldr	r3, [pc, #204]	; (800995c <font_drawChar+0xfe0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6899      	ldr	r1, [r3, #8]
 8009894:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8009898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800989a:	441a      	add	r2, r3
 800989c:	4613      	mov	r3, r2
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	4413      	add	r3, r2
 80098a2:	440b      	add	r3, r1
 80098a4:	64bb      	str	r3, [r7, #72]	; 0x48
        xf = (rects[0])-xmin;
 80098a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	461a      	mov	r2, r3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	4a29      	ldr	r2, [pc, #164]	; (8009958 <font_drawChar+0xfdc>)
 80098b2:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 80098b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b6:	3301      	adds	r3, #1
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <font_drawChar+0xfbc>)
 80098be:	601a      	str	r2, [r3, #0]
        hf = (rects[2])+1;
 80098c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c2:	3302      	adds	r3, #2
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	3301      	adds	r3, #1
 80098c8:	4a1c      	ldr	r2, [pc, #112]	; (800993c <font_drawChar+0xfc0>)
 80098ca:	6013      	str	r3, [r2, #0]
        wf = 1;
 80098cc:	4b24      	ldr	r3, [pc, #144]	; (8009960 <font_drawChar+0xfe4>)
 80098ce:	2201      	movs	r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80098d2:	4b1b      	ldr	r3, [pc, #108]	; (8009940 <font_drawChar+0xfc4>)
 80098d4:	681c      	ldr	r4, [r3, #0]
 80098d6:	4b20      	ldr	r3, [pc, #128]	; (8009958 <font_drawChar+0xfdc>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a1a      	ldr	r2, [pc, #104]	; (8009944 <font_drawChar+0xfc8>)
 80098dc:	6812      	ldr	r2, [r2, #0]
 80098de:	fb02 f203 	mul.w	r2, r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	18d0      	adds	r0, r2, r3
 80098e6:	4b14      	ldr	r3, [pc, #80]	; (8009938 <font_drawChar+0xfbc>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a17      	ldr	r2, [pc, #92]	; (8009948 <font_drawChar+0xfcc>)
 80098ec:	6812      	ldr	r2, [r2, #0]
 80098ee:	fb02 f203 	mul.w	r2, r2, r3
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	18d1      	adds	r1, r2, r3
 80098f6:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <font_drawChar+0xfe4>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a12      	ldr	r2, [pc, #72]	; (8009944 <font_drawChar+0xfc8>)
 80098fc:	6812      	ldr	r2, [r2, #0]
 80098fe:	fb02 f203 	mul.w	r2, r2, r3
 8009902:	4b13      	ldr	r3, [pc, #76]	; (8009950 <font_drawChar+0xfd4>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	18d5      	adds	r5, r2, r3
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <font_drawChar+0xfc0>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a0e      	ldr	r2, [pc, #56]	; (8009948 <font_drawChar+0xfcc>)
 800990e:	6812      	ldr	r2, [r2, #0]
 8009910:	fb02 f203 	mul.w	r2, r2, r3
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <font_drawChar+0xfd8>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	4613      	mov	r3, r2
 800991c:	462a      	mov	r2, r5
 800991e:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 8009920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009922:	3301      	adds	r3, #1
 8009924:	667b      	str	r3, [r7, #100]	; 0x64
 8009926:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800992a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800992c:	429a      	cmp	r2, r3
 800992e:	dbae      	blt.n	800988e <font_drawChar+0xf12>
      break;
 8009930:	e070      	b.n	8009a14 <font_drawChar+0x1098>
#endif
#if ENABLE_RRE_H24B==1
    case RRE_H24B:
      for(int i=0; i<recNum; i++) {
 8009932:	2300      	movs	r3, #0
 8009934:	663b      	str	r3, [r7, #96]	; 0x60
 8009936:	e061      	b.n	80099fc <font_drawChar+0x1080>
 8009938:	20006804 	.word	0x20006804
 800993c:	2000680c 	.word	0x2000680c
 8009940:	200067f8 	.word	0x200067f8
 8009944:	200015f0 	.word	0x200015f0
 8009948:	200015f4 	.word	0x200015f4
 800994c:	200015fc 	.word	0x200015fc
 8009950:	2000681c 	.word	0x2000681c
 8009954:	200015f8 	.word	0x200015f8
 8009958:	20006800 	.word	0x20006800
 800995c:	200067fc 	.word	0x200067fc
 8009960:	20006808 	.word	0x20006808
        unsigned char *rects = (unsigned char*)rFont->rects + (i+recIdx)*3;
 8009964:	4b32      	ldr	r3, [pc, #200]	; (8009a30 <font_drawChar+0x10b4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6899      	ldr	r1, [r3, #8]
 800996a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800996e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009970:	441a      	add	r2, r3
 8009972:	4613      	mov	r3, r2
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	4413      	add	r3, r2
 8009978:	440b      	add	r3, r1
 800997a:	64fb      	str	r3, [r7, #76]	; 0x4c
        xf = (rects[0])-xmin;
 800997c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	4a2b      	ldr	r2, [pc, #172]	; (8009a34 <font_drawChar+0x10b8>)
 8009988:	6013      	str	r3, [r2, #0]
        yf = (rects[1]);
 800998a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998c:	3301      	adds	r3, #1
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	4b29      	ldr	r3, [pc, #164]	; (8009a38 <font_drawChar+0x10bc>)
 8009994:	601a      	str	r2, [r3, #0]
        wf = (rects[2])+1;
 8009996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009998:	3302      	adds	r3, #2
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	4a27      	ldr	r2, [pc, #156]	; (8009a3c <font_drawChar+0x10c0>)
 80099a0:	6013      	str	r3, [r2, #0]
        hf = 1;
 80099a2:	4b27      	ldr	r3, [pc, #156]	; (8009a40 <font_drawChar+0x10c4>)
 80099a4:	2201      	movs	r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
        (*fillRectFun)(x+xf*sx, y+yf*sy, bold+wf*sx, hf*sy, fg);
 80099a8:	4b26      	ldr	r3, [pc, #152]	; (8009a44 <font_drawChar+0x10c8>)
 80099aa:	681c      	ldr	r4, [r3, #0]
 80099ac:	4b21      	ldr	r3, [pc, #132]	; (8009a34 <font_drawChar+0x10b8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a25      	ldr	r2, [pc, #148]	; (8009a48 <font_drawChar+0x10cc>)
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	fb02 f203 	mul.w	r2, r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	18d0      	adds	r0, r2, r3
 80099bc:	4b1e      	ldr	r3, [pc, #120]	; (8009a38 <font_drawChar+0x10bc>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a22      	ldr	r2, [pc, #136]	; (8009a4c <font_drawChar+0x10d0>)
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	fb02 f203 	mul.w	r2, r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	18d1      	adds	r1, r2, r3
 80099cc:	4b1b      	ldr	r3, [pc, #108]	; (8009a3c <font_drawChar+0x10c0>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a1d      	ldr	r2, [pc, #116]	; (8009a48 <font_drawChar+0x10cc>)
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	fb02 f203 	mul.w	r2, r2, r3
 80099d8:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <font_drawChar+0x10d4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	18d5      	adds	r5, r2, r3
 80099de:	4b18      	ldr	r3, [pc, #96]	; (8009a40 <font_drawChar+0x10c4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a1a      	ldr	r2, [pc, #104]	; (8009a4c <font_drawChar+0x10d0>)
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	fb02 f203 	mul.w	r2, r2, r3
 80099ea:	4b1a      	ldr	r3, [pc, #104]	; (8009a54 <font_drawChar+0x10d8>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	4613      	mov	r3, r2
 80099f2:	462a      	mov	r2, r5
 80099f4:	47a0      	blx	r4
      for(int i=0; i<recNum; i++) {
 80099f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099f8:	3301      	adds	r3, #1
 80099fa:	663b      	str	r3, [r7, #96]	; 0x60
 80099fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009a00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a02:	429a      	cmp	r2, r3
 8009a04:	dbae      	blt.n	8009964 <font_drawChar+0xfe8>
      }
      break;
 8009a06:	e006      	b.n	8009a16 <font_drawChar+0x109a>
    default: break;
 8009a08:	bf00      	nop
 8009a0a:	e004      	b.n	8009a16 <font_drawChar+0x109a>
      break;
 8009a0c:	bf00      	nop
 8009a0e:	e002      	b.n	8009a16 <font_drawChar+0x109a>
      break;
 8009a10:	bf00      	nop
 8009a12:	e000      	b.n	8009a16 <font_drawChar+0x109a>
      break;
 8009a14:	bf00      	nop
#endif
  }
  return (wd+bold)*sx;
 8009a16:	4b0e      	ldr	r3, [pc, #56]	; (8009a50 <font_drawChar+0x10d4>)
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a1e:	4413      	add	r3, r2
 8009a20:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <font_drawChar+0x10cc>)
 8009a22:	6812      	ldr	r2, [r2, #0]
 8009a24:	fb02 f303 	mul.w	r3, r2, r3
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	37a8      	adds	r7, #168	; 0xa8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8009a30:	200067fc 	.word	0x200067fc
 8009a34:	20006800 	.word	0x20006800
 8009a38:	20006804 	.word	0x20006804
 8009a3c:	20006808 	.word	0x20006808
 8009a40:	2000680c 	.word	0x2000680c
 8009a44:	200067f8 	.word	0x200067f8
 8009a48:	200015f0 	.word	0x200015f0
 8009a4c:	200015f4 	.word	0x200015f4
 8009a50:	2000681c 	.word	0x2000681c
 8009a54:	200015f8 	.word	0x200015f8

08009a58 <font_strWidth>:

// ----------------------------------------------------------------
int font_strWidth(char *str)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  int wd = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]
  while (*str) wd += font_charWidth(*str++);
 8009a64:	e00a      	b.n	8009a7c <font_strWidth+0x24>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe ff16 	bl	80088a0 <font_charWidth>
 8009a74:	4602      	mov	r2, r0
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f0      	bne.n	8009a66 <font_strWidth+0xe>
  return wd;
 8009a84:	68fb      	ldr	r3, [r7, #12]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <font_printf>:

static char printfbuffer[512];

int font_printf(int xpos, int ypos, char *str, ...)
{
 8009a90:	b40c      	push	{r2, r3}
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, str);
 8009a9c:	f107 031c 	add.w	r3, r7, #28
 8009aa0:	60fb      	str	r3, [r7, #12]
  vsnprintf(printfbuffer, sizeof(printfbuffer), str, args);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009aaa:	4808      	ldr	r0, [pc, #32]	; (8009acc <font_printf+0x3c>)
 8009aac:	f001 fe16 	bl	800b6dc <vsniprintf>
  va_end(args);
  return font_printStr(xpos, ypos,printfbuffer);
 8009ab0:	4a06      	ldr	r2, [pc, #24]	; (8009acc <font_printf+0x3c>)
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f80b 	bl	8009ad0 <font_printStr>
 8009aba:	4603      	mov	r3, r0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ac6:	b002      	add	sp, #8
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20006828 	.word	0x20006828

08009ad0 <font_printStr>:

// ----------------------------------------------------------------
int font_printStr(int xpos, int ypos, char *str)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  unsigned char ch;
  int stl, row;
  int x = xpos;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	627b      	str	r3, [r7, #36]	; 0x24
  int y = ypos;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	623b      	str	r3, [r7, #32]
  int wd = font_strWidth(str);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7ff ffb7 	bl	8009a58 <font_strWidth>
 8009aea:	61f8      	str	r0, [r7, #28]

  //fillRectFun(xpos, ypos, wd, font_getHeight(), 0);

  if(x==ALIGN_RIGHT) x = scrWd - wd; // right = -1
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af2:	d105      	bne.n	8009b00 <font_printStr+0x30>
 8009af4:	4b29      	ldr	r3, [pc, #164]	; (8009b9c <font_printStr+0xcc>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	627b      	str	r3, [r7, #36]	; 0x24
 8009afe:	e00b      	b.n	8009b18 <font_printStr+0x48>
  else if(x<0) x = (scrWd - wd) / 2; // center = -2
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	da08      	bge.n	8009b18 <font_printStr+0x48>
 8009b06:	4b25      	ldr	r3, [pc, #148]	; (8009b9c <font_printStr+0xcc>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da00      	bge.n	8009b14 <font_printStr+0x44>
 8009b12:	3301      	adds	r3, #1
 8009b14:	105b      	asrs	r3, r3, #1
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
  if(x<0) x = 0; // left
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da34      	bge.n	8009b88 <font_printStr+0xb8>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24

  while(*str) {
 8009b22:	e031      	b.n	8009b88 <font_printStr+0xb8>
    char ch = *str++;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	76fb      	strb	r3, [r7, #27]
    int wd = font_drawChar(x,y,ch);
 8009b2e:	7efb      	ldrb	r3, [r7, #27]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6a39      	ldr	r1, [r7, #32]
 8009b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b36:	f7fe ff21 	bl	800897c <font_drawChar>
 8009b3a:	6178      	str	r0, [r7, #20]
    x+=wd;
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	4413      	add	r3, r2
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
    if((cr && x>=scrWd) || ch==10) { 
 8009b44:	4b16      	ldr	r3, [pc, #88]	; (8009ba0 <font_printStr+0xd0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <font_printStr+0x86>
 8009b4c:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <font_printStr+0xcc>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	429a      	cmp	r2, r3
 8009b54:	da02      	bge.n	8009b5c <font_printStr+0x8c>
 8009b56:	7efb      	ldrb	r3, [r7, #27]
 8009b58:	2b0a      	cmp	r3, #10
 8009b5a:	d115      	bne.n	8009b88 <font_printStr+0xb8>
      x = cr ? 0 : xpos; 
 8009b5c:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <font_printStr+0xd0>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <font_printStr+0x98>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	e000      	b.n	8009b6a <font_printStr+0x9a>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
      y += rFont->ht * sy + spacingY; 
 8009b6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <font_printStr+0xd4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	789b      	ldrb	r3, [r3, #2]
 8009b72:	461a      	mov	r2, r3
 8009b74:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <font_printStr+0xd8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	fb03 f202 	mul.w	r2, r3, r2
 8009b7c:	4b0b      	ldr	r3, [pc, #44]	; (8009bac <font_printStr+0xdc>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4413      	add	r3, r2
 8009b82:	6a3a      	ldr	r2, [r7, #32]
 8009b84:	4413      	add	r3, r2
 8009b86:	623b      	str	r3, [r7, #32]
  while(*str) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1c9      	bne.n	8009b24 <font_printStr+0x54>
    }
  }
  return x;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3728      	adds	r7, #40	; 0x28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20006810 	.word	0x20006810
 8009ba0:	20006820 	.word	0x20006820
 8009ba4:	200067fc 	.word	0x200067fc
 8009ba8:	200015f4 	.word	0x200015f4
 8009bac:	20006818 	.word	0x20006818

08009bb0 <font_isNumber>:
// ----------------------------------------------------------------
// callbacks
bool font_isNumber(unsigned char ch)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) || ch==' ' || ch=='-';
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	2b2f      	cmp	r3, #47	; 0x2f
 8009bbe:	d902      	bls.n	8009bc6 <font_isNumber+0x16>
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	2b39      	cmp	r3, #57	; 0x39
 8009bc4:	d905      	bls.n	8009bd2 <font_isNumber+0x22>
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b20      	cmp	r3, #32
 8009bca:	d002      	beq.n	8009bd2 <font_isNumber+0x22>
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	2b2d      	cmp	r3, #45	; 0x2d
 8009bd0:	d101      	bne.n	8009bd6 <font_isNumber+0x26>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e000      	b.n	8009bd8 <font_isNumber+0x28>
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <__errno>:
 8009be4:	4b01      	ldr	r3, [pc, #4]	; (8009bec <__errno+0x8>)
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	20001640 	.word	0x20001640

08009bf0 <__libc_init_array>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	4e0d      	ldr	r6, [pc, #52]	; (8009c28 <__libc_init_array+0x38>)
 8009bf4:	4c0d      	ldr	r4, [pc, #52]	; (8009c2c <__libc_init_array+0x3c>)
 8009bf6:	1ba4      	subs	r4, r4, r6
 8009bf8:	10a4      	asrs	r4, r4, #2
 8009bfa:	2500      	movs	r5, #0
 8009bfc:	42a5      	cmp	r5, r4
 8009bfe:	d109      	bne.n	8009c14 <__libc_init_array+0x24>
 8009c00:	4e0b      	ldr	r6, [pc, #44]	; (8009c30 <__libc_init_array+0x40>)
 8009c02:	4c0c      	ldr	r4, [pc, #48]	; (8009c34 <__libc_init_array+0x44>)
 8009c04:	f003 fd90 	bl	800d728 <_init>
 8009c08:	1ba4      	subs	r4, r4, r6
 8009c0a:	10a4      	asrs	r4, r4, #2
 8009c0c:	2500      	movs	r5, #0
 8009c0e:	42a5      	cmp	r5, r4
 8009c10:	d105      	bne.n	8009c1e <__libc_init_array+0x2e>
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c18:	4798      	blx	r3
 8009c1a:	3501      	adds	r5, #1
 8009c1c:	e7ee      	b.n	8009bfc <__libc_init_array+0xc>
 8009c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c22:	4798      	blx	r3
 8009c24:	3501      	adds	r5, #1
 8009c26:	e7f2      	b.n	8009c0e <__libc_init_array+0x1e>
 8009c28:	0800f9f0 	.word	0x0800f9f0
 8009c2c:	0800f9f0 	.word	0x0800f9f0
 8009c30:	0800f9f0 	.word	0x0800f9f0
 8009c34:	0800f9f4 	.word	0x0800f9f4

08009c38 <memcpy>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	1e43      	subs	r3, r0, #1
 8009c3c:	440a      	add	r2, r1
 8009c3e:	4291      	cmp	r1, r2
 8009c40:	d100      	bne.n	8009c44 <memcpy+0xc>
 8009c42:	bd10      	pop	{r4, pc}
 8009c44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c4c:	e7f7      	b.n	8009c3e <memcpy+0x6>

08009c4e <memset>:
 8009c4e:	4402      	add	r2, r0
 8009c50:	4603      	mov	r3, r0
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d100      	bne.n	8009c58 <memset+0xa>
 8009c56:	4770      	bx	lr
 8009c58:	f803 1b01 	strb.w	r1, [r3], #1
 8009c5c:	e7f9      	b.n	8009c52 <memset+0x4>

08009c5e <__cvt>:
 8009c5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c62:	ec55 4b10 	vmov	r4, r5, d0
 8009c66:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009c68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c6c:	2d00      	cmp	r5, #0
 8009c6e:	460e      	mov	r6, r1
 8009c70:	4691      	mov	r9, r2
 8009c72:	4619      	mov	r1, r3
 8009c74:	bfb8      	it	lt
 8009c76:	4622      	movlt	r2, r4
 8009c78:	462b      	mov	r3, r5
 8009c7a:	f027 0720 	bic.w	r7, r7, #32
 8009c7e:	bfbb      	ittet	lt
 8009c80:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c84:	461d      	movlt	r5, r3
 8009c86:	2300      	movge	r3, #0
 8009c88:	232d      	movlt	r3, #45	; 0x2d
 8009c8a:	bfb8      	it	lt
 8009c8c:	4614      	movlt	r4, r2
 8009c8e:	2f46      	cmp	r7, #70	; 0x46
 8009c90:	700b      	strb	r3, [r1, #0]
 8009c92:	d004      	beq.n	8009c9e <__cvt+0x40>
 8009c94:	2f45      	cmp	r7, #69	; 0x45
 8009c96:	d100      	bne.n	8009c9a <__cvt+0x3c>
 8009c98:	3601      	adds	r6, #1
 8009c9a:	2102      	movs	r1, #2
 8009c9c:	e000      	b.n	8009ca0 <__cvt+0x42>
 8009c9e:	2103      	movs	r1, #3
 8009ca0:	ab03      	add	r3, sp, #12
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	ab02      	add	r3, sp, #8
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	4632      	mov	r2, r6
 8009caa:	4653      	mov	r3, sl
 8009cac:	ec45 4b10 	vmov	d0, r4, r5
 8009cb0:	f001 fdae 	bl	800b810 <_dtoa_r>
 8009cb4:	2f47      	cmp	r7, #71	; 0x47
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	d102      	bne.n	8009cc0 <__cvt+0x62>
 8009cba:	f019 0f01 	tst.w	r9, #1
 8009cbe:	d026      	beq.n	8009d0e <__cvt+0xb0>
 8009cc0:	2f46      	cmp	r7, #70	; 0x46
 8009cc2:	eb08 0906 	add.w	r9, r8, r6
 8009cc6:	d111      	bne.n	8009cec <__cvt+0x8e>
 8009cc8:	f898 3000 	ldrb.w	r3, [r8]
 8009ccc:	2b30      	cmp	r3, #48	; 0x30
 8009cce:	d10a      	bne.n	8009ce6 <__cvt+0x88>
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 ff1e 	bl	8000b18 <__aeabi_dcmpeq>
 8009cdc:	b918      	cbnz	r0, 8009ce6 <__cvt+0x88>
 8009cde:	f1c6 0601 	rsb	r6, r6, #1
 8009ce2:	f8ca 6000 	str.w	r6, [sl]
 8009ce6:	f8da 3000 	ldr.w	r3, [sl]
 8009cea:	4499      	add	r9, r3
 8009cec:	2200      	movs	r2, #0
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	f7f6 ff10 	bl	8000b18 <__aeabi_dcmpeq>
 8009cf8:	b938      	cbnz	r0, 8009d0a <__cvt+0xac>
 8009cfa:	2230      	movs	r2, #48	; 0x30
 8009cfc:	9b03      	ldr	r3, [sp, #12]
 8009cfe:	454b      	cmp	r3, r9
 8009d00:	d205      	bcs.n	8009d0e <__cvt+0xb0>
 8009d02:	1c59      	adds	r1, r3, #1
 8009d04:	9103      	str	r1, [sp, #12]
 8009d06:	701a      	strb	r2, [r3, #0]
 8009d08:	e7f8      	b.n	8009cfc <__cvt+0x9e>
 8009d0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d12:	eba3 0308 	sub.w	r3, r3, r8
 8009d16:	4640      	mov	r0, r8
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	b004      	add	sp, #16
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009d20 <__exponent>:
 8009d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d22:	2900      	cmp	r1, #0
 8009d24:	4604      	mov	r4, r0
 8009d26:	bfba      	itte	lt
 8009d28:	4249      	neglt	r1, r1
 8009d2a:	232d      	movlt	r3, #45	; 0x2d
 8009d2c:	232b      	movge	r3, #43	; 0x2b
 8009d2e:	2909      	cmp	r1, #9
 8009d30:	f804 2b02 	strb.w	r2, [r4], #2
 8009d34:	7043      	strb	r3, [r0, #1]
 8009d36:	dd20      	ble.n	8009d7a <__exponent+0x5a>
 8009d38:	f10d 0307 	add.w	r3, sp, #7
 8009d3c:	461f      	mov	r7, r3
 8009d3e:	260a      	movs	r6, #10
 8009d40:	fb91 f5f6 	sdiv	r5, r1, r6
 8009d44:	fb06 1115 	mls	r1, r6, r5, r1
 8009d48:	3130      	adds	r1, #48	; 0x30
 8009d4a:	2d09      	cmp	r5, #9
 8009d4c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d50:	f103 32ff 	add.w	r2, r3, #4294967295
 8009d54:	4629      	mov	r1, r5
 8009d56:	dc09      	bgt.n	8009d6c <__exponent+0x4c>
 8009d58:	3130      	adds	r1, #48	; 0x30
 8009d5a:	3b02      	subs	r3, #2
 8009d5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009d60:	42bb      	cmp	r3, r7
 8009d62:	4622      	mov	r2, r4
 8009d64:	d304      	bcc.n	8009d70 <__exponent+0x50>
 8009d66:	1a10      	subs	r0, r2, r0
 8009d68:	b003      	add	sp, #12
 8009d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	e7e7      	b.n	8009d40 <__exponent+0x20>
 8009d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d74:	f804 2b01 	strb.w	r2, [r4], #1
 8009d78:	e7f2      	b.n	8009d60 <__exponent+0x40>
 8009d7a:	2330      	movs	r3, #48	; 0x30
 8009d7c:	4419      	add	r1, r3
 8009d7e:	7083      	strb	r3, [r0, #2]
 8009d80:	1d02      	adds	r2, r0, #4
 8009d82:	70c1      	strb	r1, [r0, #3]
 8009d84:	e7ef      	b.n	8009d66 <__exponent+0x46>
	...

08009d88 <_printf_float>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	b08d      	sub	sp, #52	; 0x34
 8009d8e:	460c      	mov	r4, r1
 8009d90:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009d94:	4616      	mov	r6, r2
 8009d96:	461f      	mov	r7, r3
 8009d98:	4605      	mov	r5, r0
 8009d9a:	f002 fe1d 	bl	800c9d8 <_localeconv_r>
 8009d9e:	6803      	ldr	r3, [r0, #0]
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7f6 fa3c 	bl	8000220 <strlen>
 8009da8:	2300      	movs	r3, #0
 8009daa:	930a      	str	r3, [sp, #40]	; 0x28
 8009dac:	f8d8 3000 	ldr.w	r3, [r8]
 8009db0:	9005      	str	r0, [sp, #20]
 8009db2:	3307      	adds	r3, #7
 8009db4:	f023 0307 	bic.w	r3, r3, #7
 8009db8:	f103 0208 	add.w	r2, r3, #8
 8009dbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009dc0:	f8d4 b000 	ldr.w	fp, [r4]
 8009dc4:	f8c8 2000 	str.w	r2, [r8]
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009dd0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009dd4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dd8:	9307      	str	r3, [sp, #28]
 8009dda:	f8cd 8018 	str.w	r8, [sp, #24]
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	4ba7      	ldr	r3, [pc, #668]	; (800a080 <_printf_float+0x2f8>)
 8009de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009de8:	f7f6 fec8 	bl	8000b7c <__aeabi_dcmpun>
 8009dec:	bb70      	cbnz	r0, 8009e4c <_printf_float+0xc4>
 8009dee:	f04f 32ff 	mov.w	r2, #4294967295
 8009df2:	4ba3      	ldr	r3, [pc, #652]	; (800a080 <_printf_float+0x2f8>)
 8009df4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009df8:	f7f6 fea2 	bl	8000b40 <__aeabi_dcmple>
 8009dfc:	bb30      	cbnz	r0, 8009e4c <_printf_float+0xc4>
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2300      	movs	r3, #0
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fe91 	bl	8000b2c <__aeabi_dcmplt>
 8009e0a:	b110      	cbz	r0, 8009e12 <_printf_float+0x8a>
 8009e0c:	232d      	movs	r3, #45	; 0x2d
 8009e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e12:	4a9c      	ldr	r2, [pc, #624]	; (800a084 <_printf_float+0x2fc>)
 8009e14:	4b9c      	ldr	r3, [pc, #624]	; (800a088 <_printf_float+0x300>)
 8009e16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009e1a:	bf8c      	ite	hi
 8009e1c:	4690      	movhi	r8, r2
 8009e1e:	4698      	movls	r8, r3
 8009e20:	2303      	movs	r3, #3
 8009e22:	f02b 0204 	bic.w	r2, fp, #4
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	6022      	str	r2, [r4, #0]
 8009e2a:	f04f 0900 	mov.w	r9, #0
 8009e2e:	9700      	str	r7, [sp, #0]
 8009e30:	4633      	mov	r3, r6
 8009e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e34:	4621      	mov	r1, r4
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 f9e6 	bl	800a208 <_printf_common>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f040 808d 	bne.w	8009f5c <_printf_float+0x1d4>
 8009e42:	f04f 30ff 	mov.w	r0, #4294967295
 8009e46:	b00d      	add	sp, #52	; 0x34
 8009e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4c:	4642      	mov	r2, r8
 8009e4e:	464b      	mov	r3, r9
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fe92 	bl	8000b7c <__aeabi_dcmpun>
 8009e58:	b110      	cbz	r0, 8009e60 <_printf_float+0xd8>
 8009e5a:	4a8c      	ldr	r2, [pc, #560]	; (800a08c <_printf_float+0x304>)
 8009e5c:	4b8c      	ldr	r3, [pc, #560]	; (800a090 <_printf_float+0x308>)
 8009e5e:	e7da      	b.n	8009e16 <_printf_float+0x8e>
 8009e60:	6861      	ldr	r1, [r4, #4]
 8009e62:	1c4b      	adds	r3, r1, #1
 8009e64:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009e68:	a80a      	add	r0, sp, #40	; 0x28
 8009e6a:	d13e      	bne.n	8009eea <_printf_float+0x162>
 8009e6c:	2306      	movs	r3, #6
 8009e6e:	6063      	str	r3, [r4, #4]
 8009e70:	2300      	movs	r3, #0
 8009e72:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009e76:	ab09      	add	r3, sp, #36	; 0x24
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	ec49 8b10 	vmov	d0, r8, r9
 8009e7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e82:	6022      	str	r2, [r4, #0]
 8009e84:	f8cd a004 	str.w	sl, [sp, #4]
 8009e88:	6861      	ldr	r1, [r4, #4]
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f7ff fee7 	bl	8009c5e <__cvt>
 8009e90:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009e94:	2b47      	cmp	r3, #71	; 0x47
 8009e96:	4680      	mov	r8, r0
 8009e98:	d109      	bne.n	8009eae <_printf_float+0x126>
 8009e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9c:	1cd8      	adds	r0, r3, #3
 8009e9e:	db02      	blt.n	8009ea6 <_printf_float+0x11e>
 8009ea0:	6862      	ldr	r2, [r4, #4]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	dd47      	ble.n	8009f36 <_printf_float+0x1ae>
 8009ea6:	f1aa 0a02 	sub.w	sl, sl, #2
 8009eaa:	fa5f fa8a 	uxtb.w	sl, sl
 8009eae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eb4:	d824      	bhi.n	8009f00 <_printf_float+0x178>
 8009eb6:	3901      	subs	r1, #1
 8009eb8:	4652      	mov	r2, sl
 8009eba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ebe:	9109      	str	r1, [sp, #36]	; 0x24
 8009ec0:	f7ff ff2e 	bl	8009d20 <__exponent>
 8009ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ec6:	1813      	adds	r3, r2, r0
 8009ec8:	2a01      	cmp	r2, #1
 8009eca:	4681      	mov	r9, r0
 8009ecc:	6123      	str	r3, [r4, #16]
 8009ece:	dc02      	bgt.n	8009ed6 <_printf_float+0x14e>
 8009ed0:	6822      	ldr	r2, [r4, #0]
 8009ed2:	07d1      	lsls	r1, r2, #31
 8009ed4:	d501      	bpl.n	8009eda <_printf_float+0x152>
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	6123      	str	r3, [r4, #16]
 8009eda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0a5      	beq.n	8009e2e <_printf_float+0xa6>
 8009ee2:	232d      	movs	r3, #45	; 0x2d
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee8:	e7a1      	b.n	8009e2e <_printf_float+0xa6>
 8009eea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009eee:	f000 8177 	beq.w	800a1e0 <_printf_float+0x458>
 8009ef2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009ef6:	d1bb      	bne.n	8009e70 <_printf_float+0xe8>
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	d1b9      	bne.n	8009e70 <_printf_float+0xe8>
 8009efc:	2301      	movs	r3, #1
 8009efe:	e7b6      	b.n	8009e6e <_printf_float+0xe6>
 8009f00:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009f04:	d119      	bne.n	8009f3a <_printf_float+0x1b2>
 8009f06:	2900      	cmp	r1, #0
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	dd0c      	ble.n	8009f26 <_printf_float+0x19e>
 8009f0c:	6121      	str	r1, [r4, #16]
 8009f0e:	b913      	cbnz	r3, 8009f16 <_printf_float+0x18e>
 8009f10:	6822      	ldr	r2, [r4, #0]
 8009f12:	07d2      	lsls	r2, r2, #31
 8009f14:	d502      	bpl.n	8009f1c <_printf_float+0x194>
 8009f16:	3301      	adds	r3, #1
 8009f18:	440b      	add	r3, r1
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f20:	f04f 0900 	mov.w	r9, #0
 8009f24:	e7d9      	b.n	8009eda <_printf_float+0x152>
 8009f26:	b913      	cbnz	r3, 8009f2e <_printf_float+0x1a6>
 8009f28:	6822      	ldr	r2, [r4, #0]
 8009f2a:	07d0      	lsls	r0, r2, #31
 8009f2c:	d501      	bpl.n	8009f32 <_printf_float+0x1aa>
 8009f2e:	3302      	adds	r3, #2
 8009f30:	e7f3      	b.n	8009f1a <_printf_float+0x192>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e7f1      	b.n	8009f1a <_printf_float+0x192>
 8009f36:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009f3a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	db05      	blt.n	8009f4e <_printf_float+0x1c6>
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	6123      	str	r3, [r4, #16]
 8009f46:	07d1      	lsls	r1, r2, #31
 8009f48:	d5e8      	bpl.n	8009f1c <_printf_float+0x194>
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	e7e5      	b.n	8009f1a <_printf_float+0x192>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bfd4      	ite	le
 8009f52:	f1c3 0302 	rsble	r3, r3, #2
 8009f56:	2301      	movgt	r3, #1
 8009f58:	4413      	add	r3, r2
 8009f5a:	e7de      	b.n	8009f1a <_printf_float+0x192>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	055a      	lsls	r2, r3, #21
 8009f60:	d407      	bmi.n	8009f72 <_printf_float+0x1ea>
 8009f62:	6923      	ldr	r3, [r4, #16]
 8009f64:	4642      	mov	r2, r8
 8009f66:	4631      	mov	r1, r6
 8009f68:	4628      	mov	r0, r5
 8009f6a:	47b8      	blx	r7
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d12b      	bne.n	8009fc8 <_printf_float+0x240>
 8009f70:	e767      	b.n	8009e42 <_printf_float+0xba>
 8009f72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009f76:	f240 80dc 	bls.w	800a132 <_printf_float+0x3aa>
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f82:	f7f6 fdc9 	bl	8000b18 <__aeabi_dcmpeq>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d033      	beq.n	8009ff2 <_printf_float+0x26a>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4a41      	ldr	r2, [pc, #260]	; (800a094 <_printf_float+0x30c>)
 8009f8e:	4631      	mov	r1, r6
 8009f90:	4628      	mov	r0, r5
 8009f92:	47b8      	blx	r7
 8009f94:	3001      	adds	r0, #1
 8009f96:	f43f af54 	beq.w	8009e42 <_printf_float+0xba>
 8009f9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	db02      	blt.n	8009fa8 <_printf_float+0x220>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	07d8      	lsls	r0, r3, #31
 8009fa6:	d50f      	bpl.n	8009fc8 <_printf_float+0x240>
 8009fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fac:	4631      	mov	r1, r6
 8009fae:	4628      	mov	r0, r5
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	f43f af45 	beq.w	8009e42 <_printf_float+0xba>
 8009fb8:	f04f 0800 	mov.w	r8, #0
 8009fbc:	f104 091a 	add.w	r9, r4, #26
 8009fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	4543      	cmp	r3, r8
 8009fc6:	dc09      	bgt.n	8009fdc <_printf_float+0x254>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	079b      	lsls	r3, r3, #30
 8009fcc:	f100 8103 	bmi.w	800a1d6 <_printf_float+0x44e>
 8009fd0:	68e0      	ldr	r0, [r4, #12]
 8009fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd4:	4298      	cmp	r0, r3
 8009fd6:	bfb8      	it	lt
 8009fd8:	4618      	movlt	r0, r3
 8009fda:	e734      	b.n	8009e46 <_printf_float+0xbe>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	464a      	mov	r2, r9
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	47b8      	blx	r7
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f43f af2b 	beq.w	8009e42 <_printf_float+0xba>
 8009fec:	f108 0801 	add.w	r8, r8, #1
 8009ff0:	e7e6      	b.n	8009fc0 <_printf_float+0x238>
 8009ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dc2b      	bgt.n	800a050 <_printf_float+0x2c8>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4a26      	ldr	r2, [pc, #152]	; (800a094 <_printf_float+0x30c>)
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4628      	mov	r0, r5
 800a000:	47b8      	blx	r7
 800a002:	3001      	adds	r0, #1
 800a004:	f43f af1d 	beq.w	8009e42 <_printf_float+0xba>
 800a008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00a:	b923      	cbnz	r3, 800a016 <_printf_float+0x28e>
 800a00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00e:	b913      	cbnz	r3, 800a016 <_printf_float+0x28e>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	07d9      	lsls	r1, r3, #31
 800a014:	d5d8      	bpl.n	8009fc8 <_printf_float+0x240>
 800a016:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a01a:	4631      	mov	r1, r6
 800a01c:	4628      	mov	r0, r5
 800a01e:	47b8      	blx	r7
 800a020:	3001      	adds	r0, #1
 800a022:	f43f af0e 	beq.w	8009e42 <_printf_float+0xba>
 800a026:	f04f 0900 	mov.w	r9, #0
 800a02a:	f104 0a1a 	add.w	sl, r4, #26
 800a02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a030:	425b      	negs	r3, r3
 800a032:	454b      	cmp	r3, r9
 800a034:	dc01      	bgt.n	800a03a <_printf_float+0x2b2>
 800a036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a038:	e794      	b.n	8009f64 <_printf_float+0x1dc>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4652      	mov	r2, sl
 800a03e:	4631      	mov	r1, r6
 800a040:	4628      	mov	r0, r5
 800a042:	47b8      	blx	r7
 800a044:	3001      	adds	r0, #1
 800a046:	f43f aefc 	beq.w	8009e42 <_printf_float+0xba>
 800a04a:	f109 0901 	add.w	r9, r9, #1
 800a04e:	e7ee      	b.n	800a02e <_printf_float+0x2a6>
 800a050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a054:	429a      	cmp	r2, r3
 800a056:	bfa8      	it	ge
 800a058:	461a      	movge	r2, r3
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	4691      	mov	r9, r2
 800a05e:	dd07      	ble.n	800a070 <_printf_float+0x2e8>
 800a060:	4613      	mov	r3, r2
 800a062:	4631      	mov	r1, r6
 800a064:	4642      	mov	r2, r8
 800a066:	4628      	mov	r0, r5
 800a068:	47b8      	blx	r7
 800a06a:	3001      	adds	r0, #1
 800a06c:	f43f aee9 	beq.w	8009e42 <_printf_float+0xba>
 800a070:	f104 031a 	add.w	r3, r4, #26
 800a074:	f04f 0b00 	mov.w	fp, #0
 800a078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a07c:	9306      	str	r3, [sp, #24]
 800a07e:	e015      	b.n	800a0ac <_printf_float+0x324>
 800a080:	7fefffff 	.word	0x7fefffff
 800a084:	0800f73a 	.word	0x0800f73a
 800a088:	0800f736 	.word	0x0800f736
 800a08c:	0800f742 	.word	0x0800f742
 800a090:	0800f73e 	.word	0x0800f73e
 800a094:	0800f746 	.word	0x0800f746
 800a098:	2301      	movs	r3, #1
 800a09a:	9a06      	ldr	r2, [sp, #24]
 800a09c:	4631      	mov	r1, r6
 800a09e:	4628      	mov	r0, r5
 800a0a0:	47b8      	blx	r7
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	f43f aecd 	beq.w	8009e42 <_printf_float+0xba>
 800a0a8:	f10b 0b01 	add.w	fp, fp, #1
 800a0ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a0b0:	ebaa 0309 	sub.w	r3, sl, r9
 800a0b4:	455b      	cmp	r3, fp
 800a0b6:	dcef      	bgt.n	800a098 <_printf_float+0x310>
 800a0b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	44d0      	add	r8, sl
 800a0c0:	db15      	blt.n	800a0ee <_printf_float+0x366>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	07da      	lsls	r2, r3, #31
 800a0c6:	d412      	bmi.n	800a0ee <_printf_float+0x366>
 800a0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0cc:	eba3 020a 	sub.w	r2, r3, sl
 800a0d0:	eba3 0a01 	sub.w	sl, r3, r1
 800a0d4:	4592      	cmp	sl, r2
 800a0d6:	bfa8      	it	ge
 800a0d8:	4692      	movge	sl, r2
 800a0da:	f1ba 0f00 	cmp.w	sl, #0
 800a0de:	dc0e      	bgt.n	800a0fe <_printf_float+0x376>
 800a0e0:	f04f 0800 	mov.w	r8, #0
 800a0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0e8:	f104 091a 	add.w	r9, r4, #26
 800a0ec:	e019      	b.n	800a122 <_printf_float+0x39a>
 800a0ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d1e5      	bne.n	800a0c8 <_printf_float+0x340>
 800a0fc:	e6a1      	b.n	8009e42 <_printf_float+0xba>
 800a0fe:	4653      	mov	r3, sl
 800a100:	4642      	mov	r2, r8
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	d1e9      	bne.n	800a0e0 <_printf_float+0x358>
 800a10c:	e699      	b.n	8009e42 <_printf_float+0xba>
 800a10e:	2301      	movs	r3, #1
 800a110:	464a      	mov	r2, r9
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	f43f ae92 	beq.w	8009e42 <_printf_float+0xba>
 800a11e:	f108 0801 	add.w	r8, r8, #1
 800a122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a126:	1a9b      	subs	r3, r3, r2
 800a128:	eba3 030a 	sub.w	r3, r3, sl
 800a12c:	4543      	cmp	r3, r8
 800a12e:	dcee      	bgt.n	800a10e <_printf_float+0x386>
 800a130:	e74a      	b.n	8009fc8 <_printf_float+0x240>
 800a132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a134:	2a01      	cmp	r2, #1
 800a136:	dc01      	bgt.n	800a13c <_printf_float+0x3b4>
 800a138:	07db      	lsls	r3, r3, #31
 800a13a:	d53a      	bpl.n	800a1b2 <_printf_float+0x42a>
 800a13c:	2301      	movs	r3, #1
 800a13e:	4642      	mov	r2, r8
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	f43f ae7b 	beq.w	8009e42 <_printf_float+0xba>
 800a14c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a150:	4631      	mov	r1, r6
 800a152:	4628      	mov	r0, r5
 800a154:	47b8      	blx	r7
 800a156:	3001      	adds	r0, #1
 800a158:	f108 0801 	add.w	r8, r8, #1
 800a15c:	f43f ae71 	beq.w	8009e42 <_printf_float+0xba>
 800a160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a162:	2200      	movs	r2, #0
 800a164:	f103 3aff 	add.w	sl, r3, #4294967295
 800a168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a16c:	2300      	movs	r3, #0
 800a16e:	f7f6 fcd3 	bl	8000b18 <__aeabi_dcmpeq>
 800a172:	b9c8      	cbnz	r0, 800a1a8 <_printf_float+0x420>
 800a174:	4653      	mov	r3, sl
 800a176:	4642      	mov	r2, r8
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	47b8      	blx	r7
 800a17e:	3001      	adds	r0, #1
 800a180:	d10e      	bne.n	800a1a0 <_printf_float+0x418>
 800a182:	e65e      	b.n	8009e42 <_printf_float+0xba>
 800a184:	2301      	movs	r3, #1
 800a186:	4652      	mov	r2, sl
 800a188:	4631      	mov	r1, r6
 800a18a:	4628      	mov	r0, r5
 800a18c:	47b8      	blx	r7
 800a18e:	3001      	adds	r0, #1
 800a190:	f43f ae57 	beq.w	8009e42 <_printf_float+0xba>
 800a194:	f108 0801 	add.w	r8, r8, #1
 800a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19a:	3b01      	subs	r3, #1
 800a19c:	4543      	cmp	r3, r8
 800a19e:	dcf1      	bgt.n	800a184 <_printf_float+0x3fc>
 800a1a0:	464b      	mov	r3, r9
 800a1a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1a6:	e6de      	b.n	8009f66 <_printf_float+0x1de>
 800a1a8:	f04f 0800 	mov.w	r8, #0
 800a1ac:	f104 0a1a 	add.w	sl, r4, #26
 800a1b0:	e7f2      	b.n	800a198 <_printf_float+0x410>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e7df      	b.n	800a176 <_printf_float+0x3ee>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	464a      	mov	r2, r9
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f ae3e 	beq.w	8009e42 <_printf_float+0xba>
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	68e3      	ldr	r3, [r4, #12]
 800a1cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1ce:	1a9b      	subs	r3, r3, r2
 800a1d0:	4543      	cmp	r3, r8
 800a1d2:	dcf0      	bgt.n	800a1b6 <_printf_float+0x42e>
 800a1d4:	e6fc      	b.n	8009fd0 <_printf_float+0x248>
 800a1d6:	f04f 0800 	mov.w	r8, #0
 800a1da:	f104 0919 	add.w	r9, r4, #25
 800a1de:	e7f4      	b.n	800a1ca <_printf_float+0x442>
 800a1e0:	2900      	cmp	r1, #0
 800a1e2:	f43f ae8b 	beq.w	8009efc <_printf_float+0x174>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a1ec:	ab09      	add	r3, sp, #36	; 0x24
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	ec49 8b10 	vmov	d0, r8, r9
 800a1f4:	6022      	str	r2, [r4, #0]
 800a1f6:	f8cd a004 	str.w	sl, [sp, #4]
 800a1fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1fe:	4628      	mov	r0, r5
 800a200:	f7ff fd2d 	bl	8009c5e <__cvt>
 800a204:	4680      	mov	r8, r0
 800a206:	e648      	b.n	8009e9a <_printf_float+0x112>

0800a208 <_printf_common>:
 800a208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	4691      	mov	r9, r2
 800a20e:	461f      	mov	r7, r3
 800a210:	688a      	ldr	r2, [r1, #8]
 800a212:	690b      	ldr	r3, [r1, #16]
 800a214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a218:	4293      	cmp	r3, r2
 800a21a:	bfb8      	it	lt
 800a21c:	4613      	movlt	r3, r2
 800a21e:	f8c9 3000 	str.w	r3, [r9]
 800a222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a226:	4606      	mov	r6, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	b112      	cbz	r2, 800a232 <_printf_common+0x2a>
 800a22c:	3301      	adds	r3, #1
 800a22e:	f8c9 3000 	str.w	r3, [r9]
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	0699      	lsls	r1, r3, #26
 800a236:	bf42      	ittt	mi
 800a238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a23c:	3302      	addmi	r3, #2
 800a23e:	f8c9 3000 	strmi.w	r3, [r9]
 800a242:	6825      	ldr	r5, [r4, #0]
 800a244:	f015 0506 	ands.w	r5, r5, #6
 800a248:	d107      	bne.n	800a25a <_printf_common+0x52>
 800a24a:	f104 0a19 	add.w	sl, r4, #25
 800a24e:	68e3      	ldr	r3, [r4, #12]
 800a250:	f8d9 2000 	ldr.w	r2, [r9]
 800a254:	1a9b      	subs	r3, r3, r2
 800a256:	42ab      	cmp	r3, r5
 800a258:	dc28      	bgt.n	800a2ac <_printf_common+0xa4>
 800a25a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	3300      	adds	r3, #0
 800a262:	bf18      	it	ne
 800a264:	2301      	movne	r3, #1
 800a266:	0692      	lsls	r2, r2, #26
 800a268:	d42d      	bmi.n	800a2c6 <_printf_common+0xbe>
 800a26a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a26e:	4639      	mov	r1, r7
 800a270:	4630      	mov	r0, r6
 800a272:	47c0      	blx	r8
 800a274:	3001      	adds	r0, #1
 800a276:	d020      	beq.n	800a2ba <_printf_common+0xb2>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	68e5      	ldr	r5, [r4, #12]
 800a27c:	f8d9 2000 	ldr.w	r2, [r9]
 800a280:	f003 0306 	and.w	r3, r3, #6
 800a284:	2b04      	cmp	r3, #4
 800a286:	bf08      	it	eq
 800a288:	1aad      	subeq	r5, r5, r2
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	bf0c      	ite	eq
 800a290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a294:	2500      	movne	r5, #0
 800a296:	4293      	cmp	r3, r2
 800a298:	bfc4      	itt	gt
 800a29a:	1a9b      	subgt	r3, r3, r2
 800a29c:	18ed      	addgt	r5, r5, r3
 800a29e:	f04f 0900 	mov.w	r9, #0
 800a2a2:	341a      	adds	r4, #26
 800a2a4:	454d      	cmp	r5, r9
 800a2a6:	d11a      	bne.n	800a2de <_printf_common+0xd6>
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	e008      	b.n	800a2be <_printf_common+0xb6>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	4652      	mov	r2, sl
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	47c0      	blx	r8
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	d103      	bne.n	800a2c2 <_printf_common+0xba>
 800a2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c2:	3501      	adds	r5, #1
 800a2c4:	e7c3      	b.n	800a24e <_printf_common+0x46>
 800a2c6:	18e1      	adds	r1, r4, r3
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	2030      	movs	r0, #48	; 0x30
 800a2cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2d0:	4422      	add	r2, r4
 800a2d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2da:	3302      	adds	r3, #2
 800a2dc:	e7c5      	b.n	800a26a <_printf_common+0x62>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	47c0      	blx	r8
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d0e6      	beq.n	800a2ba <_printf_common+0xb2>
 800a2ec:	f109 0901 	add.w	r9, r9, #1
 800a2f0:	e7d8      	b.n	800a2a4 <_printf_common+0x9c>
	...

0800a2f4 <_printf_i>:
 800a2f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	7e09      	ldrb	r1, [r1, #24]
 800a300:	b085      	sub	sp, #20
 800a302:	296e      	cmp	r1, #110	; 0x6e
 800a304:	4617      	mov	r7, r2
 800a306:	4606      	mov	r6, r0
 800a308:	4698      	mov	r8, r3
 800a30a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a30c:	f000 80b3 	beq.w	800a476 <_printf_i+0x182>
 800a310:	d822      	bhi.n	800a358 <_printf_i+0x64>
 800a312:	2963      	cmp	r1, #99	; 0x63
 800a314:	d036      	beq.n	800a384 <_printf_i+0x90>
 800a316:	d80a      	bhi.n	800a32e <_printf_i+0x3a>
 800a318:	2900      	cmp	r1, #0
 800a31a:	f000 80b9 	beq.w	800a490 <_printf_i+0x19c>
 800a31e:	2958      	cmp	r1, #88	; 0x58
 800a320:	f000 8083 	beq.w	800a42a <_printf_i+0x136>
 800a324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a32c:	e032      	b.n	800a394 <_printf_i+0xa0>
 800a32e:	2964      	cmp	r1, #100	; 0x64
 800a330:	d001      	beq.n	800a336 <_printf_i+0x42>
 800a332:	2969      	cmp	r1, #105	; 0x69
 800a334:	d1f6      	bne.n	800a324 <_printf_i+0x30>
 800a336:	6820      	ldr	r0, [r4, #0]
 800a338:	6813      	ldr	r3, [r2, #0]
 800a33a:	0605      	lsls	r5, r0, #24
 800a33c:	f103 0104 	add.w	r1, r3, #4
 800a340:	d52a      	bpl.n	800a398 <_printf_i+0xa4>
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	da03      	bge.n	800a352 <_printf_i+0x5e>
 800a34a:	222d      	movs	r2, #45	; 0x2d
 800a34c:	425b      	negs	r3, r3
 800a34e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a352:	486f      	ldr	r0, [pc, #444]	; (800a510 <_printf_i+0x21c>)
 800a354:	220a      	movs	r2, #10
 800a356:	e039      	b.n	800a3cc <_printf_i+0xd8>
 800a358:	2973      	cmp	r1, #115	; 0x73
 800a35a:	f000 809d 	beq.w	800a498 <_printf_i+0x1a4>
 800a35e:	d808      	bhi.n	800a372 <_printf_i+0x7e>
 800a360:	296f      	cmp	r1, #111	; 0x6f
 800a362:	d020      	beq.n	800a3a6 <_printf_i+0xb2>
 800a364:	2970      	cmp	r1, #112	; 0x70
 800a366:	d1dd      	bne.n	800a324 <_printf_i+0x30>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	f043 0320 	orr.w	r3, r3, #32
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	e003      	b.n	800a37a <_printf_i+0x86>
 800a372:	2975      	cmp	r1, #117	; 0x75
 800a374:	d017      	beq.n	800a3a6 <_printf_i+0xb2>
 800a376:	2978      	cmp	r1, #120	; 0x78
 800a378:	d1d4      	bne.n	800a324 <_printf_i+0x30>
 800a37a:	2378      	movs	r3, #120	; 0x78
 800a37c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a380:	4864      	ldr	r0, [pc, #400]	; (800a514 <_printf_i+0x220>)
 800a382:	e055      	b.n	800a430 <_printf_i+0x13c>
 800a384:	6813      	ldr	r3, [r2, #0]
 800a386:	1d19      	adds	r1, r3, #4
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6011      	str	r1, [r2, #0]
 800a38c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a394:	2301      	movs	r3, #1
 800a396:	e08c      	b.n	800a4b2 <_printf_i+0x1be>
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6011      	str	r1, [r2, #0]
 800a39c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3a0:	bf18      	it	ne
 800a3a2:	b21b      	sxthne	r3, r3
 800a3a4:	e7cf      	b.n	800a346 <_printf_i+0x52>
 800a3a6:	6813      	ldr	r3, [r2, #0]
 800a3a8:	6825      	ldr	r5, [r4, #0]
 800a3aa:	1d18      	adds	r0, r3, #4
 800a3ac:	6010      	str	r0, [r2, #0]
 800a3ae:	0628      	lsls	r0, r5, #24
 800a3b0:	d501      	bpl.n	800a3b6 <_printf_i+0xc2>
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	e002      	b.n	800a3bc <_printf_i+0xc8>
 800a3b6:	0668      	lsls	r0, r5, #25
 800a3b8:	d5fb      	bpl.n	800a3b2 <_printf_i+0xbe>
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	4854      	ldr	r0, [pc, #336]	; (800a510 <_printf_i+0x21c>)
 800a3be:	296f      	cmp	r1, #111	; 0x6f
 800a3c0:	bf14      	ite	ne
 800a3c2:	220a      	movne	r2, #10
 800a3c4:	2208      	moveq	r2, #8
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3cc:	6865      	ldr	r5, [r4, #4]
 800a3ce:	60a5      	str	r5, [r4, #8]
 800a3d0:	2d00      	cmp	r5, #0
 800a3d2:	f2c0 8095 	blt.w	800a500 <_printf_i+0x20c>
 800a3d6:	6821      	ldr	r1, [r4, #0]
 800a3d8:	f021 0104 	bic.w	r1, r1, #4
 800a3dc:	6021      	str	r1, [r4, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d13d      	bne.n	800a45e <_printf_i+0x16a>
 800a3e2:	2d00      	cmp	r5, #0
 800a3e4:	f040 808e 	bne.w	800a504 <_printf_i+0x210>
 800a3e8:	4665      	mov	r5, ip
 800a3ea:	2a08      	cmp	r2, #8
 800a3ec:	d10b      	bne.n	800a406 <_printf_i+0x112>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	07db      	lsls	r3, r3, #31
 800a3f2:	d508      	bpl.n	800a406 <_printf_i+0x112>
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	6862      	ldr	r2, [r4, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	bfde      	ittt	le
 800a3fc:	2330      	movle	r3, #48	; 0x30
 800a3fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a402:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a406:	ebac 0305 	sub.w	r3, ip, r5
 800a40a:	6123      	str	r3, [r4, #16]
 800a40c:	f8cd 8000 	str.w	r8, [sp]
 800a410:	463b      	mov	r3, r7
 800a412:	aa03      	add	r2, sp, #12
 800a414:	4621      	mov	r1, r4
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff fef6 	bl	800a208 <_printf_common>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d14d      	bne.n	800a4bc <_printf_i+0x1c8>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	b005      	add	sp, #20
 800a426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42a:	4839      	ldr	r0, [pc, #228]	; (800a510 <_printf_i+0x21c>)
 800a42c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a430:	6813      	ldr	r3, [r2, #0]
 800a432:	6821      	ldr	r1, [r4, #0]
 800a434:	1d1d      	adds	r5, r3, #4
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6015      	str	r5, [r2, #0]
 800a43a:	060a      	lsls	r2, r1, #24
 800a43c:	d50b      	bpl.n	800a456 <_printf_i+0x162>
 800a43e:	07ca      	lsls	r2, r1, #31
 800a440:	bf44      	itt	mi
 800a442:	f041 0120 	orrmi.w	r1, r1, #32
 800a446:	6021      	strmi	r1, [r4, #0]
 800a448:	b91b      	cbnz	r3, 800a452 <_printf_i+0x15e>
 800a44a:	6822      	ldr	r2, [r4, #0]
 800a44c:	f022 0220 	bic.w	r2, r2, #32
 800a450:	6022      	str	r2, [r4, #0]
 800a452:	2210      	movs	r2, #16
 800a454:	e7b7      	b.n	800a3c6 <_printf_i+0xd2>
 800a456:	064d      	lsls	r5, r1, #25
 800a458:	bf48      	it	mi
 800a45a:	b29b      	uxthmi	r3, r3
 800a45c:	e7ef      	b.n	800a43e <_printf_i+0x14a>
 800a45e:	4665      	mov	r5, ip
 800a460:	fbb3 f1f2 	udiv	r1, r3, r2
 800a464:	fb02 3311 	mls	r3, r2, r1, r3
 800a468:	5cc3      	ldrb	r3, [r0, r3]
 800a46a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a46e:	460b      	mov	r3, r1
 800a470:	2900      	cmp	r1, #0
 800a472:	d1f5      	bne.n	800a460 <_printf_i+0x16c>
 800a474:	e7b9      	b.n	800a3ea <_printf_i+0xf6>
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	6825      	ldr	r5, [r4, #0]
 800a47a:	6961      	ldr	r1, [r4, #20]
 800a47c:	1d18      	adds	r0, r3, #4
 800a47e:	6010      	str	r0, [r2, #0]
 800a480:	0628      	lsls	r0, r5, #24
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	d501      	bpl.n	800a48a <_printf_i+0x196>
 800a486:	6019      	str	r1, [r3, #0]
 800a488:	e002      	b.n	800a490 <_printf_i+0x19c>
 800a48a:	066a      	lsls	r2, r5, #25
 800a48c:	d5fb      	bpl.n	800a486 <_printf_i+0x192>
 800a48e:	8019      	strh	r1, [r3, #0]
 800a490:	2300      	movs	r3, #0
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	4665      	mov	r5, ip
 800a496:	e7b9      	b.n	800a40c <_printf_i+0x118>
 800a498:	6813      	ldr	r3, [r2, #0]
 800a49a:	1d19      	adds	r1, r3, #4
 800a49c:	6011      	str	r1, [r2, #0]
 800a49e:	681d      	ldr	r5, [r3, #0]
 800a4a0:	6862      	ldr	r2, [r4, #4]
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f7f5 fec3 	bl	8000230 <memchr>
 800a4aa:	b108      	cbz	r0, 800a4b0 <_printf_i+0x1bc>
 800a4ac:	1b40      	subs	r0, r0, r5
 800a4ae:	6060      	str	r0, [r4, #4]
 800a4b0:	6863      	ldr	r3, [r4, #4]
 800a4b2:	6123      	str	r3, [r4, #16]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ba:	e7a7      	b.n	800a40c <_printf_i+0x118>
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	462a      	mov	r2, r5
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	47c0      	blx	r8
 800a4c6:	3001      	adds	r0, #1
 800a4c8:	d0aa      	beq.n	800a420 <_printf_i+0x12c>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	079b      	lsls	r3, r3, #30
 800a4ce:	d413      	bmi.n	800a4f8 <_printf_i+0x204>
 800a4d0:	68e0      	ldr	r0, [r4, #12]
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	4298      	cmp	r0, r3
 800a4d6:	bfb8      	it	lt
 800a4d8:	4618      	movlt	r0, r3
 800a4da:	e7a3      	b.n	800a424 <_printf_i+0x130>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	464a      	mov	r2, r9
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	47c0      	blx	r8
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	d09a      	beq.n	800a420 <_printf_i+0x12c>
 800a4ea:	3501      	adds	r5, #1
 800a4ec:	68e3      	ldr	r3, [r4, #12]
 800a4ee:	9a03      	ldr	r2, [sp, #12]
 800a4f0:	1a9b      	subs	r3, r3, r2
 800a4f2:	42ab      	cmp	r3, r5
 800a4f4:	dcf2      	bgt.n	800a4dc <_printf_i+0x1e8>
 800a4f6:	e7eb      	b.n	800a4d0 <_printf_i+0x1dc>
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	f104 0919 	add.w	r9, r4, #25
 800a4fe:	e7f5      	b.n	800a4ec <_printf_i+0x1f8>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1ac      	bne.n	800a45e <_printf_i+0x16a>
 800a504:	7803      	ldrb	r3, [r0, #0]
 800a506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a50a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a50e:	e76c      	b.n	800a3ea <_printf_i+0xf6>
 800a510:	0800f748 	.word	0x0800f748
 800a514:	0800f759 	.word	0x0800f759

0800a518 <_scanf_float>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	469a      	mov	sl, r3
 800a51e:	688b      	ldr	r3, [r1, #8]
 800a520:	4616      	mov	r6, r2
 800a522:	1e5a      	subs	r2, r3, #1
 800a524:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a528:	b087      	sub	sp, #28
 800a52a:	bf83      	ittte	hi
 800a52c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a530:	189b      	addhi	r3, r3, r2
 800a532:	9301      	strhi	r3, [sp, #4]
 800a534:	2300      	movls	r3, #0
 800a536:	bf86      	itte	hi
 800a538:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a53c:	608b      	strhi	r3, [r1, #8]
 800a53e:	9301      	strls	r3, [sp, #4]
 800a540:	680b      	ldr	r3, [r1, #0]
 800a542:	4688      	mov	r8, r1
 800a544:	f04f 0b00 	mov.w	fp, #0
 800a548:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a54c:	f848 3b1c 	str.w	r3, [r8], #28
 800a550:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a554:	4607      	mov	r7, r0
 800a556:	460c      	mov	r4, r1
 800a558:	4645      	mov	r5, r8
 800a55a:	465a      	mov	r2, fp
 800a55c:	46d9      	mov	r9, fp
 800a55e:	f8cd b008 	str.w	fp, [sp, #8]
 800a562:	68a1      	ldr	r1, [r4, #8]
 800a564:	b181      	cbz	r1, 800a588 <_scanf_float+0x70>
 800a566:	6833      	ldr	r3, [r6, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b49      	cmp	r3, #73	; 0x49
 800a56c:	d071      	beq.n	800a652 <_scanf_float+0x13a>
 800a56e:	d84d      	bhi.n	800a60c <_scanf_float+0xf4>
 800a570:	2b39      	cmp	r3, #57	; 0x39
 800a572:	d840      	bhi.n	800a5f6 <_scanf_float+0xde>
 800a574:	2b31      	cmp	r3, #49	; 0x31
 800a576:	f080 8088 	bcs.w	800a68a <_scanf_float+0x172>
 800a57a:	2b2d      	cmp	r3, #45	; 0x2d
 800a57c:	f000 8090 	beq.w	800a6a0 <_scanf_float+0x188>
 800a580:	d815      	bhi.n	800a5ae <_scanf_float+0x96>
 800a582:	2b2b      	cmp	r3, #43	; 0x2b
 800a584:	f000 808c 	beq.w	800a6a0 <_scanf_float+0x188>
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	d003      	beq.n	800a596 <_scanf_float+0x7e>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	3a01      	subs	r2, #1
 800a598:	2a01      	cmp	r2, #1
 800a59a:	f200 80ea 	bhi.w	800a772 <_scanf_float+0x25a>
 800a59e:	4545      	cmp	r5, r8
 800a5a0:	f200 80dc 	bhi.w	800a75c <_scanf_float+0x244>
 800a5a4:	2601      	movs	r6, #1
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	b007      	add	sp, #28
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b0:	f000 809f 	beq.w	800a6f2 <_scanf_float+0x1da>
 800a5b4:	2b30      	cmp	r3, #48	; 0x30
 800a5b6:	d1e7      	bne.n	800a588 <_scanf_float+0x70>
 800a5b8:	6820      	ldr	r0, [r4, #0]
 800a5ba:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a5be:	d064      	beq.n	800a68a <_scanf_float+0x172>
 800a5c0:	9b01      	ldr	r3, [sp, #4]
 800a5c2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a5c6:	6020      	str	r0, [r4, #0]
 800a5c8:	f109 0901 	add.w	r9, r9, #1
 800a5cc:	b11b      	cbz	r3, 800a5d6 <_scanf_float+0xbe>
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	3101      	adds	r1, #1
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	60a1      	str	r1, [r4, #8]
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	60a3      	str	r3, [r4, #8]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	6123      	str	r3, [r4, #16]
 800a5e2:	6873      	ldr	r3, [r6, #4]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	6073      	str	r3, [r6, #4]
 800a5ea:	f340 80ac 	ble.w	800a746 <_scanf_float+0x22e>
 800a5ee:	6833      	ldr	r3, [r6, #0]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	6033      	str	r3, [r6, #0]
 800a5f4:	e7b5      	b.n	800a562 <_scanf_float+0x4a>
 800a5f6:	2b45      	cmp	r3, #69	; 0x45
 800a5f8:	f000 8085 	beq.w	800a706 <_scanf_float+0x1ee>
 800a5fc:	2b46      	cmp	r3, #70	; 0x46
 800a5fe:	d06a      	beq.n	800a6d6 <_scanf_float+0x1be>
 800a600:	2b41      	cmp	r3, #65	; 0x41
 800a602:	d1c1      	bne.n	800a588 <_scanf_float+0x70>
 800a604:	2a01      	cmp	r2, #1
 800a606:	d1bf      	bne.n	800a588 <_scanf_float+0x70>
 800a608:	2202      	movs	r2, #2
 800a60a:	e046      	b.n	800a69a <_scanf_float+0x182>
 800a60c:	2b65      	cmp	r3, #101	; 0x65
 800a60e:	d07a      	beq.n	800a706 <_scanf_float+0x1ee>
 800a610:	d818      	bhi.n	800a644 <_scanf_float+0x12c>
 800a612:	2b54      	cmp	r3, #84	; 0x54
 800a614:	d066      	beq.n	800a6e4 <_scanf_float+0x1cc>
 800a616:	d811      	bhi.n	800a63c <_scanf_float+0x124>
 800a618:	2b4e      	cmp	r3, #78	; 0x4e
 800a61a:	d1b5      	bne.n	800a588 <_scanf_float+0x70>
 800a61c:	2a00      	cmp	r2, #0
 800a61e:	d146      	bne.n	800a6ae <_scanf_float+0x196>
 800a620:	f1b9 0f00 	cmp.w	r9, #0
 800a624:	d145      	bne.n	800a6b2 <_scanf_float+0x19a>
 800a626:	6821      	ldr	r1, [r4, #0]
 800a628:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a62c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a630:	d13f      	bne.n	800a6b2 <_scanf_float+0x19a>
 800a632:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a636:	6021      	str	r1, [r4, #0]
 800a638:	2201      	movs	r2, #1
 800a63a:	e02e      	b.n	800a69a <_scanf_float+0x182>
 800a63c:	2b59      	cmp	r3, #89	; 0x59
 800a63e:	d01e      	beq.n	800a67e <_scanf_float+0x166>
 800a640:	2b61      	cmp	r3, #97	; 0x61
 800a642:	e7de      	b.n	800a602 <_scanf_float+0xea>
 800a644:	2b6e      	cmp	r3, #110	; 0x6e
 800a646:	d0e9      	beq.n	800a61c <_scanf_float+0x104>
 800a648:	d815      	bhi.n	800a676 <_scanf_float+0x15e>
 800a64a:	2b66      	cmp	r3, #102	; 0x66
 800a64c:	d043      	beq.n	800a6d6 <_scanf_float+0x1be>
 800a64e:	2b69      	cmp	r3, #105	; 0x69
 800a650:	d19a      	bne.n	800a588 <_scanf_float+0x70>
 800a652:	f1bb 0f00 	cmp.w	fp, #0
 800a656:	d138      	bne.n	800a6ca <_scanf_float+0x1b2>
 800a658:	f1b9 0f00 	cmp.w	r9, #0
 800a65c:	d197      	bne.n	800a58e <_scanf_float+0x76>
 800a65e:	6821      	ldr	r1, [r4, #0]
 800a660:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a664:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a668:	d195      	bne.n	800a596 <_scanf_float+0x7e>
 800a66a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a66e:	6021      	str	r1, [r4, #0]
 800a670:	f04f 0b01 	mov.w	fp, #1
 800a674:	e011      	b.n	800a69a <_scanf_float+0x182>
 800a676:	2b74      	cmp	r3, #116	; 0x74
 800a678:	d034      	beq.n	800a6e4 <_scanf_float+0x1cc>
 800a67a:	2b79      	cmp	r3, #121	; 0x79
 800a67c:	d184      	bne.n	800a588 <_scanf_float+0x70>
 800a67e:	f1bb 0f07 	cmp.w	fp, #7
 800a682:	d181      	bne.n	800a588 <_scanf_float+0x70>
 800a684:	f04f 0b08 	mov.w	fp, #8
 800a688:	e007      	b.n	800a69a <_scanf_float+0x182>
 800a68a:	eb12 0f0b 	cmn.w	r2, fp
 800a68e:	f47f af7b 	bne.w	800a588 <_scanf_float+0x70>
 800a692:	6821      	ldr	r1, [r4, #0]
 800a694:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a698:	6021      	str	r1, [r4, #0]
 800a69a:	702b      	strb	r3, [r5, #0]
 800a69c:	3501      	adds	r5, #1
 800a69e:	e79a      	b.n	800a5d6 <_scanf_float+0xbe>
 800a6a0:	6821      	ldr	r1, [r4, #0]
 800a6a2:	0608      	lsls	r0, r1, #24
 800a6a4:	f57f af70 	bpl.w	800a588 <_scanf_float+0x70>
 800a6a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a6ac:	e7f4      	b.n	800a698 <_scanf_float+0x180>
 800a6ae:	2a02      	cmp	r2, #2
 800a6b0:	d047      	beq.n	800a742 <_scanf_float+0x22a>
 800a6b2:	f1bb 0f01 	cmp.w	fp, #1
 800a6b6:	d003      	beq.n	800a6c0 <_scanf_float+0x1a8>
 800a6b8:	f1bb 0f04 	cmp.w	fp, #4
 800a6bc:	f47f af64 	bne.w	800a588 <_scanf_float+0x70>
 800a6c0:	f10b 0b01 	add.w	fp, fp, #1
 800a6c4:	fa5f fb8b 	uxtb.w	fp, fp
 800a6c8:	e7e7      	b.n	800a69a <_scanf_float+0x182>
 800a6ca:	f1bb 0f03 	cmp.w	fp, #3
 800a6ce:	d0f7      	beq.n	800a6c0 <_scanf_float+0x1a8>
 800a6d0:	f1bb 0f05 	cmp.w	fp, #5
 800a6d4:	e7f2      	b.n	800a6bc <_scanf_float+0x1a4>
 800a6d6:	f1bb 0f02 	cmp.w	fp, #2
 800a6da:	f47f af55 	bne.w	800a588 <_scanf_float+0x70>
 800a6de:	f04f 0b03 	mov.w	fp, #3
 800a6e2:	e7da      	b.n	800a69a <_scanf_float+0x182>
 800a6e4:	f1bb 0f06 	cmp.w	fp, #6
 800a6e8:	f47f af4e 	bne.w	800a588 <_scanf_float+0x70>
 800a6ec:	f04f 0b07 	mov.w	fp, #7
 800a6f0:	e7d3      	b.n	800a69a <_scanf_float+0x182>
 800a6f2:	6821      	ldr	r1, [r4, #0]
 800a6f4:	0588      	lsls	r0, r1, #22
 800a6f6:	f57f af47 	bpl.w	800a588 <_scanf_float+0x70>
 800a6fa:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a6fe:	6021      	str	r1, [r4, #0]
 800a700:	f8cd 9008 	str.w	r9, [sp, #8]
 800a704:	e7c9      	b.n	800a69a <_scanf_float+0x182>
 800a706:	6821      	ldr	r1, [r4, #0]
 800a708:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a70c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a710:	d006      	beq.n	800a720 <_scanf_float+0x208>
 800a712:	0548      	lsls	r0, r1, #21
 800a714:	f57f af38 	bpl.w	800a588 <_scanf_float+0x70>
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	f43f af3b 	beq.w	800a596 <_scanf_float+0x7e>
 800a720:	0588      	lsls	r0, r1, #22
 800a722:	bf58      	it	pl
 800a724:	9802      	ldrpl	r0, [sp, #8]
 800a726:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a72a:	bf58      	it	pl
 800a72c:	eba9 0000 	subpl.w	r0, r9, r0
 800a730:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a734:	bf58      	it	pl
 800a736:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a73a:	6021      	str	r1, [r4, #0]
 800a73c:	f04f 0900 	mov.w	r9, #0
 800a740:	e7ab      	b.n	800a69a <_scanf_float+0x182>
 800a742:	2203      	movs	r2, #3
 800a744:	e7a9      	b.n	800a69a <_scanf_float+0x182>
 800a746:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a74a:	9205      	str	r2, [sp, #20]
 800a74c:	4631      	mov	r1, r6
 800a74e:	4638      	mov	r0, r7
 800a750:	4798      	blx	r3
 800a752:	9a05      	ldr	r2, [sp, #20]
 800a754:	2800      	cmp	r0, #0
 800a756:	f43f af04 	beq.w	800a562 <_scanf_float+0x4a>
 800a75a:	e715      	b.n	800a588 <_scanf_float+0x70>
 800a75c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a760:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a764:	4632      	mov	r2, r6
 800a766:	4638      	mov	r0, r7
 800a768:	4798      	blx	r3
 800a76a:	6923      	ldr	r3, [r4, #16]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	e715      	b.n	800a59e <_scanf_float+0x86>
 800a772:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a776:	2b06      	cmp	r3, #6
 800a778:	d80a      	bhi.n	800a790 <_scanf_float+0x278>
 800a77a:	f1bb 0f02 	cmp.w	fp, #2
 800a77e:	d968      	bls.n	800a852 <_scanf_float+0x33a>
 800a780:	f1ab 0b03 	sub.w	fp, fp, #3
 800a784:	fa5f fb8b 	uxtb.w	fp, fp
 800a788:	eba5 0b0b 	sub.w	fp, r5, fp
 800a78c:	455d      	cmp	r5, fp
 800a78e:	d14b      	bne.n	800a828 <_scanf_float+0x310>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	05da      	lsls	r2, r3, #23
 800a794:	d51f      	bpl.n	800a7d6 <_scanf_float+0x2be>
 800a796:	055b      	lsls	r3, r3, #21
 800a798:	d468      	bmi.n	800a86c <_scanf_float+0x354>
 800a79a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	2965      	cmp	r1, #101	; 0x65
 800a7a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7a6:	f105 3bff 	add.w	fp, r5, #4294967295
 800a7aa:	6123      	str	r3, [r4, #16]
 800a7ac:	d00d      	beq.n	800a7ca <_scanf_float+0x2b2>
 800a7ae:	2945      	cmp	r1, #69	; 0x45
 800a7b0:	d00b      	beq.n	800a7ca <_scanf_float+0x2b2>
 800a7b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	4798      	blx	r3
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	f1a5 0b02 	sub.w	fp, r5, #2
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7ce:	4632      	mov	r2, r6
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	4798      	blx	r3
 800a7d4:	465d      	mov	r5, fp
 800a7d6:	6826      	ldr	r6, [r4, #0]
 800a7d8:	f016 0610 	ands.w	r6, r6, #16
 800a7dc:	d17a      	bne.n	800a8d4 <_scanf_float+0x3bc>
 800a7de:	702e      	strb	r6, [r5, #0]
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ea:	d142      	bne.n	800a872 <_scanf_float+0x35a>
 800a7ec:	9b02      	ldr	r3, [sp, #8]
 800a7ee:	eba9 0303 	sub.w	r3, r9, r3
 800a7f2:	425a      	negs	r2, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d149      	bne.n	800a88c <_scanf_float+0x374>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4641      	mov	r1, r8
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f000 fea3 	bl	800b548 <_strtod_r>
 800a802:	6825      	ldr	r5, [r4, #0]
 800a804:	f8da 3000 	ldr.w	r3, [sl]
 800a808:	f015 0f02 	tst.w	r5, #2
 800a80c:	f103 0204 	add.w	r2, r3, #4
 800a810:	ec59 8b10 	vmov	r8, r9, d0
 800a814:	f8ca 2000 	str.w	r2, [sl]
 800a818:	d043      	beq.n	800a8a2 <_scanf_float+0x38a>
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	e9c3 8900 	strd	r8, r9, [r3]
 800a820:	68e3      	ldr	r3, [r4, #12]
 800a822:	3301      	adds	r3, #1
 800a824:	60e3      	str	r3, [r4, #12]
 800a826:	e6be      	b.n	800a5a6 <_scanf_float+0x8e>
 800a828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a82c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a830:	4632      	mov	r2, r6
 800a832:	4638      	mov	r0, r7
 800a834:	4798      	blx	r3
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	3b01      	subs	r3, #1
 800a83a:	6123      	str	r3, [r4, #16]
 800a83c:	e7a6      	b.n	800a78c <_scanf_float+0x274>
 800a83e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a842:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a846:	4632      	mov	r2, r6
 800a848:	4638      	mov	r0, r7
 800a84a:	4798      	blx	r3
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	3b01      	subs	r3, #1
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	4545      	cmp	r5, r8
 800a854:	d8f3      	bhi.n	800a83e <_scanf_float+0x326>
 800a856:	e6a5      	b.n	800a5a4 <_scanf_float+0x8c>
 800a858:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a85c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a860:	4632      	mov	r2, r6
 800a862:	4638      	mov	r0, r7
 800a864:	4798      	blx	r3
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	3b01      	subs	r3, #1
 800a86a:	6123      	str	r3, [r4, #16]
 800a86c:	4545      	cmp	r5, r8
 800a86e:	d8f3      	bhi.n	800a858 <_scanf_float+0x340>
 800a870:	e698      	b.n	800a5a4 <_scanf_float+0x8c>
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0bf      	beq.n	800a7f8 <_scanf_float+0x2e0>
 800a878:	9904      	ldr	r1, [sp, #16]
 800a87a:	230a      	movs	r3, #10
 800a87c:	4632      	mov	r2, r6
 800a87e:	3101      	adds	r1, #1
 800a880:	4638      	mov	r0, r7
 800a882:	f000 feed 	bl	800b660 <_strtol_r>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	9d04      	ldr	r5, [sp, #16]
 800a88a:	1ac2      	subs	r2, r0, r3
 800a88c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a890:	429d      	cmp	r5, r3
 800a892:	bf28      	it	cs
 800a894:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a898:	490f      	ldr	r1, [pc, #60]	; (800a8d8 <_scanf_float+0x3c0>)
 800a89a:	4628      	mov	r0, r5
 800a89c:	f000 f824 	bl	800a8e8 <siprintf>
 800a8a0:	e7aa      	b.n	800a7f8 <_scanf_float+0x2e0>
 800a8a2:	f015 0504 	ands.w	r5, r5, #4
 800a8a6:	d1b8      	bne.n	800a81a <_scanf_float+0x302>
 800a8a8:	681f      	ldr	r7, [r3, #0]
 800a8aa:	ee10 2a10 	vmov	r2, s0
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	ee10 0a10 	vmov	r0, s0
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	f7f6 f961 	bl	8000b7c <__aeabi_dcmpun>
 800a8ba:	b128      	cbz	r0, 800a8c8 <_scanf_float+0x3b0>
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f000 f80d 	bl	800a8dc <nanf>
 800a8c2:	ed87 0a00 	vstr	s0, [r7]
 800a8c6:	e7ab      	b.n	800a820 <_scanf_float+0x308>
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	f7f6 f9b4 	bl	8000c38 <__aeabi_d2f>
 800a8d0:	6038      	str	r0, [r7, #0]
 800a8d2:	e7a5      	b.n	800a820 <_scanf_float+0x308>
 800a8d4:	2600      	movs	r6, #0
 800a8d6:	e666      	b.n	800a5a6 <_scanf_float+0x8e>
 800a8d8:	0800f76a 	.word	0x0800f76a

0800a8dc <nanf>:
 800a8dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a8e4 <nanf+0x8>
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	7fc00000 	.word	0x7fc00000

0800a8e8 <siprintf>:
 800a8e8:	b40e      	push	{r1, r2, r3}
 800a8ea:	b500      	push	{lr}
 800a8ec:	b09c      	sub	sp, #112	; 0x70
 800a8ee:	ab1d      	add	r3, sp, #116	; 0x74
 800a8f0:	9002      	str	r0, [sp, #8]
 800a8f2:	9006      	str	r0, [sp, #24]
 800a8f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8f8:	4809      	ldr	r0, [pc, #36]	; (800a920 <siprintf+0x38>)
 800a8fa:	9107      	str	r1, [sp, #28]
 800a8fc:	9104      	str	r1, [sp, #16]
 800a8fe:	4909      	ldr	r1, [pc, #36]	; (800a924 <siprintf+0x3c>)
 800a900:	f853 2b04 	ldr.w	r2, [r3], #4
 800a904:	9105      	str	r1, [sp, #20]
 800a906:	6800      	ldr	r0, [r0, #0]
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	a902      	add	r1, sp, #8
 800a90c:	f002 fd9c 	bl	800d448 <_svfiprintf_r>
 800a910:	9b02      	ldr	r3, [sp, #8]
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	b01c      	add	sp, #112	; 0x70
 800a918:	f85d eb04 	ldr.w	lr, [sp], #4
 800a91c:	b003      	add	sp, #12
 800a91e:	4770      	bx	lr
 800a920:	20001640 	.word	0x20001640
 800a924:	ffff0208 	.word	0xffff0208

0800a928 <sulp>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	ec45 4b10 	vmov	d0, r4, r5
 800a932:	4616      	mov	r6, r2
 800a934:	f002 fb44 	bl	800cfc0 <__ulp>
 800a938:	ec51 0b10 	vmov	r0, r1, d0
 800a93c:	b17e      	cbz	r6, 800a95e <sulp+0x36>
 800a93e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a946:	2b00      	cmp	r3, #0
 800a948:	dd09      	ble.n	800a95e <sulp+0x36>
 800a94a:	051b      	lsls	r3, r3, #20
 800a94c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a950:	2400      	movs	r4, #0
 800a952:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a956:	4622      	mov	r2, r4
 800a958:	462b      	mov	r3, r5
 800a95a:	f7f5 fe75 	bl	8000648 <__aeabi_dmul>
 800a95e:	bd70      	pop	{r4, r5, r6, pc}

0800a960 <_strtod_l>:
 800a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	461f      	mov	r7, r3
 800a966:	b0a1      	sub	sp, #132	; 0x84
 800a968:	2300      	movs	r3, #0
 800a96a:	4681      	mov	r9, r0
 800a96c:	4638      	mov	r0, r7
 800a96e:	460e      	mov	r6, r1
 800a970:	9217      	str	r2, [sp, #92]	; 0x5c
 800a972:	931c      	str	r3, [sp, #112]	; 0x70
 800a974:	f002 f82d 	bl	800c9d2 <__localeconv_l>
 800a978:	4680      	mov	r8, r0
 800a97a:	6800      	ldr	r0, [r0, #0]
 800a97c:	f7f5 fc50 	bl	8000220 <strlen>
 800a980:	f04f 0a00 	mov.w	sl, #0
 800a984:	4604      	mov	r4, r0
 800a986:	f04f 0b00 	mov.w	fp, #0
 800a98a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a98c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a98e:	781a      	ldrb	r2, [r3, #0]
 800a990:	2a0d      	cmp	r2, #13
 800a992:	d832      	bhi.n	800a9fa <_strtod_l+0x9a>
 800a994:	2a09      	cmp	r2, #9
 800a996:	d236      	bcs.n	800aa06 <_strtod_l+0xa6>
 800a998:	2a00      	cmp	r2, #0
 800a99a:	d03e      	beq.n	800aa1a <_strtod_l+0xba>
 800a99c:	2300      	movs	r3, #0
 800a99e:	930d      	str	r3, [sp, #52]	; 0x34
 800a9a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9a2:	782b      	ldrb	r3, [r5, #0]
 800a9a4:	2b30      	cmp	r3, #48	; 0x30
 800a9a6:	f040 80ac 	bne.w	800ab02 <_strtod_l+0x1a2>
 800a9aa:	786b      	ldrb	r3, [r5, #1]
 800a9ac:	2b58      	cmp	r3, #88	; 0x58
 800a9ae:	d001      	beq.n	800a9b4 <_strtod_l+0x54>
 800a9b0:	2b78      	cmp	r3, #120	; 0x78
 800a9b2:	d167      	bne.n	800aa84 <_strtod_l+0x124>
 800a9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	ab1c      	add	r3, sp, #112	; 0x70
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	9702      	str	r7, [sp, #8]
 800a9be:	ab1d      	add	r3, sp, #116	; 0x74
 800a9c0:	4a88      	ldr	r2, [pc, #544]	; (800abe4 <_strtod_l+0x284>)
 800a9c2:	a91b      	add	r1, sp, #108	; 0x6c
 800a9c4:	4648      	mov	r0, r9
 800a9c6:	f001 fd2a 	bl	800c41e <__gethex>
 800a9ca:	f010 0407 	ands.w	r4, r0, #7
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	d005      	beq.n	800a9de <_strtod_l+0x7e>
 800a9d2:	2c06      	cmp	r4, #6
 800a9d4:	d12b      	bne.n	800aa2e <_strtod_l+0xce>
 800a9d6:	3501      	adds	r5, #1
 800a9d8:	2300      	movs	r3, #0
 800a9da:	951b      	str	r5, [sp, #108]	; 0x6c
 800a9dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a9de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f040 859a 	bne.w	800b51a <_strtod_l+0xbba>
 800a9e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9e8:	b1e3      	cbz	r3, 800aa24 <_strtod_l+0xc4>
 800a9ea:	4652      	mov	r2, sl
 800a9ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9f0:	ec43 2b10 	vmov	d0, r2, r3
 800a9f4:	b021      	add	sp, #132	; 0x84
 800a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fa:	2a2b      	cmp	r2, #43	; 0x2b
 800a9fc:	d015      	beq.n	800aa2a <_strtod_l+0xca>
 800a9fe:	2a2d      	cmp	r2, #45	; 0x2d
 800aa00:	d004      	beq.n	800aa0c <_strtod_l+0xac>
 800aa02:	2a20      	cmp	r2, #32
 800aa04:	d1ca      	bne.n	800a99c <_strtod_l+0x3c>
 800aa06:	3301      	adds	r3, #1
 800aa08:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa0a:	e7bf      	b.n	800a98c <_strtod_l+0x2c>
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	920d      	str	r2, [sp, #52]	; 0x34
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa14:	785b      	ldrb	r3, [r3, #1]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1c2      	bne.n	800a9a0 <_strtod_l+0x40>
 800aa1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa1c:	961b      	str	r6, [sp, #108]	; 0x6c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f040 8579 	bne.w	800b516 <_strtod_l+0xbb6>
 800aa24:	4652      	mov	r2, sl
 800aa26:	465b      	mov	r3, fp
 800aa28:	e7e2      	b.n	800a9f0 <_strtod_l+0x90>
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	e7ef      	b.n	800aa0e <_strtod_l+0xae>
 800aa2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa30:	b13a      	cbz	r2, 800aa42 <_strtod_l+0xe2>
 800aa32:	2135      	movs	r1, #53	; 0x35
 800aa34:	a81e      	add	r0, sp, #120	; 0x78
 800aa36:	f002 fbbb 	bl	800d1b0 <__copybits>
 800aa3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa3c:	4648      	mov	r0, r9
 800aa3e:	f002 f827 	bl	800ca90 <_Bfree>
 800aa42:	3c01      	subs	r4, #1
 800aa44:	2c04      	cmp	r4, #4
 800aa46:	d806      	bhi.n	800aa56 <_strtod_l+0xf6>
 800aa48:	e8df f004 	tbb	[pc, r4]
 800aa4c:	1714030a 	.word	0x1714030a
 800aa50:	0a          	.byte	0x0a
 800aa51:	00          	.byte	0x00
 800aa52:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800aa56:	0730      	lsls	r0, r6, #28
 800aa58:	d5c1      	bpl.n	800a9de <_strtod_l+0x7e>
 800aa5a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aa5e:	e7be      	b.n	800a9de <_strtod_l+0x7e>
 800aa60:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800aa64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aa66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aa6a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa6e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa72:	e7f0      	b.n	800aa56 <_strtod_l+0xf6>
 800aa74:	f8df b170 	ldr.w	fp, [pc, #368]	; 800abe8 <_strtod_l+0x288>
 800aa78:	e7ed      	b.n	800aa56 <_strtod_l+0xf6>
 800aa7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aa7e:	f04f 3aff 	mov.w	sl, #4294967295
 800aa82:	e7e8      	b.n	800aa56 <_strtod_l+0xf6>
 800aa84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	2b30      	cmp	r3, #48	; 0x30
 800aa8e:	d0f9      	beq.n	800aa84 <_strtod_l+0x124>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0a4      	beq.n	800a9de <_strtod_l+0x7e>
 800aa94:	2301      	movs	r3, #1
 800aa96:	2500      	movs	r5, #0
 800aa98:	9306      	str	r3, [sp, #24]
 800aa9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa9c:	9308      	str	r3, [sp, #32]
 800aa9e:	9507      	str	r5, [sp, #28]
 800aaa0:	9505      	str	r5, [sp, #20]
 800aaa2:	220a      	movs	r2, #10
 800aaa4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aaa6:	7807      	ldrb	r7, [r0, #0]
 800aaa8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800aaac:	b2d9      	uxtb	r1, r3
 800aaae:	2909      	cmp	r1, #9
 800aab0:	d929      	bls.n	800ab06 <_strtod_l+0x1a6>
 800aab2:	4622      	mov	r2, r4
 800aab4:	f8d8 1000 	ldr.w	r1, [r8]
 800aab8:	f002 fdce 	bl	800d658 <strncmp>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d031      	beq.n	800ab24 <_strtod_l+0x1c4>
 800aac0:	2000      	movs	r0, #0
 800aac2:	9c05      	ldr	r4, [sp, #20]
 800aac4:	9004      	str	r0, [sp, #16]
 800aac6:	463b      	mov	r3, r7
 800aac8:	4602      	mov	r2, r0
 800aaca:	2b65      	cmp	r3, #101	; 0x65
 800aacc:	d001      	beq.n	800aad2 <_strtod_l+0x172>
 800aace:	2b45      	cmp	r3, #69	; 0x45
 800aad0:	d114      	bne.n	800aafc <_strtod_l+0x19c>
 800aad2:	b924      	cbnz	r4, 800aade <_strtod_l+0x17e>
 800aad4:	b910      	cbnz	r0, 800aadc <_strtod_l+0x17c>
 800aad6:	9b06      	ldr	r3, [sp, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d09e      	beq.n	800aa1a <_strtod_l+0xba>
 800aadc:	2400      	movs	r4, #0
 800aade:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800aae0:	1c73      	adds	r3, r6, #1
 800aae2:	931b      	str	r3, [sp, #108]	; 0x6c
 800aae4:	7873      	ldrb	r3, [r6, #1]
 800aae6:	2b2b      	cmp	r3, #43	; 0x2b
 800aae8:	d078      	beq.n	800abdc <_strtod_l+0x27c>
 800aaea:	2b2d      	cmp	r3, #45	; 0x2d
 800aaec:	d070      	beq.n	800abd0 <_strtod_l+0x270>
 800aaee:	f04f 0c00 	mov.w	ip, #0
 800aaf2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800aaf6:	2f09      	cmp	r7, #9
 800aaf8:	d97c      	bls.n	800abf4 <_strtod_l+0x294>
 800aafa:	961b      	str	r6, [sp, #108]	; 0x6c
 800aafc:	f04f 0e00 	mov.w	lr, #0
 800ab00:	e09a      	b.n	800ac38 <_strtod_l+0x2d8>
 800ab02:	2300      	movs	r3, #0
 800ab04:	e7c7      	b.n	800aa96 <_strtod_l+0x136>
 800ab06:	9905      	ldr	r1, [sp, #20]
 800ab08:	2908      	cmp	r1, #8
 800ab0a:	bfdd      	ittte	le
 800ab0c:	9907      	ldrle	r1, [sp, #28]
 800ab0e:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab12:	9307      	strle	r3, [sp, #28]
 800ab14:	fb02 3505 	mlagt	r5, r2, r5, r3
 800ab18:	9b05      	ldr	r3, [sp, #20]
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	9305      	str	r3, [sp, #20]
 800ab20:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab22:	e7bf      	b.n	800aaa4 <_strtod_l+0x144>
 800ab24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab26:	191a      	adds	r2, r3, r4
 800ab28:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab2a:	9a05      	ldr	r2, [sp, #20]
 800ab2c:	5d1b      	ldrb	r3, [r3, r4]
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	d037      	beq.n	800aba2 <_strtod_l+0x242>
 800ab32:	9c05      	ldr	r4, [sp, #20]
 800ab34:	4602      	mov	r2, r0
 800ab36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ab3a:	2909      	cmp	r1, #9
 800ab3c:	d913      	bls.n	800ab66 <_strtod_l+0x206>
 800ab3e:	2101      	movs	r1, #1
 800ab40:	9104      	str	r1, [sp, #16]
 800ab42:	e7c2      	b.n	800aaca <_strtod_l+0x16a>
 800ab44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab4a:	785b      	ldrb	r3, [r3, #1]
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	2b30      	cmp	r3, #48	; 0x30
 800ab50:	d0f8      	beq.n	800ab44 <_strtod_l+0x1e4>
 800ab52:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ab56:	2a08      	cmp	r2, #8
 800ab58:	f200 84e4 	bhi.w	800b524 <_strtod_l+0xbc4>
 800ab5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab5e:	9208      	str	r2, [sp, #32]
 800ab60:	4602      	mov	r2, r0
 800ab62:	2000      	movs	r0, #0
 800ab64:	4604      	mov	r4, r0
 800ab66:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ab6a:	f100 0101 	add.w	r1, r0, #1
 800ab6e:	d012      	beq.n	800ab96 <_strtod_l+0x236>
 800ab70:	440a      	add	r2, r1
 800ab72:	eb00 0c04 	add.w	ip, r0, r4
 800ab76:	4621      	mov	r1, r4
 800ab78:	270a      	movs	r7, #10
 800ab7a:	458c      	cmp	ip, r1
 800ab7c:	d113      	bne.n	800aba6 <_strtod_l+0x246>
 800ab7e:	1821      	adds	r1, r4, r0
 800ab80:	2908      	cmp	r1, #8
 800ab82:	f104 0401 	add.w	r4, r4, #1
 800ab86:	4404      	add	r4, r0
 800ab88:	dc19      	bgt.n	800abbe <_strtod_l+0x25e>
 800ab8a:	9b07      	ldr	r3, [sp, #28]
 800ab8c:	210a      	movs	r1, #10
 800ab8e:	fb01 e303 	mla	r3, r1, r3, lr
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	2100      	movs	r1, #0
 800ab96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab98:	1c58      	adds	r0, r3, #1
 800ab9a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	4608      	mov	r0, r1
 800aba0:	e7c9      	b.n	800ab36 <_strtod_l+0x1d6>
 800aba2:	9805      	ldr	r0, [sp, #20]
 800aba4:	e7d3      	b.n	800ab4e <_strtod_l+0x1ee>
 800aba6:	2908      	cmp	r1, #8
 800aba8:	f101 0101 	add.w	r1, r1, #1
 800abac:	dc03      	bgt.n	800abb6 <_strtod_l+0x256>
 800abae:	9b07      	ldr	r3, [sp, #28]
 800abb0:	437b      	muls	r3, r7
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	e7e1      	b.n	800ab7a <_strtod_l+0x21a>
 800abb6:	2910      	cmp	r1, #16
 800abb8:	bfd8      	it	le
 800abba:	437d      	mulle	r5, r7
 800abbc:	e7dd      	b.n	800ab7a <_strtod_l+0x21a>
 800abbe:	2c10      	cmp	r4, #16
 800abc0:	bfdc      	itt	le
 800abc2:	210a      	movle	r1, #10
 800abc4:	fb01 e505 	mlale	r5, r1, r5, lr
 800abc8:	e7e4      	b.n	800ab94 <_strtod_l+0x234>
 800abca:	2301      	movs	r3, #1
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	e781      	b.n	800aad4 <_strtod_l+0x174>
 800abd0:	f04f 0c01 	mov.w	ip, #1
 800abd4:	1cb3      	adds	r3, r6, #2
 800abd6:	931b      	str	r3, [sp, #108]	; 0x6c
 800abd8:	78b3      	ldrb	r3, [r6, #2]
 800abda:	e78a      	b.n	800aaf2 <_strtod_l+0x192>
 800abdc:	f04f 0c00 	mov.w	ip, #0
 800abe0:	e7f8      	b.n	800abd4 <_strtod_l+0x274>
 800abe2:	bf00      	nop
 800abe4:	0800f770 	.word	0x0800f770
 800abe8:	7ff00000 	.word	0x7ff00000
 800abec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abee:	1c5f      	adds	r7, r3, #1
 800abf0:	971b      	str	r7, [sp, #108]	; 0x6c
 800abf2:	785b      	ldrb	r3, [r3, #1]
 800abf4:	2b30      	cmp	r3, #48	; 0x30
 800abf6:	d0f9      	beq.n	800abec <_strtod_l+0x28c>
 800abf8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800abfc:	2f08      	cmp	r7, #8
 800abfe:	f63f af7d 	bhi.w	800aafc <_strtod_l+0x19c>
 800ac02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ac06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac08:	930a      	str	r3, [sp, #40]	; 0x28
 800ac0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac0c:	1c5f      	adds	r7, r3, #1
 800ac0e:	971b      	str	r7, [sp, #108]	; 0x6c
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ac16:	f1b8 0f09 	cmp.w	r8, #9
 800ac1a:	d937      	bls.n	800ac8c <_strtod_l+0x32c>
 800ac1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac1e:	1a7f      	subs	r7, r7, r1
 800ac20:	2f08      	cmp	r7, #8
 800ac22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ac26:	dc37      	bgt.n	800ac98 <_strtod_l+0x338>
 800ac28:	45be      	cmp	lr, r7
 800ac2a:	bfa8      	it	ge
 800ac2c:	46be      	movge	lr, r7
 800ac2e:	f1bc 0f00 	cmp.w	ip, #0
 800ac32:	d001      	beq.n	800ac38 <_strtod_l+0x2d8>
 800ac34:	f1ce 0e00 	rsb	lr, lr, #0
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	d151      	bne.n	800ace0 <_strtod_l+0x380>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	f47f aece 	bne.w	800a9de <_strtod_l+0x7e>
 800ac42:	9a06      	ldr	r2, [sp, #24]
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	f47f aeca 	bne.w	800a9de <_strtod_l+0x7e>
 800ac4a:	9a04      	ldr	r2, [sp, #16]
 800ac4c:	2a00      	cmp	r2, #0
 800ac4e:	f47f aee4 	bne.w	800aa1a <_strtod_l+0xba>
 800ac52:	2b4e      	cmp	r3, #78	; 0x4e
 800ac54:	d027      	beq.n	800aca6 <_strtod_l+0x346>
 800ac56:	dc21      	bgt.n	800ac9c <_strtod_l+0x33c>
 800ac58:	2b49      	cmp	r3, #73	; 0x49
 800ac5a:	f47f aede 	bne.w	800aa1a <_strtod_l+0xba>
 800ac5e:	49a0      	ldr	r1, [pc, #640]	; (800aee0 <_strtod_l+0x580>)
 800ac60:	a81b      	add	r0, sp, #108	; 0x6c
 800ac62:	f001 fe0f 	bl	800c884 <__match>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	f43f aed7 	beq.w	800aa1a <_strtod_l+0xba>
 800ac6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac6e:	499d      	ldr	r1, [pc, #628]	; (800aee4 <_strtod_l+0x584>)
 800ac70:	3b01      	subs	r3, #1
 800ac72:	a81b      	add	r0, sp, #108	; 0x6c
 800ac74:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac76:	f001 fe05 	bl	800c884 <__match>
 800ac7a:	b910      	cbnz	r0, 800ac82 <_strtod_l+0x322>
 800ac7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac7e:	3301      	adds	r3, #1
 800ac80:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac82:	f8df b274 	ldr.w	fp, [pc, #628]	; 800aef8 <_strtod_l+0x598>
 800ac86:	f04f 0a00 	mov.w	sl, #0
 800ac8a:	e6a8      	b.n	800a9de <_strtod_l+0x7e>
 800ac8c:	210a      	movs	r1, #10
 800ac8e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ac92:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac96:	e7b8      	b.n	800ac0a <_strtod_l+0x2aa>
 800ac98:	46be      	mov	lr, r7
 800ac9a:	e7c8      	b.n	800ac2e <_strtod_l+0x2ce>
 800ac9c:	2b69      	cmp	r3, #105	; 0x69
 800ac9e:	d0de      	beq.n	800ac5e <_strtod_l+0x2fe>
 800aca0:	2b6e      	cmp	r3, #110	; 0x6e
 800aca2:	f47f aeba 	bne.w	800aa1a <_strtod_l+0xba>
 800aca6:	4990      	ldr	r1, [pc, #576]	; (800aee8 <_strtod_l+0x588>)
 800aca8:	a81b      	add	r0, sp, #108	; 0x6c
 800acaa:	f001 fdeb 	bl	800c884 <__match>
 800acae:	2800      	cmp	r0, #0
 800acb0:	f43f aeb3 	beq.w	800aa1a <_strtod_l+0xba>
 800acb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b28      	cmp	r3, #40	; 0x28
 800acba:	d10e      	bne.n	800acda <_strtod_l+0x37a>
 800acbc:	aa1e      	add	r2, sp, #120	; 0x78
 800acbe:	498b      	ldr	r1, [pc, #556]	; (800aeec <_strtod_l+0x58c>)
 800acc0:	a81b      	add	r0, sp, #108	; 0x6c
 800acc2:	f001 fdf3 	bl	800c8ac <__hexnan>
 800acc6:	2805      	cmp	r0, #5
 800acc8:	d107      	bne.n	800acda <_strtod_l+0x37a>
 800acca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800accc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800acd0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800acd4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800acd8:	e681      	b.n	800a9de <_strtod_l+0x7e>
 800acda:	f8df b224 	ldr.w	fp, [pc, #548]	; 800af00 <_strtod_l+0x5a0>
 800acde:	e7d2      	b.n	800ac86 <_strtod_l+0x326>
 800ace0:	ebae 0302 	sub.w	r3, lr, r2
 800ace4:	9306      	str	r3, [sp, #24]
 800ace6:	9b05      	ldr	r3, [sp, #20]
 800ace8:	9807      	ldr	r0, [sp, #28]
 800acea:	2b00      	cmp	r3, #0
 800acec:	bf08      	it	eq
 800acee:	4623      	moveq	r3, r4
 800acf0:	2c10      	cmp	r4, #16
 800acf2:	9305      	str	r3, [sp, #20]
 800acf4:	46a0      	mov	r8, r4
 800acf6:	bfa8      	it	ge
 800acf8:	f04f 0810 	movge.w	r8, #16
 800acfc:	f7f5 fc2a 	bl	8000554 <__aeabi_ui2d>
 800ad00:	2c09      	cmp	r4, #9
 800ad02:	4682      	mov	sl, r0
 800ad04:	468b      	mov	fp, r1
 800ad06:	dc13      	bgt.n	800ad30 <_strtod_l+0x3d0>
 800ad08:	9b06      	ldr	r3, [sp, #24]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f43f ae67 	beq.w	800a9de <_strtod_l+0x7e>
 800ad10:	9b06      	ldr	r3, [sp, #24]
 800ad12:	dd7a      	ble.n	800ae0a <_strtod_l+0x4aa>
 800ad14:	2b16      	cmp	r3, #22
 800ad16:	dc61      	bgt.n	800addc <_strtod_l+0x47c>
 800ad18:	4a75      	ldr	r2, [pc, #468]	; (800aef0 <_strtod_l+0x590>)
 800ad1a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ad1e:	e9de 0100 	ldrd	r0, r1, [lr]
 800ad22:	4652      	mov	r2, sl
 800ad24:	465b      	mov	r3, fp
 800ad26:	f7f5 fc8f 	bl	8000648 <__aeabi_dmul>
 800ad2a:	4682      	mov	sl, r0
 800ad2c:	468b      	mov	fp, r1
 800ad2e:	e656      	b.n	800a9de <_strtod_l+0x7e>
 800ad30:	4b6f      	ldr	r3, [pc, #444]	; (800aef0 <_strtod_l+0x590>)
 800ad32:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad3a:	f7f5 fc85 	bl	8000648 <__aeabi_dmul>
 800ad3e:	4606      	mov	r6, r0
 800ad40:	4628      	mov	r0, r5
 800ad42:	460f      	mov	r7, r1
 800ad44:	f7f5 fc06 	bl	8000554 <__aeabi_ui2d>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	4639      	mov	r1, r7
 800ad50:	f7f5 fac4 	bl	80002dc <__adddf3>
 800ad54:	2c0f      	cmp	r4, #15
 800ad56:	4682      	mov	sl, r0
 800ad58:	468b      	mov	fp, r1
 800ad5a:	ddd5      	ble.n	800ad08 <_strtod_l+0x3a8>
 800ad5c:	9b06      	ldr	r3, [sp, #24]
 800ad5e:	eba4 0808 	sub.w	r8, r4, r8
 800ad62:	4498      	add	r8, r3
 800ad64:	f1b8 0f00 	cmp.w	r8, #0
 800ad68:	f340 8096 	ble.w	800ae98 <_strtod_l+0x538>
 800ad6c:	f018 030f 	ands.w	r3, r8, #15
 800ad70:	d00a      	beq.n	800ad88 <_strtod_l+0x428>
 800ad72:	495f      	ldr	r1, [pc, #380]	; (800aef0 <_strtod_l+0x590>)
 800ad74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad78:	4652      	mov	r2, sl
 800ad7a:	465b      	mov	r3, fp
 800ad7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad80:	f7f5 fc62 	bl	8000648 <__aeabi_dmul>
 800ad84:	4682      	mov	sl, r0
 800ad86:	468b      	mov	fp, r1
 800ad88:	f038 080f 	bics.w	r8, r8, #15
 800ad8c:	d073      	beq.n	800ae76 <_strtod_l+0x516>
 800ad8e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ad92:	dd47      	ble.n	800ae24 <_strtod_l+0x4c4>
 800ad94:	2400      	movs	r4, #0
 800ad96:	46a0      	mov	r8, r4
 800ad98:	9407      	str	r4, [sp, #28]
 800ad9a:	9405      	str	r4, [sp, #20]
 800ad9c:	2322      	movs	r3, #34	; 0x22
 800ad9e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800aef8 <_strtod_l+0x598>
 800ada2:	f8c9 3000 	str.w	r3, [r9]
 800ada6:	f04f 0a00 	mov.w	sl, #0
 800adaa:	9b07      	ldr	r3, [sp, #28]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f43f ae16 	beq.w	800a9de <_strtod_l+0x7e>
 800adb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800adb4:	4648      	mov	r0, r9
 800adb6:	f001 fe6b 	bl	800ca90 <_Bfree>
 800adba:	9905      	ldr	r1, [sp, #20]
 800adbc:	4648      	mov	r0, r9
 800adbe:	f001 fe67 	bl	800ca90 <_Bfree>
 800adc2:	4641      	mov	r1, r8
 800adc4:	4648      	mov	r0, r9
 800adc6:	f001 fe63 	bl	800ca90 <_Bfree>
 800adca:	9907      	ldr	r1, [sp, #28]
 800adcc:	4648      	mov	r0, r9
 800adce:	f001 fe5f 	bl	800ca90 <_Bfree>
 800add2:	4621      	mov	r1, r4
 800add4:	4648      	mov	r0, r9
 800add6:	f001 fe5b 	bl	800ca90 <_Bfree>
 800adda:	e600      	b.n	800a9de <_strtod_l+0x7e>
 800addc:	9a06      	ldr	r2, [sp, #24]
 800adde:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ade2:	4293      	cmp	r3, r2
 800ade4:	dbba      	blt.n	800ad5c <_strtod_l+0x3fc>
 800ade6:	4d42      	ldr	r5, [pc, #264]	; (800aef0 <_strtod_l+0x590>)
 800ade8:	f1c4 040f 	rsb	r4, r4, #15
 800adec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800adf0:	4652      	mov	r2, sl
 800adf2:	465b      	mov	r3, fp
 800adf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf8:	f7f5 fc26 	bl	8000648 <__aeabi_dmul>
 800adfc:	9b06      	ldr	r3, [sp, #24]
 800adfe:	1b1c      	subs	r4, r3, r4
 800ae00:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ae04:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae08:	e78d      	b.n	800ad26 <_strtod_l+0x3c6>
 800ae0a:	f113 0f16 	cmn.w	r3, #22
 800ae0e:	dba5      	blt.n	800ad5c <_strtod_l+0x3fc>
 800ae10:	4a37      	ldr	r2, [pc, #220]	; (800aef0 <_strtod_l+0x590>)
 800ae12:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ae16:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	f7f5 fd3d 	bl	800089c <__aeabi_ddiv>
 800ae22:	e782      	b.n	800ad2a <_strtod_l+0x3ca>
 800ae24:	2300      	movs	r3, #0
 800ae26:	4e33      	ldr	r6, [pc, #204]	; (800aef4 <_strtod_l+0x594>)
 800ae28:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ae2c:	4650      	mov	r0, sl
 800ae2e:	4659      	mov	r1, fp
 800ae30:	461d      	mov	r5, r3
 800ae32:	f1b8 0f01 	cmp.w	r8, #1
 800ae36:	dc21      	bgt.n	800ae7c <_strtod_l+0x51c>
 800ae38:	b10b      	cbz	r3, 800ae3e <_strtod_l+0x4de>
 800ae3a:	4682      	mov	sl, r0
 800ae3c:	468b      	mov	fp, r1
 800ae3e:	4b2d      	ldr	r3, [pc, #180]	; (800aef4 <_strtod_l+0x594>)
 800ae40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ae44:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae48:	4652      	mov	r2, sl
 800ae4a:	465b      	mov	r3, fp
 800ae4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ae50:	f7f5 fbfa 	bl	8000648 <__aeabi_dmul>
 800ae54:	4b28      	ldr	r3, [pc, #160]	; (800aef8 <_strtod_l+0x598>)
 800ae56:	460a      	mov	r2, r1
 800ae58:	400b      	ands	r3, r1
 800ae5a:	4928      	ldr	r1, [pc, #160]	; (800aefc <_strtod_l+0x59c>)
 800ae5c:	428b      	cmp	r3, r1
 800ae5e:	4682      	mov	sl, r0
 800ae60:	d898      	bhi.n	800ad94 <_strtod_l+0x434>
 800ae62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ae66:	428b      	cmp	r3, r1
 800ae68:	bf86      	itte	hi
 800ae6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800af04 <_strtod_l+0x5a4>
 800ae6e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ae76:	2300      	movs	r3, #0
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	e077      	b.n	800af6c <_strtod_l+0x60c>
 800ae7c:	f018 0f01 	tst.w	r8, #1
 800ae80:	d006      	beq.n	800ae90 <_strtod_l+0x530>
 800ae82:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 fbdd 	bl	8000648 <__aeabi_dmul>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	3501      	adds	r5, #1
 800ae92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae96:	e7cc      	b.n	800ae32 <_strtod_l+0x4d2>
 800ae98:	d0ed      	beq.n	800ae76 <_strtod_l+0x516>
 800ae9a:	f1c8 0800 	rsb	r8, r8, #0
 800ae9e:	f018 020f 	ands.w	r2, r8, #15
 800aea2:	d00a      	beq.n	800aeba <_strtod_l+0x55a>
 800aea4:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <_strtod_l+0x590>)
 800aea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeaa:	4650      	mov	r0, sl
 800aeac:	4659      	mov	r1, fp
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f7f5 fcf3 	bl	800089c <__aeabi_ddiv>
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	468b      	mov	fp, r1
 800aeba:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aebe:	d0da      	beq.n	800ae76 <_strtod_l+0x516>
 800aec0:	f1b8 0f1f 	cmp.w	r8, #31
 800aec4:	dd20      	ble.n	800af08 <_strtod_l+0x5a8>
 800aec6:	2400      	movs	r4, #0
 800aec8:	46a0      	mov	r8, r4
 800aeca:	9407      	str	r4, [sp, #28]
 800aecc:	9405      	str	r4, [sp, #20]
 800aece:	2322      	movs	r3, #34	; 0x22
 800aed0:	f04f 0a00 	mov.w	sl, #0
 800aed4:	f04f 0b00 	mov.w	fp, #0
 800aed8:	f8c9 3000 	str.w	r3, [r9]
 800aedc:	e765      	b.n	800adaa <_strtod_l+0x44a>
 800aede:	bf00      	nop
 800aee0:	0800f73b 	.word	0x0800f73b
 800aee4:	0800f7c3 	.word	0x0800f7c3
 800aee8:	0800f743 	.word	0x0800f743
 800aeec:	0800f784 	.word	0x0800f784
 800aef0:	0800f800 	.word	0x0800f800
 800aef4:	0800f7d8 	.word	0x0800f7d8
 800aef8:	7ff00000 	.word	0x7ff00000
 800aefc:	7ca00000 	.word	0x7ca00000
 800af00:	fff80000 	.word	0xfff80000
 800af04:	7fefffff 	.word	0x7fefffff
 800af08:	f018 0310 	ands.w	r3, r8, #16
 800af0c:	bf18      	it	ne
 800af0e:	236a      	movne	r3, #106	; 0x6a
 800af10:	4da0      	ldr	r5, [pc, #640]	; (800b194 <_strtod_l+0x834>)
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	4650      	mov	r0, sl
 800af16:	4659      	mov	r1, fp
 800af18:	2300      	movs	r3, #0
 800af1a:	f1b8 0f00 	cmp.w	r8, #0
 800af1e:	f300 810a 	bgt.w	800b136 <_strtod_l+0x7d6>
 800af22:	b10b      	cbz	r3, 800af28 <_strtod_l+0x5c8>
 800af24:	4682      	mov	sl, r0
 800af26:	468b      	mov	fp, r1
 800af28:	9b04      	ldr	r3, [sp, #16]
 800af2a:	b1bb      	cbz	r3, 800af5c <_strtod_l+0x5fc>
 800af2c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800af30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af34:	2b00      	cmp	r3, #0
 800af36:	4659      	mov	r1, fp
 800af38:	dd10      	ble.n	800af5c <_strtod_l+0x5fc>
 800af3a:	2b1f      	cmp	r3, #31
 800af3c:	f340 8107 	ble.w	800b14e <_strtod_l+0x7ee>
 800af40:	2b34      	cmp	r3, #52	; 0x34
 800af42:	bfde      	ittt	le
 800af44:	3b20      	suble	r3, #32
 800af46:	f04f 32ff 	movle.w	r2, #4294967295
 800af4a:	fa02 f303 	lslle.w	r3, r2, r3
 800af4e:	f04f 0a00 	mov.w	sl, #0
 800af52:	bfcc      	ite	gt
 800af54:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800af58:	ea03 0b01 	andle.w	fp, r3, r1
 800af5c:	2200      	movs	r2, #0
 800af5e:	2300      	movs	r3, #0
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	f7f5 fdd8 	bl	8000b18 <__aeabi_dcmpeq>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1ac      	bne.n	800aec6 <_strtod_l+0x566>
 800af6c:	9b07      	ldr	r3, [sp, #28]
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	9a05      	ldr	r2, [sp, #20]
 800af72:	9908      	ldr	r1, [sp, #32]
 800af74:	4623      	mov	r3, r4
 800af76:	4648      	mov	r0, r9
 800af78:	f001 fddc 	bl	800cb34 <__s2b>
 800af7c:	9007      	str	r0, [sp, #28]
 800af7e:	2800      	cmp	r0, #0
 800af80:	f43f af08 	beq.w	800ad94 <_strtod_l+0x434>
 800af84:	9a06      	ldr	r2, [sp, #24]
 800af86:	9b06      	ldr	r3, [sp, #24]
 800af88:	2a00      	cmp	r2, #0
 800af8a:	f1c3 0300 	rsb	r3, r3, #0
 800af8e:	bfa8      	it	ge
 800af90:	2300      	movge	r3, #0
 800af92:	930e      	str	r3, [sp, #56]	; 0x38
 800af94:	2400      	movs	r4, #0
 800af96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af9a:	9316      	str	r3, [sp, #88]	; 0x58
 800af9c:	46a0      	mov	r8, r4
 800af9e:	9b07      	ldr	r3, [sp, #28]
 800afa0:	4648      	mov	r0, r9
 800afa2:	6859      	ldr	r1, [r3, #4]
 800afa4:	f001 fd40 	bl	800ca28 <_Balloc>
 800afa8:	9005      	str	r0, [sp, #20]
 800afaa:	2800      	cmp	r0, #0
 800afac:	f43f aef6 	beq.w	800ad9c <_strtod_l+0x43c>
 800afb0:	9b07      	ldr	r3, [sp, #28]
 800afb2:	691a      	ldr	r2, [r3, #16]
 800afb4:	3202      	adds	r2, #2
 800afb6:	f103 010c 	add.w	r1, r3, #12
 800afba:	0092      	lsls	r2, r2, #2
 800afbc:	300c      	adds	r0, #12
 800afbe:	f7fe fe3b 	bl	8009c38 <memcpy>
 800afc2:	aa1e      	add	r2, sp, #120	; 0x78
 800afc4:	a91d      	add	r1, sp, #116	; 0x74
 800afc6:	ec4b ab10 	vmov	d0, sl, fp
 800afca:	4648      	mov	r0, r9
 800afcc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800afd0:	f002 f86c 	bl	800d0ac <__d2b>
 800afd4:	901c      	str	r0, [sp, #112]	; 0x70
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f43f aee0 	beq.w	800ad9c <_strtod_l+0x43c>
 800afdc:	2101      	movs	r1, #1
 800afde:	4648      	mov	r0, r9
 800afe0:	f001 fe34 	bl	800cc4c <__i2b>
 800afe4:	4680      	mov	r8, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	f43f aed8 	beq.w	800ad9c <_strtod_l+0x43c>
 800afec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800afee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aff0:	2e00      	cmp	r6, #0
 800aff2:	bfab      	itete	ge
 800aff4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aff6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aff8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800affa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800affc:	bfac      	ite	ge
 800affe:	18f7      	addge	r7, r6, r3
 800b000:	1b9d      	sublt	r5, r3, r6
 800b002:	9b04      	ldr	r3, [sp, #16]
 800b004:	1af6      	subs	r6, r6, r3
 800b006:	4416      	add	r6, r2
 800b008:	4b63      	ldr	r3, [pc, #396]	; (800b198 <_strtod_l+0x838>)
 800b00a:	3e01      	subs	r6, #1
 800b00c:	429e      	cmp	r6, r3
 800b00e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b012:	f280 80af 	bge.w	800b174 <_strtod_l+0x814>
 800b016:	1b9b      	subs	r3, r3, r6
 800b018:	2b1f      	cmp	r3, #31
 800b01a:	eba2 0203 	sub.w	r2, r2, r3
 800b01e:	f04f 0101 	mov.w	r1, #1
 800b022:	f300 809b 	bgt.w	800b15c <_strtod_l+0x7fc>
 800b026:	fa01 f303 	lsl.w	r3, r1, r3
 800b02a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b02c:	2300      	movs	r3, #0
 800b02e:	930a      	str	r3, [sp, #40]	; 0x28
 800b030:	18be      	adds	r6, r7, r2
 800b032:	9b04      	ldr	r3, [sp, #16]
 800b034:	42b7      	cmp	r7, r6
 800b036:	4415      	add	r5, r2
 800b038:	441d      	add	r5, r3
 800b03a:	463b      	mov	r3, r7
 800b03c:	bfa8      	it	ge
 800b03e:	4633      	movge	r3, r6
 800b040:	42ab      	cmp	r3, r5
 800b042:	bfa8      	it	ge
 800b044:	462b      	movge	r3, r5
 800b046:	2b00      	cmp	r3, #0
 800b048:	bfc2      	ittt	gt
 800b04a:	1af6      	subgt	r6, r6, r3
 800b04c:	1aed      	subgt	r5, r5, r3
 800b04e:	1aff      	subgt	r7, r7, r3
 800b050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b052:	b1bb      	cbz	r3, 800b084 <_strtod_l+0x724>
 800b054:	4641      	mov	r1, r8
 800b056:	461a      	mov	r2, r3
 800b058:	4648      	mov	r0, r9
 800b05a:	f001 fe97 	bl	800cd8c <__pow5mult>
 800b05e:	4680      	mov	r8, r0
 800b060:	2800      	cmp	r0, #0
 800b062:	f43f ae9b 	beq.w	800ad9c <_strtod_l+0x43c>
 800b066:	4601      	mov	r1, r0
 800b068:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b06a:	4648      	mov	r0, r9
 800b06c:	f001 fdf7 	bl	800cc5e <__multiply>
 800b070:	900c      	str	r0, [sp, #48]	; 0x30
 800b072:	2800      	cmp	r0, #0
 800b074:	f43f ae92 	beq.w	800ad9c <_strtod_l+0x43c>
 800b078:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b07a:	4648      	mov	r0, r9
 800b07c:	f001 fd08 	bl	800ca90 <_Bfree>
 800b080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b082:	931c      	str	r3, [sp, #112]	; 0x70
 800b084:	2e00      	cmp	r6, #0
 800b086:	dc7a      	bgt.n	800b17e <_strtod_l+0x81e>
 800b088:	9b06      	ldr	r3, [sp, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	dd08      	ble.n	800b0a0 <_strtod_l+0x740>
 800b08e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b090:	9905      	ldr	r1, [sp, #20]
 800b092:	4648      	mov	r0, r9
 800b094:	f001 fe7a 	bl	800cd8c <__pow5mult>
 800b098:	9005      	str	r0, [sp, #20]
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f ae7e 	beq.w	800ad9c <_strtod_l+0x43c>
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	dd08      	ble.n	800b0b6 <_strtod_l+0x756>
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	9905      	ldr	r1, [sp, #20]
 800b0a8:	4648      	mov	r0, r9
 800b0aa:	f001 febd 	bl	800ce28 <__lshift>
 800b0ae:	9005      	str	r0, [sp, #20]
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	f43f ae73 	beq.w	800ad9c <_strtod_l+0x43c>
 800b0b6:	2f00      	cmp	r7, #0
 800b0b8:	dd08      	ble.n	800b0cc <_strtod_l+0x76c>
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	463a      	mov	r2, r7
 800b0be:	4648      	mov	r0, r9
 800b0c0:	f001 feb2 	bl	800ce28 <__lshift>
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	f43f ae68 	beq.w	800ad9c <_strtod_l+0x43c>
 800b0cc:	9a05      	ldr	r2, [sp, #20]
 800b0ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0d0:	4648      	mov	r0, r9
 800b0d2:	f001 ff17 	bl	800cf04 <__mdiff>
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	f43f ae5f 	beq.w	800ad9c <_strtod_l+0x43c>
 800b0de:	68c3      	ldr	r3, [r0, #12]
 800b0e0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60c3      	str	r3, [r0, #12]
 800b0e6:	4641      	mov	r1, r8
 800b0e8:	f001 fef2 	bl	800ced0 <__mcmp>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	da55      	bge.n	800b19c <_strtod_l+0x83c>
 800b0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0f2:	b9e3      	cbnz	r3, 800b12e <_strtod_l+0x7ce>
 800b0f4:	f1ba 0f00 	cmp.w	sl, #0
 800b0f8:	d119      	bne.n	800b12e <_strtod_l+0x7ce>
 800b0fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0fe:	b9b3      	cbnz	r3, 800b12e <_strtod_l+0x7ce>
 800b100:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b104:	0d1b      	lsrs	r3, r3, #20
 800b106:	051b      	lsls	r3, r3, #20
 800b108:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b10c:	d90f      	bls.n	800b12e <_strtod_l+0x7ce>
 800b10e:	6963      	ldr	r3, [r4, #20]
 800b110:	b913      	cbnz	r3, 800b118 <_strtod_l+0x7b8>
 800b112:	6923      	ldr	r3, [r4, #16]
 800b114:	2b01      	cmp	r3, #1
 800b116:	dd0a      	ble.n	800b12e <_strtod_l+0x7ce>
 800b118:	4621      	mov	r1, r4
 800b11a:	2201      	movs	r2, #1
 800b11c:	4648      	mov	r0, r9
 800b11e:	f001 fe83 	bl	800ce28 <__lshift>
 800b122:	4641      	mov	r1, r8
 800b124:	4604      	mov	r4, r0
 800b126:	f001 fed3 	bl	800ced0 <__mcmp>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	dc67      	bgt.n	800b1fe <_strtod_l+0x89e>
 800b12e:	9b04      	ldr	r3, [sp, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d171      	bne.n	800b218 <_strtod_l+0x8b8>
 800b134:	e63d      	b.n	800adb2 <_strtod_l+0x452>
 800b136:	f018 0f01 	tst.w	r8, #1
 800b13a:	d004      	beq.n	800b146 <_strtod_l+0x7e6>
 800b13c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b140:	f7f5 fa82 	bl	8000648 <__aeabi_dmul>
 800b144:	2301      	movs	r3, #1
 800b146:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b14a:	3508      	adds	r5, #8
 800b14c:	e6e5      	b.n	800af1a <_strtod_l+0x5ba>
 800b14e:	f04f 32ff 	mov.w	r2, #4294967295
 800b152:	fa02 f303 	lsl.w	r3, r2, r3
 800b156:	ea03 0a0a 	and.w	sl, r3, sl
 800b15a:	e6ff      	b.n	800af5c <_strtod_l+0x5fc>
 800b15c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b160:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b164:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b168:	36e2      	adds	r6, #226	; 0xe2
 800b16a:	fa01 f306 	lsl.w	r3, r1, r6
 800b16e:	930a      	str	r3, [sp, #40]	; 0x28
 800b170:	910f      	str	r1, [sp, #60]	; 0x3c
 800b172:	e75d      	b.n	800b030 <_strtod_l+0x6d0>
 800b174:	2300      	movs	r3, #0
 800b176:	930a      	str	r3, [sp, #40]	; 0x28
 800b178:	2301      	movs	r3, #1
 800b17a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b17c:	e758      	b.n	800b030 <_strtod_l+0x6d0>
 800b17e:	4632      	mov	r2, r6
 800b180:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b182:	4648      	mov	r0, r9
 800b184:	f001 fe50 	bl	800ce28 <__lshift>
 800b188:	901c      	str	r0, [sp, #112]	; 0x70
 800b18a:	2800      	cmp	r0, #0
 800b18c:	f47f af7c 	bne.w	800b088 <_strtod_l+0x728>
 800b190:	e604      	b.n	800ad9c <_strtod_l+0x43c>
 800b192:	bf00      	nop
 800b194:	0800f798 	.word	0x0800f798
 800b198:	fffffc02 	.word	0xfffffc02
 800b19c:	465d      	mov	r5, fp
 800b19e:	f040 8086 	bne.w	800b2ae <_strtod_l+0x94e>
 800b1a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a8:	b32a      	cbz	r2, 800b1f6 <_strtod_l+0x896>
 800b1aa:	4aaf      	ldr	r2, [pc, #700]	; (800b468 <_strtod_l+0xb08>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d153      	bne.n	800b258 <_strtod_l+0x8f8>
 800b1b0:	9b04      	ldr	r3, [sp, #16]
 800b1b2:	4650      	mov	r0, sl
 800b1b4:	b1d3      	cbz	r3, 800b1ec <_strtod_l+0x88c>
 800b1b6:	4aad      	ldr	r2, [pc, #692]	; (800b46c <_strtod_l+0xb0c>)
 800b1b8:	402a      	ands	r2, r5
 800b1ba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b1be:	f04f 31ff 	mov.w	r1, #4294967295
 800b1c2:	d816      	bhi.n	800b1f2 <_strtod_l+0x892>
 800b1c4:	0d12      	lsrs	r2, r2, #20
 800b1c6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	d142      	bne.n	800b258 <_strtod_l+0x8f8>
 800b1d2:	4ba7      	ldr	r3, [pc, #668]	; (800b470 <_strtod_l+0xb10>)
 800b1d4:	429d      	cmp	r5, r3
 800b1d6:	d102      	bne.n	800b1de <_strtod_l+0x87e>
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f addf 	beq.w	800ad9c <_strtod_l+0x43c>
 800b1de:	4ba3      	ldr	r3, [pc, #652]	; (800b46c <_strtod_l+0xb0c>)
 800b1e0:	402b      	ands	r3, r5
 800b1e2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b1e6:	f04f 0a00 	mov.w	sl, #0
 800b1ea:	e7a0      	b.n	800b12e <_strtod_l+0x7ce>
 800b1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f0:	e7ed      	b.n	800b1ce <_strtod_l+0x86e>
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	e7eb      	b.n	800b1ce <_strtod_l+0x86e>
 800b1f6:	bb7b      	cbnz	r3, 800b258 <_strtod_l+0x8f8>
 800b1f8:	f1ba 0f00 	cmp.w	sl, #0
 800b1fc:	d12c      	bne.n	800b258 <_strtod_l+0x8f8>
 800b1fe:	9904      	ldr	r1, [sp, #16]
 800b200:	4a9a      	ldr	r2, [pc, #616]	; (800b46c <_strtod_l+0xb0c>)
 800b202:	465b      	mov	r3, fp
 800b204:	b1f1      	cbz	r1, 800b244 <_strtod_l+0x8e4>
 800b206:	ea02 010b 	and.w	r1, r2, fp
 800b20a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b20e:	dc19      	bgt.n	800b244 <_strtod_l+0x8e4>
 800b210:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b214:	f77f ae5b 	ble.w	800aece <_strtod_l+0x56e>
 800b218:	4a96      	ldr	r2, [pc, #600]	; (800b474 <_strtod_l+0xb14>)
 800b21a:	2300      	movs	r3, #0
 800b21c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b220:	4650      	mov	r0, sl
 800b222:	4659      	mov	r1, fp
 800b224:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b228:	f7f5 fa0e 	bl	8000648 <__aeabi_dmul>
 800b22c:	4682      	mov	sl, r0
 800b22e:	468b      	mov	fp, r1
 800b230:	2900      	cmp	r1, #0
 800b232:	f47f adbe 	bne.w	800adb2 <_strtod_l+0x452>
 800b236:	2800      	cmp	r0, #0
 800b238:	f47f adbb 	bne.w	800adb2 <_strtod_l+0x452>
 800b23c:	2322      	movs	r3, #34	; 0x22
 800b23e:	f8c9 3000 	str.w	r3, [r9]
 800b242:	e5b6      	b.n	800adb2 <_strtod_l+0x452>
 800b244:	4013      	ands	r3, r2
 800b246:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b24a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b24e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b252:	f04f 3aff 	mov.w	sl, #4294967295
 800b256:	e76a      	b.n	800b12e <_strtod_l+0x7ce>
 800b258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b25a:	b193      	cbz	r3, 800b282 <_strtod_l+0x922>
 800b25c:	422b      	tst	r3, r5
 800b25e:	f43f af66 	beq.w	800b12e <_strtod_l+0x7ce>
 800b262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b264:	9a04      	ldr	r2, [sp, #16]
 800b266:	4650      	mov	r0, sl
 800b268:	4659      	mov	r1, fp
 800b26a:	b173      	cbz	r3, 800b28a <_strtod_l+0x92a>
 800b26c:	f7ff fb5c 	bl	800a928 <sulp>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b278:	f7f5 f830 	bl	80002dc <__adddf3>
 800b27c:	4682      	mov	sl, r0
 800b27e:	468b      	mov	fp, r1
 800b280:	e755      	b.n	800b12e <_strtod_l+0x7ce>
 800b282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b284:	ea13 0f0a 	tst.w	r3, sl
 800b288:	e7e9      	b.n	800b25e <_strtod_l+0x8fe>
 800b28a:	f7ff fb4d 	bl	800a928 <sulp>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b296:	f7f5 f81f 	bl	80002d8 <__aeabi_dsub>
 800b29a:	2200      	movs	r2, #0
 800b29c:	2300      	movs	r3, #0
 800b29e:	4682      	mov	sl, r0
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	f7f5 fc39 	bl	8000b18 <__aeabi_dcmpeq>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	f47f ae11 	bne.w	800aece <_strtod_l+0x56e>
 800b2ac:	e73f      	b.n	800b12e <_strtod_l+0x7ce>
 800b2ae:	4641      	mov	r1, r8
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f001 ff4a 	bl	800d14a <__ratio>
 800b2b6:	ec57 6b10 	vmov	r6, r7, d0
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2c0:	ee10 0a10 	vmov	r0, s0
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 fc3b 	bl	8000b40 <__aeabi_dcmple>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d077      	beq.n	800b3be <_strtod_l+0xa5e>
 800b2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d04a      	beq.n	800b36a <_strtod_l+0xa0a>
 800b2d4:	4b68      	ldr	r3, [pc, #416]	; (800b478 <_strtod_l+0xb18>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b2dc:	4f66      	ldr	r7, [pc, #408]	; (800b478 <_strtod_l+0xb18>)
 800b2de:	2600      	movs	r6, #0
 800b2e0:	4b62      	ldr	r3, [pc, #392]	; (800b46c <_strtod_l+0xb0c>)
 800b2e2:	402b      	ands	r3, r5
 800b2e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2e8:	4b64      	ldr	r3, [pc, #400]	; (800b47c <_strtod_l+0xb1c>)
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	f040 80ce 	bne.w	800b48c <_strtod_l+0xb2c>
 800b2f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2f8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b2fc:	ec4b ab10 	vmov	d0, sl, fp
 800b300:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b304:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b308:	f001 fe5a 	bl	800cfc0 <__ulp>
 800b30c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b310:	ec53 2b10 	vmov	r2, r3, d0
 800b314:	f7f5 f998 	bl	8000648 <__aeabi_dmul>
 800b318:	4652      	mov	r2, sl
 800b31a:	465b      	mov	r3, fp
 800b31c:	f7f4 ffde 	bl	80002dc <__adddf3>
 800b320:	460b      	mov	r3, r1
 800b322:	4952      	ldr	r1, [pc, #328]	; (800b46c <_strtod_l+0xb0c>)
 800b324:	4a56      	ldr	r2, [pc, #344]	; (800b480 <_strtod_l+0xb20>)
 800b326:	4019      	ands	r1, r3
 800b328:	4291      	cmp	r1, r2
 800b32a:	4682      	mov	sl, r0
 800b32c:	d95b      	bls.n	800b3e6 <_strtod_l+0xa86>
 800b32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b330:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b334:	4293      	cmp	r3, r2
 800b336:	d103      	bne.n	800b340 <_strtod_l+0x9e0>
 800b338:	9b08      	ldr	r3, [sp, #32]
 800b33a:	3301      	adds	r3, #1
 800b33c:	f43f ad2e 	beq.w	800ad9c <_strtod_l+0x43c>
 800b340:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b470 <_strtod_l+0xb10>
 800b344:	f04f 3aff 	mov.w	sl, #4294967295
 800b348:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b34a:	4648      	mov	r0, r9
 800b34c:	f001 fba0 	bl	800ca90 <_Bfree>
 800b350:	9905      	ldr	r1, [sp, #20]
 800b352:	4648      	mov	r0, r9
 800b354:	f001 fb9c 	bl	800ca90 <_Bfree>
 800b358:	4641      	mov	r1, r8
 800b35a:	4648      	mov	r0, r9
 800b35c:	f001 fb98 	bl	800ca90 <_Bfree>
 800b360:	4621      	mov	r1, r4
 800b362:	4648      	mov	r0, r9
 800b364:	f001 fb94 	bl	800ca90 <_Bfree>
 800b368:	e619      	b.n	800af9e <_strtod_l+0x63e>
 800b36a:	f1ba 0f00 	cmp.w	sl, #0
 800b36e:	d11a      	bne.n	800b3a6 <_strtod_l+0xa46>
 800b370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b374:	b9eb      	cbnz	r3, 800b3b2 <_strtod_l+0xa52>
 800b376:	2200      	movs	r2, #0
 800b378:	4b3f      	ldr	r3, [pc, #252]	; (800b478 <_strtod_l+0xb18>)
 800b37a:	4630      	mov	r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f5 fbd5 	bl	8000b2c <__aeabi_dcmplt>
 800b382:	b9c8      	cbnz	r0, 800b3b8 <_strtod_l+0xa58>
 800b384:	4630      	mov	r0, r6
 800b386:	4639      	mov	r1, r7
 800b388:	2200      	movs	r2, #0
 800b38a:	4b3e      	ldr	r3, [pc, #248]	; (800b484 <_strtod_l+0xb24>)
 800b38c:	f7f5 f95c 	bl	8000648 <__aeabi_dmul>
 800b390:	4606      	mov	r6, r0
 800b392:	460f      	mov	r7, r1
 800b394:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b398:	9618      	str	r6, [sp, #96]	; 0x60
 800b39a:	9319      	str	r3, [sp, #100]	; 0x64
 800b39c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b3a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b3a4:	e79c      	b.n	800b2e0 <_strtod_l+0x980>
 800b3a6:	f1ba 0f01 	cmp.w	sl, #1
 800b3aa:	d102      	bne.n	800b3b2 <_strtod_l+0xa52>
 800b3ac:	2d00      	cmp	r5, #0
 800b3ae:	f43f ad8e 	beq.w	800aece <_strtod_l+0x56e>
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	4b34      	ldr	r3, [pc, #208]	; (800b488 <_strtod_l+0xb28>)
 800b3b6:	e78f      	b.n	800b2d8 <_strtod_l+0x978>
 800b3b8:	2600      	movs	r6, #0
 800b3ba:	4f32      	ldr	r7, [pc, #200]	; (800b484 <_strtod_l+0xb24>)
 800b3bc:	e7ea      	b.n	800b394 <_strtod_l+0xa34>
 800b3be:	4b31      	ldr	r3, [pc, #196]	; (800b484 <_strtod_l+0xb24>)
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f7f5 f93f 	bl	8000648 <__aeabi_dmul>
 800b3ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	460f      	mov	r7, r1
 800b3d0:	b933      	cbnz	r3, 800b3e0 <_strtod_l+0xa80>
 800b3d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3d6:	9010      	str	r0, [sp, #64]	; 0x40
 800b3d8:	9311      	str	r3, [sp, #68]	; 0x44
 800b3da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3de:	e7df      	b.n	800b3a0 <_strtod_l+0xa40>
 800b3e0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b3e4:	e7f9      	b.n	800b3da <_strtod_l+0xa7a>
 800b3e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b3ea:	9b04      	ldr	r3, [sp, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1ab      	bne.n	800b348 <_strtod_l+0x9e8>
 800b3f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3f4:	0d1b      	lsrs	r3, r3, #20
 800b3f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3f8:	051b      	lsls	r3, r3, #20
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	465d      	mov	r5, fp
 800b3fe:	d1a3      	bne.n	800b348 <_strtod_l+0x9e8>
 800b400:	4639      	mov	r1, r7
 800b402:	4630      	mov	r0, r6
 800b404:	f7f5 fbd0 	bl	8000ba8 <__aeabi_d2iz>
 800b408:	f7f5 f8b4 	bl	8000574 <__aeabi_i2d>
 800b40c:	460b      	mov	r3, r1
 800b40e:	4602      	mov	r2, r0
 800b410:	4639      	mov	r1, r7
 800b412:	4630      	mov	r0, r6
 800b414:	f7f4 ff60 	bl	80002d8 <__aeabi_dsub>
 800b418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b41a:	4606      	mov	r6, r0
 800b41c:	460f      	mov	r7, r1
 800b41e:	b933      	cbnz	r3, 800b42e <_strtod_l+0xace>
 800b420:	f1ba 0f00 	cmp.w	sl, #0
 800b424:	d103      	bne.n	800b42e <_strtod_l+0xace>
 800b426:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b42a:	2d00      	cmp	r5, #0
 800b42c:	d06d      	beq.n	800b50a <_strtod_l+0xbaa>
 800b42e:	a30a      	add	r3, pc, #40	; (adr r3, 800b458 <_strtod_l+0xaf8>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	f7f5 fb78 	bl	8000b2c <__aeabi_dcmplt>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f47f acb8 	bne.w	800adb2 <_strtod_l+0x452>
 800b442:	a307      	add	r3, pc, #28	; (adr r3, 800b460 <_strtod_l+0xb00>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	4630      	mov	r0, r6
 800b44a:	4639      	mov	r1, r7
 800b44c:	f7f5 fb8c 	bl	8000b68 <__aeabi_dcmpgt>
 800b450:	2800      	cmp	r0, #0
 800b452:	f43f af79 	beq.w	800b348 <_strtod_l+0x9e8>
 800b456:	e4ac      	b.n	800adb2 <_strtod_l+0x452>
 800b458:	94a03595 	.word	0x94a03595
 800b45c:	3fdfffff 	.word	0x3fdfffff
 800b460:	35afe535 	.word	0x35afe535
 800b464:	3fe00000 	.word	0x3fe00000
 800b468:	000fffff 	.word	0x000fffff
 800b46c:	7ff00000 	.word	0x7ff00000
 800b470:	7fefffff 	.word	0x7fefffff
 800b474:	39500000 	.word	0x39500000
 800b478:	3ff00000 	.word	0x3ff00000
 800b47c:	7fe00000 	.word	0x7fe00000
 800b480:	7c9fffff 	.word	0x7c9fffff
 800b484:	3fe00000 	.word	0x3fe00000
 800b488:	bff00000 	.word	0xbff00000
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	b333      	cbz	r3, 800b4de <_strtod_l+0xb7e>
 800b490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b492:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b496:	d822      	bhi.n	800b4de <_strtod_l+0xb7e>
 800b498:	a327      	add	r3, pc, #156	; (adr r3, 800b538 <_strtod_l+0xbd8>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	f7f5 fb4d 	bl	8000b40 <__aeabi_dcmple>
 800b4a6:	b1a0      	cbz	r0, 800b4d2 <_strtod_l+0xb72>
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7f5 fba4 	bl	8000bf8 <__aeabi_d2uiz>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	bf08      	it	eq
 800b4b4:	2001      	moveq	r0, #1
 800b4b6:	f7f5 f84d 	bl	8000554 <__aeabi_ui2d>
 800b4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4bc:	4606      	mov	r6, r0
 800b4be:	460f      	mov	r7, r1
 800b4c0:	bb03      	cbnz	r3, 800b504 <_strtod_l+0xba4>
 800b4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4c6:	9012      	str	r0, [sp, #72]	; 0x48
 800b4c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b4ca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b4ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4d6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b4da:	1a9b      	subs	r3, r3, r2
 800b4dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4de:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b4e2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b4e6:	f001 fd6b 	bl	800cfc0 <__ulp>
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	ec53 2b10 	vmov	r2, r3, d0
 800b4f0:	4659      	mov	r1, fp
 800b4f2:	f7f5 f8a9 	bl	8000648 <__aeabi_dmul>
 800b4f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4fa:	f7f4 feef 	bl	80002dc <__adddf3>
 800b4fe:	4682      	mov	sl, r0
 800b500:	468b      	mov	fp, r1
 800b502:	e772      	b.n	800b3ea <_strtod_l+0xa8a>
 800b504:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b508:	e7df      	b.n	800b4ca <_strtod_l+0xb6a>
 800b50a:	a30d      	add	r3, pc, #52	; (adr r3, 800b540 <_strtod_l+0xbe0>)
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f7f5 fb0c 	bl	8000b2c <__aeabi_dcmplt>
 800b514:	e79c      	b.n	800b450 <_strtod_l+0xaf0>
 800b516:	2300      	movs	r3, #0
 800b518:	930d      	str	r3, [sp, #52]	; 0x34
 800b51a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	f7ff ba61 	b.w	800a9e6 <_strtod_l+0x86>
 800b524:	2b65      	cmp	r3, #101	; 0x65
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	f43f ab4e 	beq.w	800abca <_strtod_l+0x26a>
 800b52e:	2101      	movs	r1, #1
 800b530:	4614      	mov	r4, r2
 800b532:	9104      	str	r1, [sp, #16]
 800b534:	f7ff bacb 	b.w	800aace <_strtod_l+0x16e>
 800b538:	ffc00000 	.word	0xffc00000
 800b53c:	41dfffff 	.word	0x41dfffff
 800b540:	94a03595 	.word	0x94a03595
 800b544:	3fcfffff 	.word	0x3fcfffff

0800b548 <_strtod_r>:
 800b548:	4b05      	ldr	r3, [pc, #20]	; (800b560 <_strtod_r+0x18>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	b410      	push	{r4}
 800b54e:	6a1b      	ldr	r3, [r3, #32]
 800b550:	4c04      	ldr	r4, [pc, #16]	; (800b564 <_strtod_r+0x1c>)
 800b552:	2b00      	cmp	r3, #0
 800b554:	bf08      	it	eq
 800b556:	4623      	moveq	r3, r4
 800b558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b55c:	f7ff ba00 	b.w	800a960 <_strtod_l>
 800b560:	20001640 	.word	0x20001640
 800b564:	200016a4 	.word	0x200016a4

0800b568 <_strtol_l.isra.0>:
 800b568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b56c:	4680      	mov	r8, r0
 800b56e:	4689      	mov	r9, r1
 800b570:	4692      	mov	sl, r2
 800b572:	461e      	mov	r6, r3
 800b574:	460f      	mov	r7, r1
 800b576:	463d      	mov	r5, r7
 800b578:	9808      	ldr	r0, [sp, #32]
 800b57a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b57e:	f001 fa25 	bl	800c9cc <__locale_ctype_ptr_l>
 800b582:	4420      	add	r0, r4
 800b584:	7843      	ldrb	r3, [r0, #1]
 800b586:	f013 0308 	ands.w	r3, r3, #8
 800b58a:	d132      	bne.n	800b5f2 <_strtol_l.isra.0+0x8a>
 800b58c:	2c2d      	cmp	r4, #45	; 0x2d
 800b58e:	d132      	bne.n	800b5f6 <_strtol_l.isra.0+0x8e>
 800b590:	787c      	ldrb	r4, [r7, #1]
 800b592:	1cbd      	adds	r5, r7, #2
 800b594:	2201      	movs	r2, #1
 800b596:	2e00      	cmp	r6, #0
 800b598:	d05d      	beq.n	800b656 <_strtol_l.isra.0+0xee>
 800b59a:	2e10      	cmp	r6, #16
 800b59c:	d109      	bne.n	800b5b2 <_strtol_l.isra.0+0x4a>
 800b59e:	2c30      	cmp	r4, #48	; 0x30
 800b5a0:	d107      	bne.n	800b5b2 <_strtol_l.isra.0+0x4a>
 800b5a2:	782b      	ldrb	r3, [r5, #0]
 800b5a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b5a8:	2b58      	cmp	r3, #88	; 0x58
 800b5aa:	d14f      	bne.n	800b64c <_strtol_l.isra.0+0xe4>
 800b5ac:	786c      	ldrb	r4, [r5, #1]
 800b5ae:	2610      	movs	r6, #16
 800b5b0:	3502      	adds	r5, #2
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	bf14      	ite	ne
 800b5b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b5ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b5be:	2700      	movs	r7, #0
 800b5c0:	fbb1 fcf6 	udiv	ip, r1, r6
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b5ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b5ce:	2b09      	cmp	r3, #9
 800b5d0:	d817      	bhi.n	800b602 <_strtol_l.isra.0+0x9a>
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	42a6      	cmp	r6, r4
 800b5d6:	dd23      	ble.n	800b620 <_strtol_l.isra.0+0xb8>
 800b5d8:	1c7b      	adds	r3, r7, #1
 800b5da:	d007      	beq.n	800b5ec <_strtol_l.isra.0+0x84>
 800b5dc:	4584      	cmp	ip, r0
 800b5de:	d31c      	bcc.n	800b61a <_strtol_l.isra.0+0xb2>
 800b5e0:	d101      	bne.n	800b5e6 <_strtol_l.isra.0+0x7e>
 800b5e2:	45a6      	cmp	lr, r4
 800b5e4:	db19      	blt.n	800b61a <_strtol_l.isra.0+0xb2>
 800b5e6:	fb00 4006 	mla	r0, r0, r6, r4
 800b5ea:	2701      	movs	r7, #1
 800b5ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5f0:	e7eb      	b.n	800b5ca <_strtol_l.isra.0+0x62>
 800b5f2:	462f      	mov	r7, r5
 800b5f4:	e7bf      	b.n	800b576 <_strtol_l.isra.0+0xe>
 800b5f6:	2c2b      	cmp	r4, #43	; 0x2b
 800b5f8:	bf04      	itt	eq
 800b5fa:	1cbd      	addeq	r5, r7, #2
 800b5fc:	787c      	ldrbeq	r4, [r7, #1]
 800b5fe:	461a      	mov	r2, r3
 800b600:	e7c9      	b.n	800b596 <_strtol_l.isra.0+0x2e>
 800b602:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b606:	2b19      	cmp	r3, #25
 800b608:	d801      	bhi.n	800b60e <_strtol_l.isra.0+0xa6>
 800b60a:	3c37      	subs	r4, #55	; 0x37
 800b60c:	e7e2      	b.n	800b5d4 <_strtol_l.isra.0+0x6c>
 800b60e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b612:	2b19      	cmp	r3, #25
 800b614:	d804      	bhi.n	800b620 <_strtol_l.isra.0+0xb8>
 800b616:	3c57      	subs	r4, #87	; 0x57
 800b618:	e7dc      	b.n	800b5d4 <_strtol_l.isra.0+0x6c>
 800b61a:	f04f 37ff 	mov.w	r7, #4294967295
 800b61e:	e7e5      	b.n	800b5ec <_strtol_l.isra.0+0x84>
 800b620:	1c7b      	adds	r3, r7, #1
 800b622:	d108      	bne.n	800b636 <_strtol_l.isra.0+0xce>
 800b624:	2322      	movs	r3, #34	; 0x22
 800b626:	f8c8 3000 	str.w	r3, [r8]
 800b62a:	4608      	mov	r0, r1
 800b62c:	f1ba 0f00 	cmp.w	sl, #0
 800b630:	d107      	bne.n	800b642 <_strtol_l.isra.0+0xda>
 800b632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b636:	b102      	cbz	r2, 800b63a <_strtol_l.isra.0+0xd2>
 800b638:	4240      	negs	r0, r0
 800b63a:	f1ba 0f00 	cmp.w	sl, #0
 800b63e:	d0f8      	beq.n	800b632 <_strtol_l.isra.0+0xca>
 800b640:	b10f      	cbz	r7, 800b646 <_strtol_l.isra.0+0xde>
 800b642:	f105 39ff 	add.w	r9, r5, #4294967295
 800b646:	f8ca 9000 	str.w	r9, [sl]
 800b64a:	e7f2      	b.n	800b632 <_strtol_l.isra.0+0xca>
 800b64c:	2430      	movs	r4, #48	; 0x30
 800b64e:	2e00      	cmp	r6, #0
 800b650:	d1af      	bne.n	800b5b2 <_strtol_l.isra.0+0x4a>
 800b652:	2608      	movs	r6, #8
 800b654:	e7ad      	b.n	800b5b2 <_strtol_l.isra.0+0x4a>
 800b656:	2c30      	cmp	r4, #48	; 0x30
 800b658:	d0a3      	beq.n	800b5a2 <_strtol_l.isra.0+0x3a>
 800b65a:	260a      	movs	r6, #10
 800b65c:	e7a9      	b.n	800b5b2 <_strtol_l.isra.0+0x4a>
	...

0800b660 <_strtol_r>:
 800b660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b662:	4c06      	ldr	r4, [pc, #24]	; (800b67c <_strtol_r+0x1c>)
 800b664:	4d06      	ldr	r5, [pc, #24]	; (800b680 <_strtol_r+0x20>)
 800b666:	6824      	ldr	r4, [r4, #0]
 800b668:	6a24      	ldr	r4, [r4, #32]
 800b66a:	2c00      	cmp	r4, #0
 800b66c:	bf08      	it	eq
 800b66e:	462c      	moveq	r4, r5
 800b670:	9400      	str	r4, [sp, #0]
 800b672:	f7ff ff79 	bl	800b568 <_strtol_l.isra.0>
 800b676:	b003      	add	sp, #12
 800b678:	bd30      	pop	{r4, r5, pc}
 800b67a:	bf00      	nop
 800b67c:	20001640 	.word	0x20001640
 800b680:	200016a4 	.word	0x200016a4

0800b684 <_vsniprintf_r>:
 800b684:	b530      	push	{r4, r5, lr}
 800b686:	1e14      	subs	r4, r2, #0
 800b688:	4605      	mov	r5, r0
 800b68a:	b09b      	sub	sp, #108	; 0x6c
 800b68c:	4618      	mov	r0, r3
 800b68e:	da05      	bge.n	800b69c <_vsniprintf_r+0x18>
 800b690:	238b      	movs	r3, #139	; 0x8b
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	f04f 30ff 	mov.w	r0, #4294967295
 800b698:	b01b      	add	sp, #108	; 0x6c
 800b69a:	bd30      	pop	{r4, r5, pc}
 800b69c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b6a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b6a4:	bf14      	ite	ne
 800b6a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6aa:	4623      	moveq	r3, r4
 800b6ac:	9302      	str	r3, [sp, #8]
 800b6ae:	9305      	str	r3, [sp, #20]
 800b6b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6b4:	9100      	str	r1, [sp, #0]
 800b6b6:	9104      	str	r1, [sp, #16]
 800b6b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b6bc:	4602      	mov	r2, r0
 800b6be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6c0:	4669      	mov	r1, sp
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f001 fec0 	bl	800d448 <_svfiprintf_r>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	bfbc      	itt	lt
 800b6cc:	238b      	movlt	r3, #139	; 0x8b
 800b6ce:	602b      	strlt	r3, [r5, #0]
 800b6d0:	2c00      	cmp	r4, #0
 800b6d2:	d0e1      	beq.n	800b698 <_vsniprintf_r+0x14>
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	701a      	strb	r2, [r3, #0]
 800b6da:	e7dd      	b.n	800b698 <_vsniprintf_r+0x14>

0800b6dc <vsniprintf>:
 800b6dc:	b507      	push	{r0, r1, r2, lr}
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	460a      	mov	r2, r1
 800b6e4:	4601      	mov	r1, r0
 800b6e6:	4803      	ldr	r0, [pc, #12]	; (800b6f4 <vsniprintf+0x18>)
 800b6e8:	6800      	ldr	r0, [r0, #0]
 800b6ea:	f7ff ffcb 	bl	800b684 <_vsniprintf_r>
 800b6ee:	b003      	add	sp, #12
 800b6f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6f4:	20001640 	.word	0x20001640

0800b6f8 <quorem>:
 800b6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	6903      	ldr	r3, [r0, #16]
 800b6fe:	690c      	ldr	r4, [r1, #16]
 800b700:	42a3      	cmp	r3, r4
 800b702:	4680      	mov	r8, r0
 800b704:	f2c0 8082 	blt.w	800b80c <quorem+0x114>
 800b708:	3c01      	subs	r4, #1
 800b70a:	f101 0714 	add.w	r7, r1, #20
 800b70e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b712:	f100 0614 	add.w	r6, r0, #20
 800b716:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b71a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b71e:	eb06 030c 	add.w	r3, r6, ip
 800b722:	3501      	adds	r5, #1
 800b724:	eb07 090c 	add.w	r9, r7, ip
 800b728:	9301      	str	r3, [sp, #4]
 800b72a:	fbb0 f5f5 	udiv	r5, r0, r5
 800b72e:	b395      	cbz	r5, 800b796 <quorem+0x9e>
 800b730:	f04f 0a00 	mov.w	sl, #0
 800b734:	4638      	mov	r0, r7
 800b736:	46b6      	mov	lr, r6
 800b738:	46d3      	mov	fp, sl
 800b73a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b73e:	b293      	uxth	r3, r2
 800b740:	fb05 a303 	mla	r3, r5, r3, sl
 800b744:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b748:	b29b      	uxth	r3, r3
 800b74a:	ebab 0303 	sub.w	r3, fp, r3
 800b74e:	0c12      	lsrs	r2, r2, #16
 800b750:	f8de b000 	ldr.w	fp, [lr]
 800b754:	fb05 a202 	mla	r2, r5, r2, sl
 800b758:	fa13 f38b 	uxtah	r3, r3, fp
 800b75c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b760:	fa1f fb82 	uxth.w	fp, r2
 800b764:	f8de 2000 	ldr.w	r2, [lr]
 800b768:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b76c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b770:	b29b      	uxth	r3, r3
 800b772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b776:	4581      	cmp	r9, r0
 800b778:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b77c:	f84e 3b04 	str.w	r3, [lr], #4
 800b780:	d2db      	bcs.n	800b73a <quorem+0x42>
 800b782:	f856 300c 	ldr.w	r3, [r6, ip]
 800b786:	b933      	cbnz	r3, 800b796 <quorem+0x9e>
 800b788:	9b01      	ldr	r3, [sp, #4]
 800b78a:	3b04      	subs	r3, #4
 800b78c:	429e      	cmp	r6, r3
 800b78e:	461a      	mov	r2, r3
 800b790:	d330      	bcc.n	800b7f4 <quorem+0xfc>
 800b792:	f8c8 4010 	str.w	r4, [r8, #16]
 800b796:	4640      	mov	r0, r8
 800b798:	f001 fb9a 	bl	800ced0 <__mcmp>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	db25      	blt.n	800b7ec <quorem+0xf4>
 800b7a0:	3501      	adds	r5, #1
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f04f 0c00 	mov.w	ip, #0
 800b7a8:	f857 2b04 	ldr.w	r2, [r7], #4
 800b7ac:	f8d0 e000 	ldr.w	lr, [r0]
 800b7b0:	b293      	uxth	r3, r2
 800b7b2:	ebac 0303 	sub.w	r3, ip, r3
 800b7b6:	0c12      	lsrs	r2, r2, #16
 800b7b8:	fa13 f38e 	uxtah	r3, r3, lr
 800b7bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ca:	45b9      	cmp	r9, r7
 800b7cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7d0:	f840 3b04 	str.w	r3, [r0], #4
 800b7d4:	d2e8      	bcs.n	800b7a8 <quorem+0xb0>
 800b7d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b7da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b7de:	b92a      	cbnz	r2, 800b7ec <quorem+0xf4>
 800b7e0:	3b04      	subs	r3, #4
 800b7e2:	429e      	cmp	r6, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	d30b      	bcc.n	800b800 <quorem+0x108>
 800b7e8:	f8c8 4010 	str.w	r4, [r8, #16]
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	b003      	add	sp, #12
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	6812      	ldr	r2, [r2, #0]
 800b7f6:	3b04      	subs	r3, #4
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d1ca      	bne.n	800b792 <quorem+0x9a>
 800b7fc:	3c01      	subs	r4, #1
 800b7fe:	e7c5      	b.n	800b78c <quorem+0x94>
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	3b04      	subs	r3, #4
 800b804:	2a00      	cmp	r2, #0
 800b806:	d1ef      	bne.n	800b7e8 <quorem+0xf0>
 800b808:	3c01      	subs	r4, #1
 800b80a:	e7ea      	b.n	800b7e2 <quorem+0xea>
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7ee      	b.n	800b7ee <quorem+0xf6>

0800b810 <_dtoa_r>:
 800b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	ec57 6b10 	vmov	r6, r7, d0
 800b818:	b097      	sub	sp, #92	; 0x5c
 800b81a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b81c:	9106      	str	r1, [sp, #24]
 800b81e:	4604      	mov	r4, r0
 800b820:	920b      	str	r2, [sp, #44]	; 0x2c
 800b822:	9312      	str	r3, [sp, #72]	; 0x48
 800b824:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b828:	e9cd 6700 	strd	r6, r7, [sp]
 800b82c:	b93d      	cbnz	r5, 800b83e <_dtoa_r+0x2e>
 800b82e:	2010      	movs	r0, #16
 800b830:	f001 f8e0 	bl	800c9f4 <malloc>
 800b834:	6260      	str	r0, [r4, #36]	; 0x24
 800b836:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b83a:	6005      	str	r5, [r0, #0]
 800b83c:	60c5      	str	r5, [r0, #12]
 800b83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b840:	6819      	ldr	r1, [r3, #0]
 800b842:	b151      	cbz	r1, 800b85a <_dtoa_r+0x4a>
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	604a      	str	r2, [r1, #4]
 800b848:	2301      	movs	r3, #1
 800b84a:	4093      	lsls	r3, r2
 800b84c:	608b      	str	r3, [r1, #8]
 800b84e:	4620      	mov	r0, r4
 800b850:	f001 f91e 	bl	800ca90 <_Bfree>
 800b854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	1e3b      	subs	r3, r7, #0
 800b85c:	bfbb      	ittet	lt
 800b85e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b862:	9301      	strlt	r3, [sp, #4]
 800b864:	2300      	movge	r3, #0
 800b866:	2201      	movlt	r2, #1
 800b868:	bfac      	ite	ge
 800b86a:	f8c8 3000 	strge.w	r3, [r8]
 800b86e:	f8c8 2000 	strlt.w	r2, [r8]
 800b872:	4baf      	ldr	r3, [pc, #700]	; (800bb30 <_dtoa_r+0x320>)
 800b874:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b878:	ea33 0308 	bics.w	r3, r3, r8
 800b87c:	d114      	bne.n	800b8a8 <_dtoa_r+0x98>
 800b87e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b880:	f242 730f 	movw	r3, #9999	; 0x270f
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	9b00      	ldr	r3, [sp, #0]
 800b888:	b923      	cbnz	r3, 800b894 <_dtoa_r+0x84>
 800b88a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b88e:	2800      	cmp	r0, #0
 800b890:	f000 8542 	beq.w	800c318 <_dtoa_r+0xb08>
 800b894:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b896:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bb44 <_dtoa_r+0x334>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 8544 	beq.w	800c328 <_dtoa_r+0xb18>
 800b8a0:	f10b 0303 	add.w	r3, fp, #3
 800b8a4:	f000 bd3e 	b.w	800c324 <_dtoa_r+0xb14>
 800b8a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f5 f930 	bl	8000b18 <__aeabi_dcmpeq>
 800b8b8:	4681      	mov	r9, r0
 800b8ba:	b168      	cbz	r0, 800b8d8 <_dtoa_r+0xc8>
 800b8bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8be:	2301      	movs	r3, #1
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 8524 	beq.w	800c312 <_dtoa_r+0xb02>
 800b8ca:	4b9a      	ldr	r3, [pc, #616]	; (800bb34 <_dtoa_r+0x324>)
 800b8cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8ce:	f103 3bff 	add.w	fp, r3, #4294967295
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	f000 bd28 	b.w	800c328 <_dtoa_r+0xb18>
 800b8d8:	aa14      	add	r2, sp, #80	; 0x50
 800b8da:	a915      	add	r1, sp, #84	; 0x54
 800b8dc:	ec47 6b10 	vmov	d0, r6, r7
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f001 fbe3 	bl	800d0ac <__d2b>
 800b8e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8ea:	9004      	str	r0, [sp, #16]
 800b8ec:	2d00      	cmp	r5, #0
 800b8ee:	d07c      	beq.n	800b9ea <_dtoa_r+0x1da>
 800b8f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b8f8:	46b2      	mov	sl, r6
 800b8fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b8fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b902:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b906:	2200      	movs	r2, #0
 800b908:	4b8b      	ldr	r3, [pc, #556]	; (800bb38 <_dtoa_r+0x328>)
 800b90a:	4650      	mov	r0, sl
 800b90c:	4659      	mov	r1, fp
 800b90e:	f7f4 fce3 	bl	80002d8 <__aeabi_dsub>
 800b912:	a381      	add	r3, pc, #516	; (adr r3, 800bb18 <_dtoa_r+0x308>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f7f4 fe96 	bl	8000648 <__aeabi_dmul>
 800b91c:	a380      	add	r3, pc, #512	; (adr r3, 800bb20 <_dtoa_r+0x310>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f7f4 fcdb 	bl	80002dc <__adddf3>
 800b926:	4606      	mov	r6, r0
 800b928:	4628      	mov	r0, r5
 800b92a:	460f      	mov	r7, r1
 800b92c:	f7f4 fe22 	bl	8000574 <__aeabi_i2d>
 800b930:	a37d      	add	r3, pc, #500	; (adr r3, 800bb28 <_dtoa_r+0x318>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fe87 	bl	8000648 <__aeabi_dmul>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	4630      	mov	r0, r6
 800b940:	4639      	mov	r1, r7
 800b942:	f7f4 fccb 	bl	80002dc <__adddf3>
 800b946:	4606      	mov	r6, r0
 800b948:	460f      	mov	r7, r1
 800b94a:	f7f5 f92d 	bl	8000ba8 <__aeabi_d2iz>
 800b94e:	2200      	movs	r2, #0
 800b950:	4682      	mov	sl, r0
 800b952:	2300      	movs	r3, #0
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f5 f8e8 	bl	8000b2c <__aeabi_dcmplt>
 800b95c:	b148      	cbz	r0, 800b972 <_dtoa_r+0x162>
 800b95e:	4650      	mov	r0, sl
 800b960:	f7f4 fe08 	bl	8000574 <__aeabi_i2d>
 800b964:	4632      	mov	r2, r6
 800b966:	463b      	mov	r3, r7
 800b968:	f7f5 f8d6 	bl	8000b18 <__aeabi_dcmpeq>
 800b96c:	b908      	cbnz	r0, 800b972 <_dtoa_r+0x162>
 800b96e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b972:	f1ba 0f16 	cmp.w	sl, #22
 800b976:	d859      	bhi.n	800ba2c <_dtoa_r+0x21c>
 800b978:	4970      	ldr	r1, [pc, #448]	; (800bb3c <_dtoa_r+0x32c>)
 800b97a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b982:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b986:	f7f5 f8ef 	bl	8000b68 <__aeabi_dcmpgt>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d050      	beq.n	800ba30 <_dtoa_r+0x220>
 800b98e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b992:	2300      	movs	r3, #0
 800b994:	930f      	str	r3, [sp, #60]	; 0x3c
 800b996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b998:	1b5d      	subs	r5, r3, r5
 800b99a:	f1b5 0801 	subs.w	r8, r5, #1
 800b99e:	bf49      	itett	mi
 800b9a0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9a4:	2300      	movpl	r3, #0
 800b9a6:	9305      	strmi	r3, [sp, #20]
 800b9a8:	f04f 0800 	movmi.w	r8, #0
 800b9ac:	bf58      	it	pl
 800b9ae:	9305      	strpl	r3, [sp, #20]
 800b9b0:	f1ba 0f00 	cmp.w	sl, #0
 800b9b4:	db3e      	blt.n	800ba34 <_dtoa_r+0x224>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	44d0      	add	r8, sl
 800b9ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b9be:	9307      	str	r3, [sp, #28]
 800b9c0:	9b06      	ldr	r3, [sp, #24]
 800b9c2:	2b09      	cmp	r3, #9
 800b9c4:	f200 8090 	bhi.w	800bae8 <_dtoa_r+0x2d8>
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	bfc4      	itt	gt
 800b9cc:	3b04      	subgt	r3, #4
 800b9ce:	9306      	strgt	r3, [sp, #24]
 800b9d0:	9b06      	ldr	r3, [sp, #24]
 800b9d2:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d6:	bfcc      	ite	gt
 800b9d8:	2500      	movgt	r5, #0
 800b9da:	2501      	movle	r5, #1
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	f200 808f 	bhi.w	800bb00 <_dtoa_r+0x2f0>
 800b9e2:	e8df f003 	tbb	[pc, r3]
 800b9e6:	7f7d      	.short	0x7f7d
 800b9e8:	7131      	.short	0x7131
 800b9ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b9ee:	441d      	add	r5, r3
 800b9f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b9f4:	2820      	cmp	r0, #32
 800b9f6:	dd13      	ble.n	800ba20 <_dtoa_r+0x210>
 800b9f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b9fc:	9b00      	ldr	r3, [sp, #0]
 800b9fe:	fa08 f800 	lsl.w	r8, r8, r0
 800ba02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ba06:	fa23 f000 	lsr.w	r0, r3, r0
 800ba0a:	ea48 0000 	orr.w	r0, r8, r0
 800ba0e:	f7f4 fda1 	bl	8000554 <__aeabi_ui2d>
 800ba12:	2301      	movs	r3, #1
 800ba14:	4682      	mov	sl, r0
 800ba16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ba1a:	3d01      	subs	r5, #1
 800ba1c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba1e:	e772      	b.n	800b906 <_dtoa_r+0xf6>
 800ba20:	9b00      	ldr	r3, [sp, #0]
 800ba22:	f1c0 0020 	rsb	r0, r0, #32
 800ba26:	fa03 f000 	lsl.w	r0, r3, r0
 800ba2a:	e7f0      	b.n	800ba0e <_dtoa_r+0x1fe>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e7b1      	b.n	800b994 <_dtoa_r+0x184>
 800ba30:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba32:	e7b0      	b.n	800b996 <_dtoa_r+0x186>
 800ba34:	9b05      	ldr	r3, [sp, #20]
 800ba36:	eba3 030a 	sub.w	r3, r3, sl
 800ba3a:	9305      	str	r3, [sp, #20]
 800ba3c:	f1ca 0300 	rsb	r3, sl, #0
 800ba40:	9307      	str	r3, [sp, #28]
 800ba42:	2300      	movs	r3, #0
 800ba44:	930e      	str	r3, [sp, #56]	; 0x38
 800ba46:	e7bb      	b.n	800b9c0 <_dtoa_r+0x1b0>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	dd59      	ble.n	800bb06 <_dtoa_r+0x2f6>
 800ba52:	9302      	str	r3, [sp, #8]
 800ba54:	4699      	mov	r9, r3
 800ba56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba58:	2200      	movs	r2, #0
 800ba5a:	6072      	str	r2, [r6, #4]
 800ba5c:	2204      	movs	r2, #4
 800ba5e:	f102 0014 	add.w	r0, r2, #20
 800ba62:	4298      	cmp	r0, r3
 800ba64:	6871      	ldr	r1, [r6, #4]
 800ba66:	d953      	bls.n	800bb10 <_dtoa_r+0x300>
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f000 ffdd 	bl	800ca28 <_Balloc>
 800ba6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba70:	6030      	str	r0, [r6, #0]
 800ba72:	f1b9 0f0e 	cmp.w	r9, #14
 800ba76:	f8d3 b000 	ldr.w	fp, [r3]
 800ba7a:	f200 80e6 	bhi.w	800bc4a <_dtoa_r+0x43a>
 800ba7e:	2d00      	cmp	r5, #0
 800ba80:	f000 80e3 	beq.w	800bc4a <_dtoa_r+0x43a>
 800ba84:	ed9d 7b00 	vldr	d7, [sp]
 800ba88:	f1ba 0f00 	cmp.w	sl, #0
 800ba8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ba90:	dd74      	ble.n	800bb7c <_dtoa_r+0x36c>
 800ba92:	4a2a      	ldr	r2, [pc, #168]	; (800bb3c <_dtoa_r+0x32c>)
 800ba94:	f00a 030f 	and.w	r3, sl, #15
 800ba98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba9c:	ed93 7b00 	vldr	d7, [r3]
 800baa0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800baa4:	06f0      	lsls	r0, r6, #27
 800baa6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800baaa:	d565      	bpl.n	800bb78 <_dtoa_r+0x368>
 800baac:	4b24      	ldr	r3, [pc, #144]	; (800bb40 <_dtoa_r+0x330>)
 800baae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bab2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bab6:	f7f4 fef1 	bl	800089c <__aeabi_ddiv>
 800baba:	e9cd 0100 	strd	r0, r1, [sp]
 800babe:	f006 060f 	and.w	r6, r6, #15
 800bac2:	2503      	movs	r5, #3
 800bac4:	4f1e      	ldr	r7, [pc, #120]	; (800bb40 <_dtoa_r+0x330>)
 800bac6:	e04c      	b.n	800bb62 <_dtoa_r+0x352>
 800bac8:	2301      	movs	r3, #1
 800baca:	930a      	str	r3, [sp, #40]	; 0x28
 800bacc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bace:	4453      	add	r3, sl
 800bad0:	f103 0901 	add.w	r9, r3, #1
 800bad4:	9302      	str	r3, [sp, #8]
 800bad6:	464b      	mov	r3, r9
 800bad8:	2b01      	cmp	r3, #1
 800bada:	bfb8      	it	lt
 800badc:	2301      	movlt	r3, #1
 800bade:	e7ba      	b.n	800ba56 <_dtoa_r+0x246>
 800bae0:	2300      	movs	r3, #0
 800bae2:	e7b2      	b.n	800ba4a <_dtoa_r+0x23a>
 800bae4:	2300      	movs	r3, #0
 800bae6:	e7f0      	b.n	800baca <_dtoa_r+0x2ba>
 800bae8:	2501      	movs	r5, #1
 800baea:	2300      	movs	r3, #0
 800baec:	9306      	str	r3, [sp, #24]
 800baee:	950a      	str	r5, [sp, #40]	; 0x28
 800baf0:	f04f 33ff 	mov.w	r3, #4294967295
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	4699      	mov	r9, r3
 800baf8:	2200      	movs	r2, #0
 800bafa:	2312      	movs	r3, #18
 800bafc:	920b      	str	r2, [sp, #44]	; 0x2c
 800bafe:	e7aa      	b.n	800ba56 <_dtoa_r+0x246>
 800bb00:	2301      	movs	r3, #1
 800bb02:	930a      	str	r3, [sp, #40]	; 0x28
 800bb04:	e7f4      	b.n	800baf0 <_dtoa_r+0x2e0>
 800bb06:	2301      	movs	r3, #1
 800bb08:	9302      	str	r3, [sp, #8]
 800bb0a:	4699      	mov	r9, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	e7f5      	b.n	800bafc <_dtoa_r+0x2ec>
 800bb10:	3101      	adds	r1, #1
 800bb12:	6071      	str	r1, [r6, #4]
 800bb14:	0052      	lsls	r2, r2, #1
 800bb16:	e7a2      	b.n	800ba5e <_dtoa_r+0x24e>
 800bb18:	636f4361 	.word	0x636f4361
 800bb1c:	3fd287a7 	.word	0x3fd287a7
 800bb20:	8b60c8b3 	.word	0x8b60c8b3
 800bb24:	3fc68a28 	.word	0x3fc68a28
 800bb28:	509f79fb 	.word	0x509f79fb
 800bb2c:	3fd34413 	.word	0x3fd34413
 800bb30:	7ff00000 	.word	0x7ff00000
 800bb34:	0800f747 	.word	0x0800f747
 800bb38:	3ff80000 	.word	0x3ff80000
 800bb3c:	0800f800 	.word	0x0800f800
 800bb40:	0800f7d8 	.word	0x0800f7d8
 800bb44:	0800f7c9 	.word	0x0800f7c9
 800bb48:	07f1      	lsls	r1, r6, #31
 800bb4a:	d508      	bpl.n	800bb5e <_dtoa_r+0x34e>
 800bb4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb54:	f7f4 fd78 	bl	8000648 <__aeabi_dmul>
 800bb58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb5c:	3501      	adds	r5, #1
 800bb5e:	1076      	asrs	r6, r6, #1
 800bb60:	3708      	adds	r7, #8
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	d1f0      	bne.n	800bb48 <_dtoa_r+0x338>
 800bb66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb6e:	f7f4 fe95 	bl	800089c <__aeabi_ddiv>
 800bb72:	e9cd 0100 	strd	r0, r1, [sp]
 800bb76:	e01a      	b.n	800bbae <_dtoa_r+0x39e>
 800bb78:	2502      	movs	r5, #2
 800bb7a:	e7a3      	b.n	800bac4 <_dtoa_r+0x2b4>
 800bb7c:	f000 80a0 	beq.w	800bcc0 <_dtoa_r+0x4b0>
 800bb80:	f1ca 0600 	rsb	r6, sl, #0
 800bb84:	4b9f      	ldr	r3, [pc, #636]	; (800be04 <_dtoa_r+0x5f4>)
 800bb86:	4fa0      	ldr	r7, [pc, #640]	; (800be08 <_dtoa_r+0x5f8>)
 800bb88:	f006 020f 	and.w	r2, r6, #15
 800bb8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb98:	f7f4 fd56 	bl	8000648 <__aeabi_dmul>
 800bb9c:	e9cd 0100 	strd	r0, r1, [sp]
 800bba0:	1136      	asrs	r6, r6, #4
 800bba2:	2300      	movs	r3, #0
 800bba4:	2502      	movs	r5, #2
 800bba6:	2e00      	cmp	r6, #0
 800bba8:	d17f      	bne.n	800bcaa <_dtoa_r+0x49a>
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1e1      	bne.n	800bb72 <_dtoa_r+0x362>
 800bbae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f000 8087 	beq.w	800bcc4 <_dtoa_r+0x4b4>
 800bbb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	4b93      	ldr	r3, [pc, #588]	; (800be0c <_dtoa_r+0x5fc>)
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	f7f4 ffb3 	bl	8000b2c <__aeabi_dcmplt>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d07c      	beq.n	800bcc4 <_dtoa_r+0x4b4>
 800bbca:	f1b9 0f00 	cmp.w	r9, #0
 800bbce:	d079      	beq.n	800bcc4 <_dtoa_r+0x4b4>
 800bbd0:	9b02      	ldr	r3, [sp, #8]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	dd35      	ble.n	800bc42 <_dtoa_r+0x432>
 800bbd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bbda:	9308      	str	r3, [sp, #32]
 800bbdc:	4639      	mov	r1, r7
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4b8b      	ldr	r3, [pc, #556]	; (800be10 <_dtoa_r+0x600>)
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7f4 fd30 	bl	8000648 <__aeabi_dmul>
 800bbe8:	e9cd 0100 	strd	r0, r1, [sp]
 800bbec:	9f02      	ldr	r7, [sp, #8]
 800bbee:	3501      	adds	r5, #1
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	f7f4 fcbf 	bl	8000574 <__aeabi_i2d>
 800bbf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbfa:	f7f4 fd25 	bl	8000648 <__aeabi_dmul>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4b84      	ldr	r3, [pc, #528]	; (800be14 <_dtoa_r+0x604>)
 800bc02:	f7f4 fb6b 	bl	80002dc <__adddf3>
 800bc06:	4605      	mov	r5, r0
 800bc08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	d15d      	bne.n	800bccc <_dtoa_r+0x4bc>
 800bc10:	2200      	movs	r2, #0
 800bc12:	4b81      	ldr	r3, [pc, #516]	; (800be18 <_dtoa_r+0x608>)
 800bc14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc18:	f7f4 fb5e 	bl	80002d8 <__aeabi_dsub>
 800bc1c:	462a      	mov	r2, r5
 800bc1e:	4633      	mov	r3, r6
 800bc20:	e9cd 0100 	strd	r0, r1, [sp]
 800bc24:	f7f4 ffa0 	bl	8000b68 <__aeabi_dcmpgt>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f040 8288 	bne.w	800c13e <_dtoa_r+0x92e>
 800bc2e:	462a      	mov	r2, r5
 800bc30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc38:	f7f4 ff78 	bl	8000b2c <__aeabi_dcmplt>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	f040 827c 	bne.w	800c13a <_dtoa_r+0x92a>
 800bc42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc46:	e9cd 2300 	strd	r2, r3, [sp]
 800bc4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f2c0 8150 	blt.w	800bef2 <_dtoa_r+0x6e2>
 800bc52:	f1ba 0f0e 	cmp.w	sl, #14
 800bc56:	f300 814c 	bgt.w	800bef2 <_dtoa_r+0x6e2>
 800bc5a:	4b6a      	ldr	r3, [pc, #424]	; (800be04 <_dtoa_r+0x5f4>)
 800bc5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc60:	ed93 7b00 	vldr	d7, [r3]
 800bc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc6c:	f280 80d8 	bge.w	800be20 <_dtoa_r+0x610>
 800bc70:	f1b9 0f00 	cmp.w	r9, #0
 800bc74:	f300 80d4 	bgt.w	800be20 <_dtoa_r+0x610>
 800bc78:	f040 825e 	bne.w	800c138 <_dtoa_r+0x928>
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4b66      	ldr	r3, [pc, #408]	; (800be18 <_dtoa_r+0x608>)
 800bc80:	ec51 0b17 	vmov	r0, r1, d7
 800bc84:	f7f4 fce0 	bl	8000648 <__aeabi_dmul>
 800bc88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc8c:	f7f4 ff62 	bl	8000b54 <__aeabi_dcmpge>
 800bc90:	464f      	mov	r7, r9
 800bc92:	464e      	mov	r6, r9
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f040 8234 	bne.w	800c102 <_dtoa_r+0x8f2>
 800bc9a:	2331      	movs	r3, #49	; 0x31
 800bc9c:	f10b 0501 	add.w	r5, fp, #1
 800bca0:	f88b 3000 	strb.w	r3, [fp]
 800bca4:	f10a 0a01 	add.w	sl, sl, #1
 800bca8:	e22f      	b.n	800c10a <_dtoa_r+0x8fa>
 800bcaa:	07f2      	lsls	r2, r6, #31
 800bcac:	d505      	bpl.n	800bcba <_dtoa_r+0x4aa>
 800bcae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcb2:	f7f4 fcc9 	bl	8000648 <__aeabi_dmul>
 800bcb6:	3501      	adds	r5, #1
 800bcb8:	2301      	movs	r3, #1
 800bcba:	1076      	asrs	r6, r6, #1
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	e772      	b.n	800bba6 <_dtoa_r+0x396>
 800bcc0:	2502      	movs	r5, #2
 800bcc2:	e774      	b.n	800bbae <_dtoa_r+0x39e>
 800bcc4:	f8cd a020 	str.w	sl, [sp, #32]
 800bcc8:	464f      	mov	r7, r9
 800bcca:	e791      	b.n	800bbf0 <_dtoa_r+0x3e0>
 800bccc:	4b4d      	ldr	r3, [pc, #308]	; (800be04 <_dtoa_r+0x5f4>)
 800bcce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcd2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bcd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d047      	beq.n	800bd6c <_dtoa_r+0x55c>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	2000      	movs	r0, #0
 800bce2:	494e      	ldr	r1, [pc, #312]	; (800be1c <_dtoa_r+0x60c>)
 800bce4:	f7f4 fdda 	bl	800089c <__aeabi_ddiv>
 800bce8:	462a      	mov	r2, r5
 800bcea:	4633      	mov	r3, r6
 800bcec:	f7f4 faf4 	bl	80002d8 <__aeabi_dsub>
 800bcf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bcf4:	465d      	mov	r5, fp
 800bcf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcfa:	f7f4 ff55 	bl	8000ba8 <__aeabi_d2iz>
 800bcfe:	4606      	mov	r6, r0
 800bd00:	f7f4 fc38 	bl	8000574 <__aeabi_i2d>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd0c:	f7f4 fae4 	bl	80002d8 <__aeabi_dsub>
 800bd10:	3630      	adds	r6, #48	; 0x30
 800bd12:	f805 6b01 	strb.w	r6, [r5], #1
 800bd16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd1a:	e9cd 0100 	strd	r0, r1, [sp]
 800bd1e:	f7f4 ff05 	bl	8000b2c <__aeabi_dcmplt>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d163      	bne.n	800bdee <_dtoa_r+0x5de>
 800bd26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	4937      	ldr	r1, [pc, #220]	; (800be0c <_dtoa_r+0x5fc>)
 800bd2e:	f7f4 fad3 	bl	80002d8 <__aeabi_dsub>
 800bd32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd36:	f7f4 fef9 	bl	8000b2c <__aeabi_dcmplt>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f040 80b7 	bne.w	800beae <_dtoa_r+0x69e>
 800bd40:	eba5 030b 	sub.w	r3, r5, fp
 800bd44:	429f      	cmp	r7, r3
 800bd46:	f77f af7c 	ble.w	800bc42 <_dtoa_r+0x432>
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4b30      	ldr	r3, [pc, #192]	; (800be10 <_dtoa_r+0x600>)
 800bd4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd52:	f7f4 fc79 	bl	8000648 <__aeabi_dmul>
 800bd56:	2200      	movs	r2, #0
 800bd58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd5c:	4b2c      	ldr	r3, [pc, #176]	; (800be10 <_dtoa_r+0x600>)
 800bd5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd62:	f7f4 fc71 	bl	8000648 <__aeabi_dmul>
 800bd66:	e9cd 0100 	strd	r0, r1, [sp]
 800bd6a:	e7c4      	b.n	800bcf6 <_dtoa_r+0x4e6>
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4633      	mov	r3, r6
 800bd70:	f7f4 fc6a 	bl	8000648 <__aeabi_dmul>
 800bd74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd78:	eb0b 0507 	add.w	r5, fp, r7
 800bd7c:	465e      	mov	r6, fp
 800bd7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd82:	f7f4 ff11 	bl	8000ba8 <__aeabi_d2iz>
 800bd86:	4607      	mov	r7, r0
 800bd88:	f7f4 fbf4 	bl	8000574 <__aeabi_i2d>
 800bd8c:	3730      	adds	r7, #48	; 0x30
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd96:	f7f4 fa9f 	bl	80002d8 <__aeabi_dsub>
 800bd9a:	f806 7b01 	strb.w	r7, [r6], #1
 800bd9e:	42ae      	cmp	r6, r5
 800bda0:	e9cd 0100 	strd	r0, r1, [sp]
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	d126      	bne.n	800bdf8 <_dtoa_r+0x5e8>
 800bdaa:	4b1c      	ldr	r3, [pc, #112]	; (800be1c <_dtoa_r+0x60c>)
 800bdac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdb0:	f7f4 fa94 	bl	80002dc <__adddf3>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdbc:	f7f4 fed4 	bl	8000b68 <__aeabi_dcmpgt>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d174      	bne.n	800beae <_dtoa_r+0x69e>
 800bdc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bdc8:	2000      	movs	r0, #0
 800bdca:	4914      	ldr	r1, [pc, #80]	; (800be1c <_dtoa_r+0x60c>)
 800bdcc:	f7f4 fa84 	bl	80002d8 <__aeabi_dsub>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdd8:	f7f4 fea8 	bl	8000b2c <__aeabi_dcmplt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f43f af30 	beq.w	800bc42 <_dtoa_r+0x432>
 800bde2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bde6:	2b30      	cmp	r3, #48	; 0x30
 800bde8:	f105 32ff 	add.w	r2, r5, #4294967295
 800bdec:	d002      	beq.n	800bdf4 <_dtoa_r+0x5e4>
 800bdee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bdf2:	e04a      	b.n	800be8a <_dtoa_r+0x67a>
 800bdf4:	4615      	mov	r5, r2
 800bdf6:	e7f4      	b.n	800bde2 <_dtoa_r+0x5d2>
 800bdf8:	4b05      	ldr	r3, [pc, #20]	; (800be10 <_dtoa_r+0x600>)
 800bdfa:	f7f4 fc25 	bl	8000648 <__aeabi_dmul>
 800bdfe:	e9cd 0100 	strd	r0, r1, [sp]
 800be02:	e7bc      	b.n	800bd7e <_dtoa_r+0x56e>
 800be04:	0800f800 	.word	0x0800f800
 800be08:	0800f7d8 	.word	0x0800f7d8
 800be0c:	3ff00000 	.word	0x3ff00000
 800be10:	40240000 	.word	0x40240000
 800be14:	401c0000 	.word	0x401c0000
 800be18:	40140000 	.word	0x40140000
 800be1c:	3fe00000 	.word	0x3fe00000
 800be20:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be24:	465d      	mov	r5, fp
 800be26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be2a:	4630      	mov	r0, r6
 800be2c:	4639      	mov	r1, r7
 800be2e:	f7f4 fd35 	bl	800089c <__aeabi_ddiv>
 800be32:	f7f4 feb9 	bl	8000ba8 <__aeabi_d2iz>
 800be36:	4680      	mov	r8, r0
 800be38:	f7f4 fb9c 	bl	8000574 <__aeabi_i2d>
 800be3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be40:	f7f4 fc02 	bl	8000648 <__aeabi_dmul>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800be50:	f7f4 fa42 	bl	80002d8 <__aeabi_dsub>
 800be54:	f805 6b01 	strb.w	r6, [r5], #1
 800be58:	eba5 060b 	sub.w	r6, r5, fp
 800be5c:	45b1      	cmp	r9, r6
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	d139      	bne.n	800bed8 <_dtoa_r+0x6c8>
 800be64:	f7f4 fa3a 	bl	80002dc <__adddf3>
 800be68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be6c:	4606      	mov	r6, r0
 800be6e:	460f      	mov	r7, r1
 800be70:	f7f4 fe7a 	bl	8000b68 <__aeabi_dcmpgt>
 800be74:	b9c8      	cbnz	r0, 800beaa <_dtoa_r+0x69a>
 800be76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fe4b 	bl	8000b18 <__aeabi_dcmpeq>
 800be82:	b110      	cbz	r0, 800be8a <_dtoa_r+0x67a>
 800be84:	f018 0f01 	tst.w	r8, #1
 800be88:	d10f      	bne.n	800beaa <_dtoa_r+0x69a>
 800be8a:	9904      	ldr	r1, [sp, #16]
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 fdff 	bl	800ca90 <_Bfree>
 800be92:	2300      	movs	r3, #0
 800be94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be96:	702b      	strb	r3, [r5, #0]
 800be98:	f10a 0301 	add.w	r3, sl, #1
 800be9c:	6013      	str	r3, [r2, #0]
 800be9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 8241 	beq.w	800c328 <_dtoa_r+0xb18>
 800bea6:	601d      	str	r5, [r3, #0]
 800bea8:	e23e      	b.n	800c328 <_dtoa_r+0xb18>
 800beaa:	f8cd a020 	str.w	sl, [sp, #32]
 800beae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800beb2:	2a39      	cmp	r2, #57	; 0x39
 800beb4:	f105 33ff 	add.w	r3, r5, #4294967295
 800beb8:	d108      	bne.n	800becc <_dtoa_r+0x6bc>
 800beba:	459b      	cmp	fp, r3
 800bebc:	d10a      	bne.n	800bed4 <_dtoa_r+0x6c4>
 800bebe:	9b08      	ldr	r3, [sp, #32]
 800bec0:	3301      	adds	r3, #1
 800bec2:	9308      	str	r3, [sp, #32]
 800bec4:	2330      	movs	r3, #48	; 0x30
 800bec6:	f88b 3000 	strb.w	r3, [fp]
 800beca:	465b      	mov	r3, fp
 800becc:	781a      	ldrb	r2, [r3, #0]
 800bece:	3201      	adds	r2, #1
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	e78c      	b.n	800bdee <_dtoa_r+0x5de>
 800bed4:	461d      	mov	r5, r3
 800bed6:	e7ea      	b.n	800beae <_dtoa_r+0x69e>
 800bed8:	2200      	movs	r2, #0
 800beda:	4b9b      	ldr	r3, [pc, #620]	; (800c148 <_dtoa_r+0x938>)
 800bedc:	f7f4 fbb4 	bl	8000648 <__aeabi_dmul>
 800bee0:	2200      	movs	r2, #0
 800bee2:	2300      	movs	r3, #0
 800bee4:	4606      	mov	r6, r0
 800bee6:	460f      	mov	r7, r1
 800bee8:	f7f4 fe16 	bl	8000b18 <__aeabi_dcmpeq>
 800beec:	2800      	cmp	r0, #0
 800beee:	d09a      	beq.n	800be26 <_dtoa_r+0x616>
 800bef0:	e7cb      	b.n	800be8a <_dtoa_r+0x67a>
 800bef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bef4:	2a00      	cmp	r2, #0
 800bef6:	f000 808b 	beq.w	800c010 <_dtoa_r+0x800>
 800befa:	9a06      	ldr	r2, [sp, #24]
 800befc:	2a01      	cmp	r2, #1
 800befe:	dc6e      	bgt.n	800bfde <_dtoa_r+0x7ce>
 800bf00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d067      	beq.n	800bfd6 <_dtoa_r+0x7c6>
 800bf06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf0a:	9f07      	ldr	r7, [sp, #28]
 800bf0c:	9d05      	ldr	r5, [sp, #20]
 800bf0e:	9a05      	ldr	r2, [sp, #20]
 800bf10:	2101      	movs	r1, #1
 800bf12:	441a      	add	r2, r3
 800bf14:	4620      	mov	r0, r4
 800bf16:	9205      	str	r2, [sp, #20]
 800bf18:	4498      	add	r8, r3
 800bf1a:	f000 fe97 	bl	800cc4c <__i2b>
 800bf1e:	4606      	mov	r6, r0
 800bf20:	2d00      	cmp	r5, #0
 800bf22:	dd0c      	ble.n	800bf3e <_dtoa_r+0x72e>
 800bf24:	f1b8 0f00 	cmp.w	r8, #0
 800bf28:	dd09      	ble.n	800bf3e <_dtoa_r+0x72e>
 800bf2a:	4545      	cmp	r5, r8
 800bf2c:	9a05      	ldr	r2, [sp, #20]
 800bf2e:	462b      	mov	r3, r5
 800bf30:	bfa8      	it	ge
 800bf32:	4643      	movge	r3, r8
 800bf34:	1ad2      	subs	r2, r2, r3
 800bf36:	9205      	str	r2, [sp, #20]
 800bf38:	1aed      	subs	r5, r5, r3
 800bf3a:	eba8 0803 	sub.w	r8, r8, r3
 800bf3e:	9b07      	ldr	r3, [sp, #28]
 800bf40:	b1eb      	cbz	r3, 800bf7e <_dtoa_r+0x76e>
 800bf42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d067      	beq.n	800c018 <_dtoa_r+0x808>
 800bf48:	b18f      	cbz	r7, 800bf6e <_dtoa_r+0x75e>
 800bf4a:	4631      	mov	r1, r6
 800bf4c:	463a      	mov	r2, r7
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 ff1c 	bl	800cd8c <__pow5mult>
 800bf54:	9a04      	ldr	r2, [sp, #16]
 800bf56:	4601      	mov	r1, r0
 800bf58:	4606      	mov	r6, r0
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 fe7f 	bl	800cc5e <__multiply>
 800bf60:	9904      	ldr	r1, [sp, #16]
 800bf62:	9008      	str	r0, [sp, #32]
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 fd93 	bl	800ca90 <_Bfree>
 800bf6a:	9b08      	ldr	r3, [sp, #32]
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	9b07      	ldr	r3, [sp, #28]
 800bf70:	1bda      	subs	r2, r3, r7
 800bf72:	d004      	beq.n	800bf7e <_dtoa_r+0x76e>
 800bf74:	9904      	ldr	r1, [sp, #16]
 800bf76:	4620      	mov	r0, r4
 800bf78:	f000 ff08 	bl	800cd8c <__pow5mult>
 800bf7c:	9004      	str	r0, [sp, #16]
 800bf7e:	2101      	movs	r1, #1
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 fe63 	bl	800cc4c <__i2b>
 800bf86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf88:	4607      	mov	r7, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 81d0 	beq.w	800c330 <_dtoa_r+0xb20>
 800bf90:	461a      	mov	r2, r3
 800bf92:	4601      	mov	r1, r0
 800bf94:	4620      	mov	r0, r4
 800bf96:	f000 fef9 	bl	800cd8c <__pow5mult>
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	dc40      	bgt.n	800c024 <_dtoa_r+0x814>
 800bfa2:	9b00      	ldr	r3, [sp, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d139      	bne.n	800c01c <_dtoa_r+0x80c>
 800bfa8:	9b01      	ldr	r3, [sp, #4]
 800bfaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d136      	bne.n	800c020 <_dtoa_r+0x810>
 800bfb2:	9b01      	ldr	r3, [sp, #4]
 800bfb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfb8:	0d1b      	lsrs	r3, r3, #20
 800bfba:	051b      	lsls	r3, r3, #20
 800bfbc:	b12b      	cbz	r3, 800bfca <_dtoa_r+0x7ba>
 800bfbe:	9b05      	ldr	r3, [sp, #20]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	9305      	str	r3, [sp, #20]
 800bfc4:	f108 0801 	add.w	r8, r8, #1
 800bfc8:	2301      	movs	r3, #1
 800bfca:	9307      	str	r3, [sp, #28]
 800bfcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d12a      	bne.n	800c028 <_dtoa_r+0x818>
 800bfd2:	2001      	movs	r0, #1
 800bfd4:	e030      	b.n	800c038 <_dtoa_r+0x828>
 800bfd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfd8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfdc:	e795      	b.n	800bf0a <_dtoa_r+0x6fa>
 800bfde:	9b07      	ldr	r3, [sp, #28]
 800bfe0:	f109 37ff 	add.w	r7, r9, #4294967295
 800bfe4:	42bb      	cmp	r3, r7
 800bfe6:	bfbf      	itttt	lt
 800bfe8:	9b07      	ldrlt	r3, [sp, #28]
 800bfea:	9707      	strlt	r7, [sp, #28]
 800bfec:	1afa      	sublt	r2, r7, r3
 800bfee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bff0:	bfbb      	ittet	lt
 800bff2:	189b      	addlt	r3, r3, r2
 800bff4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bff6:	1bdf      	subge	r7, r3, r7
 800bff8:	2700      	movlt	r7, #0
 800bffa:	f1b9 0f00 	cmp.w	r9, #0
 800bffe:	bfb5      	itete	lt
 800c000:	9b05      	ldrlt	r3, [sp, #20]
 800c002:	9d05      	ldrge	r5, [sp, #20]
 800c004:	eba3 0509 	sublt.w	r5, r3, r9
 800c008:	464b      	movge	r3, r9
 800c00a:	bfb8      	it	lt
 800c00c:	2300      	movlt	r3, #0
 800c00e:	e77e      	b.n	800bf0e <_dtoa_r+0x6fe>
 800c010:	9f07      	ldr	r7, [sp, #28]
 800c012:	9d05      	ldr	r5, [sp, #20]
 800c014:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c016:	e783      	b.n	800bf20 <_dtoa_r+0x710>
 800c018:	9a07      	ldr	r2, [sp, #28]
 800c01a:	e7ab      	b.n	800bf74 <_dtoa_r+0x764>
 800c01c:	2300      	movs	r3, #0
 800c01e:	e7d4      	b.n	800bfca <_dtoa_r+0x7ba>
 800c020:	9b00      	ldr	r3, [sp, #0]
 800c022:	e7d2      	b.n	800bfca <_dtoa_r+0x7ba>
 800c024:	2300      	movs	r3, #0
 800c026:	9307      	str	r3, [sp, #28]
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c02e:	6918      	ldr	r0, [r3, #16]
 800c030:	f000 fdbe 	bl	800cbb0 <__hi0bits>
 800c034:	f1c0 0020 	rsb	r0, r0, #32
 800c038:	4440      	add	r0, r8
 800c03a:	f010 001f 	ands.w	r0, r0, #31
 800c03e:	d047      	beq.n	800c0d0 <_dtoa_r+0x8c0>
 800c040:	f1c0 0320 	rsb	r3, r0, #32
 800c044:	2b04      	cmp	r3, #4
 800c046:	dd3b      	ble.n	800c0c0 <_dtoa_r+0x8b0>
 800c048:	9b05      	ldr	r3, [sp, #20]
 800c04a:	f1c0 001c 	rsb	r0, r0, #28
 800c04e:	4403      	add	r3, r0
 800c050:	9305      	str	r3, [sp, #20]
 800c052:	4405      	add	r5, r0
 800c054:	4480      	add	r8, r0
 800c056:	9b05      	ldr	r3, [sp, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dd05      	ble.n	800c068 <_dtoa_r+0x858>
 800c05c:	461a      	mov	r2, r3
 800c05e:	9904      	ldr	r1, [sp, #16]
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fee1 	bl	800ce28 <__lshift>
 800c066:	9004      	str	r0, [sp, #16]
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	dd05      	ble.n	800c07a <_dtoa_r+0x86a>
 800c06e:	4639      	mov	r1, r7
 800c070:	4642      	mov	r2, r8
 800c072:	4620      	mov	r0, r4
 800c074:	f000 fed8 	bl	800ce28 <__lshift>
 800c078:	4607      	mov	r7, r0
 800c07a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c07c:	b353      	cbz	r3, 800c0d4 <_dtoa_r+0x8c4>
 800c07e:	4639      	mov	r1, r7
 800c080:	9804      	ldr	r0, [sp, #16]
 800c082:	f000 ff25 	bl	800ced0 <__mcmp>
 800c086:	2800      	cmp	r0, #0
 800c088:	da24      	bge.n	800c0d4 <_dtoa_r+0x8c4>
 800c08a:	2300      	movs	r3, #0
 800c08c:	220a      	movs	r2, #10
 800c08e:	9904      	ldr	r1, [sp, #16]
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fd14 	bl	800cabe <__multadd>
 800c096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c098:	9004      	str	r0, [sp, #16]
 800c09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 814d 	beq.w	800c33e <_dtoa_r+0xb2e>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4631      	mov	r1, r6
 800c0a8:	220a      	movs	r2, #10
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fd07 	bl	800cabe <__multadd>
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	dc4f      	bgt.n	800c158 <_dtoa_r+0x948>
 800c0b8:	9b06      	ldr	r3, [sp, #24]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	dd4c      	ble.n	800c158 <_dtoa_r+0x948>
 800c0be:	e011      	b.n	800c0e4 <_dtoa_r+0x8d4>
 800c0c0:	d0c9      	beq.n	800c056 <_dtoa_r+0x846>
 800c0c2:	9a05      	ldr	r2, [sp, #20]
 800c0c4:	331c      	adds	r3, #28
 800c0c6:	441a      	add	r2, r3
 800c0c8:	9205      	str	r2, [sp, #20]
 800c0ca:	441d      	add	r5, r3
 800c0cc:	4498      	add	r8, r3
 800c0ce:	e7c2      	b.n	800c056 <_dtoa_r+0x846>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	e7f6      	b.n	800c0c2 <_dtoa_r+0x8b2>
 800c0d4:	f1b9 0f00 	cmp.w	r9, #0
 800c0d8:	dc38      	bgt.n	800c14c <_dtoa_r+0x93c>
 800c0da:	9b06      	ldr	r3, [sp, #24]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	dd35      	ble.n	800c14c <_dtoa_r+0x93c>
 800c0e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800c0e4:	9b02      	ldr	r3, [sp, #8]
 800c0e6:	b963      	cbnz	r3, 800c102 <_dtoa_r+0x8f2>
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	2205      	movs	r2, #5
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f000 fce6 	bl	800cabe <__multadd>
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	4607      	mov	r7, r0
 800c0f6:	9804      	ldr	r0, [sp, #16]
 800c0f8:	f000 feea 	bl	800ced0 <__mcmp>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	f73f adcc 	bgt.w	800bc9a <_dtoa_r+0x48a>
 800c102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c104:	465d      	mov	r5, fp
 800c106:	ea6f 0a03 	mvn.w	sl, r3
 800c10a:	f04f 0900 	mov.w	r9, #0
 800c10e:	4639      	mov	r1, r7
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fcbd 	bl	800ca90 <_Bfree>
 800c116:	2e00      	cmp	r6, #0
 800c118:	f43f aeb7 	beq.w	800be8a <_dtoa_r+0x67a>
 800c11c:	f1b9 0f00 	cmp.w	r9, #0
 800c120:	d005      	beq.n	800c12e <_dtoa_r+0x91e>
 800c122:	45b1      	cmp	r9, r6
 800c124:	d003      	beq.n	800c12e <_dtoa_r+0x91e>
 800c126:	4649      	mov	r1, r9
 800c128:	4620      	mov	r0, r4
 800c12a:	f000 fcb1 	bl	800ca90 <_Bfree>
 800c12e:	4631      	mov	r1, r6
 800c130:	4620      	mov	r0, r4
 800c132:	f000 fcad 	bl	800ca90 <_Bfree>
 800c136:	e6a8      	b.n	800be8a <_dtoa_r+0x67a>
 800c138:	2700      	movs	r7, #0
 800c13a:	463e      	mov	r6, r7
 800c13c:	e7e1      	b.n	800c102 <_dtoa_r+0x8f2>
 800c13e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c142:	463e      	mov	r6, r7
 800c144:	e5a9      	b.n	800bc9a <_dtoa_r+0x48a>
 800c146:	bf00      	nop
 800c148:	40240000 	.word	0x40240000
 800c14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c14e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 80fa 	beq.w	800c34c <_dtoa_r+0xb3c>
 800c158:	2d00      	cmp	r5, #0
 800c15a:	dd05      	ble.n	800c168 <_dtoa_r+0x958>
 800c15c:	4631      	mov	r1, r6
 800c15e:	462a      	mov	r2, r5
 800c160:	4620      	mov	r0, r4
 800c162:	f000 fe61 	bl	800ce28 <__lshift>
 800c166:	4606      	mov	r6, r0
 800c168:	9b07      	ldr	r3, [sp, #28]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d04c      	beq.n	800c208 <_dtoa_r+0x9f8>
 800c16e:	6871      	ldr	r1, [r6, #4]
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fc59 	bl	800ca28 <_Balloc>
 800c176:	6932      	ldr	r2, [r6, #16]
 800c178:	3202      	adds	r2, #2
 800c17a:	4605      	mov	r5, r0
 800c17c:	0092      	lsls	r2, r2, #2
 800c17e:	f106 010c 	add.w	r1, r6, #12
 800c182:	300c      	adds	r0, #12
 800c184:	f7fd fd58 	bl	8009c38 <memcpy>
 800c188:	2201      	movs	r2, #1
 800c18a:	4629      	mov	r1, r5
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 fe4b 	bl	800ce28 <__lshift>
 800c192:	9b00      	ldr	r3, [sp, #0]
 800c194:	f8cd b014 	str.w	fp, [sp, #20]
 800c198:	f003 0301 	and.w	r3, r3, #1
 800c19c:	46b1      	mov	r9, r6
 800c19e:	9307      	str	r3, [sp, #28]
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	4639      	mov	r1, r7
 800c1a4:	9804      	ldr	r0, [sp, #16]
 800c1a6:	f7ff faa7 	bl	800b6f8 <quorem>
 800c1aa:	4649      	mov	r1, r9
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c1b2:	9804      	ldr	r0, [sp, #16]
 800c1b4:	f000 fe8c 	bl	800ced0 <__mcmp>
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	9000      	str	r0, [sp, #0]
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f000 fea0 	bl	800cf04 <__mdiff>
 800c1c4:	68c3      	ldr	r3, [r0, #12]
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	bb03      	cbnz	r3, 800c20c <_dtoa_r+0x9fc>
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	9008      	str	r0, [sp, #32]
 800c1ce:	9804      	ldr	r0, [sp, #16]
 800c1d0:	f000 fe7e 	bl	800ced0 <__mcmp>
 800c1d4:	9a08      	ldr	r2, [sp, #32]
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4620      	mov	r0, r4
 800c1dc:	9308      	str	r3, [sp, #32]
 800c1de:	f000 fc57 	bl	800ca90 <_Bfree>
 800c1e2:	9b08      	ldr	r3, [sp, #32]
 800c1e4:	b9a3      	cbnz	r3, 800c210 <_dtoa_r+0xa00>
 800c1e6:	9a06      	ldr	r2, [sp, #24]
 800c1e8:	b992      	cbnz	r2, 800c210 <_dtoa_r+0xa00>
 800c1ea:	9a07      	ldr	r2, [sp, #28]
 800c1ec:	b982      	cbnz	r2, 800c210 <_dtoa_r+0xa00>
 800c1ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c1f2:	d029      	beq.n	800c248 <_dtoa_r+0xa38>
 800c1f4:	9b00      	ldr	r3, [sp, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	dd01      	ble.n	800c1fe <_dtoa_r+0x9ee>
 800c1fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c1fe:	9b05      	ldr	r3, [sp, #20]
 800c200:	1c5d      	adds	r5, r3, #1
 800c202:	f883 8000 	strb.w	r8, [r3]
 800c206:	e782      	b.n	800c10e <_dtoa_r+0x8fe>
 800c208:	4630      	mov	r0, r6
 800c20a:	e7c2      	b.n	800c192 <_dtoa_r+0x982>
 800c20c:	2301      	movs	r3, #1
 800c20e:	e7e3      	b.n	800c1d8 <_dtoa_r+0x9c8>
 800c210:	9a00      	ldr	r2, [sp, #0]
 800c212:	2a00      	cmp	r2, #0
 800c214:	db04      	blt.n	800c220 <_dtoa_r+0xa10>
 800c216:	d125      	bne.n	800c264 <_dtoa_r+0xa54>
 800c218:	9a06      	ldr	r2, [sp, #24]
 800c21a:	bb1a      	cbnz	r2, 800c264 <_dtoa_r+0xa54>
 800c21c:	9a07      	ldr	r2, [sp, #28]
 800c21e:	bb0a      	cbnz	r2, 800c264 <_dtoa_r+0xa54>
 800c220:	2b00      	cmp	r3, #0
 800c222:	ddec      	ble.n	800c1fe <_dtoa_r+0x9ee>
 800c224:	2201      	movs	r2, #1
 800c226:	9904      	ldr	r1, [sp, #16]
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 fdfd 	bl	800ce28 <__lshift>
 800c22e:	4639      	mov	r1, r7
 800c230:	9004      	str	r0, [sp, #16]
 800c232:	f000 fe4d 	bl	800ced0 <__mcmp>
 800c236:	2800      	cmp	r0, #0
 800c238:	dc03      	bgt.n	800c242 <_dtoa_r+0xa32>
 800c23a:	d1e0      	bne.n	800c1fe <_dtoa_r+0x9ee>
 800c23c:	f018 0f01 	tst.w	r8, #1
 800c240:	d0dd      	beq.n	800c1fe <_dtoa_r+0x9ee>
 800c242:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c246:	d1d8      	bne.n	800c1fa <_dtoa_r+0x9ea>
 800c248:	9b05      	ldr	r3, [sp, #20]
 800c24a:	9a05      	ldr	r2, [sp, #20]
 800c24c:	1c5d      	adds	r5, r3, #1
 800c24e:	2339      	movs	r3, #57	; 0x39
 800c250:	7013      	strb	r3, [r2, #0]
 800c252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c256:	2b39      	cmp	r3, #57	; 0x39
 800c258:	f105 32ff 	add.w	r2, r5, #4294967295
 800c25c:	d04f      	beq.n	800c2fe <_dtoa_r+0xaee>
 800c25e:	3301      	adds	r3, #1
 800c260:	7013      	strb	r3, [r2, #0]
 800c262:	e754      	b.n	800c10e <_dtoa_r+0x8fe>
 800c264:	9a05      	ldr	r2, [sp, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f102 0501 	add.w	r5, r2, #1
 800c26c:	dd06      	ble.n	800c27c <_dtoa_r+0xa6c>
 800c26e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c272:	d0e9      	beq.n	800c248 <_dtoa_r+0xa38>
 800c274:	f108 0801 	add.w	r8, r8, #1
 800c278:	9b05      	ldr	r3, [sp, #20]
 800c27a:	e7c2      	b.n	800c202 <_dtoa_r+0x9f2>
 800c27c:	9a02      	ldr	r2, [sp, #8]
 800c27e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c282:	eba5 030b 	sub.w	r3, r5, fp
 800c286:	4293      	cmp	r3, r2
 800c288:	d021      	beq.n	800c2ce <_dtoa_r+0xabe>
 800c28a:	2300      	movs	r3, #0
 800c28c:	220a      	movs	r2, #10
 800c28e:	9904      	ldr	r1, [sp, #16]
 800c290:	4620      	mov	r0, r4
 800c292:	f000 fc14 	bl	800cabe <__multadd>
 800c296:	45b1      	cmp	r9, r6
 800c298:	9004      	str	r0, [sp, #16]
 800c29a:	f04f 0300 	mov.w	r3, #0
 800c29e:	f04f 020a 	mov.w	r2, #10
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	d105      	bne.n	800c2b4 <_dtoa_r+0xaa4>
 800c2a8:	f000 fc09 	bl	800cabe <__multadd>
 800c2ac:	4681      	mov	r9, r0
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	9505      	str	r5, [sp, #20]
 800c2b2:	e776      	b.n	800c1a2 <_dtoa_r+0x992>
 800c2b4:	f000 fc03 	bl	800cabe <__multadd>
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4681      	mov	r9, r0
 800c2bc:	2300      	movs	r3, #0
 800c2be:	220a      	movs	r2, #10
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fbfc 	bl	800cabe <__multadd>
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	e7f2      	b.n	800c2b0 <_dtoa_r+0xaa0>
 800c2ca:	f04f 0900 	mov.w	r9, #0
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	9904      	ldr	r1, [sp, #16]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fda8 	bl	800ce28 <__lshift>
 800c2d8:	4639      	mov	r1, r7
 800c2da:	9004      	str	r0, [sp, #16]
 800c2dc:	f000 fdf8 	bl	800ced0 <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	dcb6      	bgt.n	800c252 <_dtoa_r+0xa42>
 800c2e4:	d102      	bne.n	800c2ec <_dtoa_r+0xadc>
 800c2e6:	f018 0f01 	tst.w	r8, #1
 800c2ea:	d1b2      	bne.n	800c252 <_dtoa_r+0xa42>
 800c2ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2f0:	2b30      	cmp	r3, #48	; 0x30
 800c2f2:	f105 32ff 	add.w	r2, r5, #4294967295
 800c2f6:	f47f af0a 	bne.w	800c10e <_dtoa_r+0x8fe>
 800c2fa:	4615      	mov	r5, r2
 800c2fc:	e7f6      	b.n	800c2ec <_dtoa_r+0xadc>
 800c2fe:	4593      	cmp	fp, r2
 800c300:	d105      	bne.n	800c30e <_dtoa_r+0xafe>
 800c302:	2331      	movs	r3, #49	; 0x31
 800c304:	f10a 0a01 	add.w	sl, sl, #1
 800c308:	f88b 3000 	strb.w	r3, [fp]
 800c30c:	e6ff      	b.n	800c10e <_dtoa_r+0x8fe>
 800c30e:	4615      	mov	r5, r2
 800c310:	e79f      	b.n	800c252 <_dtoa_r+0xa42>
 800c312:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c378 <_dtoa_r+0xb68>
 800c316:	e007      	b.n	800c328 <_dtoa_r+0xb18>
 800c318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c31a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c37c <_dtoa_r+0xb6c>
 800c31e:	b11b      	cbz	r3, 800c328 <_dtoa_r+0xb18>
 800c320:	f10b 0308 	add.w	r3, fp, #8
 800c324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	4658      	mov	r0, fp
 800c32a:	b017      	add	sp, #92	; 0x5c
 800c32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c330:	9b06      	ldr	r3, [sp, #24]
 800c332:	2b01      	cmp	r3, #1
 800c334:	f77f ae35 	ble.w	800bfa2 <_dtoa_r+0x792>
 800c338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c33a:	9307      	str	r3, [sp, #28]
 800c33c:	e649      	b.n	800bfd2 <_dtoa_r+0x7c2>
 800c33e:	9b02      	ldr	r3, [sp, #8]
 800c340:	2b00      	cmp	r3, #0
 800c342:	dc03      	bgt.n	800c34c <_dtoa_r+0xb3c>
 800c344:	9b06      	ldr	r3, [sp, #24]
 800c346:	2b02      	cmp	r3, #2
 800c348:	f73f aecc 	bgt.w	800c0e4 <_dtoa_r+0x8d4>
 800c34c:	465d      	mov	r5, fp
 800c34e:	4639      	mov	r1, r7
 800c350:	9804      	ldr	r0, [sp, #16]
 800c352:	f7ff f9d1 	bl	800b6f8 <quorem>
 800c356:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c35a:	f805 8b01 	strb.w	r8, [r5], #1
 800c35e:	9a02      	ldr	r2, [sp, #8]
 800c360:	eba5 030b 	sub.w	r3, r5, fp
 800c364:	429a      	cmp	r2, r3
 800c366:	ddb0      	ble.n	800c2ca <_dtoa_r+0xaba>
 800c368:	2300      	movs	r3, #0
 800c36a:	220a      	movs	r2, #10
 800c36c:	9904      	ldr	r1, [sp, #16]
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 fba5 	bl	800cabe <__multadd>
 800c374:	9004      	str	r0, [sp, #16]
 800c376:	e7ea      	b.n	800c34e <_dtoa_r+0xb3e>
 800c378:	0800f746 	.word	0x0800f746
 800c37c:	0800f7c0 	.word	0x0800f7c0

0800c380 <rshift>:
 800c380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c382:	6906      	ldr	r6, [r0, #16]
 800c384:	114b      	asrs	r3, r1, #5
 800c386:	429e      	cmp	r6, r3
 800c388:	f100 0414 	add.w	r4, r0, #20
 800c38c:	dd30      	ble.n	800c3f0 <rshift+0x70>
 800c38e:	f011 011f 	ands.w	r1, r1, #31
 800c392:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c396:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c39a:	d108      	bne.n	800c3ae <rshift+0x2e>
 800c39c:	4621      	mov	r1, r4
 800c39e:	42b2      	cmp	r2, r6
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	d211      	bcs.n	800c3c8 <rshift+0x48>
 800c3a4:	f852 3b04 	ldr.w	r3, [r2], #4
 800c3a8:	f841 3b04 	str.w	r3, [r1], #4
 800c3ac:	e7f7      	b.n	800c39e <rshift+0x1e>
 800c3ae:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c3b2:	f1c1 0c20 	rsb	ip, r1, #32
 800c3b6:	40cd      	lsrs	r5, r1
 800c3b8:	3204      	adds	r2, #4
 800c3ba:	4623      	mov	r3, r4
 800c3bc:	42b2      	cmp	r2, r6
 800c3be:	4617      	mov	r7, r2
 800c3c0:	d30c      	bcc.n	800c3dc <rshift+0x5c>
 800c3c2:	601d      	str	r5, [r3, #0]
 800c3c4:	b105      	cbz	r5, 800c3c8 <rshift+0x48>
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	1b1a      	subs	r2, r3, r4
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c3d0:	bf08      	it	eq
 800c3d2:	2300      	moveq	r3, #0
 800c3d4:	6102      	str	r2, [r0, #16]
 800c3d6:	bf08      	it	eq
 800c3d8:	6143      	streq	r3, [r0, #20]
 800c3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3dc:	683f      	ldr	r7, [r7, #0]
 800c3de:	fa07 f70c 	lsl.w	r7, r7, ip
 800c3e2:	433d      	orrs	r5, r7
 800c3e4:	f843 5b04 	str.w	r5, [r3], #4
 800c3e8:	f852 5b04 	ldr.w	r5, [r2], #4
 800c3ec:	40cd      	lsrs	r5, r1
 800c3ee:	e7e5      	b.n	800c3bc <rshift+0x3c>
 800c3f0:	4623      	mov	r3, r4
 800c3f2:	e7e9      	b.n	800c3c8 <rshift+0x48>

0800c3f4 <__hexdig_fun>:
 800c3f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c3f8:	2b09      	cmp	r3, #9
 800c3fa:	d802      	bhi.n	800c402 <__hexdig_fun+0xe>
 800c3fc:	3820      	subs	r0, #32
 800c3fe:	b2c0      	uxtb	r0, r0
 800c400:	4770      	bx	lr
 800c402:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c406:	2b05      	cmp	r3, #5
 800c408:	d801      	bhi.n	800c40e <__hexdig_fun+0x1a>
 800c40a:	3847      	subs	r0, #71	; 0x47
 800c40c:	e7f7      	b.n	800c3fe <__hexdig_fun+0xa>
 800c40e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c412:	2b05      	cmp	r3, #5
 800c414:	d801      	bhi.n	800c41a <__hexdig_fun+0x26>
 800c416:	3827      	subs	r0, #39	; 0x27
 800c418:	e7f1      	b.n	800c3fe <__hexdig_fun+0xa>
 800c41a:	2000      	movs	r0, #0
 800c41c:	4770      	bx	lr

0800c41e <__gethex>:
 800c41e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c422:	b08b      	sub	sp, #44	; 0x2c
 800c424:	468a      	mov	sl, r1
 800c426:	9002      	str	r0, [sp, #8]
 800c428:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c42a:	9306      	str	r3, [sp, #24]
 800c42c:	4690      	mov	r8, r2
 800c42e:	f000 fad0 	bl	800c9d2 <__localeconv_l>
 800c432:	6803      	ldr	r3, [r0, #0]
 800c434:	9303      	str	r3, [sp, #12]
 800c436:	4618      	mov	r0, r3
 800c438:	f7f3 fef2 	bl	8000220 <strlen>
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	9001      	str	r0, [sp, #4]
 800c440:	4403      	add	r3, r0
 800c442:	f04f 0b00 	mov.w	fp, #0
 800c446:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c44a:	9307      	str	r3, [sp, #28]
 800c44c:	f8da 3000 	ldr.w	r3, [sl]
 800c450:	3302      	adds	r3, #2
 800c452:	461f      	mov	r7, r3
 800c454:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c458:	2830      	cmp	r0, #48	; 0x30
 800c45a:	d06c      	beq.n	800c536 <__gethex+0x118>
 800c45c:	f7ff ffca 	bl	800c3f4 <__hexdig_fun>
 800c460:	4604      	mov	r4, r0
 800c462:	2800      	cmp	r0, #0
 800c464:	d16a      	bne.n	800c53c <__gethex+0x11e>
 800c466:	9a01      	ldr	r2, [sp, #4]
 800c468:	9903      	ldr	r1, [sp, #12]
 800c46a:	4638      	mov	r0, r7
 800c46c:	f001 f8f4 	bl	800d658 <strncmp>
 800c470:	2800      	cmp	r0, #0
 800c472:	d166      	bne.n	800c542 <__gethex+0x124>
 800c474:	9b01      	ldr	r3, [sp, #4]
 800c476:	5cf8      	ldrb	r0, [r7, r3]
 800c478:	18fe      	adds	r6, r7, r3
 800c47a:	f7ff ffbb 	bl	800c3f4 <__hexdig_fun>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d062      	beq.n	800c548 <__gethex+0x12a>
 800c482:	4633      	mov	r3, r6
 800c484:	7818      	ldrb	r0, [r3, #0]
 800c486:	2830      	cmp	r0, #48	; 0x30
 800c488:	461f      	mov	r7, r3
 800c48a:	f103 0301 	add.w	r3, r3, #1
 800c48e:	d0f9      	beq.n	800c484 <__gethex+0x66>
 800c490:	f7ff ffb0 	bl	800c3f4 <__hexdig_fun>
 800c494:	fab0 f580 	clz	r5, r0
 800c498:	096d      	lsrs	r5, r5, #5
 800c49a:	4634      	mov	r4, r6
 800c49c:	f04f 0b01 	mov.w	fp, #1
 800c4a0:	463a      	mov	r2, r7
 800c4a2:	4616      	mov	r6, r2
 800c4a4:	3201      	adds	r2, #1
 800c4a6:	7830      	ldrb	r0, [r6, #0]
 800c4a8:	f7ff ffa4 	bl	800c3f4 <__hexdig_fun>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1f8      	bne.n	800c4a2 <__gethex+0x84>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	9903      	ldr	r1, [sp, #12]
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f001 f8cf 	bl	800d658 <strncmp>
 800c4ba:	b950      	cbnz	r0, 800c4d2 <__gethex+0xb4>
 800c4bc:	b954      	cbnz	r4, 800c4d4 <__gethex+0xb6>
 800c4be:	9b01      	ldr	r3, [sp, #4]
 800c4c0:	18f4      	adds	r4, r6, r3
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	4616      	mov	r6, r2
 800c4c6:	3201      	adds	r2, #1
 800c4c8:	7830      	ldrb	r0, [r6, #0]
 800c4ca:	f7ff ff93 	bl	800c3f4 <__hexdig_fun>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d1f8      	bne.n	800c4c4 <__gethex+0xa6>
 800c4d2:	b10c      	cbz	r4, 800c4d8 <__gethex+0xba>
 800c4d4:	1ba4      	subs	r4, r4, r6
 800c4d6:	00a4      	lsls	r4, r4, #2
 800c4d8:	7833      	ldrb	r3, [r6, #0]
 800c4da:	2b50      	cmp	r3, #80	; 0x50
 800c4dc:	d001      	beq.n	800c4e2 <__gethex+0xc4>
 800c4de:	2b70      	cmp	r3, #112	; 0x70
 800c4e0:	d140      	bne.n	800c564 <__gethex+0x146>
 800c4e2:	7873      	ldrb	r3, [r6, #1]
 800c4e4:	2b2b      	cmp	r3, #43	; 0x2b
 800c4e6:	d031      	beq.n	800c54c <__gethex+0x12e>
 800c4e8:	2b2d      	cmp	r3, #45	; 0x2d
 800c4ea:	d033      	beq.n	800c554 <__gethex+0x136>
 800c4ec:	1c71      	adds	r1, r6, #1
 800c4ee:	f04f 0900 	mov.w	r9, #0
 800c4f2:	7808      	ldrb	r0, [r1, #0]
 800c4f4:	f7ff ff7e 	bl	800c3f4 <__hexdig_fun>
 800c4f8:	1e43      	subs	r3, r0, #1
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	2b18      	cmp	r3, #24
 800c4fe:	d831      	bhi.n	800c564 <__gethex+0x146>
 800c500:	f1a0 0210 	sub.w	r2, r0, #16
 800c504:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c508:	f7ff ff74 	bl	800c3f4 <__hexdig_fun>
 800c50c:	1e43      	subs	r3, r0, #1
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b18      	cmp	r3, #24
 800c512:	d922      	bls.n	800c55a <__gethex+0x13c>
 800c514:	f1b9 0f00 	cmp.w	r9, #0
 800c518:	d000      	beq.n	800c51c <__gethex+0xfe>
 800c51a:	4252      	negs	r2, r2
 800c51c:	4414      	add	r4, r2
 800c51e:	f8ca 1000 	str.w	r1, [sl]
 800c522:	b30d      	cbz	r5, 800c568 <__gethex+0x14a>
 800c524:	f1bb 0f00 	cmp.w	fp, #0
 800c528:	bf0c      	ite	eq
 800c52a:	2706      	moveq	r7, #6
 800c52c:	2700      	movne	r7, #0
 800c52e:	4638      	mov	r0, r7
 800c530:	b00b      	add	sp, #44	; 0x2c
 800c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c536:	f10b 0b01 	add.w	fp, fp, #1
 800c53a:	e78a      	b.n	800c452 <__gethex+0x34>
 800c53c:	2500      	movs	r5, #0
 800c53e:	462c      	mov	r4, r5
 800c540:	e7ae      	b.n	800c4a0 <__gethex+0x82>
 800c542:	463e      	mov	r6, r7
 800c544:	2501      	movs	r5, #1
 800c546:	e7c7      	b.n	800c4d8 <__gethex+0xba>
 800c548:	4604      	mov	r4, r0
 800c54a:	e7fb      	b.n	800c544 <__gethex+0x126>
 800c54c:	f04f 0900 	mov.w	r9, #0
 800c550:	1cb1      	adds	r1, r6, #2
 800c552:	e7ce      	b.n	800c4f2 <__gethex+0xd4>
 800c554:	f04f 0901 	mov.w	r9, #1
 800c558:	e7fa      	b.n	800c550 <__gethex+0x132>
 800c55a:	230a      	movs	r3, #10
 800c55c:	fb03 0202 	mla	r2, r3, r2, r0
 800c560:	3a10      	subs	r2, #16
 800c562:	e7cf      	b.n	800c504 <__gethex+0xe6>
 800c564:	4631      	mov	r1, r6
 800c566:	e7da      	b.n	800c51e <__gethex+0x100>
 800c568:	1bf3      	subs	r3, r6, r7
 800c56a:	3b01      	subs	r3, #1
 800c56c:	4629      	mov	r1, r5
 800c56e:	2b07      	cmp	r3, #7
 800c570:	dc49      	bgt.n	800c606 <__gethex+0x1e8>
 800c572:	9802      	ldr	r0, [sp, #8]
 800c574:	f000 fa58 	bl	800ca28 <_Balloc>
 800c578:	9b01      	ldr	r3, [sp, #4]
 800c57a:	f100 0914 	add.w	r9, r0, #20
 800c57e:	f04f 0b00 	mov.w	fp, #0
 800c582:	f1c3 0301 	rsb	r3, r3, #1
 800c586:	4605      	mov	r5, r0
 800c588:	f8cd 9010 	str.w	r9, [sp, #16]
 800c58c:	46da      	mov	sl, fp
 800c58e:	9308      	str	r3, [sp, #32]
 800c590:	42b7      	cmp	r7, r6
 800c592:	d33b      	bcc.n	800c60c <__gethex+0x1ee>
 800c594:	9804      	ldr	r0, [sp, #16]
 800c596:	f840 ab04 	str.w	sl, [r0], #4
 800c59a:	eba0 0009 	sub.w	r0, r0, r9
 800c59e:	1080      	asrs	r0, r0, #2
 800c5a0:	6128      	str	r0, [r5, #16]
 800c5a2:	0147      	lsls	r7, r0, #5
 800c5a4:	4650      	mov	r0, sl
 800c5a6:	f000 fb03 	bl	800cbb0 <__hi0bits>
 800c5aa:	f8d8 6000 	ldr.w	r6, [r8]
 800c5ae:	1a3f      	subs	r7, r7, r0
 800c5b0:	42b7      	cmp	r7, r6
 800c5b2:	dd64      	ble.n	800c67e <__gethex+0x260>
 800c5b4:	1bbf      	subs	r7, r7, r6
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f000 fe13 	bl	800d1e4 <__any_on>
 800c5be:	4682      	mov	sl, r0
 800c5c0:	b178      	cbz	r0, 800c5e2 <__gethex+0x1c4>
 800c5c2:	1e7b      	subs	r3, r7, #1
 800c5c4:	1159      	asrs	r1, r3, #5
 800c5c6:	f003 021f 	and.w	r2, r3, #31
 800c5ca:	f04f 0a01 	mov.w	sl, #1
 800c5ce:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c5d2:	fa0a f202 	lsl.w	r2, sl, r2
 800c5d6:	420a      	tst	r2, r1
 800c5d8:	d003      	beq.n	800c5e2 <__gethex+0x1c4>
 800c5da:	4553      	cmp	r3, sl
 800c5dc:	dc46      	bgt.n	800c66c <__gethex+0x24e>
 800c5de:	f04f 0a02 	mov.w	sl, #2
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	f7ff fecb 	bl	800c380 <rshift>
 800c5ea:	443c      	add	r4, r7
 800c5ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5f0:	42a3      	cmp	r3, r4
 800c5f2:	da52      	bge.n	800c69a <__gethex+0x27c>
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	9802      	ldr	r0, [sp, #8]
 800c5f8:	f000 fa4a 	bl	800ca90 <_Bfree>
 800c5fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5fe:	2300      	movs	r3, #0
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	27a3      	movs	r7, #163	; 0xa3
 800c604:	e793      	b.n	800c52e <__gethex+0x110>
 800c606:	3101      	adds	r1, #1
 800c608:	105b      	asrs	r3, r3, #1
 800c60a:	e7b0      	b.n	800c56e <__gethex+0x150>
 800c60c:	1e73      	subs	r3, r6, #1
 800c60e:	9305      	str	r3, [sp, #20]
 800c610:	9a07      	ldr	r2, [sp, #28]
 800c612:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c616:	4293      	cmp	r3, r2
 800c618:	d018      	beq.n	800c64c <__gethex+0x22e>
 800c61a:	f1bb 0f20 	cmp.w	fp, #32
 800c61e:	d107      	bne.n	800c630 <__gethex+0x212>
 800c620:	9b04      	ldr	r3, [sp, #16]
 800c622:	f8c3 a000 	str.w	sl, [r3]
 800c626:	3304      	adds	r3, #4
 800c628:	f04f 0a00 	mov.w	sl, #0
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	46d3      	mov	fp, sl
 800c630:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c634:	f7ff fede 	bl	800c3f4 <__hexdig_fun>
 800c638:	f000 000f 	and.w	r0, r0, #15
 800c63c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c640:	ea4a 0a00 	orr.w	sl, sl, r0
 800c644:	f10b 0b04 	add.w	fp, fp, #4
 800c648:	9b05      	ldr	r3, [sp, #20]
 800c64a:	e00d      	b.n	800c668 <__gethex+0x24a>
 800c64c:	9b05      	ldr	r3, [sp, #20]
 800c64e:	9a08      	ldr	r2, [sp, #32]
 800c650:	4413      	add	r3, r2
 800c652:	42bb      	cmp	r3, r7
 800c654:	d3e1      	bcc.n	800c61a <__gethex+0x1fc>
 800c656:	4618      	mov	r0, r3
 800c658:	9a01      	ldr	r2, [sp, #4]
 800c65a:	9903      	ldr	r1, [sp, #12]
 800c65c:	9309      	str	r3, [sp, #36]	; 0x24
 800c65e:	f000 fffb 	bl	800d658 <strncmp>
 800c662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c664:	2800      	cmp	r0, #0
 800c666:	d1d8      	bne.n	800c61a <__gethex+0x1fc>
 800c668:	461e      	mov	r6, r3
 800c66a:	e791      	b.n	800c590 <__gethex+0x172>
 800c66c:	1eb9      	subs	r1, r7, #2
 800c66e:	4628      	mov	r0, r5
 800c670:	f000 fdb8 	bl	800d1e4 <__any_on>
 800c674:	2800      	cmp	r0, #0
 800c676:	d0b2      	beq.n	800c5de <__gethex+0x1c0>
 800c678:	f04f 0a03 	mov.w	sl, #3
 800c67c:	e7b1      	b.n	800c5e2 <__gethex+0x1c4>
 800c67e:	da09      	bge.n	800c694 <__gethex+0x276>
 800c680:	1bf7      	subs	r7, r6, r7
 800c682:	4629      	mov	r1, r5
 800c684:	463a      	mov	r2, r7
 800c686:	9802      	ldr	r0, [sp, #8]
 800c688:	f000 fbce 	bl	800ce28 <__lshift>
 800c68c:	1be4      	subs	r4, r4, r7
 800c68e:	4605      	mov	r5, r0
 800c690:	f100 0914 	add.w	r9, r0, #20
 800c694:	f04f 0a00 	mov.w	sl, #0
 800c698:	e7a8      	b.n	800c5ec <__gethex+0x1ce>
 800c69a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c69e:	42a0      	cmp	r0, r4
 800c6a0:	dd6a      	ble.n	800c778 <__gethex+0x35a>
 800c6a2:	1b04      	subs	r4, r0, r4
 800c6a4:	42a6      	cmp	r6, r4
 800c6a6:	dc2e      	bgt.n	800c706 <__gethex+0x2e8>
 800c6a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d022      	beq.n	800c6f6 <__gethex+0x2d8>
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d024      	beq.n	800c6fe <__gethex+0x2e0>
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d115      	bne.n	800c6e4 <__gethex+0x2c6>
 800c6b8:	42a6      	cmp	r6, r4
 800c6ba:	d113      	bne.n	800c6e4 <__gethex+0x2c6>
 800c6bc:	2e01      	cmp	r6, #1
 800c6be:	dc0b      	bgt.n	800c6d8 <__gethex+0x2ba>
 800c6c0:	9a06      	ldr	r2, [sp, #24]
 800c6c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6c6:	6013      	str	r3, [r2, #0]
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	612b      	str	r3, [r5, #16]
 800c6cc:	f8c9 3000 	str.w	r3, [r9]
 800c6d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6d2:	2762      	movs	r7, #98	; 0x62
 800c6d4:	601d      	str	r5, [r3, #0]
 800c6d6:	e72a      	b.n	800c52e <__gethex+0x110>
 800c6d8:	1e71      	subs	r1, r6, #1
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f000 fd82 	bl	800d1e4 <__any_on>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d1ed      	bne.n	800c6c0 <__gethex+0x2a2>
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	9802      	ldr	r0, [sp, #8]
 800c6e8:	f000 f9d2 	bl	800ca90 <_Bfree>
 800c6ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	2750      	movs	r7, #80	; 0x50
 800c6f4:	e71b      	b.n	800c52e <__gethex+0x110>
 800c6f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0e1      	beq.n	800c6c0 <__gethex+0x2a2>
 800c6fc:	e7f2      	b.n	800c6e4 <__gethex+0x2c6>
 800c6fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1dd      	bne.n	800c6c0 <__gethex+0x2a2>
 800c704:	e7ee      	b.n	800c6e4 <__gethex+0x2c6>
 800c706:	1e67      	subs	r7, r4, #1
 800c708:	f1ba 0f00 	cmp.w	sl, #0
 800c70c:	d131      	bne.n	800c772 <__gethex+0x354>
 800c70e:	b127      	cbz	r7, 800c71a <__gethex+0x2fc>
 800c710:	4639      	mov	r1, r7
 800c712:	4628      	mov	r0, r5
 800c714:	f000 fd66 	bl	800d1e4 <__any_on>
 800c718:	4682      	mov	sl, r0
 800c71a:	117a      	asrs	r2, r7, #5
 800c71c:	2301      	movs	r3, #1
 800c71e:	f007 071f 	and.w	r7, r7, #31
 800c722:	fa03 f707 	lsl.w	r7, r3, r7
 800c726:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c72a:	4621      	mov	r1, r4
 800c72c:	421f      	tst	r7, r3
 800c72e:	4628      	mov	r0, r5
 800c730:	bf18      	it	ne
 800c732:	f04a 0a02 	orrne.w	sl, sl, #2
 800c736:	1b36      	subs	r6, r6, r4
 800c738:	f7ff fe22 	bl	800c380 <rshift>
 800c73c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c740:	2702      	movs	r7, #2
 800c742:	f1ba 0f00 	cmp.w	sl, #0
 800c746:	d048      	beq.n	800c7da <__gethex+0x3bc>
 800c748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d015      	beq.n	800c77c <__gethex+0x35e>
 800c750:	2b03      	cmp	r3, #3
 800c752:	d017      	beq.n	800c784 <__gethex+0x366>
 800c754:	2b01      	cmp	r3, #1
 800c756:	d109      	bne.n	800c76c <__gethex+0x34e>
 800c758:	f01a 0f02 	tst.w	sl, #2
 800c75c:	d006      	beq.n	800c76c <__gethex+0x34e>
 800c75e:	f8d9 3000 	ldr.w	r3, [r9]
 800c762:	ea4a 0a03 	orr.w	sl, sl, r3
 800c766:	f01a 0f01 	tst.w	sl, #1
 800c76a:	d10e      	bne.n	800c78a <__gethex+0x36c>
 800c76c:	f047 0710 	orr.w	r7, r7, #16
 800c770:	e033      	b.n	800c7da <__gethex+0x3bc>
 800c772:	f04f 0a01 	mov.w	sl, #1
 800c776:	e7d0      	b.n	800c71a <__gethex+0x2fc>
 800c778:	2701      	movs	r7, #1
 800c77a:	e7e2      	b.n	800c742 <__gethex+0x324>
 800c77c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c77e:	f1c3 0301 	rsb	r3, r3, #1
 800c782:	9315      	str	r3, [sp, #84]	; 0x54
 800c784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0f0      	beq.n	800c76c <__gethex+0x34e>
 800c78a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c78e:	f105 0314 	add.w	r3, r5, #20
 800c792:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c796:	eb03 010a 	add.w	r1, r3, sl
 800c79a:	f04f 0c00 	mov.w	ip, #0
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7a8:	d01c      	beq.n	800c7e4 <__gethex+0x3c6>
 800c7aa:	3201      	adds	r2, #1
 800c7ac:	6002      	str	r2, [r0, #0]
 800c7ae:	2f02      	cmp	r7, #2
 800c7b0:	f105 0314 	add.w	r3, r5, #20
 800c7b4:	d138      	bne.n	800c828 <__gethex+0x40a>
 800c7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800c7ba:	3a01      	subs	r2, #1
 800c7bc:	42b2      	cmp	r2, r6
 800c7be:	d10a      	bne.n	800c7d6 <__gethex+0x3b8>
 800c7c0:	1171      	asrs	r1, r6, #5
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f006 061f 	and.w	r6, r6, #31
 800c7c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7cc:	fa02 f606 	lsl.w	r6, r2, r6
 800c7d0:	421e      	tst	r6, r3
 800c7d2:	bf18      	it	ne
 800c7d4:	4617      	movne	r7, r2
 800c7d6:	f047 0720 	orr.w	r7, r7, #32
 800c7da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7dc:	601d      	str	r5, [r3, #0]
 800c7de:	9b06      	ldr	r3, [sp, #24]
 800c7e0:	601c      	str	r4, [r3, #0]
 800c7e2:	e6a4      	b.n	800c52e <__gethex+0x110>
 800c7e4:	4299      	cmp	r1, r3
 800c7e6:	f843 cc04 	str.w	ip, [r3, #-4]
 800c7ea:	d8d8      	bhi.n	800c79e <__gethex+0x380>
 800c7ec:	68ab      	ldr	r3, [r5, #8]
 800c7ee:	4599      	cmp	r9, r3
 800c7f0:	db12      	blt.n	800c818 <__gethex+0x3fa>
 800c7f2:	6869      	ldr	r1, [r5, #4]
 800c7f4:	9802      	ldr	r0, [sp, #8]
 800c7f6:	3101      	adds	r1, #1
 800c7f8:	f000 f916 	bl	800ca28 <_Balloc>
 800c7fc:	692a      	ldr	r2, [r5, #16]
 800c7fe:	3202      	adds	r2, #2
 800c800:	f105 010c 	add.w	r1, r5, #12
 800c804:	4683      	mov	fp, r0
 800c806:	0092      	lsls	r2, r2, #2
 800c808:	300c      	adds	r0, #12
 800c80a:	f7fd fa15 	bl	8009c38 <memcpy>
 800c80e:	4629      	mov	r1, r5
 800c810:	9802      	ldr	r0, [sp, #8]
 800c812:	f000 f93d 	bl	800ca90 <_Bfree>
 800c816:	465d      	mov	r5, fp
 800c818:	692b      	ldr	r3, [r5, #16]
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c820:	612a      	str	r2, [r5, #16]
 800c822:	2201      	movs	r2, #1
 800c824:	615a      	str	r2, [r3, #20]
 800c826:	e7c2      	b.n	800c7ae <__gethex+0x390>
 800c828:	692a      	ldr	r2, [r5, #16]
 800c82a:	454a      	cmp	r2, r9
 800c82c:	dd0b      	ble.n	800c846 <__gethex+0x428>
 800c82e:	2101      	movs	r1, #1
 800c830:	4628      	mov	r0, r5
 800c832:	f7ff fda5 	bl	800c380 <rshift>
 800c836:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c83a:	3401      	adds	r4, #1
 800c83c:	42a3      	cmp	r3, r4
 800c83e:	f6ff aed9 	blt.w	800c5f4 <__gethex+0x1d6>
 800c842:	2701      	movs	r7, #1
 800c844:	e7c7      	b.n	800c7d6 <__gethex+0x3b8>
 800c846:	f016 061f 	ands.w	r6, r6, #31
 800c84a:	d0fa      	beq.n	800c842 <__gethex+0x424>
 800c84c:	449a      	add	sl, r3
 800c84e:	f1c6 0620 	rsb	r6, r6, #32
 800c852:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c856:	f000 f9ab 	bl	800cbb0 <__hi0bits>
 800c85a:	42b0      	cmp	r0, r6
 800c85c:	dbe7      	blt.n	800c82e <__gethex+0x410>
 800c85e:	e7f0      	b.n	800c842 <__gethex+0x424>

0800c860 <L_shift>:
 800c860:	f1c2 0208 	rsb	r2, r2, #8
 800c864:	0092      	lsls	r2, r2, #2
 800c866:	b570      	push	{r4, r5, r6, lr}
 800c868:	f1c2 0620 	rsb	r6, r2, #32
 800c86c:	6843      	ldr	r3, [r0, #4]
 800c86e:	6804      	ldr	r4, [r0, #0]
 800c870:	fa03 f506 	lsl.w	r5, r3, r6
 800c874:	432c      	orrs	r4, r5
 800c876:	40d3      	lsrs	r3, r2
 800c878:	6004      	str	r4, [r0, #0]
 800c87a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c87e:	4288      	cmp	r0, r1
 800c880:	d3f4      	bcc.n	800c86c <L_shift+0xc>
 800c882:	bd70      	pop	{r4, r5, r6, pc}

0800c884 <__match>:
 800c884:	b530      	push	{r4, r5, lr}
 800c886:	6803      	ldr	r3, [r0, #0]
 800c888:	3301      	adds	r3, #1
 800c88a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c88e:	b914      	cbnz	r4, 800c896 <__match+0x12>
 800c890:	6003      	str	r3, [r0, #0]
 800c892:	2001      	movs	r0, #1
 800c894:	bd30      	pop	{r4, r5, pc}
 800c896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c89a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c89e:	2d19      	cmp	r5, #25
 800c8a0:	bf98      	it	ls
 800c8a2:	3220      	addls	r2, #32
 800c8a4:	42a2      	cmp	r2, r4
 800c8a6:	d0f0      	beq.n	800c88a <__match+0x6>
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	e7f3      	b.n	800c894 <__match+0x10>

0800c8ac <__hexnan>:
 800c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	680b      	ldr	r3, [r1, #0]
 800c8b2:	6801      	ldr	r1, [r0, #0]
 800c8b4:	115f      	asrs	r7, r3, #5
 800c8b6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c8ba:	f013 031f 	ands.w	r3, r3, #31
 800c8be:	b087      	sub	sp, #28
 800c8c0:	bf18      	it	ne
 800c8c2:	3704      	addne	r7, #4
 800c8c4:	2500      	movs	r5, #0
 800c8c6:	1f3e      	subs	r6, r7, #4
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	4690      	mov	r8, r2
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	f847 5c04 	str.w	r5, [r7, #-4]
 800c8d2:	46b1      	mov	r9, r6
 800c8d4:	4634      	mov	r4, r6
 800c8d6:	9502      	str	r5, [sp, #8]
 800c8d8:	46ab      	mov	fp, r5
 800c8da:	784a      	ldrb	r2, [r1, #1]
 800c8dc:	1c4b      	adds	r3, r1, #1
 800c8de:	9303      	str	r3, [sp, #12]
 800c8e0:	b342      	cbz	r2, 800c934 <__hexnan+0x88>
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	9105      	str	r1, [sp, #20]
 800c8e6:	9204      	str	r2, [sp, #16]
 800c8e8:	f7ff fd84 	bl	800c3f4 <__hexdig_fun>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d143      	bne.n	800c978 <__hexnan+0xcc>
 800c8f0:	9a04      	ldr	r2, [sp, #16]
 800c8f2:	9905      	ldr	r1, [sp, #20]
 800c8f4:	2a20      	cmp	r2, #32
 800c8f6:	d818      	bhi.n	800c92a <__hexnan+0x7e>
 800c8f8:	9b02      	ldr	r3, [sp, #8]
 800c8fa:	459b      	cmp	fp, r3
 800c8fc:	dd13      	ble.n	800c926 <__hexnan+0x7a>
 800c8fe:	454c      	cmp	r4, r9
 800c900:	d206      	bcs.n	800c910 <__hexnan+0x64>
 800c902:	2d07      	cmp	r5, #7
 800c904:	dc04      	bgt.n	800c910 <__hexnan+0x64>
 800c906:	462a      	mov	r2, r5
 800c908:	4649      	mov	r1, r9
 800c90a:	4620      	mov	r0, r4
 800c90c:	f7ff ffa8 	bl	800c860 <L_shift>
 800c910:	4544      	cmp	r4, r8
 800c912:	d944      	bls.n	800c99e <__hexnan+0xf2>
 800c914:	2300      	movs	r3, #0
 800c916:	f1a4 0904 	sub.w	r9, r4, #4
 800c91a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c91e:	f8cd b008 	str.w	fp, [sp, #8]
 800c922:	464c      	mov	r4, r9
 800c924:	461d      	mov	r5, r3
 800c926:	9903      	ldr	r1, [sp, #12]
 800c928:	e7d7      	b.n	800c8da <__hexnan+0x2e>
 800c92a:	2a29      	cmp	r2, #41	; 0x29
 800c92c:	d14a      	bne.n	800c9c4 <__hexnan+0x118>
 800c92e:	3102      	adds	r1, #2
 800c930:	f8ca 1000 	str.w	r1, [sl]
 800c934:	f1bb 0f00 	cmp.w	fp, #0
 800c938:	d044      	beq.n	800c9c4 <__hexnan+0x118>
 800c93a:	454c      	cmp	r4, r9
 800c93c:	d206      	bcs.n	800c94c <__hexnan+0xa0>
 800c93e:	2d07      	cmp	r5, #7
 800c940:	dc04      	bgt.n	800c94c <__hexnan+0xa0>
 800c942:	462a      	mov	r2, r5
 800c944:	4649      	mov	r1, r9
 800c946:	4620      	mov	r0, r4
 800c948:	f7ff ff8a 	bl	800c860 <L_shift>
 800c94c:	4544      	cmp	r4, r8
 800c94e:	d928      	bls.n	800c9a2 <__hexnan+0xf6>
 800c950:	4643      	mov	r3, r8
 800c952:	f854 2b04 	ldr.w	r2, [r4], #4
 800c956:	f843 2b04 	str.w	r2, [r3], #4
 800c95a:	42a6      	cmp	r6, r4
 800c95c:	d2f9      	bcs.n	800c952 <__hexnan+0xa6>
 800c95e:	2200      	movs	r2, #0
 800c960:	f843 2b04 	str.w	r2, [r3], #4
 800c964:	429e      	cmp	r6, r3
 800c966:	d2fb      	bcs.n	800c960 <__hexnan+0xb4>
 800c968:	6833      	ldr	r3, [r6, #0]
 800c96a:	b91b      	cbnz	r3, 800c974 <__hexnan+0xc8>
 800c96c:	4546      	cmp	r6, r8
 800c96e:	d127      	bne.n	800c9c0 <__hexnan+0x114>
 800c970:	2301      	movs	r3, #1
 800c972:	6033      	str	r3, [r6, #0]
 800c974:	2005      	movs	r0, #5
 800c976:	e026      	b.n	800c9c6 <__hexnan+0x11a>
 800c978:	3501      	adds	r5, #1
 800c97a:	2d08      	cmp	r5, #8
 800c97c:	f10b 0b01 	add.w	fp, fp, #1
 800c980:	dd06      	ble.n	800c990 <__hexnan+0xe4>
 800c982:	4544      	cmp	r4, r8
 800c984:	d9cf      	bls.n	800c926 <__hexnan+0x7a>
 800c986:	2300      	movs	r3, #0
 800c988:	f844 3c04 	str.w	r3, [r4, #-4]
 800c98c:	2501      	movs	r5, #1
 800c98e:	3c04      	subs	r4, #4
 800c990:	6822      	ldr	r2, [r4, #0]
 800c992:	f000 000f 	and.w	r0, r0, #15
 800c996:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c99a:	6020      	str	r0, [r4, #0]
 800c99c:	e7c3      	b.n	800c926 <__hexnan+0x7a>
 800c99e:	2508      	movs	r5, #8
 800c9a0:	e7c1      	b.n	800c926 <__hexnan+0x7a>
 800c9a2:	9b01      	ldr	r3, [sp, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d0df      	beq.n	800c968 <__hexnan+0xbc>
 800c9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ac:	f1c3 0320 	rsb	r3, r3, #32
 800c9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c9b8:	401a      	ands	r2, r3
 800c9ba:	f847 2c04 	str.w	r2, [r7, #-4]
 800c9be:	e7d3      	b.n	800c968 <__hexnan+0xbc>
 800c9c0:	3e04      	subs	r6, #4
 800c9c2:	e7d1      	b.n	800c968 <__hexnan+0xbc>
 800c9c4:	2004      	movs	r0, #4
 800c9c6:	b007      	add	sp, #28
 800c9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9cc <__locale_ctype_ptr_l>:
 800c9cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c9d0:	4770      	bx	lr

0800c9d2 <__localeconv_l>:
 800c9d2:	30f0      	adds	r0, #240	; 0xf0
 800c9d4:	4770      	bx	lr
	...

0800c9d8 <_localeconv_r>:
 800c9d8:	4b04      	ldr	r3, [pc, #16]	; (800c9ec <_localeconv_r+0x14>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	6a18      	ldr	r0, [r3, #32]
 800c9de:	4b04      	ldr	r3, [pc, #16]	; (800c9f0 <_localeconv_r+0x18>)
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	bf08      	it	eq
 800c9e4:	4618      	moveq	r0, r3
 800c9e6:	30f0      	adds	r0, #240	; 0xf0
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	20001640 	.word	0x20001640
 800c9f0:	200016a4 	.word	0x200016a4

0800c9f4 <malloc>:
 800c9f4:	4b02      	ldr	r3, [pc, #8]	; (800ca00 <malloc+0xc>)
 800c9f6:	4601      	mov	r1, r0
 800c9f8:	6818      	ldr	r0, [r3, #0]
 800c9fa:	f000 bc71 	b.w	800d2e0 <_malloc_r>
 800c9fe:	bf00      	nop
 800ca00:	20001640 	.word	0x20001640

0800ca04 <__ascii_mbtowc>:
 800ca04:	b082      	sub	sp, #8
 800ca06:	b901      	cbnz	r1, 800ca0a <__ascii_mbtowc+0x6>
 800ca08:	a901      	add	r1, sp, #4
 800ca0a:	b142      	cbz	r2, 800ca1e <__ascii_mbtowc+0x1a>
 800ca0c:	b14b      	cbz	r3, 800ca22 <__ascii_mbtowc+0x1e>
 800ca0e:	7813      	ldrb	r3, [r2, #0]
 800ca10:	600b      	str	r3, [r1, #0]
 800ca12:	7812      	ldrb	r2, [r2, #0]
 800ca14:	1c10      	adds	r0, r2, #0
 800ca16:	bf18      	it	ne
 800ca18:	2001      	movne	r0, #1
 800ca1a:	b002      	add	sp, #8
 800ca1c:	4770      	bx	lr
 800ca1e:	4610      	mov	r0, r2
 800ca20:	e7fb      	b.n	800ca1a <__ascii_mbtowc+0x16>
 800ca22:	f06f 0001 	mvn.w	r0, #1
 800ca26:	e7f8      	b.n	800ca1a <__ascii_mbtowc+0x16>

0800ca28 <_Balloc>:
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	460e      	mov	r6, r1
 800ca30:	b93d      	cbnz	r5, 800ca42 <_Balloc+0x1a>
 800ca32:	2010      	movs	r0, #16
 800ca34:	f7ff ffde 	bl	800c9f4 <malloc>
 800ca38:	6260      	str	r0, [r4, #36]	; 0x24
 800ca3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca3e:	6005      	str	r5, [r0, #0]
 800ca40:	60c5      	str	r5, [r0, #12]
 800ca42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca44:	68eb      	ldr	r3, [r5, #12]
 800ca46:	b183      	cbz	r3, 800ca6a <_Balloc+0x42>
 800ca48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ca50:	b9b8      	cbnz	r0, 800ca82 <_Balloc+0x5a>
 800ca52:	2101      	movs	r1, #1
 800ca54:	fa01 f506 	lsl.w	r5, r1, r6
 800ca58:	1d6a      	adds	r2, r5, #5
 800ca5a:	0092      	lsls	r2, r2, #2
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f000 fbe2 	bl	800d226 <_calloc_r>
 800ca62:	b160      	cbz	r0, 800ca7e <_Balloc+0x56>
 800ca64:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ca68:	e00e      	b.n	800ca88 <_Balloc+0x60>
 800ca6a:	2221      	movs	r2, #33	; 0x21
 800ca6c:	2104      	movs	r1, #4
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f000 fbd9 	bl	800d226 <_calloc_r>
 800ca74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca76:	60e8      	str	r0, [r5, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1e4      	bne.n	800ca48 <_Balloc+0x20>
 800ca7e:	2000      	movs	r0, #0
 800ca80:	bd70      	pop	{r4, r5, r6, pc}
 800ca82:	6802      	ldr	r2, [r0, #0]
 800ca84:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ca88:	2300      	movs	r3, #0
 800ca8a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca8e:	e7f7      	b.n	800ca80 <_Balloc+0x58>

0800ca90 <_Bfree>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ca94:	4606      	mov	r6, r0
 800ca96:	460d      	mov	r5, r1
 800ca98:	b93c      	cbnz	r4, 800caaa <_Bfree+0x1a>
 800ca9a:	2010      	movs	r0, #16
 800ca9c:	f7ff ffaa 	bl	800c9f4 <malloc>
 800caa0:	6270      	str	r0, [r6, #36]	; 0x24
 800caa2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800caa6:	6004      	str	r4, [r0, #0]
 800caa8:	60c4      	str	r4, [r0, #12]
 800caaa:	b13d      	cbz	r5, 800cabc <_Bfree+0x2c>
 800caac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800caae:	686a      	ldr	r2, [r5, #4]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cab6:	6029      	str	r1, [r5, #0]
 800cab8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cabc:	bd70      	pop	{r4, r5, r6, pc}

0800cabe <__multadd>:
 800cabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac2:	690d      	ldr	r5, [r1, #16]
 800cac4:	461f      	mov	r7, r3
 800cac6:	4606      	mov	r6, r0
 800cac8:	460c      	mov	r4, r1
 800caca:	f101 0c14 	add.w	ip, r1, #20
 800cace:	2300      	movs	r3, #0
 800cad0:	f8dc 0000 	ldr.w	r0, [ip]
 800cad4:	b281      	uxth	r1, r0
 800cad6:	fb02 7101 	mla	r1, r2, r1, r7
 800cada:	0c0f      	lsrs	r7, r1, #16
 800cadc:	0c00      	lsrs	r0, r0, #16
 800cade:	fb02 7000 	mla	r0, r2, r0, r7
 800cae2:	b289      	uxth	r1, r1
 800cae4:	3301      	adds	r3, #1
 800cae6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800caea:	429d      	cmp	r5, r3
 800caec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800caf0:	f84c 1b04 	str.w	r1, [ip], #4
 800caf4:	dcec      	bgt.n	800cad0 <__multadd+0x12>
 800caf6:	b1d7      	cbz	r7, 800cb2e <__multadd+0x70>
 800caf8:	68a3      	ldr	r3, [r4, #8]
 800cafa:	42ab      	cmp	r3, r5
 800cafc:	dc12      	bgt.n	800cb24 <__multadd+0x66>
 800cafe:	6861      	ldr	r1, [r4, #4]
 800cb00:	4630      	mov	r0, r6
 800cb02:	3101      	adds	r1, #1
 800cb04:	f7ff ff90 	bl	800ca28 <_Balloc>
 800cb08:	6922      	ldr	r2, [r4, #16]
 800cb0a:	3202      	adds	r2, #2
 800cb0c:	f104 010c 	add.w	r1, r4, #12
 800cb10:	4680      	mov	r8, r0
 800cb12:	0092      	lsls	r2, r2, #2
 800cb14:	300c      	adds	r0, #12
 800cb16:	f7fd f88f 	bl	8009c38 <memcpy>
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff ffb7 	bl	800ca90 <_Bfree>
 800cb22:	4644      	mov	r4, r8
 800cb24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb28:	3501      	adds	r5, #1
 800cb2a:	615f      	str	r7, [r3, #20]
 800cb2c:	6125      	str	r5, [r4, #16]
 800cb2e:	4620      	mov	r0, r4
 800cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb34 <__s2b>:
 800cb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb38:	460c      	mov	r4, r1
 800cb3a:	4615      	mov	r5, r2
 800cb3c:	461f      	mov	r7, r3
 800cb3e:	2209      	movs	r2, #9
 800cb40:	3308      	adds	r3, #8
 800cb42:	4606      	mov	r6, r0
 800cb44:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb48:	2100      	movs	r1, #0
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	db20      	blt.n	800cb92 <__s2b+0x5e>
 800cb50:	4630      	mov	r0, r6
 800cb52:	f7ff ff69 	bl	800ca28 <_Balloc>
 800cb56:	9b08      	ldr	r3, [sp, #32]
 800cb58:	6143      	str	r3, [r0, #20]
 800cb5a:	2d09      	cmp	r5, #9
 800cb5c:	f04f 0301 	mov.w	r3, #1
 800cb60:	6103      	str	r3, [r0, #16]
 800cb62:	dd19      	ble.n	800cb98 <__s2b+0x64>
 800cb64:	f104 0809 	add.w	r8, r4, #9
 800cb68:	46c1      	mov	r9, r8
 800cb6a:	442c      	add	r4, r5
 800cb6c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cb70:	4601      	mov	r1, r0
 800cb72:	3b30      	subs	r3, #48	; 0x30
 800cb74:	220a      	movs	r2, #10
 800cb76:	4630      	mov	r0, r6
 800cb78:	f7ff ffa1 	bl	800cabe <__multadd>
 800cb7c:	45a1      	cmp	r9, r4
 800cb7e:	d1f5      	bne.n	800cb6c <__s2b+0x38>
 800cb80:	eb08 0405 	add.w	r4, r8, r5
 800cb84:	3c08      	subs	r4, #8
 800cb86:	1b2d      	subs	r5, r5, r4
 800cb88:	1963      	adds	r3, r4, r5
 800cb8a:	42bb      	cmp	r3, r7
 800cb8c:	db07      	blt.n	800cb9e <__s2b+0x6a>
 800cb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb92:	0052      	lsls	r2, r2, #1
 800cb94:	3101      	adds	r1, #1
 800cb96:	e7d9      	b.n	800cb4c <__s2b+0x18>
 800cb98:	340a      	adds	r4, #10
 800cb9a:	2509      	movs	r5, #9
 800cb9c:	e7f3      	b.n	800cb86 <__s2b+0x52>
 800cb9e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cba2:	4601      	mov	r1, r0
 800cba4:	3b30      	subs	r3, #48	; 0x30
 800cba6:	220a      	movs	r2, #10
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f7ff ff88 	bl	800cabe <__multadd>
 800cbae:	e7eb      	b.n	800cb88 <__s2b+0x54>

0800cbb0 <__hi0bits>:
 800cbb0:	0c02      	lsrs	r2, r0, #16
 800cbb2:	0412      	lsls	r2, r2, #16
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	b9b2      	cbnz	r2, 800cbe6 <__hi0bits+0x36>
 800cbb8:	0403      	lsls	r3, r0, #16
 800cbba:	2010      	movs	r0, #16
 800cbbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cbc0:	bf04      	itt	eq
 800cbc2:	021b      	lsleq	r3, r3, #8
 800cbc4:	3008      	addeq	r0, #8
 800cbc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cbca:	bf04      	itt	eq
 800cbcc:	011b      	lsleq	r3, r3, #4
 800cbce:	3004      	addeq	r0, #4
 800cbd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cbd4:	bf04      	itt	eq
 800cbd6:	009b      	lsleq	r3, r3, #2
 800cbd8:	3002      	addeq	r0, #2
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	db06      	blt.n	800cbec <__hi0bits+0x3c>
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	d503      	bpl.n	800cbea <__hi0bits+0x3a>
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	4770      	bx	lr
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	e7e8      	b.n	800cbbc <__hi0bits+0xc>
 800cbea:	2020      	movs	r0, #32
 800cbec:	4770      	bx	lr

0800cbee <__lo0bits>:
 800cbee:	6803      	ldr	r3, [r0, #0]
 800cbf0:	f013 0207 	ands.w	r2, r3, #7
 800cbf4:	4601      	mov	r1, r0
 800cbf6:	d00b      	beq.n	800cc10 <__lo0bits+0x22>
 800cbf8:	07da      	lsls	r2, r3, #31
 800cbfa:	d423      	bmi.n	800cc44 <__lo0bits+0x56>
 800cbfc:	0798      	lsls	r0, r3, #30
 800cbfe:	bf49      	itett	mi
 800cc00:	085b      	lsrmi	r3, r3, #1
 800cc02:	089b      	lsrpl	r3, r3, #2
 800cc04:	2001      	movmi	r0, #1
 800cc06:	600b      	strmi	r3, [r1, #0]
 800cc08:	bf5c      	itt	pl
 800cc0a:	600b      	strpl	r3, [r1, #0]
 800cc0c:	2002      	movpl	r0, #2
 800cc0e:	4770      	bx	lr
 800cc10:	b298      	uxth	r0, r3
 800cc12:	b9a8      	cbnz	r0, 800cc40 <__lo0bits+0x52>
 800cc14:	0c1b      	lsrs	r3, r3, #16
 800cc16:	2010      	movs	r0, #16
 800cc18:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc1c:	bf04      	itt	eq
 800cc1e:	0a1b      	lsreq	r3, r3, #8
 800cc20:	3008      	addeq	r0, #8
 800cc22:	071a      	lsls	r2, r3, #28
 800cc24:	bf04      	itt	eq
 800cc26:	091b      	lsreq	r3, r3, #4
 800cc28:	3004      	addeq	r0, #4
 800cc2a:	079a      	lsls	r2, r3, #30
 800cc2c:	bf04      	itt	eq
 800cc2e:	089b      	lsreq	r3, r3, #2
 800cc30:	3002      	addeq	r0, #2
 800cc32:	07da      	lsls	r2, r3, #31
 800cc34:	d402      	bmi.n	800cc3c <__lo0bits+0x4e>
 800cc36:	085b      	lsrs	r3, r3, #1
 800cc38:	d006      	beq.n	800cc48 <__lo0bits+0x5a>
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	600b      	str	r3, [r1, #0]
 800cc3e:	4770      	bx	lr
 800cc40:	4610      	mov	r0, r2
 800cc42:	e7e9      	b.n	800cc18 <__lo0bits+0x2a>
 800cc44:	2000      	movs	r0, #0
 800cc46:	4770      	bx	lr
 800cc48:	2020      	movs	r0, #32
 800cc4a:	4770      	bx	lr

0800cc4c <__i2b>:
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	460c      	mov	r4, r1
 800cc50:	2101      	movs	r1, #1
 800cc52:	f7ff fee9 	bl	800ca28 <_Balloc>
 800cc56:	2201      	movs	r2, #1
 800cc58:	6144      	str	r4, [r0, #20]
 800cc5a:	6102      	str	r2, [r0, #16]
 800cc5c:	bd10      	pop	{r4, pc}

0800cc5e <__multiply>:
 800cc5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc62:	4614      	mov	r4, r2
 800cc64:	690a      	ldr	r2, [r1, #16]
 800cc66:	6923      	ldr	r3, [r4, #16]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	bfb8      	it	lt
 800cc6c:	460b      	movlt	r3, r1
 800cc6e:	4688      	mov	r8, r1
 800cc70:	bfbc      	itt	lt
 800cc72:	46a0      	movlt	r8, r4
 800cc74:	461c      	movlt	r4, r3
 800cc76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cc7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc86:	eb07 0609 	add.w	r6, r7, r9
 800cc8a:	42b3      	cmp	r3, r6
 800cc8c:	bfb8      	it	lt
 800cc8e:	3101      	addlt	r1, #1
 800cc90:	f7ff feca 	bl	800ca28 <_Balloc>
 800cc94:	f100 0514 	add.w	r5, r0, #20
 800cc98:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cc9c:	462b      	mov	r3, r5
 800cc9e:	2200      	movs	r2, #0
 800cca0:	4573      	cmp	r3, lr
 800cca2:	d316      	bcc.n	800ccd2 <__multiply+0x74>
 800cca4:	f104 0214 	add.w	r2, r4, #20
 800cca8:	f108 0114 	add.w	r1, r8, #20
 800ccac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ccb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	9b00      	ldr	r3, [sp, #0]
 800ccb8:	9201      	str	r2, [sp, #4]
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d80c      	bhi.n	800ccd8 <__multiply+0x7a>
 800ccbe:	2e00      	cmp	r6, #0
 800ccc0:	dd03      	ble.n	800ccca <__multiply+0x6c>
 800ccc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d05d      	beq.n	800cd86 <__multiply+0x128>
 800ccca:	6106      	str	r6, [r0, #16]
 800cccc:	b003      	add	sp, #12
 800ccce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd2:	f843 2b04 	str.w	r2, [r3], #4
 800ccd6:	e7e3      	b.n	800cca0 <__multiply+0x42>
 800ccd8:	f8b2 b000 	ldrh.w	fp, [r2]
 800ccdc:	f1bb 0f00 	cmp.w	fp, #0
 800cce0:	d023      	beq.n	800cd2a <__multiply+0xcc>
 800cce2:	4689      	mov	r9, r1
 800cce4:	46ac      	mov	ip, r5
 800cce6:	f04f 0800 	mov.w	r8, #0
 800ccea:	f859 4b04 	ldr.w	r4, [r9], #4
 800ccee:	f8dc a000 	ldr.w	sl, [ip]
 800ccf2:	b2a3      	uxth	r3, r4
 800ccf4:	fa1f fa8a 	uxth.w	sl, sl
 800ccf8:	fb0b a303 	mla	r3, fp, r3, sl
 800ccfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cd00:	f8dc 4000 	ldr.w	r4, [ip]
 800cd04:	4443      	add	r3, r8
 800cd06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cd0a:	fb0b 840a 	mla	r4, fp, sl, r8
 800cd0e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cd12:	46e2      	mov	sl, ip
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cd1a:	454f      	cmp	r7, r9
 800cd1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cd20:	f84a 3b04 	str.w	r3, [sl], #4
 800cd24:	d82b      	bhi.n	800cd7e <__multiply+0x120>
 800cd26:	f8cc 8004 	str.w	r8, [ip, #4]
 800cd2a:	9b01      	ldr	r3, [sp, #4]
 800cd2c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cd30:	3204      	adds	r2, #4
 800cd32:	f1ba 0f00 	cmp.w	sl, #0
 800cd36:	d020      	beq.n	800cd7a <__multiply+0x11c>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	4689      	mov	r9, r1
 800cd3c:	46a8      	mov	r8, r5
 800cd3e:	f04f 0b00 	mov.w	fp, #0
 800cd42:	f8b9 c000 	ldrh.w	ip, [r9]
 800cd46:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cd4a:	fb0a 440c 	mla	r4, sl, ip, r4
 800cd4e:	445c      	add	r4, fp
 800cd50:	46c4      	mov	ip, r8
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cd58:	f84c 3b04 	str.w	r3, [ip], #4
 800cd5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd60:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cd64:	0c1b      	lsrs	r3, r3, #16
 800cd66:	fb0a b303 	mla	r3, sl, r3, fp
 800cd6a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cd6e:	454f      	cmp	r7, r9
 800cd70:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cd74:	d805      	bhi.n	800cd82 <__multiply+0x124>
 800cd76:	f8c8 3004 	str.w	r3, [r8, #4]
 800cd7a:	3504      	adds	r5, #4
 800cd7c:	e79b      	b.n	800ccb6 <__multiply+0x58>
 800cd7e:	46d4      	mov	ip, sl
 800cd80:	e7b3      	b.n	800ccea <__multiply+0x8c>
 800cd82:	46e0      	mov	r8, ip
 800cd84:	e7dd      	b.n	800cd42 <__multiply+0xe4>
 800cd86:	3e01      	subs	r6, #1
 800cd88:	e799      	b.n	800ccbe <__multiply+0x60>
	...

0800cd8c <__pow5mult>:
 800cd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd90:	4615      	mov	r5, r2
 800cd92:	f012 0203 	ands.w	r2, r2, #3
 800cd96:	4606      	mov	r6, r0
 800cd98:	460f      	mov	r7, r1
 800cd9a:	d007      	beq.n	800cdac <__pow5mult+0x20>
 800cd9c:	3a01      	subs	r2, #1
 800cd9e:	4c21      	ldr	r4, [pc, #132]	; (800ce24 <__pow5mult+0x98>)
 800cda0:	2300      	movs	r3, #0
 800cda2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cda6:	f7ff fe8a 	bl	800cabe <__multadd>
 800cdaa:	4607      	mov	r7, r0
 800cdac:	10ad      	asrs	r5, r5, #2
 800cdae:	d035      	beq.n	800ce1c <__pow5mult+0x90>
 800cdb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cdb2:	b93c      	cbnz	r4, 800cdc4 <__pow5mult+0x38>
 800cdb4:	2010      	movs	r0, #16
 800cdb6:	f7ff fe1d 	bl	800c9f4 <malloc>
 800cdba:	6270      	str	r0, [r6, #36]	; 0x24
 800cdbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdc0:	6004      	str	r4, [r0, #0]
 800cdc2:	60c4      	str	r4, [r0, #12]
 800cdc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cdc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdcc:	b94c      	cbnz	r4, 800cde2 <__pow5mult+0x56>
 800cdce:	f240 2171 	movw	r1, #625	; 0x271
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7ff ff3a 	bl	800cc4c <__i2b>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdde:	4604      	mov	r4, r0
 800cde0:	6003      	str	r3, [r0, #0]
 800cde2:	f04f 0800 	mov.w	r8, #0
 800cde6:	07eb      	lsls	r3, r5, #31
 800cde8:	d50a      	bpl.n	800ce00 <__pow5mult+0x74>
 800cdea:	4639      	mov	r1, r7
 800cdec:	4622      	mov	r2, r4
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f7ff ff35 	bl	800cc5e <__multiply>
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	4681      	mov	r9, r0
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f7ff fe49 	bl	800ca90 <_Bfree>
 800cdfe:	464f      	mov	r7, r9
 800ce00:	106d      	asrs	r5, r5, #1
 800ce02:	d00b      	beq.n	800ce1c <__pow5mult+0x90>
 800ce04:	6820      	ldr	r0, [r4, #0]
 800ce06:	b938      	cbnz	r0, 800ce18 <__pow5mult+0x8c>
 800ce08:	4622      	mov	r2, r4
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	f7ff ff26 	bl	800cc5e <__multiply>
 800ce12:	6020      	str	r0, [r4, #0]
 800ce14:	f8c0 8000 	str.w	r8, [r0]
 800ce18:	4604      	mov	r4, r0
 800ce1a:	e7e4      	b.n	800cde6 <__pow5mult+0x5a>
 800ce1c:	4638      	mov	r0, r7
 800ce1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce22:	bf00      	nop
 800ce24:	0800f8c8 	.word	0x0800f8c8

0800ce28 <__lshift>:
 800ce28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	6849      	ldr	r1, [r1, #4]
 800ce36:	eb0a 0903 	add.w	r9, sl, r3
 800ce3a:	68a3      	ldr	r3, [r4, #8]
 800ce3c:	4607      	mov	r7, r0
 800ce3e:	4616      	mov	r6, r2
 800ce40:	f109 0501 	add.w	r5, r9, #1
 800ce44:	42ab      	cmp	r3, r5
 800ce46:	db32      	blt.n	800ceae <__lshift+0x86>
 800ce48:	4638      	mov	r0, r7
 800ce4a:	f7ff fded 	bl	800ca28 <_Balloc>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	4680      	mov	r8, r0
 800ce52:	f100 0114 	add.w	r1, r0, #20
 800ce56:	461a      	mov	r2, r3
 800ce58:	4553      	cmp	r3, sl
 800ce5a:	db2b      	blt.n	800ceb4 <__lshift+0x8c>
 800ce5c:	6920      	ldr	r0, [r4, #16]
 800ce5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce62:	f104 0314 	add.w	r3, r4, #20
 800ce66:	f016 021f 	ands.w	r2, r6, #31
 800ce6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce72:	d025      	beq.n	800cec0 <__lshift+0x98>
 800ce74:	f1c2 0e20 	rsb	lr, r2, #32
 800ce78:	2000      	movs	r0, #0
 800ce7a:	681e      	ldr	r6, [r3, #0]
 800ce7c:	468a      	mov	sl, r1
 800ce7e:	4096      	lsls	r6, r2
 800ce80:	4330      	orrs	r0, r6
 800ce82:	f84a 0b04 	str.w	r0, [sl], #4
 800ce86:	f853 0b04 	ldr.w	r0, [r3], #4
 800ce8a:	459c      	cmp	ip, r3
 800ce8c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ce90:	d814      	bhi.n	800cebc <__lshift+0x94>
 800ce92:	6048      	str	r0, [r1, #4]
 800ce94:	b108      	cbz	r0, 800ce9a <__lshift+0x72>
 800ce96:	f109 0502 	add.w	r5, r9, #2
 800ce9a:	3d01      	subs	r5, #1
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	f8c8 5010 	str.w	r5, [r8, #16]
 800cea2:	4621      	mov	r1, r4
 800cea4:	f7ff fdf4 	bl	800ca90 <_Bfree>
 800cea8:	4640      	mov	r0, r8
 800ceaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceae:	3101      	adds	r1, #1
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	e7c7      	b.n	800ce44 <__lshift+0x1c>
 800ceb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	e7cd      	b.n	800ce58 <__lshift+0x30>
 800cebc:	4651      	mov	r1, sl
 800cebe:	e7dc      	b.n	800ce7a <__lshift+0x52>
 800cec0:	3904      	subs	r1, #4
 800cec2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cec6:	f841 2f04 	str.w	r2, [r1, #4]!
 800ceca:	459c      	cmp	ip, r3
 800cecc:	d8f9      	bhi.n	800cec2 <__lshift+0x9a>
 800cece:	e7e4      	b.n	800ce9a <__lshift+0x72>

0800ced0 <__mcmp>:
 800ced0:	6903      	ldr	r3, [r0, #16]
 800ced2:	690a      	ldr	r2, [r1, #16]
 800ced4:	1a9b      	subs	r3, r3, r2
 800ced6:	b530      	push	{r4, r5, lr}
 800ced8:	d10c      	bne.n	800cef4 <__mcmp+0x24>
 800ceda:	0092      	lsls	r2, r2, #2
 800cedc:	3014      	adds	r0, #20
 800cede:	3114      	adds	r1, #20
 800cee0:	1884      	adds	r4, r0, r2
 800cee2:	4411      	add	r1, r2
 800cee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ceec:	4295      	cmp	r5, r2
 800ceee:	d003      	beq.n	800cef8 <__mcmp+0x28>
 800cef0:	d305      	bcc.n	800cefe <__mcmp+0x2e>
 800cef2:	2301      	movs	r3, #1
 800cef4:	4618      	mov	r0, r3
 800cef6:	bd30      	pop	{r4, r5, pc}
 800cef8:	42a0      	cmp	r0, r4
 800cefa:	d3f3      	bcc.n	800cee4 <__mcmp+0x14>
 800cefc:	e7fa      	b.n	800cef4 <__mcmp+0x24>
 800cefe:	f04f 33ff 	mov.w	r3, #4294967295
 800cf02:	e7f7      	b.n	800cef4 <__mcmp+0x24>

0800cf04 <__mdiff>:
 800cf04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf08:	460d      	mov	r5, r1
 800cf0a:	4607      	mov	r7, r0
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	4628      	mov	r0, r5
 800cf10:	4614      	mov	r4, r2
 800cf12:	f7ff ffdd 	bl	800ced0 <__mcmp>
 800cf16:	1e06      	subs	r6, r0, #0
 800cf18:	d108      	bne.n	800cf2c <__mdiff+0x28>
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4638      	mov	r0, r7
 800cf1e:	f7ff fd83 	bl	800ca28 <_Balloc>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cf28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2c:	bfa4      	itt	ge
 800cf2e:	4623      	movge	r3, r4
 800cf30:	462c      	movge	r4, r5
 800cf32:	4638      	mov	r0, r7
 800cf34:	6861      	ldr	r1, [r4, #4]
 800cf36:	bfa6      	itte	ge
 800cf38:	461d      	movge	r5, r3
 800cf3a:	2600      	movge	r6, #0
 800cf3c:	2601      	movlt	r6, #1
 800cf3e:	f7ff fd73 	bl	800ca28 <_Balloc>
 800cf42:	692b      	ldr	r3, [r5, #16]
 800cf44:	60c6      	str	r6, [r0, #12]
 800cf46:	6926      	ldr	r6, [r4, #16]
 800cf48:	f105 0914 	add.w	r9, r5, #20
 800cf4c:	f104 0214 	add.w	r2, r4, #20
 800cf50:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cf54:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cf58:	f100 0514 	add.w	r5, r0, #20
 800cf5c:	f04f 0e00 	mov.w	lr, #0
 800cf60:	f852 ab04 	ldr.w	sl, [r2], #4
 800cf64:	f859 4b04 	ldr.w	r4, [r9], #4
 800cf68:	fa1e f18a 	uxtah	r1, lr, sl
 800cf6c:	b2a3      	uxth	r3, r4
 800cf6e:	1ac9      	subs	r1, r1, r3
 800cf70:	0c23      	lsrs	r3, r4, #16
 800cf72:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cf76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cf7a:	b289      	uxth	r1, r1
 800cf7c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cf80:	45c8      	cmp	r8, r9
 800cf82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cf86:	4694      	mov	ip, r2
 800cf88:	f845 3b04 	str.w	r3, [r5], #4
 800cf8c:	d8e8      	bhi.n	800cf60 <__mdiff+0x5c>
 800cf8e:	45bc      	cmp	ip, r7
 800cf90:	d304      	bcc.n	800cf9c <__mdiff+0x98>
 800cf92:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cf96:	b183      	cbz	r3, 800cfba <__mdiff+0xb6>
 800cf98:	6106      	str	r6, [r0, #16]
 800cf9a:	e7c5      	b.n	800cf28 <__mdiff+0x24>
 800cf9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cfa0:	fa1e f381 	uxtah	r3, lr, r1
 800cfa4:	141a      	asrs	r2, r3, #16
 800cfa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfb0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cfb4:	f845 3b04 	str.w	r3, [r5], #4
 800cfb8:	e7e9      	b.n	800cf8e <__mdiff+0x8a>
 800cfba:	3e01      	subs	r6, #1
 800cfbc:	e7e9      	b.n	800cf92 <__mdiff+0x8e>
	...

0800cfc0 <__ulp>:
 800cfc0:	4b12      	ldr	r3, [pc, #72]	; (800d00c <__ulp+0x4c>)
 800cfc2:	ee10 2a90 	vmov	r2, s1
 800cfc6:	401a      	ands	r2, r3
 800cfc8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	dd04      	ble.n	800cfda <__ulp+0x1a>
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	ec41 0b10 	vmov	d0, r0, r1
 800cfd8:	4770      	bx	lr
 800cfda:	425b      	negs	r3, r3
 800cfdc:	151b      	asrs	r3, r3, #20
 800cfde:	2b13      	cmp	r3, #19
 800cfe0:	f04f 0000 	mov.w	r0, #0
 800cfe4:	f04f 0100 	mov.w	r1, #0
 800cfe8:	dc04      	bgt.n	800cff4 <__ulp+0x34>
 800cfea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cfee:	fa42 f103 	asr.w	r1, r2, r3
 800cff2:	e7ef      	b.n	800cfd4 <__ulp+0x14>
 800cff4:	3b14      	subs	r3, #20
 800cff6:	2b1e      	cmp	r3, #30
 800cff8:	f04f 0201 	mov.w	r2, #1
 800cffc:	bfda      	itte	le
 800cffe:	f1c3 031f 	rsble	r3, r3, #31
 800d002:	fa02 f303 	lslle.w	r3, r2, r3
 800d006:	4613      	movgt	r3, r2
 800d008:	4618      	mov	r0, r3
 800d00a:	e7e3      	b.n	800cfd4 <__ulp+0x14>
 800d00c:	7ff00000 	.word	0x7ff00000

0800d010 <__b2d>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	6905      	ldr	r5, [r0, #16]
 800d014:	f100 0714 	add.w	r7, r0, #20
 800d018:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d01c:	1f2e      	subs	r6, r5, #4
 800d01e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d022:	4620      	mov	r0, r4
 800d024:	f7ff fdc4 	bl	800cbb0 <__hi0bits>
 800d028:	f1c0 0320 	rsb	r3, r0, #32
 800d02c:	280a      	cmp	r0, #10
 800d02e:	600b      	str	r3, [r1, #0]
 800d030:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d0a8 <__b2d+0x98>
 800d034:	dc14      	bgt.n	800d060 <__b2d+0x50>
 800d036:	f1c0 0e0b 	rsb	lr, r0, #11
 800d03a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d03e:	42b7      	cmp	r7, r6
 800d040:	ea41 030c 	orr.w	r3, r1, ip
 800d044:	bf34      	ite	cc
 800d046:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d04a:	2100      	movcs	r1, #0
 800d04c:	3015      	adds	r0, #21
 800d04e:	fa04 f000 	lsl.w	r0, r4, r0
 800d052:	fa21 f10e 	lsr.w	r1, r1, lr
 800d056:	ea40 0201 	orr.w	r2, r0, r1
 800d05a:	ec43 2b10 	vmov	d0, r2, r3
 800d05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d060:	42b7      	cmp	r7, r6
 800d062:	bf3a      	itte	cc
 800d064:	f1a5 0608 	subcc.w	r6, r5, #8
 800d068:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d06c:	2100      	movcs	r1, #0
 800d06e:	380b      	subs	r0, #11
 800d070:	d015      	beq.n	800d09e <__b2d+0x8e>
 800d072:	4084      	lsls	r4, r0
 800d074:	f1c0 0520 	rsb	r5, r0, #32
 800d078:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d07c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d080:	42be      	cmp	r6, r7
 800d082:	fa21 fc05 	lsr.w	ip, r1, r5
 800d086:	ea44 030c 	orr.w	r3, r4, ip
 800d08a:	bf8c      	ite	hi
 800d08c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d090:	2400      	movls	r4, #0
 800d092:	fa01 f000 	lsl.w	r0, r1, r0
 800d096:	40ec      	lsrs	r4, r5
 800d098:	ea40 0204 	orr.w	r2, r0, r4
 800d09c:	e7dd      	b.n	800d05a <__b2d+0x4a>
 800d09e:	ea44 030c 	orr.w	r3, r4, ip
 800d0a2:	460a      	mov	r2, r1
 800d0a4:	e7d9      	b.n	800d05a <__b2d+0x4a>
 800d0a6:	bf00      	nop
 800d0a8:	3ff00000 	.word	0x3ff00000

0800d0ac <__d2b>:
 800d0ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	460e      	mov	r6, r1
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	ec59 8b10 	vmov	r8, r9, d0
 800d0b8:	4615      	mov	r5, r2
 800d0ba:	f7ff fcb5 	bl	800ca28 <_Balloc>
 800d0be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0c8:	bb34      	cbnz	r4, 800d118 <__d2b+0x6c>
 800d0ca:	9301      	str	r3, [sp, #4]
 800d0cc:	f1b8 0300 	subs.w	r3, r8, #0
 800d0d0:	d027      	beq.n	800d122 <__d2b+0x76>
 800d0d2:	a802      	add	r0, sp, #8
 800d0d4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d0d8:	f7ff fd89 	bl	800cbee <__lo0bits>
 800d0dc:	9900      	ldr	r1, [sp, #0]
 800d0de:	b1f0      	cbz	r0, 800d11e <__d2b+0x72>
 800d0e0:	9a01      	ldr	r2, [sp, #4]
 800d0e2:	f1c0 0320 	rsb	r3, r0, #32
 800d0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ea:	430b      	orrs	r3, r1
 800d0ec:	40c2      	lsrs	r2, r0
 800d0ee:	617b      	str	r3, [r7, #20]
 800d0f0:	9201      	str	r2, [sp, #4]
 800d0f2:	9b01      	ldr	r3, [sp, #4]
 800d0f4:	61bb      	str	r3, [r7, #24]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	bf14      	ite	ne
 800d0fa:	2102      	movne	r1, #2
 800d0fc:	2101      	moveq	r1, #1
 800d0fe:	6139      	str	r1, [r7, #16]
 800d100:	b1c4      	cbz	r4, 800d134 <__d2b+0x88>
 800d102:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d106:	4404      	add	r4, r0
 800d108:	6034      	str	r4, [r6, #0]
 800d10a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d10e:	6028      	str	r0, [r5, #0]
 800d110:	4638      	mov	r0, r7
 800d112:	b003      	add	sp, #12
 800d114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d11c:	e7d5      	b.n	800d0ca <__d2b+0x1e>
 800d11e:	6179      	str	r1, [r7, #20]
 800d120:	e7e7      	b.n	800d0f2 <__d2b+0x46>
 800d122:	a801      	add	r0, sp, #4
 800d124:	f7ff fd63 	bl	800cbee <__lo0bits>
 800d128:	9b01      	ldr	r3, [sp, #4]
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	2101      	movs	r1, #1
 800d12e:	6139      	str	r1, [r7, #16]
 800d130:	3020      	adds	r0, #32
 800d132:	e7e5      	b.n	800d100 <__d2b+0x54>
 800d134:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d13c:	6030      	str	r0, [r6, #0]
 800d13e:	6918      	ldr	r0, [r3, #16]
 800d140:	f7ff fd36 	bl	800cbb0 <__hi0bits>
 800d144:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d148:	e7e1      	b.n	800d10e <__d2b+0x62>

0800d14a <__ratio>:
 800d14a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14e:	4688      	mov	r8, r1
 800d150:	4669      	mov	r1, sp
 800d152:	4681      	mov	r9, r0
 800d154:	f7ff ff5c 	bl	800d010 <__b2d>
 800d158:	a901      	add	r1, sp, #4
 800d15a:	4640      	mov	r0, r8
 800d15c:	ec57 6b10 	vmov	r6, r7, d0
 800d160:	f7ff ff56 	bl	800d010 <__b2d>
 800d164:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d168:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d16c:	eba3 0c02 	sub.w	ip, r3, r2
 800d170:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d174:	1a9b      	subs	r3, r3, r2
 800d176:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d17a:	ec5b ab10 	vmov	sl, fp, d0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bfce      	itee	gt
 800d182:	463a      	movgt	r2, r7
 800d184:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d188:	465a      	movle	r2, fp
 800d18a:	4659      	mov	r1, fp
 800d18c:	463d      	mov	r5, r7
 800d18e:	bfd4      	ite	le
 800d190:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d194:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d198:	4630      	mov	r0, r6
 800d19a:	ee10 2a10 	vmov	r2, s0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	f7f3 fb7b 	bl	800089c <__aeabi_ddiv>
 800d1a6:	ec41 0b10 	vmov	d0, r0, r1
 800d1aa:	b003      	add	sp, #12
 800d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1b0 <__copybits>:
 800d1b0:	3901      	subs	r1, #1
 800d1b2:	b510      	push	{r4, lr}
 800d1b4:	1149      	asrs	r1, r1, #5
 800d1b6:	6914      	ldr	r4, [r2, #16]
 800d1b8:	3101      	adds	r1, #1
 800d1ba:	f102 0314 	add.w	r3, r2, #20
 800d1be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1c6:	42a3      	cmp	r3, r4
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	d303      	bcc.n	800d1d4 <__copybits+0x24>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	428a      	cmp	r2, r1
 800d1d0:	d305      	bcc.n	800d1de <__copybits+0x2e>
 800d1d2:	bd10      	pop	{r4, pc}
 800d1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1d8:	f840 2b04 	str.w	r2, [r0], #4
 800d1dc:	e7f3      	b.n	800d1c6 <__copybits+0x16>
 800d1de:	f842 3b04 	str.w	r3, [r2], #4
 800d1e2:	e7f4      	b.n	800d1ce <__copybits+0x1e>

0800d1e4 <__any_on>:
 800d1e4:	f100 0214 	add.w	r2, r0, #20
 800d1e8:	6900      	ldr	r0, [r0, #16]
 800d1ea:	114b      	asrs	r3, r1, #5
 800d1ec:	4298      	cmp	r0, r3
 800d1ee:	b510      	push	{r4, lr}
 800d1f0:	db11      	blt.n	800d216 <__any_on+0x32>
 800d1f2:	dd0a      	ble.n	800d20a <__any_on+0x26>
 800d1f4:	f011 011f 	ands.w	r1, r1, #31
 800d1f8:	d007      	beq.n	800d20a <__any_on+0x26>
 800d1fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d1fe:	fa24 f001 	lsr.w	r0, r4, r1
 800d202:	fa00 f101 	lsl.w	r1, r0, r1
 800d206:	428c      	cmp	r4, r1
 800d208:	d10b      	bne.n	800d222 <__any_on+0x3e>
 800d20a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d20e:	4293      	cmp	r3, r2
 800d210:	d803      	bhi.n	800d21a <__any_on+0x36>
 800d212:	2000      	movs	r0, #0
 800d214:	bd10      	pop	{r4, pc}
 800d216:	4603      	mov	r3, r0
 800d218:	e7f7      	b.n	800d20a <__any_on+0x26>
 800d21a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d21e:	2900      	cmp	r1, #0
 800d220:	d0f5      	beq.n	800d20e <__any_on+0x2a>
 800d222:	2001      	movs	r0, #1
 800d224:	e7f6      	b.n	800d214 <__any_on+0x30>

0800d226 <_calloc_r>:
 800d226:	b538      	push	{r3, r4, r5, lr}
 800d228:	fb02 f401 	mul.w	r4, r2, r1
 800d22c:	4621      	mov	r1, r4
 800d22e:	f000 f857 	bl	800d2e0 <_malloc_r>
 800d232:	4605      	mov	r5, r0
 800d234:	b118      	cbz	r0, 800d23e <_calloc_r+0x18>
 800d236:	4622      	mov	r2, r4
 800d238:	2100      	movs	r1, #0
 800d23a:	f7fc fd08 	bl	8009c4e <memset>
 800d23e:	4628      	mov	r0, r5
 800d240:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d244 <_free_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4605      	mov	r5, r0
 800d248:	2900      	cmp	r1, #0
 800d24a:	d045      	beq.n	800d2d8 <_free_r+0x94>
 800d24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d250:	1f0c      	subs	r4, r1, #4
 800d252:	2b00      	cmp	r3, #0
 800d254:	bfb8      	it	lt
 800d256:	18e4      	addlt	r4, r4, r3
 800d258:	f000 fa36 	bl	800d6c8 <__malloc_lock>
 800d25c:	4a1f      	ldr	r2, [pc, #124]	; (800d2dc <_free_r+0x98>)
 800d25e:	6813      	ldr	r3, [r2, #0]
 800d260:	4610      	mov	r0, r2
 800d262:	b933      	cbnz	r3, 800d272 <_free_r+0x2e>
 800d264:	6063      	str	r3, [r4, #4]
 800d266:	6014      	str	r4, [r2, #0]
 800d268:	4628      	mov	r0, r5
 800d26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d26e:	f000 ba2c 	b.w	800d6ca <__malloc_unlock>
 800d272:	42a3      	cmp	r3, r4
 800d274:	d90c      	bls.n	800d290 <_free_r+0x4c>
 800d276:	6821      	ldr	r1, [r4, #0]
 800d278:	1862      	adds	r2, r4, r1
 800d27a:	4293      	cmp	r3, r2
 800d27c:	bf04      	itt	eq
 800d27e:	681a      	ldreq	r2, [r3, #0]
 800d280:	685b      	ldreq	r3, [r3, #4]
 800d282:	6063      	str	r3, [r4, #4]
 800d284:	bf04      	itt	eq
 800d286:	1852      	addeq	r2, r2, r1
 800d288:	6022      	streq	r2, [r4, #0]
 800d28a:	6004      	str	r4, [r0, #0]
 800d28c:	e7ec      	b.n	800d268 <_free_r+0x24>
 800d28e:	4613      	mov	r3, r2
 800d290:	685a      	ldr	r2, [r3, #4]
 800d292:	b10a      	cbz	r2, 800d298 <_free_r+0x54>
 800d294:	42a2      	cmp	r2, r4
 800d296:	d9fa      	bls.n	800d28e <_free_r+0x4a>
 800d298:	6819      	ldr	r1, [r3, #0]
 800d29a:	1858      	adds	r0, r3, r1
 800d29c:	42a0      	cmp	r0, r4
 800d29e:	d10b      	bne.n	800d2b8 <_free_r+0x74>
 800d2a0:	6820      	ldr	r0, [r4, #0]
 800d2a2:	4401      	add	r1, r0
 800d2a4:	1858      	adds	r0, r3, r1
 800d2a6:	4282      	cmp	r2, r0
 800d2a8:	6019      	str	r1, [r3, #0]
 800d2aa:	d1dd      	bne.n	800d268 <_free_r+0x24>
 800d2ac:	6810      	ldr	r0, [r2, #0]
 800d2ae:	6852      	ldr	r2, [r2, #4]
 800d2b0:	605a      	str	r2, [r3, #4]
 800d2b2:	4401      	add	r1, r0
 800d2b4:	6019      	str	r1, [r3, #0]
 800d2b6:	e7d7      	b.n	800d268 <_free_r+0x24>
 800d2b8:	d902      	bls.n	800d2c0 <_free_r+0x7c>
 800d2ba:	230c      	movs	r3, #12
 800d2bc:	602b      	str	r3, [r5, #0]
 800d2be:	e7d3      	b.n	800d268 <_free_r+0x24>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	1821      	adds	r1, r4, r0
 800d2c4:	428a      	cmp	r2, r1
 800d2c6:	bf04      	itt	eq
 800d2c8:	6811      	ldreq	r1, [r2, #0]
 800d2ca:	6852      	ldreq	r2, [r2, #4]
 800d2cc:	6062      	str	r2, [r4, #4]
 800d2ce:	bf04      	itt	eq
 800d2d0:	1809      	addeq	r1, r1, r0
 800d2d2:	6021      	streq	r1, [r4, #0]
 800d2d4:	605c      	str	r4, [r3, #4]
 800d2d6:	e7c7      	b.n	800d268 <_free_r+0x24>
 800d2d8:	bd38      	pop	{r3, r4, r5, pc}
 800d2da:	bf00      	nop
 800d2dc:	20006a28 	.word	0x20006a28

0800d2e0 <_malloc_r>:
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	1ccd      	adds	r5, r1, #3
 800d2e4:	f025 0503 	bic.w	r5, r5, #3
 800d2e8:	3508      	adds	r5, #8
 800d2ea:	2d0c      	cmp	r5, #12
 800d2ec:	bf38      	it	cc
 800d2ee:	250c      	movcc	r5, #12
 800d2f0:	2d00      	cmp	r5, #0
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	db01      	blt.n	800d2fa <_malloc_r+0x1a>
 800d2f6:	42a9      	cmp	r1, r5
 800d2f8:	d903      	bls.n	800d302 <_malloc_r+0x22>
 800d2fa:	230c      	movs	r3, #12
 800d2fc:	6033      	str	r3, [r6, #0]
 800d2fe:	2000      	movs	r0, #0
 800d300:	bd70      	pop	{r4, r5, r6, pc}
 800d302:	f000 f9e1 	bl	800d6c8 <__malloc_lock>
 800d306:	4a21      	ldr	r2, [pc, #132]	; (800d38c <_malloc_r+0xac>)
 800d308:	6814      	ldr	r4, [r2, #0]
 800d30a:	4621      	mov	r1, r4
 800d30c:	b991      	cbnz	r1, 800d334 <_malloc_r+0x54>
 800d30e:	4c20      	ldr	r4, [pc, #128]	; (800d390 <_malloc_r+0xb0>)
 800d310:	6823      	ldr	r3, [r4, #0]
 800d312:	b91b      	cbnz	r3, 800d31c <_malloc_r+0x3c>
 800d314:	4630      	mov	r0, r6
 800d316:	f000 f98f 	bl	800d638 <_sbrk_r>
 800d31a:	6020      	str	r0, [r4, #0]
 800d31c:	4629      	mov	r1, r5
 800d31e:	4630      	mov	r0, r6
 800d320:	f000 f98a 	bl	800d638 <_sbrk_r>
 800d324:	1c43      	adds	r3, r0, #1
 800d326:	d124      	bne.n	800d372 <_malloc_r+0x92>
 800d328:	230c      	movs	r3, #12
 800d32a:	6033      	str	r3, [r6, #0]
 800d32c:	4630      	mov	r0, r6
 800d32e:	f000 f9cc 	bl	800d6ca <__malloc_unlock>
 800d332:	e7e4      	b.n	800d2fe <_malloc_r+0x1e>
 800d334:	680b      	ldr	r3, [r1, #0]
 800d336:	1b5b      	subs	r3, r3, r5
 800d338:	d418      	bmi.n	800d36c <_malloc_r+0x8c>
 800d33a:	2b0b      	cmp	r3, #11
 800d33c:	d90f      	bls.n	800d35e <_malloc_r+0x7e>
 800d33e:	600b      	str	r3, [r1, #0]
 800d340:	50cd      	str	r5, [r1, r3]
 800d342:	18cc      	adds	r4, r1, r3
 800d344:	4630      	mov	r0, r6
 800d346:	f000 f9c0 	bl	800d6ca <__malloc_unlock>
 800d34a:	f104 000b 	add.w	r0, r4, #11
 800d34e:	1d23      	adds	r3, r4, #4
 800d350:	f020 0007 	bic.w	r0, r0, #7
 800d354:	1ac3      	subs	r3, r0, r3
 800d356:	d0d3      	beq.n	800d300 <_malloc_r+0x20>
 800d358:	425a      	negs	r2, r3
 800d35a:	50e2      	str	r2, [r4, r3]
 800d35c:	e7d0      	b.n	800d300 <_malloc_r+0x20>
 800d35e:	428c      	cmp	r4, r1
 800d360:	684b      	ldr	r3, [r1, #4]
 800d362:	bf16      	itet	ne
 800d364:	6063      	strne	r3, [r4, #4]
 800d366:	6013      	streq	r3, [r2, #0]
 800d368:	460c      	movne	r4, r1
 800d36a:	e7eb      	b.n	800d344 <_malloc_r+0x64>
 800d36c:	460c      	mov	r4, r1
 800d36e:	6849      	ldr	r1, [r1, #4]
 800d370:	e7cc      	b.n	800d30c <_malloc_r+0x2c>
 800d372:	1cc4      	adds	r4, r0, #3
 800d374:	f024 0403 	bic.w	r4, r4, #3
 800d378:	42a0      	cmp	r0, r4
 800d37a:	d005      	beq.n	800d388 <_malloc_r+0xa8>
 800d37c:	1a21      	subs	r1, r4, r0
 800d37e:	4630      	mov	r0, r6
 800d380:	f000 f95a 	bl	800d638 <_sbrk_r>
 800d384:	3001      	adds	r0, #1
 800d386:	d0cf      	beq.n	800d328 <_malloc_r+0x48>
 800d388:	6025      	str	r5, [r4, #0]
 800d38a:	e7db      	b.n	800d344 <_malloc_r+0x64>
 800d38c:	20006a28 	.word	0x20006a28
 800d390:	20006a2c 	.word	0x20006a2c

0800d394 <__ssputs_r>:
 800d394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d398:	688e      	ldr	r6, [r1, #8]
 800d39a:	429e      	cmp	r6, r3
 800d39c:	4682      	mov	sl, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	4690      	mov	r8, r2
 800d3a2:	4699      	mov	r9, r3
 800d3a4:	d837      	bhi.n	800d416 <__ssputs_r+0x82>
 800d3a6:	898a      	ldrh	r2, [r1, #12]
 800d3a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3ac:	d031      	beq.n	800d412 <__ssputs_r+0x7e>
 800d3ae:	6825      	ldr	r5, [r4, #0]
 800d3b0:	6909      	ldr	r1, [r1, #16]
 800d3b2:	1a6f      	subs	r7, r5, r1
 800d3b4:	6965      	ldr	r5, [r4, #20]
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3bc:	fb95 f5f3 	sdiv	r5, r5, r3
 800d3c0:	f109 0301 	add.w	r3, r9, #1
 800d3c4:	443b      	add	r3, r7
 800d3c6:	429d      	cmp	r5, r3
 800d3c8:	bf38      	it	cc
 800d3ca:	461d      	movcc	r5, r3
 800d3cc:	0553      	lsls	r3, r2, #21
 800d3ce:	d530      	bpl.n	800d432 <__ssputs_r+0x9e>
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	f7ff ff85 	bl	800d2e0 <_malloc_r>
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	b950      	cbnz	r0, 800d3f0 <__ssputs_r+0x5c>
 800d3da:	230c      	movs	r3, #12
 800d3dc:	f8ca 3000 	str.w	r3, [sl]
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e6:	81a3      	strh	r3, [r4, #12]
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f0:	463a      	mov	r2, r7
 800d3f2:	6921      	ldr	r1, [r4, #16]
 800d3f4:	f7fc fc20 	bl	8009c38 <memcpy>
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	6126      	str	r6, [r4, #16]
 800d406:	6165      	str	r5, [r4, #20]
 800d408:	443e      	add	r6, r7
 800d40a:	1bed      	subs	r5, r5, r7
 800d40c:	6026      	str	r6, [r4, #0]
 800d40e:	60a5      	str	r5, [r4, #8]
 800d410:	464e      	mov	r6, r9
 800d412:	454e      	cmp	r6, r9
 800d414:	d900      	bls.n	800d418 <__ssputs_r+0x84>
 800d416:	464e      	mov	r6, r9
 800d418:	4632      	mov	r2, r6
 800d41a:	4641      	mov	r1, r8
 800d41c:	6820      	ldr	r0, [r4, #0]
 800d41e:	f000 f93a 	bl	800d696 <memmove>
 800d422:	68a3      	ldr	r3, [r4, #8]
 800d424:	1b9b      	subs	r3, r3, r6
 800d426:	60a3      	str	r3, [r4, #8]
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	441e      	add	r6, r3
 800d42c:	6026      	str	r6, [r4, #0]
 800d42e:	2000      	movs	r0, #0
 800d430:	e7dc      	b.n	800d3ec <__ssputs_r+0x58>
 800d432:	462a      	mov	r2, r5
 800d434:	f000 f94a 	bl	800d6cc <_realloc_r>
 800d438:	4606      	mov	r6, r0
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d1e2      	bne.n	800d404 <__ssputs_r+0x70>
 800d43e:	6921      	ldr	r1, [r4, #16]
 800d440:	4650      	mov	r0, sl
 800d442:	f7ff feff 	bl	800d244 <_free_r>
 800d446:	e7c8      	b.n	800d3da <__ssputs_r+0x46>

0800d448 <_svfiprintf_r>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	461d      	mov	r5, r3
 800d44e:	898b      	ldrh	r3, [r1, #12]
 800d450:	061f      	lsls	r7, r3, #24
 800d452:	b09d      	sub	sp, #116	; 0x74
 800d454:	4680      	mov	r8, r0
 800d456:	460c      	mov	r4, r1
 800d458:	4616      	mov	r6, r2
 800d45a:	d50f      	bpl.n	800d47c <_svfiprintf_r+0x34>
 800d45c:	690b      	ldr	r3, [r1, #16]
 800d45e:	b96b      	cbnz	r3, 800d47c <_svfiprintf_r+0x34>
 800d460:	2140      	movs	r1, #64	; 0x40
 800d462:	f7ff ff3d 	bl	800d2e0 <_malloc_r>
 800d466:	6020      	str	r0, [r4, #0]
 800d468:	6120      	str	r0, [r4, #16]
 800d46a:	b928      	cbnz	r0, 800d478 <_svfiprintf_r+0x30>
 800d46c:	230c      	movs	r3, #12
 800d46e:	f8c8 3000 	str.w	r3, [r8]
 800d472:	f04f 30ff 	mov.w	r0, #4294967295
 800d476:	e0c8      	b.n	800d60a <_svfiprintf_r+0x1c2>
 800d478:	2340      	movs	r3, #64	; 0x40
 800d47a:	6163      	str	r3, [r4, #20]
 800d47c:	2300      	movs	r3, #0
 800d47e:	9309      	str	r3, [sp, #36]	; 0x24
 800d480:	2320      	movs	r3, #32
 800d482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d486:	2330      	movs	r3, #48	; 0x30
 800d488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d48c:	9503      	str	r5, [sp, #12]
 800d48e:	f04f 0b01 	mov.w	fp, #1
 800d492:	4637      	mov	r7, r6
 800d494:	463d      	mov	r5, r7
 800d496:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d49a:	b10b      	cbz	r3, 800d4a0 <_svfiprintf_r+0x58>
 800d49c:	2b25      	cmp	r3, #37	; 0x25
 800d49e:	d13e      	bne.n	800d51e <_svfiprintf_r+0xd6>
 800d4a0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d4a4:	d00b      	beq.n	800d4be <_svfiprintf_r+0x76>
 800d4a6:	4653      	mov	r3, sl
 800d4a8:	4632      	mov	r2, r6
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	f7ff ff71 	bl	800d394 <__ssputs_r>
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	f000 80a4 	beq.w	800d600 <_svfiprintf_r+0x1b8>
 800d4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ba:	4453      	add	r3, sl
 800d4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4be:	783b      	ldrb	r3, [r7, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 809d 	beq.w	800d600 <_svfiprintf_r+0x1b8>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4d0:	9304      	str	r3, [sp, #16]
 800d4d2:	9307      	str	r3, [sp, #28]
 800d4d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4d8:	931a      	str	r3, [sp, #104]	; 0x68
 800d4da:	462f      	mov	r7, r5
 800d4dc:	2205      	movs	r2, #5
 800d4de:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d4e2:	4850      	ldr	r0, [pc, #320]	; (800d624 <_svfiprintf_r+0x1dc>)
 800d4e4:	f7f2 fea4 	bl	8000230 <memchr>
 800d4e8:	9b04      	ldr	r3, [sp, #16]
 800d4ea:	b9d0      	cbnz	r0, 800d522 <_svfiprintf_r+0xda>
 800d4ec:	06d9      	lsls	r1, r3, #27
 800d4ee:	bf44      	itt	mi
 800d4f0:	2220      	movmi	r2, #32
 800d4f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4f6:	071a      	lsls	r2, r3, #28
 800d4f8:	bf44      	itt	mi
 800d4fa:	222b      	movmi	r2, #43	; 0x2b
 800d4fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d500:	782a      	ldrb	r2, [r5, #0]
 800d502:	2a2a      	cmp	r2, #42	; 0x2a
 800d504:	d015      	beq.n	800d532 <_svfiprintf_r+0xea>
 800d506:	9a07      	ldr	r2, [sp, #28]
 800d508:	462f      	mov	r7, r5
 800d50a:	2000      	movs	r0, #0
 800d50c:	250a      	movs	r5, #10
 800d50e:	4639      	mov	r1, r7
 800d510:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d514:	3b30      	subs	r3, #48	; 0x30
 800d516:	2b09      	cmp	r3, #9
 800d518:	d94d      	bls.n	800d5b6 <_svfiprintf_r+0x16e>
 800d51a:	b1b8      	cbz	r0, 800d54c <_svfiprintf_r+0x104>
 800d51c:	e00f      	b.n	800d53e <_svfiprintf_r+0xf6>
 800d51e:	462f      	mov	r7, r5
 800d520:	e7b8      	b.n	800d494 <_svfiprintf_r+0x4c>
 800d522:	4a40      	ldr	r2, [pc, #256]	; (800d624 <_svfiprintf_r+0x1dc>)
 800d524:	1a80      	subs	r0, r0, r2
 800d526:	fa0b f000 	lsl.w	r0, fp, r0
 800d52a:	4318      	orrs	r0, r3
 800d52c:	9004      	str	r0, [sp, #16]
 800d52e:	463d      	mov	r5, r7
 800d530:	e7d3      	b.n	800d4da <_svfiprintf_r+0x92>
 800d532:	9a03      	ldr	r2, [sp, #12]
 800d534:	1d11      	adds	r1, r2, #4
 800d536:	6812      	ldr	r2, [r2, #0]
 800d538:	9103      	str	r1, [sp, #12]
 800d53a:	2a00      	cmp	r2, #0
 800d53c:	db01      	blt.n	800d542 <_svfiprintf_r+0xfa>
 800d53e:	9207      	str	r2, [sp, #28]
 800d540:	e004      	b.n	800d54c <_svfiprintf_r+0x104>
 800d542:	4252      	negs	r2, r2
 800d544:	f043 0302 	orr.w	r3, r3, #2
 800d548:	9207      	str	r2, [sp, #28]
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	783b      	ldrb	r3, [r7, #0]
 800d54e:	2b2e      	cmp	r3, #46	; 0x2e
 800d550:	d10c      	bne.n	800d56c <_svfiprintf_r+0x124>
 800d552:	787b      	ldrb	r3, [r7, #1]
 800d554:	2b2a      	cmp	r3, #42	; 0x2a
 800d556:	d133      	bne.n	800d5c0 <_svfiprintf_r+0x178>
 800d558:	9b03      	ldr	r3, [sp, #12]
 800d55a:	1d1a      	adds	r2, r3, #4
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	9203      	str	r2, [sp, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	bfb8      	it	lt
 800d564:	f04f 33ff 	movlt.w	r3, #4294967295
 800d568:	3702      	adds	r7, #2
 800d56a:	9305      	str	r3, [sp, #20]
 800d56c:	4d2e      	ldr	r5, [pc, #184]	; (800d628 <_svfiprintf_r+0x1e0>)
 800d56e:	7839      	ldrb	r1, [r7, #0]
 800d570:	2203      	movs	r2, #3
 800d572:	4628      	mov	r0, r5
 800d574:	f7f2 fe5c 	bl	8000230 <memchr>
 800d578:	b138      	cbz	r0, 800d58a <_svfiprintf_r+0x142>
 800d57a:	2340      	movs	r3, #64	; 0x40
 800d57c:	1b40      	subs	r0, r0, r5
 800d57e:	fa03 f000 	lsl.w	r0, r3, r0
 800d582:	9b04      	ldr	r3, [sp, #16]
 800d584:	4303      	orrs	r3, r0
 800d586:	3701      	adds	r7, #1
 800d588:	9304      	str	r3, [sp, #16]
 800d58a:	7839      	ldrb	r1, [r7, #0]
 800d58c:	4827      	ldr	r0, [pc, #156]	; (800d62c <_svfiprintf_r+0x1e4>)
 800d58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d592:	2206      	movs	r2, #6
 800d594:	1c7e      	adds	r6, r7, #1
 800d596:	f7f2 fe4b 	bl	8000230 <memchr>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d038      	beq.n	800d610 <_svfiprintf_r+0x1c8>
 800d59e:	4b24      	ldr	r3, [pc, #144]	; (800d630 <_svfiprintf_r+0x1e8>)
 800d5a0:	bb13      	cbnz	r3, 800d5e8 <_svfiprintf_r+0x1a0>
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	3307      	adds	r3, #7
 800d5a6:	f023 0307 	bic.w	r3, r3, #7
 800d5aa:	3308      	adds	r3, #8
 800d5ac:	9303      	str	r3, [sp, #12]
 800d5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b0:	444b      	add	r3, r9
 800d5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b4:	e76d      	b.n	800d492 <_svfiprintf_r+0x4a>
 800d5b6:	fb05 3202 	mla	r2, r5, r2, r3
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	460f      	mov	r7, r1
 800d5be:	e7a6      	b.n	800d50e <_svfiprintf_r+0xc6>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	3701      	adds	r7, #1
 800d5c4:	9305      	str	r3, [sp, #20]
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	250a      	movs	r5, #10
 800d5ca:	4638      	mov	r0, r7
 800d5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5d0:	3a30      	subs	r2, #48	; 0x30
 800d5d2:	2a09      	cmp	r2, #9
 800d5d4:	d903      	bls.n	800d5de <_svfiprintf_r+0x196>
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d0c8      	beq.n	800d56c <_svfiprintf_r+0x124>
 800d5da:	9105      	str	r1, [sp, #20]
 800d5dc:	e7c6      	b.n	800d56c <_svfiprintf_r+0x124>
 800d5de:	fb05 2101 	mla	r1, r5, r1, r2
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	e7f0      	b.n	800d5ca <_svfiprintf_r+0x182>
 800d5e8:	ab03      	add	r3, sp, #12
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	4622      	mov	r2, r4
 800d5ee:	4b11      	ldr	r3, [pc, #68]	; (800d634 <_svfiprintf_r+0x1ec>)
 800d5f0:	a904      	add	r1, sp, #16
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	f7fc fbc8 	bl	8009d88 <_printf_float>
 800d5f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d5fc:	4681      	mov	r9, r0
 800d5fe:	d1d6      	bne.n	800d5ae <_svfiprintf_r+0x166>
 800d600:	89a3      	ldrh	r3, [r4, #12]
 800d602:	065b      	lsls	r3, r3, #25
 800d604:	f53f af35 	bmi.w	800d472 <_svfiprintf_r+0x2a>
 800d608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d60a:	b01d      	add	sp, #116	; 0x74
 800d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d610:	ab03      	add	r3, sp, #12
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	4622      	mov	r2, r4
 800d616:	4b07      	ldr	r3, [pc, #28]	; (800d634 <_svfiprintf_r+0x1ec>)
 800d618:	a904      	add	r1, sp, #16
 800d61a:	4640      	mov	r0, r8
 800d61c:	f7fc fe6a 	bl	800a2f4 <_printf_i>
 800d620:	e7ea      	b.n	800d5f8 <_svfiprintf_r+0x1b0>
 800d622:	bf00      	nop
 800d624:	0800f8d4 	.word	0x0800f8d4
 800d628:	0800f8da 	.word	0x0800f8da
 800d62c:	0800f8de 	.word	0x0800f8de
 800d630:	08009d89 	.word	0x08009d89
 800d634:	0800d395 	.word	0x0800d395

0800d638 <_sbrk_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4c06      	ldr	r4, [pc, #24]	; (800d654 <_sbrk_r+0x1c>)
 800d63c:	2300      	movs	r3, #0
 800d63e:	4605      	mov	r5, r0
 800d640:	4608      	mov	r0, r1
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	f7f5 fb7a 	bl	8002d3c <_sbrk>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_sbrk_r+0x1a>
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_sbrk_r+0x1a>
 800d650:	602b      	str	r3, [r5, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	2000722c 	.word	0x2000722c

0800d658 <strncmp>:
 800d658:	b510      	push	{r4, lr}
 800d65a:	b16a      	cbz	r2, 800d678 <strncmp+0x20>
 800d65c:	3901      	subs	r1, #1
 800d65e:	1884      	adds	r4, r0, r2
 800d660:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d664:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d668:	4293      	cmp	r3, r2
 800d66a:	d103      	bne.n	800d674 <strncmp+0x1c>
 800d66c:	42a0      	cmp	r0, r4
 800d66e:	d001      	beq.n	800d674 <strncmp+0x1c>
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1f5      	bne.n	800d660 <strncmp+0x8>
 800d674:	1a98      	subs	r0, r3, r2
 800d676:	bd10      	pop	{r4, pc}
 800d678:	4610      	mov	r0, r2
 800d67a:	e7fc      	b.n	800d676 <strncmp+0x1e>

0800d67c <__ascii_wctomb>:
 800d67c:	b149      	cbz	r1, 800d692 <__ascii_wctomb+0x16>
 800d67e:	2aff      	cmp	r2, #255	; 0xff
 800d680:	bf85      	ittet	hi
 800d682:	238a      	movhi	r3, #138	; 0x8a
 800d684:	6003      	strhi	r3, [r0, #0]
 800d686:	700a      	strbls	r2, [r1, #0]
 800d688:	f04f 30ff 	movhi.w	r0, #4294967295
 800d68c:	bf98      	it	ls
 800d68e:	2001      	movls	r0, #1
 800d690:	4770      	bx	lr
 800d692:	4608      	mov	r0, r1
 800d694:	4770      	bx	lr

0800d696 <memmove>:
 800d696:	4288      	cmp	r0, r1
 800d698:	b510      	push	{r4, lr}
 800d69a:	eb01 0302 	add.w	r3, r1, r2
 800d69e:	d807      	bhi.n	800d6b0 <memmove+0x1a>
 800d6a0:	1e42      	subs	r2, r0, #1
 800d6a2:	4299      	cmp	r1, r3
 800d6a4:	d00a      	beq.n	800d6bc <memmove+0x26>
 800d6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6aa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d6ae:	e7f8      	b.n	800d6a2 <memmove+0xc>
 800d6b0:	4283      	cmp	r3, r0
 800d6b2:	d9f5      	bls.n	800d6a0 <memmove+0xa>
 800d6b4:	1881      	adds	r1, r0, r2
 800d6b6:	1ad2      	subs	r2, r2, r3
 800d6b8:	42d3      	cmn	r3, r2
 800d6ba:	d100      	bne.n	800d6be <memmove+0x28>
 800d6bc:	bd10      	pop	{r4, pc}
 800d6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d6c6:	e7f7      	b.n	800d6b8 <memmove+0x22>

0800d6c8 <__malloc_lock>:
 800d6c8:	4770      	bx	lr

0800d6ca <__malloc_unlock>:
 800d6ca:	4770      	bx	lr

0800d6cc <_realloc_r>:
 800d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ce:	4607      	mov	r7, r0
 800d6d0:	4614      	mov	r4, r2
 800d6d2:	460e      	mov	r6, r1
 800d6d4:	b921      	cbnz	r1, 800d6e0 <_realloc_r+0x14>
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6dc:	f7ff be00 	b.w	800d2e0 <_malloc_r>
 800d6e0:	b922      	cbnz	r2, 800d6ec <_realloc_r+0x20>
 800d6e2:	f7ff fdaf 	bl	800d244 <_free_r>
 800d6e6:	4625      	mov	r5, r4
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ec:	f000 f814 	bl	800d718 <_malloc_usable_size_r>
 800d6f0:	42a0      	cmp	r0, r4
 800d6f2:	d20f      	bcs.n	800d714 <_realloc_r+0x48>
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	f7ff fdf2 	bl	800d2e0 <_malloc_r>
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d0f2      	beq.n	800d6e8 <_realloc_r+0x1c>
 800d702:	4631      	mov	r1, r6
 800d704:	4622      	mov	r2, r4
 800d706:	f7fc fa97 	bl	8009c38 <memcpy>
 800d70a:	4631      	mov	r1, r6
 800d70c:	4638      	mov	r0, r7
 800d70e:	f7ff fd99 	bl	800d244 <_free_r>
 800d712:	e7e9      	b.n	800d6e8 <_realloc_r+0x1c>
 800d714:	4635      	mov	r5, r6
 800d716:	e7e7      	b.n	800d6e8 <_realloc_r+0x1c>

0800d718 <_malloc_usable_size_r>:
 800d718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d71c:	1f18      	subs	r0, r3, #4
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bfbc      	itt	lt
 800d722:	580b      	ldrlt	r3, [r1, r0]
 800d724:	18c0      	addlt	r0, r0, r3
 800d726:	4770      	bx	lr

0800d728 <_init>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	bf00      	nop
 800d72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d72e:	bc08      	pop	{r3}
 800d730:	469e      	mov	lr, r3
 800d732:	4770      	bx	lr

0800d734 <_fini>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	bf00      	nop
 800d738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73a:	bc08      	pop	{r3}
 800d73c:	469e      	mov	lr, r3
 800d73e:	4770      	bx	lr
